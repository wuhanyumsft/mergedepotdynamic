{"content":"    \r\n    <h1 id=\"System_Windows_Media_Animation_Storyboard\">\r\n      <span class=\"lang-csharp\">Storyboard</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>A container timeline that provides object and property targeting information for its child animations.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class Storyboard : System.Windows.Media.Animation.ParallelTimeline</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.threading.dispatcherobject\" data-linktype=\"relative-path\">DispatcherObject</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.dependencyobject\" data-linktype=\"relative-path\">DependencyObject</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l3\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.freezable\" data-linktype=\"relative-path\">Freezable</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l4\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.animatable\" data-linktype=\"relative-path\">Animatable</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l5\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.timeline\" data-linktype=\"relative-path\">Timeline</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l6\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.timelinegroup\" data-linktype=\"relative-path\">TimelineGroup</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l7\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.paralleltimeline\" data-linktype=\"relative-path\">System.Windows.Media.Animation.ParallelTimeline</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l8\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Storyboard</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_ClearValue_System_Windows_DependencyProperty_\" data-linktype=\"relative-path\">ClearValue(DependencyProperty)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_ClearValue_System_Windows_DependencyPropertyKey_\" data-linktype=\"relative-path\">ClearValue(DependencyPropertyKey)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_CoerceValue_System_Windows_DependencyProperty_\" data-linktype=\"relative-path\">CoerceValue(DependencyProperty)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_DependencyObjectType\" data-linktype=\"relative-path\">DependencyObjectType</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_GetLocalValueEnumerator\" data-linktype=\"relative-path\">GetLocalValueEnumerator()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_GetValue_System_Windows_DependencyProperty_\" data-linktype=\"relative-path\">GetValue(DependencyProperty)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_InvalidateProperty_System_Windows_DependencyProperty_\" data-linktype=\"relative-path\">InvalidateProperty(DependencyProperty)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_IsSealed\" data-linktype=\"relative-path\">IsSealed</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_ReadLocalValue_System_Windows_DependencyProperty_\" data-linktype=\"relative-path\">ReadLocalValue(DependencyProperty)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_SetCurrentValue_System_Windows_DependencyProperty_System_Object_\" data-linktype=\"relative-path\">SetCurrentValue(DependencyProperty,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_SetValue_System_Windows_DependencyProperty_System_Object_\" data-linktype=\"relative-path\">SetValue(DependencyProperty,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_SetValue_System_Windows_DependencyPropertyKey_System_Object_\" data-linktype=\"relative-path\">SetValue(DependencyPropertyKey,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_ShouldSerializeProperty_System_Windows_DependencyProperty_\" data-linktype=\"relative-path\">ShouldSerializeProperty(DependencyProperty)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.freezable#System_Windows_Freezable_CanFreeze\" data-linktype=\"relative-path\">CanFreeze</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.freezable#System_Windows_Freezable_Changed\" data-linktype=\"relative-path\">Changed</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.freezable#System_Windows_Freezable_CloneCore_System_Windows_Freezable_\" data-linktype=\"relative-path\">CloneCore(Freezable)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.freezable#System_Windows_Freezable_CloneCurrentValueCore_System_Windows_Freezable_\" data-linktype=\"relative-path\">CloneCurrentValueCore(Freezable)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.freezable#System_Windows_Freezable_CreateInstance\" data-linktype=\"relative-path\">CreateInstance()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.freezable#System_Windows_Freezable_Freeze\" data-linktype=\"relative-path\">Freeze()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.freezable#System_Windows_Freezable_Freeze_System_Windows_Freezable_System_Boolean_\" data-linktype=\"relative-path\">Freeze(Freezable,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.freezable#System_Windows_Freezable_GetAsFrozen\" data-linktype=\"relative-path\">GetAsFrozen()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.freezable#System_Windows_Freezable_GetCurrentValueAsFrozen\" data-linktype=\"relative-path\">GetCurrentValueAsFrozen()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.freezable#System_Windows_Freezable_IsFrozen\" data-linktype=\"relative-path\">IsFrozen</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.freezable#System_Windows_Freezable_OnChanged\" data-linktype=\"relative-path\">OnChanged()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.freezable#System_Windows_Freezable_OnFreezablePropertyChanged_System_Windows_DependencyObject_System_Windows_DependencyObject_\" data-linktype=\"relative-path\">OnFreezablePropertyChanged(DependencyObject,DependencyObject)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.freezable#System_Windows_Freezable_OnFreezablePropertyChanged_System_Windows_DependencyObject_System_Windows_DependencyObject_System_Windows_DependencyProperty_\" data-linktype=\"relative-path\">OnFreezablePropertyChanged(DependencyObject,DependencyObject,DependencyProperty)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.freezable#System_Windows_Freezable_OnPropertyChanged_System_Windows_DependencyPropertyChangedEventArgs_\" data-linktype=\"relative-path\">OnPropertyChanged(DependencyPropertyChangedEventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.freezable#System_Windows_Freezable_ReadPreamble\" data-linktype=\"relative-path\">ReadPreamble()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.freezable#System_Windows_Freezable_WritePostscript\" data-linktype=\"relative-path\">WritePostscript()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.freezable#System_Windows_Freezable_WritePreamble\" data-linktype=\"relative-path\">WritePreamble()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.animatable#System_Windows_Media_Animation_Animatable_ApplyAnimationClock_System_Windows_DependencyProperty_System_Windows_Media_Animation_AnimationClock_\" data-linktype=\"relative-path\">ApplyAnimationClock(DependencyProperty,AnimationClock)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.animatable#System_Windows_Media_Animation_Animatable_ApplyAnimationClock_System_Windows_DependencyProperty_System_Windows_Media_Animation_AnimationClock_System_Windows_Media_Animation_HandoffBehavior_\" data-linktype=\"relative-path\">ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.animatable#System_Windows_Media_Animation_Animatable_BeginAnimation_System_Windows_DependencyProperty_System_Windows_Media_Animation_AnimationTimeline_\" data-linktype=\"relative-path\">BeginAnimation(DependencyProperty,AnimationTimeline)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.animatable#System_Windows_Media_Animation_Animatable_BeginAnimation_System_Windows_DependencyProperty_System_Windows_Media_Animation_AnimationTimeline_System_Windows_Media_Animation_HandoffBehavior_\" data-linktype=\"relative-path\">BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.animatable#System_Windows_Media_Animation_Animatable_GetAnimationBaseValue_System_Windows_DependencyProperty_\" data-linktype=\"relative-path\">GetAnimationBaseValue(DependencyProperty)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.animatable#System_Windows_Media_Animation_Animatable_HasAnimatedProperties\" data-linktype=\"relative-path\">HasAnimatedProperties</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.animatable#System_Windows_Media_Animation_Animatable_ShouldSerializeStoredWeakReference_System_Windows_DependencyObject_\" data-linktype=\"relative-path\">ShouldSerializeStoredWeakReference(DependencyObject)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.paralleltimeline#System_Windows_Media_Animation_ParallelTimeline_CloneCurrentValue\" data-linktype=\"relative-path\">CloneCurrentValue()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.paralleltimeline#System_Windows_Media_Animation_ParallelTimeline_GetNaturalDurationCore_System_Windows_Media_Animation_Clock_\" data-linktype=\"relative-path\">GetNaturalDurationCore(Clock)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.paralleltimeline#System_Windows_Media_Animation_ParallelTimeline_SlipBehavior\" data-linktype=\"relative-path\">SlipBehavior</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.paralleltimeline#System_Windows_Media_Animation_ParallelTimeline_SlipBehaviorProperty\" data-linktype=\"relative-path\">SlipBehaviorProperty</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_AccelerationRatio\" data-linktype=\"relative-path\">AccelerationRatio</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_AccelerationRatioProperty\" data-linktype=\"relative-path\">AccelerationRatioProperty</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_AutoReverse\" data-linktype=\"relative-path\">AutoReverse</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_AutoReverseProperty\" data-linktype=\"relative-path\">AutoReverseProperty</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_BeginTime\" data-linktype=\"relative-path\">BeginTime</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_BeginTimeProperty\" data-linktype=\"relative-path\">BeginTimeProperty</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_Completed\" data-linktype=\"relative-path\">Completed</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_CreateClock_System_Boolean_\" data-linktype=\"relative-path\">CreateClock(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_CurrentGlobalSpeedInvalidated\" data-linktype=\"relative-path\">CurrentGlobalSpeedInvalidated</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_CurrentStateInvalidated\" data-linktype=\"relative-path\">CurrentStateInvalidated</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_CurrentTimeInvalidated\" data-linktype=\"relative-path\">CurrentTimeInvalidated</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_DecelerationRatio\" data-linktype=\"relative-path\">DecelerationRatio</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_DecelerationRatioProperty\" data-linktype=\"relative-path\">DecelerationRatioProperty</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_DesiredFrameRateProperty\" data-linktype=\"relative-path\">DesiredFrameRateProperty</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_Duration\" data-linktype=\"relative-path\">Duration</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_DurationProperty\" data-linktype=\"relative-path\">DurationProperty</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_FillBehavior\" data-linktype=\"relative-path\">FillBehavior</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_FillBehaviorProperty\" data-linktype=\"relative-path\">FillBehaviorProperty</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_FreezeCore_System_Boolean_\" data-linktype=\"relative-path\">FreezeCore(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_GetAsFrozenCore_System_Windows_Freezable_\" data-linktype=\"relative-path\">GetAsFrozenCore(Freezable)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_GetCurrentValueAsFrozenCore_System_Windows_Freezable_\" data-linktype=\"relative-path\">GetCurrentValueAsFrozenCore(Freezable)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_GetDesiredFrameRate_System_Windows_Media_Animation_Timeline_\" data-linktype=\"relative-path\">GetDesiredFrameRate(Timeline)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_GetNaturalDuration_System_Windows_Media_Animation_Clock_\" data-linktype=\"relative-path\">GetNaturalDuration(Clock)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_Name\" data-linktype=\"relative-path\">Name</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_NameProperty\" data-linktype=\"relative-path\">NameProperty</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_RemoveRequested\" data-linktype=\"relative-path\">RemoveRequested</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_RepeatBehavior\" data-linktype=\"relative-path\">RepeatBehavior</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_RepeatBehaviorProperty\" data-linktype=\"relative-path\">RepeatBehaviorProperty</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_SetDesiredFrameRate_System_Windows_Media_Animation_Timeline_System_Nullable_System_Int32__\" data-linktype=\"relative-path\">SetDesiredFrameRate(Timeline,Nullable&lt;Int32&gt;)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_SpeedRatio\" data-linktype=\"relative-path\">SpeedRatio</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_SpeedRatioProperty\" data-linktype=\"relative-path\">SpeedRatioProperty</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.timelinegroup#System_Windows_Media_Animation_TimelineGroup_AddChild_System_Object_\" data-linktype=\"relative-path\">AddChild(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.timelinegroup#System_Windows_Media_Animation_TimelineGroup_AddText_System_String_\" data-linktype=\"relative-path\">AddText(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.timelinegroup#System_Windows_Media_Animation_TimelineGroup_AllocateClock\" data-linktype=\"relative-path\">AllocateClock()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.timelinegroup#System_Windows_Media_Animation_TimelineGroup_Children\" data-linktype=\"relative-path\">Children</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.timelinegroup#System_Windows_Media_Animation_TimelineGroup_ChildrenProperty\" data-linktype=\"relative-path\">ChildrenProperty</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.timelinegroup#System_Windows_Media_Animation_TimelineGroup_CreateClock\" data-linktype=\"relative-path\">CreateClock()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.timelinegroup#System_Windows_Media_Animation_TimelineGroup_System_Windows_Markup_IAddChild_AddChild_System_Object_\" data-linktype=\"relative-path\">IAddChild.AddChild(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.media.animation.timelinegroup#System_Windows_Media_Animation_TimelineGroup_System_Windows_Markup_IAddChild_AddText_System_String_\" data-linktype=\"relative-path\">IAddChild.AddText(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.threading.dispatcherobject#System_Windows_Threading_DispatcherObject_CheckAccess\" data-linktype=\"relative-path\">CheckAccess()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.threading.dispatcherobject#System_Windows_Threading_DispatcherObject_Dispatcher\" data-linktype=\"relative-path\">Dispatcher</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.threading.dispatcherobject#System_Windows_Threading_DispatcherObject_VerifyAccess\" data-linktype=\"relative-path\">VerifyAccess()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <h2 id=\"interactively-controlling-storyboards\">Interactively Controlling Storyboards</h2>\n<p> A controllable storyboard can pause, resume, seek, stop, and be removed. To make a storyboard controllable in markup, you specify the <a class=\"xref\" href=\"system.windows.media.animation.beginstoryboard#System_Windows_Media_Animation_BeginStoryboard_Name_\" data-linktype=\"relative-path\">Name</a> property of the <a class=\"xref\" href=\"system.windows.media.animation.beginstoryboard\" data-linktype=\"relative-path\">BeginStoryboard</a> object that creates it; for an example, see <a href=\"../Topic/How%20to:%20Use%20Event%20Triggers%20to%20Control%20a%20Storyboard%20After%20It%20Starts.md\" data-linktype=\"relative-path\">How to: Use Event Triggers to Control a Storyboard After It Starts</a>. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method and specify <code>true</code> to make it controllable. For an example, see <a href=\"../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md\" data-linktype=\"relative-path\">How to: Control a Storyboard After It Starts</a>.  </p>\n<h2 id=\"data-binding-and-animating-timelines\">Data Binding and Animating Timelines</h2>\n<p> Most timeline properties can be data bound or animated; however, because of the way the timing system works, data bound or animated timelines do not behave like other data bound or animated objects. To understand their behavior, it helps to understand what it means to activate a timeline.  </p>\n<p> When a timeline is activated, copies are made of the timeline and its child timelines. These copies are frozen (made read-only) and <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> objects are created from them. These clocks do the actual work of animating the targeted properties. If a timeline is data bound or animated, a snapshot of its current values is made when its clock is created. Even though the original timeline might continue to change, its clock does not.  </p>\n<p> For a timeline to reflect data binding or animation changes, its clock must be re-created. Clocks are not re-created for you automatically. The following are several ways to apply timeline changes:  </p>\n<ul>\n<li><p>If the timeline is or belongs to a Storyboard, you can make it reflect changes by reapplying its storyboard using a <a class=\"xref\" href=\"system.windows.media.animation.beginstoryboard\" data-linktype=\"relative-path\">BeginStoryboard</a> or the <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method. This has the side effect of also restarting the animation. In code, you can use the <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Seek_\" data-linktype=\"relative-path\">Seek</a> method to advance the storyboard back to its previous position.  </p>\n</li>\n<li><p>If you applied an animation directly to a property using the <a class=\"xref\" href=\"system.windows.media.animation.animatable#System_Windows_Media_Animation_Animatable_BeginAnimation_\" data-linktype=\"relative-path\">BeginAnimation</a> method, call the <a class=\"xref\" href=\"system.windows.media.animation.animatable#System_Windows_Media_Animation_Animatable_BeginAnimation_\" data-linktype=\"relative-path\">BeginAnimation</a> method again and pass it the animation that has been modified.  </p>\n</li>\n<li><p>If you are working directly at the clock level, create and apply a new set of clocks and use them to replace the previous set of created clocks.  </p>\n<p>For an example of a data bound animation, see <a href=\"http://go.microsoft.com/fwlink/?LinkID=160011\" data-linktype=\"external\">Key Spline Animation Sample</a> .</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard__ctor\" data-linktype=\"self-bookmark\">Storyboard()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Fields\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_TargetNameProperty\" data-linktype=\"self-bookmark\">TargetNameProperty</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.TargetName*</span> attached property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_TargetProperty\" data-linktype=\"self-bookmark\">TargetProperty</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.Target*</span> attached property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_TargetPropertyProperty\" data-linktype=\"self-bookmark\">TargetPropertyProperty</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.TargetProperty*</span> attached property.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_Begin\" data-linktype=\"self-bookmark\">Begin()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Applies the animations associated with this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> to their targets and initiates them.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_Begin_System_Windows_FrameworkContentElement_\" data-linktype=\"self-bookmark\">Begin(FrameworkContentElement)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Applies the animations associated with this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> to their targets and initiates them.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_Begin_System_Windows_FrameworkElement_\" data-linktype=\"self-bookmark\">Begin(FrameworkElement)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Applies the animations associated with this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> to their targets and initiates them.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_Begin_System_Windows_FrameworkContentElement_System_Boolean_\" data-linktype=\"self-bookmark\">Begin(FrameworkContentElement,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Applies the animations associated with this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> to their targets and initiates them.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_Begin_System_Windows_FrameworkContentElement_System_Windows_Media_Animation_HandoffBehavior_\" data-linktype=\"self-bookmark\">Begin(FrameworkContentElement,HandoffBehavior)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Applies the animations associated with this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> to their targets and initiates them, using the specified <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_Begin_System_Windows_FrameworkElement_System_Boolean_\" data-linktype=\"self-bookmark\">Begin(FrameworkElement,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Applies the animations associated with this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> to their targets and initiates them.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_Begin_System_Windows_FrameworkElement_System_Windows_FrameworkTemplate_\" data-linktype=\"self-bookmark\">Begin(FrameworkElement,FrameworkTemplate)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Applies the animations associated with this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> to their targets within the specified template and initiates them.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_Begin_System_Windows_FrameworkElement_System_Windows_Media_Animation_HandoffBehavior_\" data-linktype=\"self-bookmark\">Begin(FrameworkElement,HandoffBehavior)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Applies the animations associated with this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> to their targets and initiates them, using the specified <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_Begin_System_Windows_FrameworkContentElement_System_Windows_Media_Animation_HandoffBehavior_System_Boolean_\" data-linktype=\"self-bookmark\">Begin(FrameworkContentElement,HandoffBehavior,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Applies the animations associated with this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> to their targets and initiates them, using the specified <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_Begin_System_Windows_FrameworkElement_System_Windows_FrameworkTemplate_System_Boolean_\" data-linktype=\"self-bookmark\">Begin(FrameworkElement,FrameworkTemplate,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Applies the animations associated with this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> to their targets within the specified template and initiates them.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_Begin_System_Windows_FrameworkElement_System_Windows_FrameworkTemplate_System_Windows_Media_Animation_HandoffBehavior_\" data-linktype=\"self-bookmark\">Begin(FrameworkElement,FrameworkTemplate,HandoffBehavior)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Applies the animations associated with this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> to their targets within the specified template and initiates them.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_Begin_System_Windows_FrameworkElement_System_Windows_Media_Animation_HandoffBehavior_System_Boolean_\" data-linktype=\"self-bookmark\">Begin(FrameworkElement,HandoffBehavior,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Applies the animations associated with this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> to their targets and initiates them.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_Begin_System_Windows_FrameworkElement_System_Windows_FrameworkTemplate_System_Windows_Media_Animation_HandoffBehavior_System_Boolean_\" data-linktype=\"self-bookmark\">Begin(FrameworkElement,FrameworkTemplate,HandoffBehavior,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Applies the animations associated with this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> to their targets within the specified template and initiates them.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_Clone\" data-linktype=\"self-bookmark\">Clone()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a modifiable clone of this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>, making deep copies of this object&#39;s values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_CreateInstanceCore\" data-linktype=\"self-bookmark\">CreateInstanceCore()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new instance of the <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_GetCurrentGlobalSpeed\" data-linktype=\"self-bookmark\">GetCurrentGlobalSpeed()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the <span class=\"xref\">stem.Windows.Media.Animation.Clock.CurrentGlobalSpeed*</span> of the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_GetCurrentGlobalSpeed_System_Windows_FrameworkContentElement_\" data-linktype=\"self-bookmark\">GetCurrentGlobalSpeed(FrameworkContentElement)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the <span class=\"xref\">stem.Windows.Media.Animation.Clock.CurrentGlobalSpeed*</span> of the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_GetCurrentGlobalSpeed_System_Windows_FrameworkElement_\" data-linktype=\"self-bookmark\">GetCurrentGlobalSpeed(FrameworkElement)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the <span class=\"xref\">stem.Windows.Media.Animation.Clock.CurrentGlobalSpeed*</span> of the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_GetCurrentIteration\" data-linktype=\"self-bookmark\">GetCurrentIteration()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the <span class=\"xref\">stem.Windows.Media.Animation.Clock.CurrentIteration*</span> of the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_GetCurrentIteration_System_Windows_FrameworkContentElement_\" data-linktype=\"self-bookmark\">GetCurrentIteration(FrameworkContentElement)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the <span class=\"xref\">stem.Windows.Media.Animation.Clock.CurrentIteration*</span> of the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_GetCurrentIteration_System_Windows_FrameworkElement_\" data-linktype=\"self-bookmark\">GetCurrentIteration(FrameworkElement)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the <span class=\"xref\">stem.Windows.Media.Animation.Clock.CurrentIteration*</span> of the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_GetCurrentProgress\" data-linktype=\"self-bookmark\">GetCurrentProgress()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the <span class=\"xref\">stem.Windows.Media.Animation.Clock.CurrentProgress*</span> of the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_GetCurrentProgress_System_Windows_FrameworkContentElement_\" data-linktype=\"self-bookmark\">GetCurrentProgress(FrameworkContentElement)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the <span class=\"xref\">stem.Windows.Media.Animation.Clock.CurrentProgress*</span> of the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_GetCurrentProgress_System_Windows_FrameworkElement_\" data-linktype=\"self-bookmark\">GetCurrentProgress(FrameworkElement)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the <span class=\"xref\">stem.Windows.Media.Animation.Clock.CurrentProgress*</span> of the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_GetCurrentState\" data-linktype=\"self-bookmark\">GetCurrentState()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the <span class=\"xref\">stem.Windows.Media.Animation.Clock.CurrentState*</span> of the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_GetCurrentState_System_Windows_FrameworkContentElement_\" data-linktype=\"self-bookmark\">GetCurrentState(FrameworkContentElement)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the <span class=\"xref\">stem.Windows.Media.Animation.Clock.CurrentState*</span> of the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_GetCurrentState_System_Windows_FrameworkElement_\" data-linktype=\"self-bookmark\">GetCurrentState(FrameworkElement)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the <span class=\"xref\">stem.Windows.Media.Animation.Clock.CurrentState*</span> of the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_GetCurrentTime\" data-linktype=\"self-bookmark\">GetCurrentTime()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the <span class=\"xref\">stem.Windows.Media.Animation.Clock.CurrentTime*</span> of the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_GetCurrentTime_System_Windows_FrameworkContentElement_\" data-linktype=\"self-bookmark\">GetCurrentTime(FrameworkContentElement)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the <span class=\"xref\">stem.Windows.Media.Animation.Clock.CurrentTime*</span> of the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_GetCurrentTime_System_Windows_FrameworkElement_\" data-linktype=\"self-bookmark\">GetCurrentTime(FrameworkElement)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the <span class=\"xref\">stem.Windows.Media.Animation.Clock.CurrentTime*</span> of the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_GetIsPaused\" data-linktype=\"self-bookmark\">GetIsPaused()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves a value that indicates whether the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> is paused.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_GetIsPaused_System_Windows_FrameworkContentElement_\" data-linktype=\"self-bookmark\">GetIsPaused(FrameworkContentElement)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves a value that indicates whether the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> is paused.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_GetIsPaused_System_Windows_FrameworkElement_\" data-linktype=\"self-bookmark\">GetIsPaused(FrameworkElement)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves a value that indicates whether the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> is paused.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_GetTarget_System_Windows_DependencyObject_\" data-linktype=\"self-bookmark\">GetTarget(DependencyObject)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.Target*</span> value of the specified <a class=\"xref\" href=\"system.windows.media.animation.timeline\" data-linktype=\"relative-path\">Timeline</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_GetTargetName_System_Windows_DependencyObject_\" data-linktype=\"self-bookmark\">GetTargetName(DependencyObject)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.TargetName*</span> value of the specified <a class=\"xref\" href=\"system.windows.media.animation.timeline\" data-linktype=\"relative-path\">Timeline</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_GetTargetProperty_System_Windows_DependencyObject_\" data-linktype=\"self-bookmark\">GetTargetProperty(DependencyObject)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.TargetProperty*</span> value of the specified <a class=\"xref\" href=\"system.windows.media.animation.timeline\" data-linktype=\"relative-path\">Timeline</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_Pause\" data-linktype=\"self-bookmark\">Pause()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Pauses the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_Pause_System_Windows_FrameworkContentElement_\" data-linktype=\"self-bookmark\">Pause(FrameworkContentElement)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Pauses the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> of the specified <a class=\"xref\" href=\"system.windows.frameworkcontentelement\" data-linktype=\"relative-path\">FrameworkContentElement</a> associated with this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_Pause_System_Windows_FrameworkElement_\" data-linktype=\"self-bookmark\">Pause(FrameworkElement)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Pauses the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> of the specified <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a> associated with this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_Remove\" data-linktype=\"self-bookmark\">Remove()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> objects that were created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>. Animations that belong to this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> no longer affect the properties they once animated, regardless of their <span class=\"xref\">stem.Windows.Media.Animation.Timeline.FillBehavior*</span> setting.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_Remove_System_Windows_FrameworkContentElement_\" data-linktype=\"self-bookmark\">Remove(FrameworkContentElement)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> objects that were created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>. Animations that belong to this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> no longer affect the properties they once animated, regardless of their <span class=\"xref\">stem.Windows.Media.Animation.Timeline.FillBehavior*</span> setting.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_Remove_System_Windows_FrameworkElement_\" data-linktype=\"self-bookmark\">Remove(FrameworkElement)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> objects that were created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>. Animations that belong to this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> no longer affect the properties they once animated, regardless of their <span class=\"xref\">stem.Windows.Media.Animation.Timeline.FillBehavior*</span> setting.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_Resume\" data-linktype=\"self-bookmark\">Resume()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Resumes the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_Resume_System_Windows_FrameworkContentElement_\" data-linktype=\"self-bookmark\">Resume(FrameworkContentElement)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Resumes the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_Resume_System_Windows_FrameworkElement_\" data-linktype=\"self-bookmark\">Resume(FrameworkElement)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Resumes the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_Seek_System_TimeSpan_\" data-linktype=\"self-bookmark\">Seek(TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Seeks this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> to the specified position. The <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> performs the requested seek when the next clock tick occurs.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_Seek_System_TimeSpan_System_Windows_Media_Animation_TimeSeekOrigin_\" data-linktype=\"self-bookmark\">Seek(TimeSpan,TimeSeekOrigin)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Seeks this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> to the specified position. The <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> performs the requested seek when the next clock tick occurs.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_Seek_System_Windows_FrameworkContentElement_System_TimeSpan_System_Windows_Media_Animation_TimeSeekOrigin_\" data-linktype=\"self-bookmark\">Seek(FrameworkContentElement,TimeSpan,TimeSeekOrigin)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Seeks this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> to the specified position. The <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> performs the requested seek when the next clock tick occurs.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_Seek_System_Windows_FrameworkElement_System_TimeSpan_System_Windows_Media_Animation_TimeSeekOrigin_\" data-linktype=\"self-bookmark\">Seek(FrameworkElement,TimeSpan,TimeSeekOrigin)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Seeks this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> to the specified position. The <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> performs the requested seek when the next clock tick occurs.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_SeekAlignedToLastTick_System_TimeSpan_\" data-linktype=\"self-bookmark\">SeekAlignedToLastTick(TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Seeks this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> to a new position immediately (synchronously).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_SeekAlignedToLastTick_System_TimeSpan_System_Windows_Media_Animation_TimeSeekOrigin_\" data-linktype=\"self-bookmark\">SeekAlignedToLastTick(TimeSpan,TimeSeekOrigin)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Seeks this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> to a new position immediately (synchronously).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_SeekAlignedToLastTick_System_Windows_FrameworkContentElement_System_TimeSpan_System_Windows_Media_Animation_TimeSeekOrigin_\" data-linktype=\"self-bookmark\">SeekAlignedToLastTick(FrameworkContentElement,TimeSpan,TimeSeekOrigin)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Seeks this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> to a new position immediately (synchronously).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_SeekAlignedToLastTick_System_Windows_FrameworkElement_System_TimeSpan_System_Windows_Media_Animation_TimeSeekOrigin_\" data-linktype=\"self-bookmark\">SeekAlignedToLastTick(FrameworkElement,TimeSpan,TimeSeekOrigin)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Seeks this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> to a new position immediately (synchronously).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_SetSpeedRatio_System_Double_\" data-linktype=\"self-bookmark\">SetSpeedRatio(Double)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the interactive speed ratio for the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_SetSpeedRatio_System_Windows_FrameworkContentElement_System_Double_\" data-linktype=\"self-bookmark\">SetSpeedRatio(FrameworkContentElement,Double)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the interactive speed ratio of the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_SetSpeedRatio_System_Windows_FrameworkElement_System_Double_\" data-linktype=\"self-bookmark\">SetSpeedRatio(FrameworkElement,Double)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the interactive speed ratio of the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_SetTarget_System_Windows_DependencyObject_System_Windows_DependencyObject_\" data-linktype=\"self-bookmark\">SetTarget(DependencyObject,DependencyObject)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Makes the specified <a class=\"xref\" href=\"system.windows.media.animation.timeline\" data-linktype=\"relative-path\">Timeline</a> target the dependency object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_SetTargetName_System_Windows_DependencyObject_System_String_\" data-linktype=\"self-bookmark\">SetTargetName(DependencyObject,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Makes the specified <a class=\"xref\" href=\"system.windows.media.animation.timeline\" data-linktype=\"relative-path\">Timeline</a> target the dependency object with the specified name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_SetTargetProperty_System_Windows_DependencyObject_System_Windows_PropertyPath_\" data-linktype=\"self-bookmark\">SetTargetProperty(DependencyObject,PropertyPath)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Makes the specified <a class=\"xref\" href=\"system.windows.media.animation.timeline\" data-linktype=\"relative-path\">Timeline</a> target the specified dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_SkipToFill\" data-linktype=\"self-bookmark\">SkipToFill()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Advances the current time of this storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> to the end of its active period.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_SkipToFill_System_Windows_FrameworkContentElement_\" data-linktype=\"self-bookmark\">SkipToFill(FrameworkContentElement)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Advances the current time of this storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> to the end of its active period.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_SkipToFill_System_Windows_FrameworkElement_\" data-linktype=\"self-bookmark\">SkipToFill(FrameworkElement)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Advances the current time of this storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> to the end of its active period.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_Stop\" data-linktype=\"self-bookmark\">Stop()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Stops the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_Stop_System_Windows_FrameworkContentElement_\" data-linktype=\"self-bookmark\">Stop(FrameworkContentElement)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Stops the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Storyboard_Stop_System_Windows_FrameworkElement_\" data-linktype=\"self-bookmark\">Stop(FrameworkElement)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Stops the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard__ctor\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Storyboard()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Storyboard ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"fields\">\r\n        <h2>Fields\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_TargetNameProperty\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TargetNameProperty</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.TargetName*</span> attached property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.DependencyProperty TargetNameProperty;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_TargetProperty\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TargetProperty</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.Target*</span> attached property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.DependencyProperty TargetProperty;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_TargetPropertyProperty\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TargetPropertyProperty</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.TargetProperty*</span> attached property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.DependencyProperty TargetPropertyProperty;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_Begin\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_Begin_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Begin()</div>        \r\n          </div>\r\n    \r\n            <p>Applies the animations associated with this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> to their targets and initiates them.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Begin ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_Begin_System_Windows_FrameworkContentElement_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_Begin_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Begin(FrameworkContentElement)</div>        \r\n          </div>\r\n    \r\n            <p>Applies the animations associated with this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> to their targets and initiates them.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Begin (System.Windows.FrameworkContentElement containingObject);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>containingObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.frameworkcontentelement\" data-linktype=\"relative-path\">FrameworkContentElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object contained within the same name scope as the targets of this storyboard&#39;s animations. Animations without a <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.TargetName*</span> are applied to <code>containingObject</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the targeted properties are already animated, they are replaced using the <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a> handoff behavior.  </p>\n<p> Storyboards started with this method cannot be paused, resumed, or otherwise interactively controlled after they are started. To make a storyboard controllable, use the <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> or <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method.  </p>\n<p> Beginning a storyboard triggers the <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_CurrentStateInvalidated\" data-linktype=\"relative-path\">CurrentStateInvalidated</a> and <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_CurrentGlobalSpeedInvalidated\" data-linktype=\"relative-path\">CurrentGlobalSpeedInvalidated</a> events.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses a storyboard to animate a <a class=\"xref\" href=\"system.windows.media.texteffect\" data-linktype=\"relative-path\">TextEffect</a>. The <a class=\"xref\" href=\"system.windows.media.texteffect\" data-linktype=\"relative-path\">TextEffect</a> is contained within a <a class=\"xref\" href=\"system.windows.frameworkcontentelement\" data-linktype=\"relative-path\">FrameworkContentElement</a>&#39;s name scope.  </p>\n<pre><code class=\"lang-cs\" name=\"StoryboardBeginAnimation_procedural_snip#FrameworkContentElementStoryboardExampleUsingWholePage\">/*\n    This example shows how to animate\n    a FrameworkContentElement with a storyboard.\n\n*/\n\nusing System;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Media;\nusing System.Windows.Shapes;\nusing System.Windows.Media.Animation;\nusing System.Windows.Documents;\n\n\nnamespace Microsoft.Samples.Animation.AnimatingWithStoryboards\n{\n    public class FrameworkContentElementStoryboardExample : FlowDocument\n    {\n    \n        private Storyboard myStoryboard;\n        \n        public FrameworkContentElementStoryboardExample()\n        {\n        \n            // Create a name scope for the document.\n            NameScope.SetNameScope(this, new NameScope());        \n            this.Background = Brushes.White;\n            \n            // Create a run of text.\n            Run theText = new Run( \n                &quot;Lorem ipsum dolor sit amet, consectetuer adipiscing elit.&quot; + \n                &quot;Ut non lacus. Nullam a ligula id leo adipiscing ornare.&quot; +\n                &quot; Duis mattis. &quot;);   \n                \n            // Create a TextEffect\n            TextEffect animatedSpecialEffect = new TextEffect();\n            animatedSpecialEffect.Foreground = Brushes.OrangeRed;\n            animatedSpecialEffect.PositionStart = 0;\n            animatedSpecialEffect.PositionCount = 0;\n            \n            // Assign the TextEffect a name by \n            // registering it with the page, so that\n            // it can be targeted by storyboard\n            // animations            \n            this.RegisterName(&quot;animatedSpecialEffect&quot;, animatedSpecialEffect);  \n            \n            // Apply the text effect to the run.\n            theText.TextEffects = new TextEffectCollection();\n            theText.TextEffects.Add(animatedSpecialEffect);\n            \n            // Create a paragraph to contain the run.\n            Paragraph animatedParagraph = new Paragraph(theText);\n            animatedParagraph.Background = Brushes.LightGray;\n            animatedParagraph.Padding = new Thickness(20);\n   \n            this.Blocks.Add(animatedParagraph);            \n            BlockUIContainer controlsContainer = new BlockUIContainer();                \n            \n            //\n            // Create an animation and a storyboard to animate the\n            // text effect.\n            //\n            Int32Animation countAnimation = \n                new Int32Animation(0, 127, TimeSpan.FromSeconds(10));            \n            Storyboard.SetTargetName(countAnimation, &quot;animatedSpecialEffect&quot;);\n            Storyboard.SetTargetProperty(countAnimation, \n                new PropertyPath(TextEffect.PositionCountProperty));\n            myStoryboard = new Storyboard();\n            myStoryboard.Children.Add(countAnimation);\n            \n            //\n            // Create a button to start the storyboard.\n            //\n            Button beginButton = new Button();\n            beginButton.Content = &quot;Begin&quot;;\n            beginButton.Click += new RoutedEventHandler(beginButton_Clicked);            \n \n            controlsContainer.Child = beginButton; \n            this.Blocks.Add(controlsContainer);\n            \n        }\n        \n        // Begins the storyboard.\n        private void beginButton_Clicked(object sender, RoutedEventArgs args)\n        {\n        \n            myStoryboard.Begin(this);                  \n        }\n        \n \n\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"StoryboardBeginAnimation_procedural_snip#FrameworkContentElementStoryboardExampleUsingWholePage\">&#39;\n&#39;    This example shows how to animate\n&#39;    a FrameworkContentElement with a storyboard.\n&#39;\n&#39;\n\n\nImports System\nImports System.Windows\nImports System.Windows.Controls\nImports System.Windows.Media\nImports System.Windows.Shapes\nImports System.Windows.Media.Animation\nImports System.Windows.Documents\n\n\nNamespace Microsoft.Samples.Animation.AnimatingWithStoryboards\n\tPublic Class FrameworkContentElementStoryboardExample\n\t\tInherits FlowDocument\n\n\t\tPrivate myStoryboard As Storyboard\n\n\t\tPublic Sub New()\n\n\t\t\t&#39; Create a name scope for the document.\n\t\t\tNameScope.SetNameScope(Me, New NameScope())\n\t\t\tMe.Background = Brushes.White\n\n\t\t\t&#39; Create a run of text.\n\t\t\tDim theText As New Run(&quot;Lorem ipsum dolor sit amet, consectetuer adipiscing elit.&quot; &amp; &quot;Ut non lacus. Nullam a ligula id leo adipiscing ornare.&quot; &amp; &quot; Duis mattis. &quot;)\n\n\t\t\t&#39; Create a TextEffect\n\t\t\tDim animatedSpecialEffect As New TextEffect()\n\t\t\tanimatedSpecialEffect.Foreground = Brushes.OrangeRed\n\t\t\tanimatedSpecialEffect.PositionStart = 0\n\t\t\tanimatedSpecialEffect.PositionCount = 0\n\n\t\t\t&#39; Assign the TextEffect a name by \n\t\t\t&#39; registering it with the page, so that\n\t\t\t&#39; it can be targeted by storyboard\n\t\t\t&#39; animations            \n\t\t\tMe.RegisterName(&quot;animatedSpecialEffect&quot;, animatedSpecialEffect)\n\n\t\t\t&#39; Apply the text effect to the run.\n\t\t\ttheText.TextEffects = New TextEffectCollection()\n\t\t\ttheText.TextEffects.Add(animatedSpecialEffect)\n\n\t\t\t&#39; Create a paragraph to contain the run.\n\t\t\tDim animatedParagraph As New Paragraph(theText)\n\t\t\tanimatedParagraph.Background = Brushes.LightGray\n\t\t\tanimatedParagraph.Padding = New Thickness(20)\n\n\t\t\tMe.Blocks.Add(animatedParagraph)\n\t\t\tDim controlsContainer As New BlockUIContainer()\n\n\t\t\t&#39;\n\t\t\t&#39; Create an animation and a storyboard to animate the\n\t\t\t&#39; text effect.\n\t\t\t&#39;\n\t\t\tDim countAnimation As New Int32Animation(0, 127, TimeSpan.FromSeconds(10))\n\t\t\tStoryboard.SetTargetName(countAnimation, &quot;animatedSpecialEffect&quot;)\n\t\t\tStoryboard.SetTargetProperty(countAnimation, New PropertyPath(TextEffect.PositionCountProperty))\n\t\t\tmyStoryboard = New Storyboard()\n\t\t\tmyStoryboard.Children.Add(countAnimation)\n\n\t\t\t&#39;\n\t\t\t&#39; Create a button to start the storyboard.\n\t\t\t&#39;\n\t\t\tDim beginButton As New Button()\n\t\t\tbeginButton.Content = &quot;Begin&quot;\n\t\t\tAddHandler beginButton.Click, AddressOf beginButton_Clicked\n\n\t\t\tcontrolsContainer.Child = beginButton\n\t\t\tMe.Blocks.Add(controlsContainer)\n\n\t\tEnd Sub\n\n\t\t&#39; Begins the storyboard.\n\t\tPrivate Sub beginButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\n\t\t\tmyStoryboard.Begin(Me)\n\t\tEnd Sub\n\n\n\n\tEnd Class\nEnd Namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_Begin_System_Windows_FrameworkElement_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_Begin_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Begin(FrameworkElement)</div>        \r\n          </div>\r\n    \r\n            <p>Applies the animations associated with this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> to their targets and initiates them.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Begin (System.Windows.FrameworkElement containingObject);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>containingObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object contained within the same name scope as the targets of this storyboard&#39;s animations. Animations without a <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.TargetName*</span> are applied to <code>containingObject</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the targeted properties are already animated, they are replaced using the <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a> handoff behavior.  </p>\n<p> Storyboards started with this method cannot be paused, resumed, or otherwise interactively controlled after they are started. To make a storyboard controllable, use the <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_System_Windows_FrameworkElement_System_Boolean_\" data-linktype=\"relative-path\">Begin(FrameworkElement,Boolean)</a> or <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_System_Windows_FrameworkElement_System_Windows_Media_Animation_HandoffBehavior_System_Boolean_\" data-linktype=\"relative-path\">Begin(FrameworkElement,HandoffBehavior,Boolean)</a> method.  </p>\n<p> Beginning a storyboard triggers the <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_CurrentStateInvalidated\" data-linktype=\"relative-path\">CurrentStateInvalidated</a> and <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_CurrentGlobalSpeedInvalidated\" data-linktype=\"relative-path\">CurrentGlobalSpeedInvalidated</a> events.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_Begin_System_Windows_FrameworkContentElement_System_Boolean_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_Begin_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Begin(FrameworkContentElement,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Applies the animations associated with this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> to their targets and initiates them.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Begin (System.Windows.FrameworkContentElement containingObject, bool isControllable);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>containingObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.frameworkcontentelement\" data-linktype=\"relative-path\">FrameworkContentElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object contained within the same name scope as the targets of this storyboard&#39;s animations. Animations without a <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.TargetName*</span> are applied to <code>containingObject</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>isControllable</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> if the storyboard should be interactively controllable; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the targeted properties are already animated, they are replaced using the <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a> handoff behavior.  </p>\n<p> To interactively control this storyboard, you must specify the same <code>containingObject</code> when calling the interactive methods that you used to begin the storyboard  </p>\n<p> When this method is called, <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> objects are created for the storyboard and any timelines it contains. These clocks are stored with <code>containingObject</code>.  </p>\n<p> Beginning a storyboard triggers the <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_CurrentStateInvalidated\" data-linktype=\"relative-path\">CurrentStateInvalidated</a> and <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_CurrentGlobalSpeedInvalidated\" data-linktype=\"relative-path\">CurrentGlobalSpeedInvalidated</a> events.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses a controllable storyboard to animate a <a class=\"xref\" href=\"system.windows.media.texteffect\" data-linktype=\"relative-path\">TextEffect</a>. The <a class=\"xref\" href=\"system.windows.media.texteffect\" data-linktype=\"relative-path\">TextEffect</a> is contained within a <a class=\"xref\" href=\"system.windows.frameworkcontentelement\" data-linktype=\"relative-path\">FrameworkContentElement</a>&#39;s name scope.  </p>\n<pre><code class=\"lang-cs\" name=\"StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage\">/*\n    This example shows how to control\n    a storyboard after it has started.\n\n*/\n\nusing System;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Media;\nusing System.Windows.Shapes;\nusing System.Windows.Media.Animation;\nusing System.Windows.Documents;\n\n\nnamespace Microsoft.Samples.Animation.AnimatingWithStoryboards\n{\n    public class FrameworkContentElementControlStoryboardExample : FlowDocument\n    {\n    \n        private Storyboard myStoryboard;\n        \n        public FrameworkContentElementControlStoryboardExample()\n        {\n        \n            // Create a name scope for the document.\n            NameScope.SetNameScope(this, new NameScope());        \n            this.Background = Brushes.White;\n            \n            // Create a run of text.\n            Run theText = new Run( \n                &quot;Lorem ipsum dolor sit amet, consectetuer adipiscing elit.&quot; + \n                &quot;Ut non lacus. Nullam a ligula id leo adipiscing ornare.&quot; +\n                &quot; Duis mattis. &quot;);   \n                \n            // Create a TextEffect\n            TextEffect animatedSpecialEffect = new TextEffect();\n            animatedSpecialEffect.Foreground = Brushes.OrangeRed;\n            animatedSpecialEffect.PositionStart = 0;\n            animatedSpecialEffect.PositionCount = 0;\n            \n            // Assign the TextEffect a name by \n            // registering it with the page, so that\n            // it can be targeted by storyboard\n            // animations            \n            this.RegisterName(&quot;animatedSpecialEffect&quot;, animatedSpecialEffect);  \n            \n            // Apply the text effect to the run.\n            theText.TextEffects = new TextEffectCollection();\n            theText.TextEffects.Add(animatedSpecialEffect);\n            \n            // Create a paragraph to contain the run.\n            Paragraph animatedParagraph = new Paragraph(theText);\n            animatedParagraph.Background = Brushes.LightGray;\n            animatedParagraph.Padding = new Thickness(20);\n   \n            this.Blocks.Add(animatedParagraph);            \n            BlockUIContainer controlsContainer = new BlockUIContainer();                \n            \n            //\n            // Create an animation and a storyboard to animate the\n            // text effect.\n            //\n            Int32Animation countAnimation = \n                new Int32Animation(0, 127, TimeSpan.FromSeconds(10)); \n            Storyboard.SetTargetName(countAnimation, &quot;animatedSpecialEffect&quot;);\n            Storyboard.SetTargetProperty(countAnimation, \n                new PropertyPath(TextEffect.PositionCountProperty));\n            myStoryboard = new Storyboard();\n            myStoryboard.Children.Add(countAnimation);\n            \n            //\n            // Create some buttons to control the storyboard\n            // and a panel to contain them.\n            //\n            StackPanel buttonPanel = new StackPanel();\n            buttonPanel.Orientation = Orientation.Vertical;\n            Button beginButton = new Button();\n            beginButton.Content = &quot;Begin&quot;;\n            beginButton.Click += new RoutedEventHandler(beginButton_Clicked);            \n            buttonPanel.Children.Add(beginButton);\n            Button pauseButton = new Button();\n            pauseButton.Content = &quot;Pause&quot;;\n            pauseButton.Click +=new RoutedEventHandler(pauseButton_Clicked);\n            buttonPanel.Children.Add(pauseButton);\n            Button resumeButton = new Button();\n            resumeButton.Content = &quot;Resume&quot;;\n            resumeButton.Click +=new RoutedEventHandler(resumeButton_Clicked);\n            buttonPanel.Children.Add(resumeButton);\n            Button skipToFillButton = new Button();\n            skipToFillButton.Content = &quot;Skip to Fill&quot;;\n            skipToFillButton.Click +=new RoutedEventHandler(skipToFillButton_Clicked);\n            buttonPanel.Children.Add(skipToFillButton);\n            Button setSpeedRatioButton = new Button();\n            setSpeedRatioButton.Content = &quot;Triple Speed&quot;;\n            setSpeedRatioButton.Click +=new RoutedEventHandler(setSpeedRatioButton_Clicked);\n            buttonPanel.Children.Add(setSpeedRatioButton);\n            Button stopButton = new Button();\n            stopButton.Content = &quot;Stop&quot;;\n            stopButton.Click +=new RoutedEventHandler(stopButton_Clicked);\n            buttonPanel.Children.Add(stopButton);\n            Button removeButton = new Button();\n            removeButton.Content = &quot;Remove&quot;;\n            removeButton.Click +=new RoutedEventHandler(removeButton_Clicked);\n            buttonPanel.Children.Add(removeButton); \n   \n            controlsContainer.Child = buttonPanel; \n            this.Blocks.Add(controlsContainer);\n            \n        }\n        \n        // Begins the storyboard.\n        private void beginButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            // Specifying &quot;true&quot; as the second Begin parameter\n            // makes this storyboard controllable.\n            myStoryboard.Begin(this, true);          \n        \n        }\n        \n        // Pauses the storyboard.\n        private void pauseButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.Pause(this);          \n        \n        }\n        \n        // Resumes the storyboard.\n        private void resumeButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.Resume(this);          \n        \n        }     \n        \n        // Advances the storyboard to its fill period.\n        private void skipToFillButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.SkipToFill(this);          \n        \n        } \n        \n        // Updates the storyboard&#39;s speed.\n        private void setSpeedRatioButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            // Makes the storyboard progress three times as fast as normal.\n            myStoryboard.SetSpeedRatio(this, 3);          \n        \n        }           \n        \n        // Stops the storyboard.\n        private void stopButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.Stop(this);          \n        \n        }     \n        \n        // Removes the storyboard.\n        private void removeButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.Remove(this);          \n        \n        }           \n\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage\">&#39;\n&#39;    This example shows how to control\n&#39;    a storyboard after it has started.\n&#39;\n&#39;\n\n\nImports System\nImports System.Windows\nImports System.Windows.Controls\nImports System.Windows.Media\nImports System.Windows.Shapes\nImports System.Windows.Media.Animation\nImports System.Windows.Documents\n\n\nNamespace Microsoft.Samples.Animation.AnimatingWithStoryboards\n\tPublic Class FrameworkContentElementControlStoryboardExample\n\t\tInherits FlowDocument\n\n\t\tPrivate myStoryboard As Storyboard\n\n\t\tPublic Sub New()\n\n\t\t\t&#39; Create a name scope for the document.\n\t\t\tNameScope.SetNameScope(Me, New NameScope())\n\t\t\tMe.Background = Brushes.White\n\n\t\t\t&#39; Create a run of text.\n\t\t\tDim theText As New Run(&quot;Lorem ipsum dolor sit amet, consectetuer adipiscing elit.&quot; &amp; &quot;Ut non lacus. Nullam a ligula id leo adipiscing ornare.&quot; &amp; &quot; Duis mattis. &quot;)\n\n\t\t\t&#39; Create a TextEffect\n\t\t\tDim animatedSpecialEffect As New TextEffect()\n\t\t\tanimatedSpecialEffect.Foreground = Brushes.OrangeRed\n\t\t\tanimatedSpecialEffect.PositionStart = 0\n\t\t\tanimatedSpecialEffect.PositionCount = 0\n\n\t\t\t&#39; Assign the TextEffect a name by \n\t\t\t&#39; registering it with the page, so that\n\t\t\t&#39; it can be targeted by storyboard\n\t\t\t&#39; animations            \n\t\t\tMe.RegisterName(&quot;animatedSpecialEffect&quot;, animatedSpecialEffect)\n\n\t\t\t&#39; Apply the text effect to the run.\n\t\t\ttheText.TextEffects = New TextEffectCollection()\n\t\t\ttheText.TextEffects.Add(animatedSpecialEffect)\n\n\t\t\t&#39; Create a paragraph to contain the run.\n\t\t\tDim animatedParagraph As New Paragraph(theText)\n\t\t\tanimatedParagraph.Background = Brushes.LightGray\n\t\t\tanimatedParagraph.Padding = New Thickness(20)\n\n\t\t\tMe.Blocks.Add(animatedParagraph)\n\t\t\tDim controlsContainer As New BlockUIContainer()\n\n\t\t\t&#39;\n\t\t\t&#39; Create an animation and a storyboard to animate the\n\t\t\t&#39; text effect.\n\t\t\t&#39;\n\t\t\tDim countAnimation As New Int32Animation(0, 127, TimeSpan.FromSeconds(10))\n\t\t\tStoryboard.SetTargetName(countAnimation, &quot;animatedSpecialEffect&quot;)\n\t\t\tStoryboard.SetTargetProperty(countAnimation, New PropertyPath(TextEffect.PositionCountProperty))\n\t\t\tmyStoryboard = New Storyboard()\n\t\t\tmyStoryboard.Children.Add(countAnimation)\n\n\t\t\t&#39;\n\t\t\t&#39; Create some buttons to control the storyboard\n\t\t\t&#39; and a panel to contain them.\n\t\t\t&#39;\n\t\t\tDim buttonPanel As New StackPanel()\n\t\t\tbuttonPanel.Orientation = Orientation.Vertical\n\t\t\tDim beginButton As New Button()\n\t\t\tbeginButton.Content = &quot;Begin&quot;\n\t\t\tAddHandler beginButton.Click, AddressOf beginButton_Clicked\n\t\t\tbuttonPanel.Children.Add(beginButton)\n\t\t\tDim pauseButton As New Button()\n\t\t\tpauseButton.Content = &quot;Pause&quot;\n\t\t\tAddHandler pauseButton.Click, AddressOf pauseButton_Clicked\n\t\t\tbuttonPanel.Children.Add(pauseButton)\n\t\t\tDim resumeButton As New Button()\n\t\t\tresumeButton.Content = &quot;Resume&quot;\n\t\t\tAddHandler resumeButton.Click, AddressOf resumeButton_Clicked\n\t\t\tbuttonPanel.Children.Add(resumeButton)\n\t\t\tDim skipToFillButton As New Button()\n\t\t\tskipToFillButton.Content = &quot;Skip to Fill&quot;\n\t\t\tAddHandler skipToFillButton.Click, AddressOf skipToFillButton_Clicked\n\t\t\tbuttonPanel.Children.Add(skipToFillButton)\n\t\t\tDim setSpeedRatioButton As New Button()\n\t\t\tsetSpeedRatioButton.Content = &quot;Triple Speed&quot;\n\t\t\tAddHandler setSpeedRatioButton.Click, AddressOf setSpeedRatioButton_Clicked\n\t\t\tbuttonPanel.Children.Add(setSpeedRatioButton)\n\t\t\tDim stopButton As New Button()\n\t\t\tstopButton.Content = &quot;Stop&quot;\n\t\t\tAddHandler stopButton.Click, AddressOf stopButton_Clicked\n\t\t\tbuttonPanel.Children.Add(stopButton)\n\t\t\tDim removeButton As New Button()\n\t\t\tremoveButton.Content = &quot;Remove&quot;\n\t\t\tAddHandler removeButton.Click, AddressOf removeButton_Clicked\n\t\t\tbuttonPanel.Children.Add(removeButton)\n\n\t\t\tcontrolsContainer.Child = buttonPanel\n\t\t\tMe.Blocks.Add(controlsContainer)\n\n\t\tEnd Sub\n\n\t\t&#39; Begins the storyboard.\n\t\tPrivate Sub beginButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t&#39; Specifying &quot;true&quot; as the second Begin parameter\n\t\t\t&#39; makes this storyboard controllable.\n\t\t\tmyStoryboard.Begin(Me, True)\n\n\t\tEnd Sub\n\n\t\t&#39; Pauses the storyboard.\n\t\tPrivate Sub pauseButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.Pause(Me)\n\n\t\tEnd Sub\n\n\t\t&#39; Resumes the storyboard.\n\t\tPrivate Sub resumeButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.Resume(Me)\n\n\t\tEnd Sub\n\n\t\t&#39; Advances the storyboard to its fill period.\n\t\tPrivate Sub skipToFillButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.SkipToFill(Me)\n\n\t\tEnd Sub\n\n\t\t&#39; Updates the storyboard&#39;s speed.\n\t\tPrivate Sub setSpeedRatioButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t&#39; Makes the storyboard progress three times as fast as normal.\n\t\t\tmyStoryboard.SetSpeedRatio(Me, 3)\n\n\t\tEnd Sub\n\n\t\t&#39; Stops the storyboard.\n\t\tPrivate Sub stopButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.Stop(Me)\n\n\t\tEnd Sub\n\n\t\t&#39; Removes the storyboard.\n\t\tPrivate Sub removeButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.Remove(Me)\n\n\t\tEnd Sub\n\n\tEnd Class\nEnd Namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_Begin_System_Windows_FrameworkContentElement_System_Windows_Media_Animation_HandoffBehavior_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_Begin_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Begin(FrameworkContentElement,HandoffBehavior)</div>        \r\n          </div>\r\n    \r\n            <p>Applies the animations associated with this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> to their targets and initiates them, using the specified <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Begin (System.Windows.FrameworkContentElement containingObject, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>containingObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.frameworkcontentelement\" data-linktype=\"relative-path\">FrameworkContentElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object contained within the same name scope as the targets of this storyboard&#39;s animations. Animations without a <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.TargetName*</span> are applied to <code>containingObject</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>handoffBehavior</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The behavior the new animation should use to interact with any current animations.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When you apply a <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>, <a class=\"xref\" href=\"system.windows.media.animation.animationtimeline\" data-linktype=\"relative-path\">AnimationTimeline</a>, or <a class=\"xref\" href=\"system.windows.media.animation.animationclock\" data-linktype=\"relative-path\">AnimationClock</a> to a property using the <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a> <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a>, any <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> objects previously associated with that property continue to consume system resources; the timing system does not remove these clocks automatically.  </p>\n<p> To avoid performance issues when you apply a large number of clocks using <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a>, you should remove composing clocks from the animated property after they complete. There are several ways to remove a clock.  </p>\n<ul>\n<li><p>To remove all clocks from a property, use the <a class=\"xref\" href=\"system.windows.media.animation.animatable#System_Windows_Media_Animation_Animatable_ApplyAnimationClock_System_Windows_DependencyProperty_System_Windows_Media_Animation_AnimationClock_\" data-linktype=\"relative-path\">ApplyAnimationClock(DependencyProperty,AnimationClock)</a> or <a class=\"xref\" href=\"system.windows.media.animation.animatable#System_Windows_Media_Animation_Animatable_BeginAnimation_System_Windows_DependencyProperty_System_Windows_Media_Animation_AnimationTimeline_\" data-linktype=\"relative-path\">BeginAnimation(DependencyProperty,AnimationTimeline)</a> method of the animated object. Specify the property being animated as the first parameter, and <code>null</code> as the second. This removes all animation clocks from the property.  </p>\n</li>\n<li><p>To remove a specific <a class=\"xref\" href=\"system.windows.media.animation.animationclock\" data-linktype=\"relative-path\">AnimationClock</a> from a list of clocks, use the <a class=\"xref\" href=\"system.windows.media.animation.clock#System_Windows_Media_Animation_Clock_Controller_\" data-linktype=\"relative-path\">Controller</a> property of the <a class=\"xref\" href=\"system.windows.media.animation.animationclock\" data-linktype=\"relative-path\">AnimationClock</a> to retrieve a <a class=\"xref\" href=\"system.windows.media.animation.clockcontroller\" data-linktype=\"relative-path\">ClockController</a>, then call the <a class=\"xref\" href=\"system.windows.media.animation.clockcontroller#System_Windows_Media_Animation_ClockController_Remove_\" data-linktype=\"relative-path\">Remove</a> method of the <a class=\"xref\" href=\"system.windows.media.animation.clockcontroller\" data-linktype=\"relative-path\">ClockController</a>. This is typically done in the <a class=\"xref\" href=\"system.windows.media.animation.clock#System_Windows_Media_Animation_Clock_Completed\" data-linktype=\"relative-path\">Completed</a> event handler for a clock. Note that only root clocks can be controlled by a <a class=\"xref\" href=\"system.windows.media.animation.clockcontroller\" data-linktype=\"relative-path\">ClockController</a>; the <a class=\"xref\" href=\"system.windows.media.animation.clock#System_Windows_Media_Animation_Clock_Controller_\" data-linktype=\"relative-path\">Controller</a> property of a child clock returns <code>null</code>. Note also that the <a class=\"xref\" href=\"system.windows.media.animation.clock#System_Windows_Media_Animation_Clock_Completed\" data-linktype=\"relative-path\">Completed</a> event is not called if the effective duration of the clock is forever.  In that case, the user must determine when to call <a class=\"xref\" href=\"system.windows.media.animation.clockcontroller#System_Windows_Media_Animation_ClockController_Remove_\" data-linktype=\"relative-path\">Remove</a>.  </p>\n<p>This is primarily an issue for animations on objects that have a long lifetime.  When an object is garbage collected, its clocks are also disconnected and garbage collected.  </p>\n<p>For more information about clock objects, see <a href=\"../Topic/Animation%20and%20Timing%20System%20Overview.md\" data-linktype=\"relative-path\">Animation and Timing System Overview</a>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a> <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a> to animate when the user left-clicks, and the <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a> <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a> when the user right-clicks.  </p>\n<pre><code class=\"lang-vb\" name=\"StoryboardBeginAnimation_procedural_snip#FrameworkContentElementStoryboardWithHandoffBehaviorExampleWholePage\">&#39;\n&#39;    This example shows how to animate\n&#39;    a FrameworkContentElement with a storyboard.\n&#39;\n&#39;\n\n\nImports System\nImports System.Windows\nImports System.Windows.Controls\nImports System.Windows.Media\nImports System.Windows.Shapes\nImports System.Windows.Media.Animation\nImports System.Windows.Documents\nImports System.Windows.Input\n\n\nNamespace Microsoft.Samples.Animation.AnimatingWithStoryboards\n\tPublic Class FrameworkContentElementStoryboardWithHandoffBehaviorExample\n\t\tInherits FlowDocument\n\n\t\tPrivate myStoryboard As Storyboard\n\t\tPrivate xAnimation As DoubleAnimation\n\t\tPrivate yAnimation As DoubleAnimation\n\n\t\tPublic Sub New()\n\n\t\t\t&#39; Create a name scope for the document.\n\t\t\tNameScope.SetNameScope(Me, New NameScope())\n\t\t\tMe.Background = Brushes.Orange\n\n\t\t\t&#39; Create a run of text.\n\t\t\tDim theText As New Run(&quot;Lorem ipsum dolor sit amet, consectetuer adipiscing elit.&quot;)\n\n\t\t\t&#39; Create a TextEffect\n\t\t\tDim animatedSpecialEffect As New TextEffect()\n\t\t\tanimatedSpecialEffect.Foreground = Brushes.OrangeRed\n\t\t\tanimatedSpecialEffect.PositionStart = 0\n\t\t\tanimatedSpecialEffect.PositionCount = 20\n\n\t\t\tDim animatedTransform As New TranslateTransform()\n\n\t\t\t&#39; Assign the transform a name by \n\t\t\t&#39; registering it with the page, so that\n\t\t\t&#39; it can be targeted by storyboard\n\t\t\t&#39; animations.      \n\t\t\tMe.RegisterName(&quot;animatedTransform&quot;, animatedTransform)\n\t\t\tanimatedSpecialEffect.Transform = animatedTransform\n\n\n\t\t\t&#39; Apply the text effect to the run.\n\t\t\ttheText.TextEffects = New TextEffectCollection()\n\t\t\ttheText.TextEffects.Add(animatedSpecialEffect)\n\n\n\t\t\t&#39; Create a paragraph to contain the run.\n\t\t\tDim animatedParagraph As New Paragraph(theText)\n\t\t\tanimatedParagraph.Background = Brushes.LightGray\n\n\t\t\tMe.Blocks.Add(animatedParagraph)\n\n\t\t\t&#39;\n\t\t\t&#39; Create a storyboard to animate the\n\t\t\t&#39; text effect&#39;s transform.\n\t\t\t&#39;\n\t\t\tmyStoryboard = New Storyboard()\n\n\t\t\txAnimation = New DoubleAnimation()\n\t\t\txAnimation.Duration = TimeSpan.FromSeconds(5)\n\t\t\tStoryboard.SetTargetName(xAnimation, &quot;animatedTransform&quot;)\n\t\t\tStoryboard.SetTargetProperty(xAnimation, New PropertyPath(TranslateTransform.XProperty))\n\t\t\tmyStoryboard.Children.Add(xAnimation)\n\n\t\t\tyAnimation = New DoubleAnimation()\n\t\t\tyAnimation.Duration = TimeSpan.FromSeconds(5)\n\t\t\tStoryboard.SetTargetName(yAnimation, &quot;animatedTransform&quot;)\n\t\t\tStoryboard.SetTargetProperty(yAnimation, New PropertyPath(TranslateTransform.YProperty))\n\t\t\tmyStoryboard.Children.Add(yAnimation)\n\n\t\t\tAddHandler MouseLeftButtonDown, AddressOf document_mouseLeftButtonDown\n\t\t\tAddHandler MouseRightButtonDown, AddressOf document_mouseRightButtonDown\n\n\t\tEnd Sub\n\n\n\n\t\t&#39; When the user left-clicks, use the \n\t\t&#39; SnapshotAndReplace HandoffBehavior when applying the animation.        \n\t\tPrivate Sub document_mouseLeftButtonDown(ByVal sender As Object, ByVal e As MouseButtonEventArgs)\n\n\t\t\tDim clickPoint As Point = Mouse.GetPosition(Me)\n\n\n\t\t\t&#39; Animate to the target point.\n\t\t\txAnimation.To = clickPoint.X\n\t\t\tyAnimation.To = clickPoint.Y\n\n\t\t\tTry\n\t\t\t\tmyStoryboard.Begin(Me, HandoffBehavior.SnapshotAndReplace)\n\n\t\t\tCatch ex As Exception\n\t\t\t\tMessageBox.Show(ex.ToString())\n\t\t\tEnd Try\n\t\tEnd Sub\n\n\t\t&#39; When the user right-clicks, use the \n\t\t&#39; Compose HandoffBehavior when applying the animation.\n\t\tPrivate Sub document_mouseRightButtonDown(ByVal sender As Object, ByVal e As MouseButtonEventArgs)\n\n\n\t\t\tDim clickPoint As Point = Mouse.GetPosition(Me)\n\n\t\t\t&#39; Animate to the target point.\n\t\t\txAnimation.To = clickPoint.X\n\t\t\tyAnimation.To = clickPoint.Y\n\t\t\tmyStoryboard.Begin(Me, HandoffBehavior.Compose)\n\n\n\t\tEnd Sub\n\n\n\n\n\n\tEnd Class\nEnd Namespace\n</code></pre><pre><code class=\"lang-cs\" name=\"StoryboardBeginAnimation_procedural_snip#FrameworkContentElementStoryboardWithHandoffBehaviorExampleWholePage\">/*\n    This example shows how to animate\n    a FrameworkContentElement with a storyboard.\n\n*/\n\nusing System;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Media;\nusing System.Windows.Shapes;\nusing System.Windows.Media.Animation;\nusing System.Windows.Documents;\nusing System.Windows.Input;\n\n\nnamespace Microsoft.Samples.Animation.AnimatingWithStoryboards\n{\n    public class FrameworkContentElementStoryboardWithHandoffBehaviorExample : \n        FlowDocument\n    {\n    \n        private Storyboard myStoryboard;\n        DoubleAnimation xAnimation;\n        DoubleAnimation yAnimation;\n        \n        public FrameworkContentElementStoryboardWithHandoffBehaviorExample()\n        {\n        \n            // Create a name scope for the document.\n            NameScope.SetNameScope(this, new NameScope());        \n            this.Background = Brushes.Orange;\n            \n            // Create a run of text.\n            Run theText = new Run( \n                &quot;Lorem ipsum dolor sit amet, consectetuer adipiscing elit.&quot;);   \n                \n            // Create a TextEffect\n            TextEffect animatedSpecialEffect = new TextEffect();\n            animatedSpecialEffect.Foreground = Brushes.OrangeRed;\n            animatedSpecialEffect.PositionStart = 0;\n            animatedSpecialEffect.PositionCount = 20;\n            \n            TranslateTransform animatedTransform = \n                new TranslateTransform();\n                \n            // Assign the transform a name by \n            // registering it with the page, so that\n            // it can be targeted by storyboard\n            // animations.      \n            this.RegisterName(&quot;animatedTransform&quot;, animatedTransform);             \n            animatedSpecialEffect.Transform = animatedTransform;\n            \n            \n            // Apply the text effect to the run.\n            theText.TextEffects = new TextEffectCollection();\n            theText.TextEffects.Add(animatedSpecialEffect);\n            \n            \n            // Create a paragraph to contain the run.\n            Paragraph animatedParagraph = new Paragraph(theText);\n            animatedParagraph.Background = Brushes.LightGray;           \n   \n            this.Blocks.Add(animatedParagraph);                           \n            \n            //\n            // Create a storyboard to animate the\n            // text effect&#39;s transform.\n            //\n            myStoryboard = new Storyboard();\n            \n            xAnimation = new DoubleAnimation();  \n            xAnimation.Duration = TimeSpan.FromSeconds(5);                        \n            Storyboard.SetTargetName(xAnimation, &quot;animatedTransform&quot;);\n            Storyboard.SetTargetProperty(xAnimation, \n                new PropertyPath(TranslateTransform.XProperty));      \n            myStoryboard.Children.Add(xAnimation);\n            \n            yAnimation = new DoubleAnimation();\n            yAnimation.Duration = TimeSpan.FromSeconds(5);           \n            Storyboard.SetTargetName(yAnimation, &quot;animatedTransform&quot;);\n            Storyboard.SetTargetProperty(yAnimation, \n                new PropertyPath(TranslateTransform.YProperty));      \n            myStoryboard.Children.Add(yAnimation);            \n            \n            this.MouseLeftButtonDown += \n                new MouseButtonEventHandler(document_mouseLeftButtonDown);\n            this.MouseRightButtonDown += \n                new MouseButtonEventHandler(document_mouseRightButtonDown);\n            \n        }\n              \n        \n\n        // When the user left-clicks, use the \n        // SnapshotAndReplace HandoffBehavior when applying the animation.        \n        private void document_mouseLeftButtonDown(object sender, MouseButtonEventArgs e)\n        {\n        \n            Point clickPoint = Mouse.GetPosition(this);\n            \n      \n            // Animate to the target point.\n            xAnimation.To = clickPoint.X; \n            yAnimation.To = clickPoint.Y;\n\n            try\n            {\n                myStoryboard.Begin(this, HandoffBehavior.SnapshotAndReplace);  \n            \n            }catch(Exception ex)\n            {\n                MessageBox.Show(ex.ToString());\n            }\n        }\n        \n        // When the user right-clicks, use the \n        // Compose HandoffBehavior when applying the animation.\n        private void document_mouseRightButtonDown(object sender, MouseButtonEventArgs e)\n        {\n        \n\n            Point clickPoint = Mouse.GetPosition(this);\n\n            // Animate to the target point.\n            xAnimation.To = clickPoint.X;\n            yAnimation.To = clickPoint.Y;\n            myStoryboard.Begin(this, HandoffBehavior.Compose);  \n            \n                    \n        }        \n        \n   \n\n \n\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_Begin_System_Windows_FrameworkElement_System_Boolean_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_Begin_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Begin(FrameworkElement,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Applies the animations associated with this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> to their targets and initiates them.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Begin (System.Windows.FrameworkElement containingObject, bool isControllable);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>containingObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object contained within the same name scope as the targets of this storyboard&#39;s animations. Animations without a <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.TargetName*</span> are applied to <code>containingObject</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>isControllable</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> if the storyboard should be interactively controllable; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the targeted properties are already animated, they are replaced using the <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a> handoff behavior.  </p>\n<p> To interactively control this storyboard, you must use the same <code>containingObject</code> parameter when calling the interactive methods that you used to begin the storyboard  </p>\n<p> When this method is called, <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> objects are created for the storyboard and any timelines it contains. These clocks are stored with <code>containingObject</code>.  </p>\n<p> Beginning a storyboard triggers the <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_CurrentStateInvalidated\" data-linktype=\"relative-path\">CurrentStateInvalidated</a> and <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_CurrentGlobalSpeedInvalidated\" data-linktype=\"relative-path\">CurrentGlobalSpeedInvalidated</a> events.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_Begin_System_Windows_FrameworkElement_System_Windows_FrameworkTemplate_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_Begin_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Begin(FrameworkElement,FrameworkTemplate)</div>        \r\n          </div>\r\n    \r\n            <p>Applies the animations associated with this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> to their targets within the specified template and initiates them.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Begin (System.Windows.FrameworkElement containingObject, System.Windows.FrameworkTemplate frameworkTemplate);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>containingObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to which the specified <code>frameworkTemplate</code> has been applied. Animations without a <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.TargetName*</span> are applied to <code>containingObject</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>frameworkTemplate</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.frameworktemplate\" data-linktype=\"relative-path\">FrameworkTemplate</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The template to animate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the targeted properties are already animated, they are replaced using the <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a> handoff behavior.  </p>\n<p> When this method is called, <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> objects are created for the storyboard and any timelines it contains. These clocks are stored with <code>containingObject</code>.  </p>\n<p> Beginning a storyboard triggers the <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_CurrentStateInvalidated\" data-linktype=\"relative-path\">CurrentStateInvalidated</a> and <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_CurrentGlobalSpeedInvalidated\" data-linktype=\"relative-path\">CurrentGlobalSpeedInvalidated</a> events.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_Begin_System_Windows_FrameworkElement_System_Windows_Media_Animation_HandoffBehavior_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_Begin_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Begin(FrameworkElement,HandoffBehavior)</div>        \r\n          </div>\r\n    \r\n            <p>Applies the animations associated with this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> to their targets and initiates them, using the specified <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Begin (System.Windows.FrameworkElement containingObject, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>containingObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object contained within the same name scope as the targets of this storyboard&#39;s animations. Animations without a specified <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.TargetName*</span> are applied to <code>containingObject</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>handoffBehavior</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The behavior the new animation should use to interact with any current animations.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a> <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a> to animate when the user left-clicks, and the <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a> <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a> when the user right-clicks.  </p>\n<pre><code class=\"lang-cs\" name=\"StoryboardBeginAnimation_procedural_snip#GraphicsMMFrameworkElementStoryboardHandoffBehaviorExample\">/*\n\n   This sample animates the position of an ellipse when \n   the user clicks within the main border. If the user\n   left-clicks, the SnapshotAndReplace HandoffBehavior\n   is used when applying the animations. If the user\n   right-clicks, the Compose HandoffBehavior is used\n   instead.\n\n*/\n\nusing System;\nusing System.Windows;\nusing System.Windows.Navigation;\nusing System.Windows.Media;\nusing System.Windows.Media.Animation;\nusing System.Windows.Shapes;\nusing System.Windows.Controls;\nusing System.Windows.Input;\n\nnamespace Microsoft.Samples.Animation.AnimatingWithStoryboards\n{\n\n    // Create the demonstration.\n    public class FrameworkElementStoryboardHandoffBehaviorExample : Page {\n        \n        \n        private Border containerBorder;\n        private Ellipse interactiveEllipse;\n        private Storyboard theStoryboard;\n        private DoubleAnimation xAnimation;\n        private DoubleAnimation yAnimation;\n        \n        public FrameworkElementStoryboardHandoffBehaviorExample()\n        {\n        \n            WindowTitle = &quot;Interactive Animation Example&quot;;\n            \n            // Create a name scope for the page.\n            NameScope.SetNameScope(this, new NameScope());  \n            \n            DockPanel myPanel = new DockPanel();\n            myPanel.Margin = new Thickness(20.0);            \n    \n            containerBorder = new Border();\n            containerBorder.Background = Brushes.White;\n            containerBorder.BorderBrush = Brushes.Black;\n            containerBorder.BorderThickness = new Thickness(2.0); \n            containerBorder.VerticalAlignment = VerticalAlignment.Stretch;\n            \n            interactiveEllipse = new Ellipse();\n            interactiveEllipse.Fill = Brushes.Lime;\n            interactiveEllipse.Stroke = Brushes.Black;\n            interactiveEllipse.StrokeThickness = 2.0;\n            interactiveEllipse.Width = 25;\n            interactiveEllipse.Height = 25;\n            interactiveEllipse.HorizontalAlignment = HorizontalAlignment.Left;\n            interactiveEllipse.VerticalAlignment = VerticalAlignment.Top;\n            \n\n            TranslateTransform interactiveTranslateTransform = new TranslateTransform();       \n            this.RegisterName(&quot;InteractiveTranslateTransform&quot;, interactiveTranslateTransform);\n            \n            interactiveEllipse.RenderTransform = \n                interactiveTranslateTransform;\n                \n            xAnimation = new DoubleAnimation();\n            xAnimation.Duration = TimeSpan.FromSeconds(4);\n            yAnimation = xAnimation.Clone();\n            Storyboard.SetTargetName(xAnimation, &quot;InteractiveTranslateTransform&quot;);\n            Storyboard.SetTargetProperty(xAnimation, new PropertyPath(TranslateTransform.XProperty));\n            Storyboard.SetTargetName(yAnimation, &quot;InteractiveTranslateTransform&quot;);\n            Storyboard.SetTargetProperty(yAnimation, new PropertyPath(TranslateTransform.YProperty));            \n            \n            theStoryboard = new Storyboard();\n            theStoryboard.Children.Add(xAnimation);\n            theStoryboard.Children.Add(yAnimation);\n                \n                \n            containerBorder.MouseLeftButtonDown += \n                new MouseButtonEventHandler(border_mouseLeftButtonDown);\n            containerBorder.MouseRightButtonDown += \n                new MouseButtonEventHandler(border_mouseRightButtonDown);                \n            \n            containerBorder.Child = interactiveEllipse;\n            myPanel.Children.Add(containerBorder);\n            this.Content = myPanel;\n        }\n        \n\n        // When the user left-clicks, use the \n        // SnapshotAndReplace HandoffBehavior when applying the animation.        \n        private void border_mouseLeftButtonDown(object sender, MouseButtonEventArgs e)\n        {\n        \n            Point clickPoint = Mouse.GetPosition(containerBorder);\n            \n            // Set the target point so the center of the ellipse\n            // ends up at the clicked point.\n            Point targetPoint = new Point();\n            targetPoint.X = clickPoint.X - interactiveEllipse.Width / 2;\n            targetPoint.Y = clickPoint.Y - interactiveEllipse.Height / 2;  \n            \n            // Animate to the target point.\n            xAnimation.To = targetPoint.X;\n            yAnimation.To = targetPoint.Y;\n            theStoryboard.Begin(this, HandoffBehavior.SnapshotAndReplace);\n            \n\n            // Change the color of the ellipse.\n            interactiveEllipse.Fill = Brushes.Lime;\n                    \n        }\n        \n        // When the user right-clicks, use the \n        // Compose HandoffBehavior when applying the animation.\n        private void border_mouseRightButtonDown(object sender, MouseButtonEventArgs e)\n        {\n        \n            // Find the point where the use clicked.\n            Point clickPoint = Mouse.GetPosition(containerBorder);\n            \n            // Set the target point so the center of the ellipse\n            // ends up at the clicked point.\n            Point targetPoint = new Point();\n            targetPoint.X = clickPoint.X - interactiveEllipse.Width / 2;\n            targetPoint.Y = clickPoint.Y - interactiveEllipse.Height / 2;\n \n            // Animate to the target point.\n            xAnimation.To = targetPoint.X;\n            yAnimation.To = targetPoint.Y;\n            theStoryboard.Begin(this, HandoffBehavior.Compose);\n                \n            // Change the color of the ellipse.\n            interactiveEllipse.Fill = Brushes.Orange;\n            \n                    \n        }\n        \n    }\n \n}\n</code></pre><pre><code class=\"lang-vb\" name=\"StoryboardBeginAnimation_procedural_snip#GraphicsMMFrameworkElementStoryboardHandoffBehaviorExample\">&#39;\n&#39;\n&#39;   This sample animates the position of an ellipse when \n&#39;   the user clicks within the main border. If the user\n&#39;   left-clicks, the SnapshotAndReplace HandoffBehavior\n&#39;   is used when applying the animations. If the user\n&#39;   right-clicks, the Compose HandoffBehavior is used\n&#39;   instead.\n&#39;\n&#39;\n\n\nImports System\nImports System.Windows\nImports System.Windows.Navigation\nImports System.Windows.Media\nImports System.Windows.Media.Animation\nImports System.Windows.Shapes\nImports System.Windows.Controls\nImports System.Windows.Input\n\nNamespace Microsoft.Samples.Animation.AnimatingWithStoryboards\n\n\t&#39; Create the demonstration.\n\tPublic Class FrameworkElementStoryboardHandoffBehaviorExample\n\t\tInherits Page\n\n\n\t\tPrivate containerBorder As Border\n\t\tPrivate interactiveEllipse As Ellipse\n\t\tPrivate theStoryboard As Storyboard\n\t\tPrivate xAnimation As DoubleAnimation\n\t\tPrivate yAnimation As DoubleAnimation\n\n\t\tPublic Sub New()\n\n\t\t\tWindowTitle = &quot;Interactive Animation Example&quot;\n\n\t\t\t&#39; Create a name scope for the page.\n\t\t\tNameScope.SetNameScope(Me, New NameScope())\n\n\t\t\tDim myPanel As New DockPanel()\n\t\t\tmyPanel.Margin = New Thickness(20.0)\n\n\t\t\tcontainerBorder = New Border()\n\t\t\tcontainerBorder.Background = Brushes.White\n\t\t\tcontainerBorder.BorderBrush = Brushes.Black\n\t\t\tcontainerBorder.BorderThickness = New Thickness(2.0)\n\t\t\tcontainerBorder.VerticalAlignment = VerticalAlignment.Stretch\n\n            interactiveEllipse = New Ellipse()\n            With interactiveEllipse\n                .Fill = Brushes.Lime\n                .Stroke = Brushes.Black\n                .StrokeThickness = 2.0\n                .Width = 25\n                .Height = 25\n                .HorizontalAlignment = HorizontalAlignment.Left\n                .VerticalAlignment = VerticalAlignment.Top\n            End With\n\n            Dim interactiveTranslateTransform As New TranslateTransform()\n            Me.RegisterName(&quot;InteractiveTranslateTransform&quot;, interactiveTranslateTransform)\n\n            interactiveEllipse.RenderTransform = interactiveTranslateTransform\n\n            xAnimation = New DoubleAnimation()\n            xAnimation.Duration = TimeSpan.FromSeconds(4)\n            yAnimation = xAnimation.Clone()\n            Storyboard.SetTargetName(xAnimation, &quot;InteractiveTranslateTransform&quot;)\n            Storyboard.SetTargetProperty(xAnimation, New PropertyPath(TranslateTransform.XProperty))\n            Storyboard.SetTargetName(yAnimation, &quot;InteractiveTranslateTransform&quot;)\n            Storyboard.SetTargetProperty(yAnimation, New PropertyPath(TranslateTransform.YProperty))\n\n            theStoryboard = New Storyboard()\n            theStoryboard.Children.Add(xAnimation)\n            theStoryboard.Children.Add(yAnimation)\n\n\n            AddHandler containerBorder.MouseLeftButtonDown, AddressOf border_mouseLeftButtonDown\n            AddHandler containerBorder.MouseRightButtonDown, AddressOf border_mouseRightButtonDown\n\n            containerBorder.Child = interactiveEllipse\n            myPanel.Children.Add(containerBorder)\n            Me.Content = myPanel\n\t\tEnd Sub\n\n\n\t\t&#39; When the user left-clicks, use the \n\t\t&#39; SnapshotAndReplace HandoffBehavior when applying the animation.        \n\t\tPrivate Sub border_mouseLeftButtonDown(ByVal sender As Object, ByVal e As MouseButtonEventArgs)\n\n\t\t\tDim clickPoint As Point = Mouse.GetPosition(containerBorder)\n\n\t\t\t&#39; Set the target point so the center of the ellipse\n\t\t\t&#39; ends up at the clicked point.\n\t\t\tDim targetPoint As New Point()\n            targetPoint.X = clickPoint.X - interactiveEllipse.Width / 2\n            targetPoint.Y = clickPoint.Y - interactiveEllipse.Height / 2\n\n\t\t\t&#39; Animate to the target point.\n\t\t\txAnimation.To = targetPoint.X\n\t\t\tyAnimation.To = targetPoint.Y\n\t\t\ttheStoryboard.Begin(Me, HandoffBehavior.SnapshotAndReplace)\n\n\n\t\t\t&#39; Change the color of the ellipse.\n\t\t\tinteractiveEllipse.Fill = Brushes.Lime\n\n\t\tEnd Sub\n\n\t\t&#39; When the user right-clicks, use the \n\t\t&#39; Compose HandoffBehavior when applying the animation.\n\t\tPrivate Sub border_mouseRightButtonDown(ByVal sender As Object, ByVal e As MouseButtonEventArgs)\n\n\t\t\t&#39; Find the point where the use clicked.\n\t\t\tDim clickPoint As Point = Mouse.GetPosition(containerBorder)\n\n\t\t\t&#39; Set the target point so the center of the ellipse\n\t\t\t&#39; ends up at the clicked point.\n\t\t\tDim targetPoint As New Point()\n            targetPoint.X = clickPoint.X - interactiveEllipse.Width / 2\n            targetPoint.Y = clickPoint.Y - interactiveEllipse.Height / 2\n\n\t\t\t&#39; Animate to the target point.\n\t\t\txAnimation.To = targetPoint.X\n\t\t\tyAnimation.To = targetPoint.Y\n\t\t\ttheStoryboard.Begin(Me, HandoffBehavior.Compose)\n\n\t\t\t&#39; Change the color of the ellipse.\n\t\t\tinteractiveEllipse.Fill = Brushes.Orange\n\n\n\t\tEnd Sub\n\n\tEnd Class\n\nEnd Namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_Begin_System_Windows_FrameworkContentElement_System_Windows_Media_Animation_HandoffBehavior_System_Boolean_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_Begin_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Begin(FrameworkContentElement,HandoffBehavior,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Applies the animations associated with this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> to their targets and initiates them, using the specified <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Begin (System.Windows.FrameworkContentElement containingObject, System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>containingObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.frameworkcontentelement\" data-linktype=\"relative-path\">FrameworkContentElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object contained within the same name scope as the targets of this storyboard&#39;s animations. Animations without a specified <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.TargetName*</span> are applied to <code>containingObject</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>handoffBehavior</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The behavior the new animation should use to interact with any current animations.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>isControllable</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Declares whether the animation is controllable (can be paused) once started.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the targeted properties are already animated, they are replaced using the specified handoff behavior.  </p>\n<p> To interactively control this storyboard, you must specify the same <code>containingObject</code> when calling the interactive methods that you used to begin the storyboard  </p>\n<p> When this method is called, <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> objects are created for the storyboard and any timelines it contains. These clocks are stored with <code>containingObject</code>.  </p>\n<p> Beginning a storyboard triggers the <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_CurrentStateInvalidated\" data-linktype=\"relative-path\">CurrentStateInvalidated</a> and <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_CurrentGlobalSpeedInvalidated\" data-linktype=\"relative-path\">CurrentGlobalSpeedInvalidated</a> events.  </p>\n<h2 id=\"using-the-compose-handoffbehavior\">Using the Compose HandoffBehavior</h2>\n<p> When you apply a <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>, <a class=\"xref\" href=\"system.windows.media.animation.animationtimeline\" data-linktype=\"relative-path\">AnimationTimeline</a>, or <a class=\"xref\" href=\"system.windows.media.animation.animationclock\" data-linktype=\"relative-path\">AnimationClock</a> to a property using the <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a> <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a>, any <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> objects previously associated with that property continue to consume system resources; the timing system does not remove these clocks automatically.  </p>\n<p> To avoid performance issues when you apply a large number of clocks using <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a>, you should remove composing clocks from the animated property after they complete. There are several ways to remove a clock.  </p>\n<ul>\n<li><p>To remove all clocks from a property, use the <a class=\"xref\" href=\"system.windows.media.animation.animatable#System_Windows_Media_Animation_Animatable_ApplyAnimationClock_System_Windows_DependencyProperty_System_Windows_Media_Animation_AnimationClock_\" data-linktype=\"relative-path\">ApplyAnimationClock(DependencyProperty,AnimationClock)</a> or <a class=\"xref\" href=\"system.windows.media.animation.animatable#System_Windows_Media_Animation_Animatable_BeginAnimation_System_Windows_DependencyProperty_System_Windows_Media_Animation_AnimationTimeline_\" data-linktype=\"relative-path\">BeginAnimation(DependencyProperty,AnimationTimeline)</a> method of the animated object. Specify the property being animated as the first parameter, and <code>null</code> as the second. This removes all animation clocks from the property.  </p>\n</li>\n<li><p>To remove a specific <a class=\"xref\" href=\"system.windows.media.animation.animationclock\" data-linktype=\"relative-path\">AnimationClock</a> from a list of clocks, use the <a class=\"xref\" href=\"system.windows.media.animation.clock#System_Windows_Media_Animation_Clock_Controller_\" data-linktype=\"relative-path\">Controller</a> property of the <a class=\"xref\" href=\"system.windows.media.animation.animationclock\" data-linktype=\"relative-path\">AnimationClock</a> to retrieve a <a class=\"xref\" href=\"system.windows.media.animation.clockcontroller\" data-linktype=\"relative-path\">ClockController</a>, then call the <a class=\"xref\" href=\"system.windows.media.animation.clockcontroller#System_Windows_Media_Animation_ClockController_Remove_\" data-linktype=\"relative-path\">Remove</a> method of the <a class=\"xref\" href=\"system.windows.media.animation.clockcontroller\" data-linktype=\"relative-path\">ClockController</a>. This is typically done in the <a class=\"xref\" href=\"system.windows.media.animation.clock#System_Windows_Media_Animation_Clock_Completed\" data-linktype=\"relative-path\">Completed</a> event handler for a clock. Note that only root clocks can be controlled by a <a class=\"xref\" href=\"system.windows.media.animation.clockcontroller\" data-linktype=\"relative-path\">ClockController</a>; the <a class=\"xref\" href=\"system.windows.media.animation.clock#System_Windows_Media_Animation_Clock_Controller_\" data-linktype=\"relative-path\">Controller</a> property of a child clock returns <code>null</code>. Note also that the <a class=\"xref\" href=\"system.windows.media.animation.clock#System_Windows_Media_Animation_Clock_Completed\" data-linktype=\"relative-path\">Completed</a> event is not called if the effective duration of the clock is forever.  In that case, the user must determine when to call <a class=\"xref\" href=\"system.windows.media.animation.clockcontroller#System_Windows_Media_Animation_ClockController_Remove_\" data-linktype=\"relative-path\">Remove</a>.  </p>\n<p>This is primarily an issue for animations on objects that have a long lifetime.  When an object is garbage collected, its clocks are also disconnected and garbage collected.  </p>\n<p>For more information about clock objects, see <a href=\"../Topic/Animation%20and%20Timing%20System%20Overview.md\" data-linktype=\"relative-path\">Animation and Timing System Overview</a>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses a controllable storyboard to animate a <a class=\"xref\" href=\"system.windows.media.texteffect\" data-linktype=\"relative-path\">TextEffect</a>. The <a class=\"xref\" href=\"system.windows.media.texteffect\" data-linktype=\"relative-path\">TextEffect</a> is contained within a <a class=\"xref\" href=\"system.windows.frameworkcontentelement\" data-linktype=\"relative-path\">FrameworkContentElement</a>&#39;s name scope.  </p>\n<pre><code class=\"lang-cs\" name=\"StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage\">/*\n    This example shows how to control\n    a storyboard after it has started.\n\n*/\n\nusing System;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Media;\nusing System.Windows.Shapes;\nusing System.Windows.Media.Animation;\nusing System.Windows.Documents;\n\n\nnamespace Microsoft.Samples.Animation.AnimatingWithStoryboards\n{\n    public class FrameworkContentElementControlStoryboardExample : FlowDocument\n    {\n    \n        private Storyboard myStoryboard;\n        \n        public FrameworkContentElementControlStoryboardExample()\n        {\n        \n            // Create a name scope for the document.\n            NameScope.SetNameScope(this, new NameScope());        \n            this.Background = Brushes.White;\n            \n            // Create a run of text.\n            Run theText = new Run( \n                &quot;Lorem ipsum dolor sit amet, consectetuer adipiscing elit.&quot; + \n                &quot;Ut non lacus. Nullam a ligula id leo adipiscing ornare.&quot; +\n                &quot; Duis mattis. &quot;);   \n                \n            // Create a TextEffect\n            TextEffect animatedSpecialEffect = new TextEffect();\n            animatedSpecialEffect.Foreground = Brushes.OrangeRed;\n            animatedSpecialEffect.PositionStart = 0;\n            animatedSpecialEffect.PositionCount = 0;\n            \n            // Assign the TextEffect a name by \n            // registering it with the page, so that\n            // it can be targeted by storyboard\n            // animations            \n            this.RegisterName(&quot;animatedSpecialEffect&quot;, animatedSpecialEffect);  \n            \n            // Apply the text effect to the run.\n            theText.TextEffects = new TextEffectCollection();\n            theText.TextEffects.Add(animatedSpecialEffect);\n            \n            // Create a paragraph to contain the run.\n            Paragraph animatedParagraph = new Paragraph(theText);\n            animatedParagraph.Background = Brushes.LightGray;\n            animatedParagraph.Padding = new Thickness(20);\n   \n            this.Blocks.Add(animatedParagraph);            \n            BlockUIContainer controlsContainer = new BlockUIContainer();                \n            \n            //\n            // Create an animation and a storyboard to animate the\n            // text effect.\n            //\n            Int32Animation countAnimation = \n                new Int32Animation(0, 127, TimeSpan.FromSeconds(10)); \n            Storyboard.SetTargetName(countAnimation, &quot;animatedSpecialEffect&quot;);\n            Storyboard.SetTargetProperty(countAnimation, \n                new PropertyPath(TextEffect.PositionCountProperty));\n            myStoryboard = new Storyboard();\n            myStoryboard.Children.Add(countAnimation);\n            \n            //\n            // Create some buttons to control the storyboard\n            // and a panel to contain them.\n            //\n            StackPanel buttonPanel = new StackPanel();\n            buttonPanel.Orientation = Orientation.Vertical;\n            Button beginButton = new Button();\n            beginButton.Content = &quot;Begin&quot;;\n            beginButton.Click += new RoutedEventHandler(beginButton_Clicked);            \n            buttonPanel.Children.Add(beginButton);\n            Button pauseButton = new Button();\n            pauseButton.Content = &quot;Pause&quot;;\n            pauseButton.Click +=new RoutedEventHandler(pauseButton_Clicked);\n            buttonPanel.Children.Add(pauseButton);\n            Button resumeButton = new Button();\n            resumeButton.Content = &quot;Resume&quot;;\n            resumeButton.Click +=new RoutedEventHandler(resumeButton_Clicked);\n            buttonPanel.Children.Add(resumeButton);\n            Button skipToFillButton = new Button();\n            skipToFillButton.Content = &quot;Skip to Fill&quot;;\n            skipToFillButton.Click +=new RoutedEventHandler(skipToFillButton_Clicked);\n            buttonPanel.Children.Add(skipToFillButton);\n            Button setSpeedRatioButton = new Button();\n            setSpeedRatioButton.Content = &quot;Triple Speed&quot;;\n            setSpeedRatioButton.Click +=new RoutedEventHandler(setSpeedRatioButton_Clicked);\n            buttonPanel.Children.Add(setSpeedRatioButton);\n            Button stopButton = new Button();\n            stopButton.Content = &quot;Stop&quot;;\n            stopButton.Click +=new RoutedEventHandler(stopButton_Clicked);\n            buttonPanel.Children.Add(stopButton);\n            Button removeButton = new Button();\n            removeButton.Content = &quot;Remove&quot;;\n            removeButton.Click +=new RoutedEventHandler(removeButton_Clicked);\n            buttonPanel.Children.Add(removeButton); \n   \n            controlsContainer.Child = buttonPanel; \n            this.Blocks.Add(controlsContainer);\n            \n        }\n        \n        // Begins the storyboard.\n        private void beginButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            // Specifying &quot;true&quot; as the second Begin parameter\n            // makes this storyboard controllable.\n            myStoryboard.Begin(this, true);          \n        \n        }\n        \n        // Pauses the storyboard.\n        private void pauseButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.Pause(this);          \n        \n        }\n        \n        // Resumes the storyboard.\n        private void resumeButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.Resume(this);          \n        \n        }     \n        \n        // Advances the storyboard to its fill period.\n        private void skipToFillButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.SkipToFill(this);          \n        \n        } \n        \n        // Updates the storyboard&#39;s speed.\n        private void setSpeedRatioButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            // Makes the storyboard progress three times as fast as normal.\n            myStoryboard.SetSpeedRatio(this, 3);          \n        \n        }           \n        \n        // Stops the storyboard.\n        private void stopButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.Stop(this);          \n        \n        }     \n        \n        // Removes the storyboard.\n        private void removeButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.Remove(this);          \n        \n        }           \n\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage\">&#39;\n&#39;    This example shows how to control\n&#39;    a storyboard after it has started.\n&#39;\n&#39;\n\n\nImports System\nImports System.Windows\nImports System.Windows.Controls\nImports System.Windows.Media\nImports System.Windows.Shapes\nImports System.Windows.Media.Animation\nImports System.Windows.Documents\n\n\nNamespace Microsoft.Samples.Animation.AnimatingWithStoryboards\n\tPublic Class FrameworkContentElementControlStoryboardExample\n\t\tInherits FlowDocument\n\n\t\tPrivate myStoryboard As Storyboard\n\n\t\tPublic Sub New()\n\n\t\t\t&#39; Create a name scope for the document.\n\t\t\tNameScope.SetNameScope(Me, New NameScope())\n\t\t\tMe.Background = Brushes.White\n\n\t\t\t&#39; Create a run of text.\n\t\t\tDim theText As New Run(&quot;Lorem ipsum dolor sit amet, consectetuer adipiscing elit.&quot; &amp; &quot;Ut non lacus. Nullam a ligula id leo adipiscing ornare.&quot; &amp; &quot; Duis mattis. &quot;)\n\n\t\t\t&#39; Create a TextEffect\n\t\t\tDim animatedSpecialEffect As New TextEffect()\n\t\t\tanimatedSpecialEffect.Foreground = Brushes.OrangeRed\n\t\t\tanimatedSpecialEffect.PositionStart = 0\n\t\t\tanimatedSpecialEffect.PositionCount = 0\n\n\t\t\t&#39; Assign the TextEffect a name by \n\t\t\t&#39; registering it with the page, so that\n\t\t\t&#39; it can be targeted by storyboard\n\t\t\t&#39; animations            \n\t\t\tMe.RegisterName(&quot;animatedSpecialEffect&quot;, animatedSpecialEffect)\n\n\t\t\t&#39; Apply the text effect to the run.\n\t\t\ttheText.TextEffects = New TextEffectCollection()\n\t\t\ttheText.TextEffects.Add(animatedSpecialEffect)\n\n\t\t\t&#39; Create a paragraph to contain the run.\n\t\t\tDim animatedParagraph As New Paragraph(theText)\n\t\t\tanimatedParagraph.Background = Brushes.LightGray\n\t\t\tanimatedParagraph.Padding = New Thickness(20)\n\n\t\t\tMe.Blocks.Add(animatedParagraph)\n\t\t\tDim controlsContainer As New BlockUIContainer()\n\n\t\t\t&#39;\n\t\t\t&#39; Create an animation and a storyboard to animate the\n\t\t\t&#39; text effect.\n\t\t\t&#39;\n\t\t\tDim countAnimation As New Int32Animation(0, 127, TimeSpan.FromSeconds(10))\n\t\t\tStoryboard.SetTargetName(countAnimation, &quot;animatedSpecialEffect&quot;)\n\t\t\tStoryboard.SetTargetProperty(countAnimation, New PropertyPath(TextEffect.PositionCountProperty))\n\t\t\tmyStoryboard = New Storyboard()\n\t\t\tmyStoryboard.Children.Add(countAnimation)\n\n\t\t\t&#39;\n\t\t\t&#39; Create some buttons to control the storyboard\n\t\t\t&#39; and a panel to contain them.\n\t\t\t&#39;\n\t\t\tDim buttonPanel As New StackPanel()\n\t\t\tbuttonPanel.Orientation = Orientation.Vertical\n\t\t\tDim beginButton As New Button()\n\t\t\tbeginButton.Content = &quot;Begin&quot;\n\t\t\tAddHandler beginButton.Click, AddressOf beginButton_Clicked\n\t\t\tbuttonPanel.Children.Add(beginButton)\n\t\t\tDim pauseButton As New Button()\n\t\t\tpauseButton.Content = &quot;Pause&quot;\n\t\t\tAddHandler pauseButton.Click, AddressOf pauseButton_Clicked\n\t\t\tbuttonPanel.Children.Add(pauseButton)\n\t\t\tDim resumeButton As New Button()\n\t\t\tresumeButton.Content = &quot;Resume&quot;\n\t\t\tAddHandler resumeButton.Click, AddressOf resumeButton_Clicked\n\t\t\tbuttonPanel.Children.Add(resumeButton)\n\t\t\tDim skipToFillButton As New Button()\n\t\t\tskipToFillButton.Content = &quot;Skip to Fill&quot;\n\t\t\tAddHandler skipToFillButton.Click, AddressOf skipToFillButton_Clicked\n\t\t\tbuttonPanel.Children.Add(skipToFillButton)\n\t\t\tDim setSpeedRatioButton As New Button()\n\t\t\tsetSpeedRatioButton.Content = &quot;Triple Speed&quot;\n\t\t\tAddHandler setSpeedRatioButton.Click, AddressOf setSpeedRatioButton_Clicked\n\t\t\tbuttonPanel.Children.Add(setSpeedRatioButton)\n\t\t\tDim stopButton As New Button()\n\t\t\tstopButton.Content = &quot;Stop&quot;\n\t\t\tAddHandler stopButton.Click, AddressOf stopButton_Clicked\n\t\t\tbuttonPanel.Children.Add(stopButton)\n\t\t\tDim removeButton As New Button()\n\t\t\tremoveButton.Content = &quot;Remove&quot;\n\t\t\tAddHandler removeButton.Click, AddressOf removeButton_Clicked\n\t\t\tbuttonPanel.Children.Add(removeButton)\n\n\t\t\tcontrolsContainer.Child = buttonPanel\n\t\t\tMe.Blocks.Add(controlsContainer)\n\n\t\tEnd Sub\n\n\t\t&#39; Begins the storyboard.\n\t\tPrivate Sub beginButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t&#39; Specifying &quot;true&quot; as the second Begin parameter\n\t\t\t&#39; makes this storyboard controllable.\n\t\t\tmyStoryboard.Begin(Me, True)\n\n\t\tEnd Sub\n\n\t\t&#39; Pauses the storyboard.\n\t\tPrivate Sub pauseButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.Pause(Me)\n\n\t\tEnd Sub\n\n\t\t&#39; Resumes the storyboard.\n\t\tPrivate Sub resumeButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.Resume(Me)\n\n\t\tEnd Sub\n\n\t\t&#39; Advances the storyboard to its fill period.\n\t\tPrivate Sub skipToFillButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.SkipToFill(Me)\n\n\t\tEnd Sub\n\n\t\t&#39; Updates the storyboard&#39;s speed.\n\t\tPrivate Sub setSpeedRatioButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t&#39; Makes the storyboard progress three times as fast as normal.\n\t\t\tmyStoryboard.SetSpeedRatio(Me, 3)\n\n\t\tEnd Sub\n\n\t\t&#39; Stops the storyboard.\n\t\tPrivate Sub stopButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.Stop(Me)\n\n\t\tEnd Sub\n\n\t\t&#39; Removes the storyboard.\n\t\tPrivate Sub removeButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.Remove(Me)\n\n\t\tEnd Sub\n\n\tEnd Class\nEnd Namespace\n</code></pre><p> The next example uses the <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a> <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a> to animate when the user left-clicks, and the <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a> <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a> when the user right-clicks.  </p>\n<pre><code class=\"lang-vb\" name=\"StoryboardBeginAnimation_procedural_snip#FrameworkContentElementStoryboardWithHandoffBehaviorExampleWholePage\">&#39;\n&#39;    This example shows how to animate\n&#39;    a FrameworkContentElement with a storyboard.\n&#39;\n&#39;\n\n\nImports System\nImports System.Windows\nImports System.Windows.Controls\nImports System.Windows.Media\nImports System.Windows.Shapes\nImports System.Windows.Media.Animation\nImports System.Windows.Documents\nImports System.Windows.Input\n\n\nNamespace Microsoft.Samples.Animation.AnimatingWithStoryboards\n\tPublic Class FrameworkContentElementStoryboardWithHandoffBehaviorExample\n\t\tInherits FlowDocument\n\n\t\tPrivate myStoryboard As Storyboard\n\t\tPrivate xAnimation As DoubleAnimation\n\t\tPrivate yAnimation As DoubleAnimation\n\n\t\tPublic Sub New()\n\n\t\t\t&#39; Create a name scope for the document.\n\t\t\tNameScope.SetNameScope(Me, New NameScope())\n\t\t\tMe.Background = Brushes.Orange\n\n\t\t\t&#39; Create a run of text.\n\t\t\tDim theText As New Run(&quot;Lorem ipsum dolor sit amet, consectetuer adipiscing elit.&quot;)\n\n\t\t\t&#39; Create a TextEffect\n\t\t\tDim animatedSpecialEffect As New TextEffect()\n\t\t\tanimatedSpecialEffect.Foreground = Brushes.OrangeRed\n\t\t\tanimatedSpecialEffect.PositionStart = 0\n\t\t\tanimatedSpecialEffect.PositionCount = 20\n\n\t\t\tDim animatedTransform As New TranslateTransform()\n\n\t\t\t&#39; Assign the transform a name by \n\t\t\t&#39; registering it with the page, so that\n\t\t\t&#39; it can be targeted by storyboard\n\t\t\t&#39; animations.      \n\t\t\tMe.RegisterName(&quot;animatedTransform&quot;, animatedTransform)\n\t\t\tanimatedSpecialEffect.Transform = animatedTransform\n\n\n\t\t\t&#39; Apply the text effect to the run.\n\t\t\ttheText.TextEffects = New TextEffectCollection()\n\t\t\ttheText.TextEffects.Add(animatedSpecialEffect)\n\n\n\t\t\t&#39; Create a paragraph to contain the run.\n\t\t\tDim animatedParagraph As New Paragraph(theText)\n\t\t\tanimatedParagraph.Background = Brushes.LightGray\n\n\t\t\tMe.Blocks.Add(animatedParagraph)\n\n\t\t\t&#39;\n\t\t\t&#39; Create a storyboard to animate the\n\t\t\t&#39; text effect&#39;s transform.\n\t\t\t&#39;\n\t\t\tmyStoryboard = New Storyboard()\n\n\t\t\txAnimation = New DoubleAnimation()\n\t\t\txAnimation.Duration = TimeSpan.FromSeconds(5)\n\t\t\tStoryboard.SetTargetName(xAnimation, &quot;animatedTransform&quot;)\n\t\t\tStoryboard.SetTargetProperty(xAnimation, New PropertyPath(TranslateTransform.XProperty))\n\t\t\tmyStoryboard.Children.Add(xAnimation)\n\n\t\t\tyAnimation = New DoubleAnimation()\n\t\t\tyAnimation.Duration = TimeSpan.FromSeconds(5)\n\t\t\tStoryboard.SetTargetName(yAnimation, &quot;animatedTransform&quot;)\n\t\t\tStoryboard.SetTargetProperty(yAnimation, New PropertyPath(TranslateTransform.YProperty))\n\t\t\tmyStoryboard.Children.Add(yAnimation)\n\n\t\t\tAddHandler MouseLeftButtonDown, AddressOf document_mouseLeftButtonDown\n\t\t\tAddHandler MouseRightButtonDown, AddressOf document_mouseRightButtonDown\n\n\t\tEnd Sub\n\n\n\n\t\t&#39; When the user left-clicks, use the \n\t\t&#39; SnapshotAndReplace HandoffBehavior when applying the animation.        \n\t\tPrivate Sub document_mouseLeftButtonDown(ByVal sender As Object, ByVal e As MouseButtonEventArgs)\n\n\t\t\tDim clickPoint As Point = Mouse.GetPosition(Me)\n\n\n\t\t\t&#39; Animate to the target point.\n\t\t\txAnimation.To = clickPoint.X\n\t\t\tyAnimation.To = clickPoint.Y\n\n\t\t\tTry\n\t\t\t\tmyStoryboard.Begin(Me, HandoffBehavior.SnapshotAndReplace)\n\n\t\t\tCatch ex As Exception\n\t\t\t\tMessageBox.Show(ex.ToString())\n\t\t\tEnd Try\n\t\tEnd Sub\n\n\t\t&#39; When the user right-clicks, use the \n\t\t&#39; Compose HandoffBehavior when applying the animation.\n\t\tPrivate Sub document_mouseRightButtonDown(ByVal sender As Object, ByVal e As MouseButtonEventArgs)\n\n\n\t\t\tDim clickPoint As Point = Mouse.GetPosition(Me)\n\n\t\t\t&#39; Animate to the target point.\n\t\t\txAnimation.To = clickPoint.X\n\t\t\tyAnimation.To = clickPoint.Y\n\t\t\tmyStoryboard.Begin(Me, HandoffBehavior.Compose)\n\n\n\t\tEnd Sub\n\n\n\n\n\n\tEnd Class\nEnd Namespace\n</code></pre><pre><code class=\"lang-cs\" name=\"StoryboardBeginAnimation_procedural_snip#FrameworkContentElementStoryboardWithHandoffBehaviorExampleWholePage\">/*\n    This example shows how to animate\n    a FrameworkContentElement with a storyboard.\n\n*/\n\nusing System;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Media;\nusing System.Windows.Shapes;\nusing System.Windows.Media.Animation;\nusing System.Windows.Documents;\nusing System.Windows.Input;\n\n\nnamespace Microsoft.Samples.Animation.AnimatingWithStoryboards\n{\n    public class FrameworkContentElementStoryboardWithHandoffBehaviorExample : \n        FlowDocument\n    {\n    \n        private Storyboard myStoryboard;\n        DoubleAnimation xAnimation;\n        DoubleAnimation yAnimation;\n        \n        public FrameworkContentElementStoryboardWithHandoffBehaviorExample()\n        {\n        \n            // Create a name scope for the document.\n            NameScope.SetNameScope(this, new NameScope());        \n            this.Background = Brushes.Orange;\n            \n            // Create a run of text.\n            Run theText = new Run( \n                &quot;Lorem ipsum dolor sit amet, consectetuer adipiscing elit.&quot;);   \n                \n            // Create a TextEffect\n            TextEffect animatedSpecialEffect = new TextEffect();\n            animatedSpecialEffect.Foreground = Brushes.OrangeRed;\n            animatedSpecialEffect.PositionStart = 0;\n            animatedSpecialEffect.PositionCount = 20;\n            \n            TranslateTransform animatedTransform = \n                new TranslateTransform();\n                \n            // Assign the transform a name by \n            // registering it with the page, so that\n            // it can be targeted by storyboard\n            // animations.      \n            this.RegisterName(&quot;animatedTransform&quot;, animatedTransform);             \n            animatedSpecialEffect.Transform = animatedTransform;\n            \n            \n            // Apply the text effect to the run.\n            theText.TextEffects = new TextEffectCollection();\n            theText.TextEffects.Add(animatedSpecialEffect);\n            \n            \n            // Create a paragraph to contain the run.\n            Paragraph animatedParagraph = new Paragraph(theText);\n            animatedParagraph.Background = Brushes.LightGray;           \n   \n            this.Blocks.Add(animatedParagraph);                           \n            \n            //\n            // Create a storyboard to animate the\n            // text effect&#39;s transform.\n            //\n            myStoryboard = new Storyboard();\n            \n            xAnimation = new DoubleAnimation();  \n            xAnimation.Duration = TimeSpan.FromSeconds(5);                        \n            Storyboard.SetTargetName(xAnimation, &quot;animatedTransform&quot;);\n            Storyboard.SetTargetProperty(xAnimation, \n                new PropertyPath(TranslateTransform.XProperty));      \n            myStoryboard.Children.Add(xAnimation);\n            \n            yAnimation = new DoubleAnimation();\n            yAnimation.Duration = TimeSpan.FromSeconds(5);           \n            Storyboard.SetTargetName(yAnimation, &quot;animatedTransform&quot;);\n            Storyboard.SetTargetProperty(yAnimation, \n                new PropertyPath(TranslateTransform.YProperty));      \n            myStoryboard.Children.Add(yAnimation);            \n            \n            this.MouseLeftButtonDown += \n                new MouseButtonEventHandler(document_mouseLeftButtonDown);\n            this.MouseRightButtonDown += \n                new MouseButtonEventHandler(document_mouseRightButtonDown);\n            \n        }\n              \n        \n\n        // When the user left-clicks, use the \n        // SnapshotAndReplace HandoffBehavior when applying the animation.        \n        private void document_mouseLeftButtonDown(object sender, MouseButtonEventArgs e)\n        {\n        \n            Point clickPoint = Mouse.GetPosition(this);\n            \n      \n            // Animate to the target point.\n            xAnimation.To = clickPoint.X; \n            yAnimation.To = clickPoint.Y;\n\n            try\n            {\n                myStoryboard.Begin(this, HandoffBehavior.SnapshotAndReplace);  \n            \n            }catch(Exception ex)\n            {\n                MessageBox.Show(ex.ToString());\n            }\n        }\n        \n        // When the user right-clicks, use the \n        // Compose HandoffBehavior when applying the animation.\n        private void document_mouseRightButtonDown(object sender, MouseButtonEventArgs e)\n        {\n        \n\n            Point clickPoint = Mouse.GetPosition(this);\n\n            // Animate to the target point.\n            xAnimation.To = clickPoint.X;\n            yAnimation.To = clickPoint.Y;\n            myStoryboard.Begin(this, HandoffBehavior.Compose);  \n            \n                    \n        }        \n        \n   \n\n \n\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_Begin_System_Windows_FrameworkElement_System_Windows_FrameworkTemplate_System_Boolean_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_Begin_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Begin(FrameworkElement,FrameworkTemplate,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Applies the animations associated with this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> to their targets within the specified template and initiates them.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Begin (System.Windows.FrameworkElement containingObject, System.Windows.FrameworkTemplate frameworkTemplate, bool isControllable);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>containingObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to which the specified <code>frameworkTemplate</code> has been applied.  Animations without a <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.TargetName*</span> are applied to <code>containingObject</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>frameworkTemplate</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.frameworktemplate\" data-linktype=\"relative-path\">FrameworkTemplate</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The template to animate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>isControllable</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> if the storyboard should be interactively controllable; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the targeted properties are already animated, they are replaced using the <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a> handoff behavior.  </p>\n<p> To interactively control this storyboard, you must specify the same <code>containingObject</code> when calling the interactive methods that you used to begin the storyboard  </p>\n<p> When this method is called, <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> objects are created for the storyboard and any timelines it contains. These clocks are stored with <code>containingObject</code>.  </p>\n<p> Beginning a storyboard triggers the <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_CurrentStateInvalidated\" data-linktype=\"relative-path\">CurrentStateInvalidated</a> and <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_CurrentGlobalSpeedInvalidated\" data-linktype=\"relative-path\">CurrentGlobalSpeedInvalidated</a> events.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_Begin_System_Windows_FrameworkElement_System_Windows_FrameworkTemplate_System_Windows_Media_Animation_HandoffBehavior_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_Begin_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Begin(FrameworkElement,FrameworkTemplate,HandoffBehavior)</div>        \r\n          </div>\r\n    \r\n            <p>Applies the animations associated with this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> to their targets within the specified template and initiates them.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Begin (System.Windows.FrameworkElement containingObject, System.Windows.FrameworkTemplate frameworkTemplate, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>containingObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to which the specified <code>frameworkTemplate</code> has been applied. Animations without a <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.TargetName*</span> are applied to <code>containingObject</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>frameworkTemplate</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.frameworktemplate\" data-linktype=\"relative-path\">FrameworkTemplate</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The template to animate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>handoffBehavior</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The behavior the new animation should use to interact with any current animations.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When this method is called, <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> objects are created for the storyboard and any timelines it contains. These clocks are stored with <code>containingObject</code>.  </p>\n<p> Beginning a storyboard triggers the <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_CurrentStateInvalidated\" data-linktype=\"relative-path\">CurrentStateInvalidated</a> and <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_CurrentGlobalSpeedInvalidated\" data-linktype=\"relative-path\">CurrentGlobalSpeedInvalidated</a> events.  </p>\n<h2 id=\"using-the-compose-handoffbehavior\">Using the Compose HandoffBehavior</h2>\n<p> When you apply a <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>, <a class=\"xref\" href=\"system.windows.media.animation.animationtimeline\" data-linktype=\"relative-path\">AnimationTimeline</a>, or <a class=\"xref\" href=\"system.windows.media.animation.animationclock\" data-linktype=\"relative-path\">AnimationClock</a> to a property using the <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a> <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a>, any <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> objects previously associated with that property continue to consume system resources; the timing system does not remove these clocks automatically.  </p>\n<p> To avoid performance issues when you apply a large number of clocks using <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a>, you should remove composing clocks from the animated property after they complete. There are several ways to remove a clock.  </p>\n<ul>\n<li><p>To remove all clocks from a property, use the <a class=\"xref\" href=\"system.windows.media.animation.animatable#System_Windows_Media_Animation_Animatable_ApplyAnimationClock_System_Windows_DependencyProperty_System_Windows_Media_Animation_AnimationClock_\" data-linktype=\"relative-path\">ApplyAnimationClock(DependencyProperty,AnimationClock)</a> or <a class=\"xref\" href=\"system.windows.media.animation.animatable#System_Windows_Media_Animation_Animatable_BeginAnimation_System_Windows_DependencyProperty_System_Windows_Media_Animation_AnimationTimeline_\" data-linktype=\"relative-path\">BeginAnimation(DependencyProperty,AnimationTimeline)</a> method of the animated object. Specify the property being animated as the first parameter, and <code>null</code> as the second. This removes all animation clocks from the property.  </p>\n</li>\n<li><p>To remove a specific <a class=\"xref\" href=\"system.windows.media.animation.animationclock\" data-linktype=\"relative-path\">AnimationClock</a> from a list of clocks, use the <a class=\"xref\" href=\"system.windows.media.animation.clock#System_Windows_Media_Animation_Clock_Controller_\" data-linktype=\"relative-path\">Controller</a> property of the <a class=\"xref\" href=\"system.windows.media.animation.animationclock\" data-linktype=\"relative-path\">AnimationClock</a> to retrieve a <a class=\"xref\" href=\"system.windows.media.animation.clockcontroller\" data-linktype=\"relative-path\">ClockController</a>, then call the <a class=\"xref\" href=\"system.windows.media.animation.clockcontroller#System_Windows_Media_Animation_ClockController_Remove_\" data-linktype=\"relative-path\">Remove</a> method of the <a class=\"xref\" href=\"system.windows.media.animation.clockcontroller\" data-linktype=\"relative-path\">ClockController</a>. This is typically done in the <a class=\"xref\" href=\"system.windows.media.animation.clock#System_Windows_Media_Animation_Clock_Completed\" data-linktype=\"relative-path\">Completed</a> event handler for a clock. Note that only root clocks can be controlled by a <a class=\"xref\" href=\"system.windows.media.animation.clockcontroller\" data-linktype=\"relative-path\">ClockController</a>; the <a class=\"xref\" href=\"system.windows.media.animation.clock#System_Windows_Media_Animation_Clock_Controller_\" data-linktype=\"relative-path\">Controller</a> property of a child clock returns <code>null</code>. Note also that the <a class=\"xref\" href=\"system.windows.media.animation.clock#System_Windows_Media_Animation_Clock_Completed\" data-linktype=\"relative-path\">Completed</a> event is not called if the effective duration of the clock is forever.  In that case, the user must determine when to call <a class=\"xref\" href=\"system.windows.media.animation.clockcontroller#System_Windows_Media_Animation_ClockController_Remove_\" data-linktype=\"relative-path\">Remove</a>.  </p>\n<p>This is primarily an issue for animations on objects that have a long lifetime.  When an object is garbage collected, its clocks are also disconnected and garbage collected.  </p>\n<p>For more information about clock objects, see <a href=\"../Topic/Animation%20and%20Timing%20System%20Overview.md\" data-linktype=\"relative-path\">Animation and Timing System Overview</a>.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_Begin_System_Windows_FrameworkElement_System_Windows_Media_Animation_HandoffBehavior_System_Boolean_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_Begin_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Begin(FrameworkElement,HandoffBehavior,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Applies the animations associated with this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> to their targets and initiates them.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Begin (System.Windows.FrameworkElement containingObject, System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>containingObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object contained within the same name scope as the targets of this storyboard&#39;s animations. Animations without a specified <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.TargetName*</span> are applied to <code>containingObject</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>handoffBehavior</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The behavior the new animation should use to interact with any current animations.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>isControllable</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Declares whether the animation is controllable (can be paused) once started.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To interactively control this storyboard, you must use the same <code>containingObject</code> parameter when calling the interactive methods that you used to begin the storyboard  </p>\n<p> When this method is called, <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> objects are created for the storyboard and any timelines it contains. These clocks are stored with <code>containingObject</code>.  </p>\n<p> Beginning a storyboard triggers the <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_CurrentStateInvalidated\" data-linktype=\"relative-path\">CurrentStateInvalidated</a> and <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_CurrentGlobalSpeedInvalidated\" data-linktype=\"relative-path\">CurrentGlobalSpeedInvalidated</a> events.  </p>\n<h2 id=\"using-the-compose-handoffbehavior\">Using the Compose HandoffBehavior</h2>\n<p> When you apply a <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>, <a class=\"xref\" href=\"system.windows.media.animation.animationtimeline\" data-linktype=\"relative-path\">AnimationTimeline</a>, or <a class=\"xref\" href=\"system.windows.media.animation.animationclock\" data-linktype=\"relative-path\">AnimationClock</a> to a property using the <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a> <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a>, any <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> objects previously associated with that property continue to consume system resources; the timing system does not remove these clocks automatically.  </p>\n<p> To avoid performance issues when you apply a large number of clocks using <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a>, you should remove composing clocks from the animated property after they complete. There are several ways to remove a clock.  </p>\n<ul>\n<li><p>To remove all clocks from a property, use the <a class=\"xref\" href=\"system.windows.media.animation.animatable#System_Windows_Media_Animation_Animatable_ApplyAnimationClock_System_Windows_DependencyProperty_System_Windows_Media_Animation_AnimationClock_\" data-linktype=\"relative-path\">ApplyAnimationClock(DependencyProperty,AnimationClock)</a> or <a class=\"xref\" href=\"system.windows.media.animation.animatable#System_Windows_Media_Animation_Animatable_BeginAnimation_System_Windows_DependencyProperty_System_Windows_Media_Animation_AnimationTimeline_\" data-linktype=\"relative-path\">BeginAnimation(DependencyProperty,AnimationTimeline)</a> method of the animated object. Specify the property being animated as the first parameter, and <code>null</code> as the second. This removes all animation clocks from the property.  </p>\n</li>\n<li><p>To remove a specific <a class=\"xref\" href=\"system.windows.media.animation.animationclock\" data-linktype=\"relative-path\">AnimationClock</a> from a list of clocks, use the <a class=\"xref\" href=\"system.windows.media.animation.clock#System_Windows_Media_Animation_Clock_Controller_\" data-linktype=\"relative-path\">Controller</a> property of the <a class=\"xref\" href=\"system.windows.media.animation.animationclock\" data-linktype=\"relative-path\">AnimationClock</a> to retrieve a <a class=\"xref\" href=\"system.windows.media.animation.clockcontroller\" data-linktype=\"relative-path\">ClockController</a>, then call the <a class=\"xref\" href=\"system.windows.media.animation.clockcontroller#System_Windows_Media_Animation_ClockController_Remove_\" data-linktype=\"relative-path\">Remove</a> method of the <a class=\"xref\" href=\"system.windows.media.animation.clockcontroller\" data-linktype=\"relative-path\">ClockController</a>. This is typically done in the <a class=\"xref\" href=\"system.windows.media.animation.clock#System_Windows_Media_Animation_Clock_Completed\" data-linktype=\"relative-path\">Completed</a> event handler for a clock. Note that only root clocks can be controlled by a <a class=\"xref\" href=\"system.windows.media.animation.clockcontroller\" data-linktype=\"relative-path\">ClockController</a>; the <a class=\"xref\" href=\"system.windows.media.animation.clock#System_Windows_Media_Animation_Clock_Controller_\" data-linktype=\"relative-path\">Controller</a> property of a child clock returns <code>null</code>. Note also that the <a class=\"xref\" href=\"system.windows.media.animation.clock#System_Windows_Media_Animation_Clock_Completed\" data-linktype=\"relative-path\">Completed</a> event is not called if the effective duration of the clock is forever.  In that case, the user must determine when to call <a class=\"xref\" href=\"system.windows.media.animation.clockcontroller#System_Windows_Media_Animation_ClockController_Remove_\" data-linktype=\"relative-path\">Remove</a>.  </p>\n<p>This is primarily an issue for animations on objects that have a long lifetime.  When an object is garbage collected, its clocks are also disconnected and garbage collected.  </p>\n<p>For more information about clock objects, see <a href=\"../Topic/Animation%20and%20Timing%20System%20Overview.md\" data-linktype=\"relative-path\">Animation and Timing System Overview</a>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to create a controllable storyboard.  </p>\n<pre><code class=\"lang-cs\" name=\"animation_ovws_procedural_snip#ControllableStoryboardExampleWholePage\">using System;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Shapes;\nusing System.Windows.Media;\nusing System.Windows.Media.Animation;\n\nnamespace SDKSample\n{\n\n    public class ControllableStoryboardExample : Page\n    {\n        private Storyboard myStoryboard;\n\n        public ControllableStoryboardExample()\n        {\n\n            // Create a name scope for the page.\n\n            NameScope.SetNameScope(this, new NameScope()); \n \n            this.WindowTitle = &quot;Controllable Storyboard Example&quot;;\n            StackPanel myStackPanel = new StackPanel();\n            myStackPanel.Margin = new Thickness(10);\n\n            // Create a rectangle.\n            Rectangle myRectangle = new Rectangle();\n            myRectangle.Name = &quot;myRectangle&quot;;\n\n            // Assign the rectangle a name by \n            // registering it with the page, so that\n            // it can be targeted by storyboard\n            // animations.\n            this.RegisterName(myRectangle.Name, myRectangle);\n            myRectangle.Width = 100;\n            myRectangle.Height = 100;\n            myRectangle.Fill = Brushes.Blue;\n            myStackPanel.Children.Add(myRectangle);\n\n            //\n            // Create an animation and a storyboard to animate the\n            // rectangle.\n            //\n            DoubleAnimation myDoubleAnimation = new DoubleAnimation();\n            myDoubleAnimation.From = 1.0;\n            myDoubleAnimation.To = 0.0;\n            myDoubleAnimation.Duration = new Duration(TimeSpan.FromMilliseconds(5000));\n            myDoubleAnimation.AutoReverse = true;\n\n            // Create the storyboard.\n            myStoryboard = new Storyboard();\n            myStoryboard.Children.Add(myDoubleAnimation);\n            Storyboard.SetTargetName(myDoubleAnimation, myRectangle.Name);\n            Storyboard.SetTargetProperty(myDoubleAnimation, new PropertyPath(Rectangle.OpacityProperty));\n\n            //\n            // Create some buttons to control the storyboard\n            // and a panel to contain them.\n            //\n            StackPanel buttonPanel = new StackPanel();\n            buttonPanel.Orientation = Orientation.Horizontal;\n            Button beginButton = new Button();\n            beginButton.Content = &quot;Begin&quot;;\n            beginButton.Click += new RoutedEventHandler(beginButton_Clicked);\n            buttonPanel.Children.Add(beginButton);\n            Button pauseButton = new Button();\n            pauseButton.Content = &quot;Pause&quot;;\n            pauseButton.Click += new RoutedEventHandler(pauseButton_Clicked);\n            buttonPanel.Children.Add(pauseButton);\n            Button resumeButton = new Button();\n            resumeButton.Content = &quot;Resume&quot;;\n            resumeButton.Click += new RoutedEventHandler(resumeButton_Clicked);\n            buttonPanel.Children.Add(resumeButton);\n            Button skipToFillButton = new Button();\n            skipToFillButton.Content = &quot;Skip to Fill&quot;;\n            skipToFillButton.Click += new RoutedEventHandler(skipToFillButton_Clicked);\n            buttonPanel.Children.Add(skipToFillButton);\n            Button setSpeedRatioButton = new Button();\n            setSpeedRatioButton.Content = &quot;Triple Speed&quot;;\n            setSpeedRatioButton.Click += new RoutedEventHandler(setSpeedRatioButton_Clicked);\n            buttonPanel.Children.Add(setSpeedRatioButton);\n            Button stopButton = new Button();\n            stopButton.Content = &quot;Stop&quot;;\n            stopButton.Click += new RoutedEventHandler(stopButton_Clicked);\n            buttonPanel.Children.Add(stopButton);\n            myStackPanel.Children.Add(buttonPanel);\n            this.Content = myStackPanel;        \n            \n\n        }\n\n        // Begins the storyboard.\n        private void beginButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            // Specifying &quot;true&quot; as the second Begin parameter\n            // makes this storyboard controllable.\n            myStoryboard.Begin(this, true);\n\n        }\n\n        // Pauses the storyboard.\n        private void pauseButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            myStoryboard.Pause(this);\n\n        }\n\n        // Resumes the storyboard.\n        private void resumeButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            myStoryboard.Resume(this);\n\n        }\n\n        // Advances the storyboard to its fill period.\n        private void skipToFillButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            myStoryboard.SkipToFill(this);\n\n        }\n\n        // Updates the storyboard&#39;s speed.\n        private void setSpeedRatioButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            // Makes the storyboard progress three times as fast as normal.\n            myStoryboard.SetSpeedRatio(this, 3);\n\n        }\n\n        // Stops the storyboard.\n        private void stopButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            myStoryboard.Stop(this);\n\n        }         \n\n    }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"animation_ovws_procedural_snip#ControllableStoryboardExampleWholePage\">\nImports Microsoft.VisualBasic\nImports System\nImports System.Windows\nImports System.Windows.Controls\nImports System.Windows.Shapes\nImports System.Windows.Media\nImports System.Windows.Media.Animation\n\nNamespace SDKSample\n\n\tPublic Class ControllableStoryboardExample\n\t\tInherits Page\n\t\tPrivate myStoryboard As Storyboard\n\n\t\tPublic Sub New()\n\n\t\t\t&#39; Create a name scope for the page.\n\n\t\t\tNameScope.SetNameScope(Me, New NameScope())\n\n\t\t\tMe.WindowTitle = &quot;Controllable Storyboard Example&quot;\n\t\t\tDim myStackPanel As New StackPanel()\n\t\t\tmyStackPanel.Margin = New Thickness(10)\n\n\t\t\t&#39; Create a rectangle.\n\t\t\tDim myRectangle As New Rectangle()\n\t\t\tmyRectangle.Name = &quot;myRectangle&quot;\n\n\t\t\t&#39; Assign the rectangle a name by \n\t\t\t&#39; registering it with the page, so that\n\t\t\t&#39; it can be targeted by storyboard\n\t\t\t&#39; animations.\n\t\t\tMe.RegisterName(myRectangle.Name, myRectangle)\n\t\t\tmyRectangle.Width = 100\n\t\t\tmyRectangle.Height = 100\n\t\t\tmyRectangle.Fill = Brushes.Blue\n\t\t\tmyStackPanel.Children.Add(myRectangle)\n\n\t\t\t&#39;\n\t\t\t&#39; Create an animation and a storyboard to animate the\n\t\t\t&#39; rectangle.\n\t\t\t&#39;\n\t\t\tDim myDoubleAnimation As New DoubleAnimation()\n\t\t\tmyDoubleAnimation.From = 1.0\n\t\t\tmyDoubleAnimation.To = 0.0\n\t\t\tmyDoubleAnimation.Duration = New Duration(TimeSpan.FromMilliseconds(5000))\n\t\t\tmyDoubleAnimation.AutoReverse = True\n\n\t\t\t&#39; Create the storyboard.\n\t\t\tmyStoryboard = New Storyboard()\n\t\t\tmyStoryboard.Children.Add(myDoubleAnimation)\n\t\t\tStoryboard.SetTargetName(myDoubleAnimation, myRectangle.Name)\n\t\t\tStoryboard.SetTargetProperty(myDoubleAnimation, New PropertyPath(Rectangle.OpacityProperty))\n\n\t\t\t&#39;\n\t\t\t&#39; Create some buttons to control the storyboard\n\t\t\t&#39; and a panel to contain them.\n\t\t\t&#39;\n\t\t\tDim buttonPanel As New StackPanel()\n\t\t\tbuttonPanel.Orientation = Orientation.Horizontal\n\t\t\tDim beginButton As New Button()\n\t\t\tbeginButton.Content = &quot;Begin&quot;\n\t\t\tAddHandler beginButton.Click, AddressOf beginButton_Clicked\n\t\t\tbuttonPanel.Children.Add(beginButton)\n\t\t\tDim pauseButton As New Button()\n\t\t\tpauseButton.Content = &quot;Pause&quot;\n\t\t\tAddHandler pauseButton.Click, AddressOf pauseButton_Clicked\n\t\t\tbuttonPanel.Children.Add(pauseButton)\n\t\t\tDim resumeButton As New Button()\n\t\t\tresumeButton.Content = &quot;Resume&quot;\n\t\t\tAddHandler resumeButton.Click, AddressOf resumeButton_Clicked\n\t\t\tbuttonPanel.Children.Add(resumeButton)\n\t\t\tDim skipToFillButton As New Button()\n\t\t\tskipToFillButton.Content = &quot;Skip to Fill&quot;\n\t\t\tAddHandler skipToFillButton.Click, AddressOf skipToFillButton_Clicked\n\t\t\tbuttonPanel.Children.Add(skipToFillButton)\n\t\t\tDim setSpeedRatioButton As New Button()\n\t\t\tsetSpeedRatioButton.Content = &quot;Triple Speed&quot;\n\t\t\tAddHandler setSpeedRatioButton.Click, AddressOf setSpeedRatioButton_Clicked\n\t\t\tbuttonPanel.Children.Add(setSpeedRatioButton)\n\t\t\tDim stopButton As New Button()\n\t\t\tstopButton.Content = &quot;Stop&quot;\n\t\t\tAddHandler stopButton.Click, AddressOf stopButton_Clicked\n\t\t\tbuttonPanel.Children.Add(stopButton)\n\t\t\tmyStackPanel.Children.Add(buttonPanel)\n\t\t\tMe.Content = myStackPanel\n\n\n\t\tEnd Sub\n\n\t\t&#39; Begins the storyboard.\n\t\tPrivate Sub beginButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t&#39; Specifying &quot;true&quot; as the second Begin parameter\n\t\t\t&#39; makes this storyboard controllable.\n\t\t\tmyStoryboard.Begin(Me, True)\n\n\t\tEnd Sub\n\n\t\t&#39; Pauses the storyboard.\n\t\tPrivate Sub pauseButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\tmyStoryboard.Pause(Me)\n\n\t\tEnd Sub\n\n\t\t&#39; Resumes the storyboard.\n\t\tPrivate Sub resumeButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\tmyStoryboard.Resume(Me)\n\n\t\tEnd Sub\n\n\t\t&#39; Advances the storyboard to its fill period.\n\t\tPrivate Sub skipToFillButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\tmyStoryboard.SkipToFill(Me)\n\n\t\tEnd Sub\n\n\t\t&#39; Updates the storyboard&#39;s speed.\n\t\tPrivate Sub setSpeedRatioButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t&#39; Makes the storyboard progress three times as fast as normal.\n\t\t\tmyStoryboard.SetSpeedRatio(Me, 3)\n\n\t\tEnd Sub\n\n\t\t&#39; Stops the storyboard.\n\t\tPrivate Sub stopButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\tmyStoryboard.Stop(Me)\n\n\t\tEnd Sub\n\n\tEnd Class\n\nEnd Namespace\n</code></pre><p> The next example uses the <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a> <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a> to animate when the user left-clicks, and the <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a> <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a> when the user right-clicks.  </p>\n<pre><code class=\"lang-cs\" name=\"StoryboardBeginAnimation_procedural_snip#GraphicsMMFrameworkElementStoryboardHandoffBehaviorExample\">/*\n\n   This sample animates the position of an ellipse when \n   the user clicks within the main border. If the user\n   left-clicks, the SnapshotAndReplace HandoffBehavior\n   is used when applying the animations. If the user\n   right-clicks, the Compose HandoffBehavior is used\n   instead.\n\n*/\n\nusing System;\nusing System.Windows;\nusing System.Windows.Navigation;\nusing System.Windows.Media;\nusing System.Windows.Media.Animation;\nusing System.Windows.Shapes;\nusing System.Windows.Controls;\nusing System.Windows.Input;\n\nnamespace Microsoft.Samples.Animation.AnimatingWithStoryboards\n{\n\n    // Create the demonstration.\n    public class FrameworkElementStoryboardHandoffBehaviorExample : Page {\n        \n        \n        private Border containerBorder;\n        private Ellipse interactiveEllipse;\n        private Storyboard theStoryboard;\n        private DoubleAnimation xAnimation;\n        private DoubleAnimation yAnimation;\n        \n        public FrameworkElementStoryboardHandoffBehaviorExample()\n        {\n        \n            WindowTitle = &quot;Interactive Animation Example&quot;;\n            \n            // Create a name scope for the page.\n            NameScope.SetNameScope(this, new NameScope());  \n            \n            DockPanel myPanel = new DockPanel();\n            myPanel.Margin = new Thickness(20.0);            \n    \n            containerBorder = new Border();\n            containerBorder.Background = Brushes.White;\n            containerBorder.BorderBrush = Brushes.Black;\n            containerBorder.BorderThickness = new Thickness(2.0); \n            containerBorder.VerticalAlignment = VerticalAlignment.Stretch;\n            \n            interactiveEllipse = new Ellipse();\n            interactiveEllipse.Fill = Brushes.Lime;\n            interactiveEllipse.Stroke = Brushes.Black;\n            interactiveEllipse.StrokeThickness = 2.0;\n            interactiveEllipse.Width = 25;\n            interactiveEllipse.Height = 25;\n            interactiveEllipse.HorizontalAlignment = HorizontalAlignment.Left;\n            interactiveEllipse.VerticalAlignment = VerticalAlignment.Top;\n            \n\n            TranslateTransform interactiveTranslateTransform = new TranslateTransform();       \n            this.RegisterName(&quot;InteractiveTranslateTransform&quot;, interactiveTranslateTransform);\n            \n            interactiveEllipse.RenderTransform = \n                interactiveTranslateTransform;\n                \n            xAnimation = new DoubleAnimation();\n            xAnimation.Duration = TimeSpan.FromSeconds(4);\n            yAnimation = xAnimation.Clone();\n            Storyboard.SetTargetName(xAnimation, &quot;InteractiveTranslateTransform&quot;);\n            Storyboard.SetTargetProperty(xAnimation, new PropertyPath(TranslateTransform.XProperty));\n            Storyboard.SetTargetName(yAnimation, &quot;InteractiveTranslateTransform&quot;);\n            Storyboard.SetTargetProperty(yAnimation, new PropertyPath(TranslateTransform.YProperty));            \n            \n            theStoryboard = new Storyboard();\n            theStoryboard.Children.Add(xAnimation);\n            theStoryboard.Children.Add(yAnimation);\n                \n                \n            containerBorder.MouseLeftButtonDown += \n                new MouseButtonEventHandler(border_mouseLeftButtonDown);\n            containerBorder.MouseRightButtonDown += \n                new MouseButtonEventHandler(border_mouseRightButtonDown);                \n            \n            containerBorder.Child = interactiveEllipse;\n            myPanel.Children.Add(containerBorder);\n            this.Content = myPanel;\n        }\n        \n\n        // When the user left-clicks, use the \n        // SnapshotAndReplace HandoffBehavior when applying the animation.        \n        private void border_mouseLeftButtonDown(object sender, MouseButtonEventArgs e)\n        {\n        \n            Point clickPoint = Mouse.GetPosition(containerBorder);\n            \n            // Set the target point so the center of the ellipse\n            // ends up at the clicked point.\n            Point targetPoint = new Point();\n            targetPoint.X = clickPoint.X - interactiveEllipse.Width / 2;\n            targetPoint.Y = clickPoint.Y - interactiveEllipse.Height / 2;  \n            \n            // Animate to the target point.\n            xAnimation.To = targetPoint.X;\n            yAnimation.To = targetPoint.Y;\n            theStoryboard.Begin(this, HandoffBehavior.SnapshotAndReplace);\n            \n\n            // Change the color of the ellipse.\n            interactiveEllipse.Fill = Brushes.Lime;\n                    \n        }\n        \n        // When the user right-clicks, use the \n        // Compose HandoffBehavior when applying the animation.\n        private void border_mouseRightButtonDown(object sender, MouseButtonEventArgs e)\n        {\n        \n            // Find the point where the use clicked.\n            Point clickPoint = Mouse.GetPosition(containerBorder);\n            \n            // Set the target point so the center of the ellipse\n            // ends up at the clicked point.\n            Point targetPoint = new Point();\n            targetPoint.X = clickPoint.X - interactiveEllipse.Width / 2;\n            targetPoint.Y = clickPoint.Y - interactiveEllipse.Height / 2;\n \n            // Animate to the target point.\n            xAnimation.To = targetPoint.X;\n            yAnimation.To = targetPoint.Y;\n            theStoryboard.Begin(this, HandoffBehavior.Compose);\n                \n            // Change the color of the ellipse.\n            interactiveEllipse.Fill = Brushes.Orange;\n            \n                    \n        }\n        \n    }\n \n}\n</code></pre><pre><code class=\"lang-vb\" name=\"StoryboardBeginAnimation_procedural_snip#GraphicsMMFrameworkElementStoryboardHandoffBehaviorExample\">&#39;\n&#39;\n&#39;   This sample animates the position of an ellipse when \n&#39;   the user clicks within the main border. If the user\n&#39;   left-clicks, the SnapshotAndReplace HandoffBehavior\n&#39;   is used when applying the animations. If the user\n&#39;   right-clicks, the Compose HandoffBehavior is used\n&#39;   instead.\n&#39;\n&#39;\n\n\nImports System\nImports System.Windows\nImports System.Windows.Navigation\nImports System.Windows.Media\nImports System.Windows.Media.Animation\nImports System.Windows.Shapes\nImports System.Windows.Controls\nImports System.Windows.Input\n\nNamespace Microsoft.Samples.Animation.AnimatingWithStoryboards\n\n\t&#39; Create the demonstration.\n\tPublic Class FrameworkElementStoryboardHandoffBehaviorExample\n\t\tInherits Page\n\n\n\t\tPrivate containerBorder As Border\n\t\tPrivate interactiveEllipse As Ellipse\n\t\tPrivate theStoryboard As Storyboard\n\t\tPrivate xAnimation As DoubleAnimation\n\t\tPrivate yAnimation As DoubleAnimation\n\n\t\tPublic Sub New()\n\n\t\t\tWindowTitle = &quot;Interactive Animation Example&quot;\n\n\t\t\t&#39; Create a name scope for the page.\n\t\t\tNameScope.SetNameScope(Me, New NameScope())\n\n\t\t\tDim myPanel As New DockPanel()\n\t\t\tmyPanel.Margin = New Thickness(20.0)\n\n\t\t\tcontainerBorder = New Border()\n\t\t\tcontainerBorder.Background = Brushes.White\n\t\t\tcontainerBorder.BorderBrush = Brushes.Black\n\t\t\tcontainerBorder.BorderThickness = New Thickness(2.0)\n\t\t\tcontainerBorder.VerticalAlignment = VerticalAlignment.Stretch\n\n            interactiveEllipse = New Ellipse()\n            With interactiveEllipse\n                .Fill = Brushes.Lime\n                .Stroke = Brushes.Black\n                .StrokeThickness = 2.0\n                .Width = 25\n                .Height = 25\n                .HorizontalAlignment = HorizontalAlignment.Left\n                .VerticalAlignment = VerticalAlignment.Top\n            End With\n\n            Dim interactiveTranslateTransform As New TranslateTransform()\n            Me.RegisterName(&quot;InteractiveTranslateTransform&quot;, interactiveTranslateTransform)\n\n            interactiveEllipse.RenderTransform = interactiveTranslateTransform\n\n            xAnimation = New DoubleAnimation()\n            xAnimation.Duration = TimeSpan.FromSeconds(4)\n            yAnimation = xAnimation.Clone()\n            Storyboard.SetTargetName(xAnimation, &quot;InteractiveTranslateTransform&quot;)\n            Storyboard.SetTargetProperty(xAnimation, New PropertyPath(TranslateTransform.XProperty))\n            Storyboard.SetTargetName(yAnimation, &quot;InteractiveTranslateTransform&quot;)\n            Storyboard.SetTargetProperty(yAnimation, New PropertyPath(TranslateTransform.YProperty))\n\n            theStoryboard = New Storyboard()\n            theStoryboard.Children.Add(xAnimation)\n            theStoryboard.Children.Add(yAnimation)\n\n\n            AddHandler containerBorder.MouseLeftButtonDown, AddressOf border_mouseLeftButtonDown\n            AddHandler containerBorder.MouseRightButtonDown, AddressOf border_mouseRightButtonDown\n\n            containerBorder.Child = interactiveEllipse\n            myPanel.Children.Add(containerBorder)\n            Me.Content = myPanel\n\t\tEnd Sub\n\n\n\t\t&#39; When the user left-clicks, use the \n\t\t&#39; SnapshotAndReplace HandoffBehavior when applying the animation.        \n\t\tPrivate Sub border_mouseLeftButtonDown(ByVal sender As Object, ByVal e As MouseButtonEventArgs)\n\n\t\t\tDim clickPoint As Point = Mouse.GetPosition(containerBorder)\n\n\t\t\t&#39; Set the target point so the center of the ellipse\n\t\t\t&#39; ends up at the clicked point.\n\t\t\tDim targetPoint As New Point()\n            targetPoint.X = clickPoint.X - interactiveEllipse.Width / 2\n            targetPoint.Y = clickPoint.Y - interactiveEllipse.Height / 2\n\n\t\t\t&#39; Animate to the target point.\n\t\t\txAnimation.To = targetPoint.X\n\t\t\tyAnimation.To = targetPoint.Y\n\t\t\ttheStoryboard.Begin(Me, HandoffBehavior.SnapshotAndReplace)\n\n\n\t\t\t&#39; Change the color of the ellipse.\n\t\t\tinteractiveEllipse.Fill = Brushes.Lime\n\n\t\tEnd Sub\n\n\t\t&#39; When the user right-clicks, use the \n\t\t&#39; Compose HandoffBehavior when applying the animation.\n\t\tPrivate Sub border_mouseRightButtonDown(ByVal sender As Object, ByVal e As MouseButtonEventArgs)\n\n\t\t\t&#39; Find the point where the use clicked.\n\t\t\tDim clickPoint As Point = Mouse.GetPosition(containerBorder)\n\n\t\t\t&#39; Set the target point so the center of the ellipse\n\t\t\t&#39; ends up at the clicked point.\n\t\t\tDim targetPoint As New Point()\n            targetPoint.X = clickPoint.X - interactiveEllipse.Width / 2\n            targetPoint.Y = clickPoint.Y - interactiveEllipse.Height / 2\n\n\t\t\t&#39; Animate to the target point.\n\t\t\txAnimation.To = targetPoint.X\n\t\t\tyAnimation.To = targetPoint.Y\n\t\t\ttheStoryboard.Begin(Me, HandoffBehavior.Compose)\n\n\t\t\t&#39; Change the color of the ellipse.\n\t\t\tinteractiveEllipse.Fill = Brushes.Orange\n\n\n\t\tEnd Sub\n\n\tEnd Class\n\nEnd Namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_Begin_System_Windows_FrameworkElement_System_Windows_FrameworkTemplate_System_Windows_Media_Animation_HandoffBehavior_System_Boolean_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_Begin_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Begin(FrameworkElement,FrameworkTemplate,HandoffBehavior,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Applies the animations associated with this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> to their targets within the specified template and initiates them.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Begin (System.Windows.FrameworkElement containingObject, System.Windows.FrameworkTemplate frameworkTemplate, System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>containingObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to which the specified <code>frameworkTemplate</code> has been applied. Animations without a <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.TargetName*</span> are applied to <code>containingObject</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>frameworkTemplate</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.frameworktemplate\" data-linktype=\"relative-path\">FrameworkTemplate</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The template to animate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>handoffBehavior</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The behavior the new animation should use to interact with any current animations.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>isControllable</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> if the storyboard should be interactively controllable; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To interactively control this storyboard, you must specify the same <code>containingObject</code> when calling the interactive methods that you used to begin the storyboard  </p>\n<p> When this method is called, <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> objects are created for the storyboard and any timelines it contains. These clocks are stored with <code>containingObject</code>.  </p>\n<p> Beginning a storyboard triggers the <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_CurrentStateInvalidated\" data-linktype=\"relative-path\">CurrentStateInvalidated</a> and <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_CurrentGlobalSpeedInvalidated\" data-linktype=\"relative-path\">CurrentGlobalSpeedInvalidated</a> events.  </p>\n<h2 id=\"using-the-compose-handoffbehavior\">Using the Compose HandoffBehavior</h2>\n<p> When you apply a <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>, <a class=\"xref\" href=\"system.windows.media.animation.animationtimeline\" data-linktype=\"relative-path\">AnimationTimeline</a>, or <a class=\"xref\" href=\"system.windows.media.animation.animationclock\" data-linktype=\"relative-path\">AnimationClock</a> to a property using the <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a> <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a>, any <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> objects previously associated with that property continue to consume system resources; the timing system does not remove these clocks automatically.  </p>\n<p> To avoid performance issues when you apply a large number of clocks using <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a>, you should remove composing clocks from the animated property after they complete. There are several ways to remove a clock.  </p>\n<ul>\n<li><p>To remove all clocks from a property, use the <a class=\"xref\" href=\"system.windows.media.animation.animatable#System_Windows_Media_Animation_Animatable_ApplyAnimationClock_System_Windows_DependencyProperty_System_Windows_Media_Animation_AnimationClock_\" data-linktype=\"relative-path\">ApplyAnimationClock(DependencyProperty,AnimationClock)</a> or <a class=\"xref\" href=\"system.windows.media.animation.animatable#System_Windows_Media_Animation_Animatable_BeginAnimation_System_Windows_DependencyProperty_System_Windows_Media_Animation_AnimationTimeline_\" data-linktype=\"relative-path\">BeginAnimation(DependencyProperty,AnimationTimeline)</a> method of the animated object. Specify the property being animated as the first parameter, and <code>null</code> as the second. This removes all animation clocks from the property.  </p>\n</li>\n<li><p>To remove a specific <a class=\"xref\" href=\"system.windows.media.animation.animationclock\" data-linktype=\"relative-path\">AnimationClock</a> from a list of clocks, use the <a class=\"xref\" href=\"system.windows.media.animation.clock#System_Windows_Media_Animation_Clock_Controller_\" data-linktype=\"relative-path\">Controller</a> property of the <a class=\"xref\" href=\"system.windows.media.animation.animationclock\" data-linktype=\"relative-path\">AnimationClock</a> to retrieve a <a class=\"xref\" href=\"system.windows.media.animation.clockcontroller\" data-linktype=\"relative-path\">ClockController</a>, then call the <a class=\"xref\" href=\"system.windows.media.animation.clockcontroller#System_Windows_Media_Animation_ClockController_Remove_\" data-linktype=\"relative-path\">Remove</a> method of the <a class=\"xref\" href=\"system.windows.media.animation.clockcontroller\" data-linktype=\"relative-path\">ClockController</a>. This is typically done in the <a class=\"xref\" href=\"system.windows.media.animation.clock#System_Windows_Media_Animation_Clock_Completed\" data-linktype=\"relative-path\">Completed</a> event handler for a clock. Note that only root clocks can be controlled by a <a class=\"xref\" href=\"system.windows.media.animation.clockcontroller\" data-linktype=\"relative-path\">ClockController</a>; the <a class=\"xref\" href=\"system.windows.media.animation.clock#System_Windows_Media_Animation_Clock_Controller_\" data-linktype=\"relative-path\">Controller</a> property of a child clock returns <code>null</code>. Note also that the <a class=\"xref\" href=\"system.windows.media.animation.clock#System_Windows_Media_Animation_Clock_Completed\" data-linktype=\"relative-path\">Completed</a> event is not called if the effective duration of the clock is forever.  In that case, the user must determine when to call <a class=\"xref\" href=\"system.windows.media.animation.clockcontroller#System_Windows_Media_Animation_ClockController_Remove_\" data-linktype=\"relative-path\">Remove</a>.  </p>\n<p>This is primarily an issue for animations on objects that have a long lifetime.  When an object is garbage collected, its clocks are also disconnected and garbage collected.  </p>\n<p>For more information about clock objects, see <a href=\"../Topic/Animation%20and%20Timing%20System%20Overview.md\" data-linktype=\"relative-path\">Animation and Timing System Overview</a>.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_Clone\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_Clone_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clone()</div>        \r\n          </div>\r\n    \r\n            <p>Creates a modifiable clone of this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>, making deep copies of this object&#39;s values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Media.Animation.Storyboard Clone ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a></div>\r\n                  </div>\r\n                  <p>A modifiable clone of the current object. The cloned object&#39;s <span class=\"xref\">stem.Windows.Freezable.IsFrozen*</span> property is <code>false</code> even if the source&#39;s <span class=\"xref\">stem.Windows.Freezable.IsFrozen*</span> property is <code>true.</code></p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is used to produce modifiable copies of frozen <a class=\"xref\" href=\"system.windows.freezable\" data-linktype=\"relative-path\">Freezable</a> objects (or any <a class=\"xref\" href=\"system.windows.freezable\" data-linktype=\"relative-path\">Freezable</a> object). For convenience, this method shadows the inherited version with a strongly typed implementation.  </p>\n<p> For more information, see <a class=\"xref\" href=\"system.windows.freezable#System_Windows_Freezable_Clone_\" data-linktype=\"relative-path\">Clone</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_CreateInstanceCore\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_CreateInstanceCore_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateInstanceCore()</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new instance of the <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override System.Windows.Freezable CreateInstanceCore ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.freezable\" data-linktype=\"relative-path\">Freezable</a></div>\r\n                  </div>\r\n                  <p>A new <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is called internally by <a class=\"xref\" href=\"system.windows.freezable#System_Windows_Freezable_CreateInstance_\" data-linktype=\"relative-path\">CreateInstance</a> when creating new instances of the <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> class for the various cloning methods (such as <a class=\"xref\" href=\"system.windows.freezable#System_Windows_Freezable_Clone_\" data-linktype=\"relative-path\">Clone</a> and <a class=\"xref\" href=\"system.windows.freezable#System_Windows_Freezable_CloneCurrentValue_\" data-linktype=\"relative-path\">CloneCurrentValue</a>).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows a typical implementation of <a class=\"xref\" href=\"system.windows.freezable#System_Windows_Freezable_CreateInstanceCore_\" data-linktype=\"relative-path\">CreateInstanceCore</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"freezablesample_procedural#CreateInstanceCoreExample\">Public Class MyFreezable\n\tInherits Freezable\n\t&#39; Typical implementation of CreateInstanceCore\n\tProtected Overrides Function CreateInstanceCore() As Freezable\n\n\t\tReturn New MyFreezable()\n\tEnd Function\n\n\n\t&#39; ...\n\t&#39; Other code for the MyFreezableClass.\n\t&#39; ...\n\n\nEnd Class\n\n</code></pre><pre><code class=\"lang-cs\" name=\"freezablesample_procedural#CreateInstanceCoreExample\">public class MyFreezable : Freezable\n{\n    // Typical implementation of CreateInstanceCore\n    protected override Freezable CreateInstanceCore()\n    {\n    \n        return new MyFreezable();      \n    }\n\n\n    // ...\n    // Other code for the MyFreezableClass.\n    // ...\n    \n    \n}\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_GetCurrentGlobalSpeed\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_GetCurrentGlobalSpeed_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCurrentGlobalSpeed()</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the <span class=\"xref\">stem.Windows.Media.Animation.Clock.CurrentGlobalSpeed*</span> of the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public double GetCurrentGlobalSpeed ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The current global speed, or 0 if the clock is stopped.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_GetCurrentGlobalSpeed_System_Windows_FrameworkContentElement_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_GetCurrentGlobalSpeed_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCurrentGlobalSpeed(FrameworkContentElement)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the <span class=\"xref\">stem.Windows.Media.Animation.Clock.CurrentGlobalSpeed*</span> of the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Nullable&lt;double&gt; GetCurrentGlobalSpeed (System.Windows.FrameworkContentElement containingObject);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>containingObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.frameworkcontentelement\" data-linktype=\"relative-path\">FrameworkContentElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object specified when the <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)</span> method was called. This object contains the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> objects that were created for this storyboard and its children.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>&gt;</div>\r\n                  </div>\r\n                  <p>The current global speed, or <code>null</code> if the clock is stopped.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A clock&#39;s <a class=\"xref\" href=\"system.windows.media.animation.clock#System_Windows_Media_Animation_Clock_CurrentGlobalSpeed_\" data-linktype=\"relative-path\">CurrentGlobalSpeed</a> speed is the rate at which its time is currently progressing, compared to real-world time.  </p>\n<p> To use this method to retrieve information about a storyboard&#39;s clock, the storyboard must be controllable. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method and specify <code>true</code> to make it controllable. For an example, see <a href=\"../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md\" data-linktype=\"relative-path\">How to: Control a Storyboard After It Starts</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_GetCurrentGlobalSpeed_System_Windows_FrameworkElement_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_GetCurrentGlobalSpeed_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCurrentGlobalSpeed(FrameworkElement)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the <span class=\"xref\">stem.Windows.Media.Animation.Clock.CurrentGlobalSpeed*</span> of the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Nullable&lt;double&gt; GetCurrentGlobalSpeed (System.Windows.FrameworkElement containingObject);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>containingObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object specified when the <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)</span> method was called. This object contains the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> objects that were created for this storyboard and its children.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>&gt;</div>\r\n                  </div>\r\n                  <p>The current global speed, or <code>null</code> if the clock is stopped.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A clock&#39;s <a class=\"xref\" href=\"system.windows.media.animation.clock#System_Windows_Media_Animation_Clock_CurrentGlobalSpeed_\" data-linktype=\"relative-path\">CurrentGlobalSpeed</a> speed is the rate at which its time is currently progressing, compared to real-world time.  </p>\n<p> To use this method to retrieve information about a storyboard&#39;s clock, the storyboard must be controllable. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method and specify <code>true</code> to make it controllable. For an example, see <a href=\"../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md\" data-linktype=\"relative-path\">How to: Control a Storyboard After It Starts</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_GetCurrentIteration\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_GetCurrentIteration_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCurrentIteration()</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the <span class=\"xref\">stem.Windows.Media.Animation.Clock.CurrentIteration*</span> of the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int GetCurrentIteration ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>This clock&#39;s current iteration within its current active period, or <code>null</code> if this clock is stopped.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A clock&#39;s first iteration has a value of 1.  </p>\n<p> If this storyboard has a <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_AutoReverse_\" data-linktype=\"relative-path\">AutoReverse</a> setting of <code>true</code>, a full iteration consists of a forward-reverse pair, not just one of these segments.  </p>\n<p> To use this method to retrieve information about a storyboard&#39;s clock, the storyboard must be controllable. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method and specify <code>true</code> to make it controllable. For an example, see <a href=\"../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md\" data-linktype=\"relative-path\">How to: Control a Storyboard After It Starts</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_GetCurrentIteration_System_Windows_FrameworkContentElement_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_GetCurrentIteration_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCurrentIteration(FrameworkContentElement)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the <span class=\"xref\">stem.Windows.Media.Animation.Clock.CurrentIteration*</span> of the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Nullable&lt;int&gt; GetCurrentIteration (System.Windows.FrameworkContentElement containingObject);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>containingObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.frameworkcontentelement\" data-linktype=\"relative-path\">FrameworkContentElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object specified when the <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)</span> method was called. This object contains the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> objects that were created for this storyboard and its children.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;</div>\r\n                  </div>\r\n                  <p>This clock&#39;s current iteration within its current active period, or <code>null</code> if this clock is stopped.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A clock&#39;s first iteration has a value of 1.  </p>\n<p> If this storyboard has a <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_AutoReverse_\" data-linktype=\"relative-path\">AutoReverse</a> setting of <code>true</code>, a full iteration consists of a forward-reverse pair, not just one of these segments.  </p>\n<p> To use this method to retrieve information about a storyboard&#39;s clock, the storyboard must be controllable. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method and specify <code>true</code> to make it controllable. For an example, see <a href=\"../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md\" data-linktype=\"relative-path\">How to: Control a Storyboard After It Starts</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_GetCurrentIteration_System_Windows_FrameworkElement_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_GetCurrentIteration_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCurrentIteration(FrameworkElement)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the <span class=\"xref\">stem.Windows.Media.Animation.Clock.CurrentIteration*</span> of the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Nullable&lt;int&gt; GetCurrentIteration (System.Windows.FrameworkElement containingObject);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>containingObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object specified when the <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)</span> method was called. This object contains the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> objects that were created for this storyboard and its children.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;</div>\r\n                  </div>\r\n                  <p>This clock&#39;s current iteration within its current active period, or <code>null</code> if this clock is stopped.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A clock&#39;s first iteration has a value of 1.  </p>\n<p> If this clock&#39;s timeline has an <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_AutoReverse_\" data-linktype=\"relative-path\">AutoReverse</a> setting of <code>true</code>, a full iteration consists of a forward-reverse pair, not just one of these segments.  </p>\n<p> Regardless of its current iteration, seeking a clock returns its current iteration to 1. Restarting a clock also returns its current iteration to 1.  </p>\n<p> To use this method to retrieve information about a storyboard&#39;s clock, the storyboard must be controllable. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method and specify <code>true</code> to make it controllable. For an example, see <a href=\"../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md\" data-linktype=\"relative-path\">How to: Control a Storyboard After It Starts</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_GetCurrentProgress\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_GetCurrentProgress_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCurrentProgress()</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the <span class=\"xref\">stem.Windows.Media.Animation.Clock.CurrentProgress*</span> of the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public double GetCurrentProgress ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p><code>null</code> if this clock is <a class=\"xref\" href=\"system.windows.media.animation.clockstate\" data-linktype=\"relative-path\">ClockState</a>, or 0.0 if this clock is active and its <span class=\"xref\">stem.Windows.Media.Animation.Clock.Timeline*</span> has a <span class=\"xref\">stem.Windows.Media.Animation.Timeline.Duration*</span> of <span class=\"xref\">stem.Windows.Duration.Forever*</span>; otherwise, a value between 0.0 and 1.0 that indicates the current progress of this clock within its current iteration. A value of 0.0 indicates no progress, and a value of 1.0 indicates that the clock is at the end of its current iteration.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To use this method to retrieve information about a storyboard&#39;s clock, the storyboard must be controllable. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method and specify <code>true</code> to make it controllable. For an example, see <a href=\"../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md\" data-linktype=\"relative-path\">How to: Control a Storyboard After It Starts</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_GetCurrentProgress_System_Windows_FrameworkContentElement_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_GetCurrentProgress_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCurrentProgress(FrameworkContentElement)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the <span class=\"xref\">stem.Windows.Media.Animation.Clock.CurrentProgress*</span> of the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Nullable&lt;double&gt; GetCurrentProgress (System.Windows.FrameworkContentElement containingObject);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>containingObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.frameworkcontentelement\" data-linktype=\"relative-path\">FrameworkContentElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object specified when the <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)</span> method was called. This object contains the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> objects that were created for this storyboard and its children.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>&gt;</div>\r\n                  </div>\r\n                  <p><code>null</code> if this clock is <a class=\"xref\" href=\"system.windows.media.animation.clockstate\" data-linktype=\"relative-path\">ClockState</a>, or 0.0 if this clock is active and its <span class=\"xref\">stem.Windows.Media.Animation.Clock.Timeline*</span> has a <span class=\"xref\">stem.Windows.Media.Animation.Timeline.Duration*</span> of <span class=\"xref\">stem.Windows.Duration.Forever*</span>; otherwise, a value between 0.0 and 1.0 that indicates the current progress of this clock within its current iteration. A value of 0.0 indicates no progress, and a value of 1.0 indicates that the clock is at the end of its current iteration.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To use this method to retrieve information about a storyboard&#39;s clock, the storyboard must be controllable. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method and specify <code>true</code> to make it controllable. For an example, see <a href=\"../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md\" data-linktype=\"relative-path\">How to: Control a Storyboard After It Starts</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_GetCurrentProgress_System_Windows_FrameworkElement_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_GetCurrentProgress_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCurrentProgress(FrameworkElement)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the <span class=\"xref\">stem.Windows.Media.Animation.Clock.CurrentProgress*</span> of the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Nullable&lt;double&gt; GetCurrentProgress (System.Windows.FrameworkElement containingObject);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>containingObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object specified when the <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)</span> method was called. This object contains the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> objects that were created for this storyboard and its children.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>&gt;</div>\r\n                  </div>\r\n                  <p><code>null</code> if this clock is <a class=\"xref\" href=\"system.windows.media.animation.clockstate\" data-linktype=\"relative-path\">ClockState</a>, or 0.0 if this clock is active and its <span class=\"xref\">stem.Windows.Media.Animation.Clock.Timeline*</span> has a <span class=\"xref\">stem.Windows.Media.Animation.Timeline.Duration*</span> of <span class=\"xref\">stem.Windows.Duration.Forever*</span>; otherwise, a value between 0.0 and 1.0 that indicates the current progress of this clock within its current iteration. A value of 0.0 indicates no progress, and a value of 1.0 indicates that the clock is at the end of its current iteration.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To use this method to retrieve information about a storyboard&#39;s clock, the storyboard must be controllable. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method and specify <code>true</code> to make it controllable. For an example, see <a href=\"../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md\" data-linktype=\"relative-path\">How to: Control a Storyboard After It Starts</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_GetCurrentState\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_GetCurrentState_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCurrentState()</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the <span class=\"xref\">stem.Windows.Media.Animation.Clock.CurrentState*</span> of the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Media.Animation.ClockState GetCurrentState ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.animation.clockstate\" data-linktype=\"relative-path\">ClockState</a></div>\r\n                  </div>\r\n                  <p>The current state of the clock created for this storyboard: <a class=\"xref\" href=\"system.windows.media.animation.clockstate\" data-linktype=\"relative-path\">ClockState</a>, <a class=\"xref\" href=\"system.windows.media.animation.clockstate\" data-linktype=\"relative-path\">ClockState</a>, or <a class=\"xref\" href=\"system.windows.media.animation.clockstate\" data-linktype=\"relative-path\">ClockState</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method does not tell you whether a storyboard is paused. To determine whether a storyboard is paused, use the <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_GetIsPaused_\" data-linktype=\"relative-path\">GetIsPaused</a> method.  </p>\n<p> To use this method to retrieve information about a storyboard&#39;s clock, the storyboard must be controllable. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method and specify <code>true</code> to make it controllable. For an example, see <a href=\"../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md\" data-linktype=\"relative-path\">How to: Control a Storyboard After It Starts</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_GetCurrentState_System_Windows_FrameworkContentElement_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_GetCurrentState_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCurrentState(FrameworkContentElement)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the <span class=\"xref\">stem.Windows.Media.Animation.Clock.CurrentState*</span> of the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Media.Animation.ClockState GetCurrentState (System.Windows.FrameworkContentElement containingObject);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>containingObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.frameworkcontentelement\" data-linktype=\"relative-path\">FrameworkContentElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object specified when the <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)</span> method was called. This object contains the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> objects that were created for this storyboard and its children.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.animation.clockstate\" data-linktype=\"relative-path\">ClockState</a></div>\r\n                  </div>\r\n                  <p>The current state of the clock created for this storyboard: <a class=\"xref\" href=\"system.windows.media.animation.clockstate\" data-linktype=\"relative-path\">ClockState</a>, <a class=\"xref\" href=\"system.windows.media.animation.clockstate\" data-linktype=\"relative-path\">ClockState</a>, or <a class=\"xref\" href=\"system.windows.media.animation.clockstate\" data-linktype=\"relative-path\">ClockState</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method does not tell you whether a storyboard is paused. To determine whether a storyboard is paused, use the <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_GetIsPaused_\" data-linktype=\"relative-path\">GetIsPaused</a> method.  </p>\n<p> To use this method to retrieve information about a storyboard&#39;s clock, the storyboard must be controllable. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method and specify <code>true</code> to make it controllable. For an example, see <a href=\"../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md\" data-linktype=\"relative-path\">How to: Control a Storyboard After It Starts</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_GetCurrentState_System_Windows_FrameworkElement_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_GetCurrentState_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCurrentState(FrameworkElement)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the <span class=\"xref\">stem.Windows.Media.Animation.Clock.CurrentState*</span> of the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Media.Animation.ClockState GetCurrentState (System.Windows.FrameworkElement containingObject);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>containingObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object specified when the <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)</span> method was called. This object contains the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> objects that were created for this storyboard and its children.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.animation.clockstate\" data-linktype=\"relative-path\">ClockState</a></div>\r\n                  </div>\r\n                  <p>The current state of the clock created for this storyboard: <a class=\"xref\" href=\"system.windows.media.animation.clockstate\" data-linktype=\"relative-path\">ClockState</a>, <a class=\"xref\" href=\"system.windows.media.animation.clockstate\" data-linktype=\"relative-path\">ClockState</a>, or <a class=\"xref\" href=\"system.windows.media.animation.clockstate\" data-linktype=\"relative-path\">ClockState</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method does not tell you whether a storyboard is paused. To determine whether a storyboard is paused, use the <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_GetIsPaused_\" data-linktype=\"relative-path\">GetIsPaused</a> method.  </p>\n<p> To use this method to retrieve information about a storyboard&#39;s clock, the storyboard must be controllable. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method and specify <code>true</code> to make it controllable. For an example, see <a href=\"../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md\" data-linktype=\"relative-path\">How to: Control a Storyboard After It Starts</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_GetCurrentTime\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_GetCurrentTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCurrentTime()</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the <span class=\"xref\">stem.Windows.Media.Animation.Clock.CurrentTime*</span> of the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TimeSpan GetCurrentTime ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </div>\r\n                  <p><code>null</code> if this storyboard&#39;s clock is <a class=\"xref\" href=\"system.windows.media.animation.clockstate\" data-linktype=\"relative-path\">ClockState</a>; otherwise, the current time of the storyboard&#39;s clock.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To use this method to retrieve information about a storyboard&#39;s clock, the storyboard must be controllable. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method and specify <code>true</code> to make it controllable. For an example, see <a href=\"../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md\" data-linktype=\"relative-path\">How to: Control a Storyboard After It Starts</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_GetCurrentTime_System_Windows_FrameworkContentElement_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_GetCurrentTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCurrentTime(FrameworkContentElement)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the <span class=\"xref\">stem.Windows.Media.Animation.Clock.CurrentTime*</span> of the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Nullable&lt;TimeSpan&gt; GetCurrentTime (System.Windows.FrameworkContentElement containingObject);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>containingObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.frameworkcontentelement\" data-linktype=\"relative-path\">FrameworkContentElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object specified when the <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)</span> method was called. This object contains the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> objects that were created for this storyboard and its children.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>&gt;</div>\r\n                  </div>\r\n                  <p><code>null</code> if this storyboard&#39;s clock is <a class=\"xref\" href=\"system.windows.media.animation.clockstate\" data-linktype=\"relative-path\">ClockState</a>; otherwise, the current time of the storyboard&#39;s clock.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To use this method to retrieve information about a storyboard&#39;s clock, the storyboard must be controllable. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method and specify <code>true</code> to make it controllable. For an example, see <a href=\"../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md\" data-linktype=\"relative-path\">How to: Control a Storyboard After It Starts</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_GetCurrentTime_System_Windows_FrameworkElement_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_GetCurrentTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCurrentTime(FrameworkElement)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the <span class=\"xref\">stem.Windows.Media.Animation.Clock.CurrentTime*</span> of the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Nullable&lt;TimeSpan&gt; GetCurrentTime (System.Windows.FrameworkElement containingObject);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>containingObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object specified when the <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)</span> method was called. This object contains the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> objects that were created for this storyboard and its children.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>&gt;</div>\r\n                  </div>\r\n                  <p><code>null</code> if this storyboard&#39;s clock is <a class=\"xref\" href=\"system.windows.media.animation.clockstate\" data-linktype=\"relative-path\">ClockState</a>; otherwise, the current time of the storyboard&#39;s clock.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To use this method to retrieve information about a storyboard&#39;s clock, the storyboard must be controllable. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method and specify <code>true</code> to make it controllable. For an example, see <a href=\"../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md\" data-linktype=\"relative-path\">How to: Control a Storyboard After It Starts</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_GetIsPaused\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_GetIsPaused_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetIsPaused()</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves a value that indicates whether the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> is paused.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool GetIsPaused ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> is paused; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To use this method to retrieve information about a storyboard&#39;s clock, the storyboard must be controllable. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method and specify <code>true</code> to make it controllable. For an example, see <a href=\"../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md\" data-linktype=\"relative-path\">How to: Control a Storyboard After It Starts</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_GetIsPaused_System_Windows_FrameworkContentElement_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_GetIsPaused_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetIsPaused(FrameworkContentElement)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves a value that indicates whether the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> is paused.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool GetIsPaused (System.Windows.FrameworkContentElement containingObject);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>containingObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.frameworkcontentelement\" data-linktype=\"relative-path\">FrameworkContentElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object specified when the <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)</span> method was called. This object contains the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> objects that were created for this storyboard and its children.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> is paused; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To use this method to retrieve information about a storyboard&#39;s clock, the storyboard must be controllable. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method and specify <code>true</code> to make it controllable. For an example, see <a href=\"../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md\" data-linktype=\"relative-path\">How to: Control a Storyboard After It Starts</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_GetIsPaused_System_Windows_FrameworkElement_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_GetIsPaused_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetIsPaused(FrameworkElement)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves a value that indicates whether the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> is paused.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool GetIsPaused (System.Windows.FrameworkElement containingObject);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>containingObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object specified when the <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)</span> method was called. This object contains the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> objects that were created for this storyboard and its children.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> is paused; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To use this method to retrieve information about a storyboard&#39;s clock, the storyboard must be controllable. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method and specify <code>true</code> to make it controllable. For an example, see <a href=\"../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md\" data-linktype=\"relative-path\">How to: Control a Storyboard After It Starts</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_GetTarget_System_Windows_DependencyObject_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_GetTarget_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetTarget(DependencyObject)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.Target*</span> value of the specified <a class=\"xref\" href=\"system.windows.media.animation.timeline\" data-linktype=\"relative-path\">Timeline</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.DependencyObject GetTarget (System.Windows.DependencyObject element);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyobject\" data-linktype=\"relative-path\">DependencyObject</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The timeline from which to retrieve the <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.TargetName*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyobject\" data-linktype=\"relative-path\">DependencyObject</a></div>\r\n                  </div>\r\n                  <p>The dependency object targeted by <code>element</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the &lt;xref:System.Windows.Media.Animation.Storyboard.Target%2A&gt; attached property with animation timelines to indicate the object that they target. For more information about how storyboard targeting works, see &lt;xref:System.Windows.Media.Animation.Storyboard.TargetName%2A&gt;. For more information about how attached properties work, see <a href=\"../Topic/Attached%20Properties%20Overview.md\" data-linktype=\"relative-path\">Attached Properties Overview</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_GetTargetName_System_Windows_DependencyObject_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_GetTargetName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetTargetName(DependencyObject)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.TargetName*</span> value of the specified <a class=\"xref\" href=\"system.windows.media.animation.timeline\" data-linktype=\"relative-path\">Timeline</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string GetTargetName (System.Windows.DependencyObject element);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyobject\" data-linktype=\"relative-path\">DependencyObject</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The timeline from which to retrieve the <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.TargetName*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the dependency object targeted by <code>element</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method gets the &lt;xref:System.Windows.Media.Animation.Storyboard.TargetName%2A&gt; attached property on the specified object. For more information about how storyboard targeting works, see &lt;xref:System.Windows.Media.Animation.Storyboard.TargetName%2A&gt;. For more information about how attached properties work, see <a href=\"../Topic/Attached%20Properties%20Overview.md\" data-linktype=\"relative-path\">Attached Properties Overview</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_GetTargetProperty_System_Windows_DependencyObject_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_GetTargetProperty_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetTargetProperty(DependencyObject)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.TargetProperty*</span> value of the specified <a class=\"xref\" href=\"system.windows.media.animation.timeline\" data-linktype=\"relative-path\">Timeline</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.PropertyPath GetTargetProperty (System.Windows.DependencyObject element);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyobject\" data-linktype=\"relative-path\">DependencyObject</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The dependency object from which to get the <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.TargetProperty*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.propertypath\" data-linktype=\"relative-path\">PropertyPath</a></div>\r\n                  </div>\r\n                  <p>The property targeted by <code>element</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method gets the &lt;xref:System.Windows.Media.Animation.Storyboard.TargetProperty%2A&gt; attached property on the specified object. For more information about how storyboard targeting works, see &lt;xref:System.Windows.Media.Animation.Storyboard.TargetProperty%2A&gt; attached property. For more information about how attached properties work, see <a href=\"../Topic/Attached%20Properties%20Overview.md\" data-linktype=\"relative-path\">Attached Properties Overview</a>.  </p>\n<p> Note that if the &lt;xref:System.Windows.Media.Animation.Storyboard.TargetProperty%2A&gt; was set in markup, this method returns an empty <a class=\"xref\" href=\"system.windows.propertypath\" data-linktype=\"relative-path\">PropertyPath</a> because the property reference is resolved and stored internally when it is parsed.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_Pause\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_Pause_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Pause()</div>        \r\n          </div>\r\n    \r\n            <p>Pauses the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Pause ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method pauses the storyboard, but has no discernible effect if it is not active or currently paused. As a side effect, all associated children are also paused.  </p>\n<p> A controllable storyboard can pause, resume, seek, stop, and be removed. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method and specify <code>true</code> to make it controllable. For an example, see <a href=\"../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md\" data-linktype=\"relative-path\">How to: Control a Storyboard After It Starts</a>.  </p>\n<h2 id=\"beginning-a-paused-storyboard\">Beginning a Paused Storyboard</h2>\n<p> When you <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> a storyboard that was paused, it appears to resume and restart. However, that is not what actually happens. The <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method actually replaces the paused <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> with a new unpaused version. Each time the <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method is called, clock objects are created for the storyboard. These clocks are distributed to the properties they animate. So, when the <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method is called again, it does not restart its clocks; it replaces them with new clocks.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_Pause_System_Windows_FrameworkContentElement_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_Pause_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Pause(FrameworkContentElement)</div>        \r\n          </div>\r\n    \r\n            <p>Pauses the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> of the specified <a class=\"xref\" href=\"system.windows.frameworkcontentelement\" data-linktype=\"relative-path\">FrameworkContentElement</a> associated with this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Pause (System.Windows.FrameworkContentElement containingObject);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>containingObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.frameworkcontentelement\" data-linktype=\"relative-path\">FrameworkContentElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object specified when the <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.Begin*</span> method was called. This object contains the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> objects that were created for this storyboard and its children.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method pauses the storyboard, but has no discernible effect if it is not active or currently paused. As a side effect, all associated children are also paused.  </p>\n<p> Seeking a paused storyboard does not resume it. The only way to resume a paused storyboard is to use the <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Resume_\" data-linktype=\"relative-path\">Resume</a> method. Calling the <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method again replaces the paused storyboard with a new one, which has the appearance of resuming it.  </p>\n<p> To interactively control this storyboard, you must use the same <code>containingObject</code> parameter when calling the interactive methods that you used to begin the storyboard. A controllable storyboard can pause, resume, seek, stop, and be removed. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method and specify <code>true</code> to make it controllable. Fro an example, see <a href=\"../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md\" data-linktype=\"relative-path\">How to: Control a Storyboard After It Starts</a>.  </p>\n<p> Pausing a storyboard&#39;s clock triggers the <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_CurrentGlobalSpeedInvalidated\" data-linktype=\"relative-path\">CurrentGlobalSpeedInvalidated</a> event.  </p>\n<h2 id=\"beginning-a-paused-storyboard\">Beginning a Paused Storyboard</h2>\n<p> When you <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> a storyboard that was paused, it appears to resume and restart. However, that is not what actually happens. The <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method actually replaces itself with an unpaused version. Each time the <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method is called, clock objects are created for the storyboard. These clocks are distributed to the properties they animate. So, when the <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method is called again, it does not restart its clocks; it replaces them with new clocks.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses a controllable storyboard to animate a <a class=\"xref\" href=\"system.windows.media.texteffect\" data-linktype=\"relative-path\">TextEffect</a>. The <a class=\"xref\" href=\"system.windows.media.texteffect\" data-linktype=\"relative-path\">TextEffect</a> is contained within a <a class=\"xref\" href=\"system.windows.frameworkcontentelement\" data-linktype=\"relative-path\">FrameworkContentElement</a>&#39;s name scope.  </p>\n<pre><code class=\"lang-cs\" name=\"StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage\">/*\n    This example shows how to control\n    a storyboard after it has started.\n\n*/\n\nusing System;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Media;\nusing System.Windows.Shapes;\nusing System.Windows.Media.Animation;\nusing System.Windows.Documents;\n\n\nnamespace Microsoft.Samples.Animation.AnimatingWithStoryboards\n{\n    public class FrameworkContentElementControlStoryboardExample : FlowDocument\n    {\n    \n        private Storyboard myStoryboard;\n        \n        public FrameworkContentElementControlStoryboardExample()\n        {\n        \n            // Create a name scope for the document.\n            NameScope.SetNameScope(this, new NameScope());        \n            this.Background = Brushes.White;\n            \n            // Create a run of text.\n            Run theText = new Run( \n                &quot;Lorem ipsum dolor sit amet, consectetuer adipiscing elit.&quot; + \n                &quot;Ut non lacus. Nullam a ligula id leo adipiscing ornare.&quot; +\n                &quot; Duis mattis. &quot;);   \n                \n            // Create a TextEffect\n            TextEffect animatedSpecialEffect = new TextEffect();\n            animatedSpecialEffect.Foreground = Brushes.OrangeRed;\n            animatedSpecialEffect.PositionStart = 0;\n            animatedSpecialEffect.PositionCount = 0;\n            \n            // Assign the TextEffect a name by \n            // registering it with the page, so that\n            // it can be targeted by storyboard\n            // animations            \n            this.RegisterName(&quot;animatedSpecialEffect&quot;, animatedSpecialEffect);  \n            \n            // Apply the text effect to the run.\n            theText.TextEffects = new TextEffectCollection();\n            theText.TextEffects.Add(animatedSpecialEffect);\n            \n            // Create a paragraph to contain the run.\n            Paragraph animatedParagraph = new Paragraph(theText);\n            animatedParagraph.Background = Brushes.LightGray;\n            animatedParagraph.Padding = new Thickness(20);\n   \n            this.Blocks.Add(animatedParagraph);            \n            BlockUIContainer controlsContainer = new BlockUIContainer();                \n            \n            //\n            // Create an animation and a storyboard to animate the\n            // text effect.\n            //\n            Int32Animation countAnimation = \n                new Int32Animation(0, 127, TimeSpan.FromSeconds(10)); \n            Storyboard.SetTargetName(countAnimation, &quot;animatedSpecialEffect&quot;);\n            Storyboard.SetTargetProperty(countAnimation, \n                new PropertyPath(TextEffect.PositionCountProperty));\n            myStoryboard = new Storyboard();\n            myStoryboard.Children.Add(countAnimation);\n            \n            //\n            // Create some buttons to control the storyboard\n            // and a panel to contain them.\n            //\n            StackPanel buttonPanel = new StackPanel();\n            buttonPanel.Orientation = Orientation.Vertical;\n            Button beginButton = new Button();\n            beginButton.Content = &quot;Begin&quot;;\n            beginButton.Click += new RoutedEventHandler(beginButton_Clicked);            \n            buttonPanel.Children.Add(beginButton);\n            Button pauseButton = new Button();\n            pauseButton.Content = &quot;Pause&quot;;\n            pauseButton.Click +=new RoutedEventHandler(pauseButton_Clicked);\n            buttonPanel.Children.Add(pauseButton);\n            Button resumeButton = new Button();\n            resumeButton.Content = &quot;Resume&quot;;\n            resumeButton.Click +=new RoutedEventHandler(resumeButton_Clicked);\n            buttonPanel.Children.Add(resumeButton);\n            Button skipToFillButton = new Button();\n            skipToFillButton.Content = &quot;Skip to Fill&quot;;\n            skipToFillButton.Click +=new RoutedEventHandler(skipToFillButton_Clicked);\n            buttonPanel.Children.Add(skipToFillButton);\n            Button setSpeedRatioButton = new Button();\n            setSpeedRatioButton.Content = &quot;Triple Speed&quot;;\n            setSpeedRatioButton.Click +=new RoutedEventHandler(setSpeedRatioButton_Clicked);\n            buttonPanel.Children.Add(setSpeedRatioButton);\n            Button stopButton = new Button();\n            stopButton.Content = &quot;Stop&quot;;\n            stopButton.Click +=new RoutedEventHandler(stopButton_Clicked);\n            buttonPanel.Children.Add(stopButton);\n            Button removeButton = new Button();\n            removeButton.Content = &quot;Remove&quot;;\n            removeButton.Click +=new RoutedEventHandler(removeButton_Clicked);\n            buttonPanel.Children.Add(removeButton); \n   \n            controlsContainer.Child = buttonPanel; \n            this.Blocks.Add(controlsContainer);\n            \n        }\n        \n        // Begins the storyboard.\n        private void beginButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            // Specifying &quot;true&quot; as the second Begin parameter\n            // makes this storyboard controllable.\n            myStoryboard.Begin(this, true);          \n        \n        }\n        \n        // Pauses the storyboard.\n        private void pauseButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.Pause(this);          \n        \n        }\n        \n        // Resumes the storyboard.\n        private void resumeButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.Resume(this);          \n        \n        }     \n        \n        // Advances the storyboard to its fill period.\n        private void skipToFillButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.SkipToFill(this);          \n        \n        } \n        \n        // Updates the storyboard&#39;s speed.\n        private void setSpeedRatioButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            // Makes the storyboard progress three times as fast as normal.\n            myStoryboard.SetSpeedRatio(this, 3);          \n        \n        }           \n        \n        // Stops the storyboard.\n        private void stopButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.Stop(this);          \n        \n        }     \n        \n        // Removes the storyboard.\n        private void removeButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.Remove(this);          \n        \n        }           \n\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage\">&#39;\n&#39;    This example shows how to control\n&#39;    a storyboard after it has started.\n&#39;\n&#39;\n\n\nImports System\nImports System.Windows\nImports System.Windows.Controls\nImports System.Windows.Media\nImports System.Windows.Shapes\nImports System.Windows.Media.Animation\nImports System.Windows.Documents\n\n\nNamespace Microsoft.Samples.Animation.AnimatingWithStoryboards\n\tPublic Class FrameworkContentElementControlStoryboardExample\n\t\tInherits FlowDocument\n\n\t\tPrivate myStoryboard As Storyboard\n\n\t\tPublic Sub New()\n\n\t\t\t&#39; Create a name scope for the document.\n\t\t\tNameScope.SetNameScope(Me, New NameScope())\n\t\t\tMe.Background = Brushes.White\n\n\t\t\t&#39; Create a run of text.\n\t\t\tDim theText As New Run(&quot;Lorem ipsum dolor sit amet, consectetuer adipiscing elit.&quot; &amp; &quot;Ut non lacus. Nullam a ligula id leo adipiscing ornare.&quot; &amp; &quot; Duis mattis. &quot;)\n\n\t\t\t&#39; Create a TextEffect\n\t\t\tDim animatedSpecialEffect As New TextEffect()\n\t\t\tanimatedSpecialEffect.Foreground = Brushes.OrangeRed\n\t\t\tanimatedSpecialEffect.PositionStart = 0\n\t\t\tanimatedSpecialEffect.PositionCount = 0\n\n\t\t\t&#39; Assign the TextEffect a name by \n\t\t\t&#39; registering it with the page, so that\n\t\t\t&#39; it can be targeted by storyboard\n\t\t\t&#39; animations            \n\t\t\tMe.RegisterName(&quot;animatedSpecialEffect&quot;, animatedSpecialEffect)\n\n\t\t\t&#39; Apply the text effect to the run.\n\t\t\ttheText.TextEffects = New TextEffectCollection()\n\t\t\ttheText.TextEffects.Add(animatedSpecialEffect)\n\n\t\t\t&#39; Create a paragraph to contain the run.\n\t\t\tDim animatedParagraph As New Paragraph(theText)\n\t\t\tanimatedParagraph.Background = Brushes.LightGray\n\t\t\tanimatedParagraph.Padding = New Thickness(20)\n\n\t\t\tMe.Blocks.Add(animatedParagraph)\n\t\t\tDim controlsContainer As New BlockUIContainer()\n\n\t\t\t&#39;\n\t\t\t&#39; Create an animation and a storyboard to animate the\n\t\t\t&#39; text effect.\n\t\t\t&#39;\n\t\t\tDim countAnimation As New Int32Animation(0, 127, TimeSpan.FromSeconds(10))\n\t\t\tStoryboard.SetTargetName(countAnimation, &quot;animatedSpecialEffect&quot;)\n\t\t\tStoryboard.SetTargetProperty(countAnimation, New PropertyPath(TextEffect.PositionCountProperty))\n\t\t\tmyStoryboard = New Storyboard()\n\t\t\tmyStoryboard.Children.Add(countAnimation)\n\n\t\t\t&#39;\n\t\t\t&#39; Create some buttons to control the storyboard\n\t\t\t&#39; and a panel to contain them.\n\t\t\t&#39;\n\t\t\tDim buttonPanel As New StackPanel()\n\t\t\tbuttonPanel.Orientation = Orientation.Vertical\n\t\t\tDim beginButton As New Button()\n\t\t\tbeginButton.Content = &quot;Begin&quot;\n\t\t\tAddHandler beginButton.Click, AddressOf beginButton_Clicked\n\t\t\tbuttonPanel.Children.Add(beginButton)\n\t\t\tDim pauseButton As New Button()\n\t\t\tpauseButton.Content = &quot;Pause&quot;\n\t\t\tAddHandler pauseButton.Click, AddressOf pauseButton_Clicked\n\t\t\tbuttonPanel.Children.Add(pauseButton)\n\t\t\tDim resumeButton As New Button()\n\t\t\tresumeButton.Content = &quot;Resume&quot;\n\t\t\tAddHandler resumeButton.Click, AddressOf resumeButton_Clicked\n\t\t\tbuttonPanel.Children.Add(resumeButton)\n\t\t\tDim skipToFillButton As New Button()\n\t\t\tskipToFillButton.Content = &quot;Skip to Fill&quot;\n\t\t\tAddHandler skipToFillButton.Click, AddressOf skipToFillButton_Clicked\n\t\t\tbuttonPanel.Children.Add(skipToFillButton)\n\t\t\tDim setSpeedRatioButton As New Button()\n\t\t\tsetSpeedRatioButton.Content = &quot;Triple Speed&quot;\n\t\t\tAddHandler setSpeedRatioButton.Click, AddressOf setSpeedRatioButton_Clicked\n\t\t\tbuttonPanel.Children.Add(setSpeedRatioButton)\n\t\t\tDim stopButton As New Button()\n\t\t\tstopButton.Content = &quot;Stop&quot;\n\t\t\tAddHandler stopButton.Click, AddressOf stopButton_Clicked\n\t\t\tbuttonPanel.Children.Add(stopButton)\n\t\t\tDim removeButton As New Button()\n\t\t\tremoveButton.Content = &quot;Remove&quot;\n\t\t\tAddHandler removeButton.Click, AddressOf removeButton_Clicked\n\t\t\tbuttonPanel.Children.Add(removeButton)\n\n\t\t\tcontrolsContainer.Child = buttonPanel\n\t\t\tMe.Blocks.Add(controlsContainer)\n\n\t\tEnd Sub\n\n\t\t&#39; Begins the storyboard.\n\t\tPrivate Sub beginButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t&#39; Specifying &quot;true&quot; as the second Begin parameter\n\t\t\t&#39; makes this storyboard controllable.\n\t\t\tmyStoryboard.Begin(Me, True)\n\n\t\tEnd Sub\n\n\t\t&#39; Pauses the storyboard.\n\t\tPrivate Sub pauseButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.Pause(Me)\n\n\t\tEnd Sub\n\n\t\t&#39; Resumes the storyboard.\n\t\tPrivate Sub resumeButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.Resume(Me)\n\n\t\tEnd Sub\n\n\t\t&#39; Advances the storyboard to its fill period.\n\t\tPrivate Sub skipToFillButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.SkipToFill(Me)\n\n\t\tEnd Sub\n\n\t\t&#39; Updates the storyboard&#39;s speed.\n\t\tPrivate Sub setSpeedRatioButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t&#39; Makes the storyboard progress three times as fast as normal.\n\t\t\tmyStoryboard.SetSpeedRatio(Me, 3)\n\n\t\tEnd Sub\n\n\t\t&#39; Stops the storyboard.\n\t\tPrivate Sub stopButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.Stop(Me)\n\n\t\tEnd Sub\n\n\t\t&#39; Removes the storyboard.\n\t\tPrivate Sub removeButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.Remove(Me)\n\n\t\tEnd Sub\n\n\tEnd Class\nEnd Namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_Pause_System_Windows_FrameworkElement_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_Pause_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Pause(FrameworkElement)</div>        \r\n          </div>\r\n    \r\n            <p>Pauses the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> of the specified <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a> associated with this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Pause (System.Windows.FrameworkElement containingObject);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>containingObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object specified when the <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)</span> method was called. This object contains the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> objects that were created for this storyboard and its children.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method pauses the storyboard, but has no discernible effect if it is not active or currently paused. As a side effect, all associated children are also paused.  </p>\n<p> Seeking a paused storyboard does not resume it. The only way to resume a paused storyboard is to use the <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Resume_\" data-linktype=\"relative-path\">Resume</a> method. Calling the <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method again replaces the paused storyboard with a new one, which has the appearance of resuming it.  </p>\n<p> To interactively control this storyboard, you must use the same <code>containingObject</code> parameter when calling the interactive methods that you used to begin the storyboard. A controllable storyboard can pause, resume, seek, stop, and be removed. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method and specify <code>true</code> to make it controllable. For an example, see <a href=\"../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md\" data-linktype=\"relative-path\">How to: Control a Storyboard After It Starts</a>.  </p>\n<p> Pausing a storyboard&#39;s clock triggers the <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_CurrentGlobalSpeedInvalidated\" data-linktype=\"relative-path\">CurrentGlobalSpeedInvalidated</a> event.  </p>\n<h2 id=\"beginning-a-paused-storyboard\">Beginning a Paused Storyboard</h2>\n<p> When you <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> a storyboard that was paused, it appears to resume and restart. However, that is not what actually happens. The <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method actually replaces itself with an unpaused version. Each time the <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method is called, clock objects are created for the storyboard. These clocks are distributed to the properties they animate. So, when the <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method is called again, it does not restart its clocks; it replaces them with new clocks.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_Remove\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_Remove_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Remove()</div>        \r\n          </div>\r\n    \r\n            <p>Removes the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> objects that were created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>. Animations that belong to this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> no longer affect the properties they once animated, regardless of their <span class=\"xref\">stem.Windows.Media.Animation.Timeline.FillBehavior*</span> setting.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Remove ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A controllable storyboard can pause, resume, seek, stop, and be removed. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method and specify <code>true</code> to make it controllable. For an example, see <a href=\"../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md\" data-linktype=\"relative-path\">How to: Control a Storyboard After It Starts</a>.  </p>\n<p> All interactive actions taken on a <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a>, and therefore also on a <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>, occur on the next tick of the timing engine, which happens shortly before the next render. This means that the <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Remove_\" data-linktype=\"relative-path\">Remove</a> method still affects the animated properties until this time. In other words, the next time the frame is displayed, the storyboard is removed. If you need to disassociate an animation from a property before this time, use the <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_BeginAnimation_\" data-linktype=\"relative-path\">BeginAnimation</a> method with an <code>animation</code> parameter value of <code>null</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_Remove_System_Windows_FrameworkContentElement_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_Remove_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Remove(FrameworkContentElement)</div>        \r\n          </div>\r\n    \r\n            <p>Removes the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> objects that were created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>. Animations that belong to this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> no longer affect the properties they once animated, regardless of their <span class=\"xref\">stem.Windows.Media.Animation.Timeline.FillBehavior*</span> setting.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Remove (System.Windows.FrameworkContentElement containingObject);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>containingObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.frameworkcontentelement\" data-linktype=\"relative-path\">FrameworkContentElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object specified when the <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.Begin*</span> method was called. This object contains the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> objects that were created for this storyboard and its children.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To interactively control this storyboard, you must use the same <code>containingObject</code> parameter when calling the interactive methods that you used to begin the storyboard. A controllable storyboard can pause, resume, seek, stop, and be removed. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method and specify <code>true</code> to make it controllable. For an example, see <a href=\"../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md\" data-linktype=\"relative-path\">How to: Control a Storyboard After It Starts</a>.  </p>\n<p> Removing a storyboard&#39;s clock triggers the <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_RemoveRequested\" data-linktype=\"relative-path\">RemoveRequested</a> event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_Remove_System_Windows_FrameworkElement_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_Remove_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Remove(FrameworkElement)</div>        \r\n          </div>\r\n    \r\n            <p>Removes the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> objects that were created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>. Animations that belong to this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> no longer affect the properties they once animated, regardless of their <span class=\"xref\">stem.Windows.Media.Animation.Timeline.FillBehavior*</span> setting.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Remove (System.Windows.FrameworkElement containingObject);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>containingObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object specified when the <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.Begin*</span> method was called. This object contains the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> objects that were created for this storyboard and its children.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To interactively control this storyboard, you must use the same <code>containingObject</code> parameter when calling the interactive methods that you used to begin the storyboard. A controllable storyboard can pause, resume, seek, stop, and be removed. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method and specify <code>true</code> to make it controllable. For an example, see <a href=\"../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md\" data-linktype=\"relative-path\">How to: Control a Storyboard After It Starts</a>.  </p>\n<p> Removing a storyboard&#39;s clock triggers the <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_RemoveRequested\" data-linktype=\"relative-path\">RemoveRequested</a> event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_Resume\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_Resume_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Resume()</div>        \r\n          </div>\r\n    \r\n            <p>Resumes the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Resume ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A controllable storyboard can pause, resume, seek, stop, and be removed. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method and specify <code>true</code> to make it controllable. For an example, see <a href=\"../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md\" data-linktype=\"relative-path\">How to: Control a Storyboard After It Starts</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_Resume_System_Windows_FrameworkContentElement_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_Resume_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Resume(FrameworkContentElement)</div>        \r\n          </div>\r\n    \r\n            <p>Resumes the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Resume (System.Windows.FrameworkContentElement containingObject);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>containingObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.frameworkcontentelement\" data-linktype=\"relative-path\">FrameworkContentElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object specified when the <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.Begin*</span> method was called. This object contains the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> objects that were created for this storyboard and its children.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Resuming a storyboard that is not paused has no effect.  </p>\n<p> To interactively control this storyboard, you must use the same <code>containingObject</code> parameter when calling the interactive methods that you used to begin the storyboard. A controllable storyboard can pause, resume, seek, stop, and be removed. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method and specify <code>true</code> to make it controllable. For an example, see <a href=\"../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md\" data-linktype=\"relative-path\">How to: Control a Storyboard After It Starts</a>.  </p>\n<p> Seeking a paused storyboard does not resume it. The only way to resume a paused storyboard is to use the Resume method. Calling the <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method after the storyboard has started replaces the old storyboard, which has the appearance of resuming it.  </p>\n<p> Resuming a paused a storyboard&#39;s clock triggers the <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_CurrentGlobalSpeedInvalidated\" data-linktype=\"relative-path\">CurrentGlobalSpeedInvalidated</a> event.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses a controllable storyboard to animate a <a class=\"xref\" href=\"system.windows.media.texteffect\" data-linktype=\"relative-path\">TextEffect</a>. The <a class=\"xref\" href=\"system.windows.media.texteffect\" data-linktype=\"relative-path\">TextEffect</a> is contained within a <a class=\"xref\" href=\"system.windows.frameworkcontentelement\" data-linktype=\"relative-path\">FrameworkContentElement</a>&#39;s name scope.  </p>\n<pre><code class=\"lang-cs\" name=\"StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage\">/*\n    This example shows how to control\n    a storyboard after it has started.\n\n*/\n\nusing System;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Media;\nusing System.Windows.Shapes;\nusing System.Windows.Media.Animation;\nusing System.Windows.Documents;\n\n\nnamespace Microsoft.Samples.Animation.AnimatingWithStoryboards\n{\n    public class FrameworkContentElementControlStoryboardExample : FlowDocument\n    {\n    \n        private Storyboard myStoryboard;\n        \n        public FrameworkContentElementControlStoryboardExample()\n        {\n        \n            // Create a name scope for the document.\n            NameScope.SetNameScope(this, new NameScope());        \n            this.Background = Brushes.White;\n            \n            // Create a run of text.\n            Run theText = new Run( \n                &quot;Lorem ipsum dolor sit amet, consectetuer adipiscing elit.&quot; + \n                &quot;Ut non lacus. Nullam a ligula id leo adipiscing ornare.&quot; +\n                &quot; Duis mattis. &quot;);   \n                \n            // Create a TextEffect\n            TextEffect animatedSpecialEffect = new TextEffect();\n            animatedSpecialEffect.Foreground = Brushes.OrangeRed;\n            animatedSpecialEffect.PositionStart = 0;\n            animatedSpecialEffect.PositionCount = 0;\n            \n            // Assign the TextEffect a name by \n            // registering it with the page, so that\n            // it can be targeted by storyboard\n            // animations            \n            this.RegisterName(&quot;animatedSpecialEffect&quot;, animatedSpecialEffect);  \n            \n            // Apply the text effect to the run.\n            theText.TextEffects = new TextEffectCollection();\n            theText.TextEffects.Add(animatedSpecialEffect);\n            \n            // Create a paragraph to contain the run.\n            Paragraph animatedParagraph = new Paragraph(theText);\n            animatedParagraph.Background = Brushes.LightGray;\n            animatedParagraph.Padding = new Thickness(20);\n   \n            this.Blocks.Add(animatedParagraph);            \n            BlockUIContainer controlsContainer = new BlockUIContainer();                \n            \n            //\n            // Create an animation and a storyboard to animate the\n            // text effect.\n            //\n            Int32Animation countAnimation = \n                new Int32Animation(0, 127, TimeSpan.FromSeconds(10)); \n            Storyboard.SetTargetName(countAnimation, &quot;animatedSpecialEffect&quot;);\n            Storyboard.SetTargetProperty(countAnimation, \n                new PropertyPath(TextEffect.PositionCountProperty));\n            myStoryboard = new Storyboard();\n            myStoryboard.Children.Add(countAnimation);\n            \n            //\n            // Create some buttons to control the storyboard\n            // and a panel to contain them.\n            //\n            StackPanel buttonPanel = new StackPanel();\n            buttonPanel.Orientation = Orientation.Vertical;\n            Button beginButton = new Button();\n            beginButton.Content = &quot;Begin&quot;;\n            beginButton.Click += new RoutedEventHandler(beginButton_Clicked);            \n            buttonPanel.Children.Add(beginButton);\n            Button pauseButton = new Button();\n            pauseButton.Content = &quot;Pause&quot;;\n            pauseButton.Click +=new RoutedEventHandler(pauseButton_Clicked);\n            buttonPanel.Children.Add(pauseButton);\n            Button resumeButton = new Button();\n            resumeButton.Content = &quot;Resume&quot;;\n            resumeButton.Click +=new RoutedEventHandler(resumeButton_Clicked);\n            buttonPanel.Children.Add(resumeButton);\n            Button skipToFillButton = new Button();\n            skipToFillButton.Content = &quot;Skip to Fill&quot;;\n            skipToFillButton.Click +=new RoutedEventHandler(skipToFillButton_Clicked);\n            buttonPanel.Children.Add(skipToFillButton);\n            Button setSpeedRatioButton = new Button();\n            setSpeedRatioButton.Content = &quot;Triple Speed&quot;;\n            setSpeedRatioButton.Click +=new RoutedEventHandler(setSpeedRatioButton_Clicked);\n            buttonPanel.Children.Add(setSpeedRatioButton);\n            Button stopButton = new Button();\n            stopButton.Content = &quot;Stop&quot;;\n            stopButton.Click +=new RoutedEventHandler(stopButton_Clicked);\n            buttonPanel.Children.Add(stopButton);\n            Button removeButton = new Button();\n            removeButton.Content = &quot;Remove&quot;;\n            removeButton.Click +=new RoutedEventHandler(removeButton_Clicked);\n            buttonPanel.Children.Add(removeButton); \n   \n            controlsContainer.Child = buttonPanel; \n            this.Blocks.Add(controlsContainer);\n            \n        }\n        \n        // Begins the storyboard.\n        private void beginButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            // Specifying &quot;true&quot; as the second Begin parameter\n            // makes this storyboard controllable.\n            myStoryboard.Begin(this, true);          \n        \n        }\n        \n        // Pauses the storyboard.\n        private void pauseButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.Pause(this);          \n        \n        }\n        \n        // Resumes the storyboard.\n        private void resumeButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.Resume(this);          \n        \n        }     \n        \n        // Advances the storyboard to its fill period.\n        private void skipToFillButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.SkipToFill(this);          \n        \n        } \n        \n        // Updates the storyboard&#39;s speed.\n        private void setSpeedRatioButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            // Makes the storyboard progress three times as fast as normal.\n            myStoryboard.SetSpeedRatio(this, 3);          \n        \n        }           \n        \n        // Stops the storyboard.\n        private void stopButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.Stop(this);          \n        \n        }     \n        \n        // Removes the storyboard.\n        private void removeButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.Remove(this);          \n        \n        }           \n\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage\">&#39;\n&#39;    This example shows how to control\n&#39;    a storyboard after it has started.\n&#39;\n&#39;\n\n\nImports System\nImports System.Windows\nImports System.Windows.Controls\nImports System.Windows.Media\nImports System.Windows.Shapes\nImports System.Windows.Media.Animation\nImports System.Windows.Documents\n\n\nNamespace Microsoft.Samples.Animation.AnimatingWithStoryboards\n\tPublic Class FrameworkContentElementControlStoryboardExample\n\t\tInherits FlowDocument\n\n\t\tPrivate myStoryboard As Storyboard\n\n\t\tPublic Sub New()\n\n\t\t\t&#39; Create a name scope for the document.\n\t\t\tNameScope.SetNameScope(Me, New NameScope())\n\t\t\tMe.Background = Brushes.White\n\n\t\t\t&#39; Create a run of text.\n\t\t\tDim theText As New Run(&quot;Lorem ipsum dolor sit amet, consectetuer adipiscing elit.&quot; &amp; &quot;Ut non lacus. Nullam a ligula id leo adipiscing ornare.&quot; &amp; &quot; Duis mattis. &quot;)\n\n\t\t\t&#39; Create a TextEffect\n\t\t\tDim animatedSpecialEffect As New TextEffect()\n\t\t\tanimatedSpecialEffect.Foreground = Brushes.OrangeRed\n\t\t\tanimatedSpecialEffect.PositionStart = 0\n\t\t\tanimatedSpecialEffect.PositionCount = 0\n\n\t\t\t&#39; Assign the TextEffect a name by \n\t\t\t&#39; registering it with the page, so that\n\t\t\t&#39; it can be targeted by storyboard\n\t\t\t&#39; animations            \n\t\t\tMe.RegisterName(&quot;animatedSpecialEffect&quot;, animatedSpecialEffect)\n\n\t\t\t&#39; Apply the text effect to the run.\n\t\t\ttheText.TextEffects = New TextEffectCollection()\n\t\t\ttheText.TextEffects.Add(animatedSpecialEffect)\n\n\t\t\t&#39; Create a paragraph to contain the run.\n\t\t\tDim animatedParagraph As New Paragraph(theText)\n\t\t\tanimatedParagraph.Background = Brushes.LightGray\n\t\t\tanimatedParagraph.Padding = New Thickness(20)\n\n\t\t\tMe.Blocks.Add(animatedParagraph)\n\t\t\tDim controlsContainer As New BlockUIContainer()\n\n\t\t\t&#39;\n\t\t\t&#39; Create an animation and a storyboard to animate the\n\t\t\t&#39; text effect.\n\t\t\t&#39;\n\t\t\tDim countAnimation As New Int32Animation(0, 127, TimeSpan.FromSeconds(10))\n\t\t\tStoryboard.SetTargetName(countAnimation, &quot;animatedSpecialEffect&quot;)\n\t\t\tStoryboard.SetTargetProperty(countAnimation, New PropertyPath(TextEffect.PositionCountProperty))\n\t\t\tmyStoryboard = New Storyboard()\n\t\t\tmyStoryboard.Children.Add(countAnimation)\n\n\t\t\t&#39;\n\t\t\t&#39; Create some buttons to control the storyboard\n\t\t\t&#39; and a panel to contain them.\n\t\t\t&#39;\n\t\t\tDim buttonPanel As New StackPanel()\n\t\t\tbuttonPanel.Orientation = Orientation.Vertical\n\t\t\tDim beginButton As New Button()\n\t\t\tbeginButton.Content = &quot;Begin&quot;\n\t\t\tAddHandler beginButton.Click, AddressOf beginButton_Clicked\n\t\t\tbuttonPanel.Children.Add(beginButton)\n\t\t\tDim pauseButton As New Button()\n\t\t\tpauseButton.Content = &quot;Pause&quot;\n\t\t\tAddHandler pauseButton.Click, AddressOf pauseButton_Clicked\n\t\t\tbuttonPanel.Children.Add(pauseButton)\n\t\t\tDim resumeButton As New Button()\n\t\t\tresumeButton.Content = &quot;Resume&quot;\n\t\t\tAddHandler resumeButton.Click, AddressOf resumeButton_Clicked\n\t\t\tbuttonPanel.Children.Add(resumeButton)\n\t\t\tDim skipToFillButton As New Button()\n\t\t\tskipToFillButton.Content = &quot;Skip to Fill&quot;\n\t\t\tAddHandler skipToFillButton.Click, AddressOf skipToFillButton_Clicked\n\t\t\tbuttonPanel.Children.Add(skipToFillButton)\n\t\t\tDim setSpeedRatioButton As New Button()\n\t\t\tsetSpeedRatioButton.Content = &quot;Triple Speed&quot;\n\t\t\tAddHandler setSpeedRatioButton.Click, AddressOf setSpeedRatioButton_Clicked\n\t\t\tbuttonPanel.Children.Add(setSpeedRatioButton)\n\t\t\tDim stopButton As New Button()\n\t\t\tstopButton.Content = &quot;Stop&quot;\n\t\t\tAddHandler stopButton.Click, AddressOf stopButton_Clicked\n\t\t\tbuttonPanel.Children.Add(stopButton)\n\t\t\tDim removeButton As New Button()\n\t\t\tremoveButton.Content = &quot;Remove&quot;\n\t\t\tAddHandler removeButton.Click, AddressOf removeButton_Clicked\n\t\t\tbuttonPanel.Children.Add(removeButton)\n\n\t\t\tcontrolsContainer.Child = buttonPanel\n\t\t\tMe.Blocks.Add(controlsContainer)\n\n\t\tEnd Sub\n\n\t\t&#39; Begins the storyboard.\n\t\tPrivate Sub beginButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t&#39; Specifying &quot;true&quot; as the second Begin parameter\n\t\t\t&#39; makes this storyboard controllable.\n\t\t\tmyStoryboard.Begin(Me, True)\n\n\t\tEnd Sub\n\n\t\t&#39; Pauses the storyboard.\n\t\tPrivate Sub pauseButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.Pause(Me)\n\n\t\tEnd Sub\n\n\t\t&#39; Resumes the storyboard.\n\t\tPrivate Sub resumeButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.Resume(Me)\n\n\t\tEnd Sub\n\n\t\t&#39; Advances the storyboard to its fill period.\n\t\tPrivate Sub skipToFillButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.SkipToFill(Me)\n\n\t\tEnd Sub\n\n\t\t&#39; Updates the storyboard&#39;s speed.\n\t\tPrivate Sub setSpeedRatioButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t&#39; Makes the storyboard progress three times as fast as normal.\n\t\t\tmyStoryboard.SetSpeedRatio(Me, 3)\n\n\t\tEnd Sub\n\n\t\t&#39; Stops the storyboard.\n\t\tPrivate Sub stopButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.Stop(Me)\n\n\t\tEnd Sub\n\n\t\t&#39; Removes the storyboard.\n\t\tPrivate Sub removeButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.Remove(Me)\n\n\t\tEnd Sub\n\n\tEnd Class\nEnd Namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_Resume_System_Windows_FrameworkElement_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_Resume_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Resume(FrameworkElement)</div>        \r\n          </div>\r\n    \r\n            <p>Resumes the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Resume (System.Windows.FrameworkElement containingObject);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>containingObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object specified when the <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.Begin*</span> method was called. This object contains the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> objects that were created for this storyboard and its children.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Resuming a storyboard that is not paused has no effect.  </p>\n<p> To interactively control this storyboard, you must use the same <code>containingObject</code> parameter when calling the interactive methods that you used to begin the storyboard. A controllable storyboard can pause, resume, seek, stop, and be removed. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method and specify <code>true</code> to make it controllable. For an example, see <a href=\"../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md\" data-linktype=\"relative-path\">How to: Control a Storyboard After It Starts</a>.  </p>\n<p> Seeking a paused storyboard does not resume it. The only way to resume a paused storyboard is to use the Resume method. Calling the <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method after the storyboard has started replaces the old storyboard, which has the appearance of resuming it.  </p>\n<p> Resuming a paused a storyboard&#39;s clock triggers the <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_CurrentGlobalSpeedInvalidated\" data-linktype=\"relative-path\">CurrentGlobalSpeedInvalidated</a> event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_Seek_System_TimeSpan_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_Seek_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Seek(TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Seeks this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> to the specified position. The <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> performs the requested seek when the next clock tick occurs.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Seek (TimeSpan offset);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A positive or negative value that describes the amount by which the timeline should move forward or backward.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Note that seek operations do not take the storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_SpeedRatio_\" data-linktype=\"relative-path\">SpeedRatio</a> or <a class=\"xref\" href=\"system.windows.media.animation.paralleltimeline#System_Windows_Media_Animation_ParallelTimeline_SlipBehavior_\" data-linktype=\"relative-path\">SlipBehavior</a> settings into account. The storyboard is treated as though it has a <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_SpeedRatio_\" data-linktype=\"relative-path\">SpeedRatio</a> of 1 and no <a class=\"xref\" href=\"system.windows.media.animation.paralleltimeline#System_Windows_Media_Animation_ParallelTimeline_SlipBehavior_\" data-linktype=\"relative-path\">SlipBehavior</a>.  </p>\n<p> To interactively control this storyboard, you must use the same <code>containingObject</code> parameter when calling the interactive methods that you used to begin the storyboard. A controllable storyboard can pause, resume, seek, stop, and be removed. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method and specify <code>true</code> to make it controllable. For an example, see <a href=\"../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md\" data-linktype=\"relative-path\">How to: Control a Storyboard After It Starts</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_Seek_System_TimeSpan_System_Windows_Media_Animation_TimeSeekOrigin_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_Seek_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Seek(TimeSpan,TimeSeekOrigin)</div>        \r\n          </div>\r\n    \r\n            <p>Seeks this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> to the specified position. The <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> performs the requested seek when the next clock tick occurs.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Seek (TimeSpan offset, System.Windows.Media.Animation.TimeSeekOrigin origin);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A positive or negative value that describes the amount by which the timeline should move forward or backward from the specified <code>origin</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>origin</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.animation.timeseekorigin\" data-linktype=\"relative-path\">TimeSeekOrigin</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position from which <code>offset</code> is applied.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Note that seek operations do not take the storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_SpeedRatio_\" data-linktype=\"relative-path\">SpeedRatio</a> or <a class=\"xref\" href=\"system.windows.media.animation.paralleltimeline#System_Windows_Media_Animation_ParallelTimeline_SlipBehavior_\" data-linktype=\"relative-path\">SlipBehavior</a> settings into account. The storyboard is treated as though it has a <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_SpeedRatio_\" data-linktype=\"relative-path\">SpeedRatio</a> of 1 and no <a class=\"xref\" href=\"system.windows.media.animation.paralleltimeline#System_Windows_Media_Animation_ParallelTimeline_SlipBehavior_\" data-linktype=\"relative-path\">SlipBehavior</a>.  </p>\n<p> To interactively control this storyboard, you must use the same <code>containingObject</code> parameter when calling the interactive methods that you used to begin the storyboard. A controllable storyboard can pause, resume, seek, stop, and be removed. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method and specify <code>true</code> to make it controllable. For an example, see <a href=\"../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md\" data-linktype=\"relative-path\">How to: Control a Storyboard After It Starts</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_Seek_System_Windows_FrameworkContentElement_System_TimeSpan_System_Windows_Media_Animation_TimeSeekOrigin_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_Seek_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Seek(FrameworkContentElement,TimeSpan,TimeSeekOrigin)</div>        \r\n          </div>\r\n    \r\n            <p>Seeks this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> to the specified position. The <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> performs the requested seek when the next clock tick occurs.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Seek (System.Windows.FrameworkContentElement containingObject, TimeSpan offset, System.Windows.Media.Animation.TimeSeekOrigin origin);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>containingObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.frameworkcontentelement\" data-linktype=\"relative-path\">FrameworkContentElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object specified when the <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)</span> method was called. This object contains the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> objects that were created for this storyboard and its children.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A positive or negative value that describes the amount by which the timeline should move forward or backward from the specified <code>origin</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>origin</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.animation.timeseekorigin\" data-linktype=\"relative-path\">TimeSeekOrigin</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position from which <code>offset</code> is applied.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Note that seek operations do not take the storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_SpeedRatio_\" data-linktype=\"relative-path\">SpeedRatio</a> or <a class=\"xref\" href=\"system.windows.media.animation.paralleltimeline#System_Windows_Media_Animation_ParallelTimeline_SlipBehavior_\" data-linktype=\"relative-path\">SlipBehavior</a> settings into account. The storyboard is treated as though it has a <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_SpeedRatio_\" data-linktype=\"relative-path\">SpeedRatio</a> of 1 and no <a class=\"xref\" href=\"system.windows.media.animation.paralleltimeline#System_Windows_Media_Animation_ParallelTimeline_SlipBehavior_\" data-linktype=\"relative-path\">SlipBehavior</a>.  </p>\n<p> This method changes the storyboard clock&#39;s <a class=\"xref\" href=\"system.windows.media.animation.clock#System_Windows_Media_Animation_Clock_CurrentState_\" data-linktype=\"relative-path\">CurrentState</a> to <a class=\"xref\" href=\"system.windows.media.animation.clockstate\" data-linktype=\"relative-path\">ClockState</a>. This method has no effect on the timing tree until the next time a tick is processed. As a side-effect, the appropriate events are also not raised until then.  </p>\n<p> To interactively control this storyboard, you must use the same <code>containingObject</code> parameter when calling the interactive methods that you used to begin the storyboard. A controllable storyboard can pause, resume, seek, stop, and be removed. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method and specify <code>true</code> to make it controllable. For an example, see <a href=\"../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md\" data-linktype=\"relative-path\">How to: Control a Storyboard After It Starts</a>.  </p>\n<p> Seeking a storyboard triggers the <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_CurrentGlobalSpeedInvalidated\" data-linktype=\"relative-path\">CurrentGlobalSpeedInvalidated</a> and <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_CurrentStateInvalidated\" data-linktype=\"relative-path\">CurrentStateInvalidated</a> events.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows both the <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Seek_\" data-linktype=\"relative-path\">Seek</a> and <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_SeekAlignedToLastTick_\" data-linktype=\"relative-path\">SeekAlignedToLastTick</a> methods.  </p>\n<pre><code class=\"lang-cs\" name=\"StoryboardBeginAnimation_procedural_snip#FrameworkContentElementSeekExampleUsingWholePage\">/*\n    This example shows how to control\n    a storyboard after it has started.\n\n*/\n\nusing System;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Media;\nusing System.Windows.Shapes;\nusing System.Windows.Media.Animation;\nusing System.Windows.Documents;\n\n\n\nnamespace Microsoft.Samples.Animation.AnimatingWithStoryboards\n{\n    public partial class FrameworkContentElementSeekExample : FlowDocument\n    {\n    \n        private Storyboard myStoryboard;\n        private TextBlock currentTimeIndicator;\n        private TextBox seekDestination;\n        private TextBlock rectangleWidthIndicator;\n        private Rectangle myRectangle;\n        \n        public FrameworkContentElementSeekExample()\n        {\n        \n            // Create a name scope for the page.\n            NameScope.SetNameScope(this, new NameScope());        \n        \n            this.Background = Brushes.White;\n\n            BlockUIContainer controlsContainer = new BlockUIContainer();  \n\n            StackPanel myStackPanel = new StackPanel();\n            myStackPanel.Margin = new Thickness(20);\n            \n            // Create a rectangle.\n            myRectangle = new Rectangle();\n            myRectangle.Width = 100;\n            myRectangle.Height = 20;\n            myRectangle.Margin = new Thickness(12,0,0,5);\n            myRectangle.Fill = new SolidColorBrush(Color.FromArgb(170, 51, 51, 255));\n            myRectangle.HorizontalAlignment = HorizontalAlignment.Left;\n            myStackPanel.Children.Add(myRectangle);\n            \n            // Assign the rectangle a name by \n            // registering it with the page, so that\n            // it can be targeted by storyboard\n            // animations.\n            this.RegisterName(&quot;myRectangle&quot;, myRectangle);           \n            \n            //\n            // Create an animation and a storyboard to animate the\n            // rectangle.\n            //\n            DoubleAnimation myDoubleAnimation = \n                new DoubleAnimation(100, 500, new Duration(TimeSpan.FromSeconds(60)));            \n            Storyboard.SetTargetName(myDoubleAnimation, &quot;myRectangle&quot;);\n            Storyboard.SetTargetProperty(myDoubleAnimation, new PropertyPath(Rectangle.WidthProperty));\n            myStoryboard = new Storyboard();\n            myStoryboard.Children.Add(myDoubleAnimation);\n            \n            //\n            // Create some buttons to control the storyboard\n            // and a panel to contain them.\n            //\n            StackPanel buttonPanel = new StackPanel();\n            Button beginButton = new Button();\n            beginButton.Content = &quot;Begin&quot;;\n            beginButton.Click += new RoutedEventHandler(beginButton_Clicked);            \n            buttonPanel.Children.Add(beginButton);\n            Button pauseButton = new Button();\n            pauseButton.Content = &quot;Pause&quot;;\n            pauseButton.Click +=new RoutedEventHandler(pauseButton_Clicked);\n            buttonPanel.Children.Add(pauseButton);\n            Button resumeButton = new Button();\n            resumeButton.Content = &quot;Resume&quot;;\n            resumeButton.Click +=new RoutedEventHandler(resumeButton_Clicked);\n            buttonPanel.Children.Add(resumeButton);\n            Button skipToFillButton = new Button();\n            skipToFillButton.Content = &quot;Skip to Fill&quot;;\n            skipToFillButton.Click +=new RoutedEventHandler(skipToFillButton_Clicked);\n            buttonPanel.Children.Add(skipToFillButton);\n            Button setSpeedRatioButton = new Button();\n            setSpeedRatioButton.Content = &quot;Triple Speed&quot;;\n            setSpeedRatioButton.Click +=new RoutedEventHandler(setSpeedRatioButton_Clicked);\n            buttonPanel.Children.Add(setSpeedRatioButton);\n            Button stopButton = new Button();\n            stopButton.Content = &quot;Stop&quot;;\n            stopButton.Click +=new RoutedEventHandler(stopButton_Clicked);\n            buttonPanel.Children.Add(stopButton);\n            Button removeButton = new Button();\n            removeButton.Content = &quot;Remove&quot;;\n            removeButton.Click +=new RoutedEventHandler(removeButton_Clicked);\n            buttonPanel.Children.Add(removeButton);            \n            \n            myStackPanel.Children.Add(buttonPanel);    \n            \n            // Create some controls to display the\n            // storyboard&#39;s current time and the\n            // current width of the rectangle.\n            StackPanel seekPanel = new StackPanel();\n            seekPanel.Margin = new Thickness(10);\n            StackPanel aPanel = new StackPanel();\n            Label aLabel = new Label();\n            aPanel.Orientation = Orientation.Horizontal;\n            aLabel.Content = &quot;Current Time: &quot;;\n            aPanel.Children.Add(aLabel);\n            currentTimeIndicator = new TextBlock();\n            aPanel.Children.Add(currentTimeIndicator);\n            seekPanel.Children.Add(aPanel);\n            \n            aPanel = new StackPanel();\n            aPanel.Orientation = Orientation.Horizontal;\n            aLabel = new Label();\n            aLabel.Content = &quot;Rectangle Width: &quot;;\n            aPanel.Children.Add(aLabel);\n            rectangleWidthIndicator = new TextBlock();\n            rectangleWidthIndicator.Text = myRectangle.Width.ToString(); \n            aPanel.Children.Add(rectangleWidthIndicator);\n            seekPanel.Children.Add(aPanel);\n            \n            \n            // Create some controls to enable the\n            // user to specify a seek position.\n            \n            aPanel = new StackPanel();\n            aPanel.Orientation = Orientation.Horizontal;\n            aLabel = new Label();\n            aLabel.Content = &quot;Seek Offset: &quot; ;\n            aPanel.Children.Add(aLabel);\n            seekDestination = new TextBox();\n            seekDestination.Text = &quot;0&quot;;\n            aPanel.Children.Add(seekDestination);       \n            seekPanel.Children.Add(aPanel);\n            \n            \n            Button seekButton = new Button();\n            seekButton.Content = &quot;Seek&quot;;\n            seekButton.Click += new RoutedEventHandler(seekButton_Clicked);\n            seekPanel.Children.Add(seekButton);\n            Button seekAlignedToLastTickButton = new Button();\n            seekAlignedToLastTickButton.Content = &quot;Seek Aligned to Last Tick&quot;;\n            seekAlignedToLastTickButton.Click += new RoutedEventHandler(seekAlignedToLastTickButton_Clicked);\n            seekPanel.Children.Add(seekAlignedToLastTickButton);           \n            \n            myStackPanel.Children.Add(seekPanel);\n            \n            controlsContainer.Child = myStackPanel;\n            this.Blocks.Add(controlsContainer);\n            \n            myStoryboard.CurrentTimeInvalidated += new EventHandler(myStoryboard_CurrentTimeInvalidated);\n        }\n        \n        // Begins the storyboard.\n        private void beginButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            // Specifying &quot;true&quot; as the second Begin parameter\n            // makes this storyboard controllable.\n            myStoryboard.Begin(this, true);          \n        \n        }\n        \n        // Pauses the storyboard.\n        private void pauseButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.Pause(this);          \n        \n        }\n        \n        // Resumes the storyboard.\n        private void resumeButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.Resume(this);          \n        \n        }     \n        \n        // Advances the storyboard to its fill period.\n        private void skipToFillButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.SkipToFill(this);          \n        \n        } \n        \n        // Updates the storyboard&#39;s speed.\n        private void setSpeedRatioButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            // Makes the storyboard progress three times as fast as normal.\n            myStoryboard.SetSpeedRatio(this, 3);          \n        \n        }           \n        \n        // Stops the storyboard.\n        private void stopButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.Stop(this);          \n        \n        }         \n        \n        // Removes the storyboard.\n        private void removeButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.Remove(this);          \n        \n        }        \n        \n        private void seekButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            try {\n            \n\n                TimeSpan seekTime = TimeSpan.Parse(seekDestination.Text);\n                myStoryboard.Seek(this, seekTime, TimeSeekOrigin.BeginTime);\n                \n                // The rectangle width will probably not be at its new\n                // value when this call is made, because the storyboard&#39;s\n                // clock probably hasn&#39;t ticked yet.\n                rectangleWidthIndicator.Text = myRectangle.Width.ToString();\n            \n            }catch(FormatException ex)\n            {\n                MessageBox.Show(&quot;Invalid TimeSpan value.&quot;);\n                seekDestination.Focus();\n            }\n        }\n        \n        private void seekAlignedToLastTickButton_Clicked(object sender, RoutedEventArgs args)\n        {\n\n            try {\n            \n\n                TimeSpan seekTime = TimeSpan.Parse(seekDestination.Text);\n                myStoryboard.SeekAlignedToLastTick(this, seekTime, TimeSeekOrigin.BeginTime);\n                \n                // The rectangle width will be at its new\n                // value when this call is made, because SeekAlignedToLastTick \n                // operation immediately updates timeline and animation\n                // values.          \n                rectangleWidthIndicator.Text = myRectangle.Width.ToString();\n            \n            }catch(FormatException ex)\n            {\n                MessageBox.Show(&quot;Invalid TimeSpan value.&quot;);\n                seekDestination.Focus();\n            }    \n        }\n        \n        private void myStoryboard_CurrentTimeInvalidated(object sender, EventArgs e)\n        {\n        \n            currentTimeIndicator.Text = myStoryboard.GetCurrentTime(this).ToString();\n            \n        }\n        \n        \n        \n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"StoryboardBeginAnimation_procedural_snip#FrameworkContentElementSeekExampleUsingWholePage\">&#39;\n&#39;    This example shows how to control\n&#39;    a storyboard after it has started.\n&#39;\n&#39;\n\n\nImports System\nImports System.Windows\nImports System.Windows.Controls\nImports System.Windows.Media\nImports System.Windows.Shapes\nImports System.Windows.Media.Animation\nImports System.Windows.Documents\n\n\n\nNamespace Microsoft.Samples.Animation.AnimatingWithStoryboards\n\tPartial Public Class FrameworkContentElementSeekExample\n\t\tInherits FlowDocument\n\n\t\tPrivate myStoryboard As Storyboard\n\t\tPrivate currentTimeIndicator As TextBlock\n\t\tPrivate seekDestination As TextBox\n\t\tPrivate rectangleWidthIndicator As TextBlock\n\t\tPrivate myRectangle As Rectangle\n\n\t\tPublic Sub New()\n\n\t\t\t&#39; Create a name scope for the page.\n\t\t\tNameScope.SetNameScope(Me, New NameScope())\n\n\t\t\tMe.Background = Brushes.White\n\n\t\t\tDim controlsContainer As New BlockUIContainer()\n\n\t\t\tDim myStackPanel As New StackPanel()\n\t\t\tmyStackPanel.Margin = New Thickness(20)\n\n\t\t\t&#39; Create a rectangle.\n\t\t\tmyRectangle = New Rectangle()\n\t\t\tmyRectangle.Width = 100\n\t\t\tmyRectangle.Height = 20\n\t\t\tmyRectangle.Margin = New Thickness(12,0,0,5)\n\t\t\tmyRectangle.Fill = New SolidColorBrush(Color.FromArgb(170, 51, 51, 255))\n\t\t\tmyRectangle.HorizontalAlignment = HorizontalAlignment.Left\n\t\t\tmyStackPanel.Children.Add(myRectangle)\n\n\t\t\t&#39; Assign the rectangle a name by \n\t\t\t&#39; registering it with the page, so that\n\t\t\t&#39; it can be targeted by storyboard\n\t\t\t&#39; animations.\n\t\t\tMe.RegisterName(&quot;myRectangle&quot;, myRectangle)\n\n\t\t\t&#39;\n\t\t\t&#39; Create an animation and a storyboard to animate the\n\t\t\t&#39; rectangle.\n\t\t\t&#39;\n\t\t\tDim myDoubleAnimation As New DoubleAnimation(100, 500, New Duration(TimeSpan.FromSeconds(60)))\n\t\t\tStoryboard.SetTargetName(myDoubleAnimation, &quot;myRectangle&quot;)\n\t\t\tStoryboard.SetTargetProperty(myDoubleAnimation, New PropertyPath(Rectangle.WidthProperty))\n\t\t\tmyStoryboard = New Storyboard()\n\t\t\tmyStoryboard.Children.Add(myDoubleAnimation)\n\n\t\t\t&#39;\n\t\t\t&#39; Create some buttons to control the storyboard\n\t\t\t&#39; and a panel to contain them.\n\t\t\t&#39;\n\t\t\tDim buttonPanel As New StackPanel()\n\t\t\tDim beginButton As New Button()\n\t\t\tbeginButton.Content = &quot;Begin&quot;\n\t\t\tAddHandler beginButton.Click, AddressOf beginButton_Clicked\n\t\t\tbuttonPanel.Children.Add(beginButton)\n\t\t\tDim pauseButton As New Button()\n\t\t\tpauseButton.Content = &quot;Pause&quot;\n\t\t\tAddHandler pauseButton.Click, AddressOf pauseButton_Clicked\n\t\t\tbuttonPanel.Children.Add(pauseButton)\n\t\t\tDim resumeButton As New Button()\n\t\t\tresumeButton.Content = &quot;Resume&quot;\n\t\t\tAddHandler resumeButton.Click, AddressOf resumeButton_Clicked\n\t\t\tbuttonPanel.Children.Add(resumeButton)\n\t\t\tDim skipToFillButton As New Button()\n\t\t\tskipToFillButton.Content = &quot;Skip to Fill&quot;\n\t\t\tAddHandler skipToFillButton.Click, AddressOf skipToFillButton_Clicked\n\t\t\tbuttonPanel.Children.Add(skipToFillButton)\n\t\t\tDim setSpeedRatioButton As New Button()\n\t\t\tsetSpeedRatioButton.Content = &quot;Triple Speed&quot;\n\t\t\tAddHandler setSpeedRatioButton.Click, AddressOf setSpeedRatioButton_Clicked\n\t\t\tbuttonPanel.Children.Add(setSpeedRatioButton)\n\t\t\tDim stopButton As New Button()\n\t\t\tstopButton.Content = &quot;Stop&quot;\n\t\t\tAddHandler stopButton.Click, AddressOf stopButton_Clicked\n\t\t\tbuttonPanel.Children.Add(stopButton)\n\t\t\tDim removeButton As New Button()\n\t\t\tremoveButton.Content = &quot;Remove&quot;\n\t\t\tAddHandler removeButton.Click, AddressOf removeButton_Clicked\n\t\t\tbuttonPanel.Children.Add(removeButton)\n\n\t\t\tmyStackPanel.Children.Add(buttonPanel)\n\n\t\t\t&#39; Create some controls to display the\n\t\t\t&#39; storyboard&#39;s current time and the\n\t\t\t&#39; current width of the rectangle.\n\t\t\tDim seekPanel As New StackPanel()\n\t\t\tseekPanel.Margin = New Thickness(10)\n\t\t\tDim aPanel As New StackPanel()\n\t\t\tDim aLabel As New Label()\n\t\t\taPanel.Orientation = Orientation.Horizontal\n\t\t\taLabel.Content = &quot;Current Time: &quot;\n\t\t\taPanel.Children.Add(aLabel)\n\t\t\tcurrentTimeIndicator = New TextBlock()\n\t\t\taPanel.Children.Add(currentTimeIndicator)\n\t\t\tseekPanel.Children.Add(aPanel)\n\n\t\t\taPanel = New StackPanel()\n\t\t\taPanel.Orientation = Orientation.Horizontal\n\t\t\taLabel = New Label()\n\t\t\taLabel.Content = &quot;Rectangle Width: &quot;\n\t\t\taPanel.Children.Add(aLabel)\n\t\t\trectangleWidthIndicator = New TextBlock()\n\t\t\trectangleWidthIndicator.Text = myRectangle.Width.ToString()\n\t\t\taPanel.Children.Add(rectangleWidthIndicator)\n\t\t\tseekPanel.Children.Add(aPanel)\n\n\n\t\t\t&#39; Create some controls to enable the\n\t\t\t&#39; user to specify a seek position.\n\n\t\t\taPanel = New StackPanel()\n\t\t\taPanel.Orientation = Orientation.Horizontal\n\t\t\taLabel = New Label()\n\t\t\taLabel.Content = &quot;Seek Offset: &quot;\n\t\t\taPanel.Children.Add(aLabel)\n\t\t\tseekDestination = New TextBox()\n\t\t\tseekDestination.Text = &quot;0&quot;\n\t\t\taPanel.Children.Add(seekDestination)\n\t\t\tseekPanel.Children.Add(aPanel)\n\n\n\t\t\tDim seekButton As New Button()\n\t\t\tseekButton.Content = &quot;Seek&quot;\n\t\t\tAddHandler seekButton.Click, AddressOf seekButton_Clicked\n\t\t\tseekPanel.Children.Add(seekButton)\n\t\t\tDim seekAlignedToLastTickButton As New Button()\n\t\t\tseekAlignedToLastTickButton.Content = &quot;Seek Aligned to Last Tick&quot;\n\t\t\tAddHandler seekAlignedToLastTickButton.Click, AddressOf seekAlignedToLastTickButton_Clicked\n\t\t\tseekPanel.Children.Add(seekAlignedToLastTickButton)\n\n\t\t\tmyStackPanel.Children.Add(seekPanel)\n\n\t\t\tcontrolsContainer.Child = myStackPanel\n\t\t\tMe.Blocks.Add(controlsContainer)\n\n\t\t\tAddHandler myStoryboard.CurrentTimeInvalidated, AddressOf myStoryboard_CurrentTimeInvalidated\n\t\tEnd Sub\n\n\t\t&#39; Begins the storyboard.\n\t\tPrivate Sub beginButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t&#39; Specifying &quot;true&quot; as the second Begin parameter\n\t\t\t&#39; makes this storyboard controllable.\n\t\t\tmyStoryboard.Begin(Me, True)\n\n\t\tEnd Sub\n\n\t\t&#39; Pauses the storyboard.\n\t\tPrivate Sub pauseButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.Pause(Me)\n\n\t\tEnd Sub\n\n\t\t&#39; Resumes the storyboard.\n\t\tPrivate Sub resumeButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.Resume(Me)\n\n\t\tEnd Sub\n\n\t\t&#39; Advances the storyboard to its fill period.\n\t\tPrivate Sub skipToFillButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.SkipToFill(Me)\n\n\t\tEnd Sub\n\n\t\t&#39; Updates the storyboard&#39;s speed.\n\t\tPrivate Sub setSpeedRatioButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t&#39; Makes the storyboard progress three times as fast as normal.\n\t\t\tmyStoryboard.SetSpeedRatio(Me, 3)\n\n\t\tEnd Sub\n\n\t\t&#39; Stops the storyboard.\n\t\tPrivate Sub stopButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.Stop(Me)\n\n\t\tEnd Sub\n\n\t\t&#39; Removes the storyboard.\n\t\tPrivate Sub removeButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.Remove(Me)\n\n\t\tEnd Sub\n\n\t\tPrivate Sub seekButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\tTry\n\n\n\t\t\t\tDim seekTime As TimeSpan = TimeSpan.Parse(seekDestination.Text)\n\t\t\t\tmyStoryboard.Seek(Me, seekTime, TimeSeekOrigin.BeginTime)\n\n\t\t\t\t&#39; The rectangle width will probably not be at its new\n\t\t\t\t&#39; value when this call is made, because the storyboard&#39;s\n\t\t\t\t&#39; clock probably hasn&#39;t ticked yet.\n\t\t\t\trectangleWidthIndicator.Text = myRectangle.Width.ToString()\n\n\t\t\tCatch ex As FormatException\n\t\t\t\tMessageBox.Show(&quot;Invalid TimeSpan value.&quot;)\n\t\t\t\tseekDestination.Focus()\n\t\t\tEnd Try\n\t\tEnd Sub\n\n\t\tPrivate Sub seekAlignedToLastTickButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\n\t\t\tTry\n\n\n\t\t\t\tDim seekTime As TimeSpan = TimeSpan.Parse(seekDestination.Text)\n\t\t\t\tmyStoryboard.SeekAlignedToLastTick(Me, seekTime, TimeSeekOrigin.BeginTime)\n\n\t\t\t\t&#39; The rectangle width will be at its new\n\t\t\t\t&#39; value when this call is made, because SeekAlignedToLastTick \n\t\t\t\t&#39; operation immediately updates timeline and animation\n\t\t\t\t&#39; values.          \n\t\t\t\trectangleWidthIndicator.Text = myRectangle.Width.ToString()\n\n\t\t\tCatch ex As FormatException\n\t\t\t\tMessageBox.Show(&quot;Invalid TimeSpan value.&quot;)\n\t\t\t\tseekDestination.Focus()\n\t\t\tEnd Try\n\t\tEnd Sub\n\n\t\tPrivate Sub myStoryboard_CurrentTimeInvalidated(ByVal sender As Object, ByVal e As EventArgs)\n\n\t\t\tcurrentTimeIndicator.Text = myStoryboard.GetCurrentTime(Me).ToString()\n\n\t\tEnd Sub\n\n\n\n\tEnd Class\nEnd Namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_Seek_System_Windows_FrameworkElement_System_TimeSpan_System_Windows_Media_Animation_TimeSeekOrigin_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_Seek_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Seek(FrameworkElement,TimeSpan,TimeSeekOrigin)</div>        \r\n          </div>\r\n    \r\n            <p>Seeks this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> to the specified position. The <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> performs the requested seek when the next clock tick occurs.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Seek (System.Windows.FrameworkElement containingObject, TimeSpan offset, System.Windows.Media.Animation.TimeSeekOrigin origin);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>containingObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object specified when the <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.Begin*</span> method was called. This object contains the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> objects that were created for this storyboard and its children.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A positive or negative value that describes the amount by which the timeline should move forward or backward from the specified <code>origin</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>origin</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.animation.timeseekorigin\" data-linktype=\"relative-path\">TimeSeekOrigin</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position from which <code>offset</code> is applied.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Note that seek operations do not take the storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_SpeedRatio_\" data-linktype=\"relative-path\">SpeedRatio</a> or <a class=\"xref\" href=\"system.windows.media.animation.paralleltimeline#System_Windows_Media_Animation_ParallelTimeline_SlipBehavior_\" data-linktype=\"relative-path\">SlipBehavior</a> settings into account. The storyboard is treated as though it has a <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_SpeedRatio_\" data-linktype=\"relative-path\">SpeedRatio</a> of 1 and no <a class=\"xref\" href=\"system.windows.media.animation.paralleltimeline#System_Windows_Media_Animation_ParallelTimeline_SlipBehavior_\" data-linktype=\"relative-path\">SlipBehavior</a>.  </p>\n<p> This method changes the storyboard clock&#39;s <a class=\"xref\" href=\"system.windows.media.animation.clock#System_Windows_Media_Animation_Clock_CurrentState_\" data-linktype=\"relative-path\">CurrentState</a> to <a class=\"xref\" href=\"system.windows.media.animation.clockstate\" data-linktype=\"relative-path\">ClockState</a>. This method has no effect on the timing tree until the next time a tick is processed. As a side-effect, the appropriate events are also not raised until then.  </p>\n<p> To interactively control this storyboard, you must use the same <code>containingObject</code> parameter when calling the interactive methods that you used to begin the storyboard. A controllable storyboard can pause, resume, seek, stop, and be removed if it is made controllable. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method and specify <code>true</code> to make it controllable. For an example, see <a href=\"../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md\" data-linktype=\"relative-path\">How to: Control a Storyboard After It Starts</a>.  </p>\n<p> Seeking a storyboard triggers the <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_CurrentGlobalSpeedInvalidated\" data-linktype=\"relative-path\">CurrentGlobalSpeedInvalidated</a> and <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_CurrentStateInvalidated\" data-linktype=\"relative-path\">CurrentStateInvalidated</a> events.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to seek (skip) to one second after a Storyboard begins.  </p>\n<pre><code class=\"lang-cs\" name=\"timingbehaviors_procedural_snip#SeekStoryboardExampleWholePage\">using System;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Media;\nusing System.Windows.Shapes;\nusing System.Windows.Media.Animation;\n\nnamespace Microsoft.Samples.Animation.TimingBehaviors\n{\n    public partial class SeekStoryboardExample : Page\n    {\n    \n        private Storyboard myStoryboard;\n\n        public SeekStoryboardExample()\n        {\n        \n            // Create a name scope for the page.\n            NameScope.SetNameScope(this, new NameScope());        \n\n            StackPanel myStackPanel = new StackPanel();\n            \n            // Create a rectangle.\n            Rectangle myRectangle = new Rectangle();\n            myRectangle.Width = 100;\n            myRectangle.Height = 20;\n            myRectangle.Margin = new Thickness(12,0,0,5);\n            myRectangle.Fill = new SolidColorBrush(Color.FromArgb(170, 51, 51, 255));\n            myRectangle.HorizontalAlignment = HorizontalAlignment.Left;\n            myStackPanel.Children.Add(myRectangle);\n            \n            // Assign the rectangle a name by \n            // registering it with the page, so that\n            // it can be targeted by storyboard\n            // animations.\n            this.RegisterName(&quot;myRectangle&quot;, myRectangle);           \n            \n            //\n            // Create an animation and a storyboard to animate the\n            // rectangle.\n            //\n            DoubleAnimation myDoubleAnimation = \n                new DoubleAnimation(100, 500, new Duration(TimeSpan.FromSeconds(5)));            \n            Storyboard.SetTargetName(myDoubleAnimation, &quot;myRectangle&quot;);\n            Storyboard.SetTargetProperty(myDoubleAnimation, new PropertyPath(Rectangle.WidthProperty));\n            myStoryboard = new Storyboard();\n            myStoryboard.Children.Add(myDoubleAnimation);\n            \n            // Create a buton to begin the Storyboard.\n            StackPanel buttonPanel = new StackPanel();\n            buttonPanel.Orientation = Orientation.Horizontal;\n            Button beginButton = new Button();\n            beginButton.Content = &quot;Begin&quot;;\n            beginButton.Click += new RoutedEventHandler(beginButton_Clicked);\n            buttonPanel.Children.Add(beginButton);\n\n            // Create a button to seek to a specific time in the Storyboard.\n            Button seekStoryboardButton = new Button();\n            seekStoryboardButton.Content = &quot;Seek to One Second After Begin Time&quot;;\n            seekStoryboardButton.Click += new RoutedEventHandler(seekStoryboardButton_Clicked);\n            buttonPanel.Children.Add(seekStoryboardButton);\n\n            myStackPanel.Children.Add(buttonPanel);           \n            this.Content = myStackPanel;            \n        }\n        \n        // Begins the storyboard.\n        private void beginButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            // Specifying &quot;true&quot; as the second Begin parameter\n            // makes this storyboard controllable.\n            myStoryboard.Begin(this, true);          \n        \n        }\n\n        // Seek (skip to) one second into the Storboard&#39;s active period (Duration). \n        private void seekStoryboardButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            // Create time interval to seek to. This TimeSpan is set for one second.\n            TimeSpan myTimeSpan = new TimeSpan(0, 0, 1);\n\n            // Seek (skip to) to one second from the begin time of the Storyboard.\n            myStoryboard.Seek(this, myTimeSpan, TimeSeekOrigin.BeginTime);\n\n        }   \n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"timingbehaviors_procedural_snip#SeekStoryboardExampleWholePage\">\nImports System\nImports System.Windows\nImports System.Windows.Controls\nImports System.Windows.Media\nImports System.Windows.Shapes\nImports System.Windows.Media.Animation\n\nNamespace Microsoft.Samples.Animation.TimingBehaviors\n\tPartial Public Class SeekStoryboardExample\n\t\tInherits Page\n\n\t\tPrivate myStoryboard As Storyboard\n\n\t\tPublic Sub New()\n\n\t\t\t&#39; Create a name scope for the page.\n\t\t\tNameScope.SetNameScope(Me, New NameScope())\n\n\t\t\tDim myStackPanel As New StackPanel()\n\n\t\t\t&#39; Create a rectangle.\n\t\t\tDim myRectangle As New Rectangle()\n\t\t\tmyRectangle.Width = 100\n\t\t\tmyRectangle.Height = 20\n\t\t\tmyRectangle.Margin = New Thickness(12,0,0,5)\n\t\t\tmyRectangle.Fill = New SolidColorBrush(Color.FromArgb(170, 51, 51, 255))\n\t\t\tmyRectangle.HorizontalAlignment = HorizontalAlignment.Left\n\t\t\tmyStackPanel.Children.Add(myRectangle)\n\n\t\t\t&#39; Assign the rectangle a name by \n\t\t\t&#39; registering it with the page, so that\n\t\t\t&#39; it can be targeted by storyboard\n\t\t\t&#39; animations.\n\t\t\tMe.RegisterName(&quot;myRectangle&quot;, myRectangle)\n\n\t\t\t&#39;\n\t\t\t&#39; Create an animation and a storyboard to animate the\n\t\t\t&#39; rectangle.\n\t\t\t&#39;\n\t\t\tDim myDoubleAnimation As New DoubleAnimation(100, 500, New Duration(TimeSpan.FromSeconds(5)))\n\t\t\tStoryboard.SetTargetName(myDoubleAnimation, &quot;myRectangle&quot;)\n\t\t\tStoryboard.SetTargetProperty(myDoubleAnimation, New PropertyPath(Rectangle.WidthProperty))\n\t\t\tmyStoryboard = New Storyboard()\n\t\t\tmyStoryboard.Children.Add(myDoubleAnimation)\n\n\t\t\t&#39; Create a buton to begin the Storyboard.\n\t\t\tDim buttonPanel As New StackPanel()\n\t\t\tbuttonPanel.Orientation = Orientation.Horizontal\n\t\t\tDim beginButton As New Button()\n\t\t\tbeginButton.Content = &quot;Begin&quot;\n\t\t\tAddHandler beginButton.Click, AddressOf beginButton_Clicked\n\t\t\tbuttonPanel.Children.Add(beginButton)\n\n\t\t\t&#39; Create a button to seek to a specific time in the Storyboard.\n\t\t\tDim seekStoryboardButton As New Button()\n\t\t\tseekStoryboardButton.Content = &quot;Seek to One Second After Begin Time&quot;\n\t\t\tAddHandler seekStoryboardButton.Click, AddressOf seekStoryboardButton_Clicked\n\t\t\tbuttonPanel.Children.Add(seekStoryboardButton)\n\n\t\t\tmyStackPanel.Children.Add(buttonPanel)\n\t\t\tMe.Content = myStackPanel\n\t\tEnd Sub\n\n\t\t&#39; Begins the storyboard.\n\t\tPrivate Sub beginButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t&#39; Specifying &quot;true&quot; as the second Begin parameter\n\t\t\t&#39; makes this storyboard controllable.\n\t\t\tmyStoryboard.Begin(Me, True)\n\n\t\tEnd Sub\n\n\t\t&#39; Seek (skip to) one second into the Storboard&#39;s active period (Duration). \n\t\tPrivate Sub seekStoryboardButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t&#39; Create time interval to seek to. This TimeSpan is set for one second.\n\t\t\tDim myTimeSpan As New TimeSpan(0, 0, 1)\n\n\t\t\t&#39; Seek (skip to) to one second from the begin time of the Storyboard.\n\t\t\tmyStoryboard.Seek(Me, myTimeSpan, TimeSeekOrigin.BeginTime)\n\n\t\tEnd Sub\n\tEnd Class\nEnd Namespace\n</code></pre><p> The next example shows both the Seek and <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_SeekAlignedToLastTick_\" data-linktype=\"relative-path\">SeekAlignedToLastTick</a> methods.  </p>\n<pre><code class=\"lang-vb\" name=\"StoryboardBeginAnimation_procedural_snip#SeekExampleUsingWholePage\">&#39;\n&#39;    This example shows how to seek a storyboard.\n&#39;\n&#39;\n\n\nImports System\nImports System.Windows\nImports System.Windows.Controls\nImports System.Windows.Media\nImports System.Windows.Shapes\nImports System.Windows.Media.Animation\n\n\n\nNamespace Microsoft.Samples.Animation.AnimatingWithStoryboards\n\tPartial Public Class SeekExample\n\t\tInherits Page\n\n\t\tPrivate myStoryboard As Storyboard\n\t\tPrivate currentTimeIndicator As TextBlock\n\t\tPrivate seekDestination As TextBox\n\t\tPrivate rectangleWidthIndicator As TextBlock\n\t\tPrivate myRectangle As Rectangle\n\n\t\tPublic Sub New()\n\n\t\t\t&#39; Create a name scope for the page.\n\t\t\tNameScope.SetNameScope(Me, New NameScope())\n\n\t\t\tMe.WindowTitle = &quot;Controlling a Storyboard&quot;\n\t\t\tMe.Background = Brushes.White\n\n\t\t\tDim myStackPanel As New StackPanel()\n\t\t\tmyStackPanel.Margin = New Thickness(20)\n\n\t\t\t&#39; Create a rectangle.\n            myRectangle = New Rectangle()\n            With myRectangle\n                .Width = 100\n                .Height = 20\n                .Margin = New Thickness(12, 0, 0, 5)\n                .Fill = New SolidColorBrush(Color.FromArgb(170, 51, 51, 255))\n                .HorizontalAlignment = HorizontalAlignment.Left\n            End With\n            myStackPanel.Children.Add(myRectangle)\n\n            &#39; Assign the rectangle a name by \n            &#39; registering it with the page, so that\n            &#39; it can be targeted by storyboard\n            &#39; animations.\n            Me.RegisterName(&quot;myRectangle&quot;, myRectangle)\n\n            &#39;\n            &#39; Create an animation and a storyboard to animate the\n            &#39; rectangle.\n            &#39;\n            Dim myDoubleAnimation As New DoubleAnimation(100, 500, New Duration(TimeSpan.FromSeconds(60)))\n            Storyboard.SetTargetName(myDoubleAnimation, &quot;myRectangle&quot;)\n            Storyboard.SetTargetProperty(myDoubleAnimation, New PropertyPath(Rectangle.WidthProperty))\n            myStoryboard = New Storyboard()\n            myStoryboard.Children.Add(myDoubleAnimation)\n\n            &#39;\n            &#39; Create some buttons to control the storyboard\n            &#39; and a panel to contain them.\n            &#39;\n            Dim buttonPanel As New StackPanel()\n            buttonPanel.Orientation = Orientation.Horizontal\n            Dim beginButton As New Button()\n            beginButton.Content = &quot;Begin&quot;\n            AddHandler beginButton.Click, AddressOf beginButton_Clicked\n            buttonPanel.Children.Add(beginButton)\n            Dim pauseButton As New Button()\n            pauseButton.Content = &quot;Pause&quot;\n            AddHandler pauseButton.Click, AddressOf pauseButton_Clicked\n            buttonPanel.Children.Add(pauseButton)\n            Dim resumeButton As New Button()\n            resumeButton.Content = &quot;Resume&quot;\n            AddHandler resumeButton.Click, AddressOf resumeButton_Clicked\n            buttonPanel.Children.Add(resumeButton)\n            Dim skipToFillButton As New Button()\n            skipToFillButton.Content = &quot;Skip to Fill&quot;\n            AddHandler skipToFillButton.Click, AddressOf skipToFillButton_Clicked\n            buttonPanel.Children.Add(skipToFillButton)\n            Dim setSpeedRatioButton As New Button()\n            setSpeedRatioButton.Content = &quot;Triple Speed&quot;\n            AddHandler setSpeedRatioButton.Click, AddressOf setSpeedRatioButton_Clicked\n            buttonPanel.Children.Add(setSpeedRatioButton)\n            Dim stopButton As New Button()\n            stopButton.Content = &quot;Stop&quot;\n            AddHandler stopButton.Click, AddressOf stopButton_Clicked\n            buttonPanel.Children.Add(stopButton)\n            Dim removeButton As New Button()\n            removeButton.Content = &quot;Remove&quot;\n            AddHandler removeButton.Click, AddressOf removeButton_Clicked\n            buttonPanel.Children.Add(removeButton)\n\n            myStackPanel.Children.Add(buttonPanel)\n\n            &#39; Create some controls to display the\n            &#39; storyboard&#39;s current time and the\n            &#39; current width of the rectangle.\n            Dim seekPanel As New StackPanel()\n            seekPanel.Margin = New Thickness(10)\n            Dim aPanel As New StackPanel()\n            Dim aLabel As New Label()\n            aPanel.Orientation = Orientation.Horizontal\n            aLabel.Content = &quot;Current Time: &quot;\n            aPanel.Children.Add(aLabel)\n            currentTimeIndicator = New TextBlock()\n            aPanel.Children.Add(currentTimeIndicator)\n            seekPanel.Children.Add(aPanel)\n\n            aPanel = New StackPanel()\n            aPanel.Orientation = Orientation.Horizontal\n            aLabel = New Label()\n            aLabel.Content = &quot;Rectangle Width: &quot;\n            aPanel.Children.Add(aLabel)\n            rectangleWidthIndicator = New TextBlock()\n            rectangleWidthIndicator.Text = myRectangle.Width.ToString()\n            aPanel.Children.Add(rectangleWidthIndicator)\n            seekPanel.Children.Add(aPanel)\n\n\n            &#39; Create some controls to enable the\n            &#39; user to specify a seek position.\n\n            aPanel = New StackPanel()\n            aPanel.Orientation = Orientation.Horizontal\n            aLabel = New Label()\n            aLabel.Content = &quot;Seek Offset: &quot;\n            aPanel.Children.Add(aLabel)\n            seekDestination = New TextBox()\n            seekDestination.Text = &quot;0&quot;\n            aPanel.Children.Add(seekDestination)\n            seekPanel.Children.Add(aPanel)\n\n\n            Dim seekButton As New Button()\n            seekButton.Content = &quot;Seek&quot;\n            AddHandler seekButton.Click, AddressOf seekButton_Clicked\n            seekPanel.Children.Add(seekButton)\n            Dim seekAlignedToLastTickButton As New Button()\n            seekAlignedToLastTickButton.Content = &quot;Seek Aligned to Last Tick&quot;\n            AddHandler seekAlignedToLastTickButton.Click, AddressOf seekAlignedToLastTickButton_Clicked\n            seekPanel.Children.Add(seekAlignedToLastTickButton)\n\n            myStackPanel.Children.Add(seekPanel)\n\n            Me.Content = myStackPanel\n\n            AddHandler myStoryboard.CurrentTimeInvalidated, AddressOf myStoryboard_CurrentTimeInvalidated\n\t\tEnd Sub\n\n\t\t&#39; Begins the storyboard.\n\t\tPrivate Sub beginButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t&#39; Specifying &quot;true&quot; as the second Begin parameter\n\t\t\t&#39; makes this storyboard controllable.\n\t\t\tmyStoryboard.Begin(Me, True)\n\n\t\tEnd Sub\n\n\t\t&#39; Pauses the storyboard.\n\t\tPrivate Sub pauseButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.Pause(Me)\n\n\t\tEnd Sub\n\n\t\t&#39; Resumes the storyboard.\n\t\tPrivate Sub resumeButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.Resume(Me)\n\n\t\tEnd Sub\n\n\t\t&#39; Advances the storyboard to its fill period.\n\t\tPrivate Sub skipToFillButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.SkipToFill(Me)\n\n\t\tEnd Sub\n\n\t\t&#39; Updates the storyboard&#39;s speed.\n\t\tPrivate Sub setSpeedRatioButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t&#39; Makes the storyboard progress three times as fast as normal.\n\t\t\tmyStoryboard.SetSpeedRatio(Me, 3)\n\n\t\tEnd Sub\n\n\t\t&#39; Stops the storyboard.\n\t\tPrivate Sub stopButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.Stop(Me)\n\n\t\tEnd Sub\n\n\t\t&#39; Removes the storyboard.\n\t\tPrivate Sub removeButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.Remove(Me)\n\n\t\tEnd Sub\n\n\t\tPrivate Sub seekButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\tTry\n\n\t\t\t\t&#39; The rectangle width will probably not be at its new\n\t\t\t\t&#39; value when this call is made, because the storyboard&#39;s\n\t\t\t\t&#39; clock probably hasn&#39;t ticked yet.\n\t\t\t\tDim seekTime As TimeSpan = TimeSpan.Parse(seekDestination.Text)\n\t\t\t\tmyStoryboard.Seek(Me, seekTime, TimeSeekOrigin.BeginTime)\n\t\t\t\trectangleWidthIndicator.Text = myRectangle.Width.ToString()\n\n\t\t\tCatch ex As FormatException\n\t\t\t\tMessageBox.Show(&quot;Invalid TimeSpan value.&quot;)\n\t\t\t\tseekDestination.Focus()\n\t\t\tEnd Try\n\t\tEnd Sub\n\n\t\tPrivate Sub seekAlignedToLastTickButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\n\t\t\tTry\n\n\t\t\t\t&#39; The rectangle width will be at its new\n\t\t\t\t&#39; value when this call is made, because SeekAlignedToLastTick \n\t\t\t\t&#39; operation immediately updates timeline and animation\n\t\t\t\t&#39; values.        \n\t\t\t\tDim seekTime As TimeSpan = TimeSpan.Parse(seekDestination.Text)\n\t\t\t\tmyStoryboard.SeekAlignedToLastTick(Me, seekTime, TimeSeekOrigin.BeginTime)\n\t\t\t\trectangleWidthIndicator.Text = myRectangle.Width.ToString()\n\n\t\t\tCatch ex As FormatException\n\t\t\t\tMessageBox.Show(&quot;Invalid TimeSpan value.&quot;)\n\t\t\t\tseekDestination.Focus()\n\t\t\tEnd Try\n\t\tEnd Sub\n\n\t\tPrivate Sub myStoryboard_CurrentTimeInvalidated(ByVal sender As Object, ByVal e As EventArgs)\n\n\t\t\tcurrentTimeIndicator.Text = myStoryboard.GetCurrentTime(Me).ToString()\n\n\t\tEnd Sub\n\n\n\n\tEnd Class\nEnd Namespace\n</code></pre><pre><code class=\"lang-cs\" name=\"StoryboardBeginAnimation_procedural_snip#SeekExampleUsingWholePage\">/*\n    This example shows how to seek a storyboard.\n\n*/\n\nusing System;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Media;\nusing System.Windows.Shapes;\nusing System.Windows.Media.Animation;\n\n\n\nnamespace Microsoft.Samples.Animation.AnimatingWithStoryboards\n{\n    public partial class SeekExample : Page\n    {\n    \n        private Storyboard myStoryboard;\n        private TextBlock currentTimeIndicator;\n        private TextBox seekDestination;\n        private TextBlock rectangleWidthIndicator;\n        private Rectangle myRectangle;\n        \n        public SeekExample()\n        {\n        \n            // Create a name scope for the page.\n            NameScope.SetNameScope(this, new NameScope());        \n        \n            this.WindowTitle = &quot;Controlling a Storyboard&quot;;\n            this.Background = Brushes.White;\n\n            StackPanel myStackPanel = new StackPanel();\n            myStackPanel.Margin = new Thickness(20);\n            \n            // Create a rectangle.\n            myRectangle = new Rectangle();\n            myRectangle.Width = 100;\n            myRectangle.Height = 20;\n            myRectangle.Margin = new Thickness(12,0,0,5);\n            myRectangle.Fill = new SolidColorBrush(Color.FromArgb(170, 51, 51, 255));\n            myRectangle.HorizontalAlignment = HorizontalAlignment.Left;\n            myStackPanel.Children.Add(myRectangle);\n            \n            // Assign the rectangle a name by \n            // registering it with the page, so that\n            // it can be targeted by storyboard\n            // animations.\n            this.RegisterName(&quot;myRectangle&quot;, myRectangle);           \n            \n            //\n            // Create an animation and a storyboard to animate the\n            // rectangle.\n            //\n            DoubleAnimation myDoubleAnimation = \n                new DoubleAnimation(100, 500, new Duration(TimeSpan.FromSeconds(60)));            \n            Storyboard.SetTargetName(myDoubleAnimation, &quot;myRectangle&quot;);\n            Storyboard.SetTargetProperty(myDoubleAnimation, new PropertyPath(Rectangle.WidthProperty));\n            myStoryboard = new Storyboard();\n            myStoryboard.Children.Add(myDoubleAnimation);\n            \n            //\n            // Create some buttons to control the storyboard\n            // and a panel to contain them.\n            //\n            StackPanel buttonPanel = new StackPanel();\n            buttonPanel.Orientation = Orientation.Horizontal;\n            Button beginButton = new Button();\n            beginButton.Content = &quot;Begin&quot;;\n            beginButton.Click += new RoutedEventHandler(beginButton_Clicked);            \n            buttonPanel.Children.Add(beginButton);\n            Button pauseButton = new Button();\n            pauseButton.Content = &quot;Pause&quot;;\n            pauseButton.Click +=new RoutedEventHandler(pauseButton_Clicked);\n            buttonPanel.Children.Add(pauseButton);\n            Button resumeButton = new Button();\n            resumeButton.Content = &quot;Resume&quot;;\n            resumeButton.Click +=new RoutedEventHandler(resumeButton_Clicked);\n            buttonPanel.Children.Add(resumeButton);\n            Button skipToFillButton = new Button();\n            skipToFillButton.Content = &quot;Skip to Fill&quot;;\n            skipToFillButton.Click +=new RoutedEventHandler(skipToFillButton_Clicked);\n            buttonPanel.Children.Add(skipToFillButton);\n            Button setSpeedRatioButton = new Button();\n            setSpeedRatioButton.Content = &quot;Triple Speed&quot;;\n            setSpeedRatioButton.Click +=new RoutedEventHandler(setSpeedRatioButton_Clicked);\n            buttonPanel.Children.Add(setSpeedRatioButton);\n            Button stopButton = new Button();\n            stopButton.Content = &quot;Stop&quot;;\n            stopButton.Click +=new RoutedEventHandler(stopButton_Clicked);\n            buttonPanel.Children.Add(stopButton);\n            Button removeButton = new Button();\n            removeButton.Content = &quot;Remove&quot;;\n            removeButton.Click +=new RoutedEventHandler(removeButton_Clicked);\n            buttonPanel.Children.Add(removeButton);            \n            \n            myStackPanel.Children.Add(buttonPanel);    \n            \n            // Create some controls to display the\n            // storyboard&#39;s current time and the\n            // current width of the rectangle.\n            StackPanel seekPanel = new StackPanel();\n            seekPanel.Margin = new Thickness(10);\n            StackPanel aPanel = new StackPanel();\n            Label aLabel = new Label();\n            aPanel.Orientation = Orientation.Horizontal;\n            aLabel.Content = &quot;Current Time: &quot;;\n            aPanel.Children.Add(aLabel);\n            currentTimeIndicator = new TextBlock();\n            aPanel.Children.Add(currentTimeIndicator);\n            seekPanel.Children.Add(aPanel);\n            \n            aPanel = new StackPanel();\n            aPanel.Orientation = Orientation.Horizontal;\n            aLabel = new Label();\n            aLabel.Content = &quot;Rectangle Width: &quot;;\n            aPanel.Children.Add(aLabel);\n            rectangleWidthIndicator = new TextBlock();\n            rectangleWidthIndicator.Text = myRectangle.Width.ToString(); \n            aPanel.Children.Add(rectangleWidthIndicator);\n            seekPanel.Children.Add(aPanel);\n            \n            \n            // Create some controls to enable the\n            // user to specify a seek position.\n            \n            aPanel = new StackPanel();\n            aPanel.Orientation = Orientation.Horizontal;\n            aLabel = new Label();\n            aLabel.Content = &quot;Seek Offset: &quot; ;\n            aPanel.Children.Add(aLabel);\n            seekDestination = new TextBox();\n            seekDestination.Text = &quot;0&quot;;\n            aPanel.Children.Add(seekDestination);       \n            seekPanel.Children.Add(aPanel);\n            \n            \n            Button seekButton = new Button();\n            seekButton.Content = &quot;Seek&quot;;\n            seekButton.Click += new RoutedEventHandler(seekButton_Clicked);\n            seekPanel.Children.Add(seekButton);\n            Button seekAlignedToLastTickButton = new Button();\n            seekAlignedToLastTickButton.Content = &quot;Seek Aligned to Last Tick&quot;;\n            seekAlignedToLastTickButton.Click += new RoutedEventHandler(seekAlignedToLastTickButton_Clicked);\n            seekPanel.Children.Add(seekAlignedToLastTickButton);           \n            \n            myStackPanel.Children.Add(seekPanel);\n            \n            this.Content = myStackPanel;   \n            \n            myStoryboard.CurrentTimeInvalidated += new EventHandler(myStoryboard_CurrentTimeInvalidated);\n        }\n        \n        // Begins the storyboard.\n        private void beginButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            // Specifying &quot;true&quot; as the second Begin parameter\n            // makes this storyboard controllable.\n            myStoryboard.Begin(this, true);          \n        \n        }\n        \n        // Pauses the storyboard.\n        private void pauseButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.Pause(this);          \n        \n        }\n        \n        // Resumes the storyboard.\n        private void resumeButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.Resume(this);          \n        \n        }     \n        \n        // Advances the storyboard to its fill period.\n        private void skipToFillButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.SkipToFill(this);          \n        \n        } \n        \n        // Updates the storyboard&#39;s speed.\n        private void setSpeedRatioButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            // Makes the storyboard progress three times as fast as normal.\n            myStoryboard.SetSpeedRatio(this, 3);          \n        \n        }           \n        \n        // Stops the storyboard.\n        private void stopButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.Stop(this);          \n        \n        }         \n        \n        // Removes the storyboard.\n        private void removeButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.Remove(this);          \n        \n        }        \n        \n        private void seekButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            try {\n            \n                // The rectangle width will probably not be at its new\n                // value when this call is made, because the storyboard&#39;s\n                // clock probably hasn&#39;t ticked yet.\n                TimeSpan seekTime = TimeSpan.Parse(seekDestination.Text);\n                myStoryboard.Seek(this, seekTime, TimeSeekOrigin.BeginTime);\n                rectangleWidthIndicator.Text = myRectangle.Width.ToString();\n            \n            }catch(FormatException ex)\n            {\n                MessageBox.Show(&quot;Invalid TimeSpan value.&quot;);\n                seekDestination.Focus();\n            }\n        }\n        \n        private void seekAlignedToLastTickButton_Clicked(object sender, RoutedEventArgs args)\n        {\n\n            try {\n            \n                // The rectangle width will be at its new\n                // value when this call is made, because SeekAlignedToLastTick \n                // operation immediately updates timeline and animation\n                // values.        \n                TimeSpan seekTime = TimeSpan.Parse(seekDestination.Text);\n                myStoryboard.SeekAlignedToLastTick(this, seekTime, TimeSeekOrigin.BeginTime);\n                rectangleWidthIndicator.Text = myRectangle.Width.ToString();\n            \n            }catch(FormatException ex)\n            {\n                MessageBox.Show(&quot;Invalid TimeSpan value.&quot;);\n                seekDestination.Focus();\n            }    \n        }\n        \n        private void myStoryboard_CurrentTimeInvalidated(object sender, EventArgs e)\n        {\n        \n            currentTimeIndicator.Text = myStoryboard.GetCurrentTime(this).ToString();\n            \n        }\n        \n        \n        \n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_SeekAlignedToLastTick_System_TimeSpan_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_SeekAlignedToLastTick_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SeekAlignedToLastTick(TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Seeks this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> to a new position immediately (synchronously).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SeekAlignedToLastTick (TimeSpan offset);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A positive or negative value that describes the amount by which the timeline should move forward or backward.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_SeekAlignedToLastTick_\" data-linktype=\"relative-path\">SeekAlignedToLastTick</a> aligns the seeked time of the <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> with the last clock tick. Values are immediately updated to reflect the changes due to <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_SeekAlignedToLastTick_\" data-linktype=\"relative-path\">SeekAlignedToLastTick</a>, even though the screen does not reflect these changes until the screen updates.  </p>\n<p> Note that seek operations do not take the storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_SpeedRatio_\" data-linktype=\"relative-path\">SpeedRatio</a> or <a class=\"xref\" href=\"system.windows.media.animation.paralleltimeline#System_Windows_Media_Animation_ParallelTimeline_SlipBehavior_\" data-linktype=\"relative-path\">SlipBehavior</a> settings into account. The storyboard is treated as though it has a <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_SpeedRatio_\" data-linktype=\"relative-path\">SpeedRatio</a> of 1 and no <a class=\"xref\" href=\"system.windows.media.animation.paralleltimeline#System_Windows_Media_Animation_ParallelTimeline_SlipBehavior_\" data-linktype=\"relative-path\">SlipBehavior</a>.  </p>\n<p> To make a storyboard controllable in code, you must use the appropriate overload of the storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method and specify <code>true</code> to make it controllable. For an example, see <a href=\"../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md\" data-linktype=\"relative-path\">How to: Control a Storyboard After It Starts</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_SeekAlignedToLastTick_System_TimeSpan_System_Windows_Media_Animation_TimeSeekOrigin_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_SeekAlignedToLastTick_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SeekAlignedToLastTick(TimeSpan,TimeSeekOrigin)</div>        \r\n          </div>\r\n    \r\n            <p>Seeks this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> to a new position immediately (synchronously).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SeekAlignedToLastTick (TimeSpan offset, System.Windows.Media.Animation.TimeSeekOrigin origin);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A positive or negative value that describes the amount by which the timeline should move forward or backward from the specified <code>origin</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>origin</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.animation.timeseekorigin\" data-linktype=\"relative-path\">TimeSeekOrigin</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position from which <code>offset</code> is applied.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_SeekAlignedToLastTick_\" data-linktype=\"relative-path\">SeekAlignedToLastTick</a> aligns the seeked time of the <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> with the last clock tick. Values are immediately updated to reflect the changes due to <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_SeekAlignedToLastTick_\" data-linktype=\"relative-path\">SeekAlignedToLastTick</a>, even though the screen does not reflect these changes until the screen updates.  </p>\n<p> Note that seek operations do not take the storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_SpeedRatio_\" data-linktype=\"relative-path\">SpeedRatio</a> or <a class=\"xref\" href=\"system.windows.media.animation.paralleltimeline#System_Windows_Media_Animation_ParallelTimeline_SlipBehavior_\" data-linktype=\"relative-path\">SlipBehavior</a> settings into account. The storyboard is treated as though it has a <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_SpeedRatio_\" data-linktype=\"relative-path\">SpeedRatio</a> of 1 and no <a class=\"xref\" href=\"system.windows.media.animation.paralleltimeline#System_Windows_Media_Animation_ParallelTimeline_SlipBehavior_\" data-linktype=\"relative-path\">SlipBehavior</a>.  </p>\n<p> To make a storyboard controllable in code, you must use the appropriate overload of the storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method and specify <code>true</code> to make it controllable. For an example, see <a href=\"../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md\" data-linktype=\"relative-path\">How to: Control a Storyboard After It Starts</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_SeekAlignedToLastTick_System_Windows_FrameworkContentElement_System_TimeSpan_System_Windows_Media_Animation_TimeSeekOrigin_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_SeekAlignedToLastTick_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SeekAlignedToLastTick(FrameworkContentElement,TimeSpan,TimeSeekOrigin)</div>        \r\n          </div>\r\n    \r\n            <p>Seeks this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> to a new position immediately (synchronously).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SeekAlignedToLastTick (System.Windows.FrameworkContentElement containingObject, TimeSpan offset, System.Windows.Media.Animation.TimeSeekOrigin origin);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>containingObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.frameworkcontentelement\" data-linktype=\"relative-path\">FrameworkContentElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object specified when the <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)</span> method was called. This object contains the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> objects that were created for this storyboard and its children.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A positive or negative value that describes the amount by which the timeline should move forward or backward from the specified <code>origin</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>origin</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.animation.timeseekorigin\" data-linktype=\"relative-path\">TimeSeekOrigin</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position from which <code>offset</code> is applied.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_SeekAlignedToLastTick_\" data-linktype=\"relative-path\">SeekAlignedToLastTick</a> aligns the seeked time of the <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> with the last clock tick. Values are immediately updated to reflect the changes due to <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_SeekAlignedToLastTick_\" data-linktype=\"relative-path\">SeekAlignedToLastTick</a>, even though the screen does not reflect these changes until the screen updates.  </p>\n<p> Note that seek operations do not take the storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_SpeedRatio_\" data-linktype=\"relative-path\">SpeedRatio</a> or <a class=\"xref\" href=\"system.windows.media.animation.paralleltimeline#System_Windows_Media_Animation_ParallelTimeline_SlipBehavior_\" data-linktype=\"relative-path\">SlipBehavior</a> settings into account. The storyboard is treated as though it has a <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_SpeedRatio_\" data-linktype=\"relative-path\">SpeedRatio</a> of 1 and no <a class=\"xref\" href=\"system.windows.media.animation.paralleltimeline#System_Windows_Media_Animation_ParallelTimeline_SlipBehavior_\" data-linktype=\"relative-path\">SlipBehavior</a>.  </p>\n<p> This method changes the storyboard clock&#39;s <a class=\"xref\" href=\"system.windows.media.animation.clock#System_Windows_Media_Animation_Clock_CurrentState_\" data-linktype=\"relative-path\">CurrentState</a> to  </p>\n<p> <a class=\"xref\" href=\"system.windows.media.animation.clockstate\" data-linktype=\"relative-path\">ClockState</a>.  </p>\n<p> Seeking a storyboard triggers the <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_CurrentGlobalSpeedInvalidated\" data-linktype=\"relative-path\">CurrentGlobalSpeedInvalidated</a> and <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_CurrentStateInvalidated\" data-linktype=\"relative-path\">CurrentStateInvalidated</a> events.  </p>\n<p> To interactively control this storyboard, you must use the same <code>containingObject</code> parameter when calling the interactive methods that you used to begin the storyboard. A controllable storyboard can pause, resume, seek, stop, and be removed. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method and specify <code>true</code> to make it controllable. For an example, see <a href=\"../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md\" data-linktype=\"relative-path\">How to: Control a Storyboard After It Starts</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows both the <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Seek_\" data-linktype=\"relative-path\">Seek</a> and <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_SeekAlignedToLastTick_\" data-linktype=\"relative-path\">SeekAlignedToLastTick</a> methods.  </p>\n<pre><code class=\"lang-cs\" name=\"StoryboardBeginAnimation_procedural_snip#FrameworkContentElementSeekExampleUsingWholePage\">/*\n    This example shows how to control\n    a storyboard after it has started.\n\n*/\n\nusing System;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Media;\nusing System.Windows.Shapes;\nusing System.Windows.Media.Animation;\nusing System.Windows.Documents;\n\n\n\nnamespace Microsoft.Samples.Animation.AnimatingWithStoryboards\n{\n    public partial class FrameworkContentElementSeekExample : FlowDocument\n    {\n    \n        private Storyboard myStoryboard;\n        private TextBlock currentTimeIndicator;\n        private TextBox seekDestination;\n        private TextBlock rectangleWidthIndicator;\n        private Rectangle myRectangle;\n        \n        public FrameworkContentElementSeekExample()\n        {\n        \n            // Create a name scope for the page.\n            NameScope.SetNameScope(this, new NameScope());        \n        \n            this.Background = Brushes.White;\n\n            BlockUIContainer controlsContainer = new BlockUIContainer();  \n\n            StackPanel myStackPanel = new StackPanel();\n            myStackPanel.Margin = new Thickness(20);\n            \n            // Create a rectangle.\n            myRectangle = new Rectangle();\n            myRectangle.Width = 100;\n            myRectangle.Height = 20;\n            myRectangle.Margin = new Thickness(12,0,0,5);\n            myRectangle.Fill = new SolidColorBrush(Color.FromArgb(170, 51, 51, 255));\n            myRectangle.HorizontalAlignment = HorizontalAlignment.Left;\n            myStackPanel.Children.Add(myRectangle);\n            \n            // Assign the rectangle a name by \n            // registering it with the page, so that\n            // it can be targeted by storyboard\n            // animations.\n            this.RegisterName(&quot;myRectangle&quot;, myRectangle);           \n            \n            //\n            // Create an animation and a storyboard to animate the\n            // rectangle.\n            //\n            DoubleAnimation myDoubleAnimation = \n                new DoubleAnimation(100, 500, new Duration(TimeSpan.FromSeconds(60)));            \n            Storyboard.SetTargetName(myDoubleAnimation, &quot;myRectangle&quot;);\n            Storyboard.SetTargetProperty(myDoubleAnimation, new PropertyPath(Rectangle.WidthProperty));\n            myStoryboard = new Storyboard();\n            myStoryboard.Children.Add(myDoubleAnimation);\n            \n            //\n            // Create some buttons to control the storyboard\n            // and a panel to contain them.\n            //\n            StackPanel buttonPanel = new StackPanel();\n            Button beginButton = new Button();\n            beginButton.Content = &quot;Begin&quot;;\n            beginButton.Click += new RoutedEventHandler(beginButton_Clicked);            \n            buttonPanel.Children.Add(beginButton);\n            Button pauseButton = new Button();\n            pauseButton.Content = &quot;Pause&quot;;\n            pauseButton.Click +=new RoutedEventHandler(pauseButton_Clicked);\n            buttonPanel.Children.Add(pauseButton);\n            Button resumeButton = new Button();\n            resumeButton.Content = &quot;Resume&quot;;\n            resumeButton.Click +=new RoutedEventHandler(resumeButton_Clicked);\n            buttonPanel.Children.Add(resumeButton);\n            Button skipToFillButton = new Button();\n            skipToFillButton.Content = &quot;Skip to Fill&quot;;\n            skipToFillButton.Click +=new RoutedEventHandler(skipToFillButton_Clicked);\n            buttonPanel.Children.Add(skipToFillButton);\n            Button setSpeedRatioButton = new Button();\n            setSpeedRatioButton.Content = &quot;Triple Speed&quot;;\n            setSpeedRatioButton.Click +=new RoutedEventHandler(setSpeedRatioButton_Clicked);\n            buttonPanel.Children.Add(setSpeedRatioButton);\n            Button stopButton = new Button();\n            stopButton.Content = &quot;Stop&quot;;\n            stopButton.Click +=new RoutedEventHandler(stopButton_Clicked);\n            buttonPanel.Children.Add(stopButton);\n            Button removeButton = new Button();\n            removeButton.Content = &quot;Remove&quot;;\n            removeButton.Click +=new RoutedEventHandler(removeButton_Clicked);\n            buttonPanel.Children.Add(removeButton);            \n            \n            myStackPanel.Children.Add(buttonPanel);    \n            \n            // Create some controls to display the\n            // storyboard&#39;s current time and the\n            // current width of the rectangle.\n            StackPanel seekPanel = new StackPanel();\n            seekPanel.Margin = new Thickness(10);\n            StackPanel aPanel = new StackPanel();\n            Label aLabel = new Label();\n            aPanel.Orientation = Orientation.Horizontal;\n            aLabel.Content = &quot;Current Time: &quot;;\n            aPanel.Children.Add(aLabel);\n            currentTimeIndicator = new TextBlock();\n            aPanel.Children.Add(currentTimeIndicator);\n            seekPanel.Children.Add(aPanel);\n            \n            aPanel = new StackPanel();\n            aPanel.Orientation = Orientation.Horizontal;\n            aLabel = new Label();\n            aLabel.Content = &quot;Rectangle Width: &quot;;\n            aPanel.Children.Add(aLabel);\n            rectangleWidthIndicator = new TextBlock();\n            rectangleWidthIndicator.Text = myRectangle.Width.ToString(); \n            aPanel.Children.Add(rectangleWidthIndicator);\n            seekPanel.Children.Add(aPanel);\n            \n            \n            // Create some controls to enable the\n            // user to specify a seek position.\n            \n            aPanel = new StackPanel();\n            aPanel.Orientation = Orientation.Horizontal;\n            aLabel = new Label();\n            aLabel.Content = &quot;Seek Offset: &quot; ;\n            aPanel.Children.Add(aLabel);\n            seekDestination = new TextBox();\n            seekDestination.Text = &quot;0&quot;;\n            aPanel.Children.Add(seekDestination);       \n            seekPanel.Children.Add(aPanel);\n            \n            \n            Button seekButton = new Button();\n            seekButton.Content = &quot;Seek&quot;;\n            seekButton.Click += new RoutedEventHandler(seekButton_Clicked);\n            seekPanel.Children.Add(seekButton);\n            Button seekAlignedToLastTickButton = new Button();\n            seekAlignedToLastTickButton.Content = &quot;Seek Aligned to Last Tick&quot;;\n            seekAlignedToLastTickButton.Click += new RoutedEventHandler(seekAlignedToLastTickButton_Clicked);\n            seekPanel.Children.Add(seekAlignedToLastTickButton);           \n            \n            myStackPanel.Children.Add(seekPanel);\n            \n            controlsContainer.Child = myStackPanel;\n            this.Blocks.Add(controlsContainer);\n            \n            myStoryboard.CurrentTimeInvalidated += new EventHandler(myStoryboard_CurrentTimeInvalidated);\n        }\n        \n        // Begins the storyboard.\n        private void beginButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            // Specifying &quot;true&quot; as the second Begin parameter\n            // makes this storyboard controllable.\n            myStoryboard.Begin(this, true);          \n        \n        }\n        \n        // Pauses the storyboard.\n        private void pauseButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.Pause(this);          \n        \n        }\n        \n        // Resumes the storyboard.\n        private void resumeButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.Resume(this);          \n        \n        }     \n        \n        // Advances the storyboard to its fill period.\n        private void skipToFillButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.SkipToFill(this);          \n        \n        } \n        \n        // Updates the storyboard&#39;s speed.\n        private void setSpeedRatioButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            // Makes the storyboard progress three times as fast as normal.\n            myStoryboard.SetSpeedRatio(this, 3);          \n        \n        }           \n        \n        // Stops the storyboard.\n        private void stopButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.Stop(this);          \n        \n        }         \n        \n        // Removes the storyboard.\n        private void removeButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.Remove(this);          \n        \n        }        \n        \n        private void seekButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            try {\n            \n\n                TimeSpan seekTime = TimeSpan.Parse(seekDestination.Text);\n                myStoryboard.Seek(this, seekTime, TimeSeekOrigin.BeginTime);\n                \n                // The rectangle width will probably not be at its new\n                // value when this call is made, because the storyboard&#39;s\n                // clock probably hasn&#39;t ticked yet.\n                rectangleWidthIndicator.Text = myRectangle.Width.ToString();\n            \n            }catch(FormatException ex)\n            {\n                MessageBox.Show(&quot;Invalid TimeSpan value.&quot;);\n                seekDestination.Focus();\n            }\n        }\n        \n        private void seekAlignedToLastTickButton_Clicked(object sender, RoutedEventArgs args)\n        {\n\n            try {\n            \n\n                TimeSpan seekTime = TimeSpan.Parse(seekDestination.Text);\n                myStoryboard.SeekAlignedToLastTick(this, seekTime, TimeSeekOrigin.BeginTime);\n                \n                // The rectangle width will be at its new\n                // value when this call is made, because SeekAlignedToLastTick \n                // operation immediately updates timeline and animation\n                // values.          \n                rectangleWidthIndicator.Text = myRectangle.Width.ToString();\n            \n            }catch(FormatException ex)\n            {\n                MessageBox.Show(&quot;Invalid TimeSpan value.&quot;);\n                seekDestination.Focus();\n            }    \n        }\n        \n        private void myStoryboard_CurrentTimeInvalidated(object sender, EventArgs e)\n        {\n        \n            currentTimeIndicator.Text = myStoryboard.GetCurrentTime(this).ToString();\n            \n        }\n        \n        \n        \n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"StoryboardBeginAnimation_procedural_snip#FrameworkContentElementSeekExampleUsingWholePage\">&#39;\n&#39;    This example shows how to control\n&#39;    a storyboard after it has started.\n&#39;\n&#39;\n\n\nImports System\nImports System.Windows\nImports System.Windows.Controls\nImports System.Windows.Media\nImports System.Windows.Shapes\nImports System.Windows.Media.Animation\nImports System.Windows.Documents\n\n\n\nNamespace Microsoft.Samples.Animation.AnimatingWithStoryboards\n\tPartial Public Class FrameworkContentElementSeekExample\n\t\tInherits FlowDocument\n\n\t\tPrivate myStoryboard As Storyboard\n\t\tPrivate currentTimeIndicator As TextBlock\n\t\tPrivate seekDestination As TextBox\n\t\tPrivate rectangleWidthIndicator As TextBlock\n\t\tPrivate myRectangle As Rectangle\n\n\t\tPublic Sub New()\n\n\t\t\t&#39; Create a name scope for the page.\n\t\t\tNameScope.SetNameScope(Me, New NameScope())\n\n\t\t\tMe.Background = Brushes.White\n\n\t\t\tDim controlsContainer As New BlockUIContainer()\n\n\t\t\tDim myStackPanel As New StackPanel()\n\t\t\tmyStackPanel.Margin = New Thickness(20)\n\n\t\t\t&#39; Create a rectangle.\n\t\t\tmyRectangle = New Rectangle()\n\t\t\tmyRectangle.Width = 100\n\t\t\tmyRectangle.Height = 20\n\t\t\tmyRectangle.Margin = New Thickness(12,0,0,5)\n\t\t\tmyRectangle.Fill = New SolidColorBrush(Color.FromArgb(170, 51, 51, 255))\n\t\t\tmyRectangle.HorizontalAlignment = HorizontalAlignment.Left\n\t\t\tmyStackPanel.Children.Add(myRectangle)\n\n\t\t\t&#39; Assign the rectangle a name by \n\t\t\t&#39; registering it with the page, so that\n\t\t\t&#39; it can be targeted by storyboard\n\t\t\t&#39; animations.\n\t\t\tMe.RegisterName(&quot;myRectangle&quot;, myRectangle)\n\n\t\t\t&#39;\n\t\t\t&#39; Create an animation and a storyboard to animate the\n\t\t\t&#39; rectangle.\n\t\t\t&#39;\n\t\t\tDim myDoubleAnimation As New DoubleAnimation(100, 500, New Duration(TimeSpan.FromSeconds(60)))\n\t\t\tStoryboard.SetTargetName(myDoubleAnimation, &quot;myRectangle&quot;)\n\t\t\tStoryboard.SetTargetProperty(myDoubleAnimation, New PropertyPath(Rectangle.WidthProperty))\n\t\t\tmyStoryboard = New Storyboard()\n\t\t\tmyStoryboard.Children.Add(myDoubleAnimation)\n\n\t\t\t&#39;\n\t\t\t&#39; Create some buttons to control the storyboard\n\t\t\t&#39; and a panel to contain them.\n\t\t\t&#39;\n\t\t\tDim buttonPanel As New StackPanel()\n\t\t\tDim beginButton As New Button()\n\t\t\tbeginButton.Content = &quot;Begin&quot;\n\t\t\tAddHandler beginButton.Click, AddressOf beginButton_Clicked\n\t\t\tbuttonPanel.Children.Add(beginButton)\n\t\t\tDim pauseButton As New Button()\n\t\t\tpauseButton.Content = &quot;Pause&quot;\n\t\t\tAddHandler pauseButton.Click, AddressOf pauseButton_Clicked\n\t\t\tbuttonPanel.Children.Add(pauseButton)\n\t\t\tDim resumeButton As New Button()\n\t\t\tresumeButton.Content = &quot;Resume&quot;\n\t\t\tAddHandler resumeButton.Click, AddressOf resumeButton_Clicked\n\t\t\tbuttonPanel.Children.Add(resumeButton)\n\t\t\tDim skipToFillButton As New Button()\n\t\t\tskipToFillButton.Content = &quot;Skip to Fill&quot;\n\t\t\tAddHandler skipToFillButton.Click, AddressOf skipToFillButton_Clicked\n\t\t\tbuttonPanel.Children.Add(skipToFillButton)\n\t\t\tDim setSpeedRatioButton As New Button()\n\t\t\tsetSpeedRatioButton.Content = &quot;Triple Speed&quot;\n\t\t\tAddHandler setSpeedRatioButton.Click, AddressOf setSpeedRatioButton_Clicked\n\t\t\tbuttonPanel.Children.Add(setSpeedRatioButton)\n\t\t\tDim stopButton As New Button()\n\t\t\tstopButton.Content = &quot;Stop&quot;\n\t\t\tAddHandler stopButton.Click, AddressOf stopButton_Clicked\n\t\t\tbuttonPanel.Children.Add(stopButton)\n\t\t\tDim removeButton As New Button()\n\t\t\tremoveButton.Content = &quot;Remove&quot;\n\t\t\tAddHandler removeButton.Click, AddressOf removeButton_Clicked\n\t\t\tbuttonPanel.Children.Add(removeButton)\n\n\t\t\tmyStackPanel.Children.Add(buttonPanel)\n\n\t\t\t&#39; Create some controls to display the\n\t\t\t&#39; storyboard&#39;s current time and the\n\t\t\t&#39; current width of the rectangle.\n\t\t\tDim seekPanel As New StackPanel()\n\t\t\tseekPanel.Margin = New Thickness(10)\n\t\t\tDim aPanel As New StackPanel()\n\t\t\tDim aLabel As New Label()\n\t\t\taPanel.Orientation = Orientation.Horizontal\n\t\t\taLabel.Content = &quot;Current Time: &quot;\n\t\t\taPanel.Children.Add(aLabel)\n\t\t\tcurrentTimeIndicator = New TextBlock()\n\t\t\taPanel.Children.Add(currentTimeIndicator)\n\t\t\tseekPanel.Children.Add(aPanel)\n\n\t\t\taPanel = New StackPanel()\n\t\t\taPanel.Orientation = Orientation.Horizontal\n\t\t\taLabel = New Label()\n\t\t\taLabel.Content = &quot;Rectangle Width: &quot;\n\t\t\taPanel.Children.Add(aLabel)\n\t\t\trectangleWidthIndicator = New TextBlock()\n\t\t\trectangleWidthIndicator.Text = myRectangle.Width.ToString()\n\t\t\taPanel.Children.Add(rectangleWidthIndicator)\n\t\t\tseekPanel.Children.Add(aPanel)\n\n\n\t\t\t&#39; Create some controls to enable the\n\t\t\t&#39; user to specify a seek position.\n\n\t\t\taPanel = New StackPanel()\n\t\t\taPanel.Orientation = Orientation.Horizontal\n\t\t\taLabel = New Label()\n\t\t\taLabel.Content = &quot;Seek Offset: &quot;\n\t\t\taPanel.Children.Add(aLabel)\n\t\t\tseekDestination = New TextBox()\n\t\t\tseekDestination.Text = &quot;0&quot;\n\t\t\taPanel.Children.Add(seekDestination)\n\t\t\tseekPanel.Children.Add(aPanel)\n\n\n\t\t\tDim seekButton As New Button()\n\t\t\tseekButton.Content = &quot;Seek&quot;\n\t\t\tAddHandler seekButton.Click, AddressOf seekButton_Clicked\n\t\t\tseekPanel.Children.Add(seekButton)\n\t\t\tDim seekAlignedToLastTickButton As New Button()\n\t\t\tseekAlignedToLastTickButton.Content = &quot;Seek Aligned to Last Tick&quot;\n\t\t\tAddHandler seekAlignedToLastTickButton.Click, AddressOf seekAlignedToLastTickButton_Clicked\n\t\t\tseekPanel.Children.Add(seekAlignedToLastTickButton)\n\n\t\t\tmyStackPanel.Children.Add(seekPanel)\n\n\t\t\tcontrolsContainer.Child = myStackPanel\n\t\t\tMe.Blocks.Add(controlsContainer)\n\n\t\t\tAddHandler myStoryboard.CurrentTimeInvalidated, AddressOf myStoryboard_CurrentTimeInvalidated\n\t\tEnd Sub\n\n\t\t&#39; Begins the storyboard.\n\t\tPrivate Sub beginButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t&#39; Specifying &quot;true&quot; as the second Begin parameter\n\t\t\t&#39; makes this storyboard controllable.\n\t\t\tmyStoryboard.Begin(Me, True)\n\n\t\tEnd Sub\n\n\t\t&#39; Pauses the storyboard.\n\t\tPrivate Sub pauseButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.Pause(Me)\n\n\t\tEnd Sub\n\n\t\t&#39; Resumes the storyboard.\n\t\tPrivate Sub resumeButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.Resume(Me)\n\n\t\tEnd Sub\n\n\t\t&#39; Advances the storyboard to its fill period.\n\t\tPrivate Sub skipToFillButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.SkipToFill(Me)\n\n\t\tEnd Sub\n\n\t\t&#39; Updates the storyboard&#39;s speed.\n\t\tPrivate Sub setSpeedRatioButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t&#39; Makes the storyboard progress three times as fast as normal.\n\t\t\tmyStoryboard.SetSpeedRatio(Me, 3)\n\n\t\tEnd Sub\n\n\t\t&#39; Stops the storyboard.\n\t\tPrivate Sub stopButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.Stop(Me)\n\n\t\tEnd Sub\n\n\t\t&#39; Removes the storyboard.\n\t\tPrivate Sub removeButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.Remove(Me)\n\n\t\tEnd Sub\n\n\t\tPrivate Sub seekButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\tTry\n\n\n\t\t\t\tDim seekTime As TimeSpan = TimeSpan.Parse(seekDestination.Text)\n\t\t\t\tmyStoryboard.Seek(Me, seekTime, TimeSeekOrigin.BeginTime)\n\n\t\t\t\t&#39; The rectangle width will probably not be at its new\n\t\t\t\t&#39; value when this call is made, because the storyboard&#39;s\n\t\t\t\t&#39; clock probably hasn&#39;t ticked yet.\n\t\t\t\trectangleWidthIndicator.Text = myRectangle.Width.ToString()\n\n\t\t\tCatch ex As FormatException\n\t\t\t\tMessageBox.Show(&quot;Invalid TimeSpan value.&quot;)\n\t\t\t\tseekDestination.Focus()\n\t\t\tEnd Try\n\t\tEnd Sub\n\n\t\tPrivate Sub seekAlignedToLastTickButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\n\t\t\tTry\n\n\n\t\t\t\tDim seekTime As TimeSpan = TimeSpan.Parse(seekDestination.Text)\n\t\t\t\tmyStoryboard.SeekAlignedToLastTick(Me, seekTime, TimeSeekOrigin.BeginTime)\n\n\t\t\t\t&#39; The rectangle width will be at its new\n\t\t\t\t&#39; value when this call is made, because SeekAlignedToLastTick \n\t\t\t\t&#39; operation immediately updates timeline and animation\n\t\t\t\t&#39; values.          \n\t\t\t\trectangleWidthIndicator.Text = myRectangle.Width.ToString()\n\n\t\t\tCatch ex As FormatException\n\t\t\t\tMessageBox.Show(&quot;Invalid TimeSpan value.&quot;)\n\t\t\t\tseekDestination.Focus()\n\t\t\tEnd Try\n\t\tEnd Sub\n\n\t\tPrivate Sub myStoryboard_CurrentTimeInvalidated(ByVal sender As Object, ByVal e As EventArgs)\n\n\t\t\tcurrentTimeIndicator.Text = myStoryboard.GetCurrentTime(Me).ToString()\n\n\t\tEnd Sub\n\n\n\n\tEnd Class\nEnd Namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_SeekAlignedToLastTick_System_Windows_FrameworkElement_System_TimeSpan_System_Windows_Media_Animation_TimeSeekOrigin_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_SeekAlignedToLastTick_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SeekAlignedToLastTick(FrameworkElement,TimeSpan,TimeSeekOrigin)</div>        \r\n          </div>\r\n    \r\n            <p>Seeks this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> to a new position immediately (synchronously).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SeekAlignedToLastTick (System.Windows.FrameworkElement containingObject, TimeSpan offset, System.Windows.Media.Animation.TimeSeekOrigin origin);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>containingObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object specified when the <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)</span> method was called. This object contains the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> objects that were created for this storyboard and its children.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A positive or negative value that describes the amount by which the timeline should move forward or backward from the specified <code>origin</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>origin</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.animation.timeseekorigin\" data-linktype=\"relative-path\">TimeSeekOrigin</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position from which <code>offset</code> is applied.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_SeekAlignedToLastTick_\" data-linktype=\"relative-path\">SeekAlignedToLastTick</a> aligns the seeked time of the <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a> with the last clock tick. Values are immediately updated to reflect the changes due to <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_SeekAlignedToLastTick_\" data-linktype=\"relative-path\">SeekAlignedToLastTick</a>, even though the screen does not reflect these changes until the screen updates.  </p>\n<p> Note that seek operations do not take the storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_SpeedRatio_\" data-linktype=\"relative-path\">SpeedRatio</a> or <a class=\"xref\" href=\"system.windows.media.animation.paralleltimeline#System_Windows_Media_Animation_ParallelTimeline_SlipBehavior_\" data-linktype=\"relative-path\">SlipBehavior</a> settings into account. The storyboard is treated as though it has a <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_SpeedRatio_\" data-linktype=\"relative-path\">SpeedRatio</a> of 1 and no <a class=\"xref\" href=\"system.windows.media.animation.paralleltimeline#System_Windows_Media_Animation_ParallelTimeline_SlipBehavior_\" data-linktype=\"relative-path\">SlipBehavior</a>.  </p>\n<p> This method changes the storyboard clock&#39;s <a class=\"xref\" href=\"system.windows.media.animation.clock#System_Windows_Media_Animation_Clock_CurrentState_\" data-linktype=\"relative-path\">CurrentState</a> to  </p>\n<p> <a class=\"xref\" href=\"system.windows.media.animation.clockstate\" data-linktype=\"relative-path\">ClockState</a>.  </p>\n<p> Seeking a storyboard triggers the <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_CurrentGlobalSpeedInvalidated\" data-linktype=\"relative-path\">CurrentGlobalSpeedInvalidated</a> and <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_CurrentStateInvalidated\" data-linktype=\"relative-path\">CurrentStateInvalidated</a> events.  </p>\n<p> To interactively control this storyboard, you must use the same <code>containingObject</code> parameter when calling the interactive methods that you used to begin the storyboard. A controllable storyboard can pause, resume, seek, stop, and be removed. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method and specify <code>true</code> to make it controllable. For an example, see <a href=\"../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md\" data-linktype=\"relative-path\">How to: Control a Storyboard After It Starts</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows both the <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Seek_\" data-linktype=\"relative-path\">Seek</a> and SeekAlignedToLastTick methods.  </p>\n<pre><code class=\"lang-vb\" name=\"StoryboardBeginAnimation_procedural_snip#SeekExampleUsingWholePage\">&#39;\n&#39;    This example shows how to seek a storyboard.\n&#39;\n&#39;\n\n\nImports System\nImports System.Windows\nImports System.Windows.Controls\nImports System.Windows.Media\nImports System.Windows.Shapes\nImports System.Windows.Media.Animation\n\n\n\nNamespace Microsoft.Samples.Animation.AnimatingWithStoryboards\n\tPartial Public Class SeekExample\n\t\tInherits Page\n\n\t\tPrivate myStoryboard As Storyboard\n\t\tPrivate currentTimeIndicator As TextBlock\n\t\tPrivate seekDestination As TextBox\n\t\tPrivate rectangleWidthIndicator As TextBlock\n\t\tPrivate myRectangle As Rectangle\n\n\t\tPublic Sub New()\n\n\t\t\t&#39; Create a name scope for the page.\n\t\t\tNameScope.SetNameScope(Me, New NameScope())\n\n\t\t\tMe.WindowTitle = &quot;Controlling a Storyboard&quot;\n\t\t\tMe.Background = Brushes.White\n\n\t\t\tDim myStackPanel As New StackPanel()\n\t\t\tmyStackPanel.Margin = New Thickness(20)\n\n\t\t\t&#39; Create a rectangle.\n            myRectangle = New Rectangle()\n            With myRectangle\n                .Width = 100\n                .Height = 20\n                .Margin = New Thickness(12, 0, 0, 5)\n                .Fill = New SolidColorBrush(Color.FromArgb(170, 51, 51, 255))\n                .HorizontalAlignment = HorizontalAlignment.Left\n            End With\n            myStackPanel.Children.Add(myRectangle)\n\n            &#39; Assign the rectangle a name by \n            &#39; registering it with the page, so that\n            &#39; it can be targeted by storyboard\n            &#39; animations.\n            Me.RegisterName(&quot;myRectangle&quot;, myRectangle)\n\n            &#39;\n            &#39; Create an animation and a storyboard to animate the\n            &#39; rectangle.\n            &#39;\n            Dim myDoubleAnimation As New DoubleAnimation(100, 500, New Duration(TimeSpan.FromSeconds(60)))\n            Storyboard.SetTargetName(myDoubleAnimation, &quot;myRectangle&quot;)\n            Storyboard.SetTargetProperty(myDoubleAnimation, New PropertyPath(Rectangle.WidthProperty))\n            myStoryboard = New Storyboard()\n            myStoryboard.Children.Add(myDoubleAnimation)\n\n            &#39;\n            &#39; Create some buttons to control the storyboard\n            &#39; and a panel to contain them.\n            &#39;\n            Dim buttonPanel As New StackPanel()\n            buttonPanel.Orientation = Orientation.Horizontal\n            Dim beginButton As New Button()\n            beginButton.Content = &quot;Begin&quot;\n            AddHandler beginButton.Click, AddressOf beginButton_Clicked\n            buttonPanel.Children.Add(beginButton)\n            Dim pauseButton As New Button()\n            pauseButton.Content = &quot;Pause&quot;\n            AddHandler pauseButton.Click, AddressOf pauseButton_Clicked\n            buttonPanel.Children.Add(pauseButton)\n            Dim resumeButton As New Button()\n            resumeButton.Content = &quot;Resume&quot;\n            AddHandler resumeButton.Click, AddressOf resumeButton_Clicked\n            buttonPanel.Children.Add(resumeButton)\n            Dim skipToFillButton As New Button()\n            skipToFillButton.Content = &quot;Skip to Fill&quot;\n            AddHandler skipToFillButton.Click, AddressOf skipToFillButton_Clicked\n            buttonPanel.Children.Add(skipToFillButton)\n            Dim setSpeedRatioButton As New Button()\n            setSpeedRatioButton.Content = &quot;Triple Speed&quot;\n            AddHandler setSpeedRatioButton.Click, AddressOf setSpeedRatioButton_Clicked\n            buttonPanel.Children.Add(setSpeedRatioButton)\n            Dim stopButton As New Button()\n            stopButton.Content = &quot;Stop&quot;\n            AddHandler stopButton.Click, AddressOf stopButton_Clicked\n            buttonPanel.Children.Add(stopButton)\n            Dim removeButton As New Button()\n            removeButton.Content = &quot;Remove&quot;\n            AddHandler removeButton.Click, AddressOf removeButton_Clicked\n            buttonPanel.Children.Add(removeButton)\n\n            myStackPanel.Children.Add(buttonPanel)\n\n            &#39; Create some controls to display the\n            &#39; storyboard&#39;s current time and the\n            &#39; current width of the rectangle.\n            Dim seekPanel As New StackPanel()\n            seekPanel.Margin = New Thickness(10)\n            Dim aPanel As New StackPanel()\n            Dim aLabel As New Label()\n            aPanel.Orientation = Orientation.Horizontal\n            aLabel.Content = &quot;Current Time: &quot;\n            aPanel.Children.Add(aLabel)\n            currentTimeIndicator = New TextBlock()\n            aPanel.Children.Add(currentTimeIndicator)\n            seekPanel.Children.Add(aPanel)\n\n            aPanel = New StackPanel()\n            aPanel.Orientation = Orientation.Horizontal\n            aLabel = New Label()\n            aLabel.Content = &quot;Rectangle Width: &quot;\n            aPanel.Children.Add(aLabel)\n            rectangleWidthIndicator = New TextBlock()\n            rectangleWidthIndicator.Text = myRectangle.Width.ToString()\n            aPanel.Children.Add(rectangleWidthIndicator)\n            seekPanel.Children.Add(aPanel)\n\n\n            &#39; Create some controls to enable the\n            &#39; user to specify a seek position.\n\n            aPanel = New StackPanel()\n            aPanel.Orientation = Orientation.Horizontal\n            aLabel = New Label()\n            aLabel.Content = &quot;Seek Offset: &quot;\n            aPanel.Children.Add(aLabel)\n            seekDestination = New TextBox()\n            seekDestination.Text = &quot;0&quot;\n            aPanel.Children.Add(seekDestination)\n            seekPanel.Children.Add(aPanel)\n\n\n            Dim seekButton As New Button()\n            seekButton.Content = &quot;Seek&quot;\n            AddHandler seekButton.Click, AddressOf seekButton_Clicked\n            seekPanel.Children.Add(seekButton)\n            Dim seekAlignedToLastTickButton As New Button()\n            seekAlignedToLastTickButton.Content = &quot;Seek Aligned to Last Tick&quot;\n            AddHandler seekAlignedToLastTickButton.Click, AddressOf seekAlignedToLastTickButton_Clicked\n            seekPanel.Children.Add(seekAlignedToLastTickButton)\n\n            myStackPanel.Children.Add(seekPanel)\n\n            Me.Content = myStackPanel\n\n            AddHandler myStoryboard.CurrentTimeInvalidated, AddressOf myStoryboard_CurrentTimeInvalidated\n\t\tEnd Sub\n\n\t\t&#39; Begins the storyboard.\n\t\tPrivate Sub beginButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t&#39; Specifying &quot;true&quot; as the second Begin parameter\n\t\t\t&#39; makes this storyboard controllable.\n\t\t\tmyStoryboard.Begin(Me, True)\n\n\t\tEnd Sub\n\n\t\t&#39; Pauses the storyboard.\n\t\tPrivate Sub pauseButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.Pause(Me)\n\n\t\tEnd Sub\n\n\t\t&#39; Resumes the storyboard.\n\t\tPrivate Sub resumeButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.Resume(Me)\n\n\t\tEnd Sub\n\n\t\t&#39; Advances the storyboard to its fill period.\n\t\tPrivate Sub skipToFillButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.SkipToFill(Me)\n\n\t\tEnd Sub\n\n\t\t&#39; Updates the storyboard&#39;s speed.\n\t\tPrivate Sub setSpeedRatioButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t&#39; Makes the storyboard progress three times as fast as normal.\n\t\t\tmyStoryboard.SetSpeedRatio(Me, 3)\n\n\t\tEnd Sub\n\n\t\t&#39; Stops the storyboard.\n\t\tPrivate Sub stopButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.Stop(Me)\n\n\t\tEnd Sub\n\n\t\t&#39; Removes the storyboard.\n\t\tPrivate Sub removeButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.Remove(Me)\n\n\t\tEnd Sub\n\n\t\tPrivate Sub seekButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\tTry\n\n\t\t\t\t&#39; The rectangle width will probably not be at its new\n\t\t\t\t&#39; value when this call is made, because the storyboard&#39;s\n\t\t\t\t&#39; clock probably hasn&#39;t ticked yet.\n\t\t\t\tDim seekTime As TimeSpan = TimeSpan.Parse(seekDestination.Text)\n\t\t\t\tmyStoryboard.Seek(Me, seekTime, TimeSeekOrigin.BeginTime)\n\t\t\t\trectangleWidthIndicator.Text = myRectangle.Width.ToString()\n\n\t\t\tCatch ex As FormatException\n\t\t\t\tMessageBox.Show(&quot;Invalid TimeSpan value.&quot;)\n\t\t\t\tseekDestination.Focus()\n\t\t\tEnd Try\n\t\tEnd Sub\n\n\t\tPrivate Sub seekAlignedToLastTickButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\n\t\t\tTry\n\n\t\t\t\t&#39; The rectangle width will be at its new\n\t\t\t\t&#39; value when this call is made, because SeekAlignedToLastTick \n\t\t\t\t&#39; operation immediately updates timeline and animation\n\t\t\t\t&#39; values.        \n\t\t\t\tDim seekTime As TimeSpan = TimeSpan.Parse(seekDestination.Text)\n\t\t\t\tmyStoryboard.SeekAlignedToLastTick(Me, seekTime, TimeSeekOrigin.BeginTime)\n\t\t\t\trectangleWidthIndicator.Text = myRectangle.Width.ToString()\n\n\t\t\tCatch ex As FormatException\n\t\t\t\tMessageBox.Show(&quot;Invalid TimeSpan value.&quot;)\n\t\t\t\tseekDestination.Focus()\n\t\t\tEnd Try\n\t\tEnd Sub\n\n\t\tPrivate Sub myStoryboard_CurrentTimeInvalidated(ByVal sender As Object, ByVal e As EventArgs)\n\n\t\t\tcurrentTimeIndicator.Text = myStoryboard.GetCurrentTime(Me).ToString()\n\n\t\tEnd Sub\n\n\n\n\tEnd Class\nEnd Namespace\n</code></pre><pre><code class=\"lang-cs\" name=\"StoryboardBeginAnimation_procedural_snip#SeekExampleUsingWholePage\">/*\n    This example shows how to seek a storyboard.\n\n*/\n\nusing System;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Media;\nusing System.Windows.Shapes;\nusing System.Windows.Media.Animation;\n\n\n\nnamespace Microsoft.Samples.Animation.AnimatingWithStoryboards\n{\n    public partial class SeekExample : Page\n    {\n    \n        private Storyboard myStoryboard;\n        private TextBlock currentTimeIndicator;\n        private TextBox seekDestination;\n        private TextBlock rectangleWidthIndicator;\n        private Rectangle myRectangle;\n        \n        public SeekExample()\n        {\n        \n            // Create a name scope for the page.\n            NameScope.SetNameScope(this, new NameScope());        \n        \n            this.WindowTitle = &quot;Controlling a Storyboard&quot;;\n            this.Background = Brushes.White;\n\n            StackPanel myStackPanel = new StackPanel();\n            myStackPanel.Margin = new Thickness(20);\n            \n            // Create a rectangle.\n            myRectangle = new Rectangle();\n            myRectangle.Width = 100;\n            myRectangle.Height = 20;\n            myRectangle.Margin = new Thickness(12,0,0,5);\n            myRectangle.Fill = new SolidColorBrush(Color.FromArgb(170, 51, 51, 255));\n            myRectangle.HorizontalAlignment = HorizontalAlignment.Left;\n            myStackPanel.Children.Add(myRectangle);\n            \n            // Assign the rectangle a name by \n            // registering it with the page, so that\n            // it can be targeted by storyboard\n            // animations.\n            this.RegisterName(&quot;myRectangle&quot;, myRectangle);           \n            \n            //\n            // Create an animation and a storyboard to animate the\n            // rectangle.\n            //\n            DoubleAnimation myDoubleAnimation = \n                new DoubleAnimation(100, 500, new Duration(TimeSpan.FromSeconds(60)));            \n            Storyboard.SetTargetName(myDoubleAnimation, &quot;myRectangle&quot;);\n            Storyboard.SetTargetProperty(myDoubleAnimation, new PropertyPath(Rectangle.WidthProperty));\n            myStoryboard = new Storyboard();\n            myStoryboard.Children.Add(myDoubleAnimation);\n            \n            //\n            // Create some buttons to control the storyboard\n            // and a panel to contain them.\n            //\n            StackPanel buttonPanel = new StackPanel();\n            buttonPanel.Orientation = Orientation.Horizontal;\n            Button beginButton = new Button();\n            beginButton.Content = &quot;Begin&quot;;\n            beginButton.Click += new RoutedEventHandler(beginButton_Clicked);            \n            buttonPanel.Children.Add(beginButton);\n            Button pauseButton = new Button();\n            pauseButton.Content = &quot;Pause&quot;;\n            pauseButton.Click +=new RoutedEventHandler(pauseButton_Clicked);\n            buttonPanel.Children.Add(pauseButton);\n            Button resumeButton = new Button();\n            resumeButton.Content = &quot;Resume&quot;;\n            resumeButton.Click +=new RoutedEventHandler(resumeButton_Clicked);\n            buttonPanel.Children.Add(resumeButton);\n            Button skipToFillButton = new Button();\n            skipToFillButton.Content = &quot;Skip to Fill&quot;;\n            skipToFillButton.Click +=new RoutedEventHandler(skipToFillButton_Clicked);\n            buttonPanel.Children.Add(skipToFillButton);\n            Button setSpeedRatioButton = new Button();\n            setSpeedRatioButton.Content = &quot;Triple Speed&quot;;\n            setSpeedRatioButton.Click +=new RoutedEventHandler(setSpeedRatioButton_Clicked);\n            buttonPanel.Children.Add(setSpeedRatioButton);\n            Button stopButton = new Button();\n            stopButton.Content = &quot;Stop&quot;;\n            stopButton.Click +=new RoutedEventHandler(stopButton_Clicked);\n            buttonPanel.Children.Add(stopButton);\n            Button removeButton = new Button();\n            removeButton.Content = &quot;Remove&quot;;\n            removeButton.Click +=new RoutedEventHandler(removeButton_Clicked);\n            buttonPanel.Children.Add(removeButton);            \n            \n            myStackPanel.Children.Add(buttonPanel);    \n            \n            // Create some controls to display the\n            // storyboard&#39;s current time and the\n            // current width of the rectangle.\n            StackPanel seekPanel = new StackPanel();\n            seekPanel.Margin = new Thickness(10);\n            StackPanel aPanel = new StackPanel();\n            Label aLabel = new Label();\n            aPanel.Orientation = Orientation.Horizontal;\n            aLabel.Content = &quot;Current Time: &quot;;\n            aPanel.Children.Add(aLabel);\n            currentTimeIndicator = new TextBlock();\n            aPanel.Children.Add(currentTimeIndicator);\n            seekPanel.Children.Add(aPanel);\n            \n            aPanel = new StackPanel();\n            aPanel.Orientation = Orientation.Horizontal;\n            aLabel = new Label();\n            aLabel.Content = &quot;Rectangle Width: &quot;;\n            aPanel.Children.Add(aLabel);\n            rectangleWidthIndicator = new TextBlock();\n            rectangleWidthIndicator.Text = myRectangle.Width.ToString(); \n            aPanel.Children.Add(rectangleWidthIndicator);\n            seekPanel.Children.Add(aPanel);\n            \n            \n            // Create some controls to enable the\n            // user to specify a seek position.\n            \n            aPanel = new StackPanel();\n            aPanel.Orientation = Orientation.Horizontal;\n            aLabel = new Label();\n            aLabel.Content = &quot;Seek Offset: &quot; ;\n            aPanel.Children.Add(aLabel);\n            seekDestination = new TextBox();\n            seekDestination.Text = &quot;0&quot;;\n            aPanel.Children.Add(seekDestination);       \n            seekPanel.Children.Add(aPanel);\n            \n            \n            Button seekButton = new Button();\n            seekButton.Content = &quot;Seek&quot;;\n            seekButton.Click += new RoutedEventHandler(seekButton_Clicked);\n            seekPanel.Children.Add(seekButton);\n            Button seekAlignedToLastTickButton = new Button();\n            seekAlignedToLastTickButton.Content = &quot;Seek Aligned to Last Tick&quot;;\n            seekAlignedToLastTickButton.Click += new RoutedEventHandler(seekAlignedToLastTickButton_Clicked);\n            seekPanel.Children.Add(seekAlignedToLastTickButton);           \n            \n            myStackPanel.Children.Add(seekPanel);\n            \n            this.Content = myStackPanel;   \n            \n            myStoryboard.CurrentTimeInvalidated += new EventHandler(myStoryboard_CurrentTimeInvalidated);\n        }\n        \n        // Begins the storyboard.\n        private void beginButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            // Specifying &quot;true&quot; as the second Begin parameter\n            // makes this storyboard controllable.\n            myStoryboard.Begin(this, true);          \n        \n        }\n        \n        // Pauses the storyboard.\n        private void pauseButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.Pause(this);          \n        \n        }\n        \n        // Resumes the storyboard.\n        private void resumeButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.Resume(this);          \n        \n        }     \n        \n        // Advances the storyboard to its fill period.\n        private void skipToFillButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.SkipToFill(this);          \n        \n        } \n        \n        // Updates the storyboard&#39;s speed.\n        private void setSpeedRatioButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            // Makes the storyboard progress three times as fast as normal.\n            myStoryboard.SetSpeedRatio(this, 3);          \n        \n        }           \n        \n        // Stops the storyboard.\n        private void stopButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.Stop(this);          \n        \n        }         \n        \n        // Removes the storyboard.\n        private void removeButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.Remove(this);          \n        \n        }        \n        \n        private void seekButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            try {\n            \n                // The rectangle width will probably not be at its new\n                // value when this call is made, because the storyboard&#39;s\n                // clock probably hasn&#39;t ticked yet.\n                TimeSpan seekTime = TimeSpan.Parse(seekDestination.Text);\n                myStoryboard.Seek(this, seekTime, TimeSeekOrigin.BeginTime);\n                rectangleWidthIndicator.Text = myRectangle.Width.ToString();\n            \n            }catch(FormatException ex)\n            {\n                MessageBox.Show(&quot;Invalid TimeSpan value.&quot;);\n                seekDestination.Focus();\n            }\n        }\n        \n        private void seekAlignedToLastTickButton_Clicked(object sender, RoutedEventArgs args)\n        {\n\n            try {\n            \n                // The rectangle width will be at its new\n                // value when this call is made, because SeekAlignedToLastTick \n                // operation immediately updates timeline and animation\n                // values.        \n                TimeSpan seekTime = TimeSpan.Parse(seekDestination.Text);\n                myStoryboard.SeekAlignedToLastTick(this, seekTime, TimeSeekOrigin.BeginTime);\n                rectangleWidthIndicator.Text = myRectangle.Width.ToString();\n            \n            }catch(FormatException ex)\n            {\n                MessageBox.Show(&quot;Invalid TimeSpan value.&quot;);\n                seekDestination.Focus();\n            }    \n        }\n        \n        private void myStoryboard_CurrentTimeInvalidated(object sender, EventArgs e)\n        {\n        \n            currentTimeIndicator.Text = myStoryboard.GetCurrentTime(this).ToString();\n            \n        }\n        \n        \n        \n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_SetSpeedRatio_System_Double_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_SetSpeedRatio_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetSpeedRatio(Double)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the interactive speed ratio for the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetSpeedRatio (double speedRatio);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>speedRatio</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A finite value greater than zero that is the new interactive speed ratio of the storyboard. This value is multiplied against the storyboard&#39;s <span class=\"xref\">stem.Windows.Media.Animation.Timeline.SpeedRatio*</span> value to determine the storyboard&#39;s effective speed. This value does not overwrite the storyboard&#39;s <span class=\"xref\">stem.Windows.Media.Animation.Timeline.SpeedRatio*</span> property. For example, calling this method and specifying an interactive speed ratio of 3 on a storyboard with a <span class=\"xref\">stem.Windows.Media.Animation.Timeline.SpeedRatio*</span> of 0.5 gives the storyboard an effective speed of 1.5.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A controllable storyboard can pause, resume, seek, stop, and be removed. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method and specify <code>true</code> to make it controllable. For an example, see <a href=\"../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md\" data-linktype=\"relative-path\">How to: Control a Storyboard After It Starts</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_SetSpeedRatio_System_Windows_FrameworkContentElement_System_Double_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_SetSpeedRatio_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetSpeedRatio(FrameworkContentElement,Double)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the interactive speed ratio of the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetSpeedRatio (System.Windows.FrameworkContentElement containingObject, double speedRatio);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>containingObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.frameworkcontentelement\" data-linktype=\"relative-path\">FrameworkContentElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object specified when the <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.Begin*</span> method was called. This object contains the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> objects that were created for this storyboard and its children.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>speedRatio</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A finite value greater than zero that is the new interactive speed ratio of the storyboard. This value is multiplied against the storyboard&#39;s <span class=\"xref\">stem.Windows.Media.Animation.Timeline.SpeedRatio*</span> value to determine the storyboard&#39;s effective speed. This value does not overwrite the storyboard&#39;s <span class=\"xref\">stem.Windows.Media.Animation.Timeline.SpeedRatio*</span> property. For example, calling this method and specifying an interactive speed ratio of 3 on a storyboard with a <span class=\"xref\">stem.Windows.Media.Animation.Timeline.SpeedRatio*</span> of 0.5 gives the storyboard an effective speed of 1.5.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To interactively control this storyboard, you must use the same <code>containingObject</code> parameter when calling the interactive methods that you used to begin the storyboard. A controllable storyboard can pause, resume, seek, stop, and be removed. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method and specify <code>true</code> to make it controllable. For an example, see <a href=\"../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md\" data-linktype=\"relative-path\">How to: Control a Storyboard After It Starts</a>.  </p>\n<p> Calling this method triggers the <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_CurrentGlobalSpeedInvalidated\" data-linktype=\"relative-path\">CurrentGlobalSpeedInvalidated</a> event.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses a controllable storyboard to animate a <a class=\"xref\" href=\"system.windows.media.texteffect\" data-linktype=\"relative-path\">TextEffect</a>. The <a class=\"xref\" href=\"system.windows.media.texteffect\" data-linktype=\"relative-path\">TextEffect</a> is contained within a <a class=\"xref\" href=\"system.windows.frameworkcontentelement\" data-linktype=\"relative-path\">FrameworkContentElement</a>&#39;s name scope.  </p>\n<pre><code class=\"lang-cs\" name=\"StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage\">/*\n    This example shows how to control\n    a storyboard after it has started.\n\n*/\n\nusing System;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Media;\nusing System.Windows.Shapes;\nusing System.Windows.Media.Animation;\nusing System.Windows.Documents;\n\n\nnamespace Microsoft.Samples.Animation.AnimatingWithStoryboards\n{\n    public class FrameworkContentElementControlStoryboardExample : FlowDocument\n    {\n    \n        private Storyboard myStoryboard;\n        \n        public FrameworkContentElementControlStoryboardExample()\n        {\n        \n            // Create a name scope for the document.\n            NameScope.SetNameScope(this, new NameScope());        \n            this.Background = Brushes.White;\n            \n            // Create a run of text.\n            Run theText = new Run( \n                &quot;Lorem ipsum dolor sit amet, consectetuer adipiscing elit.&quot; + \n                &quot;Ut non lacus. Nullam a ligula id leo adipiscing ornare.&quot; +\n                &quot; Duis mattis. &quot;);   \n                \n            // Create a TextEffect\n            TextEffect animatedSpecialEffect = new TextEffect();\n            animatedSpecialEffect.Foreground = Brushes.OrangeRed;\n            animatedSpecialEffect.PositionStart = 0;\n            animatedSpecialEffect.PositionCount = 0;\n            \n            // Assign the TextEffect a name by \n            // registering it with the page, so that\n            // it can be targeted by storyboard\n            // animations            \n            this.RegisterName(&quot;animatedSpecialEffect&quot;, animatedSpecialEffect);  \n            \n            // Apply the text effect to the run.\n            theText.TextEffects = new TextEffectCollection();\n            theText.TextEffects.Add(animatedSpecialEffect);\n            \n            // Create a paragraph to contain the run.\n            Paragraph animatedParagraph = new Paragraph(theText);\n            animatedParagraph.Background = Brushes.LightGray;\n            animatedParagraph.Padding = new Thickness(20);\n   \n            this.Blocks.Add(animatedParagraph);            \n            BlockUIContainer controlsContainer = new BlockUIContainer();                \n            \n            //\n            // Create an animation and a storyboard to animate the\n            // text effect.\n            //\n            Int32Animation countAnimation = \n                new Int32Animation(0, 127, TimeSpan.FromSeconds(10)); \n            Storyboard.SetTargetName(countAnimation, &quot;animatedSpecialEffect&quot;);\n            Storyboard.SetTargetProperty(countAnimation, \n                new PropertyPath(TextEffect.PositionCountProperty));\n            myStoryboard = new Storyboard();\n            myStoryboard.Children.Add(countAnimation);\n            \n            //\n            // Create some buttons to control the storyboard\n            // and a panel to contain them.\n            //\n            StackPanel buttonPanel = new StackPanel();\n            buttonPanel.Orientation = Orientation.Vertical;\n            Button beginButton = new Button();\n            beginButton.Content = &quot;Begin&quot;;\n            beginButton.Click += new RoutedEventHandler(beginButton_Clicked);            \n            buttonPanel.Children.Add(beginButton);\n            Button pauseButton = new Button();\n            pauseButton.Content = &quot;Pause&quot;;\n            pauseButton.Click +=new RoutedEventHandler(pauseButton_Clicked);\n            buttonPanel.Children.Add(pauseButton);\n            Button resumeButton = new Button();\n            resumeButton.Content = &quot;Resume&quot;;\n            resumeButton.Click +=new RoutedEventHandler(resumeButton_Clicked);\n            buttonPanel.Children.Add(resumeButton);\n            Button skipToFillButton = new Button();\n            skipToFillButton.Content = &quot;Skip to Fill&quot;;\n            skipToFillButton.Click +=new RoutedEventHandler(skipToFillButton_Clicked);\n            buttonPanel.Children.Add(skipToFillButton);\n            Button setSpeedRatioButton = new Button();\n            setSpeedRatioButton.Content = &quot;Triple Speed&quot;;\n            setSpeedRatioButton.Click +=new RoutedEventHandler(setSpeedRatioButton_Clicked);\n            buttonPanel.Children.Add(setSpeedRatioButton);\n            Button stopButton = new Button();\n            stopButton.Content = &quot;Stop&quot;;\n            stopButton.Click +=new RoutedEventHandler(stopButton_Clicked);\n            buttonPanel.Children.Add(stopButton);\n            Button removeButton = new Button();\n            removeButton.Content = &quot;Remove&quot;;\n            removeButton.Click +=new RoutedEventHandler(removeButton_Clicked);\n            buttonPanel.Children.Add(removeButton); \n   \n            controlsContainer.Child = buttonPanel; \n            this.Blocks.Add(controlsContainer);\n            \n        }\n        \n        // Begins the storyboard.\n        private void beginButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            // Specifying &quot;true&quot; as the second Begin parameter\n            // makes this storyboard controllable.\n            myStoryboard.Begin(this, true);          \n        \n        }\n        \n        // Pauses the storyboard.\n        private void pauseButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.Pause(this);          \n        \n        }\n        \n        // Resumes the storyboard.\n        private void resumeButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.Resume(this);          \n        \n        }     \n        \n        // Advances the storyboard to its fill period.\n        private void skipToFillButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.SkipToFill(this);          \n        \n        } \n        \n        // Updates the storyboard&#39;s speed.\n        private void setSpeedRatioButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            // Makes the storyboard progress three times as fast as normal.\n            myStoryboard.SetSpeedRatio(this, 3);          \n        \n        }           \n        \n        // Stops the storyboard.\n        private void stopButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.Stop(this);          \n        \n        }     \n        \n        // Removes the storyboard.\n        private void removeButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.Remove(this);          \n        \n        }           \n\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage\">&#39;\n&#39;    This example shows how to control\n&#39;    a storyboard after it has started.\n&#39;\n&#39;\n\n\nImports System\nImports System.Windows\nImports System.Windows.Controls\nImports System.Windows.Media\nImports System.Windows.Shapes\nImports System.Windows.Media.Animation\nImports System.Windows.Documents\n\n\nNamespace Microsoft.Samples.Animation.AnimatingWithStoryboards\n\tPublic Class FrameworkContentElementControlStoryboardExample\n\t\tInherits FlowDocument\n\n\t\tPrivate myStoryboard As Storyboard\n\n\t\tPublic Sub New()\n\n\t\t\t&#39; Create a name scope for the document.\n\t\t\tNameScope.SetNameScope(Me, New NameScope())\n\t\t\tMe.Background = Brushes.White\n\n\t\t\t&#39; Create a run of text.\n\t\t\tDim theText As New Run(&quot;Lorem ipsum dolor sit amet, consectetuer adipiscing elit.&quot; &amp; &quot;Ut non lacus. Nullam a ligula id leo adipiscing ornare.&quot; &amp; &quot; Duis mattis. &quot;)\n\n\t\t\t&#39; Create a TextEffect\n\t\t\tDim animatedSpecialEffect As New TextEffect()\n\t\t\tanimatedSpecialEffect.Foreground = Brushes.OrangeRed\n\t\t\tanimatedSpecialEffect.PositionStart = 0\n\t\t\tanimatedSpecialEffect.PositionCount = 0\n\n\t\t\t&#39; Assign the TextEffect a name by \n\t\t\t&#39; registering it with the page, so that\n\t\t\t&#39; it can be targeted by storyboard\n\t\t\t&#39; animations            \n\t\t\tMe.RegisterName(&quot;animatedSpecialEffect&quot;, animatedSpecialEffect)\n\n\t\t\t&#39; Apply the text effect to the run.\n\t\t\ttheText.TextEffects = New TextEffectCollection()\n\t\t\ttheText.TextEffects.Add(animatedSpecialEffect)\n\n\t\t\t&#39; Create a paragraph to contain the run.\n\t\t\tDim animatedParagraph As New Paragraph(theText)\n\t\t\tanimatedParagraph.Background = Brushes.LightGray\n\t\t\tanimatedParagraph.Padding = New Thickness(20)\n\n\t\t\tMe.Blocks.Add(animatedParagraph)\n\t\t\tDim controlsContainer As New BlockUIContainer()\n\n\t\t\t&#39;\n\t\t\t&#39; Create an animation and a storyboard to animate the\n\t\t\t&#39; text effect.\n\t\t\t&#39;\n\t\t\tDim countAnimation As New Int32Animation(0, 127, TimeSpan.FromSeconds(10))\n\t\t\tStoryboard.SetTargetName(countAnimation, &quot;animatedSpecialEffect&quot;)\n\t\t\tStoryboard.SetTargetProperty(countAnimation, New PropertyPath(TextEffect.PositionCountProperty))\n\t\t\tmyStoryboard = New Storyboard()\n\t\t\tmyStoryboard.Children.Add(countAnimation)\n\n\t\t\t&#39;\n\t\t\t&#39; Create some buttons to control the storyboard\n\t\t\t&#39; and a panel to contain them.\n\t\t\t&#39;\n\t\t\tDim buttonPanel As New StackPanel()\n\t\t\tbuttonPanel.Orientation = Orientation.Vertical\n\t\t\tDim beginButton As New Button()\n\t\t\tbeginButton.Content = &quot;Begin&quot;\n\t\t\tAddHandler beginButton.Click, AddressOf beginButton_Clicked\n\t\t\tbuttonPanel.Children.Add(beginButton)\n\t\t\tDim pauseButton As New Button()\n\t\t\tpauseButton.Content = &quot;Pause&quot;\n\t\t\tAddHandler pauseButton.Click, AddressOf pauseButton_Clicked\n\t\t\tbuttonPanel.Children.Add(pauseButton)\n\t\t\tDim resumeButton As New Button()\n\t\t\tresumeButton.Content = &quot;Resume&quot;\n\t\t\tAddHandler resumeButton.Click, AddressOf resumeButton_Clicked\n\t\t\tbuttonPanel.Children.Add(resumeButton)\n\t\t\tDim skipToFillButton As New Button()\n\t\t\tskipToFillButton.Content = &quot;Skip to Fill&quot;\n\t\t\tAddHandler skipToFillButton.Click, AddressOf skipToFillButton_Clicked\n\t\t\tbuttonPanel.Children.Add(skipToFillButton)\n\t\t\tDim setSpeedRatioButton As New Button()\n\t\t\tsetSpeedRatioButton.Content = &quot;Triple Speed&quot;\n\t\t\tAddHandler setSpeedRatioButton.Click, AddressOf setSpeedRatioButton_Clicked\n\t\t\tbuttonPanel.Children.Add(setSpeedRatioButton)\n\t\t\tDim stopButton As New Button()\n\t\t\tstopButton.Content = &quot;Stop&quot;\n\t\t\tAddHandler stopButton.Click, AddressOf stopButton_Clicked\n\t\t\tbuttonPanel.Children.Add(stopButton)\n\t\t\tDim removeButton As New Button()\n\t\t\tremoveButton.Content = &quot;Remove&quot;\n\t\t\tAddHandler removeButton.Click, AddressOf removeButton_Clicked\n\t\t\tbuttonPanel.Children.Add(removeButton)\n\n\t\t\tcontrolsContainer.Child = buttonPanel\n\t\t\tMe.Blocks.Add(controlsContainer)\n\n\t\tEnd Sub\n\n\t\t&#39; Begins the storyboard.\n\t\tPrivate Sub beginButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t&#39; Specifying &quot;true&quot; as the second Begin parameter\n\t\t\t&#39; makes this storyboard controllable.\n\t\t\tmyStoryboard.Begin(Me, True)\n\n\t\tEnd Sub\n\n\t\t&#39; Pauses the storyboard.\n\t\tPrivate Sub pauseButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.Pause(Me)\n\n\t\tEnd Sub\n\n\t\t&#39; Resumes the storyboard.\n\t\tPrivate Sub resumeButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.Resume(Me)\n\n\t\tEnd Sub\n\n\t\t&#39; Advances the storyboard to its fill period.\n\t\tPrivate Sub skipToFillButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.SkipToFill(Me)\n\n\t\tEnd Sub\n\n\t\t&#39; Updates the storyboard&#39;s speed.\n\t\tPrivate Sub setSpeedRatioButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t&#39; Makes the storyboard progress three times as fast as normal.\n\t\t\tmyStoryboard.SetSpeedRatio(Me, 3)\n\n\t\tEnd Sub\n\n\t\t&#39; Stops the storyboard.\n\t\tPrivate Sub stopButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.Stop(Me)\n\n\t\tEnd Sub\n\n\t\t&#39; Removes the storyboard.\n\t\tPrivate Sub removeButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.Remove(Me)\n\n\t\tEnd Sub\n\n\tEnd Class\nEnd Namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_SetSpeedRatio_System_Windows_FrameworkElement_System_Double_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_SetSpeedRatio_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetSpeedRatio(FrameworkElement,Double)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the interactive speed ratio of the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetSpeedRatio (System.Windows.FrameworkElement containingObject, double speedRatio);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>containingObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object specified when the <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.Begin*</span> method was called. This object contains the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> objects that were created for this storyboard and its children.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>speedRatio</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A finite value greater than zero that is the new interactive speed ratio of the storyboard. This value is multiplied against the storyboard&#39;s <span class=\"xref\">stem.Windows.Media.Animation.Timeline.SpeedRatio*</span> value to determine the storyboard&#39;s effective speed. This value does not overwrite the storyboard&#39;s <span class=\"xref\">stem.Windows.Media.Animation.Timeline.SpeedRatio*</span> property. For example, calling this method and specifying an interactive speed ratio of 3 on a storyboard with a <span class=\"xref\">stem.Windows.Media.Animation.Timeline.SpeedRatio*</span> of 0.5 gives the storyboard an effective speed of 1.5.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To interactively control this storyboard, you must use the same <code>containingObject</code> parameter when calling the interactive methods that you used to begin the storyboard. A controllable storyboard can pause, resume, seek, stop, and be removed. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method and specify <code>true</code> to make it controllable. For an example, see <a href=\"../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md\" data-linktype=\"relative-path\">How to: Control a Storyboard After It Starts</a>.  </p>\n<p> Calling this method triggers the <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_CurrentGlobalSpeedInvalidated\" data-linktype=\"relative-path\">CurrentGlobalSpeedInvalidated</a> event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_SetTarget_System_Windows_DependencyObject_System_Windows_DependencyObject_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_SetTarget_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetTarget(DependencyObject,DependencyObject)</div>        \r\n          </div>\r\n    \r\n            <p>Makes the specified <a class=\"xref\" href=\"system.windows.media.animation.timeline\" data-linktype=\"relative-path\">Timeline</a> target the dependency object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void SetTarget (System.Windows.DependencyObject element, System.Windows.DependencyObject value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyobject\" data-linktype=\"relative-path\">DependencyObject</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.media.animation.timeline\" data-linktype=\"relative-path\">Timeline</a> that should target the specified dependency object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyobject\" data-linktype=\"relative-path\">DependencyObject</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The dependency object to target.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method sets the &lt;xref:System.Windows.Media.Animation.Storyboard.Target%2A&gt; attached property on the specified object. For more information about how storyboard targeting works, see &lt;xref:System.Windows.Media.Animation.Storyboard.TargetName%2A&gt;. For more information about how attached properties work, see <a href=\"../Topic/Attached%20Properties%20Overview.md\" data-linktype=\"relative-path\">Attached Properties Overview</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The &lt;xref:System.Windows.Media.Animation.Storyboard.Target%2A&gt; property is not serializable, because it can be set to any <a class=\"xref\" href=\"system.windows.dependencyobject\" data-linktype=\"relative-path\">DependencyObject</a>. It is not guaranteed that this object can be correctly referenced from XAML.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_SetTargetName_System_Windows_DependencyObject_System_String_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_SetTargetName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetTargetName(DependencyObject,String)</div>        \r\n          </div>\r\n    \r\n            <p>Makes the specified <a class=\"xref\" href=\"system.windows.media.animation.timeline\" data-linktype=\"relative-path\">Timeline</a> target the dependency object with the specified name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void SetTargetName (System.Windows.DependencyObject element, string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyobject\" data-linktype=\"relative-path\">DependencyObject</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.media.animation.timeline\" data-linktype=\"relative-path\">Timeline</a> that should target the specified dependency object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the dependency object to target.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method sets the &lt;xref:System.Windows.Media.Animation.Storyboard.TargetName%2A&gt; attached property on the specified object. For more information about how storyboard targeting works, see &lt;xref:System.Windows.Media.Animation.Storyboard.TargetName%2A&gt;. For more information about how attached properties work, see <a href=\"../Topic/Attached%20Properties%20Overview.md\" data-linktype=\"relative-path\">Attached Properties Overview</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_SetTargetProperty_System_Windows_DependencyObject_System_Windows_PropertyPath_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_SetTargetProperty_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetTargetProperty(DependencyObject,PropertyPath)</div>        \r\n          </div>\r\n    \r\n            <p>Makes the specified <a class=\"xref\" href=\"system.windows.media.animation.timeline\" data-linktype=\"relative-path\">Timeline</a> target the specified dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void SetTargetProperty (System.Windows.DependencyObject element, System.Windows.PropertyPath path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyobject\" data-linktype=\"relative-path\">DependencyObject</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.media.animation.timeline\" data-linktype=\"relative-path\">Timeline</a> with which to associate the specified dependency property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.propertypath\" data-linktype=\"relative-path\">PropertyPath</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A path that describe the dependency property to be animated.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method sets the &lt;xref:System.Windows.Media.Animation.Storyboard.TargetProperty%2A&gt; attached property on the specified object. For more information about how storyboard targeting works, see &lt;xref:System.Windows.Media.Animation.Storyboard.TargetProperty%2A&gt;. For more information about how attached properties work, see <a href=\"../Topic/Attached%20Properties%20Overview.md\" data-linktype=\"relative-path\">Attached Properties Overview</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_SkipToFill\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_SkipToFill_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SkipToFill()</div>        \r\n          </div>\r\n    \r\n            <p>Advances the current time of this storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> to the end of its active period.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SkipToFill ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A controllable storyboard can pause, resume, seek, stop, and be removed. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method and specify <code>true</code> to make it controllable. For an example, see <a href=\"../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md\" data-linktype=\"relative-path\">How to: Control a Storyboard After It Starts</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_SkipToFill_System_Windows_FrameworkContentElement_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_SkipToFill_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SkipToFill(FrameworkContentElement)</div>        \r\n          </div>\r\n    \r\n            <p>Advances the current time of this storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> to the end of its active period.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SkipToFill (System.Windows.FrameworkContentElement containingObject);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>containingObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.frameworkcontentelement\" data-linktype=\"relative-path\">FrameworkContentElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object specified when the <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.Begin*</span> method was called. This object contains the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> objects that were created for this storyboard and its children.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method advances the storyboard&#39;s current time to the end of its active period; the storyboard&#39;s behavior at this point is specified by its <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_FillBehavior_\" data-linktype=\"relative-path\">FillBehavior</a> setting. If <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_FillBehavior_\" data-linktype=\"relative-path\">FillBehavior</a> is set to <a class=\"xref\" href=\"system.windows.media.animation.fillbehavior\" data-linktype=\"relative-path\">FillBehavior</a>, the storyboard fills; if the property is set to <a class=\"xref\" href=\"system.windows.media.animation.fillbehavior\" data-linktype=\"relative-path\">FillBehavior</a>, the storyboard stops.  </p>\n<p> Calling this method on a storyboard with an infinite duration, an infinite number of repetitions has no effect. Calling this method on an inactive storyboard has no effect.  </p>\n<p> Advancing a clock to its fill period triggers the <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_CurrentGlobalSpeedInvalidated\" data-linktype=\"relative-path\">CurrentGlobalSpeedInvalidated</a> and <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_CurrentStateInvalidated\" data-linktype=\"relative-path\">CurrentStateInvalidated</a> events.  </p>\n<p> To interactively control this storyboard, you must use the same <code>containingObject</code> parameter when calling the interactive methods that you used to begin the storyboard. A controllable storyboard can pause, resume, seek, stop, and be removed. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method and specify <code>true</code> to make it controllable. For an example, see <a href=\"../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md\" data-linktype=\"relative-path\">How to: Control a Storyboard After It Starts</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses a controllable storyboard to animate a <a class=\"xref\" href=\"system.windows.media.texteffect\" data-linktype=\"relative-path\">TextEffect</a>. The <a class=\"xref\" href=\"system.windows.media.texteffect\" data-linktype=\"relative-path\">TextEffect</a> is contained within a <a class=\"xref\" href=\"system.windows.frameworkcontentelement\" data-linktype=\"relative-path\">FrameworkContentElement</a>&#39;s name scope.  </p>\n<pre><code class=\"lang-cs\" name=\"StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage\">/*\n    This example shows how to control\n    a storyboard after it has started.\n\n*/\n\nusing System;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Media;\nusing System.Windows.Shapes;\nusing System.Windows.Media.Animation;\nusing System.Windows.Documents;\n\n\nnamespace Microsoft.Samples.Animation.AnimatingWithStoryboards\n{\n    public class FrameworkContentElementControlStoryboardExample : FlowDocument\n    {\n    \n        private Storyboard myStoryboard;\n        \n        public FrameworkContentElementControlStoryboardExample()\n        {\n        \n            // Create a name scope for the document.\n            NameScope.SetNameScope(this, new NameScope());        \n            this.Background = Brushes.White;\n            \n            // Create a run of text.\n            Run theText = new Run( \n                &quot;Lorem ipsum dolor sit amet, consectetuer adipiscing elit.&quot; + \n                &quot;Ut non lacus. Nullam a ligula id leo adipiscing ornare.&quot; +\n                &quot; Duis mattis. &quot;);   \n                \n            // Create a TextEffect\n            TextEffect animatedSpecialEffect = new TextEffect();\n            animatedSpecialEffect.Foreground = Brushes.OrangeRed;\n            animatedSpecialEffect.PositionStart = 0;\n            animatedSpecialEffect.PositionCount = 0;\n            \n            // Assign the TextEffect a name by \n            // registering it with the page, so that\n            // it can be targeted by storyboard\n            // animations            \n            this.RegisterName(&quot;animatedSpecialEffect&quot;, animatedSpecialEffect);  \n            \n            // Apply the text effect to the run.\n            theText.TextEffects = new TextEffectCollection();\n            theText.TextEffects.Add(animatedSpecialEffect);\n            \n            // Create a paragraph to contain the run.\n            Paragraph animatedParagraph = new Paragraph(theText);\n            animatedParagraph.Background = Brushes.LightGray;\n            animatedParagraph.Padding = new Thickness(20);\n   \n            this.Blocks.Add(animatedParagraph);            \n            BlockUIContainer controlsContainer = new BlockUIContainer();                \n            \n            //\n            // Create an animation and a storyboard to animate the\n            // text effect.\n            //\n            Int32Animation countAnimation = \n                new Int32Animation(0, 127, TimeSpan.FromSeconds(10)); \n            Storyboard.SetTargetName(countAnimation, &quot;animatedSpecialEffect&quot;);\n            Storyboard.SetTargetProperty(countAnimation, \n                new PropertyPath(TextEffect.PositionCountProperty));\n            myStoryboard = new Storyboard();\n            myStoryboard.Children.Add(countAnimation);\n            \n            //\n            // Create some buttons to control the storyboard\n            // and a panel to contain them.\n            //\n            StackPanel buttonPanel = new StackPanel();\n            buttonPanel.Orientation = Orientation.Vertical;\n            Button beginButton = new Button();\n            beginButton.Content = &quot;Begin&quot;;\n            beginButton.Click += new RoutedEventHandler(beginButton_Clicked);            \n            buttonPanel.Children.Add(beginButton);\n            Button pauseButton = new Button();\n            pauseButton.Content = &quot;Pause&quot;;\n            pauseButton.Click +=new RoutedEventHandler(pauseButton_Clicked);\n            buttonPanel.Children.Add(pauseButton);\n            Button resumeButton = new Button();\n            resumeButton.Content = &quot;Resume&quot;;\n            resumeButton.Click +=new RoutedEventHandler(resumeButton_Clicked);\n            buttonPanel.Children.Add(resumeButton);\n            Button skipToFillButton = new Button();\n            skipToFillButton.Content = &quot;Skip to Fill&quot;;\n            skipToFillButton.Click +=new RoutedEventHandler(skipToFillButton_Clicked);\n            buttonPanel.Children.Add(skipToFillButton);\n            Button setSpeedRatioButton = new Button();\n            setSpeedRatioButton.Content = &quot;Triple Speed&quot;;\n            setSpeedRatioButton.Click +=new RoutedEventHandler(setSpeedRatioButton_Clicked);\n            buttonPanel.Children.Add(setSpeedRatioButton);\n            Button stopButton = new Button();\n            stopButton.Content = &quot;Stop&quot;;\n            stopButton.Click +=new RoutedEventHandler(stopButton_Clicked);\n            buttonPanel.Children.Add(stopButton);\n            Button removeButton = new Button();\n            removeButton.Content = &quot;Remove&quot;;\n            removeButton.Click +=new RoutedEventHandler(removeButton_Clicked);\n            buttonPanel.Children.Add(removeButton); \n   \n            controlsContainer.Child = buttonPanel; \n            this.Blocks.Add(controlsContainer);\n            \n        }\n        \n        // Begins the storyboard.\n        private void beginButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            // Specifying &quot;true&quot; as the second Begin parameter\n            // makes this storyboard controllable.\n            myStoryboard.Begin(this, true);          \n        \n        }\n        \n        // Pauses the storyboard.\n        private void pauseButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.Pause(this);          \n        \n        }\n        \n        // Resumes the storyboard.\n        private void resumeButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.Resume(this);          \n        \n        }     \n        \n        // Advances the storyboard to its fill period.\n        private void skipToFillButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.SkipToFill(this);          \n        \n        } \n        \n        // Updates the storyboard&#39;s speed.\n        private void setSpeedRatioButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            // Makes the storyboard progress three times as fast as normal.\n            myStoryboard.SetSpeedRatio(this, 3);          \n        \n        }           \n        \n        // Stops the storyboard.\n        private void stopButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.Stop(this);          \n        \n        }     \n        \n        // Removes the storyboard.\n        private void removeButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.Remove(this);          \n        \n        }           \n\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage\">&#39;\n&#39;    This example shows how to control\n&#39;    a storyboard after it has started.\n&#39;\n&#39;\n\n\nImports System\nImports System.Windows\nImports System.Windows.Controls\nImports System.Windows.Media\nImports System.Windows.Shapes\nImports System.Windows.Media.Animation\nImports System.Windows.Documents\n\n\nNamespace Microsoft.Samples.Animation.AnimatingWithStoryboards\n\tPublic Class FrameworkContentElementControlStoryboardExample\n\t\tInherits FlowDocument\n\n\t\tPrivate myStoryboard As Storyboard\n\n\t\tPublic Sub New()\n\n\t\t\t&#39; Create a name scope for the document.\n\t\t\tNameScope.SetNameScope(Me, New NameScope())\n\t\t\tMe.Background = Brushes.White\n\n\t\t\t&#39; Create a run of text.\n\t\t\tDim theText As New Run(&quot;Lorem ipsum dolor sit amet, consectetuer adipiscing elit.&quot; &amp; &quot;Ut non lacus. Nullam a ligula id leo adipiscing ornare.&quot; &amp; &quot; Duis mattis. &quot;)\n\n\t\t\t&#39; Create a TextEffect\n\t\t\tDim animatedSpecialEffect As New TextEffect()\n\t\t\tanimatedSpecialEffect.Foreground = Brushes.OrangeRed\n\t\t\tanimatedSpecialEffect.PositionStart = 0\n\t\t\tanimatedSpecialEffect.PositionCount = 0\n\n\t\t\t&#39; Assign the TextEffect a name by \n\t\t\t&#39; registering it with the page, so that\n\t\t\t&#39; it can be targeted by storyboard\n\t\t\t&#39; animations            \n\t\t\tMe.RegisterName(&quot;animatedSpecialEffect&quot;, animatedSpecialEffect)\n\n\t\t\t&#39; Apply the text effect to the run.\n\t\t\ttheText.TextEffects = New TextEffectCollection()\n\t\t\ttheText.TextEffects.Add(animatedSpecialEffect)\n\n\t\t\t&#39; Create a paragraph to contain the run.\n\t\t\tDim animatedParagraph As New Paragraph(theText)\n\t\t\tanimatedParagraph.Background = Brushes.LightGray\n\t\t\tanimatedParagraph.Padding = New Thickness(20)\n\n\t\t\tMe.Blocks.Add(animatedParagraph)\n\t\t\tDim controlsContainer As New BlockUIContainer()\n\n\t\t\t&#39;\n\t\t\t&#39; Create an animation and a storyboard to animate the\n\t\t\t&#39; text effect.\n\t\t\t&#39;\n\t\t\tDim countAnimation As New Int32Animation(0, 127, TimeSpan.FromSeconds(10))\n\t\t\tStoryboard.SetTargetName(countAnimation, &quot;animatedSpecialEffect&quot;)\n\t\t\tStoryboard.SetTargetProperty(countAnimation, New PropertyPath(TextEffect.PositionCountProperty))\n\t\t\tmyStoryboard = New Storyboard()\n\t\t\tmyStoryboard.Children.Add(countAnimation)\n\n\t\t\t&#39;\n\t\t\t&#39; Create some buttons to control the storyboard\n\t\t\t&#39; and a panel to contain them.\n\t\t\t&#39;\n\t\t\tDim buttonPanel As New StackPanel()\n\t\t\tbuttonPanel.Orientation = Orientation.Vertical\n\t\t\tDim beginButton As New Button()\n\t\t\tbeginButton.Content = &quot;Begin&quot;\n\t\t\tAddHandler beginButton.Click, AddressOf beginButton_Clicked\n\t\t\tbuttonPanel.Children.Add(beginButton)\n\t\t\tDim pauseButton As New Button()\n\t\t\tpauseButton.Content = &quot;Pause&quot;\n\t\t\tAddHandler pauseButton.Click, AddressOf pauseButton_Clicked\n\t\t\tbuttonPanel.Children.Add(pauseButton)\n\t\t\tDim resumeButton As New Button()\n\t\t\tresumeButton.Content = &quot;Resume&quot;\n\t\t\tAddHandler resumeButton.Click, AddressOf resumeButton_Clicked\n\t\t\tbuttonPanel.Children.Add(resumeButton)\n\t\t\tDim skipToFillButton As New Button()\n\t\t\tskipToFillButton.Content = &quot;Skip to Fill&quot;\n\t\t\tAddHandler skipToFillButton.Click, AddressOf skipToFillButton_Clicked\n\t\t\tbuttonPanel.Children.Add(skipToFillButton)\n\t\t\tDim setSpeedRatioButton As New Button()\n\t\t\tsetSpeedRatioButton.Content = &quot;Triple Speed&quot;\n\t\t\tAddHandler setSpeedRatioButton.Click, AddressOf setSpeedRatioButton_Clicked\n\t\t\tbuttonPanel.Children.Add(setSpeedRatioButton)\n\t\t\tDim stopButton As New Button()\n\t\t\tstopButton.Content = &quot;Stop&quot;\n\t\t\tAddHandler stopButton.Click, AddressOf stopButton_Clicked\n\t\t\tbuttonPanel.Children.Add(stopButton)\n\t\t\tDim removeButton As New Button()\n\t\t\tremoveButton.Content = &quot;Remove&quot;\n\t\t\tAddHandler removeButton.Click, AddressOf removeButton_Clicked\n\t\t\tbuttonPanel.Children.Add(removeButton)\n\n\t\t\tcontrolsContainer.Child = buttonPanel\n\t\t\tMe.Blocks.Add(controlsContainer)\n\n\t\tEnd Sub\n\n\t\t&#39; Begins the storyboard.\n\t\tPrivate Sub beginButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t&#39; Specifying &quot;true&quot; as the second Begin parameter\n\t\t\t&#39; makes this storyboard controllable.\n\t\t\tmyStoryboard.Begin(Me, True)\n\n\t\tEnd Sub\n\n\t\t&#39; Pauses the storyboard.\n\t\tPrivate Sub pauseButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.Pause(Me)\n\n\t\tEnd Sub\n\n\t\t&#39; Resumes the storyboard.\n\t\tPrivate Sub resumeButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.Resume(Me)\n\n\t\tEnd Sub\n\n\t\t&#39; Advances the storyboard to its fill period.\n\t\tPrivate Sub skipToFillButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.SkipToFill(Me)\n\n\t\tEnd Sub\n\n\t\t&#39; Updates the storyboard&#39;s speed.\n\t\tPrivate Sub setSpeedRatioButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t&#39; Makes the storyboard progress three times as fast as normal.\n\t\t\tmyStoryboard.SetSpeedRatio(Me, 3)\n\n\t\tEnd Sub\n\n\t\t&#39; Stops the storyboard.\n\t\tPrivate Sub stopButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.Stop(Me)\n\n\t\tEnd Sub\n\n\t\t&#39; Removes the storyboard.\n\t\tPrivate Sub removeButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.Remove(Me)\n\n\t\tEnd Sub\n\n\tEnd Class\nEnd Namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_SkipToFill_System_Windows_FrameworkElement_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_SkipToFill_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SkipToFill(FrameworkElement)</div>        \r\n          </div>\r\n    \r\n            <p>Advances the current time of this storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> to the end of its active period.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SkipToFill (System.Windows.FrameworkElement containingObject);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>containingObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object specified when the <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.Begin*</span> method was called. This object contains the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> objects that were created for this storyboard and its children.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method advances the storyboard&#39;s current time to the end of its active period; the storyboard&#39;s behavior at this point is specified by its <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_FillBehavior_\" data-linktype=\"relative-path\">FillBehavior</a> setting. If <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_FillBehavior_\" data-linktype=\"relative-path\">FillBehavior</a> is set to <a class=\"xref\" href=\"system.windows.media.animation.fillbehavior\" data-linktype=\"relative-path\">FillBehavior</a>, the storyboard fills; if the property is set to <a class=\"xref\" href=\"system.windows.media.animation.fillbehavior\" data-linktype=\"relative-path\">FillBehavior</a>, the storyboard stops.  </p>\n<p> Calling this method on a storyboard with an infinite duration, an infinite number of repetitions has no effect. Calling this method on an inactive storyboard has no effect.  </p>\n<p> Advancing a clock to its fill period triggers the <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_CurrentGlobalSpeedInvalidated\" data-linktype=\"relative-path\">CurrentGlobalSpeedInvalidated</a> and <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_CurrentStateInvalidated\" data-linktype=\"relative-path\">CurrentStateInvalidated</a> events.  </p>\n<p> To interactively control this storyboard, you must use the same <code>containingObject</code> parameter when calling the interactive methods that you used to begin the storyboard. A controllable storyboard can pause, resume, seek, stop, and be removed. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method and specify <code>true</code> to make it controllable. For an example, see <a href=\"../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md\" data-linktype=\"relative-path\">How to: Control a Storyboard After It Starts</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_Stop\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_Stop_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Stop()</div>        \r\n          </div>\r\n    \r\n            <p>Stops the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Stop ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Note that stopping a storyboard does not fire the <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_Completed\" data-linktype=\"relative-path\">Completed</a> event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_Stop_System_Windows_FrameworkContentElement_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_Stop_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Stop(FrameworkContentElement)</div>        \r\n          </div>\r\n    \r\n            <p>Stops the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Stop (System.Windows.FrameworkContentElement containingObject);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>containingObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.frameworkcontentelement\" data-linktype=\"relative-path\">FrameworkContentElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object specified when the <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.Begin*</span> method was called. This object contains the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> objects that were created for this storyboard and its children.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A <a class=\"xref\" href=\"system.windows.media.animation.clockstate\" data-linktype=\"relative-path\">ClockState</a> storyboard no longer affects its target properties: properties that were animated revert to their previous values.  </p>\n<p> Stopping a clock triggers the <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_CurrentGlobalSpeedInvalidated\" data-linktype=\"relative-path\">CurrentGlobalSpeedInvalidated</a> and <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_CurrentStateInvalidated\" data-linktype=\"relative-path\">CurrentStateInvalidated</a> events, but not the <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_Completed\" data-linktype=\"relative-path\">Completed</a> event.  </p>\n<p> To interactively control this storyboard, you must use the same <code>containingObject</code> parameter when calling the interactive methods that you used to begin the storyboard. A controllable storyboard can pause, resume, seek, stop, and be removed. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method and specify <code>true</code> to make it controllable. For an example, see <a href=\"../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md\" data-linktype=\"relative-path\">How to: Control a Storyboard After It Starts</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses a controllable storyboard to animate a <a class=\"xref\" href=\"system.windows.media.texteffect\" data-linktype=\"relative-path\">TextEffect</a>. The <a class=\"xref\" href=\"system.windows.media.texteffect\" data-linktype=\"relative-path\">TextEffect</a> is contained within a <a class=\"xref\" href=\"system.windows.frameworkcontentelement\" data-linktype=\"relative-path\">FrameworkContentElement</a>&#39;s name scope.  </p>\n<pre><code class=\"lang-cs\" name=\"StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage\">/*\n    This example shows how to control\n    a storyboard after it has started.\n\n*/\n\nusing System;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Media;\nusing System.Windows.Shapes;\nusing System.Windows.Media.Animation;\nusing System.Windows.Documents;\n\n\nnamespace Microsoft.Samples.Animation.AnimatingWithStoryboards\n{\n    public class FrameworkContentElementControlStoryboardExample : FlowDocument\n    {\n    \n        private Storyboard myStoryboard;\n        \n        public FrameworkContentElementControlStoryboardExample()\n        {\n        \n            // Create a name scope for the document.\n            NameScope.SetNameScope(this, new NameScope());        \n            this.Background = Brushes.White;\n            \n            // Create a run of text.\n            Run theText = new Run( \n                &quot;Lorem ipsum dolor sit amet, consectetuer adipiscing elit.&quot; + \n                &quot;Ut non lacus. Nullam a ligula id leo adipiscing ornare.&quot; +\n                &quot; Duis mattis. &quot;);   \n                \n            // Create a TextEffect\n            TextEffect animatedSpecialEffect = new TextEffect();\n            animatedSpecialEffect.Foreground = Brushes.OrangeRed;\n            animatedSpecialEffect.PositionStart = 0;\n            animatedSpecialEffect.PositionCount = 0;\n            \n            // Assign the TextEffect a name by \n            // registering it with the page, so that\n            // it can be targeted by storyboard\n            // animations            \n            this.RegisterName(&quot;animatedSpecialEffect&quot;, animatedSpecialEffect);  \n            \n            // Apply the text effect to the run.\n            theText.TextEffects = new TextEffectCollection();\n            theText.TextEffects.Add(animatedSpecialEffect);\n            \n            // Create a paragraph to contain the run.\n            Paragraph animatedParagraph = new Paragraph(theText);\n            animatedParagraph.Background = Brushes.LightGray;\n            animatedParagraph.Padding = new Thickness(20);\n   \n            this.Blocks.Add(animatedParagraph);            \n            BlockUIContainer controlsContainer = new BlockUIContainer();                \n            \n            //\n            // Create an animation and a storyboard to animate the\n            // text effect.\n            //\n            Int32Animation countAnimation = \n                new Int32Animation(0, 127, TimeSpan.FromSeconds(10)); \n            Storyboard.SetTargetName(countAnimation, &quot;animatedSpecialEffect&quot;);\n            Storyboard.SetTargetProperty(countAnimation, \n                new PropertyPath(TextEffect.PositionCountProperty));\n            myStoryboard = new Storyboard();\n            myStoryboard.Children.Add(countAnimation);\n            \n            //\n            // Create some buttons to control the storyboard\n            // and a panel to contain them.\n            //\n            StackPanel buttonPanel = new StackPanel();\n            buttonPanel.Orientation = Orientation.Vertical;\n            Button beginButton = new Button();\n            beginButton.Content = &quot;Begin&quot;;\n            beginButton.Click += new RoutedEventHandler(beginButton_Clicked);            \n            buttonPanel.Children.Add(beginButton);\n            Button pauseButton = new Button();\n            pauseButton.Content = &quot;Pause&quot;;\n            pauseButton.Click +=new RoutedEventHandler(pauseButton_Clicked);\n            buttonPanel.Children.Add(pauseButton);\n            Button resumeButton = new Button();\n            resumeButton.Content = &quot;Resume&quot;;\n            resumeButton.Click +=new RoutedEventHandler(resumeButton_Clicked);\n            buttonPanel.Children.Add(resumeButton);\n            Button skipToFillButton = new Button();\n            skipToFillButton.Content = &quot;Skip to Fill&quot;;\n            skipToFillButton.Click +=new RoutedEventHandler(skipToFillButton_Clicked);\n            buttonPanel.Children.Add(skipToFillButton);\n            Button setSpeedRatioButton = new Button();\n            setSpeedRatioButton.Content = &quot;Triple Speed&quot;;\n            setSpeedRatioButton.Click +=new RoutedEventHandler(setSpeedRatioButton_Clicked);\n            buttonPanel.Children.Add(setSpeedRatioButton);\n            Button stopButton = new Button();\n            stopButton.Content = &quot;Stop&quot;;\n            stopButton.Click +=new RoutedEventHandler(stopButton_Clicked);\n            buttonPanel.Children.Add(stopButton);\n            Button removeButton = new Button();\n            removeButton.Content = &quot;Remove&quot;;\n            removeButton.Click +=new RoutedEventHandler(removeButton_Clicked);\n            buttonPanel.Children.Add(removeButton); \n   \n            controlsContainer.Child = buttonPanel; \n            this.Blocks.Add(controlsContainer);\n            \n        }\n        \n        // Begins the storyboard.\n        private void beginButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            // Specifying &quot;true&quot; as the second Begin parameter\n            // makes this storyboard controllable.\n            myStoryboard.Begin(this, true);          \n        \n        }\n        \n        // Pauses the storyboard.\n        private void pauseButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.Pause(this);          \n        \n        }\n        \n        // Resumes the storyboard.\n        private void resumeButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.Resume(this);          \n        \n        }     \n        \n        // Advances the storyboard to its fill period.\n        private void skipToFillButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.SkipToFill(this);          \n        \n        } \n        \n        // Updates the storyboard&#39;s speed.\n        private void setSpeedRatioButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            // Makes the storyboard progress three times as fast as normal.\n            myStoryboard.SetSpeedRatio(this, 3);          \n        \n        }           \n        \n        // Stops the storyboard.\n        private void stopButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.Stop(this);          \n        \n        }     \n        \n        // Removes the storyboard.\n        private void removeButton_Clicked(object sender, RoutedEventArgs args)\n        {\n             myStoryboard.Remove(this);          \n        \n        }           \n\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage\">&#39;\n&#39;    This example shows how to control\n&#39;    a storyboard after it has started.\n&#39;\n&#39;\n\n\nImports System\nImports System.Windows\nImports System.Windows.Controls\nImports System.Windows.Media\nImports System.Windows.Shapes\nImports System.Windows.Media.Animation\nImports System.Windows.Documents\n\n\nNamespace Microsoft.Samples.Animation.AnimatingWithStoryboards\n\tPublic Class FrameworkContentElementControlStoryboardExample\n\t\tInherits FlowDocument\n\n\t\tPrivate myStoryboard As Storyboard\n\n\t\tPublic Sub New()\n\n\t\t\t&#39; Create a name scope for the document.\n\t\t\tNameScope.SetNameScope(Me, New NameScope())\n\t\t\tMe.Background = Brushes.White\n\n\t\t\t&#39; Create a run of text.\n\t\t\tDim theText As New Run(&quot;Lorem ipsum dolor sit amet, consectetuer adipiscing elit.&quot; &amp; &quot;Ut non lacus. Nullam a ligula id leo adipiscing ornare.&quot; &amp; &quot; Duis mattis. &quot;)\n\n\t\t\t&#39; Create a TextEffect\n\t\t\tDim animatedSpecialEffect As New TextEffect()\n\t\t\tanimatedSpecialEffect.Foreground = Brushes.OrangeRed\n\t\t\tanimatedSpecialEffect.PositionStart = 0\n\t\t\tanimatedSpecialEffect.PositionCount = 0\n\n\t\t\t&#39; Assign the TextEffect a name by \n\t\t\t&#39; registering it with the page, so that\n\t\t\t&#39; it can be targeted by storyboard\n\t\t\t&#39; animations            \n\t\t\tMe.RegisterName(&quot;animatedSpecialEffect&quot;, animatedSpecialEffect)\n\n\t\t\t&#39; Apply the text effect to the run.\n\t\t\ttheText.TextEffects = New TextEffectCollection()\n\t\t\ttheText.TextEffects.Add(animatedSpecialEffect)\n\n\t\t\t&#39; Create a paragraph to contain the run.\n\t\t\tDim animatedParagraph As New Paragraph(theText)\n\t\t\tanimatedParagraph.Background = Brushes.LightGray\n\t\t\tanimatedParagraph.Padding = New Thickness(20)\n\n\t\t\tMe.Blocks.Add(animatedParagraph)\n\t\t\tDim controlsContainer As New BlockUIContainer()\n\n\t\t\t&#39;\n\t\t\t&#39; Create an animation and a storyboard to animate the\n\t\t\t&#39; text effect.\n\t\t\t&#39;\n\t\t\tDim countAnimation As New Int32Animation(0, 127, TimeSpan.FromSeconds(10))\n\t\t\tStoryboard.SetTargetName(countAnimation, &quot;animatedSpecialEffect&quot;)\n\t\t\tStoryboard.SetTargetProperty(countAnimation, New PropertyPath(TextEffect.PositionCountProperty))\n\t\t\tmyStoryboard = New Storyboard()\n\t\t\tmyStoryboard.Children.Add(countAnimation)\n\n\t\t\t&#39;\n\t\t\t&#39; Create some buttons to control the storyboard\n\t\t\t&#39; and a panel to contain them.\n\t\t\t&#39;\n\t\t\tDim buttonPanel As New StackPanel()\n\t\t\tbuttonPanel.Orientation = Orientation.Vertical\n\t\t\tDim beginButton As New Button()\n\t\t\tbeginButton.Content = &quot;Begin&quot;\n\t\t\tAddHandler beginButton.Click, AddressOf beginButton_Clicked\n\t\t\tbuttonPanel.Children.Add(beginButton)\n\t\t\tDim pauseButton As New Button()\n\t\t\tpauseButton.Content = &quot;Pause&quot;\n\t\t\tAddHandler pauseButton.Click, AddressOf pauseButton_Clicked\n\t\t\tbuttonPanel.Children.Add(pauseButton)\n\t\t\tDim resumeButton As New Button()\n\t\t\tresumeButton.Content = &quot;Resume&quot;\n\t\t\tAddHandler resumeButton.Click, AddressOf resumeButton_Clicked\n\t\t\tbuttonPanel.Children.Add(resumeButton)\n\t\t\tDim skipToFillButton As New Button()\n\t\t\tskipToFillButton.Content = &quot;Skip to Fill&quot;\n\t\t\tAddHandler skipToFillButton.Click, AddressOf skipToFillButton_Clicked\n\t\t\tbuttonPanel.Children.Add(skipToFillButton)\n\t\t\tDim setSpeedRatioButton As New Button()\n\t\t\tsetSpeedRatioButton.Content = &quot;Triple Speed&quot;\n\t\t\tAddHandler setSpeedRatioButton.Click, AddressOf setSpeedRatioButton_Clicked\n\t\t\tbuttonPanel.Children.Add(setSpeedRatioButton)\n\t\t\tDim stopButton As New Button()\n\t\t\tstopButton.Content = &quot;Stop&quot;\n\t\t\tAddHandler stopButton.Click, AddressOf stopButton_Clicked\n\t\t\tbuttonPanel.Children.Add(stopButton)\n\t\t\tDim removeButton As New Button()\n\t\t\tremoveButton.Content = &quot;Remove&quot;\n\t\t\tAddHandler removeButton.Click, AddressOf removeButton_Clicked\n\t\t\tbuttonPanel.Children.Add(removeButton)\n\n\t\t\tcontrolsContainer.Child = buttonPanel\n\t\t\tMe.Blocks.Add(controlsContainer)\n\n\t\tEnd Sub\n\n\t\t&#39; Begins the storyboard.\n\t\tPrivate Sub beginButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t&#39; Specifying &quot;true&quot; as the second Begin parameter\n\t\t\t&#39; makes this storyboard controllable.\n\t\t\tmyStoryboard.Begin(Me, True)\n\n\t\tEnd Sub\n\n\t\t&#39; Pauses the storyboard.\n\t\tPrivate Sub pauseButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.Pause(Me)\n\n\t\tEnd Sub\n\n\t\t&#39; Resumes the storyboard.\n\t\tPrivate Sub resumeButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.Resume(Me)\n\n\t\tEnd Sub\n\n\t\t&#39; Advances the storyboard to its fill period.\n\t\tPrivate Sub skipToFillButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.SkipToFill(Me)\n\n\t\tEnd Sub\n\n\t\t&#39; Updates the storyboard&#39;s speed.\n\t\tPrivate Sub setSpeedRatioButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t&#39; Makes the storyboard progress three times as fast as normal.\n\t\t\tmyStoryboard.SetSpeedRatio(Me, 3)\n\n\t\tEnd Sub\n\n\t\t&#39; Stops the storyboard.\n\t\tPrivate Sub stopButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.Stop(Me)\n\n\t\tEnd Sub\n\n\t\t&#39; Removes the storyboard.\n\t\tPrivate Sub removeButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t myStoryboard.Remove(Me)\n\n\t\tEnd Sub\n\n\tEnd Class\nEnd Namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Storyboard_Stop_System_Windows_FrameworkElement_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Storyboard_Stop_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Stop(FrameworkElement)</div>        \r\n          </div>\r\n    \r\n            <p>Stops the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was created for this <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Stop (System.Windows.FrameworkElement containingObject);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>containingObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object specified when the <span class=\"xref\">stem.Windows.Media.Animation.Storyboard.Begin*</span> method was called. This object contains the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> objects that were created for this storyboard and its children.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A <a class=\"xref\" href=\"system.windows.media.animation.clockstate\" data-linktype=\"relative-path\">ClockState</a> storyboard no longer affects its target properties: properties that were animated revert to their previous values.  </p>\n<p> Stopping a clock triggers the <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_CurrentGlobalSpeedInvalidated\" data-linktype=\"relative-path\">CurrentGlobalSpeedInvalidated</a> and <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_CurrentStateInvalidated\" data-linktype=\"relative-path\">CurrentStateInvalidated</a> events, but not the <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_Completed\" data-linktype=\"relative-path\">Completed</a> event.  </p>\n<p> To interactively control this storyboard, you must use the same <code>containingObject</code> parameter when calling the interactive methods that you used to begin the storyboard. A controllable storyboard can pause, resume, seek, stop, and be removed. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard&#39;s <a class=\"xref\" href=\"system.windows.media.animation.storyboard#System_Windows_Media_Animation_Storyboard_Begin_\" data-linktype=\"relative-path\">Begin</a> method and specify <code>true</code> to make it controllable. For an example, see <a href=\"../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md\" data-linktype=\"relative-path\">How to: Control a Storyboard After It Starts</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Media.Animation.Storyboard.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Media.Animation.Storyboard.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.Animation.Storyboard\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.Animation.Storyboard..ctor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.Animation.Storyboard.Begin\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.Animation.Storyboard.Clone\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.Animation.Storyboard.CreateInstanceCore\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.Animation.Storyboard.GetCurrentGlobalSpeed\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.Animation.Storyboard.GetCurrentIteration\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.Animation.Storyboard.GetCurrentProgress\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.Animation.Storyboard.GetCurrentState\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.Animation.Storyboard.GetCurrentTime\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.Animation.Storyboard.GetIsPaused\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.Animation.Storyboard.GetTarget\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.Animation.Storyboard.GetTargetName\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.Animation.Storyboard.GetTargetProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.Animation.Storyboard.Pause\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.Animation.Storyboard.Remove\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.Animation.Storyboard.Resume\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.Animation.Storyboard.Seek\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.Animation.Storyboard.SetSpeedRatio\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.Animation.Storyboard.SetTarget\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.Animation.Storyboard.SetTargetName\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.Animation.Storyboard.SetTargetProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.Animation.Storyboard.SkipToFill\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.Animation.Storyboard.Stop\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.Animation.Storyboard.TargetNameProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.Animation.Storyboard.TargetProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.Animation.Storyboard.TargetPropertyProperty\">\r\n<meta name=\"APILocation\" content=\"PresentationFramework.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"e7d7fd79-4a53-b519-f708-3ce92cca6750\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"A container timeline that provides object and property targeting information for its child animations.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Windows.Media.Animation/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Media.Animation.Storyboard\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Media.Animation.Storyboard.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Media.Animation.Storyboard.yml","open_to_public_contributors":true,"api_name":["System.Windows.Media.Animation.Storyboard","System.Windows.Media.Animation.Storyboard..ctor","System.Windows.Media.Animation.Storyboard.Begin","System.Windows.Media.Animation.Storyboard.Clone","System.Windows.Media.Animation.Storyboard.CreateInstanceCore","System.Windows.Media.Animation.Storyboard.GetCurrentGlobalSpeed","System.Windows.Media.Animation.Storyboard.GetCurrentIteration","System.Windows.Media.Animation.Storyboard.GetCurrentProgress","System.Windows.Media.Animation.Storyboard.GetCurrentState","System.Windows.Media.Animation.Storyboard.GetCurrentTime","System.Windows.Media.Animation.Storyboard.GetIsPaused","System.Windows.Media.Animation.Storyboard.GetTarget","System.Windows.Media.Animation.Storyboard.GetTargetName","System.Windows.Media.Animation.Storyboard.GetTargetProperty","System.Windows.Media.Animation.Storyboard.Pause","System.Windows.Media.Animation.Storyboard.Remove","System.Windows.Media.Animation.Storyboard.Resume","System.Windows.Media.Animation.Storyboard.Seek","System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick","System.Windows.Media.Animation.Storyboard.SetSpeedRatio","System.Windows.Media.Animation.Storyboard.SetTarget","System.Windows.Media.Animation.Storyboard.SetTargetName","System.Windows.Media.Animation.Storyboard.SetTargetProperty","System.Windows.Media.Animation.Storyboard.SkipToFill","System.Windows.Media.Animation.Storyboard.Stop","System.Windows.Media.Animation.Storyboard.TargetNameProperty","System.Windows.Media.Animation.Storyboard.TargetProperty","System.Windows.Media.Animation.Storyboard.TargetPropertyProperty"],"api_location":["PresentationFramework.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Media.Animation.Storyboard","System::Windows::Media::Animation::Storyboard","System.Windows.Media.Animation.Storyboard.#ctor","System::Windows::Media::Animation::Storyboard::#ctor","System.Windows.Media.Animation.Storyboard.Begin","System::Windows::Media::Animation::Storyboard::Begin","System.Windows.Media.Animation.Storyboard.Clone","System::Windows::Media::Animation::Storyboard::Clone","System.Windows.Media.Animation.Storyboard.CreateInstanceCore","System::Windows::Media::Animation::Storyboard::CreateInstanceCore","System.Windows.Media.Animation.Storyboard.GetCurrentGlobalSpeed","System::Windows::Media::Animation::Storyboard::GetCurrentGlobalSpeed","System.Windows.Media.Animation.Storyboard.GetCurrentIteration","System::Windows::Media::Animation::Storyboard::GetCurrentIteration","System.Windows.Media.Animation.Storyboard.GetCurrentProgress","System::Windows::Media::Animation::Storyboard::GetCurrentProgress","System.Windows.Media.Animation.Storyboard.GetCurrentState","System::Windows::Media::Animation::Storyboard::GetCurrentState","System.Windows.Media.Animation.Storyboard.GetCurrentTime","System::Windows::Media::Animation::Storyboard::GetCurrentTime","System.Windows.Media.Animation.Storyboard.GetIsPaused","System::Windows::Media::Animation::Storyboard::GetIsPaused","System.Windows.Media.Animation.Storyboard.GetTarget","System::Windows::Media::Animation::Storyboard::GetTarget","System.Windows.Media.Animation.Storyboard.GetTargetName","System::Windows::Media::Animation::Storyboard::GetTargetName","System.Windows.Media.Animation.Storyboard.GetTargetProperty","System::Windows::Media::Animation::Storyboard::GetTargetProperty","System.Windows.Media.Animation.Storyboard.Pause","System::Windows::Media::Animation::Storyboard::Pause","System.Windows.Media.Animation.Storyboard.Remove","System::Windows::Media::Animation::Storyboard::Remove","System.Windows.Media.Animation.Storyboard.Resume","System::Windows::Media::Animation::Storyboard::Resume","System.Windows.Media.Animation.Storyboard.Seek","System::Windows::Media::Animation::Storyboard::Seek","System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick","System::Windows::Media::Animation::Storyboard::SeekAlignedToLastTick","System.Windows.Media.Animation.Storyboard.SetSpeedRatio","System::Windows::Media::Animation::Storyboard::SetSpeedRatio","System.Windows.Media.Animation.Storyboard.SetTarget","System::Windows::Media::Animation::Storyboard::SetTarget","System.Windows.Media.Animation.Storyboard.SetTargetName","System::Windows::Media::Animation::Storyboard::SetTargetName","System.Windows.Media.Animation.Storyboard.SetTargetProperty","System::Windows::Media::Animation::Storyboard::SetTargetProperty","System.Windows.Media.Animation.Storyboard.SkipToFill","System::Windows::Media::Animation::Storyboard::SkipToFill","System.Windows.Media.Animation.Storyboard.Stop","System::Windows::Media::Animation::Storyboard::Stop","System.Windows.Media.Animation.Storyboard.TargetNameProperty","System::Windows::Media::Animation::Storyboard::TargetNameProperty","System.Windows.Media.Animation.Storyboard.TargetProperty","System::Windows::Media::Animation::Storyboard::TargetProperty","System.Windows.Media.Animation.Storyboard.TargetPropertyProperty","System::Windows::Media::Animation::Storyboard::TargetPropertyProperty"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"e7d7fd79-4a53-b519-f708-3ce92cca6750","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Windows.Media.Animation/Storyboard.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Storyboard class | Microsoft Docs","_op_ogTitle":"Storyboard class","description":"A container timeline that provides object and property targeting information for its child animations.\n","toc_asset_id":"_splitted/System.Windows.Media.Animation/toc.json","toc_rel":"_splitted/System.Windows.Media.Animation/toc.json","source_url":"","ms.assetid":"System.Windows.Media.Animation.Storyboard","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.media.animation.storyboard","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.media.animation.storyboard","fileRelativePath":"System.Windows.Media.Animation.Storyboard.html"},"themesRelativePathToOutputRoot":"_themes/"}