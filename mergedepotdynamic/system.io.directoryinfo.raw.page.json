{"content":"    \r\n    <h1 id=\"System_IO_DirectoryInfo\">\r\n      <span class=\"lang-csharp\">DirectoryInfo</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Exposes instance methods for creating, moving, and enumerating through directories and subdirectories. This class cannot be inherited.  </p>\n<p> To browse the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#mscorlib/system/io/directoryinfo.cs#30fa608717e5ce8e\" data-linktype=\"external\">Reference Source</a>.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic sealed class DirectoryInfo : System.IO.FileSystemInfo</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.filesysteminfo\" data-linktype=\"relative-path\">System.IO.FileSystemInfo</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l3\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">DirectoryInfo</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_Attributes\" data-linktype=\"relative-path\">Attributes</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_CreationTime\" data-linktype=\"relative-path\">CreationTime</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_CreationTimeUtc\" data-linktype=\"relative-path\">CreationTimeUtc</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_Extension\" data-linktype=\"relative-path\">Extension</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_FullName\" data-linktype=\"relative-path\">FullName</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_FullPath\" data-linktype=\"relative-path\">FullPath</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"relative-path\">GetObjectData(SerializationInfo,StreamingContext)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastAccessTime\" data-linktype=\"relative-path\">LastAccessTime</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastAccessTimeUtc\" data-linktype=\"relative-path\">LastAccessTimeUtc</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastWriteTime\" data-linktype=\"relative-path\">LastWriteTime</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastWriteTimeUtc\" data-linktype=\"relative-path\">LastWriteTimeUtc</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_OriginalPath\" data-linktype=\"relative-path\">OriginalPath</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_Refresh\" data-linktype=\"relative-path\">Refresh()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_CreateObjRef_System_Type_\" data-linktype=\"relative-path\">CreateObjRef(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_GetLifetimeService\" data-linktype=\"relative-path\">GetLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_InitializeLifetimeService\" data-linktype=\"relative-path\">InitializeLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_MemberwiseClone_System_Boolean_\" data-linktype=\"relative-path\">MemberwiseClone(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <div class=\"NOTE\"><h5>Note</h5><p> To view the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#mscorlib/system/io/directoryinfo.cs#30fa608717e5ce8e\" data-linktype=\"external\">Reference Source</a>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <a href=\"http://referencesource.microsoft.com/\" data-linktype=\"external\">instructions</a>.  </p>\n</div>\n<p> Use the DirectoryInfo class for typical operations such as copying, moving, renaming, creating, and deleting directories.  </p>\n<p> If you are going to reuse an object several times, consider using the instance method of DirectoryInfo instead of the corresponding static methods of the <a class=\"xref\" href=\"system.io.directory\" data-linktype=\"relative-path\">Directory</a> class, because a security check will not always be necessary.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In members that accept a path as an input string, that path must be well-formed or an exception is raised. For example, if a path is fully qualified but begins with a space, the path is not trimmed in methods of the class. Therefore, the path is malformed and an exception is raised. Similarly, a path or a combination of paths cannot be fully qualified twice. For example, &quot;c:\\temp c:\\windows&quot; also raises an exception in most cases. Ensure that your paths are well-formed when using methods that accept a path string.  </p>\n</div>\n<p> In members that accept a path, the path can refer to a file or just a directory. The specified path can also refer to a relative path or a Universal Naming Convention (UNC) path for a server and share name. For example, all the following are acceptable paths:  </p>\n<ul>\n<li><p>&quot;c:\\\\MyDir\\\\MyFile.txt&quot; in C#, or &quot;c:\\MyDir\\MyFile.txt&quot; in Visual Basic.  </p>\n</li>\n<li><p>&quot;c:\\\\MyDir&quot; in C#, or &quot;c:\\MyDir&quot; in Visual Basic.  </p>\n</li>\n<li><p>&quot;MyDir\\\\MySubdir&quot; in C#, or &quot;MyDir\\MySubDir&quot; in Visual Basic.  </p>\n</li>\n<li><p>&quot;\\\\\\\\MyServer\\\\MyShare&quot; in C#, or &quot;\\\\MyServer\\MyShare&quot; in Visual Basic.  </p>\n<p>By default, full read/write access to new directories is granted to all users.  </p>\n<p>For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_DirectoryInfo__ctor_System_String_\" data-linktype=\"self-bookmark\">DirectoryInfo(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> class on the specified path.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_DirectoryInfo_Exists\" data-linktype=\"self-bookmark\">Exists</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the directory exists.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_DirectoryInfo_Name\" data-linktype=\"self-bookmark\">Name</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the name of this <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_DirectoryInfo_Parent\" data-linktype=\"self-bookmark\">Parent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the parent directory of a specified subdirectory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_DirectoryInfo_Root\" data-linktype=\"self-bookmark\">Root</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the root portion of the directory.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_DirectoryInfo_Create\" data-linktype=\"self-bookmark\">Create()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a directory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_DirectoryInfo_Create_System_Security_AccessControl_DirectorySecurity_\" data-linktype=\"self-bookmark\">Create(DirectorySecurity)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a directory using a <a class=\"xref\" href=\"system.security.accesscontrol.directorysecurity\" data-linktype=\"relative-path\">DirectorySecurity</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_DirectoryInfo_CreateSubdirectory_System_String_\" data-linktype=\"self-bookmark\">CreateSubdirectory(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a subdirectory or subdirectories on the specified path. The specified path can be relative to this instance of the <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_DirectoryInfo_CreateSubdirectory_System_String_System_Security_AccessControl_DirectorySecurity_\" data-linktype=\"self-bookmark\">CreateSubdirectory(String,DirectorySecurity)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a subdirectory or subdirectories on the specified path with the specified security. The specified path can be relative to this instance of the <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_DirectoryInfo_Delete\" data-linktype=\"self-bookmark\">Delete()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Deletes this <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> if it is empty.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_DirectoryInfo_Delete_System_Boolean_\" data-linktype=\"self-bookmark\">Delete(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Deletes this instance of a <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a>, specifying whether to delete subdirectories and files.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_DirectoryInfo_EnumerateDirectories\" data-linktype=\"self-bookmark\">EnumerateDirectories()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an enumerable collection of directory information in the current directory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_DirectoryInfo_EnumerateDirectories_System_String_\" data-linktype=\"self-bookmark\">EnumerateDirectories(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an enumerable collection of directory information that matches a specified search pattern.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_DirectoryInfo_EnumerateDirectories_System_String_System_IO_SearchOption_\" data-linktype=\"self-bookmark\">EnumerateDirectories(String,SearchOption)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an enumerable collection of directory information that matches a specified search pattern and search subdirectory option.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_DirectoryInfo_EnumerateFiles\" data-linktype=\"self-bookmark\">EnumerateFiles()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an enumerable collection of file information in the current directory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_DirectoryInfo_EnumerateFiles_System_String_\" data-linktype=\"self-bookmark\">EnumerateFiles(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an enumerable collection of file information that matches a search pattern.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_DirectoryInfo_EnumerateFiles_System_String_System_IO_SearchOption_\" data-linktype=\"self-bookmark\">EnumerateFiles(String,SearchOption)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an enumerable collection of file information that matches a specified search pattern and search subdirectory option.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_DirectoryInfo_EnumerateFileSystemInfos\" data-linktype=\"self-bookmark\">EnumerateFileSystemInfos()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an enumerable collection of file system information in the current directory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_DirectoryInfo_EnumerateFileSystemInfos_System_String_\" data-linktype=\"self-bookmark\">EnumerateFileSystemInfos(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an enumerable collection of file system information that matches a specified search pattern.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_DirectoryInfo_EnumerateFileSystemInfos_System_String_System_IO_SearchOption_\" data-linktype=\"self-bookmark\">EnumerateFileSystemInfos(String,SearchOption)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an enumerable collection of file system information that matches a specified search pattern and search subdirectory option.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_DirectoryInfo_GetAccessControl\" data-linktype=\"self-bookmark\">GetAccessControl()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.security.accesscontrol.directorysecurity\" data-linktype=\"relative-path\">DirectorySecurity</a> object that encapsulates the access control list (ACL) entries for the directory described by the current <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_DirectoryInfo_GetAccessControl_System_Security_AccessControl_AccessControlSections_\" data-linktype=\"self-bookmark\">GetAccessControl(AccessControlSections)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.security.accesscontrol.directorysecurity\" data-linktype=\"relative-path\">DirectorySecurity</a> object that encapsulates the specified type of access control list (ACL) entries for the directory described by the current <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_DirectoryInfo_GetDirectories\" data-linktype=\"self-bookmark\">GetDirectories()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the subdirectories of the current directory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_DirectoryInfo_GetDirectories_System_String_\" data-linktype=\"self-bookmark\">GetDirectories(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an array of directories in the current <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> matching the given search criteria.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_DirectoryInfo_GetDirectories_System_String_System_IO_SearchOption_\" data-linktype=\"self-bookmark\">GetDirectories(String,SearchOption)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an array of directories in the current <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> matching the given search criteria and using a value to determine whether to search subdirectories.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_DirectoryInfo_GetFiles\" data-linktype=\"self-bookmark\">GetFiles()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a file list from the current directory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_DirectoryInfo_GetFiles_System_String_\" data-linktype=\"self-bookmark\">GetFiles(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a file list from the current directory matching the given search pattern.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_DirectoryInfo_GetFiles_System_String_System_IO_SearchOption_\" data-linktype=\"self-bookmark\">GetFiles(String,SearchOption)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a file list from the current directory matching the given search pattern and using a value to determine whether to search subdirectories.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_DirectoryInfo_GetFileSystemInfos\" data-linktype=\"self-bookmark\">GetFileSystemInfos()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an array of strongly typed <a class=\"xref\" href=\"system.io.filesysteminfo\" data-linktype=\"relative-path\">FileSystemInfo</a> entries representing all the files and subdirectories in a directory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_DirectoryInfo_GetFileSystemInfos_System_String_\" data-linktype=\"self-bookmark\">GetFileSystemInfos(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves an array of strongly typed <a class=\"xref\" href=\"system.io.filesysteminfo\" data-linktype=\"relative-path\">FileSystemInfo</a> objects representing the files and subdirectories that match the specified search criteria.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_DirectoryInfo_GetFileSystemInfos_System_String_System_IO_SearchOption_\" data-linktype=\"self-bookmark\">GetFileSystemInfos(String,SearchOption)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves an array of <a class=\"xref\" href=\"system.io.filesysteminfo\" data-linktype=\"relative-path\">FileSystemInfo</a> objects that represent the files and subdirectories matching the specified search criteria.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_DirectoryInfo_MoveTo_System_String_\" data-linktype=\"self-bookmark\">MoveTo(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Moves a <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> instance and its contents to a new path.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_DirectoryInfo_SetAccessControl_System_Security_AccessControl_DirectorySecurity_\" data-linktype=\"self-bookmark\">SetAccessControl(DirectorySecurity)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Applies access control list (ACL) entries described by a <a class=\"xref\" href=\"system.security.accesscontrol.directorysecurity\" data-linktype=\"relative-path\">DirectorySecurity</a> object to the directory described by the current <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_DirectoryInfo_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the original path that was passed by the user.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_IO_DirectoryInfo__ctor_System_String_\">\r\n    \r\n            <a id=\"System_IO_DirectoryInfo__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DirectoryInfo(String)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> class on the specified path.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public DirectoryInfo (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string specifying the path on which to create the <code>DirectoryInfo</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> contains invalid characters such as &quot;, &lt;, &gt;, or |.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. The specified path, file name, or both are too long.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor does not check if a directory exists. This constructor is a placeholder for a string that is used to access the disk in subsequent operations.  </p>\n<p> The <code>path</code> parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.  </p>\n</div>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses this constructor to create the specified directory and subdirectory, and demonstrates that a directory that contains subdirectories cannot be deleted.  </p>\n<pre><code class=\"lang-cs\" name=\"DirInfo Ctor#1\">using System;\nusing System.IO;\n\nclass Test \n{\n    public static void Main() \n    {\n        // Specify the directories you want to manipulate.\n        DirectoryInfo di1 = new DirectoryInfo(@&quot;c:\\MyDir&quot;);\n        DirectoryInfo di2 = new DirectoryInfo(@&quot;c:\\MyDir&nbsp;&nbsp;&nbsp;&nbsp;emp&quot;);\n\n        try \n        {\n            // Create the directories.\n            di1.Create();\n            di2.Create();\n\n            // This operation will not be allowed because there are subdirectories.\n            Console.WriteLine(&quot;I am about to attempt to delete {0}.&quot;, di1.Name);\n            di1.Delete();\n            Console.WriteLine(&quot;The Delete operation was successful, which was unexpected.&quot;);\n        } \n        catch (Exception) \n        {\n            Console.WriteLine(&quot;The Delete operation failed as expected.&quot;);\n        } \n        finally {}\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"DirInfo Ctor#1\">using namespace System;\nusing namespace System::IO;\nint main()\n{\n   \n   // Specify the directories you want to manipulate.\n   DirectoryInfo^ di1 = gcnew DirectoryInfo( &quot;c:\\\\MyDir&quot; );\n   DirectoryInfo^ di2 = gcnew DirectoryInfo( &quot;c:\\\\MyDir\\&nbsp;&nbsp;&nbsp;&nbsp;emp&quot; );\n   try\n   {\n      \n      // Create the directories.\n      di1-&gt;Create();\n      di2-&gt;Create();\n      \n      // This operation will not be allowed because there are subdirectories.\n      Console::WriteLine( &quot;I am about to attempt to delete {0}.&quot;, di1-&gt;Name );\n      di1-&gt;Delete();\n      Console::WriteLine( &quot;The Delete operation was successful, which was unexpected.&quot; );\n   }\n   catch ( Exception^ ) \n   {\n      Console::WriteLine( &quot;The Delete operation failed as expected.&quot; );\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"DirInfo Ctor#1\">Imports System\nImports System.IO\n\nPublic Class Test\n    Public Shared Sub Main()\n        &#39; Specify the directories you want to manipulate.\n        Dim di1 As DirectoryInfo = New DirectoryInfo(&quot;c:\\MyDir&quot;)\n        Dim di2 As DirectoryInfo = New DirectoryInfo(&quot;c:\\MyDir&nbsp;&nbsp;&nbsp;&nbsp;emp&quot;)\n        Try\n            &#39; Create the directories.\n            di1.Create()\n            di2.Create()\n            &#39; This operation will not be allowed because there are subdirectories.\n            Console.WriteLine(&quot;I am about to attempt to delete {0}.&quot;, di1.Name)\n            di1.Delete()\n            Console.WriteLine(&quot;The Delete operation was successful, which was unexpected.&quot;)\n        Catch e As Exception\n            Console.WriteLine(&quot;The Delete operation failed as expected.&quot;)\n        End Try\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_IO_DirectoryInfo_Exists\">\r\n    \r\n            <a id=\"System_IO_DirectoryInfo_Exists_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Exists</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the directory exists.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Exists { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the directory exists; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Exists property returns <code>false</code> if any error occurs while trying to determine if the specified file exists. This can occur in situations that raise exceptions such as passing a file name with invalid characters or too many characters, a failing or missing disk, or if the caller does not have permission to read the file.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates a use of the <code>Exists</code> property in the context of copying a source directory to a target directory.  </p>\n<pre><code class=\"lang-cpp\" name=\"DirectoryInfo Usage Example#1\">using namespace System;\nusing namespace System::IO;\n\n// Copy a source directory to a target directory.\nvoid CopyDirectory( String^ SourceDirectory, String^ TargetDirectory )\n{\n   DirectoryInfo^ source = gcnew DirectoryInfo( SourceDirectory );\n   DirectoryInfo^ target = gcnew DirectoryInfo( TargetDirectory );\n   \n   //Determine whether the source directory exists.\n   if (  !source-&gt;Exists )\n      return;\n\n   if (  !target-&gt;Exists )\n      target-&gt;Create();\n\n   \n   //Copy files.\n   array&lt;FileInfo^&gt;^sourceFiles = source-&gt;GetFiles();\n   for ( int i = 0; i &lt; sourceFiles-&gt;Length; ++i )\n      File::Copy( sourceFiles[ i ]-&gt;FullName, String::Concat( target-&gt;FullName, &quot;\\\\&quot;, sourceFiles[ i ]-&gt;Name ), true );\n   \n   //Copy directories.\n   array&lt;DirectoryInfo^&gt;^sourceDirectories = source-&gt;GetDirectories();\n   for ( int j = 0; j &lt; sourceDirectories-&gt;Length; ++j )\n      CopyDirectory( sourceDirectories[ j ]-&gt;FullName, String::Concat( target-&gt;FullName, &quot;\\\\&quot;, sourceDirectories[ j ]-&gt;Name ) );\n}\n\nint main()\n{\n   CopyDirectory( &quot;D:\\&nbsp;&nbsp;&nbsp;&nbsp;ools&quot;, &quot;D:\\<br>ewTools&quot; );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"DirectoryInfo Usage Example#1\">using System;\nusing System.IO;\n\nnamespace DirectoryInfoCS2\n{\n    class Class1\n    {\n        // Copy a source directory to a target directory.\n        static public void CopyDirectory(string SourceDirectory, string TargetDirectory)\n        {\n            DirectoryInfo\tsource = new DirectoryInfo(SourceDirectory);\n            DirectoryInfo\ttarget = new DirectoryInfo(TargetDirectory);\n\t\t\t\n            //Determine whether the source directory exists.\n            if(!source.Exists)\n                return;\n            if(!target.Exists)\n                target.Create();\n\t\t\t\n            //Copy files.\n            FileInfo[] sourceFiles = source.GetFiles();\t\n            for(int i = 0; i &lt; sourceFiles.Length; ++i)\n                File.Copy(sourceFiles[i].FullName, target.FullName + &quot;\\\\&quot; + sourceFiles[i].Name,true);\n\t\t\t\n            //Copy directories.\n            DirectoryInfo[] sourceDirectories = source.GetDirectories();\t\n            for(int j = 0; j &lt; sourceDirectories.Length; ++j)\n                CopyDirectory(sourceDirectories[j].FullName,target.FullName +&quot;\\\\&quot; + sourceDirectories[j].Name);\n        }\n        \n        static void Main(string[] args)\n        {\n            CopyDirectory(&quot;D:\\&nbsp;&nbsp;&nbsp;&nbsp;ools&quot;,&quot;D:\\<br>ewTools&quot;);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"DirectoryInfo Usage Example#1\">Imports System\nImports System.IO\n\nModule Module1\n    Public Sub CopyDirectory(ByVal SourceDirectory As String, ByVal TargetDirectory As String)\n        Dim source As DirectoryInfo = New DirectoryInfo(SourceDirectory)\n        Dim target As DirectoryInfo = New DirectoryInfo(TargetDirectory)\n\n        &#39;Determine whether the source directory exists.\n        If (source.Exists = False) Then\n            Return\n        End If\n        If (target.Exists = False) Then\n            target.Create()\n        End If\n\n        &#39;Copy files.\n        Dim sourceFiles As FileInfo() = source.GetFiles()\n        Dim i, j As Integer\n        For i = 0 To sourceFiles.Length - 1\n            File.Copy(sourceFiles(i).FullName, target.FullName + &quot;\\\\&quot; + sourceFiles(i).Name, True)\n        Next i\n\n        &#39;Copy directories.\n        Dim sourceDirectories As DirectoryInfo() = source.GetDirectories()\n        For j = 0 To sourceDirectories.Length - 1\n            CopyDirectory(sourceDirectories(j).FullName, target.FullName + &quot;\\\\&quot; + sourceDirectories(j).Name)\n        Next j\n        source = Nothing\n        target = Nothing\n    End Sub\n    Sub Main()\n        CopyDirectory(&quot;D:\\&nbsp;&nbsp;&nbsp;&nbsp;ools&quot;, &quot;D:\\<br>ewTools&quot;)\n    End Sub\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_DirectoryInfo_Name\">\r\n    \r\n            <a id=\"System_IO_DirectoryInfo_Name_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Name</div>        \r\n          </div>\r\n    \r\n            <p>Gets the name of this <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string Name { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The directory name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This Name property returns only the name of the directory, such as &quot;Bin&quot;. To get the full path, such as &quot;c:\\public\\Bin&quot;, use the <a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_FullName_\" data-linktype=\"relative-path\">FullName</a> property.  </p>\n<p> The Name property of a <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> requires no permission (beyond the read permission to the directory necessary to construct the <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_Exists_\" data-linktype=\"relative-path\">Exists</a>) but can give out the directory name. If it is necessary to hand out a <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> to a protected directory with a cryptographically secure name, create a dummy directory for the untrusted code’s use.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the name of the current <code>DirectoryInfo</code> instance only.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic DirectoryInfo.Name Example#1\">using System;\nusing System.IO;\n\nclass GetAName\n{\n    public static void Main(string[] args)\n    {\n        DirectoryInfo dir = new DirectoryInfo(&quot;.&quot;);\n        String dirName=dir.Name;\n        Console.WriteLine(&quot;DirectoryInfo name is {0}.&quot;, dirName);\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic DirectoryInfo.Name Example#1\">Imports System\nImports System.IO\n\nClass GetAName\n    Public Shared Sub Main()\n        Dim dir As New DirectoryInfo(&quot;.&quot;)\n        Dim dirName As String = dir.Name\n        Console.WriteLine(&quot;DirectoryInfo name is {0}.&quot;, dirName)\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic DirectoryInfo.Name Example#1\">using namespace System;\nusing namespace System::IO;\nint main()\n{\n   DirectoryInfo^ dir = gcnew DirectoryInfo( &quot;.&quot; );\n   String^ dirName = dir-&gt;Name;\n   Console::WriteLine( &quot;DirectoryInfo name is {0}.&quot;, dirName );\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_DirectoryInfo_Parent\">\r\n    \r\n            <a id=\"System_IO_DirectoryInfo_Parent_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Parent</div>        \r\n          </div>\r\n    \r\n            <p>Gets the parent directory of a specified subdirectory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.IO.DirectoryInfo Parent { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a></div>\r\n                  </div>\r\n                  <p>The parent directory, or <code>null</code> if the path is null or if the file path denotes a root (such as &quot;\\&quot;, &quot;C:&quot;, or * &quot;\\\\server\\share&quot;).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates referring to the parent directory of a specified directory.  </p>\n<pre><code class=\"lang-cs\" name=\"directoryinfoparent#1\">using System;\nusing System.IO;\n\npublic class MoveToTest \n{\n    public static void Main() \n    {\n\n        // Make a reference to a directory.\n        DirectoryInfo di = new DirectoryInfo(&quot;TempDir&quot;);\n\n        // Create the directory only if it does not already exist.\n        if (di.Exists == false)\n            di.Create();\n\n        // Create a subdirectory in the directory just created.\n        DirectoryInfo dis = di.CreateSubdirectory(&quot;SubDir&quot;);\n\n        // Get a reference to the parent directory of the subdirectory you just made.\n        DirectoryInfo parentDir = dis.Parent;\n        Console.WriteLine(&quot;The parent directory of &#39;{0}&#39; is &#39;{1}&#39;&quot;, dis.Name, parentDir.Name);\n\n        // Delete the parent directory.\n        di.Delete(true);\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"directoryinfoparent#1\">Imports System\nImports System.IO\n\nPublic Class MoveToTest\n\n    Public Shared Sub Main()\n        &#39; Make a reference to a directory.\n        Dim di As New DirectoryInfo(&quot;TempDir&quot;)\n        &#39; Create the directory only if it does not already exist.\n        If di.Exists = False Then\n            di.Create()\n        End If\n\n        &#39; Create a subdirectory in the directory just created.\n        Dim dis As DirectoryInfo = di.CreateSubdirectory(&quot;SubDir&quot;)\n\n        &#39; Get a reference to the parent directory of the subdirectory you just made.\n        Dim parentDir As DirectoryInfo = dis.Parent\n        Console.WriteLine(&quot;The parent directory of &#39;{0}&#39; is &#39;{1}&#39;&quot;, dis.Name, parentDir.Name)\n\n        &#39; Delete the parent directory.\n        di.Delete(True)\n    End Sub &#39;Main\nEnd Class &#39;MoveToTest\n</code></pre><pre><code class=\"lang-cpp\" name=\"directoryinfoparent#1\">using namespace System;\nusing namespace System::IO;\nint main()\n{\n   \n   // Make a reference to a directory.\n   DirectoryInfo^ di = gcnew DirectoryInfo( &quot;TempDir&quot; );\n   \n   // Create the directory only if it does not already exist.\n   if (  !di-&gt;Exists )\n      di-&gt;Create();\n\n   \n   // Create a subdirectory in the directory just created.\n   DirectoryInfo^ dis = di-&gt;CreateSubdirectory( &quot;SubDir&quot; );\n   \n   // Get a reference to the parent directory of the subdirectory you just made.\n   DirectoryInfo^ parentDir = dis-&gt;Parent;\n   Console::WriteLine( &quot;The parent directory of &#39;{0}&#39; is &#39;{1}&#39;&quot;, dis-&gt;Name, parentDir-&gt;Name );\n   \n   // Delete the parent directory.\n   di-&gt;Delete( true );\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_DirectoryInfo_Root\">\r\n    \r\n            <a id=\"System_IO_DirectoryInfo_Root_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Root</div>        \r\n          </div>\r\n    \r\n            <p>Gets the root portion of the directory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.IO.DirectoryInfo Root { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a></div>\r\n                  </div>\r\n                  <p>An object that represents the root of the directory.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays root locations for specified directories.  </p>\n<pre><code class=\"lang-cs\" name=\"directoryinforoot#2\">using System;\nusing System.IO;\n\nnamespace ConsoleApplication1\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            DirectoryInfo di1 = new DirectoryInfo(@&quot;\\&nbsp;&nbsp;&nbsp;&nbsp;empshare&nbsp;&nbsp;&nbsp;&nbsp;empdir&quot;);\n            DirectoryInfo di2 = new DirectoryInfo(&quot;tempdir&quot;);\n            DirectoryInfo di3 = new DirectoryInfo(@&quot;x:&nbsp;&nbsp;&nbsp;&nbsp;empdir&quot;);\n            DirectoryInfo di4 = new DirectoryInfo(@&quot;c:\\&quot;);\n            \n            Console.WriteLine(&quot;The root path of &#39;{0}&#39; is &#39;{1}&#39;&quot;, di1.FullName, di1.Root);\n            Console.WriteLine(&quot;The root path of &#39;{0}&#39; is &#39;{1}&#39;&quot;, di2.FullName, di2.Root);\n            Console.WriteLine(&quot;The root path of &#39;{0}&#39; is &#39;{1}&#39;&quot;, di3.FullName, di3.Root);\n            Console.WriteLine(&quot;The root path of &#39;{0}&#39; is &#39;{1}&#39;&quot;, di4.FullName, di4.Root);\n        }\n    }\n}\n/* \nThis code produces output similar to the following:\n\nThe root path of &#39;\\&nbsp;&nbsp;&nbsp;&nbsp;empshare&nbsp;&nbsp;&nbsp;&nbsp;empdir&#39; is &#39;\\&nbsp;&nbsp;&nbsp;&nbsp;empshare&nbsp;&nbsp;&nbsp;&nbsp;empdir&#39;\nThe root path of &#39;c:\\Projects\\ConsoleApplication1\\ConsoleApplication1\\bin\\Debug&nbsp;&nbsp;&nbsp;&nbsp;empdir&#39; is &#39;c:\\&#39;\nThe root path of &#39;x:&nbsp;&nbsp;&nbsp;&nbsp;empdir&#39; is &#39;x:\\&#39;\nThe root path of &#39;c:\\&#39; is &#39;c:\\&#39;\nPress any key to continue . . .\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"directoryinforoot#2\">Imports System.IO\n\nModule Module1\n\n    Sub Main()\n        Dim di1 As DirectoryInfo = New DirectoryInfo(&quot;\\&nbsp;&nbsp;&nbsp;&nbsp;empshare&nbsp;&nbsp;&nbsp;&nbsp;empdir&quot;)\n        Dim di2 As DirectoryInfo = New DirectoryInfo(&quot;tempdir&quot;)\n        Dim di3 As DirectoryInfo = New DirectoryInfo(&quot;x:&nbsp;&nbsp;&nbsp;&nbsp;empdir&quot;)\n        Dim di4 As DirectoryInfo = New DirectoryInfo(&quot;c:\\&quot;)\n\n        Console.WriteLine(&quot;The root path of &#39;{0}&#39; is &#39;{1}&#39;&quot;, di1.FullName, di1.Root)\n        Console.WriteLine(&quot;The root path of &#39;{0}&#39; is &#39;{1}&#39;&quot;, di2.FullName, di2.Root)\n        Console.WriteLine(&quot;The root path of &#39;{0}&#39; is &#39;{1}&#39;&quot;, di3.FullName, di3.Root)\n        Console.WriteLine(&quot;The root path of &#39;{0}&#39; is &#39;{1}&#39;&quot;, di4.FullName, di4.Root)\n    End Sub\n\nEnd Module\n\n&#39; This code produces output similar to the following:\n\n&#39; The root path of &#39;\\&nbsp;&nbsp;&nbsp;&nbsp;empshare&nbsp;&nbsp;&nbsp;&nbsp;empdir&#39; is &#39;\\&nbsp;&nbsp;&nbsp;&nbsp;empshare&nbsp;&nbsp;&nbsp;&nbsp;empdir&#39;\n&#39; The root path of &#39;c:\\Projects\\ConsoleApplication1\\ConsoleApplication1\\bin\\Debug&nbsp;&nbsp;&nbsp;&nbsp;empdir&#39; is &#39;c:\\&#39;\n&#39; The root path of &#39;x:&nbsp;&nbsp;&nbsp;&nbsp;empdir&#39; is &#39;x:\\&#39;\n&#39; The root path of &#39;c:\\&#39; is &#39;c:\\&#39;\n&#39; Press any key to continue . . .\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_IO_DirectoryInfo_Create\">\r\n    \r\n            <a id=\"System_IO_DirectoryInfo_Create_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Create()</div>        \r\n          </div>\r\n    \r\n            <p>Creates a directory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Create ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>The directory cannot be created.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the directory already exists, this method does nothing.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example checks whether a specified directory exists, creates the directory if it does not exist, and deletes the directory.  </p>\n<pre><code class=\"lang-cpp\" name=\"DirInfo Create#1\">using namespace System;\nusing namespace System::IO;\nint main()\n{\n   \n   // Specify the directories you want to manipulate.\n   DirectoryInfo^ di = gcnew DirectoryInfo( &quot;c:\\\\MyDir&quot; );\n   try\n   {\n      \n      // Determine whether the directory exists.\n      if ( di-&gt;Exists )\n      {\n         \n         // Indicate that it already exists.\n         Console::WriteLine( &quot;That path exists already.&quot; );\n         return 0;\n      }\n      \n      // Try to create the directory.\n      di-&gt;Create();\n      Console::WriteLine( &quot;The directory was created successfully.&quot; );\n      \n      // Delete the directory.\n      di-&gt;Delete();\n      Console::WriteLine( &quot;The directory was deleted successfully.&quot; );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;The process failed: {0}&quot;, e );\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"DirInfo Create#1\">using System;\nusing System.IO;\n\nclass Test \n{\n    public static void Main() \n    {\n        // Specify the directories you want to manipulate.\n        DirectoryInfo di = new DirectoryInfo(@&quot;c:\\MyDir&quot;);\n\n        try \n        {\n            // Determine whether the directory exists.\n            if (di.Exists) \n            {\n                // Indicate that it already exists.\n                Console.WriteLine(&quot;That path exists already.&quot;);\n                return;\n            }\n\n            // Try to create the directory.\n            di.Create();\n            Console.WriteLine(&quot;The directory was created successfully.&quot;);\n\n            // Delete the directory.\n            di.Delete();\n            Console.WriteLine(&quot;The directory was deleted successfully.&quot;);\n\n        } \n        catch (Exception e) \n        {\n            Console.WriteLine(&quot;The process failed: {0}&quot;, e.ToString());\n        } \n        finally {}\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"DirInfo Create#1\">Imports System\nImports System.IO\n\nPublic Class Test\n\n    Public Shared Sub Main()\n        &#39; Specify the directories you want to manipulate.\n        Dim di As DirectoryInfo = New DirectoryInfo(&quot;c:\\MyDir&quot;)\n        Try\n            &#39; Determine whether the directory exists.\n            If di.Exists Then\n                &#39; Indicate that it already exists.\n                Console.WriteLine(&quot;That path exists already.&quot;)\n                Return\n            End If\n\n            &#39; Try to create the directory.\n            di.Create()\n            Console.WriteLine(&quot;The directory was created successfully.&quot;)\n\n            &#39;Delete the directory.\n            di.Delete()\n            Console.WriteLine(&quot;The directory was deleted successfully.&quot;)\n\n        Catch e As Exception\n            Console.WriteLine(&quot;The process failed: {0}&quot;, e.ToString())\n        End Try\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_DirectoryInfo_Create_System_Security_AccessControl_DirectorySecurity_\">\r\n    \r\n            <a id=\"System_IO_DirectoryInfo_Create_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Create(DirectorySecurity)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a directory using a <a class=\"xref\" href=\"system.security.accesscontrol.directorysecurity\" data-linktype=\"relative-path\">DirectorySecurity</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Create (System.Security.AccessControl.DirectorySecurity directorySecurity);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>directorySecurity</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.directorysecurity\" data-linktype=\"relative-path\">DirectorySecurity</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The access control to apply to the directory.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>The directory specified by <code>path</code> is read-only or is not empty.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <a class=\"xref\" href=\"system.io.path#System_IO_Path_InvalidPathChars\" data-linktype=\"relative-path\">InvalidPathChars</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path is invalid, such as being on an unmapped drive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>Creating a directory with only the colon (:) character was attempted.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method overload to create a directory with access control, so there is no chance the directory can be accessed before security is applied.  </p>\n<p> If the directory already exists, this method does nothing.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_DirectoryInfo_CreateSubdirectory_System_String_\">\r\n    \r\n            <a id=\"System_IO_DirectoryInfo_CreateSubdirectory_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateSubdirectory(String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a subdirectory or subdirectories on the specified path. The specified path can be relative to this instance of the <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.IO.DirectoryInfo CreateSubdirectory (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The specified path. This cannot be a different disk volume or Universal Naming Convention (UNC) name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a></div>\r\n                  </div>\r\n                  <p>The last directory specified in <code>path</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> does not specify a valid file path or contains invalid <code>DirectoryInfo</code> characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path is invalid, such as being on an unmapped drive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>The subdirectory cannot be created.  </p>\n<p> -or-  </p>\n<p> A file or directory already has the name specified by <code>path</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. The specified path, file name, or both are too long.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have code access permission to create the directory.  </p>\n<p> -or-  </p>\n<p> The caller does not have code access permission to read the directory described by the returned <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> object.  This can occur when the <code>path</code> parameter describes an existing directory.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> contains a colon character (:) that is not part of a drive label (&quot;C:\\&quot;).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Any and all directories specified in <code>path</code> are created, unless some part of <code>path</code> is invalid. The <code>path</code> parameter specifies a directory path, not a file path. If the subdirectory already exists, this method does nothing.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Path names are limited to 248 characters.  </p>\n</div>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates creating a subdirectory. In this example, the created directories are removed once created. Therefore, to test this sample, comment out the delete lines in the code.  </p>\n<pre><code class=\"lang-cpp\" name=\"directoryinfocreatesub#1\">using namespace System;\nusing namespace System::IO;\nint main()\n{\n   \n   // Create a reference to a directory.\n   DirectoryInfo^ di = gcnew DirectoryInfo( &quot;TempDir&quot; );\n   \n   // Create the directory only if it does not already exist.\n   if ( di-&gt;Exists == false )\n      di-&gt;Create();\n\n   \n   // Create a subdirectory in the directory just created.\n   DirectoryInfo^ dis = di-&gt;CreateSubdirectory( &quot;SubDir&quot; );\n   \n   // Process that directory as required.\n   // ...\n   // Delete the subdirectory.\n   dis-&gt;Delete( true );\n   \n   // Delete the directory.\n   di-&gt;Delete( true );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"directoryinfocreatesub#1\">using System;\nusing System.IO;\n\npublic class CreateSubTest \n{\n    public static void Main() \n    {\n        // Create a reference to a directory.\n        DirectoryInfo di = new DirectoryInfo(&quot;TempDir&quot;);\n\n        // Create the directory only if it does not already exist.\n        if (di.Exists == false)\n            di.Create();\n\n        // Create a subdirectory in the directory just created.\n        DirectoryInfo dis = di.CreateSubdirectory(&quot;SubDir&quot;);\n\n        // Process that directory as required.\n        // ...\n\n        // Delete the subdirectory.\n        dis.Delete(true);\n\n        // Delete the directory.\n        di.Delete(true);\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"directoryinfocreatesub#1\">Imports System\nImports System.IO\n\nPublic Class CreateSubTest\n\n    Public Shared Sub Main()\n        &#39; Make a reference to a directory.\n        Dim di As New DirectoryInfo(&quot;TempDir&quot;)\n\n        &#39; Create the directory only if it does not already exist.\n        If di.Exists = False Then\n            di.Create()\n        End If\n\n        &#39; Create a subdirectory in the directory just created.\n        Dim dis As DirectoryInfo = di.CreateSubdirectory(&quot;SubDir&quot;)\n\n        &#39; Process that directory as required.\n        &#39; ...\n\n        &#39; Delete the subdirectory.\n        dis.Delete(True)\n\n        &#39; Delete the directory.\n        di.Delete(True)\n    End Sub &#39;Main\nEnd Class &#39;CreateSubTest\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_DirectoryInfo_CreateSubdirectory_System_String_System_Security_AccessControl_DirectorySecurity_\">\r\n    \r\n            <a id=\"System_IO_DirectoryInfo_CreateSubdirectory_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateSubdirectory(String,DirectorySecurity)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a subdirectory or subdirectories on the specified path with the specified security. The specified path can be relative to this instance of the <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.IO.DirectoryInfo CreateSubdirectory (string path, System.Security.AccessControl.DirectorySecurity directorySecurity);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The specified path. This cannot be a different disk volume or Universal Naming Convention (UNC) name.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>directorySecurity</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.directorysecurity\" data-linktype=\"relative-path\">DirectorySecurity</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The security to apply.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a></div>\r\n                  </div>\r\n                  <p>The last directory specified in <code>path</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> does not specify a valid file path or contains invalid <code>DirectoryInfo</code> characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path is invalid, such as being on an unmapped drive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>The subdirectory cannot be created.  </p>\n<p> -or-  </p>\n<p> A file or directory already has the name specified by <code>path</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. The specified path, file name, or both are too long.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have code access permission to create the directory.  </p>\n<p> -or-  </p>\n<p> The caller does not have code access permission to read the directory described by the returned <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> object.  This can occur when the <code>path</code> parameter describes an existing directory.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> contains a colon character (:) that is not part of a drive label (&quot;C:\\&quot;).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Any and all directories specified in <code>path</code> are created, unless some part of <code>path</code> is invalid. The <code>path</code> parameter specifies a directory path, not a file path. If the subdirectory already exists, this method does nothing.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Path names are limited to 248 characters.  </p>\n</div>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_DirectoryInfo_Delete\">\r\n    \r\n            <a id=\"System_IO_DirectoryInfo_Delete_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Delete()</div>        \r\n          </div>\r\n    \r\n            <p>Deletes this <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> if it is empty.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void Delete ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The directory contains a read-only file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The directory described by this <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> object does not exist or could not be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>The directory is not empty.  </p>\n<p> -or-  </p>\n<p> The directory is the application&#39;s current working directory.  </p>\n<p> -or-  </p>\n<p> There is an open handle on the directory, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories. For more information, see <a href=\"../Topic/How%20to:%20Enumerate%20Directories%20and%20Files.md\" data-linktype=\"relative-path\">How to: Enumerate Directories and Files</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example throws an exception if you attempt to delete a directory that is not empty.  </p>\n<pre><code class=\"lang-cpp\" name=\"DirInfo Delete1#1\">using namespace System;\nusing namespace System::IO;\nint main()\n{\n   \n   // Specify the directories you want to manipulate.\n   DirectoryInfo^ di1 = gcnew DirectoryInfo( &quot;c:\\\\MyDir&quot; );\n   try\n   {\n      \n      // Create the directories.\n      di1-&gt;Create();\n      di1-&gt;CreateSubdirectory( &quot;temp&quot; );\n      \n      //This operation will not be allowed because there are subdirectories.\n      Console::WriteLine( &quot;I am about to attempt to delete {0}&quot;, di1-&gt;Name );\n      di1-&gt;Delete();\n      Console::WriteLine( &quot;The Delete operation was successful, which was unexpected.&quot; );\n   }\n   catch ( Exception^ ) \n   {\n      Console::WriteLine( &quot;The Delete operation failed as expected.&quot; );\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"DirInfo Delete1#1\">using System;\nusing System.IO;\n\nclass Test \n{\n    public static void Main() \n    {\n        // Specify the directories you want to manipulate.\n        DirectoryInfo di1 = new DirectoryInfo(@&quot;c:\\MyDir&quot;);\n\n        try \n        {\n            // Create the directories.\n            di1.Create();\n            di1.CreateSubdirectory(&quot;temp&quot;);\n\n            //This operation will not be allowed because there are subdirectories.\n            Console.WriteLine(&quot;I am about to attempt to delete {0}&quot;, di1.Name);\n            di1.Delete();\n            Console.WriteLine(&quot;The Delete operation was successful, which was unexpected.&quot;);\n        } \n        catch (Exception) \n        {\n            Console.WriteLine(&quot;The Delete operation failed as expected.&quot;);\n        } \n        finally {}\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"DirInfo Delete1#1\">Imports System\nImports System.IO\n\nPublic Class Test\n    Public Shared Sub Main()\n        &#39; Specify the directories you want to manipulate.\n        Dim di1 As DirectoryInfo = New DirectoryInfo(&quot;c:\\MyDir&quot;)\n\n        Try\n            &#39; Create the directories.\n            di1.Create()\n            di1.CreateSubdirectory(&quot;temp&quot;)\n\n            &#39;This operation will not be allowed because there are subdirectories.\n            Console.WriteLine(&quot;I am about to attempt to delete {0}&quot;, di1.Name)\n            di1.Delete()\n            Console.WriteLine(&quot;The Delete operation was successful, which was unexpected.&quot;)\n\n        Catch\n            Console.WriteLine(&quot;The Delete operation was unsuccessful, as expected.&quot;)\n        End Try\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_DirectoryInfo_Delete_System_Boolean_\">\r\n    \r\n            <a id=\"System_IO_DirectoryInfo_Delete_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Delete(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Deletes this instance of a <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a>, specifying whether to delete subdirectories and files.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Delete (bool recursive);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>recursive</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to delete this directory, its subdirectories, and all files; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The directory contains a read-only file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The directory described by this <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> object does not exist or could not be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>The directory is read-only.  </p>\n<p> -or-  </p>\n<p> The directory contains one or more files or subdirectories and <code>recursive</code> is <code>false</code>.  </p>\n<p> -or-  </p>\n<p> The directory is the application&#39;s current working directory.  </p>\n<p> -or-  </p>\n<p> There is an open handle on the directory or on one of its files, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories and files. For more information, see <a href=\"../Topic/How%20to:%20Enumerate%20Directories%20and%20Files.md\" data-linktype=\"relative-path\">How to: Enumerate Directories and Files</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the <code>DirectoryInfo</code> has no files or subdirectories, this method deletes the <code>DirectoryInfo</code> even if <code>recursive</code> is <code>false</code>. Attempting to delete a <code>DirectoryInfo</code> that is not empty when <code>recursive</code> is <code>false</code> throws an <a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a>.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates deleting a directory. Because the directory is removed, first comment out the <code>Delete</code> line to test that the directory exists. Then uncomment the same line of code to test that the directory was removed successfully.  </p>\n<pre><code class=\"lang-vb\" name=\"directoryinfodelete#1\">Imports System\nImports System.IO\n\nPublic Class DeleteTest\n\n    Public Shared Sub Main()\n        &#39; Make a reference to a directory.\n        Dim di As New DirectoryInfo(&quot;TempDir&quot;)\n\n        &#39; Create the directory only if it does not already exist.\n        If di.Exists = False Then\n            di.Create()\n        End If\n\n        Dim dis As DirectoryInfo = di.CreateSubdirectory(&quot;SubDir&quot;)\n        &#39; Create a subdirectory in the directory just created.\n\n        &#39; Process that directory as required.\n        &#39; ...\n\n        &#39; Delete the subdirectory. The true indicates that if subdirectories\n        &#39; or files are in this directory, they are to be deleted as well.\n        dis.Delete(True)\n\n        &#39; Delete the directory.\n        di.Delete(True)\n    End Sub &#39;Main\nEnd Class &#39;DeleteTest\n</code></pre><pre><code class=\"lang-cs\" name=\"directoryinfodelete#1\">using System;\nusing System.IO;\n\npublic class DeleteTest \n{\n    public static void Main() \n    {\n\n        // Make a reference to a directory.\n        DirectoryInfo di = new DirectoryInfo(&quot;TempDir&quot;);\n\n        // Create the directory only if it does not already exist.\n        if (di.Exists == false)\n            di.Create();\n\n        // Create a subdirectory in the directory just created.\n        DirectoryInfo dis = di.CreateSubdirectory(&quot;SubDir&quot;);\n\n        // Process that directory as required.\n        // ...\n\n        // Delete the subdirectory. The true indicates that if subdirectories\n        // or files are in this directory, they are to be deleted as well.\n        dis.Delete(true);\n\n        // Delete the directory.\n        di.Delete(true);\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"directoryinfodelete#1\">using namespace System;\nusing namespace System::IO;\nint main()\n{\n   \n   // Make a reference to a directory.\n   DirectoryInfo^ di = gcnew DirectoryInfo( &quot;TempDir&quot; );\n   \n   // Create the directory only if it does not already exist.\n   if (  !di-&gt;Exists )\n      di-&gt;Create();\n\n   \n   // Create a subdirectory in the directory just created.\n   DirectoryInfo^ dis = di-&gt;CreateSubdirectory( &quot;SubDir&quot; );\n   \n   // Process that directory as required.\n   // ...\n   // Delete the subdirectory. The true indicates that if subdirectories\n   // or files are in this directory, they are to be deleted as well.\n   dis-&gt;Delete( true );\n   \n   // Delete the directory.\n   di-&gt;Delete( true );\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_DirectoryInfo_EnumerateDirectories\">\r\n    \r\n            <a id=\"System_IO_DirectoryInfo_EnumerateDirectories_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EnumerateDirectories()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an enumerable collection of directory information in the current directory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Generic.IEnumerable&lt;System.IO.DirectoryInfo&gt; EnumerateDirectories ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a>&gt;</div>\r\n                  </div>\r\n                  <p>An enumerable collection of directories in the current directory.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The path encapsulated in the <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> object is invalid (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The EnumerateDirectories and <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_GetDirectories_\" data-linktype=\"relative-path\">GetDirectories</a> methods differ as follows:  </p>\n<ul>\n<li><p>When you use EnumerateDirectories, you can start enumerating the collection of <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> objects before the whole collection is returned.  </p>\n</li>\n<li><p>When you use <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_GetDirectories_\" data-linktype=\"relative-path\">GetDirectories</a>, you must wait for the whole array of <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> objects to be returned before you can access the array.  </p>\n<p>Therefore, when you are working with many files and directories, EnumerateDirectories can be more efficient.  </p>\n<p>This method pre-populates the values of the following <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> properties:  </p>\n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_Attributes_\" data-linktype=\"relative-path\">Attributes</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_CreationTime_\" data-linktype=\"relative-path\">CreationTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_CreationTimeUtc_\" data-linktype=\"relative-path\">CreationTimeUtc</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastAccessTime_\" data-linktype=\"relative-path\">LastAccessTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastAccessTimeUtc_\" data-linktype=\"relative-path\">LastAccessTimeUtc</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastWriteTime_\" data-linktype=\"relative-path\">LastWriteTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastWriteTimeUtc_\" data-linktype=\"relative-path\">LastWriteTimeUtc</a>  \n\n<p>The returned collection is not cached; each call to the <a class=\"xref\" href=\"system.collections.generic.ienumerable-1#System_Collections_Generic_IEnumerable_1_GetEnumerator_\" data-linktype=\"relative-path\">GetEnumerator</a> method on  the collection will start a new enumeration.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example enumerates the subdirectories under the C:\\Program Files directory and uses a LINQ query to return the names of all directories that were created before 2009 by checking the value of the <a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_CreationTimeUtc_\" data-linktype=\"relative-path\">CreationTimeUtc</a> property.  </p>\n<p> If you only need the names of the subdirectories, use the static <a class=\"xref\" href=\"system.io.directory\" data-linktype=\"relative-path\">Directory</a> class for better performance. For an example, see the <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateDirectories_System_String_\" data-linktype=\"relative-path\">EnumerateDirectories(String)</a> method.  </p>\n<pre><code class=\"lang-vb\" name=\"System.IO.DirectoryInfo.EnumDirs#1\">        Dim dirPrograms As New DirectoryInfo(&quot;c:\\program files&quot;)\n        Dim StartOf2009 As New DateTime(2009, 1, 1)\n\n        Dim dirs = From dir In dirPrograms.EnumerateDirectories()\n                    Where dir.CreationTimeUtc &lt; StartOf2009\n\n        For Each di As DirectoryInfo In dirs\n            Console.WriteLine(&quot;{0}&quot;, di.Name)\n        Next\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IO.DirectoryInfo.EnumDirs#1\">DirectoryInfo dirPrograms = new DirectoryInfo(@&quot;c:\\program files&quot;);\nDateTime StartOf2009 = new DateTime(2009, 01, 01);\n\nvar dirs = from dir in dirPrograms.EnumerateDirectories()\n            where dir.CreationTimeUtc &lt; StartOf2009\n            select new\n            {\n                ProgDir = dir,\n            };\n\nforeach (var di in dirs)\n{\n    Console.WriteLine(&quot;{0}&quot;, di.ProgDir.Name);\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_DirectoryInfo_EnumerateDirectories_System_String_\">\r\n    \r\n            <a id=\"System_IO_DirectoryInfo_EnumerateDirectories_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EnumerateDirectories(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an enumerable collection of directory information that matches a specified search pattern.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Generic.IEnumerable&lt;System.IO.DirectoryInfo&gt; EnumerateDirectories (string searchPattern);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>searchPattern</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn&#39;t support regular expressions. The default pattern is &quot;*&quot;, which returns all files.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a>&gt;</div>\r\n                  </div>\r\n                  <p>An enumerable collection of directories that matches <code>searchPattern</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>searchPattern</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The path encapsulated in the <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> object is invalid (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>searchPattern</code> can be a combination of literal and wildcard characters, but doesn&#39;t support regular expressions. The following wildcard specifiers are permitted in <code>searchPattern</code>.  </p>\n<table>\n<thead>\n<tr>\n<th>Wildcard specifier</th>\n<th>Matches</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>* (asterisk)</td>\n<td>Zero or more characters in that position.</td>\n</tr>\n<tr>\n<td>? (question mark)</td>\n<td>Zero or one character in that position.</td>\n</tr>\n</tbody>\n</table>\n<p> Characters other than the wildcard are literal characters. For example, the  string &quot;<em>t&quot; searches for all names in  ending with the letter &quot;t&quot;. &quot;. The <code>searchPattern</code> string &quot;s\\</em>&quot; searches for all names in <code>path</code> beginning with the letter &quot;s&quot;.  </p>\n<p> The <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_EnumerateDirectories_\" data-linktype=\"relative-path\">EnumerateDirectories</a> and <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_GetDirectories_\" data-linktype=\"relative-path\">GetDirectories</a> methods differ as follows:  </p>\n<ul>\n<li><p>When you use <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_EnumerateDirectories_\" data-linktype=\"relative-path\">EnumerateDirectories</a>, you can start enumerating the collection of <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> objects before the whole collection is returned.  </p>\n</li>\n<li><p>When you use <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_GetDirectories_\" data-linktype=\"relative-path\">GetDirectories</a>, you must wait for the whole array of <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> objects to be returned before you can access the array.  </p>\n<p>Therefore, when you are working with many files and directories, <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_EnumerateDirectories_\" data-linktype=\"relative-path\">EnumerateDirectories</a> can be more efficient.  </p>\n<p>This method pre-populates the values of the following <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> properties:  </p>\n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_Attributes_\" data-linktype=\"relative-path\">Attributes</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_CreationTime_\" data-linktype=\"relative-path\">CreationTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_CreationTimeUtc_\" data-linktype=\"relative-path\">CreationTimeUtc</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastAccessTime_\" data-linktype=\"relative-path\">LastAccessTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastAccessTimeUtc_\" data-linktype=\"relative-path\">LastAccessTimeUtc</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastWriteTime_\" data-linktype=\"relative-path\">LastWriteTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastWriteTimeUtc_\" data-linktype=\"relative-path\">LastWriteTimeUtc</a>  \n\n<p>The returned collection is not cached; each call to the <a class=\"xref\" href=\"system.collections.generic.ienumerable-1#System_Collections_Generic_IEnumerable_1_GetEnumerator_\" data-linktype=\"relative-path\">GetEnumerator</a> method on  the collection will start a new enumeration.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_DirectoryInfo_EnumerateDirectories_System_String_System_IO_SearchOption_\">\r\n    \r\n            <a id=\"System_IO_DirectoryInfo_EnumerateDirectories_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EnumerateDirectories(String,SearchOption)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an enumerable collection of directory information that matches a specified search pattern and search subdirectory option.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Generic.IEnumerable&lt;System.IO.DirectoryInfo&gt; EnumerateDirectories (string searchPattern, System.IO.SearchOption searchOption);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>searchPattern</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn&#39;t support regular expressions. The default pattern is &quot;*&quot;, which returns all files.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>searchOption</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.searchoption\" data-linktype=\"relative-path\">SearchOption</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <a class=\"xref\" href=\"system.io.searchoption\" data-linktype=\"relative-path\">SearchOption</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a>&gt;</div>\r\n                  </div>\r\n                  <p>An enumerable collection of directories that matches <code>searchPattern</code> and <code>searchOption</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>searchPattern</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>searchOption</code> is not a valid <a class=\"xref\" href=\"system.io.searchoption\" data-linktype=\"relative-path\">SearchOption</a> value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The path encapsulated in the <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> object is invalid (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>searchPattern</code> can be a combination of literal and wildcard characters, but doesn&#39;t support regular expressions. The following wildcard specifiers are permitted in <code>searchPattern</code>.  </p>\n<table>\n<thead>\n<tr>\n<th>Wildcard specifier</th>\n<th>Matches</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>* (asterisk)</td>\n<td>Zero or more characters in that position.</td>\n</tr>\n<tr>\n<td>? (question mark)</td>\n<td>Zero or one character in that position.</td>\n</tr>\n</tbody>\n</table>\n<p> Characters other than the wildcard are literal characters. For example, the  string &quot;<em>t&quot; searches for all names in  ending with the letter &quot;t&quot;. &quot;. The <code>searchPattern</code> string &quot;s\\</em>&quot; searches for all names in <code>path</code> beginning with the letter &quot;s&quot;.  </p>\n<p> The <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_EnumerateDirectories_\" data-linktype=\"relative-path\">EnumerateDirectories</a> and <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_GetDirectories_\" data-linktype=\"relative-path\">GetDirectories</a> methods differ as follows:  </p>\n<ul>\n<li><p>When you use <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_EnumerateDirectories_\" data-linktype=\"relative-path\">EnumerateDirectories</a>, you can start enumerating the collection of <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> objects before the whole collection is returned.  </p>\n</li>\n<li><p>When you use <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_GetDirectories_\" data-linktype=\"relative-path\">GetDirectories</a>, you must wait for the whole array of <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> objects to be returned before you can access the array.  </p>\n<p>Therefore, when you are working with many files and directories, <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_EnumerateDirectories_\" data-linktype=\"relative-path\">EnumerateDirectories</a> can be more efficient.  </p>\n<p>This method pre-populates the values of the following <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> properties:  </p>\n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_Attributes_\" data-linktype=\"relative-path\">Attributes</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_CreationTime_\" data-linktype=\"relative-path\">CreationTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_CreationTimeUtc_\" data-linktype=\"relative-path\">CreationTimeUtc</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastAccessTime_\" data-linktype=\"relative-path\">LastAccessTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastAccessTimeUtc_\" data-linktype=\"relative-path\">LastAccessTimeUtc</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastWriteTime_\" data-linktype=\"relative-path\">LastWriteTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastWriteTimeUtc_\" data-linktype=\"relative-path\">LastWriteTimeUtc</a>  \n\n<p>The returned collection is not cached; each call to the <a class=\"xref\" href=\"system.collections.generic.ienumerable-1#System_Collections_Generic_IEnumerable_1_GetEnumerator_\" data-linktype=\"relative-path\">GetEnumerator</a> method on  the collection will start a new enumeration.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example, starting from a specified directory, uses this method and the <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_EnumerateFiles_\" data-linktype=\"relative-path\">EnumerateFiles</a> method to enumerate the files and directories within the start directory and display details of any files over 10 MB in size.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.DirectoryInfo.EnumerateDirectories#1\">using System;\nusing System.IO;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        DirectoryInfo diTop = new DirectoryInfo(@&quot;d:\\&quot;);\n        try\n        {\n            foreach (var fi in diTop.EnumerateFiles())\n            {\n                try\n                {\n                    // Display each file over 10 MB;\n                    if (fi.Length &gt; 10000000)\n                    {\n                        Console.WriteLine(&quot;{0}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, fi.FullName, fi.Length.ToString(&quot;N0&quot;));\n                    }\n                }\n                catch (UnauthorizedAccessException UnAuthTop)\n                {\n                    Console.WriteLine(&quot;{0}&quot;, UnAuthTop.Message);\n                }\n            }\n            \n            foreach (var di in diTop.EnumerateDirectories(&quot;*&quot;))\n            {\n                try\n                {\n                    foreach (var fi in di.EnumerateFiles(&quot;*&quot;, SearchOption.AllDirectories))\n                    {\n                        try\n                        {\n                            // Display each file over 10 MB;\n                            if (fi.Length &gt; 10000000)\n                            {\n                                Console.WriteLine(&quot;{0}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;,  fi.FullName, fi.Length.ToString(&quot;N0&quot;));\n                            }\n                        }\n                        catch (UnauthorizedAccessException UnAuthFile)\n                        {\n                            Console.WriteLine(&quot;UnAuthFile: {0}&quot;, UnAuthFile.Message);\n                        }\n                    }\n                }\n                catch (UnauthorizedAccessException UnAuthSubDir)\n                {\n                    Console.WriteLine(&quot;UnAuthSubDir: {0}&quot;, UnAuthSubDir.Message);\n                }\n            }\n        }\n        catch (DirectoryNotFoundException DirNotFound)\n        {\n            Console.WriteLine(&quot;{0}&quot;, DirNotFound.Message);\n        }\n        catch (UnauthorizedAccessException UnAuthDir)\n        {\n            Console.WriteLine(&quot;UnAuthDir: {0}&quot;, UnAuthDir.Message);\n        }\n        catch (PathTooLongException LongPath)\n        {\n            Console.WriteLine(&quot;{0}&quot;, LongPath.Message);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.DirectoryInfo.EnumerateDirectories#1\">Imports System\nImports System.IO\n\nClass Program\n    Public Shared Sub Main(ByVal args As String())\n        Dim diTop As New DirectoryInfo(&quot;d:\\&quot;)\n        Try\n            For Each fi In diTop.EnumerateFiles()\n                Try\n                    &#39; Display each file over 10 MB;\n                    If fi.Length &gt; 10000000 Then\n                        Console.WriteLine(&quot;{0}&quot; &amp; vbTab &amp; vbTab &amp; &quot;{1}&quot;, fi.FullName, fi.Length.ToString(&quot;N0&quot;))\n                    End If\n                Catch UnAuthTop As UnauthorizedAccessException\n                    Console.WriteLine(&quot;{0}&quot;, UnAuthTop.Message)\n                End Try\n            Next\n\n            For Each di In diTop.EnumerateDirectories(&quot;*&quot;)\n                Try\n                    For Each fi In di.EnumerateFiles(&quot;*&quot;, SearchOption.AllDirectories)\n                        Try\n                            &#39; // Display each file over 10 MB;\n                            If fi.Length &gt; 10000000 Then\n                                Console.WriteLine(&quot;{0}&quot; &amp; vbTab &amp;\n                                vbTab &amp; &quot;{1}&quot;, fi.FullName, fi.Length.ToString(&quot;N0&quot;))\n                            End If\n                        Catch UnAuthFile As UnauthorizedAccessException\n                            Console.WriteLine(&quot;UnAuthFile: {0}&quot;, UnAuthFile.Message)\n                        End Try\n                    Next\n                Catch UnAuthSubDir As UnauthorizedAccessException\n                    Console.WriteLine(&quot;UnAuthSubDir: {0}&quot;, UnAuthSubDir.Message)\n                End Try\n            Next\n        Catch DirNotFound As DirectoryNotFoundException\n            Console.WriteLine(&quot;{0}&quot;, DirNotFound.Message)\n        Catch UnAuthDir As UnauthorizedAccessException\n            Console.WriteLine(&quot;UnAuthDir: {0}&quot;, UnAuthDir.Message)\n        Catch LongPath As PathTooLongException\n            Console.WriteLine(&quot;{0}&quot;, LongPath.Message)\n        End Try\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_DirectoryInfo_EnumerateFiles\">\r\n    \r\n            <a id=\"System_IO_DirectoryInfo_EnumerateFiles_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EnumerateFiles()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an enumerable collection of file information in the current directory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Generic.IEnumerable&lt;System.IO.FileInfo&gt; EnumerateFiles ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a>&gt;</div>\r\n                  </div>\r\n                  <p>An enumerable collection of the files in the current directory.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The path encapsulated in the <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> object is invalid (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The EnumerateFiles and <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_GetFiles_\" data-linktype=\"relative-path\">GetFiles</a> methods differ as follows:  </p>\n<ul>\n<li><p>When you use EnumerateFiles, you can start enumerating the collection of <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> objects before the whole collection is returned.  </p>\n</li>\n<li><p>When you use <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_GetFiles_\" data-linktype=\"relative-path\">GetFiles</a>, you must wait for the whole array of <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> objects to be returned before you can access the array.  </p>\n<p>Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.  </p>\n<p>This method pre-populates the values of the following <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> properties:  </p>\n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_Attributes_\" data-linktype=\"relative-path\">Attributes</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_CreationTime_\" data-linktype=\"relative-path\">CreationTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_CreationTimeUtc_\" data-linktype=\"relative-path\">CreationTimeUtc</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastAccessTime_\" data-linktype=\"relative-path\">LastAccessTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastAccessTimeUtc_\" data-linktype=\"relative-path\">LastAccessTimeUtc</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastWriteTime_\" data-linktype=\"relative-path\">LastWriteTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastWriteTimeUtc_\" data-linktype=\"relative-path\">LastWriteTimeUtc</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_Length_\" data-linktype=\"relative-path\">Length</a>  \n\n<p>The returned collection is not cached; each call to the <a class=\"xref\" href=\"system.collections.generic.ienumerable-1#System_Collections_Generic_IEnumerable_1_GetEnumerator_\" data-linktype=\"relative-path\">GetEnumerator</a> method on the collection will start a new enumeration.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example enumerates the files under a specified directory and uses a LINQ query to return the names of all files that were created before 2009 by checking the value of the <a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_CreationTimeUtc_\" data-linktype=\"relative-path\">CreationTimeUtc</a> property.  </p>\n<p> If you only need the names of the files, use the static <a class=\"xref\" href=\"system.io.directory\" data-linktype=\"relative-path\">Directory</a> class for better performance. For an example, see the <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateFiles_System_String_\" data-linktype=\"relative-path\">System.IO.Directory.EnumerateFiles(String)</a> method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.DirectoryInfo.EnumFiles#1\">// Create a DirectoryInfo of the directory of the files to enumerate.\nDirectoryInfo DirInfo = new DirectoryInfo(@&quot;\\\\archives1\\library\\&quot;);\n\nDateTime StartOf2009 = new DateTime(2009, 01, 01);\n\n// LINQ query for all files created before 2009.\nvar files = from f in DirInfo.EnumerateFiles()\n\t\t   where f.CreationTimeUtc &lt; StartOf2009\n\t\t   select f;\n\n// Show results.\nforeach (var f in files)\n{\n\tConsole.WriteLine(&quot;{0}&quot;, f.Name);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.DirectoryInfo.EnumFiles#1\">&#39; Create a DirectoryInfo of the directory of the files to enumerate.\nDim DirInfo As New DirectoryInfo(&quot;\\\\archives1\\library\\&quot;)\n\nDim StartOf2009 As New DateTime(2009, 1, 1)\n\n&#39; LINQ query for all files created before 2009.\nDim files = From f In DirInfo.EnumerateFiles()\n\t\t\tWhere f.CreationTimeUtc &lt; StartOf2009\n\n&#39; Show results.\nFor Each f As FileInfo In files\n\tConsole.WriteLine(&quot;{0}&quot;, f.Name)\nNext\n</code></pre><p> The following example shows how to enumerate files in a directory by using different search options. The example assumes a directory that has files named log1.txt, log2.txt, test1.txt, test2.txt, test3.txt, and a subdirectory that has a file named SubFile.txt.  </p>\n<pre><code class=\"lang-vb\" name=\"System.IO.DirectoryInfo.EnumFiles#2\">Imports System.IO\n\nModule Module1\n\n    Sub Main()\n        Dim di As DirectoryInfo = New DirectoryInfo(&quot;C:\\ExampleDir&quot;)\n        Console.WriteLine(&quot;No search pattern returns:&quot;)\n        For Each fi In di.EnumerateFiles()\n            Console.WriteLine(fi.Name)\n        Next\n\n        Console.WriteLine()\n\n        Console.WriteLine(&quot;Search pattern *2* returns:&quot;)\n        For Each fi In di.EnumerateFiles(&quot;*2*&quot;)\n            Console.WriteLine(fi.Name)\n        Next\n\n        Console.WriteLine()\n\n        Console.WriteLine(&quot;Search pattern test?.txt returns:&quot;)\n        For Each fi In di.EnumerateFiles(&quot;test?.txt&quot;)\n            Console.WriteLine(fi.Name)\n        Next\n\n        Console.WriteLine()\n\n        Console.WriteLine(&quot;Search pattern AllDirectories returns:&quot;)\n        For Each fi In di.EnumerateFiles(&quot;*&quot;, SearchOption.AllDirectories)\n            Console.WriteLine(fi.Name)\n        Next\n    End Sub\n\nEnd Module\n\n&#39; This code produces output similar to the following:\n\n&#39; No search pattern returns:\n&#39; log1.txt\n&#39; log2.txt\n&#39; test1.txt\n&#39; test2.txt\n&#39; test3.txt\n\n&#39; Search pattern *2* returns:\n&#39; log2.txt\n&#39; test2.txt\n\n&#39; Search pattern test?.txt returns:\n&#39; test1.txt\n&#39; test2.txt\n&#39; test3.txt\n\n&#39; Search pattern AllDirectories returns:\n&#39; log1.txt\n&#39; log2.txt\n&#39; test1.txt\n&#39; test2.txt\n&#39; test3.txt\n&#39; SubFile.txt\n&#39; Press any key to continue . . .\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IO.DirectoryInfo.EnumFiles#2\">using System;\nusing System.IO;\n\nnamespace ConsoleApplication1\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            DirectoryInfo di = new DirectoryInfo(@&quot;C:\\ExampleDir&quot;);\n            Console.WriteLine(&quot;No search pattern returns:&quot;);\n            foreach (var fi in di.EnumerateFiles())\n            {\n                Console.WriteLine(fi.Name);\n            }\n\n            Console.WriteLine();\n\n            Console.WriteLine(&quot;Search pattern *2* returns:&quot;);\n            foreach (var fi in di.EnumerateFiles(&quot;*2*&quot;))\n            {\n                Console.WriteLine(fi.Name);\n            }\n\n            Console.WriteLine();\n\n            Console.WriteLine(&quot;Search pattern test?.txt returns:&quot;);\n            foreach (var fi in di.EnumerateFiles(&quot;test?.txt&quot;))\n            {\n                Console.WriteLine(fi.Name);\n            }\n\n            Console.WriteLine();\n\n            Console.WriteLine(&quot;Search pattern AllDirectories returns:&quot;);\n            foreach (var fi in di.EnumerateFiles(&quot;*&quot;, SearchOption.AllDirectories))\n            {\n                Console.WriteLine(fi.Name);\n            }\n        }\n    }\n}\n/* \nThis code produces output similar to the following:\n\nNo search pattern returns:\nlog1.txt\nlog2.txt\ntest1.txt\ntest2.txt\ntest3.txt\n\nSearch pattern *2* returns:\nlog2.txt\ntest2.txt\n\nSearch pattern test?.txt returns:\ntest1.txt\ntest2.txt\ntest3.txt\n\nSearch pattern AllDirectories returns:\nlog1.txt\nlog2.txt\ntest1.txt\ntest2.txt\ntest3.txt\nSubFile.txt\nPress any key to continue . . .\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_DirectoryInfo_EnumerateFiles_System_String_\">\r\n    \r\n            <a id=\"System_IO_DirectoryInfo_EnumerateFiles_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EnumerateFiles(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an enumerable collection of file information that matches a search pattern.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Generic.IEnumerable&lt;System.IO.FileInfo&gt; EnumerateFiles (string searchPattern);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>searchPattern</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn&#39;t support regular expressions. The default pattern is &quot;*&quot;, which returns all files.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a>&gt;</div>\r\n                  </div>\r\n                  <p>An enumerable collection of files that matches <code>searchPattern</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>searchPattern</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The path encapsulated in the <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> object is invalid, (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>searchPattern</code> can be a combination of literal and wildcard characters, but doesn&#39;t support regular expressions. The following wildcard specifiers are permitted in <code>searchPattern</code>.  </p>\n<table>\n<thead>\n<tr>\n<th>Wildcard specifier</th>\n<th>Matches</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>* (asterisk)</td>\n<td>Zero or more characters in that position.</td>\n</tr>\n<tr>\n<td>? (question mark)</td>\n<td>Zero or one character in that position.</td>\n</tr>\n</tbody>\n</table>\n<p> Characters other than the wildcard are literal characters. For example, the  string &quot;<em>t&quot; searches for all names in  ending with the letter &quot;t&quot;. &quot;. The <code>searchPattern</code> string &quot;s\\</em>&quot; searches for all names in <code>path</code> beginning with the letter &quot;s&quot;.  </p>\n<p> The <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_EnumerateFiles_\" data-linktype=\"relative-path\">EnumerateFiles</a> and <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_GetFiles_\" data-linktype=\"relative-path\">GetFiles</a> methods differ as follows:  </p>\n<ul>\n<li><p>When you use <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_EnumerateFiles_\" data-linktype=\"relative-path\">EnumerateFiles</a>, you can start enumerating the collection of <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> objects before the whole collection is returned.  </p>\n</li>\n<li><p>When you use <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_GetFiles_\" data-linktype=\"relative-path\">GetFiles</a>, you must wait for the whole array of <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> objects to be returned before you can access the array.  </p>\n<p>Therefore, when you are working with many files and directories, <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_EnumerateFiles_\" data-linktype=\"relative-path\">EnumerateFiles</a> can be more efficient.  </p>\n<p>This method pre-populates the values of the following <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> properties:  </p>\n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_Attributes_\" data-linktype=\"relative-path\">Attributes</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_CreationTime_\" data-linktype=\"relative-path\">CreationTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_CreationTimeUtc_\" data-linktype=\"relative-path\">CreationTimeUtc</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastAccessTime_\" data-linktype=\"relative-path\">LastAccessTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastAccessTimeUtc_\" data-linktype=\"relative-path\">LastAccessTimeUtc</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastWriteTime_\" data-linktype=\"relative-path\">LastWriteTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastWriteTimeUtc_\" data-linktype=\"relative-path\">LastWriteTimeUtc</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_Length_\" data-linktype=\"relative-path\">Length</a>  \n\n<p>The returned collection is not cached; each call to the <a class=\"xref\" href=\"system.collections.generic.ienumerable-1#System_Collections_Generic_IEnumerable_1_GetEnumerator_\" data-linktype=\"relative-path\">GetEnumerator</a> method on the collection will start a new enumeration.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to enumerate files in a directory by using different search options. The example assumes a directory that has files named log1.txt, log2.txt, test1.txt, test2.txt, test3.txt, and a subdirectory that has a file named SubFile.txt.  </p>\n<pre><code class=\"lang-vb\" name=\"System.IO.DirectoryInfo.EnumFiles#2\">Imports System.IO\n\nModule Module1\n\n    Sub Main()\n        Dim di As DirectoryInfo = New DirectoryInfo(&quot;C:\\ExampleDir&quot;)\n        Console.WriteLine(&quot;No search pattern returns:&quot;)\n        For Each fi In di.EnumerateFiles()\n            Console.WriteLine(fi.Name)\n        Next\n\n        Console.WriteLine()\n\n        Console.WriteLine(&quot;Search pattern *2* returns:&quot;)\n        For Each fi In di.EnumerateFiles(&quot;*2*&quot;)\n            Console.WriteLine(fi.Name)\n        Next\n\n        Console.WriteLine()\n\n        Console.WriteLine(&quot;Search pattern test?.txt returns:&quot;)\n        For Each fi In di.EnumerateFiles(&quot;test?.txt&quot;)\n            Console.WriteLine(fi.Name)\n        Next\n\n        Console.WriteLine()\n\n        Console.WriteLine(&quot;Search pattern AllDirectories returns:&quot;)\n        For Each fi In di.EnumerateFiles(&quot;*&quot;, SearchOption.AllDirectories)\n            Console.WriteLine(fi.Name)\n        Next\n    End Sub\n\nEnd Module\n\n&#39; This code produces output similar to the following:\n\n&#39; No search pattern returns:\n&#39; log1.txt\n&#39; log2.txt\n&#39; test1.txt\n&#39; test2.txt\n&#39; test3.txt\n\n&#39; Search pattern *2* returns:\n&#39; log2.txt\n&#39; test2.txt\n\n&#39; Search pattern test?.txt returns:\n&#39; test1.txt\n&#39; test2.txt\n&#39; test3.txt\n\n&#39; Search pattern AllDirectories returns:\n&#39; log1.txt\n&#39; log2.txt\n&#39; test1.txt\n&#39; test2.txt\n&#39; test3.txt\n&#39; SubFile.txt\n&#39; Press any key to continue . . .\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IO.DirectoryInfo.EnumFiles#2\">using System;\nusing System.IO;\n\nnamespace ConsoleApplication1\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            DirectoryInfo di = new DirectoryInfo(@&quot;C:\\ExampleDir&quot;);\n            Console.WriteLine(&quot;No search pattern returns:&quot;);\n            foreach (var fi in di.EnumerateFiles())\n            {\n                Console.WriteLine(fi.Name);\n            }\n\n            Console.WriteLine();\n\n            Console.WriteLine(&quot;Search pattern *2* returns:&quot;);\n            foreach (var fi in di.EnumerateFiles(&quot;*2*&quot;))\n            {\n                Console.WriteLine(fi.Name);\n            }\n\n            Console.WriteLine();\n\n            Console.WriteLine(&quot;Search pattern test?.txt returns:&quot;);\n            foreach (var fi in di.EnumerateFiles(&quot;test?.txt&quot;))\n            {\n                Console.WriteLine(fi.Name);\n            }\n\n            Console.WriteLine();\n\n            Console.WriteLine(&quot;Search pattern AllDirectories returns:&quot;);\n            foreach (var fi in di.EnumerateFiles(&quot;*&quot;, SearchOption.AllDirectories))\n            {\n                Console.WriteLine(fi.Name);\n            }\n        }\n    }\n}\n/* \nThis code produces output similar to the following:\n\nNo search pattern returns:\nlog1.txt\nlog2.txt\ntest1.txt\ntest2.txt\ntest3.txt\n\nSearch pattern *2* returns:\nlog2.txt\ntest2.txt\n\nSearch pattern test?.txt returns:\ntest1.txt\ntest2.txt\ntest3.txt\n\nSearch pattern AllDirectories returns:\nlog1.txt\nlog2.txt\ntest1.txt\ntest2.txt\ntest3.txt\nSubFile.txt\nPress any key to continue . . .\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_DirectoryInfo_EnumerateFiles_System_String_System_IO_SearchOption_\">\r\n    \r\n            <a id=\"System_IO_DirectoryInfo_EnumerateFiles_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EnumerateFiles(String,SearchOption)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an enumerable collection of file information that matches a specified search pattern and search subdirectory option.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Generic.IEnumerable&lt;System.IO.FileInfo&gt; EnumerateFiles (string searchPattern, System.IO.SearchOption searchOption);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>searchPattern</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn&#39;t support regular expressions. The default pattern is &quot;*&quot;, which returns all files.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>searchOption</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.searchoption\" data-linktype=\"relative-path\">SearchOption</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <a class=\"xref\" href=\"system.io.searchoption\" data-linktype=\"relative-path\">SearchOption</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a>&gt;</div>\r\n                  </div>\r\n                  <p>An enumerable collection of files that matches <code>searchPattern</code> and <code>searchOption</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>searchPattern</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>searchOption</code> is not a valid <a class=\"xref\" href=\"system.io.searchoption\" data-linktype=\"relative-path\">SearchOption</a> value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The path encapsulated in the <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> object is invalid (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>searchPattern</code> can be a combination of literal and wildcard characters, but doesn&#39;t support regular expressions. The following wildcard specifiers are permitted in <code>searchPattern</code>.  </p>\n<table>\n<thead>\n<tr>\n<th>Wildcard specifier</th>\n<th>Matches</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>* (asterisk)</td>\n<td>Zero or more characters in that position.</td>\n</tr>\n<tr>\n<td>? (question mark)</td>\n<td>Zero or one character in that position.</td>\n</tr>\n</tbody>\n</table>\n<p> Characters other than the wildcard are literal characters. For example, the  string &quot;<em>t&quot; searches for all names in  ending with the letter &quot;t&quot;. &quot;. The <code>searchPattern</code> string &quot;s\\</em>&quot; searches for all names in <code>path</code> beginning with the letter &quot;s&quot;.  </p>\n<p> The <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_EnumerateFiles_\" data-linktype=\"relative-path\">EnumerateFiles</a> and <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_GetFiles_\" data-linktype=\"relative-path\">GetFiles</a> methods differ as follows:  </p>\n<ul>\n<li><p>When you use <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_EnumerateFiles_\" data-linktype=\"relative-path\">EnumerateFiles</a>, you can start enumerating the collection of <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> objects before the whole collection is returned.  </p>\n</li>\n<li><p>When you use <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_GetFiles_\" data-linktype=\"relative-path\">GetFiles</a>, you must wait for the whole array of <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> objects to be returned before you can access the array.  </p>\n<p>Therefore, when you are working with many files and directories, <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_EnumerateFiles_\" data-linktype=\"relative-path\">EnumerateFiles</a> can be more efficient.  </p>\n<p>This method pre-populates the values of the following <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> properties:  </p>\n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_Attributes_\" data-linktype=\"relative-path\">Attributes</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_CreationTime_\" data-linktype=\"relative-path\">CreationTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_CreationTimeUtc_\" data-linktype=\"relative-path\">CreationTimeUtc</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastAccessTime_\" data-linktype=\"relative-path\">LastAccessTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastAccessTimeUtc_\" data-linktype=\"relative-path\">LastAccessTimeUtc</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastWriteTime_\" data-linktype=\"relative-path\">LastWriteTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastWriteTimeUtc_\" data-linktype=\"relative-path\">LastWriteTimeUtc</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_Length_\" data-linktype=\"relative-path\">Length</a>  \n\n<p>The returned collection is not cached; each call to the <a class=\"xref\" href=\"system.collections.generic.ienumerable-1#System_Collections_Generic_IEnumerable_1_GetEnumerator_\" data-linktype=\"relative-path\">GetEnumerator</a> method on the collection will start a new enumeration.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to enumerate files in a directory by using different search options. The example assumes a directory that has files named log1.txt, log2.txt, test1.txt, test2.txt, test3.txt, and a subdirectory that has a file named SubFile.txt.  </p>\n<pre><code class=\"lang-vb\" name=\"System.IO.DirectoryInfo.EnumFiles#2\">Imports System.IO\n\nModule Module1\n\n    Sub Main()\n        Dim di As DirectoryInfo = New DirectoryInfo(&quot;C:\\ExampleDir&quot;)\n        Console.WriteLine(&quot;No search pattern returns:&quot;)\n        For Each fi In di.EnumerateFiles()\n            Console.WriteLine(fi.Name)\n        Next\n\n        Console.WriteLine()\n\n        Console.WriteLine(&quot;Search pattern *2* returns:&quot;)\n        For Each fi In di.EnumerateFiles(&quot;*2*&quot;)\n            Console.WriteLine(fi.Name)\n        Next\n\n        Console.WriteLine()\n\n        Console.WriteLine(&quot;Search pattern test?.txt returns:&quot;)\n        For Each fi In di.EnumerateFiles(&quot;test?.txt&quot;)\n            Console.WriteLine(fi.Name)\n        Next\n\n        Console.WriteLine()\n\n        Console.WriteLine(&quot;Search pattern AllDirectories returns:&quot;)\n        For Each fi In di.EnumerateFiles(&quot;*&quot;, SearchOption.AllDirectories)\n            Console.WriteLine(fi.Name)\n        Next\n    End Sub\n\nEnd Module\n\n&#39; This code produces output similar to the following:\n\n&#39; No search pattern returns:\n&#39; log1.txt\n&#39; log2.txt\n&#39; test1.txt\n&#39; test2.txt\n&#39; test3.txt\n\n&#39; Search pattern *2* returns:\n&#39; log2.txt\n&#39; test2.txt\n\n&#39; Search pattern test?.txt returns:\n&#39; test1.txt\n&#39; test2.txt\n&#39; test3.txt\n\n&#39; Search pattern AllDirectories returns:\n&#39; log1.txt\n&#39; log2.txt\n&#39; test1.txt\n&#39; test2.txt\n&#39; test3.txt\n&#39; SubFile.txt\n&#39; Press any key to continue . . .\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IO.DirectoryInfo.EnumFiles#2\">using System;\nusing System.IO;\n\nnamespace ConsoleApplication1\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            DirectoryInfo di = new DirectoryInfo(@&quot;C:\\ExampleDir&quot;);\n            Console.WriteLine(&quot;No search pattern returns:&quot;);\n            foreach (var fi in di.EnumerateFiles())\n            {\n                Console.WriteLine(fi.Name);\n            }\n\n            Console.WriteLine();\n\n            Console.WriteLine(&quot;Search pattern *2* returns:&quot;);\n            foreach (var fi in di.EnumerateFiles(&quot;*2*&quot;))\n            {\n                Console.WriteLine(fi.Name);\n            }\n\n            Console.WriteLine();\n\n            Console.WriteLine(&quot;Search pattern test?.txt returns:&quot;);\n            foreach (var fi in di.EnumerateFiles(&quot;test?.txt&quot;))\n            {\n                Console.WriteLine(fi.Name);\n            }\n\n            Console.WriteLine();\n\n            Console.WriteLine(&quot;Search pattern AllDirectories returns:&quot;);\n            foreach (var fi in di.EnumerateFiles(&quot;*&quot;, SearchOption.AllDirectories))\n            {\n                Console.WriteLine(fi.Name);\n            }\n        }\n    }\n}\n/* \nThis code produces output similar to the following:\n\nNo search pattern returns:\nlog1.txt\nlog2.txt\ntest1.txt\ntest2.txt\ntest3.txt\n\nSearch pattern *2* returns:\nlog2.txt\ntest2.txt\n\nSearch pattern test?.txt returns:\ntest1.txt\ntest2.txt\ntest3.txt\n\nSearch pattern AllDirectories returns:\nlog1.txt\nlog2.txt\ntest1.txt\ntest2.txt\ntest3.txt\nSubFile.txt\nPress any key to continue . . .\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_DirectoryInfo_EnumerateFileSystemInfos\">\r\n    \r\n            <a id=\"System_IO_DirectoryInfo_EnumerateFileSystemInfos_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EnumerateFileSystemInfos()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an enumerable collection of file system information in the current directory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Generic.IEnumerable&lt;System.IO.FileSystemInfo&gt; EnumerateFileSystemInfos ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.io.filesysteminfo\" data-linktype=\"relative-path\">FileSystemInfo</a>&gt;</div>\r\n                  </div>\r\n                  <p>An enumerable collection of file system information in the current directory.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The path encapsulated in the <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> object is invalid (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The EnumerateFileSystemInfos and <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_GetFileSystemInfos_\" data-linktype=\"relative-path\">GetFileSystemInfos</a> methods differ as follows:  </p>\n<ul>\n<li><p>When you use EnumerateFileSystemInfos, you can start enumerating the collection of <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> objects before the whole collection is returned.  </p>\n</li>\n<li><p>When you use <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_GetFileSystemInfos_\" data-linktype=\"relative-path\">GetFileSystemInfos</a>, you must wait for the whole array of <a class=\"xref\" href=\"system.io.filesysteminfo\" data-linktype=\"relative-path\">FileSystemInfo</a> objects to be returned before you can access the array.  </p>\n<p>Therefore, when you are working with many files and directories, EnumerateFileSystemInfos can be more efficient.  </p>\n<p>This method pre-populates the values of the following <a class=\"xref\" href=\"system.io.filesysteminfo\" data-linktype=\"relative-path\">FileSystemInfo</a> properties:  </p>\n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_Attributes_\" data-linktype=\"relative-path\">Attributes</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_CreationTime_\" data-linktype=\"relative-path\">CreationTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_CreationTimeUtc_\" data-linktype=\"relative-path\">CreationTimeUtc</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastAccessTime_\" data-linktype=\"relative-path\">LastAccessTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastAccessTimeUtc_\" data-linktype=\"relative-path\">LastAccessTimeUtc</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastWriteTime_\" data-linktype=\"relative-path\">LastWriteTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastWriteTimeUtc_\" data-linktype=\"relative-path\">LastWriteTimeUtc</a>  \n\n<p>The returned collection is not cached; each call to the <a class=\"xref\" href=\"system.collections.generic.ienumerable-1#System_Collections_Generic_IEnumerable_1_GetEnumerator_\" data-linktype=\"relative-path\">GetEnumerator</a> method on the collection will start a new enumeration.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_DirectoryInfo_EnumerateFileSystemInfos_System_String_\">\r\n    \r\n            <a id=\"System_IO_DirectoryInfo_EnumerateFileSystemInfos_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EnumerateFileSystemInfos(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an enumerable collection of file system information that matches a specified search pattern.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Generic.IEnumerable&lt;System.IO.FileSystemInfo&gt; EnumerateFileSystemInfos (string searchPattern);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>searchPattern</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn&#39;t support regular expressions. The default pattern is &quot;*&quot;, which returns all files.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.io.filesysteminfo\" data-linktype=\"relative-path\">FileSystemInfo</a>&gt;</div>\r\n                  </div>\r\n                  <p>An enumerable collection of file system information objects that matches <code>searchPattern</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>searchPattern</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The path encapsulated in the <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> object is invalid (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>searchPattern</code> can be a combination of literal and wildcard characters, but doesn&#39;t support regular expressions. The following wildcard specifiers are permitted in <code>searchPattern</code>.  </p>\n<table>\n<thead>\n<tr>\n<th>Wildcard specifier</th>\n<th>Matches</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>* (asterisk)</td>\n<td>Zero or more characters in that position.</td>\n</tr>\n<tr>\n<td>? (question mark)</td>\n<td>Zero or one character in that position.</td>\n</tr>\n</tbody>\n</table>\n<p> Characters other than the wildcard are literal characters. For example, the  string &quot;<em>t&quot; searches for all names in  ending with the letter &quot;t&quot;. &quot;. The <code>searchPattern</code> string &quot;s\\</em>&quot; searches for all names in <code>path</code> beginning with the letter &quot;s&quot;.  </p>\n<p> The <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_EnumerateFileSystemInfos_\" data-linktype=\"relative-path\">EnumerateFileSystemInfos</a> and <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_GetFileSystemInfos_\" data-linktype=\"relative-path\">GetFileSystemInfos</a> methods differ as follows:  </p>\n<ul>\n<li><p>When you use <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_EnumerateFileSystemInfos_\" data-linktype=\"relative-path\">EnumerateFileSystemInfos</a>, you can start enumerating the collection of <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> objects before the whole collection is returned.  </p>\n</li>\n<li><p>When you use <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_GetFileSystemInfos_\" data-linktype=\"relative-path\">GetFileSystemInfos</a>, you must wait for the whole array of <a class=\"xref\" href=\"system.io.filesysteminfo\" data-linktype=\"relative-path\">FileSystemInfo</a> objects to be returned before you can access the array.  </p>\n<p>Therefore, when you are working with many files and directories, <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_EnumerateFileSystemInfos_\" data-linktype=\"relative-path\">EnumerateFileSystemInfos</a> can be more efficient.  </p>\n<p>This method pre-populates the values of the following <a class=\"xref\" href=\"system.io.filesysteminfo\" data-linktype=\"relative-path\">FileSystemInfo</a> properties:  </p>\n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_Attributes_\" data-linktype=\"relative-path\">Attributes</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_CreationTime_\" data-linktype=\"relative-path\">CreationTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_CreationTimeUtc_\" data-linktype=\"relative-path\">CreationTimeUtc</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastAccessTime_\" data-linktype=\"relative-path\">LastAccessTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastAccessTimeUtc_\" data-linktype=\"relative-path\">LastAccessTimeUtc</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastWriteTime_\" data-linktype=\"relative-path\">LastWriteTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastWriteTimeUtc_\" data-linktype=\"relative-path\">LastWriteTimeUtc</a>  \n\n<p>The returned collection is not cached; each call to the <a class=\"xref\" href=\"system.collections.generic.ienumerable-1#System_Collections_Generic_IEnumerable_1_GetEnumerator_\" data-linktype=\"relative-path\">GetEnumerator</a> method on the collection will start a new enumeration.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_DirectoryInfo_EnumerateFileSystemInfos_System_String_System_IO_SearchOption_\">\r\n    \r\n            <a id=\"System_IO_DirectoryInfo_EnumerateFileSystemInfos_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EnumerateFileSystemInfos(String,SearchOption)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an enumerable collection of file system information that matches a specified search pattern and search subdirectory option.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Generic.IEnumerable&lt;System.IO.FileSystemInfo&gt; EnumerateFileSystemInfos (string searchPattern, System.IO.SearchOption searchOption);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>searchPattern</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn&#39;t support regular expressions. The default pattern is &quot;*&quot;, which returns all files.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>searchOption</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.searchoption\" data-linktype=\"relative-path\">SearchOption</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <a class=\"xref\" href=\"system.io.searchoption\" data-linktype=\"relative-path\">SearchOption</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.io.filesysteminfo\" data-linktype=\"relative-path\">FileSystemInfo</a>&gt;</div>\r\n                  </div>\r\n                  <p>An enumerable collection of file system information objects that matches <code>searchPattern</code> and <code>searchOption</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>searchPattern</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>searchOption</code> is not a valid <a class=\"xref\" href=\"system.io.searchoption\" data-linktype=\"relative-path\">SearchOption</a> value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The path encapsulated in the <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> object is invalid (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>searchPattern</code> can be a combination of literal and wildcard characters, but doesn&#39;t support regular expressions. The following wildcard specifiers are permitted in <code>searchPattern</code>.  </p>\n<table>\n<thead>\n<tr>\n<th>Wildcard specifier</th>\n<th>Matches</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>* (asterisk)</td>\n<td>Zero or more characters in that position.</td>\n</tr>\n<tr>\n<td>? (question mark)</td>\n<td>Zero or one character in that position.</td>\n</tr>\n</tbody>\n</table>\n<p> Characters other than the wildcard are literal characters. For example, the  string &quot;<em>t&quot; searches for all names in  ending with the letter &quot;t&quot;. &quot;. The <code>searchPattern</code> string &quot;s\\</em>&quot; searches for all names in <code>path</code> beginning with the letter &quot;s&quot;.  </p>\n<p> The <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_EnumerateFileSystemInfos_\" data-linktype=\"relative-path\">EnumerateFileSystemInfos</a> and <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_GetFileSystemInfos_\" data-linktype=\"relative-path\">GetFileSystemInfos</a> methods differ as follows:  </p>\n<ul>\n<li><p>When you use <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_EnumerateFileSystemInfos_\" data-linktype=\"relative-path\">EnumerateFileSystemInfos</a>, you can start enumerating the collection of <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> objects before the whole collection is returned.  </p>\n</li>\n<li><p>When you use <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_GetFileSystemInfos_\" data-linktype=\"relative-path\">GetFileSystemInfos</a>, you must wait for the whole array of <a class=\"xref\" href=\"system.io.filesysteminfo\" data-linktype=\"relative-path\">FileSystemInfo</a> objects to be returned before you can access the array.  </p>\n<p>Therefore, when you are working with many files and directories, <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_EnumerateFileSystemInfos_\" data-linktype=\"relative-path\">EnumerateFileSystemInfos</a> can be more efficient.  </p>\n<p>This method pre-populates the values of the following <a class=\"xref\" href=\"system.io.filesysteminfo\" data-linktype=\"relative-path\">FileSystemInfo</a> properties:  </p>\n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_Attributes_\" data-linktype=\"relative-path\">Attributes</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_CreationTime_\" data-linktype=\"relative-path\">CreationTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_CreationTimeUtc_\" data-linktype=\"relative-path\">CreationTimeUtc</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastAccessTime_\" data-linktype=\"relative-path\">LastAccessTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastAccessTimeUtc_\" data-linktype=\"relative-path\">LastAccessTimeUtc</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastWriteTime_\" data-linktype=\"relative-path\">LastWriteTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastWriteTimeUtc_\" data-linktype=\"relative-path\">LastWriteTimeUtc</a>  \n\n<p>The returned collection is not cached; each call to the <a class=\"xref\" href=\"system.collections.generic.ienumerable-1#System_Collections_Generic_IEnumerable_1_GetEnumerator_\" data-linktype=\"relative-path\">GetEnumerator</a> method on the collection will start a new enumeration.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_DirectoryInfo_GetAccessControl\">\r\n    \r\n            <a id=\"System_IO_DirectoryInfo_GetAccessControl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAccessControl()</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.security.accesscontrol.directorysecurity\" data-linktype=\"relative-path\">DirectorySecurity</a> object that encapsulates the access control list (ACL) entries for the directory described by the current <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Security.AccessControl.DirectorySecurity GetAccessControl ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.directorysecurity\" data-linktype=\"relative-path\">DirectorySecurity</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.security.accesscontrol.directorysecurity\" data-linktype=\"relative-path\">DirectorySecurity</a> object that encapsulates the access control rules for the directory.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.systemexception\" data-linktype=\"relative-path\">SystemException</a></div>\r\n                  </div>\r\n                  <p>The directory could not be found or modified.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The directory is read-only.  </p>\n<p> -or-  </p>\n<p> This operation is not supported on the current platform.  </p>\n<p> -or-  </p>\n<p> The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred while opening the directory.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The current operating system is not Microsoft Windows 2000 or later.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Calling this method overload is equivalent to calling the <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetAccessControl_\" data-linktype=\"relative-path\">GetAccessControl</a> method overload and specifying the access control sections <a class=\"xref\" href=\"system.security.accesscontrol.accesscontrolsections\" data-linktype=\"relative-path\">System.Security.AccessControl.AccessControlSections</a> &#124; <a class=\"xref\" href=\"system.security.accesscontrol.accesscontrolsections\" data-linktype=\"relative-path\">System.Security.AccessControl.AccessControlSections</a> &#124; <a class=\"xref\" href=\"system.security.accesscontrol.accesscontrolsections\" data-linktype=\"relative-path\">System.Security.AccessControl.AccessControlSections</a> (<a class=\"xref\" href=\"system.security.accesscontrol.accesscontrolsections\" data-linktype=\"relative-path\">System.Security.AccessControl.AccessControlSections</a><code>Or</code><a class=\"xref\" href=\"system.security.accesscontrol.accesscontrolsections\" data-linktype=\"relative-path\">System.Security.AccessControl.AccessControlSections</a><code>Or</code><a class=\"xref\" href=\"system.security.accesscontrol.accesscontrolsections\" data-linktype=\"relative-path\">System.Security.AccessControl.AccessControlSections</a> in Visual Basic).  </p>\n<p> Use the GetAccessControl method to retrieve the access control list (ACL) entries for the current file.  </p>\n<p> An ACL describes individuals and/or groups who have, or do not have, rights to specific actions on the given file or directory. For more information, see <a href=\"../Topic/How%20to:%20Add%20or%20Remove%20Access%20Control%20List%20Entries.md\" data-linktype=\"relative-path\">How to: Add or Remove Access Control List Entries</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the GetAccessControl and <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_SetAccessControl_\" data-linktype=\"relative-path\">SetAccessControl</a> methods to add and then remove an access control list (ACL) entry from a directory.  </p>\n<pre><code class=\"lang-cpp\" name=\"IO.DiretoryInfo.GetAccessControl-SetAccessControl#1\">using namespace System;\nusing namespace System::IO;\nusing namespace System::Security::AccessControl;\n\n// Adds an ACL entry on the specified directory for the\n// specified account.\nvoid AddDirectorySecurity(String^ directoryName, String^ account, \n     FileSystemRights rights, AccessControlType controlType)\n{\n    // Create a new DirectoryInfo object.\n    DirectoryInfo^ dInfo = gcnew DirectoryInfo(directoryName);\n\n    // Get a DirectorySecurity object that represents the\n    // current security settings.\n    DirectorySecurity^ dSecurity = dInfo-&gt;GetAccessControl();\n\n    // Add the FileSystemAccessRule to the security settings.\n    dSecurity-&gt;AddAccessRule( gcnew FileSystemAccessRule(account,\n        rights, controlType));\n\n    // Set the new access settings.\n    dInfo-&gt;SetAccessControl(dSecurity);\n}\n\n// Removes an ACL entry on the specified directory for the\n// specified account.\nvoid RemoveDirectorySecurity(String^ directoryName, String^ account,\n     FileSystemRights rights, AccessControlType controlType)\n{\n    // Create a new DirectoryInfo object.\n    DirectoryInfo^ dInfo = gcnew DirectoryInfo(directoryName);\n\n    // Get a DirectorySecurity object that represents the\n    // current security settings.\n    DirectorySecurity^ dSecurity = dInfo-&gt;GetAccessControl();\n\n    // Add the FileSystemAccessRule to the security settings.\n    dSecurity-&gt;RemoveAccessRule(gcnew FileSystemAccessRule(account,\n        rights, controlType));\n\n    // Set the new access settings.\n    dInfo-&gt;SetAccessControl(dSecurity);\n}    \n\nint main()\n{\n    String^ directoryName = &quot;TestDirectory&quot;;\n    String^ accountName = &quot;MYDOMAIN\\\\MyAccount&quot;;\n    if (!Directory::Exists(directoryName))\n    {\n        Console::WriteLine(&quot;The directory {0} could not be found.&quot;, \n            directoryName);\n        return 0;\n    }\n    try\n    {\n        Console::WriteLine(&quot;Adding access control entry for {0}&quot;,\n            directoryName);\n\n        // Add the access control entry to the directory.\n        AddDirectorySecurity(directoryName, accountName,\n            FileSystemRights::ReadData, AccessControlType::Allow);\n\n        Console::WriteLine(&quot;Removing access control entry from {0}&quot;,\n            directoryName);\n\n        // Remove the access control entry from the directory.\n        RemoveDirectorySecurity(directoryName, accountName, \n            FileSystemRights::ReadData, AccessControlType::Allow);\n\n        Console::WriteLine(&quot;Done.&quot;);\n    }\n    catch (UnauthorizedAccessException^)\n    {\n        Console::WriteLine(&quot;You are not authorised to carry&quot; +\n            &quot; out this procedure.&quot;);\n    }\n    catch (System::Security::Principal::\n        IdentityNotMappedException^)\n    {\n        Console::WriteLine(&quot;The account {0} could not be found.&quot;, accountName);\n    }\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"IO.DiretoryInfo.GetAccessControl-SetAccessControl#1\">using System;\nusing System.IO;\nusing System.Security.AccessControl;\n\nnamespace FileSystemExample\n{\n    class DirectoryExample\n    {\n        public static void Main()\n        {\n            try\n            {\n                string DirectoryName = &quot;TestDirectory&quot;;\n\n                Console.WriteLine(&quot;Adding access control entry for &quot; + DirectoryName);\n\n                // Add the access control entry to the directory.\n                AddDirectorySecurity(DirectoryName, @&quot;MYDOMAIN\\MyAccount&quot;, FileSystemRights.ReadData, AccessControlType.Allow);\n\n                Console.WriteLine(&quot;Removing access control entry from &quot; + DirectoryName);\n\n                // Remove the access control entry from the directory.\n                RemoveDirectorySecurity(DirectoryName, @&quot;MYDOMAIN\\MyAccount&quot;, FileSystemRights.ReadData, AccessControlType.Allow);\n\n                Console.WriteLine(&quot;Done.&quot;);\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(e);\n            }\n\n            Console.ReadLine();\n        }\n\n        // Adds an ACL entry on the specified directory for the specified account.\n        public static void AddDirectorySecurity(string FileName, string Account, FileSystemRights Rights, AccessControlType ControlType)\n        {\n            // Create a new DirectoryInfo object.\n            DirectoryInfo dInfo = new DirectoryInfo(FileName);\n\n            // Get a DirectorySecurity object that represents the \n            // current security settings.\n            DirectorySecurity dSecurity = dInfo.GetAccessControl();\n\n            // Add the FileSystemAccessRule to the security settings. \n            dSecurity.AddAccessRule(new FileSystemAccessRule(Account,\n                                                            Rights,\n                                                            ControlType));\n\n            // Set the new access settings.\n            dInfo.SetAccessControl(dSecurity);\n\n        }\n\n        // Removes an ACL entry on the specified directory for the specified account.\n        public static void RemoveDirectorySecurity(string FileName, string Account, FileSystemRights Rights, AccessControlType ControlType)\n        {\n            // Create a new DirectoryInfo object.\n            DirectoryInfo dInfo = new DirectoryInfo(FileName);\n\n            // Get a DirectorySecurity object that represents the \n            // current security settings.\n            DirectorySecurity dSecurity = dInfo.GetAccessControl();\n\n            // Add the FileSystemAccessRule to the security settings. \n            dSecurity.RemoveAccessRule(new FileSystemAccessRule(Account,\n                                                            Rights,\n                                                            ControlType));\n\n            // Set the new access settings.\n            dInfo.SetAccessControl(dSecurity);\n\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"IO.DiretoryInfo.GetAccessControl-SetAccessControl#1\">Imports System\nImports System.IO\nImports System.Security.AccessControl\n\n\n\nModule DirectoryExample\n\n    Sub Main()\n        Try\n            Dim DirectoryName As String = &quot;TestDirectory&quot;\n\n            Console.WriteLine(&quot;Adding access control entry for &quot; + DirectoryName)\n\n            &#39; Add the access control entry to the directory.\n            AddDirectorySecurity(DirectoryName, &quot;MYDOMAIN\\MyAccount&quot;, FileSystemRights.ReadData, AccessControlType.Allow)\n\n            Console.WriteLine(&quot;Removing access control entry from &quot; + DirectoryName)\n\n            &#39; Remove the access control entry from the directory.\n            RemoveDirectorySecurity(DirectoryName, &quot;MYDOMAIN\\MyAccount&quot;, FileSystemRights.ReadData, AccessControlType.Allow)\n\n            Console.WriteLine(&quot;Done.&quot;)\n        Catch e As Exception\n            Console.WriteLine(e)\n        End Try\n\n        Console.ReadLine()\n\n    End Sub\n\n\n    &#39; Adds an ACL entry on the specified directory for the specified account.\n    Sub AddDirectorySecurity(ByVal FileName As String, ByVal Account As String, ByVal Rights As FileSystemRights, ByVal ControlType As AccessControlType)\n        &#39; Create a new DirectoryInfoobject.\n        Dim dInfo As New DirectoryInfo(FileName)\n\n        &#39; Get a DirectorySecurity object that represents the \n        &#39; current security settings.\n        Dim dSecurity As DirectorySecurity = dInfo.GetAccessControl()\n\n        &#39; Add the FileSystemAccessRule to the security settings. \n        dSecurity.AddAccessRule(New FileSystemAccessRule(Account, Rights, ControlType))\n\n        &#39; Set the new access settings.\n        dInfo.SetAccessControl(dSecurity)\n\n    End Sub\n\n\n    &#39; Removes an ACL entry on the specified directory for the specified account.\n    Sub RemoveDirectorySecurity(ByVal FileName As String, ByVal Account As String, ByVal Rights As FileSystemRights, ByVal ControlType As AccessControlType)\n        &#39; Create a new DirectoryInfo object.\n        Dim dInfo As New DirectoryInfo(FileName)\n\n        &#39; Get a DirectorySecurity object that represents the \n        &#39; current security settings.\n        Dim dSecurity As DirectorySecurity = dInfo.GetAccessControl()\n\n        &#39; Add the FileSystemAccessRule to the security settings. \n        dSecurity.RemoveAccessRule(New FileSystemAccessRule(Account, Rights, ControlType))\n\n        &#39; Set the new access settings.\n        dInfo.SetAccessControl(dSecurity)\n\n    End Sub\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_DirectoryInfo_GetAccessControl_System_Security_AccessControl_AccessControlSections_\">\r\n    \r\n            <a id=\"System_IO_DirectoryInfo_GetAccessControl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAccessControl(AccessControlSections)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.security.accesscontrol.directorysecurity\" data-linktype=\"relative-path\">DirectorySecurity</a> object that encapsulates the specified type of access control list (ACL) entries for the directory described by the current <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Security.AccessControl.DirectorySecurity GetAccessControl (System.Security.AccessControl.AccessControlSections includeSections);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>includeSections</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.accesscontrolsections\" data-linktype=\"relative-path\">AccessControlSections</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.security.accesscontrol.accesscontrolsections\" data-linktype=\"relative-path\">AccessControlSections</a> values that specifies the type of access control list (ACL) information to receive.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.directorysecurity\" data-linktype=\"relative-path\">DirectorySecurity</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.security.accesscontrol.directorysecurity\" data-linktype=\"relative-path\">DirectorySecurity</a> object that encapsulates the access control rules for the file described by the <code>path</code> parameter.  </p>\n<p> Exceptions  </p>\n <table><thead><tr><th> Exception type<br>\n </th><th> Condition<br>\n </th></tr></thead><tbody><tr><td><a class=\"xref\" href=\"system.systemexception\" data-linktype=\"relative-path\">SystemException</a></td><td> The directory could not be found or modified.<br>\n </td></tr><tr><td><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></td><td> The current process does not have access to open the directory.<br>\n </td></tr><tr><td><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></td><td> An I/O error occurred while opening the directory.<br>\n </td></tr><tr><td><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></td><td> The current operating system is not Microsoft Windows 2000 or later.<br>\n </td></tr><tr><td><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></td><td> The directory is read-only.<br>\n -or-<br>\n This operation is not supported on the current platform.<br>\n -or-<br>\n The caller does not have the required permission.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the GetAccessControl method to retrieve the access control list (ACL) entries for the current file.  </p>\n<p> An ACL describes individuals and/or groups who have, or do not have, rights to specific actions on the given file or directory. For more information, see <a href=\"../Topic/How%20to:%20Add%20or%20Remove%20Access%20Control%20List%20Entries.md\" data-linktype=\"relative-path\">How to: Add or Remove Access Control List Entries</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_DirectoryInfo_GetDirectories\">\r\n    \r\n            <a id=\"System_IO_DirectoryInfo_GetDirectories_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDirectories()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the subdirectories of the current directory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.IO.DirectoryInfo[] GetDirectories ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a>[]</div>\r\n                  </div>\r\n                  <p>An array of <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> objects.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The path encapsulated in the <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> object is invalid, such as being on an unmapped drive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If there are no subdirectories, this method returns an empty array. This method is not recursive.  </p>\n<p> This method pre-populates the values of the following <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> properties:  </p>\n<ul>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_Attributes_\" data-linktype=\"relative-path\">Attributes</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_CreationTime_\" data-linktype=\"relative-path\">CreationTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_CreationTimeUtc_\" data-linktype=\"relative-path\">CreationTimeUtc</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastAccessTime_\" data-linktype=\"relative-path\">LastAccessTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastAccessTimeUtc_\" data-linktype=\"relative-path\">LastAccessTimeUtc</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastWriteTime_\" data-linktype=\"relative-path\">LastWriteTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastWriteTimeUtc_\" data-linktype=\"relative-path\">LastWriteTimeUtc</a></li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example retrieves all the directories in the root directory and displays the directory names.  </p>\n<pre><code class=\"lang-cs\" name=\"directoryinfogetdirectories#1\">using System;\nusing System.IO;\n\npublic class GetDirectoriesTest \n{\n    public static void Main() \n    {\n\n        // Make a reference to a directory.\n        DirectoryInfo di = new DirectoryInfo(&quot;c:\\\\&quot;);\n\n        // Get a reference to each directory in that directory.\n        DirectoryInfo[] diArr = di.GetDirectories();\n\n        // Display the names of the directories.\n        foreach (DirectoryInfo dri in diArr)\n            Console.WriteLine(dri.Name);\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"directoryinfogetdirectories#1\">using namespace System;\nusing namespace System::IO;\nint main()\n{\n   \n   // Make a reference to a directory.\n   DirectoryInfo^ di = gcnew DirectoryInfo( &quot;c:\\\\&quot; );\n   \n   // Get a reference to each directory in that directory.\n   array&lt;DirectoryInfo^&gt;^diArr = di-&gt;GetDirectories();\n   \n   // Display the names of the directories.\n   Collections::IEnumerator^ myEnum = diArr-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      DirectoryInfo^ dri = safe_cast&lt;DirectoryInfo^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( dri-&gt;Name );\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"directoryinfogetdirectories#1\">Imports System\nImports System.IO\n\nPublic Class GetDirectoriesTest\n\n    Public Shared Sub Main()\n        &#39; Make a reference to a directory.\n        Dim di As New DirectoryInfo(&quot;c:\\&quot;)\n        &#39; Get a reference to each directory in that directory.\n        Dim diArr As DirectoryInfo() = di.GetDirectories()\n        &#39; Display the names of the directories.\n        Dim dri As DirectoryInfo\n        For Each dri In diArr\n            Console.WriteLine(dri.Name)\n        Next dri\n    End Sub &#39;Main\nEnd Class &#39;GetDirectoriesTest\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_DirectoryInfo_GetDirectories_System_String_\">\r\n    \r\n            <a id=\"System_IO_DirectoryInfo_GetDirectories_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDirectories(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an array of directories in the current <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> matching the given search criteria.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.IO.DirectoryInfo[] GetDirectories (string searchPattern);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>searchPattern</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn&#39;t support regular expressions. The default pattern is &quot;*&quot;, which returns all files.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a>[]</div>\r\n                  </div>\r\n                  <p>An array of type <code>DirectoryInfo</code> matching <code>searchPattern</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>searchPattern </code>contains one or more invalid characters defined by the <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>searchPattern</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The path encapsulated in the <code>DirectoryInfo</code> object is invalid (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>searchPattern</code> can be a combination of literal and wildcard characters, but doesn&#39;t support regular expressions. The following wildcard specifiers are permitted in <code>searchPattern</code>.  </p>\n<table>\n<thead>\n<tr>\n<th>Wildcard specifier</th>\n<th>Matches</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>* (asterisk)</td>\n<td>Zero or more characters in that position.</td>\n</tr>\n<tr>\n<td>? (question mark)</td>\n<td>Zero or one character in that position.</td>\n</tr>\n</tbody>\n</table>\n<p> Characters other than the wildcard are literal characters. For example, the  string &quot;<em>t&quot; searches for all names in  ending with the letter &quot;t&quot;. &quot;. The <code>searchPattern</code> string &quot;s\\</em>&quot; searches for all names in <code>path</code> beginning with the letter &quot;s&quot;.  </p>\n<p> This method pre-populates the values of the following <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> properties:  </p>\n<ul>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_Attributes_\" data-linktype=\"relative-path\">Attributes</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_CreationTime_\" data-linktype=\"relative-path\">CreationTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_CreationTimeUtc_\" data-linktype=\"relative-path\">CreationTimeUtc</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastAccessTime_\" data-linktype=\"relative-path\">LastAccessTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastAccessTimeUtc_\" data-linktype=\"relative-path\">LastAccessTimeUtc</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastWriteTime_\" data-linktype=\"relative-path\">LastWriteTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastWriteTimeUtc_\" data-linktype=\"relative-path\">LastWriteTimeUtc</a></li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example counts the directories in a path that contain the specified letter.  </p>\n<pre><code class=\"lang-cpp\" name=\"DirInfo GetDirs2#1\">using namespace System;\nusing namespace System::IO;\nint main()\n{\n   try\n   {\n      DirectoryInfo^ di = gcnew DirectoryInfo( &quot;c:\\\\&quot; );\n      \n      // Get only subdirectories that contain the letter &quot;p.&quot;\n      array&lt;DirectoryInfo^&gt;^dirs = di-&gt;GetDirectories( &quot;*p*&quot; );\n      Console::WriteLine( &quot;The number of directories containing the letter p is {0}.&quot;, dirs-&gt;Length );\n      Collections::IEnumerator^ myEnum = dirs-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         DirectoryInfo^ diNext = safe_cast&lt;DirectoryInfo^&gt;(myEnum-&gt;Current);\n         Console::WriteLine( &quot;The number of files in {0} is {1}&quot;, diNext, diNext-&gt;GetFiles()-&gt;Length );\n      }\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;The process failed: {0}&quot;, e );\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"DirInfo GetDirs2#1\">using System;\nusing System.IO;\n\nclass Test \n{\n    public static void Main() \n    {\n        try \n        {\n            DirectoryInfo di = new DirectoryInfo(@&quot;c:\\&quot;);\n\n            // Get only subdirectories that contain the letter &quot;p.&quot;\n            DirectoryInfo[] dirs = di.GetDirectories(&quot;*p*&quot;);\n            Console.WriteLine(&quot;The number of directories containing the letter p is {0}.&quot;, dirs.Length);\n\n            foreach (DirectoryInfo diNext in dirs) \n            {\n                Console.WriteLine(&quot;The number of files in {0} is {1}&quot;, diNext, \n                    diNext.GetFiles().Length);\n            }\n        } \n        catch (Exception e) \n        {\n            Console.WriteLine(&quot;The process failed: {0}&quot;, e.ToString());\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"DirInfo GetDirs2#1\">Imports System\nImports System.IO\n\nPublic Class Test\n    Public Shared Sub Main()\n        &#39; Specify the directories you want to manipulate.\n        Dim di As DirectoryInfo = New DirectoryInfo(&quot;c:\\&quot;)\n\n        Try\n            &#39;Get only subdirectories that contain the letter &quot;p.&quot;\n            Dim dirs As DirectoryInfo() = di.GetDirectories(&quot;*p*&quot;)\n            Console.WriteLine(&quot;The number of directories containing the letter p is {0}.&quot;, dirs.Length)\n            Dim diNext As DirectoryInfo\n            For Each diNext In dirs\n                Console.WriteLine(&quot;The number of files in {0} is {1}&quot;, diNext, _\n                 diNext.GetFiles().Length)\n            Next\n\n        Catch e As Exception\n            Console.WriteLine(&quot;The process failed: {0}&quot;, e.ToString())\n        End Try\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_DirectoryInfo_GetDirectories_System_String_System_IO_SearchOption_\">\r\n    \r\n            <a id=\"System_IO_DirectoryInfo_GetDirectories_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDirectories(String,SearchOption)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an array of directories in the current <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> matching the given search criteria and using a value to determine whether to search subdirectories.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.IO.DirectoryInfo[] GetDirectories (string searchPattern, System.IO.SearchOption searchOption);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>searchPattern</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn&#39;t support regular expressions. The default pattern is &quot;*&quot;, which returns all files.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>searchOption</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.searchoption\" data-linktype=\"relative-path\">SearchOption</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a>[]</div>\r\n                  </div>\r\n                  <p>An array of type <code>DirectoryInfo</code> matching <code>searchPattern</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>searchPattern </code>contains one or more invalid characters defined by the <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>searchPattern</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>searchOption</code> is not a valid <a class=\"xref\" href=\"system.io.searchoption\" data-linktype=\"relative-path\">SearchOption</a> value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The path encapsulated in the <code>DirectoryInfo</code> object is invalid (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>searchPattern</code> can be a combination of literal and wildcard characters, but doesn&#39;t support regular expressions. The following wildcard specifiers are permitted in <code>searchPattern</code>.  </p>\n<table>\n<thead>\n<tr>\n<th>Wildcard specifier</th>\n<th>Matches</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>* (asterisk)</td>\n<td>Zero or more characters in that position.</td>\n</tr>\n<tr>\n<td>? (question mark)</td>\n<td>Zero or one character in that position.</td>\n</tr>\n</tbody>\n</table>\n<p> Characters other than the wildcard are literal characters. For example, the  string &quot;<em>t&quot; searches for all names in  ending with the letter &quot;t&quot;. &quot;. The <code>searchPattern</code> string &quot;s\\</em>&quot; searches for all names in <code>path</code> beginning with the letter &quot;s&quot;.  </p>\n<p> If there are no subdirectories, or no subdirectories match the <code>searchPattern</code> parameter, this method returns an empty array.  </p>\n<p> This method pre-populates the values of the following <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> properties:  </p>\n<ul>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_Attributes_\" data-linktype=\"relative-path\">Attributes</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_CreationTime_\" data-linktype=\"relative-path\">CreationTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_CreationTimeUtc_\" data-linktype=\"relative-path\">CreationTimeUtc</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastAccessTime_\" data-linktype=\"relative-path\">LastAccessTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastAccessTimeUtc_\" data-linktype=\"relative-path\">LastAccessTimeUtc</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastWriteTime_\" data-linktype=\"relative-path\">LastWriteTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastWriteTimeUtc_\" data-linktype=\"relative-path\">LastWriteTimeUtc</a></li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example lists all of the directories and files that begin with the letter &quot;c&quot; in &quot;c:\\&quot;.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.IO.DirectoryInfo_SearchOptions#00\">using namespace System;\nusing namespace System::IO;\n\nref class App\n{\npublic:\n    static void Main()\n    {\n        // Specify the directory you want to manipulate.\n        String^ path = &quot;c:\\\\&quot;;\n        String^ searchPattern = &quot;c*&quot;;\n\n        DirectoryInfo^ di = gcnew DirectoryInfo(path);\n        array&lt;DirectoryInfo^&gt;^ directories =\n            di-&gt;GetDirectories(searchPattern, SearchOption::TopDirectoryOnly);\n\n        array&lt;FileInfo^&gt;^ files =\n            di-&gt;GetFiles(searchPattern, SearchOption::TopDirectoryOnly);\n\n        Console::WriteLine(\n            &quot;Directories that begin with the letter \\&quot;c\\&quot; in {0}&quot;, path);\n        for each (DirectoryInfo^ dir in directories)\n        {\n            Console::WriteLine(\n                &quot;{0,-25} {1,25}&quot;, dir-&gt;FullName, dir-&gt;LastWriteTime);\n        }\n\n        Console::WriteLine();\n        Console::WriteLine(\n            &quot;Files that begin with the letter \\&quot;c\\&quot; in {0}&quot;, path);\n        for each (FileInfo^ file in files)\n        {\n            Console::WriteLine(\n                &quot;{0,-25} {1,25}&quot;, file-&gt;Name, file-&gt;LastWriteTime);\n        }\n    } // Main()\n}; // App()\n\nint main()\n{\n    App::Main();\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IO.DirectoryInfo_SearchOptions#00\">using System;\nusing System.IO;\n\nclass App\n{\n    public static void Main()\n    {\n        // Specify the directory you want to manipulate.\n        string path = @&quot;c:\\&quot;;\n        string searchPattern = &quot;c*&quot;;\n\n        DirectoryInfo di = new DirectoryInfo(path);\n        DirectoryInfo[] directories = \n            di.GetDirectories(searchPattern, SearchOption.TopDirectoryOnly);\n\n        FileInfo[] files = \n            di.GetFiles(searchPattern, SearchOption.TopDirectoryOnly);\n\n        Console.WriteLine(\n            &quot;Directories that begin with the letter \\&quot;c\\&quot; in {0}&quot;, path);\n        foreach (DirectoryInfo dir in directories)\n        {\n            Console.WriteLine(\n                &quot;{0,-25} {1,25}&quot;, dir.FullName, dir.LastWriteTime);\n        }\n\n        Console.WriteLine();\n        Console.WriteLine(\n            &quot;Files that begin with the letter \\&quot;c\\&quot; in {0}&quot;, path);\n        foreach (FileInfo file in files)\n        {\n            Console.WriteLine(\n                &quot;{0,-25} {1,25}&quot;, file.Name, file.LastWriteTime);\n        }\n    } // Main()\n} // App()\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.DirectoryInfo_SearchOptions#00\">Imports System\nImports System.IO\n\nClass App\n    Public Shared Sub Main()\n        &#39; Specify the directory you want to manipulate.\n        Dim path As String = &quot;c:\\\\&quot;\n        Dim searchPattern As String = &quot;c*&quot;\n\n        Dim di As DirectoryInfo = New DirectoryInfo(path)\n        Dim directories() As DirectoryInfo = _\n            di.GetDirectories(searchPattern, SearchOption.TopDirectoryOnly)\n\n        Dim files() As FileInfo = _\n            di.GetFiles(searchPattern, SearchOption.TopDirectoryOnly)\n\n        Console.WriteLine( _\n            &quot;Directories that begin with the letter &#39;c&#39; in {0}&quot;, path)\n        Dim dir As DirectoryInfo\n        For Each dir In directories\n            Console.WriteLine( _\n                &quot;{0,-25} {1,25}&quot;, dir.FullName, dir.LastWriteTime)\n        Next dir\n\n        Console.WriteLine()\n        Console.WriteLine( _\n            &quot;Files that begin with the letter &#39;c&#39; in {0}&quot;, path)\n        Dim file As FileInfo\n        For Each file In files\n            Console.WriteLine( _\n                &quot;{0,-25} {1,25}&quot;, file.Name, file.LastWriteTime)\n        Next file\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_DirectoryInfo_GetFiles\">\r\n    \r\n            <a id=\"System_IO_DirectoryInfo_GetFiles_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetFiles()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a file list from the current directory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.IO.FileInfo[] GetFiles ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a>[]</div>\r\n                  </div>\r\n                  <p>An array of type <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The path is invalid, such as being on an unmapped drive.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_EnumerateFiles_\" data-linktype=\"relative-path\">EnumerateFiles</a> and GetFiles methods differ as follows:  </p>\n<ul>\n<li><p>When you use <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_EnumerateFiles_\" data-linktype=\"relative-path\">EnumerateFiles</a>, you can start enumerating the collection of <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> objects before the whole collection is returned.  </p>\n</li>\n<li><p>When you use GetFiles, you must wait for the whole array of <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> objects to be returned before you can access the array.  </p>\n<p>Therefore, when you are working with many files and directories, <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_EnumerateFiles_\" data-linktype=\"relative-path\">EnumerateFiles</a> can be more efficient.  </p>\n<p>If there are no files in the <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a>, this method returns an empty array.  </p>\n<p>The order of the returned file names is not guaranteed; use the <a class=\"xref\" href=\"system.array#System_Array_Sort_\" data-linktype=\"relative-path\">Sort</a> method if a specific sort order is required.  </p>\n<p>This method pre-populates the values of the following <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> properties:  </p>\n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_Attributes_\" data-linktype=\"relative-path\">Attributes</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_CreationTime_\" data-linktype=\"relative-path\">CreationTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_CreationTimeUtc_\" data-linktype=\"relative-path\">CreationTimeUtc</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastAccessTime_\" data-linktype=\"relative-path\">LastAccessTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastAccessTimeUtc_\" data-linktype=\"relative-path\">LastAccessTimeUtc</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastWriteTime_\" data-linktype=\"relative-path\">LastWriteTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastWriteTimeUtc_\" data-linktype=\"relative-path\">LastWriteTimeUtc</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_Length_\" data-linktype=\"relative-path\">Length</a></li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to get a list of files from a directory by using different search options. The example assumes a directory that has files named log1.txt, log2.txt, test1.txt, test2.txt, test3.txt, and a subdirectory that has a file named SubFile.txt.  </p>\n<pre><code class=\"lang-cs\" name=\"directoryinfogetfiles#2\">using System;\nusing System.IO;\n\nnamespace ConsoleApplication1\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            DirectoryInfo di = new DirectoryInfo(@&quot;C:\\Users&nbsp;&nbsp;&nbsp;&nbsp;omfitz\\Documents\\ExampleDir&quot;);\n            Console.WriteLine(&quot;No search pattern returns:&quot;);\n            foreach (var fi in di.GetFiles())\n            {\n                Console.WriteLine(fi.Name);\n            }\n\n            Console.WriteLine();\n\n            Console.WriteLine(&quot;Search pattern *2* returns:&quot;);\n            foreach (var fi in di.GetFiles(&quot;*2*&quot;))\n            {\n                Console.WriteLine(fi.Name);\n            }\n\n            Console.WriteLine();\n\n            Console.WriteLine(&quot;Search pattern test?.txt returns:&quot;);\n            foreach (var fi in di.GetFiles(&quot;test?.txt&quot;))\n            {\n                Console.WriteLine(fi.Name);\n            }\n\n            Console.WriteLine();\n\n            Console.WriteLine(&quot;Search pattern AllDirectories returns:&quot;);\n            foreach (var fi in di.GetFiles(&quot;*&quot;, SearchOption.AllDirectories))\n            {\n                Console.WriteLine(fi.Name);\n            }\n        }\n    }\n}\n/* \nThis code produces output similar to the following:\n\nNo search pattern returns:\nlog1.txt\nlog2.txt\ntest1.txt\ntest2.txt\ntest3.txt\n\nSearch pattern *2* returns:\nlog2.txt\ntest2.txt\n\nSearch pattern test?.txt returns:\ntest1.txt\ntest2.txt\ntest3.txt\n\nSearch pattern AllDirectories returns:\nlog1.txt\nlog2.txt\ntest1.txt\ntest2.txt\ntest3.txt\nSubFile.txt\nPress any key to continue . . .\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"directoryinfogetfiles#2\">Imports System.IO\n\nModule Module1\n\n    Sub Main()\n        Dim di As DirectoryInfo = New DirectoryInfo(&quot;C:\\ExampleDir&quot;)\n        Console.WriteLine(&quot;No search pattern returns:&quot;)\n        For Each fi In di.GetFiles()\n            Console.WriteLine(fi.Name)\n        Next\n\n        Console.WriteLine()\n\n        Console.WriteLine(&quot;Search pattern *2* returns:&quot;)\n        For Each fi In di.GetFiles(&quot;*2*&quot;)\n            Console.WriteLine(fi.Name)\n        Next\n\n        Console.WriteLine()\n\n        Console.WriteLine(&quot;Search pattern test?.txt returns:&quot;)\n        For Each fi In di.GetFiles(&quot;test?.txt&quot;)\n            Console.WriteLine(fi.Name)\n        Next\n\n        Console.WriteLine()\n\n        Console.WriteLine(&quot;Search pattern AllDirectories returns:&quot;)\n        For Each fi In di.GetFiles(&quot;*&quot;, SearchOption.AllDirectories)\n            Console.WriteLine(fi.Name)\n        Next\n    End Sub\n\nEnd Module\n\n&#39; This code produces output similar to the following:\n\n&#39; No search pattern returns:\n&#39; log1.txt\n&#39; log2.txt\n&#39; test1.txt\n&#39; test2.txt\n&#39; test3.txt\n\n&#39; Search pattern *2* returns:\n&#39; log2.txt\n&#39; test2.txt\n\n&#39; Search pattern test?.txt returns:\n&#39; test1.txt\n&#39; test2.txt\n&#39; test3.txt\n\n&#39; Search pattern AllDirectories returns:\n&#39; log1.txt\n&#39; log2.txt\n&#39; test1.txt\n&#39; test2.txt\n&#39; test3.txt\n&#39; SubFile.txt\n&#39; Press any key to continue . . .\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_DirectoryInfo_GetFiles_System_String_\">\r\n    \r\n            <a id=\"System_IO_DirectoryInfo_GetFiles_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetFiles(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a file list from the current directory matching the given search pattern.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.IO.FileInfo[] GetFiles (string searchPattern);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>searchPattern</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn&#39;t support regular expressions. The default pattern is &quot;*&quot;, which returns all files.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a>[]</div>\r\n                  </div>\r\n                  <p>An array of type <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>searchPattern </code>contains one or more invalid characters defined by the <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>searchPattern</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The path is invalid (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>searchPattern</code> can be a combination of literal and wildcard characters, but doesn&#39;t support regular expressions. The following wildcard specifiers are permitted in <code>searchPattern</code>.  </p>\n<table>\n<thead>\n<tr>\n<th>Wildcard specifier</th>\n<th>Matches</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>* (asterisk)</td>\n<td>Zero or more characters in that position.</td>\n</tr>\n<tr>\n<td>? (question mark)</td>\n<td>Zero or one character in that position.</td>\n</tr>\n</tbody>\n</table>\n<p> Characters other than the wildcard are literal characters. For example, the  string &quot;<em>t&quot; searches for all names in  ending with the letter &quot;t&quot;. The <code>searchPattern</code> string &quot;s\\</em>&quot; searches for all names in <code>path</code> beginning with the letter &quot;s&quot;.  </p>\n<p> The <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_EnumerateFiles_\" data-linktype=\"relative-path\">EnumerateFiles</a> and <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_GetFiles_\" data-linktype=\"relative-path\">GetFiles</a> methods differ as follows:  </p>\n<ul>\n<li><p>When you use <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_EnumerateFiles_\" data-linktype=\"relative-path\">EnumerateFiles</a>, you can start enumerating the collection of <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> objects before the whole collection is returned.  </p>\n</li>\n<li><p>When you use <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_GetFiles_\" data-linktype=\"relative-path\">GetFiles</a>, you must wait for the whole array of <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> objects to be returned before you can access the array.  </p>\n<p>Therefore, when you are working with many files and directories, <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_EnumerateFiles_\" data-linktype=\"relative-path\">EnumerateFiles</a> can be more efficient.  </p>\n<p>If there are no files in the <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a>, this method returns an empty array.  </p>\n<p>The following wildcard specifiers are permitted in the <code>searchPattern</code> parameter.  </p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Wildcard character</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>*</td>\n<td>Zero or more characters.</td>\n</tr>\n<tr>\n<td>?</td>\n<td>Exactly zero or one character.</td>\n</tr>\n</tbody>\n</table>\n<p> The order of the returned file names is not guaranteed; use the <a class=\"xref\" href=\"system.array#System_Array_Sort_\" data-linktype=\"relative-path\">Sort</a> method if a specific sort order is required.  </p>\n<p> Wildcards are permitted. For example, the <code>searchPattern</code> string &quot;<em>.txt&quot; searches for all file names having an extension of &quot;txt&quot;. The <code>searchPattern</code> string &quot;s\\</em>&quot; searches for all file names beginning with the letter &quot;s&quot;. If there are no files, or no files that match the <code>searchPattern</code> string in the <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a>, this method returns an empty array.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When using the asterisk wildcard character in a <code>searchPattern</code> (for example, &quot;<em>.txt&quot;), the matching behavior varies depending on the length of the specified file extension. A <code>searchPattern</code> with a file extension of exactly three characters returns files with an extension of three or more characters, where the first three characters match the file extension specified in the <code>searchPattern</code>. A <code>searchPattern</code> with a file extension of one, two, or more than three characters returns only files with extensions of exactly that length that match the file extension specified in the <code>searchPattern</code>. When using the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files in a directory, &quot;file1.txt&quot; and &quot;file1.txtother&quot;, a search pattern of &quot;file?.txt&quot; returns only the first file, while a search pattern of &quot;file\\</em>.txt&quot; returns both files.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> Because this method checks against file names with both the 8.3 file name format and the long file name format, a search pattern similar to &quot;<em>1\\</em>.txt&quot; may return unexpected file names. For example, using a search pattern of &quot;*1*.txt&quot; will return &quot;longfilename.txt&quot; because the equivalent 8.3 file name format would be &quot;longf~1.txt&quot;.  </p>\n</div>\n<p> This method pre-populates the values of the following <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> properties:  </p>\n<ul>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_Attributes_\" data-linktype=\"relative-path\">Attributes</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_CreationTime_\" data-linktype=\"relative-path\">CreationTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_CreationTimeUtc_\" data-linktype=\"relative-path\">CreationTimeUtc</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastAccessTime_\" data-linktype=\"relative-path\">LastAccessTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastAccessTimeUtc_\" data-linktype=\"relative-path\">LastAccessTimeUtc</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastWriteTime_\" data-linktype=\"relative-path\">LastWriteTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastWriteTimeUtc_\" data-linktype=\"relative-path\">LastWriteTimeUtc</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_Length_\" data-linktype=\"relative-path\">Length</a></li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to get a list of files from a directory by using different search options. The example assumes a directory that has files named log1.txt, log2.txt, test1.txt, test2.txt, test3.txt, and a subdirectory that has a file named SubFile.txt.  </p>\n<pre><code class=\"lang-cs\" name=\"directoryinfogetfiles#2\">using System;\nusing System.IO;\n\nnamespace ConsoleApplication1\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            DirectoryInfo di = new DirectoryInfo(@&quot;C:\\Users&nbsp;&nbsp;&nbsp;&nbsp;omfitz\\Documents\\ExampleDir&quot;);\n            Console.WriteLine(&quot;No search pattern returns:&quot;);\n            foreach (var fi in di.GetFiles())\n            {\n                Console.WriteLine(fi.Name);\n            }\n\n            Console.WriteLine();\n\n            Console.WriteLine(&quot;Search pattern *2* returns:&quot;);\n            foreach (var fi in di.GetFiles(&quot;*2*&quot;))\n            {\n                Console.WriteLine(fi.Name);\n            }\n\n            Console.WriteLine();\n\n            Console.WriteLine(&quot;Search pattern test?.txt returns:&quot;);\n            foreach (var fi in di.GetFiles(&quot;test?.txt&quot;))\n            {\n                Console.WriteLine(fi.Name);\n            }\n\n            Console.WriteLine();\n\n            Console.WriteLine(&quot;Search pattern AllDirectories returns:&quot;);\n            foreach (var fi in di.GetFiles(&quot;*&quot;, SearchOption.AllDirectories))\n            {\n                Console.WriteLine(fi.Name);\n            }\n        }\n    }\n}\n/* \nThis code produces output similar to the following:\n\nNo search pattern returns:\nlog1.txt\nlog2.txt\ntest1.txt\ntest2.txt\ntest3.txt\n\nSearch pattern *2* returns:\nlog2.txt\ntest2.txt\n\nSearch pattern test?.txt returns:\ntest1.txt\ntest2.txt\ntest3.txt\n\nSearch pattern AllDirectories returns:\nlog1.txt\nlog2.txt\ntest1.txt\ntest2.txt\ntest3.txt\nSubFile.txt\nPress any key to continue . . .\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"directoryinfogetfiles#2\">Imports System.IO\n\nModule Module1\n\n    Sub Main()\n        Dim di As DirectoryInfo = New DirectoryInfo(&quot;C:\\ExampleDir&quot;)\n        Console.WriteLine(&quot;No search pattern returns:&quot;)\n        For Each fi In di.GetFiles()\n            Console.WriteLine(fi.Name)\n        Next\n\n        Console.WriteLine()\n\n        Console.WriteLine(&quot;Search pattern *2* returns:&quot;)\n        For Each fi In di.GetFiles(&quot;*2*&quot;)\n            Console.WriteLine(fi.Name)\n        Next\n\n        Console.WriteLine()\n\n        Console.WriteLine(&quot;Search pattern test?.txt returns:&quot;)\n        For Each fi In di.GetFiles(&quot;test?.txt&quot;)\n            Console.WriteLine(fi.Name)\n        Next\n\n        Console.WriteLine()\n\n        Console.WriteLine(&quot;Search pattern AllDirectories returns:&quot;)\n        For Each fi In di.GetFiles(&quot;*&quot;, SearchOption.AllDirectories)\n            Console.WriteLine(fi.Name)\n        Next\n    End Sub\n\nEnd Module\n\n&#39; This code produces output similar to the following:\n\n&#39; No search pattern returns:\n&#39; log1.txt\n&#39; log2.txt\n&#39; test1.txt\n&#39; test2.txt\n&#39; test3.txt\n\n&#39; Search pattern *2* returns:\n&#39; log2.txt\n&#39; test2.txt\n\n&#39; Search pattern test?.txt returns:\n&#39; test1.txt\n&#39; test2.txt\n&#39; test3.txt\n\n&#39; Search pattern AllDirectories returns:\n&#39; log1.txt\n&#39; log2.txt\n&#39; test1.txt\n&#39; test2.txt\n&#39; test3.txt\n&#39; SubFile.txt\n&#39; Press any key to continue . . .\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_DirectoryInfo_GetFiles_System_String_System_IO_SearchOption_\">\r\n    \r\n            <a id=\"System_IO_DirectoryInfo_GetFiles_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetFiles(String,SearchOption)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a file list from the current directory matching the given search pattern and using a value to determine whether to search subdirectories.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.IO.FileInfo[] GetFiles (string searchPattern, System.IO.SearchOption searchOption);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>searchPattern</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn&#39;t support regular expressions. The default pattern is &quot;*&quot;, which returns all files.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>searchOption</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.searchoption\" data-linktype=\"relative-path\">SearchOption</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a>[]</div>\r\n                  </div>\r\n                  <p>An array of type <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>searchPattern </code>contains one or more invalid characters defined by the <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>searchPattern</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>searchOption</code> is not a valid <a class=\"xref\" href=\"system.io.searchoption\" data-linktype=\"relative-path\">SearchOption</a> value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The path is invalid (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_EnumerateFiles_\" data-linktype=\"relative-path\">EnumerateFiles</a> and <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_GetFiles_\" data-linktype=\"relative-path\">GetFiles</a> methods differ as follows:  </p>\n<ul>\n<li><p>When you use <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_EnumerateFiles_\" data-linktype=\"relative-path\">EnumerateFiles</a>, you can start enumerating the collection of <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> objects before the whole collection is returned.  </p>\n</li>\n<li><p>When you use <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_GetFiles_\" data-linktype=\"relative-path\">GetFiles</a>, you must wait for the whole array of <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> objects to be returned before you can access the array.  </p>\n<p>Therefore, when you are working with many files and directories, <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_EnumerateFiles_\" data-linktype=\"relative-path\">EnumerateFiles</a> can be more efficient.  </p>\n<p>If there are no files in the <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a>, this method returns an empty array.  </p>\n<p>The following wildcard specifiers are permitted in <code>searchPattern</code>.  </p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Wildcard character</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>* (asterisk)</td>\n<td>Zero or more characters.</td>\n</tr>\n<tr>\n<td>? (question mark)</td>\n<td>Exactly zero or one character.</td>\n</tr>\n</tbody>\n</table>\n<p> The order of the returned file names is not guaranteed; use the <a class=\"xref\" href=\"system.array#System_Array_Sort_\" data-linktype=\"relative-path\">Sort</a> method if a specific sort order is required.  </p>\n<p> Wildcards are permitted. For example, the <code>searchPattern</code> string &quot;<em>.txt&quot; searches for all file names having an extension of &quot;txt&quot;. The <code>searchPattern</code> string &quot;s\\</em>&quot; searches for all file names beginning with the letter &quot;s&quot;. If there are no files, or no files that match the <code>searchPattern</code> string in the <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a>, this method returns an empty array.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When using the asterisk wildcard character in a <code>searchPattern</code> (for example, &quot;<em>.txt&quot;), the matching behavior varies depending on the length of the specified file extension. A <code>searchPattern</code> with a file extension of exactly three characters returns files with an extension of three or more characters, where the first three characters match the file extension specified in the <code>searchPattern</code>. A <code>searchPattern</code> with a file extension of one, two, or more than three characters returns only files with extensions of exactly that length that match the file extension specified in the <code>searchPattern</code>. When using the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files in a directory, &quot;file1.txt&quot; and &quot;file1.txtother&quot;, a search pattern of &quot;file?.txt&quot; returns only the first file, while a search pattern of &quot;file\\</em>.txt&quot; returns both files.  </p>\n</div>\n<p> The following list shows the behavior of different lengths for the <code>searchPattern</code> parameter:  </p>\n<ul>\n<li><p>&quot;*.abc&quot; returns files having an extension of.abc,.abcd,.abcde,.abcdef, and so on.  </p>\n</li>\n<li><p>&quot;*.abcd&quot; returns only files having an extension of.abcd.  </p>\n</li>\n<li><p>&quot;*.abcde&quot; returns only files having an extension of.abcde.  </p>\n</li>\n<li><p>&quot;*.abcdef&quot; returns only files having an extension of.abcdef.  </p>\n</li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> Because this method checks against file names with both the 8.3 file name format and the long file name format, a search pattern similar to &quot;<em>1\\</em>.txt&quot; may return unexpected file names. For example, using a search pattern of &quot;*1*.txt&quot; will return &quot;longfilename.txt&quot; because the equivalent 8.3 file name format would be &quot;longf~1.txt&quot;.  </p>\n</div>\n<p> This method pre-populates the values of the following <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> properties:  </p>\n<ol>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_Attributes_\" data-linktype=\"relative-path\">Attributes</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_CreationTime_\" data-linktype=\"relative-path\">CreationTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_CreationTimeUtc_\" data-linktype=\"relative-path\">CreationTimeUtc</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastAccessTime_\" data-linktype=\"relative-path\">LastAccessTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastAccessTimeUtc_\" data-linktype=\"relative-path\">LastAccessTimeUtc</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastWriteTime_\" data-linktype=\"relative-path\">LastWriteTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastWriteTimeUtc_\" data-linktype=\"relative-path\">LastWriteTimeUtc</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_Length_\" data-linktype=\"relative-path\">Length</a></li>\n</ol>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to get a list of files from a directory by using different search options. The example assumes a directory that has files named log1.txt, log2.txt, test1.txt, test2.txt, test3.txt, and a subdirectory that has a file named SubFile.txt.  </p>\n<pre><code class=\"lang-cs\" name=\"directoryinfogetfiles#2\">using System;\nusing System.IO;\n\nnamespace ConsoleApplication1\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            DirectoryInfo di = new DirectoryInfo(@&quot;C:\\Users&nbsp;&nbsp;&nbsp;&nbsp;omfitz\\Documents\\ExampleDir&quot;);\n            Console.WriteLine(&quot;No search pattern returns:&quot;);\n            foreach (var fi in di.GetFiles())\n            {\n                Console.WriteLine(fi.Name);\n            }\n\n            Console.WriteLine();\n\n            Console.WriteLine(&quot;Search pattern *2* returns:&quot;);\n            foreach (var fi in di.GetFiles(&quot;*2*&quot;))\n            {\n                Console.WriteLine(fi.Name);\n            }\n\n            Console.WriteLine();\n\n            Console.WriteLine(&quot;Search pattern test?.txt returns:&quot;);\n            foreach (var fi in di.GetFiles(&quot;test?.txt&quot;))\n            {\n                Console.WriteLine(fi.Name);\n            }\n\n            Console.WriteLine();\n\n            Console.WriteLine(&quot;Search pattern AllDirectories returns:&quot;);\n            foreach (var fi in di.GetFiles(&quot;*&quot;, SearchOption.AllDirectories))\n            {\n                Console.WriteLine(fi.Name);\n            }\n        }\n    }\n}\n/* \nThis code produces output similar to the following:\n\nNo search pattern returns:\nlog1.txt\nlog2.txt\ntest1.txt\ntest2.txt\ntest3.txt\n\nSearch pattern *2* returns:\nlog2.txt\ntest2.txt\n\nSearch pattern test?.txt returns:\ntest1.txt\ntest2.txt\ntest3.txt\n\nSearch pattern AllDirectories returns:\nlog1.txt\nlog2.txt\ntest1.txt\ntest2.txt\ntest3.txt\nSubFile.txt\nPress any key to continue . . .\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"directoryinfogetfiles#2\">Imports System.IO\n\nModule Module1\n\n    Sub Main()\n        Dim di As DirectoryInfo = New DirectoryInfo(&quot;C:\\ExampleDir&quot;)\n        Console.WriteLine(&quot;No search pattern returns:&quot;)\n        For Each fi In di.GetFiles()\n            Console.WriteLine(fi.Name)\n        Next\n\n        Console.WriteLine()\n\n        Console.WriteLine(&quot;Search pattern *2* returns:&quot;)\n        For Each fi In di.GetFiles(&quot;*2*&quot;)\n            Console.WriteLine(fi.Name)\n        Next\n\n        Console.WriteLine()\n\n        Console.WriteLine(&quot;Search pattern test?.txt returns:&quot;)\n        For Each fi In di.GetFiles(&quot;test?.txt&quot;)\n            Console.WriteLine(fi.Name)\n        Next\n\n        Console.WriteLine()\n\n        Console.WriteLine(&quot;Search pattern AllDirectories returns:&quot;)\n        For Each fi In di.GetFiles(&quot;*&quot;, SearchOption.AllDirectories)\n            Console.WriteLine(fi.Name)\n        Next\n    End Sub\n\nEnd Module\n\n&#39; This code produces output similar to the following:\n\n&#39; No search pattern returns:\n&#39; log1.txt\n&#39; log2.txt\n&#39; test1.txt\n&#39; test2.txt\n&#39; test3.txt\n\n&#39; Search pattern *2* returns:\n&#39; log2.txt\n&#39; test2.txt\n\n&#39; Search pattern test?.txt returns:\n&#39; test1.txt\n&#39; test2.txt\n&#39; test3.txt\n\n&#39; Search pattern AllDirectories returns:\n&#39; log1.txt\n&#39; log2.txt\n&#39; test1.txt\n&#39; test2.txt\n&#39; test3.txt\n&#39; SubFile.txt\n&#39; Press any key to continue . . .\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_DirectoryInfo_GetFileSystemInfos\">\r\n    \r\n            <a id=\"System_IO_DirectoryInfo_GetFileSystemInfos_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetFileSystemInfos()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an array of strongly typed <a class=\"xref\" href=\"system.io.filesysteminfo\" data-linktype=\"relative-path\">FileSystemInfo</a> entries representing all the files and subdirectories in a directory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.IO.FileSystemInfo[] GetFileSystemInfos ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filesysteminfo\" data-linktype=\"relative-path\">FileSystemInfo</a>[]</div>\r\n                  </div>\r\n                  <p>An array of strongly typed <a class=\"xref\" href=\"system.io.filesysteminfo\" data-linktype=\"relative-path\">FileSystemInfo</a> entries.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The path is invalid (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If there are no files or directories in the <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a>, this method returns an empty array. This method is not recursive.  </p>\n<p> For subdirectories, the <a class=\"xref\" href=\"system.io.filesysteminfo\" data-linktype=\"relative-path\">FileSystemInfo</a> objects returned by this method can be cast to the derived class <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a>. Use the <a class=\"xref\" href=\"system.io.fileattributes\" data-linktype=\"relative-path\">FileAttributes</a> value returned by the <a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_Attributes_\" data-linktype=\"relative-path\">Attributes</a> property to determine whether the <a class=\"xref\" href=\"system.io.filesysteminfo\" data-linktype=\"relative-path\">FileSystemInfo</a> represents a file or a directory.  </p>\n<p> This method pre-populates the values of the following <a class=\"xref\" href=\"system.io.filesysteminfo\" data-linktype=\"relative-path\">FileSystemInfo</a> properties:  </p>\n<ul>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_Attributes_\" data-linktype=\"relative-path\">Attributes</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_CreationTime_\" data-linktype=\"relative-path\">CreationTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_CreationTimeUtc_\" data-linktype=\"relative-path\">CreationTimeUtc</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastAccessTime_\" data-linktype=\"relative-path\">LastAccessTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastAccessTimeUtc_\" data-linktype=\"relative-path\">LastAccessTimeUtc</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastWriteTime_\" data-linktype=\"relative-path\">LastWriteTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastWriteTimeUtc_\" data-linktype=\"relative-path\">LastWriteTimeUtc</a></li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example counts the files and directories under the specified directory.  </p>\n<pre><code class=\"lang-vb\" name=\"FSizeSort#1\">Imports System\nImports System.IO\n\n\n\nModule DirectoryFileCount\n\n    Dim files As Long = 0\n    Dim directories As Long = 0\n\n\n\n    Sub Main()\n        Try\n            Console.WriteLine(&quot;Enter the path to a directory:&quot;)\n\n            Dim directory As String = Console.ReadLine()\n\n            &#39; Create a new DirectoryInfo object.\n            Dim dir As New DirectoryInfo(directory)\n\n            If Not dir.Exists Then\n                Throw New DirectoryNotFoundException(&quot;The directory does not exist.&quot;)\n            End If\n\n            &#39; Call the GetFileSystemInfos method.\n            Dim infos As FileSystemInfo() = dir.GetFileSystemInfos()\n\n            Console.WriteLine(&quot;Working...&quot;)\n\n            &#39; Pass the result to the ListDirectoriesAndFiles\n            &#39; method defined below.\n            ListDirectoriesAndFiles(infos)\n\n            &#39; Display the results to the console. \n            Console.WriteLine(&quot;Directories: {0}&quot;, directories)\n            Console.WriteLine(&quot;Files: {0}&quot;, files)\n\n        Catch e As Exception\n            Console.WriteLine(e.Message)\n        Finally\n\n            Console.ReadLine()\n        End Try\n\n    End Sub\n\n\n    Sub ListDirectoriesAndFiles(ByVal FSInfo() As FileSystemInfo)\n        &#39; Check the FSInfo parameter.\n        If FSInfo Is Nothing Then\n            Throw New ArgumentNullException(&quot;FSInfo&quot;)\n        End If\n\n        &#39; Iterate through each item.\n        Dim i As FileSystemInfo\n        For Each i In FSInfo\n            &#39; Check to see if this is a DirectoryInfo object.\n            If TypeOf i Is DirectoryInfo Then\n                &#39; Add one to the directory count.\n                directories += 1\n\n                &#39; Cast the object to a DirectoryInfo object.\n                Dim dInfo As DirectoryInfo = CType(i, DirectoryInfo)\n\n                &#39; Iterate through all sub-directories.\n                ListDirectoriesAndFiles(dInfo.GetFileSystemInfos())\n                &#39; Check to see if this is a FileInfo object.\n            ElseIf TypeOf i Is FileInfo Then\n                &#39; Add one to the file count.\n                files += 1\n            End If\n        Next i\n\n    End Sub\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"FSizeSort#1\">using System;\nusing System.IO;\n\nclass DirectoryFileCount\n{\n\n    static long files = 0;\n    static long directories = 0;\n\n\n    static void Main()\n    {\n        try\n        {\n            Console.WriteLine(&quot;Enter the path to a directory:&quot;);\n\n            string directory = Console.ReadLine();\n\n            // Create a new DirectoryInfo object.\n            DirectoryInfo dir = new DirectoryInfo(directory);\n\n            if (!dir.Exists)\n            {\n                throw new DirectoryNotFoundException(&quot;The directory does not exist.&quot;);\n            }\n\n            // Call the GetFileSystemInfos method.\n            FileSystemInfo[] infos = dir.GetFileSystemInfos();\n\n            Console.WriteLine(&quot;Working...&quot;);\n\n            // Pass the result to the ListDirectoriesAndFiles\n            // method defined below.\n            ListDirectoriesAndFiles(infos);\n\n            // Display the results to the console. \n            Console.WriteLine(&quot;Directories: {0}&quot;, directories);\n            Console.WriteLine(&quot;Files: {0}&quot;, files);\n\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(e.Message);\n        }\n        finally\n        {\n\n            Console.ReadLine();\n        }\n    }\n\n    static void ListDirectoriesAndFiles(FileSystemInfo[] FSInfo)\n    {\n        // Check the FSInfo parameter.\n        if (FSInfo == null)\n        {\n            throw new ArgumentNullException(&quot;FSInfo&quot;);\n        }\n\n        // Iterate through each item.\n        foreach (FileSystemInfo i in FSInfo)\n        {\n            // Check to see if this is a DirectoryInfo object.\n            if (i is DirectoryInfo)\n            {\n                // Add one to the directory count.\n                directories++;\n\n                // Cast the object to a DirectoryInfo object.\n                DirectoryInfo dInfo = (DirectoryInfo)i;\n\n                // Iterate through all sub-directories.\n                ListDirectoriesAndFiles(dInfo.GetFileSystemInfos());\n            }\n            // Check to see if this is a FileInfo object.\n            else if (i is FileInfo)\n            {\n                // Add one to the file count.\n                files++;\n\n            }\n\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_DirectoryInfo_GetFileSystemInfos_System_String_\">\r\n    \r\n            <a id=\"System_IO_DirectoryInfo_GetFileSystemInfos_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetFileSystemInfos(String)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves an array of strongly typed <a class=\"xref\" href=\"system.io.filesysteminfo\" data-linktype=\"relative-path\">FileSystemInfo</a> objects representing the files and subdirectories that match the specified search criteria.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.IO.FileSystemInfo[] GetFileSystemInfos (string searchPattern);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>searchPattern</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The search string to match against the names of directories and files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn&#39;t support regular expressions. The default pattern is &quot;*&quot;, which returns all files.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filesysteminfo\" data-linktype=\"relative-path\">FileSystemInfo</a>[]</div>\r\n                  </div>\r\n                  <p>An array of strongly typed <code>FileSystemInfo</code> objects matching the search criteria.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>searchPattern </code>contains one or more invalid characters defined by the <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>searchPattern</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path is invalid (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>searchPattern</code> can be a combination of literal and wildcard characters, but doesn&#39;t support regular expressions. The following wildcard specifiers are permitted in <code>searchPattern</code>.  </p>\n<table>\n<thead>\n<tr>\n<th>Wildcard specifier</th>\n<th>Matches</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>* (asterisk)</td>\n<td>Zero or more characters in that position.</td>\n</tr>\n<tr>\n<td>? (question mark)</td>\n<td>Zero or one character in that position.</td>\n</tr>\n</tbody>\n</table>\n<p> Characters other than the wildcard are literal characters. For example, the  string &quot;<em>t&quot; searches for all names in  ending with the letter &quot;t&quot;. &quot;. The <code>searchPattern</code> string &quot;s\\</em>&quot; searches for all names in <code>path</code> beginning with the letter &quot;s&quot;.  </p>\n<p> This method is not recursive.  </p>\n<p> For subdirectories, the <a class=\"xref\" href=\"system.io.filesysteminfo\" data-linktype=\"relative-path\">FileSystemInfo</a> objects returned by this method can be cast to the derived class <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a>. Use the <a class=\"xref\" href=\"system.io.fileattributes\" data-linktype=\"relative-path\">FileAttributes</a> value returned by the <a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_Attributes_\" data-linktype=\"relative-path\">Attributes</a> property to determine whether the <a class=\"xref\" href=\"system.io.filesysteminfo\" data-linktype=\"relative-path\">FileSystemInfo</a> represents a file or a directory.  </p>\n<p> Wild cards are permitted. For example, the <code>searchPattern</code> string &quot;<em>t&quot; searches for all directory names in <code>path</code> ending with the letter &quot;t&quot;. The <code>searchPattern</code> string &quot;s\\</em>&quot; searches for all directory names in <code>path</code> beginning with the letter &quot;s&quot;.  </p>\n<p> The string &quot;..&quot; can only be used in <code>searchPattern</code> if it is specified as a part of a valid directory name, such as in the directory name &quot;a..b&quot;. It cannot be used to move up the directory hierarchy. If there are no files or directories, or no files or directories that match the <code>searchPattern</code> string in the <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a>, this method returns an empty array.  </p>\n<p> This method pre-populates the values of the following <a class=\"xref\" href=\"system.io.filesysteminfo\" data-linktype=\"relative-path\">FileSystemInfo</a> properties:  </p>\n<ul>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_Attributes_\" data-linktype=\"relative-path\">Attributes</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_CreationTime_\" data-linktype=\"relative-path\">CreationTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_CreationTimeUtc_\" data-linktype=\"relative-path\">CreationTimeUtc</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastAccessTime_\" data-linktype=\"relative-path\">LastAccessTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastAccessTimeUtc_\" data-linktype=\"relative-path\">LastAccessTimeUtc</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastWriteTime_\" data-linktype=\"relative-path\">LastWriteTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastWriteTimeUtc_\" data-linktype=\"relative-path\">LastWriteTimeUtc</a></li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example counts the files and directories that match the specified search pattern.  </p>\n<pre><code class=\"lang-cs\" name=\"DirInfo GetFileSysInfos2#1\">using System;\nusing System.IO;\n\nclass DirectoryFileCount\n{\n\n    static long files = 0;\n    static long directories = 0;\n\n\n    static void Main()\n    {\n        try\n        {\n            Console.WriteLine(&quot;Enter the path to a directory:&quot;);\n\n            string directory = Console.ReadLine();\n\n            Console.WriteLine(&quot;Enter a search string (for example *p*):&quot;);\n\n            string searchString = Console.ReadLine();\n\n            // Create a new DirectoryInfo object.\n            DirectoryInfo dir = new DirectoryInfo(directory);\n\n            if (!dir.Exists)\n            {\n                throw new DirectoryNotFoundException(&quot;The directory does not exist.&quot;);\n            }\n\n            // Call the GetFileSystemInfos method.\n            FileSystemInfo[] infos = dir.GetFileSystemInfos(searchString);\n\n            Console.WriteLine(&quot;Working...&quot;);\n\n            // Pass the result to the ListDirectoriesAndFiles\n            // method defined below.\n            ListDirectoriesAndFiles(infos, searchString);\n\n            // Display the results to the console. \n            Console.WriteLine(&quot;Directories: {0}&quot;, directories);\n            Console.WriteLine(&quot;Files: {0}&quot;, files);\n\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(e.Message);\n        }\n        finally\n        {\n\n            Console.ReadLine();\n        }\n    }\n\n    static void ListDirectoriesAndFiles(FileSystemInfo[] FSInfo, string SearchString)\n    {\n        // Check the parameters.\n        if (FSInfo == null)\n        {\n            throw new ArgumentNullException(&quot;FSInfo&quot;);\n        }\n        if (SearchString == null || SearchString.Length == 0)\n        {\n            throw new ArgumentNullException(&quot;SearchString&quot;);\n        }\n\n        // Iterate through each item.\n        foreach (FileSystemInfo i in FSInfo)\n        {\n            // Check to see if this is a DirectoryInfo object.\n            if (i is DirectoryInfo)\n            {\n                // Add one to the directory count.\n                directories++;\n\n                // Cast the object to a DirectoryInfo object.\n                DirectoryInfo dInfo = (DirectoryInfo)i;\n\n                // Iterate through all sub-directories.\n                ListDirectoriesAndFiles(dInfo.GetFileSystemInfos(SearchString), SearchString);\n            }\n            // Check to see if this is a FileInfo object.\n            else if (i is FileInfo)\n            {\n                // Add one to the file count.\n                files++;\n\n            }\n\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"DirInfo GetFileSysInfos2#1\">Imports System\nImports System.IO\n\n\n\nModule DirectoryFileCount\n\n    Dim files As Long = 0\n    Dim directories As Long = 0\n\n\n\n    Sub Main()\n        Try\n            Console.WriteLine(&quot;Enter the path to a directory:&quot;)\n\n            Dim directory As String = Console.ReadLine()\n\n            Console.WriteLine(&quot;Enter a search string (for example *p*):&quot;)\n\n            Dim searchString As String = Console.ReadLine()\n\n            &#39; Create a new DirectoryInfo object.\n            Dim dir As New DirectoryInfo(directory)\n\n            If Not dir.Exists Then\n                Throw New DirectoryNotFoundException(&quot;The directory does not exist.&quot;)\n            End If\n\n            &#39; Call the GetFileSystemInfos method.\n            Dim infos As FileSystemInfo() = dir.GetFileSystemInfos(searchString)\n\n            Console.WriteLine(&quot;Working...&quot;)\n\n            &#39; Pass the result to the ListDirectoriesAndFiles\n            &#39; method defined below.\n            ListDirectoriesAndFiles(infos, searchString)\n\n            &#39; Display the results to the console. \n            Console.WriteLine(&quot;Directories: {0}&quot;, directories)\n            Console.WriteLine(&quot;Files: {0}&quot;, files)\n\n        Catch e As Exception\n            Console.WriteLine(e.Message)\n        Finally\n\n            Console.ReadLine()\n        End Try\n\n    End Sub\n\n\n    Sub ListDirectoriesAndFiles(ByVal FSInfo() As FileSystemInfo, ByVal SearchString As String)\n        &#39; Check the parameters.\n        If FSInfo Is Nothing Then\n            Throw New ArgumentNullException(&quot;FSInfo&quot;)\n        End If\n        If SearchString Is Nothing OrElse SearchString.Length = 0 Then\n            Throw New ArgumentNullException(&quot;SearchString&quot;)\n        End If\n\n        &#39; Iterate through each item.\n        Dim i As FileSystemInfo\n        For Each i In FSInfo\n            &#39; Check to see if this is a DirectoryInfo object.\n            If TypeOf i Is DirectoryInfo Then\n                &#39; Add one to the directory count.\n                directories += 1\n\n                &#39; Cast the object to a DirectoryInfo object.\n                Dim dInfo As DirectoryInfo = CType(i, DirectoryInfo)\n\n                &#39; Iterate through all sub-directories.\n                ListDirectoriesAndFiles(dInfo.GetFileSystemInfos(SearchString), SearchString)\n                &#39; Check to see if this is a FileInfo object.\n            ElseIf TypeOf i Is FileInfo Then\n                &#39; Add one to the file count.\n                files += 1\n            End If\n        Next i\n\n    End Sub\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_DirectoryInfo_GetFileSystemInfos_System_String_System_IO_SearchOption_\">\r\n    \r\n            <a id=\"System_IO_DirectoryInfo_GetFileSystemInfos_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetFileSystemInfos(String,SearchOption)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves an array of <a class=\"xref\" href=\"system.io.filesysteminfo\" data-linktype=\"relative-path\">FileSystemInfo</a> objects that represent the files and subdirectories matching the specified search criteria.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.IO.FileSystemInfo[] GetFileSystemInfos (string searchPattern, System.IO.SearchOption searchOption);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>searchPattern</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The search string to match against the names of directories and filesa.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn&#39;t support regular expressions. The default pattern is &quot;*&quot;, which returns all files.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>searchOption</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.searchoption\" data-linktype=\"relative-path\">SearchOption</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <a class=\"xref\" href=\"system.io.searchoption\" data-linktype=\"relative-path\">SearchOption</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filesysteminfo\" data-linktype=\"relative-path\">FileSystemInfo</a>[]</div>\r\n                  </div>\r\n                  <p>An array of file system entries that match the search criteria.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>searchPattern </code>contains one or more invalid characters defined by the <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>searchPattern</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>searchOption</code> is not a valid <a class=\"xref\" href=\"system.io.searchoption\" data-linktype=\"relative-path\">SearchOption</a> value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path is invalid (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>searchPattern</code> can be a combination of literal and wildcard characters, but doesn&#39;t support regular expressions. The following wildcard specifiers are permitted in <code>searchPattern</code>.  </p>\n<table>\n<thead>\n<tr>\n<th>Wildcard specifier</th>\n<th>Matches</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>* (asterisk)</td>\n<td>Zero or more characters in that position.</td>\n</tr>\n<tr>\n<td>? (question mark)</td>\n<td>Zero or one character in that position.</td>\n</tr>\n</tbody>\n</table>\n<p> Characters other than the wildcard are literal characters. For example, the  string &quot;<em>t&quot; searches for all names in  ending with the letter &quot;t&quot;. &quot;. The <code>searchPattern</code> string &quot;s\\</em>&quot; searches for all names in <code>path</code> beginning with the letter &quot;s&quot;.  </p>\n<p> For subdirectories, the <a class=\"xref\" href=\"system.io.filesysteminfo\" data-linktype=\"relative-path\">FileSystemInfo</a> objects returned by this method can be cast to the derived class <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a>. Use the <a class=\"xref\" href=\"system.io.fileattributes\" data-linktype=\"relative-path\">FileAttributes</a> value returned by the <a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_Attributes_\" data-linktype=\"relative-path\">Attributes</a> property to determine whether the <a class=\"xref\" href=\"system.io.filesysteminfo\" data-linktype=\"relative-path\">FileSystemInfo</a> represents a file or a directory.  </p>\n<p> This method pre-populates the values of the following <a class=\"xref\" href=\"system.io.filesysteminfo\" data-linktype=\"relative-path\">FileSystemInfo</a> properties:  </p>\n<ul>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_Attributes_\" data-linktype=\"relative-path\">Attributes</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_CreationTime_\" data-linktype=\"relative-path\">CreationTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_CreationTimeUtc_\" data-linktype=\"relative-path\">CreationTimeUtc</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastAccessTime_\" data-linktype=\"relative-path\">LastAccessTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastAccessTimeUtc_\" data-linktype=\"relative-path\">LastAccessTimeUtc</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastWriteTime_\" data-linktype=\"relative-path\">LastWriteTime</a>  \n</li>\n<li><a class=\"xref\" href=\"system.io.filesysteminfo#System_IO_FileSystemInfo_LastWriteTimeUtc_\" data-linktype=\"relative-path\">LastWriteTimeUtc</a></li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_DirectoryInfo_MoveTo_System_String_\">\r\n    \r\n            <a id=\"System_IO_DirectoryInfo_MoveTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MoveTo(String)</div>        \r\n          </div>\r\n    \r\n            <p>Moves a <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> instance and its contents to a new path.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void MoveTo (string destDirName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>destDirName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name and path to which to move this directory. The destination cannot be another disk volume or a directory with the identical name. It can be an existing directory to which you want to add this directory as a subdirectory.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>destDirName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>destDirName</code> is an empty string (&#39;&#39;&quot;).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to move a directory to a different volume.  </p>\n<p> -or-  </p>\n<p> <code>destDirName</code> already exists.  </p>\n<p> -or-  </p>\n<p> You are not authorized to access this path.  </p>\n<p> -or-  </p>\n<p> The directory being moved and the destination directory have the same name.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The destination directory cannot be found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method throws an <a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a> if, for example, you try to move c:\\mydir to c:\\public, and c:\\public already exists. You must specify &quot;c:\\\\public\\\\mydir&quot; as the <code>destDirName</code> parameter, or specify a new directory name such as &quot;c:\\\\newdir&quot;.  </p>\n<p> This method permits moving a directory to a read-only directory. The read/write attribute of neither directory is affected.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates moving a directory.  </p>\n<pre><code class=\"lang-cs\" name=\"directoryinfomoveto#1\">using System;\nusing System.IO;\n\npublic class MoveToTest \n{\n    public static void Main() \n    {\n\n        // Make a reference to a directory.\n        DirectoryInfo di = new DirectoryInfo(&quot;TempDir&quot;);\n\n        // Create the directory only if it does not already exist.\n        if (di.Exists == false)\n            di.Create();\n\n        // Create a subdirectory in the directory just created.\n        DirectoryInfo dis = di.CreateSubdirectory(&quot;SubDir&quot;);\n\n        // Move the main directory. Note that the contents move with the directory.\n        if (Directory.Exists(&quot;NewTempDir&quot;) == false)\n            di.MoveTo(&quot;NewTempDir&quot;);\n\n        try \n        {\n            // Attempt to delete the subdirectory. Note that because it has been\n            // moved, an exception is thrown.\n            dis.Delete(true);\n        } \n        catch (Exception) \n        {\n            // Handle this exception in some way, such as with the following code:\n            // Console.WriteLine(&quot;That directory does not exist.&quot;);\n        }\n\n        // Point the DirectoryInfo reference to the new directory.\n        //di = new DirectoryInfo(&quot;NewTempDir&quot;);\n\n        // Delete the directory.\n        //di.Delete(true);\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"directoryinfomoveto#1\">using namespace System;\nusing namespace System::IO;\nint main()\n{\n   \n   // Make a reference to a directory.\n   DirectoryInfo^ di = gcnew DirectoryInfo( &quot;TempDir&quot; );\n   \n   // Create the directory only if it does not already exist.\n   if (  !di-&gt;Exists )\n      di-&gt;Create();\n\n   \n   // Create a subdirectory in the directory just created.\n   DirectoryInfo^ dis = di-&gt;CreateSubdirectory( &quot;SubDir&quot; );\n   \n   // Move the main directory. Note that the contents move with the directory.\n   if (  !Directory::Exists( &quot;NewTempDir&quot; ) )\n      di-&gt;MoveTo( &quot;NewTempDir&quot; );\n\n   try\n   {\n      \n      // Attempt to delete the subdirectory. Note that because it has been\n      // moved, an exception is thrown.\n      dis-&gt;Delete( true );\n   }\n   catch ( Exception^ ) \n   {\n      \n      // Handle this exception in some way, such as with the following code:\n      // Console::WriteLine(S&quot;That directory does not exist.&quot;);\n   }\n\n   \n   // Point the DirectoryInfo reference to the new directory.\n   //di = new DirectoryInfo(S&quot;NewTempDir&quot;);\n   // Delete the directory.\n   //di-&gt;Delete(true);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"directoryinfomoveto#1\">Imports System\nImports System.IO\n\nPublic Class MoveToTest\n\n    Public Shared Sub Main()\n        &#39; Make a reference to a directory.\n        Dim di As New DirectoryInfo(&quot;TempDir&quot;)\n        &#39; Create the directory only if it does not already exist.\n        If di.Exists = False Then\n            di.Create()\n        End If\n\n        &#39; Create a subdirectory in the directory just created.\n        Dim dis As DirectoryInfo = di.CreateSubdirectory(&quot;SubDir&quot;)\n        If Directory.Exists(&quot;NewTempDir&quot;) = False Then\n            &#39; Move the main directory. Note that the contents move with the directory.\n            di.MoveTo(&quot;NewTempDir&quot;)\n        End If\n        Try\n            &#39; Attempt to delete the subdirectory. Note that because it has been\n            &#39; moved, an exception is thrown.\n            dis.Delete(True)\n        Catch\n            &#39; Handle this exception in some way, such as with the following code:\n            &#39; Console.WriteLine(&quot;That directory does not exist.&quot;);\n            &#39; Point the DirectoryInfo reference to the new directory.\n            &#39; di = New DirectoryInfo(&quot;NewTempDir&quot;)\n            &#39; Delete the directory.\n            &#39; di.Delete(True)        \n        End Try\n\n    End Sub &#39;Main\nEnd Class &#39;MoveToTest\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_DirectoryInfo_SetAccessControl_System_Security_AccessControl_DirectorySecurity_\">\r\n    \r\n            <a id=\"System_IO_DirectoryInfo_SetAccessControl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetAccessControl(DirectorySecurity)</div>        \r\n          </div>\r\n    \r\n            <p>Applies access control list (ACL) entries described by a <a class=\"xref\" href=\"system.security.accesscontrol.directorysecurity\" data-linktype=\"relative-path\">DirectorySecurity</a> object to the directory described by the current <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetAccessControl (System.Security.AccessControl.DirectorySecurity directorySecurity);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>directorySecurity</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.directorysecurity\" data-linktype=\"relative-path\">DirectorySecurity</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that describes an ACL entry to apply to the directory described by the <code>path</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>directorySecurity</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.systemexception\" data-linktype=\"relative-path\">SystemException</a></div>\r\n                  </div>\r\n                  <p>The file could not be found or modified.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The current process does not have access to open the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The current operating system is not Microsoft Windows 2000 or later.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An access control list (ACL) describes individuals and/or groups who have, or do not have, rights to specific actions on the given file or directory. For more information, see <a href=\"../Topic/How%20to:%20Add%20or%20Remove%20Access%20Control%20List%20Entries.md\" data-linktype=\"relative-path\">How to: Add or Remove Access Control List Entries</a>.  </p>\n<p> The SetAccessControl method applies ACL entries to a file that represents the noninherited ACL list.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> The ACL specified for <code>directorySecurity</code> replaces the existing ACL for the directory. To add permissions for a new user, use the <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_GetAccessControl_\" data-linktype=\"relative-path\">GetAccessControl</a> method to obtain the existing ACL, and modify it.  </p>\n</div>\n<p> The SetAccessControl method persists only <a class=\"xref\" href=\"system.security.accesscontrol.directorysecurity\" data-linktype=\"relative-path\">DirectorySecurity</a> objects that have been modified after object creation.  If a <a class=\"xref\" href=\"system.security.accesscontrol.directorysecurity\" data-linktype=\"relative-path\">DirectorySecurity</a> object has not been modified, it will not be persisted to a file.  Therefore, it is not possible to retrieve a <a class=\"xref\" href=\"system.security.accesscontrol.directorysecurity\" data-linktype=\"relative-path\">DirectorySecurity</a> object from one file and reapply the same object to another file.  </p>\n<p> To copy ACL information from one file to another:  </p>\n<ol>\n<li><p>Use the <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_GetAccessControl_\" data-linktype=\"relative-path\">GetAccessControl</a> method to retrieve the <a class=\"xref\" href=\"system.security.accesscontrol.directorysecurity\" data-linktype=\"relative-path\">DirectorySecurity</a> object from the source file.  </p>\n</li>\n<li><p>Create a new <a class=\"xref\" href=\"system.security.accesscontrol.directorysecurity\" data-linktype=\"relative-path\">DirectorySecurity</a> object for the destination file.  </p>\n</li>\n<li><p>Use the <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_GetSecurityDescriptorBinaryForm_\" data-linktype=\"relative-path\">GetSecurityDescriptorBinaryForm</a> or <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_GetSecurityDescriptorSddlForm_\" data-linktype=\"relative-path\">GetSecurityDescriptorSddlForm</a> method of the source <a class=\"xref\" href=\"system.security.accesscontrol.directorysecurity\" data-linktype=\"relative-path\">DirectorySecurity</a> object to retrieve the ACL information.  </p>\n</li>\n<li><p>Use the <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_SetSecurityDescriptorBinaryForm_\" data-linktype=\"relative-path\">SetSecurityDescriptorBinaryForm</a> or <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_SetSecurityDescriptorSddlForm_\" data-linktype=\"relative-path\">SetSecurityDescriptorSddlForm</a> method to copy the information retrieved in step 3 to the destination <a class=\"xref\" href=\"system.security.accesscontrol.directorysecurity\" data-linktype=\"relative-path\">DirectorySecurity</a> object.  </p>\n</li>\n<li><p>Set the destination <a class=\"xref\" href=\"system.security.accesscontrol.directorysecurity\" data-linktype=\"relative-path\">DirectorySecurity</a> object to the destination file using the SetAccessControl method.</p>\n</li>\n</ol>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_GetAccessControl_\" data-linktype=\"relative-path\">GetAccessControl</a> and SetAccessControl methods to add and then remove an access control list (ACL) entry from a directory.  </p>\n<pre><code class=\"lang-cpp\" name=\"IO.DiretoryInfo.GetAccessControl-SetAccessControl#1\">using namespace System;\nusing namespace System::IO;\nusing namespace System::Security::AccessControl;\n\n// Adds an ACL entry on the specified directory for the\n// specified account.\nvoid AddDirectorySecurity(String^ directoryName, String^ account, \n     FileSystemRights rights, AccessControlType controlType)\n{\n    // Create a new DirectoryInfo object.\n    DirectoryInfo^ dInfo = gcnew DirectoryInfo(directoryName);\n\n    // Get a DirectorySecurity object that represents the\n    // current security settings.\n    DirectorySecurity^ dSecurity = dInfo-&gt;GetAccessControl();\n\n    // Add the FileSystemAccessRule to the security settings.\n    dSecurity-&gt;AddAccessRule( gcnew FileSystemAccessRule(account,\n        rights, controlType));\n\n    // Set the new access settings.\n    dInfo-&gt;SetAccessControl(dSecurity);\n}\n\n// Removes an ACL entry on the specified directory for the\n// specified account.\nvoid RemoveDirectorySecurity(String^ directoryName, String^ account,\n     FileSystemRights rights, AccessControlType controlType)\n{\n    // Create a new DirectoryInfo object.\n    DirectoryInfo^ dInfo = gcnew DirectoryInfo(directoryName);\n\n    // Get a DirectorySecurity object that represents the\n    // current security settings.\n    DirectorySecurity^ dSecurity = dInfo-&gt;GetAccessControl();\n\n    // Add the FileSystemAccessRule to the security settings.\n    dSecurity-&gt;RemoveAccessRule(gcnew FileSystemAccessRule(account,\n        rights, controlType));\n\n    // Set the new access settings.\n    dInfo-&gt;SetAccessControl(dSecurity);\n}    \n\nint main()\n{\n    String^ directoryName = &quot;TestDirectory&quot;;\n    String^ accountName = &quot;MYDOMAIN\\\\MyAccount&quot;;\n    if (!Directory::Exists(directoryName))\n    {\n        Console::WriteLine(&quot;The directory {0} could not be found.&quot;, \n            directoryName);\n        return 0;\n    }\n    try\n    {\n        Console::WriteLine(&quot;Adding access control entry for {0}&quot;,\n            directoryName);\n\n        // Add the access control entry to the directory.\n        AddDirectorySecurity(directoryName, accountName,\n            FileSystemRights::ReadData, AccessControlType::Allow);\n\n        Console::WriteLine(&quot;Removing access control entry from {0}&quot;,\n            directoryName);\n\n        // Remove the access control entry from the directory.\n        RemoveDirectorySecurity(directoryName, accountName, \n            FileSystemRights::ReadData, AccessControlType::Allow);\n\n        Console::WriteLine(&quot;Done.&quot;);\n    }\n    catch (UnauthorizedAccessException^)\n    {\n        Console::WriteLine(&quot;You are not authorised to carry&quot; +\n            &quot; out this procedure.&quot;);\n    }\n    catch (System::Security::Principal::\n        IdentityNotMappedException^)\n    {\n        Console::WriteLine(&quot;The account {0} could not be found.&quot;, accountName);\n    }\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"IO.DiretoryInfo.GetAccessControl-SetAccessControl#1\">using System;\nusing System.IO;\nusing System.Security.AccessControl;\n\nnamespace FileSystemExample\n{\n    class DirectoryExample\n    {\n        public static void Main()\n        {\n            try\n            {\n                string DirectoryName = &quot;TestDirectory&quot;;\n\n                Console.WriteLine(&quot;Adding access control entry for &quot; + DirectoryName);\n\n                // Add the access control entry to the directory.\n                AddDirectorySecurity(DirectoryName, @&quot;MYDOMAIN\\MyAccount&quot;, FileSystemRights.ReadData, AccessControlType.Allow);\n\n                Console.WriteLine(&quot;Removing access control entry from &quot; + DirectoryName);\n\n                // Remove the access control entry from the directory.\n                RemoveDirectorySecurity(DirectoryName, @&quot;MYDOMAIN\\MyAccount&quot;, FileSystemRights.ReadData, AccessControlType.Allow);\n\n                Console.WriteLine(&quot;Done.&quot;);\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(e);\n            }\n\n            Console.ReadLine();\n        }\n\n        // Adds an ACL entry on the specified directory for the specified account.\n        public static void AddDirectorySecurity(string FileName, string Account, FileSystemRights Rights, AccessControlType ControlType)\n        {\n            // Create a new DirectoryInfo object.\n            DirectoryInfo dInfo = new DirectoryInfo(FileName);\n\n            // Get a DirectorySecurity object that represents the \n            // current security settings.\n            DirectorySecurity dSecurity = dInfo.GetAccessControl();\n\n            // Add the FileSystemAccessRule to the security settings. \n            dSecurity.AddAccessRule(new FileSystemAccessRule(Account,\n                                                            Rights,\n                                                            ControlType));\n\n            // Set the new access settings.\n            dInfo.SetAccessControl(dSecurity);\n\n        }\n\n        // Removes an ACL entry on the specified directory for the specified account.\n        public static void RemoveDirectorySecurity(string FileName, string Account, FileSystemRights Rights, AccessControlType ControlType)\n        {\n            // Create a new DirectoryInfo object.\n            DirectoryInfo dInfo = new DirectoryInfo(FileName);\n\n            // Get a DirectorySecurity object that represents the \n            // current security settings.\n            DirectorySecurity dSecurity = dInfo.GetAccessControl();\n\n            // Add the FileSystemAccessRule to the security settings. \n            dSecurity.RemoveAccessRule(new FileSystemAccessRule(Account,\n                                                            Rights,\n                                                            ControlType));\n\n            // Set the new access settings.\n            dInfo.SetAccessControl(dSecurity);\n\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"IO.DiretoryInfo.GetAccessControl-SetAccessControl#1\">Imports System\nImports System.IO\nImports System.Security.AccessControl\n\n\n\nModule DirectoryExample\n\n    Sub Main()\n        Try\n            Dim DirectoryName As String = &quot;TestDirectory&quot;\n\n            Console.WriteLine(&quot;Adding access control entry for &quot; + DirectoryName)\n\n            &#39; Add the access control entry to the directory.\n            AddDirectorySecurity(DirectoryName, &quot;MYDOMAIN\\MyAccount&quot;, FileSystemRights.ReadData, AccessControlType.Allow)\n\n            Console.WriteLine(&quot;Removing access control entry from &quot; + DirectoryName)\n\n            &#39; Remove the access control entry from the directory.\n            RemoveDirectorySecurity(DirectoryName, &quot;MYDOMAIN\\MyAccount&quot;, FileSystemRights.ReadData, AccessControlType.Allow)\n\n            Console.WriteLine(&quot;Done.&quot;)\n        Catch e As Exception\n            Console.WriteLine(e)\n        End Try\n\n        Console.ReadLine()\n\n    End Sub\n\n\n    &#39; Adds an ACL entry on the specified directory for the specified account.\n    Sub AddDirectorySecurity(ByVal FileName As String, ByVal Account As String, ByVal Rights As FileSystemRights, ByVal ControlType As AccessControlType)\n        &#39; Create a new DirectoryInfoobject.\n        Dim dInfo As New DirectoryInfo(FileName)\n\n        &#39; Get a DirectorySecurity object that represents the \n        &#39; current security settings.\n        Dim dSecurity As DirectorySecurity = dInfo.GetAccessControl()\n\n        &#39; Add the FileSystemAccessRule to the security settings. \n        dSecurity.AddAccessRule(New FileSystemAccessRule(Account, Rights, ControlType))\n\n        &#39; Set the new access settings.\n        dInfo.SetAccessControl(dSecurity)\n\n    End Sub\n\n\n    &#39; Removes an ACL entry on the specified directory for the specified account.\n    Sub RemoveDirectorySecurity(ByVal FileName As String, ByVal Account As String, ByVal Rights As FileSystemRights, ByVal ControlType As AccessControlType)\n        &#39; Create a new DirectoryInfo object.\n        Dim dInfo As New DirectoryInfo(FileName)\n\n        &#39; Get a DirectorySecurity object that represents the \n        &#39; current security settings.\n        Dim dSecurity As DirectorySecurity = dInfo.GetAccessControl()\n\n        &#39; Add the FileSystemAccessRule to the security settings. \n        dSecurity.RemoveAccessRule(New FileSystemAccessRule(Account, Rights, ControlType))\n\n        &#39; Set the new access settings.\n        dInfo.SetAccessControl(dSecurity)\n\n    End Sub\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_DirectoryInfo_ToString\">\r\n    \r\n            <a id=\"System_IO_DirectoryInfo_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the original path that was passed by the user.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Returns the original path that was passed by the user.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.IO.DirectoryInfo.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.IO.DirectoryInfo.yml\">\r\n<meta name=\"APIName\" content=\"System.IO.DirectoryInfo\">\r\n<meta name=\"APIName\" content=\"System.IO.DirectoryInfo..ctor\">\r\n<meta name=\"APIName\" content=\"System.IO.DirectoryInfo.Create\">\r\n<meta name=\"APIName\" content=\"System.IO.DirectoryInfo.CreateSubdirectory\">\r\n<meta name=\"APIName\" content=\"System.IO.DirectoryInfo.Delete\">\r\n<meta name=\"APIName\" content=\"System.IO.DirectoryInfo.EnumerateDirectories\">\r\n<meta name=\"APIName\" content=\"System.IO.DirectoryInfo.EnumerateFiles\">\r\n<meta name=\"APIName\" content=\"System.IO.DirectoryInfo.EnumerateFileSystemInfos\">\r\n<meta name=\"APIName\" content=\"System.IO.DirectoryInfo.Exists\">\r\n<meta name=\"APIName\" content=\"System.IO.DirectoryInfo.GetAccessControl\">\r\n<meta name=\"APIName\" content=\"System.IO.DirectoryInfo.GetDirectories\">\r\n<meta name=\"APIName\" content=\"System.IO.DirectoryInfo.GetFiles\">\r\n<meta name=\"APIName\" content=\"System.IO.DirectoryInfo.GetFileSystemInfos\">\r\n<meta name=\"APIName\" content=\"System.IO.DirectoryInfo.MoveTo\">\r\n<meta name=\"APIName\" content=\"System.IO.DirectoryInfo.Name\">\r\n<meta name=\"APIName\" content=\"System.IO.DirectoryInfo.Parent\">\r\n<meta name=\"APIName\" content=\"System.IO.DirectoryInfo.Root\">\r\n<meta name=\"APIName\" content=\"System.IO.DirectoryInfo.SetAccessControl\">\r\n<meta name=\"APIName\" content=\"System.IO.DirectoryInfo.ToString\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"7cb56067-e86f-8ae9-c53f-591223820956\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Exposes instance methods for creating, moving, and enumerating through directories and subdirectories. This class cannot be inherited.  \n To browse the .NET Framework source code for this type, see t…\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.IO/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.IO.DirectoryInfo\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.IO.DirectoryInfo.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.IO.DirectoryInfo.yml","open_to_public_contributors":true,"api_name":["System.IO.DirectoryInfo","System.IO.DirectoryInfo..ctor","System.IO.DirectoryInfo.Create","System.IO.DirectoryInfo.CreateSubdirectory","System.IO.DirectoryInfo.Delete","System.IO.DirectoryInfo.EnumerateDirectories","System.IO.DirectoryInfo.EnumerateFiles","System.IO.DirectoryInfo.EnumerateFileSystemInfos","System.IO.DirectoryInfo.Exists","System.IO.DirectoryInfo.GetAccessControl","System.IO.DirectoryInfo.GetDirectories","System.IO.DirectoryInfo.GetFiles","System.IO.DirectoryInfo.GetFileSystemInfos","System.IO.DirectoryInfo.MoveTo","System.IO.DirectoryInfo.Name","System.IO.DirectoryInfo.Parent","System.IO.DirectoryInfo.Root","System.IO.DirectoryInfo.SetAccessControl","System.IO.DirectoryInfo.ToString"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.IO.DirectoryInfo","System::IO::DirectoryInfo","System.IO.DirectoryInfo.#ctor","System::IO::DirectoryInfo::#ctor","System.IO.DirectoryInfo.Create","System::IO::DirectoryInfo::Create","System.IO.DirectoryInfo.CreateSubdirectory","System::IO::DirectoryInfo::CreateSubdirectory","System.IO.DirectoryInfo.Delete","System::IO::DirectoryInfo::Delete","System.IO.DirectoryInfo.EnumerateDirectories","System::IO::DirectoryInfo::EnumerateDirectories","System.IO.DirectoryInfo.EnumerateFiles","System::IO::DirectoryInfo::EnumerateFiles","System.IO.DirectoryInfo.EnumerateFileSystemInfos","System::IO::DirectoryInfo::EnumerateFileSystemInfos","System.IO.DirectoryInfo.Exists","System::IO::DirectoryInfo::Exists","System.IO.DirectoryInfo.GetAccessControl","System::IO::DirectoryInfo::GetAccessControl","System.IO.DirectoryInfo.GetDirectories","System::IO::DirectoryInfo::GetDirectories","System.IO.DirectoryInfo.GetFiles","System::IO::DirectoryInfo::GetFiles","System.IO.DirectoryInfo.GetFileSystemInfos","System::IO::DirectoryInfo::GetFileSystemInfos","System.IO.DirectoryInfo.MoveTo","System::IO::DirectoryInfo::MoveTo","System.IO.DirectoryInfo.Name","System::IO::DirectoryInfo::Name","System.IO.DirectoryInfo.Parent","System::IO::DirectoryInfo::Parent","System.IO.DirectoryInfo.Root","System::IO::DirectoryInfo::Root","System.IO.DirectoryInfo.SetAccessControl","System::IO::DirectoryInfo::SetAccessControl","System.IO.DirectoryInfo.ToString","System::IO::DirectoryInfo::ToString"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"7cb56067-e86f-8ae9-c53f-591223820956","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.IO/DirectoryInfo.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"DirectoryInfo class | Microsoft Docs","_op_ogTitle":"DirectoryInfo class","description":"Exposes instance methods for creating, moving, and enumerating through directories and subdirectories. This class cannot be inherited.  \n To browse the .NET Framework source code for this type, see t…","toc_asset_id":"_splitted/System.IO/toc.json","toc_rel":"_splitted/System.IO/toc.json","source_url":"","ms.assetid":"System.IO.DirectoryInfo","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.io.directoryinfo","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.io.directoryinfo","fileRelativePath":"System.IO.DirectoryInfo.html"},"themesRelativePathToOutputRoot":"_themes/"}