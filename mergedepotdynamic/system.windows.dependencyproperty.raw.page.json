{"content":"    \r\n    <h1 id=\"System_Windows_DependencyProperty\">\r\n      <span class=\"lang-csharp\">DependencyProperty</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a property that can be set through methods such as, styling, data binding, animation, and inheritance.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.ComponentModel.TypeConverter(&quot;System.Windows.Markup.DependencyPropertyConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null&quot;)]\n[System.Windows.Markup.ValueSerializer(typeof(System.Windows.DependencyPropertyValueSerializer))]\npublic sealed class DependencyProperty</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">DependencyProperty</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>A DependencyProperty supports the following capabilities in Windows Presentation Foundation (WPF):  </p>\n<ul>\n<li><p>The property can be set in a style. For more information, see <a href=\"../Topic/Styling%20and%20Templating.md\" data-linktype=\"relative-path\">Styling and Templating</a>.  </p>\n</li>\n<li><p>The property can be set through data binding. For more information about data binding dependency properties, see <a href=\"../Topic/How%20to:%20Bind%20the%20Properties%20of%20Two%20Controls.md\" data-linktype=\"relative-path\">How to: Bind the Properties of Two Controls</a>.  </p>\n</li>\n<li><p>The property can be set with a dynamic resource reference. For more information, see <a href=\"../Topic/XAML%20Resources.md\" data-linktype=\"relative-path\">XAML Resources</a>.  </p>\n</li>\n<li><p>The property can inherit its value automatically from a parent element in the element tree. For more information, see <a href=\"../Topic/Property%20Value%20Inheritance.md\" data-linktype=\"relative-path\">Property Value Inheritance</a>.  </p>\n</li>\n<li><p>The property can be animated. For more information, see <a href=\"../Topic/Animation%20Overview.md\" data-linktype=\"relative-path\">Animation Overview</a>.  </p>\n</li>\n<li><p>The property can report when the previous value of the property has been changed and the property value can be coerced. For more information, see <a href=\"../Topic/Dependency%20Property%20Callbacks%20and%20Validation.md\" data-linktype=\"relative-path\">Dependency Property Callbacks and Validation</a>.  </p>\n</li>\n<li><p>The property reports information to WPF, such as whether changing a property value should require the layout system to recompose the visuals for an element.  </p>\n</li>\n<li><p>The property receives support in the WPF Designer for Visual Studio.  For example, the property can be edited in the <strong>Properties</strong> window.  </p>\n<p>To learn more about dependency properties, see <a href=\"../Topic/Dependency%20Properties%20Overview.md\" data-linktype=\"relative-path\">Dependency Properties Overview</a>. If you want properties on your custom types to support the capabilities in the preceding list, you should create a dependency property.  To learn how to create custom dependency properties, see <a href=\"../Topic/Custom%20Dependency%20Properties.md\" data-linktype=\"relative-path\">Custom Dependency Properties</a>.  </p>\n<p>An attached property is a property that enables any object to report information to the type that defines the attached property. In WPF, any type that inherits from <a class=\"xref\" href=\"system.windows.dependencyobject\" data-linktype=\"relative-path\">DependencyObject</a> can use an attached property regardless of whether the type inherits from the type that defines the property. An attached property is a feature of the XAML language.  To set an attached property in XAML, use the <em>ownerType</em>.<em>propertyName</em> syntax. An example of an attached property is the &lt;xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=fullName&gt; property. If you want to create a property that can be used on all <a class=\"xref\" href=\"system.windows.dependencyobject\" data-linktype=\"relative-path\">DependencyObject</a> types, then you should create an attached property. To learn more about attached properties, including how to create them, see <a href=\"../Topic/Attached%20Properties%20Overview.md\" data-linktype=\"relative-path\">Attached Properties Overview</a>.  </p>\n</li>\n</ul>\n<p><a name=\"xamlAttributeUsage_DependencyProperty\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;dependencyPropertyName&quot;/&gt;  \n- or -  \n&lt;object property=&quot;ownerType.dependencyPropertyName&quot;/&gt;  \n- or -  \n&lt;object property=&quot;attachedPropertyOwnerType.attachedPropertyName&quot;/&gt;  \n</code></pre><p><a name=\"xamlValues_DependencyProperty\"></a>   </p>\n<h2 id=\"xaml-values\">XAML Values</h2>\n<p> <code>dependencyPropertyName</code><br> A string that specifies the <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_Name_\" data-linktype=\"relative-path\">Name</a> of the desired dependency property. This can be preceded by an XML namespace prefix if the property is not in the default XML namespace (for details, see <a href=\"../Topic/XAML%20Namespaces%20and%20Namespace%20Mapping%20for%20WPF%20XAML.md\" data-linktype=\"relative-path\">XAML Namespaces and Namespace Mapping for WPF XAML</a>.)  </p>\n<p> <code>ownerType</code>.<code>dependencyPropertyName</code><br> A string that specifies an owner type of a dependency property, a dot (.), then the <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_Name_\" data-linktype=\"relative-path\">Name</a>. <code>ownerType</code> can also be preceded by an XML namespace prefix. This usage is particular to late-bound styles and templates, where the owner of the dependency property must be specified for parsing context because the <code>TargetType</code> is not yet known. For more information, see <a href=\"../Topic/Styling%20and%20Templating.md\" data-linktype=\"relative-path\">Styling and Templating</a>.  </p>\n<p> <code>attachedPropertyOwnerType</code> <em>.</em> <code>attachedPropertyName</code><br> A string that specifies  the owner of an attached property, a dot (.), then the attached property name. <code>attachedPropertyOwnerType</code> can also be preceded by an XML namespace prefix.</p>\n\r\n    \r\n    \r\n    <h2>Fields\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_DependencyProperty_UnsetValue\" data-linktype=\"self-bookmark\">UnsetValue</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Specifies a static value that is used by the WPF property system rather than <code>null</code> to indicate that the property exists, but does not have its value set by the property system.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_DependencyProperty_DefaultMetadata\" data-linktype=\"self-bookmark\">DefaultMetadata</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the default metadata of the dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_DependencyProperty_GlobalIndex\" data-linktype=\"self-bookmark\">GlobalIndex</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an internally generated value that uniquely identifies the dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_DependencyProperty_Name\" data-linktype=\"self-bookmark\">Name</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the name of the dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_DependencyProperty_OwnerType\" data-linktype=\"self-bookmark\">OwnerType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the type of the object that registered the dependency property with the property system, or added itself as owner of the property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_DependencyProperty_PropertyType\" data-linktype=\"self-bookmark\">PropertyType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the type that the dependency property uses for its value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_DependencyProperty_ReadOnly\" data-linktype=\"self-bookmark\">ReadOnly</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether the dependency property identified by this <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a> instance is a read-only dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_DependencyProperty_ValidateValueCallback\" data-linktype=\"self-bookmark\">ValidateValueCallback</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value validation callback for the dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_DependencyProperty_AddOwner_System_Type_\" data-linktype=\"self-bookmark\">AddOwner(Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds another type as an owner of a dependency property that has already been registered.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_DependencyProperty_AddOwner_System_Type_System_Windows_PropertyMetadata_\" data-linktype=\"self-bookmark\">AddOwner(Type,PropertyMetadata)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds another type as an owner of a dependency property that has already been registered, providing dependency property metadata for the dependency property as it will exist on the provided owner type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_DependencyProperty_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a hash code for this <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_DependencyProperty_GetMetadata_System_Type_\" data-linktype=\"self-bookmark\">GetMetadata(Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the metadata for this dependency property as it exists on a specified existing type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_DependencyProperty_GetMetadata_System_Windows_DependencyObject_\" data-linktype=\"self-bookmark\">GetMetadata(DependencyObject)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the metadata for this dependency property as it exists on the specified object instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_DependencyProperty_GetMetadata_System_Windows_DependencyObjectType_\" data-linktype=\"self-bookmark\">GetMetadata(DependencyObjectType)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the metadata for this dependency property as it exists on a specified type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_DependencyProperty_IsValidType_System_Object_\" data-linktype=\"self-bookmark\">IsValidType(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether a specified value is acceptable for this dependency property&#39;s type, as checked against the property type provided in the original dependency property registration.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_DependencyProperty_IsValidValue_System_Object_\" data-linktype=\"self-bookmark\">IsValidValue(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the provided value is accepted for the type of property through basic type checking, and also potentially if it is within the allowed range of values for that type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_DependencyProperty_OverrideMetadata_System_Type_System_Windows_PropertyMetadata_\" data-linktype=\"self-bookmark\">OverrideMetadata(Type,PropertyMetadata)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Specifies alternate metadata for this dependency property when it is present on instances of a specified type, overriding the metadata that existed for the dependency property as it was inherited from base types.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_DependencyProperty_OverrideMetadata_System_Type_System_Windows_PropertyMetadata_System_Windows_DependencyPropertyKey_\" data-linktype=\"self-bookmark\">OverrideMetadata(Type,PropertyMetadata,DependencyPropertyKey)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Supplies alternate metadata for a read-only dependency property when it is present on instances of a specified type, overriding the metadata that was provided in the initial dependency property registration. You must pass the <a class=\"xref\" href=\"system.windows.dependencypropertykey\" data-linktype=\"relative-path\">DependencyPropertyKey</a> for the read-only dependency property to avoid raising an exception.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_DependencyProperty_Register_System_String_System_Type_System_Type_\" data-linktype=\"self-bookmark\">Register(String,Type,Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Registers a dependency property with the specified property name, property type, and owner type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_DependencyProperty_Register_System_String_System_Type_System_Type_System_Windows_PropertyMetadata_\" data-linktype=\"self-bookmark\">Register(String,Type,Type,PropertyMetadata)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Registers a dependency property with the specified property name, property type, owner type, and property metadata.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_DependencyProperty_Register_System_String_System_Type_System_Type_System_Windows_PropertyMetadata_System_Windows_ValidateValueCallback_\" data-linktype=\"self-bookmark\">Register(String,Type,Type,PropertyMetadata,ValidateValueCallback)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Registers a dependency property with the specified property name, property type, owner type, property metadata, and a value validation callback for the property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_DependencyProperty_RegisterAttached_System_String_System_Type_System_Type_\" data-linktype=\"self-bookmark\">RegisterAttached(String,Type,Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Registers an attached property with the specified property name, property type, and owner type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_DependencyProperty_RegisterAttached_System_String_System_Type_System_Type_System_Windows_PropertyMetadata_\" data-linktype=\"self-bookmark\">RegisterAttached(String,Type,Type,PropertyMetadata)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Registers an attached property with the specified property name, property type, owner type, and property metadata.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_DependencyProperty_RegisterAttached_System_String_System_Type_System_Type_System_Windows_PropertyMetadata_System_Windows_ValidateValueCallback_\" data-linktype=\"self-bookmark\">RegisterAttached(String,Type,Type,PropertyMetadata,ValidateValueCallback)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Registers an attached property with the specified property type, owner type, property metadata, and value validation callback for the property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_DependencyProperty_RegisterAttachedReadOnly_System_String_System_Type_System_Type_System_Windows_PropertyMetadata_\" data-linktype=\"self-bookmark\">RegisterAttachedReadOnly(String,Type,Type,PropertyMetadata)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Registers a read-only attached property, with the specified property type, owner type, and property metadata.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_DependencyProperty_RegisterAttachedReadOnly_System_String_System_Type_System_Type_System_Windows_PropertyMetadata_System_Windows_ValidateValueCallback_\" data-linktype=\"self-bookmark\">RegisterAttachedReadOnly(String,Type,Type,PropertyMetadata,ValidateValueCallback)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Registers a read-only attached property, with the specified property type, owner type, property metadata, and a validation callback.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_DependencyProperty_RegisterReadOnly_System_String_System_Type_System_Type_System_Windows_PropertyMetadata_\" data-linktype=\"self-bookmark\">RegisterReadOnly(String,Type,Type,PropertyMetadata)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Registers a read-only dependency property, with the specified property type, owner type, and property metadata.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_DependencyProperty_RegisterReadOnly_System_String_System_Type_System_Type_System_Windows_PropertyMetadata_System_Windows_ValidateValueCallback_\" data-linktype=\"self-bookmark\">RegisterReadOnly(String,Type,Type,PropertyMetadata,ValidateValueCallback)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Registers a read-only dependency property, with the specified property type, owner type, property metadata, and a validation callback.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_DependencyProperty_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the string representation of the dependency property.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"fields\">\r\n        <h2>Fields\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_DependencyProperty_UnsetValue\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UnsetValue</div>        \r\n          </div>\r\n    \r\n            <p>Specifies a static value that is used by the WPF property system rather than <code>null</code> to indicate that the property exists, but does not have its value set by the property system.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly object UnsetValue;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>UnsetValue is a sentinel value that is used for scenarios where the WPF property system is unable to determine a requested <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a> value. UnsetValue is used rather than <code>null</code>, because <code>null</code> could be a valid property value, as well as a valid (and frequently used) <a class=\"xref\" href=\"system.windows.propertymetadata#System_Windows_PropertyMetadata_DefaultValue_\" data-linktype=\"relative-path\">DefaultValue</a>.  </p>\n<p> UnsetValue is never returned out of <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_GetValue_\" data-linktype=\"relative-path\">GetValue</a>. When you call <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_GetValue_\" data-linktype=\"relative-path\">GetValue</a> on a dependency property on a <a class=\"xref\" href=\"system.windows.dependencyobject\" data-linktype=\"relative-path\">DependencyObject</a> instance, one of the following applies:  </p>\n<ul>\n<li><p>A dependency property has a default value established in metadata and that value is returned. This value might come from <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_DefaultMetadata_\" data-linktype=\"relative-path\">DefaultMetadata</a>.  </p>\n</li>\n<li><p>Some other value was established by the property system, and the default value is no longer relevant. For details, see <a href=\"../Topic/Dependency%20Property%20Value%20Precedence.md\" data-linktype=\"relative-path\">Dependency Property Value Precedence</a>.  </p>\n<p>Setting a <a class=\"xref\" href=\"system.windows.propertymetadata#System_Windows_PropertyMetadata_DefaultValue_\" data-linktype=\"relative-path\">DefaultValue</a> of UnsetValue is specifically disallowed.  </p>\n<p><a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_ReadLocalValue_\" data-linktype=\"relative-path\">ReadLocalValue</a> returns UnsetValue when the requested property has not been locally set.  </p>\n<p>UnsetValue has a special meaning when used as the return value of a <a class=\"xref\" href=\"system.windows.coercevaluecallback\" data-linktype=\"relative-path\">CoerceValueCallback</a>. For details, see <a href=\"../Topic/Dependency%20Property%20Callbacks%20and%20Validation.md\" data-linktype=\"relative-path\">Dependency Property Callbacks and Validation</a>.  </p>\n<p>If you are binding to a database, note that UnsetValue is not equivalent to <a class=\"xref\" href=\"system.dbnull#System_DBNull_Value\" data-linktype=\"relative-path\">Value</a>, in a similar way to how <a class=\"xref\" href=\"system.dbnull#System_DBNull_Value\" data-linktype=\"relative-path\">Value</a> is not equivalent to a true null.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_DependencyProperty_DefaultMetadata\">\r\n    \r\n            <a id=\"System_Windows_DependencyProperty_DefaultMetadata_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefaultMetadata</div>        \r\n          </div>\r\n    \r\n            <p>Gets the default metadata of the dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.PropertyMetadata DefaultMetadata { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.propertymetadata\" data-linktype=\"relative-path\">PropertyMetadata</a></div>\r\n                  </div>\r\n                  <p>The default metadata of the dependency property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default metadata is the property metadata that is available to that particular object or an object of a derived type where no alternative metadata was supplied by an explicit <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_Register_\" data-linktype=\"relative-path\">Register</a> or <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_OverrideMetadata_\" data-linktype=\"relative-path\">OverrideMetadata</a> call.  </p>\n<p> If the original owner applied metadata to the first <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_Register_\" data-linktype=\"relative-path\">Register</a> call that established the dependency property, then that metadata is returned as DefaultMetadata.  </p>\n<p> If no metadata was applied in the original <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_Register_\" data-linktype=\"relative-path\">Register</a> call, then default metadata is generated from within the <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_Register_\" data-linktype=\"relative-path\">Register</a> call and this value is returned as the DefaultMetadata.  </p>\n<p> The main purpose of having default metadata associated with a <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a> is to supply a default value for this property on any <a class=\"xref\" href=\"system.windows.dependencyobject\" data-linktype=\"relative-path\">DependencyObject</a> or a derived type.  </p>\n<p> For nonattached properties, the metadata type returned by this property cannot be cast to derived types of <a class=\"xref\" href=\"system.windows.propertymetadata\" data-linktype=\"relative-path\">PropertyMetadata</a> type, even if the property was originally registered with a derived metadata type. If you want the originally registered metadata including its original possibly derived metadata type, call <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_GetMetadata_System_Type_\" data-linktype=\"relative-path\">GetMetadata(Type)</a> instead, passing the original registering type as a parameter.  </p>\n<p> For attached properties, the type of the metadata returned by this property will match the type given in the original <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_RegisterAttached_\" data-linktype=\"relative-path\">RegisterAttached</a> registration method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cs\" name=\"PropertySystemEsoterics#DPGetMetadataSingle\">pm = dp.GetMetadata(dp.OwnerType);\n</code></pre><pre><code class=\"lang-vb\" name=\"PropertySystemEsoterics#DPGetMetadataSingle\">pm = dp.GetMetadata(dp.OwnerType)\n</code></pre><pre><code class=\"lang-cs\" name=\"PropertySystemEsoterics#DPDefaultValue\">PropertyMetadata pmDefault = dp.DefaultMetadata;\n</code></pre><pre><code class=\"lang-vb\" name=\"PropertySystemEsoterics#DPDefaultValue\">Dim pmDefault As PropertyMetadata = dp.DefaultMetadata\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_DependencyProperty_GlobalIndex\">\r\n    \r\n            <a id=\"System_Windows_DependencyProperty_GlobalIndex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GlobalIndex</div>        \r\n          </div>\r\n    \r\n            <p>Gets an internally generated value that uniquely identifies the dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int GlobalIndex { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A unique numeric identifier.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This value is an integer, not a globally unique identifier (GUID). Generally, using this index value is not required, and there is no index access to tables of all dependency properties. Dependency properties should instead be referenced by their identifier fields.  </p>\n<p> GlobalIndex is used internally for faster access to data structures that use the GlobalIndex as a zero-based array index. A similar usage might have applications for designers or tools.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_DependencyProperty_Name\">\r\n    \r\n            <a id=\"System_Windows_DependencyProperty_Name_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Name</div>        \r\n          </div>\r\n    \r\n            <p>Gets the name of the dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Name { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property gets the name provided as the <code>name</code> parameter during dependency property registration. This name is immutable, and cannot be <code>null</code> or an empty string. Duplicate name registrations on the same owner type are not permitted, and will throw an exception when you attempt to register the duplicate.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> The Name of a dependency property must follow the convention of matching the name of its dependency property identifier minus the suffix &quot;Property&quot;. For details, see <a href=\"../Topic/Custom%20Dependency%20Properties.md\" data-linktype=\"relative-path\">Custom Dependency Properties</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example queries various characteristics of a dependency property identifier, including the Name.  </p>\n<pre><code class=\"lang-cs\" name=\"PropertySystemEsoterics#DPProps\">pm = dp.GetMetadata(dp.OwnerType);\nMetadataClass.Text = pm.GetType().Name;\nTypeofPropertyValue.Text = dp.PropertyType.Name;\nDefaultPropertyValue.Text = (pm.DefaultValue!=null) ? pm.DefaultValue.ToString() : &quot;null&quot;;\nHasCoerceValue.Text = (pm.CoerceValueCallback == null) ? &quot;No&quot; : pm.CoerceValueCallback.Method.Name;\nHasPropertyChanged.Text = (pm.PropertyChangedCallback == null) ? &quot;No&quot; : pm.PropertyChangedCallback.Method.Name;\nReadOnly.Text = (dp.ReadOnly) ? &quot;Yes&quot; : &quot;No&quot;;\n</code></pre><pre><code class=\"lang-vb\" name=\"PropertySystemEsoterics#DPProps\">pm = dp.GetMetadata(dp.OwnerType)\nMetadataClass.Text = pm.GetType().Name\nTypeofPropertyValue.Text = dp.PropertyType.Name\nDefaultPropertyValue.Text = If((pm.DefaultValue IsNot Nothing), pm.DefaultValue.ToString(), &quot;null&quot;)\nHasCoerceValue.Text = If((pm.CoerceValueCallback Is Nothing), &quot;No&quot;, pm.CoerceValueCallback.Method.Name)\nHasPropertyChanged.Text = If((pm.PropertyChangedCallback Is Nothing), &quot;No&quot;, pm.PropertyChangedCallback.Method.Name)\n          [ReadOnly].Text = If((dp.ReadOnly), &quot;Yes&quot;, &quot;No&quot;)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_DependencyProperty_OwnerType\">\r\n    \r\n            <a id=\"System_Windows_DependencyProperty_OwnerType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OwnerType</div>        \r\n          </div>\r\n    \r\n            <p>Gets the type of the object that registered the dependency property with the property system, or added itself as owner of the property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Type OwnerType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>The type of the object that registered the property or added itself as owner of the property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This value was provided during property registration. The owner will be either the original registering type in the case of a <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a> identifier generated from a <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_Register_\" data-linktype=\"relative-path\">Register</a> call, or the type that added itself as owner in the case of a <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a> identifier generated from an <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_AddOwner_\" data-linktype=\"relative-path\">AddOwner</a> call.  </p>\n<p> The OwnerType on any given <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a> is immutable, and cannot be <code>null</code> in a valid <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example gets the owner type based on a dependency property identifier <code>dp</code>, and then gets metadata on the owner type for that same identifier. This operation is actually equivalent to getting <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_DefaultMetadata_\" data-linktype=\"relative-path\">DefaultMetadata</a> on <code>dp</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"PropertySystemEsoterics#DPGetMetadataSingle\">pm = dp.GetMetadata(dp.OwnerType);\n</code></pre><pre><code class=\"lang-vb\" name=\"PropertySystemEsoterics#DPGetMetadataSingle\">pm = dp.GetMetadata(dp.OwnerType)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_DependencyProperty_PropertyType\">\r\n    \r\n            <a id=\"System_Windows_DependencyProperty_PropertyType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PropertyType</div>        \r\n          </div>\r\n    \r\n            <p>Gets the type that the dependency property uses for its value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Type PropertyType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> of the property value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property reports the type of the property&#39;s value as declared by the original property registration, through the <code>propertyType</code> parameter. Similar to the <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_Name_\" data-linktype=\"relative-path\">Name</a>, the property type of a dependency property is immutable after registration.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example queries various characteristics of a dependency property identifier, including the PropertyType. The type name string of the PropertyType is obtained from the returned <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"PropertySystemEsoterics#DPProps\">pm = dp.GetMetadata(dp.OwnerType);\nMetadataClass.Text = pm.GetType().Name;\nTypeofPropertyValue.Text = dp.PropertyType.Name;\nDefaultPropertyValue.Text = (pm.DefaultValue!=null) ? pm.DefaultValue.ToString() : &quot;null&quot;;\nHasCoerceValue.Text = (pm.CoerceValueCallback == null) ? &quot;No&quot; : pm.CoerceValueCallback.Method.Name;\nHasPropertyChanged.Text = (pm.PropertyChangedCallback == null) ? &quot;No&quot; : pm.PropertyChangedCallback.Method.Name;\nReadOnly.Text = (dp.ReadOnly) ? &quot;Yes&quot; : &quot;No&quot;;\n</code></pre><pre><code class=\"lang-vb\" name=\"PropertySystemEsoterics#DPProps\">pm = dp.GetMetadata(dp.OwnerType)\nMetadataClass.Text = pm.GetType().Name\nTypeofPropertyValue.Text = dp.PropertyType.Name\nDefaultPropertyValue.Text = If((pm.DefaultValue IsNot Nothing), pm.DefaultValue.ToString(), &quot;null&quot;)\nHasCoerceValue.Text = If((pm.CoerceValueCallback Is Nothing), &quot;No&quot;, pm.CoerceValueCallback.Method.Name)\nHasPropertyChanged.Text = If((pm.PropertyChangedCallback Is Nothing), &quot;No&quot;, pm.PropertyChangedCallback.Method.Name)\n          [ReadOnly].Text = If((dp.ReadOnly), &quot;Yes&quot;, &quot;No&quot;)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_DependencyProperty_ReadOnly\">\r\n    \r\n            <a id=\"System_Windows_DependencyProperty_ReadOnly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadOnly</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether the dependency property identified by this <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a> instance is a read-only dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool ReadOnly { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the dependency property is read-only; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Read-only dependency properties are registered within the property system by calling the <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_RegisterReadOnly_\" data-linktype=\"relative-path\">RegisterReadOnly</a> method as opposed to the <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_Register_\" data-linktype=\"relative-path\">Register</a> method. Attached properties can also be registered as read-only; see <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_RegisterAttachedReadOnly_\" data-linktype=\"relative-path\">RegisterAttachedReadOnly</a>.  </p>\n<p> Read-only dependency properties require a <a class=\"xref\" href=\"system.windows.dependencypropertykey\" data-linktype=\"relative-path\">DependencyPropertyKey</a> identifier rather than a <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a> identifier to perform metadata operations such as overriding the metadata or setting the value. If you obtained a collection of <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a> identifiers through a call to <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_GetLocalValueEnumerator_\" data-linktype=\"relative-path\">GetLocalValueEnumerator</a> or another API that exposes identifiers, check the ReadOnly value before attempting to call <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_SetValue_\" data-linktype=\"relative-path\">SetValue</a> or <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_OverrideMetadata_\" data-linktype=\"relative-path\">OverrideMetadata</a> using that dependency property identifier as an input parameter, to verify that the dependency property that the identifier represents is not read-only. If the value of ReadOnly is <code>true</code> on a dependency property, there is no programmatic way to obtain a reference to the <a class=\"xref\" href=\"system.windows.dependencypropertykey\" data-linktype=\"relative-path\">DependencyPropertyKey</a> identifier of that dependency property, from the metadata or from the <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a> identifier; the identifier must be available as a static field in order to call <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_SetValue_System_Windows_DependencyPropertyKey_System_Object_\" data-linktype=\"relative-path\">SetValue(DependencyPropertyKey,Object)</a> against a read-only dependency property.  </p>\n<p> When you create a custom dependency property, and register it as read-only, you should define only a get accessor for the CLR wrapper property. Otherwise, your class will have a confusing object model for the property wrapper as compared to the access to the backing dependency property. For details, see <a href=\"../Topic/Custom%20Dependency%20Properties.md\" data-linktype=\"relative-path\">Custom Dependency Properties</a> or <a href=\"../Topic/Read-Only%20Dependency%20Properties.md\" data-linktype=\"relative-path\">Read-Only Dependency Properties</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example obtains the default metadata and the dependency property identifier properties from various dependency property fields, and uses the information to populate a table to implement a &quot;metadata browser&quot;.  </p>\n<pre><code class=\"lang-cs\" name=\"PropertySystemEsoterics#DPProps\">pm = dp.GetMetadata(dp.OwnerType);\nMetadataClass.Text = pm.GetType().Name;\nTypeofPropertyValue.Text = dp.PropertyType.Name;\nDefaultPropertyValue.Text = (pm.DefaultValue!=null) ? pm.DefaultValue.ToString() : &quot;null&quot;;\nHasCoerceValue.Text = (pm.CoerceValueCallback == null) ? &quot;No&quot; : pm.CoerceValueCallback.Method.Name;\nHasPropertyChanged.Text = (pm.PropertyChangedCallback == null) ? &quot;No&quot; : pm.PropertyChangedCallback.Method.Name;\nReadOnly.Text = (dp.ReadOnly) ? &quot;Yes&quot; : &quot;No&quot;;\n</code></pre><pre><code class=\"lang-vb\" name=\"PropertySystemEsoterics#DPProps\">pm = dp.GetMetadata(dp.OwnerType)\nMetadataClass.Text = pm.GetType().Name\nTypeofPropertyValue.Text = dp.PropertyType.Name\nDefaultPropertyValue.Text = If((pm.DefaultValue IsNot Nothing), pm.DefaultValue.ToString(), &quot;null&quot;)\nHasCoerceValue.Text = If((pm.CoerceValueCallback Is Nothing), &quot;No&quot;, pm.CoerceValueCallback.Method.Name)\nHasPropertyChanged.Text = If((pm.PropertyChangedCallback Is Nothing), &quot;No&quot;, pm.PropertyChangedCallback.Method.Name)\n          [ReadOnly].Text = If((dp.ReadOnly), &quot;Yes&quot;, &quot;No&quot;)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_DependencyProperty_ValidateValueCallback\">\r\n    \r\n            <a id=\"System_Windows_DependencyProperty_ValidateValueCallback_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ValidateValueCallback</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value validation callback for the dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.ValidateValueCallback ValidateValueCallback { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.validatevaluecallback\" data-linktype=\"relative-path\">ValidateValueCallback</a></div>\r\n                  </div>\r\n                  <p>The value validation callback for this dependency property, as provided for the <code>validateValueCallback</code> parameter in the original dependency property registration.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property will contain <code>null</code> for any dependency property with no registered validation callback.  </p>\n<p> Validate value callbacks must act in a static sense: validation applied through the <a class=\"xref\" href=\"system.windows.validatevaluecallback\" data-linktype=\"relative-path\">ValidateValueCallback</a> cannot determine whether the provided value is valid for any particular instance. The callback can only determine whether all objects that possess the dependency property should or should not accept the provided value as valid. If you need to perform validation that relies on knowing the values of other dependency properties on a particular instance, use a <a class=\"xref\" href=\"system.windows.coercevaluecallback\" data-linktype=\"relative-path\">CoerceValueCallback</a> instead. The <a class=\"xref\" href=\"system.windows.coercevaluecallback\" data-linktype=\"relative-path\">CoerceValueCallback</a> is registered as part of dependency property metadata, rather than directly within the dependency property identifier. For details, see <a href=\"../Topic/Dependency%20Property%20Callbacks%20and%20Validation.md\" data-linktype=\"relative-path\">Dependency Property Callbacks and Validation</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_DependencyProperty_AddOwner_System_Type_\">\r\n    \r\n            <a id=\"System_Windows_DependencyProperty_AddOwner_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddOwner(Type)</div>        \r\n          </div>\r\n    \r\n            <p>Adds another type as an owner of a dependency property that has already been registered.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.DependencyProperty AddOwner (Type ownerType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ownerType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type to add as an owner of this dependency property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a></div>\r\n                  </div>\r\n                  <p>A reference to the original <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a> identifier that identifies the dependency property. This identifier should be exposed by the adding class as a <code>public static readonly</code> field.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method enables the property system to recognize a dependency property on a type that did not register that particular dependency property initially.  </p>\n<p> Typically, AddOwner is used to add dependency properties to classes that do not already expose that dependency property through managed class inheritance (class inheritance would cause the wrapper properties to be inherited by the derived class, and thus would provide general members-table access to the dependency property already). AddOwner enables the property system to recognize a dependency property on a type that did not register that dependency property initially.  </p>\n<p> This signature does not allow for specifying metadata.  When you use this method, the metadata is automatically generated for the new <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a> and its owner type. The auto-generated metadata is the result of the merged metadata from all of the base types that have this property defined. If no merged metadata is available, then the default metadata for the property is used. If the property is registered by using the <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_RegisterAttached_\" data-linktype=\"relative-path\">RegisterAttached</a> method, then the default metadata is the same as the metadata that is created when <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_RegisterAttached_\" data-linktype=\"relative-path\">RegisterAttached</a> was called. Otherwise, the <a class=\"xref\" href=\"system.windows.propertymetadata\" data-linktype=\"relative-path\">PropertyMetadata</a> object is created with the <a class=\"xref\" href=\"system.windows.propertymetadata#System_Windows_PropertyMetadata_DefaultValue_\" data-linktype=\"relative-path\">DefaultValue</a> property set to the property type&#39;s default and all other properties of the <a class=\"xref\" href=\"system.windows.propertymetadata\" data-linktype=\"relative-path\">PropertyMetadata</a> is set to <code>null</code>. Use the <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_AddOwner_System_Type_System_Windows_PropertyMetadata_\" data-linktype=\"relative-path\">AddOwner(Type,PropertyMetadata)</a> signature if you want to provide metadata for the version of the dependency property as added to the provided type.  </p>\n<p> The return value of this method is typically used to declare and expose the dependency property by storing a dependency property identifier. The identifier provides access to the dependency property if you want to call property system APIs against the dependency property, particularly as it exists on the adding owner class. The same property name for both original owner and added owner should be used to indicate the similar functionality. You should use the <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a> return value of the AddOwner method to define the dependency property identifier, and also to declare CLR property wrappers, for dependency properties that are added to types using AddOwner.  </p>\n<p> The AddOwner methodology recommended above is used when creating the dependency properties that are declared within WPF. For instance, both <a class=\"xref\" href=\"system.windows.controls.border\" data-linktype=\"relative-path\">Border</a> and <a class=\"xref\" href=\"system.windows.controls.control\" data-linktype=\"relative-path\">Control</a> define a <code>BorderBrush</code> dependency property, which have similar functionality. <a class=\"xref\" href=\"system.windows.controls.control\" data-linktype=\"relative-path\">Control</a> defines its <code>BorderBrush</code> property to the property system by calling AddOwner based on the original owner <a class=\"xref\" href=\"system.windows.controls.border\" data-linktype=\"relative-path\">Border</a> and its registered <a class=\"xref\" href=\"system.windows.controls.border#System_Windows_Controls_Border_BorderBrushProperty\" data-linktype=\"relative-path\">BorderBrushProperty</a> dependency property identifer. The AddOwner return value is then used to establish a new static <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a> field (<a class=\"xref\" href=\"system.windows.controls.control#System_Windows_Controls_Control_BorderBrushProperty\" data-linktype=\"relative-path\">BorderBrushProperty</a>) for that property on the added owner, and a <code>BorderBrush</code> property wrapper is also declared.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_DependencyProperty_AddOwner_System_Type_System_Windows_PropertyMetadata_\">\r\n    \r\n            <a id=\"System_Windows_DependencyProperty_AddOwner_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddOwner(Type,PropertyMetadata)</div>        \r\n          </div>\r\n    \r\n            <p>Adds another type as an owner of a dependency property that has already been registered, providing dependency property metadata for the dependency property as it will exist on the provided owner type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.DependencyProperty AddOwner (Type ownerType, System.Windows.PropertyMetadata typeMetadata);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ownerType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type to add as owner of this dependency property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>typeMetadata</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.propertymetadata\" data-linktype=\"relative-path\">PropertyMetadata</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The metadata that qualifies the dependency property as it exists on the provided type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a></div>\r\n                  </div>\r\n                  <p>A reference to the original <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a> identifier that identifies the dependency property. This identifier should be exposed by the adding class as a <code>public static readonly</code> field.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method enables the property system to recognize a dependency property on a type that did not register that particular dependency property initially.  </p>\n<p> The return value of this method is used to declare and expose the dependency property, particularly as it exists on the adding owner class. Generally, the same property name for both original owner and added owner should be used to indicate the similar functionality. It is good practice to expose the identifiers, as well as new CLR property wrappers, for dependency properties that are added to types using <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_AddOwner_\" data-linktype=\"relative-path\">AddOwner</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_AddOwner_\" data-linktype=\"relative-path\">AddOwner</a> methodology recommended above is used when creating APIs declared within WPF. For instance, both <a class=\"xref\" href=\"system.windows.controls.border\" data-linktype=\"relative-path\">Border</a> and <a class=\"xref\" href=\"system.windows.controls.control\" data-linktype=\"relative-path\">Control</a> define a <code>BorderBrush</code> dependency property, which have similar functionality. <a class=\"xref\" href=\"system.windows.controls.control\" data-linktype=\"relative-path\">Control</a> defines its <code>BorderBrush</code> property to the property system by calling <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_AddOwner_\" data-linktype=\"relative-path\">AddOwner</a> on original owner <a class=\"xref\" href=\"system.windows.controls.border\" data-linktype=\"relative-path\">Border</a> and its registered <a class=\"xref\" href=\"system.windows.controls.border#System_Windows_Controls_Border_BorderBrushProperty\" data-linktype=\"relative-path\">BorderBrushProperty</a> dependency property identifer. The <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_AddOwner_\" data-linktype=\"relative-path\">AddOwner</a> return value is then used to establish a static <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a> field (<a class=\"xref\" href=\"system.windows.controls.control#System_Windows_Controls_Control_BorderBrushProperty\" data-linktype=\"relative-path\">BorderBrushProperty</a>)for that property on the added owner, and a <code>BorderBrush</code> property wrapper is also declared.  </p>\n<p> The added owner&#39;s dependency property identifier should be used for operations such as <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_GetValue_\" data-linktype=\"relative-path\">GetValue</a>. However, type-specific operations involving either types or instances of the class that was added as owner with different metadata will still return the expected results even if the original (not the added owner&#39;s) dependency property identifier is specified in calls to methods such as <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_GetValue_\" data-linktype=\"relative-path\">GetValue</a> or <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_GetMetadata_\" data-linktype=\"relative-path\">GetMetadata</a>. The metadata for the added owner is perpetuated by the AddOwner call itself, not necessarily referenced exclusively by the adding owner class identifier field. Nevertheless, it is good practice to expose the  identifier, as well as new CLR property wrappers, for dependency properties that are added to types using AddOwner, because failing to do so creates disparity between the CLR and XAML representations of your properties.  </p>\n<p> The supplied metadata is merged with the property metadata for the dependency property as it exists on the base owner. Any characteristics that were specified in the original base metadata will persist. Only those characteristics that were specifically changed in the new metadata will override the characteristics of the base metadata. Some characteristics, such as <a class=\"xref\" href=\"system.windows.propertymetadata#System_Windows_PropertyMetadata_DefaultValue_\" data-linktype=\"relative-path\">DefaultValue</a>, are replaced if they are specified in the new metadata. Others, such as <a class=\"xref\" href=\"system.windows.propertychangedcallback\" data-linktype=\"relative-path\">PropertyChangedCallback</a>, are combined. Ultimately, the merge behavior depends on the property metadata type being used for the override, so the behavior described here is for the existing property metadata classes used by WPF dependency properties. For details, see <a href=\"../Topic/Dependency%20Property%20Metadata.md\" data-linktype=\"relative-path\">Dependency Property Metadata</a> and <a href=\"../Topic/Framework%20Property%20Metadata.md\" data-linktype=\"relative-path\">Framework Property Metadata</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_DependencyProperty_GetHashCode\">\r\n    \r\n            <a id=\"System_Windows_DependencyProperty_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a hash code for this <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The hash code for this <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The property system uses its own unique identifier <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_GlobalIndex_\" data-linktype=\"relative-path\">GlobalIndex</a>, and the value of that property is returned by GetHashCode.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_DependencyProperty_GetMetadata_System_Type_\">\r\n    \r\n            <a id=\"System_Windows_DependencyProperty_GetMetadata_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMetadata(Type)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the metadata for this dependency property as it exists on a specified existing type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.PropertyMetadata GetMetadata (Type forType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>forType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The specific type from which to retrieve the dependency property metadata.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.propertymetadata\" data-linktype=\"relative-path\">PropertyMetadata</a></div>\r\n                  </div>\r\n                  <p>A property metadata object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Specifying either the type or an object reference to use as type is necessary because the metadata can vary from the original registration due either to <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_AddOwner_\" data-linktype=\"relative-path\">AddOwner</a> or <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_OverrideMetadata_\" data-linktype=\"relative-path\">OverrideMetadata</a> calls that alter the metadata of the dependency property as it exists on a type.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example gets metadata for a dependency property based on its type. The type is obtained by using a <code>typeof</code> operator.  </p>\n<pre><code class=\"lang-cs\" name=\"PropertySystemEsoterics#GetMetadataType\">pm = MyStateControl.StateProperty.GetMetadata(typeof(MyStateControl));\n</code></pre><pre><code class=\"lang-vb\" name=\"PropertySystemEsoterics#GetMetadataType\">pm = MyStateControl.StateProperty.GetMetadata(GetType(MyStateControl))\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_DependencyProperty_GetMetadata_System_Windows_DependencyObject_\">\r\n    \r\n            <a id=\"System_Windows_DependencyProperty_GetMetadata_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMetadata(DependencyObject)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the metadata for this dependency property as it exists on the specified object instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.PropertyMetadata GetMetadata (System.Windows.DependencyObject dependencyObject);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dependencyObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyobject\" data-linktype=\"relative-path\">DependencyObject</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A dependency object that is checked for type, to determine which type-specific version of the dependency property the metadata should come from.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.propertymetadata\" data-linktype=\"relative-path\">PropertyMetadata</a></div>\r\n                  </div>\r\n                  <p>A property metadata object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Specifying either the type or an object reference is necessary because the metadata of any given dependency property can vary from the original registration due either to <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_AddOwner_\" data-linktype=\"relative-path\">AddOwner</a> or <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_OverrideMetadata_\" data-linktype=\"relative-path\">OverrideMetadata</a> calls that can refine the property metadata as it exists on a type.  </p>\n<p> When you request property metadata based on an instance, you are really just passing the instance so that its type can be evaluated internally. Dependency property metadata does not vary per instance; it is always consistent for any given type-property combination.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example gets metadata for a dependency property based on a specific <a class=\"xref\" href=\"system.windows.dependencyobject\" data-linktype=\"relative-path\">DependencyObject</a> instance.  </p>\n<pre><code class=\"lang-cs\" name=\"PropertySystemEsoterics#GetMetadataDOInstance\">pm = MyAdvancedStateControl.StateProperty.GetMetadata(advancedInstance);\n</code></pre><pre><code class=\"lang-vb\" name=\"PropertySystemEsoterics#GetMetadataDOInstance\">pm = MyAdvancedStateControl.StateProperty.GetMetadata(advancedInstance)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_DependencyProperty_GetMetadata_System_Windows_DependencyObjectType_\">\r\n    \r\n            <a id=\"System_Windows_DependencyProperty_GetMetadata_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMetadata(DependencyObjectType)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the metadata for this dependency property as it exists on a specified type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.PropertyMetadata GetMetadata (System.Windows.DependencyObjectType dependencyObjectType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dependencyObjectType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyobjecttype\" data-linktype=\"relative-path\">DependencyObjectType</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A specific object that records the dependency object type from which the dependency property metadata is desired.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.propertymetadata\" data-linktype=\"relative-path\">PropertyMetadata</a></div>\r\n                  </div>\r\n                  <p>A property metadata object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Specifying either the type or an object reference is necessary because the metadata of any given dependency property can vary from the original registration due either to <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_AddOwner_\" data-linktype=\"relative-path\">AddOwner</a> or <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_OverrideMetadata_\" data-linktype=\"relative-path\">OverrideMetadata</a> calls that can refine the property metadata as it exists on a type.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example gets metadata for a dependency property based on its <a class=\"xref\" href=\"system.windows.dependencyobjecttype\" data-linktype=\"relative-path\">DependencyObjectType</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"PropertySystemEsoterics#GetMetadataDOType\">DependencyObjectType dt = unrelatedInstance.DependencyObjectType;\npm = UnrelatedStateControl.StateProperty.GetMetadata(dt);\n</code></pre><pre><code class=\"lang-vb\" name=\"PropertySystemEsoterics#GetMetadataDOType\">Dim dt As DependencyObjectType = unrelatedInstance.DependencyObjectType\npm = UnrelatedStateControl.StateProperty.GetMetadata(dt)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_DependencyProperty_IsValidType_System_Object_\">\r\n    \r\n            <a id=\"System_Windows_DependencyProperty_IsValidType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsValidType(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether a specified value is acceptable for this dependency property&#39;s type, as checked against the property type provided in the original dependency property registration.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsValidType (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to check.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the specified value is the registered property type or an acceptable derived type; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A value of <code>null</code> is a valid type for reference type dependency properties, or for a <a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable&lt;T&gt;</a> dependency property, and would return <code>true</code> for these cases. In cases where the dependency property is neither a reference nor a <a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable&lt;T&gt;</a> type, IsValidType will return <code>false</code> for a null value rather than raise an exception.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses IsValidType as a check before calling <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_SetValue_\" data-linktype=\"relative-path\">SetValue</a> on the dependency property.  </p>\n<pre><code class=\"lang-cs\" name=\"PropertySystemEsoterics#TrySetValue\">void TrySetValue(DependencyObject target, DependencyProperty dp, object providedValue) {\n  if (dp.IsValidType(providedValue))\n  {\n    target.SetValue(dp, providedValue);\n  }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"PropertySystemEsoterics#TrySetValue\"> Private Sub TrySetValue(ByVal target As DependencyObject, ByVal dp As DependencyProperty, ByVal providedValue As Object)\nIf dp.IsValidType(providedValue) Then\n  target.SetValue(dp, providedValue)\nEnd If\n End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_DependencyProperty_IsValidValue_System_Object_\">\r\n    \r\n            <a id=\"System_Windows_DependencyProperty_IsValidValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsValidValue(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the provided value is accepted for the type of property through basic type checking, and also potentially if it is within the allowed range of values for that type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsValidValue (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to check.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the value is acceptable and is of the correct type or a derived type; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For a dependency property, an allowed range of values for that type can be specified through a <a class=\"xref\" href=\"system.windows.validatevaluecallback\" data-linktype=\"relative-path\">ValidateValueCallback</a> that is provided in the dependency property registration.  </p>\n<p> This method calls <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_IsValidType_\" data-linktype=\"relative-path\">IsValidType</a> internally. If the dependency property in question has no <a class=\"xref\" href=\"system.windows.validatevaluecallback\" data-linktype=\"relative-path\">ValidateValueCallback</a>,then calling this method is effectively equivalent to calling <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_IsValidType_\" data-linktype=\"relative-path\">IsValidType</a>. If the dependency property does have a <a class=\"xref\" href=\"system.windows.validatevaluecallback\" data-linktype=\"relative-path\">ValidateValueCallback</a>, and if <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_IsValidType_\" data-linktype=\"relative-path\">IsValidType</a> would have returned <code>true</code>, then the value returned will be as implemented in the callback.  </p>\n<p> A null value is a valid value for reference type dependency properties, or for a <a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable&lt;T&gt;</a> dependency property, and would return <code>true</code> for these cases. In cases where the dependency property is neither a reference nor a <a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable&lt;T&gt;</a> type, <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_IsValidType_\" data-linktype=\"relative-path\">IsValidType</a> will return <code>false</code> for a null value rather than raise an exception.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses IsValidValue as a check before calling <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_SetValue_\" data-linktype=\"relative-path\">SetValue</a> on the dependency property.  </p>\n<pre><code class=\"lang-cs\" name=\"PropertySystemEsoterics#TrySetValueWithValidate\">void TrySetValueWithValidate(DependencyObject target, DependencyProperty dp, object providedValue)\n{\n  if (dp.IsValidValue(providedValue))\n  {\n    target.SetValue(dp, providedValue);\n  }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"PropertySystemEsoterics#TrySetValueWithValidate\"> Private Sub TrySetValueWithValidate(ByVal target As DependencyObject, ByVal dp As DependencyProperty, ByVal providedValue As Object)\nIf dp.IsValidValue(providedValue) Then\n  target.SetValue(dp, providedValue)\nEnd If\n End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_DependencyProperty_OverrideMetadata_System_Type_System_Windows_PropertyMetadata_\">\r\n    \r\n            <a id=\"System_Windows_DependencyProperty_OverrideMetadata_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OverrideMetadata(Type,PropertyMetadata)</div>        \r\n          </div>\r\n    \r\n            <p>Specifies alternate metadata for this dependency property when it is present on instances of a specified type, overriding the metadata that existed for the dependency property as it was inherited from base types.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>forType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type where this dependency property is inherited and where the provided alternate metadata will be applied.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>typeMetadata</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.propertymetadata\" data-linktype=\"relative-path\">PropertyMetadata</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The metadata to apply to the dependency property on the overriding type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to override metadata on a read-only dependency property (that operation cannot be done using this signature).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Metadata was already established for the dependency property as it exists on the provided type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Dependency property metadata should be overridden before the property system uses the dependency property. This equates to the time that specific instances are created using the class that registers the dependency property. Calls to OverrideMetadata should only be performed within the static constructors of the type that provides itself as the <code>forType</code> parameter of this method, or through similar instantiation. Attempting to change metadata after instances of the owner type exist will not raise exceptions, but will result in inconsistent behaviors in the property system.  </p>\n<p> After metadata for a particular derived class override is established with this method, subsequent attempts to override metadata on this same derived class will raise an exception.  </p>\n<p> The supplied metadata is merged with the property metadata for the dependency property as it exists on the base owner. Any characteristics that were specified in the original base metadata will persist; only those characteristics that were specifically changed in the new metadata will override the characteristics of the base metadata. Some characteristics such as <a class=\"xref\" href=\"system.windows.propertymetadata#System_Windows_PropertyMetadata_DefaultValue_\" data-linktype=\"relative-path\">DefaultValue</a> are replaced if specified in the new metadata. Others, such as <a class=\"xref\" href=\"system.windows.propertychangedcallback\" data-linktype=\"relative-path\">PropertyChangedCallback</a>, are combined. Ultimately, the merge behavior depends on the property metadata type being used for the override, so the behavior described here is for the existing property metadata classes used by WPF dependency properties. For details, see <a href=\"../Topic/Dependency%20Property%20Metadata.md\" data-linktype=\"relative-path\">Dependency Property Metadata</a> and <a href=\"../Topic/Framework%20Property%20Metadata.md\" data-linktype=\"relative-path\">Framework Property Metadata</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_DependencyProperty_OverrideMetadata_System_Type_System_Windows_PropertyMetadata_System_Windows_DependencyPropertyKey_\">\r\n    \r\n            <a id=\"System_Windows_DependencyProperty_OverrideMetadata_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OverrideMetadata(Type,PropertyMetadata,DependencyPropertyKey)</div>        \r\n          </div>\r\n    \r\n            <p>Supplies alternate metadata for a read-only dependency property when it is present on instances of a specified type, overriding the metadata that was provided in the initial dependency property registration. You must pass the <a class=\"xref\" href=\"system.windows.dependencypropertykey\" data-linktype=\"relative-path\">DependencyPropertyKey</a> for the read-only dependency property to avoid raising an exception.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata, System.Windows.DependencyPropertyKey key);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>forType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type where this dependency property is inherited and where the provided alternate metadata will be applied.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>typeMetadata</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.propertymetadata\" data-linktype=\"relative-path\">PropertyMetadata</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The metadata to apply to the dependency property on the overriding type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencypropertykey\" data-linktype=\"relative-path\">DependencyPropertyKey</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The access key for a read-only dependency property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This signature provides underlying implementation for a read-only dependency property identifier (<a class=\"xref\" href=\"system.windows.dependencypropertykey\" data-linktype=\"relative-path\">DependencyPropertyKey</a>) method. If overriding metadata for a read-write dependency property, use <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_OverrideMetadata_System_Type_System_Windows_PropertyMetadata_\" data-linktype=\"relative-path\">OverrideMetadata(Type,PropertyMetadata)</a>.  </p>\n<p> Dependency property metadata should be overridden before the property system uses the dependency property. This equates to the time that specific objects are created for the class that registers the dependency property. Calls to <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_OverrideMetadata_\" data-linktype=\"relative-path\">OverrideMetadata</a> should only be performed within the static constructors of the type that provides itself as the <code>forType</code> parameter of this method, or through similar instantiation. Attempting to change metadata after instances of the owner type exist will not raise exceptions, but will result in inconsistent behaviors in the property system.  </p>\n<p> After metadata for a particular derived class override is established with this method, subsequent attempts to override metadata on this same derived class will raise an exception.  </p>\n<p> The supplied metadata is merged with the property metadata for the dependency property as it exists on the base owner. Any characteristics that were specified in the original base metadata will persist; only those characteristics that were specifically changed in the new metadata will override the characteristics of the base metadata. Some characteristics such as <a class=\"xref\" href=\"system.windows.propertymetadata#System_Windows_PropertyMetadata_DefaultValue_\" data-linktype=\"relative-path\">DefaultValue</a> are replaced if specified in the new metadata. Others, such as <a class=\"xref\" href=\"system.windows.propertychangedcallback\" data-linktype=\"relative-path\">PropertyChangedCallback</a>, are combined. The merge behavior depends on the property metadata type being used for the override. For details, see <a href=\"../Topic/Dependency%20Property%20Metadata.md\" data-linktype=\"relative-path\">Dependency Property Metadata</a> and <a href=\"../Topic/Framework%20Property%20Metadata.md\" data-linktype=\"relative-path\">Framework Property Metadata</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_DependencyProperty_Register_System_String_System_Type_System_Type_\">\r\n    \r\n            <a id=\"System_Windows_DependencyProperty_Register_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Register(String,Type,Type)</div>        \r\n          </div>\r\n    \r\n            <p>Registers a dependency property with the specified property name, property type, and owner type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the dependency property to register. The name must be unique within the registration namespace of the owner type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>propertyType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ownerType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The owner type that is registering the dependency property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a></div>\r\n                  </div>\r\n                  <p>A dependency property identifier that should be used to set the value of a <code>public static readonly</code> field in your class. That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information on dependency property registration, see <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cs\" name=\"WPFAquariumSln#Register3Param\">public static readonly DependencyProperty IsDirtyProperty = DependencyProperty.Register(\n  &quot;IsDirty&quot;,\n  typeof(Boolean),\n  typeof(AquariumObject3)\n);\n</code></pre><pre><code class=\"lang-vb\" name=\"WPFAquariumSln#Register3Param\">Public Shared ReadOnly IsDirtyProperty As DependencyProperty = DependencyProperty.Register(&quot;IsDirty&quot;, GetType(Boolean), GetType(AquariumObject3))\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_DependencyProperty_Register_System_String_System_Type_System_Type_System_Windows_PropertyMetadata_\">\r\n    \r\n            <a id=\"System_Windows_DependencyProperty_Register_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Register(String,Type,Type,PropertyMetadata)</div>        \r\n          </div>\r\n    \r\n            <p>Registers a dependency property with the specified property name, property type, owner type, and property metadata.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the dependency property to register.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>propertyType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ownerType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The owner type that is registering the dependency property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>typeMetadata</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.propertymetadata\" data-linktype=\"relative-path\">PropertyMetadata</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Property metadata for the dependency property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a></div>\r\n                  </div>\r\n                  <p>A dependency property identifier that should be used to set the value of a <code>public static readonly</code> field in your class. That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information on dependency property registration, see <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_DependencyProperty_Register_System_String_System_Type_System_Type_System_Windows_PropertyMetadata_System_Windows_ValidateValueCallback_\">\r\n    \r\n            <a id=\"System_Windows_DependencyProperty_Register_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Register(String,Type,Type,PropertyMetadata,ValidateValueCallback)</div>        \r\n          </div>\r\n    \r\n            <p>Registers a dependency property with the specified property name, property type, owner type, property metadata, and a value validation callback for the property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata, System.Windows.ValidateValueCallback validateValueCallback);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the dependency property to register.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>propertyType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ownerType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The owner type that is registering the dependency property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>typeMetadata</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.propertymetadata\" data-linktype=\"relative-path\">PropertyMetadata</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Property metadata for the dependency property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>validateValueCallback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.validatevaluecallback\" data-linktype=\"relative-path\">ValidateValueCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A reference to a callback that should perform any custom validation of the dependency property value beyond typical type validation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a></div>\r\n                  </div>\r\n                  <p>A dependency property identifier that should be used to set the value of a <code>public static readonly</code> field in your class. That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information on dependency property registration, see <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example registers a dependency property, including a validation callback (the callback definition is not shown; for details on the callback definition, see <a class=\"xref\" href=\"system.windows.validatevaluecallback\" data-linktype=\"relative-path\">ValidateValueCallback</a>).  </p>\n<pre><code class=\"lang-cs\" name=\"DPCallbackOverride#CurrentDefinitionWithWrapper\">public static readonly DependencyProperty CurrentReadingProperty = DependencyProperty.Register(\n    &quot;CurrentReading&quot;,\n    typeof(double),\n    typeof(Gauge),\n    new FrameworkPropertyMetadata(\n        Double.NaN,\n        FrameworkPropertyMetadataOptions.AffectsMeasure,\n        new PropertyChangedCallback(OnCurrentReadingChanged),\n        new CoerceValueCallback(CoerceCurrentReading)\n    ),\n    new ValidateValueCallback(IsValidReading)\n);\npublic double CurrentReading\n{\n  get { return (double)GetValue(CurrentReadingProperty); }\n  set { SetValue(CurrentReadingProperty, value); }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"DPCallbackOverride#CurrentDefinitionWithWrapper\">Public Shared ReadOnly CurrentReadingProperty As DependencyProperty =\n    DependencyProperty.Register(&quot;CurrentReading&quot;,\n        GetType(Double), GetType(Gauge),\n        New FrameworkPropertyMetadata(Double.NaN,\n            FrameworkPropertyMetadataOptions.AffectsMeasure,\n            New PropertyChangedCallback(AddressOf OnCurrentReadingChanged),\n            New CoerceValueCallback(AddressOf CoerceCurrentReading)),\n        New ValidateValueCallback(AddressOf IsValidReading))\n\nPublic Property CurrentReading() As Double\n    Get\n        Return CDbl(GetValue(CurrentReadingProperty))\n    End Get\n    Set(ByVal value As Double)\n        SetValue(CurrentReadingProperty, value)\n    End Set\nEnd Property\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_DependencyProperty_RegisterAttached_System_String_System_Type_System_Type_\">\r\n    \r\n            <a id=\"System_Windows_DependencyProperty_RegisterAttached_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RegisterAttached(String,Type,Type)</div>        \r\n          </div>\r\n    \r\n            <p>Registers an attached property with the specified property name, property type, and owner type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the dependency property to register.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>propertyType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ownerType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The owner type that is registering the dependency property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a></div>\r\n                  </div>\r\n                  <p>A dependency property identifier that should be used to set the value of a <code>public static readonly</code> field in your class. That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An attached property is a property concept defined by Extensible Application Markup Language (XAML). WPF implements attached properties as dependency properties. Because the WPF attached properties are dependency properties, they can have metadata applied that can be used by the general property system for operations such as reporting layout characteristics. For more information, see <a href=\"../Topic/Attached%20Properties%20Overview.md\" data-linktype=\"relative-path\">Attached Properties Overview</a>.  </p>\n<p> For more information on dependency property registration, see <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example registers an attached property on an abstract class using this RegisterAttached signature.  </p>\n<pre><code class=\"lang-cs\" name=\"WPFAquariumSln#RegisterAttachedBubbler2\">public static readonly DependencyProperty IsBubbleSourceProperty = DependencyProperty.RegisterAttached(\n  &quot;IsBubbleSource&quot;,\n  typeof(Boolean),\n  typeof(AquariumObject2)\n);\npublic static void SetIsBubbleSource(UIElement element, Boolean value)\n{\n    element.SetValue(IsBubbleSourceProperty, value);\n}\npublic static Boolean GetIsBubbleSource(UIElement element)\n{\n    return (Boolean)element.GetValue(IsBubbleSourceProperty);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"WPFAquariumSln#RegisterAttachedBubbler2\">Public Shared ReadOnly IsBubbleSourceProperty As DependencyProperty = DependencyProperty.RegisterAttached(&quot;IsBubbleSource&quot;, GetType(Boolean), GetType(AquariumObject2))\nPublic Shared Sub SetIsBubbleSource(ByVal element As UIElement, ByVal value As Boolean)\n    element.SetValue(IsBubbleSourceProperty, value)\nEnd Sub\nPublic Shared Function GetIsBubbleSource(ByVal element As UIElement) As Boolean\n    Return CType(element.GetValue(IsBubbleSourceProperty), Boolean)\nEnd Function\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_DependencyProperty_RegisterAttached_System_String_System_Type_System_Type_System_Windows_PropertyMetadata_\">\r\n    \r\n            <a id=\"System_Windows_DependencyProperty_RegisterAttached_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RegisterAttached(String,Type,Type,PropertyMetadata)</div>        \r\n          </div>\r\n    \r\n            <p>Registers an attached property with the specified property name, property type, owner type, and property metadata.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the dependency property to register.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>propertyType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ownerType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The owner type that is registering the dependency property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>defaultMetadata</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.propertymetadata\" data-linktype=\"relative-path\">PropertyMetadata</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Property metadata for the dependency property. This can include the default value as well as other characteristics.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a></div>\r\n                  </div>\r\n                  <p>A dependency property identifier that should be used to set the value of a <code>public static readonly</code> field in your class. That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An attached property is a property concept defined by Extensible Application Markup Language (XAML). WPF implements attached properties as dependency properties. Because the WPF attached properties are dependency properties, they can have metadata applied that can be used by the general property system for operations such as reporting layout characteristics. For more information, see <a href=\"../Topic/Attached%20Properties%20Overview.md\" data-linktype=\"relative-path\">Attached Properties Overview</a>.  </p>\n<p> For more information on dependency property registration, see <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a>.  </p>\n<h2 id=\"use-registerattached-for-value-inheriting-dependency-properties\">Use RegisterAttached for Value-inheriting Dependency Properties</h2>\n<p> One particular scenario for registering a dependency property with RegisterAttached instead of <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_Register_\" data-linktype=\"relative-path\">Register</a> is to support property value inheritance. You should register value-inheriting dependency properties with RegisterAttached even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get* and Set* static methods to provide true attached property support accessors.   Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined. Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree. Always use RegisterAttached to register properties where you specify <a class=\"xref\" href=\"system.windows.frameworkpropertymetadata#System_Windows_FrameworkPropertyMetadata_Inherits_\" data-linktype=\"relative-path\">Inherits</a> in the metadata. For more information, see <a href=\"../Topic/Property%20Value%20Inheritance.md\" data-linktype=\"relative-path\">Property Value Inheritance</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_DependencyProperty_RegisterAttached_System_String_System_Type_System_Type_System_Windows_PropertyMetadata_System_Windows_ValidateValueCallback_\">\r\n    \r\n            <a id=\"System_Windows_DependencyProperty_RegisterAttached_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RegisterAttached(String,Type,Type,PropertyMetadata,ValidateValueCallback)</div>        \r\n          </div>\r\n    \r\n            <p>Registers an attached property with the specified property type, owner type, property metadata, and value validation callback for the property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata, System.Windows.ValidateValueCallback validateValueCallback);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the dependency property to register.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>propertyType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ownerType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The owner type that is registering the dependency property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>defaultMetadata</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.propertymetadata\" data-linktype=\"relative-path\">PropertyMetadata</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Property metadata for the dependency property. This can include the default value as well as other characteristics.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>validateValueCallback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.validatevaluecallback\" data-linktype=\"relative-path\">ValidateValueCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A reference to a callback that should perform any custom validation of the dependency property value beyond typical type validation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a></div>\r\n                  </div>\r\n                  <p>A dependency property identifier that should be used to set the value of a <code>public static readonly</code> field in your class. That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An attached property is a property concept defined by Extensible Application Markup Language (XAML). WPF implements attached properties as dependency properties. Because the WPF attached properties are dependency properties, they can have metadata applied that can be used by the general property system for operations such as reporting layout characteristics. For more information, see <a href=\"../Topic/Attached%20Properties%20Overview.md\" data-linktype=\"relative-path\">Attached Properties Overview</a>.  </p>\n<p> For more information on dependency property registration, see <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a>.  </p>\n<h2 id=\"use-registerattached-for-value-inheriting-dependency-properties\">Use RegisterAttached for Value-inheriting Dependency Properties</h2>\n<p> One particular scenario for registering a dependency property with <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_RegisterAttached_\" data-linktype=\"relative-path\">RegisterAttached</a> instead of <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_Register_\" data-linktype=\"relative-path\">Register</a> is to support property value inheritance. You should register value-inheriting dependency properties with <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_RegisterAttached_\" data-linktype=\"relative-path\">RegisterAttached</a> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get* and Set* static methods to provide true attached property support accessors.   Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined. Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree. Always use <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_RegisterAttached_\" data-linktype=\"relative-path\">RegisterAttached</a> to register properties where you specify <a class=\"xref\" href=\"system.windows.frameworkpropertymetadata#System_Windows_FrameworkPropertyMetadata_Inherits_\" data-linktype=\"relative-path\">Inherits</a> in the metadata. For more information, see <a href=\"../Topic/Property%20Value%20Inheritance.md\" data-linktype=\"relative-path\">Property Value Inheritance</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example registers an attached property on an abstract class using this RegisterAttached signature. This attached property is an enumeration type property, and the registration adds a validation callback to verify that the provided value is a value of the enumeration.  </p>\n<pre><code class=\"lang-cs\" name=\"WPFAquariumSln#RegisterAttachedBubbler2\">public static readonly DependencyProperty IsBubbleSourceProperty = DependencyProperty.RegisterAttached(\n  &quot;IsBubbleSource&quot;,\n  typeof(Boolean),\n  typeof(AquariumObject2)\n);\npublic static void SetIsBubbleSource(UIElement element, Boolean value)\n{\n    element.SetValue(IsBubbleSourceProperty, value);\n}\npublic static Boolean GetIsBubbleSource(UIElement element)\n{\n    return (Boolean)element.GetValue(IsBubbleSourceProperty);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"WPFAquariumSln#RegisterAttachedBubbler2\">Public Shared ReadOnly IsBubbleSourceProperty As DependencyProperty = DependencyProperty.RegisterAttached(&quot;IsBubbleSource&quot;, GetType(Boolean), GetType(AquariumObject2))\nPublic Shared Sub SetIsBubbleSource(ByVal element As UIElement, ByVal value As Boolean)\n    element.SetValue(IsBubbleSourceProperty, value)\nEnd Sub\nPublic Shared Function GetIsBubbleSource(ByVal element As UIElement) As Boolean\n    Return CType(element.GetValue(IsBubbleSourceProperty), Boolean)\nEnd Function\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_DependencyProperty_RegisterAttachedReadOnly_System_String_System_Type_System_Type_System_Windows_PropertyMetadata_\">\r\n    \r\n            <a id=\"System_Windows_DependencyProperty_RegisterAttachedReadOnly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RegisterAttachedReadOnly(String,Type,Type,PropertyMetadata)</div>        \r\n          </div>\r\n    \r\n            <p>Registers a read-only attached property, with the specified property type, owner type, and property metadata.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.DependencyPropertyKey RegisterAttachedReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the dependency property to register.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>propertyType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ownerType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The owner type that is registering the dependency property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>defaultMetadata</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.propertymetadata\" data-linktype=\"relative-path\">PropertyMetadata</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Property metadata for the dependency property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencypropertykey\" data-linktype=\"relative-path\">DependencyPropertyKey</a></div>\r\n                  </div>\r\n                  <p>A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property later.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method returns the type <a class=\"xref\" href=\"system.windows.dependencypropertykey\" data-linktype=\"relative-path\">DependencyPropertyKey</a>, whereas <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_RegisterAttached_\" data-linktype=\"relative-path\">RegisterAttached</a> returns the type <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a>. Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_SetValue_System_Windows_DependencyPropertyKey_System_Object_\" data-linktype=\"relative-path\">SetValue(DependencyPropertyKey,Object)</a>. Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <a class=\"xref\" href=\"system.windows.dependencypropertykey\" data-linktype=\"relative-path\">DependencyPropertyKey</a> to only those parts of your code that are necessary to set that dependency property as part of class or application logic. It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <a class=\"xref\" href=\"system.windows.dependencypropertykey#System_Windows_DependencyPropertyKey_DependencyProperty_\" data-linktype=\"relative-path\">DependencyProperty</a> as a <code>public static readonly</code> field on your class.  </p>\n<p> Read-only attached properties are a rare scenario, because the primary scenario for an attached property is its use in XAML. Without a public setter, an attached property cannot be set in XAML syntax.  </p>\n<p> For more information on dependency property registration, see <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a>.  </p>\n<h2 id=\"use-registerattached-for-value-inheriting-dependency-properties\">Use RegisterAttached for Value-inheriting Dependency Properties</h2>\n<p> One particular scenario for registering a dependency property as attached is to support property value inheritance. You should register value-inheriting dependency properties with <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_RegisterAttached_\" data-linktype=\"relative-path\">RegisterAttached</a> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get* and Set* static methods to provide true attached property support accessors.   Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined. Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree. Always use <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_RegisterAttached_\" data-linktype=\"relative-path\">RegisterAttached</a> to register properties where you specify <a class=\"xref\" href=\"system.windows.frameworkpropertymetadata#System_Windows_FrameworkPropertyMetadata_Inherits_\" data-linktype=\"relative-path\">Inherits</a> in the metadata. For more information, see <a href=\"../Topic/Property%20Value%20Inheritance.md\" data-linktype=\"relative-path\">Property Value Inheritance</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_DependencyProperty_RegisterAttachedReadOnly_System_String_System_Type_System_Type_System_Windows_PropertyMetadata_System_Windows_ValidateValueCallback_\">\r\n    \r\n            <a id=\"System_Windows_DependencyProperty_RegisterAttachedReadOnly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RegisterAttachedReadOnly(String,Type,Type,PropertyMetadata,ValidateValueCallback)</div>        \r\n          </div>\r\n    \r\n            <p>Registers a read-only attached property, with the specified property type, owner type, property metadata, and a validation callback.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.DependencyPropertyKey RegisterAttachedReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata, System.Windows.ValidateValueCallback validateValueCallback);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the dependency property to register.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>propertyType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ownerType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The owner type that is registering the dependency property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>defaultMetadata</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.propertymetadata\" data-linktype=\"relative-path\">PropertyMetadata</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Property metadata for the dependency property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>validateValueCallback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.validatevaluecallback\" data-linktype=\"relative-path\">ValidateValueCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A reference to a user-created callback that should perform any custom validation of the dependency property value beyond typical type validation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencypropertykey\" data-linktype=\"relative-path\">DependencyPropertyKey</a></div>\r\n                  </div>\r\n                  <p>A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method returns the type <a class=\"xref\" href=\"system.windows.dependencypropertykey\" data-linktype=\"relative-path\">DependencyPropertyKey</a>, whereas <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_RegisterAttached_\" data-linktype=\"relative-path\">RegisterAttached</a> returns the type <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a>. Typically, the keys that represent the type <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a>. Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_SetValue_System_Windows_DependencyPropertyKey_System_Object_\" data-linktype=\"relative-path\">SetValue(DependencyPropertyKey,Object)</a>. Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <a class=\"xref\" href=\"system.windows.dependencypropertykey\" data-linktype=\"relative-path\">DependencyPropertyKey</a> to only those parts of your code that are necessary to set that dependency property as part of class or application logic. It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <a class=\"xref\" href=\"system.windows.dependencypropertykey#System_Windows_DependencyPropertyKey_DependencyProperty_\" data-linktype=\"relative-path\">DependencyProperty</a> as a <code>public static readonly</code> field on your class.  </p>\n<p> Read-only attached properties are a rare scenario, because the primary scenario for an attached property is its use in XAML. Without a public setter, an attached property cannot be set in XAML syntax.  </p>\n<p> For more information on dependency property registration, see <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a>.  </p>\n<h2 id=\"use-registerattached-for-value-inheriting-dependency-properties\">Use RegisterAttached for Value-inheriting Dependency Properties</h2>\n<p> One particular scenario for registering a dependency property as attached instead of <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_Register_\" data-linktype=\"relative-path\">Register</a> is to support property value inheritance. You should register value-inheriting dependency properties with <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_RegisterAttached_\" data-linktype=\"relative-path\">RegisterAttached</a> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get* and Set* static methods to provide true attached property support accessors.   Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined. Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree. Always use <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_RegisterAttached_\" data-linktype=\"relative-path\">RegisterAttached</a> to register properties where you specify <a class=\"xref\" href=\"system.windows.frameworkpropertymetadata#System_Windows_FrameworkPropertyMetadata_Inherits_\" data-linktype=\"relative-path\">Inherits</a> in the metadata. For more information, see <a href=\"../Topic/Property%20Value%20Inheritance.md\" data-linktype=\"relative-path\">Property Value Inheritance</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_DependencyProperty_RegisterReadOnly_System_String_System_Type_System_Type_System_Windows_PropertyMetadata_\">\r\n    \r\n            <a id=\"System_Windows_DependencyProperty_RegisterReadOnly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RegisterReadOnly(String,Type,Type,PropertyMetadata)</div>        \r\n          </div>\r\n    \r\n            <p>Registers a read-only dependency property, with the specified property type, owner type, and property metadata.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.DependencyPropertyKey RegisterReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the dependency property to register.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>propertyType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ownerType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The owner type that is registering the dependency property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>typeMetadata</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.propertymetadata\" data-linktype=\"relative-path\">PropertyMetadata</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Property metadata for the dependency property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencypropertykey\" data-linktype=\"relative-path\">DependencyPropertyKey</a></div>\r\n                  </div>\r\n                  <p>A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method returns the type <a class=\"xref\" href=\"system.windows.dependencypropertykey\" data-linktype=\"relative-path\">DependencyPropertyKey</a>, whereas <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_RegisterAttached_\" data-linktype=\"relative-path\">RegisterAttached</a> returns the type <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a>. Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_SetValue_System_Windows_DependencyPropertyKey_System_Object_\" data-linktype=\"relative-path\">SetValue(DependencyPropertyKey,Object)</a>. Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <a class=\"xref\" href=\"system.windows.dependencypropertykey\" data-linktype=\"relative-path\">DependencyPropertyKey</a> to only those parts of your code that are necessary to set that dependency property as part of class or application logic. It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <a class=\"xref\" href=\"system.windows.dependencypropertykey#System_Windows_DependencyPropertyKey_DependencyProperty_\" data-linktype=\"relative-path\">DependencyProperty</a> as a <code>public static readonly</code> field on your class.  </p>\n<p> Read-only dependency properties are a fairly typical scenario both in the existing API and for customization scenarios, because other WPF features might require a dependency property even if that property is not intended to be settable by callers. You can use the value of a read-only dependency property as the basis for other property system operations that take a dependency property, such as basing a <a class=\"xref\" href=\"system.windows.trigger\" data-linktype=\"relative-path\">Trigger</a> on the dependency property in a style.  </p>\n<p> For more information on dependency property registration, see <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example registers an <code>AquariumSize</code> dependency property as read-only. The example defines <code>AquariumSizeKey</code> as an internal key (so that other classes in the assembly could override metadata) and exposes the dependency property identifier based on that key as <code>AquariumSizeProperty</code>. Also, a wrapper is created for <code>AquariumSize</code>, with only a get accessor.  </p>\n<pre><code class=\"lang-cs\" name=\"WPFAquariumSln#RODP\">internal static readonly DependencyPropertyKey AquariumSizeKey = DependencyProperty.RegisterReadOnly(\n  &quot;AquariumSize&quot;,\n  typeof(double),\n  typeof(Aquarium),\n  new PropertyMetadata(double.NaN)\n);\npublic static readonly DependencyProperty AquariumSizeProperty =\n  AquariumSizeKey.DependencyProperty;\npublic double AquariumSize\n{\n  get { return (double)GetValue(AquariumSizeProperty); }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"WPFAquariumSln#RODP\">Friend Shared ReadOnly AquariumSizeKey As DependencyPropertyKey = DependencyProperty.RegisterReadOnly(&quot;AquariumSize&quot;, GetType(Double), GetType(Aquarium), New PropertyMetadata(Double.NaN))\nPublic Shared ReadOnly AquariumSizeProperty As DependencyProperty = AquariumSizeKey.DependencyProperty\nPublic ReadOnly Property AquariumSize() As Double\n    Get\n        Return CDbl(GetValue(AquariumSizeProperty))\n    End Get\nEnd Property\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_DependencyProperty_RegisterReadOnly_System_String_System_Type_System_Type_System_Windows_PropertyMetadata_System_Windows_ValidateValueCallback_\">\r\n    \r\n            <a id=\"System_Windows_DependencyProperty_RegisterReadOnly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RegisterReadOnly(String,Type,Type,PropertyMetadata,ValidateValueCallback)</div>        \r\n          </div>\r\n    \r\n            <p>Registers a read-only dependency property, with the specified property type, owner type, property metadata, and a validation callback.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.DependencyPropertyKey RegisterReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata, System.Windows.ValidateValueCallback validateValueCallback);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the dependency property to register.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>propertyType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ownerType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The owner type that is registering the dependency property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>typeMetadata</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.propertymetadata\" data-linktype=\"relative-path\">PropertyMetadata</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Property metadata for the dependency property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>validateValueCallback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.validatevaluecallback\" data-linktype=\"relative-path\">ValidateValueCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A reference to a user-created callback that should perform any custom validation of the dependency property value beyond typical type validation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencypropertykey\" data-linktype=\"relative-path\">DependencyPropertyKey</a></div>\r\n                  </div>\r\n                  <p>A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property later.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method returns the type <a class=\"xref\" href=\"system.windows.dependencypropertykey\" data-linktype=\"relative-path\">DependencyPropertyKey</a>, whereas <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_RegisterAttached_\" data-linktype=\"relative-path\">RegisterAttached</a> returns the type <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a>. Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_SetValue_System_Windows_DependencyPropertyKey_System_Object_\" data-linktype=\"relative-path\">SetValue(DependencyPropertyKey,Object)</a>. Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <a class=\"xref\" href=\"system.windows.dependencypropertykey\" data-linktype=\"relative-path\">DependencyPropertyKey</a> to only those parts of your code that are necessary to set that dependency property as part of class or application logic. It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <a class=\"xref\" href=\"system.windows.dependencypropertykey#System_Windows_DependencyPropertyKey_DependencyProperty_\" data-linktype=\"relative-path\">DependencyProperty</a> as a <code>public static readonly</code> field on your class.  </p>\n<p> Read-only dependency properties are a fairly typical scenario. You can use the value of a read-only dependency property as the basis for other property system operations that take a dependency property, such as basing a <a class=\"xref\" href=\"system.windows.trigger\" data-linktype=\"relative-path\">Trigger</a> on the dependency property in a style.  </p>\n<p> For more information on dependency property registration, see <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a>.  </p>\n<p> Validation on a read-only dependency property might be less important. The nonpublic access level you specify for the key reduces the likelihood for arbitrary invalid input.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_DependencyProperty_ToString\">\r\n    \r\n            <a id=\"System_Windows_DependencyProperty_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the string representation of the dependency property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of the dependency property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This implementation returns the <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_Name_\" data-linktype=\"relative-path\">Name</a> property value.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.DependencyProperty.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.DependencyProperty.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.DependencyProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.DependencyProperty.AddOwner\">\r\n<meta name=\"APIName\" content=\"System.Windows.DependencyProperty.DefaultMetadata\">\r\n<meta name=\"APIName\" content=\"System.Windows.DependencyProperty.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Windows.DependencyProperty.GetMetadata\">\r\n<meta name=\"APIName\" content=\"System.Windows.DependencyProperty.GlobalIndex\">\r\n<meta name=\"APIName\" content=\"System.Windows.DependencyProperty.IsValidType\">\r\n<meta name=\"APIName\" content=\"System.Windows.DependencyProperty.IsValidValue\">\r\n<meta name=\"APIName\" content=\"System.Windows.DependencyProperty.Name\">\r\n<meta name=\"APIName\" content=\"System.Windows.DependencyProperty.OverrideMetadata\">\r\n<meta name=\"APIName\" content=\"System.Windows.DependencyProperty.OwnerType\">\r\n<meta name=\"APIName\" content=\"System.Windows.DependencyProperty.PropertyType\">\r\n<meta name=\"APIName\" content=\"System.Windows.DependencyProperty.ReadOnly\">\r\n<meta name=\"APIName\" content=\"System.Windows.DependencyProperty.Register\">\r\n<meta name=\"APIName\" content=\"System.Windows.DependencyProperty.RegisterAttached\">\r\n<meta name=\"APIName\" content=\"System.Windows.DependencyProperty.RegisterAttachedReadOnly\">\r\n<meta name=\"APIName\" content=\"System.Windows.DependencyProperty.RegisterReadOnly\">\r\n<meta name=\"APIName\" content=\"System.Windows.DependencyProperty.ToString\">\r\n<meta name=\"APIName\" content=\"System.Windows.DependencyProperty.UnsetValue\">\r\n<meta name=\"APIName\" content=\"System.Windows.DependencyProperty.ValidateValueCallback\">\r\n<meta name=\"APILocation\" content=\"WindowsBase.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"9c7f9f84-077f-9a39-3517-25e54dbffb7f\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a property that can be set through methods such as, styling, data binding, animation, and inheritance.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Windows/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.DependencyProperty\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.DependencyProperty.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.DependencyProperty.yml","open_to_public_contributors":true,"api_name":["System.Windows.DependencyProperty","System.Windows.DependencyProperty.AddOwner","System.Windows.DependencyProperty.DefaultMetadata","System.Windows.DependencyProperty.GetHashCode","System.Windows.DependencyProperty.GetMetadata","System.Windows.DependencyProperty.GlobalIndex","System.Windows.DependencyProperty.IsValidType","System.Windows.DependencyProperty.IsValidValue","System.Windows.DependencyProperty.Name","System.Windows.DependencyProperty.OverrideMetadata","System.Windows.DependencyProperty.OwnerType","System.Windows.DependencyProperty.PropertyType","System.Windows.DependencyProperty.ReadOnly","System.Windows.DependencyProperty.Register","System.Windows.DependencyProperty.RegisterAttached","System.Windows.DependencyProperty.RegisterAttachedReadOnly","System.Windows.DependencyProperty.RegisterReadOnly","System.Windows.DependencyProperty.ToString","System.Windows.DependencyProperty.UnsetValue","System.Windows.DependencyProperty.ValidateValueCallback"],"api_location":["WindowsBase.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.DependencyProperty","System::Windows::DependencyProperty","System.Windows.DependencyProperty.AddOwner","System::Windows::DependencyProperty::AddOwner","System.Windows.DependencyProperty.DefaultMetadata","System::Windows::DependencyProperty::DefaultMetadata","System.Windows.DependencyProperty.GetHashCode","System::Windows::DependencyProperty::GetHashCode","System.Windows.DependencyProperty.GetMetadata","System::Windows::DependencyProperty::GetMetadata","System.Windows.DependencyProperty.GlobalIndex","System::Windows::DependencyProperty::GlobalIndex","System.Windows.DependencyProperty.IsValidType","System::Windows::DependencyProperty::IsValidType","System.Windows.DependencyProperty.IsValidValue","System::Windows::DependencyProperty::IsValidValue","System.Windows.DependencyProperty.Name","System::Windows::DependencyProperty::Name","System.Windows.DependencyProperty.OverrideMetadata","System::Windows::DependencyProperty::OverrideMetadata","System.Windows.DependencyProperty.OwnerType","System::Windows::DependencyProperty::OwnerType","System.Windows.DependencyProperty.PropertyType","System::Windows::DependencyProperty::PropertyType","System.Windows.DependencyProperty.ReadOnly","System::Windows::DependencyProperty::ReadOnly","System.Windows.DependencyProperty.Register","System::Windows::DependencyProperty::Register","System.Windows.DependencyProperty.RegisterAttached","System::Windows::DependencyProperty::RegisterAttached","System.Windows.DependencyProperty.RegisterAttachedReadOnly","System::Windows::DependencyProperty::RegisterAttachedReadOnly","System.Windows.DependencyProperty.RegisterReadOnly","System::Windows::DependencyProperty::RegisterReadOnly","System.Windows.DependencyProperty.ToString","System::Windows::DependencyProperty::ToString","System.Windows.DependencyProperty.UnsetValue","System::Windows::DependencyProperty::UnsetValue","System.Windows.DependencyProperty.ValidateValueCallback","System::Windows::DependencyProperty::ValidateValueCallback"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"9c7f9f84-077f-9a39-3517-25e54dbffb7f","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Windows/DependencyProperty.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"DependencyProperty class | Microsoft Docs","_op_ogTitle":"DependencyProperty class","description":"Represents a property that can be set through methods such as, styling, data binding, animation, and inheritance.\n","toc_asset_id":"_splitted/System.Windows/toc.json","toc_rel":"_splitted/System.Windows/toc.json","source_url":"","ms.assetid":"System.Windows.DependencyProperty","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.dependencyproperty","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.dependencyproperty","fileRelativePath":"System.Windows.DependencyProperty.html"},"themesRelativePathToOutputRoot":"_themes/"}