{"content":"    \r\n    <h1 id=\"System_Net_Mail_SmtpClient\">\r\n      <span class=\"lang-csharp\">SmtpClient</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Allows applications to send e-mail by using the Simple Mail Transfer Protocol (SMTP).</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class SmtpClient : IDisposable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">SmtpClient</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The SmtpClient class is used to send e-mail to an SMTP server for delivery. The SMTP protocol is defined in RFC 2821, which is available at <a href=\"http://www.ietf.org/\" data-linktype=\"external\">http://www.ietf.org</a>.  </p>\n<p> The classes shown in the following table are used to construct e-mail messages that can be sent using SmtpClient.  </p>\n<table>\n<thead>\n<tr>\n<th>Class</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.net.mail.attachment\" data-linktype=\"relative-path\">Attachment</a></td>\n<td>Represents file attachments. This class allows you to attach files, streams, or text to an e-mail message.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.net.mail.mailaddress\" data-linktype=\"relative-path\">MailAddress</a></td>\n<td>Represents the e-mail address of the sender and recipients.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.net.mail.mailmessage\" data-linktype=\"relative-path\">MailMessage</a></td>\n<td>Represents an e-mail message.</td>\n</tr>\n</tbody>\n</table>\n<p> To construct and send an e-mail message by using SmtpClient, you must specify the following information:  </p>\n<ul>\n<li><p>The SMTP host server that you use to send e-mail. See the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Host_\" data-linktype=\"relative-path\">Host</a> and <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Port_\" data-linktype=\"relative-path\">Port</a> properties.  </p>\n</li>\n<li><p>Credentials for authentication, if required by the SMTP server. See the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Credentials_\" data-linktype=\"relative-path\">Credentials</a> property.  </p>\n</li>\n<li><p>The e-mail address of the sender. See the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Send_\" data-linktype=\"relative-path\">Send</a> and <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_SendAsync_\" data-linktype=\"relative-path\">SendAsync</a> methods that take a <code>from</code> parameter. Also see the <a class=\"xref\" href=\"system.net.mail.mailmessage#System_Net_Mail_MailMessage_From_\" data-linktype=\"relative-path\">From</a> property.  </p>\n</li>\n<li><p>The e-mail address or addresses of the recipients. See the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Send_\" data-linktype=\"relative-path\">Send</a> and <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_SendAsync_\" data-linktype=\"relative-path\">SendAsync</a> methods that take a <code>recipient</code> parameter. Also see the <a class=\"xref\" href=\"system.net.mail.mailmessage#System_Net_Mail_MailMessage_To_\" data-linktype=\"relative-path\">To</a> property.  </p>\n</li>\n<li><p>The message content. See the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Send_\" data-linktype=\"relative-path\">Send</a> and <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_SendAsync_\" data-linktype=\"relative-path\">SendAsync</a> methods that take a <code>body</code> parameter. Also see the <a class=\"xref\" href=\"system.net.mail.mailmessage#System_Net_Mail_MailMessage_Body_\" data-linktype=\"relative-path\">Body</a> property.  </p>\n<p>To include an attachment with an e-mail message, first create the attachment by using the <a class=\"xref\" href=\"system.net.mail.attachment\" data-linktype=\"relative-path\">Attachment</a> class, and then add it to the message by using the <a class=\"xref\" href=\"system.net.mail.mailmessage#System_Net_Mail_MailMessage_Attachments_\" data-linktype=\"relative-path\">Attachments</a> property. Depending on the e-mail reader used by the recipients and the file type of the attachment, some recipients might not be able to read the attachment. For clients that cannot display the attachment in its original form, you can specify alternate views by using the <a class=\"xref\" href=\"system.net.mail.mailmessage#System_Net_Mail_MailMessage_AlternateViews_\" data-linktype=\"relative-path\">AlternateViews</a> property.  </p>\n<p>You can use the application or machine configuration files to specify default host, port, and credentials values for all SmtpClient objects. For more information, see <a href=\"../Topic/%3CmailSettings%3E%20Element%20(Network%20Settings).md\" data-linktype=\"relative-path\">&amp;lt;mailSettings&amp;gt; Element (Network Settings)</a>.  </p>\n<p>To send the e-mail message and block while waiting for the e-mail to be transmitted to the SMTP server, use one of the synchronous <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Send_\" data-linktype=\"relative-path\">Send</a> methods. To allow your program&#39;s main thread to continue executing while the e-mail is transmitted, use one of the asynchronous <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_SendAsync_\" data-linktype=\"relative-path\">SendAsync</a> methods. The <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_SendCompleted\" data-linktype=\"relative-path\">SendCompleted</a> event is raised when a <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_SendAsync_\" data-linktype=\"relative-path\">SendAsync</a> operation completes. To receive this event, you must add a <a class=\"xref\" href=\"system.net.mail.sendcompletedeventhandler\" data-linktype=\"relative-path\">SendCompletedEventHandler</a> delegate to <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_SendCompleted\" data-linktype=\"relative-path\">SendCompleted</a>. The <a class=\"xref\" href=\"system.net.mail.sendcompletedeventhandler\" data-linktype=\"relative-path\">SendCompletedEventHandler</a> delegate must reference a callback method that handles notification of <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_SendCompleted\" data-linktype=\"relative-path\">SendCompleted</a> events. To cancel an asynchronous e-mail transmission, use the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_SendAsyncCancel_\" data-linktype=\"relative-path\">SendAsyncCancel</a> method.  </p>\n</li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> If there is an e-mail transmission in progress and you call <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_SendAsync_\" data-linktype=\"relative-path\">SendAsync</a> or <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Send_\" data-linktype=\"relative-path\">Send</a> again, you will receive an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a>.  </p>\n</div>\n<p> The connection established by the current instance of the SmtpClient class to the SMTP server may be re-used if an application wishes to send multiple messages to the same SMTP server. This is particularly useful when authentication or encryption are used establish a connection to the SMTP server. The process of authenticating and establishing a TLS session can be expensive operations. A requirement to re-establish a connection for each message when sending a large quantity of email to the same SMTP server could have a significant impact on performance. There are a number of high-volume email applications that send email status updates, newsletter distributions, or email alerts. Also many email client applications support an off-line mode where users can compose many email messages that are sent later when a connection to the SMTP server is established. It is typical for an email client to send all SMTP messages to a specific SMTP server (provided by the Internet service provider) that then forwards this email to other SMTP servers.  </p>\n<p> The SmtpClient class implementation pools SMTP connections so that it can avoid the overhead of re-establishing a connection for every message to the same server. An application may re-use the same SmtpClient object to send many different emails to the same SMTP server and to many different SMTP servers. As a result, there is no way to determine when an application is finished using the SmtpClient object and it should be cleaned up.  </p>\n<p> When an SMTP session is finished and the client wishes to terminate the connection, it must send a QUIT message to the server to indicate that it has no more messages to send. This allows the server to free up resources associated with the connection from the client and process the messages which were sent by the client.  </p>\n<p> The SmtpClient class has no <code>Finalize</code> method, so an application must call <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Dispose_\" data-linktype=\"relative-path\">Dispose</a> to explicitly free up resources. The <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method iterates through all established connections to the SMTP server specified in the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Host_\" data-linktype=\"relative-path\">Host</a> property and sends a QUIT message followed by gracefully ending the TCP connection. The <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method also releases the unmanaged resources used by the <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> and optionally disposes of the managed resources.  </p>\n<p> Call <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Dispose_\" data-linktype=\"relative-path\">Dispose</a> when you are finished using the SmtpClient. The <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method leaves the SmtpClient in an unusable state. After calling <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Dispose_\" data-linktype=\"relative-path\">Dispose</a>, you must release all references to the SmtpClient so the garbage collector can reclaim the memory that the SmtpClient was occupying.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Mail_SmtpClient__ctor\" data-linktype=\"self-bookmark\">SmtpClient()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.mail.smtpclient\" data-linktype=\"relative-path\">SmtpClient</a> class by using configuration file settings.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Mail_SmtpClient__ctor_System_String_\" data-linktype=\"self-bookmark\">SmtpClient(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.mail.smtpclient\" data-linktype=\"relative-path\">SmtpClient</a> class that sends e-mail by using the specified SMTP server.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Mail_SmtpClient__ctor_System_String_System_Int32_\" data-linktype=\"self-bookmark\">SmtpClient(String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.mail.smtpclient\" data-linktype=\"relative-path\">SmtpClient</a> class that sends e-mail by using the specified SMTP server and port.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Mail_SmtpClient_ClientCertificates\" data-linktype=\"self-bookmark\">ClientCertificates</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Specify which certificates should be used to establish the Secure Sockets Layer (SSL) connection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Mail_SmtpClient_Credentials\" data-linktype=\"self-bookmark\">Credentials</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the credentials used to authenticate the sender.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Mail_SmtpClient_DeliveryFormat\" data-linktype=\"self-bookmark\">DeliveryFormat</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the delivery format used by <a class=\"xref\" href=\"system.net.mail.smtpclient\" data-linktype=\"relative-path\">SmtpClient</a> to send e-mail.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Mail_SmtpClient_DeliveryMethod\" data-linktype=\"self-bookmark\">DeliveryMethod</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Specifies how outgoing email messages will be handled.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Mail_SmtpClient_EnableSsl\" data-linktype=\"self-bookmark\">EnableSsl</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Specify whether the <a class=\"xref\" href=\"system.net.mail.smtpclient\" data-linktype=\"relative-path\">SmtpClient</a> uses Secure Sockets Layer (SSL) to encrypt the connection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Mail_SmtpClient_Host\" data-linktype=\"self-bookmark\">Host</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the name or IP address of the host used for SMTP transactions.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Mail_SmtpClient_PickupDirectoryLocation\" data-linktype=\"self-bookmark\">PickupDirectoryLocation</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the folder where applications save mail messages to be processed by the local SMTP server.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Mail_SmtpClient_Port\" data-linktype=\"self-bookmark\">Port</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the port used for SMTP transactions.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Mail_SmtpClient_ServicePoint\" data-linktype=\"self-bookmark\">ServicePoint</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the network connection used to transmit the e-mail message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Mail_SmtpClient_TargetName\" data-linktype=\"self-bookmark\">TargetName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the Service Provider Name (SPN) to use for authentication when using extended protection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Mail_SmtpClient_Timeout\" data-linktype=\"self-bookmark\">Timeout</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that specifies the amount of time after which a synchronous <span class=\"xref\">stem.Net.Mail.SmtpClient.Send*</span> call times out.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Mail_SmtpClient_UseDefaultCredentials\" data-linktype=\"self-bookmark\">UseDefaultCredentials</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that controls whether the <span class=\"xref\">stem.Net.CredentialCache.DefaultCredentials*</span> are sent with requests.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Mail_SmtpClient_Dispose\" data-linktype=\"self-bookmark\">Dispose()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sends a QUIT message to the SMTP server, gracefully ends the TCP connection, and releases all resources used by the current instance of the <a class=\"xref\" href=\"system.net.mail.smtpclient\" data-linktype=\"relative-path\">SmtpClient</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Mail_SmtpClient_Dispose_System_Boolean_\" data-linktype=\"self-bookmark\">Dispose(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sends a QUIT message to the SMTP server, gracefully ends the TCP connection, releases all resources used by the current instance of the <a class=\"xref\" href=\"system.net.mail.smtpclient\" data-linktype=\"relative-path\">SmtpClient</a> class, and optionally disposes of the managed resources.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Mail_SmtpClient_OnSendCompleted_System_ComponentModel_AsyncCompletedEventArgs_\" data-linktype=\"self-bookmark\">OnSendCompleted(AsyncCompletedEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_SendCompleted\" data-linktype=\"relative-path\">SendCompleted</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Mail_SmtpClient_Send_System_Net_Mail_MailMessage_\" data-linktype=\"self-bookmark\">Send(MailMessage)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sends the specified message to an SMTP server for delivery.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Mail_SmtpClient_Send_System_String_System_String_System_String_System_String_\" data-linktype=\"self-bookmark\">Send(String,String,String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sends the specified e-mail message to an SMTP server for delivery. The message sender, recipients, subject, and message body are specified using <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Mail_SmtpClient_SendAsync_System_Net_Mail_MailMessage_System_Object_\" data-linktype=\"self-bookmark\">SendAsync(MailMessage,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sends the specified e-mail message to an SMTP server for delivery. This method does not block the calling thread and allows the caller to pass an object to the method that is invoked when the operation completes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Mail_SmtpClient_SendAsync_System_String_System_String_System_String_System_String_System_Object_\" data-linktype=\"self-bookmark\">SendAsync(String,String,String,String,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sends an e-mail message to an SMTP server for delivery. The message sender, recipients, subject, and message body are specified using <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects. This method does not block the calling thread and allows the caller to pass an object to the method that is invoked when the operation completes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Mail_SmtpClient_SendAsyncCancel\" data-linktype=\"self-bookmark\">SendAsyncCancel()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Cancels an asynchronous operation to send an e-mail message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Mail_SmtpClient_SendMailAsync_System_Net_Mail_MailMessage_\" data-linktype=\"self-bookmark\">SendMailAsync(MailMessage)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sends the specified message to an SMTP server for delivery as an asynchronous operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Mail_SmtpClient_SendMailAsync_System_String_System_String_System_String_System_String_\" data-linktype=\"self-bookmark\">SendMailAsync(String,String,String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sends the specified message to an SMTP server for delivery as an asynchronous operation. . The message sender, recipients, subject, and message body are specified using <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Events\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Mail_SmtpClient_SendCompleted\" data-linktype=\"self-bookmark\">SendCompleted</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when an asynchronous e-mail send operation completes.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Mail_SmtpClient__ctor\">\r\n    \r\n            <a id=\"System_Net_Mail_SmtpClient__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SmtpClient()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.mail.smtpclient\" data-linktype=\"relative-path\">SmtpClient</a> class by using configuration file settings.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public SmtpClient ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor initializes the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Host_\" data-linktype=\"relative-path\">Host</a>, <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Credentials_\" data-linktype=\"relative-path\">Credentials</a>, and <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Port_\" data-linktype=\"relative-path\">Port</a> properties for the new <a class=\"xref\" href=\"system.net.mail.smtpclient\" data-linktype=\"relative-path\">SmtpClient</a> by using the settings in the application or machine configuration files. For more information, see <a href=\"../Topic/%3CmailSettings%3E%20Element%20(Network%20Settings).md\" data-linktype=\"relative-path\">&amp;lt;mailSettings&amp;gt; Element (Network Settings)</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates sending an e-mail message.  </p>\n<pre><code class=\"lang-cpp\" name=\"NclMailSync#4\">   static void CreateTestMessage3()\n   {\n      MailAddress^ to = gcnew MailAddress( L&quot;jane@contoso.com&quot; );\n      MailAddress^ from = gcnew MailAddress( L&quot;ben@contoso.com&quot; );\n      MailMessage^ message = gcnew MailMessage( from,to );\n      message-&gt;Subject = L&quot;Using the new SMTP client.&quot;;\n      message-&gt;Body = L&quot;Using this new feature, you can send an e-mail message from an application very easily.&quot;;\n      \n      // Use the application or machine configuration to get the \n      // host, port, and credentials.\n      SmtpClient^ client = gcnew SmtpClient;\n      Console::WriteLine( L&quot;Sending an e-mail message to {0} at {1} by using the SMTP host {2}.&quot;, to-&gt;User, to-&gt;Host, client-&gt;Host );\n      client-&gt;Send( message );\n   }\n\n</code></pre><pre><code class=\"lang-cs\" name=\"NclMailSync#4\">\t\tpublic static void CreateTestMessage3()\n\t\t{\n\t\t\tMailAddress to = new MailAddress(&quot;jane@contoso.com&quot;);\n\t\t\tMailAddress from = new MailAddress(&quot;ben@contoso.com&quot;);\n\t\t\tMailMessage message = new MailMessage(from, to);\n\t\t\tmessage.Subject = &quot;Using the new SMTP client.&quot;;\n\t\t\tmessage.Body = @&quot;Using this new feature, you can send an e-mail message from an application very easily.&quot;;\n\t\t\t// Use the application or machine configuration to get the \n\t\t\t// host, port, and credentials.\n\t\t\tSmtpClient client = new SmtpClient();\n\t\t\tConsole.WriteLine(&quot;Sending an e-mail message to {0} at {1} by using the SMTP host={2}.&quot;,\n\t\t\t\tto.User, to.Host, client.Host);\n      try {\n\t\t\t  client.Send(message);\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t  Console.WriteLine(&quot;Exception caught in CreateTestMessage3(): {0}&quot;, \n                    ex.ToString() );\t\t\t  \n\t\t  }\n\t\t}\n</code></pre><p> For an example of the &lt;mailSettings&gt; node in the application or machine configuration file, see <a href=\"../Topic/%3CmailSettings%3E%20Element%20(Network%20Settings).md\" data-linktype=\"relative-path\">&amp;lt;mailSettings&amp;gt; Element (Network Settings)</a>.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Mail_SmtpClient__ctor_System_String_\">\r\n    \r\n            <a id=\"System_Net_Mail_SmtpClient__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SmtpClient(String)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.mail.smtpclient\" data-linktype=\"relative-path\">SmtpClient</a> class that sends e-mail by using the specified SMTP server.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public SmtpClient (string host);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>host</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains the name or IP address of the host computer used for SMTP transactions.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>host</code> parameter is used to initialize the value of the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Host_\" data-linktype=\"relative-path\">Host</a> property. The <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Credentials_\" data-linktype=\"relative-path\">Credentials</a> and <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Port_\" data-linktype=\"relative-path\">Port</a> properties are initialized by using the settings in the application or machine configuration files. If <code>host</code> is <code>null</code> or equal to <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>, <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Host_\" data-linktype=\"relative-path\">Host</a> is initialized using the settings in the application or machine configuration files.  </p>\n<p> For more information about using the application and machine configuration files, see <a href=\"../Topic/%3CmailSettings%3E%20Element%20(Network%20Settings).md\" data-linktype=\"relative-path\">&amp;lt;mailSettings&amp;gt; Element (Network Settings)</a>. If information is specified using <a class=\"xref\" href=\"system.net.mail.smtpclient\" data-linktype=\"relative-path\">SmtpClient</a> constructors or properties, this information overrides the configuration file settings.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates calling this constructor.  </p>\n<pre><code class=\"lang-cpp\" name=\"NclMailSync#3\">   static void CreateTimeoutTestMessage( String^ server )\n   {\n      String^ to = L&quot;jane@contoso.com&quot;;\n      String^ from = L&quot;ben@contoso.com&quot;;\n      String^ subject = L&quot;Using the new SMTP client.&quot;;\n      String^ body = L&quot;Using this new feature, you can send an e-mail message from an application very easily.&quot;;\n      MailMessage^ message = gcnew MailMessage( from,to,subject,body );\n      SmtpClient^ client = gcnew SmtpClient( server );\n      Console::WriteLine( L&quot;Changing time out from {0} to 100.&quot;, client-&gt;Timeout );\n      client-&gt;Timeout = 100;\n      \n      // Credentials are necessary if the server requires the client \n      // to authenticate before it will send e-mail on the client&#39;s behalf.\n      client-&gt;Credentials = CredentialCache::DefaultNetworkCredentials;\n      client-&gt;Send( message );\n   }\n\n</code></pre><pre><code class=\"lang-cs\" name=\"NclMailSync#3\">\t\tpublic static void CreateTimeoutTestMessage(string server)\n\t\t{\n\t\t\tstring to = &quot;jane@contoso.com&quot;;\n\t\t\tstring from = &quot;ben@contoso.com&quot;;\n\t\t\tstring subject = &quot;Using the new SMTP client.&quot;;\n\t\t\tstring body = @&quot;Using this new feature, you can send an e-mail message from an application very easily.&quot;;\n\t\t\tMailMessage message = new MailMessage(from, to, subject, body);\n\t\t\tSmtpClient client = new SmtpClient(server);\n\t\t\tConsole.WriteLine(&quot;Changing time out from {0} to 100.&quot;, client.Timeout);\n\t\t\tclient.Timeout = 100;\n\t\t\t// Credentials are necessary if the server requires the client \n\t\t\t// to authenticate before it will send e-mail on the client&#39;s behalf.\n\t\t\tclient.Credentials = CredentialCache.DefaultNetworkCredentials;\n\n      try {\n\t\t\t  client.Send(message);\n\t\t\t}  \n\t\t\tcatch (Exception ex) {\n\t\t\t  Console.WriteLine(&quot;Exception caught in CreateTimeoutTestMessage(): {0}&quot;, \n                    ex.ToString() );\t\t\t  \n\t\t  }\n\t\t}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Mail_SmtpClient__ctor_System_String_System_Int32_\">\r\n    \r\n            <a id=\"System_Net_Mail_SmtpClient__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SmtpClient(String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.mail.smtpclient\" data-linktype=\"relative-path\">SmtpClient</a> class that sends e-mail by using the specified SMTP server and port.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public SmtpClient (string host, int port);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>host</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains the name or IP address of the host used for SMTP transactions.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>port</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> greater than zero that contains the port to be used on <code>host</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>port</code> cannot be less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>host</code> and <code>port</code> parameters set the value of the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Host_\" data-linktype=\"relative-path\">Host</a> and <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Port_\" data-linktype=\"relative-path\">Port</a> properties, respectively. If <code>host</code> is <code>null</code> or equal to <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>, <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Host_\" data-linktype=\"relative-path\">Host</a> is initialized using the settings in the application or machine configuration files. If <code>port</code> is zero, <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Port_\" data-linktype=\"relative-path\">Port</a> is initialized using the settings in the application or machine configuration files. The <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Credentials_\" data-linktype=\"relative-path\">Credentials</a> property is initialized using the settings in the application or machine configuration files.  </p>\n<p> For more information about using the application and machine configuration files, see <a href=\"../Topic/%3CmailSettings%3E%20Element%20(Network%20Settings).md\" data-linktype=\"relative-path\">&amp;lt;mailSettings&amp;gt; Element (Network Settings)</a>. If information is specified using <a class=\"xref\" href=\"system.net.mail.smtpclient\" data-linktype=\"relative-path\">SmtpClient</a> constructors or properties, this information overrides the configuration file settings.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates calling this constructor.  </p>\n<pre><code class=\"lang-cpp\" name=\"NclMailSync#1\">   static void CreateTestMessage1( String^ server, int port )\n   {\n      String^ to = L&quot;jane@contoso.com&quot;;\n      String^ from = L&quot;ben@contoso.com&quot;;\n      String^ subject = L&quot;Using the new SMTP client.&quot;;\n      String^ body = L&quot;Using this new feature, you can send an e-mail message from an application very easily.&quot;;\n      MailMessage^ message = gcnew MailMessage( from,to,subject,body );\n      SmtpClient^ client = gcnew SmtpClient( server,port );\n      \n      // Credentials are necessary if the server requires the client \n      // to authenticate before it will send e-mail on the client&#39;s behalf.\n      client-&gt;Credentials = CredentialCache::DefaultNetworkCredentials;\n      \n      //Display the properties on the service point.\n      ServicePoint^ p = client-&gt;ServicePoint;\n      Console::WriteLine( L&quot;Connection lease timeout: {0}&quot;, p-&gt;ConnectionLeaseTimeout );\n      client-&gt;Send( message );\n\t  client-&gt;~SmtpClient();\n   }\n\n</code></pre><pre><code class=\"lang-cs\" name=\"NclMailSync#1\">\t\tpublic static void CreateTestMessage1(string server, int port)\n\t\t{\n\t\t\tstring to = &quot;jane@contoso.com&quot;;\n\t\t\tstring from = &quot;ben@contoso.com&quot;;\n\t\t\tstring subject = &quot;Using the new SMTP client.&quot;;\n\t\t\tstring body = @&quot;Using this new feature, you can send an e-mail message from an application very easily.&quot;;\n\t\t\tMailMessage message = new MailMessage(from, to, subject, body);\n\t\t\tSmtpClient client = new SmtpClient(server, port);\n\t\t\t// Credentials are necessary if the server requires the client \n\t\t\t// to authenticate before it will send e-mail on the client&#39;s behalf.\n\t\t\tclient.Credentials = CredentialCache.DefaultNetworkCredentials;\n\n      try {\n\t\t\t  client.Send(message);\n      }\n\t\t\tcatch (Exception ex) {\n\t\t\t  Console.WriteLine(&quot;Exception caught in CreateTestMessage1(): {0}&quot;, \n                    ex.ToString() );\n      }              \n\t\t}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Mail_SmtpClient_ClientCertificates\">\r\n    \r\n            <a id=\"System_Net_Mail_SmtpClient_ClientCertificates_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ClientCertificates</div>        \r\n          </div>\r\n    \r\n            <p>Specify which certificates should be used to establish the Secure Sockets Layer (SSL) connection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Security.Cryptography.X509Certificates.X509CertificateCollection ClientCertificates { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificatecollection\" data-linktype=\"relative-path\">X509CertificateCollection</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificatecollection\" data-linktype=\"relative-path\">X509CertificateCollection</a>, holding one or more client certificates. The default value is derived from the mail configuration attributes in a configuration file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Client certificates are, by default, optional; however, the server configuration might require that the client present a valid certificate as part of the initial connection negotiation.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The Framework caches SSL sessions as they are created and attempts to reuse a cached session for a new request, if possible. When attempting to reuse an SSL session, the Framework uses the first element of ClientCertificates (if there is one), or tries to reuse an anonymous sessions if ClientCertificates is empty.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example establishes an SSL connection with the SMTP server and uses the connection to send an email.  </p>\n<pre><code class=\"lang-cs\" name=\"NclSSLMailSync#1\">\t\tpublic static void CreateTestMessage(string server)\n\t\t{\n\t\t\tstring to = &quot;jane@contoso.com&quot;;\n\t\t\tstring from = &quot;ben@contoso.com&quot;;\n\t\t\tMailMessage message = new MailMessage(from, to);\n\t\t\tmessage.Subject = &quot;Using the new SMTP client.&quot;;\n\t\t\tmessage.Body = @&quot;Using this new feature, you can send an e-mail message from an application very easily.&quot;;\n\t\t\tSmtpClient client = new SmtpClient(server);\n\t\t\t// Credentials are necessary if the server requires the client \n\t\t\t// to authenticate before it will send e-mail on the client&#39;s behalf.\n\t\t\tclient.UseDefaultCredentials = true;\n                        client.EnableSsl = true;\n\t\t\tclient.Send(message);\n\t\t}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Mail_SmtpClient_Credentials\">\r\n    \r\n            <a id=\"System_Net_Mail_SmtpClient_Credentials_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Credentials</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the credentials used to authenticate the sender.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Net.ICredentialsByHost Credentials { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.icredentialsbyhost\" data-linktype=\"relative-path\">ICredentialsByHost</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.net.icredentialsbyhost\" data-linktype=\"relative-path\">ICredentialsByHost</a> that represents the credentials to use for authentication; or <code>null</code> if no credentials have been specified.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>You cannot change the value of this property when an email is being sent.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Some SMTP servers require that the client be authenticated before the server will send e-mail on its behalf. To use your default network credentials, you can set the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_UseDefaultCredentials_\" data-linktype=\"relative-path\">UseDefaultCredentials</a> to <code>true</code> instead of setting this property. If the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_UseDefaultCredentials_\" data-linktype=\"relative-path\">UseDefaultCredentials</a> property is set to <code>false,</code> then the value set in the Credentials property will be used for the credentials when connecting to the server. If the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_UseDefaultCredentials_\" data-linktype=\"relative-path\">UseDefaultCredentials</a> property is set to <code>false</code> and the Credentials property has not been set, then mail is sent to the server anonymously.  </p>\n<p> Credentials information can also be specified using the application and machine configuration files. For more information, see <a href=\"../Topic/%3CmailSettings%3E%20Element%20(Network%20Settings).md\" data-linktype=\"relative-path\">&amp;lt;mailSettings&amp;gt; Element (Network Settings)</a>. If information is specified using the Credentials property, this information overrides the configuration file settings.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> If you provide credentials for basic authentication, they are sent to the server in clear text. This can present a security issue because your credentials can be seen, and then used by others.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates setting the credentials used to send an e-mail.  </p>\n<pre><code class=\"lang-cpp\" name=\"NclMailSync#1\">   static void CreateTestMessage1( String^ server, int port )\n   {\n      String^ to = L&quot;jane@contoso.com&quot;;\n      String^ from = L&quot;ben@contoso.com&quot;;\n      String^ subject = L&quot;Using the new SMTP client.&quot;;\n      String^ body = L&quot;Using this new feature, you can send an e-mail message from an application very easily.&quot;;\n      MailMessage^ message = gcnew MailMessage( from,to,subject,body );\n      SmtpClient^ client = gcnew SmtpClient( server,port );\n      \n      // Credentials are necessary if the server requires the client \n      // to authenticate before it will send e-mail on the client&#39;s behalf.\n      client-&gt;Credentials = CredentialCache::DefaultNetworkCredentials;\n      \n      //Display the properties on the service point.\n      ServicePoint^ p = client-&gt;ServicePoint;\n      Console::WriteLine( L&quot;Connection lease timeout: {0}&quot;, p-&gt;ConnectionLeaseTimeout );\n      client-&gt;Send( message );\n\t  client-&gt;~SmtpClient();\n   }\n\n</code></pre><pre><code class=\"lang-cs\" name=\"NclMailSync#1\">\t\tpublic static void CreateTestMessage1(string server, int port)\n\t\t{\n\t\t\tstring to = &quot;jane@contoso.com&quot;;\n\t\t\tstring from = &quot;ben@contoso.com&quot;;\n\t\t\tstring subject = &quot;Using the new SMTP client.&quot;;\n\t\t\tstring body = @&quot;Using this new feature, you can send an e-mail message from an application very easily.&quot;;\n\t\t\tMailMessage message = new MailMessage(from, to, subject, body);\n\t\t\tSmtpClient client = new SmtpClient(server, port);\n\t\t\t// Credentials are necessary if the server requires the client \n\t\t\t// to authenticate before it will send e-mail on the client&#39;s behalf.\n\t\t\tclient.Credentials = CredentialCache.DefaultNetworkCredentials;\n\n      try {\n\t\t\t  client.Send(message);\n      }\n\t\t\tcatch (Exception ex) {\n\t\t\t  Console.WriteLine(&quot;Exception caught in CreateTestMessage1(): {0}&quot;, \n                    ex.ToString() );\n      }              \n\t\t}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Mail_SmtpClient_DeliveryFormat\">\r\n    \r\n            <a id=\"System_Net_Mail_SmtpClient_DeliveryFormat_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DeliveryFormat</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the delivery format used by <a class=\"xref\" href=\"system.net.mail.smtpclient\" data-linktype=\"relative-path\">SmtpClient</a> to send e-mail.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Net.Mail.SmtpDeliveryFormat DeliveryFormat { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.mail.smtpdeliveryformat\" data-linktype=\"relative-path\">SmtpDeliveryFormat</a></div>\r\n                  </div>\r\n                  <p>Returns <a class=\"xref\" href=\"system.net.mail.smtpdeliveryformat\" data-linktype=\"relative-path\">SmtpDeliveryFormat</a>.  </p>\n<p> The delivery format used by <a class=\"xref\" href=\"system.net.mail.smtpclient\" data-linktype=\"relative-path\">SmtpClient</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Mail_SmtpClient_DeliveryMethod\">\r\n    \r\n            <a id=\"System_Net_Mail_SmtpClient_DeliveryMethod_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DeliveryMethod</div>        \r\n          </div>\r\n    \r\n            <p>Specifies how outgoing email messages will be handled.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Net.Mail.SmtpDeliveryMethod DeliveryMethod { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.mail.smtpdeliverymethod\" data-linktype=\"relative-path\">SmtpDeliveryMethod</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.net.mail.smtpdeliverymethod\" data-linktype=\"relative-path\">SmtpDeliveryMethod</a> that indicates how email messages are delivered.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Delivery methods include:  </p>\n<ul>\n<li><p>An SMTP server.  </p>\n</li>\n<li><p>Moving the email into the pickup directory for IIS, which then delivers the message.  </p>\n</li>\n<li><p>Moving the email to a directory specified by <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_PickupDirectoryLocation_\" data-linktype=\"relative-path\">PickupDirectoryLocation</a> for later delivery by another application.  </p>\n<p>The default value for this property can also be set in a machine or application configuration file. Any changes made to the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_PickupDirectoryLocation_\" data-linktype=\"relative-path\">PickupDirectoryLocation</a> property override the configuration file settings.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Mail_SmtpClient_EnableSsl\">\r\n    \r\n            <a id=\"System_Net_Mail_SmtpClient_EnableSsl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EnableSsl</div>        \r\n          </div>\r\n    \r\n            <p>Specify whether the <a class=\"xref\" href=\"system.net.mail.smtpclient\" data-linktype=\"relative-path\">SmtpClient</a> uses Secure Sockets Layer (SSL) to encrypt the connection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool EnableSsl { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.net.mail.smtpclient\" data-linktype=\"relative-path\">SmtpClient</a> uses SSL; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The EnableSsl property specifies whether SSL is used to access the specified SMTP mail server.  </p>\n<p> The default value for this property can also be set in a machine or application configuration file. Any changes made to the EnableSsl property override the configuration file settings.  </p>\n<p> The <a class=\"xref\" href=\"system.net.mail.smtpclient\" data-linktype=\"relative-path\">SmtpClient</a> class only supports the SMTP Service Extension for Secure SMTP over Transport Layer Security as defined in RFC 3207. In this mode, the SMTP session begins on an unencrypted channel, then a STARTTLS command is issued by the client to the server to switch to secure communication using SSL. See RFC 3207 published by the Internet Engineering Task Force (IETF) for more information.  </p>\n<p> An alternate connection method is where an SSL session is established up front before any protocol commands are sent. This connection method is sometimes called SMTP/SSL, SMTP over SSL, or SMTPS and by default uses port 465. This alternate connection method using SSL is not currently supported.  </p>\n<p> You can use <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_ClientCertificates_\" data-linktype=\"relative-path\">ClientCertificates</a> to specify which client certificates should be used to establish the SSL connection. The <a class=\"xref\" href=\"system.net.servicepointmanager#System_Net_ServicePointManager_ServerCertificateValidationCallback_\" data-linktype=\"relative-path\">ServerCertificateValidationCallback</a> allows you to reject the certificate provided by the SMTP server. The <a class=\"xref\" href=\"system.net.servicepointmanager#System_Net_ServicePointManager_SecurityProtocol_\" data-linktype=\"relative-path\">SecurityProtocol</a> property allows you to specify the version of the SSL protocol to use.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If the EnableSsl property is set to <code>true</code>, and the SMTP mail server does not advertise STARTTLS in the response to the EHLO command, then a call to the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Send_\" data-linktype=\"relative-path\">Send</a> or <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_SendAsync_\" data-linktype=\"relative-path\">SendAsync</a> methods will throw an <a class=\"xref\" href=\"system.net.mail.smtpexception\" data-linktype=\"relative-path\">SmtpException</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example establishes an SSL connection with the SMTP server and uses the connection to send an email.  </p>\n<pre><code class=\"lang-cs\" name=\"NclSSLMailSync#1\">\t\tpublic static void CreateTestMessage(string server)\n\t\t{\n\t\t\tstring to = &quot;jane@contoso.com&quot;;\n\t\t\tstring from = &quot;ben@contoso.com&quot;;\n\t\t\tMailMessage message = new MailMessage(from, to);\n\t\t\tmessage.Subject = &quot;Using the new SMTP client.&quot;;\n\t\t\tmessage.Body = @&quot;Using this new feature, you can send an e-mail message from an application very easily.&quot;;\n\t\t\tSmtpClient client = new SmtpClient(server);\n\t\t\t// Credentials are necessary if the server requires the client \n\t\t\t// to authenticate before it will send e-mail on the client&#39;s behalf.\n\t\t\tclient.UseDefaultCredentials = true;\n                        client.EnableSsl = true;\n\t\t\tclient.Send(message);\n\t\t}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Mail_SmtpClient_Host\">\r\n    \r\n            <a id=\"System_Net_Mail_SmtpClient_Host_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Host</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the name or IP address of the host used for SMTP transactions.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Host { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains the name or IP address of the computer to use for SMTP transactions.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The value specified for a set operation is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The value specified for a set operation is equal to <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> (&quot;&quot;).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>You cannot change the value of this property when an email is being sent.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of the Host property can also be set using constructors or the application or machine configuration file. For more information, see <a href=\"../Topic/%3CmailSettings%3E%20Element%20(Network%20Settings).md\" data-linktype=\"relative-path\">&amp;lt;mailSettings&amp;gt; Element (Network Settings)</a>.  </p>\n<p> If information is specified using this property, this information overrides the configuration file settings.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates sending an e-mail message by using the host and port specified in an application configuration file.  </p>\n<pre><code class=\"lang-cpp\" name=\"NclMailSync#7\">   static void CreateTestMessage4( String^ server )\n   {\n      MailAddress^ from = gcnew MailAddress( L&quot;ben@contoso.com&quot; );\n      MailAddress^ to = gcnew MailAddress( L&quot;Jane@contoso.com&quot; );\n      MailMessage^ message = gcnew MailMessage( from,to );\n      message-&gt;Subject = L&quot;Using the SmtpClient class.&quot;;\n      message-&gt;Body = L&quot;Using this feature, you can send an e-mail message from an application very easily.&quot;;\n      SmtpClient^ client = gcnew SmtpClient( server );\n      Console::WriteLine( L&quot;Sending an e-mail message to {0} by using SMTP host {1} port {2}.&quot;, to, client-&gt;Host, client-&gt;Port );\n      client-&gt;Send( message );\n      client-&gt;~SmtpClient();\n   }\n\n</code></pre><pre><code class=\"lang-cs\" name=\"NclMailSync#7\">\t\tpublic static void CreateTestMessage4(string server)\n\t\t{\n\t\t\tMailAddress from = new MailAddress(&quot;ben@contoso.com&quot;);\n\t\t\tMailAddress to = new MailAddress(&quot;Jane@contoso.com&quot;);\n\t\t\tMailMessage message = new MailMessage(from, to);\n\t\t\tmessage.Subject = &quot;Using the SmtpClient class.&quot;;\n\t\t\tmessage.Body = @&quot;Using this feature, you can send an e-mail message from an application very easily.&quot;;\n\t\t\tSmtpClient client = new SmtpClient(server);\n\t\t\tConsole.WriteLine(&quot;Sending an e-mail message to {0} by using SMTP host {1} port {2}.&quot;,\n\t\t\t\t to.ToString(), client.Host, client.Port);\n\n      try {\n\t\t\t  client.Send(message);\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t  Console.WriteLine(&quot;Exception caught in CreateTestMessage4(): {0}&quot;, \n                    ex.ToString() );\t\t\t  \n\t\t  }\n\t\t}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Mail_SmtpClient_PickupDirectoryLocation\">\r\n    \r\n            <a id=\"System_Net_Mail_SmtpClient_PickupDirectoryLocation_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PickupDirectoryLocation</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the folder where applications save mail messages to be processed by the local SMTP server.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string PickupDirectoryLocation { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that specifies the pickup directory for mail messages.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Mail messages in the pickup directory are automatically sent by a local SMTP server (if present), such as IIS.  </p>\n<p> The default value for this property can also be set in a machine or application configuration file. Any changes made to the PickupDirectoryLocation property override the configuration file settings.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Mail_SmtpClient_Port\">\r\n    \r\n            <a id=\"System_Net_Mail_SmtpClient_Port_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Port</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the port used for SMTP transactions.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Port { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> that contains the port number on the SMTP host. The default value is 25.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The value specified for a set operation is less than or equal to zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>You cannot change the value of this property when an email is being sent.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of the Port property can also be set using constructors or the application or machine configuration file. For more information about using configuration files, see <a href=\"../Topic/%3CmailSettings%3E%20Element%20(Network%20Settings).md\" data-linktype=\"relative-path\">&amp;lt;mailSettings&amp;gt; Element (Network Settings)</a>. If information is specified using this property, this information overrides the configuration file settings.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates sending an e-mail message by using the host and port specified in an application configuration file.  </p>\n<pre><code class=\"lang-cpp\" name=\"NclMailSync#7\">   static void CreateTestMessage4( String^ server )\n   {\n      MailAddress^ from = gcnew MailAddress( L&quot;ben@contoso.com&quot; );\n      MailAddress^ to = gcnew MailAddress( L&quot;Jane@contoso.com&quot; );\n      MailMessage^ message = gcnew MailMessage( from,to );\n      message-&gt;Subject = L&quot;Using the SmtpClient class.&quot;;\n      message-&gt;Body = L&quot;Using this feature, you can send an e-mail message from an application very easily.&quot;;\n      SmtpClient^ client = gcnew SmtpClient( server );\n      Console::WriteLine( L&quot;Sending an e-mail message to {0} by using SMTP host {1} port {2}.&quot;, to, client-&gt;Host, client-&gt;Port );\n      client-&gt;Send( message );\n      client-&gt;~SmtpClient();\n   }\n\n</code></pre><pre><code class=\"lang-cs\" name=\"NclMailSync#7\">\t\tpublic static void CreateTestMessage4(string server)\n\t\t{\n\t\t\tMailAddress from = new MailAddress(&quot;ben@contoso.com&quot;);\n\t\t\tMailAddress to = new MailAddress(&quot;Jane@contoso.com&quot;);\n\t\t\tMailMessage message = new MailMessage(from, to);\n\t\t\tmessage.Subject = &quot;Using the SmtpClient class.&quot;;\n\t\t\tmessage.Body = @&quot;Using this feature, you can send an e-mail message from an application very easily.&quot;;\n\t\t\tSmtpClient client = new SmtpClient(server);\n\t\t\tConsole.WriteLine(&quot;Sending an e-mail message to {0} by using SMTP host {1} port {2}.&quot;,\n\t\t\t\t to.ToString(), client.Host, client.Port);\n\n      try {\n\t\t\t  client.Send(message);\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t  Console.WriteLine(&quot;Exception caught in CreateTestMessage4(): {0}&quot;, \n                    ex.ToString() );\t\t\t  \n\t\t  }\n\t\t}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Mail_SmtpClient_ServicePoint\">\r\n    \r\n            <a id=\"System_Net_Mail_SmtpClient_ServicePoint_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ServicePoint</div>        \r\n          </div>\r\n    \r\n            <p>Gets the network connection used to transmit the e-mail message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Net.ServicePoint ServicePoint { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a> that connects to the <span class=\"xref\">stem.Net.Mail.SmtpClient.Host*</span> property used for SMTP.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><span class=\"xref\">stem.Net.Mail.SmtpClient.Host*</span> is <code>null</code> or the empty string (&quot;&quot;).  </p>\n<p> -or-  </p>\n<p> <span class=\"xref\">stem.Net.Mail.SmtpClient.Port*</span> is zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The settings for the ServicePoint property are created using defaults specified in the application or machine configuration files and the <a class=\"xref\" href=\"system.net.servicepointmanager\" data-linktype=\"relative-path\">ServicePointManager</a> class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates accessing the ServicePoint property.  </p>\n<pre><code class=\"lang-cpp\" name=\"NclMailSync#1\">   static void CreateTestMessage1( String^ server, int port )\n   {\n      String^ to = L&quot;jane@contoso.com&quot;;\n      String^ from = L&quot;ben@contoso.com&quot;;\n      String^ subject = L&quot;Using the new SMTP client.&quot;;\n      String^ body = L&quot;Using this new feature, you can send an e-mail message from an application very easily.&quot;;\n      MailMessage^ message = gcnew MailMessage( from,to,subject,body );\n      SmtpClient^ client = gcnew SmtpClient( server,port );\n      \n      // Credentials are necessary if the server requires the client \n      // to authenticate before it will send e-mail on the client&#39;s behalf.\n      client-&gt;Credentials = CredentialCache::DefaultNetworkCredentials;\n      \n      //Display the properties on the service point.\n      ServicePoint^ p = client-&gt;ServicePoint;\n      Console::WriteLine( L&quot;Connection lease timeout: {0}&quot;, p-&gt;ConnectionLeaseTimeout );\n      client-&gt;Send( message );\n\t  client-&gt;~SmtpClient();\n   }\n\n</code></pre><pre><code class=\"lang-cs\" name=\"NclMailSync#1\">\t\tpublic static void CreateTestMessage1(string server, int port)\n\t\t{\n\t\t\tstring to = &quot;jane@contoso.com&quot;;\n\t\t\tstring from = &quot;ben@contoso.com&quot;;\n\t\t\tstring subject = &quot;Using the new SMTP client.&quot;;\n\t\t\tstring body = @&quot;Using this new feature, you can send an e-mail message from an application very easily.&quot;;\n\t\t\tMailMessage message = new MailMessage(from, to, subject, body);\n\t\t\tSmtpClient client = new SmtpClient(server, port);\n\t\t\t// Credentials are necessary if the server requires the client \n\t\t\t// to authenticate before it will send e-mail on the client&#39;s behalf.\n\t\t\tclient.Credentials = CredentialCache.DefaultNetworkCredentials;\n\n      try {\n\t\t\t  client.Send(message);\n      }\n\t\t\tcatch (Exception ex) {\n\t\t\t  Console.WriteLine(&quot;Exception caught in CreateTestMessage1(): {0}&quot;, \n                    ex.ToString() );\n      }              \n\t\t}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Mail_SmtpClient_TargetName\">\r\n    \r\n            <a id=\"System_Net_Mail_SmtpClient_TargetName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TargetName</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the Service Provider Name (SPN) to use for authentication when using extended protection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string TargetName { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that specifies the SPN to use for extended protection. The default value for this SPN is of the form &quot;SMTPSVC/<host>&quot; where <host> is the hostname of the SMTP mail server.<p>\n</host></host>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The TargetName property is used with integrated Windows authentication when an application is using extended protection. The <a class=\"xref\" href=\"system.net.mail.smtpclient\" data-linktype=\"relative-path\">SmtpClient</a> can then provide extended protection to ensure that credential challenge responses contain service specific information (a SPN) and, if necessary, channel specific information (a channel binding token or CBT). With this information in the credential exchanges, services are able to better protect against malicious use of credential challenge responses that might have been improperly obtained.  </p>\n<p> The default value for this property can also be set in a machine or application configuration file. Any changes made to the TargetName property override the configuration file settings.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Mail_SmtpClient_Timeout\">\r\n    \r\n            <a id=\"System_Net_Mail_SmtpClient_Timeout_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Timeout</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that specifies the amount of time after which a synchronous <span class=\"xref\">stem.Net.Mail.SmtpClient.Send*</span> call times out.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Timeout { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> that specifies the time-out value in milliseconds. The default value is 100,000 (100 seconds).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The value specified for a set operation was less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>You cannot change the value of this property when an email is being sent.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default, calls to the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Send_\" data-linktype=\"relative-path\">Send</a> method block until the operation completes. If you set the Timeout property to a positive value, and a <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Send_\" data-linktype=\"relative-path\">Send</a> operation cannot complete in the allotted time, the <a class=\"xref\" href=\"system.net.mail.smtpclient\" data-linktype=\"relative-path\">SmtpClient</a> class throws an <a class=\"xref\" href=\"system.net.mail.smtpexception\" data-linktype=\"relative-path\">SmtpException</a> exception.  </p>\n<p> To send a message and continue executing in the application thread, use the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_SendAsync_\" data-linktype=\"relative-path\">SendAsync</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates getting and setting the time-out value.  </p>\n<pre><code class=\"lang-cpp\" name=\"NclMailSync#3\">   static void CreateTimeoutTestMessage( String^ server )\n   {\n      String^ to = L&quot;jane@contoso.com&quot;;\n      String^ from = L&quot;ben@contoso.com&quot;;\n      String^ subject = L&quot;Using the new SMTP client.&quot;;\n      String^ body = L&quot;Using this new feature, you can send an e-mail message from an application very easily.&quot;;\n      MailMessage^ message = gcnew MailMessage( from,to,subject,body );\n      SmtpClient^ client = gcnew SmtpClient( server );\n      Console::WriteLine( L&quot;Changing time out from {0} to 100.&quot;, client-&gt;Timeout );\n      client-&gt;Timeout = 100;\n      \n      // Credentials are necessary if the server requires the client \n      // to authenticate before it will send e-mail on the client&#39;s behalf.\n      client-&gt;Credentials = CredentialCache::DefaultNetworkCredentials;\n      client-&gt;Send( message );\n   }\n\n</code></pre><pre><code class=\"lang-cs\" name=\"NclMailSync#3\">\t\tpublic static void CreateTimeoutTestMessage(string server)\n\t\t{\n\t\t\tstring to = &quot;jane@contoso.com&quot;;\n\t\t\tstring from = &quot;ben@contoso.com&quot;;\n\t\t\tstring subject = &quot;Using the new SMTP client.&quot;;\n\t\t\tstring body = @&quot;Using this new feature, you can send an e-mail message from an application very easily.&quot;;\n\t\t\tMailMessage message = new MailMessage(from, to, subject, body);\n\t\t\tSmtpClient client = new SmtpClient(server);\n\t\t\tConsole.WriteLine(&quot;Changing time out from {0} to 100.&quot;, client.Timeout);\n\t\t\tclient.Timeout = 100;\n\t\t\t// Credentials are necessary if the server requires the client \n\t\t\t// to authenticate before it will send e-mail on the client&#39;s behalf.\n\t\t\tclient.Credentials = CredentialCache.DefaultNetworkCredentials;\n\n      try {\n\t\t\t  client.Send(message);\n\t\t\t}  \n\t\t\tcatch (Exception ex) {\n\t\t\t  Console.WriteLine(&quot;Exception caught in CreateTimeoutTestMessage(): {0}&quot;, \n                    ex.ToString() );\t\t\t  \n\t\t  }\n\t\t}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Mail_SmtpClient_UseDefaultCredentials\">\r\n    \r\n            <a id=\"System_Net_Mail_SmtpClient_UseDefaultCredentials_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UseDefaultCredentials</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that controls whether the <span class=\"xref\">stem.Net.CredentialCache.DefaultCredentials*</span> are sent with requests.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool UseDefaultCredentials { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the default credentials are used; otherwise <code>false</code>. The default value is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>You cannot change the value of this property when an e-mail is being sent.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Some SMTP servers require that the client be authenticated before the server sends e-mail on its behalf. Set this property to <code>true</code> when this <a class=\"xref\" href=\"system.net.mail.smtpclient\" data-linktype=\"relative-path\">SmtpClient</a> object should, if requested by the server, authenticate using the default credentials of the currently logged on user. For client applications, this is the desired behavior in most scenarios.  </p>\n<p> Credentials information can also be specified using the application and machine configuration files. For more information, see <a href=\"../Topic/%3CmailSettings%3E%20Element%20(Network%20Settings).md\" data-linktype=\"relative-path\">&amp;lt;mailSettings&amp;gt; Element (Network Settings)</a>.  </p>\n<p> If the UseDefaultCredentials property is set to <code>false,</code> then the value set in the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Credentials_\" data-linktype=\"relative-path\">Credentials</a> property will be used for the credentials when connecting to the server. If the UseDefaultCredentials property is set to <code>false</code> and the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Credentials_\" data-linktype=\"relative-path\">Credentials</a> property has not been set, then mail is sent to the server anonymously.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> If you provide credentials for basic authentication, they are sent to the server in clear text. This can present a security issue because your credentials can be seen, and then used by others.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates using this property.  </p>\n<pre><code class=\"lang-cpp\" name=\"NclMailSync#2\">   static void CreateTestMessage2( String^ server )\n   {\n      String^ to = L&quot;jane@contoso.com&quot;;\n      String^ from = L&quot;ben@contoso.com&quot;;\n      MailMessage^ message = gcnew MailMessage( from,to );\n      message-&gt;Subject = L&quot;Using the new SMTP client.&quot;;\n      message-&gt;Body = L&quot;Using this new feature, you can send an e-mail message from an application very easily.&quot;;\n      SmtpClient^ client = gcnew SmtpClient( server );\n      \n      // Credentials are necessary if the server requires the client \n      // to authenticate before it will send e-mail on the client&#39;s behalf.\n      client-&gt;UseDefaultCredentials = true;\n      client-&gt;Send( message );\n\t  client-&gt;~SmtpClient();\n   }\n\n</code></pre><pre><code class=\"lang-cs\" name=\"NclMailSync#2\">\t\tpublic static void CreateTestMessage2(string server)\n\t\t{\n\t\t\tstring to = &quot;jane@contoso.com&quot;;\n\t\t\tstring from = &quot;ben@contoso.com&quot;;\n\t\t\tMailMessage message = new MailMessage(from, to);\n\t\t\tmessage.Subject = &quot;Using the new SMTP client.&quot;;\n\t\t\tmessage.Body = @&quot;Using this new feature, you can send an e-mail message from an application very easily.&quot;;\n\t\t\tSmtpClient client = new SmtpClient(server);\n\t\t\t// Credentials are necessary if the server requires the client \n\t\t\t// to authenticate before it will send e-mail on the client&#39;s behalf.\n\t\t\tclient.UseDefaultCredentials = true;\n\n      try {\n\t\t\t  client.Send(message);\n\t\t\t}  \n\t\t\tcatch (Exception ex) {\n\t\t\t  Console.WriteLine(&quot;Exception caught in CreateTestMessage2(): {0}&quot;, \n                    ex.ToString() );\t\t\t  \n      }              \n\t\t}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Mail_SmtpClient_Dispose\">\r\n    \r\n            <a id=\"System_Net_Mail_SmtpClient_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dispose()</div>        \r\n          </div>\r\n    \r\n            <p>Sends a QUIT message to the SMTP server, gracefully ends the TCP connection, and releases all resources used by the current instance of the <a class=\"xref\" href=\"system.net.mail.smtpclient\" data-linktype=\"relative-path\">SmtpClient</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Dispose ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The connection established by the current instance of the <a class=\"xref\" href=\"system.net.mail.smtpclient\" data-linktype=\"relative-path\">SmtpClient</a> class to the SMTP server may be re-used if an application wishes to send multiple messages to the same SMTP server. This is particularly useful when authentication or encryption are used establish a connection to the SMTP server. The process of authenticating and establishing a TLS session can be expensive operations. A requirement to re-establish a connection for each message when sending a large quantity of email to the same SMTP server could have a significant impact on performance. There are a number of high-volume email applications that send email status updates, newsletter distributions, or email alerts. Also many email client applications support an off-line mode where users can compose many email messages that are sent later when a connection to the SMTP server is established. It is typical for an email client to send all SMTP messages to a specific SMTP server (provided by the Internet service provider) that then forwards this email to other SMTP servers.  </p>\n<p> The <a class=\"xref\" href=\"system.net.mail.smtpclient\" data-linktype=\"relative-path\">SmtpClient</a> class implementation pools SMTP connections so that it can avoid the overhead of re-establishing a connection for every message to the same server. An application may re-use the same <a class=\"xref\" href=\"system.net.mail.smtpclient\" data-linktype=\"relative-path\">SmtpClient</a> object to send many different emails to the same SMTP server and to many different SMTP servers. As a result, there is no way to determine when an application is finished using the <a class=\"xref\" href=\"system.net.mail.smtpclient\" data-linktype=\"relative-path\">SmtpClient</a> object and it should be cleaned up.  </p>\n<p> When an SMTP session is finished and the client wishes to terminate the connection, it must send a QUIT message to the server to indicate that it has no more messages to send. This allows the server to free up resources associated with the connection from the client and process the messages which were sent by the client.  </p>\n<p> Calling the Dispose method on a <a class=\"xref\" href=\"system.net.mail.smtpclient\" data-linktype=\"relative-path\">SmtpClient</a> object that is executing an asynchronous <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_SendAsync_\" data-linktype=\"relative-path\">SendAsync</a> operation will cancel the send operation as though the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_SendAsyncCancel_\" data-linktype=\"relative-path\">SendAsyncCancel</a> method had been called.  </p>\n<p> The <a class=\"xref\" href=\"system.net.mail.smtpclient\" data-linktype=\"relative-path\">SmtpClient</a> class has no <code>Finalize</code> method. So an application must call <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Dispose_\" data-linktype=\"relative-path\">Dispose</a> to explicitly free up resources.  </p>\n<p> The Dispose method iterates through all established connections to the SMTP server specified in the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Host_\" data-linktype=\"relative-path\">Host</a> property and sends a QUIT message followed by gracefully ending the TCP connection. The Dispose method also releases the unmanaged resources used by the underlying <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a>.  </p>\n<p> Call <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Dispose_\" data-linktype=\"relative-path\">Dispose</a> when you are finished using the <a class=\"xref\" href=\"system.net.mail.smtpclient\" data-linktype=\"relative-path\">SmtpClient</a>. The <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method leaves the <a class=\"xref\" href=\"system.net.mail.smtpclient\" data-linktype=\"relative-path\">SmtpClient</a> in an unusable state. After calling <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Dispose_\" data-linktype=\"relative-path\">Dispose</a>, you must release all references to the <a class=\"xref\" href=\"system.net.mail.smtpclient\" data-linktype=\"relative-path\">SmtpClient</a> so the garbage collector can reclaim the memory that the <a class=\"xref\" href=\"system.net.mail.smtpclient\" data-linktype=\"relative-path\">SmtpClient</a> was occupying.  </p>\n<p> For more information, see <a href=\"../Topic/Cleaning%20Up%20Unmanaged%20Resources.md\" data-linktype=\"relative-path\">Cleaning Up Unmanaged Resources</a> and <a href=\"../Topic/Implementing%20a%20Dispose%20Method.md\" data-linktype=\"relative-path\">Implementing a Dispose Method</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Always call <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Dispose_\" data-linktype=\"relative-path\">Dispose</a> before you release your last reference to the <a class=\"xref\" href=\"system.net.mail.smtpclient\" data-linktype=\"relative-path\">SmtpClient</a>. Otherwise, the resources it is using will not be freed so the garbage collector can reclaim the memory.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Mail_SmtpClient_Dispose_System_Boolean_\">\r\n    \r\n            <a id=\"System_Net_Mail_SmtpClient_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dispose(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Sends a QUIT message to the SMTP server, gracefully ends the TCP connection, releases all resources used by the current instance of the <a class=\"xref\" href=\"system.net.mail.smtpclient\" data-linktype=\"relative-path\">SmtpClient</a> class, and optionally disposes of the managed resources.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void Dispose (bool disposing);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>disposing</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to release both managed and unmanaged resources; <code>false</code> to releases only unmanaged resources.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The connection established by the current instance of the <a class=\"xref\" href=\"system.net.mail.smtpclient\" data-linktype=\"relative-path\">SmtpClient</a> class to the SMTP server may be re-used if an application wishes to send multiple messages to the same SMTP server. This is particularly useful when authentication or encryption are used establish a connection to the SMTP server. The process of authenticating and establishing a TLS session can be expensive operations. A requirement to re-establish a connection for each message when sending a large quantity of email to the same SMTP server could have a significant impact on performance. There are a number of high-volume email applications that send email status updates, newsletter distributions, or email alerts. Also many email client applications support an off-line mode where users can compose many email messages that are sent later when a connection to the SMTP server is established. It is typical for an email client to send all SMTP messages to a specific SMTP server (provided by the Internet service provider) that then forwards this email to other SMTP servers.  </p>\n<p> The <a class=\"xref\" href=\"system.net.mail.smtpclient\" data-linktype=\"relative-path\">SmtpClient</a> class implementation pools SMTP connections so that it can avoid the overhead of re-establishing a connection for every message to the same server. An application may re-use the same <a class=\"xref\" href=\"system.net.mail.smtpclient\" data-linktype=\"relative-path\">SmtpClient</a> object to send many different emails to the same SMTP server and to many different SMTP servers. As a result, there is no way to determine when an application is finished using the <a class=\"xref\" href=\"system.net.mail.smtpclient\" data-linktype=\"relative-path\">SmtpClient</a> object and it should be cleaned up.  </p>\n<p> When an SMTP session is finished and the client wishes to terminate the connection, it must send a QUIT message to the server to indicate that it has no more messages to send. This allows the server to free up resources associated with the connection from the client and process the messages which were sent by the client.  </p>\n<p> Calling the Dispose method on a <a class=\"xref\" href=\"system.net.mail.smtpclient\" data-linktype=\"relative-path\">SmtpClient</a> object that is executing an asynchronous <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_SendAsync_\" data-linktype=\"relative-path\">SendAsync</a> operation will cancel the send operation as though the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_SendAsyncCancel_\" data-linktype=\"relative-path\">SendAsyncCancel</a> method had been called.  </p>\n<p> The <a class=\"xref\" href=\"system.net.mail.smtpclient\" data-linktype=\"relative-path\">SmtpClient</a> class has no <code>Finalize</code> method. So an application must call <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Dispose_\" data-linktype=\"relative-path\">Dispose</a> to explicitly free up resources.  </p>\n<p> The Dispose method iterates through all established connections to the SMTP server specified in the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Host_\" data-linktype=\"relative-path\">Host</a> property and sends a QUIT message followed by gracefully ending the TCP connection. The Dispose method also releases the unmanaged resources used by the <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> and optionally disposes of the managed resources.  </p>\n<p> Call <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Dispose_\" data-linktype=\"relative-path\">Dispose</a> when you are finished using the <a class=\"xref\" href=\"system.net.mail.smtpclient\" data-linktype=\"relative-path\">SmtpClient</a>. The <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method leaves the <a class=\"xref\" href=\"system.net.mail.smtpclient\" data-linktype=\"relative-path\">SmtpClient</a> in an unusable state. After calling <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Dispose_\" data-linktype=\"relative-path\">Dispose</a>, you must release all references to the <a class=\"xref\" href=\"system.net.mail.smtpclient\" data-linktype=\"relative-path\">SmtpClient</a> so the garbage collector can reclaim the memory that the <a class=\"xref\" href=\"system.net.mail.smtpclient\" data-linktype=\"relative-path\">SmtpClient</a> was occupying.  </p>\n<p> For more information, see <a href=\"../Topic/Cleaning%20Up%20Unmanaged%20Resources.md\" data-linktype=\"relative-path\">Cleaning Up Unmanaged Resources</a> and <a href=\"../Topic/Implementing%20a%20Dispose%20Method.md\" data-linktype=\"relative-path\">Implementing a Dispose Method</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Always call <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Dispose_\" data-linktype=\"relative-path\">Dispose</a> before you release your last reference to the <a class=\"xref\" href=\"system.net.mail.smtpclient\" data-linktype=\"relative-path\">SmtpClient</a>. Otherwise, the resources it is using will not be freed so the garbage collector can reclaim the memory.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Mail_SmtpClient_OnSendCompleted_System_ComponentModel_AsyncCompletedEventArgs_\">\r\n    \r\n            <a id=\"System_Net_Mail_SmtpClient_OnSendCompleted_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnSendCompleted(AsyncCompletedEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_SendCompleted\" data-linktype=\"relative-path\">SendCompleted</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected void OnSendCompleted (System.ComponentModel.AsyncCompletedEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs\" data-linktype=\"relative-path\">AsyncCompletedEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs\" data-linktype=\"relative-path\">AsyncCompletedEventArgs</a> that contains event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Classes that inherit from the <a class=\"xref\" href=\"system.net.mail.smtpclient\" data-linktype=\"relative-path\">SmtpClient</a> class can override the OnSendCompleted method to perform additional tasks when the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_SendCompleted\" data-linktype=\"relative-path\">SendCompleted</a> event occurs.  </p>\n<p> OnSendCompleted also allows derived classes to handle <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_SendCompleted\" data-linktype=\"relative-path\">SendCompleted</a> without attaching a delegate. This is the preferred technique for handling <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_SendCompleted\" data-linktype=\"relative-path\">SendCompleted</a> in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Mail_SmtpClient_Send_System_Net_Mail_MailMessage_\">\r\n    \r\n            <a id=\"System_Net_Mail_SmtpClient_Send_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Send(MailMessage)</div>        \r\n          </div>\r\n    \r\n            <p>Sends the specified message to an SMTP server for delivery.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Send (System.Net.Mail.MailMessage message);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>message</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.mail.mailmessage\" data-linktype=\"relative-path\">MailMessage</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.net.mail.mailmessage\" data-linktype=\"relative-path\">MailMessage</a> that contains the message to send.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>message</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>This <a class=\"xref\" href=\"system.net.mail.smtpclient\" data-linktype=\"relative-path\">SmtpClient</a> has a <span class=\"xref\">stem.Net.Mail.SmtpClient.SendAsync*</span> call in progress.  </p>\n<p> -or-  </p>\n<p> <span class=\"xref\">stem.Net.Mail.MailMessage.From*</span> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> There are no recipients specified in <span class=\"xref\">stem.Net.Mail.MailMessage.To*</span>, <span class=\"xref\">stem.Net.Mail.MailMessage.CC*</span>, and <span class=\"xref\">stem.Net.Mail.MailMessage.Bcc*</span> properties.  </p>\n<p> -or-  </p>\n<p> <span class=\"xref\">stem.Net.Mail.SmtpClient.DeliveryMethod*</span> property is set to <a class=\"xref\" href=\"system.net.mail.smtpdeliverymethod\" data-linktype=\"relative-path\">SmtpDeliveryMethod</a> and <span class=\"xref\">stem.Net.Mail.SmtpClient.Host*</span> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <span class=\"xref\">stem.Net.Mail.SmtpClient.DeliveryMethod*</span> property is set to <a class=\"xref\" href=\"system.net.mail.smtpdeliverymethod\" data-linktype=\"relative-path\">SmtpDeliveryMethod</a> and <span class=\"xref\">stem.Net.Mail.SmtpClient.Host*</span> is equal to the empty string (&quot;&quot;).  </p>\n<p> -or-  </p>\n<p> <span class=\"xref\">stem.Net.Mail.SmtpClient.DeliveryMethod*</span> property is set to <a class=\"xref\" href=\"system.net.mail.smtpdeliverymethod\" data-linktype=\"relative-path\">SmtpDeliveryMethod</a> and <span class=\"xref\">stem.Net.Mail.SmtpClient.Port*</span> is zero, a negative number, or greater than 65,535.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object has been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.mail.smtpexception\" data-linktype=\"relative-path\">SmtpException</a></div>\r\n                  </div>\r\n                  <p>The connection to the SMTP server failed.  </p>\n<p> -or-  </p>\n<p> Authentication failed.  </p>\n<p> -or-  </p>\n<p> The operation timed out.  </p>\n<p> -or-  </p>\n<p> <span class=\"xref\">stem.Net.Mail.SmtpClient.EnableSsl*</span> is set to <code>true</code> but the <span class=\"xref\">stem.Net.Mail.SmtpClient.DeliveryMethod*</span> property is set to <a class=\"xref\" href=\"system.net.mail.smtpdeliverymethod\" data-linktype=\"relative-path\">SmtpDeliveryMethod</a> or <a class=\"xref\" href=\"system.net.mail.smtpdeliverymethod\" data-linktype=\"relative-path\">SmtpDeliveryMethod</a>.  </p>\n<p> -or-  </p>\n<p> <span class=\"xref\">stem.Net.Mail.SmtpClient.EnableSsl*</span> is set to <code>true,</code> but the SMTP mail server did not advertise STARTTLS in the response to the EHLO command.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.mail.smtpfailedrecipientsexception\" data-linktype=\"relative-path\">SmtpFailedRecipientsException</a></div>\r\n                  </div>\r\n                  <p>The <code>message</code> could not be delivered to one or more of the recipients in <span class=\"xref\">stem.Net.Mail.MailMessage.To*</span>, <span class=\"xref\">stem.Net.Mail.MailMessage.CC*</span>, or <span class=\"xref\">stem.Net.Mail.MailMessage.Bcc*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method blocks while the e-mail is transmitted. You can specify a time-out value using the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Timeout_\" data-linktype=\"relative-path\">Timeout</a> property to ensure that the method returns after a specified amount of time elapses.  </p>\n<p> Before calling this method, the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Host_\" data-linktype=\"relative-path\">Host</a> and <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Port_\" data-linktype=\"relative-path\">Port</a> properties must be set either through the configuration files by setting the relevant properties, or by passing this information into the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient__ctor_System_String_System_Int32_\" data-linktype=\"relative-path\">SmtpClient(String,Int32)</a> constructor.  </p>\n<p> You cannot call this method if there is a message being sent asynchronously.  </p>\n<p> If the SMTP host requires credentials, you must set them before calling this method. To specify credentials, use the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_UseDefaultCredentials_\" data-linktype=\"relative-path\">UseDefaultCredentials</a> or <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Credentials_\" data-linktype=\"relative-path\">Credentials</a> properties.  </p>\n<p> If you receive an <a class=\"xref\" href=\"system.net.mail.smtpexception\" data-linktype=\"relative-path\">SmtpException</a> exception, check the <a class=\"xref\" href=\"system.net.mail.smtpexception#System_Net_Mail_SmtpException_StatusCode_\" data-linktype=\"relative-path\">StatusCode</a> property to find the reason the operation failed. The <a class=\"xref\" href=\"system.net.mail.smtpexception\" data-linktype=\"relative-path\">SmtpException</a> can also contain an inner exception that indicates the reason the operation failed.  </p>\n<p> When sending e-mail using <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Send_\" data-linktype=\"relative-path\">Send</a> to multiple recipients and the SMTP server accepts some recipients as valid and rejects others, <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Send_\" data-linktype=\"relative-path\">Send</a> sends e-mail to the accepted recipients and then a <a class=\"xref\" href=\"system.net.mail.smtpfailedrecipientsexception\" data-linktype=\"relative-path\">SmtpFailedRecipientsException</a> is thrown. The exception will contain a listing of the recipients that were rejected.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_EnableSsl_\" data-linktype=\"relative-path\">EnableSsl</a> property is set to <code>true</code>, and the SMTP mail server does not advertise STARTTLS in the response to the EHLO command, then a call to the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Send_\" data-linktype=\"relative-path\">Send</a> or <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_SendAsync_\" data-linktype=\"relative-path\">SendAsync</a> methods will throw an <a class=\"xref\" href=\"system.net.mail.smtpexception\" data-linktype=\"relative-path\">SmtpException</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates using this method.  </p>\n<pre><code class=\"lang-cpp\" name=\"NclMailSync#2\">   static void CreateTestMessage2( String^ server )\n   {\n      String^ to = L&quot;jane@contoso.com&quot;;\n      String^ from = L&quot;ben@contoso.com&quot;;\n      MailMessage^ message = gcnew MailMessage( from,to );\n      message-&gt;Subject = L&quot;Using the new SMTP client.&quot;;\n      message-&gt;Body = L&quot;Using this new feature, you can send an e-mail message from an application very easily.&quot;;\n      SmtpClient^ client = gcnew SmtpClient( server );\n      \n      // Credentials are necessary if the server requires the client \n      // to authenticate before it will send e-mail on the client&#39;s behalf.\n      client-&gt;UseDefaultCredentials = true;\n      client-&gt;Send( message );\n\t  client-&gt;~SmtpClient();\n   }\n\n</code></pre><pre><code class=\"lang-cs\" name=\"NclMailSync#2\">\t\tpublic static void CreateTestMessage2(string server)\n\t\t{\n\t\t\tstring to = &quot;jane@contoso.com&quot;;\n\t\t\tstring from = &quot;ben@contoso.com&quot;;\n\t\t\tMailMessage message = new MailMessage(from, to);\n\t\t\tmessage.Subject = &quot;Using the new SMTP client.&quot;;\n\t\t\tmessage.Body = @&quot;Using this new feature, you can send an e-mail message from an application very easily.&quot;;\n\t\t\tSmtpClient client = new SmtpClient(server);\n\t\t\t// Credentials are necessary if the server requires the client \n\t\t\t// to authenticate before it will send e-mail on the client&#39;s behalf.\n\t\t\tclient.UseDefaultCredentials = true;\n\n      try {\n\t\t\t  client.Send(message);\n\t\t\t}  \n\t\t\tcatch (Exception ex) {\n\t\t\t  Console.WriteLine(&quot;Exception caught in CreateTestMessage2(): {0}&quot;, \n                    ex.ToString() );\t\t\t  \n      }              \n\t\t}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Mail_SmtpClient_Send_System_String_System_String_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Net_Mail_SmtpClient_Send_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Send(String,String,String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Sends the specified e-mail message to an SMTP server for delivery. The message sender, recipients, subject, and message body are specified using <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Send (string from, string recipients, string subject, string body);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>from</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains the address information of the message sender.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>recipients</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains the addresses that the message is sent to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>subject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains the subject line for the message.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains the message body.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>from</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>recipients</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>from</code> is <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.  </p>\n<p> -or-  </p>\n<p> <code>recipients</code> is <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>This <a class=\"xref\" href=\"system.net.mail.smtpclient\" data-linktype=\"relative-path\">SmtpClient</a> has a <span class=\"xref\">stem.Net.Mail.SmtpClient.SendAsync*</span> call in progress.  </p>\n<p> -or-  </p>\n<p> <span class=\"xref\">stem.Net.Mail.SmtpClient.DeliveryMethod*</span> property is set to <a class=\"xref\" href=\"system.net.mail.smtpdeliverymethod\" data-linktype=\"relative-path\">SmtpDeliveryMethod</a> and <span class=\"xref\">stem.Net.Mail.SmtpClient.Host*</span> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <span class=\"xref\">stem.Net.Mail.SmtpClient.DeliveryMethod*</span> property is set to <a class=\"xref\" href=\"system.net.mail.smtpdeliverymethod\" data-linktype=\"relative-path\">SmtpDeliveryMethod</a> and <span class=\"xref\">stem.Net.Mail.SmtpClient.Host*</span> is equal to the empty string (&quot;&quot;).  </p>\n<p> -or-  </p>\n<p> <span class=\"xref\">stem.Net.Mail.SmtpClient.DeliveryMethod*</span> property is set to <a class=\"xref\" href=\"system.net.mail.smtpdeliverymethod\" data-linktype=\"relative-path\">SmtpDeliveryMethod</a> and <span class=\"xref\">stem.Net.Mail.SmtpClient.Port*</span> is zero, a negative number, or greater than 65,535.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object has been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.mail.smtpexception\" data-linktype=\"relative-path\">SmtpException</a></div>\r\n                  </div>\r\n                  <p>The connection to the SMTP server failed.  </p>\n<p> -or-  </p>\n<p> Authentication failed.  </p>\n<p> -or-  </p>\n<p> The operation timed out.  </p>\n<p> -or-  </p>\n<p> <span class=\"xref\">stem.Net.Mail.SmtpClient.EnableSsl*</span> is set to <code>true</code> but the <span class=\"xref\">stem.Net.Mail.SmtpClient.DeliveryMethod*</span> property is set to <a class=\"xref\" href=\"system.net.mail.smtpdeliverymethod\" data-linktype=\"relative-path\">SmtpDeliveryMethod</a> or <a class=\"xref\" href=\"system.net.mail.smtpdeliverymethod\" data-linktype=\"relative-path\">SmtpDeliveryMethod</a>.  </p>\n<p> -or-  </p>\n<p> <span class=\"xref\">stem.Net.Mail.SmtpClient.EnableSsl*</span> is set to <code>true,</code> but the SMTP mail server did not advertise STARTTLS in the response to the EHLO command.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.mail.smtpfailedrecipientsexception\" data-linktype=\"relative-path\">SmtpFailedRecipientsException</a></div>\r\n                  </div>\r\n                  <p>The message could not be delivered to one or more of the recipients in <code>recipients</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method blocks while the e-mail is transmitted. You can specify a time-out value using the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Timeout_\" data-linktype=\"relative-path\">Timeout</a> property to ensure that the method returns after a specified amount of time elapses.  </p>\n<p> Before calling this method, the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Host_\" data-linktype=\"relative-path\">Host</a> and <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Port_\" data-linktype=\"relative-path\">Port</a> properties must be set either through the configuration files by setting the relevant properties, or by passing this information into the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient__ctor_System_String_System_Int32_\" data-linktype=\"relative-path\">SmtpClient(String,Int32)</a> constructor.  </p>\n<p> You cannot call this method if there is a message being sent asynchronously.  </p>\n<p> If the SMTP host requires credentials, you must set them before calling this method. To specify credentials, use the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_UseDefaultCredentials_\" data-linktype=\"relative-path\">UseDefaultCredentials</a> or <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Credentials_\" data-linktype=\"relative-path\">Credentials</a> properties.  </p>\n<p> If you receive an <a class=\"xref\" href=\"system.net.mail.smtpexception\" data-linktype=\"relative-path\">SmtpException</a> exception, check the <a class=\"xref\" href=\"system.net.mail.smtpexception#System_Net_Mail_SmtpException_StatusCode_\" data-linktype=\"relative-path\">StatusCode</a> property to find the reason the operation failed. The <a class=\"xref\" href=\"system.net.mail.smtpexception\" data-linktype=\"relative-path\">SmtpException</a> can also contain an inner exception that indicates the reason the operation failed.  </p>\n<p> When sending e-mail using <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Send_\" data-linktype=\"relative-path\">Send</a> to multiple recipients and the SMTP server accepts some recipients as valid and rejects others, <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Send_\" data-linktype=\"relative-path\">Send</a> sends e-mail to the accepted recipients and then a <a class=\"xref\" href=\"system.net.mail.smtpfailedrecipientsexception\" data-linktype=\"relative-path\">SmtpFailedRecipientsException</a> is thrown. The exception will contain a listing of the recipients that were rejected.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_EnableSsl_\" data-linktype=\"relative-path\">EnableSsl</a> property is set to <code>true</code>, and the SMTP mail server does not advertise STARTTLS in the response to the EHLO command, then a call to the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Send_\" data-linktype=\"relative-path\">Send</a> or <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_SendAsync_\" data-linktype=\"relative-path\">SendAsync</a> methods will throw an <a class=\"xref\" href=\"system.net.mail.smtpexception\" data-linktype=\"relative-path\">SmtpException</a>.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Mail_SmtpClient_SendAsync_System_Net_Mail_MailMessage_System_Object_\">\r\n    \r\n            <a id=\"System_Net_Mail_SmtpClient_SendAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SendAsync(MailMessage,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Sends the specified e-mail message to an SMTP server for delivery. This method does not block the calling thread and allows the caller to pass an object to the method that is invoked when the operation completes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SendAsync (System.Net.Mail.MailMessage message, object userToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>message</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.mail.mailmessage\" data-linktype=\"relative-path\">MailMessage</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.net.mail.mailmessage\" data-linktype=\"relative-path\">MailMessage</a> that contains the message to send.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>userToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A user-defined object that is passed to the method invoked when the asynchronous operation completes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>message</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <span class=\"xref\">stem.Net.Mail.MailMessage.From*</span> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>This <a class=\"xref\" href=\"system.net.mail.smtpclient\" data-linktype=\"relative-path\">SmtpClient</a> has a <span class=\"xref\">stem.Net.Mail.SmtpClient.SendAsync*</span> call in progress.  </p>\n<p> -or-  </p>\n<p> There are no recipients specified in <span class=\"xref\">stem.Net.Mail.MailMessage.To*</span>, <span class=\"xref\">stem.Net.Mail.MailMessage.CC*</span>, and <span class=\"xref\">stem.Net.Mail.MailMessage.Bcc*</span> properties.  </p>\n<p> -or-  </p>\n<p> <span class=\"xref\">stem.Net.Mail.SmtpClient.DeliveryMethod*</span> property is set to <a class=\"xref\" href=\"system.net.mail.smtpdeliverymethod\" data-linktype=\"relative-path\">SmtpDeliveryMethod</a> and <span class=\"xref\">stem.Net.Mail.SmtpClient.Host*</span> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <span class=\"xref\">stem.Net.Mail.SmtpClient.DeliveryMethod*</span> property is set to <a class=\"xref\" href=\"system.net.mail.smtpdeliverymethod\" data-linktype=\"relative-path\">SmtpDeliveryMethod</a> and <span class=\"xref\">stem.Net.Mail.SmtpClient.Host*</span> is equal to the empty string (&quot;&quot;).  </p>\n<p> -or-  </p>\n<p> <span class=\"xref\">stem.Net.Mail.SmtpClient.DeliveryMethod*</span> property is set to <a class=\"xref\" href=\"system.net.mail.smtpdeliverymethod\" data-linktype=\"relative-path\">SmtpDeliveryMethod</a> and <span class=\"xref\">stem.Net.Mail.SmtpClient.Port*</span> is zero, a negative number, or greater than 65,535.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object has been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.mail.smtpexception\" data-linktype=\"relative-path\">SmtpException</a></div>\r\n                  </div>\r\n                  <p>The connection to the SMTP server failed.  </p>\n<p> -or-  </p>\n<p> Authentication failed.  </p>\n<p> -or-  </p>\n<p> The operation timed out.  </p>\n<p> -or-  </p>\n<p> <span class=\"xref\">stem.Net.Mail.SmtpClient.EnableSsl*</span> is set to <code>true</code> but the <span class=\"xref\">stem.Net.Mail.SmtpClient.DeliveryMethod*</span> property is set to <a class=\"xref\" href=\"system.net.mail.smtpdeliverymethod\" data-linktype=\"relative-path\">SmtpDeliveryMethod</a> or <a class=\"xref\" href=\"system.net.mail.smtpdeliverymethod\" data-linktype=\"relative-path\">SmtpDeliveryMethod</a>.  </p>\n<p> -or-  </p>\n<p> <span class=\"xref\">stem.Net.Mail.SmtpClient.EnableSsl*</span> is set to <code>true,</code> but the SMTP mail server did not advertise STARTTLS in the response to the EHLO command.  </p>\n<p> -or-  </p>\n<p> The <code>message</code> could not be delivered to one or more of the recipients in <span class=\"xref\">stem.Net.Mail.MailMessage.To*</span>, <span class=\"xref\">stem.Net.Mail.MailMessage.CC*</span>, or <span class=\"xref\">stem.Net.Mail.MailMessage.Bcc*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To receive notification when the e-mail has been sent or the operation has been canceled, add an event handler to the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_SendCompleted\" data-linktype=\"relative-path\">SendCompleted</a> event. You can cancel a <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_SendAsync_\" data-linktype=\"relative-path\">SendAsync</a> operation by calling the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_SendAsyncCancel_\" data-linktype=\"relative-path\">SendAsyncCancel</a> method.  </p>\n<p> After calling <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_SendAsync_\" data-linktype=\"relative-path\">SendAsync</a>, you must wait for the e-mail transmission to complete before attempting to send another e-mail message using <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Send_\" data-linktype=\"relative-path\">Send</a> or <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_SendAsync_\" data-linktype=\"relative-path\">SendAsync</a>.  </p>\n<p> Before calling this method, the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Host_\" data-linktype=\"relative-path\">Host</a> and <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Port_\" data-linktype=\"relative-path\">Port</a> must be set through the configuration files by setting the relevant properties, or by passing this information into the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient__ctor_System_String_System_Int32_\" data-linktype=\"relative-path\">SmtpClient(String,Int32)</a> constructor.  </p>\n<p> If the SMTP host requires credentials, you must set them before calling this method. To specify credentials, use the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_UseDefaultCredentials_\" data-linktype=\"relative-path\">UseDefaultCredentials</a> or <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Credentials_\" data-linktype=\"relative-path\">Credentials</a> properties.  </p>\n<p> If you receive an <a class=\"xref\" href=\"system.net.mail.smtpexception\" data-linktype=\"relative-path\">SmtpException</a> exception, check the <a class=\"xref\" href=\"system.net.mail.smtpexception#System_Net_Mail_SmtpException_StatusCode_\" data-linktype=\"relative-path\">StatusCode</a> property to find the reason the operation failed. The <a class=\"xref\" href=\"system.net.mail.smtpexception\" data-linktype=\"relative-path\">SmtpException</a> can also contain an inner exception that indicates the reason the operation failed.  </p>\n<p> When sending e-mail using <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_SendAsync_\" data-linktype=\"relative-path\">SendAsync</a> to multiple recipients, if the SMTP server accepts some recipients as valid and rejects others, a <a class=\"xref\" href=\"system.net.mail.smtpexception\" data-linktype=\"relative-path\">SmtpException</a> is thrown with a <a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> for the inner exception. If this occurs, <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_SendAsync_\" data-linktype=\"relative-path\">SendAsync</a> fails to send e-mail to any of the recipients.  </p>\n<p> Your application can detect a server certificate validation error by examining the <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs#System_ComponentModel_AsyncCompletedEventArgs_Error_\" data-linktype=\"relative-path\">Error</a> property passed into the <a class=\"xref\" href=\"system.net.mail.sendcompletedeventhandler\" data-linktype=\"relative-path\">SendCompletedEventHandler</a> delegate.  </p>\n<p> The <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Timeout_\" data-linktype=\"relative-path\">Timeout</a> property does not have any effect on a <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_SendAsync_\" data-linktype=\"relative-path\">SendAsync</a> call.  </p>\n<p> To send mail and block while it is transmitted to the SMTP server, use one of the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Send_\" data-linktype=\"relative-path\">Send</a> methods.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_EnableSsl_\" data-linktype=\"relative-path\">EnableSsl</a> property is set to <code>true</code>, and the SMTP mail server does not advertise STARTTLS in the response to the EHLO command, then a call to the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Send_\" data-linktype=\"relative-path\">Send</a> or <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_SendAsync_\" data-linktype=\"relative-path\">SendAsync</a> methods will throw an <a class=\"xref\" href=\"system.net.mail.smtpexception\" data-linktype=\"relative-path\">SmtpException</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates calling this method.  </p>\n<pre><code class=\"lang-cs\" name=\"NclMailAsync#1\">\nusing System;\nusing System.Net;\nusing System.Net.Mail;\nusing System.Net.Mime;\nusing System.Threading;\nusing System.ComponentModel;\nnamespace Examples.SmptExamples.Async\n{\n    public class SimpleAsynchronousExample\n    {\n        static bool mailSent = false;\n        private static void SendCompletedCallback(object sender, AsyncCompletedEventArgs e)\n        {\n            // Get the unique identifier for this asynchronous operation.\n             String token = (string) e.UserState;\n           \n            if (e.Cancelled)\n            {\n                 Console.WriteLine(&quot;[{0}] Send canceled.&quot;, token);\n            }\n            if (e.Error != null)\n            {\n                 Console.WriteLine(&quot;[{0}] {1}&quot;, token, e.Error.ToString());\n            } else\n            {\n                Console.WriteLine(&quot;Message sent.&quot;);\n            }\n            mailSent = true;\n        }\n        public static void Main(string[] args)\n        {\n            // Command line argument must the the SMTP host.\n            SmtpClient client = new SmtpClient(args[0]);\n            // Specify the e-mail sender.\n            // Create a mailing address that includes a UTF8 character\n            // in the display name.\n            MailAddress from = new MailAddress(&quot;jane@contoso.com&quot;, \n               &quot;Jane &quot; + (char)0xD8+ &quot; Clayton&quot;, \n            System.Text.Encoding.UTF8);\n            // Set destinations for the e-mail message.\n            MailAddress to = new MailAddress(&quot;ben@contoso.com&quot;);\n            // Specify the message content.\n            MailMessage message = new MailMessage(from, to);\n            message.Body = &quot;This is a test e-mail message sent by an application. &quot;;\n            // Include some non-ASCII characters in body and subject.\n            string someArrows = new string(new char[] {&#39;\\u2190&#39;, &#39;\\u2191&#39;, &#39;\\u2192&#39;, &#39;\\u2193&#39;});\n            message.Body += Environment.NewLine + someArrows;\n            message.BodyEncoding =  System.Text.Encoding.UTF8;\n            message.Subject = &quot;test message 1&quot; + someArrows;\n            message.SubjectEncoding = System.Text.Encoding.UTF8;\n            // Set the method that is called back when the send operation ends.\n            client.SendCompleted += new \n            SendCompletedEventHandler(SendCompletedCallback);\n            // The userState can be any object that allows your callback \n            // method to identify this send operation.\n            // For this example, the userToken is a string constant.\n            string userState = &quot;test message1&quot;;\n            client.SendAsync(message, userState);\n            Console.WriteLine(&quot;Sending message... press c to cancel mail. Press any other key to exit.&quot;);\n            string answer = Console.ReadLine();\n            // If the user canceled the send, and mail hasn&#39;t been sent yet,\n            // then cancel the pending operation.\n            if (answer.StartsWith(&quot;c&quot;) &amp;&amp; mailSent == false)\n            {\n                client.SendAsyncCancel();\n            }\n            // Clean up.\n            message.Dispose();\n            Console.WriteLine(&quot;Goodbye.&quot;);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"NclMailAsync#1\">#using &lt;System.dll&gt;\nusing namespace System;\nusing namespace System::Net;\nusing namespace System::Net::Mail;\nusing namespace System::Net::Mime;\nusing namespace System::Threading;\nusing namespace System::ComponentModel;\n\nstatic bool mailSent;\n\nstatic void SendCompletedCallback(Object^ sender, AsyncCompletedEventArgs^ e)\n{\n    // Get the unique identifier for this asynchronous \n    // operation.\n    String^ token = (String^) e-&gt;UserState;\n\n    if (e-&gt;Cancelled)\n    {\n        Console::WriteLine(&quot;[{0}] Send canceled.&quot;, token);\n    }\n    if (e-&gt;Error != nullptr)\n    {\n        Console::WriteLine(&quot;[{0}] {1}&quot;, token, \n            e-&gt;Error-&gt;ToString());\n    } else\n    {\n        Console::WriteLine(&quot;Message sent.&quot;);\n    }\n    mailSent = true;\n}\n\nint main(array&lt;String^&gt;^ args)\n{\n    if (args-&gt;Length &gt; 1)\n    {\n        // Command line argument must the the SMTP host.\n        SmtpClient^ client = gcnew SmtpClient(args[1]);\n        // Specify the e-mail sender.\n        // Create a mailing address that includes a UTF8 \n        // character in the display name.\n        MailAddress^ from = gcnew MailAddress(&quot;jane@contoso.com&quot;,\n            &quot;Jane &quot; + (wchar_t)0xD8 + &quot; Clayton&quot;,\n            System::Text::Encoding::UTF8);\n        // Set destinations for the e-mail message.\n        MailAddress^ to = gcnew MailAddress(&quot;ben@contoso.com&quot;);\n        // Specify the message content.\n        MailMessage^ message = gcnew MailMessage(from, to);\n        message-&gt;Body = &quot;This is a test e-mail message sent&quot; +\n            &quot; by an application. &quot;;\n        // Include some non-ASCII characters in body and \n        // subject.\n        String^ someArrows = gcnew String(gcnew array&lt;wchar_t&gt;{L&#39;\\u2190&#39;, \n            L&#39;\\u2191&#39;, L&#39;\\u2192&#39;, L&#39;\\u2193&#39;});\n        message-&gt;Body += Environment::NewLine + someArrows;\n        message-&gt;BodyEncoding = System::Text::Encoding::UTF8;\n        message-&gt;Subject = &quot;test message 1&quot; + someArrows;\n        message-&gt;SubjectEncoding = System::Text::Encoding::UTF8;\n        // Set the method that is called back when the send\n        // operation ends.\n        client-&gt;SendCompleted += gcnew\n            SendCompletedEventHandler(SendCompletedCallback);\n        // The userState can be any object that allows your \n        // callback method to identify this send operation.\n        // For this example, the userToken is a string constant.\n        String^ userState = &quot;test message1&quot;;\n        client-&gt;SendAsync(message, userState);\n        Console::WriteLine(&quot;Sending message... press c to&quot; +\n            &quot; cancel mail. Press any other key to exit.&quot;);\n        String^ answer = Console::ReadLine();\n        // If the user canceled the send, and mail hasn&#39;t been \n        // sent yet,then cancel the pending operation.\n        if (answer-&gt;ToLower()-&gt;StartsWith(&quot;c&quot;) &amp;&amp; mailSent == false)\n        {\n            client-&gt;SendAsyncCancel();\n        }\n        // Clean up.\n        delete message;\n        client = nullptr;\n        Console::WriteLine(&quot;Goodbye.&quot;);\n    }\n    else\n    {\n        Console::WriteLine(&quot;Please give SMTP server name!&quot;);\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"NclMailAsync#1\">\nImports System\nImports System.Net\nImports System.Net.Mail\nImports System.Net.Mime\nImports System.Threading\nImports System.ComponentModel\nNamespace Examples.SmptExamples.Async\n    Public Class SimpleAsynchronousExample\n        Private Shared mailSent As Boolean = False\n        Private Shared Sub SendCompletedCallback(ByVal sender As Object, ByVal e As AsyncCompletedEventArgs)\n            &#39; Get the unique identifier for this asynchronous operation.\n            Dim token As String = CStr(e.UserState)\n\n            If e.Cancelled Then\n                Console.WriteLine(&quot;[{0}] Send canceled.&quot;, token)\n            End If\n            If e.Error IsNot Nothing Then\n                Console.WriteLine(&quot;[{0}] {1}&quot;, token, e.Error.ToString())\n            Else\n                Console.WriteLine(&quot;Message sent.&quot;)\n            End If\n            mailSent = True\n        End Sub\n        Public Shared Sub Main(ByVal args() As String)\n            &#39; Command line argument must the the SMTP host.\n            Dim client As New SmtpClient(args(0))\n            &#39; Specify the e-mail sender.\n            &#39; Create a mailing address that includes a UTF8 character\n            &#39; in the display name.\n            Dim [from] As New MailAddress(&quot;jane@contoso.com&quot;, &quot;Jane &quot; &amp; ChrW(&amp;HD8) &amp; &quot; Clayton&quot;, System.Text.Encoding.UTF8)\n            &#39; Set destinations for the e-mail message.\n            Dim [to] As New MailAddress(&quot;ben@contoso.com&quot;)\n            &#39; Specify the message content.\n            Dim message As New MailMessage([from], [to])\n            message.Body = &quot;This is a test e-mail message sent by an application. &quot;\n            &#39; Include some non-ASCII characters in body and subject.\n            Dim someArrows As New String(New Char() {ChrW(&amp;H2190), ChrW(&amp;H2191), ChrW(&amp;H2192), ChrW(&amp;H2193)})\n            message.Body += Environment.NewLine &amp; someArrows\n            message.BodyEncoding = System.Text.Encoding.UTF8\n            message.Subject = &quot;test message 1&quot; &amp; someArrows\n            message.SubjectEncoding = System.Text.Encoding.UTF8\n            &#39; Set the method that is called back when the send operation ends.\n            AddHandler client.SendCompleted, AddressOf SendCompletedCallback\n            &#39; The userState can be any object that allows your callback \n            &#39; method to identify this send operation.\n            &#39; For this example, the userToken is a string constant.\n            Dim userState As String = &quot;test message1&quot;\n            client.SendAsync(message, userState)\n            Console.WriteLine(&quot;Sending message... press c to cancel mail. Press any other key to exit.&quot;)\n            Dim answer As String = Console.ReadLine()\n            &#39; If the user canceled the send, and mail hasn&#39;t been sent yet,\n            &#39; then cancel the pending operation.\n            If answer.StartsWith(&quot;c&quot;) AndAlso mailSent = False Then\n                client.SendAsyncCancel()\n            End If\n            &#39; Clean up.\n            message.Dispose()\n            Console.WriteLine(&quot;Goodbye.&quot;)\n        End Sub\n    End Class\nEnd Namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Mail_SmtpClient_SendAsync_System_String_System_String_System_String_System_String_System_Object_\">\r\n    \r\n            <a id=\"System_Net_Mail_SmtpClient_SendAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SendAsync(String,String,String,String,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Sends an e-mail message to an SMTP server for delivery. The message sender, recipients, subject, and message body are specified using <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects. This method does not block the calling thread and allows the caller to pass an object to the method that is invoked when the operation completes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SendAsync (string from, string recipients, string subject, string body, object userToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>from</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains the address information of the message sender.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>recipients</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains the address that the message is sent to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>subject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains the subject line for the message.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains the message body.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>userToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A user-defined object that is passed to the method invoked when the asynchronous operation completes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>from</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>recipient</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>from</code> is <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.  </p>\n<p> -or-  </p>\n<p> <code>recipient</code> is <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>This <a class=\"xref\" href=\"system.net.mail.smtpclient\" data-linktype=\"relative-path\">SmtpClient</a> has a <span class=\"xref\">stem.Net.Mail.SmtpClient.SendAsync*</span> call in progress.  </p>\n<p> -or-  </p>\n<p> <span class=\"xref\">stem.Net.Mail.SmtpClient.DeliveryMethod*</span> property is set to <a class=\"xref\" href=\"system.net.mail.smtpdeliverymethod\" data-linktype=\"relative-path\">SmtpDeliveryMethod</a> and <span class=\"xref\">stem.Net.Mail.SmtpClient.Host*</span> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <span class=\"xref\">stem.Net.Mail.SmtpClient.DeliveryMethod*</span> property is set to <a class=\"xref\" href=\"system.net.mail.smtpdeliverymethod\" data-linktype=\"relative-path\">SmtpDeliveryMethod</a> and <span class=\"xref\">stem.Net.Mail.SmtpClient.Host*</span> is equal to the empty string (&quot;&quot;).  </p>\n<p> -or-  </p>\n<p> <span class=\"xref\">stem.Net.Mail.SmtpClient.DeliveryMethod*</span> property is set to <a class=\"xref\" href=\"system.net.mail.smtpdeliverymethod\" data-linktype=\"relative-path\">SmtpDeliveryMethod</a> and <span class=\"xref\">stem.Net.Mail.SmtpClient.Port*</span> is zero, a negative number, or greater than 65,535.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object has been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.mail.smtpexception\" data-linktype=\"relative-path\">SmtpException</a></div>\r\n                  </div>\r\n                  <p>The connection to the SMTP server failed.  </p>\n<p> -or-  </p>\n<p> Authentication failed.  </p>\n<p> -or-  </p>\n<p> The operation timed out.  </p>\n<p> -or-  </p>\n<p> <span class=\"xref\">stem.Net.Mail.SmtpClient.EnableSsl*</span> is set to <code>true</code> but the <span class=\"xref\">stem.Net.Mail.SmtpClient.DeliveryMethod*</span> property is set to <a class=\"xref\" href=\"system.net.mail.smtpdeliverymethod\" data-linktype=\"relative-path\">SmtpDeliveryMethod</a> or <a class=\"xref\" href=\"system.net.mail.smtpdeliverymethod\" data-linktype=\"relative-path\">SmtpDeliveryMethod</a>.  </p>\n<p> -or-  </p>\n<p> <span class=\"xref\">stem.Net.Mail.SmtpClient.EnableSsl*</span> is set to <code>true,</code> but the SMTP mail server did not advertise STARTTLS in the response to the EHLO command.  </p>\n<p> -or-  </p>\n<p> The message could not be delivered to one or more of the recipients in <code>recipients</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To receive notification when the e-mail has been sent or the operation has been canceled, add an event handler to the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_SendCompleted\" data-linktype=\"relative-path\">SendCompleted</a> event. You can cancel a <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_SendAsync_\" data-linktype=\"relative-path\">SendAsync</a> operation by calling the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_SendAsyncCancel_\" data-linktype=\"relative-path\">SendAsyncCancel</a> method.  </p>\n<p> After calling <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_SendAsync_\" data-linktype=\"relative-path\">SendAsync</a>, you must wait for the e-mail transmission to complete before attempting to send another e-mail message using <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Send_\" data-linktype=\"relative-path\">Send</a> or <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_SendAsync_\" data-linktype=\"relative-path\">SendAsync</a>.  </p>\n<p> Before calling this method, the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Host_\" data-linktype=\"relative-path\">Host</a> and <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Port_\" data-linktype=\"relative-path\">Port</a> properties must be set either through the configuration files or by setting the properties or passing this information into the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient__ctor_System_String_System_Int32_\" data-linktype=\"relative-path\">SmtpClient(String,Int32)</a> constructor.  </p>\n<p> If the SMTP host requires credentials, you must set them before calling this method. To specify credentials, use the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_UseDefaultCredentials_\" data-linktype=\"relative-path\">UseDefaultCredentials</a> or <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Credentials_\" data-linktype=\"relative-path\">Credentials</a> property.  </p>\n<p> If you receive an <a class=\"xref\" href=\"system.net.mail.smtpexception\" data-linktype=\"relative-path\">SmtpException</a> exception, check the <a class=\"xref\" href=\"system.net.mail.smtpexception#System_Net_Mail_SmtpException_StatusCode_\" data-linktype=\"relative-path\">StatusCode</a> property to find the reason the operation failed. The <a class=\"xref\" href=\"system.net.mail.smtpexception\" data-linktype=\"relative-path\">SmtpException</a> can also contain an inner exception that indicates the reason the operation failed.  </p>\n<p> When sending e-mail using <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_SendAsync_\" data-linktype=\"relative-path\">SendAsync</a> to multiple recipients, if the SMTP server accepts some recipients as valid and rejects others, a <a class=\"xref\" href=\"system.net.mail.smtpexception\" data-linktype=\"relative-path\">SmtpException</a> is thrown with a <a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> for the inner exception. If this occurs, <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_SendAsync_\" data-linktype=\"relative-path\">SendAsync</a> fails to send e-mail to any of the recipients.  </p>\n<p> Your application can detect a server certificate validation error by examining the <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs#System_ComponentModel_AsyncCompletedEventArgs_Error_\" data-linktype=\"relative-path\">Error</a> property passed into the <a class=\"xref\" href=\"system.net.mail.sendcompletedeventhandler\" data-linktype=\"relative-path\">SendCompletedEventHandler</a> delegate.  </p>\n<p> The <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Timeout_\" data-linktype=\"relative-path\">Timeout</a> property does not have any effect on a <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_SendAsync_\" data-linktype=\"relative-path\">SendAsync</a> call.  </p>\n<p> To send mail and block while it is transmitted to the SMTP server, use one of the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Send_\" data-linktype=\"relative-path\">Send</a> methods.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_EnableSsl_\" data-linktype=\"relative-path\">EnableSsl</a> property is set to <code>true</code>, and the SMTP mail server does not advertise STARTTLS in the response to the EHLO command, then a call to the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_Send_\" data-linktype=\"relative-path\">Send</a> or <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_SendAsync_\" data-linktype=\"relative-path\">SendAsync</a> methods will throw an <a class=\"xref\" href=\"system.net.mail.smtpexception\" data-linktype=\"relative-path\">SmtpException</a>.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Mail_SmtpClient_SendAsyncCancel\">\r\n    \r\n            <a id=\"System_Net_Mail_SmtpClient_SendAsyncCancel_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SendAsyncCancel()</div>        \r\n          </div>\r\n    \r\n            <p>Cancels an asynchronous operation to send an e-mail message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SendAsyncCancel ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object has been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the SendAsyncCancel method to cancel a pending <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_SendAsync_\" data-linktype=\"relative-path\">SendAsync</a> operation. If there is mail waiting to be sent, this method releases resources used to store the mail. If there is no mail waiting to be sent, this method does nothing.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates sending an e-mail message asynchronously. The user has the option to cancel the mail if it has not been sent.  </p>\n<pre><code class=\"lang-cs\" name=\"NclMailAsync#1\">\nusing System;\nusing System.Net;\nusing System.Net.Mail;\nusing System.Net.Mime;\nusing System.Threading;\nusing System.ComponentModel;\nnamespace Examples.SmptExamples.Async\n{\n    public class SimpleAsynchronousExample\n    {\n        static bool mailSent = false;\n        private static void SendCompletedCallback(object sender, AsyncCompletedEventArgs e)\n        {\n            // Get the unique identifier for this asynchronous operation.\n             String token = (string) e.UserState;\n           \n            if (e.Cancelled)\n            {\n                 Console.WriteLine(&quot;[{0}] Send canceled.&quot;, token);\n            }\n            if (e.Error != null)\n            {\n                 Console.WriteLine(&quot;[{0}] {1}&quot;, token, e.Error.ToString());\n            } else\n            {\n                Console.WriteLine(&quot;Message sent.&quot;);\n            }\n            mailSent = true;\n        }\n        public static void Main(string[] args)\n        {\n            // Command line argument must the the SMTP host.\n            SmtpClient client = new SmtpClient(args[0]);\n            // Specify the e-mail sender.\n            // Create a mailing address that includes a UTF8 character\n            // in the display name.\n            MailAddress from = new MailAddress(&quot;jane@contoso.com&quot;, \n               &quot;Jane &quot; + (char)0xD8+ &quot; Clayton&quot;, \n            System.Text.Encoding.UTF8);\n            // Set destinations for the e-mail message.\n            MailAddress to = new MailAddress(&quot;ben@contoso.com&quot;);\n            // Specify the message content.\n            MailMessage message = new MailMessage(from, to);\n            message.Body = &quot;This is a test e-mail message sent by an application. &quot;;\n            // Include some non-ASCII characters in body and subject.\n            string someArrows = new string(new char[] {&#39;\\u2190&#39;, &#39;\\u2191&#39;, &#39;\\u2192&#39;, &#39;\\u2193&#39;});\n            message.Body += Environment.NewLine + someArrows;\n            message.BodyEncoding =  System.Text.Encoding.UTF8;\n            message.Subject = &quot;test message 1&quot; + someArrows;\n            message.SubjectEncoding = System.Text.Encoding.UTF8;\n            // Set the method that is called back when the send operation ends.\n            client.SendCompleted += new \n            SendCompletedEventHandler(SendCompletedCallback);\n            // The userState can be any object that allows your callback \n            // method to identify this send operation.\n            // For this example, the userToken is a string constant.\n            string userState = &quot;test message1&quot;;\n            client.SendAsync(message, userState);\n            Console.WriteLine(&quot;Sending message... press c to cancel mail. Press any other key to exit.&quot;);\n            string answer = Console.ReadLine();\n            // If the user canceled the send, and mail hasn&#39;t been sent yet,\n            // then cancel the pending operation.\n            if (answer.StartsWith(&quot;c&quot;) &amp;&amp; mailSent == false)\n            {\n                client.SendAsyncCancel();\n            }\n            // Clean up.\n            message.Dispose();\n            Console.WriteLine(&quot;Goodbye.&quot;);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"NclMailAsync#1\">#using &lt;System.dll&gt;\nusing namespace System;\nusing namespace System::Net;\nusing namespace System::Net::Mail;\nusing namespace System::Net::Mime;\nusing namespace System::Threading;\nusing namespace System::ComponentModel;\n\nstatic bool mailSent;\n\nstatic void SendCompletedCallback(Object^ sender, AsyncCompletedEventArgs^ e)\n{\n    // Get the unique identifier for this asynchronous \n    // operation.\n    String^ token = (String^) e-&gt;UserState;\n\n    if (e-&gt;Cancelled)\n    {\n        Console::WriteLine(&quot;[{0}] Send canceled.&quot;, token);\n    }\n    if (e-&gt;Error != nullptr)\n    {\n        Console::WriteLine(&quot;[{0}] {1}&quot;, token, \n            e-&gt;Error-&gt;ToString());\n    } else\n    {\n        Console::WriteLine(&quot;Message sent.&quot;);\n    }\n    mailSent = true;\n}\n\nint main(array&lt;String^&gt;^ args)\n{\n    if (args-&gt;Length &gt; 1)\n    {\n        // Command line argument must the the SMTP host.\n        SmtpClient^ client = gcnew SmtpClient(args[1]);\n        // Specify the e-mail sender.\n        // Create a mailing address that includes a UTF8 \n        // character in the display name.\n        MailAddress^ from = gcnew MailAddress(&quot;jane@contoso.com&quot;,\n            &quot;Jane &quot; + (wchar_t)0xD8 + &quot; Clayton&quot;,\n            System::Text::Encoding::UTF8);\n        // Set destinations for the e-mail message.\n        MailAddress^ to = gcnew MailAddress(&quot;ben@contoso.com&quot;);\n        // Specify the message content.\n        MailMessage^ message = gcnew MailMessage(from, to);\n        message-&gt;Body = &quot;This is a test e-mail message sent&quot; +\n            &quot; by an application. &quot;;\n        // Include some non-ASCII characters in body and \n        // subject.\n        String^ someArrows = gcnew String(gcnew array&lt;wchar_t&gt;{L&#39;\\u2190&#39;, \n            L&#39;\\u2191&#39;, L&#39;\\u2192&#39;, L&#39;\\u2193&#39;});\n        message-&gt;Body += Environment::NewLine + someArrows;\n        message-&gt;BodyEncoding = System::Text::Encoding::UTF8;\n        message-&gt;Subject = &quot;test message 1&quot; + someArrows;\n        message-&gt;SubjectEncoding = System::Text::Encoding::UTF8;\n        // Set the method that is called back when the send\n        // operation ends.\n        client-&gt;SendCompleted += gcnew\n            SendCompletedEventHandler(SendCompletedCallback);\n        // The userState can be any object that allows your \n        // callback method to identify this send operation.\n        // For this example, the userToken is a string constant.\n        String^ userState = &quot;test message1&quot;;\n        client-&gt;SendAsync(message, userState);\n        Console::WriteLine(&quot;Sending message... press c to&quot; +\n            &quot; cancel mail. Press any other key to exit.&quot;);\n        String^ answer = Console::ReadLine();\n        // If the user canceled the send, and mail hasn&#39;t been \n        // sent yet,then cancel the pending operation.\n        if (answer-&gt;ToLower()-&gt;StartsWith(&quot;c&quot;) &amp;&amp; mailSent == false)\n        {\n            client-&gt;SendAsyncCancel();\n        }\n        // Clean up.\n        delete message;\n        client = nullptr;\n        Console::WriteLine(&quot;Goodbye.&quot;);\n    }\n    else\n    {\n        Console::WriteLine(&quot;Please give SMTP server name!&quot;);\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"NclMailAsync#1\">\nImports System\nImports System.Net\nImports System.Net.Mail\nImports System.Net.Mime\nImports System.Threading\nImports System.ComponentModel\nNamespace Examples.SmptExamples.Async\n    Public Class SimpleAsynchronousExample\n        Private Shared mailSent As Boolean = False\n        Private Shared Sub SendCompletedCallback(ByVal sender As Object, ByVal e As AsyncCompletedEventArgs)\n            &#39; Get the unique identifier for this asynchronous operation.\n            Dim token As String = CStr(e.UserState)\n\n            If e.Cancelled Then\n                Console.WriteLine(&quot;[{0}] Send canceled.&quot;, token)\n            End If\n            If e.Error IsNot Nothing Then\n                Console.WriteLine(&quot;[{0}] {1}&quot;, token, e.Error.ToString())\n            Else\n                Console.WriteLine(&quot;Message sent.&quot;)\n            End If\n            mailSent = True\n        End Sub\n        Public Shared Sub Main(ByVal args() As String)\n            &#39; Command line argument must the the SMTP host.\n            Dim client As New SmtpClient(args(0))\n            &#39; Specify the e-mail sender.\n            &#39; Create a mailing address that includes a UTF8 character\n            &#39; in the display name.\n            Dim [from] As New MailAddress(&quot;jane@contoso.com&quot;, &quot;Jane &quot; &amp; ChrW(&amp;HD8) &amp; &quot; Clayton&quot;, System.Text.Encoding.UTF8)\n            &#39; Set destinations for the e-mail message.\n            Dim [to] As New MailAddress(&quot;ben@contoso.com&quot;)\n            &#39; Specify the message content.\n            Dim message As New MailMessage([from], [to])\n            message.Body = &quot;This is a test e-mail message sent by an application. &quot;\n            &#39; Include some non-ASCII characters in body and subject.\n            Dim someArrows As New String(New Char() {ChrW(&amp;H2190), ChrW(&amp;H2191), ChrW(&amp;H2192), ChrW(&amp;H2193)})\n            message.Body += Environment.NewLine &amp; someArrows\n            message.BodyEncoding = System.Text.Encoding.UTF8\n            message.Subject = &quot;test message 1&quot; &amp; someArrows\n            message.SubjectEncoding = System.Text.Encoding.UTF8\n            &#39; Set the method that is called back when the send operation ends.\n            AddHandler client.SendCompleted, AddressOf SendCompletedCallback\n            &#39; The userState can be any object that allows your callback \n            &#39; method to identify this send operation.\n            &#39; For this example, the userToken is a string constant.\n            Dim userState As String = &quot;test message1&quot;\n            client.SendAsync(message, userState)\n            Console.WriteLine(&quot;Sending message... press c to cancel mail. Press any other key to exit.&quot;)\n            Dim answer As String = Console.ReadLine()\n            &#39; If the user canceled the send, and mail hasn&#39;t been sent yet,\n            &#39; then cancel the pending operation.\n            If answer.StartsWith(&quot;c&quot;) AndAlso mailSent = False Then\n                client.SendAsyncCancel()\n            End If\n            &#39; Clean up.\n            message.Dispose()\n            Console.WriteLine(&quot;Goodbye.&quot;)\n        End Sub\n    End Class\nEnd Namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Mail_SmtpClient_SendMailAsync_System_Net_Mail_MailMessage_\">\r\n    \r\n            <a id=\"System_Net_Mail_SmtpClient_SendMailAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SendMailAsync(MailMessage)</div>        \r\n          </div>\r\n    \r\n            <p>Sends the specified message to an SMTP server for delivery as an asynchronous operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task SendMailAsync (System.Net.Mail.MailMessage message);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>message</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.mail.mailmessage\" data-linktype=\"relative-path\">MailMessage</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.net.mail.mailmessage\" data-linktype=\"relative-path\">MailMessage</a> that contains the message to send.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>Returns <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>.  </p>\n<p> The task object representing the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>message</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This operation will not block. The returned <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>&gt; object will complete once the message has been sent.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Mail_SmtpClient_SendMailAsync_System_String_System_String_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Net_Mail_SmtpClient_SendMailAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SendMailAsync(String,String,String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Sends the specified message to an SMTP server for delivery as an asynchronous operation. . The message sender, recipients, subject, and message body are specified using <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task SendMailAsync (string from, string recipients, string subject, string body);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>from</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains the address information of the message sender.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>recipients</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains the addresses that the message is sent to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>subject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains the subject line for the message.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains the message body.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>Returns <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>.  </p>\n<p> The task object representing the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>from</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>recipients</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>from</code> is <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>.  </p>\n<p> -or-  </p>\n<p> <code>recipients</code> is <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This operation will not block. The returned <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>&gt; object will complete once the message has been sent.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"events\">\r\n        <h2>Events\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Mail_SmtpClient_SendCompleted\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SendCompleted</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when an asynchronous e-mail send operation completes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Net.Mail.SendCompletedEventHandler SendCompleted;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The SendCompleted event is raised each time an e-mail message is sent asynchronously when the send operation completes. To send an e-mail message asynchronously, use the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_SendAsync_\" data-linktype=\"relative-path\">SendAsync</a> methods.  </p>\n<p> <a class=\"xref\" href=\"system.net.mail.sendcompletedeventhandler\" data-linktype=\"relative-path\">SendCompletedEventHandler</a> is the delegate for SendCompleted. The <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs\" data-linktype=\"relative-path\">AsyncCompletedEventArgs</a> class provides the event handler with event data.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates sending an e-mail message asynchronously.  </p>\n<pre><code class=\"lang-cs\" name=\"NclMailAsync#1\">\nusing System;\nusing System.Net;\nusing System.Net.Mail;\nusing System.Net.Mime;\nusing System.Threading;\nusing System.ComponentModel;\nnamespace Examples.SmptExamples.Async\n{\n    public class SimpleAsynchronousExample\n    {\n        static bool mailSent = false;\n        private static void SendCompletedCallback(object sender, AsyncCompletedEventArgs e)\n        {\n            // Get the unique identifier for this asynchronous operation.\n             String token = (string) e.UserState;\n           \n            if (e.Cancelled)\n            {\n                 Console.WriteLine(&quot;[{0}] Send canceled.&quot;, token);\n            }\n            if (e.Error != null)\n            {\n                 Console.WriteLine(&quot;[{0}] {1}&quot;, token, e.Error.ToString());\n            } else\n            {\n                Console.WriteLine(&quot;Message sent.&quot;);\n            }\n            mailSent = true;\n        }\n        public static void Main(string[] args)\n        {\n            // Command line argument must the the SMTP host.\n            SmtpClient client = new SmtpClient(args[0]);\n            // Specify the e-mail sender.\n            // Create a mailing address that includes a UTF8 character\n            // in the display name.\n            MailAddress from = new MailAddress(&quot;jane@contoso.com&quot;, \n               &quot;Jane &quot; + (char)0xD8+ &quot; Clayton&quot;, \n            System.Text.Encoding.UTF8);\n            // Set destinations for the e-mail message.\n            MailAddress to = new MailAddress(&quot;ben@contoso.com&quot;);\n            // Specify the message content.\n            MailMessage message = new MailMessage(from, to);\n            message.Body = &quot;This is a test e-mail message sent by an application. &quot;;\n            // Include some non-ASCII characters in body and subject.\n            string someArrows = new string(new char[] {&#39;\\u2190&#39;, &#39;\\u2191&#39;, &#39;\\u2192&#39;, &#39;\\u2193&#39;});\n            message.Body += Environment.NewLine + someArrows;\n            message.BodyEncoding =  System.Text.Encoding.UTF8;\n            message.Subject = &quot;test message 1&quot; + someArrows;\n            message.SubjectEncoding = System.Text.Encoding.UTF8;\n            // Set the method that is called back when the send operation ends.\n            client.SendCompleted += new \n            SendCompletedEventHandler(SendCompletedCallback);\n            // The userState can be any object that allows your callback \n            // method to identify this send operation.\n            // For this example, the userToken is a string constant.\n            string userState = &quot;test message1&quot;;\n            client.SendAsync(message, userState);\n            Console.WriteLine(&quot;Sending message... press c to cancel mail. Press any other key to exit.&quot;);\n            string answer = Console.ReadLine();\n            // If the user canceled the send, and mail hasn&#39;t been sent yet,\n            // then cancel the pending operation.\n            if (answer.StartsWith(&quot;c&quot;) &amp;&amp; mailSent == false)\n            {\n                client.SendAsyncCancel();\n            }\n            // Clean up.\n            message.Dispose();\n            Console.WriteLine(&quot;Goodbye.&quot;);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"NclMailAsync#1\">#using &lt;System.dll&gt;\nusing namespace System;\nusing namespace System::Net;\nusing namespace System::Net::Mail;\nusing namespace System::Net::Mime;\nusing namespace System::Threading;\nusing namespace System::ComponentModel;\n\nstatic bool mailSent;\n\nstatic void SendCompletedCallback(Object^ sender, AsyncCompletedEventArgs^ e)\n{\n    // Get the unique identifier for this asynchronous \n    // operation.\n    String^ token = (String^) e-&gt;UserState;\n\n    if (e-&gt;Cancelled)\n    {\n        Console::WriteLine(&quot;[{0}] Send canceled.&quot;, token);\n    }\n    if (e-&gt;Error != nullptr)\n    {\n        Console::WriteLine(&quot;[{0}] {1}&quot;, token, \n            e-&gt;Error-&gt;ToString());\n    } else\n    {\n        Console::WriteLine(&quot;Message sent.&quot;);\n    }\n    mailSent = true;\n}\n\nint main(array&lt;String^&gt;^ args)\n{\n    if (args-&gt;Length &gt; 1)\n    {\n        // Command line argument must the the SMTP host.\n        SmtpClient^ client = gcnew SmtpClient(args[1]);\n        // Specify the e-mail sender.\n        // Create a mailing address that includes a UTF8 \n        // character in the display name.\n        MailAddress^ from = gcnew MailAddress(&quot;jane@contoso.com&quot;,\n            &quot;Jane &quot; + (wchar_t)0xD8 + &quot; Clayton&quot;,\n            System::Text::Encoding::UTF8);\n        // Set destinations for the e-mail message.\n        MailAddress^ to = gcnew MailAddress(&quot;ben@contoso.com&quot;);\n        // Specify the message content.\n        MailMessage^ message = gcnew MailMessage(from, to);\n        message-&gt;Body = &quot;This is a test e-mail message sent&quot; +\n            &quot; by an application. &quot;;\n        // Include some non-ASCII characters in body and \n        // subject.\n        String^ someArrows = gcnew String(gcnew array&lt;wchar_t&gt;{L&#39;\\u2190&#39;, \n            L&#39;\\u2191&#39;, L&#39;\\u2192&#39;, L&#39;\\u2193&#39;});\n        message-&gt;Body += Environment::NewLine + someArrows;\n        message-&gt;BodyEncoding = System::Text::Encoding::UTF8;\n        message-&gt;Subject = &quot;test message 1&quot; + someArrows;\n        message-&gt;SubjectEncoding = System::Text::Encoding::UTF8;\n        // Set the method that is called back when the send\n        // operation ends.\n        client-&gt;SendCompleted += gcnew\n            SendCompletedEventHandler(SendCompletedCallback);\n        // The userState can be any object that allows your \n        // callback method to identify this send operation.\n        // For this example, the userToken is a string constant.\n        String^ userState = &quot;test message1&quot;;\n        client-&gt;SendAsync(message, userState);\n        Console::WriteLine(&quot;Sending message... press c to&quot; +\n            &quot; cancel mail. Press any other key to exit.&quot;);\n        String^ answer = Console::ReadLine();\n        // If the user canceled the send, and mail hasn&#39;t been \n        // sent yet,then cancel the pending operation.\n        if (answer-&gt;ToLower()-&gt;StartsWith(&quot;c&quot;) &amp;&amp; mailSent == false)\n        {\n            client-&gt;SendAsyncCancel();\n        }\n        // Clean up.\n        delete message;\n        client = nullptr;\n        Console::WriteLine(&quot;Goodbye.&quot;);\n    }\n    else\n    {\n        Console::WriteLine(&quot;Please give SMTP server name!&quot;);\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"NclMailAsync#1\">\nImports System\nImports System.Net\nImports System.Net.Mail\nImports System.Net.Mime\nImports System.Threading\nImports System.ComponentModel\nNamespace Examples.SmptExamples.Async\n    Public Class SimpleAsynchronousExample\n        Private Shared mailSent As Boolean = False\n        Private Shared Sub SendCompletedCallback(ByVal sender As Object, ByVal e As AsyncCompletedEventArgs)\n            &#39; Get the unique identifier for this asynchronous operation.\n            Dim token As String = CStr(e.UserState)\n\n            If e.Cancelled Then\n                Console.WriteLine(&quot;[{0}] Send canceled.&quot;, token)\n            End If\n            If e.Error IsNot Nothing Then\n                Console.WriteLine(&quot;[{0}] {1}&quot;, token, e.Error.ToString())\n            Else\n                Console.WriteLine(&quot;Message sent.&quot;)\n            End If\n            mailSent = True\n        End Sub\n        Public Shared Sub Main(ByVal args() As String)\n            &#39; Command line argument must the the SMTP host.\n            Dim client As New SmtpClient(args(0))\n            &#39; Specify the e-mail sender.\n            &#39; Create a mailing address that includes a UTF8 character\n            &#39; in the display name.\n            Dim [from] As New MailAddress(&quot;jane@contoso.com&quot;, &quot;Jane &quot; &amp; ChrW(&amp;HD8) &amp; &quot; Clayton&quot;, System.Text.Encoding.UTF8)\n            &#39; Set destinations for the e-mail message.\n            Dim [to] As New MailAddress(&quot;ben@contoso.com&quot;)\n            &#39; Specify the message content.\n            Dim message As New MailMessage([from], [to])\n            message.Body = &quot;This is a test e-mail message sent by an application. &quot;\n            &#39; Include some non-ASCII characters in body and subject.\n            Dim someArrows As New String(New Char() {ChrW(&amp;H2190), ChrW(&amp;H2191), ChrW(&amp;H2192), ChrW(&amp;H2193)})\n            message.Body += Environment.NewLine &amp; someArrows\n            message.BodyEncoding = System.Text.Encoding.UTF8\n            message.Subject = &quot;test message 1&quot; &amp; someArrows\n            message.SubjectEncoding = System.Text.Encoding.UTF8\n            &#39; Set the method that is called back when the send operation ends.\n            AddHandler client.SendCompleted, AddressOf SendCompletedCallback\n            &#39; The userState can be any object that allows your callback \n            &#39; method to identify this send operation.\n            &#39; For this example, the userToken is a string constant.\n            Dim userState As String = &quot;test message1&quot;\n            client.SendAsync(message, userState)\n            Console.WriteLine(&quot;Sending message... press c to cancel mail. Press any other key to exit.&quot;)\n            Dim answer As String = Console.ReadLine()\n            &#39; If the user canceled the send, and mail hasn&#39;t been sent yet,\n            &#39; then cancel the pending operation.\n            If answer.StartsWith(&quot;c&quot;) AndAlso mailSent = False Then\n                client.SendAsyncCancel()\n            End If\n            &#39; Clean up.\n            message.Dispose()\n            Console.WriteLine(&quot;Goodbye.&quot;)\n        End Sub\n    End Class\nEnd Namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Net.Mail.SmtpClient.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Net.Mail.SmtpClient.yml\">\r\n<meta name=\"APIName\" content=\"System.Net.Mail.SmtpClient\">\r\n<meta name=\"APIName\" content=\"System.Net.Mail.SmtpClient..ctor\">\r\n<meta name=\"APIName\" content=\"System.Net.Mail.SmtpClient.ClientCertificates\">\r\n<meta name=\"APIName\" content=\"System.Net.Mail.SmtpClient.Credentials\">\r\n<meta name=\"APIName\" content=\"System.Net.Mail.SmtpClient.DeliveryFormat\">\r\n<meta name=\"APIName\" content=\"System.Net.Mail.SmtpClient.DeliveryMethod\">\r\n<meta name=\"APIName\" content=\"System.Net.Mail.SmtpClient.Dispose\">\r\n<meta name=\"APIName\" content=\"System.Net.Mail.SmtpClient.EnableSsl\">\r\n<meta name=\"APIName\" content=\"System.Net.Mail.SmtpClient.Host\">\r\n<meta name=\"APIName\" content=\"System.Net.Mail.SmtpClient.OnSendCompleted\">\r\n<meta name=\"APIName\" content=\"System.Net.Mail.SmtpClient.PickupDirectoryLocation\">\r\n<meta name=\"APIName\" content=\"System.Net.Mail.SmtpClient.Port\">\r\n<meta name=\"APIName\" content=\"System.Net.Mail.SmtpClient.Send\">\r\n<meta name=\"APIName\" content=\"System.Net.Mail.SmtpClient.SendAsync\">\r\n<meta name=\"APIName\" content=\"System.Net.Mail.SmtpClient.SendAsyncCancel\">\r\n<meta name=\"APIName\" content=\"System.Net.Mail.SmtpClient.SendCompleted\">\r\n<meta name=\"APIName\" content=\"System.Net.Mail.SmtpClient.add_SendCompleted\">\r\n<meta name=\"APIName\" content=\"System.Net.Mail.SmtpClient.remove_SendCompleted\">\r\n<meta name=\"APIName\" content=\"System.Net.Mail.SmtpClient.SendMailAsync\">\r\n<meta name=\"APIName\" content=\"System.Net.Mail.SmtpClient.ServicePoint\">\r\n<meta name=\"APIName\" content=\"System.Net.Mail.SmtpClient.TargetName\">\r\n<meta name=\"APIName\" content=\"System.Net.Mail.SmtpClient.Timeout\">\r\n<meta name=\"APIName\" content=\"System.Net.Mail.SmtpClient.UseDefaultCredentials\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"cf42fd72-6870-037c-5ef5-f3273cf0cee0\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\o2y0\\s\\fulldocset\\xml\\System.Net.Mail\\SmtpClient.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Allows applications to send e-mail by using the Simple Mail Transfer Protocol (SMTP).\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Net.Mail/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Net.Mail.SmtpClient\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Net.Mail.SmtpClient.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Net.Mail.SmtpClient.yml","open_to_public_contributors":true,"api_name":["System.Net.Mail.SmtpClient","System.Net.Mail.SmtpClient..ctor","System.Net.Mail.SmtpClient.ClientCertificates","System.Net.Mail.SmtpClient.Credentials","System.Net.Mail.SmtpClient.DeliveryFormat","System.Net.Mail.SmtpClient.DeliveryMethod","System.Net.Mail.SmtpClient.Dispose","System.Net.Mail.SmtpClient.EnableSsl","System.Net.Mail.SmtpClient.Host","System.Net.Mail.SmtpClient.OnSendCompleted","System.Net.Mail.SmtpClient.PickupDirectoryLocation","System.Net.Mail.SmtpClient.Port","System.Net.Mail.SmtpClient.Send","System.Net.Mail.SmtpClient.SendAsync","System.Net.Mail.SmtpClient.SendAsyncCancel","System.Net.Mail.SmtpClient.SendCompleted","System.Net.Mail.SmtpClient.add_SendCompleted","System.Net.Mail.SmtpClient.remove_SendCompleted","System.Net.Mail.SmtpClient.SendMailAsync","System.Net.Mail.SmtpClient.ServicePoint","System.Net.Mail.SmtpClient.TargetName","System.Net.Mail.SmtpClient.Timeout","System.Net.Mail.SmtpClient.UseDefaultCredentials"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Net.Mail.SmtpClient","System::Net::Mail::SmtpClient","System.Net.Mail.SmtpClient.#ctor","System::Net::Mail::SmtpClient::#ctor","System.Net.Mail.SmtpClient.ClientCertificates","System::Net::Mail::SmtpClient::ClientCertificates","System.Net.Mail.SmtpClient.Credentials","System::Net::Mail::SmtpClient::Credentials","System.Net.Mail.SmtpClient.DeliveryFormat","System::Net::Mail::SmtpClient::DeliveryFormat","System.Net.Mail.SmtpClient.DeliveryMethod","System::Net::Mail::SmtpClient::DeliveryMethod","System.Net.Mail.SmtpClient.Dispose","System::Net::Mail::SmtpClient::Dispose","System.Net.Mail.SmtpClient.EnableSsl","System::Net::Mail::SmtpClient::EnableSsl","System.Net.Mail.SmtpClient.Host","System::Net::Mail::SmtpClient::Host","System.Net.Mail.SmtpClient.OnSendCompleted","System::Net::Mail::SmtpClient::OnSendCompleted","System.Net.Mail.SmtpClient.PickupDirectoryLocation","System::Net::Mail::SmtpClient::PickupDirectoryLocation","System.Net.Mail.SmtpClient.Port","System::Net::Mail::SmtpClient::Port","System.Net.Mail.SmtpClient.Send","System::Net::Mail::SmtpClient::Send","System.Net.Mail.SmtpClient.SendAsync","System::Net::Mail::SmtpClient::SendAsync","System.Net.Mail.SmtpClient.SendAsyncCancel","System::Net::Mail::SmtpClient::SendAsyncCancel","System.Net.Mail.SmtpClient.SendCompleted","System::Net::Mail::SmtpClient::SendCompleted","System.Net.Mail.SmtpClient.SendMailAsync","System::Net::Mail::SmtpClient::SendMailAsync","System.Net.Mail.SmtpClient.ServicePoint","System::Net::Mail::SmtpClient::ServicePoint","System.Net.Mail.SmtpClient.TargetName","System::Net::Mail::SmtpClient::TargetName","System.Net.Mail.SmtpClient.Timeout","System::Net::Mail::SmtpClient::Timeout","System.Net.Mail.SmtpClient.UseDefaultCredentials","System::Net::Mail::SmtpClient::UseDefaultCredentials"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"cf42fd72-6870-037c-5ef5-f3273cf0cee0","original_ecmaxml_local_path":"W:\\o2y0\\s\\fulldocset\\xml\\System.Net.Mail\\SmtpClient.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Net.Mail/SmtpClient.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"SmtpClient class | Microsoft Docs","_op_ogTitle":"SmtpClient class","description":"Allows applications to send e-mail by using the Simple Mail Transfer Protocol (SMTP).\n","toc_asset_id":"_splitted/System.Net.Mail/toc.json","toc_rel":"_splitted/System.Net.Mail/toc.json","source_url":"","ms.assetid":"System.Net.Mail.SmtpClient","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.net.mail.smtpclient","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.net.mail.smtpclient","fileRelativePath":"System.Net.Mail.SmtpClient.html"},"themesRelativePathToOutputRoot":"_themes/"}