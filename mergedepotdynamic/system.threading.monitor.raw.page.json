{"content":"    \r\n    <h1 id=\"System_Threading_Monitor\">\r\n      <span class=\"lang-csharp\">Monitor</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides a mechanism that synchronizes access to objects.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic static class Monitor</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Monitor</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The Monitor class allows you to synchronize access to a region of code by taking and releasing a lock on a particular object by calling the <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Enter_\" data-linktype=\"relative-path\">Enter</a>, <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_TryEnter_\" data-linktype=\"relative-path\">TryEnter</a>, and <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Exit_\" data-linktype=\"relative-path\">Exit</a> methods. Object locks provide the ability to restrict access to a block of code, commonly called a critical section. While a thread owns the lock for an object, no other thread can acquire that lock. You can also use the Monitor class to ensure that no other thread is allowed to access a section of application code being executed by the lock owner, unless the other thread is executing the code using a different locked object.  </p>\n<p> In this article:  </p>\n<p> <a href=\"#Overview\" data-linktype=\"self-bookmark\">The Monitor class: An overview</a><br> <a href=\"#Lock\" data-linktype=\"self-bookmark\">The lock object</a><br> <a href=\"#CriticalSection\" data-linktype=\"self-bookmark\">The critical section</a><br> <a href=\"#Pulse\" data-linktype=\"self-bookmark\">Pulse, PulseAll, and Wait</a><br> <a href=\"#WaitHandles\" data-linktype=\"self-bookmark\">Monitors and wait handles</a>  </p>\n<p><a name=\"Overview\"></a>   </p>\n<h2 id=\"the-monitor-class-an-overview\">The Monitor class: An overview</h2>\n<p> Monitor has the following features:  </p>\n<ul>\n<li><p>It is associated with an object on demand.  </p>\n</li>\n<li><p>It is unbound, which means it can be called directly from any context.  </p>\n</li>\n<li><p>An instance of the Monitor class cannot be created; the methods of the Monitor class are all static. Each method is passed the synchronized object that controls access to the critical section.  </p>\n</li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> Use the Monitor class to lock objects other than strings (that is, reference types other than <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>), not value types. For details, see the overloads of the <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Enter_\" data-linktype=\"relative-path\">Enter</a> method and <a href=\"#Lock\" data-linktype=\"self-bookmark\">The lock object</a> section later in this article.  </p>\n</div>\n<p> The following table describes the actions that can be taken by threads that access synchronized objects:  </p>\n<table>\n<thead>\n<tr>\n<th>Action</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Enter_\" data-linktype=\"relative-path\">Enter</a>, <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_TryEnter_\" data-linktype=\"relative-path\">TryEnter</a></td>\n<td>Acquires a lock for an object. This action also marks the beginning of a critical section. No other thread can enter the critical section unless it is executing the instructions in the critical section using a different locked object.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Wait_\" data-linktype=\"relative-path\">Wait</a></td>\n<td>Releases the lock on an object in order to permit other threads to lock and access the object. The calling thread waits while another thread accesses the object. Pulse signals are used to notify waiting threads about changes to an object&#39;s state.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Pulse_\" data-linktype=\"relative-path\">Pulse</a> (signal), <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_PulseAll_\" data-linktype=\"relative-path\">PulseAll</a></td>\n<td>Sends a signal to one or more waiting threads. The signal notifies a waiting thread that the state of the locked object has changed, and the owner of the lock is ready to release the lock. The waiting thread is placed in the object&#39;s ready queue so that it might eventually receive the lock for the object. Once the thread has the lock, it can check the new state of the object to see if the required state has been reached.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Exit_\" data-linktype=\"relative-path\">Exit</a></td>\n<td>Releases the lock on an object. This action also marks the end of a critical section protected by the locked object.</td>\n</tr>\n</tbody>\n</table>\n<p> Beginning with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v40-long-md.md&quot; -->.NET Framework 4<!--END INCLUDE -->, there are two sets of overloads for the <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Enter_\" data-linktype=\"relative-path\">Enter</a> and <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_TryEnter_\" data-linktype=\"relative-path\">TryEnter</a> methods. One set of overloads has a <code>ref</code> (in C#) or <code>ByRef</code> (in Visual Basic) <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> parameter that is atomically set to <code>true</code> if the lock is acquired, even if an exception is thrown when acquiring the lock. Use these overloads if it is critical to release the lock in all cases, even when the resources the lock is protecting might not be in a consistent state.  </p>\n<p><a name=\"Lock\"></a>   </p>\n<h2 id=\"the-lock-object\">The lock object</h2>\n<p> The Monitor class consists of <code>static</code> (in C#) or  <code>Shared</code> (in Visual Basic) methods that operate on an object that controls access to the critical section.  The following information is maintained for each synchronized object:  </p>\n<ul>\n<li><p>A reference to the thread that currently holds the lock.  </p>\n</li>\n<li><p>A reference to a ready queue, which contains the threads that are ready to obtain the lock.  </p>\n</li>\n<li><p>A reference to a waiting queue, which contains the threads that are waiting for notification of a change in the state of the locked object.  </p>\n<p>Monitor locks objects (that is, reference types), not value types. While you can pass a value type to <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Enter_\" data-linktype=\"relative-path\">Enter</a> and <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Exit_\" data-linktype=\"relative-path\">Exit</a>, it is boxed separately for each call. Since each call creates a separate object, <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Enter_\" data-linktype=\"relative-path\">Enter</a> never blocks, and the code it is supposedly protecting is not really synchronized. In addition, the object passed to <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Exit_\" data-linktype=\"relative-path\">Exit</a> is different from the object passed to <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Enter_\" data-linktype=\"relative-path\">Enter</a>, so Monitor throws <a class=\"xref\" href=\"system.threading.synchronizationlockexception\" data-linktype=\"relative-path\">SynchronizationLockException</a> exception with the message &quot;Object synchronization method was called from an unsynchronized block of code.&quot;  </p>\n<p>The following example illustrates this problem. It launches ten tasks, each of which just sleeps for 250 milliseconds. Each task then updates a counter variable, <code>nTasks</code>, which is intended to count the number of tasks that actually launched and executed. Because <code>nTasks</code> is a global variable that can be updated by multiple tasks simultaneously, a monitor is used to protect it from simultaneous modification by multiple tasks. However, as the output from the example shows, each of the tasks throws a <a class=\"xref\" href=\"system.threading.synchronizationlockexception\" data-linktype=\"relative-path\">SynchronizationLockException</a> exception.  </p>\n<pre><code class=\"lang-cs\" name=\"Conceptual.Monitors#2\">using System;\nusing System.Collections.Generic;\nusing System.Threading;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n\n      int nTasks = 0;\n      List&lt;Task&gt; tasks = new List&lt;Task&gt;();\n      \n      try {\n         for (int ctr = 0; ctr &lt; 10; ctr++)\n            tasks.Add(Task.Run( () =&gt; { // Instead of doing some work, just sleep.\n                                        Thread.Sleep(250);\n                                        // Increment the number of tasks.\n                                        Monitor.Enter(nTasks);\n                                        try {\n                                           nTasks += 1;\n                                        }\n                                        finally {\n                                           Monitor.Exit(nTasks);\n                                        }\n                                      } ));\n         Task.WaitAll(tasks.ToArray());\n         Console.WriteLine(&quot;{0} tasks started and executed.&quot;, nTasks);\n      }\n      catch (AggregateException e) {\n         String msg = String.Empty;\n         foreach (var ie in e.InnerExceptions) {\n            Console.WriteLine(&quot;{0}&quot;, ie.GetType().Name);\n            if (! msg.Contains(ie.Message))\n               msg += ie.Message + Environment.NewLine;\n         }\n         Console.WriteLine(&quot;\\nException Message(s):&quot;);\n         Console.WriteLine(msg);\n      }\n   }\n}\n// The example displays the following output:\n//    SynchronizationLockException\n//    SynchronizationLockException\n//    SynchronizationLockException\n//    SynchronizationLockException\n//    SynchronizationLockException\n//    SynchronizationLockException\n//    SynchronizationLockException\n//    SynchronizationLockException\n//    SynchronizationLockException\n//    SynchronizationLockException\n//\n//    Exception Message(s):\n//    Object synchronization method was called from an unsynchronized block of code.\n</code></pre><pre><code class=\"lang-vb\" name=\"Conceptual.Monitors#2\">Imports System.Collections.Generic\nImports System.Threading\nImports System.Threading.Tasks\n\nModule Example\n   Public Sub Main()\n      Dim nTasks As Integer = 0\n      Dim tasks As New List(Of Task)()\n\n      Try\n         For ctr As Integer = 0 To 9\n            tasks.Add(Task.Run( Sub()\n                                   &#39; Instead of doing some work, just sleep.\n                                   Thread.Sleep(250)\n                                   &#39; Increment the number of tasks.\n                                   Monitor.Enter(nTasks)\n                                   Try\n                                      nTasks += 1\n                                   Finally\n                                      Monitor.Exit(nTasks)\n                                   End Try\n                                End Sub))\n         Next\n         Task.WaitAll(tasks.ToArray())\n         Console.WriteLine(&quot;{0} tasks started and executed.&quot;, nTasks)\n      Catch e As AggregateException\n         Dim msg AS String = String.Empty\n         For Each ie In e.InnerExceptions\n            Console.WriteLine(&quot;{0}&quot;, ie.GetType().Name)\n            If Not msg.Contains(ie.Message) Then\n               msg += ie.Message + Environment.NewLine\n            End If\n         Next\n         Console.WriteLine(vbCrLf + &quot;Exception Message(s):&quot;)\n         Console.WriteLine(msg)\n      End Try\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    SynchronizationLockException\n&#39;    SynchronizationLockException\n&#39;    SynchronizationLockException\n&#39;    SynchronizationLockException\n&#39;    SynchronizationLockException\n&#39;    SynchronizationLockException\n&#39;    SynchronizationLockException\n&#39;    SynchronizationLockException\n&#39;    SynchronizationLockException\n&#39;    SynchronizationLockException\n&#39;\n&#39;    Exception Message(s):\n&#39;    Object synchronization method was called from an unsynchronized block of code.\n</code></pre><p>Each task throws a <a class=\"xref\" href=\"system.threading.synchronizationlockexception\" data-linktype=\"relative-path\">SynchronizationLockException</a> exception because the <code>nTasks</code> variable is boxed before the call to the <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Enter_\" data-linktype=\"relative-path\">Enter</a> method in each task. In other words, each method call is passed a separate variable that is independent of the others. <code>nTasks</code> is boxed again in the call to the <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Exit_\" data-linktype=\"relative-path\">Exit</a> method. Once again, this creates ten new boxed variables, which are independent of each other, <code>nTasks</code>, and the ten boxed variables created in the call to the <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Enter_\" data-linktype=\"relative-path\">Enter</a> method. The exception is thrown, then, because our code is attempting to release a lock on a newly created variable that was not previously locked.  </p>\n<p>Although you can box a value type variable before calling <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Enter_\" data-linktype=\"relative-path\">Enter</a> and <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Exit_\" data-linktype=\"relative-path\">Exit</a>, as shown in the following example, and pass the same boxed object to both methods, there is no advantage to doing this. Changes to the unboxed variable are not reflected in the boxed copy, and there is no way to change the value of the boxed copy.  </p>\n<pre><code class=\"lang-cs\" name=\"Conceptual.Monitors#3\">using System;\nusing System.Collections.Generic;\nusing System.Threading;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n\n      int nTasks = 0;\n      object o = nTasks;\n      List&lt;Task&gt; tasks = new List&lt;Task&gt;();\n      \n      try {\n         for (int ctr = 0; ctr &lt; 10; ctr++)\n            tasks.Add(Task.Run( () =&gt; { // Instead of doing some work, just sleep.\n                                        Thread.Sleep(250);\n                                        // Increment the number of tasks.\n                                        Monitor.Enter(o);\n                                        try {\n                                           nTasks++;\n                                        }\n                                        finally {\n                                           Monitor.Exit(o);\n                                        }\n                                      } ));\n         Task.WaitAll(tasks.ToArray());\n         Console.WriteLine(&quot;{0} tasks started and executed.&quot;, nTasks);\n      }\n      catch (AggregateException e) {\n         String msg = String.Empty;\n         foreach (var ie in e.InnerExceptions) {\n            Console.WriteLine(&quot;{0}&quot;, ie.GetType().Name);\n            if (! msg.Contains(ie.Message))\n               msg += ie.Message + Environment.NewLine;\n         }\n         Console.WriteLine(&quot;\\nException Message(s):&quot;);\n         Console.WriteLine(msg);\n      }\n   }\n}\n// The example displays the following output:\n//        10 tasks started and executed.\n</code></pre><pre><code class=\"lang-vb\" name=\"Conceptual.Monitors#3\">Imports System.Collections.Generic\nImports System.Threading\nImports System.Threading.Tasks\n\nModule Example\n   Public Sub Main()\n      Dim nTasks As Integer = 0\n      Dim o As Object = nTasks\n      Dim tasks As New List(Of Task)()\n\n      Try\n         For ctr As Integer = 0 To 9\n            tasks.Add(Task.Run( Sub()\n                                   &#39; Instead of doing some work, just sleep.\n                                   Thread.Sleep(250)\n                                   &#39; Increment the number of tasks.\n                                   Monitor.Enter(o)\n                                   Try\n                                      nTasks += 1\n                                   Finally\n                                      Monitor.Exit(o)\n                                   End Try\n                                End Sub))\n         Next\n         Task.WaitAll(tasks.ToArray())\n         Console.WriteLine(&quot;{0} tasks started and executed.&quot;, nTasks)\n      Catch e As AggregateException\n         Dim msg AS String = String.Empty\n         For Each ie In e.InnerExceptions\n            Console.WriteLine(&quot;{0}&quot;, ie.GetType().Name)\n            If Not msg.Contains(ie.Message) Then\n               msg += ie.Message + Environment.NewLine\n            End If\n         Next\n         Console.WriteLine(vbCrLf + &quot;Exception Message(s):&quot;)\n         Console.WriteLine(msg)\n      End Try\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       10 tasks started and executed.\n</code></pre><p>When selecting an object on which to synchronize, you should lock only on private or internal objects. Locking on external objects might result in deadlocks, because unrelated code could choose the same objects to lock on for different purposes.  </p>\n<p>Note that you can synchronize on an object in multiple application domains if the object used for the lock derives from <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>.  </p>\n</li>\n</ul>\n<p><a name=\"CriticalSection\"></a>   </p>\n<h2 id=\"the-critical-section\">The critical section</h2>\n<p> Use the <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Enter_\" data-linktype=\"relative-path\">Enter</a> and <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Exit_\" data-linktype=\"relative-path\">Exit</a> methods to mark the beginning and end of a critical section.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The functionality provided by the <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Enter_\" data-linktype=\"relative-path\">Enter</a> and <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Exit_\" data-linktype=\"relative-path\">Exit</a> methods is identical to that provided by the <a href=\"../Topic/lock%20Statement%20(C%23%20Reference).md\" data-linktype=\"relative-path\">lock</a> statement in C# and the <a href=\"../Topic/SyncLock%20Statement.md\" data-linktype=\"relative-path\">SyncLock</a> statement in Visual Basic, except that the language constructs wrap the <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Enter_System_Object_System_Boolean__\" data-linktype=\"relative-path\">System.Threading.Monitor.Enter(Object,Boolean)</a> method overload and the <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Exit_\" data-linktype=\"relative-path\">Exit</a> method in a <code>try</code>â€¦<code>finally</code> block to ensure that the monitor is released.  </p>\n</div>\n<p> If the critical section is a set of contiguous instructions, then the lock acquired by the <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Enter_\" data-linktype=\"relative-path\">Enter</a> method guarantees that only a single thread can execute the enclosed code with the locked object. In this case, we recommend that you place that code in a <code>try</code> block and place the call to the <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Exit_\" data-linktype=\"relative-path\">Exit</a> method in a <code>finally</code> block. This ensures that the lock is released even if an exception occurs. The following code fragment illustrates this pattern.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Monitor.Class#2\">      // Define the lock object.\n      var obj = new Object();\n      \n      // Define the critical section.\n      Monitor.Enter(obj);\n      try {\n         // Code to execute one thread at a time.\n      }\n      // catch blocks go here.\n      finally {\n         Monitor.Exit(obj);\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Monitor.Class#2\">      &#39; Define the lock object.\n      Dim obj As New Object()\n      \n      &#39; Define the critical section.\n      Monitor.Enter(obj)\n      Try \n         &#39; Code to execute one thread at a time.\n\n      &#39; catch blocks go here.\n      Finally \n         Monitor.Exit(obj)\n      End Try\n</code></pre><p> This facility is typically used to synchronize access to a static or instance method of a class.  </p>\n<p> If a critical section spans an entire method, the locking facility can be achieved by placing the <a class=\"xref\" href=\"system.runtime.compilerservices.methodimplattribute\" data-linktype=\"relative-path\">System.Runtime.CompilerServices.MethodImplAttribute</a> on the method, and specifying the <a class=\"xref\" href=\"system.runtime.compilerservices.methodimploptions\" data-linktype=\"relative-path\">MethodImplOptions</a> value in the constructor of <a class=\"xref\" href=\"system.runtime.compilerservices.methodimplattribute\" data-linktype=\"relative-path\">System.Runtime.CompilerServices.MethodImplAttribute</a>. When you use this attribute, the <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Enter_\" data-linktype=\"relative-path\">Enter</a> and <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Exit_\" data-linktype=\"relative-path\">Exit</a> method calls are not needed. The following code fragment illustrates this pattern:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Monitor.Class#3\">   [MethodImplAttribute(MethodImplOptions.Synchronized)]\n   void MethodToLock()\n   {\n      // Method implementation.\n   } \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Monitor.Class#3\">   &lt;MethodImplAttribute(MethodImplOptions.Synchronized)&gt;\n   Sub MethodToLock()\n      &#39; Method implementation.\n   End Sub \n</code></pre><p> Note that the attribute causes the current thread to hold the lock until the method returns; if the lock can be released sooner, use the Monitor class, the C# <a href=\"../Topic/lock%20Statement%20(C%23%20Reference).md\" data-linktype=\"relative-path\">lock</a> statement, or the Visual Basic <a href=\"../Topic/SyncLock%20Statement.md\" data-linktype=\"relative-path\">SyncLock</a> statement inside of the method instead of the attribute.  </p>\n<p> While it is possible for the <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Enter_\" data-linktype=\"relative-path\">Enter</a> and <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Exit_\" data-linktype=\"relative-path\">Exit</a> statements that lock and release a given object to cross member or class boundaries or both, this practice is not recommended.  </p>\n<p><a name=\"Pulse\"></a>   </p>\n<h2 id=\"pulse-pulseall-and-wait\">Pulse, PulseAll, and Wait</h2>\n<p> Once a thread owns the lock and has entered the critical section that the lock protects, it can call the <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Wait_\" data-linktype=\"relative-path\">Wait</a>, <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Pulse_\" data-linktype=\"relative-path\">Pulse</a>, and <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_PulseAll_\" data-linktype=\"relative-path\">PulseAll</a> methods.  </p>\n<p> <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Wait_\" data-linktype=\"relative-path\">Wait</a> releases the lock if it is held, allows a waiting thread or threads to obtain the lock and enter the critical section,   and waits to be notified by a call to the <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Pulse_\" data-linktype=\"relative-path\">Pulse</a> or <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_PulseAll_\" data-linktype=\"relative-path\">PulseAll</a> method. When <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Wait_\" data-linktype=\"relative-path\">Wait</a> is notified, it returns and obtains the lock again.  </p>\n<p> Both <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Pulse_\" data-linktype=\"relative-path\">Pulse</a> and <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_PulseAll_\" data-linktype=\"relative-path\">PulseAll</a> signal for the next thread in the wait queue to proceed.  </p>\n<p><a name=\"WaitHandles\"></a>   </p>\n<h2 id=\"monitors-and-wait-handles\">Monitors and wait handles</h2>\n<p> It is important to note the distinction between the use of the Monitor class and <a class=\"xref\" href=\"system.threading.waithandle\" data-linktype=\"relative-path\">WaitHandle</a> objects.  </p>\n<ul>\n<li><p>The Monitor class is purely managed, fully portable, and might be more efficient in terms of operating-system resource requirements.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.threading.waithandle\" data-linktype=\"relative-path\">WaitHandle</a> objects represent operating-system waitable objects, are useful for synchronizing between managed and unmanaged code, and expose some advanced operating-system features like the ability to wait on many objects at once.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Monitor_Enter_System_Object_\" data-linktype=\"self-bookmark\">Enter(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Acquires an exclusive lock on the specified object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Monitor_Enter_System_Object_System_Boolean__\" data-linktype=\"self-bookmark\">Enter(Object,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Acquires an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Monitor_Exit_System_Object_\" data-linktype=\"self-bookmark\">Exit(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases an exclusive lock on the specified object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Monitor_IsEntered_System_Object_\" data-linktype=\"self-bookmark\">IsEntered(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the current thread holds the lock on the specified object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Monitor_Pulse_System_Object_\" data-linktype=\"self-bookmark\">Pulse(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Notifies a thread in the waiting queue of a change in the locked object&#39;s state.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Monitor_PulseAll_System_Object_\" data-linktype=\"self-bookmark\">PulseAll(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Notifies all waiting threads of a change in the object&#39;s state.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Monitor_TryEnter_System_Object_\" data-linktype=\"self-bookmark\">TryEnter(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Attempts to acquire an exclusive lock on the specified object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Monitor_TryEnter_System_Object_System_Boolean__\" data-linktype=\"self-bookmark\">TryEnter(Object,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Attempts to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Monitor_TryEnter_System_Object_System_Int32_\" data-linktype=\"self-bookmark\">TryEnter(Object,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Monitor_TryEnter_System_Object_System_TimeSpan_\" data-linktype=\"self-bookmark\">TryEnter(Object,TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Monitor_TryEnter_System_Object_System_Int32_System_Boolean__\" data-linktype=\"self-bookmark\">TryEnter(Object,Int32,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Monitor_TryEnter_System_Object_System_TimeSpan_System_Boolean__\" data-linktype=\"self-bookmark\">TryEnter(Object,TimeSpan,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Monitor_Wait_System_Object_\" data-linktype=\"self-bookmark\">Wait(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases the lock on an object and blocks the current thread until it reacquires the lock.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Monitor_Wait_System_Object_System_Int32_\" data-linktype=\"self-bookmark\">Wait(Object,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases the lock on an object and blocks the current thread until it reacquires the lock. If the specified time-out interval elapses, the thread enters the ready queue.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Monitor_Wait_System_Object_System_TimeSpan_\" data-linktype=\"self-bookmark\">Wait(Object,TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases the lock on an object and blocks the current thread until it reacquires the lock. If the specified time-out interval elapses, the thread enters the ready queue.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Monitor_Wait_System_Object_System_Int32_System_Boolean_\" data-linktype=\"self-bookmark\">Wait(Object,Int32,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases the lock on an object and blocks the current thread until it reacquires the lock. If the specified time-out interval elapses, the thread enters the ready queue. This method also specifies whether the synchronization domain for the context (if in a synchronized context) is exited before the wait and reacquired afterward.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Monitor_Wait_System_Object_System_TimeSpan_System_Boolean_\" data-linktype=\"self-bookmark\">Wait(Object,TimeSpan,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases the lock on an object and blocks the current thread until it reacquires the lock. If the specified time-out interval elapses, the thread enters the ready queue. Optionally exits the synchronization domain for the synchronized context before the wait and reacquires the domain afterward.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Monitor_Enter_System_Object_\">\r\n    \r\n            <a id=\"System_Threading_Monitor_Enter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Enter(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Acquires an exclusive lock on the specified object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Enter (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object on which to acquire the monitor lock.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>obj</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use <code>Enter</code> to acquire the <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a> on the object passed as the parameter. If another thread has executed an <code>Enter</code> on the object but has not yet executed the corresponding <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Exit_\" data-linktype=\"relative-path\">Exit</a>, the current thread will block until the other thread releases the object. It is legal for the same thread to invoke <code>Enter</code> more than once without it blocking; however, an equal number of <code>Exit</code> calls must be invoked before other threads waiting on the object will unblock.  </p>\n<p> Use <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a> to lock objects (that is, reference types), not value types. When you pass a value type variable to <code>Enter</code>, it is boxed as an object. If you pass the same variable to <code>Enter</code> again, it is boxed as a separate object, and the thread does not block. In this case, the code that <code>Monitor</code> is supposedly protecting is not protected. Furthermore, when you pass the variable to <code>Exit</code>, still another separate object is created. Because the object passed to <code>Exit</code> is different from the object passed to <code>Enter</code>, <code>Monitor</code> throws <a class=\"xref\" href=\"system.threading.synchronizationlockexception\" data-linktype=\"relative-path\">SynchronizationLockException</a>. For more information, see the conceptual topic <a href=\"../Topic/Monitors.md\" data-linktype=\"relative-path\">Monitors</a>.  </p>\n<p> <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_Interrupt_\" data-linktype=\"relative-path\">Interrupt</a> can interrupt threads that are waiting to enter a <code>Monitor</code> on an object. A <a class=\"xref\" href=\"system.threading.threadinterruptedexception\" data-linktype=\"relative-path\">ThreadInterruptedException</a> will be thrown.  </p>\n<p> Use a C# <code>try</code>â€¦<code>finally</code> block (<code>Try</code>â€¦<code>Finally</code> in Visual Basic) to ensure that you release the monitor, or use the C# <code>lock</code> statement (<code>SyncLock</code> statement in Visual Basic), which wraps the Enter and <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Exit_\" data-linktype=\"relative-path\">Exit</a> methods in a <code>try</code>â€¦<code>finally</code> block.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the <code>Enter</code> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"MonitorExmpl2#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Threading;\nusing namespace System::Collections::Generic;\nusing namespace System::Text;\n\ngeneric &lt;typename T&gt; public ref class SafeQueue\n{\nprivate:\n   // A queue that is protected by Monitor.\n   Queue&lt;T&gt;^ m_inputQueue;\n\npublic:\n   SafeQueue()\n   {\n      m_inputQueue = gcnew Queue&lt;T&gt;();\n   };\n\n   // Lock the queue and add an element.\n   void Enqueue(T qValue)\n   {\n      // Request the lock, and block until it is obtained.\n      Monitor::Enter(m_inputQueue);\n      try\n      {\n         // When the lock is obtained, add an element.\n         m_inputQueue-&gt;Enqueue(qValue);\n      }\n      finally\n      {\n         // Ensure that the lock is released.\n         Monitor::Exit(m_inputQueue);\n      }\n   };\n\n   // Try to add an element to the queue: Add the element to the queue \n   // only if the lock is immediately available.\n   bool TryEnqueue(T qValue)\n   {\n      // Request the lock.\n      if (Monitor::TryEnter(m_inputQueue))\n      {\n         try\n         {\n            m_inputQueue-&gt;Enqueue(qValue);\n         }\n         finally\n         {\n            // Ensure that the lock is released.\n            Monitor::Exit(m_inputQueue);\n         }\n         return true;\n      }\n      else\n      {\n         return false;\n      }\n   };\n\n   // Try to add an element to the queue: Add the element to the queue \n   // only if the lock becomes available during the specified time\n   // interval.\n   bool TryEnqueue(T qValue, int waitTime)\n   {\n      // Request the lock.\n      if (Monitor::TryEnter(m_inputQueue, waitTime))\n      {\n         try\n         {\n            m_inputQueue-&gt;Enqueue(qValue);\n         }\n         finally\n         {\n            // Ensure that the lock is released.\n            Monitor::Exit(m_inputQueue);\n         }\n         return true;\n      }\n      else\n      {\n         return false;\n      }\n   };\n\n   // Lock the queue and dequeue an element.\n   T Dequeue()\n   {\n      T retval;\n\n      // Request the lock, and block until it is obtained.\n      Monitor::Enter(m_inputQueue);\n      try\n      {\n         // When the lock is obtained, dequeue an element.\n         retval = m_inputQueue-&gt;Dequeue();\n      }\n      finally\n      {\n         // Ensure that the lock is released.\n         Monitor::Exit(m_inputQueue);\n      }\n\n      return retval;\n   };\n\n   // Delete all elements that equal the given object.\n   int Remove(T qValue)\n   {\n      int removedCt = 0;\n\n      // Wait until the lock is available and lock the queue.\n      Monitor::Enter(m_inputQueue);\n      try\n      {\n         int counter = m_inputQueue-&gt;Count;\n         while (counter &gt; 0)\n            // Check each element.\n         {\n            T elem = m_inputQueue-&gt;Dequeue();\n            if (!elem-&gt;Equals(qValue))\n            {\n               m_inputQueue-&gt;Enqueue(elem);\n            }\n            else\n            {\n               // Keep a count of items removed.\n               removedCt += 1;\n            }\n            counter = counter - 1;\n         }\n      }\n      finally\n      {\n         // Ensure that the lock is released.\n         Monitor::Exit(m_inputQueue);\n      }\n\n      return removedCt;\n   };\n\n   // Print all queue elements.\n   String^ PrintAllElements()\n   {\n      StringBuilder^ output = gcnew StringBuilder();\n\n      // Lock the queue.\n      Monitor::Enter(m_inputQueue);\n      try\n      {\n         for each ( T elem in m_inputQueue )\n         {\n            // Print the next element.\n            output-&gt;AppendLine(elem-&gt;ToString());\n         }\n      }\n      finally\n      {\n         // Ensure that the lock is released.\n         Monitor::Exit(m_inputQueue);\n      }\n\n      return output-&gt;ToString();\n   };\n};\n\npublic ref class Example\n{\nprivate:\n   static SafeQueue&lt;int&gt;^ q = gcnew SafeQueue&lt;int&gt;();\n   static int threadsRunning = 0;\n   static array&lt;array&lt;int&gt;^&gt;^ results = gcnew array&lt;array&lt;int&gt;^&gt;(3);\n\n   static void ThreadProc(Object^ state)\n   {\n      DateTime finish = DateTime::Now.AddSeconds(10);\n      Random^ rand = gcnew Random();\n      array&lt;int&gt;^ result = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n      int threadNum = (int) state;\n\n      while (DateTime::Now &lt; finish)\n\n      {\n         int what = rand-&gt;Next(250);\n         int how = rand-&gt;Next(100);\n\n         if (how &lt; 16)\n         {\n            q-&gt;Enqueue(what);\n            result[(int)ThreadResultIndex::EnqueueCt] += 1;\n         }\n         else if (how &lt; 32)\n         {\n            if (q-&gt;TryEnqueue(what))\n            {\n               result[(int)ThreadResultIndex::TryEnqueueSucceedCt] += 1;\n            }\n            else\n            {\n               result[(int)ThreadResultIndex::TryEnqueueFailCt] += 1;\n            }\n         }\n         else if (how &lt; 48)\n         {\n            // Even a very small wait significantly increases the success \n            // rate of the conditional enqueue operation.\n            if (q-&gt;TryEnqueue(what, 10))\n            {\n               result[(int)ThreadResultIndex::TryEnqueueWaitSucceedCt] += 1;\n            }\n            else\n            {\n               result[(int)ThreadResultIndex::TryEnqueueWaitFailCt] += 1;\n            }\n         }\n         else if (how &lt; 96)\n         {\n            result[(int)ThreadResultIndex::DequeueCt] += 1;\n            try\n            {\n               q-&gt;Dequeue();\n            }\n            catch (Exception^ ex)\n            {\n               result[(int)ThreadResultIndex::DequeueExCt] += 1;\n            }\n         }\n         else\n         {\n            result[(int)ThreadResultIndex::RemoveCt] += 1;\n            result[(int)ThreadResultIndex::RemovedCt] += q-&gt;Remove(what);\n         }         \n      }\n\n      results[threadNum] = result;\n\n      if (0 == Interlocked::Decrement(threadsRunning))      \n      {\n         StringBuilder^ sb = gcnew StringBuilder(\n            &quot;                               Thread 1 Thread 2 Thread 3    Total<br>&quot;);\n\n         for (int row = 0; row &lt; 9; row++)\n         {\n            int total = 0;\n            sb-&gt;Append(titles[row]);\n\n            for(int col = 0; col &lt; 3; col++)\n            {\n               sb-&gt;Append(String::Format(&quot;{0,9}&quot;, results[col][row]));\n               total += results[col][row];\n            }\n\n            sb-&gt;AppendLine(String::Format(&quot;{0,9}&quot;, total));\n         }\n\n         Console::WriteLine(sb-&gt;ToString());\n      }\n   };\n\n   static array&lt;String^&gt;^ titles = {\n      &quot;Enqueue                       &quot;, \n      &quot;TryEnqueue succeeded          &quot;, \n      &quot;TryEnqueue failed             &quot;, \n      &quot;TryEnqueue(T, wait) succeeded &quot;, \n      &quot;TryEnqueue(T, wait) failed    &quot;, \n      &quot;Dequeue attempts              &quot;, \n      &quot;Dequeue exceptions            &quot;, \n      &quot;Remove operations             &quot;, \n      &quot;Queue elements removed        &quot;};\n\n   enum class ThreadResultIndex\n   {\n      EnqueueCt, \n      TryEnqueueSucceedCt, \n      TryEnqueueFailCt, \n      TryEnqueueWaitSucceedCt, \n      TryEnqueueWaitFailCt, \n      DequeueCt, \n      DequeueExCt, \n      RemoveCt, \n      RemovedCt\n   };\n\npublic:\n   static void Demo()\n   {\n      Console::WriteLine(&quot;Working...&quot;);\n\n      for(int i = 0; i &lt; 3; i++)\n      {\n         Thread^ t = gcnew Thread(gcnew ParameterizedThreadStart(Example::ThreadProc));\n         t-&gt;Start(i);\n         Interlocked::Increment(threadsRunning);\n      }\n   };\n};\n\nvoid main()\n{\n   Example::Demo();\n}\n\n\n/* This example produces output similar to the following:\n\nWorking...\n                               Thread 1 Thread 2 Thread 3    Total\nEnqueue                          274718   513514   337895  1126127\nTryEnqueue succeeded             274502   513516   337480  1125498\nTryEnqueue failed                   119      235      141      495\nTryEnqueue(T, wait) succeeded    274552   513116   338532  1126200\nTryEnqueue(T, wait) failed            0        1        0        1\nDequeue attempts                 824038  1541866  1015006  3380910\nDequeue exceptions                12828    23416    14799    51043\nRemove operations                 68746   128218    84306   281270\nQueue elements removed            11464    22024    14470    47958\nQueue elements removed            2921     4690     2982    10593\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"MonitorExmpl2#1\">Imports System.Threading\nImports System.Collections.Generic\nImports System.Text\n\nClass SafeQueue(Of T)\n\n   &#39; A queue that is protected by Monitor.\n   Private m_inputQueue As New Queue(Of T)\n\n   &#39; Lock the queue and add an element.\n   Public Sub Enqueue(ByVal qValue As T)\n\n      &#39; Request the lock, and block until it is obtained.\n      Monitor.Enter(m_inputQueue)\n      Try\n         &#39; When the lock is obtained, add an element.\n         m_inputQueue.Enqueue(qValue)\n\n      Finally\n         &#39; Ensure that the lock is released.\n         Monitor.Exit(m_inputQueue)\n      End Try\n   End Sub\n\n   &#39; Try to add an element to the queue: Add the element to the queue \n   &#39; only if the lock is immediately available.\n   Public Function TryEnqueue(ByVal qValue As T) As Boolean\n\n      &#39; Request the lock.\n      If Monitor.TryEnter(m_inputQueue) Then\n         Try\n            m_inputQueue.Enqueue(qValue)\n\n         Finally\n            &#39; Ensure that the lock is released.\n            Monitor.Exit(m_inputQueue)\n         End Try\n         Return True\n      Else\n         Return False\n      End If\n   End Function\n\n   &#39; Try to add an element to the queue: Add the element to the queue \n   &#39; only if the lock becomes available during the specified time\n   &#39; interval.\n   Public Function TryEnqueue(ByVal qValue As T, ByVal waitTime As Integer) As Boolean\n\n      &#39; Request the lock.\n      If Monitor.TryEnter(m_inputQueue, waitTime) Then\n         Try\n            m_inputQueue.Enqueue(qValue)\n\n         Finally\n            &#39; Ensure that the lock is released.\n            Monitor.Exit(m_inputQueue)\n         End Try\n         Return True\n      Else\n         Return False\n      End If\n   End Function\n\n   &#39; Lock the queue and dequeue an element.\n   Public Function Dequeue() As T\n\n      Dim retval As T\n\n      &#39; Request the lock, and block until it is obtained.\n      Monitor.Enter(m_inputQueue)\n      Try\n         &#39; When the lock is obtained, dequeue an element.\n         retval = m_inputQueue.Dequeue()\n\n      Finally\n         &#39; Ensure that the lock is released.\n         Monitor.Exit(m_inputQueue)\n      End Try\n\n      Return retval\n   End Function\n\n   &#39; Delete all elements that equal the given object.\n   Public Function Remove(ByVal qValue As T) As Integer\n\n      Dim removedCt As Integer = 0\n\n      &#39; Wait until the lock is available and lock the queue.\n      Monitor.Enter(m_inputQueue)\n      Try\n         Dim counter As Integer = m_inputQueue.Count\n         While (counter &gt; 0)\n            &#39;Check each element.\n            Dim elem As T = m_inputQueue.Dequeue()\n            If Not elem.Equals(qValue) Then\n               m_inputQueue.Enqueue(elem)\n            Else\n               &#39; Keep a count of items removed.\n               removedCt += 1\n            End If\n            counter = counter - 1\n         End While\n\n      Finally\n         &#39; Ensure that the lock is released.\n         Monitor.Exit(m_inputQueue)\n      End Try\n\n      Return removedCt\n   End Function\n\n   &#39; Print all queue elements.\n   Public Function PrintAllElements() As String\n\n      Dim output As New StringBuilder()\n\n      &#39;Lock the queue.\n      Monitor.Enter(m_inputQueue)\n      Try\n         For Each elem As T In m_inputQueue\n            &#39; Print the next element.\n            output.AppendLine(elem.ToString())\n         Next\n\n      Finally\n         &#39; Ensure that the lock is released.\n         Monitor.Exit(m_inputQueue)\n      End Try\n\n      Return output.ToString()\n   End Function\nEnd Class\n\nPublic Class Example\n\n   Private Shared q As New SafeQueue(Of Integer)\n   Private Shared threadsRunning As Integer = 0\n   Private Shared results(2)() As Integer\n\n   Friend Shared Sub Main()\n\n      Console.WriteLine(&quot;Working...&quot;)\n\n      For i As Integer = 0 To 2\n\n         Dim t As New Thread(AddressOf ThreadProc)\n         t.Start(i)\n         Interlocked.Increment(threadsRunning)\n\n      Next i\n\n   End Sub\n\n   Private Shared Sub ThreadProc(ByVal state As Object)\n\n      Dim finish As DateTime = DateTime.Now.AddSeconds(10)\n      Dim rand As New Random()\n      Dim result() As Integer = { 0, 0, 0, 0, 0, 0, 0, 0, 0 }\n      Dim threadNum As Integer = CInt(state)\n\n      While (DateTime.Now &lt; finish)\n\n         Dim what As Integer = rand.Next(250)\n         Dim how As Integer = rand.Next(100)\n\n         If how &lt; 16 Then\n            q.Enqueue(what)\n            result(ThreadResultIndex.EnqueueCt) += 1\n         Else If how &lt; 32 Then\n            If q.TryEnqueue(what)\n               result(ThreadResultIndex.TryEnqueueSucceedCt) += 1\n            Else\n               result(ThreadResultIndex.TryEnqueueFailCt) += 1\n            End If\n         Else If how &lt; 48 Then\n            &#39; Even a very small wait significantly increases the success \n            &#39; rate of the conditional enqueue operation.\n            If q.TryEnqueue(what, 10)\n               result(ThreadResultIndex.TryEnqueueWaitSucceedCt) += 1\n            Else\n               result(ThreadResultIndex.TryEnqueueWaitFailCt) += 1\n            End If\n         Else If how &lt; 96 Then\n            result(ThreadResultIndex.DequeueCt) += 1\n            Try\n               q.Dequeue()\n            Catch\n               result(ThreadResultIndex.DequeueExCt) += 1\n            End Try\n         Else\n            result(ThreadResultIndex.RemoveCt) += 1\n            result(ThreadResultIndex.RemovedCt) += q.Remove(what)\n         End If\n         \n      End While\n\n      results(threadNum) = result\n\n      If 0 = Interlocked.Decrement(threadsRunning) Then\n      \n         Dim sb As New StringBuilder( _\n            &quot;                               Thread 1 Thread 2 Thread 3    Total&quot; &amp; vbLf)\n\n         For row As Integer = 0 To 8\n\n            Dim total As Integer = 0\n            sb.Append(titles(row))\n\n            For col As Integer = 0 To 2\n\n               sb.Append(String.Format(&quot;{0,9}&quot;, results(col)(row)))\n               total += results(col)(row)\n\n            Next col\n\n            sb.AppendLine(String.Format(&quot;{0,9}&quot;, total))\n\n         Next row\n\n         Console.WriteLine(sb.ToString())\n\n      End If     \n    \n   End Sub\n\n   Private Shared titles() As String = { _\n      &quot;Enqueue                       &quot;, _\n      &quot;TryEnqueue succeeded          &quot;, _\n      &quot;TryEnqueue failed             &quot;, _\n      &quot;TryEnqueue(T, wait) succeeded &quot;, _\n      &quot;TryEnqueue(T, wait) failed    &quot;, _\n      &quot;Dequeue attempts              &quot;, _\n      &quot;Dequeue exceptions            &quot;, _\n      &quot;Remove operations             &quot;, _\n      &quot;Queue elements removed        &quot;  _\n   }\n\n   Private Enum ThreadResultIndex\n      EnqueueCt\n      TryEnqueueSucceedCt\n      TryEnqueueFailCt\n      TryEnqueueWaitSucceedCt\n      TryEnqueueWaitFailCt\n      DequeueCt\n      DequeueExCt\n      RemoveCt\n      RemovedCt\n   End Enum\n\nEnd Class\n\n&#39; This example produces output similar to the following:\n&#39;\n&#39;Working...\n&#39;                               Thread 1 Thread 2 Thread 3    Total\n&#39;Enqueue                          294357   512164   302838  1109359\n&#39;TryEnqueue succeeded             294486   512403   303117  1110006\n&#39;TryEnqueue failed                   108      234      127      469\n&#39;TryEnqueue(T, wait) succeeded    294259   512796   302556  1109611\n&#39;TryEnqueue(T, wait) failed            1        1        1        3\n&#39;Dequeue attempts                 882266  1537993   907795  3328054\n&#39;Dequeue exceptions                12691    21474    13480    47645\n&#39;Remove operations                 74059   128715    76187   278961\n&#39;Queue elements removed            12667    22606    13219    48492\n</code></pre><pre><code class=\"lang-cs\" name=\"MonitorExmpl2#1\">using System;\nusing System.Threading;\nusing System.Collections.Generic;\nusing System.Text;\n\nclass SafeQueue&lt;T&gt;\n{\n   // A queue that is protected by Monitor.\n   private Queue&lt;T&gt; m_inputQueue = new Queue&lt;T&gt;();\n\n   // Lock the queue and add an element.\n   public void Enqueue(T qValue)\n   {\n      // Request the lock, and block until it is obtained.\n      Monitor.Enter(m_inputQueue);\n      try\n      {\n         // When the lock is obtained, add an element.\n         m_inputQueue.Enqueue(qValue);\n      }\n      finally\n      {\n         // Ensure that the lock is released.\n         Monitor.Exit(m_inputQueue);\n      }\n   }\n\n   // Try to add an element to the queue: Add the element to the queue \n   // only if the lock is immediately available.\n   public bool TryEnqueue(T qValue)\n   {\n      // Request the lock.\n      if (Monitor.TryEnter(m_inputQueue))\n      {\n         try\n         {\n            m_inputQueue.Enqueue(qValue);\n         }\n         finally\n         {\n            // Ensure that the lock is released.\n            Monitor.Exit(m_inputQueue);\n         }\n         return true;\n      }\n      else\n      {\n         return false;\n      }\n   }\n\n   // Try to add an element to the queue: Add the element to the queue \n   // only if the lock becomes available during the specified time\n   // interval.\n   public bool TryEnqueue(T qValue, int waitTime)\n   {\n      // Request the lock.\n      if (Monitor.TryEnter(m_inputQueue, waitTime))\n      {\n         try\n         {\n            m_inputQueue.Enqueue(qValue);\n         }\n         finally\n         {\n            // Ensure that the lock is released.\n            Monitor.Exit(m_inputQueue);\n         }\n         return true;\n      }\n      else\n      {\n         return false;\n      }\n   }\n\n   // Lock the queue and dequeue an element.\n   public T Dequeue()\n   {\n      T retval;\n\n      // Request the lock, and block until it is obtained.\n      Monitor.Enter(m_inputQueue);\n      try\n      {\n         // When the lock is obtained, dequeue an element.\n         retval = m_inputQueue.Dequeue();\n      }\n      finally\n      {\n         // Ensure that the lock is released.\n         Monitor.Exit(m_inputQueue);\n      }\n\n      return retval;\n   }\n\n   // Delete all elements that equal the given object.\n   public int Remove(T qValue)\n   {\n      int removedCt = 0;\n\n      // Wait until the lock is available and lock the queue.\n      Monitor.Enter(m_inputQueue);\n      try\n      {\n         int counter = m_inputQueue.Count;\n         while (counter &gt; 0)\n            // Check each element.\n         {\n            T elem = m_inputQueue.Dequeue();\n            if (!elem.Equals(qValue))\n            {\n               m_inputQueue.Enqueue(elem);\n            }\n            else\n            {\n               // Keep a count of items removed.\n               removedCt += 1;\n            }\n            counter = counter - 1;\n         }\n      }\n      finally\n      {\n         // Ensure that the lock is released.\n         Monitor.Exit(m_inputQueue);\n      }\n\n      return removedCt;\n   }\n\n   // Print all queue elements.\n   public string PrintAllElements()\n   {\n      StringBuilder output = new StringBuilder();\n\n      // Lock the queue.\n      Monitor.Enter(m_inputQueue);\n      try\n      {\n         foreach( T elem in m_inputQueue )\n         {\n            // Print the next element.\n            output.AppendLine(elem.ToString());\n         }\n      }\n      finally\n      {\n         // Ensure that the lock is released.\n         Monitor.Exit(m_inputQueue);\n      }\n\n      return output.ToString();\n   }\n}\n\npublic class Example\n{\n   private static SafeQueue&lt;int&gt; q = new SafeQueue&lt;int&gt;();\n   private static int threadsRunning = 0;\n   private static int[][] results = new int[3][];\n\n   static void Main()\n   {\n      Console.WriteLine(&quot;Working...&quot;);\n\n      for(int i = 0; i &lt; 3; i++)\n      {\n         Thread t = new Thread(ThreadProc);\n         t.Start(i);\n         Interlocked.Increment(ref threadsRunning);\n      }\n   }\n\n   private static void ThreadProc(object state)\n   {\n      DateTime finish = DateTime.Now.AddSeconds(10);\n      Random rand = new Random();\n      int[] result = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n      int threadNum = (int) state;\n\n      while (DateTime.Now &lt; finish)\n\n      {\n         int what = rand.Next(250);\n         int how = rand.Next(100);\n\n         if (how &lt; 16)\n         {\n            q.Enqueue(what);\n            result[(int)ThreadResultIndex.EnqueueCt] += 1;\n         }\n         else if (how &lt; 32)\n         {\n            if (q.TryEnqueue(what))\n            {\n               result[(int)ThreadResultIndex.TryEnqueueSucceedCt] += 1;\n            }\n            else\n            {\n               result[(int)ThreadResultIndex.TryEnqueueFailCt] += 1;\n            }\n         }\n         else if (how &lt; 48)\n         {\n            // Even a very small wait significantly increases the success \n            // rate of the conditional enqueue operation.\n            if (q.TryEnqueue(what, 10))\n            {\n               result[(int)ThreadResultIndex.TryEnqueueWaitSucceedCt] += 1;\n            }\n            else\n            {\n               result[(int)ThreadResultIndex.TryEnqueueWaitFailCt] += 1;\n            }\n         }\n         else if (how &lt; 96)\n         {\n            result[(int)ThreadResultIndex.DequeueCt] += 1;\n            try\n            {\n               q.Dequeue();\n            }\n            catch\n            {\n               result[(int)ThreadResultIndex.DequeueExCt] += 1;\n            }\n         }\n         else\n         {\n            result[(int)ThreadResultIndex.RemoveCt] += 1;\n            result[(int)ThreadResultIndex.RemovedCt] += q.Remove(what);\n         }         \n      }\n\n      results[threadNum] = result;\n\n      if (0 == Interlocked.Decrement(ref threadsRunning))      \n      {\n         StringBuilder sb = new StringBuilder(\n            &quot;                               Thread 1 Thread 2 Thread 3    Total<br>&quot;);\n\n         for(int row = 0; row &lt; 9; row++)\n         {\n            int total = 0;\n            sb.Append(titles[row]);\n\n            for(int col = 0; col &lt; 3; col++)\n            {\n               sb.Append(String.Format(&quot;{0,9}&quot;, results[col][row]));\n               total += results[col][row];\n            }\n\n            sb.AppendLine(String.Format(&quot;{0,9}&quot;, total));\n         }\n\n         Console.WriteLine(sb.ToString());\n      }\n   }\n\n   private static string[] titles = {\n      &quot;Enqueue                       &quot;, \n      &quot;TryEnqueue succeeded          &quot;, \n      &quot;TryEnqueue failed             &quot;, \n      &quot;TryEnqueue(T, wait) succeeded &quot;, \n      &quot;TryEnqueue(T, wait) failed    &quot;, \n      &quot;Dequeue attempts              &quot;, \n      &quot;Dequeue exceptions            &quot;, \n      &quot;Remove operations             &quot;, \n      &quot;Queue elements removed        &quot;};\n\n   private enum ThreadResultIndex\n   {\n      EnqueueCt, \n      TryEnqueueSucceedCt, \n      TryEnqueueFailCt, \n      TryEnqueueWaitSucceedCt, \n      TryEnqueueWaitFailCt, \n      DequeueCt, \n      DequeueExCt, \n      RemoveCt, \n      RemovedCt\n   };\n}\n\n/* This example produces output similar to the following:\n\nWorking...\n                               Thread 1 Thread 2 Thread 3    Total\nEnqueue                          277382   515209   308464  1101055\nTryEnqueue succeeded             276873   514621   308099  1099593\nTryEnqueue failed                   109      181      134      424\nTryEnqueue(T, wait) succeeded    276913   514434   307607  1098954\nTryEnqueue(T, wait) failed            2        0        0        2\nDequeue attempts                 830980  1544081   924164  3299225\nDequeue exceptions                12102    21589    13539    47230\nRemove operations                 69550   129479    77351   276380\nQueue elements removed            11957    22572    13043    47572\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Monitor_Enter_System_Object_System_Boolean__\">\r\n    \r\n            <a id=\"System_Threading_Monitor_Enter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Enter(Object,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Acquires an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Enter (object obj, ref bool lockTaken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object on which to wait.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lockTaken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The result of the attempt to acquire the lock, passed by reference. The input must be <code>false</code>. The output is <code>true</code> if the lock is acquired; otherwise, the output is <code>false</code>. The output is set even if an exception occurs during the attempt to acquire the lock.  </p>\n<p> Note   If no exception occurs, the output of this method is always <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The input to <code>lockTaken</code> is <code>true</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>obj</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use <code>Enter</code> to acquire the <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a> on the object passed as the <code>obj</code> parameter. If another thread has executed an <code>Enter</code> on the object but has not yet executed the corresponding <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Exit_\" data-linktype=\"relative-path\">Exit</a>, the current thread will block until the other thread releases the object. It is legal for the same thread to invoke <code>Enter</code> more than once without it blocking; however, an equal number of <code>Exit</code> calls must be invoked before other threads waiting on the object will unblock.  </p>\n<p> If the lock was not taken because an exception was thrown, the variable specified for the <code>lockTaken</code> parameter is <code>false</code> after this method ends. This allows the program to determine, in all cases, whether it is necessary to release the lock. If this method returns without throwing an exception, the variable specified for the <code>lockTaken</code> parameter is always <code>true</code>, and there is no need to test it.  </p>\n<p> Use <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a> to lock objects (that is, reference types), not value types. When you pass a value type variable to <code>Enter</code>, it is boxed as an object. If you pass the same variable to <code>Enter</code> again, it is boxed as a separate object, and the thread does not block. In this case, the code that <code>Monitor</code> is supposedly protecting is not protected. Furthermore, when you pass the variable to <code>Exit</code>, another separate object is created. Because the object passed to <code>Exit</code> is different from the object passed to <code>Enter</code>, <code>Monitor</code> throws <a class=\"xref\" href=\"system.threading.synchronizationlockexception\" data-linktype=\"relative-path\">SynchronizationLockException</a>. For more information, see the conceptual topic <a href=\"../Topic/Monitors.md\" data-linktype=\"relative-path\">Monitors</a>.  </p>\n<p> <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_Interrupt_\" data-linktype=\"relative-path\">Interrupt</a> can interrupt threads that are waiting to enter a <code>Monitor</code> on an object. A <a class=\"xref\" href=\"system.threading.threadinterruptedexception\" data-linktype=\"relative-path\">ThreadInterruptedException</a> will be thrown.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code shows the basic pattern for using the Enter method overload. This overload always sets the value of the variable that is passed to the <code>ref</code> parameter (<code>ByRef</code> in Visual Basic) <code>lockTaken</code>, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Monitor.Enter#2\">        bool acquiredLock = false;\n\n        try\n        {\n            Monitor.Enter(lockObject, ref acquiredLock);\n\n            // Code that accesses resources that are protected by the lock.\n\n        }\n        finally\n        {\n            if (acquiredLock)\n            {\n                Monitor.Exit(lockObject);\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Monitor.Enter#2\">        Dim acquiredLock As Boolean = False\n\n        Try\n            Monitor.Enter(lockObject, acquiredLock)\n\n            &#39; Code that accesses resources that are protected by the lock.\n\n        Finally\n            If acquiredLock Then\n                Monitor.Exit(lockObject)\n            End If\n        End Try\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Monitor_Exit_System_Object_\">\r\n    \r\n            <a id=\"System_Threading_Monitor_Exit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Exit(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Releases an exclusive lock on the specified object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Exit (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object on which to release the lock.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>obj</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.synchronizationlockexception\" data-linktype=\"relative-path\">SynchronizationLockException</a></div>\r\n                  </div>\r\n                  <p>The current thread does not own the lock for the specified object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The calling thread must own the lock on the <code>obj</code> parameter. If the calling thread owns the lock on the specified object, and has made an equal number of <code>Exit</code> and <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Enter_\" data-linktype=\"relative-path\">Enter</a> calls for the object, then the lock is released. If the calling thread has not invoked <code>Exit</code> as many times as <code>Enter</code>, the lock is not released.  </p>\n<p> If the lock is released and other threads are in the ready queue for the object, one of the threads acquires the lock. If other threads are in the waiting queue waiting to acquire the lock, they are not automatically moved to the ready queue when the owner of the lock calls <code>Exit</code>. To move one or more waiting threads into the ready queue, call <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Pulse_\" data-linktype=\"relative-path\">Pulse</a> or <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_PulseAll_\" data-linktype=\"relative-path\">PulseAll</a> before invoking <code>Exit</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the <code>Exit</code> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"MonitorExmpl2#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Threading;\nusing namespace System::Collections::Generic;\nusing namespace System::Text;\n\ngeneric &lt;typename T&gt; public ref class SafeQueue\n{\nprivate:\n   // A queue that is protected by Monitor.\n   Queue&lt;T&gt;^ m_inputQueue;\n\npublic:\n   SafeQueue()\n   {\n      m_inputQueue = gcnew Queue&lt;T&gt;();\n   };\n\n   // Lock the queue and add an element.\n   void Enqueue(T qValue)\n   {\n      // Request the lock, and block until it is obtained.\n      Monitor::Enter(m_inputQueue);\n      try\n      {\n         // When the lock is obtained, add an element.\n         m_inputQueue-&gt;Enqueue(qValue);\n      }\n      finally\n      {\n         // Ensure that the lock is released.\n         Monitor::Exit(m_inputQueue);\n      }\n   };\n\n   // Try to add an element to the queue: Add the element to the queue \n   // only if the lock is immediately available.\n   bool TryEnqueue(T qValue)\n   {\n      // Request the lock.\n      if (Monitor::TryEnter(m_inputQueue))\n      {\n         try\n         {\n            m_inputQueue-&gt;Enqueue(qValue);\n         }\n         finally\n         {\n            // Ensure that the lock is released.\n            Monitor::Exit(m_inputQueue);\n         }\n         return true;\n      }\n      else\n      {\n         return false;\n      }\n   };\n\n   // Try to add an element to the queue: Add the element to the queue \n   // only if the lock becomes available during the specified time\n   // interval.\n   bool TryEnqueue(T qValue, int waitTime)\n   {\n      // Request the lock.\n      if (Monitor::TryEnter(m_inputQueue, waitTime))\n      {\n         try\n         {\n            m_inputQueue-&gt;Enqueue(qValue);\n         }\n         finally\n         {\n            // Ensure that the lock is released.\n            Monitor::Exit(m_inputQueue);\n         }\n         return true;\n      }\n      else\n      {\n         return false;\n      }\n   };\n\n   // Lock the queue and dequeue an element.\n   T Dequeue()\n   {\n      T retval;\n\n      // Request the lock, and block until it is obtained.\n      Monitor::Enter(m_inputQueue);\n      try\n      {\n         // When the lock is obtained, dequeue an element.\n         retval = m_inputQueue-&gt;Dequeue();\n      }\n      finally\n      {\n         // Ensure that the lock is released.\n         Monitor::Exit(m_inputQueue);\n      }\n\n      return retval;\n   };\n\n   // Delete all elements that equal the given object.\n   int Remove(T qValue)\n   {\n      int removedCt = 0;\n\n      // Wait until the lock is available and lock the queue.\n      Monitor::Enter(m_inputQueue);\n      try\n      {\n         int counter = m_inputQueue-&gt;Count;\n         while (counter &gt; 0)\n            // Check each element.\n         {\n            T elem = m_inputQueue-&gt;Dequeue();\n            if (!elem-&gt;Equals(qValue))\n            {\n               m_inputQueue-&gt;Enqueue(elem);\n            }\n            else\n            {\n               // Keep a count of items removed.\n               removedCt += 1;\n            }\n            counter = counter - 1;\n         }\n      }\n      finally\n      {\n         // Ensure that the lock is released.\n         Monitor::Exit(m_inputQueue);\n      }\n\n      return removedCt;\n   };\n\n   // Print all queue elements.\n   String^ PrintAllElements()\n   {\n      StringBuilder^ output = gcnew StringBuilder();\n\n      // Lock the queue.\n      Monitor::Enter(m_inputQueue);\n      try\n      {\n         for each ( T elem in m_inputQueue )\n         {\n            // Print the next element.\n            output-&gt;AppendLine(elem-&gt;ToString());\n         }\n      }\n      finally\n      {\n         // Ensure that the lock is released.\n         Monitor::Exit(m_inputQueue);\n      }\n\n      return output-&gt;ToString();\n   };\n};\n\npublic ref class Example\n{\nprivate:\n   static SafeQueue&lt;int&gt;^ q = gcnew SafeQueue&lt;int&gt;();\n   static int threadsRunning = 0;\n   static array&lt;array&lt;int&gt;^&gt;^ results = gcnew array&lt;array&lt;int&gt;^&gt;(3);\n\n   static void ThreadProc(Object^ state)\n   {\n      DateTime finish = DateTime::Now.AddSeconds(10);\n      Random^ rand = gcnew Random();\n      array&lt;int&gt;^ result = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n      int threadNum = (int) state;\n\n      while (DateTime::Now &lt; finish)\n\n      {\n         int what = rand-&gt;Next(250);\n         int how = rand-&gt;Next(100);\n\n         if (how &lt; 16)\n         {\n            q-&gt;Enqueue(what);\n            result[(int)ThreadResultIndex::EnqueueCt] += 1;\n         }\n         else if (how &lt; 32)\n         {\n            if (q-&gt;TryEnqueue(what))\n            {\n               result[(int)ThreadResultIndex::TryEnqueueSucceedCt] += 1;\n            }\n            else\n            {\n               result[(int)ThreadResultIndex::TryEnqueueFailCt] += 1;\n            }\n         }\n         else if (how &lt; 48)\n         {\n            // Even a very small wait significantly increases the success \n            // rate of the conditional enqueue operation.\n            if (q-&gt;TryEnqueue(what, 10))\n            {\n               result[(int)ThreadResultIndex::TryEnqueueWaitSucceedCt] += 1;\n            }\n            else\n            {\n               result[(int)ThreadResultIndex::TryEnqueueWaitFailCt] += 1;\n            }\n         }\n         else if (how &lt; 96)\n         {\n            result[(int)ThreadResultIndex::DequeueCt] += 1;\n            try\n            {\n               q-&gt;Dequeue();\n            }\n            catch (Exception^ ex)\n            {\n               result[(int)ThreadResultIndex::DequeueExCt] += 1;\n            }\n         }\n         else\n         {\n            result[(int)ThreadResultIndex::RemoveCt] += 1;\n            result[(int)ThreadResultIndex::RemovedCt] += q-&gt;Remove(what);\n         }         \n      }\n\n      results[threadNum] = result;\n\n      if (0 == Interlocked::Decrement(threadsRunning))      \n      {\n         StringBuilder^ sb = gcnew StringBuilder(\n            &quot;                               Thread 1 Thread 2 Thread 3    Total<br>&quot;);\n\n         for (int row = 0; row &lt; 9; row++)\n         {\n            int total = 0;\n            sb-&gt;Append(titles[row]);\n\n            for(int col = 0; col &lt; 3; col++)\n            {\n               sb-&gt;Append(String::Format(&quot;{0,9}&quot;, results[col][row]));\n               total += results[col][row];\n            }\n\n            sb-&gt;AppendLine(String::Format(&quot;{0,9}&quot;, total));\n         }\n\n         Console::WriteLine(sb-&gt;ToString());\n      }\n   };\n\n   static array&lt;String^&gt;^ titles = {\n      &quot;Enqueue                       &quot;, \n      &quot;TryEnqueue succeeded          &quot;, \n      &quot;TryEnqueue failed             &quot;, \n      &quot;TryEnqueue(T, wait) succeeded &quot;, \n      &quot;TryEnqueue(T, wait) failed    &quot;, \n      &quot;Dequeue attempts              &quot;, \n      &quot;Dequeue exceptions            &quot;, \n      &quot;Remove operations             &quot;, \n      &quot;Queue elements removed        &quot;};\n\n   enum class ThreadResultIndex\n   {\n      EnqueueCt, \n      TryEnqueueSucceedCt, \n      TryEnqueueFailCt, \n      TryEnqueueWaitSucceedCt, \n      TryEnqueueWaitFailCt, \n      DequeueCt, \n      DequeueExCt, \n      RemoveCt, \n      RemovedCt\n   };\n\npublic:\n   static void Demo()\n   {\n      Console::WriteLine(&quot;Working...&quot;);\n\n      for(int i = 0; i &lt; 3; i++)\n      {\n         Thread^ t = gcnew Thread(gcnew ParameterizedThreadStart(Example::ThreadProc));\n         t-&gt;Start(i);\n         Interlocked::Increment(threadsRunning);\n      }\n   };\n};\n\nvoid main()\n{\n   Example::Demo();\n}\n\n\n/* This example produces output similar to the following:\n\nWorking...\n                               Thread 1 Thread 2 Thread 3    Total\nEnqueue                          274718   513514   337895  1126127\nTryEnqueue succeeded             274502   513516   337480  1125498\nTryEnqueue failed                   119      235      141      495\nTryEnqueue(T, wait) succeeded    274552   513116   338532  1126200\nTryEnqueue(T, wait) failed            0        1        0        1\nDequeue attempts                 824038  1541866  1015006  3380910\nDequeue exceptions                12828    23416    14799    51043\nRemove operations                 68746   128218    84306   281270\nQueue elements removed            11464    22024    14470    47958\nQueue elements removed            2921     4690     2982    10593\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"MonitorExmpl2#1\">Imports System.Threading\nImports System.Collections.Generic\nImports System.Text\n\nClass SafeQueue(Of T)\n\n   &#39; A queue that is protected by Monitor.\n   Private m_inputQueue As New Queue(Of T)\n\n   &#39; Lock the queue and add an element.\n   Public Sub Enqueue(ByVal qValue As T)\n\n      &#39; Request the lock, and block until it is obtained.\n      Monitor.Enter(m_inputQueue)\n      Try\n         &#39; When the lock is obtained, add an element.\n         m_inputQueue.Enqueue(qValue)\n\n      Finally\n         &#39; Ensure that the lock is released.\n         Monitor.Exit(m_inputQueue)\n      End Try\n   End Sub\n\n   &#39; Try to add an element to the queue: Add the element to the queue \n   &#39; only if the lock is immediately available.\n   Public Function TryEnqueue(ByVal qValue As T) As Boolean\n\n      &#39; Request the lock.\n      If Monitor.TryEnter(m_inputQueue) Then\n         Try\n            m_inputQueue.Enqueue(qValue)\n\n         Finally\n            &#39; Ensure that the lock is released.\n            Monitor.Exit(m_inputQueue)\n         End Try\n         Return True\n      Else\n         Return False\n      End If\n   End Function\n\n   &#39; Try to add an element to the queue: Add the element to the queue \n   &#39; only if the lock becomes available during the specified time\n   &#39; interval.\n   Public Function TryEnqueue(ByVal qValue As T, ByVal waitTime As Integer) As Boolean\n\n      &#39; Request the lock.\n      If Monitor.TryEnter(m_inputQueue, waitTime) Then\n         Try\n            m_inputQueue.Enqueue(qValue)\n\n         Finally\n            &#39; Ensure that the lock is released.\n            Monitor.Exit(m_inputQueue)\n         End Try\n         Return True\n      Else\n         Return False\n      End If\n   End Function\n\n   &#39; Lock the queue and dequeue an element.\n   Public Function Dequeue() As T\n\n      Dim retval As T\n\n      &#39; Request the lock, and block until it is obtained.\n      Monitor.Enter(m_inputQueue)\n      Try\n         &#39; When the lock is obtained, dequeue an element.\n         retval = m_inputQueue.Dequeue()\n\n      Finally\n         &#39; Ensure that the lock is released.\n         Monitor.Exit(m_inputQueue)\n      End Try\n\n      Return retval\n   End Function\n\n   &#39; Delete all elements that equal the given object.\n   Public Function Remove(ByVal qValue As T) As Integer\n\n      Dim removedCt As Integer = 0\n\n      &#39; Wait until the lock is available and lock the queue.\n      Monitor.Enter(m_inputQueue)\n      Try\n         Dim counter As Integer = m_inputQueue.Count\n         While (counter &gt; 0)\n            &#39;Check each element.\n            Dim elem As T = m_inputQueue.Dequeue()\n            If Not elem.Equals(qValue) Then\n               m_inputQueue.Enqueue(elem)\n            Else\n               &#39; Keep a count of items removed.\n               removedCt += 1\n            End If\n            counter = counter - 1\n         End While\n\n      Finally\n         &#39; Ensure that the lock is released.\n         Monitor.Exit(m_inputQueue)\n      End Try\n\n      Return removedCt\n   End Function\n\n   &#39; Print all queue elements.\n   Public Function PrintAllElements() As String\n\n      Dim output As New StringBuilder()\n\n      &#39;Lock the queue.\n      Monitor.Enter(m_inputQueue)\n      Try\n         For Each elem As T In m_inputQueue\n            &#39; Print the next element.\n            output.AppendLine(elem.ToString())\n         Next\n\n      Finally\n         &#39; Ensure that the lock is released.\n         Monitor.Exit(m_inputQueue)\n      End Try\n\n      Return output.ToString()\n   End Function\nEnd Class\n\nPublic Class Example\n\n   Private Shared q As New SafeQueue(Of Integer)\n   Private Shared threadsRunning As Integer = 0\n   Private Shared results(2)() As Integer\n\n   Friend Shared Sub Main()\n\n      Console.WriteLine(&quot;Working...&quot;)\n\n      For i As Integer = 0 To 2\n\n         Dim t As New Thread(AddressOf ThreadProc)\n         t.Start(i)\n         Interlocked.Increment(threadsRunning)\n\n      Next i\n\n   End Sub\n\n   Private Shared Sub ThreadProc(ByVal state As Object)\n\n      Dim finish As DateTime = DateTime.Now.AddSeconds(10)\n      Dim rand As New Random()\n      Dim result() As Integer = { 0, 0, 0, 0, 0, 0, 0, 0, 0 }\n      Dim threadNum As Integer = CInt(state)\n\n      While (DateTime.Now &lt; finish)\n\n         Dim what As Integer = rand.Next(250)\n         Dim how As Integer = rand.Next(100)\n\n         If how &lt; 16 Then\n            q.Enqueue(what)\n            result(ThreadResultIndex.EnqueueCt) += 1\n         Else If how &lt; 32 Then\n            If q.TryEnqueue(what)\n               result(ThreadResultIndex.TryEnqueueSucceedCt) += 1\n            Else\n               result(ThreadResultIndex.TryEnqueueFailCt) += 1\n            End If\n         Else If how &lt; 48 Then\n            &#39; Even a very small wait significantly increases the success \n            &#39; rate of the conditional enqueue operation.\n            If q.TryEnqueue(what, 10)\n               result(ThreadResultIndex.TryEnqueueWaitSucceedCt) += 1\n            Else\n               result(ThreadResultIndex.TryEnqueueWaitFailCt) += 1\n            End If\n         Else If how &lt; 96 Then\n            result(ThreadResultIndex.DequeueCt) += 1\n            Try\n               q.Dequeue()\n            Catch\n               result(ThreadResultIndex.DequeueExCt) += 1\n            End Try\n         Else\n            result(ThreadResultIndex.RemoveCt) += 1\n            result(ThreadResultIndex.RemovedCt) += q.Remove(what)\n         End If\n         \n      End While\n\n      results(threadNum) = result\n\n      If 0 = Interlocked.Decrement(threadsRunning) Then\n      \n         Dim sb As New StringBuilder( _\n            &quot;                               Thread 1 Thread 2 Thread 3    Total&quot; &amp; vbLf)\n\n         For row As Integer = 0 To 8\n\n            Dim total As Integer = 0\n            sb.Append(titles(row))\n\n            For col As Integer = 0 To 2\n\n               sb.Append(String.Format(&quot;{0,9}&quot;, results(col)(row)))\n               total += results(col)(row)\n\n            Next col\n\n            sb.AppendLine(String.Format(&quot;{0,9}&quot;, total))\n\n         Next row\n\n         Console.WriteLine(sb.ToString())\n\n      End If     \n    \n   End Sub\n\n   Private Shared titles() As String = { _\n      &quot;Enqueue                       &quot;, _\n      &quot;TryEnqueue succeeded          &quot;, _\n      &quot;TryEnqueue failed             &quot;, _\n      &quot;TryEnqueue(T, wait) succeeded &quot;, _\n      &quot;TryEnqueue(T, wait) failed    &quot;, _\n      &quot;Dequeue attempts              &quot;, _\n      &quot;Dequeue exceptions            &quot;, _\n      &quot;Remove operations             &quot;, _\n      &quot;Queue elements removed        &quot;  _\n   }\n\n   Private Enum ThreadResultIndex\n      EnqueueCt\n      TryEnqueueSucceedCt\n      TryEnqueueFailCt\n      TryEnqueueWaitSucceedCt\n      TryEnqueueWaitFailCt\n      DequeueCt\n      DequeueExCt\n      RemoveCt\n      RemovedCt\n   End Enum\n\nEnd Class\n\n&#39; This example produces output similar to the following:\n&#39;\n&#39;Working...\n&#39;                               Thread 1 Thread 2 Thread 3    Total\n&#39;Enqueue                          294357   512164   302838  1109359\n&#39;TryEnqueue succeeded             294486   512403   303117  1110006\n&#39;TryEnqueue failed                   108      234      127      469\n&#39;TryEnqueue(T, wait) succeeded    294259   512796   302556  1109611\n&#39;TryEnqueue(T, wait) failed            1        1        1        3\n&#39;Dequeue attempts                 882266  1537993   907795  3328054\n&#39;Dequeue exceptions                12691    21474    13480    47645\n&#39;Remove operations                 74059   128715    76187   278961\n&#39;Queue elements removed            12667    22606    13219    48492\n</code></pre><pre><code class=\"lang-cs\" name=\"MonitorExmpl2#1\">using System;\nusing System.Threading;\nusing System.Collections.Generic;\nusing System.Text;\n\nclass SafeQueue&lt;T&gt;\n{\n   // A queue that is protected by Monitor.\n   private Queue&lt;T&gt; m_inputQueue = new Queue&lt;T&gt;();\n\n   // Lock the queue and add an element.\n   public void Enqueue(T qValue)\n   {\n      // Request the lock, and block until it is obtained.\n      Monitor.Enter(m_inputQueue);\n      try\n      {\n         // When the lock is obtained, add an element.\n         m_inputQueue.Enqueue(qValue);\n      }\n      finally\n      {\n         // Ensure that the lock is released.\n         Monitor.Exit(m_inputQueue);\n      }\n   }\n\n   // Try to add an element to the queue: Add the element to the queue \n   // only if the lock is immediately available.\n   public bool TryEnqueue(T qValue)\n   {\n      // Request the lock.\n      if (Monitor.TryEnter(m_inputQueue))\n      {\n         try\n         {\n            m_inputQueue.Enqueue(qValue);\n         }\n         finally\n         {\n            // Ensure that the lock is released.\n            Monitor.Exit(m_inputQueue);\n         }\n         return true;\n      }\n      else\n      {\n         return false;\n      }\n   }\n\n   // Try to add an element to the queue: Add the element to the queue \n   // only if the lock becomes available during the specified time\n   // interval.\n   public bool TryEnqueue(T qValue, int waitTime)\n   {\n      // Request the lock.\n      if (Monitor.TryEnter(m_inputQueue, waitTime))\n      {\n         try\n         {\n            m_inputQueue.Enqueue(qValue);\n         }\n         finally\n         {\n            // Ensure that the lock is released.\n            Monitor.Exit(m_inputQueue);\n         }\n         return true;\n      }\n      else\n      {\n         return false;\n      }\n   }\n\n   // Lock the queue and dequeue an element.\n   public T Dequeue()\n   {\n      T retval;\n\n      // Request the lock, and block until it is obtained.\n      Monitor.Enter(m_inputQueue);\n      try\n      {\n         // When the lock is obtained, dequeue an element.\n         retval = m_inputQueue.Dequeue();\n      }\n      finally\n      {\n         // Ensure that the lock is released.\n         Monitor.Exit(m_inputQueue);\n      }\n\n      return retval;\n   }\n\n   // Delete all elements that equal the given object.\n   public int Remove(T qValue)\n   {\n      int removedCt = 0;\n\n      // Wait until the lock is available and lock the queue.\n      Monitor.Enter(m_inputQueue);\n      try\n      {\n         int counter = m_inputQueue.Count;\n         while (counter &gt; 0)\n            // Check each element.\n         {\n            T elem = m_inputQueue.Dequeue();\n            if (!elem.Equals(qValue))\n            {\n               m_inputQueue.Enqueue(elem);\n            }\n            else\n            {\n               // Keep a count of items removed.\n               removedCt += 1;\n            }\n            counter = counter - 1;\n         }\n      }\n      finally\n      {\n         // Ensure that the lock is released.\n         Monitor.Exit(m_inputQueue);\n      }\n\n      return removedCt;\n   }\n\n   // Print all queue elements.\n   public string PrintAllElements()\n   {\n      StringBuilder output = new StringBuilder();\n\n      // Lock the queue.\n      Monitor.Enter(m_inputQueue);\n      try\n      {\n         foreach( T elem in m_inputQueue )\n         {\n            // Print the next element.\n            output.AppendLine(elem.ToString());\n         }\n      }\n      finally\n      {\n         // Ensure that the lock is released.\n         Monitor.Exit(m_inputQueue);\n      }\n\n      return output.ToString();\n   }\n}\n\npublic class Example\n{\n   private static SafeQueue&lt;int&gt; q = new SafeQueue&lt;int&gt;();\n   private static int threadsRunning = 0;\n   private static int[][] results = new int[3][];\n\n   static void Main()\n   {\n      Console.WriteLine(&quot;Working...&quot;);\n\n      for(int i = 0; i &lt; 3; i++)\n      {\n         Thread t = new Thread(ThreadProc);\n         t.Start(i);\n         Interlocked.Increment(ref threadsRunning);\n      }\n   }\n\n   private static void ThreadProc(object state)\n   {\n      DateTime finish = DateTime.Now.AddSeconds(10);\n      Random rand = new Random();\n      int[] result = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n      int threadNum = (int) state;\n\n      while (DateTime.Now &lt; finish)\n\n      {\n         int what = rand.Next(250);\n         int how = rand.Next(100);\n\n         if (how &lt; 16)\n         {\n            q.Enqueue(what);\n            result[(int)ThreadResultIndex.EnqueueCt] += 1;\n         }\n         else if (how &lt; 32)\n         {\n            if (q.TryEnqueue(what))\n            {\n               result[(int)ThreadResultIndex.TryEnqueueSucceedCt] += 1;\n            }\n            else\n            {\n               result[(int)ThreadResultIndex.TryEnqueueFailCt] += 1;\n            }\n         }\n         else if (how &lt; 48)\n         {\n            // Even a very small wait significantly increases the success \n            // rate of the conditional enqueue operation.\n            if (q.TryEnqueue(what, 10))\n            {\n               result[(int)ThreadResultIndex.TryEnqueueWaitSucceedCt] += 1;\n            }\n            else\n            {\n               result[(int)ThreadResultIndex.TryEnqueueWaitFailCt] += 1;\n            }\n         }\n         else if (how &lt; 96)\n         {\n            result[(int)ThreadResultIndex.DequeueCt] += 1;\n            try\n            {\n               q.Dequeue();\n            }\n            catch\n            {\n               result[(int)ThreadResultIndex.DequeueExCt] += 1;\n            }\n         }\n         else\n         {\n            result[(int)ThreadResultIndex.RemoveCt] += 1;\n            result[(int)ThreadResultIndex.RemovedCt] += q.Remove(what);\n         }         \n      }\n\n      results[threadNum] = result;\n\n      if (0 == Interlocked.Decrement(ref threadsRunning))      \n      {\n         StringBuilder sb = new StringBuilder(\n            &quot;                               Thread 1 Thread 2 Thread 3    Total<br>&quot;);\n\n         for(int row = 0; row &lt; 9; row++)\n         {\n            int total = 0;\n            sb.Append(titles[row]);\n\n            for(int col = 0; col &lt; 3; col++)\n            {\n               sb.Append(String.Format(&quot;{0,9}&quot;, results[col][row]));\n               total += results[col][row];\n            }\n\n            sb.AppendLine(String.Format(&quot;{0,9}&quot;, total));\n         }\n\n         Console.WriteLine(sb.ToString());\n      }\n   }\n\n   private static string[] titles = {\n      &quot;Enqueue                       &quot;, \n      &quot;TryEnqueue succeeded          &quot;, \n      &quot;TryEnqueue failed             &quot;, \n      &quot;TryEnqueue(T, wait) succeeded &quot;, \n      &quot;TryEnqueue(T, wait) failed    &quot;, \n      &quot;Dequeue attempts              &quot;, \n      &quot;Dequeue exceptions            &quot;, \n      &quot;Remove operations             &quot;, \n      &quot;Queue elements removed        &quot;};\n\n   private enum ThreadResultIndex\n   {\n      EnqueueCt, \n      TryEnqueueSucceedCt, \n      TryEnqueueFailCt, \n      TryEnqueueWaitSucceedCt, \n      TryEnqueueWaitFailCt, \n      DequeueCt, \n      DequeueExCt, \n      RemoveCt, \n      RemovedCt\n   };\n}\n\n/* This example produces output similar to the following:\n\nWorking...\n                               Thread 1 Thread 2 Thread 3    Total\nEnqueue                          277382   515209   308464  1101055\nTryEnqueue succeeded             276873   514621   308099  1099593\nTryEnqueue failed                   109      181      134      424\nTryEnqueue(T, wait) succeeded    276913   514434   307607  1098954\nTryEnqueue(T, wait) failed            2        0        0        2\nDequeue attempts                 830980  1544081   924164  3299225\nDequeue exceptions                12102    21589    13539    47230\nRemove operations                 69550   129479    77351   276380\nQueue elements removed            11957    22572    13043    47572\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Monitor_IsEntered_System_Object_\">\r\n    \r\n            <a id=\"System_Threading_Monitor_IsEntered_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsEntered(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the current thread holds the lock on the specified object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsEntered (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to test.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current thread holds the lock on <code>obj</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>obj</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method works only for locks that are acquired by using the methods of the <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a> class, or by using the C# <code>lock</code> statement or the Visual Basic <code>SyncLock</code> statement, which are implemented with <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a>.  </p>\n<p> Use this method with diagnostic tools, such as the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Assert_\" data-linktype=\"relative-path\">Assert</a> method and the <a class=\"xref\" href=\"system.diagnostics.contracts.contract\" data-linktype=\"relative-path\">Contract</a> class, to debug locking issues that involve the <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a>class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Monitor_Pulse_System_Object_\">\r\n    \r\n            <a id=\"System_Threading_Monitor_Pulse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Pulse(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Notifies a thread in the waiting queue of a change in the locked object&#39;s state.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Pulse (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object a thread is waiting for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>obj</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.synchronizationlockexception\" data-linktype=\"relative-path\">SynchronizationLockException</a></div>\r\n                  </div>\r\n                  <p>The calling thread does not own the lock for the specified object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Only the current owner of the lock can signal a waiting object using <code>Pulse</code>.  </p>\n<p> The thread that currently owns the lock on the specified object invokes this method to signal the next thread in line for the lock. Upon receiving the pulse, the waiting thread is moved to the ready queue. When the thread that invoked <code>Pulse</code> releases the lock, the next thread in the ready queue (which is not necessarily the thread that was pulsed) acquires the lock.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> The <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a> class does not maintain state indicating that the Pulse method has been called. Thus, if you call Pulse when no threads are waiting, the next thread that calls <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Wait_\" data-linktype=\"relative-path\">Wait</a> blocks as if Pulse had never been called. If two threads are using Pulse and <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Wait_\" data-linktype=\"relative-path\">Wait</a> to interact, this could result in a deadlock. Contrast this with the behavior of the <a class=\"xref\" href=\"system.threading.autoresetevent\" data-linktype=\"relative-path\">AutoResetEvent</a> class: If you signal an <a class=\"xref\" href=\"system.threading.autoresetevent\" data-linktype=\"relative-path\">AutoResetEvent</a> by calling its <a class=\"xref\" href=\"system.threading.eventwaithandle#System_Threading_EventWaitHandle_Set_\" data-linktype=\"relative-path\">Set</a> method, and there are no threads waiting, the <a class=\"xref\" href=\"system.threading.autoresetevent\" data-linktype=\"relative-path\">AutoResetEvent</a> remains in a signaled state until a thread calls <a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitOne_\" data-linktype=\"relative-path\">WaitOne</a>, <a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitAny_\" data-linktype=\"relative-path\">WaitAny</a>, or <a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitAll_\" data-linktype=\"relative-path\">WaitAll</a>. The <a class=\"xref\" href=\"system.threading.autoresetevent\" data-linktype=\"relative-path\">AutoResetEvent</a> releases that thread and returns to the unsignaled state.  </p>\n</div>\n<p> Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object&#39;s state.  </p>\n<p> The <code>Pulse</code>, <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_PulseAll_\" data-linktype=\"relative-path\">PulseAll</a>, and <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Wait_\" data-linktype=\"relative-path\">Wait</a> methods must be invoked from within a synchronized block of code.  </p>\n<p> To signal multiple threads, use the <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_PulseAll_\" data-linktype=\"relative-path\">PulseAll</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Monitor_PulseAll_System_Object_\">\r\n    \r\n            <a id=\"System_Threading_Monitor_PulseAll_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PulseAll(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Notifies all waiting threads of a change in the object&#39;s state.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void PulseAll (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object that sends the pulse.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>obj</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.synchronizationlockexception\" data-linktype=\"relative-path\">SynchronizationLockException</a></div>\r\n                  </div>\r\n                  <p>The calling thread does not own the lock for the specified object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The thread that currently owns the lock on the specified object invokes this method to signal all threads waiting to acquire the lock on the object. After the signal is sent, the waiting threads are moved to the ready queue. When the thread that invoked <code>PulseAll</code> releases the lock, the next thread in the ready queue acquires the lock.  </p>\n<p> Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object&#39;s state.  </p>\n<p> The <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Pulse_\" data-linktype=\"relative-path\">Pulse</a>, <code>PulseAll</code>, and <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Wait_\" data-linktype=\"relative-path\">Wait</a> methods must be invoked from within a synchronized block of code.  </p>\n<p> The remarks for the <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Pulse_\" data-linktype=\"relative-path\">Pulse</a> method explain what happens if <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Pulse_\" data-linktype=\"relative-path\">Pulse</a> is called when no threads are waiting.  </p>\n<p> To signal a single thread, use the <code>Pulse</code> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Monitor_TryEnter_System_Object_\">\r\n    \r\n            <a id=\"System_Threading_Monitor_TryEnter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryEnter(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Attempts to acquire an exclusive lock on the specified object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool TryEnter (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object on which to acquire the lock.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current thread acquires the lock; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>obj</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If successful, this method acquires an exclusive lock on the <code>obj</code> parameter. This method returns immediately, whether or not the lock is available.  </p>\n<p> This method is similar to <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Enter_\" data-linktype=\"relative-path\">Enter</a>, but it will never block the current thread. If the thread cannot enter without blocking, the method returns <code>false,</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Use <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a> to lock objects (that is, reference types), not value types. For details, see the <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a> article.  </p>\n</div>\n<p> To ensure that the thread does not enter the critical section, you should examine the method&#39;s return value and  execute code in the critical section only if its return value is <code>true</code>. The following code fragment shows the pattern used to call this method. Note that you should call <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Exit_\" data-linktype=\"relative-path\">Exit</a> in a <code>finally</code> block to ensure that the calling thread releases its lock on the critical section if an exception occurs.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Monitor.TryEnter#1\">      var lockObj = new Object();\n      \n      if (Monitor.TryEnter(lockObj)) {\n         try {\n            // The critical section.\n         }\n         finally {\n            // Ensure that the lock is released.\n            Monitor.Exit(lockObj);\n         }\n      }\n      else {\n         // The lock was not axquired.\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Monitor.TryEnter#1\">      Dim lockObj As New Object()\n      \n      If Monitor.TryEnter(lockObj) Then\n         Try\n            &#39; The critical section.\n         Finally\n            &#39; Ensure that the lock is released.\n            Monitor.Exit(lockObj)\n         End Try\n      Else\n         &#39; The lock was not acquired.\n      End If\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the <code>TryEnter</code> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"MonitorExmpl2#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Threading;\nusing namespace System::Collections::Generic;\nusing namespace System::Text;\n\ngeneric &lt;typename T&gt; public ref class SafeQueue\n{\nprivate:\n   // A queue that is protected by Monitor.\n   Queue&lt;T&gt;^ m_inputQueue;\n\npublic:\n   SafeQueue()\n   {\n      m_inputQueue = gcnew Queue&lt;T&gt;();\n   };\n\n   // Lock the queue and add an element.\n   void Enqueue(T qValue)\n   {\n      // Request the lock, and block until it is obtained.\n      Monitor::Enter(m_inputQueue);\n      try\n      {\n         // When the lock is obtained, add an element.\n         m_inputQueue-&gt;Enqueue(qValue);\n      }\n      finally\n      {\n         // Ensure that the lock is released.\n         Monitor::Exit(m_inputQueue);\n      }\n   };\n\n   // Try to add an element to the queue: Add the element to the queue \n   // only if the lock is immediately available.\n   bool TryEnqueue(T qValue)\n   {\n      // Request the lock.\n      if (Monitor::TryEnter(m_inputQueue))\n      {\n         try\n         {\n            m_inputQueue-&gt;Enqueue(qValue);\n         }\n         finally\n         {\n            // Ensure that the lock is released.\n            Monitor::Exit(m_inputQueue);\n         }\n         return true;\n      }\n      else\n      {\n         return false;\n      }\n   };\n\n   // Try to add an element to the queue: Add the element to the queue \n   // only if the lock becomes available during the specified time\n   // interval.\n   bool TryEnqueue(T qValue, int waitTime)\n   {\n      // Request the lock.\n      if (Monitor::TryEnter(m_inputQueue, waitTime))\n      {\n         try\n         {\n            m_inputQueue-&gt;Enqueue(qValue);\n         }\n         finally\n         {\n            // Ensure that the lock is released.\n            Monitor::Exit(m_inputQueue);\n         }\n         return true;\n      }\n      else\n      {\n         return false;\n      }\n   };\n\n   // Lock the queue and dequeue an element.\n   T Dequeue()\n   {\n      T retval;\n\n      // Request the lock, and block until it is obtained.\n      Monitor::Enter(m_inputQueue);\n      try\n      {\n         // When the lock is obtained, dequeue an element.\n         retval = m_inputQueue-&gt;Dequeue();\n      }\n      finally\n      {\n         // Ensure that the lock is released.\n         Monitor::Exit(m_inputQueue);\n      }\n\n      return retval;\n   };\n\n   // Delete all elements that equal the given object.\n   int Remove(T qValue)\n   {\n      int removedCt = 0;\n\n      // Wait until the lock is available and lock the queue.\n      Monitor::Enter(m_inputQueue);\n      try\n      {\n         int counter = m_inputQueue-&gt;Count;\n         while (counter &gt; 0)\n            // Check each element.\n         {\n            T elem = m_inputQueue-&gt;Dequeue();\n            if (!elem-&gt;Equals(qValue))\n            {\n               m_inputQueue-&gt;Enqueue(elem);\n            }\n            else\n            {\n               // Keep a count of items removed.\n               removedCt += 1;\n            }\n            counter = counter - 1;\n         }\n      }\n      finally\n      {\n         // Ensure that the lock is released.\n         Monitor::Exit(m_inputQueue);\n      }\n\n      return removedCt;\n   };\n\n   // Print all queue elements.\n   String^ PrintAllElements()\n   {\n      StringBuilder^ output = gcnew StringBuilder();\n\n      // Lock the queue.\n      Monitor::Enter(m_inputQueue);\n      try\n      {\n         for each ( T elem in m_inputQueue )\n         {\n            // Print the next element.\n            output-&gt;AppendLine(elem-&gt;ToString());\n         }\n      }\n      finally\n      {\n         // Ensure that the lock is released.\n         Monitor::Exit(m_inputQueue);\n      }\n\n      return output-&gt;ToString();\n   };\n};\n\npublic ref class Example\n{\nprivate:\n   static SafeQueue&lt;int&gt;^ q = gcnew SafeQueue&lt;int&gt;();\n   static int threadsRunning = 0;\n   static array&lt;array&lt;int&gt;^&gt;^ results = gcnew array&lt;array&lt;int&gt;^&gt;(3);\n\n   static void ThreadProc(Object^ state)\n   {\n      DateTime finish = DateTime::Now.AddSeconds(10);\n      Random^ rand = gcnew Random();\n      array&lt;int&gt;^ result = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n      int threadNum = (int) state;\n\n      while (DateTime::Now &lt; finish)\n\n      {\n         int what = rand-&gt;Next(250);\n         int how = rand-&gt;Next(100);\n\n         if (how &lt; 16)\n         {\n            q-&gt;Enqueue(what);\n            result[(int)ThreadResultIndex::EnqueueCt] += 1;\n         }\n         else if (how &lt; 32)\n         {\n            if (q-&gt;TryEnqueue(what))\n            {\n               result[(int)ThreadResultIndex::TryEnqueueSucceedCt] += 1;\n            }\n            else\n            {\n               result[(int)ThreadResultIndex::TryEnqueueFailCt] += 1;\n            }\n         }\n         else if (how &lt; 48)\n         {\n            // Even a very small wait significantly increases the success \n            // rate of the conditional enqueue operation.\n            if (q-&gt;TryEnqueue(what, 10))\n            {\n               result[(int)ThreadResultIndex::TryEnqueueWaitSucceedCt] += 1;\n            }\n            else\n            {\n               result[(int)ThreadResultIndex::TryEnqueueWaitFailCt] += 1;\n            }\n         }\n         else if (how &lt; 96)\n         {\n            result[(int)ThreadResultIndex::DequeueCt] += 1;\n            try\n            {\n               q-&gt;Dequeue();\n            }\n            catch (Exception^ ex)\n            {\n               result[(int)ThreadResultIndex::DequeueExCt] += 1;\n            }\n         }\n         else\n         {\n            result[(int)ThreadResultIndex::RemoveCt] += 1;\n            result[(int)ThreadResultIndex::RemovedCt] += q-&gt;Remove(what);\n         }         \n      }\n\n      results[threadNum] = result;\n\n      if (0 == Interlocked::Decrement(threadsRunning))      \n      {\n         StringBuilder^ sb = gcnew StringBuilder(\n            &quot;                               Thread 1 Thread 2 Thread 3    Total<br>&quot;);\n\n         for (int row = 0; row &lt; 9; row++)\n         {\n            int total = 0;\n            sb-&gt;Append(titles[row]);\n\n            for(int col = 0; col &lt; 3; col++)\n            {\n               sb-&gt;Append(String::Format(&quot;{0,9}&quot;, results[col][row]));\n               total += results[col][row];\n            }\n\n            sb-&gt;AppendLine(String::Format(&quot;{0,9}&quot;, total));\n         }\n\n         Console::WriteLine(sb-&gt;ToString());\n      }\n   };\n\n   static array&lt;String^&gt;^ titles = {\n      &quot;Enqueue                       &quot;, \n      &quot;TryEnqueue succeeded          &quot;, \n      &quot;TryEnqueue failed             &quot;, \n      &quot;TryEnqueue(T, wait) succeeded &quot;, \n      &quot;TryEnqueue(T, wait) failed    &quot;, \n      &quot;Dequeue attempts              &quot;, \n      &quot;Dequeue exceptions            &quot;, \n      &quot;Remove operations             &quot;, \n      &quot;Queue elements removed        &quot;};\n\n   enum class ThreadResultIndex\n   {\n      EnqueueCt, \n      TryEnqueueSucceedCt, \n      TryEnqueueFailCt, \n      TryEnqueueWaitSucceedCt, \n      TryEnqueueWaitFailCt, \n      DequeueCt, \n      DequeueExCt, \n      RemoveCt, \n      RemovedCt\n   };\n\npublic:\n   static void Demo()\n   {\n      Console::WriteLine(&quot;Working...&quot;);\n\n      for(int i = 0; i &lt; 3; i++)\n      {\n         Thread^ t = gcnew Thread(gcnew ParameterizedThreadStart(Example::ThreadProc));\n         t-&gt;Start(i);\n         Interlocked::Increment(threadsRunning);\n      }\n   };\n};\n\nvoid main()\n{\n   Example::Demo();\n}\n\n\n/* This example produces output similar to the following:\n\nWorking...\n                               Thread 1 Thread 2 Thread 3    Total\nEnqueue                          274718   513514   337895  1126127\nTryEnqueue succeeded             274502   513516   337480  1125498\nTryEnqueue failed                   119      235      141      495\nTryEnqueue(T, wait) succeeded    274552   513116   338532  1126200\nTryEnqueue(T, wait) failed            0        1        0        1\nDequeue attempts                 824038  1541866  1015006  3380910\nDequeue exceptions                12828    23416    14799    51043\nRemove operations                 68746   128218    84306   281270\nQueue elements removed            11464    22024    14470    47958\nQueue elements removed            2921     4690     2982    10593\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"MonitorExmpl2#1\">Imports System.Threading\nImports System.Collections.Generic\nImports System.Text\n\nClass SafeQueue(Of T)\n\n   &#39; A queue that is protected by Monitor.\n   Private m_inputQueue As New Queue(Of T)\n\n   &#39; Lock the queue and add an element.\n   Public Sub Enqueue(ByVal qValue As T)\n\n      &#39; Request the lock, and block until it is obtained.\n      Monitor.Enter(m_inputQueue)\n      Try\n         &#39; When the lock is obtained, add an element.\n         m_inputQueue.Enqueue(qValue)\n\n      Finally\n         &#39; Ensure that the lock is released.\n         Monitor.Exit(m_inputQueue)\n      End Try\n   End Sub\n\n   &#39; Try to add an element to the queue: Add the element to the queue \n   &#39; only if the lock is immediately available.\n   Public Function TryEnqueue(ByVal qValue As T) As Boolean\n\n      &#39; Request the lock.\n      If Monitor.TryEnter(m_inputQueue) Then\n         Try\n            m_inputQueue.Enqueue(qValue)\n\n         Finally\n            &#39; Ensure that the lock is released.\n            Monitor.Exit(m_inputQueue)\n         End Try\n         Return True\n      Else\n         Return False\n      End If\n   End Function\n\n   &#39; Try to add an element to the queue: Add the element to the queue \n   &#39; only if the lock becomes available during the specified time\n   &#39; interval.\n   Public Function TryEnqueue(ByVal qValue As T, ByVal waitTime As Integer) As Boolean\n\n      &#39; Request the lock.\n      If Monitor.TryEnter(m_inputQueue, waitTime) Then\n         Try\n            m_inputQueue.Enqueue(qValue)\n\n         Finally\n            &#39; Ensure that the lock is released.\n            Monitor.Exit(m_inputQueue)\n         End Try\n         Return True\n      Else\n         Return False\n      End If\n   End Function\n\n   &#39; Lock the queue and dequeue an element.\n   Public Function Dequeue() As T\n\n      Dim retval As T\n\n      &#39; Request the lock, and block until it is obtained.\n      Monitor.Enter(m_inputQueue)\n      Try\n         &#39; When the lock is obtained, dequeue an element.\n         retval = m_inputQueue.Dequeue()\n\n      Finally\n         &#39; Ensure that the lock is released.\n         Monitor.Exit(m_inputQueue)\n      End Try\n\n      Return retval\n   End Function\n\n   &#39; Delete all elements that equal the given object.\n   Public Function Remove(ByVal qValue As T) As Integer\n\n      Dim removedCt As Integer = 0\n\n      &#39; Wait until the lock is available and lock the queue.\n      Monitor.Enter(m_inputQueue)\n      Try\n         Dim counter As Integer = m_inputQueue.Count\n         While (counter &gt; 0)\n            &#39;Check each element.\n            Dim elem As T = m_inputQueue.Dequeue()\n            If Not elem.Equals(qValue) Then\n               m_inputQueue.Enqueue(elem)\n            Else\n               &#39; Keep a count of items removed.\n               removedCt += 1\n            End If\n            counter = counter - 1\n         End While\n\n      Finally\n         &#39; Ensure that the lock is released.\n         Monitor.Exit(m_inputQueue)\n      End Try\n\n      Return removedCt\n   End Function\n\n   &#39; Print all queue elements.\n   Public Function PrintAllElements() As String\n\n      Dim output As New StringBuilder()\n\n      &#39;Lock the queue.\n      Monitor.Enter(m_inputQueue)\n      Try\n         For Each elem As T In m_inputQueue\n            &#39; Print the next element.\n            output.AppendLine(elem.ToString())\n         Next\n\n      Finally\n         &#39; Ensure that the lock is released.\n         Monitor.Exit(m_inputQueue)\n      End Try\n\n      Return output.ToString()\n   End Function\nEnd Class\n\nPublic Class Example\n\n   Private Shared q As New SafeQueue(Of Integer)\n   Private Shared threadsRunning As Integer = 0\n   Private Shared results(2)() As Integer\n\n   Friend Shared Sub Main()\n\n      Console.WriteLine(&quot;Working...&quot;)\n\n      For i As Integer = 0 To 2\n\n         Dim t As New Thread(AddressOf ThreadProc)\n         t.Start(i)\n         Interlocked.Increment(threadsRunning)\n\n      Next i\n\n   End Sub\n\n   Private Shared Sub ThreadProc(ByVal state As Object)\n\n      Dim finish As DateTime = DateTime.Now.AddSeconds(10)\n      Dim rand As New Random()\n      Dim result() As Integer = { 0, 0, 0, 0, 0, 0, 0, 0, 0 }\n      Dim threadNum As Integer = CInt(state)\n\n      While (DateTime.Now &lt; finish)\n\n         Dim what As Integer = rand.Next(250)\n         Dim how As Integer = rand.Next(100)\n\n         If how &lt; 16 Then\n            q.Enqueue(what)\n            result(ThreadResultIndex.EnqueueCt) += 1\n         Else If how &lt; 32 Then\n            If q.TryEnqueue(what)\n               result(ThreadResultIndex.TryEnqueueSucceedCt) += 1\n            Else\n               result(ThreadResultIndex.TryEnqueueFailCt) += 1\n            End If\n         Else If how &lt; 48 Then\n            &#39; Even a very small wait significantly increases the success \n            &#39; rate of the conditional enqueue operation.\n            If q.TryEnqueue(what, 10)\n               result(ThreadResultIndex.TryEnqueueWaitSucceedCt) += 1\n            Else\n               result(ThreadResultIndex.TryEnqueueWaitFailCt) += 1\n            End If\n         Else If how &lt; 96 Then\n            result(ThreadResultIndex.DequeueCt) += 1\n            Try\n               q.Dequeue()\n            Catch\n               result(ThreadResultIndex.DequeueExCt) += 1\n            End Try\n         Else\n            result(ThreadResultIndex.RemoveCt) += 1\n            result(ThreadResultIndex.RemovedCt) += q.Remove(what)\n         End If\n         \n      End While\n\n      results(threadNum) = result\n\n      If 0 = Interlocked.Decrement(threadsRunning) Then\n      \n         Dim sb As New StringBuilder( _\n            &quot;                               Thread 1 Thread 2 Thread 3    Total&quot; &amp; vbLf)\n\n         For row As Integer = 0 To 8\n\n            Dim total As Integer = 0\n            sb.Append(titles(row))\n\n            For col As Integer = 0 To 2\n\n               sb.Append(String.Format(&quot;{0,9}&quot;, results(col)(row)))\n               total += results(col)(row)\n\n            Next col\n\n            sb.AppendLine(String.Format(&quot;{0,9}&quot;, total))\n\n         Next row\n\n         Console.WriteLine(sb.ToString())\n\n      End If     \n    \n   End Sub\n\n   Private Shared titles() As String = { _\n      &quot;Enqueue                       &quot;, _\n      &quot;TryEnqueue succeeded          &quot;, _\n      &quot;TryEnqueue failed             &quot;, _\n      &quot;TryEnqueue(T, wait) succeeded &quot;, _\n      &quot;TryEnqueue(T, wait) failed    &quot;, _\n      &quot;Dequeue attempts              &quot;, _\n      &quot;Dequeue exceptions            &quot;, _\n      &quot;Remove operations             &quot;, _\n      &quot;Queue elements removed        &quot;  _\n   }\n\n   Private Enum ThreadResultIndex\n      EnqueueCt\n      TryEnqueueSucceedCt\n      TryEnqueueFailCt\n      TryEnqueueWaitSucceedCt\n      TryEnqueueWaitFailCt\n      DequeueCt\n      DequeueExCt\n      RemoveCt\n      RemovedCt\n   End Enum\n\nEnd Class\n\n&#39; This example produces output similar to the following:\n&#39;\n&#39;Working...\n&#39;                               Thread 1 Thread 2 Thread 3    Total\n&#39;Enqueue                          294357   512164   302838  1109359\n&#39;TryEnqueue succeeded             294486   512403   303117  1110006\n&#39;TryEnqueue failed                   108      234      127      469\n&#39;TryEnqueue(T, wait) succeeded    294259   512796   302556  1109611\n&#39;TryEnqueue(T, wait) failed            1        1        1        3\n&#39;Dequeue attempts                 882266  1537993   907795  3328054\n&#39;Dequeue exceptions                12691    21474    13480    47645\n&#39;Remove operations                 74059   128715    76187   278961\n&#39;Queue elements removed            12667    22606    13219    48492\n</code></pre><pre><code class=\"lang-cs\" name=\"MonitorExmpl2#1\">using System;\nusing System.Threading;\nusing System.Collections.Generic;\nusing System.Text;\n\nclass SafeQueue&lt;T&gt;\n{\n   // A queue that is protected by Monitor.\n   private Queue&lt;T&gt; m_inputQueue = new Queue&lt;T&gt;();\n\n   // Lock the queue and add an element.\n   public void Enqueue(T qValue)\n   {\n      // Request the lock, and block until it is obtained.\n      Monitor.Enter(m_inputQueue);\n      try\n      {\n         // When the lock is obtained, add an element.\n         m_inputQueue.Enqueue(qValue);\n      }\n      finally\n      {\n         // Ensure that the lock is released.\n         Monitor.Exit(m_inputQueue);\n      }\n   }\n\n   // Try to add an element to the queue: Add the element to the queue \n   // only if the lock is immediately available.\n   public bool TryEnqueue(T qValue)\n   {\n      // Request the lock.\n      if (Monitor.TryEnter(m_inputQueue))\n      {\n         try\n         {\n            m_inputQueue.Enqueue(qValue);\n         }\n         finally\n         {\n            // Ensure that the lock is released.\n            Monitor.Exit(m_inputQueue);\n         }\n         return true;\n      }\n      else\n      {\n         return false;\n      }\n   }\n\n   // Try to add an element to the queue: Add the element to the queue \n   // only if the lock becomes available during the specified time\n   // interval.\n   public bool TryEnqueue(T qValue, int waitTime)\n   {\n      // Request the lock.\n      if (Monitor.TryEnter(m_inputQueue, waitTime))\n      {\n         try\n         {\n            m_inputQueue.Enqueue(qValue);\n         }\n         finally\n         {\n            // Ensure that the lock is released.\n            Monitor.Exit(m_inputQueue);\n         }\n         return true;\n      }\n      else\n      {\n         return false;\n      }\n   }\n\n   // Lock the queue and dequeue an element.\n   public T Dequeue()\n   {\n      T retval;\n\n      // Request the lock, and block until it is obtained.\n      Monitor.Enter(m_inputQueue);\n      try\n      {\n         // When the lock is obtained, dequeue an element.\n         retval = m_inputQueue.Dequeue();\n      }\n      finally\n      {\n         // Ensure that the lock is released.\n         Monitor.Exit(m_inputQueue);\n      }\n\n      return retval;\n   }\n\n   // Delete all elements that equal the given object.\n   public int Remove(T qValue)\n   {\n      int removedCt = 0;\n\n      // Wait until the lock is available and lock the queue.\n      Monitor.Enter(m_inputQueue);\n      try\n      {\n         int counter = m_inputQueue.Count;\n         while (counter &gt; 0)\n            // Check each element.\n         {\n            T elem = m_inputQueue.Dequeue();\n            if (!elem.Equals(qValue))\n            {\n               m_inputQueue.Enqueue(elem);\n            }\n            else\n            {\n               // Keep a count of items removed.\n               removedCt += 1;\n            }\n            counter = counter - 1;\n         }\n      }\n      finally\n      {\n         // Ensure that the lock is released.\n         Monitor.Exit(m_inputQueue);\n      }\n\n      return removedCt;\n   }\n\n   // Print all queue elements.\n   public string PrintAllElements()\n   {\n      StringBuilder output = new StringBuilder();\n\n      // Lock the queue.\n      Monitor.Enter(m_inputQueue);\n      try\n      {\n         foreach( T elem in m_inputQueue )\n         {\n            // Print the next element.\n            output.AppendLine(elem.ToString());\n         }\n      }\n      finally\n      {\n         // Ensure that the lock is released.\n         Monitor.Exit(m_inputQueue);\n      }\n\n      return output.ToString();\n   }\n}\n\npublic class Example\n{\n   private static SafeQueue&lt;int&gt; q = new SafeQueue&lt;int&gt;();\n   private static int threadsRunning = 0;\n   private static int[][] results = new int[3][];\n\n   static void Main()\n   {\n      Console.WriteLine(&quot;Working...&quot;);\n\n      for(int i = 0; i &lt; 3; i++)\n      {\n         Thread t = new Thread(ThreadProc);\n         t.Start(i);\n         Interlocked.Increment(ref threadsRunning);\n      }\n   }\n\n   private static void ThreadProc(object state)\n   {\n      DateTime finish = DateTime.Now.AddSeconds(10);\n      Random rand = new Random();\n      int[] result = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n      int threadNum = (int) state;\n\n      while (DateTime.Now &lt; finish)\n\n      {\n         int what = rand.Next(250);\n         int how = rand.Next(100);\n\n         if (how &lt; 16)\n         {\n            q.Enqueue(what);\n            result[(int)ThreadResultIndex.EnqueueCt] += 1;\n         }\n         else if (how &lt; 32)\n         {\n            if (q.TryEnqueue(what))\n            {\n               result[(int)ThreadResultIndex.TryEnqueueSucceedCt] += 1;\n            }\n            else\n            {\n               result[(int)ThreadResultIndex.TryEnqueueFailCt] += 1;\n            }\n         }\n         else if (how &lt; 48)\n         {\n            // Even a very small wait significantly increases the success \n            // rate of the conditional enqueue operation.\n            if (q.TryEnqueue(what, 10))\n            {\n               result[(int)ThreadResultIndex.TryEnqueueWaitSucceedCt] += 1;\n            }\n            else\n            {\n               result[(int)ThreadResultIndex.TryEnqueueWaitFailCt] += 1;\n            }\n         }\n         else if (how &lt; 96)\n         {\n            result[(int)ThreadResultIndex.DequeueCt] += 1;\n            try\n            {\n               q.Dequeue();\n            }\n            catch\n            {\n               result[(int)ThreadResultIndex.DequeueExCt] += 1;\n            }\n         }\n         else\n         {\n            result[(int)ThreadResultIndex.RemoveCt] += 1;\n            result[(int)ThreadResultIndex.RemovedCt] += q.Remove(what);\n         }         \n      }\n\n      results[threadNum] = result;\n\n      if (0 == Interlocked.Decrement(ref threadsRunning))      \n      {\n         StringBuilder sb = new StringBuilder(\n            &quot;                               Thread 1 Thread 2 Thread 3    Total<br>&quot;);\n\n         for(int row = 0; row &lt; 9; row++)\n         {\n            int total = 0;\n            sb.Append(titles[row]);\n\n            for(int col = 0; col &lt; 3; col++)\n            {\n               sb.Append(String.Format(&quot;{0,9}&quot;, results[col][row]));\n               total += results[col][row];\n            }\n\n            sb.AppendLine(String.Format(&quot;{0,9}&quot;, total));\n         }\n\n         Console.WriteLine(sb.ToString());\n      }\n   }\n\n   private static string[] titles = {\n      &quot;Enqueue                       &quot;, \n      &quot;TryEnqueue succeeded          &quot;, \n      &quot;TryEnqueue failed             &quot;, \n      &quot;TryEnqueue(T, wait) succeeded &quot;, \n      &quot;TryEnqueue(T, wait) failed    &quot;, \n      &quot;Dequeue attempts              &quot;, \n      &quot;Dequeue exceptions            &quot;, \n      &quot;Remove operations             &quot;, \n      &quot;Queue elements removed        &quot;};\n\n   private enum ThreadResultIndex\n   {\n      EnqueueCt, \n      TryEnqueueSucceedCt, \n      TryEnqueueFailCt, \n      TryEnqueueWaitSucceedCt, \n      TryEnqueueWaitFailCt, \n      DequeueCt, \n      DequeueExCt, \n      RemoveCt, \n      RemovedCt\n   };\n}\n\n/* This example produces output similar to the following:\n\nWorking...\n                               Thread 1 Thread 2 Thread 3    Total\nEnqueue                          277382   515209   308464  1101055\nTryEnqueue succeeded             276873   514621   308099  1099593\nTryEnqueue failed                   109      181      134      424\nTryEnqueue(T, wait) succeeded    276913   514434   307607  1098954\nTryEnqueue(T, wait) failed            2        0        0        2\nDequeue attempts                 830980  1544081   924164  3299225\nDequeue exceptions                12102    21589    13539    47230\nRemove operations                 69550   129479    77351   276380\nQueue elements removed            11957    22572    13043    47572\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Monitor_TryEnter_System_Object_System_Boolean__\">\r\n    \r\n            <a id=\"System_Threading_Monitor_TryEnter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryEnter(Object,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Attempts to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void TryEnter (object obj, ref bool lockTaken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object on which to acquire the lock.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lockTaken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The result of the attempt to acquire the lock, passed by reference. The input must be <code>false</code>. The output is <code>true</code> if the lock is acquired; otherwise, the output is <code>false</code>. The output is set even if an exception occurs during the attempt to acquire the lock.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The input to <code>lockTaken</code> is <code>true</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>obj</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If successful, this method acquires an exclusive lock on the <code>obj</code> parameter. This method returns immediately, whether or not the lock is available.  </p>\n<p> If the lock was not taken because an exception was thrown, the variable specified for the <code>lockTaken</code> parameter is <code>false</code> after this method ends. This allows the program to determine, in all cases, whether it is necessary to release the lock.  </p>\n<p> This method is similar to <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Enter_System_Object_System_Boolean__\" data-linktype=\"relative-path\">Enter(Object,Boolean)</a>, but it will never block the current thread. If the thread cannot enter without blocking, the <code>lockTaken</code> argument is set to <code>false</code> when the method returns.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Use <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a> to lock objects (that is, reference types), not value types. For more information, see the <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a> article.  </p>\n</div>\n<p> To ensure that the thread does not enter the critical section, you should examine the value of <code>lockTaken</code> and  execute code in the critical section only if its value is <code>true</code>. The following code fragment shows the pattern used to call this method. Note that you should call <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Exit_\" data-linktype=\"relative-path\">Exit</a> in a <code>finally</code> block to ensure that the calling thread releases its lock on the critical section if an exception occurs.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Monitor.TryEnter#2\">      var lockObj = new Object();\n      bool lockTaken = false;\n      \n      try {\n         Monitor.TryEnter(lockObj, ref lockTaken); \n         if (lockTaken) {\n            // The critical section.\n         }\n         else {\n            // The lock was not acquired.\n         }\n      }\n      finally {\n         // Ensure that the lock is released.\n         if (lockTaken) {\n            Monitor.Exit(lockObj);\n         }\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Monitor.TryEnter#2\">      Dim lockObj As New Object()\n      Dim lockTaken As Boolean = False\n      \n      Try \n         Monitor.TryEnter(lockObj, lockTaken) \n         If lockTaken Then\n            &#39; The critical section.\n         Else \n            &#39; The lock was not acquired.\n         End If\n      Finally \n         &#39; Ensure that the lock is released.\n         If lockTaken Then Monitor.Exit(lockObj)\n      End Try\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code shows the basic pattern for using the TryEnter method overload. This overload always sets the value of the variable that is passed to the <code>ref</code> parameter (<code>ByRef</code> in Visual Basic) <code>lockTaken</code>, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Monitor.Enter#3\">        bool acquiredLock = false;\n\n        try\n        {\n            Monitor.TryEnter(lockObject, ref acquiredLock);\n            if (acquiredLock)\n            {\n\n                // Code that accesses resources that are protected by the lock.\n\n            }\n            else\n            {\n            \n                // Code to deal with the fact that the lock was not acquired.\n\n            }\n        }\n        finally\n        {\n            if (acquiredLock)\n            {\n                Monitor.Exit(lockObject);\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Monitor.Enter#3\">        Dim acquiredLock As Boolean = False\n\n        Try\n            Monitor.TryEnter(lockObject, acquiredLock)\n            If acquiredLock Then\n\n                &#39; Code that accesses resources that are protected by the lock.\n\n            Else\n\n                &#39; Code to deal with the fact that the lock was not acquired.\n\n            End If\n        Finally\n            If acquiredLock Then\n                Monitor.Exit(lockObject)\n            End If\n        End Try\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Monitor_TryEnter_System_Object_System_Int32_\">\r\n    \r\n            <a id=\"System_Threading_Monitor_TryEnter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryEnter(Object,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool TryEnter (object obj, int millisecondsTimeout);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object on which to acquire the lock.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>millisecondsTimeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of milliseconds to wait for the lock.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current thread acquires the lock; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>obj</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>millisecondsTimeout</code> is negative, and not equal to <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the <code>millisecondsTimeout</code> parameter equals <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a>, this method is equivalent to <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Enter_\" data-linktype=\"relative-path\">Enter</a>. If <code>millisecondsTimeout</code> equals 0, this method is equivalent to <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_TryEnter_\" data-linktype=\"relative-path\">TryEnter</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Use <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a> to lock objects (that is, reference types), not value types. For details, see the <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a> article.  </p>\n</div>\n<p> To ensure that the thread does not enter the critical section, you should examine the method&#39;s return value and  execute code in the critical section only if its return value is <code>true</code>. The following code fragment shows the pattern used to call this method. Note that you should call <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Exit_\" data-linktype=\"relative-path\">Exit</a> in a <code>finally</code> block to ensure that the calling thread releases its lock on the critical section if an exception occurs.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Monitor.TryEnter#3\">      var lockObj = new Object();\n      int timeout = 500;\n      \n      if (Monitor.TryEnter(lockObj, timeout)) {\n         try {\n            // The critical section.\n         }\n         finally {\n            // Ensure that the lock is released.\n            Monitor.Exit(lockObj);\n         }\n      }\n      else {\n         // The lock was not acquired.\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Monitor.TryEnter#3\">      Dim lockObj As New Object()\n      Dim timeout As Integer = 500\n      \n      If Monitor.TryEnter(lockObj, timeout) Then\n         Try\n            &#39; The critical section.\n         Finally\n            &#39; Ensure that the lock is released.\n            Monitor.Exit(lockObj)\n         End Try\n      Else\n         &#39; The lock was not acquired.\n      End If\n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Monitor_TryEnter_System_Object_System_TimeSpan_\">\r\n    \r\n            <a id=\"System_Threading_Monitor_TryEnter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryEnter(Object,TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool TryEnter (object obj, TimeSpan timeout);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object on which to acquire the lock.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> representing the amount of time to wait for the lock. A value of â€“1 millisecond specifies an infinite wait.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current thread acquires the lock; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>obj</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The value of <code>timeout</code> in milliseconds is negative and is not equal to <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a> (â€“1 millisecond), or is greater than <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the value of the <code>timeout</code> parameter converted to milliseconds equals â€“1, this method is equivalent to <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Enter_\" data-linktype=\"relative-path\">Enter</a>. If the value of <code>timeout</code> equals 0, this method is equivalent to <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_TryEnter_\" data-linktype=\"relative-path\">TryEnter</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Use <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a> to lock objects (that is, reference types), not value types. For details, see the <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a> class topic.  </p>\n</div>\n<p> To ensure that the thread does not enter the critical section, you should examine the method&#39;s return value and  execute code in the critical section only if its return value is <code>true</code>. The following code fragment shows the pattern used to call this method. Note that you should call <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Exit_\" data-linktype=\"relative-path\">Exit</a> in a <code>finally</code> block to ensure that the calling thread releases its lock on the critical section if an exception occurs.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Monitor.TryEnter#5\">      var lockObj = new Object();\n      var timeout = TimeSpan.FromMilliseconds(500);\n      \n      if (Monitor.TryEnter(lockObj, timeout)) {\n         try {\n            // The critical section.\n         }\n         finally {\n            // Ensure that the lock is released.\n            Monitor.Exit(lockObj);\n         }\n      }\n      else {\n         // The lock was not acquired.\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Monitor.TryEnter#5\">      Dim lockObj As New Object()\n      Dim timeout = TimeSpan.FromMilliseconds(500)\n      \n      If Monitor.TryEnter(lockObj, timeout) Then\n         Try\n            &#39; The critical section.\n         Finally\n            &#39; Ensure that the lock is released.\n            Monitor.Exit(lockObj)\n         End Try\n      Else\n         &#39; The lock was not acquired.\n      End If\n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Monitor_TryEnter_System_Object_System_Int32_System_Boolean__\">\r\n    \r\n            <a id=\"System_Threading_Monitor_TryEnter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryEnter(Object,Int32,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void TryEnter (object obj, int millisecondsTimeout, ref bool lockTaken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object on which to acquire the lock.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>millisecondsTimeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of milliseconds to wait for the lock.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lockTaken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The result of the attempt to acquire the lock, passed by reference. The input must be <code>false</code>. The output is <code>true</code> if the lock is acquired; otherwise, the output is <code>false</code>. The output is set even if an exception occurs during the attempt to acquire the lock.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The input to <code>lockTaken</code> is <code>true</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>obj</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>millisecondsTimeout</code> is negative, and not equal to <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the <code>millisecondsTimeout</code> parameter equals <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a>, this method is equivalent to <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Enter_System_Object_\" data-linktype=\"relative-path\">Enter(Object)</a>. If <code>millisecondsTimeout</code> equals 0, this method is equivalent to <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_TryEnter_System_Object_\" data-linktype=\"relative-path\">TryEnter(Object)</a>.  </p>\n<p> If the lock was not taken because an exception was thrown, the variable specified for the <code>lockTaken</code> parameter is <code>false</code> after this method ends. This allows the program to determine, in all cases, whether it is necessary to release the lock.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Use <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a> to lock objects (that is, reference types), not value types. For more information, see the <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a> class topic.  </p>\n</div>\n<p> To ensure that the thread does not enter the critical section, you should examine the value of <code>lockTaken</code> and  execute code in the critical section only if its value is <code>true</code>. The following code fragment shows the pattern used to call this method. Note that you should call <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Exit_\" data-linktype=\"relative-path\">Exit</a> in a <code>finally</code> block to ensure that the calling thread releases its lock on the critical section if an exception occurs.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Monitor.TryEnter#4\">      var lockObj = new Object();\n      int timeout = 500;\n      bool lockTaken = false;\n      \n      try {\n         Monitor.TryEnter(lockObj, timeout, ref lockTaken);\n         if (lockTaken) {\n            // The critical section.\n         }\n         else {\n            // The lock was not acquired.\n         }\n      }\n      finally {\n         // Ensure that the lock is released.\n         if (lockTaken) {\n            Monitor.Exit(lockObj);\n         }   \n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Monitor.TryEnter#4\">      Dim lockObj As New Object()\n      Dim timeout As Integer = 500\n      Dim lockTaken As Boolean = False\n      \n      Try\n         Monitor.TryEnter(lockObj, timeout, lockTaken)\n         If lockTaken Then\n            &#39; The critical section.\n         Else\n            &#39; The lock was not acquired.\n         End If\n      Finally\n         &#39; Ensure that the lock is released.\n         If lockTaken Then Monitor.Exit(lockObj)\n      End Try\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code shows the basic pattern for using the <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_TryEnter_System_Object_System_Boolean__\" data-linktype=\"relative-path\">TryEnter(Object,Boolean)</a> method overload. This overload always sets the value of the variable that is passed to the <code>ref</code> parameter (<code>ByRef</code> in Visual Basic) <code>lockTaken</code>, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Monitor.Enter#4\">        bool acquiredLock = false;\n\n        try\n        {\n            Monitor.TryEnter(lockObject, 500, ref acquiredLock);\n            if (acquiredLock)\n            {\n\n                // Code that accesses resources that are protected by the lock.\n\n            }\n            else\n            {\n            \n                // Code to deal with the fact that the lock was not acquired.\n\n            }\n        }\n        finally\n        {\n            if (acquiredLock)\n            {\n                Monitor.Exit(lockObject);\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Monitor.Enter#4\">        Dim acquiredLock As Boolean = False\n\n        Try\n            Monitor.TryEnter(lockObject, 500, acquiredLock)\n            If acquiredLock Then\n\n                &#39; Code that accesses resources that are protected by the lock.\n\n            Else\n\n                &#39; Code to deal with the fact that the lock was not acquired.\n\n            End If\n        Finally\n            If acquiredLock Then\n                Monitor.Exit(lockObject)\n            End If\n        End Try\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Monitor_TryEnter_System_Object_System_TimeSpan_System_Boolean__\">\r\n    \r\n            <a id=\"System_Threading_Monitor_TryEnter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryEnter(Object,TimeSpan,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void TryEnter (object obj, TimeSpan timeout, ref bool lockTaken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object on which to acquire the lock.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The amount of time to wait for the lock. A value of â€“1 millisecond specifies an infinite wait.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lockTaken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The result of the attempt to acquire the lock, passed by reference. The input must be <code>false</code>. The output is <code>true</code> if the lock is acquired; otherwise, the output is <code>false</code>. The output is set even if an exception occurs during the attempt to acquire the lock.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The input to <code>lockTaken</code> is <code>true</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>obj</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The value of <code>timeout</code> in milliseconds is negative and is not equal to <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a> (â€“1 millisecond), or is greater than <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the value of the <code>timeout</code> parameter converted to milliseconds equals â€“1, this method is equivalent to <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Enter_System_Object_\" data-linktype=\"relative-path\">Enter(Object)</a>. If the value of <code>timeout</code> equals 0, this method is equivalent to <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_TryEnter_System_Object_\" data-linktype=\"relative-path\">TryEnter(Object)</a>.  </p>\n<p> If the lock was not taken because an exception was thrown, the variable specified for the <code>lockTaken</code> parameter is <code>false</code> after this method ends. This allows the program to determine, in all cases, whether it is necessary to release the lock.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Use <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a> to lock objects (that is, reference types), not value types. For more information, see the <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a> class topic.  </p>\n</div>\n<p> To ensure that the thread does not enter the critical section, you should examine the value of <code>lockTaken</code> and  execute code in the critical section only if its value is <code>true</code>. The following code fragment shows the pattern used to call this method. Note that you should call <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Exit_\" data-linktype=\"relative-path\">Exit</a> in a <code>finally</code> block to ensure that the calling thread releases its lock on the critical section if an exception occurs.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Monitor.TryEnter#6\">      var lockObj = new Object();\n      var timeout = TimeSpan.FromMilliseconds(500);\n      bool lockTaken = false;\n      \n      try {\n         Monitor.TryEnter(lockObj, timeout, ref lockTaken);\n         if (lockTaken) {\n            // The critical section.\n         }\n         else {\n            // The lock was not acquired.\n         }\n      }\n      finally {\n         // Ensure that the lock is released.\n         if (lockTaken) {\n            Monitor.Exit(lockObj);\n         }\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Monitor.TryEnter#6\">      Dim lockObj As New Object()\n      Dim timeout = TimeSpan.FromMilliseconds(500)\n      Dim lockTaken As Boolean = False\n      \n      Try\n         Monitor.TryEnter(lockObj, timeout, lockTaken)\n         If lockTaken Then\n            &#39; The critical section.\n         Else\n            &#39; The lock was not acquired.\n         End If\n      Finally\n         &#39; Ensure that the lock is released.\n         If lockTaken Then Monitor.Exit(lockObj)\n      End Try\n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Monitor_Wait_System_Object_\">\r\n    \r\n            <a id=\"System_Threading_Monitor_Wait_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Wait(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Releases the lock on an object and blocks the current thread until it reacquires the lock.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool Wait (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object on which to wait.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the call returned because the caller reacquired the lock for the specified object. This method does not return if the lock is not reacquired.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>obj</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.synchronizationlockexception\" data-linktype=\"relative-path\">SynchronizationLockException</a></div>\r\n                  </div>\r\n                  <p>The calling thread does not own the lock for the specified object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.threadinterruptedexception\" data-linktype=\"relative-path\">ThreadInterruptedException</a></div>\r\n                  </div>\r\n                  <p>The thread that invokes <code>Wait</code> is later interrupted from the waiting state. This happens when another thread calls this thread&#39;s <span class=\"xref\">stem.Threading.Thread.Interrupt*</span> method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it. The caller is blocked while waiting to reacquire the lock. This method is called when the caller needs to wait for a state change that will occur as a result of another thread&#39;s operations.  </p>\n<p> When a thread calls <code>Wait</code>, it releases the lock on the object and enters the object&#39;s waiting queue. The next thread in the object&#39;s ready queue (if there is one) acquires the lock and has exclusive use of the object. All threads that call <code>Wait</code> remain in the waiting queue until they receive a signal from <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Pulse_\" data-linktype=\"relative-path\">Pulse</a> or <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_PulseAll_\" data-linktype=\"relative-path\">PulseAll</a>, sent by the owner of the lock. If <code>Pulse</code> is sent, only the thread at the head of the waiting queue is affected. If <code>PulseAll</code> is sent, all threads that are waiting for the object are affected. When the signal is received, one or more threads leave the waiting queue and enter the ready queue. A thread in the ready queue is permitted to reacquire the lock.  </p>\n<p> This method returns when the calling thread reacquires the lock on the object. Note that this method blocks indefinitely if the holder of the lock does not call <code>Pulse</code> or <code>PulseAll</code>.  </p>\n<p> The caller executes <code>Wait</code> once, regardless of the number of times <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Enter_\" data-linktype=\"relative-path\">Enter</a> has been invoked for the specified object. Conceptually, the <code>Wait</code> method stores the number of times the caller invoked <code>Enter</code> on the object and invokes <code>Exit</code> as many times as necessary to fully release the locked object. The caller then blocks while waiting to reacquire the object. When the caller reacquires the lock, the system calls <code>Enter</code> as many times as necessary to restore the saved <code>Enter</code> count for the caller. Calling <code>Wait</code> releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.  </p>\n<p> Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object&#39;s state.  </p>\n<p> The <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Pulse_\" data-linktype=\"relative-path\">Pulse</a>, <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_PulseAll_\" data-linktype=\"relative-path\">PulseAll</a>, and <code>Wait</code> methods must be invoked from within a synchronized block of code.  </p>\n<p> The remarks for the <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Pulse_\" data-linktype=\"relative-path\">Pulse</a> method explain what happens if <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Pulse_\" data-linktype=\"relative-path\">Pulse</a> is called when no threads are waiting.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Monitor_Wait_System_Object_System_Int32_\">\r\n    \r\n            <a id=\"System_Threading_Monitor_Wait_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Wait(Object,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Releases the lock on an object and blocks the current thread until it reacquires the lock. If the specified time-out interval elapses, the thread enters the ready queue.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool Wait (object obj, int millisecondsTimeout);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object on which to wait.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>millisecondsTimeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of milliseconds to wait before the thread enters the ready queue.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the lock was reacquired before the specified time elapsed; <code>false</code> if the lock was reacquired after the specified time elapsed. The method does not return until the lock is reacquired.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>obj</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.synchronizationlockexception\" data-linktype=\"relative-path\">SynchronizationLockException</a></div>\r\n                  </div>\r\n                  <p>The calling thread does not own the lock for the specified object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.threadinterruptedexception\" data-linktype=\"relative-path\">ThreadInterruptedException</a></div>\r\n                  </div>\r\n                  <p>The thread that invokes <code>Wait</code> is later interrupted from the waiting state. This happens when another thread calls this thread&#39;s <span class=\"xref\">stem.Threading.Thread.Interrupt*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The value of the <code>millisecondsTimeout</code> parameter is negative, and is not equal to <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method does not return until it reacquires an exclusive lock on the <code>obj</code> parameter.  </p>\n<p> The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it. The caller is blocked while waiting to reacquire the lock. This method is called when the caller needs to wait for a state change that will occur as a result of another thread&#39;s operations.  </p>\n<p> The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Pulse_\" data-linktype=\"relative-path\">Pulse</a> or <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_PulseAll_\" data-linktype=\"relative-path\">PulseAll</a> method. It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner. The thread can test the return value of the Wait method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the Wait method again.  </p>\n<p> When a thread calls <code>Wait</code>, it releases the lock on the object and enters the object&#39;s waiting queue. The next thread in the object&#39;s ready queue (if there is one) acquires the lock and has exclusive use of the object. The thread that invoked <code>Wait</code> remains in the waiting queue until either a thread that holds the lock invokes <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_PulseAll_\" data-linktype=\"relative-path\">PulseAll</a>, or it is the next in the queue and a thread that holds the lock invokes <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Pulse_\" data-linktype=\"relative-path\">Pulse</a>. However, if <code>millisecondsTimeout</code> elapses before another thread invokes this object&#39;s <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Pulse_\" data-linktype=\"relative-path\">Pulse</a> or <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_PulseAll_\" data-linktype=\"relative-path\">PulseAll</a> method, the original thread is moved to the ready queue in order to regain the lock.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a> is specified for the <code>millisecondsTimeout</code> parameter, this method blocks indefinitely unless the holder of the lock calls <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Pulse_\" data-linktype=\"relative-path\">Pulse</a> or <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_PulseAll_\" data-linktype=\"relative-path\">PulseAll</a>. If <code>millisecondsTimeout</code> equals 0, the thread that calls <code>Wait</code> releases the lock and then immediately enters the ready queue in order to regain the lock.  </p>\n</div>\n<p> The caller executes <code>Wait</code> once, regardless of the number of times <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Enter_\" data-linktype=\"relative-path\">Enter</a> has been invoked for the specified object. Conceptually, the <code>Wait</code> method stores the number of times the caller invoked <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Enter_\" data-linktype=\"relative-path\">Enter</a> on the object and invokes <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Exit_\" data-linktype=\"relative-path\">Exit</a> as many times as necessary to fully release the locked object. The caller then blocks while waiting to reacquire the object. When the caller reacquires the lock, the system calls <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Enter_\" data-linktype=\"relative-path\">Enter</a> as many times as necessary to restore the saved <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Enter_\" data-linktype=\"relative-path\">Enter</a> count for the caller. Calling <code>Wait</code> releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object&#39;s state.  </p>\n</div>\n<p> The <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Pulse_\" data-linktype=\"relative-path\">Pulse</a>, <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_PulseAll_\" data-linktype=\"relative-path\">PulseAll</a>, and <code>Wait</code> methods must be invoked from within a synchronized block of code.  </p>\n<p> The remarks for the <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Pulse_\" data-linktype=\"relative-path\">Pulse</a> method explain what happens if <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Pulse_\" data-linktype=\"relative-path\">Pulse</a> is called when no threads are waiting.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Monitor_Wait_System_Object_System_TimeSpan_\">\r\n    \r\n            <a id=\"System_Threading_Monitor_Wait_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Wait(Object,TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Releases the lock on an object and blocks the current thread until it reacquires the lock. If the specified time-out interval elapses, the thread enters the ready queue.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool Wait (object obj, TimeSpan timeout);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object on which to wait.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> representing the amount of time to wait before the thread enters the ready queue.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the lock was reacquired before the specified time elapsed; <code>false</code> if the lock was reacquired after the specified time elapsed. The method does not return until the lock is reacquired.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>obj</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.synchronizationlockexception\" data-linktype=\"relative-path\">SynchronizationLockException</a></div>\r\n                  </div>\r\n                  <p>The calling thread does not own the lock for the specified object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.threadinterruptedexception\" data-linktype=\"relative-path\">ThreadInterruptedException</a></div>\r\n                  </div>\r\n                  <p>The thread that invokes <code>Wait</code> is later interrupted from the waiting state. This happens when another thread calls this thread&#39;s <span class=\"xref\">stem.Threading.Thread.Interrupt*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The value of the <code>timeout</code> parameter in milliseconds is negative and does not represent <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a> (â€“1 millisecond), or is greater than <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method does not return until it reacquires an exclusive lock on the <code>obj</code> parameter.  </p>\n<p> The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it. The caller is blocked while waiting to reacquire the lock. This method is called when the caller needs to wait for a state change that will occur as a result of another thread&#39;s operations.  </p>\n<p> The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Pulse_\" data-linktype=\"relative-path\">Pulse</a> or <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_PulseAll_\" data-linktype=\"relative-path\">PulseAll</a> method. It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner. The thread can test the return value of the Wait method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the Wait method again.  </p>\n<p> When a thread calls <code>Wait</code>, it releases the lock on the object and enters the object&#39;s waiting queue. The next thread in the object&#39;s ready queue (if there is one) acquires the lock and has exclusive use of the object. The thread that invoked <code>Wait</code> remains in the waiting queue until either a thread that holds the lock invokes <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_PulseAll_\" data-linktype=\"relative-path\">PulseAll</a>, or it is the next in the queue and a thread that holds the lock invokes <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Pulse_\" data-linktype=\"relative-path\">Pulse</a>. However, if <code>timeout</code> elapses before another thread invokes this object&#39;s <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Pulse_\" data-linktype=\"relative-path\">Pulse</a> or <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_PulseAll_\" data-linktype=\"relative-path\">PulseAll</a> method, the original thread is moved to the ready queue in order to regain the lock.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> representing â€“1 millisecond is specified for the <code>timeout</code> parameter, this method blocks indefinitely unless the holder of the lock calls <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Pulse_\" data-linktype=\"relative-path\">Pulse</a> or <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_PulseAll_\" data-linktype=\"relative-path\">PulseAll</a>. If <code>timeout</code> is 0 milliseconds, the thread that calls <code>Wait</code> releases the lock and then immediately enters the ready queue in order to regain the lock.  </p>\n</div>\n<p> The caller executes <code>Wait</code> once, regardless of the number of times <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Enter_\" data-linktype=\"relative-path\">Enter</a> has been invoked for the specified object. Conceptually, the <code>Wait</code> method stores the number of times the caller invoked <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Enter_\" data-linktype=\"relative-path\">Enter</a> on the object and invokes <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Exit_\" data-linktype=\"relative-path\">Exit</a> as many times as necessary to fully release the locked object. The caller then blocks while waiting to reacquire the object. When the caller reacquires the lock, the system calls <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Enter_\" data-linktype=\"relative-path\">Enter</a> as many times as necessary to restore the saved <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Enter_\" data-linktype=\"relative-path\">Enter</a> count for the caller. Calling <code>Wait</code> releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object&#39;s state.  </p>\n</div>\n<p> The <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Pulse_\" data-linktype=\"relative-path\">Pulse</a>, <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_PulseAll_\" data-linktype=\"relative-path\">PulseAll</a>, and <code>Wait</code> methods must be invoked from within a synchronized block of code.  </p>\n<p> The remarks for the <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Pulse_\" data-linktype=\"relative-path\">Pulse</a> method explain what happens if <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Pulse_\" data-linktype=\"relative-path\">Pulse</a> is called when no threads are waiting.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Monitor_Wait_System_Object_System_Int32_System_Boolean_\">\r\n    \r\n            <a id=\"System_Threading_Monitor_Wait_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Wait(Object,Int32,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Releases the lock on an object and blocks the current thread until it reacquires the lock. If the specified time-out interval elapses, the thread enters the ready queue. This method also specifies whether the synchronization domain for the context (if in a synchronized context) is exited before the wait and reacquired afterward.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool Wait (object obj, int millisecondsTimeout, bool exitContext);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object on which to wait.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>millisecondsTimeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of milliseconds to wait before the thread enters the ready queue.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>exitContext</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to exit and reacquire the synchronization domain for the context (if in a synchronized context) before the wait; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the lock was reacquired before the specified time elapsed; <code>false</code> if the lock was reacquired after the specified time elapsed. The method does not return until the lock is reacquired.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>obj</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.synchronizationlockexception\" data-linktype=\"relative-path\">SynchronizationLockException</a></div>\r\n                  </div>\r\n                  <p><code>Wait</code> is not invoked from within a synchronized block of code.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.threadinterruptedexception\" data-linktype=\"relative-path\">ThreadInterruptedException</a></div>\r\n                  </div>\r\n                  <p>The thread that invokes <code>Wait</code> is later interrupted from the waiting state. This happens when another thread calls this thread&#39;s <span class=\"xref\">stem.Threading.Thread.Interrupt*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The value of the <code>millisecondsTimeout</code> parameter is negative, and is not equal to <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method does not return until it reacquires an exclusive lock on the <code>obj</code> parameter.  </p>\n<p> The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it. The caller is blocked while waiting to reacquire the lock. This method is called when the caller needs to wait for a state change that will occur as a result of another thread&#39;s operations.  </p>\n<p> The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Pulse_\" data-linktype=\"relative-path\">Pulse</a> or <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_PulseAll_\" data-linktype=\"relative-path\">PulseAll</a> method. It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner. The thread can test the return value of the Wait method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the Wait method again.  </p>\n<p> When a thread calls <code>Wait</code>, it releases the lock and enters the waiting queue. At this point, the next thread in the ready queue (if there is one) is allowed to take control of the lock. The thread that invoked <code>Wait</code> remains in the waiting queue until either a thread that holds the lock invokes <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_PulseAll_\" data-linktype=\"relative-path\">PulseAll</a>, or it is the next in the queue and a thread that holds the lock invokes <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Pulse_\" data-linktype=\"relative-path\">Pulse</a>. However, if <code>millisecondsTimeout</code> elapses before another thread invokes this object&#39;s <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Pulse_\" data-linktype=\"relative-path\">Pulse</a> or <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_PulseAll_\" data-linktype=\"relative-path\">PulseAll</a> method, the original thread is moved to the ready queue in order to regain the lock.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a> is specified for the <code>millisecondsTimeout</code> parameter, this method blocks indefinitely unless the holder of the lock calls <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Pulse_\" data-linktype=\"relative-path\">Pulse</a> or <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_PulseAll_\" data-linktype=\"relative-path\">PulseAll</a>. If <code>millisecondsTimeout</code> equals 0, the thread that calls <code>Wait</code> releases the lock and then immediately enters the ready queue in order to regain the lock.  </p>\n</div>\n<p> The caller executes <code>Wait</code> once, regardless of the number of times <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Enter_\" data-linktype=\"relative-path\">Enter</a> has been invoked for the specified object. Conceptually, the <code>Wait</code> method stores the number of times the caller invoked <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Enter_\" data-linktype=\"relative-path\">Enter</a> on the object and invokes <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Exit_\" data-linktype=\"relative-path\">Exit</a> as many times as necessary to fully release the locked object. The caller then blocks while waiting to reacquire the object. When the caller reacquires the lock, the system calls <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Enter_\" data-linktype=\"relative-path\">Enter</a> as many times as necessary to restore the saved <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Enter_\" data-linktype=\"relative-path\">Enter</a> count for the caller. Calling <code>Wait</code> releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object&#39;s state.  </p>\n</div>\n<p> The <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Pulse_\" data-linktype=\"relative-path\">Pulse</a>, <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_PulseAll_\" data-linktype=\"relative-path\">PulseAll</a>, and <code>Wait</code> methods must be invoked from within a synchronized block of code.  </p>\n<p> The remarks for the <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Pulse_\" data-linktype=\"relative-path\">Pulse</a> method explain what happens if <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Pulse_\" data-linktype=\"relative-path\">Pulse</a> is called when no threads are waiting.  </p>\n<h2 id=\"notes-on-exiting-the-context\">Notes on Exiting the Context</h2>\n<p> The<code>exitContext</code> parameter has no effect unless the Wait method is called from inside a nondefault managed context. This can happen if your thread is inside a call to an instance of a class derived from <a class=\"xref\" href=\"system.contextboundobject\" data-linktype=\"relative-path\">ContextBoundObject</a>. Even if you are currently executing a method on a class that is not derived from <a class=\"xref\" href=\"system.contextboundobject\" data-linktype=\"relative-path\">ContextBoundObject</a>, like <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, you can be in a nondefault context if a <a class=\"xref\" href=\"system.contextboundobject\" data-linktype=\"relative-path\">ContextBoundObject</a> is on your stack in the current application domain.  </p>\n<p> When your code is executing in a nondefault context, specifying <code>true</code> for <code>exitContext</code> causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the Wait method. It returns to the original nondefault context after the call to the Wait method completes.  </p>\n<p> This can be useful when the context-bound class has the <a class=\"xref\" href=\"system.runtime.remoting.contexts.synchronizationattribute\" data-linktype=\"relative-path\">SynchronizationAttribute</a> attribute applied. In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class. If code in the call stack of a member calls the Wait method and specifies <code>true</code> for <code>exitContext</code>, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed. When the Wait method returns, the thread that made the call must wait to reenter the synchronization domain.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Monitor_Wait_System_Object_System_TimeSpan_System_Boolean_\">\r\n    \r\n            <a id=\"System_Threading_Monitor_Wait_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Wait(Object,TimeSpan,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Releases the lock on an object and blocks the current thread until it reacquires the lock. If the specified time-out interval elapses, the thread enters the ready queue. Optionally exits the synchronization domain for the synchronized context before the wait and reacquires the domain afterward.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool Wait (object obj, TimeSpan timeout, bool exitContext);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object on which to wait.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> representing the amount of time to wait before the thread enters the ready queue.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>exitContext</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to exit and reacquire the synchronization domain for the context (if in a synchronized context) before the wait; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the lock was reacquired before the specified time elapsed; <code>false</code> if the lock was reacquired after the specified time elapsed. The method does not return until the lock is reacquired.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>obj</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.synchronizationlockexception\" data-linktype=\"relative-path\">SynchronizationLockException</a></div>\r\n                  </div>\r\n                  <p><code>Wait</code> is not invoked from within a synchronized block of code.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.threadinterruptedexception\" data-linktype=\"relative-path\">ThreadInterruptedException</a></div>\r\n                  </div>\r\n                  <p>The thread that invokes Wait is later interrupted from the waiting state. This happens when another thread calls this thread&#39;s <span class=\"xref\">stem.Threading.Thread.Interrupt*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>timeout</code> parameter is negative and does not represent <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a> (â€“1 millisecond), or is greater than <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method does not return until it reacquires an exclusive lock on the <code>obj</code> parameter.  </p>\n<p> The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it. The caller is blocked while waiting to reacquire the lock. This method is called when the caller needs to wait for a state change that will occur as a result of another thread&#39;s operations.  </p>\n<p> The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Pulse_\" data-linktype=\"relative-path\">Pulse</a> or <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_PulseAll_\" data-linktype=\"relative-path\">PulseAll</a> method. It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner. The thread can test the return value of the Wait method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the Wait method again.  </p>\n<p> When a thread calls <code>Wait</code>, it releases the lock and enters the waiting queue. At this point, the next thread in the ready queue (if there is one) is allowed to take control of the lock. The thread that invoked <code>Wait</code> remains in the waiting queue until either a thread that holds the lock invokes <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_PulseAll_\" data-linktype=\"relative-path\">PulseAll</a>, or it is the next in the queue and a thread that holds the lock invokes <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Pulse_\" data-linktype=\"relative-path\">Pulse</a>. However, if <code>timeout</code> milliseconds elapse before another thread invokes this object&#39;s <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Pulse_\" data-linktype=\"relative-path\">Pulse</a> or <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_PulseAll_\" data-linktype=\"relative-path\">PulseAll</a> method, the original thread is moved to the ready queue in order to regain the lock.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> representing -1 millisecond is specified for the <code>timeout</code> parameter, this method blocks indefinitely unless the holder of the lock calls <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Pulse_\" data-linktype=\"relative-path\">Pulse</a> or <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_PulseAll_\" data-linktype=\"relative-path\">PulseAll</a>. If <code>timeout</code> is 0 milliseconds, the thread that calls <code>Wait</code> releases the lock and then immediately enters the ready queue in order to regain the lock.  </p>\n</div>\n<p> The caller executes <code>Wait</code> once, regardless of the number of times <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Enter_\" data-linktype=\"relative-path\">Enter</a> has been invoked for the specified object. Conceptually, the <code>Wait</code> method stores the number of times the caller invoked <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Enter_\" data-linktype=\"relative-path\">Enter</a> on the object and invokes <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Exit_\" data-linktype=\"relative-path\">Exit</a> as many times as necessary to fully release the locked object. The caller then blocks while waiting to reacquire the object. When the caller reacquires the lock, the system calls <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Enter_\" data-linktype=\"relative-path\">Enter</a> as many times as necessary to restore the saved <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Enter_\" data-linktype=\"relative-path\">Enter</a> count for the caller. Calling <code>Wait</code> releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object&#39;s state.  </p>\n</div>\n<p> The <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Pulse_\" data-linktype=\"relative-path\">Pulse</a>, <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_PulseAll_\" data-linktype=\"relative-path\">PulseAll</a>, and <code>Wait</code> methods must be invoked from within a synchronized block of code.  </p>\n<p> The remarks for the <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Pulse_\" data-linktype=\"relative-path\">Pulse</a> method explain what happens if <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Pulse_\" data-linktype=\"relative-path\">Pulse</a> is called when no threads are waiting.  </p>\n<h2 id=\"notes-on-exiting-the-context\">Notes on Exiting the Context</h2>\n<p> The<code>exitContext</code> parameter has no effect unless the Wait method is called from inside a nondefault managed context. This can happen if your thread is inside a call to an instance of a class derived from <a class=\"xref\" href=\"system.contextboundobject\" data-linktype=\"relative-path\">ContextBoundObject</a>. Even if you are currently executing a method on a class that is not derived from <a class=\"xref\" href=\"system.contextboundobject\" data-linktype=\"relative-path\">ContextBoundObject</a>, like <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, you can be in a nondefault context if a <a class=\"xref\" href=\"system.contextboundobject\" data-linktype=\"relative-path\">ContextBoundObject</a> is on your stack in the current application domain.  </p>\n<p> When your code is executing in a nondefault context, specifying <code>true</code> for <code>exitContext</code> causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the Wait method. It returns to the original nondefault context after the call to the Wait method completes.  </p>\n<p> This can be useful when the context-bound class has the <a class=\"xref\" href=\"system.runtime.remoting.contexts.synchronizationattribute\" data-linktype=\"relative-path\">SynchronizationAttribute</a> attribute applied. In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class. If code in the call stack of a member calls the Wait method and specifies <code>true</code> for <code>exitContext</code>, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed. When the Wait method returns, the thread that made the call must wait to reenter the synchronization domain.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Threading.Monitor.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Threading.Monitor.yml\">\r\n<meta name=\"APIName\" content=\"System.Threading.Monitor\">\r\n<meta name=\"APIName\" content=\"System.Threading.Monitor.Enter\">\r\n<meta name=\"APIName\" content=\"System.Threading.Monitor.Exit\">\r\n<meta name=\"APIName\" content=\"System.Threading.Monitor.IsEntered\">\r\n<meta name=\"APIName\" content=\"System.Threading.Monitor.Pulse\">\r\n<meta name=\"APIName\" content=\"System.Threading.Monitor.PulseAll\">\r\n<meta name=\"APIName\" content=\"System.Threading.Monitor.TryEnter\">\r\n<meta name=\"APIName\" content=\"System.Threading.Monitor.Wait\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"5128fd51-0a09-81ee-12c5-148223dbc6f7\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Threading\\Monitor.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides a mechanism that synchronizes access to objects.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Threading/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Threading.Monitor\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Threading.Monitor.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Threading.Monitor.yml","open_to_public_contributors":true,"api_name":["System.Threading.Monitor","System.Threading.Monitor.Enter","System.Threading.Monitor.Exit","System.Threading.Monitor.IsEntered","System.Threading.Monitor.Pulse","System.Threading.Monitor.PulseAll","System.Threading.Monitor.TryEnter","System.Threading.Monitor.Wait"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Threading.Monitor","System::Threading::Monitor","System.Threading.Monitor.Enter","System::Threading::Monitor::Enter","System.Threading.Monitor.Exit","System::Threading::Monitor::Exit","System.Threading.Monitor.IsEntered","System::Threading::Monitor::IsEntered","System.Threading.Monitor.Pulse","System::Threading::Monitor::Pulse","System.Threading.Monitor.PulseAll","System::Threading::Monitor::PulseAll","System.Threading.Monitor.TryEnter","System::Threading::Monitor::TryEnter","System.Threading.Monitor.Wait","System::Threading::Monitor::Wait"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"5128fd51-0a09-81ee-12c5-148223dbc6f7","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Threading\\Monitor.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Threading/Monitor.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Monitor class | Microsoft Docs","_op_ogTitle":"Monitor class","description":"Provides a mechanism that synchronizes access to objects.\n","toc_asset_id":"_splitted/System.Threading/toc.json","toc_rel":"_splitted/System.Threading/toc.json","source_url":"","ms.assetid":"System.Threading.Monitor","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.threading.monitor","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.threading.monitor","fileRelativePath":"System.Threading.Monitor.html"},"themesRelativePathToOutputRoot":"_themes/"}