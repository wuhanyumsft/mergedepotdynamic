{"content":"    \r\n    <h1 id=\"System_Security_Cryptography_CspKeyContainerInfo\">\r\n      <span class=\"lang-csharp\">CspKeyContainerInfo</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides additional information about a cryptographic key pair. This class cannot be inherited.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic sealed class CspKeyContainerInfo</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">CspKeyContainerInfo</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Use this class to obtain additional information about a key pair, such as the key container name or the key number.  </p>\n<p> In cases where a random key is generated by the <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a> or the <a class=\"xref\" href=\"system.security.cryptography.dsacryptoserviceprovider\" data-linktype=\"relative-path\">DSACryptoServiceProvider</a>, a key container will not be created until you call a method that uses the key.  Some properties of the CspKeyContainerInfo class will throw a <a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a> if a key container has not been created.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_CspKeyContainerInfo__ctor_System_Security_Cryptography_CspParameters_\" data-linktype=\"self-bookmark\">CspKeyContainerInfo(CspParameters)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.cspkeycontainerinfo\" data-linktype=\"relative-path\">CspKeyContainerInfo</a> class using the specified parameters.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_CspKeyContainerInfo_Accessible\" data-linktype=\"self-bookmark\">Accessible</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether a key in a key container is accessible.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_CspKeyContainerInfo_CryptoKeySecurity\" data-linktype=\"self-bookmark\">CryptoKeySecurity</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.security.accesscontrol.cryptokeysecurity\" data-linktype=\"relative-path\">CryptoKeySecurity</a> object that represents access rights and audit rules for a container.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_CspKeyContainerInfo_Exportable\" data-linktype=\"self-bookmark\">Exportable</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether a key can be exported from a key container.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_CspKeyContainerInfo_HardwareDevice\" data-linktype=\"self-bookmark\">HardwareDevice</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether a key is a hardware key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_CspKeyContainerInfo_KeyContainerName\" data-linktype=\"self-bookmark\">KeyContainerName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a key container name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_CspKeyContainerInfo_KeyNumber\" data-linktype=\"self-bookmark\">KeyNumber</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that describes whether an asymmetric key was created as a signature key or an exchange key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_CspKeyContainerInfo_MachineKeyStore\" data-linktype=\"self-bookmark\">MachineKeyStore</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether a key is from a machine key set.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_CspKeyContainerInfo_Protected\" data-linktype=\"self-bookmark\">Protected</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether a key pair is protected.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_CspKeyContainerInfo_ProviderName\" data-linktype=\"self-bookmark\">ProviderName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the provider name of a key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_CspKeyContainerInfo_ProviderType\" data-linktype=\"self-bookmark\">ProviderType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the provider type of a key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_CspKeyContainerInfo_RandomlyGenerated\" data-linktype=\"self-bookmark\">RandomlyGenerated</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether a key container was randomly generated by a managed cryptography class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_CspKeyContainerInfo_Removable\" data-linktype=\"self-bookmark\">Removable</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether a key can be removed from a key container.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_CspKeyContainerInfo_UniqueKeyContainerName\" data-linktype=\"self-bookmark\">UniqueKeyContainerName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a unique key container name.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_CspKeyContainerInfo__ctor_System_Security_Cryptography_CspParameters_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_CspKeyContainerInfo__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CspKeyContainerInfo(CspParameters)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.cspkeycontainerinfo\" data-linktype=\"relative-path\">CspKeyContainerInfo</a> class using the specified parameters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public CspKeyContainerInfo (System.Security.Cryptography.CspParameters parameters);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameters</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cspparameters\" data-linktype=\"relative-path\">CspParameters</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.security.cryptography.cspparameters\" data-linktype=\"relative-path\">CspParameters</a> object that provides information about the key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a key container and retrieves information about that container.  </p>\n<pre><code class=\"lang-cpp\" name=\"Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1\">using namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Text;\nint main()\n{\n   RSACryptoServiceProvider^ rsa = gcnew RSACryptoServiceProvider;\n   try\n   {\n      \n      // Note: In cases where a random key is generated,   \n      // a key container is not created until you call  \n      // a method that uses the key.  This example calls\n      // the Encrypt method before calling the\n      // CspKeyContainerInfo property so that a key\n      // container is created.  \n      // Create some data to encrypt and display it.\n      String^ data = L&quot;Here is some data to encrypt.&quot;;\n      Console::WriteLine( L&quot;Data to encrypt: {0}&quot;, data );\n      \n      // Convert the data to an array of bytes and \n      // encrypt it.\n      array&lt;Byte&gt;^byteData = Encoding::ASCII-&gt;GetBytes( data );\n      array&lt;Byte&gt;^encData = rsa-&gt;Encrypt( byteData, false );\n      \n      // Display the encrypted value.\n      Console::WriteLine( L&quot;Encrypted Data: {0}&quot;, Encoding::ASCII-&gt;GetString( encData ) );\n      Console::WriteLine();\n      Console::WriteLine( L&quot;CspKeyContainerInfo information:&quot; );\n      Console::WriteLine();\n      \n      // Create a new CspKeyContainerInfo object.\n      CspKeyContainerInfo^ keyInfo = rsa-&gt;CspKeyContainerInfo;\n      \n      // Display the value of each property.\n      Console::WriteLine( L&quot;Accessible property: {0}&quot;, keyInfo-&gt;Accessible );\n      Console::WriteLine( L&quot;Exportable property: {0}&quot;, keyInfo-&gt;Exportable );\n      Console::WriteLine( L&quot;HardwareDevice property: {0}&quot;, keyInfo-&gt;HardwareDevice );\n      Console::WriteLine( L&quot;KeyContainerName property: {0}&quot;, keyInfo-&gt;KeyContainerName );\n      Console::WriteLine( L&quot;KeyNumber property: {0}&quot;, keyInfo-&gt;KeyNumber );\n      Console::WriteLine( L&quot;MachineKeyStore property: {0}&quot;, keyInfo-&gt;MachineKeyStore );\n      Console::WriteLine( L&quot;Protected property: {0}&quot;, keyInfo-&gt;Protected );\n      Console::WriteLine( L&quot;ProviderName property: {0}&quot;, keyInfo-&gt;ProviderName );\n      Console::WriteLine( L&quot;ProviderType property: {0}&quot;, keyInfo-&gt;ProviderType );\n      Console::WriteLine( L&quot;RandomlyGenerated property: {0}&quot;, keyInfo-&gt;RandomlyGenerated );\n      Console::WriteLine( L&quot;Removable property: {0}&quot;, keyInfo-&gt;Removable );\n      Console::WriteLine( L&quot;UniqueKeyContainerName property: {0}&quot;, keyInfo-&gt;UniqueKeyContainerName );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( e );\n   }\n   finally\n   {\n      \n      // Clear the key.\n      rsa-&gt;Clear();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1\">Imports System\nImports System.Security.Cryptography\nImports System.Text\n\nModule CspKeyContainerInfoExample\n\n    Sub Main(ByVal args() As String)\n        Dim rsa As New RSACryptoServiceProvider()\n\n        Try\n            &#39; Note: In cases where a random key is generated,   \n            &#39; a key container is not created until you call  \n            &#39; a method that uses the key.  This example calls\n            &#39; the Encrypt method before calling the\n            &#39; CspKeyContainerInfo property so that a key\n            &#39; container is created.  \n            &#39; Create some data to encrypt and display it.\n            Dim data As String = &quot;Here is some data to encrypt.&quot;\n\n            Console.WriteLine(&quot;Data to encrypt: &quot; + data)\n\n            &#39; Convert the data to an array of bytes and \n            &#39; encrypt it.\n            Dim byteData As Byte() = Encoding.ASCII.GetBytes(data)\n\n            Dim encData As Byte() = rsa.Encrypt(byteData, False)\n\n            &#39; Display the encrypted value.\n            Console.WriteLine(&quot;Encrypted Data: &quot; + Encoding.ASCII.GetString(encData))\n\n            Console.WriteLine()\n\n            Console.WriteLine(&quot;CspKeyContainerInfo information:&quot;)\n\n            Console.WriteLine()\n\n            &#39; Create a new CspKeyContainerInfo object.\n            Dim keyInfo As CspKeyContainerInfo = rsa.CspKeyContainerInfo\n\n            &#39; Display the value of each property.\n            Console.WriteLine(&quot;Accessible property: &quot; + keyInfo.Accessible.ToString())\n\n            Console.WriteLine(&quot;Exportable property: &quot; + keyInfo.Exportable.ToString())\n\n            Console.WriteLine(&quot;HardwareDevice property: &quot; + keyInfo.HardwareDevice.ToString())\n\n            Console.WriteLine(&quot;KeyContainerName property: &quot; + keyInfo.KeyContainerName)\n\n            Console.WriteLine(&quot;KeyNumber property: &quot; + keyInfo.KeyNumber.ToString())\n\n            Console.WriteLine(&quot;MachineKeyStore property: &quot; + keyInfo.MachineKeyStore.ToString())\n\n            Console.WriteLine(&quot;Protected property: &quot; + keyInfo.Protected.ToString())\n\n            Console.WriteLine(&quot;ProviderName property: &quot; + keyInfo.ProviderName)\n\n            Console.WriteLine(&quot;ProviderType property: &quot; + keyInfo.ProviderType.ToString())\n\n            Console.WriteLine(&quot;RandomlyGenerated property: &quot; + keyInfo.RandomlyGenerated.ToString())\n\n            Console.WriteLine(&quot;Removable property: &quot; + keyInfo.Removable.ToString())\n\n            Console.WriteLine(&quot;UniqueKeyContainerName property: &quot; + keyInfo.UniqueKeyContainerName)\n\n\n        Catch e As Exception\n            Console.WriteLine(e.ToString())\n        Finally\n            &#39; Clear the key.\n            rsa.Clear()\n        End Try\n        Console.ReadLine()\n\n    End Sub\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1\">using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\n\npublic class CspKeyContainerInfoExample\n{\n\n    public static void Main(String[] args)\n    {\n        RSACryptoServiceProvider rsa= new RSACryptoServiceProvider();\n\n        try\n        {\n            // Note: In cases where a random key is generated,   \n            // a key container is not created until you call  \n            // a method that uses the key.  This example calls\n            // the Encrypt method before calling the\n            // CspKeyContainerInfo property so that a key\n            // container is created.  \n\n            // Create some data to encrypt and display it.\n            string data = &quot;Here is some data to encrypt.&quot;;\n\n            Console.WriteLine(&quot;Data to encrypt: &quot; + data);\n\n            // Convert the data to an array of bytes and \n            // encrypt it.\n            byte[] byteData = Encoding.ASCII.GetBytes(data);\n\n            byte[] encData = rsa.Encrypt(byteData, false);\n\n            // Display the encrypted value.\n            Console.WriteLine(&quot;Encrypted Data: &quot; + Encoding.ASCII.GetString(encData));\n\n            Console.WriteLine();\n\n            Console.WriteLine(&quot;CspKeyContainerInfo information:&quot;);\n\n            Console.WriteLine();\n\n            // Create a new CspKeyContainerInfo object.\n            CspKeyContainerInfo keyInfo = rsa.CspKeyContainerInfo;\n\n            // Display the value of each property.\n\n            Console.WriteLine(&quot;Accessible property: &quot; + keyInfo.Accessible);\n\n            Console.WriteLine(&quot;Exportable property: &quot; + keyInfo.Exportable);\n\n            Console.WriteLine(&quot;HardwareDevice property: &quot; + keyInfo.HardwareDevice);\n\n            Console.WriteLine(&quot;KeyContainerName property: &quot; + keyInfo.KeyContainerName);\n\n            Console.WriteLine(&quot;KeyNumber property: &quot; + keyInfo.KeyNumber.ToString());\n\n            Console.WriteLine(&quot;MachineKeyStore property: &quot; + keyInfo.MachineKeyStore);\n\n            Console.WriteLine(&quot;Protected property: &quot; + keyInfo.Protected);\n\n            Console.WriteLine(&quot;ProviderName property: &quot; + keyInfo.ProviderName);\n\n            Console.WriteLine(&quot;ProviderType property: &quot; + keyInfo.ProviderType);\n\n            Console.WriteLine(&quot;RandomlyGenerated property: &quot; + keyInfo.RandomlyGenerated);\n\n            Console.WriteLine(&quot;Removable property: &quot; + keyInfo.Removable);\n\n            Console.WriteLine(&quot;UniqueKeyContainerName property: &quot; + keyInfo.UniqueKeyContainerName);\n\n\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(e.ToString());\n        }\n        finally\n        {\n            // Clear the key.\n            rsa.Clear();\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_CspKeyContainerInfo_Accessible\">\r\n    \r\n            <a id=\"System_Security_Cryptography_CspKeyContainerInfo_Accessible_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Accessible</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether a key in a key container is accessible.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Accessible { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the key is accessible; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The key type is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a key container and retrieves information about that container.  </p>\n<pre><code class=\"lang-cpp\" name=\"Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1\">using namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Text;\nint main()\n{\n   RSACryptoServiceProvider^ rsa = gcnew RSACryptoServiceProvider;\n   try\n   {\n      \n      // Note: In cases where a random key is generated,   \n      // a key container is not created until you call  \n      // a method that uses the key.  This example calls\n      // the Encrypt method before calling the\n      // CspKeyContainerInfo property so that a key\n      // container is created.  \n      // Create some data to encrypt and display it.\n      String^ data = L&quot;Here is some data to encrypt.&quot;;\n      Console::WriteLine( L&quot;Data to encrypt: {0}&quot;, data );\n      \n      // Convert the data to an array of bytes and \n      // encrypt it.\n      array&lt;Byte&gt;^byteData = Encoding::ASCII-&gt;GetBytes( data );\n      array&lt;Byte&gt;^encData = rsa-&gt;Encrypt( byteData, false );\n      \n      // Display the encrypted value.\n      Console::WriteLine( L&quot;Encrypted Data: {0}&quot;, Encoding::ASCII-&gt;GetString( encData ) );\n      Console::WriteLine();\n      Console::WriteLine( L&quot;CspKeyContainerInfo information:&quot; );\n      Console::WriteLine();\n      \n      // Create a new CspKeyContainerInfo object.\n      CspKeyContainerInfo^ keyInfo = rsa-&gt;CspKeyContainerInfo;\n      \n      // Display the value of each property.\n      Console::WriteLine( L&quot;Accessible property: {0}&quot;, keyInfo-&gt;Accessible );\n      Console::WriteLine( L&quot;Exportable property: {0}&quot;, keyInfo-&gt;Exportable );\n      Console::WriteLine( L&quot;HardwareDevice property: {0}&quot;, keyInfo-&gt;HardwareDevice );\n      Console::WriteLine( L&quot;KeyContainerName property: {0}&quot;, keyInfo-&gt;KeyContainerName );\n      Console::WriteLine( L&quot;KeyNumber property: {0}&quot;, keyInfo-&gt;KeyNumber );\n      Console::WriteLine( L&quot;MachineKeyStore property: {0}&quot;, keyInfo-&gt;MachineKeyStore );\n      Console::WriteLine( L&quot;Protected property: {0}&quot;, keyInfo-&gt;Protected );\n      Console::WriteLine( L&quot;ProviderName property: {0}&quot;, keyInfo-&gt;ProviderName );\n      Console::WriteLine( L&quot;ProviderType property: {0}&quot;, keyInfo-&gt;ProviderType );\n      Console::WriteLine( L&quot;RandomlyGenerated property: {0}&quot;, keyInfo-&gt;RandomlyGenerated );\n      Console::WriteLine( L&quot;Removable property: {0}&quot;, keyInfo-&gt;Removable );\n      Console::WriteLine( L&quot;UniqueKeyContainerName property: {0}&quot;, keyInfo-&gt;UniqueKeyContainerName );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( e );\n   }\n   finally\n   {\n      \n      // Clear the key.\n      rsa-&gt;Clear();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1\">Imports System\nImports System.Security.Cryptography\nImports System.Text\n\nModule CspKeyContainerInfoExample\n\n    Sub Main(ByVal args() As String)\n        Dim rsa As New RSACryptoServiceProvider()\n\n        Try\n            &#39; Note: In cases where a random key is generated,   \n            &#39; a key container is not created until you call  \n            &#39; a method that uses the key.  This example calls\n            &#39; the Encrypt method before calling the\n            &#39; CspKeyContainerInfo property so that a key\n            &#39; container is created.  \n            &#39; Create some data to encrypt and display it.\n            Dim data As String = &quot;Here is some data to encrypt.&quot;\n\n            Console.WriteLine(&quot;Data to encrypt: &quot; + data)\n\n            &#39; Convert the data to an array of bytes and \n            &#39; encrypt it.\n            Dim byteData As Byte() = Encoding.ASCII.GetBytes(data)\n\n            Dim encData As Byte() = rsa.Encrypt(byteData, False)\n\n            &#39; Display the encrypted value.\n            Console.WriteLine(&quot;Encrypted Data: &quot; + Encoding.ASCII.GetString(encData))\n\n            Console.WriteLine()\n\n            Console.WriteLine(&quot;CspKeyContainerInfo information:&quot;)\n\n            Console.WriteLine()\n\n            &#39; Create a new CspKeyContainerInfo object.\n            Dim keyInfo As CspKeyContainerInfo = rsa.CspKeyContainerInfo\n\n            &#39; Display the value of each property.\n            Console.WriteLine(&quot;Accessible property: &quot; + keyInfo.Accessible.ToString())\n\n            Console.WriteLine(&quot;Exportable property: &quot; + keyInfo.Exportable.ToString())\n\n            Console.WriteLine(&quot;HardwareDevice property: &quot; + keyInfo.HardwareDevice.ToString())\n\n            Console.WriteLine(&quot;KeyContainerName property: &quot; + keyInfo.KeyContainerName)\n\n            Console.WriteLine(&quot;KeyNumber property: &quot; + keyInfo.KeyNumber.ToString())\n\n            Console.WriteLine(&quot;MachineKeyStore property: &quot; + keyInfo.MachineKeyStore.ToString())\n\n            Console.WriteLine(&quot;Protected property: &quot; + keyInfo.Protected.ToString())\n\n            Console.WriteLine(&quot;ProviderName property: &quot; + keyInfo.ProviderName)\n\n            Console.WriteLine(&quot;ProviderType property: &quot; + keyInfo.ProviderType.ToString())\n\n            Console.WriteLine(&quot;RandomlyGenerated property: &quot; + keyInfo.RandomlyGenerated.ToString())\n\n            Console.WriteLine(&quot;Removable property: &quot; + keyInfo.Removable.ToString())\n\n            Console.WriteLine(&quot;UniqueKeyContainerName property: &quot; + keyInfo.UniqueKeyContainerName)\n\n\n        Catch e As Exception\n            Console.WriteLine(e.ToString())\n        Finally\n            &#39; Clear the key.\n            rsa.Clear()\n        End Try\n        Console.ReadLine()\n\n    End Sub\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1\">using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\n\npublic class CspKeyContainerInfoExample\n{\n\n    public static void Main(String[] args)\n    {\n        RSACryptoServiceProvider rsa= new RSACryptoServiceProvider();\n\n        try\n        {\n            // Note: In cases where a random key is generated,   \n            // a key container is not created until you call  \n            // a method that uses the key.  This example calls\n            // the Encrypt method before calling the\n            // CspKeyContainerInfo property so that a key\n            // container is created.  \n\n            // Create some data to encrypt and display it.\n            string data = &quot;Here is some data to encrypt.&quot;;\n\n            Console.WriteLine(&quot;Data to encrypt: &quot; + data);\n\n            // Convert the data to an array of bytes and \n            // encrypt it.\n            byte[] byteData = Encoding.ASCII.GetBytes(data);\n\n            byte[] encData = rsa.Encrypt(byteData, false);\n\n            // Display the encrypted value.\n            Console.WriteLine(&quot;Encrypted Data: &quot; + Encoding.ASCII.GetString(encData));\n\n            Console.WriteLine();\n\n            Console.WriteLine(&quot;CspKeyContainerInfo information:&quot;);\n\n            Console.WriteLine();\n\n            // Create a new CspKeyContainerInfo object.\n            CspKeyContainerInfo keyInfo = rsa.CspKeyContainerInfo;\n\n            // Display the value of each property.\n\n            Console.WriteLine(&quot;Accessible property: &quot; + keyInfo.Accessible);\n\n            Console.WriteLine(&quot;Exportable property: &quot; + keyInfo.Exportable);\n\n            Console.WriteLine(&quot;HardwareDevice property: &quot; + keyInfo.HardwareDevice);\n\n            Console.WriteLine(&quot;KeyContainerName property: &quot; + keyInfo.KeyContainerName);\n\n            Console.WriteLine(&quot;KeyNumber property: &quot; + keyInfo.KeyNumber.ToString());\n\n            Console.WriteLine(&quot;MachineKeyStore property: &quot; + keyInfo.MachineKeyStore);\n\n            Console.WriteLine(&quot;Protected property: &quot; + keyInfo.Protected);\n\n            Console.WriteLine(&quot;ProviderName property: &quot; + keyInfo.ProviderName);\n\n            Console.WriteLine(&quot;ProviderType property: &quot; + keyInfo.ProviderType);\n\n            Console.WriteLine(&quot;RandomlyGenerated property: &quot; + keyInfo.RandomlyGenerated);\n\n            Console.WriteLine(&quot;Removable property: &quot; + keyInfo.Removable);\n\n            Console.WriteLine(&quot;UniqueKeyContainerName property: &quot; + keyInfo.UniqueKeyContainerName);\n\n\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(e.ToString());\n        }\n        finally\n        {\n            // Clear the key.\n            rsa.Clear();\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_CspKeyContainerInfo_CryptoKeySecurity\">\r\n    \r\n            <a id=\"System_Security_Cryptography_CspKeyContainerInfo_CryptoKeySecurity_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CryptoKeySecurity</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.security.accesscontrol.cryptokeysecurity\" data-linktype=\"relative-path\">CryptoKeySecurity</a> object that represents access rights and audit rules for a container.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Security.AccessControl.CryptoKeySecurity CryptoKeySecurity { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.cryptokeysecurity\" data-linktype=\"relative-path\">CryptoKeySecurity</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.security.accesscontrol.cryptokeysecurity\" data-linktype=\"relative-path\">CryptoKeySecurity</a> object that represents access rights and audit rules for a container.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The key type is not supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The cryptographic service provider cannot be found.  </p>\n<p> -or-  </p>\n<p> The key container was not found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <a class=\"xref\" href=\"system.security.cryptography.cspkeycontainerinfo\" data-linktype=\"relative-path\">CspKeyContainerInfo</a> property to retrieve the  <a class=\"xref\" href=\"system.security.accesscontrol.cryptokeysecurity\" data-linktype=\"relative-path\">CryptoKeySecurity</a> object that manages the creation of discretionary access control lists (DACLS) and system access control lists (SACLS) for a container.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_CspKeyContainerInfo_Exportable\">\r\n    \r\n            <a id=\"System_Security_Cryptography_CspKeyContainerInfo_Exportable_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Exportable</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether a key can be exported from a key container.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Exportable { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the key can be exported; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The key type is not supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The cryptographic service provider cannot be found.  </p>\n<p> -or-  </p>\n<p> The key container was not found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a key container and retrieves information about that container.  </p>\n<pre><code class=\"lang-cpp\" name=\"Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1\">using namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Text;\nint main()\n{\n   RSACryptoServiceProvider^ rsa = gcnew RSACryptoServiceProvider;\n   try\n   {\n      \n      // Note: In cases where a random key is generated,   \n      // a key container is not created until you call  \n      // a method that uses the key.  This example calls\n      // the Encrypt method before calling the\n      // CspKeyContainerInfo property so that a key\n      // container is created.  \n      // Create some data to encrypt and display it.\n      String^ data = L&quot;Here is some data to encrypt.&quot;;\n      Console::WriteLine( L&quot;Data to encrypt: {0}&quot;, data );\n      \n      // Convert the data to an array of bytes and \n      // encrypt it.\n      array&lt;Byte&gt;^byteData = Encoding::ASCII-&gt;GetBytes( data );\n      array&lt;Byte&gt;^encData = rsa-&gt;Encrypt( byteData, false );\n      \n      // Display the encrypted value.\n      Console::WriteLine( L&quot;Encrypted Data: {0}&quot;, Encoding::ASCII-&gt;GetString( encData ) );\n      Console::WriteLine();\n      Console::WriteLine( L&quot;CspKeyContainerInfo information:&quot; );\n      Console::WriteLine();\n      \n      // Create a new CspKeyContainerInfo object.\n      CspKeyContainerInfo^ keyInfo = rsa-&gt;CspKeyContainerInfo;\n      \n      // Display the value of each property.\n      Console::WriteLine( L&quot;Accessible property: {0}&quot;, keyInfo-&gt;Accessible );\n      Console::WriteLine( L&quot;Exportable property: {0}&quot;, keyInfo-&gt;Exportable );\n      Console::WriteLine( L&quot;HardwareDevice property: {0}&quot;, keyInfo-&gt;HardwareDevice );\n      Console::WriteLine( L&quot;KeyContainerName property: {0}&quot;, keyInfo-&gt;KeyContainerName );\n      Console::WriteLine( L&quot;KeyNumber property: {0}&quot;, keyInfo-&gt;KeyNumber );\n      Console::WriteLine( L&quot;MachineKeyStore property: {0}&quot;, keyInfo-&gt;MachineKeyStore );\n      Console::WriteLine( L&quot;Protected property: {0}&quot;, keyInfo-&gt;Protected );\n      Console::WriteLine( L&quot;ProviderName property: {0}&quot;, keyInfo-&gt;ProviderName );\n      Console::WriteLine( L&quot;ProviderType property: {0}&quot;, keyInfo-&gt;ProviderType );\n      Console::WriteLine( L&quot;RandomlyGenerated property: {0}&quot;, keyInfo-&gt;RandomlyGenerated );\n      Console::WriteLine( L&quot;Removable property: {0}&quot;, keyInfo-&gt;Removable );\n      Console::WriteLine( L&quot;UniqueKeyContainerName property: {0}&quot;, keyInfo-&gt;UniqueKeyContainerName );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( e );\n   }\n   finally\n   {\n      \n      // Clear the key.\n      rsa-&gt;Clear();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1\">Imports System\nImports System.Security.Cryptography\nImports System.Text\n\nModule CspKeyContainerInfoExample\n\n    Sub Main(ByVal args() As String)\n        Dim rsa As New RSACryptoServiceProvider()\n\n        Try\n            &#39; Note: In cases where a random key is generated,   \n            &#39; a key container is not created until you call  \n            &#39; a method that uses the key.  This example calls\n            &#39; the Encrypt method before calling the\n            &#39; CspKeyContainerInfo property so that a key\n            &#39; container is created.  \n            &#39; Create some data to encrypt and display it.\n            Dim data As String = &quot;Here is some data to encrypt.&quot;\n\n            Console.WriteLine(&quot;Data to encrypt: &quot; + data)\n\n            &#39; Convert the data to an array of bytes and \n            &#39; encrypt it.\n            Dim byteData As Byte() = Encoding.ASCII.GetBytes(data)\n\n            Dim encData As Byte() = rsa.Encrypt(byteData, False)\n\n            &#39; Display the encrypted value.\n            Console.WriteLine(&quot;Encrypted Data: &quot; + Encoding.ASCII.GetString(encData))\n\n            Console.WriteLine()\n\n            Console.WriteLine(&quot;CspKeyContainerInfo information:&quot;)\n\n            Console.WriteLine()\n\n            &#39; Create a new CspKeyContainerInfo object.\n            Dim keyInfo As CspKeyContainerInfo = rsa.CspKeyContainerInfo\n\n            &#39; Display the value of each property.\n            Console.WriteLine(&quot;Accessible property: &quot; + keyInfo.Accessible.ToString())\n\n            Console.WriteLine(&quot;Exportable property: &quot; + keyInfo.Exportable.ToString())\n\n            Console.WriteLine(&quot;HardwareDevice property: &quot; + keyInfo.HardwareDevice.ToString())\n\n            Console.WriteLine(&quot;KeyContainerName property: &quot; + keyInfo.KeyContainerName)\n\n            Console.WriteLine(&quot;KeyNumber property: &quot; + keyInfo.KeyNumber.ToString())\n\n            Console.WriteLine(&quot;MachineKeyStore property: &quot; + keyInfo.MachineKeyStore.ToString())\n\n            Console.WriteLine(&quot;Protected property: &quot; + keyInfo.Protected.ToString())\n\n            Console.WriteLine(&quot;ProviderName property: &quot; + keyInfo.ProviderName)\n\n            Console.WriteLine(&quot;ProviderType property: &quot; + keyInfo.ProviderType.ToString())\n\n            Console.WriteLine(&quot;RandomlyGenerated property: &quot; + keyInfo.RandomlyGenerated.ToString())\n\n            Console.WriteLine(&quot;Removable property: &quot; + keyInfo.Removable.ToString())\n\n            Console.WriteLine(&quot;UniqueKeyContainerName property: &quot; + keyInfo.UniqueKeyContainerName)\n\n\n        Catch e As Exception\n            Console.WriteLine(e.ToString())\n        Finally\n            &#39; Clear the key.\n            rsa.Clear()\n        End Try\n        Console.ReadLine()\n\n    End Sub\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1\">using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\n\npublic class CspKeyContainerInfoExample\n{\n\n    public static void Main(String[] args)\n    {\n        RSACryptoServiceProvider rsa= new RSACryptoServiceProvider();\n\n        try\n        {\n            // Note: In cases where a random key is generated,   \n            // a key container is not created until you call  \n            // a method that uses the key.  This example calls\n            // the Encrypt method before calling the\n            // CspKeyContainerInfo property so that a key\n            // container is created.  \n\n            // Create some data to encrypt and display it.\n            string data = &quot;Here is some data to encrypt.&quot;;\n\n            Console.WriteLine(&quot;Data to encrypt: &quot; + data);\n\n            // Convert the data to an array of bytes and \n            // encrypt it.\n            byte[] byteData = Encoding.ASCII.GetBytes(data);\n\n            byte[] encData = rsa.Encrypt(byteData, false);\n\n            // Display the encrypted value.\n            Console.WriteLine(&quot;Encrypted Data: &quot; + Encoding.ASCII.GetString(encData));\n\n            Console.WriteLine();\n\n            Console.WriteLine(&quot;CspKeyContainerInfo information:&quot;);\n\n            Console.WriteLine();\n\n            // Create a new CspKeyContainerInfo object.\n            CspKeyContainerInfo keyInfo = rsa.CspKeyContainerInfo;\n\n            // Display the value of each property.\n\n            Console.WriteLine(&quot;Accessible property: &quot; + keyInfo.Accessible);\n\n            Console.WriteLine(&quot;Exportable property: &quot; + keyInfo.Exportable);\n\n            Console.WriteLine(&quot;HardwareDevice property: &quot; + keyInfo.HardwareDevice);\n\n            Console.WriteLine(&quot;KeyContainerName property: &quot; + keyInfo.KeyContainerName);\n\n            Console.WriteLine(&quot;KeyNumber property: &quot; + keyInfo.KeyNumber.ToString());\n\n            Console.WriteLine(&quot;MachineKeyStore property: &quot; + keyInfo.MachineKeyStore);\n\n            Console.WriteLine(&quot;Protected property: &quot; + keyInfo.Protected);\n\n            Console.WriteLine(&quot;ProviderName property: &quot; + keyInfo.ProviderName);\n\n            Console.WriteLine(&quot;ProviderType property: &quot; + keyInfo.ProviderType);\n\n            Console.WriteLine(&quot;RandomlyGenerated property: &quot; + keyInfo.RandomlyGenerated);\n\n            Console.WriteLine(&quot;Removable property: &quot; + keyInfo.Removable);\n\n            Console.WriteLine(&quot;UniqueKeyContainerName property: &quot; + keyInfo.UniqueKeyContainerName);\n\n\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(e.ToString());\n        }\n        finally\n        {\n            // Clear the key.\n            rsa.Clear();\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_CspKeyContainerInfo_HardwareDevice\">\r\n    \r\n            <a id=\"System_Security_Cryptography_CspKeyContainerInfo_HardwareDevice_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HardwareDevice</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether a key is a hardware key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool HardwareDevice { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the key is a hardware key; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The cryptographic service provider cannot be found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a key container and retrieves information about that container.  </p>\n<pre><code class=\"lang-cpp\" name=\"Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1\">using namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Text;\nint main()\n{\n   RSACryptoServiceProvider^ rsa = gcnew RSACryptoServiceProvider;\n   try\n   {\n      \n      // Note: In cases where a random key is generated,   \n      // a key container is not created until you call  \n      // a method that uses the key.  This example calls\n      // the Encrypt method before calling the\n      // CspKeyContainerInfo property so that a key\n      // container is created.  \n      // Create some data to encrypt and display it.\n      String^ data = L&quot;Here is some data to encrypt.&quot;;\n      Console::WriteLine( L&quot;Data to encrypt: {0}&quot;, data );\n      \n      // Convert the data to an array of bytes and \n      // encrypt it.\n      array&lt;Byte&gt;^byteData = Encoding::ASCII-&gt;GetBytes( data );\n      array&lt;Byte&gt;^encData = rsa-&gt;Encrypt( byteData, false );\n      \n      // Display the encrypted value.\n      Console::WriteLine( L&quot;Encrypted Data: {0}&quot;, Encoding::ASCII-&gt;GetString( encData ) );\n      Console::WriteLine();\n      Console::WriteLine( L&quot;CspKeyContainerInfo information:&quot; );\n      Console::WriteLine();\n      \n      // Create a new CspKeyContainerInfo object.\n      CspKeyContainerInfo^ keyInfo = rsa-&gt;CspKeyContainerInfo;\n      \n      // Display the value of each property.\n      Console::WriteLine( L&quot;Accessible property: {0}&quot;, keyInfo-&gt;Accessible );\n      Console::WriteLine( L&quot;Exportable property: {0}&quot;, keyInfo-&gt;Exportable );\n      Console::WriteLine( L&quot;HardwareDevice property: {0}&quot;, keyInfo-&gt;HardwareDevice );\n      Console::WriteLine( L&quot;KeyContainerName property: {0}&quot;, keyInfo-&gt;KeyContainerName );\n      Console::WriteLine( L&quot;KeyNumber property: {0}&quot;, keyInfo-&gt;KeyNumber );\n      Console::WriteLine( L&quot;MachineKeyStore property: {0}&quot;, keyInfo-&gt;MachineKeyStore );\n      Console::WriteLine( L&quot;Protected property: {0}&quot;, keyInfo-&gt;Protected );\n      Console::WriteLine( L&quot;ProviderName property: {0}&quot;, keyInfo-&gt;ProviderName );\n      Console::WriteLine( L&quot;ProviderType property: {0}&quot;, keyInfo-&gt;ProviderType );\n      Console::WriteLine( L&quot;RandomlyGenerated property: {0}&quot;, keyInfo-&gt;RandomlyGenerated );\n      Console::WriteLine( L&quot;Removable property: {0}&quot;, keyInfo-&gt;Removable );\n      Console::WriteLine( L&quot;UniqueKeyContainerName property: {0}&quot;, keyInfo-&gt;UniqueKeyContainerName );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( e );\n   }\n   finally\n   {\n      \n      // Clear the key.\n      rsa-&gt;Clear();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1\">Imports System\nImports System.Security.Cryptography\nImports System.Text\n\nModule CspKeyContainerInfoExample\n\n    Sub Main(ByVal args() As String)\n        Dim rsa As New RSACryptoServiceProvider()\n\n        Try\n            &#39; Note: In cases where a random key is generated,   \n            &#39; a key container is not created until you call  \n            &#39; a method that uses the key.  This example calls\n            &#39; the Encrypt method before calling the\n            &#39; CspKeyContainerInfo property so that a key\n            &#39; container is created.  \n            &#39; Create some data to encrypt and display it.\n            Dim data As String = &quot;Here is some data to encrypt.&quot;\n\n            Console.WriteLine(&quot;Data to encrypt: &quot; + data)\n\n            &#39; Convert the data to an array of bytes and \n            &#39; encrypt it.\n            Dim byteData As Byte() = Encoding.ASCII.GetBytes(data)\n\n            Dim encData As Byte() = rsa.Encrypt(byteData, False)\n\n            &#39; Display the encrypted value.\n            Console.WriteLine(&quot;Encrypted Data: &quot; + Encoding.ASCII.GetString(encData))\n\n            Console.WriteLine()\n\n            Console.WriteLine(&quot;CspKeyContainerInfo information:&quot;)\n\n            Console.WriteLine()\n\n            &#39; Create a new CspKeyContainerInfo object.\n            Dim keyInfo As CspKeyContainerInfo = rsa.CspKeyContainerInfo\n\n            &#39; Display the value of each property.\n            Console.WriteLine(&quot;Accessible property: &quot; + keyInfo.Accessible.ToString())\n\n            Console.WriteLine(&quot;Exportable property: &quot; + keyInfo.Exportable.ToString())\n\n            Console.WriteLine(&quot;HardwareDevice property: &quot; + keyInfo.HardwareDevice.ToString())\n\n            Console.WriteLine(&quot;KeyContainerName property: &quot; + keyInfo.KeyContainerName)\n\n            Console.WriteLine(&quot;KeyNumber property: &quot; + keyInfo.KeyNumber.ToString())\n\n            Console.WriteLine(&quot;MachineKeyStore property: &quot; + keyInfo.MachineKeyStore.ToString())\n\n            Console.WriteLine(&quot;Protected property: &quot; + keyInfo.Protected.ToString())\n\n            Console.WriteLine(&quot;ProviderName property: &quot; + keyInfo.ProviderName)\n\n            Console.WriteLine(&quot;ProviderType property: &quot; + keyInfo.ProviderType.ToString())\n\n            Console.WriteLine(&quot;RandomlyGenerated property: &quot; + keyInfo.RandomlyGenerated.ToString())\n\n            Console.WriteLine(&quot;Removable property: &quot; + keyInfo.Removable.ToString())\n\n            Console.WriteLine(&quot;UniqueKeyContainerName property: &quot; + keyInfo.UniqueKeyContainerName)\n\n\n        Catch e As Exception\n            Console.WriteLine(e.ToString())\n        Finally\n            &#39; Clear the key.\n            rsa.Clear()\n        End Try\n        Console.ReadLine()\n\n    End Sub\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1\">using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\n\npublic class CspKeyContainerInfoExample\n{\n\n    public static void Main(String[] args)\n    {\n        RSACryptoServiceProvider rsa= new RSACryptoServiceProvider();\n\n        try\n        {\n            // Note: In cases where a random key is generated,   \n            // a key container is not created until you call  \n            // a method that uses the key.  This example calls\n            // the Encrypt method before calling the\n            // CspKeyContainerInfo property so that a key\n            // container is created.  \n\n            // Create some data to encrypt and display it.\n            string data = &quot;Here is some data to encrypt.&quot;;\n\n            Console.WriteLine(&quot;Data to encrypt: &quot; + data);\n\n            // Convert the data to an array of bytes and \n            // encrypt it.\n            byte[] byteData = Encoding.ASCII.GetBytes(data);\n\n            byte[] encData = rsa.Encrypt(byteData, false);\n\n            // Display the encrypted value.\n            Console.WriteLine(&quot;Encrypted Data: &quot; + Encoding.ASCII.GetString(encData));\n\n            Console.WriteLine();\n\n            Console.WriteLine(&quot;CspKeyContainerInfo information:&quot;);\n\n            Console.WriteLine();\n\n            // Create a new CspKeyContainerInfo object.\n            CspKeyContainerInfo keyInfo = rsa.CspKeyContainerInfo;\n\n            // Display the value of each property.\n\n            Console.WriteLine(&quot;Accessible property: &quot; + keyInfo.Accessible);\n\n            Console.WriteLine(&quot;Exportable property: &quot; + keyInfo.Exportable);\n\n            Console.WriteLine(&quot;HardwareDevice property: &quot; + keyInfo.HardwareDevice);\n\n            Console.WriteLine(&quot;KeyContainerName property: &quot; + keyInfo.KeyContainerName);\n\n            Console.WriteLine(&quot;KeyNumber property: &quot; + keyInfo.KeyNumber.ToString());\n\n            Console.WriteLine(&quot;MachineKeyStore property: &quot; + keyInfo.MachineKeyStore);\n\n            Console.WriteLine(&quot;Protected property: &quot; + keyInfo.Protected);\n\n            Console.WriteLine(&quot;ProviderName property: &quot; + keyInfo.ProviderName);\n\n            Console.WriteLine(&quot;ProviderType property: &quot; + keyInfo.ProviderType);\n\n            Console.WriteLine(&quot;RandomlyGenerated property: &quot; + keyInfo.RandomlyGenerated);\n\n            Console.WriteLine(&quot;Removable property: &quot; + keyInfo.Removable);\n\n            Console.WriteLine(&quot;UniqueKeyContainerName property: &quot; + keyInfo.UniqueKeyContainerName);\n\n\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(e.ToString());\n        }\n        finally\n        {\n            // Clear the key.\n            rsa.Clear();\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_CspKeyContainerInfo_KeyContainerName\">\r\n    \r\n            <a id=\"System_Security_Cryptography_CspKeyContainerInfo_KeyContainerName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">KeyContainerName</div>        \r\n          </div>\r\n    \r\n            <p>Gets a key container name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string KeyContainerName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The key container name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a key container and retrieves information about that container.  </p>\n<pre><code class=\"lang-cpp\" name=\"Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1\">using namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Text;\nint main()\n{\n   RSACryptoServiceProvider^ rsa = gcnew RSACryptoServiceProvider;\n   try\n   {\n      \n      // Note: In cases where a random key is generated,   \n      // a key container is not created until you call  \n      // a method that uses the key.  This example calls\n      // the Encrypt method before calling the\n      // CspKeyContainerInfo property so that a key\n      // container is created.  \n      // Create some data to encrypt and display it.\n      String^ data = L&quot;Here is some data to encrypt.&quot;;\n      Console::WriteLine( L&quot;Data to encrypt: {0}&quot;, data );\n      \n      // Convert the data to an array of bytes and \n      // encrypt it.\n      array&lt;Byte&gt;^byteData = Encoding::ASCII-&gt;GetBytes( data );\n      array&lt;Byte&gt;^encData = rsa-&gt;Encrypt( byteData, false );\n      \n      // Display the encrypted value.\n      Console::WriteLine( L&quot;Encrypted Data: {0}&quot;, Encoding::ASCII-&gt;GetString( encData ) );\n      Console::WriteLine();\n      Console::WriteLine( L&quot;CspKeyContainerInfo information:&quot; );\n      Console::WriteLine();\n      \n      // Create a new CspKeyContainerInfo object.\n      CspKeyContainerInfo^ keyInfo = rsa-&gt;CspKeyContainerInfo;\n      \n      // Display the value of each property.\n      Console::WriteLine( L&quot;Accessible property: {0}&quot;, keyInfo-&gt;Accessible );\n      Console::WriteLine( L&quot;Exportable property: {0}&quot;, keyInfo-&gt;Exportable );\n      Console::WriteLine( L&quot;HardwareDevice property: {0}&quot;, keyInfo-&gt;HardwareDevice );\n      Console::WriteLine( L&quot;KeyContainerName property: {0}&quot;, keyInfo-&gt;KeyContainerName );\n      Console::WriteLine( L&quot;KeyNumber property: {0}&quot;, keyInfo-&gt;KeyNumber );\n      Console::WriteLine( L&quot;MachineKeyStore property: {0}&quot;, keyInfo-&gt;MachineKeyStore );\n      Console::WriteLine( L&quot;Protected property: {0}&quot;, keyInfo-&gt;Protected );\n      Console::WriteLine( L&quot;ProviderName property: {0}&quot;, keyInfo-&gt;ProviderName );\n      Console::WriteLine( L&quot;ProviderType property: {0}&quot;, keyInfo-&gt;ProviderType );\n      Console::WriteLine( L&quot;RandomlyGenerated property: {0}&quot;, keyInfo-&gt;RandomlyGenerated );\n      Console::WriteLine( L&quot;Removable property: {0}&quot;, keyInfo-&gt;Removable );\n      Console::WriteLine( L&quot;UniqueKeyContainerName property: {0}&quot;, keyInfo-&gt;UniqueKeyContainerName );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( e );\n   }\n   finally\n   {\n      \n      // Clear the key.\n      rsa-&gt;Clear();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1\">Imports System\nImports System.Security.Cryptography\nImports System.Text\n\nModule CspKeyContainerInfoExample\n\n    Sub Main(ByVal args() As String)\n        Dim rsa As New RSACryptoServiceProvider()\n\n        Try\n            &#39; Note: In cases where a random key is generated,   \n            &#39; a key container is not created until you call  \n            &#39; a method that uses the key.  This example calls\n            &#39; the Encrypt method before calling the\n            &#39; CspKeyContainerInfo property so that a key\n            &#39; container is created.  \n            &#39; Create some data to encrypt and display it.\n            Dim data As String = &quot;Here is some data to encrypt.&quot;\n\n            Console.WriteLine(&quot;Data to encrypt: &quot; + data)\n\n            &#39; Convert the data to an array of bytes and \n            &#39; encrypt it.\n            Dim byteData As Byte() = Encoding.ASCII.GetBytes(data)\n\n            Dim encData As Byte() = rsa.Encrypt(byteData, False)\n\n            &#39; Display the encrypted value.\n            Console.WriteLine(&quot;Encrypted Data: &quot; + Encoding.ASCII.GetString(encData))\n\n            Console.WriteLine()\n\n            Console.WriteLine(&quot;CspKeyContainerInfo information:&quot;)\n\n            Console.WriteLine()\n\n            &#39; Create a new CspKeyContainerInfo object.\n            Dim keyInfo As CspKeyContainerInfo = rsa.CspKeyContainerInfo\n\n            &#39; Display the value of each property.\n            Console.WriteLine(&quot;Accessible property: &quot; + keyInfo.Accessible.ToString())\n\n            Console.WriteLine(&quot;Exportable property: &quot; + keyInfo.Exportable.ToString())\n\n            Console.WriteLine(&quot;HardwareDevice property: &quot; + keyInfo.HardwareDevice.ToString())\n\n            Console.WriteLine(&quot;KeyContainerName property: &quot; + keyInfo.KeyContainerName)\n\n            Console.WriteLine(&quot;KeyNumber property: &quot; + keyInfo.KeyNumber.ToString())\n\n            Console.WriteLine(&quot;MachineKeyStore property: &quot; + keyInfo.MachineKeyStore.ToString())\n\n            Console.WriteLine(&quot;Protected property: &quot; + keyInfo.Protected.ToString())\n\n            Console.WriteLine(&quot;ProviderName property: &quot; + keyInfo.ProviderName)\n\n            Console.WriteLine(&quot;ProviderType property: &quot; + keyInfo.ProviderType.ToString())\n\n            Console.WriteLine(&quot;RandomlyGenerated property: &quot; + keyInfo.RandomlyGenerated.ToString())\n\n            Console.WriteLine(&quot;Removable property: &quot; + keyInfo.Removable.ToString())\n\n            Console.WriteLine(&quot;UniqueKeyContainerName property: &quot; + keyInfo.UniqueKeyContainerName)\n\n\n        Catch e As Exception\n            Console.WriteLine(e.ToString())\n        Finally\n            &#39; Clear the key.\n            rsa.Clear()\n        End Try\n        Console.ReadLine()\n\n    End Sub\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1\">using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\n\npublic class CspKeyContainerInfoExample\n{\n\n    public static void Main(String[] args)\n    {\n        RSACryptoServiceProvider rsa= new RSACryptoServiceProvider();\n\n        try\n        {\n            // Note: In cases where a random key is generated,   \n            // a key container is not created until you call  \n            // a method that uses the key.  This example calls\n            // the Encrypt method before calling the\n            // CspKeyContainerInfo property so that a key\n            // container is created.  \n\n            // Create some data to encrypt and display it.\n            string data = &quot;Here is some data to encrypt.&quot;;\n\n            Console.WriteLine(&quot;Data to encrypt: &quot; + data);\n\n            // Convert the data to an array of bytes and \n            // encrypt it.\n            byte[] byteData = Encoding.ASCII.GetBytes(data);\n\n            byte[] encData = rsa.Encrypt(byteData, false);\n\n            // Display the encrypted value.\n            Console.WriteLine(&quot;Encrypted Data: &quot; + Encoding.ASCII.GetString(encData));\n\n            Console.WriteLine();\n\n            Console.WriteLine(&quot;CspKeyContainerInfo information:&quot;);\n\n            Console.WriteLine();\n\n            // Create a new CspKeyContainerInfo object.\n            CspKeyContainerInfo keyInfo = rsa.CspKeyContainerInfo;\n\n            // Display the value of each property.\n\n            Console.WriteLine(&quot;Accessible property: &quot; + keyInfo.Accessible);\n\n            Console.WriteLine(&quot;Exportable property: &quot; + keyInfo.Exportable);\n\n            Console.WriteLine(&quot;HardwareDevice property: &quot; + keyInfo.HardwareDevice);\n\n            Console.WriteLine(&quot;KeyContainerName property: &quot; + keyInfo.KeyContainerName);\n\n            Console.WriteLine(&quot;KeyNumber property: &quot; + keyInfo.KeyNumber.ToString());\n\n            Console.WriteLine(&quot;MachineKeyStore property: &quot; + keyInfo.MachineKeyStore);\n\n            Console.WriteLine(&quot;Protected property: &quot; + keyInfo.Protected);\n\n            Console.WriteLine(&quot;ProviderName property: &quot; + keyInfo.ProviderName);\n\n            Console.WriteLine(&quot;ProviderType property: &quot; + keyInfo.ProviderType);\n\n            Console.WriteLine(&quot;RandomlyGenerated property: &quot; + keyInfo.RandomlyGenerated);\n\n            Console.WriteLine(&quot;Removable property: &quot; + keyInfo.Removable);\n\n            Console.WriteLine(&quot;UniqueKeyContainerName property: &quot; + keyInfo.UniqueKeyContainerName);\n\n\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(e.ToString());\n        }\n        finally\n        {\n            // Clear the key.\n            rsa.Clear();\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_CspKeyContainerInfo_KeyNumber\">\r\n    \r\n            <a id=\"System_Security_Cryptography_CspKeyContainerInfo_KeyNumber_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">KeyNumber</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that describes whether an asymmetric key was created as a signature key or an exchange key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Security.Cryptography.KeyNumber KeyNumber { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.keynumber\" data-linktype=\"relative-path\">KeyNumber</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.security.cryptography.keynumber\" data-linktype=\"relative-path\">KeyNumber</a> values that describes whether an asymmetric key was created as a signature key or an exchange key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of the KeyNumber property is derived from the <a class=\"xref\" href=\"system.security.cryptography.cspparameters#System_Security_Cryptography_CspParameters_KeyNumber\" data-linktype=\"relative-path\">KeyNumber</a> field of the <a class=\"xref\" href=\"system.security.cryptography.cspparameters\" data-linktype=\"relative-path\">CspParameters</a> object that was used to initialize the <a class=\"xref\" href=\"system.security.cryptography.cspkeycontainerinfo\" data-linktype=\"relative-path\">CspKeyContainerInfo</a> object.  </p>\n<p> An exchange key is an asymmetric key pair used to encrypt session keys so that they can be safely stored and exchanged with other users.  The <a class=\"xref\" href=\"system.security.cryptography.keynumber\" data-linktype=\"relative-path\">KeyNumber</a> value specifies an exchange key.  This value corresponds to the <code>AT_KEYEXCHANGE</code> value used in the unmanaged Microsoft Cryptographic API (CAPI).  </p>\n<p> A signature key is an asymmetric key pair used for authenticating (digitally signed) messages or files.  The <a class=\"xref\" href=\"system.security.cryptography.keynumber\" data-linktype=\"relative-path\">KeyNumber</a> value specifies a signature key.  This value corresponds to the <code>AT_SIGNATURE</code> value used in CAPI.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a key container and retrieves information about that container.  </p>\n<pre><code class=\"lang-cpp\" name=\"Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1\">using namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Text;\nint main()\n{\n   RSACryptoServiceProvider^ rsa = gcnew RSACryptoServiceProvider;\n   try\n   {\n      \n      // Note: In cases where a random key is generated,   \n      // a key container is not created until you call  \n      // a method that uses the key.  This example calls\n      // the Encrypt method before calling the\n      // CspKeyContainerInfo property so that a key\n      // container is created.  \n      // Create some data to encrypt and display it.\n      String^ data = L&quot;Here is some data to encrypt.&quot;;\n      Console::WriteLine( L&quot;Data to encrypt: {0}&quot;, data );\n      \n      // Convert the data to an array of bytes and \n      // encrypt it.\n      array&lt;Byte&gt;^byteData = Encoding::ASCII-&gt;GetBytes( data );\n      array&lt;Byte&gt;^encData = rsa-&gt;Encrypt( byteData, false );\n      \n      // Display the encrypted value.\n      Console::WriteLine( L&quot;Encrypted Data: {0}&quot;, Encoding::ASCII-&gt;GetString( encData ) );\n      Console::WriteLine();\n      Console::WriteLine( L&quot;CspKeyContainerInfo information:&quot; );\n      Console::WriteLine();\n      \n      // Create a new CspKeyContainerInfo object.\n      CspKeyContainerInfo^ keyInfo = rsa-&gt;CspKeyContainerInfo;\n      \n      // Display the value of each property.\n      Console::WriteLine( L&quot;Accessible property: {0}&quot;, keyInfo-&gt;Accessible );\n      Console::WriteLine( L&quot;Exportable property: {0}&quot;, keyInfo-&gt;Exportable );\n      Console::WriteLine( L&quot;HardwareDevice property: {0}&quot;, keyInfo-&gt;HardwareDevice );\n      Console::WriteLine( L&quot;KeyContainerName property: {0}&quot;, keyInfo-&gt;KeyContainerName );\n      Console::WriteLine( L&quot;KeyNumber property: {0}&quot;, keyInfo-&gt;KeyNumber );\n      Console::WriteLine( L&quot;MachineKeyStore property: {0}&quot;, keyInfo-&gt;MachineKeyStore );\n      Console::WriteLine( L&quot;Protected property: {0}&quot;, keyInfo-&gt;Protected );\n      Console::WriteLine( L&quot;ProviderName property: {0}&quot;, keyInfo-&gt;ProviderName );\n      Console::WriteLine( L&quot;ProviderType property: {0}&quot;, keyInfo-&gt;ProviderType );\n      Console::WriteLine( L&quot;RandomlyGenerated property: {0}&quot;, keyInfo-&gt;RandomlyGenerated );\n      Console::WriteLine( L&quot;Removable property: {0}&quot;, keyInfo-&gt;Removable );\n      Console::WriteLine( L&quot;UniqueKeyContainerName property: {0}&quot;, keyInfo-&gt;UniqueKeyContainerName );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( e );\n   }\n   finally\n   {\n      \n      // Clear the key.\n      rsa-&gt;Clear();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1\">Imports System\nImports System.Security.Cryptography\nImports System.Text\n\nModule CspKeyContainerInfoExample\n\n    Sub Main(ByVal args() As String)\n        Dim rsa As New RSACryptoServiceProvider()\n\n        Try\n            &#39; Note: In cases where a random key is generated,   \n            &#39; a key container is not created until you call  \n            &#39; a method that uses the key.  This example calls\n            &#39; the Encrypt method before calling the\n            &#39; CspKeyContainerInfo property so that a key\n            &#39; container is created.  \n            &#39; Create some data to encrypt and display it.\n            Dim data As String = &quot;Here is some data to encrypt.&quot;\n\n            Console.WriteLine(&quot;Data to encrypt: &quot; + data)\n\n            &#39; Convert the data to an array of bytes and \n            &#39; encrypt it.\n            Dim byteData As Byte() = Encoding.ASCII.GetBytes(data)\n\n            Dim encData As Byte() = rsa.Encrypt(byteData, False)\n\n            &#39; Display the encrypted value.\n            Console.WriteLine(&quot;Encrypted Data: &quot; + Encoding.ASCII.GetString(encData))\n\n            Console.WriteLine()\n\n            Console.WriteLine(&quot;CspKeyContainerInfo information:&quot;)\n\n            Console.WriteLine()\n\n            &#39; Create a new CspKeyContainerInfo object.\n            Dim keyInfo As CspKeyContainerInfo = rsa.CspKeyContainerInfo\n\n            &#39; Display the value of each property.\n            Console.WriteLine(&quot;Accessible property: &quot; + keyInfo.Accessible.ToString())\n\n            Console.WriteLine(&quot;Exportable property: &quot; + keyInfo.Exportable.ToString())\n\n            Console.WriteLine(&quot;HardwareDevice property: &quot; + keyInfo.HardwareDevice.ToString())\n\n            Console.WriteLine(&quot;KeyContainerName property: &quot; + keyInfo.KeyContainerName)\n\n            Console.WriteLine(&quot;KeyNumber property: &quot; + keyInfo.KeyNumber.ToString())\n\n            Console.WriteLine(&quot;MachineKeyStore property: &quot; + keyInfo.MachineKeyStore.ToString())\n\n            Console.WriteLine(&quot;Protected property: &quot; + keyInfo.Protected.ToString())\n\n            Console.WriteLine(&quot;ProviderName property: &quot; + keyInfo.ProviderName)\n\n            Console.WriteLine(&quot;ProviderType property: &quot; + keyInfo.ProviderType.ToString())\n\n            Console.WriteLine(&quot;RandomlyGenerated property: &quot; + keyInfo.RandomlyGenerated.ToString())\n\n            Console.WriteLine(&quot;Removable property: &quot; + keyInfo.Removable.ToString())\n\n            Console.WriteLine(&quot;UniqueKeyContainerName property: &quot; + keyInfo.UniqueKeyContainerName)\n\n\n        Catch e As Exception\n            Console.WriteLine(e.ToString())\n        Finally\n            &#39; Clear the key.\n            rsa.Clear()\n        End Try\n        Console.ReadLine()\n\n    End Sub\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1\">using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\n\npublic class CspKeyContainerInfoExample\n{\n\n    public static void Main(String[] args)\n    {\n        RSACryptoServiceProvider rsa= new RSACryptoServiceProvider();\n\n        try\n        {\n            // Note: In cases where a random key is generated,   \n            // a key container is not created until you call  \n            // a method that uses the key.  This example calls\n            // the Encrypt method before calling the\n            // CspKeyContainerInfo property so that a key\n            // container is created.  \n\n            // Create some data to encrypt and display it.\n            string data = &quot;Here is some data to encrypt.&quot;;\n\n            Console.WriteLine(&quot;Data to encrypt: &quot; + data);\n\n            // Convert the data to an array of bytes and \n            // encrypt it.\n            byte[] byteData = Encoding.ASCII.GetBytes(data);\n\n            byte[] encData = rsa.Encrypt(byteData, false);\n\n            // Display the encrypted value.\n            Console.WriteLine(&quot;Encrypted Data: &quot; + Encoding.ASCII.GetString(encData));\n\n            Console.WriteLine();\n\n            Console.WriteLine(&quot;CspKeyContainerInfo information:&quot;);\n\n            Console.WriteLine();\n\n            // Create a new CspKeyContainerInfo object.\n            CspKeyContainerInfo keyInfo = rsa.CspKeyContainerInfo;\n\n            // Display the value of each property.\n\n            Console.WriteLine(&quot;Accessible property: &quot; + keyInfo.Accessible);\n\n            Console.WriteLine(&quot;Exportable property: &quot; + keyInfo.Exportable);\n\n            Console.WriteLine(&quot;HardwareDevice property: &quot; + keyInfo.HardwareDevice);\n\n            Console.WriteLine(&quot;KeyContainerName property: &quot; + keyInfo.KeyContainerName);\n\n            Console.WriteLine(&quot;KeyNumber property: &quot; + keyInfo.KeyNumber.ToString());\n\n            Console.WriteLine(&quot;MachineKeyStore property: &quot; + keyInfo.MachineKeyStore);\n\n            Console.WriteLine(&quot;Protected property: &quot; + keyInfo.Protected);\n\n            Console.WriteLine(&quot;ProviderName property: &quot; + keyInfo.ProviderName);\n\n            Console.WriteLine(&quot;ProviderType property: &quot; + keyInfo.ProviderType);\n\n            Console.WriteLine(&quot;RandomlyGenerated property: &quot; + keyInfo.RandomlyGenerated);\n\n            Console.WriteLine(&quot;Removable property: &quot; + keyInfo.Removable);\n\n            Console.WriteLine(&quot;UniqueKeyContainerName property: &quot; + keyInfo.UniqueKeyContainerName);\n\n\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(e.ToString());\n        }\n        finally\n        {\n            // Clear the key.\n            rsa.Clear();\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_CspKeyContainerInfo_MachineKeyStore\">\r\n    \r\n            <a id=\"System_Security_Cryptography_CspKeyContainerInfo_MachineKeyStore_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MachineKeyStore</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether a key is from a machine key set.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool MachineKeyStore { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the key is from the machine key set; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a key container and retrieves information about that container.  </p>\n<pre><code class=\"lang-cpp\" name=\"Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1\">using namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Text;\nint main()\n{\n   RSACryptoServiceProvider^ rsa = gcnew RSACryptoServiceProvider;\n   try\n   {\n      \n      // Note: In cases where a random key is generated,   \n      // a key container is not created until you call  \n      // a method that uses the key.  This example calls\n      // the Encrypt method before calling the\n      // CspKeyContainerInfo property so that a key\n      // container is created.  \n      // Create some data to encrypt and display it.\n      String^ data = L&quot;Here is some data to encrypt.&quot;;\n      Console::WriteLine( L&quot;Data to encrypt: {0}&quot;, data );\n      \n      // Convert the data to an array of bytes and \n      // encrypt it.\n      array&lt;Byte&gt;^byteData = Encoding::ASCII-&gt;GetBytes( data );\n      array&lt;Byte&gt;^encData = rsa-&gt;Encrypt( byteData, false );\n      \n      // Display the encrypted value.\n      Console::WriteLine( L&quot;Encrypted Data: {0}&quot;, Encoding::ASCII-&gt;GetString( encData ) );\n      Console::WriteLine();\n      Console::WriteLine( L&quot;CspKeyContainerInfo information:&quot; );\n      Console::WriteLine();\n      \n      // Create a new CspKeyContainerInfo object.\n      CspKeyContainerInfo^ keyInfo = rsa-&gt;CspKeyContainerInfo;\n      \n      // Display the value of each property.\n      Console::WriteLine( L&quot;Accessible property: {0}&quot;, keyInfo-&gt;Accessible );\n      Console::WriteLine( L&quot;Exportable property: {0}&quot;, keyInfo-&gt;Exportable );\n      Console::WriteLine( L&quot;HardwareDevice property: {0}&quot;, keyInfo-&gt;HardwareDevice );\n      Console::WriteLine( L&quot;KeyContainerName property: {0}&quot;, keyInfo-&gt;KeyContainerName );\n      Console::WriteLine( L&quot;KeyNumber property: {0}&quot;, keyInfo-&gt;KeyNumber );\n      Console::WriteLine( L&quot;MachineKeyStore property: {0}&quot;, keyInfo-&gt;MachineKeyStore );\n      Console::WriteLine( L&quot;Protected property: {0}&quot;, keyInfo-&gt;Protected );\n      Console::WriteLine( L&quot;ProviderName property: {0}&quot;, keyInfo-&gt;ProviderName );\n      Console::WriteLine( L&quot;ProviderType property: {0}&quot;, keyInfo-&gt;ProviderType );\n      Console::WriteLine( L&quot;RandomlyGenerated property: {0}&quot;, keyInfo-&gt;RandomlyGenerated );\n      Console::WriteLine( L&quot;Removable property: {0}&quot;, keyInfo-&gt;Removable );\n      Console::WriteLine( L&quot;UniqueKeyContainerName property: {0}&quot;, keyInfo-&gt;UniqueKeyContainerName );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( e );\n   }\n   finally\n   {\n      \n      // Clear the key.\n      rsa-&gt;Clear();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1\">Imports System\nImports System.Security.Cryptography\nImports System.Text\n\nModule CspKeyContainerInfoExample\n\n    Sub Main(ByVal args() As String)\n        Dim rsa As New RSACryptoServiceProvider()\n\n        Try\n            &#39; Note: In cases where a random key is generated,   \n            &#39; a key container is not created until you call  \n            &#39; a method that uses the key.  This example calls\n            &#39; the Encrypt method before calling the\n            &#39; CspKeyContainerInfo property so that a key\n            &#39; container is created.  \n            &#39; Create some data to encrypt and display it.\n            Dim data As String = &quot;Here is some data to encrypt.&quot;\n\n            Console.WriteLine(&quot;Data to encrypt: &quot; + data)\n\n            &#39; Convert the data to an array of bytes and \n            &#39; encrypt it.\n            Dim byteData As Byte() = Encoding.ASCII.GetBytes(data)\n\n            Dim encData As Byte() = rsa.Encrypt(byteData, False)\n\n            &#39; Display the encrypted value.\n            Console.WriteLine(&quot;Encrypted Data: &quot; + Encoding.ASCII.GetString(encData))\n\n            Console.WriteLine()\n\n            Console.WriteLine(&quot;CspKeyContainerInfo information:&quot;)\n\n            Console.WriteLine()\n\n            &#39; Create a new CspKeyContainerInfo object.\n            Dim keyInfo As CspKeyContainerInfo = rsa.CspKeyContainerInfo\n\n            &#39; Display the value of each property.\n            Console.WriteLine(&quot;Accessible property: &quot; + keyInfo.Accessible.ToString())\n\n            Console.WriteLine(&quot;Exportable property: &quot; + keyInfo.Exportable.ToString())\n\n            Console.WriteLine(&quot;HardwareDevice property: &quot; + keyInfo.HardwareDevice.ToString())\n\n            Console.WriteLine(&quot;KeyContainerName property: &quot; + keyInfo.KeyContainerName)\n\n            Console.WriteLine(&quot;KeyNumber property: &quot; + keyInfo.KeyNumber.ToString())\n\n            Console.WriteLine(&quot;MachineKeyStore property: &quot; + keyInfo.MachineKeyStore.ToString())\n\n            Console.WriteLine(&quot;Protected property: &quot; + keyInfo.Protected.ToString())\n\n            Console.WriteLine(&quot;ProviderName property: &quot; + keyInfo.ProviderName)\n\n            Console.WriteLine(&quot;ProviderType property: &quot; + keyInfo.ProviderType.ToString())\n\n            Console.WriteLine(&quot;RandomlyGenerated property: &quot; + keyInfo.RandomlyGenerated.ToString())\n\n            Console.WriteLine(&quot;Removable property: &quot; + keyInfo.Removable.ToString())\n\n            Console.WriteLine(&quot;UniqueKeyContainerName property: &quot; + keyInfo.UniqueKeyContainerName)\n\n\n        Catch e As Exception\n            Console.WriteLine(e.ToString())\n        Finally\n            &#39; Clear the key.\n            rsa.Clear()\n        End Try\n        Console.ReadLine()\n\n    End Sub\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1\">using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\n\npublic class CspKeyContainerInfoExample\n{\n\n    public static void Main(String[] args)\n    {\n        RSACryptoServiceProvider rsa= new RSACryptoServiceProvider();\n\n        try\n        {\n            // Note: In cases where a random key is generated,   \n            // a key container is not created until you call  \n            // a method that uses the key.  This example calls\n            // the Encrypt method before calling the\n            // CspKeyContainerInfo property so that a key\n            // container is created.  \n\n            // Create some data to encrypt and display it.\n            string data = &quot;Here is some data to encrypt.&quot;;\n\n            Console.WriteLine(&quot;Data to encrypt: &quot; + data);\n\n            // Convert the data to an array of bytes and \n            // encrypt it.\n            byte[] byteData = Encoding.ASCII.GetBytes(data);\n\n            byte[] encData = rsa.Encrypt(byteData, false);\n\n            // Display the encrypted value.\n            Console.WriteLine(&quot;Encrypted Data: &quot; + Encoding.ASCII.GetString(encData));\n\n            Console.WriteLine();\n\n            Console.WriteLine(&quot;CspKeyContainerInfo information:&quot;);\n\n            Console.WriteLine();\n\n            // Create a new CspKeyContainerInfo object.\n            CspKeyContainerInfo keyInfo = rsa.CspKeyContainerInfo;\n\n            // Display the value of each property.\n\n            Console.WriteLine(&quot;Accessible property: &quot; + keyInfo.Accessible);\n\n            Console.WriteLine(&quot;Exportable property: &quot; + keyInfo.Exportable);\n\n            Console.WriteLine(&quot;HardwareDevice property: &quot; + keyInfo.HardwareDevice);\n\n            Console.WriteLine(&quot;KeyContainerName property: &quot; + keyInfo.KeyContainerName);\n\n            Console.WriteLine(&quot;KeyNumber property: &quot; + keyInfo.KeyNumber.ToString());\n\n            Console.WriteLine(&quot;MachineKeyStore property: &quot; + keyInfo.MachineKeyStore);\n\n            Console.WriteLine(&quot;Protected property: &quot; + keyInfo.Protected);\n\n            Console.WriteLine(&quot;ProviderName property: &quot; + keyInfo.ProviderName);\n\n            Console.WriteLine(&quot;ProviderType property: &quot; + keyInfo.ProviderType);\n\n            Console.WriteLine(&quot;RandomlyGenerated property: &quot; + keyInfo.RandomlyGenerated);\n\n            Console.WriteLine(&quot;Removable property: &quot; + keyInfo.Removable);\n\n            Console.WriteLine(&quot;UniqueKeyContainerName property: &quot; + keyInfo.UniqueKeyContainerName);\n\n\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(e.ToString());\n        }\n        finally\n        {\n            // Clear the key.\n            rsa.Clear();\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_CspKeyContainerInfo_Protected\">\r\n    \r\n            <a id=\"System_Security_Cryptography_CspKeyContainerInfo_Protected_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Protected</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether a key pair is protected.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Protected { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the key pair is protected; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The key type is not supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The cryptographic service provider cannot be found.  </p>\n<p> -or-  </p>\n<p> The key container was not found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a key container and retrieves information about that container.  </p>\n<pre><code class=\"lang-cpp\" name=\"Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1\">using namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Text;\nint main()\n{\n   RSACryptoServiceProvider^ rsa = gcnew RSACryptoServiceProvider;\n   try\n   {\n      \n      // Note: In cases where a random key is generated,   \n      // a key container is not created until you call  \n      // a method that uses the key.  This example calls\n      // the Encrypt method before calling the\n      // CspKeyContainerInfo property so that a key\n      // container is created.  \n      // Create some data to encrypt and display it.\n      String^ data = L&quot;Here is some data to encrypt.&quot;;\n      Console::WriteLine( L&quot;Data to encrypt: {0}&quot;, data );\n      \n      // Convert the data to an array of bytes and \n      // encrypt it.\n      array&lt;Byte&gt;^byteData = Encoding::ASCII-&gt;GetBytes( data );\n      array&lt;Byte&gt;^encData = rsa-&gt;Encrypt( byteData, false );\n      \n      // Display the encrypted value.\n      Console::WriteLine( L&quot;Encrypted Data: {0}&quot;, Encoding::ASCII-&gt;GetString( encData ) );\n      Console::WriteLine();\n      Console::WriteLine( L&quot;CspKeyContainerInfo information:&quot; );\n      Console::WriteLine();\n      \n      // Create a new CspKeyContainerInfo object.\n      CspKeyContainerInfo^ keyInfo = rsa-&gt;CspKeyContainerInfo;\n      \n      // Display the value of each property.\n      Console::WriteLine( L&quot;Accessible property: {0}&quot;, keyInfo-&gt;Accessible );\n      Console::WriteLine( L&quot;Exportable property: {0}&quot;, keyInfo-&gt;Exportable );\n      Console::WriteLine( L&quot;HardwareDevice property: {0}&quot;, keyInfo-&gt;HardwareDevice );\n      Console::WriteLine( L&quot;KeyContainerName property: {0}&quot;, keyInfo-&gt;KeyContainerName );\n      Console::WriteLine( L&quot;KeyNumber property: {0}&quot;, keyInfo-&gt;KeyNumber );\n      Console::WriteLine( L&quot;MachineKeyStore property: {0}&quot;, keyInfo-&gt;MachineKeyStore );\n      Console::WriteLine( L&quot;Protected property: {0}&quot;, keyInfo-&gt;Protected );\n      Console::WriteLine( L&quot;ProviderName property: {0}&quot;, keyInfo-&gt;ProviderName );\n      Console::WriteLine( L&quot;ProviderType property: {0}&quot;, keyInfo-&gt;ProviderType );\n      Console::WriteLine( L&quot;RandomlyGenerated property: {0}&quot;, keyInfo-&gt;RandomlyGenerated );\n      Console::WriteLine( L&quot;Removable property: {0}&quot;, keyInfo-&gt;Removable );\n      Console::WriteLine( L&quot;UniqueKeyContainerName property: {0}&quot;, keyInfo-&gt;UniqueKeyContainerName );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( e );\n   }\n   finally\n   {\n      \n      // Clear the key.\n      rsa-&gt;Clear();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1\">Imports System\nImports System.Security.Cryptography\nImports System.Text\n\nModule CspKeyContainerInfoExample\n\n    Sub Main(ByVal args() As String)\n        Dim rsa As New RSACryptoServiceProvider()\n\n        Try\n            &#39; Note: In cases where a random key is generated,   \n            &#39; a key container is not created until you call  \n            &#39; a method that uses the key.  This example calls\n            &#39; the Encrypt method before calling the\n            &#39; CspKeyContainerInfo property so that a key\n            &#39; container is created.  \n            &#39; Create some data to encrypt and display it.\n            Dim data As String = &quot;Here is some data to encrypt.&quot;\n\n            Console.WriteLine(&quot;Data to encrypt: &quot; + data)\n\n            &#39; Convert the data to an array of bytes and \n            &#39; encrypt it.\n            Dim byteData As Byte() = Encoding.ASCII.GetBytes(data)\n\n            Dim encData As Byte() = rsa.Encrypt(byteData, False)\n\n            &#39; Display the encrypted value.\n            Console.WriteLine(&quot;Encrypted Data: &quot; + Encoding.ASCII.GetString(encData))\n\n            Console.WriteLine()\n\n            Console.WriteLine(&quot;CspKeyContainerInfo information:&quot;)\n\n            Console.WriteLine()\n\n            &#39; Create a new CspKeyContainerInfo object.\n            Dim keyInfo As CspKeyContainerInfo = rsa.CspKeyContainerInfo\n\n            &#39; Display the value of each property.\n            Console.WriteLine(&quot;Accessible property: &quot; + keyInfo.Accessible.ToString())\n\n            Console.WriteLine(&quot;Exportable property: &quot; + keyInfo.Exportable.ToString())\n\n            Console.WriteLine(&quot;HardwareDevice property: &quot; + keyInfo.HardwareDevice.ToString())\n\n            Console.WriteLine(&quot;KeyContainerName property: &quot; + keyInfo.KeyContainerName)\n\n            Console.WriteLine(&quot;KeyNumber property: &quot; + keyInfo.KeyNumber.ToString())\n\n            Console.WriteLine(&quot;MachineKeyStore property: &quot; + keyInfo.MachineKeyStore.ToString())\n\n            Console.WriteLine(&quot;Protected property: &quot; + keyInfo.Protected.ToString())\n\n            Console.WriteLine(&quot;ProviderName property: &quot; + keyInfo.ProviderName)\n\n            Console.WriteLine(&quot;ProviderType property: &quot; + keyInfo.ProviderType.ToString())\n\n            Console.WriteLine(&quot;RandomlyGenerated property: &quot; + keyInfo.RandomlyGenerated.ToString())\n\n            Console.WriteLine(&quot;Removable property: &quot; + keyInfo.Removable.ToString())\n\n            Console.WriteLine(&quot;UniqueKeyContainerName property: &quot; + keyInfo.UniqueKeyContainerName)\n\n\n        Catch e As Exception\n            Console.WriteLine(e.ToString())\n        Finally\n            &#39; Clear the key.\n            rsa.Clear()\n        End Try\n        Console.ReadLine()\n\n    End Sub\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1\">using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\n\npublic class CspKeyContainerInfoExample\n{\n\n    public static void Main(String[] args)\n    {\n        RSACryptoServiceProvider rsa= new RSACryptoServiceProvider();\n\n        try\n        {\n            // Note: In cases where a random key is generated,   \n            // a key container is not created until you call  \n            // a method that uses the key.  This example calls\n            // the Encrypt method before calling the\n            // CspKeyContainerInfo property so that a key\n            // container is created.  \n\n            // Create some data to encrypt and display it.\n            string data = &quot;Here is some data to encrypt.&quot;;\n\n            Console.WriteLine(&quot;Data to encrypt: &quot; + data);\n\n            // Convert the data to an array of bytes and \n            // encrypt it.\n            byte[] byteData = Encoding.ASCII.GetBytes(data);\n\n            byte[] encData = rsa.Encrypt(byteData, false);\n\n            // Display the encrypted value.\n            Console.WriteLine(&quot;Encrypted Data: &quot; + Encoding.ASCII.GetString(encData));\n\n            Console.WriteLine();\n\n            Console.WriteLine(&quot;CspKeyContainerInfo information:&quot;);\n\n            Console.WriteLine();\n\n            // Create a new CspKeyContainerInfo object.\n            CspKeyContainerInfo keyInfo = rsa.CspKeyContainerInfo;\n\n            // Display the value of each property.\n\n            Console.WriteLine(&quot;Accessible property: &quot; + keyInfo.Accessible);\n\n            Console.WriteLine(&quot;Exportable property: &quot; + keyInfo.Exportable);\n\n            Console.WriteLine(&quot;HardwareDevice property: &quot; + keyInfo.HardwareDevice);\n\n            Console.WriteLine(&quot;KeyContainerName property: &quot; + keyInfo.KeyContainerName);\n\n            Console.WriteLine(&quot;KeyNumber property: &quot; + keyInfo.KeyNumber.ToString());\n\n            Console.WriteLine(&quot;MachineKeyStore property: &quot; + keyInfo.MachineKeyStore);\n\n            Console.WriteLine(&quot;Protected property: &quot; + keyInfo.Protected);\n\n            Console.WriteLine(&quot;ProviderName property: &quot; + keyInfo.ProviderName);\n\n            Console.WriteLine(&quot;ProviderType property: &quot; + keyInfo.ProviderType);\n\n            Console.WriteLine(&quot;RandomlyGenerated property: &quot; + keyInfo.RandomlyGenerated);\n\n            Console.WriteLine(&quot;Removable property: &quot; + keyInfo.Removable);\n\n            Console.WriteLine(&quot;UniqueKeyContainerName property: &quot; + keyInfo.UniqueKeyContainerName);\n\n\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(e.ToString());\n        }\n        finally\n        {\n            // Clear the key.\n            rsa.Clear();\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_CspKeyContainerInfo_ProviderName\">\r\n    \r\n            <a id=\"System_Security_Cryptography_CspKeyContainerInfo_ProviderName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ProviderName</div>        \r\n          </div>\r\n    \r\n            <p>Gets the provider name of a key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ProviderName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The provider name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property specifies the cryptographic service provider that created the key.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a key container and retrieves information about that container.  </p>\n<pre><code class=\"lang-cpp\" name=\"Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1\">using namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Text;\nint main()\n{\n   RSACryptoServiceProvider^ rsa = gcnew RSACryptoServiceProvider;\n   try\n   {\n      \n      // Note: In cases where a random key is generated,   \n      // a key container is not created until you call  \n      // a method that uses the key.  This example calls\n      // the Encrypt method before calling the\n      // CspKeyContainerInfo property so that a key\n      // container is created.  \n      // Create some data to encrypt and display it.\n      String^ data = L&quot;Here is some data to encrypt.&quot;;\n      Console::WriteLine( L&quot;Data to encrypt: {0}&quot;, data );\n      \n      // Convert the data to an array of bytes and \n      // encrypt it.\n      array&lt;Byte&gt;^byteData = Encoding::ASCII-&gt;GetBytes( data );\n      array&lt;Byte&gt;^encData = rsa-&gt;Encrypt( byteData, false );\n      \n      // Display the encrypted value.\n      Console::WriteLine( L&quot;Encrypted Data: {0}&quot;, Encoding::ASCII-&gt;GetString( encData ) );\n      Console::WriteLine();\n      Console::WriteLine( L&quot;CspKeyContainerInfo information:&quot; );\n      Console::WriteLine();\n      \n      // Create a new CspKeyContainerInfo object.\n      CspKeyContainerInfo^ keyInfo = rsa-&gt;CspKeyContainerInfo;\n      \n      // Display the value of each property.\n      Console::WriteLine( L&quot;Accessible property: {0}&quot;, keyInfo-&gt;Accessible );\n      Console::WriteLine( L&quot;Exportable property: {0}&quot;, keyInfo-&gt;Exportable );\n      Console::WriteLine( L&quot;HardwareDevice property: {0}&quot;, keyInfo-&gt;HardwareDevice );\n      Console::WriteLine( L&quot;KeyContainerName property: {0}&quot;, keyInfo-&gt;KeyContainerName );\n      Console::WriteLine( L&quot;KeyNumber property: {0}&quot;, keyInfo-&gt;KeyNumber );\n      Console::WriteLine( L&quot;MachineKeyStore property: {0}&quot;, keyInfo-&gt;MachineKeyStore );\n      Console::WriteLine( L&quot;Protected property: {0}&quot;, keyInfo-&gt;Protected );\n      Console::WriteLine( L&quot;ProviderName property: {0}&quot;, keyInfo-&gt;ProviderName );\n      Console::WriteLine( L&quot;ProviderType property: {0}&quot;, keyInfo-&gt;ProviderType );\n      Console::WriteLine( L&quot;RandomlyGenerated property: {0}&quot;, keyInfo-&gt;RandomlyGenerated );\n      Console::WriteLine( L&quot;Removable property: {0}&quot;, keyInfo-&gt;Removable );\n      Console::WriteLine( L&quot;UniqueKeyContainerName property: {0}&quot;, keyInfo-&gt;UniqueKeyContainerName );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( e );\n   }\n   finally\n   {\n      \n      // Clear the key.\n      rsa-&gt;Clear();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1\">Imports System\nImports System.Security.Cryptography\nImports System.Text\n\nModule CspKeyContainerInfoExample\n\n    Sub Main(ByVal args() As String)\n        Dim rsa As New RSACryptoServiceProvider()\n\n        Try\n            &#39; Note: In cases where a random key is generated,   \n            &#39; a key container is not created until you call  \n            &#39; a method that uses the key.  This example calls\n            &#39; the Encrypt method before calling the\n            &#39; CspKeyContainerInfo property so that a key\n            &#39; container is created.  \n            &#39; Create some data to encrypt and display it.\n            Dim data As String = &quot;Here is some data to encrypt.&quot;\n\n            Console.WriteLine(&quot;Data to encrypt: &quot; + data)\n\n            &#39; Convert the data to an array of bytes and \n            &#39; encrypt it.\n            Dim byteData As Byte() = Encoding.ASCII.GetBytes(data)\n\n            Dim encData As Byte() = rsa.Encrypt(byteData, False)\n\n            &#39; Display the encrypted value.\n            Console.WriteLine(&quot;Encrypted Data: &quot; + Encoding.ASCII.GetString(encData))\n\n            Console.WriteLine()\n\n            Console.WriteLine(&quot;CspKeyContainerInfo information:&quot;)\n\n            Console.WriteLine()\n\n            &#39; Create a new CspKeyContainerInfo object.\n            Dim keyInfo As CspKeyContainerInfo = rsa.CspKeyContainerInfo\n\n            &#39; Display the value of each property.\n            Console.WriteLine(&quot;Accessible property: &quot; + keyInfo.Accessible.ToString())\n\n            Console.WriteLine(&quot;Exportable property: &quot; + keyInfo.Exportable.ToString())\n\n            Console.WriteLine(&quot;HardwareDevice property: &quot; + keyInfo.HardwareDevice.ToString())\n\n            Console.WriteLine(&quot;KeyContainerName property: &quot; + keyInfo.KeyContainerName)\n\n            Console.WriteLine(&quot;KeyNumber property: &quot; + keyInfo.KeyNumber.ToString())\n\n            Console.WriteLine(&quot;MachineKeyStore property: &quot; + keyInfo.MachineKeyStore.ToString())\n\n            Console.WriteLine(&quot;Protected property: &quot; + keyInfo.Protected.ToString())\n\n            Console.WriteLine(&quot;ProviderName property: &quot; + keyInfo.ProviderName)\n\n            Console.WriteLine(&quot;ProviderType property: &quot; + keyInfo.ProviderType.ToString())\n\n            Console.WriteLine(&quot;RandomlyGenerated property: &quot; + keyInfo.RandomlyGenerated.ToString())\n\n            Console.WriteLine(&quot;Removable property: &quot; + keyInfo.Removable.ToString())\n\n            Console.WriteLine(&quot;UniqueKeyContainerName property: &quot; + keyInfo.UniqueKeyContainerName)\n\n\n        Catch e As Exception\n            Console.WriteLine(e.ToString())\n        Finally\n            &#39; Clear the key.\n            rsa.Clear()\n        End Try\n        Console.ReadLine()\n\n    End Sub\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1\">using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\n\npublic class CspKeyContainerInfoExample\n{\n\n    public static void Main(String[] args)\n    {\n        RSACryptoServiceProvider rsa= new RSACryptoServiceProvider();\n\n        try\n        {\n            // Note: In cases where a random key is generated,   \n            // a key container is not created until you call  \n            // a method that uses the key.  This example calls\n            // the Encrypt method before calling the\n            // CspKeyContainerInfo property so that a key\n            // container is created.  \n\n            // Create some data to encrypt and display it.\n            string data = &quot;Here is some data to encrypt.&quot;;\n\n            Console.WriteLine(&quot;Data to encrypt: &quot; + data);\n\n            // Convert the data to an array of bytes and \n            // encrypt it.\n            byte[] byteData = Encoding.ASCII.GetBytes(data);\n\n            byte[] encData = rsa.Encrypt(byteData, false);\n\n            // Display the encrypted value.\n            Console.WriteLine(&quot;Encrypted Data: &quot; + Encoding.ASCII.GetString(encData));\n\n            Console.WriteLine();\n\n            Console.WriteLine(&quot;CspKeyContainerInfo information:&quot;);\n\n            Console.WriteLine();\n\n            // Create a new CspKeyContainerInfo object.\n            CspKeyContainerInfo keyInfo = rsa.CspKeyContainerInfo;\n\n            // Display the value of each property.\n\n            Console.WriteLine(&quot;Accessible property: &quot; + keyInfo.Accessible);\n\n            Console.WriteLine(&quot;Exportable property: &quot; + keyInfo.Exportable);\n\n            Console.WriteLine(&quot;HardwareDevice property: &quot; + keyInfo.HardwareDevice);\n\n            Console.WriteLine(&quot;KeyContainerName property: &quot; + keyInfo.KeyContainerName);\n\n            Console.WriteLine(&quot;KeyNumber property: &quot; + keyInfo.KeyNumber.ToString());\n\n            Console.WriteLine(&quot;MachineKeyStore property: &quot; + keyInfo.MachineKeyStore);\n\n            Console.WriteLine(&quot;Protected property: &quot; + keyInfo.Protected);\n\n            Console.WriteLine(&quot;ProviderName property: &quot; + keyInfo.ProviderName);\n\n            Console.WriteLine(&quot;ProviderType property: &quot; + keyInfo.ProviderType);\n\n            Console.WriteLine(&quot;RandomlyGenerated property: &quot; + keyInfo.RandomlyGenerated);\n\n            Console.WriteLine(&quot;Removable property: &quot; + keyInfo.Removable);\n\n            Console.WriteLine(&quot;UniqueKeyContainerName property: &quot; + keyInfo.UniqueKeyContainerName);\n\n\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(e.ToString());\n        }\n        finally\n        {\n            // Clear the key.\n            rsa.Clear();\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_CspKeyContainerInfo_ProviderType\">\r\n    \r\n            <a id=\"System_Security_Cryptography_CspKeyContainerInfo_ProviderType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ProviderType</div>        \r\n          </div>\r\n    \r\n            <p>Gets the provider type of a key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int ProviderType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The provider type. The default is 1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Valid values are determined by the cryptographic service provider used to create the key. Cryptographic service providers are generally organized into groups or families, each of which has its own set of data formats and processes. Two families that use the same algorithm, such as the RC2 block cipher, often use different padding schemes, different key lengths, and different default modes.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a key container and retrieves information about that container.  </p>\n<pre><code class=\"lang-cpp\" name=\"Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1\">using namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Text;\nint main()\n{\n   RSACryptoServiceProvider^ rsa = gcnew RSACryptoServiceProvider;\n   try\n   {\n      \n      // Note: In cases where a random key is generated,   \n      // a key container is not created until you call  \n      // a method that uses the key.  This example calls\n      // the Encrypt method before calling the\n      // CspKeyContainerInfo property so that a key\n      // container is created.  \n      // Create some data to encrypt and display it.\n      String^ data = L&quot;Here is some data to encrypt.&quot;;\n      Console::WriteLine( L&quot;Data to encrypt: {0}&quot;, data );\n      \n      // Convert the data to an array of bytes and \n      // encrypt it.\n      array&lt;Byte&gt;^byteData = Encoding::ASCII-&gt;GetBytes( data );\n      array&lt;Byte&gt;^encData = rsa-&gt;Encrypt( byteData, false );\n      \n      // Display the encrypted value.\n      Console::WriteLine( L&quot;Encrypted Data: {0}&quot;, Encoding::ASCII-&gt;GetString( encData ) );\n      Console::WriteLine();\n      Console::WriteLine( L&quot;CspKeyContainerInfo information:&quot; );\n      Console::WriteLine();\n      \n      // Create a new CspKeyContainerInfo object.\n      CspKeyContainerInfo^ keyInfo = rsa-&gt;CspKeyContainerInfo;\n      \n      // Display the value of each property.\n      Console::WriteLine( L&quot;Accessible property: {0}&quot;, keyInfo-&gt;Accessible );\n      Console::WriteLine( L&quot;Exportable property: {0}&quot;, keyInfo-&gt;Exportable );\n      Console::WriteLine( L&quot;HardwareDevice property: {0}&quot;, keyInfo-&gt;HardwareDevice );\n      Console::WriteLine( L&quot;KeyContainerName property: {0}&quot;, keyInfo-&gt;KeyContainerName );\n      Console::WriteLine( L&quot;KeyNumber property: {0}&quot;, keyInfo-&gt;KeyNumber );\n      Console::WriteLine( L&quot;MachineKeyStore property: {0}&quot;, keyInfo-&gt;MachineKeyStore );\n      Console::WriteLine( L&quot;Protected property: {0}&quot;, keyInfo-&gt;Protected );\n      Console::WriteLine( L&quot;ProviderName property: {0}&quot;, keyInfo-&gt;ProviderName );\n      Console::WriteLine( L&quot;ProviderType property: {0}&quot;, keyInfo-&gt;ProviderType );\n      Console::WriteLine( L&quot;RandomlyGenerated property: {0}&quot;, keyInfo-&gt;RandomlyGenerated );\n      Console::WriteLine( L&quot;Removable property: {0}&quot;, keyInfo-&gt;Removable );\n      Console::WriteLine( L&quot;UniqueKeyContainerName property: {0}&quot;, keyInfo-&gt;UniqueKeyContainerName );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( e );\n   }\n   finally\n   {\n      \n      // Clear the key.\n      rsa-&gt;Clear();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1\">Imports System\nImports System.Security.Cryptography\nImports System.Text\n\nModule CspKeyContainerInfoExample\n\n    Sub Main(ByVal args() As String)\n        Dim rsa As New RSACryptoServiceProvider()\n\n        Try\n            &#39; Note: In cases where a random key is generated,   \n            &#39; a key container is not created until you call  \n            &#39; a method that uses the key.  This example calls\n            &#39; the Encrypt method before calling the\n            &#39; CspKeyContainerInfo property so that a key\n            &#39; container is created.  \n            &#39; Create some data to encrypt and display it.\n            Dim data As String = &quot;Here is some data to encrypt.&quot;\n\n            Console.WriteLine(&quot;Data to encrypt: &quot; + data)\n\n            &#39; Convert the data to an array of bytes and \n            &#39; encrypt it.\n            Dim byteData As Byte() = Encoding.ASCII.GetBytes(data)\n\n            Dim encData As Byte() = rsa.Encrypt(byteData, False)\n\n            &#39; Display the encrypted value.\n            Console.WriteLine(&quot;Encrypted Data: &quot; + Encoding.ASCII.GetString(encData))\n\n            Console.WriteLine()\n\n            Console.WriteLine(&quot;CspKeyContainerInfo information:&quot;)\n\n            Console.WriteLine()\n\n            &#39; Create a new CspKeyContainerInfo object.\n            Dim keyInfo As CspKeyContainerInfo = rsa.CspKeyContainerInfo\n\n            &#39; Display the value of each property.\n            Console.WriteLine(&quot;Accessible property: &quot; + keyInfo.Accessible.ToString())\n\n            Console.WriteLine(&quot;Exportable property: &quot; + keyInfo.Exportable.ToString())\n\n            Console.WriteLine(&quot;HardwareDevice property: &quot; + keyInfo.HardwareDevice.ToString())\n\n            Console.WriteLine(&quot;KeyContainerName property: &quot; + keyInfo.KeyContainerName)\n\n            Console.WriteLine(&quot;KeyNumber property: &quot; + keyInfo.KeyNumber.ToString())\n\n            Console.WriteLine(&quot;MachineKeyStore property: &quot; + keyInfo.MachineKeyStore.ToString())\n\n            Console.WriteLine(&quot;Protected property: &quot; + keyInfo.Protected.ToString())\n\n            Console.WriteLine(&quot;ProviderName property: &quot; + keyInfo.ProviderName)\n\n            Console.WriteLine(&quot;ProviderType property: &quot; + keyInfo.ProviderType.ToString())\n\n            Console.WriteLine(&quot;RandomlyGenerated property: &quot; + keyInfo.RandomlyGenerated.ToString())\n\n            Console.WriteLine(&quot;Removable property: &quot; + keyInfo.Removable.ToString())\n\n            Console.WriteLine(&quot;UniqueKeyContainerName property: &quot; + keyInfo.UniqueKeyContainerName)\n\n\n        Catch e As Exception\n            Console.WriteLine(e.ToString())\n        Finally\n            &#39; Clear the key.\n            rsa.Clear()\n        End Try\n        Console.ReadLine()\n\n    End Sub\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1\">using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\n\npublic class CspKeyContainerInfoExample\n{\n\n    public static void Main(String[] args)\n    {\n        RSACryptoServiceProvider rsa= new RSACryptoServiceProvider();\n\n        try\n        {\n            // Note: In cases where a random key is generated,   \n            // a key container is not created until you call  \n            // a method that uses the key.  This example calls\n            // the Encrypt method before calling the\n            // CspKeyContainerInfo property so that a key\n            // container is created.  \n\n            // Create some data to encrypt and display it.\n            string data = &quot;Here is some data to encrypt.&quot;;\n\n            Console.WriteLine(&quot;Data to encrypt: &quot; + data);\n\n            // Convert the data to an array of bytes and \n            // encrypt it.\n            byte[] byteData = Encoding.ASCII.GetBytes(data);\n\n            byte[] encData = rsa.Encrypt(byteData, false);\n\n            // Display the encrypted value.\n            Console.WriteLine(&quot;Encrypted Data: &quot; + Encoding.ASCII.GetString(encData));\n\n            Console.WriteLine();\n\n            Console.WriteLine(&quot;CspKeyContainerInfo information:&quot;);\n\n            Console.WriteLine();\n\n            // Create a new CspKeyContainerInfo object.\n            CspKeyContainerInfo keyInfo = rsa.CspKeyContainerInfo;\n\n            // Display the value of each property.\n\n            Console.WriteLine(&quot;Accessible property: &quot; + keyInfo.Accessible);\n\n            Console.WriteLine(&quot;Exportable property: &quot; + keyInfo.Exportable);\n\n            Console.WriteLine(&quot;HardwareDevice property: &quot; + keyInfo.HardwareDevice);\n\n            Console.WriteLine(&quot;KeyContainerName property: &quot; + keyInfo.KeyContainerName);\n\n            Console.WriteLine(&quot;KeyNumber property: &quot; + keyInfo.KeyNumber.ToString());\n\n            Console.WriteLine(&quot;MachineKeyStore property: &quot; + keyInfo.MachineKeyStore);\n\n            Console.WriteLine(&quot;Protected property: &quot; + keyInfo.Protected);\n\n            Console.WriteLine(&quot;ProviderName property: &quot; + keyInfo.ProviderName);\n\n            Console.WriteLine(&quot;ProviderType property: &quot; + keyInfo.ProviderType);\n\n            Console.WriteLine(&quot;RandomlyGenerated property: &quot; + keyInfo.RandomlyGenerated);\n\n            Console.WriteLine(&quot;Removable property: &quot; + keyInfo.Removable);\n\n            Console.WriteLine(&quot;UniqueKeyContainerName property: &quot; + keyInfo.UniqueKeyContainerName);\n\n\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(e.ToString());\n        }\n        finally\n        {\n            // Clear the key.\n            rsa.Clear();\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_CspKeyContainerInfo_RandomlyGenerated\">\r\n    \r\n            <a id=\"System_Security_Cryptography_CspKeyContainerInfo_RandomlyGenerated_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RandomlyGenerated</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether a key container was randomly generated by a managed cryptography class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool RandomlyGenerated { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the key container was randomly generated; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Usually, when a randomly generated key container is created, the key container is named &quot;CLR{<code>guid value</code>}.&quot;</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a key container and retrieves information about that container.  </p>\n<pre><code class=\"lang-cpp\" name=\"Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1\">using namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Text;\nint main()\n{\n   RSACryptoServiceProvider^ rsa = gcnew RSACryptoServiceProvider;\n   try\n   {\n      \n      // Note: In cases where a random key is generated,   \n      // a key container is not created until you call  \n      // a method that uses the key.  This example calls\n      // the Encrypt method before calling the\n      // CspKeyContainerInfo property so that a key\n      // container is created.  \n      // Create some data to encrypt and display it.\n      String^ data = L&quot;Here is some data to encrypt.&quot;;\n      Console::WriteLine( L&quot;Data to encrypt: {0}&quot;, data );\n      \n      // Convert the data to an array of bytes and \n      // encrypt it.\n      array&lt;Byte&gt;^byteData = Encoding::ASCII-&gt;GetBytes( data );\n      array&lt;Byte&gt;^encData = rsa-&gt;Encrypt( byteData, false );\n      \n      // Display the encrypted value.\n      Console::WriteLine( L&quot;Encrypted Data: {0}&quot;, Encoding::ASCII-&gt;GetString( encData ) );\n      Console::WriteLine();\n      Console::WriteLine( L&quot;CspKeyContainerInfo information:&quot; );\n      Console::WriteLine();\n      \n      // Create a new CspKeyContainerInfo object.\n      CspKeyContainerInfo^ keyInfo = rsa-&gt;CspKeyContainerInfo;\n      \n      // Display the value of each property.\n      Console::WriteLine( L&quot;Accessible property: {0}&quot;, keyInfo-&gt;Accessible );\n      Console::WriteLine( L&quot;Exportable property: {0}&quot;, keyInfo-&gt;Exportable );\n      Console::WriteLine( L&quot;HardwareDevice property: {0}&quot;, keyInfo-&gt;HardwareDevice );\n      Console::WriteLine( L&quot;KeyContainerName property: {0}&quot;, keyInfo-&gt;KeyContainerName );\n      Console::WriteLine( L&quot;KeyNumber property: {0}&quot;, keyInfo-&gt;KeyNumber );\n      Console::WriteLine( L&quot;MachineKeyStore property: {0}&quot;, keyInfo-&gt;MachineKeyStore );\n      Console::WriteLine( L&quot;Protected property: {0}&quot;, keyInfo-&gt;Protected );\n      Console::WriteLine( L&quot;ProviderName property: {0}&quot;, keyInfo-&gt;ProviderName );\n      Console::WriteLine( L&quot;ProviderType property: {0}&quot;, keyInfo-&gt;ProviderType );\n      Console::WriteLine( L&quot;RandomlyGenerated property: {0}&quot;, keyInfo-&gt;RandomlyGenerated );\n      Console::WriteLine( L&quot;Removable property: {0}&quot;, keyInfo-&gt;Removable );\n      Console::WriteLine( L&quot;UniqueKeyContainerName property: {0}&quot;, keyInfo-&gt;UniqueKeyContainerName );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( e );\n   }\n   finally\n   {\n      \n      // Clear the key.\n      rsa-&gt;Clear();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1\">Imports System\nImports System.Security.Cryptography\nImports System.Text\n\nModule CspKeyContainerInfoExample\n\n    Sub Main(ByVal args() As String)\n        Dim rsa As New RSACryptoServiceProvider()\n\n        Try\n            &#39; Note: In cases where a random key is generated,   \n            &#39; a key container is not created until you call  \n            &#39; a method that uses the key.  This example calls\n            &#39; the Encrypt method before calling the\n            &#39; CspKeyContainerInfo property so that a key\n            &#39; container is created.  \n            &#39; Create some data to encrypt and display it.\n            Dim data As String = &quot;Here is some data to encrypt.&quot;\n\n            Console.WriteLine(&quot;Data to encrypt: &quot; + data)\n\n            &#39; Convert the data to an array of bytes and \n            &#39; encrypt it.\n            Dim byteData As Byte() = Encoding.ASCII.GetBytes(data)\n\n            Dim encData As Byte() = rsa.Encrypt(byteData, False)\n\n            &#39; Display the encrypted value.\n            Console.WriteLine(&quot;Encrypted Data: &quot; + Encoding.ASCII.GetString(encData))\n\n            Console.WriteLine()\n\n            Console.WriteLine(&quot;CspKeyContainerInfo information:&quot;)\n\n            Console.WriteLine()\n\n            &#39; Create a new CspKeyContainerInfo object.\n            Dim keyInfo As CspKeyContainerInfo = rsa.CspKeyContainerInfo\n\n            &#39; Display the value of each property.\n            Console.WriteLine(&quot;Accessible property: &quot; + keyInfo.Accessible.ToString())\n\n            Console.WriteLine(&quot;Exportable property: &quot; + keyInfo.Exportable.ToString())\n\n            Console.WriteLine(&quot;HardwareDevice property: &quot; + keyInfo.HardwareDevice.ToString())\n\n            Console.WriteLine(&quot;KeyContainerName property: &quot; + keyInfo.KeyContainerName)\n\n            Console.WriteLine(&quot;KeyNumber property: &quot; + keyInfo.KeyNumber.ToString())\n\n            Console.WriteLine(&quot;MachineKeyStore property: &quot; + keyInfo.MachineKeyStore.ToString())\n\n            Console.WriteLine(&quot;Protected property: &quot; + keyInfo.Protected.ToString())\n\n            Console.WriteLine(&quot;ProviderName property: &quot; + keyInfo.ProviderName)\n\n            Console.WriteLine(&quot;ProviderType property: &quot; + keyInfo.ProviderType.ToString())\n\n            Console.WriteLine(&quot;RandomlyGenerated property: &quot; + keyInfo.RandomlyGenerated.ToString())\n\n            Console.WriteLine(&quot;Removable property: &quot; + keyInfo.Removable.ToString())\n\n            Console.WriteLine(&quot;UniqueKeyContainerName property: &quot; + keyInfo.UniqueKeyContainerName)\n\n\n        Catch e As Exception\n            Console.WriteLine(e.ToString())\n        Finally\n            &#39; Clear the key.\n            rsa.Clear()\n        End Try\n        Console.ReadLine()\n\n    End Sub\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1\">using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\n\npublic class CspKeyContainerInfoExample\n{\n\n    public static void Main(String[] args)\n    {\n        RSACryptoServiceProvider rsa= new RSACryptoServiceProvider();\n\n        try\n        {\n            // Note: In cases where a random key is generated,   \n            // a key container is not created until you call  \n            // a method that uses the key.  This example calls\n            // the Encrypt method before calling the\n            // CspKeyContainerInfo property so that a key\n            // container is created.  \n\n            // Create some data to encrypt and display it.\n            string data = &quot;Here is some data to encrypt.&quot;;\n\n            Console.WriteLine(&quot;Data to encrypt: &quot; + data);\n\n            // Convert the data to an array of bytes and \n            // encrypt it.\n            byte[] byteData = Encoding.ASCII.GetBytes(data);\n\n            byte[] encData = rsa.Encrypt(byteData, false);\n\n            // Display the encrypted value.\n            Console.WriteLine(&quot;Encrypted Data: &quot; + Encoding.ASCII.GetString(encData));\n\n            Console.WriteLine();\n\n            Console.WriteLine(&quot;CspKeyContainerInfo information:&quot;);\n\n            Console.WriteLine();\n\n            // Create a new CspKeyContainerInfo object.\n            CspKeyContainerInfo keyInfo = rsa.CspKeyContainerInfo;\n\n            // Display the value of each property.\n\n            Console.WriteLine(&quot;Accessible property: &quot; + keyInfo.Accessible);\n\n            Console.WriteLine(&quot;Exportable property: &quot; + keyInfo.Exportable);\n\n            Console.WriteLine(&quot;HardwareDevice property: &quot; + keyInfo.HardwareDevice);\n\n            Console.WriteLine(&quot;KeyContainerName property: &quot; + keyInfo.KeyContainerName);\n\n            Console.WriteLine(&quot;KeyNumber property: &quot; + keyInfo.KeyNumber.ToString());\n\n            Console.WriteLine(&quot;MachineKeyStore property: &quot; + keyInfo.MachineKeyStore);\n\n            Console.WriteLine(&quot;Protected property: &quot; + keyInfo.Protected);\n\n            Console.WriteLine(&quot;ProviderName property: &quot; + keyInfo.ProviderName);\n\n            Console.WriteLine(&quot;ProviderType property: &quot; + keyInfo.ProviderType);\n\n            Console.WriteLine(&quot;RandomlyGenerated property: &quot; + keyInfo.RandomlyGenerated);\n\n            Console.WriteLine(&quot;Removable property: &quot; + keyInfo.Removable);\n\n            Console.WriteLine(&quot;UniqueKeyContainerName property: &quot; + keyInfo.UniqueKeyContainerName);\n\n\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(e.ToString());\n        }\n        finally\n        {\n            // Clear the key.\n            rsa.Clear();\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_CspKeyContainerInfo_Removable\">\r\n    \r\n            <a id=\"System_Security_Cryptography_CspKeyContainerInfo_Removable_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Removable</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether a key can be removed from a key container.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Removable { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the key is removable; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The cryptographic service provider (CSP) was not found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a key container and retrieves information about that container.  </p>\n<pre><code class=\"lang-cpp\" name=\"Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1\">using namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Text;\nint main()\n{\n   RSACryptoServiceProvider^ rsa = gcnew RSACryptoServiceProvider;\n   try\n   {\n      \n      // Note: In cases where a random key is generated,   \n      // a key container is not created until you call  \n      // a method that uses the key.  This example calls\n      // the Encrypt method before calling the\n      // CspKeyContainerInfo property so that a key\n      // container is created.  \n      // Create some data to encrypt and display it.\n      String^ data = L&quot;Here is some data to encrypt.&quot;;\n      Console::WriteLine( L&quot;Data to encrypt: {0}&quot;, data );\n      \n      // Convert the data to an array of bytes and \n      // encrypt it.\n      array&lt;Byte&gt;^byteData = Encoding::ASCII-&gt;GetBytes( data );\n      array&lt;Byte&gt;^encData = rsa-&gt;Encrypt( byteData, false );\n      \n      // Display the encrypted value.\n      Console::WriteLine( L&quot;Encrypted Data: {0}&quot;, Encoding::ASCII-&gt;GetString( encData ) );\n      Console::WriteLine();\n      Console::WriteLine( L&quot;CspKeyContainerInfo information:&quot; );\n      Console::WriteLine();\n      \n      // Create a new CspKeyContainerInfo object.\n      CspKeyContainerInfo^ keyInfo = rsa-&gt;CspKeyContainerInfo;\n      \n      // Display the value of each property.\n      Console::WriteLine( L&quot;Accessible property: {0}&quot;, keyInfo-&gt;Accessible );\n      Console::WriteLine( L&quot;Exportable property: {0}&quot;, keyInfo-&gt;Exportable );\n      Console::WriteLine( L&quot;HardwareDevice property: {0}&quot;, keyInfo-&gt;HardwareDevice );\n      Console::WriteLine( L&quot;KeyContainerName property: {0}&quot;, keyInfo-&gt;KeyContainerName );\n      Console::WriteLine( L&quot;KeyNumber property: {0}&quot;, keyInfo-&gt;KeyNumber );\n      Console::WriteLine( L&quot;MachineKeyStore property: {0}&quot;, keyInfo-&gt;MachineKeyStore );\n      Console::WriteLine( L&quot;Protected property: {0}&quot;, keyInfo-&gt;Protected );\n      Console::WriteLine( L&quot;ProviderName property: {0}&quot;, keyInfo-&gt;ProviderName );\n      Console::WriteLine( L&quot;ProviderType property: {0}&quot;, keyInfo-&gt;ProviderType );\n      Console::WriteLine( L&quot;RandomlyGenerated property: {0}&quot;, keyInfo-&gt;RandomlyGenerated );\n      Console::WriteLine( L&quot;Removable property: {0}&quot;, keyInfo-&gt;Removable );\n      Console::WriteLine( L&quot;UniqueKeyContainerName property: {0}&quot;, keyInfo-&gt;UniqueKeyContainerName );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( e );\n   }\n   finally\n   {\n      \n      // Clear the key.\n      rsa-&gt;Clear();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1\">Imports System\nImports System.Security.Cryptography\nImports System.Text\n\nModule CspKeyContainerInfoExample\n\n    Sub Main(ByVal args() As String)\n        Dim rsa As New RSACryptoServiceProvider()\n\n        Try\n            &#39; Note: In cases where a random key is generated,   \n            &#39; a key container is not created until you call  \n            &#39; a method that uses the key.  This example calls\n            &#39; the Encrypt method before calling the\n            &#39; CspKeyContainerInfo property so that a key\n            &#39; container is created.  \n            &#39; Create some data to encrypt and display it.\n            Dim data As String = &quot;Here is some data to encrypt.&quot;\n\n            Console.WriteLine(&quot;Data to encrypt: &quot; + data)\n\n            &#39; Convert the data to an array of bytes and \n            &#39; encrypt it.\n            Dim byteData As Byte() = Encoding.ASCII.GetBytes(data)\n\n            Dim encData As Byte() = rsa.Encrypt(byteData, False)\n\n            &#39; Display the encrypted value.\n            Console.WriteLine(&quot;Encrypted Data: &quot; + Encoding.ASCII.GetString(encData))\n\n            Console.WriteLine()\n\n            Console.WriteLine(&quot;CspKeyContainerInfo information:&quot;)\n\n            Console.WriteLine()\n\n            &#39; Create a new CspKeyContainerInfo object.\n            Dim keyInfo As CspKeyContainerInfo = rsa.CspKeyContainerInfo\n\n            &#39; Display the value of each property.\n            Console.WriteLine(&quot;Accessible property: &quot; + keyInfo.Accessible.ToString())\n\n            Console.WriteLine(&quot;Exportable property: &quot; + keyInfo.Exportable.ToString())\n\n            Console.WriteLine(&quot;HardwareDevice property: &quot; + keyInfo.HardwareDevice.ToString())\n\n            Console.WriteLine(&quot;KeyContainerName property: &quot; + keyInfo.KeyContainerName)\n\n            Console.WriteLine(&quot;KeyNumber property: &quot; + keyInfo.KeyNumber.ToString())\n\n            Console.WriteLine(&quot;MachineKeyStore property: &quot; + keyInfo.MachineKeyStore.ToString())\n\n            Console.WriteLine(&quot;Protected property: &quot; + keyInfo.Protected.ToString())\n\n            Console.WriteLine(&quot;ProviderName property: &quot; + keyInfo.ProviderName)\n\n            Console.WriteLine(&quot;ProviderType property: &quot; + keyInfo.ProviderType.ToString())\n\n            Console.WriteLine(&quot;RandomlyGenerated property: &quot; + keyInfo.RandomlyGenerated.ToString())\n\n            Console.WriteLine(&quot;Removable property: &quot; + keyInfo.Removable.ToString())\n\n            Console.WriteLine(&quot;UniqueKeyContainerName property: &quot; + keyInfo.UniqueKeyContainerName)\n\n\n        Catch e As Exception\n            Console.WriteLine(e.ToString())\n        Finally\n            &#39; Clear the key.\n            rsa.Clear()\n        End Try\n        Console.ReadLine()\n\n    End Sub\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1\">using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\n\npublic class CspKeyContainerInfoExample\n{\n\n    public static void Main(String[] args)\n    {\n        RSACryptoServiceProvider rsa= new RSACryptoServiceProvider();\n\n        try\n        {\n            // Note: In cases where a random key is generated,   \n            // a key container is not created until you call  \n            // a method that uses the key.  This example calls\n            // the Encrypt method before calling the\n            // CspKeyContainerInfo property so that a key\n            // container is created.  \n\n            // Create some data to encrypt and display it.\n            string data = &quot;Here is some data to encrypt.&quot;;\n\n            Console.WriteLine(&quot;Data to encrypt: &quot; + data);\n\n            // Convert the data to an array of bytes and \n            // encrypt it.\n            byte[] byteData = Encoding.ASCII.GetBytes(data);\n\n            byte[] encData = rsa.Encrypt(byteData, false);\n\n            // Display the encrypted value.\n            Console.WriteLine(&quot;Encrypted Data: &quot; + Encoding.ASCII.GetString(encData));\n\n            Console.WriteLine();\n\n            Console.WriteLine(&quot;CspKeyContainerInfo information:&quot;);\n\n            Console.WriteLine();\n\n            // Create a new CspKeyContainerInfo object.\n            CspKeyContainerInfo keyInfo = rsa.CspKeyContainerInfo;\n\n            // Display the value of each property.\n\n            Console.WriteLine(&quot;Accessible property: &quot; + keyInfo.Accessible);\n\n            Console.WriteLine(&quot;Exportable property: &quot; + keyInfo.Exportable);\n\n            Console.WriteLine(&quot;HardwareDevice property: &quot; + keyInfo.HardwareDevice);\n\n            Console.WriteLine(&quot;KeyContainerName property: &quot; + keyInfo.KeyContainerName);\n\n            Console.WriteLine(&quot;KeyNumber property: &quot; + keyInfo.KeyNumber.ToString());\n\n            Console.WriteLine(&quot;MachineKeyStore property: &quot; + keyInfo.MachineKeyStore);\n\n            Console.WriteLine(&quot;Protected property: &quot; + keyInfo.Protected);\n\n            Console.WriteLine(&quot;ProviderName property: &quot; + keyInfo.ProviderName);\n\n            Console.WriteLine(&quot;ProviderType property: &quot; + keyInfo.ProviderType);\n\n            Console.WriteLine(&quot;RandomlyGenerated property: &quot; + keyInfo.RandomlyGenerated);\n\n            Console.WriteLine(&quot;Removable property: &quot; + keyInfo.Removable);\n\n            Console.WriteLine(&quot;UniqueKeyContainerName property: &quot; + keyInfo.UniqueKeyContainerName);\n\n\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(e.ToString());\n        }\n        finally\n        {\n            // Clear the key.\n            rsa.Clear();\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_CspKeyContainerInfo_UniqueKeyContainerName\">\r\n    \r\n            <a id=\"System_Security_Cryptography_CspKeyContainerInfo_UniqueKeyContainerName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UniqueKeyContainerName</div>        \r\n          </div>\r\n    \r\n            <p>Gets a unique key container name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string UniqueKeyContainerName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The unique key container name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The key type is not supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The cryptographic service provider cannot be found.  </p>\n<p> -or-  </p>\n<p> The key container was not found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a key container and retrieves information about that container.  </p>\n<pre><code class=\"lang-cpp\" name=\"Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1\">using namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Text;\nint main()\n{\n   RSACryptoServiceProvider^ rsa = gcnew RSACryptoServiceProvider;\n   try\n   {\n      \n      // Note: In cases where a random key is generated,   \n      // a key container is not created until you call  \n      // a method that uses the key.  This example calls\n      // the Encrypt method before calling the\n      // CspKeyContainerInfo property so that a key\n      // container is created.  \n      // Create some data to encrypt and display it.\n      String^ data = L&quot;Here is some data to encrypt.&quot;;\n      Console::WriteLine( L&quot;Data to encrypt: {0}&quot;, data );\n      \n      // Convert the data to an array of bytes and \n      // encrypt it.\n      array&lt;Byte&gt;^byteData = Encoding::ASCII-&gt;GetBytes( data );\n      array&lt;Byte&gt;^encData = rsa-&gt;Encrypt( byteData, false );\n      \n      // Display the encrypted value.\n      Console::WriteLine( L&quot;Encrypted Data: {0}&quot;, Encoding::ASCII-&gt;GetString( encData ) );\n      Console::WriteLine();\n      Console::WriteLine( L&quot;CspKeyContainerInfo information:&quot; );\n      Console::WriteLine();\n      \n      // Create a new CspKeyContainerInfo object.\n      CspKeyContainerInfo^ keyInfo = rsa-&gt;CspKeyContainerInfo;\n      \n      // Display the value of each property.\n      Console::WriteLine( L&quot;Accessible property: {0}&quot;, keyInfo-&gt;Accessible );\n      Console::WriteLine( L&quot;Exportable property: {0}&quot;, keyInfo-&gt;Exportable );\n      Console::WriteLine( L&quot;HardwareDevice property: {0}&quot;, keyInfo-&gt;HardwareDevice );\n      Console::WriteLine( L&quot;KeyContainerName property: {0}&quot;, keyInfo-&gt;KeyContainerName );\n      Console::WriteLine( L&quot;KeyNumber property: {0}&quot;, keyInfo-&gt;KeyNumber );\n      Console::WriteLine( L&quot;MachineKeyStore property: {0}&quot;, keyInfo-&gt;MachineKeyStore );\n      Console::WriteLine( L&quot;Protected property: {0}&quot;, keyInfo-&gt;Protected );\n      Console::WriteLine( L&quot;ProviderName property: {0}&quot;, keyInfo-&gt;ProviderName );\n      Console::WriteLine( L&quot;ProviderType property: {0}&quot;, keyInfo-&gt;ProviderType );\n      Console::WriteLine( L&quot;RandomlyGenerated property: {0}&quot;, keyInfo-&gt;RandomlyGenerated );\n      Console::WriteLine( L&quot;Removable property: {0}&quot;, keyInfo-&gt;Removable );\n      Console::WriteLine( L&quot;UniqueKeyContainerName property: {0}&quot;, keyInfo-&gt;UniqueKeyContainerName );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( e );\n   }\n   finally\n   {\n      \n      // Clear the key.\n      rsa-&gt;Clear();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1\">Imports System\nImports System.Security.Cryptography\nImports System.Text\n\nModule CspKeyContainerInfoExample\n\n    Sub Main(ByVal args() As String)\n        Dim rsa As New RSACryptoServiceProvider()\n\n        Try\n            &#39; Note: In cases where a random key is generated,   \n            &#39; a key container is not created until you call  \n            &#39; a method that uses the key.  This example calls\n            &#39; the Encrypt method before calling the\n            &#39; CspKeyContainerInfo property so that a key\n            &#39; container is created.  \n            &#39; Create some data to encrypt and display it.\n            Dim data As String = &quot;Here is some data to encrypt.&quot;\n\n            Console.WriteLine(&quot;Data to encrypt: &quot; + data)\n\n            &#39; Convert the data to an array of bytes and \n            &#39; encrypt it.\n            Dim byteData As Byte() = Encoding.ASCII.GetBytes(data)\n\n            Dim encData As Byte() = rsa.Encrypt(byteData, False)\n\n            &#39; Display the encrypted value.\n            Console.WriteLine(&quot;Encrypted Data: &quot; + Encoding.ASCII.GetString(encData))\n\n            Console.WriteLine()\n\n            Console.WriteLine(&quot;CspKeyContainerInfo information:&quot;)\n\n            Console.WriteLine()\n\n            &#39; Create a new CspKeyContainerInfo object.\n            Dim keyInfo As CspKeyContainerInfo = rsa.CspKeyContainerInfo\n\n            &#39; Display the value of each property.\n            Console.WriteLine(&quot;Accessible property: &quot; + keyInfo.Accessible.ToString())\n\n            Console.WriteLine(&quot;Exportable property: &quot; + keyInfo.Exportable.ToString())\n\n            Console.WriteLine(&quot;HardwareDevice property: &quot; + keyInfo.HardwareDevice.ToString())\n\n            Console.WriteLine(&quot;KeyContainerName property: &quot; + keyInfo.KeyContainerName)\n\n            Console.WriteLine(&quot;KeyNumber property: &quot; + keyInfo.KeyNumber.ToString())\n\n            Console.WriteLine(&quot;MachineKeyStore property: &quot; + keyInfo.MachineKeyStore.ToString())\n\n            Console.WriteLine(&quot;Protected property: &quot; + keyInfo.Protected.ToString())\n\n            Console.WriteLine(&quot;ProviderName property: &quot; + keyInfo.ProviderName)\n\n            Console.WriteLine(&quot;ProviderType property: &quot; + keyInfo.ProviderType.ToString())\n\n            Console.WriteLine(&quot;RandomlyGenerated property: &quot; + keyInfo.RandomlyGenerated.ToString())\n\n            Console.WriteLine(&quot;Removable property: &quot; + keyInfo.Removable.ToString())\n\n            Console.WriteLine(&quot;UniqueKeyContainerName property: &quot; + keyInfo.UniqueKeyContainerName)\n\n\n        Catch e As Exception\n            Console.WriteLine(e.ToString())\n        Finally\n            &#39; Clear the key.\n            rsa.Clear()\n        End Try\n        Console.ReadLine()\n\n    End Sub\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1\">using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\n\npublic class CspKeyContainerInfoExample\n{\n\n    public static void Main(String[] args)\n    {\n        RSACryptoServiceProvider rsa= new RSACryptoServiceProvider();\n\n        try\n        {\n            // Note: In cases where a random key is generated,   \n            // a key container is not created until you call  \n            // a method that uses the key.  This example calls\n            // the Encrypt method before calling the\n            // CspKeyContainerInfo property so that a key\n            // container is created.  \n\n            // Create some data to encrypt and display it.\n            string data = &quot;Here is some data to encrypt.&quot;;\n\n            Console.WriteLine(&quot;Data to encrypt: &quot; + data);\n\n            // Convert the data to an array of bytes and \n            // encrypt it.\n            byte[] byteData = Encoding.ASCII.GetBytes(data);\n\n            byte[] encData = rsa.Encrypt(byteData, false);\n\n            // Display the encrypted value.\n            Console.WriteLine(&quot;Encrypted Data: &quot; + Encoding.ASCII.GetString(encData));\n\n            Console.WriteLine();\n\n            Console.WriteLine(&quot;CspKeyContainerInfo information:&quot;);\n\n            Console.WriteLine();\n\n            // Create a new CspKeyContainerInfo object.\n            CspKeyContainerInfo keyInfo = rsa.CspKeyContainerInfo;\n\n            // Display the value of each property.\n\n            Console.WriteLine(&quot;Accessible property: &quot; + keyInfo.Accessible);\n\n            Console.WriteLine(&quot;Exportable property: &quot; + keyInfo.Exportable);\n\n            Console.WriteLine(&quot;HardwareDevice property: &quot; + keyInfo.HardwareDevice);\n\n            Console.WriteLine(&quot;KeyContainerName property: &quot; + keyInfo.KeyContainerName);\n\n            Console.WriteLine(&quot;KeyNumber property: &quot; + keyInfo.KeyNumber.ToString());\n\n            Console.WriteLine(&quot;MachineKeyStore property: &quot; + keyInfo.MachineKeyStore);\n\n            Console.WriteLine(&quot;Protected property: &quot; + keyInfo.Protected);\n\n            Console.WriteLine(&quot;ProviderName property: &quot; + keyInfo.ProviderName);\n\n            Console.WriteLine(&quot;ProviderType property: &quot; + keyInfo.ProviderType);\n\n            Console.WriteLine(&quot;RandomlyGenerated property: &quot; + keyInfo.RandomlyGenerated);\n\n            Console.WriteLine(&quot;Removable property: &quot; + keyInfo.Removable);\n\n            Console.WriteLine(&quot;UniqueKeyContainerName property: &quot; + keyInfo.UniqueKeyContainerName);\n\n\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(e.ToString());\n        }\n        finally\n        {\n            // Clear the key.\n            rsa.Clear();\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Security.Cryptography.CspKeyContainerInfo.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.Cryptography.CspKeyContainerInfo.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.CspKeyContainerInfo\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.CspKeyContainerInfo..ctor\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.CspKeyContainerInfo.Accessible\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.CspKeyContainerInfo.CryptoKeySecurity\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.CspKeyContainerInfo.Exportable\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.CspKeyContainerInfo.HardwareDevice\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.CspKeyContainerInfo.KeyContainerName\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.CspKeyContainerInfo.KeyNumber\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.CspKeyContainerInfo.MachineKeyStore\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.CspKeyContainerInfo.Protected\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.CspKeyContainerInfo.ProviderName\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.CspKeyContainerInfo.ProviderType\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.CspKeyContainerInfo.RandomlyGenerated\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.CspKeyContainerInfo.Removable\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.CspKeyContainerInfo.UniqueKeyContainerName\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"7ea388ec-3b4f-a6ef-aacf-01e9660fe144\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides additional information about a cryptographic key pair. This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Security.Cryptography/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.Cryptography.CspKeyContainerInfo\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Security.Cryptography.CspKeyContainerInfo.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.Cryptography.CspKeyContainerInfo.yml","open_to_public_contributors":true,"api_name":["System.Security.Cryptography.CspKeyContainerInfo","System.Security.Cryptography.CspKeyContainerInfo..ctor","System.Security.Cryptography.CspKeyContainerInfo.Accessible","System.Security.Cryptography.CspKeyContainerInfo.CryptoKeySecurity","System.Security.Cryptography.CspKeyContainerInfo.Exportable","System.Security.Cryptography.CspKeyContainerInfo.HardwareDevice","System.Security.Cryptography.CspKeyContainerInfo.KeyContainerName","System.Security.Cryptography.CspKeyContainerInfo.KeyNumber","System.Security.Cryptography.CspKeyContainerInfo.MachineKeyStore","System.Security.Cryptography.CspKeyContainerInfo.Protected","System.Security.Cryptography.CspKeyContainerInfo.ProviderName","System.Security.Cryptography.CspKeyContainerInfo.ProviderType","System.Security.Cryptography.CspKeyContainerInfo.RandomlyGenerated","System.Security.Cryptography.CspKeyContainerInfo.Removable","System.Security.Cryptography.CspKeyContainerInfo.UniqueKeyContainerName"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.Cryptography.CspKeyContainerInfo","System::Security::Cryptography::CspKeyContainerInfo","System.Security.Cryptography.CspKeyContainerInfo.#ctor","System::Security::Cryptography::CspKeyContainerInfo::#ctor","System.Security.Cryptography.CspKeyContainerInfo.Accessible","System::Security::Cryptography::CspKeyContainerInfo::Accessible","System.Security.Cryptography.CspKeyContainerInfo.CryptoKeySecurity","System::Security::Cryptography::CspKeyContainerInfo::CryptoKeySecurity","System.Security.Cryptography.CspKeyContainerInfo.Exportable","System::Security::Cryptography::CspKeyContainerInfo::Exportable","System.Security.Cryptography.CspKeyContainerInfo.HardwareDevice","System::Security::Cryptography::CspKeyContainerInfo::HardwareDevice","System.Security.Cryptography.CspKeyContainerInfo.KeyContainerName","System::Security::Cryptography::CspKeyContainerInfo::KeyContainerName","System.Security.Cryptography.CspKeyContainerInfo.KeyNumber","System::Security::Cryptography::CspKeyContainerInfo::KeyNumber","System.Security.Cryptography.CspKeyContainerInfo.MachineKeyStore","System::Security::Cryptography::CspKeyContainerInfo::MachineKeyStore","System.Security.Cryptography.CspKeyContainerInfo.Protected","System::Security::Cryptography::CspKeyContainerInfo::Protected","System.Security.Cryptography.CspKeyContainerInfo.ProviderName","System::Security::Cryptography::CspKeyContainerInfo::ProviderName","System.Security.Cryptography.CspKeyContainerInfo.ProviderType","System::Security::Cryptography::CspKeyContainerInfo::ProviderType","System.Security.Cryptography.CspKeyContainerInfo.RandomlyGenerated","System::Security::Cryptography::CspKeyContainerInfo::RandomlyGenerated","System.Security.Cryptography.CspKeyContainerInfo.Removable","System::Security::Cryptography::CspKeyContainerInfo::Removable","System.Security.Cryptography.CspKeyContainerInfo.UniqueKeyContainerName","System::Security::Cryptography::CspKeyContainerInfo::UniqueKeyContainerName"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"7ea388ec-3b4f-a6ef-aacf-01e9660fe144","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Security.Cryptography/CspKeyContainerInfo.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"CspKeyContainerInfo class | Microsoft Docs","_op_ogTitle":"CspKeyContainerInfo class","description":"Provides additional information about a cryptographic key pair. This class cannot be inherited.\n","toc_asset_id":"_splitted/System.Security.Cryptography/toc.json","toc_rel":"_splitted/System.Security.Cryptography/toc.json","source_url":"","ms.assetid":"System.Security.Cryptography.CspKeyContainerInfo","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.cryptography.cspkeycontainerinfo","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.cryptography.cspkeycontainerinfo","fileRelativePath":"System.Security.Cryptography.CspKeyContainerInfo.html"},"themesRelativePathToOutputRoot":"_themes/"}