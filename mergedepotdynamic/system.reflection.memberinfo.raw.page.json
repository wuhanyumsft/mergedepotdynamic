{"content":"    \r\n    <h1 id=\"System_Reflection_MemberInfo\">\r\n      <span class=\"lang-csharp\">MemberInfo</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Obtains information about the attributes of a member and provides access to member metadata.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]\n[System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._MemberInfo))]\n[System.Runtime.InteropServices.ComVisible(true)]\npublic abstract class MemberInfo : System.Reflection.ICustomAttributeProvider, System.Runtime.InteropServices._MemberInfo</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">MemberInfo</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The MemberInfo class is the abstract base class for classes used to obtain information about all members of a class (constructors, events, fields, methods, and properties).  </p>\n<p> This class introduces the basic functionality that all members provide.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_MemberInfo__ctor\" data-linktype=\"self-bookmark\">MemberInfo()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_MemberInfo_CustomAttributes\" data-linktype=\"self-bookmark\">CustomAttributes</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a collection that contains this member&#39;s custom attributes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_MemberInfo_DeclaringType\" data-linktype=\"self-bookmark\">DeclaringType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the class that declares this member.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_MemberInfo_MemberType\" data-linktype=\"self-bookmark\">MemberType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, gets a <a class=\"xref\" href=\"system.reflection.membertypes\" data-linktype=\"relative-path\">MemberTypes</a> value indicating the type of the member â€” method, constructor, event, and so on.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_MemberInfo_MetadataToken\" data-linktype=\"self-bookmark\">MetadataToken</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that identifies a metadata element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_MemberInfo_Module\" data-linktype=\"self-bookmark\">Module</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the module in which the type that declares the member represented by the current <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> is defined.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_MemberInfo_Name\" data-linktype=\"self-bookmark\">Name</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the name of the current member.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_MemberInfo_ReflectedType\" data-linktype=\"self-bookmark\">ReflectedType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the class object that was used to obtain this instance of <code>MemberInfo</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_MemberInfo_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value that indicates whether this instance is equal to a specified object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_MemberInfo_GetCustomAttributes_System_Boolean_\" data-linktype=\"self-bookmark\">GetCustomAttributes(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, returns an array of all custom attributes applied to this member.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_MemberInfo_GetCustomAttributes_System_Type_System_Boolean_\" data-linktype=\"self-bookmark\">GetCustomAttributes(Type,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, returns an array of custom attributes applied to this member and identified by <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_MemberInfo_GetCustomAttributesData\" data-linktype=\"self-bookmark\">GetCustomAttributesData()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a list of <a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a> objects representing data about the attributes that have been applied to the target member.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_MemberInfo_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the hash code for this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_MemberInfo_IsDefined_System_Type_System_Boolean_\" data-linktype=\"self-bookmark\">IsDefined(Type,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, indicates whether one or more attributes of the specified type or of its derived types is applied to this member.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Operators\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_MemberInfo_op_Equality_System_Reflection_MemberInfo_System_Reflection_MemberInfo_\" data-linktype=\"self-bookmark\">op_Equality(MemberInfo,MemberInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether two <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> objects are equal.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_MemberInfo_op_Inequality_System_Reflection_MemberInfo_System_Reflection_MemberInfo_\" data-linktype=\"self-bookmark\">op_Inequality(MemberInfo,MemberInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether two <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> objects are not equal.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"self-bookmark\">_MemberInfo.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Maps a set of names to a corresponding set of dispatch identifiers.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_GetType\" data-linktype=\"self-bookmark\">_MemberInfo.GetType()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object representing the <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"self-bookmark\">_MemberInfo.GetTypeInfo(UInt32,UInt32,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the type information for an object, which can then be used to get the type information for an interface.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_GetTypeInfoCount_System_UInt32__\" data-linktype=\"self-bookmark\">_MemberInfo.GetTypeInfoCount(UInt32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\" data-linktype=\"self-bookmark\">_MemberInfo.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides access to properties and methods exposed by an object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_MemberInfo__ctor\">\r\n    \r\n            <a id=\"System_Reflection_MemberInfo__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MemberInfo()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected MemberInfo ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Only a derived class can create this <code>MemberInfo</code> class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_MemberInfo_CustomAttributes\">\r\n    \r\n            <a id=\"System_Reflection_MemberInfo_CustomAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CustomAttributes</div>        \r\n          </div>\r\n    \r\n            <p>Gets a collection that contains this member&#39;s custom attributes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Collections.Generic.IEnumerable&lt;System.Reflection.CustomAttributeData&gt; CustomAttributes { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a>&gt;</div>\r\n                  </div>\r\n                  <p>A collection that contains this member&#39;s custom attributes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_MemberInfo_DeclaringType\">\r\n    \r\n            <a id=\"System_Reflection_MemberInfo_DeclaringType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DeclaringType</div>        \r\n          </div>\r\n    \r\n            <p>Gets the class that declares this member.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract Type DeclaringType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>The <code>Type</code> object for the class that declares this member.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The DeclaringType property retrieves a reference to the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object for the type that declares this member. A member of a type is either declared by the type or inherited from a base type, so the <code>Type</code> object returned by the DeclaringType property might not be the same as the <code>Type</code> object used to obtain the current <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> object.  </p>\n<ul>\n<li><p>If the <code>Type</code> object from which this <code>MemberInfo</code> object was obtained did not declare this member, the DeclaringType property will represent one of its base types.  </p>\n</li>\n<li><p>If the <code>MemberInfo</code> object is a global member (that is, if it was obtained from the <a class=\"xref\" href=\"system.reflection.module#System_Reflection_Module_GetMethods_\" data-linktype=\"relative-path\">GetMethods</a> method, which returns global methods on a module), the returned DeclaringType will be <code>null</code>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines an interface, <code>IValue</code>, with a single member, <code>GetValue</code>. It also defines four classes: <code>A</code>, a base class that implements the <code>IValue</code> interface; <code>B</code>, which inherits from <code>A</code> and hides its implementation of <code>GetValue</code> from the base class implementation; <code>C</code>, which simply inherits from <code>A</code>; and <code>D</code>, which inherits from <code>A</code> and overrides its <code>GetValue</code> method.  The example then retrieves a <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> object for each member of the type (including members inherited from <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>) and displays the value of its DeclaringType property.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic MemberInfo.DeclaringType Example#2\">using System;\nusing System.Reflection;\n\ninterface IValue \n{\n   int GetValue() ;\n};\n \nclass A : IValue \n{\n   public virtual int GetValue() \n   { \n      return 0; \n   }\n};\n \nclass B : A \n{\n   public new int GetValue() \n   { \n      return 0; \n   }\n};\n \nclass C : A \n{ };\n\nclass D : A\n{\n   public override int GetValue()\n   {\n      return 0;\n   }\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Get members of IValue interface.\n      ShowMembersAndDeclaringTypes(typeof(IValue));\n      Console.WriteLine();\n      ShowMembersAndDeclaringTypes(typeof(A));\n      Console.WriteLine();\n      ShowMembersAndDeclaringTypes(typeof(B));\n      Console.WriteLine();\n      ShowMembersAndDeclaringTypes(typeof(C));\n      Console.WriteLine();\n      ShowMembersAndDeclaringTypes(typeof(D));\n      Console.WriteLine();\n   }\n\n   private static void ShowMembersAndDeclaringTypes(Type t)\n   {\n      MemberInfo[] members = t.GetMembers();\n      Console.WriteLine(&quot;{0} Members: &quot;, t.Name);\n      foreach (var member in members)\n         Console.WriteLine(&quot;   {0}, Declaring type: {1}&quot;, \n                           member.Name, member.DeclaringType.Name); \n   }\n}\n// The example displays the following output:\n//       IValue Members:\n//          GetValue, Declaring type: IValue\n//       \n//       A Members:\n//          GetValue, Declaring type: A\n//          ToString, Declaring type: Object\n//          Equals, Declaring type: Object\n//          GetHashCode, Declaring type: Object\n//          GetType, Declaring type: Object\n//          .ctor, Declaring type: A\n//       \n//       B Members:\n//          GetValue, Declaring type: B\n//          GetValue, Declaring type: A\n//          ToString, Declaring type: Object\n//          Equals, Declaring type: Object\n//          GetHashCode, Declaring type: Object\n//          GetType, Declaring type: Object\n//          .ctor, Declaring type: B\n//       \n//       C Members:\n//          GetValue, Declaring type: A\n//          ToString, Declaring type: Object\n//          Equals, Declaring type: Object\n//          GetHashCode, Declaring type: Object\n//          GetType, Declaring type: Object\n//          .ctor, Declaring type: C\n//       \n//       D Members:\n//          GetValue, Declaring type: D\n//          ToString, Declaring type: Object\n//          Equals, Declaring type: Object\n//          GetHashCode, Declaring type: Object\n//          GetType, Declaring type: Object\n//          .ctor, Declaring type: D\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic MemberInfo.DeclaringType Example#2\">Imports System.Reflection\n\nInterface IValue \n   Function GetValue() As Integer \nEnd Interface\n \nClass A : Implements IValue \n   Public Overridable Function GetValue() As Integer _\n                               Implements IValue.GetValue \n      Return 0 \n   End Function\nEnd Class\n \nClass B : Inherits A \n   Public Shadows Function GetValue() As Integer \n      Return 0 \n   End Function\nEnd Class\n \nClass C : Inherits A \nEnd Class\n\nClass D : Inherits A\n   Public Overrides Function GetValue() As Integer\n      Return 0\n   End Function\nEnd Class\n\nPublic Module Example\n   Public Sub Main()\n      &#39; Get members of IValue interface.\n      ShowMembersAndDeclaringTypes(GetType(IValue))\n      Console.WriteLine()\n      ShowMembersAndDeclaringTypes(GetType(A))\n      Console.WriteLine()\n      ShowMembersAndDeclaringTypes(GetType(B))\n      Console.WriteLine()\n      ShowMembersAndDeclaringTypes(GetType(C))\n      Console.WriteLine()\n      ShowMembersAndDeclaringTypes(GetType(D))\n      Console.WriteLine()\n   End Sub\n\n   Private Sub ShowMembersAndDeclaringTypes(t As Type)\n      Dim members() As MemberInfo = t.GetMembers()\n      Console.WriteLine(&quot;{0} Members: &quot;, t.Name)\n      For Each member In members\n         Console.WriteLine(&quot;   {0}, Declaring type: {1}&quot;, \n                           member.Name, member.DeclaringType.Name)\n      Next                      \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       IValue Members:\n&#39;          GetValue, Declaring type: IValue\n&#39;       \n&#39;       A Members:\n&#39;          GetValue, Declaring type: A\n&#39;          ToString, Declaring type: Object\n&#39;          Equals, Declaring type: Object\n&#39;          GetHashCode, Declaring type: Object\n&#39;          GetType, Declaring type: Object\n&#39;          .ctor, Declaring type: A\n&#39;       \n&#39;       B Members:\n&#39;          GetValue, Declaring type: B\n&#39;          GetValue, Declaring type: A\n&#39;          ToString, Declaring type: Object\n&#39;          Equals, Declaring type: Object\n&#39;          GetHashCode, Declaring type: Object\n&#39;          GetType, Declaring type: Object\n&#39;          .ctor, Declaring type: B\n&#39;       \n&#39;       C Members:\n&#39;          GetValue, Declaring type: A\n&#39;          ToString, Declaring type: Object\n&#39;          Equals, Declaring type: Object\n&#39;          GetHashCode, Declaring type: Object\n&#39;          GetType, Declaring type: Object\n&#39;          .ctor, Declaring type: C\n&#39;       \n&#39;       D Members:\n&#39;          GetValue, Declaring type: D\n&#39;          ToString, Declaring type: Object\n&#39;          Equals, Declaring type: Object\n&#39;          GetHashCode, Declaring type: Object\n&#39;          GetType, Declaring type: Object\n&#39;          .ctor, Declaring type: D\n</code></pre><p> Note that the declaring type of <code>A.GetValue</code> is <code>A</code>, that <code>B</code> includes two <code>GetValue</code> methods, one declared by <code>A</code> and one by <code>B</code>, and that the declaring type of <code>D.GetValue</code> is <code>D</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> <code>DeclaringType</code> returns only the member names and the names of their declaring types. To return the member names with their prototypes, call <code>MemberInfo.ToString</code>.</p>\n</div>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_MemberInfo_MemberType\">\r\n    \r\n            <a id=\"System_Reflection_MemberInfo_MemberType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MemberType</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, gets a <a class=\"xref\" href=\"system.reflection.membertypes\" data-linktype=\"relative-path\">MemberTypes</a> value indicating the type of the member â€” method, constructor, event, and so on.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract System.Reflection.MemberTypes MemberType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.membertypes\" data-linktype=\"relative-path\">MemberTypes</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.membertypes\" data-linktype=\"relative-path\">MemberTypes</a> value indicating the type of member.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property is overridden in derived classes, and the override returns the appropriate member type. Therefore, when you examine a set of <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> objects â€” for example, the array returned by <a class=\"xref\" href=\"system.type#System_Type_GetMembers_\" data-linktype=\"relative-path\">GetMembers</a> â€” the MemberType property can be used to determine the member type of any given member.  </p>\n<p> To get the <code>MemberType</code> property, get the class <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>. From the <code>Type</code>, get the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> array. From the <code>MethodInfo</code> array, get the <code>MemberTypes</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the member name and type of a specified class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic MemberInfo.MemberType Example#1\">using namespace System;\nusing namespace System::Reflection;\nint main()\n{\n   Console::WriteLine( &quot;<br>Reflection.MemberInfo&quot; );\n   \n   // Get the Type and MemberInfo.\n   Type^ MyType = Type::GetType( &quot;System.Reflection.PropertyInfo&quot; );\n   array&lt;MemberInfo^&gt;^Mymemberinfoarray = MyType-&gt;GetMembers();\n   \n   // Get the MemberType method and display the elements.\n   Console::Write( &quot;<br>There are {0} members in &quot;, Mymemberinfoarray-&gt;GetLength( 0 ) );\n   Console::Write( &quot;{0}.&quot;, MyType-&gt;FullName );\n   for ( int counter = 0; counter &lt; Mymemberinfoarray-&gt;Length; counter++ )\n   {\n      Console::Write( &quot;<br>{0}. {1} Member type - {2}&quot;, counter, Mymemberinfoarray[ counter ]-&gt;Name, Mymemberinfoarray[ counter ]-&gt;MemberType );\n\n   }\n   return 0;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic MemberInfo.MemberType Example#1\">using System;\nusing System.Reflection;\n \nclass Mymemberinfo\n{\n    public static int Main()\n    {\n        Console.WriteLine (&quot;<br>Reflection.MemberInfo&quot;);\n       \n        // Get the Type and MemberInfo.\n        Type MyType = Type.GetType(&quot;System.Reflection.PropertyInfo&quot;);\n        MemberInfo[] Mymemberinfoarray = MyType.GetMembers();\n  \n        // Get the MemberType method and display the elements.\n        Console.Write(&quot;<br>There are {0} members in &quot;, Mymemberinfoarray.GetLength(0));\n        Console.Write(&quot;{0}.&quot;, MyType.FullName);\n  \n        for (int counter = 0; counter &lt; Mymemberinfoarray.Length; counter++)\n        {\n            Console.Write(&quot;<br>&quot; + counter + &quot;. &quot; \n                + Mymemberinfoarray[counter].Name\n                + &quot; Member type - &quot; +\n                Mymemberinfoarray[counter].MemberType.ToString());\n        }\n        return 0;\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic MemberInfo.MemberType Example#1\">Imports System\nImports System.Reflection\nImports Microsoft.VisualBasic\n\nClass Mymemberinfo\n\n    Public Shared Function Main() As Integer\n        Console.WriteLine(ControlChars.Cr + &quot;Reflection.MemberInfo&quot;)\n\n        &#39; Get the Type and MemberInfo.\n        Dim MyType As Type = Type.GetType(&quot;System.Reflection.PropertyInfo&quot;)\n        Dim Mymemberinfoarray As MemberInfo() = MyType.GetMembers()\n\n        &#39; Get the MemberType method and display the elements.\n        Console.Write(ControlChars.Cr + &quot;There are {0} members in &quot;, _\n           Mymemberinfoarray.GetLength(0))\n        Console.Write(&quot;{0}.&quot;, MyType.FullName)\n\n        Dim counter As Integer\n        For counter = 0 To Mymemberinfoarray.Length - 1\n            Console.Write(ControlChars.CrLf + counter.ToString() + &quot;. &quot; _\n               + Mymemberinfoarray(counter).Name _\n               + &quot; Member type - &quot; _\n               + Mymemberinfoarray(counter).MemberType.ToString())\n        Next counter\n        Return 0\n    End Function\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_MemberInfo_MetadataToken\">\r\n    \r\n            <a id=\"System_Reflection_MemberInfo_MetadataToken_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MetadataToken</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that identifies a metadata element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int MetadataToken { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A value which, in combination with <span class=\"xref\">stem.Reflection.MemberInfo.Module*</span>, uniquely identifies a metadata element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The current <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> represents an array method, such as <code>Address</code>, on an array type whose element type is a dynamic type that has not been completed. To get a metadata token in this case, pass the <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> object to the <span class=\"xref\">stem.Reflection.Emit.ModuleBuilder.GetMethodToken*</span> method; or use the <span class=\"xref\">stem.Reflection.Emit.ModuleBuilder.GetArrayMethodToken*</span> method to get the token directly, instead of using the <span class=\"xref\">stem.Reflection.Emit.ModuleBuilder.GetArrayMethod*</span> method to get a <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> first.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The tokens obtained using this property can be passed to the unmanaged reflection API. For more information, please see <a href=\"http://msdn.microsoft.com/en-us/0c5bb9de-0cf6-438d-ba47-134e6c775fb8\" data-linktype=\"external\">Unmanaged Reflection API</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Using the unmanaged reflection API requires familiarity with the Common Language Infrastructure (CLI) documentation, especially &quot;Partition II: Metadata Definition and Semantics&quot; and &quot;Partition III: CIL Instruction Set&quot;. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the Ecma International Web site.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_MemberInfo_Module\">\r\n    \r\n            <a id=\"System_Reflection_MemberInfo_Module_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Module</div>        \r\n          </div>\r\n    \r\n            <p>Gets the module in which the type that declares the member represented by the current <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> is defined.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Reflection.Module Module { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a> in which the type that declares the member represented by the current <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> is defined.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>This method is not implemented.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property is provided as a convenience. It is equivalent to using the <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_DeclaringType_\" data-linktype=\"relative-path\">DeclaringType</a> property to get the type in which the method is declared, and then calling the <a class=\"xref\" href=\"system.type#System_Type_Module_\" data-linktype=\"relative-path\">Module</a> property of the resulting <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example declares a class that inherits <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> and overrides <a class=\"xref\" href=\"system.object#System_Object_ToString_\" data-linktype=\"relative-path\">ToString</a>. The example obtains <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> objects for the class&#39;s <code>ToString</code> method and for the inherited <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a> method, and displays the names of the modules in which the two methods are declared.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Reflection.MemberInfo.Module#1\">Imports System\nImports System.Reflection\n\nPublic Class Test\n    Public Overrides Function ToString() As String\n        Return &quot;An instance of class Test!&quot;\n    End Function\nEnd Class\n\nPublic Class Example\n    Public Shared Sub Main()\n        Dim t As New Test()\n        Dim mi As MethodInfo = t.GetType().GetMethod(&quot;ToString&quot;)\n        Console.WriteLine(mi.Name &amp; &quot; is defined in &quot; &amp; mi.Module.Name)\n\n        mi = t.GetType().GetMethod(&quot;GetHashCode&quot;)\n        Console.WriteLine(mi.Name &amp; &quot; is defined in &quot; &amp; mi.Module.Name)\n    End Sub\nEnd Class\n\n&#39; This example produces code similar to the following:\n&#39;\n&#39;ToString is defined in source.exe\n&#39;GetHashCode is defined in mscorlib.dll\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Reflection.MemberInfo.Module#1\">using System;\nusing System.Reflection;\n\npublic class Test\n{\n    public override string ToString()\n    {\n        return &quot;An instance of class Test!&quot;;\n    }\n}\n\npublic class Example\n{\n    public static void Main()\n    {\n        Test t = new Test();\n        MethodInfo mi = t.GetType().GetMethod(&quot;ToString&quot;);\n        Console.WriteLine(&quot;{0} is defined in {1}&quot;, mi.Name, mi.Module.Name);\n\n        mi = t.GetType().GetMethod(&quot;GetHashCode&quot;);\n        Console.WriteLine(&quot;{0} is defined in {1}&quot;, mi.Name, mi.Module.Name);\n    }\n}\n\n/* This example produces code similar to the following:\n\n  ToString is defined in source.exe\n  GetHashCode is defined in mscorlib.dll\n */\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Reflection.MemberInfo.Module#1\">using namespace System;\nusing namespace System::Reflection;\n\npublic ref class Test\n{\npublic:\n    virtual String^ ToString() override\n    {\n        return &quot;An instance of class Test!&quot;;\n    }\n};\n\nint main()\n{\n    Test^ target = gcnew Test();\n    MethodInfo^ toStringInfo = target-&gt;GetType()-&gt;GetMethod(&quot;ToString&quot;);\n    Console::WriteLine(&quot;{0} is defined in {1}&quot;, toStringInfo-&gt;Name,\n        toStringInfo-&gt;Module-&gt;Name);\n\n    MethodInfo^ getHashCodeInfo = target-&gt;GetType()-&gt;GetMethod(&quot;GetHashCode&quot;);\n    Console::WriteLine(&quot;{0} is defined in {1}&quot;, getHashCodeInfo-&gt;Name,\n        getHashCodeInfo-&gt;Module-&gt;Name);\n}\n\n/*\n* This example produces the following console output:\n*\n* ToString is defined in source.exe\n* GetHashCode is defined in mscorlib.dll\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_MemberInfo_Name\">\r\n    \r\n            <a id=\"System_Reflection_MemberInfo_Name_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Name</div>        \r\n          </div>\r\n    \r\n            <p>Gets the name of the current member.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract string Name { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> containing the name of this member.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Only the simple name of the member is returned, not the fully qualified name.  </p>\n<p> To get the Name property, get the class <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>. From the <code>Type</code>, get the <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> array. From a <code>MemberInfo</code> element of the array, obtain the <code>Name</code> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example lists the <code>Name</code> and <code>DeclaringType</code> property of each member of the specified class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic MemberInfo.Name Example#1\">using namespace System;\nusing namespace System::Reflection;\n\nvoid main()\n{\n   // Get the Type and MemberInfo.\n   Type^ t = Type::GetType(&quot;System.Empty&quot;);\n   array&lt;MemberInfo^&gt;^ memberArray = t-&gt;GetMembers();\n   \n   // Get and display the type that declares the member.\n   Console::WriteLine(&quot;There are {0} members in {1}&quot;, \n                      memberArray-&gt;Length, t-&gt;FullName);\n   for each (MemberInfo^ member in memberArray) {\n      Console::WriteLine(&quot;Member {0} declared by {1}&quot;, \n                        member-&gt;Name, member-&gt;DeclaringType);\n   }\n}\n// The example displays the following output:\n//       There are 6 members in System.Empty\n//       Member ToString declared by System.Empty\n//       Member GetObjectData declared by System.Empty\n//       Member Equals declared by System.Object\n//       Member GetHashCode declared by System.Object\n//       Member GetType declared by System.Object\n//       Member Value declared by System.Empty\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic MemberInfo.Name Example#1\">using System;\nusing System.Reflection;\n \nclass Example\n{\n    public static void Main()\n    {\n        // Get the Type and MemberInfo.\n        Type t = Type.GetType(&quot;System.Empty&quot;);\n        MemberInfo[] memberArray = t.GetMembers();\n  \n        // Get and display the type that declares the member.\n        Console.WriteLine(&quot;There are {0} members in {1}&quot;,\n                          memberArray.Length, t.FullName);\n  \n        foreach (var member in memberArray) {\n            Console.WriteLine(&quot;Member {0} declared by {1}&quot;, \n                              member.Name, member.DeclaringType);\n        }\n    }\n}\n// The example displays the following output:\n//       There are 6 members in System.Empty\n//       Member ToString declared by System.Empty\n//       Member GetObjectData declared by System.Empty\n//       Member Equals declared by System.Object\n//       Member GetHashCode declared by System.Object\n//       Member GetType declared by System.Object\n//       Member Value declared by System.Empty\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic MemberInfo.Name Example#1\">Imports System.Reflection\n\nClass Example\n    Public Shared Sub Main()\n        &#39; Get the Type and MemberInfo.\n        Dim t As Type = Type.GetType(&quot;System.Empty&quot;)\n        Dim memberArray As MemberInfo() = t.GetMembers()\n\n        &#39; Get and display the type that declares the member.\n        Console.WriteLine(&quot;There are {0} members in {1}&quot;, \n                          memberArray.Length, t.FullName)\n\n        For Each member In memberArray\n            Console.WriteLine(&quot;Member {0} declared by {1}&quot;, \n                              member.Name, member.DeclaringType)\n        Next \n    End Sub\nEnd Class\n&#39; The example displays the following output:\n&#39;       There are 6 members in System.Empty\n&#39;       Member ToString declared by System.Empty\n&#39;       Member GetObjectData declared by System.Empty\n&#39;       Member Equals declared by System.Object\n&#39;       Member GetHashCode declared by System.Object\n&#39;       Member GetType declared by System.Object\n&#39;       Member Value declared by System.Empty\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_MemberInfo_ReflectedType\">\r\n    \r\n            <a id=\"System_Reflection_MemberInfo_ReflectedType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReflectedType</div>        \r\n          </div>\r\n    \r\n            <p>Gets the class object that was used to obtain this instance of <code>MemberInfo</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract Type ReflectedType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>The <code>Type</code> object through which this <code>MemberInfo</code> object was obtained.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>ReflectedType</code> property retrieves the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that was used to obtain this instance of <code>MemberInfo</code>. This may differ from the value of the <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_DeclaringType_\" data-linktype=\"relative-path\">DeclaringType</a> property if this <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> object represents a member that is inherited from a base class.  </p>\n<p> If the <code>MemberInfo</code> object is a global member (that is, if it was obtained from the <a class=\"xref\" href=\"system.reflection.module#System_Reflection_Module_GetMethods_\" data-linktype=\"relative-path\">GetMethods</a> method, which returns global methods on a module), the returned <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_DeclaringType_\" data-linktype=\"relative-path\">DeclaringType</a> will be <code>null</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how the ReflectedType changes when the member <a class=\"xref\" href=\"system.object#System_Object_ToString_\" data-linktype=\"relative-path\">ToString</a> is viewed from a <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> obtained from type <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> and from a <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> obtained from the <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> class itself, which inherits <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> but does not override <a class=\"xref\" href=\"system.object#System_Object_ToString_\" data-linktype=\"relative-path\">ToString</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic MemberInfo.ReflectedType Example#1\">using namespace System;\nusing namespace System::Reflection;\n\nint main()\n{\n    MemberInfo^ m1 = Object::typeid-&gt;GetMethod(&quot;ToString&quot;);\n    MemberInfo^ m2 = MemberInfo::typeid-&gt;GetMethod(&quot;ToString&quot;);\n\n    Console::WriteLine(&quot;m1.DeclaringType: {0}&quot;, m1-&gt;DeclaringType);\n    Console::WriteLine(&quot;m1.ReflectedType: {0}&quot;, m1-&gt;ReflectedType);\n    Console::WriteLine();\n    Console::WriteLine(&quot;m2.DeclaringType: {0}&quot;, m2-&gt;DeclaringType);\n    Console::WriteLine(&quot;m2.ReflectedType: {0}&quot;, m2-&gt;ReflectedType);\n\n    //Console::ReadLine();\n}\n\n/* This code example produces the following output:\n\nm1.DeclaringType: System.Object\nm1.ReflectedType: System.Object\n\nm2.DeclaringType: System.Object\nm2.ReflectedType: System.Reflection.MemberInfo\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic MemberInfo.ReflectedType Example#1\">using System;\nusing System.Reflection;\n\npublic class Example\n{\n    static void Main()\n    {\n        MemberInfo m1 = typeof(Object).GetMethod(&quot;ToString&quot;);\n        MemberInfo m2 = typeof(MemberInfo).GetMethod(&quot;ToString&quot;);\n\n        Console.WriteLine(&quot;m1.DeclaringType: {0}&quot;, m1.DeclaringType);\n        Console.WriteLine(&quot;m1.ReflectedType: {0}&quot;, m1.ReflectedType);\n        Console.WriteLine();\n        Console.WriteLine(&quot;m2.DeclaringType: {0}&quot;, m2.DeclaringType);\n        Console.WriteLine(&quot;m2.ReflectedType: {0}&quot;, m2.ReflectedType);\n\n        //Console.ReadLine();\n    }\n}\n\n/* This code example produces the following output:\n\nm1.DeclaringType: System.Object\nm1.ReflectedType: System.Object\n\nm2.DeclaringType: System.Object\nm2.ReflectedType: System.Reflection.MemberInfo\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic MemberInfo.ReflectedType Example#1\">Imports System\nImports System.Reflection\n\nModule Example\n\n    Sub Main()\n\n        Dim m1 As MemberInfo = GetType(Object).GetMethod(&quot;ToString&quot;)\n        Dim m2 As MemberInfo = GetType(MemberInfo).GetMethod(&quot;ToString&quot;)\n\n        Console.WriteLine(&quot;m1.DeclaringType: {0}&quot;, m1.DeclaringType)\n        Console.WriteLine(&quot;m1.ReflectedType: {0}&quot;, m1.ReflectedType)\n        Console.WriteLine()\n        Console.WriteLine(&quot;m2.DeclaringType: {0}&quot;, m2.DeclaringType)\n        Console.WriteLine(&quot;m2.ReflectedType: {0}&quot;, m2.ReflectedType)\n\n        &#39;Console.ReadLine()\n    End Sub\nEnd Module\n\n&#39; This code example produces the following output:\n&#39;\n&#39; m1.DeclaringType: System.Object\n&#39; m1.ReflectedType: System.Object\n&#39;\n&#39; m2.DeclaringType: System.Object\n&#39; m2.ReflectedType: System.Reflection.MemberInfo\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_MemberInfo_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_Reflection_MemberInfo_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value that indicates whether this instance is equal to a specified object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to compare with this instance, or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>obj</code> equals the type and value of this instance; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_MemberInfo_GetCustomAttributes_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_MemberInfo_GetCustomAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttributes(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, returns an array of all custom attributes applied to this member.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract object[] GetCustomAttributes (bool inherit);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>inherit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to search this member&#39;s inheritance chain to find the attributes; otherwise, <code>false</code>. This parameter is ignored for properties and events; see Remarks.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </div>\r\n                  <p>An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>This member belongs to a type that is loaded into the reflection-only context. See <a href=\"../Topic/How%20to:%20Load%20Assemblies%20into%20the%20Reflection-Only%20Context.md\" data-linktype=\"relative-path\">How to: Load Assemblies into the Reflection-Only Context</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a></div>\r\n                  </div>\r\n                  <p>A custom attribute type could not be loaded.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method ignores the <code>inherit</code> parameter for properties and events. To search the inheritance chain for attributes on properties and events, use the appropriate overloads of the <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework version 2.0, this method returns security attributes on methods, constructors, and types if they are stored in the new metadata format. Assemblies compiled with version 2.0 use this format. Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format. See <a href=\"http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5\" data-linktype=\"external\">Emitting Declarative Security Attributes</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a custom attribute and associates the attribute with <code>MyClass.MyMethod</code>, retrieves the attribute at run time, and displays the result.  </p>\n<pre><code class=\"lang-cs\" name=\"MemberInfo_GetCustomAttributes1#1\">using System;\nusing System.Reflection;\n\n// Define a custom attribute with one named parameter.\n[AttributeUsage(AttributeTargets.All)]\npublic class MyAttribute : Attribute\n{\n    private string myName;\n    public MyAttribute(string name)\n    {\n        myName = name;\n    }\n    public string Name\n    {\n        get\n        {\n            return myName;\n        }\n    }\n}\n\n// Define a class that has the custom attribute associated with one of its members.\npublic class MyClass1\n{\n    [MyAttribute(&quot;This is an example attribute.&quot;)]\n    public void MyMethod(int i)\n    {\n        return;\n    }\n}\n\npublic class MemberInfo_GetCustomAttributes\n{\n    public static void Main()\n    {\n        try\n        {\n            // Get the type of MyClass1.\n            Type myType = typeof(MyClass1);\n            // Get the members associated with MyClass1.\n            MemberInfo[] myMembers = myType.GetMembers();\n\n            // Display the attributes for each of the members of MyClass1.\n            for(int i = 0; i &lt; myMembers.Length; i++)\n            {\n                Object[] myAttributes = myMembers[i].GetCustomAttributes(true);\n                if(myAttributes.Length &gt; 0)\n                {\n                    Console.WriteLine(&quot;<br>The attributes for the member {0} are: <br>&quot;, myMembers[i]);\n                    for(int j = 0; j &lt; myAttributes.Length; j++)\n                        Console.WriteLine(&quot;The type of the attribute is {0}.&quot;, myAttributes[j]);\n                }\n            }\n        }\n        catch(Exception e)\n        {\n            Console.WriteLine(&quot;An exception occurred: {0}&quot;, e.Message);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"MemberInfo_GetCustomAttributes1#1\">using namespace System;\nusing namespace System::Reflection;\n\n// Define a custom attribute with one named parameter.\n\n[AttributeUsage(AttributeTargets::All)]\npublic ref class MyAttribute: public Attribute\n{\nprivate:\n   String^ myName;\n\npublic:\n   MyAttribute( String^ name )\n   {\n      myName = name;\n   }\n\n   property String^ Name \n   {\n      String^ get()\n      {\n         return myName;\n      }\n   }\n};\n\n// Define a class that has the custom attribute associated with one of its members.\npublic ref class MyClass1\n{\npublic:\n\n   [MyAttribute(&quot;This is an example attribute.&quot;)]\n   void MyMethod( int i )\n   {\n      return;\n   }\n};\n\nint main()\n{\n   try\n   {\n      // Get the type of MyClass1.\n      Type^ myType = MyClass1::typeid;\n\n      // Get the members associated with MyClass1.\n      array&lt;MemberInfo^&gt;^myMembers = myType-&gt;GetMembers();\n\n      // Display the attributes for each of the members of MyClass1.\n      for ( int i = 0; i &lt; myMembers-&gt;Length; i++ )\n      {\n         array&lt;Object^&gt;^myAttributes = myMembers[ i ]-&gt;GetCustomAttributes( true );\n         if ( myAttributes-&gt;Length &gt; 0 )\n         {\n            Console::WriteLine( &quot;<br>The attributes for the member {0} are: <br>&quot;, myMembers[ i ] );\n            for ( int j = 0; j &lt; myAttributes-&gt;Length; j++ )\n               Console::WriteLine( &quot;The type of the attribute is {0}.&quot;, myAttributes[ j ] );\n         }\n      }\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;An exception occurred: {0}&quot;, e-&gt;Message );\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"MemberInfo_GetCustomAttributes1#1\">Imports System\nImports System.Reflection\nImports Microsoft.VisualBasic\n\n&#39; Define a custom attribute with one named parameter.\n&lt;AttributeUsage(AttributeTargets.All)&gt; Public Class MyAttribute\n    Inherits Attribute\n    Private myName As String\n\n    Public Sub New(ByVal name As String)\n        myName = name\n    End Sub &#39;New\n\n    Public ReadOnly Property Name() As String\n        Get\n            Return myName\n        End Get\n    End Property\nEnd Class &#39;MyAttribute\n\n&#39; Define a class that has the custom attribute associated with one of its members.\nPublic Class MyClass1\n\n    &lt;MyAttribute(&quot;This is an example attribute.&quot;)&gt; Public Sub MyMethod(ByVal i As Integer)\n        Return\n    End Sub &#39;MyMethod\nEnd Class &#39;MyClass1\n\n\nPublic Class MemberInfo_GetCustomAttributes\n\n    Public Shared Sub Main()\n        Try\n            &#39; Get the type of MyClass1.\n            Dim myType As Type = GetType(MyClass1)\n            &#39; Get the members associated with MyClass1.\n            Dim myMembers As MemberInfo() = myType.GetMembers()\n\n            &#39; Display the attributes for each of the members of MyClass1.\n            Dim i As Integer\n            For i = 0 To myMembers.Length - 1\n                Dim myAttributes As [Object]() = myMembers(i).GetCustomAttributes(False)\n                If myAttributes.Length &gt; 0 Then\n                    Console.WriteLine(&quot;The attributes for the member {0} are: &quot;, myMembers(i))\n                    Dim j As Integer\n                    For j = 0 To myAttributes.Length - 1\n                        Console.WriteLine(&quot;The type of the attribute is: {0}&quot;, myAttributes(j))\n                    Next j\n                End If\n            Next i\n        Catch e As Exception\n            Console.WriteLine(&quot;An exception occurred: {0}.&quot;, e.Message)\n        End Try\n    End Sub &#39;Main\nEnd Class &#39;MemberInfo_GetCustomAttributes\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_MemberInfo_GetCustomAttributes_System_Type_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_MemberInfo_GetCustomAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttributes(Type,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, returns an array of custom attributes applied to this member and identified by <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract object[] GetCustomAttributes (Type attributeType, bool inherit);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of attribute to search for. Only attributes that are assignable to this type are returned.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inherit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to search this member&#39;s inheritance chain to find the attributes; otherwise, <code>false</code>. This parameter is ignored for properties and events; see Remarks.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </div>\r\n                  <p>An array of custom attributes applied to this member, or an array with zero elements if no attributes assignable to <code>attributeType</code> have been applied.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a></div>\r\n                  </div>\r\n                  <p>A custom attribute type cannot be loaded.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>If <code>attributeType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>This member belongs to a type that is loaded into the reflection-only context. See <a href=\"../Topic/How%20to:%20Load%20Assemblies%20into%20the%20Reflection-Only%20Context.md\" data-linktype=\"relative-path\">How to: Load Assemblies into the Reflection-Only Context</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method ignores the <code>inherit</code> parameter for properties and events. To search the inheritance chain for attributes on properties and events, use the appropriate overloads of the <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework version 2.0, this method returns security attributes on methods, constructors, and types if the attributes are stored in the new metadata format. Assemblies compiled with version 2.0 use this format. Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format. See <a href=\"http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5\" data-linktype=\"external\">Emitting Declarative Security Attributes</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a class named <code>BaseClass</code> that has two non-inherited members: a thread static field named <code>total</code> and a non-CLS-compliant method named <code>MethodA</code>.  A class named <code>DerivedClass</code> inherits from <code>BaseClass</code> and overrides its <code>MethodA</code> method. Note that no attributes are applied to the members of <code>DerivedClass</code>. The example iterates the members of <code>DerivedClass</code> to determine whether the <a class=\"xref\" href=\"system.clscompliantattribute\" data-linktype=\"relative-path\">CLSCompliantAttribute</a> or <a class=\"xref\" href=\"system.threadstaticattribute\" data-linktype=\"relative-path\">ThreadStaticAttribute</a> attribute as been applied to them. Because <code>inherit</code> is <code>true</code>, the method searches the inheritance hierarchy of <code>DerivedClass</code> for the specified attribute. As the output from the example shows, the <code>total</code> field is decorated with the <a class=\"xref\" href=\"system.threadstaticattribute\" data-linktype=\"relative-path\">ThreadStaticAttribute</a> attribute, and the <code>MethodA</code> method is decorated with the <a class=\"xref\" href=\"system.clscompliantattribute\" data-linktype=\"relative-path\">CLSCompliantAttribute</a> attribute.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Reflection.MemberInfo.GetCustomAttributes#1\">Public Class BaseClass\n   &lt;ThreadStatic&gt; Public total As Integer\n   \n   &lt;CLSCompliant(False)&gt; Public Overridable Function MethodA() As UInt32\n      Return CUInt(100)\n   End Function\nEnd Class\n\nPublic Class DerivedClass : Inherits BaseClass\n   Public Overrides Function MethodA() As UInt32\n      total += 1\n      Return 200\n   End Function\nEnd Class\n\nModule Example\n   Public Sub Main()\n      Dim t As Type = GetType(DerivedClass)\n      Console.WriteLine(&quot;Members of {0}:&quot;, t.FullName)\n      For Each m In t.GetMembers()\n         Dim hasAttribute As Boolean = False\n         Console.Write(&quot;   {0}: &quot;, m.Name)\n         If m.GetCustomAttributes(GetType(CLSCompliantAttribute), True).Length &gt; 0 Then\n            Console.Write(&quot;CLSCompliant&quot;)\n            hasAttribute = True\n         End If\n         If m.GetCustomAttributes(GetType(ThreadStaticAttribute), True).Length &gt; 0 Then\n            Console.Write(&quot;ThreadStatic&quot;)\n            hasAttribute = True\n         End If\n         If Not hasAttribute Then\n            Console.Write(&quot;No attributes&quot;)\n         End If\n         Console.WriteLine()\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Members of DerivedClass:\n&#39;          MethodA: CLSCompliant\n&#39;          ToString: No attributes\n&#39;          Equals: No attributes\n&#39;          GetHashCode: No attributes\n&#39;          GetType: No attributes\n&#39;          .ctor: No attributes\n&#39;          total: ThreadStatic\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Reflection.MemberInfo.GetCustomAttributes#1\">using System;\n\npublic class BaseClass\n{\n   [ThreadStatic] public int total;\n   \n   [CLSCompliant(false)] public virtual uint MethodA()\n   {\n      return (uint) 100;\n   }\n}\n\npublic class DerivedClass : BaseClass\n{\n   public override uint MethodA()\n   {\n      total++;\n      return 200;\n   }\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      Type t = typeof(DerivedClass);\n      Console.WriteLine(&quot;Members of {0}:&quot;, t.FullName);\n      foreach (var m in t.GetMembers())\n      {\n         bool hasAttribute = false;\n         Console.Write(&quot;   {0}: &quot;, m.Name);\n         if (m.GetCustomAttributes(typeof(CLSCompliantAttribute), true).Length &gt; 0) {\n            Console.Write(&quot;CLSCompliant&quot;);\n            hasAttribute = true;\n         }\n         if (m.GetCustomAttributes(typeof(ThreadStaticAttribute), true).Length &gt; 0) {\n            Console.Write(&quot;ThreadStatic&quot;);\n            hasAttribute = true;\n         }\n         if (! hasAttribute)\n            Console.Write(&quot;No attributes&quot;);\n\n         Console.WriteLine();\n      }\n   }\n}\n// The example displays the following output:\n//       Members of DerivedClass:\n//          MethodA: CLSCompliant\n//          ToString: No attributes\n//          Equals: No attributes\n//          GetHashCode: No attributes\n//          typeof: No attributes\n//          .ctor: No attributes\n//          total: ThreadStatic\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_MemberInfo_GetCustomAttributesData\">\r\n    \r\n            <a id=\"System_Reflection_MemberInfo_GetCustomAttributesData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttributesData()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a list of <a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a> objects representing data about the attributes that have been applied to the target member.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt; GetCustomAttributesData ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList</a>&lt;<a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a>&gt;</div>\r\n                  </div>\r\n                  <p>A generic list of <a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a> objects representing data about the attributes that have been applied to the target member.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to examine the custom attributes of code in the reflection-only context, in cases where the custom attributes themselves are defined in code that is loaded into the reflection-only context. Methods like <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a> and <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a> cannot be used in such cases, because they create instances of the attributes. Code in the reflection-only context cannot be executed. For more information and for example code, see the <a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a> class.  </p>\n<p> This method gets custom attribute data for types, nested types, and type members, because the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> class and the classes in the <a class=\"xref\" href=\"system.reflection\" data-linktype=\"relative-path\">System.Reflection</a> namespace that represent type members all derive from <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_MemberInfo_GetHashCode\">\r\n    \r\n            <a id=\"System_Reflection_MemberInfo_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the hash code for this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer hash code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_MemberInfo_IsDefined_System_Type_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_MemberInfo_IsDefined_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsDefined(Type,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, indicates whether one or more attributes of the specified type or of its derived types is applied to this member.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract bool IsDefined (Type attributeType, bool inherit);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of custom attribute to search for. The search includes derived types.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inherit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to search this member&#39;s inheritance chain to find the attributes; otherwise, <code>false</code>. This parameter is ignored for properties and events; see Remarks.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if one or more instances of <code>attributeType</code> or any of its derived types is applied to this member; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method ignores the <code>inherit</code> parameter for properties and events. To search the inheritance chain for attributes on properties and events, use the appropriate overloads of the <a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_\" data-linktype=\"relative-path\">IsDefined</a> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework version 2.0, this method returns <code>true</code> if a type, method, or constructor has security attributes stored in the new metadata format. Assemblies compiled with version 2.0 use this format. Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format. See <a href=\"http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5\" data-linktype=\"external\">Emitting Declarative Security Attributes</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines whether the specified attribute is applied to the specified member.  </p>\n<pre><code class=\"lang-cs\" name=\"MemberInfo_GetCustomAttribute_IsDefined#1\">\nusing System;\nusing System.Reflection;\n\n// Define a custom attribute with one named parameter.\n[AttributeUsage(AttributeTargets.All)]\npublic class MyAttribute : Attribute\n{\n    private string myName;\n    public MyAttribute(string name)\n    {\n        myName = name;\n    }\n    public string Name\n    {\n        get\n        {\n            return myName;\n        }\n    }\n}\n\n// Define a class that has the custom attribute associated with one of its members.\npublic class MyClass1\n{\n    [MyAttribute(&quot;This is an example attribute.&quot;)]\n    public void MyMethod(int i)\n    {\n        return;\n    }\n}\n\npublic class MemberInfo_GetCustomAttributes_IsDefined\n{\n    public static void Main()\n    {\n        try\n        {\n            // Get the type of MyClass1.\n            Type myType = typeof(MyClass1);\n            // Get the members associated with MyClass1.\n            MemberInfo[] myMembers = myType.GetMembers();\n\n            // Display the attributes for each of the members of MyClass1.\n            for(int i = 0; i &lt; myMembers.Length; i++)\n            {\n                // Display the attribute if it is of type MyAttribute.\n                if(myMembers[i].IsDefined(typeof(MyAttribute), false))\n                {\n                    Object[] myAttributes = myMembers[i].GetCustomAttributes(typeof(MyAttribute), false);\n                    Console.WriteLine(&quot;<br>The attributes of type MyAttribute for the member {0} are: <br>&quot;,\n                        myMembers[i]);\n                    for(int j = 0; j &lt; myAttributes.Length; j++)\n                        // Display the value associated with the attribute.\n                        Console.WriteLine(&quot;The value of the attribute is : \\&quot;{0}\\&quot;&quot;,\n                            ((MyAttribute)myAttributes[j]).Name);\n                }\n            }\n        }\n        catch(Exception e)\n        {\n            Console.WriteLine(&quot;An exception occurred: {0}&quot;, e.Message);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"MemberInfo_GetCustomAttribute_IsDefined#1\">Imports System\nImports System.Reflection\nImports Microsoft.VisualBasic\n\n&#39; Define a custom attribute with one named parameter.\n&lt;AttributeUsage(AttributeTargets.All)&gt; Public Class MyAttribute\n    Inherits Attribute\n    Private myName As String\n\n    Public Sub New(ByVal name As String)\n        myName = name\n    End Sub &#39;New\n\n    Public ReadOnly Property Name() As String\n        Get\n            Return myName\n        End Get\n    End Property\nEnd Class &#39;MyAttribute\n\n&#39; Define a class that has the custom attribute associated with one of its members.\nPublic Class MyClass1\n\n    &lt;MyAttribute(&quot;This is an example attribute.&quot;)&gt; Public Sub MyMethod(ByVal i As Integer)\n        Return\n    End Sub &#39;MyMethod\nEnd Class &#39;MyClass1\n\nPublic Class MemberInfo_GetCustomAttributes_IsDefined\n\n    Public Shared Sub Main()\n        Try\n            &#39; Get the type of MyClass1.\n            Dim myType As Type = GetType(MyClass1)\n            &#39; Get the members associated with MyClass1.\n            Dim myMembers As MemberInfo() = myType.GetMembers()\n\n            &#39; Display the attributes for each of the members of MyClass1.\n            Dim i As Integer\n            For i = 0 To myMembers.Length - 1\n                &#39; Display the attribute if it is of type MyAttribute.\n                If myMembers(i).IsDefined(GetType(MyAttribute), False) Then\n                    Dim myAttributes As [Object]() = myMembers(i).GetCustomAttributes(GetType(MyAttribute), False)\n                    Console.WriteLine(ControlChars.Cr + &quot;The attributes of type MyAttribute for the member {0} are: &quot; + ControlChars.Cr, myMembers(i))\n                    Dim j As Integer\n                    For j = 0 To myAttributes.Length - 1\n                        &#39; Display the value associated with the attribute.\n                        Console.WriteLine(&quot;The value of the attribute is : &quot;&quot;{0}&quot;&quot;&quot;, CType(myAttributes(j), MyAttribute).Name)\n                    Next j\n                End If\n            Next i\n        Catch e As Exception\n            Console.WriteLine(&quot;An exception occurred: {0}&quot;, e.Message)\n        End Try\n    End Sub &#39;Main\nEnd Class &#39;MemberInfo_GetCustomAttributes_IsDefined\n</code></pre><pre><code class=\"lang-cpp\" name=\"MemberInfo_GetCustomAttribute_IsDefined#1\">using namespace System;\nusing namespace System::Reflection;\n\n// Define a custom attribute with one named parameter.\n\n[AttributeUsage(AttributeTargets::All)]\npublic ref class MyAttribute: public Attribute\n{\nprivate:\n   String^ myName;\n\npublic:\n   MyAttribute( String^ name )\n   {\n      myName = name;\n   }\n\n   property String^ Name \n   {\n      String^ get()\n      {\n         return myName;\n      }\n   }\n};\n\n// Define a class that has the custom attribute associated with one of its members.\npublic ref class MyClass1\n{\npublic:\n\n   [MyAttribute(&quot;This is an example attribute.&quot;)]\n   void MyMethod( int i ){}\n};\n\nint main()\n{\n   try\n   {\n      // Get the type of MyClass1.\n      Type^ myType = MyClass1::typeid;\n\n      // Get the members associated with MyClass1.\n      array&lt;MemberInfo^&gt;^myMembers = myType-&gt;GetMembers();\n\n      // Display the attributes for each of the members of MyClass1.\n      for ( int i = 0; i &lt; myMembers-&gt;Length; i++ )\n      {\n         // Display the attribute if it is of type MyAttribute.\n         if ( myMembers[ i ]-&gt;IsDefined( MyAttribute::typeid, false ) )\n         {\n            array&lt;Object^&gt;^myAttributes = myMembers[ i ]-&gt;GetCustomAttributes( MyAttribute::typeid, false );\n            Console::WriteLine( &quot;<br>The attributes of type MyAttribute for the member {0} are: <br>&quot;, myMembers[ i ] );\n            for ( int j = 0; j &lt; myAttributes-&gt;Length; j++ )\n\n               // Display the value associated with the attribute.\n               Console::WriteLine( &quot;The value of the attribute is : \\&quot;{0}\\&quot;&quot;,\n                        (safe_cast&lt;MyAttribute^&gt;(myAttributes[ j ]))-&gt;Name );\n         }\n      }\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;An exception occurred: {0}&quot;, e-&gt;Message );\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"operators\">\r\n        <h2>Operators\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_MemberInfo_op_Equality_System_Reflection_MemberInfo_System_Reflection_MemberInfo_\">\r\n    \r\n            <a id=\"System_Reflection_MemberInfo_op_Equality_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Equality(MemberInfo,MemberInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether two <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> objects are equal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_Equality (System.Reflection.MemberInfo left, System.Reflection.MemberInfo right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> to compare to <code>right</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> to compare to <code>left</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>left</code> is equal to <code>right</code>; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_MemberInfo_op_Inequality_System_Reflection_MemberInfo_System_Reflection_MemberInfo_\">\r\n    \r\n            <a id=\"System_Reflection_MemberInfo_op_Inequality_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Inequality(MemberInfo,MemberInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether two <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> objects are not equal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_Inequality (System.Reflection.MemberInfo left, System.Reflection.MemberInfo right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> to compare to <code>right</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> to compare to <code>left</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>left</code> is not equal to <code>right</code>; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_GetIDsOfNames_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_MemberInfo.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Maps a set of names to a corresponding set of dispatch identifiers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _MemberInfo.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>riid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Reserved for future use. Must be IID_NULL.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgszNames</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Passed-in array of names to be mapped.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cNames</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Count of the names to be mapped.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lcid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The locale context in which to interpret the names.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgDispId</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Caller-allocated array which receives the IDs corresponding to the names.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>The method is called late-bound using the COM <code>IDispatch</code> interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetIDsOfNames</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_GetType\">\r\n    \r\n            <a id=\"System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_GetType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_MemberInfo.GetType()</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object representing the <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">Type _MemberInfo.GetType ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object representing the <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_GetTypeInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_MemberInfo.GetTypeInfo(UInt32,UInt32,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the type information for an object, which can then be used to get the type information for an interface.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _MemberInfo.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>iTInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type information to return.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lcid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The locale identifier for the type information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ppTInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Receives a pointer to the requested type information object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>The method is called late-bound using the COM <code>IDispatch</code> interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetTypeInfo</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_GetTypeInfoCount_System_UInt32__\">\r\n    \r\n            <a id=\"System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_GetTypeInfoCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_MemberInfo.GetTypeInfoCount(UInt32)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _MemberInfo.GetTypeInfoCount (out uint pcTInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>pcTInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Points to a location that receives the number of type information interfaces provided by the object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>The method is called late-bound using the COM <code>IDispatch</code> interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetTypeInfoCount</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_Invoke_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_MemberInfo.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Provides access to properties and methods exposed by an object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _MemberInfo.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dispIdMember</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Identifies the member.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>riid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Reserved for future use. Must be IID_NULL.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lcid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The locale context in which to interpret arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>wFlags</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Flags describing the context of the call.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pDispParams</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pVarResult</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Pointer to the location where the result is to be stored.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pExcepInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Pointer to a structure that contains exception information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>puArgErr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the first argument that has an error.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>The method is called late-bound using the COM <code>IDispatch</code> interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::Invoke</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Reflection.MemberInfo.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Reflection.MemberInfo.yml\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MemberInfo\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MemberInfo..ctor\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MemberInfo.CustomAttributes\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MemberInfo.DeclaringType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MemberInfo.Equals\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MemberInfo.GetCustomAttributes\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MemberInfo.GetCustomAttributesData\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MemberInfo.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MemberInfo.IsDefined\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MemberInfo.MemberType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MemberInfo.MetadataToken\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MemberInfo.Module\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MemberInfo.Name\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MemberInfo.op_Equality\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MemberInfo.op_op_Equality\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MemberInfo.op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MemberInfo.op_op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MemberInfo.ReflectedType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MemberInfo._MemberInfo.GetIDsOfNames\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MemberInfo._MemberInfo.GetType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MemberInfo._MemberInfo.GetTypeInfo\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MemberInfo._MemberInfo.GetTypeInfoCount\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MemberInfo._MemberInfo.Invoke\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"3d688023-191a-72ee-0a73-c770a9f1b57c\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Obtains information about the attributes of a member and provides access to member metadata.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Reflection/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Reflection.MemberInfo\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Reflection.MemberInfo.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Reflection.MemberInfo.yml","open_to_public_contributors":true,"api_name":["System.Reflection.MemberInfo","System.Reflection.MemberInfo..ctor","System.Reflection.MemberInfo.CustomAttributes","System.Reflection.MemberInfo.DeclaringType","System.Reflection.MemberInfo.Equals","System.Reflection.MemberInfo.GetCustomAttributes","System.Reflection.MemberInfo.GetCustomAttributesData","System.Reflection.MemberInfo.GetHashCode","System.Reflection.MemberInfo.IsDefined","System.Reflection.MemberInfo.MemberType","System.Reflection.MemberInfo.MetadataToken","System.Reflection.MemberInfo.Module","System.Reflection.MemberInfo.Name","System.Reflection.MemberInfo.op_Equality","System.Reflection.MemberInfo.op_op_Equality","System.Reflection.MemberInfo.op_Inequality","System.Reflection.MemberInfo.op_op_Inequality","System.Reflection.MemberInfo.ReflectedType","System.Reflection.MemberInfo._MemberInfo.GetIDsOfNames","System.Reflection.MemberInfo._MemberInfo.GetType","System.Reflection.MemberInfo._MemberInfo.GetTypeInfo","System.Reflection.MemberInfo._MemberInfo.GetTypeInfoCount","System.Reflection.MemberInfo._MemberInfo.Invoke"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Reflection.MemberInfo","System::Reflection::MemberInfo","System.Reflection.MemberInfo.#ctor","System::Reflection::MemberInfo::#ctor","System.Reflection.MemberInfo.CustomAttributes","System::Reflection::MemberInfo::CustomAttributes","System.Reflection.MemberInfo.DeclaringType","System::Reflection::MemberInfo::DeclaringType","System.Reflection.MemberInfo.Equals","System::Reflection::MemberInfo::Equals","System.Reflection.MemberInfo.GetCustomAttributes","System::Reflection::MemberInfo::GetCustomAttributes","System.Reflection.MemberInfo.GetCustomAttributesData","System::Reflection::MemberInfo::GetCustomAttributesData","System.Reflection.MemberInfo.GetHashCode","System::Reflection::MemberInfo::GetHashCode","System.Reflection.MemberInfo.IsDefined","System::Reflection::MemberInfo::IsDefined","System.Reflection.MemberInfo.MemberType","System::Reflection::MemberInfo::MemberType","System.Reflection.MemberInfo.MetadataToken","System::Reflection::MemberInfo::MetadataToken","System.Reflection.MemberInfo.Module","System::Reflection::MemberInfo::Module","System.Reflection.MemberInfo.Name","System::Reflection::MemberInfo::Name","System.Reflection.MemberInfo.op_Equality","System::Reflection::MemberInfo::op_Equality","System.Reflection.MemberInfo.op_Inequality","System::Reflection::MemberInfo::op_Inequality","System.Reflection.MemberInfo.ReflectedType","System::Reflection::MemberInfo::ReflectedType","System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames","System::Reflection::MemberInfo::System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames","System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType","System::Reflection::MemberInfo::System#Runtime#InteropServices#_MemberInfo#GetType","System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo","System::Reflection::MemberInfo::System#Runtime#InteropServices#_MemberInfo#GetTypeInfo","System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount","System::Reflection::MemberInfo::System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount","System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke","System::Reflection::MemberInfo::System#Runtime#InteropServices#_MemberInfo#Invoke"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"3d688023-191a-72ee-0a73-c770a9f1b57c","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Reflection/MemberInfo.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"MemberInfo class | Microsoft Docs","_op_ogTitle":"MemberInfo class","description":"Obtains information about the attributes of a member and provides access to member metadata.\n","toc_asset_id":"_splitted/System.Reflection/toc.json","toc_rel":"_splitted/System.Reflection/toc.json","source_url":"","ms.assetid":"System.Reflection.MemberInfo","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.reflection.memberinfo","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.reflection.memberinfo","fileRelativePath":"System.Reflection.MemberInfo.html"},"themesRelativePathToOutputRoot":"_themes/"}