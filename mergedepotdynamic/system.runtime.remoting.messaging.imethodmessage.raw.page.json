{"content":"    \r\n    <h1 id=\"System_Runtime_Remoting_Messaging_IMethodMessage\">\r\n      <span class=\"lang-csharp\">IMethodMessage</span>\r\n        Interface\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Defines the method message interface.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic interface IMethodMessage : System.Runtime.Remoting.Messaging.IMessage</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>A method message is used to send information to and from remote methods. For example, messages used for remote method calls implement the IMethodMessage interface.</p>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_Messaging_IMethodMessage_ArgCount\" data-linktype=\"self-bookmark\">ArgCount</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the number of arguments passed to the method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_Messaging_IMethodMessage_Args\" data-linktype=\"self-bookmark\">Args</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an array of arguments passed to the method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_Messaging_IMethodMessage_HasVarArgs\" data-linktype=\"self-bookmark\">HasVarArgs</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the message has variable arguments.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_Messaging_IMethodMessage_LogicalCallContext\" data-linktype=\"self-bookmark\">LogicalCallContext</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.runtime.remoting.messaging.logicalcallcontext\" data-linktype=\"relative-path\">LogicalCallContext</a> for the current method call.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_Messaging_IMethodMessage_MethodBase\" data-linktype=\"self-bookmark\">MethodBase</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.reflection.methodbase\" data-linktype=\"relative-path\">MethodBase</a> of the called method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_Messaging_IMethodMessage_MethodName\" data-linktype=\"self-bookmark\">MethodName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the name of the invoked method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_Messaging_IMethodMessage_MethodSignature\" data-linktype=\"self-bookmark\">MethodSignature</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an object containing the method signature.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_Messaging_IMethodMessage_TypeName\" data-linktype=\"self-bookmark\">TypeName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the full <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> name of the specific object that the call is destined for.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_Messaging_IMethodMessage_Uri\" data-linktype=\"self-bookmark\">Uri</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the URI of the specific object that the call is destined for.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_Messaging_IMethodMessage_GetArg_System_Int32_\" data-linktype=\"self-bookmark\">GetArg(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a specific argument as an <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_Messaging_IMethodMessage_GetArgName_System_Int32_\" data-linktype=\"self-bookmark\">GetArgName(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the name of the argument passed to the method.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_Messaging_IMethodMessage_ArgCount\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_Messaging_IMethodMessage_ArgCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ArgCount</div>        \r\n          </div>\r\n    \r\n            <p>Gets the number of arguments passed to the method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int ArgCount { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of arguments passed to the method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example code shows a custom proxy that overrides <code>RealProxy.Invoke</code> in order to write the message information to the console, using the <code>ArgCount</code> property to iterate through the arguments.  </p>\n<pre><code class=\"lang-cpp\" name=\"IMethodMessage_MethodName#2\">   // Overriding the Invoke method of RealProxy.\n   virtual IMessage^ Invoke( IMessage^ message ) override\n   {\n      IMethodMessage^ myMethodMessage = dynamic_cast&lt;IMethodMessage^&gt;(message);\n      Console::WriteLine( &quot;**** Begin Invoke ****&quot; );\n      Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;Type is : {0}&quot;, myType );\n      Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;Method name : {0}&quot;, myMethodMessage-&gt;MethodName );\n      for ( int i = 0; i &lt; myMethodMessage-&gt;ArgCount; i++ )\n      {\n         Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;ArgName is : {0}&quot;, myMethodMessage-&gt;GetArgName( i ) );\n         Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;ArgValue is: {0}&quot;, myMethodMessage-&gt;GetArg( i ) );\n\n      }\n      if ( myMethodMessage-&gt;HasVarArgs )\n            Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; The method have variable arguments!!&quot; );\n      else\n            Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; The method does not have variable arguments!!&quot; );\n\n      \n      // Dispatch the method call to the real Object*.\n      Object^ returnValue = myType-&gt;InvokeMember( myMethodMessage-&gt;MethodName, BindingFlags::InvokeMethod, nullptr, myObjectInstance, myMethodMessage-&gt;Args );\n      Console::WriteLine( &quot;**** End Invoke ****&quot; );\n      \n      // Build the return message to pass back to the transparent proxy.\n      ReturnMessage^ myReturnMessage = gcnew ReturnMessage( returnValue,nullptr,0,nullptr,dynamic_cast&lt;IMethodCallMessage^&gt;(message) );\n      return myReturnMessage;\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"IMethodMessage_MethodName#2\">   // Overriding the Invoke method of RealProxy.\n   public override IMessage Invoke(IMessage message)\n   {\n      IMethodMessage myMethodMessage = (IMethodMessage)message;\n\n      Console.WriteLine(&quot;**** Begin Invoke ****&quot;);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Type is : &quot; + myType);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Method name : &quot; +  myMethodMessage.MethodName);\n\n      for (int i=0; i &lt; myMethodMessage.ArgCount; i++)\n      {\n         Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;ArgName is : &quot; + myMethodMessage.GetArgName(i));\n         Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;ArgValue is: &quot; + myMethodMessage.GetArg(i));\n      }\n\n      if(myMethodMessage.HasVarArgs)\n          Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp; The method have variable arguments!!&quot;);\n      else\n          Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp; The method does not have variable arguments!!&quot;);\n\n      // Dispatch the method call to the real object.\n      Object returnValue = myType.InvokeMember( myMethodMessage.MethodName, BindingFlags.InvokeMethod, null,\n                                           myObjectInstance, myMethodMessage.Args );\n      Console.WriteLine(&quot;**** End Invoke ****&quot;);\n\n      // Build the return message to pass back to the transparent proxy.\n      ReturnMessage myReturnMessage = new ReturnMessage( returnValue, null, 0, null,\n          (IMethodCallMessage)message );\n      return myReturnMessage;\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"IMethodMessage_MethodName#2\">   &#39; Overriding the Invoke method of RealProxy.\n   Public Overrides Function Invoke(message As IMessage) As IMessage\n      Dim myMethodMessage As IMethodMessage = CType(message, IMethodMessage)\n      \n      Console.WriteLine(&quot;**** Begin Invoke ****&quot;)\n      Console.WriteLine(ControlChars.Tab + &quot;Type is : &quot; + myType.ToString())\n      Console.WriteLine(ControlChars.Tab + &quot;Method name : &quot; + myMethodMessage.MethodName)\n      \n      Dim i As Integer\n      For i = 0 To myMethodMessage.ArgCount - 1\n         Console.WriteLine(ControlChars.Tab + &quot;ArgName is : &quot; + myMethodMessage.GetArgName(i))\n         Console.WriteLine(ControlChars.Tab + &quot;ArgValue is: &quot; + myMethodMessage.GetArg(i))\n      Next i\n      \n      If myMethodMessage.HasVarArgs Then\n         Console.WriteLine(ControlChars.Tab + &quot; The method have variable arguments!!&quot;)\n      Else\n         Console.WriteLine(ControlChars.Tab + &quot; The method does not have variable arguments!!&quot;)\n      End If \n      &#39; Dispatch the method call to the real object.\n      Dim returnValue As Object = myType.InvokeMember(myMethodMessage.MethodName, _\n                     BindingFlags.InvokeMethod, Nothing, myObjectInstance, myMethodMessage.Args)\n      Console.WriteLine(&quot;**** End Invoke ****&quot;)\n      \n      &#39; Build the return message to pass back to the transparent proxy.\n      Dim myReturnMessage As New ReturnMessage(returnValue, Nothing, 0, Nothing, _\n                                                         CType(message, IMethodCallMessage))\n      Return myReturnMessage\n   End Function &#39;Invoke\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_Messaging_IMethodMessage_Args\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_Messaging_IMethodMessage_Args_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Args</div>        \r\n          </div>\r\n    \r\n            <p>Gets an array of arguments passed to the method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object[] Args { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> array containing the arguments passed to the method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Although the Args property is redundant since the same functionality can be achieved through the <a class=\"xref\" href=\"system.runtime.remoting.messaging.imethodmessage#System_Runtime_Remoting_Messaging_IMethodMessage_ArgCount_\" data-linktype=\"relative-path\">ArgCount</a> and <a class=\"xref\" href=\"system.runtime.remoting.messaging.imethodmessage#System_Runtime_Remoting_Messaging_IMethodMessage_GetArg_\" data-linktype=\"relative-path\">GetArg</a>, there might be performance optimization available if the implementer understands when all the arguments will be retrieved.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_Messaging_IMethodMessage_HasVarArgs\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_Messaging_IMethodMessage_HasVarArgs_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HasVarArgs</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the message has variable arguments.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool HasVarArgs { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the method can accept a variable number of arguments; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example code shows a custom proxy that overrides <code>RealProxy.Invoke</code> in order to write the message information to the console, including whether the method call has variable arguments.  </p>\n<pre><code class=\"lang-cpp\" name=\"IMethodMessage_MethodName#2\">   // Overriding the Invoke method of RealProxy.\n   virtual IMessage^ Invoke( IMessage^ message ) override\n   {\n      IMethodMessage^ myMethodMessage = dynamic_cast&lt;IMethodMessage^&gt;(message);\n      Console::WriteLine( &quot;**** Begin Invoke ****&quot; );\n      Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;Type is : {0}&quot;, myType );\n      Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;Method name : {0}&quot;, myMethodMessage-&gt;MethodName );\n      for ( int i = 0; i &lt; myMethodMessage-&gt;ArgCount; i++ )\n      {\n         Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;ArgName is : {0}&quot;, myMethodMessage-&gt;GetArgName( i ) );\n         Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;ArgValue is: {0}&quot;, myMethodMessage-&gt;GetArg( i ) );\n\n      }\n      if ( myMethodMessage-&gt;HasVarArgs )\n            Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; The method have variable arguments!!&quot; );\n      else\n            Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; The method does not have variable arguments!!&quot; );\n\n      \n      // Dispatch the method call to the real Object*.\n      Object^ returnValue = myType-&gt;InvokeMember( myMethodMessage-&gt;MethodName, BindingFlags::InvokeMethod, nullptr, myObjectInstance, myMethodMessage-&gt;Args );\n      Console::WriteLine( &quot;**** End Invoke ****&quot; );\n      \n      // Build the return message to pass back to the transparent proxy.\n      ReturnMessage^ myReturnMessage = gcnew ReturnMessage( returnValue,nullptr,0,nullptr,dynamic_cast&lt;IMethodCallMessage^&gt;(message) );\n      return myReturnMessage;\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"IMethodMessage_MethodName#2\">   // Overriding the Invoke method of RealProxy.\n   public override IMessage Invoke(IMessage message)\n   {\n      IMethodMessage myMethodMessage = (IMethodMessage)message;\n\n      Console.WriteLine(&quot;**** Begin Invoke ****&quot;);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Type is : &quot; + myType);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Method name : &quot; +  myMethodMessage.MethodName);\n\n      for (int i=0; i &lt; myMethodMessage.ArgCount; i++)\n      {\n         Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;ArgName is : &quot; + myMethodMessage.GetArgName(i));\n         Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;ArgValue is: &quot; + myMethodMessage.GetArg(i));\n      }\n\n      if(myMethodMessage.HasVarArgs)\n          Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp; The method have variable arguments!!&quot;);\n      else\n          Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp; The method does not have variable arguments!!&quot;);\n\n      // Dispatch the method call to the real object.\n      Object returnValue = myType.InvokeMember( myMethodMessage.MethodName, BindingFlags.InvokeMethod, null,\n                                           myObjectInstance, myMethodMessage.Args );\n      Console.WriteLine(&quot;**** End Invoke ****&quot;);\n\n      // Build the return message to pass back to the transparent proxy.\n      ReturnMessage myReturnMessage = new ReturnMessage( returnValue, null, 0, null,\n          (IMethodCallMessage)message );\n      return myReturnMessage;\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"IMethodMessage_MethodName#2\">   &#39; Overriding the Invoke method of RealProxy.\n   Public Overrides Function Invoke(message As IMessage) As IMessage\n      Dim myMethodMessage As IMethodMessage = CType(message, IMethodMessage)\n      \n      Console.WriteLine(&quot;**** Begin Invoke ****&quot;)\n      Console.WriteLine(ControlChars.Tab + &quot;Type is : &quot; + myType.ToString())\n      Console.WriteLine(ControlChars.Tab + &quot;Method name : &quot; + myMethodMessage.MethodName)\n      \n      Dim i As Integer\n      For i = 0 To myMethodMessage.ArgCount - 1\n         Console.WriteLine(ControlChars.Tab + &quot;ArgName is : &quot; + myMethodMessage.GetArgName(i))\n         Console.WriteLine(ControlChars.Tab + &quot;ArgValue is: &quot; + myMethodMessage.GetArg(i))\n      Next i\n      \n      If myMethodMessage.HasVarArgs Then\n         Console.WriteLine(ControlChars.Tab + &quot; The method have variable arguments!!&quot;)\n      Else\n         Console.WriteLine(ControlChars.Tab + &quot; The method does not have variable arguments!!&quot;)\n      End If \n      &#39; Dispatch the method call to the real object.\n      Dim returnValue As Object = myType.InvokeMember(myMethodMessage.MethodName, _\n                     BindingFlags.InvokeMethod, Nothing, myObjectInstance, myMethodMessage.Args)\n      Console.WriteLine(&quot;**** End Invoke ****&quot;)\n      \n      &#39; Build the return message to pass back to the transparent proxy.\n      Dim myReturnMessage As New ReturnMessage(returnValue, Nothing, 0, Nothing, _\n                                                         CType(message, IMethodCallMessage))\n      Return myReturnMessage\n   End Function &#39;Invoke\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_Messaging_IMethodMessage_LogicalCallContext\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_Messaging_IMethodMessage_LogicalCallContext_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LogicalCallContext</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.runtime.remoting.messaging.logicalcallcontext\" data-linktype=\"relative-path\">LogicalCallContext</a> for the current method call.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Runtime.Remoting.Messaging.LogicalCallContext LogicalCallContext { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.remoting.messaging.logicalcallcontext\" data-linktype=\"relative-path\">LogicalCallContext</a></div>\r\n                  </div>\r\n                  <p>Gets the <a class=\"xref\" href=\"system.runtime.remoting.messaging.logicalcallcontext\" data-linktype=\"relative-path\">LogicalCallContext</a> for the current method call.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example code shows how to use the <code>LogicalCallContext</code> property to determine whether any values are attached to the logical thread.  </p>\n<pre><code class=\"lang-vb\" name=\"IMethodMessage_LogicalCallContext#1\">Public Class MyProxy\n   Inherits RealProxy\n\n   Private stringUri As String\n   Private targetObject As MarshalByRefObject\n\n   &lt;SecurityPermission(SecurityAction.LinkDemand)&gt; _\n   Public Sub New(type As Type)\n      MyBase.New(type)\n      targetObject = CType(Activator.CreateInstance(type), MarshalByRefObject)\n      Dim myObject As ObjRef = RemotingServices.Marshal(targetObject)\n      stringUri = myObject.URI\n   End Sub &#39;New\n\n&lt;SecurityPermission(SecurityAction.LinkDemand)&gt; _\n   Public Sub New(type As Type, targetObject As MarshalByRefObject)\n      MyBase.New(type)\n      Me.targetObject = targetObject\n   End Sub &#39;New\n\n\n&lt;SecurityPermissionAttribute(SecurityAction.LinkDemand, Flags:=SecurityPermissionFlag.Infrastructure)&gt; _\n   Public Overrides Function Invoke(message As IMessage) As IMessage\n      message.Properties(&quot;__Uri&quot;) = stringUri\n      Dim myMethodMessage As IMethodMessage = _\n            CType(ChannelServices.SyncDispatchMessage(message), IMethodMessage)\n      Console.WriteLine(&quot;---------IMethodMessage example-------&quot;)\n      Console.WriteLine(&quot;Method name : &quot; + myMethodMessage.MethodName)\n      Console.WriteLine(&quot;LogicalCallContext has information : &quot; + _\n            myMethodMessage.LogicalCallContext.HasInfo.ToString())\n      Console.WriteLine(&quot;Uri : &quot; + myMethodMessage.Uri)\n      Return myMethodMessage\n   End Function &#39;Invoke\n\nEnd Class &#39;MyProxy\n</code></pre><pre><code class=\"lang-cs\" name=\"IMethodMessage_LogicalCallContext#1\">   public class MyProxy : RealProxy\n   {\n\n   String stringUri;\n   MarshalByRefObject targetObject;\n\n[SecurityPermission(SecurityAction.LinkDemand)]\npublic MyProxy(Type type) : base(type)\n{\n      targetObject = (MarshalByRefObject)Activator.CreateInstance(type);\n      ObjRef myObject = RemotingServices.Marshal(targetObject);\n      stringUri = myObject.URI;\n   }\n\n   [SecurityPermission(SecurityAction.LinkDemand)]\n   public MyProxy(Type type, MarshalByRefObject targetObject) : base(type)\n   {\n      this.targetObject = targetObject;\n   }\n\n\n[SecurityPermissionAttribute(SecurityAction.LinkDemand, Flags=SecurityPermissionFlag.Infrastructure)]\n   public override IMessage Invoke(IMessage message)\n   {\n      message.Properties[&quot;__Uri&quot;] = stringUri;\n      IMethodMessage myMethodMessage = \n         (IMethodMessage)ChannelServices.SyncDispatchMessage(message);\n\n      Console.WriteLine(&quot;---------IMethodMessage example-------&quot;);\n      Console.WriteLine(&quot;Method name : &quot; + myMethodMessage.MethodName);\n      Console.WriteLine(&quot;LogicalCallContext has information : &quot; +\n         myMethodMessage.LogicalCallContext.HasInfo);\n      Console.WriteLine(&quot;Uri : &quot; + myMethodMessage.Uri);\n\n      return myMethodMessage;\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"IMethodMessage_LogicalCallContext#1\">//This sample requires full trust\n[PermissionSetAttribute(SecurityAction::Demand, Name = &quot;FullTrust&quot;)]\npublic ref class MyProxy: public RealProxy\n{\nprivate:\n   String^ stringUri;\n   MarshalByRefObject^ targetObject;\n\npublic:\n   MyProxy( Type^ type )\n      : RealProxy( type )\n   {\n      targetObject = dynamic_cast&lt;MarshalByRefObject^&gt;(Activator::CreateInstance( type ));\n      ObjRef^ myObject = RemotingServices::Marshal( targetObject );\n      stringUri = myObject-&gt;URI;\n   }\n\n   MyProxy( Type^ type, MarshalByRefObject^ targetObject )\n      : RealProxy( type )\n   {\n      this-&gt;targetObject = targetObject;\n   }\n\n   virtual IMessage^ Invoke( IMessage^ message ) override\n   {\n      message-&gt;Properties[ &quot;__Uri&quot; ] = stringUri;\n      IMethodMessage^ myMethodMessage = dynamic_cast&lt;IMethodMessage^&gt;(ChannelServices::SyncDispatchMessage( message ));\n      Console::WriteLine( &quot;---------IMethodMessage* example-------&quot; );\n      Console::WriteLine( &quot;Method name : {0}&quot;, myMethodMessage-&gt;MethodName );\n      Console::WriteLine( &quot;LogicalCallContext has information : {0}&quot;, myMethodMessage-&gt;LogicalCallContext-&gt;HasInfo );\n      Console::WriteLine( &quot;Uri : {0}&quot;, myMethodMessage-&gt;Uri );\n      return myMethodMessage;\n   }\n};\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_Messaging_IMethodMessage_MethodBase\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_Messaging_IMethodMessage_MethodBase_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MethodBase</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.reflection.methodbase\" data-linktype=\"relative-path\">MethodBase</a> of the called method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.MethodBase MethodBase { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodbase\" data-linktype=\"relative-path\">MethodBase</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.reflection.methodbase\" data-linktype=\"relative-path\">MethodBase</a> of the called method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This information is not transmitted to a remote location, but is used to cache the method base after it has been looked up once.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_Messaging_IMethodMessage_MethodName\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_Messaging_IMethodMessage_MethodName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MethodName</div>        \r\n          </div>\r\n    \r\n            <p>Gets the name of the invoked method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string MethodName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the invoked method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example code shows a custom proxy that overrides <code>RealProxy.Invoke</code> in order to write the name of the method to the console.  </p>\n<pre><code class=\"lang-cpp\" name=\"IMethodMessage_MethodName#2\">   // Overriding the Invoke method of RealProxy.\n   virtual IMessage^ Invoke( IMessage^ message ) override\n   {\n      IMethodMessage^ myMethodMessage = dynamic_cast&lt;IMethodMessage^&gt;(message);\n      Console::WriteLine( &quot;**** Begin Invoke ****&quot; );\n      Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;Type is : {0}&quot;, myType );\n      Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;Method name : {0}&quot;, myMethodMessage-&gt;MethodName );\n      for ( int i = 0; i &lt; myMethodMessage-&gt;ArgCount; i++ )\n      {\n         Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;ArgName is : {0}&quot;, myMethodMessage-&gt;GetArgName( i ) );\n         Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;ArgValue is: {0}&quot;, myMethodMessage-&gt;GetArg( i ) );\n\n      }\n      if ( myMethodMessage-&gt;HasVarArgs )\n            Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; The method have variable arguments!!&quot; );\n      else\n            Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; The method does not have variable arguments!!&quot; );\n\n      \n      // Dispatch the method call to the real Object*.\n      Object^ returnValue = myType-&gt;InvokeMember( myMethodMessage-&gt;MethodName, BindingFlags::InvokeMethod, nullptr, myObjectInstance, myMethodMessage-&gt;Args );\n      Console::WriteLine( &quot;**** End Invoke ****&quot; );\n      \n      // Build the return message to pass back to the transparent proxy.\n      ReturnMessage^ myReturnMessage = gcnew ReturnMessage( returnValue,nullptr,0,nullptr,dynamic_cast&lt;IMethodCallMessage^&gt;(message) );\n      return myReturnMessage;\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"IMethodMessage_MethodName#2\">   // Overriding the Invoke method of RealProxy.\n   public override IMessage Invoke(IMessage message)\n   {\n      IMethodMessage myMethodMessage = (IMethodMessage)message;\n\n      Console.WriteLine(&quot;**** Begin Invoke ****&quot;);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Type is : &quot; + myType);\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Method name : &quot; +  myMethodMessage.MethodName);\n\n      for (int i=0; i &lt; myMethodMessage.ArgCount; i++)\n      {\n         Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;ArgName is : &quot; + myMethodMessage.GetArgName(i));\n         Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;ArgValue is: &quot; + myMethodMessage.GetArg(i));\n      }\n\n      if(myMethodMessage.HasVarArgs)\n          Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp; The method have variable arguments!!&quot;);\n      else\n          Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp; The method does not have variable arguments!!&quot;);\n\n      // Dispatch the method call to the real object.\n      Object returnValue = myType.InvokeMember( myMethodMessage.MethodName, BindingFlags.InvokeMethod, null,\n                                           myObjectInstance, myMethodMessage.Args );\n      Console.WriteLine(&quot;**** End Invoke ****&quot;);\n\n      // Build the return message to pass back to the transparent proxy.\n      ReturnMessage myReturnMessage = new ReturnMessage( returnValue, null, 0, null,\n          (IMethodCallMessage)message );\n      return myReturnMessage;\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"IMethodMessage_MethodName#2\">   &#39; Overriding the Invoke method of RealProxy.\n   Public Overrides Function Invoke(message As IMessage) As IMessage\n      Dim myMethodMessage As IMethodMessage = CType(message, IMethodMessage)\n      \n      Console.WriteLine(&quot;**** Begin Invoke ****&quot;)\n      Console.WriteLine(ControlChars.Tab + &quot;Type is : &quot; + myType.ToString())\n      Console.WriteLine(ControlChars.Tab + &quot;Method name : &quot; + myMethodMessage.MethodName)\n      \n      Dim i As Integer\n      For i = 0 To myMethodMessage.ArgCount - 1\n         Console.WriteLine(ControlChars.Tab + &quot;ArgName is : &quot; + myMethodMessage.GetArgName(i))\n         Console.WriteLine(ControlChars.Tab + &quot;ArgValue is: &quot; + myMethodMessage.GetArg(i))\n      Next i\n      \n      If myMethodMessage.HasVarArgs Then\n         Console.WriteLine(ControlChars.Tab + &quot; The method have variable arguments!!&quot;)\n      Else\n         Console.WriteLine(ControlChars.Tab + &quot; The method does not have variable arguments!!&quot;)\n      End If \n      &#39; Dispatch the method call to the real object.\n      Dim returnValue As Object = myType.InvokeMember(myMethodMessage.MethodName, _\n                     BindingFlags.InvokeMethod, Nothing, myObjectInstance, myMethodMessage.Args)\n      Console.WriteLine(&quot;**** End Invoke ****&quot;)\n      \n      &#39; Build the return message to pass back to the transparent proxy.\n      Dim myReturnMessage As New ReturnMessage(returnValue, Nothing, 0, Nothing, _\n                                                         CType(message, IMethodCallMessage))\n      Return myReturnMessage\n   End Function &#39;Invoke\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_Messaging_IMethodMessage_MethodSignature\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_Messaging_IMethodMessage_MethodSignature_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MethodSignature</div>        \r\n          </div>\r\n    \r\n            <p>Gets an object containing the method signature.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object MethodSignature { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>An object containing the method signature.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>All the current implementations of <a class=\"xref\" href=\"system.runtime.remoting.messaging.imethodmessage\" data-linktype=\"relative-path\">IMethodMessage</a> return an array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects containing the parameter types of the method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_Messaging_IMethodMessage_TypeName\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_Messaging_IMethodMessage_TypeName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TypeName</div>        \r\n          </div>\r\n    \r\n            <p>Gets the full <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> name of the specific object that the call is destined for.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string TypeName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The full <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> name of the specific object that the call is destined for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_Messaging_IMethodMessage_Uri\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_Messaging_IMethodMessage_Uri_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Uri</div>        \r\n          </div>\r\n    \r\n            <p>Gets the URI of the specific object that the call is destined for.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Uri { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The URI of the remote object that contains the invoked method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_Messaging_IMethodMessage_GetArg_System_Int32_\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_Messaging_IMethodMessage_GetArg_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetArg(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a specific argument as an <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object GetArg (int argNum);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>argNum</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of the requested argument.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>The argument passed to the method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_Messaging_IMethodMessage_GetArgName_System_Int32_\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_Messaging_IMethodMessage_GetArgName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetArgName(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the name of the argument passed to the method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string GetArgName (int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of the requested argument.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the specified argument passed to the method, or <code>null</code> if the current method is not implemented.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Runtime.Remoting.Messaging.IMethodMessage.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Runtime.Remoting.Messaging.IMethodMessage.yml\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Messaging.IMethodMessage\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Messaging.IMethodMessage.ArgCount\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Messaging.IMethodMessage.Args\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Messaging.IMethodMessage.GetArg\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Messaging.IMethodMessage.GetArgName\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Messaging.IMethodMessage.HasVarArgs\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Messaging.IMethodMessage.LogicalCallContext\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Messaging.IMethodMessage.MethodBase\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Messaging.IMethodMessage.MethodName\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Messaging.IMethodMessage.MethodSignature\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Messaging.IMethodMessage.TypeName\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Messaging.IMethodMessage.Uri\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"3878c41d-bb3a-e281-ff63-e9d3fbcc18c6\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Defines the method message interface.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Runtime.Remoting.Messaging/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Runtime.Remoting.Messaging.IMethodMessage\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Runtime.Remoting.Messaging.IMethodMessage.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Runtime.Remoting.Messaging.IMethodMessage.yml","open_to_public_contributors":true,"api_name":["System.Runtime.Remoting.Messaging.IMethodMessage","System.Runtime.Remoting.Messaging.IMethodMessage.ArgCount","System.Runtime.Remoting.Messaging.IMethodMessage.Args","System.Runtime.Remoting.Messaging.IMethodMessage.GetArg","System.Runtime.Remoting.Messaging.IMethodMessage.GetArgName","System.Runtime.Remoting.Messaging.IMethodMessage.HasVarArgs","System.Runtime.Remoting.Messaging.IMethodMessage.LogicalCallContext","System.Runtime.Remoting.Messaging.IMethodMessage.MethodBase","System.Runtime.Remoting.Messaging.IMethodMessage.MethodName","System.Runtime.Remoting.Messaging.IMethodMessage.MethodSignature","System.Runtime.Remoting.Messaging.IMethodMessage.TypeName","System.Runtime.Remoting.Messaging.IMethodMessage.Uri"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Runtime.Remoting.Messaging.IMethodMessage","System::Runtime::Remoting::Messaging::IMethodMessage","System.Runtime.Remoting.Messaging.IMethodMessage.ArgCount","System::Runtime::Remoting::Messaging::IMethodMessage::ArgCount","System.Runtime.Remoting.Messaging.IMethodMessage.Args","System::Runtime::Remoting::Messaging::IMethodMessage::Args","System.Runtime.Remoting.Messaging.IMethodMessage.GetArg","System::Runtime::Remoting::Messaging::IMethodMessage::GetArg","System.Runtime.Remoting.Messaging.IMethodMessage.GetArgName","System::Runtime::Remoting::Messaging::IMethodMessage::GetArgName","System.Runtime.Remoting.Messaging.IMethodMessage.HasVarArgs","System::Runtime::Remoting::Messaging::IMethodMessage::HasVarArgs","System.Runtime.Remoting.Messaging.IMethodMessage.LogicalCallContext","System::Runtime::Remoting::Messaging::IMethodMessage::LogicalCallContext","System.Runtime.Remoting.Messaging.IMethodMessage.MethodBase","System::Runtime::Remoting::Messaging::IMethodMessage::MethodBase","System.Runtime.Remoting.Messaging.IMethodMessage.MethodName","System::Runtime::Remoting::Messaging::IMethodMessage::MethodName","System.Runtime.Remoting.Messaging.IMethodMessage.MethodSignature","System::Runtime::Remoting::Messaging::IMethodMessage::MethodSignature","System.Runtime.Remoting.Messaging.IMethodMessage.TypeName","System::Runtime::Remoting::Messaging::IMethodMessage::TypeName","System.Runtime.Remoting.Messaging.IMethodMessage.Uri","System::Runtime::Remoting::Messaging::IMethodMessage::Uri"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"3878c41d-bb3a-e281-ff63-e9d3fbcc18c6","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Runtime.Remoting.Messaging/IMethodMessage.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IMethodMessage interface | Microsoft Docs","_op_ogTitle":"IMethodMessage interface","description":"Defines the method message interface.\n","toc_asset_id":"_splitted/System.Runtime.Remoting.Messaging/toc.json","toc_rel":"_splitted/System.Runtime.Remoting.Messaging/toc.json","source_url":"","ms.assetid":"System.Runtime.Remoting.Messaging.IMethodMessage","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.runtime.remoting.messaging.imethodmessage","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.runtime.remoting.messaging.imethodmessage","fileRelativePath":"System.Runtime.Remoting.Messaging.IMethodMessage.html"},"themesRelativePathToOutputRoot":"_themes/"}