{"content":"    \r\n    <h1 id=\"System_CodeDom_Compiler_CodeDomProvider\">\r\n      <span class=\"lang-csharp\">CodeDomProvider</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides a base class for CodeDomProvider implementations. This class is abstract.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.ComponentModel.ToolboxItem(false)]\n[System.Runtime.InteropServices.ComVisible(true)]\npublic abstract class CodeDomProvider : System.ComponentModel.Component</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component\" data-linktype=\"relative-path\">System.ComponentModel.Component</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l3\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">CodeDomProvider</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_CanRaiseEvents\" data-linktype=\"relative-path\">CanRaiseEvents</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Container\" data-linktype=\"relative-path\">Container</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_DesignMode\" data-linktype=\"relative-path\">DesignMode</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Dispose\" data-linktype=\"relative-path\">Dispose()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Dispose_System_Boolean_\" data-linktype=\"relative-path\">Dispose(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Disposed\" data-linktype=\"relative-path\">Disposed</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Events\" data-linktype=\"relative-path\">Events</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_GetService_System_Type_\" data-linktype=\"relative-path\">GetService(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Site\" data-linktype=\"relative-path\">Site</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_CreateObjRef_System_Type_\" data-linktype=\"relative-path\">CreateObjRef(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_GetLifetimeService\" data-linktype=\"relative-path\">GetLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_InitializeLifetimeService\" data-linktype=\"relative-path\">InitializeLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_MemberwiseClone_System_Boolean_\" data-linktype=\"relative-path\">MemberwiseClone(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>A CodeDomProvider can be used to create and retrieve instances of code generators and code compilers. Code generators can be used to generate code in a particular language, and code compilers can be used to compile code into assemblies.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->, the methods made available in the code generator and code compiler are available directly from the code provider. You do not need to call <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_CreateGenerator_\" data-linktype=\"relative-path\">CreateGenerator</a> or <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_CreateCompiler_\" data-linktype=\"relative-path\">CreateCompiler</a> to access the methods, and those methods are marked as obsolete. This applies to preexisting as well as new code provider implementations.  </p>\n</div>\n<p> A CodeDomProvider implementation typically provides code generation and/or code compilation interfaces for generating code and managing compilation for a single programming language. Several languages are supported by CodeDomProvider implementations that ship with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/winsdklong-md.md&quot; -->Windows Software Development Kit (SDK)<!--END INCLUDE -->. These languages include C#, Visual Basic, C++, and JScript. Developers or compiler vendors can implement the <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> and <a class=\"xref\" href=\"system.codedom.compiler.icodecompiler\" data-linktype=\"relative-path\">ICodeCompiler</a> interfaces and provide a CodeDomProvider that extends CodeDOM support to other programming languages.  </p>\n<p> The <a href=\"../Topic/%3Csystem.codedom%3E%20Element.md\" data-linktype=\"relative-path\">&amp;lt;system.codedom&amp;gt; Element</a> in the machine configuration file (Machine.config) provides a mechanism for developers and compiler vendors to add configuration settings for additional CodeDomProvider implementations.  </p>\n<p> The CodeDomProvider class provides static methods to discover and enumerate the CodeDomProvider implementations on a computer. The <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_GetAllCompilerInfo_\" data-linktype=\"relative-path\">GetAllCompilerInfo</a> method returns the settings for all CodeDomProvider implementations on a computer. The <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_GetCompilerInfo_\" data-linktype=\"relative-path\">GetCompilerInfo</a> method returns the settings for a specific CodeDomProvider implementation, based on the programming language name. The <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_CreateProvider_\" data-linktype=\"relative-path\">CreateProvider</a> method returns an instance of a CodeDomProvider implementation for a specific language.  </p>\n<p> For more details on language provider settings in the configuration file, see <a href=\"../Topic/Compiler%20and%20Language%20Provider%20Settings%20Schema.md\" data-linktype=\"relative-path\">Compiler and Language Provider Settings Schema</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This class makes a link demand and an inheritance demand at the class level. A <a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a> is thrown if either the immediate caller or the derived class does not have full trust permission. For details about security demands, see <a href=\"../Topic/Link%20Demands.md\" data-linktype=\"relative-path\">Link Demands</a> and <a href=\"http://msdn.microsoft.com/en-us/28b9adbb-8f08-4f10-b856-dbf59eb932d9\" data-linktype=\"external\">Inheritance Demands</a>.</p>\n</div>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_CodeDom_Compiler_CodeDomProvider__ctor\" data-linktype=\"self-bookmark\">CodeDomProvider()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_CodeDom_Compiler_CodeDomProvider_FileExtension\" data-linktype=\"self-bookmark\">FileExtension</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the default file name extension to use for source code files in the current language.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_CodeDom_Compiler_CodeDomProvider_LanguageOptions\" data-linktype=\"self-bookmark\">LanguageOptions</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a language features identifier.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_CodeDom_Compiler_CodeDomProvider_CompileAssemblyFromDom_System_CodeDom_Compiler_CompilerParameters_System_CodeDom_CodeCompileUnit___\" data-linktype=\"self-bookmark\">CompileAssemblyFromDom(CompilerParameters,CodeCompileUnit[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compiles an assembly based on the <a class=\"xref\" href=\"system.codedom\" data-linktype=\"relative-path\">System.CodeDom</a> trees contained in the specified array of <a class=\"xref\" href=\"system.codedom.codecompileunit\" data-linktype=\"relative-path\">CodeCompileUnit</a> objects, using the specified compiler settings.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_CodeDom_Compiler_CodeDomProvider_CompileAssemblyFromFile_System_CodeDom_Compiler_CompilerParameters_System_String___\" data-linktype=\"self-bookmark\">CompileAssemblyFromFile(CompilerParameters,String[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compiles an assembly from the source code contained in the specified files, using the specified compiler settings.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_CodeDom_Compiler_CodeDomProvider_CompileAssemblyFromSource_System_CodeDom_Compiler_CompilerParameters_System_String___\" data-linktype=\"self-bookmark\">CompileAssemblyFromSource(CompilerParameters,String[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compiles an assembly from the specified array of strings containing source code, using the specified compiler settings.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_CodeDom_Compiler_CodeDomProvider_CreateCompiler\" data-linktype=\"self-bookmark\">CreateCompiler()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, creates a new code compiler.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_CodeDom_Compiler_CodeDomProvider_CreateEscapedIdentifier_System_String_\" data-linktype=\"self-bookmark\">CreateEscapedIdentifier(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an escaped identifier for the specified value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_CodeDom_Compiler_CodeDomProvider_CreateGenerator\" data-linktype=\"self-bookmark\">CreateGenerator()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, creates a new code generator.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_CodeDom_Compiler_CodeDomProvider_CreateGenerator_System_IO_TextWriter_\" data-linktype=\"self-bookmark\">CreateGenerator(TextWriter)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, creates a new code generator using the specified <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> for output.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_CodeDom_Compiler_CodeDomProvider_CreateGenerator_System_String_\" data-linktype=\"self-bookmark\">CreateGenerator(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, creates a new code generator using the specified file name for output.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_CodeDom_Compiler_CodeDomProvider_CreateParser\" data-linktype=\"self-bookmark\">CreateParser()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, creates a new code parser.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_CodeDom_Compiler_CodeDomProvider_CreateProvider_System_String_\" data-linktype=\"self-bookmark\">CreateProvider(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> instance for the specified language.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_CodeDom_Compiler_CodeDomProvider_CreateProvider_System_String_System_Collections_Generic_IDictionary_System_String_System_String__\" data-linktype=\"self-bookmark\">CreateProvider(String,IDictionary&lt;String,String&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> instance for the specified language and provider options.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_CodeDom_Compiler_CodeDomProvider_CreateValidIdentifier_System_String_\" data-linktype=\"self-bookmark\">CreateValidIdentifier(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a valid identifier for the specified value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_CodeDom_Compiler_CodeDomProvider_GenerateCodeFromCompileUnit_System_CodeDom_CodeCompileUnit_System_IO_TextWriter_System_CodeDom_Compiler_CodeGeneratorOptions_\" data-linktype=\"self-bookmark\">GenerateCodeFromCompileUnit(CodeCompileUnit,TextWriter,CodeGeneratorOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Generates code for the specified Code Document Object Model (CodeDOM) compilation unit and sends it to the specified text writer, using the specified options.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_CodeDom_Compiler_CodeDomProvider_GenerateCodeFromExpression_System_CodeDom_CodeExpression_System_IO_TextWriter_System_CodeDom_Compiler_CodeGeneratorOptions_\" data-linktype=\"self-bookmark\">GenerateCodeFromExpression(CodeExpression,TextWriter,CodeGeneratorOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Generates code for the specified Code Document Object Model (CodeDOM) expression and sends it to the specified text writer, using the specified options.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_CodeDom_Compiler_CodeDomProvider_GenerateCodeFromMember_System_CodeDom_CodeTypeMember_System_IO_TextWriter_System_CodeDom_Compiler_CodeGeneratorOptions_\" data-linktype=\"self-bookmark\">GenerateCodeFromMember(CodeTypeMember,TextWriter,CodeGeneratorOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Generates code for the specified Code Document Object Model (CodeDOM) member declaration and sends it to the specified text writer, using the specified options.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_CodeDom_Compiler_CodeDomProvider_GenerateCodeFromNamespace_System_CodeDom_CodeNamespace_System_IO_TextWriter_System_CodeDom_Compiler_CodeGeneratorOptions_\" data-linktype=\"self-bookmark\">GenerateCodeFromNamespace(CodeNamespace,TextWriter,CodeGeneratorOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Generates code for the specified Code Document Object Model (CodeDOM) namespace and sends it to the specified text writer, using the specified options.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_CodeDom_Compiler_CodeDomProvider_GenerateCodeFromStatement_System_CodeDom_CodeStatement_System_IO_TextWriter_System_CodeDom_Compiler_CodeGeneratorOptions_\" data-linktype=\"self-bookmark\">GenerateCodeFromStatement(CodeStatement,TextWriter,CodeGeneratorOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Generates code for the specified Code Document Object Model (CodeDOM) statement and sends it to the specified text writer, using the specified options.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_CodeDom_Compiler_CodeDomProvider_GenerateCodeFromType_System_CodeDom_CodeTypeDeclaration_System_IO_TextWriter_System_CodeDom_Compiler_CodeGeneratorOptions_\" data-linktype=\"self-bookmark\">GenerateCodeFromType(CodeTypeDeclaration,TextWriter,CodeGeneratorOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Generates code for the specified Code Document Object Model (CodeDOM) type declaration and sends it to the specified text writer, using the specified options.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_CodeDom_Compiler_CodeDomProvider_GetAllCompilerInfo\" data-linktype=\"self-bookmark\">GetAllCompilerInfo()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the language provider and compiler configuration settings for this computer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_CodeDom_Compiler_CodeDomProvider_GetCompilerInfo_System_String_\" data-linktype=\"self-bookmark\">GetCompilerInfo(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the language provider and compiler configuration settings for the specified language.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_CodeDom_Compiler_CodeDomProvider_GetConverter_System_Type_\" data-linktype=\"self-bookmark\">GetConverter(Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.componentmodel.typeconverter\" data-linktype=\"relative-path\">TypeConverter</a> for the specified data type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_CodeDom_Compiler_CodeDomProvider_GetLanguageFromExtension_System_String_\" data-linktype=\"self-bookmark\">GetLanguageFromExtension(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a language name associated with the specified file name extension, as configured in the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> compiler configuration section.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_CodeDom_Compiler_CodeDomProvider_GetTypeOutput_System_CodeDom_CodeTypeReference_\" data-linktype=\"self-bookmark\">GetTypeOutput(CodeTypeReference)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the type indicated by the specified <a class=\"xref\" href=\"system.codedom.codetypereference\" data-linktype=\"relative-path\">CodeTypeReference</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_CodeDom_Compiler_CodeDomProvider_IsDefinedExtension_System_String_\" data-linktype=\"self-bookmark\">IsDefinedExtension(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Tests whether a file name extension has an associated <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementation configured on the computer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_CodeDom_Compiler_CodeDomProvider_IsDefinedLanguage_System_String_\" data-linktype=\"self-bookmark\">IsDefinedLanguage(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Tests whether a language has a <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementation configured on the computer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_CodeDom_Compiler_CodeDomProvider_IsValidIdentifier_System_String_\" data-linktype=\"self-bookmark\">IsValidIdentifier(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value that indicates whether the specified value is a valid identifier for the current language.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_CodeDom_Compiler_CodeDomProvider_Parse_System_IO_TextReader_\" data-linktype=\"self-bookmark\">Parse(TextReader)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compiles the code read from the specified text stream into a <a class=\"xref\" href=\"system.codedom.codecompileunit\" data-linktype=\"relative-path\">CodeCompileUnit</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_CodeDom_Compiler_CodeDomProvider_Supports_System_CodeDom_Compiler_GeneratorSupport_\" data-linktype=\"self-bookmark\">Supports(GeneratorSupport)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value indicating whether the specified code generation support is provided.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_CodeDom_Compiler_CodeDomProvider__ctor\">\r\n    \r\n            <a id=\"System_CodeDom_Compiler_CodeDomProvider__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CodeDomProvider()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected CodeDomProvider ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_CodeDom_Compiler_CodeDomProvider_FileExtension\">\r\n    \r\n            <a id=\"System_CodeDom_Compiler_CodeDomProvider_FileExtension_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FileExtension</div>        \r\n          </div>\r\n    \r\n            <p>Gets the default file name extension to use for source code files in the current language.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string FileExtension { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A file name extension corresponding to the extension of the source files of the current language. The base implementation always returns <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property is used by code generators and code compilers to indicate what file extensions should be generated or used.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates an instance of <a class=\"xref\" href=\"microsoft.visualbasic.vbcodeprovider\" data-linktype=\"relative-path\">Microsoft.VisualBasic.VBCodeProvider</a>. The example displays the provider name, hash code and default file name extension for the new provider instance.  </p>\n<pre><code class=\"lang-cpp\" name=\"CodeDom_CompilerInfo#3\">         // Get the provider for Microsoft.VisualBasic\n//         CodeDomProvider^ provider = CodeDomProvider.CreateProvider(&quot;VisualBasic&quot;);\n         CodeDomProvider^ provider = CodeDomProvider::CreateProvider(&quot;VisualBasic&quot;);\n         if ( provider ) // Display the Visual Basic language provider information.\n         {\n            Console::WriteLine( &quot;Visual Basic provider is {0}&quot;, provider-&gt;ToString() );\n            Console::WriteLine( &quot;  Provider hash code:     {0}&quot;, provider-&gt;GetHashCode().ToString() );\n            Console::WriteLine( &quot;  Default file extension: {0}&quot;, provider-&gt;FileExtension );\n         }\n</code></pre><pre><code class=\"lang-vb\" name=\"CodeDom_CompilerInfo#3\">         &#39; Get the provider for Microsoft.VisualBasic\n            Dim provider = CodeDomProvider.CreateProvider(&quot;VisualBasic&quot;)\n         \n         &#39; Display the Visual Basic language provider information.\n         Console.WriteLine(&quot;Visual Basic provider is {0}&quot;, _\n            provider.ToString())\n         Console.WriteLine(&quot;  Provider hash code:     {0}&quot;, _\n            provider.GetHashCode().ToString())\n         Console.WriteLine(&quot;  Default file extension: {0}&quot;, _\n            provider.FileExtension)\n         \n</code></pre><pre><code class=\"lang-cs\" name=\"CodeDom_CompilerInfo#3\">            // Get the provider for Microsoft.VisualBasic\n            CodeDomProvider provider = CodeDomProvider.CreateProvider(&quot;VisualBasic&quot;);\n\n            // Display the Visual Basic language provider information.\n            Console.WriteLine(&quot;Visual Basic provider is {0}&quot;, \n                provider.ToString());\n            Console.WriteLine(&quot;  Provider hash code:     {0}&quot;, \n                provider.GetHashCode().ToString());\n            Console.WriteLine(&quot;  Default file extension: {0}&quot;, \n                provider.FileExtension);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_CodeDom_Compiler_CodeDomProvider_LanguageOptions\">\r\n    \r\n            <a id=\"System_CodeDom_Compiler_CodeDomProvider_LanguageOptions_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LanguageOptions</div>        \r\n          </div>\r\n    \r\n            <p>Gets a language features identifier.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.CodeDom.Compiler.LanguageOptions LanguageOptions { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.compiler.languageoptions\" data-linktype=\"relative-path\">LanguageOptions</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.codedom.compiler.languageoptions\" data-linktype=\"relative-path\">LanguageOptions</a> that indicates special features of the language.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_CodeDom_Compiler_CodeDomProvider_CompileAssemblyFromDom_System_CodeDom_Compiler_CompilerParameters_System_CodeDom_CodeCompileUnit___\">\r\n    \r\n            <a id=\"System_CodeDom_Compiler_CodeDomProvider_CompileAssemblyFromDom_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CompileAssemblyFromDom(CompilerParameters,CodeCompileUnit[])</div>        \r\n          </div>\r\n    \r\n            <p>Compiles an assembly based on the <a class=\"xref\" href=\"system.codedom\" data-linktype=\"relative-path\">System.CodeDom</a> trees contained in the specified array of <a class=\"xref\" href=\"system.codedom.codecompileunit\" data-linktype=\"relative-path\">CodeCompileUnit</a> objects, using the specified compiler settings.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.CodeDom.Compiler.CompilerResults CompileAssemblyFromDom (System.CodeDom.Compiler.CompilerParameters options, System.CodeDom.CodeCompileUnit[] compilationUnits);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.compiler.compilerparameters\" data-linktype=\"relative-path\">CompilerParameters</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.codedom.compiler.compilerparameters\" data-linktype=\"relative-path\">CompilerParameters</a> object that indicates the settings for the compilation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>compilationUnits</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codecompileunit\" data-linktype=\"relative-path\">CodeCompileUnit</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of type <a class=\"xref\" href=\"system.codedom.codecompileunit\" data-linktype=\"relative-path\">CodeCompileUnit</a> that indicates the code to compile.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.compiler.compilerresults\" data-linktype=\"relative-path\">CompilerResults</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.codedom.compiler.compilerresults\" data-linktype=\"relative-path\">CompilerResults</a> object that indicates the results of the compilation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Neither this method nor the <span class=\"xref\">stem.CodeDom.Compiler.CodeDomProvider.CreateCompiler*</span> method is overridden in a derived class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework versions 1.0 and 1.1, this method is provided by the <a class=\"xref\" href=\"system.codedom.compiler.icodecompiler\" data-linktype=\"relative-path\">ICodeCompiler</a> implementation that is returned by the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_CreateCompiler_\" data-linktype=\"relative-path\">CreateCompiler</a> method of the provider. In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider. If the code provider does not override this method, the <a class=\"xref\" href=\"system.codedom.compiler.icodecompiler\" data-linktype=\"relative-path\">ICodeCompiler</a> implementation is called by the base class.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_CodeDom_Compiler_CodeDomProvider_CompileAssemblyFromFile_System_CodeDom_Compiler_CompilerParameters_System_String___\">\r\n    \r\n            <a id=\"System_CodeDom_Compiler_CodeDomProvider_CompileAssemblyFromFile_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CompileAssemblyFromFile(CompilerParameters,String[])</div>        \r\n          </div>\r\n    \r\n            <p>Compiles an assembly from the source code contained in the specified files, using the specified compiler settings.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.CodeDom.Compiler.CompilerResults CompileAssemblyFromFile (System.CodeDom.Compiler.CompilerParameters options, string[] fileNames);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.compiler.compilerparameters\" data-linktype=\"relative-path\">CompilerParameters</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.codedom.compiler.compilerparameters\" data-linktype=\"relative-path\">CompilerParameters</a> object that indicates the settings for the compilation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileNames</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of the names of the files to compile.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.compiler.compilerresults\" data-linktype=\"relative-path\">CompilerResults</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.codedom.compiler.compilerresults\" data-linktype=\"relative-path\">CompilerResults</a> object that indicates the results of compilation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Neither this method nor the <span class=\"xref\">stem.CodeDom.Compiler.CodeDomProvider.CreateCompiler*</span> method is overridden in a derived class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework versions 1.0 and 1.1, this method is provided by the <a class=\"xref\" href=\"system.codedom.compiler.icodecompiler\" data-linktype=\"relative-path\">ICodeCompiler</a> implementation that is returned by the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_CreateCompiler_\" data-linktype=\"relative-path\">CreateCompiler</a> method of the provider. In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider. If the code provider does not override this method, the <a class=\"xref\" href=\"system.codedom.compiler.icodecompiler\" data-linktype=\"relative-path\">ICodeCompiler</a> implementation is called by the base class.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_CodeDom_Compiler_CodeDomProvider_CompileAssemblyFromSource_System_CodeDom_Compiler_CompilerParameters_System_String___\">\r\n    \r\n            <a id=\"System_CodeDom_Compiler_CodeDomProvider_CompileAssemblyFromSource_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CompileAssemblyFromSource(CompilerParameters,String[])</div>        \r\n          </div>\r\n    \r\n            <p>Compiles an assembly from the specified array of strings containing source code, using the specified compiler settings.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.CodeDom.Compiler.CompilerResults CompileAssemblyFromSource (System.CodeDom.Compiler.CompilerParameters options, string[] sources);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.compiler.compilerparameters\" data-linktype=\"relative-path\">CompilerParameters</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.codedom.compiler.compilerparameters\" data-linktype=\"relative-path\">CompilerParameters</a> object that indicates the compiler settings for this compilation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>sources</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of source code strings to compile.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.compiler.compilerresults\" data-linktype=\"relative-path\">CompilerResults</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.codedom.compiler.compilerresults\" data-linktype=\"relative-path\">CompilerResults</a> object that indicates the results of compilation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Neither this method nor the <span class=\"xref\">stem.CodeDom.Compiler.CodeDomProvider.CreateCompiler*</span> method is overridden in a derived class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework versions 1.0 and 1.1, this method is provided by the <a class=\"xref\" href=\"system.codedom.compiler.icodecompiler\" data-linktype=\"relative-path\">ICodeCompiler</a> implementation that is returned by the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_CreateCompiler_\" data-linktype=\"relative-path\">CreateCompiler</a> method of the provider. In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider. If the code provider does not override this method, the <a class=\"xref\" href=\"system.codedom.compiler.icodecompiler\" data-linktype=\"relative-path\">ICodeCompiler</a> implementation is called by the base class.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_CodeDom_Compiler_CodeDomProvider_CreateCompiler\">\r\n    \r\n            <a id=\"System_CodeDom_Compiler_CodeDomProvider_CreateCompiler_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateCompiler()</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, creates a new code compiler.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract System.CodeDom.Compiler.ICodeCompiler CreateCompiler ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.compiler.icodecompiler\" data-linktype=\"relative-path\">ICodeCompiler</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.codedom.compiler.icodecompiler\" data-linktype=\"relative-path\">ICodeCompiler</a> that can be used for compilation of <a class=\"xref\" href=\"system.codedom\" data-linktype=\"relative-path\">System.CodeDom</a> based source code representations.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is obsolete in the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. The recommended alternative is to call the <a class=\"xref\" href=\"system.codedom.compiler.icodecompiler\" data-linktype=\"relative-path\">ICodeCompiler</a> methods that are directly available in the code provider.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_CodeDom_Compiler_CodeDomProvider_CreateEscapedIdentifier_System_String_\">\r\n    \r\n            <a id=\"System_CodeDom_Compiler_CodeDomProvider_CreateEscapedIdentifier_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateEscapedIdentifier(String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates an escaped identifier for the specified value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string CreateEscapedIdentifier (string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string for which to create an escaped identifier.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The escaped identifier for the value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Neither this method nor the <span class=\"xref\">stem.CodeDom.Compiler.CodeDomProvider.CreateGenerator*</span> method is overridden in a derived class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>CreateEscapedIdentifier tests whether the identifier conflicts with any reserved or language keywords, and if so, returns an equivalent name with language-specific escape code formatting. This is referred to an escaped identifier. The escaped identifier contains the same <code>value</code> but has escape-code formatting added to differentiate the identifier from the keyword. Two implementation examples are preceding the <code>value</code> with &quot;@&quot; or bracketing the `value` with &quot;[&quot; and &quot;]&quot;.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework versions 1.0 and 1.1, this method is provided by the <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> implementation that is returned by the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_CreateGenerator_\" data-linktype=\"relative-path\">CreateGenerator</a> method of the provider. In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider. If the code provider does not override this method, the <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> implementation is called by the base class.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_CodeDom_Compiler_CodeDomProvider_CreateGenerator\">\r\n    \r\n            <a id=\"System_CodeDom_Compiler_CodeDomProvider_CreateGenerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateGenerator()</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, creates a new code generator.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract System.CodeDom.Compiler.ICodeGenerator CreateGenerator ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> that can be used to generate <a class=\"xref\" href=\"system.codedom\" data-linktype=\"relative-path\">System.CodeDom</a> based source code representations.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is obsolete in the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->. The recommended alternative is to call the <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> methods that are directly available in the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_CodeDom_Compiler_CodeDomProvider_CreateGenerator_System_IO_TextWriter_\">\r\n    \r\n            <a id=\"System_CodeDom_Compiler_CodeDomProvider_CreateGenerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateGenerator(TextWriter)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, creates a new code generator using the specified <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> for output.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.CodeDom.Compiler.ICodeGenerator CreateGenerator (System.IO.TextWriter output);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>output</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> to use to output.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> that can be used to generate <a class=\"xref\" href=\"system.codedom\" data-linktype=\"relative-path\">System.CodeDom</a> based source code representations.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method uses the specified <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> for output. This method supports more optimized code generation that incrementally updates the source code.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The base class implementation calls the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_CreateGenerator_\" data-linktype=\"relative-path\">CreateGenerator</a> method, which is obsolete in the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE --> and results in a <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a> if an <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> object is not returned.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_CodeDom_Compiler_CodeDomProvider_CreateGenerator_System_String_\">\r\n    \r\n            <a id=\"System_CodeDom_Compiler_CodeDomProvider_CreateGenerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateGenerator(String)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, creates a new code generator using the specified file name for output.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.CodeDom.Compiler.ICodeGenerator CreateGenerator (string fileName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file name to output to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> that can be used to generate <a class=\"xref\" href=\"system.codedom\" data-linktype=\"relative-path\">System.CodeDom</a> based source code representations.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method uses the specified file name for output.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The base class implementation calls the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_CreateGenerator_\" data-linktype=\"relative-path\">CreateGenerator</a> method, which is obsolete in the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE --> and results in a <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a> if an <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> object is not returned.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_CodeDom_Compiler_CodeDomProvider_CreateParser\">\r\n    \r\n            <a id=\"System_CodeDom_Compiler_CodeDomProvider_CreateParser_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateParser()</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, creates a new code parser.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.CodeDom.Compiler.ICodeParser CreateParser ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.compiler.icodeparser\" data-linktype=\"relative-path\">ICodeParser</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.codedom.compiler.icodeparser\" data-linktype=\"relative-path\">ICodeParser</a> that can be used to parse source code. The base implementation always returns <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_CodeDom_Compiler_CodeDomProvider_CreateProvider_System_String_\">\r\n    \r\n            <a id=\"System_CodeDom_Compiler_CodeDomProvider_CreateProvider_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateProvider(String)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> instance for the specified language.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.CodeDom.Compiler.CodeDomProvider CreateProvider (string language);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>language</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The language name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a></div>\r\n                  </div>\r\n                  <p>A CodeDOM provider that is implemented for the specified language name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.configurationerrorsexception\" data-linktype=\"relative-path\">ConfigurationErrorsException</a></div>\r\n                  </div>\r\n                  <p>The <code>language</code> does not have a configured provider on this computer.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>language</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> This method is most commonly used to create an instance of a code provider in an application that may optionally use one of several providers. CreateProvider allows you to specify at run time the code provider you wish to instantiate. If you know at design time which code provider is to be used, you should create an instance of that code provider rather than use the CreateProvider method.  </p>\n</div>\n<p> The CreateProvider method returns a <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> instance for a specific language name; it is similar to calling the <a class=\"xref\" href=\"system.activator#System_Activator_CreateInstance_\" data-linktype=\"relative-path\">CreateInstance</a> method with the language provider type. Use CreateProvider when you want to dynamically find a configured provider implementation for a language name.  </p>\n<p> If more than one provider implementation is configured for the language name, CreateProvider returns a provider instance for the last matching configuration element.  </p>\n<p> Use the [Activator.CreateInstance(Type,â€‚BindingFlags,â€‚Binder,â€‚Object&lt;xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29?displayProperty=fullName&gt; method overload when you want a specific language provider implementation. For example, use the CreateProvider method to get a provider instance that supports the language name <code>&quot;CSharp&quot;</code>; use the [Activator.CreateInstance(Type,â€‚BindingFlags,â€‚Binder,â€‚Object&lt;xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29?displayProperty=fullName&gt; method overload to get a provider instance specifically for the <a class=\"xref\" href=\"microsoft.csharp.csharpcodeprovider\" data-linktype=\"relative-path\">Microsoft.CSharp.CSharpCodeProvider</a> implementation. You should use the [Activator.CreateInstance(Type,â€‚BindingFlags,â€‚Binder,â€‚Object[],â€‚CultureInfo,â€‚Object&lt;xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%2CSystem.Object%5B%5D%29?displayProperty=fullName&gt; method if you have multiple code providers for a language and you desire to instantiate a specific code provider.  </p>\n<p> The <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_IsDefinedLanguage_\" data-linktype=\"relative-path\">IsDefinedLanguage</a> method checks whether at least one provider implementation supports a specific language. You can validate a language name using <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_IsDefinedLanguage_\" data-linktype=\"relative-path\">IsDefinedLanguage</a> before passing it to CreateProvider. If you pass an unsupported language name to CreateProvider a <a class=\"xref\" href=\"system.configuration.configurationexception\" data-linktype=\"relative-path\">System.Configuration.ConfigurationException</a> is thrown.  </p>\n<p> The <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_GetAllCompilerInfo_\" data-linktype=\"relative-path\">GetAllCompilerInfo</a> method can be used to determine all <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementations on a computer, including additional implementations provided by developers and compiler vendors that are identified in the <a href=\"../Topic/%3Csystem.codedom%3E%20Element.md\" data-linktype=\"relative-path\">&amp;lt;system.codedom&amp;gt; Element</a> in the machine configuration file (Machine.config).  </p>\n<p> The CreateProvider method returns an instance of a <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementation for a specific language.  </p>\n<p> Language names are case-insensitive.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example determines the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementation for an input language and displays the configured settings for the language provider. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo\" data-linktype=\"relative-path\">CompilerInfo</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"CodeDom_CompilerInfo#6\">         CodeDomProvider^ provider = nullptr;\n         \n         // Check for a provider corresponding to the input language.  \n         if ( CodeDomProvider::IsDefinedLanguage( language ) )\n         {\n            provider = CodeDomProvider::CreateProvider( language );\n            if ( provider )\n            {\n               // Display information about this language provider.\n               Console::WriteLine( &quot;Language provider:  {0}&quot;, provider-&gt;ToString() );\n               Console::WriteLine();\n               Console::WriteLine( &quot;  Default file extension:  {0}&quot;, provider-&gt;FileExtension );\n               Console::WriteLine();\n               \n               // Get the compiler settings for this language.\n               CompilerInfo^ langCompilerInfo = CodeDomProvider::GetCompilerInfo( language );\n               if ( langCompilerInfo )\n               {\n                  CompilerParameters^ langCompilerConfig = langCompilerInfo-&gt;CreateDefaultCompilerParameters();\n                  if ( langCompilerConfig )\n                  {\n                     Console::WriteLine( &quot;  Compiler options:        {0}&quot;, langCompilerConfig-&gt;CompilerOptions );\n                     Console::WriteLine( &quot;  Compiler warning level:  {0}&quot;, langCompilerConfig-&gt;WarningLevel.ToString() );\n                  }\n               }\n            }\n         }\n\n         if ( provider == nullptr )  // Tell the user that the language provider was not found.\n            Console::WriteLine(  &quot;There is no provider configured for input language \\&quot;{0}\\&quot;.&quot;, language );\n</code></pre><pre><code class=\"lang-vb\" name=\"CodeDom_CompilerInfo#6\">         Dim provider As CodeDomProvider\n         \n         &#39; Check for a provider corresponding to the input language.  \n         If CodeDomProvider.IsDefinedLanguage(language) Then\n            provider = CodeDomProvider.CreateProvider(language)\n            \n            &#39; Display information about this language provider.\n            Console.WriteLine(&quot;Language provider:  {0}&quot;, _\n                provider.ToString())\n            Console.WriteLine()\n            Console.WriteLine(&quot;  Default file extension:  {0}&quot;, _\n                provider.FileExtension)\n            Console.WriteLine()\n            \n            &#39; Get the compiler settings for this language.\n            Dim langCompilerInfo As CompilerInfo = CodeDomProvider.GetCompilerInfo(language)\n            Dim langCompilerConfig As CompilerParameters = langCompilerInfo.CreateDefaultCompilerParameters()\n            \n            Console.WriteLine(&quot;  Compiler options:        {0}&quot;, _\n                langCompilerConfig.CompilerOptions)\n            Console.WriteLine(&quot;  Compiler warning level:  {0}&quot;, _\n                langCompilerConfig.WarningLevel)\n         Else\n            &#39; Tell the user that the language provider was not found.\n            Console.WriteLine(&quot;There is no provider configured for input language &quot;&quot;{0}&quot;&quot;.&quot;, _\n                language)\n         End If\n</code></pre><pre><code class=\"lang-cs\" name=\"CodeDom_CompilerInfo#6\">            CodeDomProvider provider;\n\n            // Check for a provider corresponding to the input language.  \n            if (CodeDomProvider.IsDefinedLanguage(language))\n            {\n                provider = CodeDomProvider.CreateProvider(language);\n\n                // Display information about this language provider.\n\n                Console.WriteLine(&quot;Language provider:  {0}&quot;, \n                    provider.ToString());\n                Console.WriteLine();\n                Console.WriteLine(&quot;  Default file extension:  {0}&quot;, \n                    provider.FileExtension);\n                Console.WriteLine();\n\n                // Get the compiler settings for this language.\n\n                CompilerInfo langCompilerInfo = CodeDomProvider.GetCompilerInfo(language);\n                CompilerParameters langCompilerConfig = langCompilerInfo.CreateDefaultCompilerParameters();\n            \n                Console.WriteLine(&quot;  Compiler options:        {0}&quot;, \n                    langCompilerConfig.CompilerOptions);\n                Console.WriteLine(&quot;  Compiler warning level:  {0}&quot;, \n                    langCompilerConfig.WarningLevel);\n            }\n            else\n            {\n                // Tell the user that the language provider was not found.\n                Console.WriteLine(&quot;There is no provider configured for input language \\&quot;{0}\\&quot;.&quot;, \n                    language);\n            }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_CodeDom_Compiler_CodeDomProvider_CreateProvider_System_String_System_Collections_Generic_IDictionary_System_String_System_String__\">\r\n    \r\n            <a id=\"System_CodeDom_Compiler_CodeDomProvider_CreateProvider_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateProvider(String,IDictionary&lt;String,String&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> instance for the specified language and provider options.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.CodeDom.Compiler.CodeDomProvider CreateProvider (string language, System.Collections.Generic.IDictionary&lt;string,string&gt; providerOptions);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>language</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The language name.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>providerOptions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.idictionary-2\" data-linktype=\"relative-path\">IDictionary</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>,<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A collection of provider options from the configuration file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a></div>\r\n                  </div>\r\n                  <p>A CodeDOM provider that is implemented for the specified language name and options.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> This method is most commonly used to create an instance of a code provider in an application that may optionally use one of several providers. CreateProvider enables you to specify at run time the version of the code provider you want to instantiate. If you know at design time which code provider is to be used, you should create an instance of that code provider instead of using the CreateProvider method.  </p>\n</div>\n<p> Use CreateProvider when you want to dynamically find a configured provider implementation for a specific language and options. Language names are case-insensitive. For information about supported provider options, see the specific CodeDOM provider documentation.  </p>\n<p> For information about validating a provider and calling a provider if more than one provider implementation is configured for the language name, see the Remarks section of the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_CreateProvider_System_String_\" data-linktype=\"relative-path\">CreateProvider(String)</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to create an instance of a provider by using the <code>providerOptions</code> parameter.  </p>\n<pre><code class=\"lang-vb\" name=\"CodeDomProvider.ProviderOptions#1\">Imports System\nImports System.CodeDom.Compiler\nImports Microsoft.CSharp\nImports Microsoft.VisualBasic\nImports System.Collections.Generic\n\n\n\nClass Program\n\n    Shared Sub Main(ByVal args() As String)\n        DisplayCSharpCompilerInfo()\n        DisplayVBCompilerInfo()\n        Console.WriteLine(&quot;Press Enter key to exit.&quot;)\n        Console.ReadLine()\n\n    End Sub &#39;Main\n\n    Shared Sub DisplayCSharpCompilerInfo()\n        Dim provOptions As New Dictionary(Of String, String)\n        provOptions.Add(&quot;CompilerVersion&quot;, &quot;v4&quot;)\n        &#39; Get the provider for Microsoft.CSharp\n        Dim provider As CodeDomProvider = CodeDomProvider.CreateProvider(&quot;CSharp&quot;, provOptions)\n\n        &#39; Display the C# language provider information.\n        Console.WriteLine(&quot;CSharp provider is {0}&quot;, provider.ToString())\n        Console.WriteLine(&quot;  Provider hash code:     {0}&quot;, provider.GetHashCode().ToString())\n        Console.WriteLine(&quot;  Default file extension: {0}&quot;, provider.FileExtension)\n\n        Console.WriteLine()\n\n    End Sub &#39;DisplayCSharpCompilerInfo\n\n\n    Shared Sub DisplayVBCompilerInfo()\n        Dim provOptions As New Dictionary(Of String, String)\n        provOptions.Add(&quot;CompilerVersion&quot;, &quot;v3.5&quot;)\n        &#39; Get the provider for Microsoft.VisualBasic\n        Dim provider As CodeDomProvider = CodeDomProvider.CreateProvider(&quot;VisualBasic&quot;, provOptions)\n\n        &#39; Display the Visual Basic language provider information.\n        Console.WriteLine(&quot;Visual Basic provider is {0}&quot;, provider.ToString())\n        Console.WriteLine(&quot;  Provider hash code:     {0}&quot;, provider.GetHashCode().ToString())\n        Console.WriteLine(&quot;  Default file extension: {0}&quot;, provider.FileExtension)\n\n        Console.WriteLine()\n\n    End Sub &#39;DisplayVBCompilerInfo\nEnd Class &#39;Program\n</code></pre><pre><code class=\"lang-cs\" name=\"CodeDomProvider.ProviderOptions#1\">using System;\nusing System.CodeDom.Compiler;\nusing Microsoft.CSharp;\nusing Microsoft.VisualBasic;\nusing System.Collections.Generic;\n\nnamespace ProviderOptions\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            DisplayCSharpCompilerInfo();\n            DisplayVBCompilerInfo();\n            Console.WriteLine(&quot;Press Enter key to exit.&quot;);\n            Console.ReadLine();\n        }\n        static void DisplayCSharpCompilerInfo()\n        {\n            Dictionary&lt;string, string&gt; provOptions =\n            new Dictionary&lt;string, string&gt;();\n\n            provOptions.Add(&quot;CompilerVersion&quot;, &quot;v4&quot;);\n            // Get the provider for Microsoft.CSharp\n            CodeDomProvider provider = CodeDomProvider.CreateProvider(&quot;CSharp&quot;, provOptions);\n\n            // Display the C# language provider information.\n            Console.WriteLine(&quot;CSharp provider is {0}&quot;,\n                provider.ToString());\n            Console.WriteLine(&quot;  Provider hash code:     {0}&quot;,\n                provider.GetHashCode().ToString());\n            Console.WriteLine(&quot;  Default file extension: {0}&quot;,\n                provider.FileExtension);\n\n            Console.WriteLine();\n        }\n\n        static void DisplayVBCompilerInfo()\n        {\n            Dictionary&lt;string, string&gt; provOptions =\n            new Dictionary&lt;string, string&gt;();\n\n            provOptions.Add(&quot;CompilerVersion&quot;, &quot;v3.5&quot;);\n            // Get the provider for Microsoft.VisualBasic\n            CodeDomProvider provider = CodeDomProvider.CreateProvider(&quot;VisualBasic&quot;, provOptions);\n\n            // Display the Visual Basic language provider information.\n            Console.WriteLine(&quot;Visual Basic provider is {0}&quot;,\n                provider.ToString());\n            Console.WriteLine(&quot;  Provider hash code:     {0}&quot;,\n                provider.GetHashCode().ToString());\n            Console.WriteLine(&quot;  Default file extension: {0}&quot;,\n                provider.FileExtension);\n\n            Console.WriteLine();\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_CodeDom_Compiler_CodeDomProvider_CreateValidIdentifier_System_String_\">\r\n    \r\n            <a id=\"System_CodeDom_Compiler_CodeDomProvider_CreateValidIdentifier_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateValidIdentifier(String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a valid identifier for the specified value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string CreateValidIdentifier (string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string for which to generate a valid identifier.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A valid identifier for the specified value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Neither this method nor the <span class=\"xref\">stem.CodeDom.Compiler.CodeDomProvider.CreateGenerator*</span> method is overridden in a derived class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>CreateValidIdentifier tests whether the identifier conflicts with reserved or language keywords, and if so, attempts to return a valid identifier name that does not conflict. Usually the returned identifier is only slightly modified to differentiate the identifier from the keyword; for example, the name might be preceded by the underscore (&quot;_&quot;) character.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework versions 1.0 and 1.1, this method is provided by the <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> implementation that is returned by the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_CreateGenerator_\" data-linktype=\"relative-path\">CreateGenerator</a> method of the provider. In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider. If the code provider does not override this method, the <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> implementation is called by the base class.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_CodeDom_Compiler_CodeDomProvider_GenerateCodeFromCompileUnit_System_CodeDom_CodeCompileUnit_System_IO_TextWriter_System_CodeDom_Compiler_CodeGeneratorOptions_\">\r\n    \r\n            <a id=\"System_CodeDom_Compiler_CodeDomProvider_GenerateCodeFromCompileUnit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GenerateCodeFromCompileUnit(CodeCompileUnit,TextWriter,CodeGeneratorOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Generates code for the specified Code Document Object Model (CodeDOM) compilation unit and sends it to the specified text writer, using the specified options.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void GenerateCodeFromCompileUnit (System.CodeDom.CodeCompileUnit compileUnit, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>compileUnit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codecompileunit\" data-linktype=\"relative-path\">CodeCompileUnit</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.codedom.codecompileunit\" data-linktype=\"relative-path\">CodeCompileUnit</a> for which to generate code.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>writer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> to which the output code is sent.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.compiler.codegeneratoroptions\" data-linktype=\"relative-path\">CodeGeneratorOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.codedom.compiler.codegeneratoroptions\" data-linktype=\"relative-path\">CodeGeneratorOptions</a> that indicates the options to use for generating code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Neither this method nor the <span class=\"xref\">stem.CodeDom.Compiler.CodeDomProvider.CreateGenerator*</span> method is overridden in a derived class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework versions 1.0 and 1.1, this method is provided by the <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> implementation that is returned by the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_CreateGenerator_\" data-linktype=\"relative-path\">CreateGenerator</a> method of the provider. In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider. If the code provider does not override this method, the <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> implementation is called by the base class.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows the use of the GenerateCodeFromCompileUnit method to generate code for a &quot;Hello World&quot; application from a <a class=\"xref\" href=\"system.codedom.codecompileunit\" data-linktype=\"relative-path\">CodeCompileUnit</a>. This example is part of a larger example provided for the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"CodeDomExample#3\">        static void GenerateCode( CodeDomProvider^ provider, CodeCompileUnit^ compileunit )\n        {\n            // Build the source file name with the appropriate\n            // language extension.\n            String^ sourceFile;\n            if ( provider-&gt;FileExtension-&gt;StartsWith( &quot;.&quot; ) )\n            {\n                sourceFile = String::Concat( &quot;TestGraph&quot;, provider-&gt;FileExtension );\n            }\n            else\n            {\n                sourceFile = String::Concat( &quot;TestGraph.&quot;, provider-&gt;FileExtension );\n            }\n\n            // Create an IndentedTextWriter, constructed with\n            // a StreamWriter to the source file.\n            IndentedTextWriter^ tw = gcnew IndentedTextWriter( gcnew StreamWriter( sourceFile,false ),&quot;    &quot; );\n\n            // Generate source code using the code generator.\n            provider-&gt;GenerateCodeFromCompileUnit( compileunit, tw, gcnew CodeGeneratorOptions );\n\n            // Close the output file.\n            tw-&gt;Close();\n        }\n</code></pre><pre><code class=\"lang-cs\" name=\"CodeDomExample#3\">        public static void GenerateCode(CodeDomProvider provider,\n            CodeCompileUnit compileunit)\n        {\n            // Build the source file name with the appropriate\n            // language extension.\n            String sourceFile;\n            if (provider.FileExtension[0] == &#39;.&#39;)\n            {\n                sourceFile = &quot;TestGraph&quot; + provider.FileExtension;\n            }\n            else\n            {\n                sourceFile = &quot;TestGraph.&quot; + provider.FileExtension;\n            }\n\n            // Create an IndentedTextWriter, constructed with\n            // a StreamWriter to the source file.\n            IndentedTextWriter tw = new IndentedTextWriter(new StreamWriter(sourceFile, false), &quot;    &quot;);\n            // Generate source code using the code generator.\n            provider.GenerateCodeFromCompileUnit(compileunit, tw, new CodeGeneratorOptions());\n            // Close the output file.\n            tw.Close();\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"CodeDomExample#3\">        Public Shared Sub GenerateCode(ByVal provider As CodeDomProvider, ByVal compileunit As CodeCompileUnit)\n\n            &#39; Build the source file name with the appropriate\n            &#39; language extension.\n            Dim sourceFile As String\n            If provider.FileExtension.StartsWith(&quot;.&quot;) Then\n                sourceFile = &quot;TestGraph&quot; + provider.FileExtension\n            Else\n                sourceFile = &quot;TestGraph.&quot; + provider.FileExtension\n            End If\n\n            &#39; Create an IndentedTextWriter, constructed with\n            &#39; a StreamWriter to the source file.\n            Dim tw As New IndentedTextWriter(New StreamWriter(sourceFile, False), &quot;    &quot;)\n            &#39; Generate source code using the code generator.\n            provider.GenerateCodeFromCompileUnit(compileunit, tw, New CodeGeneratorOptions())\n            &#39; Close the output file.\n            tw.Close()\n        End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_CodeDom_Compiler_CodeDomProvider_GenerateCodeFromExpression_System_CodeDom_CodeExpression_System_IO_TextWriter_System_CodeDom_Compiler_CodeGeneratorOptions_\">\r\n    \r\n            <a id=\"System_CodeDom_Compiler_CodeDomProvider_GenerateCodeFromExpression_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GenerateCodeFromExpression(CodeExpression,TextWriter,CodeGeneratorOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Generates code for the specified Code Document Object Model (CodeDOM) expression and sends it to the specified text writer, using the specified options.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void GenerateCodeFromExpression (System.CodeDom.CodeExpression expression, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codeexpression\" data-linktype=\"relative-path\">CodeExpression</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.codedom.codeexpression\" data-linktype=\"relative-path\">CodeExpression</a> object that indicates the expression for which to generate code.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>writer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> to which output code is sent.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.compiler.codegeneratoroptions\" data-linktype=\"relative-path\">CodeGeneratorOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.codedom.compiler.codegeneratoroptions\" data-linktype=\"relative-path\">CodeGeneratorOptions</a> that indicates the options to use for generating code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Neither this method nor the <span class=\"xref\">stem.CodeDom.Compiler.CodeDomProvider.CreateGenerator*</span> method is overridden in a derived class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework versions 1.0 and 1.1, this method is provided by the <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> implementation that is returned by the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_CreateGenerator_\" data-linktype=\"relative-path\">CreateGenerator</a> method of the provider. In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider. If the code provider does not override this method, the <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> implementation is called by the base class.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_CodeDom_Compiler_CodeDomProvider_GenerateCodeFromMember_System_CodeDom_CodeTypeMember_System_IO_TextWriter_System_CodeDom_Compiler_CodeGeneratorOptions_\">\r\n    \r\n            <a id=\"System_CodeDom_Compiler_CodeDomProvider_GenerateCodeFromMember_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GenerateCodeFromMember(CodeTypeMember,TextWriter,CodeGeneratorOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Generates code for the specified Code Document Object Model (CodeDOM) member declaration and sends it to the specified text writer, using the specified options.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void GenerateCodeFromMember (System.CodeDom.CodeTypeMember member, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>member</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codetypemember\" data-linktype=\"relative-path\">CodeTypeMember</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.codedom.codetypemember\" data-linktype=\"relative-path\">CodeTypeMember</a> object that indicates the member for which to generate code.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>writer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> to which output code is sent.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.compiler.codegeneratoroptions\" data-linktype=\"relative-path\">CodeGeneratorOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.codedom.compiler.codegeneratoroptions\" data-linktype=\"relative-path\">CodeGeneratorOptions</a> that indicates the options to use for generating code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>This method is not overridden in a derived class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The base class implementation throws a <a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a>. See <a class=\"xref\" href=\"microsoft.csharp.csharpcodeprovider#Microsoft_CSharp_CSharpCodeProvider_GenerateCodeFromMember_\" data-linktype=\"relative-path\">GenerateCodeFromMember</a> for documentation describing an implementation of this method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows the use of the GenerateCodeFromMember method as implemented by the <a class=\"xref\" href=\"microsoft.csharp.csharpcodeprovider\" data-linktype=\"relative-path\">CSharpCodeProvider</a> and <a class=\"xref\" href=\"microsoft.visualbasic.vbcodeprovider\" data-linktype=\"relative-path\">VBCodeProvider</a> classes.  </p>\n<pre><code class=\"lang-cs\" name=\"CodeDom_GenerateCodeFromMember#1\">using System;\nusing System.CodeDom;\nusing System.CodeDom.Compiler;\nusing System.IO;\nusing System.Text.RegularExpressions;\n\nnamespace BasicCodeDomApp\n{\n    class Program\n    {\n        static string providerName = &quot;cs&quot;;\n        static string sourceFileName = &quot;test.cs&quot;;\n        static CodeSnippetTypeMember snippetMethod;\n        static void Main(string[] args)\n        {\n            CodeDomProvider provider = CodeDomProvider.CreateProvider(providerName);\n\n            // Create a code snippet to be used in the graph.\n            GenCodeFromMember(provider, new CodeGeneratorOptions());\n\n            LogMessage(&quot;Building CodeDOM graph...&quot;);\n\n            CodeCompileUnit cu = new CodeCompileUnit();\n\n            cu = BuildClass1();\n\n            StringWriter sw = new StringWriter();\n\n            LogMessage(&quot;Generating code...&quot;);\n            provider.GenerateCodeFromCompileUnit(cu, sw, null);\n\n            string output = sw.ToString();\n\n            LogMessage(&quot;Dumping source...&quot;);\n            LogMessage(output);\n\n            LogMessage(&quot;Writing source to file...&quot;);\n            Stream s = File.Open(sourceFileName, FileMode.Create);\n            StreamWriter t = new StreamWriter(s);\n            t.Write(output);\n            t.Close();\n            s.Close();\n\n            CompilerParameters opt = new CompilerParameters(new string[]{\n                                      &quot;System.dll&quot; });\n            opt.GenerateExecutable = false;\n            opt.OutputAssembly = &quot;Sample.dll&quot;;\n\n            CompilerResults results;\n\n            LogMessage(&quot;Compiling with &quot; + providerName);\n            results = provider.CompileAssemblyFromFile(opt, sourceFileName);\n\n            OutputResults(results);\n            if (results.NativeCompilerReturnValue != 0)\n            {\n                LogMessage(&quot;&quot;);\n                LogMessage(&quot;Compilation failed.&quot;);\n            }\n            else\n            {\n                LogMessage(&quot;&quot;);\n                LogMessage(&quot;Demo completed successfully.&quot;);\n            }\n            File.Delete(sourceFileName);\n        }\n\n        // Build a library program graph using \n        // System.CodeDom types.\n        public static CodeCompileUnit BuildClass1()\n        {\n            // Create a new CodeCompileUnit to contain \n            // the program graph.\n            CodeCompileUnit compileUnit = new CodeCompileUnit();\n\n            // Declare a new namespace called Samples.\n            CodeNamespace samples = new CodeNamespace(&quot;Samples&quot;);\n            // Add the new namespace to the compile unit.\n            compileUnit.Namespaces.Add(samples);\n\n            // Add the new namespace import for the System namespace.\n            samples.Imports.Add(new CodeNamespaceImport(&quot;System&quot;));\n\n            // Declare a new type called Class1.\n            CodeTypeDeclaration class1 = new CodeTypeDeclaration(&quot;Class1&quot;);\n\n            // Add the new type to the namespace type collection.\n            samples.Types.Add(class1);\n\n            class1.Members.Add(snippetMethod);\n\n            return compileUnit;\n        }\n        static void LogMessage(string text)\n        {\n            Console.WriteLine(text);\n        }\n\n        static void OutputResults(CompilerResults results)\n        {\n            LogMessage(&quot;NativeCompilerReturnValue=&quot; +\n                results.NativeCompilerReturnValue.ToString());\n            foreach (string s in results.Output)\n            {\n                LogMessage(s);\n            }\n        }\n        static void GenCodeFromMember(CodeDomProvider provider, CodeGeneratorOptions options)\n        {\n            options.BracingStyle = &quot;C&quot;;\n            CodeMemberMethod method1 = new CodeMemberMethod();\n            method1.Name = &quot;ReturnString&quot;;\n            method1.Attributes = MemberAttributes.Public;\n            method1.ReturnType = new CodeTypeReference(&quot;System.String&quot;);\n            method1.Parameters.Add(new CodeParameterDeclarationExpression(&quot;System.String&quot;, &quot;text&quot;));\n            method1.Statements.Add(new CodeMethodReturnStatement(new CodeArgumentReferenceExpression(&quot;text&quot;)));\n            StringWriter sw = new StringWriter();\n            provider.GenerateCodeFromMember(method1, sw, options);\n            snippetMethod = new CodeSnippetTypeMember(sw.ToString());\n        }\n\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"CodeDom_GenerateCodeFromMember#1\">Imports System\nImports System.CodeDom\nImports System.CodeDom.Compiler\nImports System.IO\nImports System.Text.RegularExpressions\n\n\n\nClass Program\n    Private Shared providerName As String = &quot;vb&quot;\n    Private Shared sourceFileName As String = &quot;test.vb&quot;\n    Private Shared snippetMethod As CodeSnippetTypeMember\n    \n    Shared Sub Main(ByVal args() As String) \n        Dim provider As CodeDomProvider = CodeDomProvider.CreateProvider(providerName)\n        \n        &#39; Create a code snippet to be used in the graph.\n        GenCodeFromMember(provider, New CodeGeneratorOptions())\n        \n        LogMessage(&quot;Building CodeDOM graph...&quot;)\n        \n        Dim cu As New CodeCompileUnit()\n        \n        cu = BuildClass1()\n        \n        Dim sw As New StringWriter()\n        \n        LogMessage(&quot;Generating code...&quot;)\n        provider.GenerateCodeFromCompileUnit(cu, sw, Nothing)\n        \n        Dim output As String = sw.ToString()\n        \n        LogMessage(&quot;Dumping source...&quot;)\n        LogMessage(output)\n        \n        LogMessage(&quot;Writing source to file...&quot;)\n        Dim s As Stream = File.Open(sourceFileName, FileMode.Create)\n        Dim t As New StreamWriter(s)\n        t.Write(output)\n        t.Close()\n        s.Close()\n        \n        Dim opt As New CompilerParameters(New String() {&quot;System.dll&quot;})\n        opt.GenerateExecutable = False\n        opt.OutputAssembly = &quot;Sample.dll&quot;\n        \n        Dim results As CompilerResults\n        \n        LogMessage((&quot;Compiling with &quot; + providerName))\n        results = provider.CompileAssemblyFromFile(opt, sourceFileName)\n        \n        OutputResults(results)\n        If results.NativeCompilerReturnValue &lt;&gt; 0 Then\n            LogMessage(&quot;&quot;)\n            LogMessage(&quot;Compilation failed.&quot;)\n        Else\n            LogMessage(&quot;&quot;)\n            LogMessage(&quot;Demo completed successfully.&quot;)\n        End If\n        File.Delete(sourceFileName)\n    \n    End Sub &#39;Main\n    \n    \n    &#39; Build a library program graph using \n    &#39; System.CodeDom types.\n    Public Shared Function BuildClass1() As CodeCompileUnit \n        &#39; Create a new CodeCompileUnit to contain \n        &#39; the program graph.\n        Dim compileUnit As New CodeCompileUnit()\n        \n        &#39; Declare a new namespace called Samples.\n        Dim samples As New CodeNamespace(&quot;Samples&quot;)\n        &#39; Add the new namespace to the compile unit.\n        compileUnit.Namespaces.Add(samples)\n        \n        &#39; Add the new namespace import for the System namespace.\n        samples.Imports.Add(New CodeNamespaceImport(&quot;System&quot;))\n        \n        &#39; Declare a new type called Class1.\n        Dim class1 As New CodeTypeDeclaration(&quot;Class1&quot;)\n        \n        &#39; Add the new type to the namespace type collection.\n        samples.Types.Add(class1)\n        \n        class1.Members.Add(snippetMethod)\n        \n        Return compileUnit\n    \n    End Function &#39;BuildClass1\n    \n    Shared Sub LogMessage(ByVal [text] As String) \n        Console.WriteLine([text])\n    \n    End Sub &#39;LogMessage\n    \n    \n    Shared Sub OutputResults(ByVal results As CompilerResults) \n        LogMessage((&quot;NativeCompilerReturnValue=&quot; + results.NativeCompilerReturnValue.ToString()))\n        Dim s As String\n        For Each s In  results.Output\n            LogMessage(s)\n        Next s\n    \n    End Sub &#39;OutputResults\n    \n    Shared Sub GenCodeFromMember(ByVal provider As CodeDomProvider, ByVal options As CodeGeneratorOptions) \n        options.BracingStyle = &quot;C&quot;\n        Dim method1 As New CodeMemberMethod()\n        method1.Name = &quot;ReturnString&quot;\n        method1.Attributes = MemberAttributes.Public\n        method1.ReturnType = New CodeTypeReference(&quot;System.String&quot;)\n        method1.Parameters.Add(New CodeParameterDeclarationExpression(&quot;System.String&quot;, &quot;text&quot;))\n        method1.Statements.Add(New CodeMethodReturnStatement(New CodeArgumentReferenceExpression(&quot;text&quot;)))\n        Dim sw As New StringWriter()\n        provider.GenerateCodeFromMember(method1, sw, options)\n        snippetMethod = New CodeSnippetTypeMember(sw.ToString())\n    \n    End Sub &#39;GenCodeFromMember\nEnd Class &#39;Program \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_CodeDom_Compiler_CodeDomProvider_GenerateCodeFromNamespace_System_CodeDom_CodeNamespace_System_IO_TextWriter_System_CodeDom_Compiler_CodeGeneratorOptions_\">\r\n    \r\n            <a id=\"System_CodeDom_Compiler_CodeDomProvider_GenerateCodeFromNamespace_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GenerateCodeFromNamespace(CodeNamespace,TextWriter,CodeGeneratorOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Generates code for the specified Code Document Object Model (CodeDOM) namespace and sends it to the specified text writer, using the specified options.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void GenerateCodeFromNamespace (System.CodeDom.CodeNamespace codeNamespace, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>codeNamespace</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codenamespace\" data-linktype=\"relative-path\">CodeNamespace</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.codedom.codenamespace\" data-linktype=\"relative-path\">CodeNamespace</a> object that indicates the namespace for which to generate code.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>writer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> to which output code is sent.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.compiler.codegeneratoroptions\" data-linktype=\"relative-path\">CodeGeneratorOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.codedom.compiler.codegeneratoroptions\" data-linktype=\"relative-path\">CodeGeneratorOptions</a> that indicates the options to use for generating code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Neither this method nor the <span class=\"xref\">stem.CodeDom.Compiler.CodeDomProvider.CreateGenerator*</span> method is overridden in a derived class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework versions 1.0 and 1.1, this method is provided by the <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> implementation that is returned by the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_CreateGenerator_\" data-linktype=\"relative-path\">CreateGenerator</a> method of the provider. In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider. If the code provider does not override this method, the <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> implementation is called by the base class.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_CodeDom_Compiler_CodeDomProvider_GenerateCodeFromStatement_System_CodeDom_CodeStatement_System_IO_TextWriter_System_CodeDom_Compiler_CodeGeneratorOptions_\">\r\n    \r\n            <a id=\"System_CodeDom_Compiler_CodeDomProvider_GenerateCodeFromStatement_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GenerateCodeFromStatement(CodeStatement,TextWriter,CodeGeneratorOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Generates code for the specified Code Document Object Model (CodeDOM) statement and sends it to the specified text writer, using the specified options.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void GenerateCodeFromStatement (System.CodeDom.CodeStatement statement, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>statement</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codestatement\" data-linktype=\"relative-path\">CodeStatement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.codedom.codestatement\" data-linktype=\"relative-path\">CodeStatement</a> containing the CodeDOM elements for which to generate code.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>writer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> to which output code is sent.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.compiler.codegeneratoroptions\" data-linktype=\"relative-path\">CodeGeneratorOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.codedom.compiler.codegeneratoroptions\" data-linktype=\"relative-path\">CodeGeneratorOptions</a> that indicates the options to use for generating code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Neither this method nor the <span class=\"xref\">stem.CodeDom.Compiler.CodeDomProvider.CreateGenerator*</span> method is overridden in a derived class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework versions 1.0 and 1.1, this method is provided by the <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> implementation that is returned by the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_CreateGenerator_\" data-linktype=\"relative-path\">CreateGenerator</a> method of the provider. In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider. If the code provider does not override this method, the <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> implementation is called by the base class.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_CodeDom_Compiler_CodeDomProvider_GenerateCodeFromType_System_CodeDom_CodeTypeDeclaration_System_IO_TextWriter_System_CodeDom_Compiler_CodeGeneratorOptions_\">\r\n    \r\n            <a id=\"System_CodeDom_Compiler_CodeDomProvider_GenerateCodeFromType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GenerateCodeFromType(CodeTypeDeclaration,TextWriter,CodeGeneratorOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Generates code for the specified Code Document Object Model (CodeDOM) type declaration and sends it to the specified text writer, using the specified options.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void GenerateCodeFromType (System.CodeDom.CodeTypeDeclaration codeType, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>codeType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codetypedeclaration\" data-linktype=\"relative-path\">CodeTypeDeclaration</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.codedom.codetypedeclaration\" data-linktype=\"relative-path\">CodeTypeDeclaration</a> object that indicates the type for which to generate code.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>writer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> to which output code is sent.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.compiler.codegeneratoroptions\" data-linktype=\"relative-path\">CodeGeneratorOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.codedom.compiler.codegeneratoroptions\" data-linktype=\"relative-path\">CodeGeneratorOptions</a> that indicates the options to use for generating code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Neither this method nor the <span class=\"xref\">stem.CodeDom.Compiler.CodeDomProvider.CreateGenerator*</span> method is overridden in a derived class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework versions 1.0 and 1.1, this method is provided by the <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> implementation that is returned by the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_CreateGenerator_\" data-linktype=\"relative-path\">CreateGenerator</a> method of the provider. In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider. If the code provider does not override this method, the <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> implementation is called by the base class.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_CodeDom_Compiler_CodeDomProvider_GetAllCompilerInfo\">\r\n    \r\n            <a id=\"System_CodeDom_Compiler_CodeDomProvider_GetAllCompilerInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAllCompilerInfo()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the language provider and compiler configuration settings for this computer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.CodeDom.Compiler.CompilerInfo[] GetAllCompilerInfo ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.compiler.compilerinfo\" data-linktype=\"relative-path\">CompilerInfo</a>[]</div>\r\n                  </div>\r\n                  <p>An array of type <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo\" data-linktype=\"relative-path\">CompilerInfo</a> representing the settings of all configured <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementations.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the GetAllCompilerInfo method to enumerate the language provider settings on a computer.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->, the default language providers supplied by the .NET Framework are not specified in the <a href=\"../Topic/%3Csystem.codedom%3E%20Element.md\" data-linktype=\"relative-path\">&amp;lt;system.codedom&amp;gt; Element</a> compiler configuration section and cannot be removed, so this method returns information about the default providers and any specified in the configuration file.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example enumerates the language providers on the computer and displays the configuration and compiler settings for each language provider. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo\" data-linktype=\"relative-path\">CompilerInfo</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"CodeDom_CompilerInfo#8\">         array&lt;CompilerInfo^&gt;^allCompilerInfo = CodeDomProvider::GetAllCompilerInfo();\n         for ( int i = 0; i &lt; allCompilerInfo-&gt;Length; i++ )\n         {\n            String^ defaultLanguage;\n            String^ defaultExtension;\n            CompilerInfo^ info = allCompilerInfo[ i ];\n            CodeDomProvider^ provider = nullptr;\n            if ( info )\n               provider = info-&gt;CreateProvider();\n\n            if ( provider )\n            {\n               // Display information about this configured provider.\n               Console::WriteLine( &quot;Language provider:  {0}&quot;, provider-&gt;ToString() );\n               Console::WriteLine();\n               Console::WriteLine( &quot;  Supported file extension(s):&quot; );\n               array&lt;String^&gt;^extensions = info-&gt;GetExtensions();\n               for ( int i = 0; i &lt; extensions-&gt;Length; i++ )\n                   Console::WriteLine( &quot;    {0}&quot;, extensions[ i ] );\n\n               defaultExtension = provider-&gt;FileExtension;\n               if (  !defaultExtension-&gt;StartsWith( &quot;.&quot; ) )\n                   defaultExtension = String::Concat( &quot;.&quot;, defaultExtension );\n\n               Console::WriteLine( &quot;  Default file extension:  {0}<br>&quot;, defaultExtension );\n               Console::WriteLine( &quot;  Supported language(s):&quot; );\n               array&lt;String^&gt;^languages = info-&gt;GetLanguages();\n               for ( int i = 0; i &lt; languages-&gt;Length; i++ )\n                   Console::WriteLine( &quot;    {0}&quot;, languages[ i ] );\n\n               defaultLanguage = CodeDomProvider::GetLanguageFromExtension( defaultExtension );\n               Console::WriteLine(  &quot;  Default language:        {0}&quot;, defaultLanguage );\n               Console::WriteLine();\n               \n               // Get the compiler settings for this provider.\n               CompilerParameters^ langCompilerConfig = info-&gt;CreateDefaultCompilerParameters();\n               if ( langCompilerConfig )\n               {\n                  Console::WriteLine( &quot;  Compiler options:        {0}&quot;, langCompilerConfig-&gt;CompilerOptions );\n                  Console::WriteLine( &quot;  Compiler warning level:  {0}&quot;, langCompilerConfig-&gt;WarningLevel.ToString() );\n               }\n            }\n\n         }\n</code></pre><pre><code class=\"lang-vb\" name=\"CodeDom_CompilerInfo#8\">         Dim allCompilerInfo As CompilerInfo() = CodeDomProvider.GetAllCompilerInfo()\n         Dim info As CompilerInfo\n         For Each info In  allCompilerInfo\n\n            Dim defaultLanguage As String\n            Dim defaultExtension As String\n\n            Dim provider As CodeDomProvider = info.CreateProvider()\n            \n            &#39; Display information about this configured provider.\n            Console.WriteLine(&quot;Language provider:  {0}&quot;, _\n                provider.ToString())\n            Console.WriteLine()\n            \n            Console.WriteLine(&quot;  Supported file extension(s):&quot;)\n            Dim extension As String\n            For Each extension In info.GetExtensions()\n               Console.WriteLine(&quot;    {0}&quot;, extension)\n            Next extension\n            \n            defaultExtension = provider.FileExtension\n            If Not defaultExtension.StartsWith(&quot;.&quot;) Then\n               defaultExtension = &quot;.&quot; + defaultExtension\n            End If\n \n            Console.WriteLine(&quot;  Default file extension:  {0}&quot;, _\n              defaultExtension)\n            Console.WriteLine()\n            \n            Console.WriteLine(&quot;  Supported language(s):&quot;)\n            Dim language As String\n            For Each language In  info.GetLanguages()\n               Console.WriteLine(&quot;    {0}&quot;, language)\n            Next language\n            defaultLanguage = CodeDomProvider.GetLanguageFromExtension(defaultExtension)\n            Console.WriteLine(&quot;  Default language:        {0}&quot;, _\n               defaultLanguage)\n            Console.WriteLine()\n            \n            &#39; Get the compiler settings for this provider.\n            Dim langCompilerConfig As CompilerParameters = info.CreateDefaultCompilerParameters()\n            \n            Console.WriteLine(&quot;  Compiler options:        {0}&quot;, _\n                langCompilerConfig.CompilerOptions)\n            Console.WriteLine(&quot;  Compiler warning level:  {0}&quot;, _\n                langCompilerConfig.WarningLevel)\n            Console.WriteLine()\n         Next info\n</code></pre><pre><code class=\"lang-cs\" name=\"CodeDom_CompilerInfo#8\">            CompilerInfo [] allCompilerInfo = CodeDomProvider.GetAllCompilerInfo();\n            foreach (CompilerInfo info in allCompilerInfo)\n            {\n                String defaultLanguage;\n                String defaultExtension;\n\n                CodeDomProvider provider = info.CreateProvider();\n\n                // Display information about this configured provider.\n\n                Console.WriteLine(&quot;Language provider:  {0}&quot;, \n                    provider.ToString());\n                Console.WriteLine();\n         \n                Console.WriteLine(&quot;  Supported file extension(s):&quot;);\n                foreach(String extension in info.GetExtensions())\n                { \n                    Console.WriteLine(&quot;    {0}&quot;, extension);\n                }\n   \n                defaultExtension = provider.FileExtension;\n                if (defaultExtension[0] != &#39;.&#39;)\n                {\n                    defaultExtension = &quot;.&quot; + defaultExtension;\n                }\n                Console.WriteLine(&quot;  Default file extension:  {0}&quot;, \n                    defaultExtension);\n                Console.WriteLine();\n\n                Console.WriteLine(&quot;  Supported language(s):&quot;);\n                foreach(String language in info.GetLanguages())\n                { \n                    Console.WriteLine(&quot;    {0}&quot;, language);\n                }\n\n                defaultLanguage = CodeDomProvider.GetLanguageFromExtension(defaultExtension);\n                Console.WriteLine(&quot;  Default language:        {0}&quot;,\n                    defaultLanguage);\n                Console.WriteLine();\n\n                // Get the compiler settings for this provider.\n                CompilerParameters langCompilerConfig = info.CreateDefaultCompilerParameters();\n            \n                Console.WriteLine(&quot;  Compiler options:        {0}&quot;, \n                    langCompilerConfig.CompilerOptions);\n                Console.WriteLine(&quot;  Compiler warning level:  {0}&quot;, \n                    langCompilerConfig.WarningLevel);\n                Console.WriteLine();\n            }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_CodeDom_Compiler_CodeDomProvider_GetCompilerInfo_System_String_\">\r\n    \r\n            <a id=\"System_CodeDom_Compiler_CodeDomProvider_GetCompilerInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCompilerInfo(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the language provider and compiler configuration settings for the specified language.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.CodeDom.Compiler.CompilerInfo GetCompilerInfo (string language);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>language</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A language name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.compiler.compilerinfo\" data-linktype=\"relative-path\">CompilerInfo</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo\" data-linktype=\"relative-path\">CompilerInfo</a> object populated with settings of the configured <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.configurationexception\" data-linktype=\"relative-path\">ConfigurationException</a></div>\r\n                  </div>\r\n                  <p>The <code>language</code> does not have a configured provider on this computer.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.configurationerrorsexception\" data-linktype=\"relative-path\">ConfigurationErrorsException</a></div>\r\n                  </div>\r\n                  <p>The <code>language</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a href=\"../Topic/%3Csystem.codedom%3E%20Element.md\" data-linktype=\"relative-path\">&amp;lt;system.codedom&amp;gt; Element</a> in the machine configuration file contains the language provider and compiler configuration settings for each <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementation on the computer. For information about machine configuration files, see the Machine Configuration Files section in <a href=\"../Topic/Configuring%20Apps%20by%20using%20Configuration%20Files.md\" data-linktype=\"relative-path\">Configuring Apps</a>. The GetCompilerInfo method searches each provider configuration element for the specified language name. The returned <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo\" data-linktype=\"relative-path\">CompilerInfo</a> instance contains the configured language provider and compiler settings.  </p>\n<p> The <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_IsDefinedLanguage_\" data-linktype=\"relative-path\">IsDefinedLanguage</a> method checks whether at least one provider implementation supports a specific language. You can validate a language name using <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_IsDefinedLanguage_\" data-linktype=\"relative-path\">IsDefinedLanguage</a> before passing it to GetCompilerInfo. This prevents throwing a <a class=\"xref\" href=\"system.configuration.configurationexception\" data-linktype=\"relative-path\">System.Configuration.ConfigurationException</a> when you access the <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo\" data-linktype=\"relative-path\">CompilerInfo</a> instance for an unsupported language name.  </p>\n<p> If more than one provider implementation is configured for the input language name, GetCompilerInfo returns the settings from the last matching provider configuration element.  </p>\n<p> Language names are case-insensitive.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example determines the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementation for an input language and displays the configured settings for the language provider. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo\" data-linktype=\"relative-path\">CompilerInfo</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"CodeDom_CompilerInfo#6\">         CodeDomProvider^ provider = nullptr;\n         \n         // Check for a provider corresponding to the input language.  \n         if ( CodeDomProvider::IsDefinedLanguage( language ) )\n         {\n            provider = CodeDomProvider::CreateProvider( language );\n            if ( provider )\n            {\n               // Display information about this language provider.\n               Console::WriteLine( &quot;Language provider:  {0}&quot;, provider-&gt;ToString() );\n               Console::WriteLine();\n               Console::WriteLine( &quot;  Default file extension:  {0}&quot;, provider-&gt;FileExtension );\n               Console::WriteLine();\n               \n               // Get the compiler settings for this language.\n               CompilerInfo^ langCompilerInfo = CodeDomProvider::GetCompilerInfo( language );\n               if ( langCompilerInfo )\n               {\n                  CompilerParameters^ langCompilerConfig = langCompilerInfo-&gt;CreateDefaultCompilerParameters();\n                  if ( langCompilerConfig )\n                  {\n                     Console::WriteLine( &quot;  Compiler options:        {0}&quot;, langCompilerConfig-&gt;CompilerOptions );\n                     Console::WriteLine( &quot;  Compiler warning level:  {0}&quot;, langCompilerConfig-&gt;WarningLevel.ToString() );\n                  }\n               }\n            }\n         }\n\n         if ( provider == nullptr )  // Tell the user that the language provider was not found.\n            Console::WriteLine(  &quot;There is no provider configured for input language \\&quot;{0}\\&quot;.&quot;, language );\n</code></pre><pre><code class=\"lang-vb\" name=\"CodeDom_CompilerInfo#6\">         Dim provider As CodeDomProvider\n         \n         &#39; Check for a provider corresponding to the input language.  \n         If CodeDomProvider.IsDefinedLanguage(language) Then\n            provider = CodeDomProvider.CreateProvider(language)\n            \n            &#39; Display information about this language provider.\n            Console.WriteLine(&quot;Language provider:  {0}&quot;, _\n                provider.ToString())\n            Console.WriteLine()\n            Console.WriteLine(&quot;  Default file extension:  {0}&quot;, _\n                provider.FileExtension)\n            Console.WriteLine()\n            \n            &#39; Get the compiler settings for this language.\n            Dim langCompilerInfo As CompilerInfo = CodeDomProvider.GetCompilerInfo(language)\n            Dim langCompilerConfig As CompilerParameters = langCompilerInfo.CreateDefaultCompilerParameters()\n            \n            Console.WriteLine(&quot;  Compiler options:        {0}&quot;, _\n                langCompilerConfig.CompilerOptions)\n            Console.WriteLine(&quot;  Compiler warning level:  {0}&quot;, _\n                langCompilerConfig.WarningLevel)\n         Else\n            &#39; Tell the user that the language provider was not found.\n            Console.WriteLine(&quot;There is no provider configured for input language &quot;&quot;{0}&quot;&quot;.&quot;, _\n                language)\n         End If\n</code></pre><pre><code class=\"lang-cs\" name=\"CodeDom_CompilerInfo#6\">            CodeDomProvider provider;\n\n            // Check for a provider corresponding to the input language.  \n            if (CodeDomProvider.IsDefinedLanguage(language))\n            {\n                provider = CodeDomProvider.CreateProvider(language);\n\n                // Display information about this language provider.\n\n                Console.WriteLine(&quot;Language provider:  {0}&quot;, \n                    provider.ToString());\n                Console.WriteLine();\n                Console.WriteLine(&quot;  Default file extension:  {0}&quot;, \n                    provider.FileExtension);\n                Console.WriteLine();\n\n                // Get the compiler settings for this language.\n\n                CompilerInfo langCompilerInfo = CodeDomProvider.GetCompilerInfo(language);\n                CompilerParameters langCompilerConfig = langCompilerInfo.CreateDefaultCompilerParameters();\n            \n                Console.WriteLine(&quot;  Compiler options:        {0}&quot;, \n                    langCompilerConfig.CompilerOptions);\n                Console.WriteLine(&quot;  Compiler warning level:  {0}&quot;, \n                    langCompilerConfig.WarningLevel);\n            }\n            else\n            {\n                // Tell the user that the language provider was not found.\n                Console.WriteLine(&quot;There is no provider configured for input language \\&quot;{0}\\&quot;.&quot;, \n                    language);\n            }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_CodeDom_Compiler_CodeDomProvider_GetConverter_System_Type_\">\r\n    \r\n            <a id=\"System_CodeDom_Compiler_CodeDomProvider_GetConverter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetConverter(Type)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.componentmodel.typeconverter\" data-linktype=\"relative-path\">TypeConverter</a> for the specified data type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.ComponentModel.TypeConverter GetConverter (Type type);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of object to retrieve a type converter for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.typeconverter\" data-linktype=\"relative-path\">TypeConverter</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.componentmodel.typeconverter\" data-linktype=\"relative-path\">TypeConverter</a> for the specified type, or <code>null</code> if a <a class=\"xref\" href=\"system.componentmodel.typeconverter\" data-linktype=\"relative-path\">TypeConverter</a> for the specified type cannot be found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A derived class can override this method to provide specific types of type converters for specific data types.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_CodeDom_Compiler_CodeDomProvider_GetLanguageFromExtension_System_String_\">\r\n    \r\n            <a id=\"System_CodeDom_Compiler_CodeDomProvider_GetLanguageFromExtension_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetLanguageFromExtension(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a language name associated with the specified file name extension, as configured in the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> compiler configuration section.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string GetLanguageFromExtension (string extension);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>extension</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A file name extension.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A language name associated with the file name extension, as configured in the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> compiler configuration settings.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.configurationexception\" data-linktype=\"relative-path\">ConfigurationException</a></div>\r\n                  </div>\r\n                  <p>The <code>extension</code> does not have a configured language provider on this computer.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.configurationerrorsexception\" data-linktype=\"relative-path\">ConfigurationErrorsException</a></div>\r\n                  </div>\r\n                  <p>The <code>extension</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a href=\"../Topic/%3Csystem.codedom%3E%20Element.md\" data-linktype=\"relative-path\">&amp;lt;system.codedom&amp;gt; Element</a> in the machine configuration file (Machine.config) contains the language provider and compiler configuration settings for each <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementation on the computer. The GetLanguageFromExtension method searches each provider configuration element for the specified file name extension.  </p>\n<p> The <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_IsDefinedExtension_\" data-linktype=\"relative-path\">IsDefinedExtension</a> method checks whether at least one provider implementation supports a specific file name extension. You can validate a file name extension using <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_IsDefinedExtension_\" data-linktype=\"relative-path\">IsDefinedExtension</a> before passing it to GetLanguageFromExtension. This prevents GetLanguageFromExtension from throwing a <a class=\"xref\" href=\"system.configuration.configurationexception\" data-linktype=\"relative-path\">System.Configuration.ConfigurationException</a> for an unsupported file name extension.  </p>\n<p> If a provider implementation supports the input file name extension, and there are multiple supported languages configured for that provider, then GetLanguageFromExtension returns the first language name for that provider. If more than one provider implementation is configured for the input file name extension, GetLanguageFromExtension returns the language name from the last matching provider configuration element.  </p>\n<p> Language names and file name extensions are case-insensitive.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example determines the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementation for an input file name extension and displays the configured settings for the language provider. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo\" data-linktype=\"relative-path\">CompilerInfo</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"CodeDom_CompilerInfo#5\">         if (  !fileExtension-&gt;StartsWith(  &quot;.&quot; ) )\n            fileExtension = String::Concat( &quot;.&quot;, fileExtension );\n\n         // Get the language associated with the file extension.\n         CodeDomProvider^ provider = nullptr;\n         if ( CodeDomProvider::IsDefinedExtension( fileExtension ) )\n         {\n            String^ language = CodeDomProvider::GetLanguageFromExtension( fileExtension );\n            if ( language )\n               Console::WriteLine( &quot;The language \\&quot;{0}\\&quot; is associated with file extension \\&quot;{1}\\&quot;<br>&quot;,\n                                    language, fileExtension );\n\n            // Check for a corresponding language provider.\n            if ( language &amp;&amp; CodeDomProvider::IsDefinedLanguage( language ) )\n            {\n               provider = CodeDomProvider::CreateProvider( language );\n               if ( provider )\n               {\n                  // Display information about this language provider.\n                  Console::WriteLine( &quot;Language provider:  {0}<br>&quot;, provider-&gt;ToString() );\n                  \n                  // Get the compiler settings for this language.\n                  CompilerInfo^ langCompilerInfo = CodeDomProvider::GetCompilerInfo( language );\n                  if ( langCompilerInfo )\n                  {\n                     CompilerParameters^ langCompilerConfig = langCompilerInfo-&gt;CreateDefaultCompilerParameters();\n                     if ( langCompilerConfig )\n                     {\n                        Console::WriteLine( &quot;  Compiler options:        {0}&quot;, langCompilerConfig-&gt;CompilerOptions );\n                        Console::WriteLine( &quot;  Compiler warning level:  {0}&quot;, langCompilerConfig-&gt;WarningLevel.ToString() );\n                     }\n                  }\n               }\n            }\n         }\n\n         if ( provider == nullptr )  // Tell the user that the language provider was not found.\n            Console::WriteLine( &quot;There is no language provider associated with input file extension \\&quot;{0}\\&quot;.&quot;, fileExtension );\n</code></pre><pre><code class=\"lang-vb\" name=\"CodeDom_CompilerInfo#5\">         If Not fileExtension.StartsWith(&quot;.&quot;) Then\n            fileExtension = &quot;.&quot; + fileExtension\n         End If\n\n         &#39; Get the language associated with the file extension.\n         If CodeDomProvider.IsDefinedExtension(fileExtension) Then\n            Dim provider As CodeDomProvider\n            Dim language As String = CodeDomProvider.GetLanguageFromExtension(fileExtension)\n            \n            Console.WriteLine(&quot;The language &quot;&quot;{0}&quot;&quot; is associated with file extension &quot;&quot;{1}&quot;&quot;&quot;, _\n                language, fileExtension)\n            Console.WriteLine()\n            \n            &#39; Check for a corresponding language provider.\n            If CodeDomProvider.IsDefinedLanguage(language) Then\n               provider = CodeDomProvider.CreateProvider(language)\n               \n               &#39; Display information about this language provider.\n               Console.WriteLine(&quot;Language provider:  {0}&quot;, _\n                  provider.ToString())\n               Console.WriteLine()\n               \n               &#39; Get the compiler settings for this language.\n               Dim langCompilerInfo As CompilerInfo = CodeDomProvider.GetCompilerInfo(language)\n               Dim langCompilerConfig As CompilerParameters = langCompilerInfo.CreateDefaultCompilerParameters()\n               \n               Console.WriteLine(&quot;  Compiler options:        {0}&quot;, _\n                   langCompilerConfig.CompilerOptions)\n               Console.WriteLine(&quot;  Compiler warning level:  {0}&quot;, _\n                   langCompilerConfig.WarningLevel)\n            End If\n         Else\n            &#39; Tell the user that the language provider was not found.\n            Console.WriteLine(&quot;There is no language provider associated with input file extension &quot;&quot;{0}&quot;&quot;.&quot;, fileExtension)\n         End If\n</code></pre><pre><code class=\"lang-cs\" name=\"CodeDom_CompilerInfo#5\">            if (fileExtension[0] != &#39;.&#39;)\n            {\n                fileExtension = &quot;.&quot; + fileExtension;\n            }\n\n            // Get the language associated with the file extension.\n            if (CodeDomProvider.IsDefinedExtension(fileExtension))\n            {\n                CodeDomProvider provider;\n                String language = CodeDomProvider.GetLanguageFromExtension(fileExtension);\n\n                Console.WriteLine(&quot;The language \\&quot;{0}\\&quot; is associated with file extension \\&quot;{1}\\&quot;&quot;, \n                    language, fileExtension);\n                Console.WriteLine();\n            \n                // Next, check for a corresponding language provider.\n\n                if (CodeDomProvider.IsDefinedLanguage(language))\n                {\n                    provider = CodeDomProvider.CreateProvider(language);\n\n                    // Display information about this language provider.\n\n                    Console.WriteLine(&quot;Language provider:  {0}&quot;, \n                        provider.ToString());\n                    Console.WriteLine();\n\n                    // Get the compiler settings for this language.\n\n                    CompilerInfo langCompilerInfo = CodeDomProvider.GetCompilerInfo(language);\n                    CompilerParameters langCompilerConfig = langCompilerInfo.CreateDefaultCompilerParameters();\n\n                    Console.WriteLine(&quot;  Compiler options:        {0}&quot;, \n                        langCompilerConfig.CompilerOptions);\n                    Console.WriteLine(&quot;  Compiler warning level:  {0}&quot;, \n                        langCompilerConfig.WarningLevel);\n                }\n            }\n            else \n            {\n                // Tell the user that the language provider was not found.\n                Console.WriteLine(&quot;There is no language provider associated with input file extension \\&quot;{0}\\&quot;.&quot;, \n                    fileExtension);\n            }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_CodeDom_Compiler_CodeDomProvider_GetTypeOutput_System_CodeDom_CodeTypeReference_\">\r\n    \r\n            <a id=\"System_CodeDom_Compiler_CodeDomProvider_GetTypeOutput_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetTypeOutput(CodeTypeReference)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the type indicated by the specified <a class=\"xref\" href=\"system.codedom.codetypereference\" data-linktype=\"relative-path\">CodeTypeReference</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string GetTypeOutput (System.CodeDom.CodeTypeReference type);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codetypereference\" data-linktype=\"relative-path\">CodeTypeReference</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.codedom.codetypereference\" data-linktype=\"relative-path\">CodeTypeReference</a> that indicates the type to return.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A text representation of the specified type, formatted for the language in which code is generated by this code generator. In Visual Basic, for example, passing in a <a class=\"xref\" href=\"system.codedom.codetypereference\" data-linktype=\"relative-path\">CodeTypeReference</a> for the <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> type will return &quot;Integer&quot;.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Neither this method nor the <span class=\"xref\">stem.CodeDom.Compiler.CodeDomProvider.CreateGenerator*</span> method is overridden in a derived class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework versions 1.0 and 1.1, this method is provided by the <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> implementation that is returned by the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_CreateGenerator_\" data-linktype=\"relative-path\">CreateGenerator</a> method of the provider. In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider. If the code provider does not override this method, the <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> implementation is called by the base class.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_CodeDom_Compiler_CodeDomProvider_IsDefinedExtension_System_String_\">\r\n    \r\n            <a id=\"System_CodeDom_Compiler_CodeDomProvider_IsDefinedExtension_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsDefinedExtension(String)</div>        \r\n          </div>\r\n    \r\n            <p>Tests whether a file name extension has an associated <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementation configured on the computer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsDefinedExtension (string extension);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>extension</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A file name extension.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if a <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementation is configured for the specified file name extension; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>extension</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a href=\"../Topic/%3Csystem.codedom%3E%20Element.md\" data-linktype=\"relative-path\">&amp;lt;system.codedom&amp;gt; Element</a> in the machine configuration file (Machine.config) contains the language provider and compiler configuration settings for each <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementation on the computer. The IsDefinedExtension method searches the provider configuration elements for the specified file name extension.  </p>\n<p> File name extensions are case-insensitive.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example determines the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementation for an input file name extension and displays the configured settings for the language provider. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo\" data-linktype=\"relative-path\">CompilerInfo</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"CodeDom_CompilerInfo#5\">         if (  !fileExtension-&gt;StartsWith(  &quot;.&quot; ) )\n            fileExtension = String::Concat( &quot;.&quot;, fileExtension );\n\n         // Get the language associated with the file extension.\n         CodeDomProvider^ provider = nullptr;\n         if ( CodeDomProvider::IsDefinedExtension( fileExtension ) )\n         {\n            String^ language = CodeDomProvider::GetLanguageFromExtension( fileExtension );\n            if ( language )\n               Console::WriteLine( &quot;The language \\&quot;{0}\\&quot; is associated with file extension \\&quot;{1}\\&quot;<br>&quot;,\n                                    language, fileExtension );\n\n            // Check for a corresponding language provider.\n            if ( language &amp;&amp; CodeDomProvider::IsDefinedLanguage( language ) )\n            {\n               provider = CodeDomProvider::CreateProvider( language );\n               if ( provider )\n               {\n                  // Display information about this language provider.\n                  Console::WriteLine( &quot;Language provider:  {0}<br>&quot;, provider-&gt;ToString() );\n                  \n                  // Get the compiler settings for this language.\n                  CompilerInfo^ langCompilerInfo = CodeDomProvider::GetCompilerInfo( language );\n                  if ( langCompilerInfo )\n                  {\n                     CompilerParameters^ langCompilerConfig = langCompilerInfo-&gt;CreateDefaultCompilerParameters();\n                     if ( langCompilerConfig )\n                     {\n                        Console::WriteLine( &quot;  Compiler options:        {0}&quot;, langCompilerConfig-&gt;CompilerOptions );\n                        Console::WriteLine( &quot;  Compiler warning level:  {0}&quot;, langCompilerConfig-&gt;WarningLevel.ToString() );\n                     }\n                  }\n               }\n            }\n         }\n\n         if ( provider == nullptr )  // Tell the user that the language provider was not found.\n            Console::WriteLine( &quot;There is no language provider associated with input file extension \\&quot;{0}\\&quot;.&quot;, fileExtension );\n</code></pre><pre><code class=\"lang-vb\" name=\"CodeDom_CompilerInfo#5\">         If Not fileExtension.StartsWith(&quot;.&quot;) Then\n            fileExtension = &quot;.&quot; + fileExtension\n         End If\n\n         &#39; Get the language associated with the file extension.\n         If CodeDomProvider.IsDefinedExtension(fileExtension) Then\n            Dim provider As CodeDomProvider\n            Dim language As String = CodeDomProvider.GetLanguageFromExtension(fileExtension)\n            \n            Console.WriteLine(&quot;The language &quot;&quot;{0}&quot;&quot; is associated with file extension &quot;&quot;{1}&quot;&quot;&quot;, _\n                language, fileExtension)\n            Console.WriteLine()\n            \n            &#39; Check for a corresponding language provider.\n            If CodeDomProvider.IsDefinedLanguage(language) Then\n               provider = CodeDomProvider.CreateProvider(language)\n               \n               &#39; Display information about this language provider.\n               Console.WriteLine(&quot;Language provider:  {0}&quot;, _\n                  provider.ToString())\n               Console.WriteLine()\n               \n               &#39; Get the compiler settings for this language.\n               Dim langCompilerInfo As CompilerInfo = CodeDomProvider.GetCompilerInfo(language)\n               Dim langCompilerConfig As CompilerParameters = langCompilerInfo.CreateDefaultCompilerParameters()\n               \n               Console.WriteLine(&quot;  Compiler options:        {0}&quot;, _\n                   langCompilerConfig.CompilerOptions)\n               Console.WriteLine(&quot;  Compiler warning level:  {0}&quot;, _\n                   langCompilerConfig.WarningLevel)\n            End If\n         Else\n            &#39; Tell the user that the language provider was not found.\n            Console.WriteLine(&quot;There is no language provider associated with input file extension &quot;&quot;{0}&quot;&quot;.&quot;, fileExtension)\n         End If\n</code></pre><pre><code class=\"lang-cs\" name=\"CodeDom_CompilerInfo#5\">            if (fileExtension[0] != &#39;.&#39;)\n            {\n                fileExtension = &quot;.&quot; + fileExtension;\n            }\n\n            // Get the language associated with the file extension.\n            if (CodeDomProvider.IsDefinedExtension(fileExtension))\n            {\n                CodeDomProvider provider;\n                String language = CodeDomProvider.GetLanguageFromExtension(fileExtension);\n\n                Console.WriteLine(&quot;The language \\&quot;{0}\\&quot; is associated with file extension \\&quot;{1}\\&quot;&quot;, \n                    language, fileExtension);\n                Console.WriteLine();\n            \n                // Next, check for a corresponding language provider.\n\n                if (CodeDomProvider.IsDefinedLanguage(language))\n                {\n                    provider = CodeDomProvider.CreateProvider(language);\n\n                    // Display information about this language provider.\n\n                    Console.WriteLine(&quot;Language provider:  {0}&quot;, \n                        provider.ToString());\n                    Console.WriteLine();\n\n                    // Get the compiler settings for this language.\n\n                    CompilerInfo langCompilerInfo = CodeDomProvider.GetCompilerInfo(language);\n                    CompilerParameters langCompilerConfig = langCompilerInfo.CreateDefaultCompilerParameters();\n\n                    Console.WriteLine(&quot;  Compiler options:        {0}&quot;, \n                        langCompilerConfig.CompilerOptions);\n                    Console.WriteLine(&quot;  Compiler warning level:  {0}&quot;, \n                        langCompilerConfig.WarningLevel);\n                }\n            }\n            else \n            {\n                // Tell the user that the language provider was not found.\n                Console.WriteLine(&quot;There is no language provider associated with input file extension \\&quot;{0}\\&quot;.&quot;, \n                    fileExtension);\n            }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_CodeDom_Compiler_CodeDomProvider_IsDefinedLanguage_System_String_\">\r\n    \r\n            <a id=\"System_CodeDom_Compiler_CodeDomProvider_IsDefinedLanguage_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsDefinedLanguage(String)</div>        \r\n          </div>\r\n    \r\n            <p>Tests whether a language has a <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementation configured on the computer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsDefinedLanguage (string language);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>language</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The language name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if a <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementation is configured for the specified language; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>language</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a href=\"../Topic/%3Csystem.codedom%3E%20Element.md\" data-linktype=\"relative-path\">&amp;lt;system.codedom&amp;gt; Element</a> in the machine configuration file (Machine.config) contains the language provider and compiler configuration settings for each <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementation on the computer. The IsDefinedLanguage method searches the provider configuration elements for the specified language name.  </p>\n<p> Language names are case-insensitive.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example determines the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementation for an input language and displays the configured settings for the language provider. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo\" data-linktype=\"relative-path\">CompilerInfo</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"CodeDom_CompilerInfo#6\">         CodeDomProvider^ provider = nullptr;\n         \n         // Check for a provider corresponding to the input language.  \n         if ( CodeDomProvider::IsDefinedLanguage( language ) )\n         {\n            provider = CodeDomProvider::CreateProvider( language );\n            if ( provider )\n            {\n               // Display information about this language provider.\n               Console::WriteLine( &quot;Language provider:  {0}&quot;, provider-&gt;ToString() );\n               Console::WriteLine();\n               Console::WriteLine( &quot;  Default file extension:  {0}&quot;, provider-&gt;FileExtension );\n               Console::WriteLine();\n               \n               // Get the compiler settings for this language.\n               CompilerInfo^ langCompilerInfo = CodeDomProvider::GetCompilerInfo( language );\n               if ( langCompilerInfo )\n               {\n                  CompilerParameters^ langCompilerConfig = langCompilerInfo-&gt;CreateDefaultCompilerParameters();\n                  if ( langCompilerConfig )\n                  {\n                     Console::WriteLine( &quot;  Compiler options:        {0}&quot;, langCompilerConfig-&gt;CompilerOptions );\n                     Console::WriteLine( &quot;  Compiler warning level:  {0}&quot;, langCompilerConfig-&gt;WarningLevel.ToString() );\n                  }\n               }\n            }\n         }\n\n         if ( provider == nullptr )  // Tell the user that the language provider was not found.\n            Console::WriteLine(  &quot;There is no provider configured for input language \\&quot;{0}\\&quot;.&quot;, language );\n</code></pre><pre><code class=\"lang-vb\" name=\"CodeDom_CompilerInfo#6\">         Dim provider As CodeDomProvider\n         \n         &#39; Check for a provider corresponding to the input language.  \n         If CodeDomProvider.IsDefinedLanguage(language) Then\n            provider = CodeDomProvider.CreateProvider(language)\n            \n            &#39; Display information about this language provider.\n            Console.WriteLine(&quot;Language provider:  {0}&quot;, _\n                provider.ToString())\n            Console.WriteLine()\n            Console.WriteLine(&quot;  Default file extension:  {0}&quot;, _\n                provider.FileExtension)\n            Console.WriteLine()\n            \n            &#39; Get the compiler settings for this language.\n            Dim langCompilerInfo As CompilerInfo = CodeDomProvider.GetCompilerInfo(language)\n            Dim langCompilerConfig As CompilerParameters = langCompilerInfo.CreateDefaultCompilerParameters()\n            \n            Console.WriteLine(&quot;  Compiler options:        {0}&quot;, _\n                langCompilerConfig.CompilerOptions)\n            Console.WriteLine(&quot;  Compiler warning level:  {0}&quot;, _\n                langCompilerConfig.WarningLevel)\n         Else\n            &#39; Tell the user that the language provider was not found.\n            Console.WriteLine(&quot;There is no provider configured for input language &quot;&quot;{0}&quot;&quot;.&quot;, _\n                language)\n         End If\n</code></pre><pre><code class=\"lang-cs\" name=\"CodeDom_CompilerInfo#6\">            CodeDomProvider provider;\n\n            // Check for a provider corresponding to the input language.  \n            if (CodeDomProvider.IsDefinedLanguage(language))\n            {\n                provider = CodeDomProvider.CreateProvider(language);\n\n                // Display information about this language provider.\n\n                Console.WriteLine(&quot;Language provider:  {0}&quot;, \n                    provider.ToString());\n                Console.WriteLine();\n                Console.WriteLine(&quot;  Default file extension:  {0}&quot;, \n                    provider.FileExtension);\n                Console.WriteLine();\n\n                // Get the compiler settings for this language.\n\n                CompilerInfo langCompilerInfo = CodeDomProvider.GetCompilerInfo(language);\n                CompilerParameters langCompilerConfig = langCompilerInfo.CreateDefaultCompilerParameters();\n            \n                Console.WriteLine(&quot;  Compiler options:        {0}&quot;, \n                    langCompilerConfig.CompilerOptions);\n                Console.WriteLine(&quot;  Compiler warning level:  {0}&quot;, \n                    langCompilerConfig.WarningLevel);\n            }\n            else\n            {\n                // Tell the user that the language provider was not found.\n                Console.WriteLine(&quot;There is no provider configured for input language \\&quot;{0}\\&quot;.&quot;, \n                    language);\n            }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_CodeDom_Compiler_CodeDomProvider_IsValidIdentifier_System_String_\">\r\n    \r\n            <a id=\"System_CodeDom_Compiler_CodeDomProvider_IsValidIdentifier_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsValidIdentifier(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value that indicates whether the specified value is a valid identifier for the current language.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool IsValidIdentifier (string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to verify as a valid identifier.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <code>value</code> parameter is a valid identifier; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Neither this method nor the <span class=\"xref\">stem.CodeDom.Compiler.CodeDomProvider.CreateGenerator*</span> method is overridden in a derived class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method tests whether an identifier is valid. The IsValidIdentifier method is provider specific. Identifiers that are valid for one provider might not be valid for other providers. If <code>value</code> contains characters outside of the ASCII character range, check the identifier for all the languages that might be used to compile the code.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework versions 1.0 and 1.1, this method is provided by the <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> implementation that is returned by the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_CreateGenerator_\" data-linktype=\"relative-path\">CreateGenerator</a> method of the provider. In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider. If the code provider does not override this method, the <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> implementation is called by the base class.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_CodeDom_Compiler_CodeDomProvider_Parse_System_IO_TextReader_\">\r\n    \r\n            <a id=\"System_CodeDom_Compiler_CodeDomProvider_Parse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Parse(TextReader)</div>        \r\n          </div>\r\n    \r\n            <p>Compiles the code read from the specified text stream into a <a class=\"xref\" href=\"system.codedom.codecompileunit\" data-linktype=\"relative-path\">CodeCompileUnit</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.CodeDom.CodeCompileUnit Parse (System.IO.TextReader codeStream);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>codeStream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> object that is used to read the code to be parsed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codecompileunit\" data-linktype=\"relative-path\">CodeCompileUnit</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.codedom.codecompileunit\" data-linktype=\"relative-path\">CodeCompileUnit</a> that contains a representation of the parsed code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Neither this method nor the <span class=\"xref\">stem.CodeDom.Compiler.CodeDomProvider.CreateGenerator*</span> method is overridden in a derived class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework versions 1.0 and 1.1, this method is provided by the <a class=\"xref\" href=\"system.codedom.compiler.icodeparser\" data-linktype=\"relative-path\">ICodeParser</a> implementation that is returned by the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_CreateParser_\" data-linktype=\"relative-path\">CreateParser</a> method of the provider. In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider. If the code provider does not override this method, the <a class=\"xref\" href=\"system.codedom.compiler.icodeparser\" data-linktype=\"relative-path\">ICodeParser</a> implementation is called by the base class.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_CodeDom_Compiler_CodeDomProvider_Supports_System_CodeDom_Compiler_GeneratorSupport_\">\r\n    \r\n            <a id=\"System_CodeDom_Compiler_CodeDomProvider_Supports_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Supports(GeneratorSupport)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value indicating whether the specified code generation support is provided.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool Supports (System.CodeDom.Compiler.GeneratorSupport generatorSupport);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>generatorSupport</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.compiler.generatorsupport\" data-linktype=\"relative-path\">GeneratorSupport</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.codedom.compiler.generatorsupport\" data-linktype=\"relative-path\">GeneratorSupport</a> object that indicates the type of code generation support to verify.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the specified code generation support is provided; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Neither this method nor the <span class=\"xref\">stem.CodeDom.Compiler.CodeDomProvider.CreateGenerator*</span> method is overridden in a derived class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method can be called with a number of <a class=\"xref\" href=\"system.codedom.compiler.generatorsupport\" data-linktype=\"relative-path\">GeneratorSupport</a> flags at once to test for a set of capabilities by joining a set of appropriate capability flags together with a binary <code>OR</code> operator (&#124;).  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework versions 1.0 and 1.1, this method is provided by the <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> implementation that is returned by the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_CreateGenerator_\" data-linktype=\"relative-path\">CreateGenerator</a> method of the provider. In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider. If the code provider does not override this method, the <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> implementation is called by the base class.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.CodeDom.Compiler.CodeDomProvider.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.CodeDom.Compiler.CodeDomProvider.yml\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider..ctor\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.CreateCompiler\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.CreateGenerator\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.CreateParser\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.CreateProvider\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.FileExtension\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.GetConverter\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.LanguageOptions\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.Parse\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.Supports\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"59e969e9-411f-5a93-4985-a9dfe5576d79\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.CodeDom.Compiler\\CodeDomProvider.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides a base class for CodeDomProvider implementations. This class is abstract.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.CodeDom.Compiler/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.CodeDom.Compiler.CodeDomProvider\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.CodeDom.Compiler.CodeDomProvider.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.CodeDom.Compiler.CodeDomProvider.yml","open_to_public_contributors":true,"api_name":["System.CodeDom.Compiler.CodeDomProvider","System.CodeDom.Compiler.CodeDomProvider..ctor","System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom","System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile","System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource","System.CodeDom.Compiler.CodeDomProvider.CreateCompiler","System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier","System.CodeDom.Compiler.CodeDomProvider.CreateGenerator","System.CodeDom.Compiler.CodeDomProvider.CreateParser","System.CodeDom.Compiler.CodeDomProvider.CreateProvider","System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier","System.CodeDom.Compiler.CodeDomProvider.FileExtension","System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit","System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression","System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember","System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace","System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement","System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType","System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo","System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo","System.CodeDom.Compiler.CodeDomProvider.GetConverter","System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension","System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput","System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension","System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage","System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier","System.CodeDom.Compiler.CodeDomProvider.LanguageOptions","System.CodeDom.Compiler.CodeDomProvider.Parse","System.CodeDom.Compiler.CodeDomProvider.Supports"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.CodeDom.Compiler.CodeDomProvider","System::CodeDom::Compiler::CodeDomProvider","System.CodeDom.Compiler.CodeDomProvider.#ctor","System::CodeDom::Compiler::CodeDomProvider::#ctor","System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom","System::CodeDom::Compiler::CodeDomProvider::CompileAssemblyFromDom","System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile","System::CodeDom::Compiler::CodeDomProvider::CompileAssemblyFromFile","System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource","System::CodeDom::Compiler::CodeDomProvider::CompileAssemblyFromSource","System.CodeDom.Compiler.CodeDomProvider.CreateCompiler","System::CodeDom::Compiler::CodeDomProvider::CreateCompiler","System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier","System::CodeDom::Compiler::CodeDomProvider::CreateEscapedIdentifier","System.CodeDom.Compiler.CodeDomProvider.CreateGenerator","System::CodeDom::Compiler::CodeDomProvider::CreateGenerator","System.CodeDom.Compiler.CodeDomProvider.CreateParser","System::CodeDom::Compiler::CodeDomProvider::CreateParser","System.CodeDom.Compiler.CodeDomProvider.CreateProvider","System::CodeDom::Compiler::CodeDomProvider::CreateProvider","System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier","System::CodeDom::Compiler::CodeDomProvider::CreateValidIdentifier","System.CodeDom.Compiler.CodeDomProvider.FileExtension","System::CodeDom::Compiler::CodeDomProvider::FileExtension","System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit","System::CodeDom::Compiler::CodeDomProvider::GenerateCodeFromCompileUnit","System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression","System::CodeDom::Compiler::CodeDomProvider::GenerateCodeFromExpression","System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember","System::CodeDom::Compiler::CodeDomProvider::GenerateCodeFromMember","System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace","System::CodeDom::Compiler::CodeDomProvider::GenerateCodeFromNamespace","System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement","System::CodeDom::Compiler::CodeDomProvider::GenerateCodeFromStatement","System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType","System::CodeDom::Compiler::CodeDomProvider::GenerateCodeFromType","System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo","System::CodeDom::Compiler::CodeDomProvider::GetAllCompilerInfo","System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo","System::CodeDom::Compiler::CodeDomProvider::GetCompilerInfo","System.CodeDom.Compiler.CodeDomProvider.GetConverter","System::CodeDom::Compiler::CodeDomProvider::GetConverter","System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension","System::CodeDom::Compiler::CodeDomProvider::GetLanguageFromExtension","System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput","System::CodeDom::Compiler::CodeDomProvider::GetTypeOutput","System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension","System::CodeDom::Compiler::CodeDomProvider::IsDefinedExtension","System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage","System::CodeDom::Compiler::CodeDomProvider::IsDefinedLanguage","System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier","System::CodeDom::Compiler::CodeDomProvider::IsValidIdentifier","System.CodeDom.Compiler.CodeDomProvider.LanguageOptions","System::CodeDom::Compiler::CodeDomProvider::LanguageOptions","System.CodeDom.Compiler.CodeDomProvider.Parse","System::CodeDom::Compiler::CodeDomProvider::Parse","System.CodeDom.Compiler.CodeDomProvider.Supports","System::CodeDom::Compiler::CodeDomProvider::Supports"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"59e969e9-411f-5a93-4985-a9dfe5576d79","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.CodeDom.Compiler\\CodeDomProvider.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.CodeDom.Compiler/CodeDomProvider.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"CodeDomProvider class | Microsoft Docs","_op_ogTitle":"CodeDomProvider class","description":"Provides a base class for CodeDomProvider implementations. This class is abstract.\n","toc_asset_id":"_splitted/System.CodeDom.Compiler/toc.json","toc_rel":"_splitted/System.CodeDom.Compiler/toc.json","source_url":"","ms.assetid":"System.CodeDom.Compiler.CodeDomProvider","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.codedom.compiler.codedomprovider","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.codedom.compiler.codedomprovider","fileRelativePath":"System.CodeDom.Compiler.CodeDomProvider.html"},"themesRelativePathToOutputRoot":"_themes/"}