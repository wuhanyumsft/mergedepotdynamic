{"content":"    \r\n    <h1 id=\"System_ServiceModel_Dispatcher_IClientMessageInspector\">\r\n      <span class=\"lang-csharp\">IClientMessageInspector</span>\r\n        Interface\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Defines a message inspector object that can be added to the <span class=\"xref\">stem.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors*</span> collection to view or modify messages.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public interface IClientMessageInspector</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Implement the IClientMessageInspector interface and add it to the <a class=\"xref\" href=\"system.servicemodel.dispatcher.clientruntime#System_ServiceModel_Dispatcher_ClientRuntime_MessageInspectors_\" data-linktype=\"relative-path\">MessageInspectors</a> collection to inspect or modify messages as they pass through a WCF client object. For details, see <a class=\"xref\" href=\"system.servicemodel.dispatcher.clientruntime\" data-linktype=\"relative-path\">ClientRuntime</a>.</p>\n\r\n    \r\n    \r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ServiceModel_Dispatcher_IClientMessageInspector_AfterReceiveReply_System_ServiceModel_Channels_Message__System_Object_\" data-linktype=\"self-bookmark\">AfterReceiveReply(Message,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Enables inspection or modification of a message after a reply message is received but prior to passing it back to the client application.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ServiceModel_Dispatcher_IClientMessageInspector_BeforeSendRequest_System_ServiceModel_Channels_Message__System_ServiceModel_IClientChannel_\" data-linktype=\"self-bookmark\">BeforeSendRequest(Message,IClientChannel)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Enables inspection or modification of a message before a request message is sent to a service.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_ServiceModel_Dispatcher_IClientMessageInspector_AfterReceiveReply_System_ServiceModel_Channels_Message__System_Object_\">\r\n    \r\n            <a id=\"System_ServiceModel_Dispatcher_IClientMessageInspector_AfterReceiveReply_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AfterReceiveReply(Message,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Enables inspection or modification of a message after a reply message is received but prior to passing it back to the client application.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AfterReceiveReply (ref System.ServiceModel.Channels.Message reply, object correlationState);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>reply</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.servicemodel.channels.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The message to be transformed into types and handed back to the client application.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>correlationState</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Correlation state data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Implement AfterReceiveReply to inspect or modify a reply message after it has been received by the WCF client object but before it is deserialized into objects that are returned to the client application.  </p>\n<p> The <code>correlationState</code> is the object returned by the user when <a class=\"xref\" href=\"system.servicemodel.dispatcher.iclientmessageinspector#System_ServiceModel_Dispatcher_IClientMessageInspector_BeforeSendRequest_\" data-linktype=\"relative-path\">BeforeSendRequest</a> is called for this message. The best practice is to make this a <a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">System.Guid</a> to ensure that no two <code>correlationState</code> objects are the same.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows an implementation that writes strings to the console when the implementation is called.  </p>\n<pre><code class=\"lang-vb\" name=\"Interceptors#1\">#Region &quot;IClientMessageInspector Members&quot;\n       Public Sub AfterReceiveReply(ByRef reply As System.ServiceModel.Channels.Message, _\n                          ByVal correlationState As Object) Implements IClientMessageInspector.AfterReceiveReply\n           Console.WriteLine(&quot;IClientMessageInspector.AfterReceiveReply called.&quot;)\n           Console.WriteLine(&quot;Message: {0}&quot;, reply.ToString())\n       End Sub\n\n       Public Function BeforeSendRequest(ByRef request As System.ServiceModel.Channels.Message, _\n               ByVal channel As IClientChannel) As Object Implements IClientMessageInspector.BeforeSendRequest\n           Console.WriteLine(&quot;IClientMessageInspector.BeforeSendRequest called.&quot;)\n           Return Nothing\n       End Function\n</code></pre><pre><code class=\"lang-cs\" name=\"Interceptors#1\">#region IClientMessageInspector Members\npublic void AfterReceiveReply(ref System.ServiceModel.Channels.Message reply, object correlationState)\n{\n  Console.WriteLine(&quot;IClientMessageInspector.AfterReceiveReply called.&quot;);\n  Console.WriteLine(&quot;Message: {0}&quot;, reply.ToString());\n}\n\npublic object BeforeSendRequest(ref System.ServiceModel.Channels.Message request, IClientChannel channel)\n{\n  Console.WriteLine(&quot;IClientMessageInspector.BeforeSendRequest called.&quot;);\n  return null;\n}\n</code></pre><p> The following code example shows how to use an <a class=\"xref\" href=\"system.servicemodel.description.iendpointbehavior\" data-linktype=\"relative-path\">System.ServiceModel.Description.IEndpointBehavior</a> to insert the client message inspector in the client endpoint.  </p>\n<pre><code class=\"lang-vb\" name=\"Interceptors#2\">#Region &quot;IEndpointBehavior Members&quot;\n       Public Sub AddBindingParameters(ByVal endpoint As ServiceEndpoint, ByVal bindingParameters _\n                                       As BindingParameterCollection) Implements IEndpointBehavior.AddBindingParameters\n           Return\n       End Sub\n\n       Public Sub ApplyClientBehavior(ByVal endpoint As ServiceEndpoint, ByVal clientRuntime As ClientRuntime) _\n       Implements IEndpointBehavior.ApplyClientBehavior\n           clientRuntime.MessageInspectors.Add(New Inspector())\n           For Each op As ClientOperation In clientRuntime.Operations\n               op.ParameterInspectors.Add(New Inspector())\n           Next op\n       End Sub\n\n       Public Sub ApplyDispatchBehavior(ByVal endpoint As ServiceEndpoint, ByVal endpointDispatcher As  _\n                                        EndpointDispatcher) Implements IEndpointBehavior.ApplyDispatchBehavior\n           endpointDispatcher.DispatchRuntime.MessageInspectors.Add(New Inspector())\n           For Each op As DispatchOperation In endpointDispatcher.DispatchRuntime.Operations\n               op.ParameterInspectors.Add(New Inspector())\n           Next op\n       End Sub\n\nPublic Sub Validate(ByVal endpoint As ServiceEndpoint) Implements IEndpointBehavior.Validate\n\tReturn\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Interceptors#2\">#region IEndpointBehavior Members\npublic void AddBindingParameters(\n  ServiceEndpoint endpoint, BindingParameterCollection bindingParameters\n) { return; }\n\npublic void ApplyClientBehavior(ServiceEndpoint endpoint, ClientRuntime clientRuntime)\n{\n  clientRuntime.MessageInspectors.Add(new Inspector());\n  foreach (ClientOperation op in clientRuntime.Operations)\n    op.ParameterInspectors.Add(new Inspector());\n}\n\npublic void ApplyDispatchBehavior(ServiceEndpoint endpoint, EndpointDispatcher endpointDispatcher)\n{\n  endpointDispatcher.DispatchRuntime.MessageInspectors.Add(new Inspector());\n  foreach (DispatchOperation op in endpointDispatcher.DispatchRuntime.Operations)\n    op.ParameterInspectors.Add(new Inspector());\n}\n\npublic void Validate(ServiceEndpoint endpoint){ return; }\n</code></pre><p> Finally, the following code example shows how to modify the client configuration file to use the endpoint behavior with a particular endpoint.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ServiceModel_Dispatcher_IClientMessageInspector_BeforeSendRequest_System_ServiceModel_Channels_Message__System_ServiceModel_IClientChannel_\">\r\n    \r\n            <a id=\"System_ServiceModel_Dispatcher_IClientMessageInspector_BeforeSendRequest_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeforeSendRequest(Message,IClientChannel)</div>        \r\n          </div>\r\n    \r\n            <p>Enables inspection or modification of a message before a request message is sent to a service.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object BeforeSendRequest (ref System.ServiceModel.Channels.Message request, System.ServiceModel.IClientChannel channel);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>request</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.servicemodel.channels.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The message to be sent to the service.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>channel</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.servicemodel.iclientchannel\" data-linktype=\"relative-path\">IClientChannel</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The WCF client object channel.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>The object that is returned as the <code>correlationState </code>argument of the <span class=\"xref\">stem.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply*</span> method. This is <code>null</code> if no correlation state is used.  </p>\n<p> The best practice is to make this a <a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a> to ensure that no two <code>correlationState</code> objects are the same.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Implement the BeforeSendRequest to inspect or modify a request message before it is sent.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows an implementation that writes strings to the console when the implementation is called.  </p>\n<pre><code class=\"lang-vb\" name=\"Interceptors#1\">#Region &quot;IClientMessageInspector Members&quot;\n       Public Sub AfterReceiveReply(ByRef reply As System.ServiceModel.Channels.Message, _\n                          ByVal correlationState As Object) Implements IClientMessageInspector.AfterReceiveReply\n           Console.WriteLine(&quot;IClientMessageInspector.AfterReceiveReply called.&quot;)\n           Console.WriteLine(&quot;Message: {0}&quot;, reply.ToString())\n       End Sub\n\n       Public Function BeforeSendRequest(ByRef request As System.ServiceModel.Channels.Message, _\n               ByVal channel As IClientChannel) As Object Implements IClientMessageInspector.BeforeSendRequest\n           Console.WriteLine(&quot;IClientMessageInspector.BeforeSendRequest called.&quot;)\n           Return Nothing\n       End Function\n</code></pre><pre><code class=\"lang-cs\" name=\"Interceptors#1\">#region IClientMessageInspector Members\npublic void AfterReceiveReply(ref System.ServiceModel.Channels.Message reply, object correlationState)\n{\n  Console.WriteLine(&quot;IClientMessageInspector.AfterReceiveReply called.&quot;);\n  Console.WriteLine(&quot;Message: {0}&quot;, reply.ToString());\n}\n\npublic object BeforeSendRequest(ref System.ServiceModel.Channels.Message request, IClientChannel channel)\n{\n  Console.WriteLine(&quot;IClientMessageInspector.BeforeSendRequest called.&quot;);\n  return null;\n}\n</code></pre><p> The following code example shows how to use an <a class=\"xref\" href=\"system.servicemodel.description.iendpointbehavior\" data-linktype=\"relative-path\">System.ServiceModel.Description.IEndpointBehavior</a> to insert the client message inspector in the client endpoint.  </p>\n<pre><code class=\"lang-vb\" name=\"Interceptors#2\">#Region &quot;IEndpointBehavior Members&quot;\n       Public Sub AddBindingParameters(ByVal endpoint As ServiceEndpoint, ByVal bindingParameters _\n                                       As BindingParameterCollection) Implements IEndpointBehavior.AddBindingParameters\n           Return\n       End Sub\n\n       Public Sub ApplyClientBehavior(ByVal endpoint As ServiceEndpoint, ByVal clientRuntime As ClientRuntime) _\n       Implements IEndpointBehavior.ApplyClientBehavior\n           clientRuntime.MessageInspectors.Add(New Inspector())\n           For Each op As ClientOperation In clientRuntime.Operations\n               op.ParameterInspectors.Add(New Inspector())\n           Next op\n       End Sub\n\n       Public Sub ApplyDispatchBehavior(ByVal endpoint As ServiceEndpoint, ByVal endpointDispatcher As  _\n                                        EndpointDispatcher) Implements IEndpointBehavior.ApplyDispatchBehavior\n           endpointDispatcher.DispatchRuntime.MessageInspectors.Add(New Inspector())\n           For Each op As DispatchOperation In endpointDispatcher.DispatchRuntime.Operations\n               op.ParameterInspectors.Add(New Inspector())\n           Next op\n       End Sub\n\nPublic Sub Validate(ByVal endpoint As ServiceEndpoint) Implements IEndpointBehavior.Validate\n\tReturn\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Interceptors#2\">#region IEndpointBehavior Members\npublic void AddBindingParameters(\n  ServiceEndpoint endpoint, BindingParameterCollection bindingParameters\n) { return; }\n\npublic void ApplyClientBehavior(ServiceEndpoint endpoint, ClientRuntime clientRuntime)\n{\n  clientRuntime.MessageInspectors.Add(new Inspector());\n  foreach (ClientOperation op in clientRuntime.Operations)\n    op.ParameterInspectors.Add(new Inspector());\n}\n\npublic void ApplyDispatchBehavior(ServiceEndpoint endpoint, EndpointDispatcher endpointDispatcher)\n{\n  endpointDispatcher.DispatchRuntime.MessageInspectors.Add(new Inspector());\n  foreach (DispatchOperation op in endpointDispatcher.DispatchRuntime.Operations)\n    op.ParameterInspectors.Add(new Inspector());\n}\n\npublic void Validate(ServiceEndpoint endpoint){ return; }\n</code></pre><p> Finally, the following code example shows how to modify the client configuration file to use the endpoint behavior with a particular endpoint.</p>\n\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.ServiceModel.Dispatcher.IClientMessageInspector.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.ServiceModel.Dispatcher.IClientMessageInspector.yml\">\r\n<meta name=\"APIName\" content=\"System.ServiceModel.Dispatcher.IClientMessageInspector\">\r\n<meta name=\"APIName\" content=\"System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply\">\r\n<meta name=\"APIName\" content=\"System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest\">\r\n<meta name=\"APILocation\" content=\"System.ServiceModel.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"632a296e-da7c-fddf-0503-fefb874b436f\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Defines a message inspector object that can be added to the  collection to view or modify messages.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.ServiceModel.Dispatcher/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.ServiceModel.Dispatcher.IClientMessageInspector\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.ServiceModel.Dispatcher.IClientMessageInspector.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.ServiceModel.Dispatcher.IClientMessageInspector.yml","open_to_public_contributors":true,"api_name":["System.ServiceModel.Dispatcher.IClientMessageInspector","System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply","System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest"],"api_location":["System.ServiceModel.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.ServiceModel.Dispatcher.IClientMessageInspector","System::ServiceModel::Dispatcher::IClientMessageInspector","System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply","System::ServiceModel::Dispatcher::IClientMessageInspector::AfterReceiveReply","System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest","System::ServiceModel::Dispatcher::IClientMessageInspector::BeforeSendRequest"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"632a296e-da7c-fddf-0503-fefb874b436f","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.ServiceModel.Dispatcher/IClientMessageInspector.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IClientMessageInspector interface | Microsoft Docs","_op_ogTitle":"IClientMessageInspector interface","description":"Defines a message inspector object that can be added to the  collection to view or modify messages.\n","toc_asset_id":"_splitted/System.ServiceModel.Dispatcher/toc.json","toc_rel":"_splitted/System.ServiceModel.Dispatcher/toc.json","source_url":"","ms.assetid":"System.ServiceModel.Dispatcher.IClientMessageInspector","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.servicemodel.dispatcher.iclientmessageinspector","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.servicemodel.dispatcher.iclientmessageinspector","fileRelativePath":"System.ServiceModel.Dispatcher.IClientMessageInspector.html"},"themesRelativePathToOutputRoot":"_themes/"}