{"content":"    \r\n    <h1 id=\"System_Reflection_Assembly\">\r\n      <span class=\"lang-csharp\">Assembly</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents an assembly, which is a reusable, versionable, and self-describing building block of a common language runtime application.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]\n[System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._Assembly))]\n[System.Runtime.InteropServices.ComVisible(true)]\npublic abstract class Assembly : System.Reflection.ICustomAttributeProvider, System.Runtime.InteropServices._Assembly, System.Runtime.Serialization.ISerializable, System.Security.IEvidenceFactory</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Assembly</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Use the Assembly class to load assemblies, to explore the metadata and constituent parts of assemblies, to discover the types contained in assemblies, and to create instances of those types.  </p>\n<p> To get an array of Assembly objects representing the assemblies currently loaded into an application domain (for example, the default application domain of a simple project), use the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_GetAssemblies_\" data-linktype=\"relative-path\">GetAssemblies</a> method.  </p>\n<p> To load assemblies dynamically, the Assembly class provides the following static methods (<code>Shared</code> methods in Visual Basic). Assemblies are loaded into the application domain where the load operation occurs.  </p>\n<ul>\n<li><p>The recommended way to load assemblies is to use the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_Load_\" data-linktype=\"relative-path\">Load</a> method, which identifies the assembly to be loaded by its display name (for example, &quot;System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&quot;). The search for the assembly follows the rules described in <a href=\"../Topic/How%20the%20Runtime%20Locates%20Assemblies.md\" data-linktype=\"relative-path\">How the Runtime Locates Assemblies</a>.  </p>\n</li>\n<li><p>The <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_ReflectionOnlyLoad_\" data-linktype=\"relative-path\">ReflectionOnlyLoad</a> and <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_ReflectionOnlyLoadFrom_\" data-linktype=\"relative-path\">ReflectionOnlyLoadFrom</a> methods enable you to load an assembly for reflection, but not for execution. For example, an assembly that targets a 64-bit platform can be examined by code that is running on a 32-bit platform.  </p>\n</li>\n<li><p>The <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFile_\" data-linktype=\"relative-path\">LoadFile</a> and <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFrom_\" data-linktype=\"relative-path\">LoadFrom</a> methods are provided for rare scenarios in which an assembly must be identified by path.  </p>\n<p>To get an Assembly object for the currently executing assembly, use the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetExecutingAssembly_\" data-linktype=\"relative-path\">GetExecutingAssembly</a> method.  </p>\n<p>Many members of the Assembly class provide information about an assembly. For example:  </p>\n</li>\n<li><p>The <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetName_\" data-linktype=\"relative-path\">GetName</a> method returns an <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a> object that provides access to the parts of the assembly display name.  </p>\n</li>\n<li><p>The <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a> method lists the attributes applied to the assembly.  </p>\n</li>\n<li><p>The <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetFiles_\" data-linktype=\"relative-path\">GetFiles</a> method provides access to the files in the assembly manifest.  </p>\n</li>\n<li><p>The <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetManifestResourceNames_\" data-linktype=\"relative-path\">GetManifestResourceNames</a> method provides the names of the resources in the assembly manifest.  </p>\n<p>The <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetTypes_\" data-linktype=\"relative-path\">GetTypes</a> method lists all the types in the assembly. The <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetExportedTypes_\" data-linktype=\"relative-path\">GetExportedTypes</a> method lists the types that are visible to callers outside the assembly. The <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetType_\" data-linktype=\"relative-path\">GetType</a> method can be used to search for a particular type in the assembly. The <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_CreateInstance_\" data-linktype=\"relative-path\">CreateInstance</a> method can be used to search for and create instances of types in the assembly.  </p>\n<p>For more information on assemblies, see the &quot;Application Domains and Assemblies&quot; section in the <a href=\"../Topic/Application%20Domains.md\" data-linktype=\"relative-path\">Application Domains</a> topic.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly__ctor\" data-linktype=\"self-bookmark\">Assembly()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_CodeBase\" data-linktype=\"self-bookmark\">CodeBase</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the location of the assembly as specified originally, for example, in an <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_CustomAttributes\" data-linktype=\"self-bookmark\">CustomAttributes</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a collection that contains this assembly&#39;s custom attributes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_DefinedTypes\" data-linktype=\"self-bookmark\">DefinedTypes</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a collection of the types defined in this assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_EntryPoint\" data-linktype=\"self-bookmark\">EntryPoint</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the entry point of this assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_EscapedCodeBase\" data-linktype=\"self-bookmark\">EscapedCodeBase</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the URI, including escape characters, that represents the codebase.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_Evidence\" data-linktype=\"self-bookmark\">Evidence</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the evidence for this assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_ExportedTypes\" data-linktype=\"self-bookmark\">ExportedTypes</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a collection of the public types defined in this assembly that are visible outside the assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_FullName\" data-linktype=\"self-bookmark\">FullName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the display name of the assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_GlobalAssemblyCache\" data-linktype=\"self-bookmark\">GlobalAssemblyCache</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the assembly was loaded from the global assembly cache.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_HostContext\" data-linktype=\"self-bookmark\">HostContext</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the host context with which the assembly was loaded.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_ImageRuntimeVersion\" data-linktype=\"self-bookmark\">ImageRuntimeVersion</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a string representing the version of the common language runtime (CLR) saved in the file containing the manifest.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_IsDynamic\" data-linktype=\"self-bookmark\">IsDynamic</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether the current assembly was generated dynamically in the current process by using reflection emit.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_IsFullyTrusted\" data-linktype=\"self-bookmark\">IsFullyTrusted</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether the current assembly is loaded with full trust.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_Location\" data-linktype=\"self-bookmark\">Location</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the full path or UNC location of the loaded file that contains the manifest.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_ManifestModule\" data-linktype=\"self-bookmark\">ManifestModule</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the module that contains the manifest for the current assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_Modules\" data-linktype=\"self-bookmark\">Modules</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a collection that contains the modules in this assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_PermissionSet\" data-linktype=\"self-bookmark\">PermissionSet</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the grant set of the current assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_ReflectionOnly\" data-linktype=\"self-bookmark\">ReflectionOnly</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value indicating whether this assembly was loaded into the reflection-only context.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_SecurityRuleSet\" data-linktype=\"self-bookmark\">SecurityRuleSet</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates which set of security rules the common language runtime (CLR) enforces for this assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_CreateInstance_System_String_\" data-linktype=\"self-bookmark\">CreateInstance(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Locates the specified type from this assembly and creates an instance of it using the system activator, using case-sensitive search.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_CreateInstance_System_String_System_Boolean_\" data-linktype=\"self-bookmark\">CreateInstance(String,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Locates the specified type from this assembly and creates an instance of it using the system activator, with optional case-sensitive search.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_CreateInstance_System_String_System_Boolean_System_Reflection_BindingFlags_System_Reflection_Binder_System_Object___System_Globalization_CultureInfo_System_Object___\" data-linktype=\"self-bookmark\">CreateInstance(String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Locates the specified type from this assembly and creates an instance of it using the system activator, with optional case-sensitive search and having the specified culture, arguments, and binding and activation attributes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_CreateQualifiedName_System_String_System_String_\" data-linktype=\"self-bookmark\">CreateQualifiedName(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates the name of a type qualified by the display name of its assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether this assembly and the specified object are equal.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_GetAssembly_System_Type_\" data-linktype=\"self-bookmark\">GetAssembly(Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the currently loaded assembly in which the specified type is defined.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_GetCallingAssembly\" data-linktype=\"self-bookmark\">GetCallingAssembly()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> of the method that invoked the currently executing method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_GetCustomAttributes_System_Boolean_\" data-linktype=\"self-bookmark\">GetCustomAttributes(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets all the custom attributes for this assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_GetCustomAttributes_System_Type_System_Boolean_\" data-linktype=\"self-bookmark\">GetCustomAttributes(Type,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the custom attributes for this assembly as specified by type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_GetCustomAttributesData\" data-linktype=\"self-bookmark\">GetCustomAttributesData()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns information about the attributes that have been applied to the current <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a>, expressed as <a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a> objects.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_GetEntryAssembly\" data-linktype=\"self-bookmark\">GetEntryAssembly()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the process executable in the default application domain. In other application domains, this is the first executable that was executed by <span class=\"xref\">stem.AppDomain.ExecuteAssembly*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_GetExecutingAssembly\" data-linktype=\"self-bookmark\">GetExecutingAssembly()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the assembly that contains the code that is currently executing.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_GetExportedTypes\" data-linktype=\"self-bookmark\">GetExportedTypes()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the public types defined in this assembly that are visible outside the assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_GetFile_System_String_\" data-linktype=\"self-bookmark\">GetFile(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a> for the specified file in the file table of the manifest of this assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_GetFiles\" data-linktype=\"self-bookmark\">GetFiles()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the files in the file table of an assembly manifest.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_GetFiles_System_Boolean_\" data-linktype=\"self-bookmark\">GetFiles(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the files in the file table of an assembly manifest, specifying whether to include resource modules.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the hash code for this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_GetLoadedModules\" data-linktype=\"self-bookmark\">GetLoadedModules()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets all the loaded modules that are part of this assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_GetLoadedModules_System_Boolean_\" data-linktype=\"self-bookmark\">GetLoadedModules(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets all the loaded modules that are part of this assembly, specifying whether to include resource modules.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_GetManifestResourceInfo_System_String_\" data-linktype=\"self-bookmark\">GetManifestResourceInfo(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns information about how the given resource has been persisted.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_GetManifestResourceNames\" data-linktype=\"self-bookmark\">GetManifestResourceNames()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the names of all the resources in this assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_GetManifestResourceStream_System_String_\" data-linktype=\"self-bookmark\">GetManifestResourceStream(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads the specified manifest resource from this assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_GetManifestResourceStream_System_Type_System_String_\" data-linktype=\"self-bookmark\">GetManifestResourceStream(Type,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads the specified manifest resource, scoped by the namespace of the specified type, from this assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_GetModule_System_String_\" data-linktype=\"self-bookmark\">GetModule(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the specified module in this assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_GetModules\" data-linktype=\"self-bookmark\">GetModules()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets all the modules that are part of this assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_GetModules_System_Boolean_\" data-linktype=\"self-bookmark\">GetModules(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets all the modules that are part of this assembly, specifying whether to include resource modules.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_GetName\" data-linktype=\"self-bookmark\">GetName()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a> for this assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_GetName_System_Boolean_\" data-linktype=\"self-bookmark\">GetName(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a> for this assembly, setting the codebase as specified by <code>copiedName</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"self-bookmark\">GetObjectData(SerializationInfo,StreamingContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets serialization information with all of the data needed to reinstantiate this assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_GetReferencedAssemblies\" data-linktype=\"self-bookmark\">GetReferencedAssemblies()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a> objects for all the assemblies referenced by this assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_GetSatelliteAssembly_System_Globalization_CultureInfo_\" data-linktype=\"self-bookmark\">GetSatelliteAssembly(CultureInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the satellite assembly for the specified culture.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_GetSatelliteAssembly_System_Globalization_CultureInfo_System_Version_\" data-linktype=\"self-bookmark\">GetSatelliteAssembly(CultureInfo,Version)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the specified version of the satellite assembly for the specified culture.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_GetType_System_String_\" data-linktype=\"self-bookmark\">GetType(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object with the specified name in the assembly instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_GetType_System_String_System_Boolean_\" data-linktype=\"self-bookmark\">GetType(String,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object with the specified name in the assembly instance and optionally throws an exception if the type is not found.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_GetType_System_String_System_Boolean_System_Boolean_\" data-linktype=\"self-bookmark\">GetType(String,Boolean,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object with the specified name in the assembly instance, with the options of ignoring the case, and of throwing an exception if the type is not found.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_GetTypes\" data-linktype=\"self-bookmark\">GetTypes()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the types defined in this assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_IsDefined_System_Type_System_Boolean_\" data-linktype=\"self-bookmark\">IsDefined(Type,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether or not a specified attribute has been applied to the assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_Load_System_Byte___\" data-linktype=\"self-bookmark\">Load(Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads the assembly with a common object file format (COFF)-based image containing an emitted assembly. The assembly is loaded into the application domain of the caller.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_Load_System_Reflection_AssemblyName_\" data-linktype=\"self-bookmark\">Load(AssemblyName)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads an assembly given its <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_Load_System_String_\" data-linktype=\"self-bookmark\">Load(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads an assembly given the long form of its name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_Load_System_Byte___System_Byte___\" data-linktype=\"self-bookmark\">Load(Byte[],Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads the assembly with a common object file format (COFF)-based image containing an emitted assembly, optionally including symbols for the assembly. The assembly is loaded into the application domain of the caller.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_Load_System_Reflection_AssemblyName_System_Security_Policy_Evidence_\" data-linktype=\"self-bookmark\">Load(AssemblyName,Evidence)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads an assembly given its <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a>. The assembly is loaded into the domain of the caller using the supplied evidence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_Load_System_String_System_Security_Policy_Evidence_\" data-linktype=\"self-bookmark\">Load(String,Evidence)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads an assembly given its display name, loading the assembly into the domain of the caller using the supplied evidence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_Load_System_Byte___System_Byte___System_Security_Policy_Evidence_\" data-linktype=\"self-bookmark\">Load(Byte[],Byte[],Evidence)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads the assembly with a common object file format (COFF)-based image containing an emitted assembly, optionally including symbols and evidence for the assembly. The assembly is loaded into the application domain of the caller.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_Load_System_Byte___System_Byte___System_Security_SecurityContextSource_\" data-linktype=\"self-bookmark\">Load(Byte[],Byte[],SecurityContextSource)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads the assembly with a common object file format (COFF)-based image containing an emitted assembly, optionally including symbols and specifying the source for the security context. The assembly is loaded into the application domain of the caller.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_LoadFile_System_String_\" data-linktype=\"self-bookmark\">LoadFile(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads the contents of an assembly file on the specified path.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_LoadFile_System_String_System_Security_Policy_Evidence_\" data-linktype=\"self-bookmark\">LoadFile(String,Evidence)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads an assembly given its path, loading the assembly into the domain of the caller using the supplied evidence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_LoadFrom_System_String_\" data-linktype=\"self-bookmark\">LoadFrom(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads an assembly given its file name or path.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_LoadFrom_System_String_System_Security_Policy_Evidence_\" data-linktype=\"self-bookmark\">LoadFrom(String,Evidence)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads an assembly given its file name or path and supplying security evidence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_LoadFrom_System_String_System_Byte___System_Configuration_Assemblies_AssemblyHashAlgorithm_\" data-linktype=\"self-bookmark\">LoadFrom(String,Byte[],AssemblyHashAlgorithm)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads an assembly given its file name or path, hash value, and hash algorithm.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_LoadFrom_System_String_System_Security_Policy_Evidence_System_Byte___System_Configuration_Assemblies_AssemblyHashAlgorithm_\" data-linktype=\"self-bookmark\">LoadFrom(String,Evidence,Byte[],AssemblyHashAlgorithm)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads an assembly given its file name or path, security evidence, hash value, and hash algorithm.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_LoadModule_System_String_System_Byte___\" data-linktype=\"self-bookmark\">LoadModule(String,Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads the module, internal to this assembly, with a common object file format (COFF)-based image containing an emitted module, or a resource file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_LoadModule_System_String_System_Byte___System_Byte___\" data-linktype=\"self-bookmark\">LoadModule(String,Byte[],Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads the module, internal to this assembly, with a common object file format (COFF)-based image containing an emitted module, or a resource file. The raw bytes representing the symbols for the module are also loaded.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_LoadWithPartialName_System_String_\" data-linktype=\"self-bookmark\">LoadWithPartialName(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads an assembly from the application directory or from the global assembly cache using a partial name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_LoadWithPartialName_System_String_System_Security_Policy_Evidence_\" data-linktype=\"self-bookmark\">LoadWithPartialName(String,Evidence)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads an assembly from the application directory or from the global assembly cache using a partial name. The assembly is loaded into the domain of the caller using the supplied evidence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_ReflectionOnlyLoad_System_Byte___\" data-linktype=\"self-bookmark\">ReflectionOnlyLoad(Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads the assembly from a common object file format (COFF)-based image containing an emitted assembly. The assembly is loaded into the reflection-only context of the caller&#39;s application domain.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_ReflectionOnlyLoad_System_String_\" data-linktype=\"self-bookmark\">ReflectionOnlyLoad(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads an assembly into the reflection-only context, given its display name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_ReflectionOnlyLoadFrom_System_String_\" data-linktype=\"self-bookmark\">ReflectionOnlyLoadFrom(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads an assembly into the reflection-only context, given its path.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the full name of the assembly, also known as the display name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_UnsafeLoadFrom_System_String_\" data-linktype=\"self-bookmark\">UnsafeLoadFrom(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads an assembly into the load-from context, bypassing some security checks.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Events\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_ModuleResolve\" data-linktype=\"self-bookmark\">ModuleResolve</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the common language runtime class loader cannot resolve a reference to an internal module of an assembly through normal means.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Operators\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_op_Equality_System_Reflection_Assembly_System_Reflection_Assembly_\" data-linktype=\"self-bookmark\">op_Equality(Assembly,Assembly)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether two <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> objects are equal.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_op_Inequality_System_Reflection_Assembly_System_Reflection_Assembly_\" data-linktype=\"self-bookmark\">op_Inequality(Assembly,Assembly)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether two <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> objects are not equal.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Assembly_System_Runtime_InteropServices__Assembly_GetType\" data-linktype=\"self-bookmark\">_Assembly.GetType()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the type of the current instance.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly__ctor\">\r\n    \r\n            <a id=\"System_Reflection_Assembly__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Assembly()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected Assembly ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor is invoked by derived classes during the construction of <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> objects.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_CodeBase\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_CodeBase_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CodeBase</div>        \r\n          </div>\r\n    \r\n            <p>Gets the location of the assembly as specified originally, for example, in an <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string CodeBase { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The location of the assembly as specified originally.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To get the absolute path to the loaded manifest-containing file, use the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Location_\" data-linktype=\"relative-path\">Location</a> property instead.  </p>\n<p> If the assembly was loaded as a byte array, using an overload of the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method that takes an array of bytes, this property returns the location of the caller of the method, not the location of the loaded assembly.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the CodeBase property.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Reflection.Assembly#1\">using namespace System;\nusing namespace System::Reflection;\n\nvoid main()\n{\n   // Instantiate a target object.\n   int integer1 = 1632;\n   // Instantiate an Assembly class to the assembly housing the Integer type.\n   Assembly^ systemAssembly = integer1.GetType()-&gt;Assembly;\n   // Get the location of the assembly using the file: protocol.\n   Console::WriteLine(&quot;CodeBase = {0}&quot;, systemAssembly-&gt;CodeBase);\n}\n// The example displays output like the following:\n//   CodeBase = file:///C:/Windows/Microsoft.NET/Framework64/v4.0.30319/mscorlib.dll\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Reflection.Assembly#1\">using System;\nusing System.Reflection;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Instantiate a target object.\n      Int32 integer1 = 1632;\n      // Instantiate an Assembly class to the assembly housing the Integer type.\n      Assembly systemAssembly = integer1.GetType().Assembly;\n      // Get the location of the assembly using the file: protocol.\n      Console.WriteLine(&quot;CodeBase = {0}&quot;, systemAssembly.CodeBase);\n   }\n}\n// The example displays output like the following:\n//    CodeBase = file:///C:/Windows/Microsoft.NET/Framework64/v4.0.30319/mscorlib.dll\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Reflection.Assembly#1\">Imports System.Reflection\n\nModule Example\n   Public Sub Main()\n      &#39; Instantiate a target object.\n      Dim integer1 As Integer = 1632\n      &#39; Instantiate an Assembly class to the assembly housing the Integer type.\n      Dim systemAssembly As Assembly = integer1.GetType().Assembly\n      &#39; Get the location of the assembly using the file: protocol.\n      Console.WriteLine(&quot;CodeBase = {0}&quot;, systemAssembly.CodeBase)\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;   CodeBase = file:///C:/Windows/Microsoft.NET/Framework64/v4.0.30319/mscorlib.dll\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_CustomAttributes\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_CustomAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CustomAttributes</div>        \r\n          </div>\r\n    \r\n            <p>Gets a collection that contains this assembly&#39;s custom attributes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Collections.Generic.IEnumerable&lt;System.Reflection.CustomAttributeData&gt; CustomAttributes { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a>&gt;</div>\r\n                  </div>\r\n                  <p>A collection that contains this assembly&#39;s custom attributes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_DefinedTypes\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_DefinedTypes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefinedTypes</div>        \r\n          </div>\r\n    \r\n            <p>Gets a collection of the types defined in this assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Collections.Generic.IEnumerable&lt;System.Reflection.TypeInfo&gt; DefinedTypes { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.reflection.typeinfo\" data-linktype=\"relative-path\">TypeInfo</a>&gt;</div>\r\n                  </div>\r\n                  <p>A collection of the types defined in this assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The DefinedTypes property is comparable to the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetTypes_\" data-linktype=\"relative-path\">GetTypes</a> method, except that the DefinedTypes property returns a <a href=\"../Topic/IEnumerable(T)%20Interface.md\" data-linktype=\"relative-path\">collection</a> of <a class=\"xref\" href=\"system.reflection.typeinfo\" data-linktype=\"relative-path\">TypeInfo</a> objects, and the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetTypes_\" data-linktype=\"relative-path\">GetTypes</a> method returns an array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects.  </p>\n<p> The returned array includes nested types.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_EntryPoint\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_EntryPoint_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EntryPoint</div>        \r\n          </div>\r\n    \r\n            <p>Gets the entry point of this assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Reflection.MethodInfo EntryPoint { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </div>\r\n                  <p>An object that represents the entry point of this assembly. If no entry point is found (for example, the assembly is a DLL), <code>null</code> is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_EscapedCodeBase\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_EscapedCodeBase_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EscapedCodeBase</div>        \r\n          </div>\r\n    \r\n            <p>Gets the URI, including escape characters, that represents the codebase.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string EscapedCodeBase { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A URI with escape characters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_Evidence\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_Evidence_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Evidence</div>        \r\n          </div>\r\n    \r\n            <p>Gets the evidence for this assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Security.Policy.Evidence Evidence { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a></div>\r\n                  </div>\r\n                  <p>The evidence for this assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Evidence is the set of information that constitutes input to security policy decisions, such as what permissions can be granted to code.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_ExportedTypes\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_ExportedTypes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExportedTypes</div>        \r\n          </div>\r\n    \r\n            <p>Gets a collection of the public types defined in this assembly that are visible outside the assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Collections.Generic.IEnumerable&lt;Type&gt; ExportedTypes { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>&gt;</div>\r\n                  </div>\r\n                  <p>A collection of the public types defined in this assembly that are visible outside the assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_FullName\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_FullName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FullName</div>        \r\n          </div>\r\n    \r\n            <p>Gets the display name of the assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string FullName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The display name of the assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>See <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a> for a description of the format of the display name of an assembly.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Writing your own code to parse display names is not recommended. Instead, pass the display name to the <a class=\"xref\" href=\"system.reflection.assemblyname#System_Reflection_AssemblyName__ctor_\" data-linktype=\"relative-path\">AssemblyName</a> constructor, which parses it and populates the appropriate fields of the new <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a>.  </p>\n</div>\n<p> In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings. However, it is not included in the string returned by the FullName property, for compatibility reasons. See <a class=\"xref\" href=\"system.reflection.assemblyname#System_Reflection_AssemblyName_ProcessorArchitecture_\" data-linktype=\"relative-path\">ProcessorArchitecture</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example retrieves the display name of the currently executing assembly, and the display name of the assembly that contains the <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> type (<code>int</code> in C#, <code>Integer</code> in Visual Basic).  </p>\n<pre><code class=\"lang-cpp\" name=\"Assembly.FullName#1\">using namespace System;\nusing namespace System::Reflection;\n\nvoid main()\n{\n    Console::WriteLine(&quot;The FullName property (also called the display name) of...&quot;);\n    Console::WriteLine(&quot;...the currently executing assembly:&quot;);\n    Console::WriteLine(Assembly::GetExecutingAssembly()-&gt;FullName);\n\n    Console::WriteLine(&quot;...the assembly that contains the Int32 type:&quot;);\n    Console::WriteLine(int::typeid-&gt;Assembly-&gt;FullName);\n}\n\n/* This example produces output similar to the following:\n\nThe FullName property (also called the display name) of...\n...the currently executing assembly:\nExampleAssembly, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\n...the assembly that contains the Int32 type:\nmscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"Assembly.FullName#1\">using System;\nusing System.Reflection;\n\nclass Example\n{\n    static void Main()\n    {\n        Console.WriteLine(&quot;The FullName property (also called the display name) of...&quot;);\n        Console.WriteLine(&quot;...the currently executing assembly:&quot;);\n        Console.WriteLine(typeof(Example).Assembly.FullName);\n\n        Console.WriteLine(&quot;...the assembly that contains the Int32 type:&quot;);\n        Console.WriteLine(typeof(int).Assembly.FullName);\n    }\n}\n\n/* This example produces output similar to the following:\n\nThe FullName property (also called the display name) of...\n...the currently executing assembly:\nExampleAssembly, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\n...the assembly that contains the Int32 type:\nmscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Assembly.FullName#1\">Imports System.Reflection\n\nClass Example\n    Shared Sub Main()\n        Console.WriteLine(&quot;The FullName property (also called the display name) of...&quot;)\n        Console.WriteLine(&quot;...the currently executing assembly:&quot;)\n        Console.WriteLine(GetType(Example).Assembly.FullName)\n\n        Console.WriteLine(&quot;...the assembly that contains the Int32 type:&quot;)\n        Console.WriteLine(GetType(Integer).Assembly.FullName)\n    End Sub \nEnd Class \n\n&#39; This example produces output similar to the following:\n&#39;\n&#39;The FullName property (also called the display name) of...\n&#39;...the currently executing assembly:\n&#39;ExampleAssembly, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\n&#39;...the assembly that contains the Int32 type:\n&#39;mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_GlobalAssemblyCache\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_GlobalAssemblyCache_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GlobalAssemblyCache</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the assembly was loaded from the global assembly cache.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool GlobalAssemblyCache { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the assembly was loaded from the global assembly cache; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_HostContext\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_HostContext_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HostContext</div>        \r\n          </div>\r\n    \r\n            <p>Gets the host context with which the assembly was loaded.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual long HostContext { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> value that indicates the host context with which the assembly was loaded, if any.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_ImageRuntimeVersion\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_ImageRuntimeVersion_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ImageRuntimeVersion</div>        \r\n          </div>\r\n    \r\n            <p>Gets a string representing the version of the common language runtime (CLR) saved in the file containing the manifest.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string ImageRuntimeVersion { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The CLR version folder name. This is not a full path.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For example, the value for the .NET Framework version 1.1 would be v1.1.4322. The binary files for that version would be located in the path %windir%\\Microsoft.NET\\Framework\\v1.1.4322.  </p>\n<p> By default, ImageRuntimeVersion is set to the version of the CLR used to build the assembly. However, it might have been set to another value at compile time.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_IsDynamic\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_IsDynamic_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsDynamic</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether the current assembly was generated dynamically in the current process by using reflection emit.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool IsDynamic { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current assembly was generated dynamically in the current process; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Dynamic assemblies are represented by the derived class <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder\" data-linktype=\"relative-path\">AssemblyBuilder</a>.  </p>\n<p> When a dynamic assembly is saved to disk, the saved assembly is not dynamic. If the saved assembly is loaded into another application domain or process, the IsDynamic property returns <code>false</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_IsFullyTrusted\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_IsFullyTrusted_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsFullyTrusted</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether the current assembly is loaded with full trust.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsFullyTrusted { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current assembly is loaded with full trust; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_Location\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_Location_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Location</div>        \r\n          </div>\r\n    \r\n            <p>Gets the full path or UNC location of the loaded file that contains the manifest.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string Location { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The location of the loaded file that contains the manifest. If the loaded file was shadow-copied, the location is that of the file after being shadow-copied. If the assembly is loaded from a byte array, such as when using the [Load(Byte&lt;xref href=&quot;stem.Reflection.Assembly.Load%28System.Byte%5B%5D%29&quot;&gt; method overload, the value returned is an empty string (&quot;&quot;).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The current assembly is a dynamic assembly, represented by an <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder\" data-linktype=\"relative-path\">AssemblyBuilder</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To get the location before the file has been shadow-copied, use the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_CodeBase_\" data-linktype=\"relative-path\">CodeBase</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the location of the loaded file that contains the manifest.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Reflection.Assembly#3\">   Assembly^ SampleAssembly;\n   // Instantiate a target object.\n   Int32 Integer1(0);\n   Type^ Type1;\n   // Set the Type instance to the target class type.\n   Type1 = Integer1.GetType();\n   // Instantiate an Assembly class to the assembly housing the Integer type.  \n   SampleAssembly = Assembly::GetAssembly( Integer1.GetType() );\n   // Display the physical location of the assembly containing the manifest.\n   Console::WriteLine( &quot;Location= {0}&quot;, SampleAssembly-&gt;Location );\n   // The example displays the following output:\n   //    Location=C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\mscorlib.dll  \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Reflection.Assembly#3\">      Dim SampleAssembly As [Assembly]\n      &#39; Instantiate a target object.\n      Dim Integer1 As New Int32()\n      Dim Type1 As Type\n      &#39; Set the Type instance to the target class type.\n      Type1 = Integer1.GetType()\n      &#39; Instantiate an Assembly class to the assembly housing the Integer type.  \n      SampleAssembly = [Assembly].GetAssembly(Integer1.GetType())\n      &#39; Display the physical location of the assembly containing the manifest.\n      Console.WriteLine((&quot;Location=&quot; + SampleAssembly.Location))\n      &#39; The example displays the following output:\n      &#39;    Location=C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\mscorlib.dll\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Reflection.Assembly#3\">         Assembly SampleAssembly;\n         // Instantiate a target object.\n         Int32 Integer1 = new Int32();\n         Type Type1;\n         // Set the Type instance to the target class type.\n         Type1 = Integer1.GetType();\n         // Instantiate an Assembly class to the assembly housing the Integer type.  \n         SampleAssembly = Assembly.GetAssembly(Integer1.GetType());\n         // Display the physical location of the assembly containing the manifest.\n         Console.WriteLine(&quot;Location=&quot; + SampleAssembly.Location);\n         // The example displays the following output:\n         //   Location=C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\mscorlib.dll\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_ManifestModule\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_ManifestModule_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ManifestModule</div>        \r\n          </div>\r\n    \r\n            <p>Gets the module that contains the manifest for the current assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Reflection.Module ManifestModule { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a></div>\r\n                  </div>\r\n                  <p>The module that contains the manifest for the assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_Modules\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_Modules_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Modules</div>        \r\n          </div>\r\n    \r\n            <p>Gets a collection that contains the modules in this assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Collections.Generic.IEnumerable&lt;System.Reflection.Module&gt; Modules { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a>&gt;</div>\r\n                  </div>\r\n                  <p>A collection that contains the modules in this assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_PermissionSet\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_PermissionSet_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PermissionSet</div>        \r\n          </div>\r\n    \r\n            <p>Gets the grant set of the current assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Security.PermissionSet PermissionSet { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.permissionset\" data-linktype=\"relative-path\">PermissionSet</a></div>\r\n                  </div>\r\n                  <p>The grant set of the current assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.security.permissionset\" data-linktype=\"relative-path\">PermissionSet</a> objects can contain sensitive information such as paths. Therefore, full trust is required to access these objects.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_ReflectionOnly\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_ReflectionOnly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReflectionOnly</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value indicating whether this assembly was loaded into the reflection-only context.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool ReflectionOnly { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the assembly was loaded into the reflection-only context, rather than the execution context; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If an assembly has been loaded into the reflection-only context, using the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_ReflectionOnlyLoad_\" data-linktype=\"relative-path\">ReflectionOnlyLoad</a> method, you cannot execute code in the assembly. To execute code, the assembly must be loaded into the execution context.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_SecurityRuleSet\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_SecurityRuleSet_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SecurityRuleSet</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates which set of security rules the common language runtime (CLR) enforces for this assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Security.SecurityRuleSet SecurityRuleSet { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityruleset\" data-linktype=\"relative-path\">SecurityRuleSet</a></div>\r\n                  </div>\r\n                  <p>The security rule set that the CLR enforces for this assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default, assemblies that you compile with the .NET Framework 4 have  transparency, although you can explicitly make them  instead. Assemblies that were compiled with earlier versions of the .NET Framework have level 1 transparency.  </p>\n<p> See <a href=\"../Topic/Security%20Changes%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Security Changes</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_CreateInstance_System_String_\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_CreateInstance_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateInstance(String)</div>        \r\n          </div>\r\n    \r\n            <p>Locates the specified type from this assembly and creates an instance of it using the system activator, using case-sensitive search.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object CreateInstance (string typeName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>typeName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Type.FullName*</span> of the type to locate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>An instance of the specified type created with the default constructor; or <code>null</code> if <code>typeName</code> is not found. The type is resolved using the default binder, without specifying culture or activation attributes, and with <a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a> set to <code>Public</code> or <code>Instance</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>typeName</code> is an empty string (&quot;&quot;) or a string beginning with a null character.  </p>\n<p> -or-  </p>\n<p> The current assembly was loaded into the reflection-only context.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>typeName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a></div>\r\n                  </div>\r\n                  <p>No matching constructor was found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>typeName</code> requires a dependent assembly that could not be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p><code>typeName</code> requires a dependent assembly that was found but could not be loaded.  </p>\n<p> -or-  </p>\n<p> The current assembly was loaded into the reflection-only context, and <code>typeName</code> requires a dependent assembly that was not preloaded.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>typeName</code> requires a dependent assembly, but the file is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> <code>typeName</code> requires a dependent assembly that was compiled for a version of the runtime that is later than the currently loaded version.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the runtime is unable to find <code>typeName</code> in the <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> instance, it returns <code>null</code> instead of throwing an exception. This might happen because:  </p>\n<ul>\n<li><p>You haven&#39;t specified the fully qualified name of the type.  </p>\n</li>\n<li><p>You&#39;ve specified the fully qualified type name, but its case doesnâ€™t match the case of the type&#39;s <a class=\"xref\" href=\"system.type#System_Type_FullName_\" data-linktype=\"relative-path\">FullName</a> property. For a case-insensitive comparison of <code>typeName</code> with the type&#39;s full name, call the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_CreateInstance_System_String_System_Boolean_\" data-linktype=\"relative-path\">CreateInstance(String,Boolean)</a> overload and specify <code>true</code> for the <code>ignoreCase</code> argument.  </p>\n</li>\n<li><p>The type doesnâ€™t exist in the current <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> instance.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a <code>Person</code> class and calls the CreateInstance method to instantiate it.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Reflection.Assembly.CreateInstance#1\">using System;\nusing System.Reflection;\nusing Contoso.Libraries;\n\nnamespace Contoso.Libraries\n{\n   public class Person\n   {\n      private string _name;\n   \n      public Person()\n      { }\n   \n      public Person(string name)\n      {\n         this._name = name;\n      }\n   \n      public string Name\n      { get { return this._name; }\n        set { this._name = value; } }\n   \n      public override string ToString()\n      {\n         return this._name;\n      }\n   }\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      Assembly assem = typeof(Person).Assembly;\n      Person p = (Person) assem.CreateInstance(&quot;Contoso.Libraries.Person&quot;);\n      if (! (p == null)) {\n         p.Name = &quot;John&quot;;\n         Console.WriteLine(&quot;Instantiated a {0} object whose value is &#39;{1}&#39;&quot;,\n                           p.GetType().Name, p);\n      }\n      else {\n         Console.WriteLine(&quot;Unable to instantiate a Person object.&quot;);\n      }   \n   }\n}\n// The example displays the following output:\n//        Instantiated a Person object whose value is &#39;John&#39;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Reflection.Assembly.CreateInstance#1\">Imports System.Reflection\nImports Contoso.Libraries\n\nNamespace Contoso.Libraries\n   Public Class Person\n      Private _name As String \n   \n      Public Sub New()\n      End Sub \n   \n      Public Sub New(name As String)\n         Me._name = name\n      End Sub \n   \n      Public Property Name As String \n         Get \n            Return Me._name\n         End Get \n         Set \n            Me._name = value\n         End Set \n      End Property \n   \n      Public Overrides Function ToString() As String \n         Return Me._name\n      End Function \n   End Class\nEnd Namespace \n\nModule Example\n   Public Sub Main()\n      Dim assem As Assembly = GetType(Person).Assembly\n      Dim p As Person = CType(assem.CreateInstance(&quot;Contoso.Libraries.Person&quot;),\n                              Person)\n      If p IsNot Nothing Then\n         p.Name = &quot;John&quot;\n         Console.WriteLine(&quot;Instantiated a {0} object whose value is &#39;{1}&#39;&quot;,\n                           p.GetType().Name, p)\n      Else\n         Console.WriteLine(&quot;Unable to instantiate a Person object.&quot;)\n      End If   \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Instantiated a Person object whose value is &#39;John&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_CreateInstance_System_String_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_CreateInstance_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateInstance(String,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Locates the specified type from this assembly and creates an instance of it using the system activator, with optional case-sensitive search.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object CreateInstance (string typeName, bool ignoreCase);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>typeName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Type.FullName*</span> of the type to locate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ignoreCase</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to ignore the case of the type name; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>An instance of the specified type created with the default constructor; or <code>null</code> if <code>typeName</code> is not found. The type is resolved using the default binder, without specifying culture or activation attributes, and with <a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a> set to <code>Public</code> or <code>Instance</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>typeName</code> is an empty string (&quot;&quot;) or a string beginning with a null character.  </p>\n<p> -or-  </p>\n<p> The current assembly was loaded into the reflection-only context.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a></div>\r\n                  </div>\r\n                  <p>No matching constructor was found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>typeName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>typeName</code> requires a dependent assembly that could not be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p><code>typeName</code> requires a dependent assembly that was found but could not be loaded.  </p>\n<p> -or-  </p>\n<p> The current assembly was loaded into the reflection-only context, and <code>typeName</code> requires a dependent assembly that was not preloaded.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>typeName</code> requires a dependent assembly, but the file is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> <code>typeName</code> requires a dependent assembly that was compiled for a version of the runtime that is later than the currently loaded version.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the runtime is unable to find <code>typeName</code> in the <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> instance, it returns <code>null</code> instead of throwing an exception. This might happen because:  </p>\n<ul>\n<li><p>You haven&#39;t specified the fully qualified name of the type.  </p>\n</li>\n<li><p>The type doesnâ€™t exist in the current <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> instance.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a <code>Person</code> class. It then calls the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_CreateInstance_System_String_\" data-linktype=\"relative-path\">CreateInstance(String)</a> method to instantiate it, but because the casing of the <code>typeName</code> argument doesnâ€™t match that of the type&#39;s <a class=\"xref\" href=\"system.type#System_Type_FullName_\" data-linktype=\"relative-path\">FullName</a> property, the method returns <code>null</code>. When the example passes the same string to the CreateInstance overload and specifies that the comparison should be case-insensitive, the <code>Person</code> class is found, and a <code>Person</code> object is successfully instantiated.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Reflection.Assembly.CreateInstance#2\">using System;\nusing System.Reflection;\nusing Contoso.Libraries;\n\nnamespace Contoso.Libraries\n{\n   public class Person\n   {\n      private string _name;\n   \n      public Person()\n      { }\n   \n      public Person(string name)\n      {\n         this._name = name;\n      }\n   \n      public string Name\n      { get { return this._name; }\n        set { this._name = value; } }\n   \n      public override string ToString()\n      {\n         return this._name;\n      }\n   }\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      String fullName = &quot;contoso.libraries.person&quot;;\n      Assembly assem = typeof(Person).Assembly;\n      Person p = (Person) assem.CreateInstance(fullName);\n      if (! (p == null)) {\n         p.Name = &quot;John&quot;;\n         Console.WriteLine(&quot;Instantiated a {0} object whose value is &#39;{1}&#39;&quot;,\n                           p.GetType().Name, p);\n      }\n      else {\n         Console.WriteLine(&quot;Unable to instantiate a Person object &quot; +\n                           &quot;with Assembly.CreateInstance(String)&quot;);\n         // Try case-insensitive type name comparison.\n         p = (Person) assem.CreateInstance(fullName, true);\n         if (! (p == null)) {\n            p.Name = &quot;John&quot;;\n            Console.WriteLine(&quot;Instantiated a {0} object whose value is &#39;{1}&#39;&quot;,\n                              p.GetType().Name, p);\n         }\n         else {\n            Console.WriteLine(&quot;Unable to instantiate a {0} object.&quot;, \n                              fullName);\n         }   \n      }   \n   }\n}\n// The example displays the following output:\n//    Unable to instantiate a Person object with Assembly.CreateInstance(String)\n//    Instantiated a Person object whose value is &#39;John&#39;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Reflection.Assembly.CreateInstance#2\">Imports System.Reflection\nImports Contoso.Libraries\n\nNamespace Contoso.Libraries\n   Public Class Person\n      Private _name As String \n   \n      Public Sub New()\n      End Sub \n   \n      Public Sub New(name As String)\n         Me._name = name\n      End Sub \n   \n      Public Property Name As String \n         Get \n            Return Me._name\n         End Get \n         Set \n            Me._name = value\n         End Set \n      End Property \n   \n      Public Overrides Function ToString() As String \n         Return Me._name\n      End Function \n   End Class\nEnd Namespace \n\nModule Example\n   Public Sub Main()\n      Dim fullName As String = &quot;contoso.libraries.person&quot;\n      Dim assem As Assembly = GetType(Person).Assembly\n      Dim p As Person = CType(assem.CreateInstance(fullName),\n                              Person)\n      If p IsNot Nothing Then\n         p.Name = &quot;John&quot;\n         Console.WriteLine(&quot;Instantiated a {0} object whose value is &#39;{1}&#39;&quot;,\n                           p.GetType().Name, p)\n      Else\n         Console.WriteLine(&quot;Unable to instantiate a Person object&quot; +\n                           &quot;with Assembly.CreateInstance(String)&quot;)\n         &#39; Try case-insensitive type name comparison.\n         p = CType(assem.CreateInstance(fullName, true), Person)\n         If p IsNot Nothing Then \n            p.Name = &quot;John&quot;\n            Console.WriteLine(&quot;Instantiated a {0} object whose value is &#39;{1}&#39;&quot;,\n                              p.GetType().Name, p)\n         Else \n            Console.WriteLine(&quot;Unable to instantiate a {0} object.&quot;, \n                              fullName)\n         End If   \n      End If   \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    Unable to instantiate a Person object with Assembly.CreateInstance(String)\n&#39;    Instantiated a Person object whose value is &#39;John&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_CreateInstance_System_String_System_Boolean_System_Reflection_BindingFlags_System_Reflection_Binder_System_Object___System_Globalization_CultureInfo_System_Object___\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_CreateInstance_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateInstance(String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[])</div>        \r\n          </div>\r\n    \r\n            <p>Locates the specified type from this assembly and creates an instance of it using the system activator, with optional case-sensitive search and having the specified culture, arguments, and binding and activation attributes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual object CreateInstance (string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>typeName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Type.FullName*</span> of the type to locate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ignoreCase</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to ignore the case of the type name; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitmask that affects the way in which the search is conducted. The value is a combination of bit flags from <a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.binder\" data-linktype=\"relative-path\">Binder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <code>MemberInfo</code> objects via reflection. If <code>binder</code> is <code>null</code>, the default binder is used.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>args</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array that contains the arguments to be passed to the constructor. This array of arguments must match in number, order, and type the parameters of the constructor to be invoked. If the default constructor is desired, <code>args</code> must be an empty array or <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>culture</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An instance of <code>CultureInfo</code> used to govern the coercion of types. If this is <code>null</code>, the <code>CultureInfo</code> for the current thread is used. (This is necessary to convert a <code>String</code> that represents 1000 to a <code>Double</code> value, for example, since 1000 is represented differently by different cultures.)</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>activationAttributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of one or more attributes that can participate in activation. Typically, an array that contains a single <a class=\"xref\" href=\"system.runtime.remoting.activation.urlattribute\" data-linktype=\"relative-path\">UrlAttribute</a> object that specifies the URL that is required to activate a remote object.  This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>An instance of the specified type, or <code>null</code> if <code>typeName</code> is not found. The supplied arguments are used to resolve the type, and to bind the constructor that is used to create the instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>typeName</code> is an empty string (&quot;&quot;) or a string beginning with a null character.  </p>\n<p> -or-  </p>\n<p> The current assembly was loaded into the reflection-only context.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>typeName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a></div>\r\n                  </div>\r\n                  <p>No matching constructor was found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>A non-empty activation attributes array is passed to a type that does not inherit from <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>typeName</code> requires a dependent assembly that could not be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p><code>typeName</code> requires a dependent assembly that was found but could not be loaded.  </p>\n<p> -or-  </p>\n<p> The current assembly was loaded into the reflection-only context, and <code>typeName</code> requires a dependent assembly that was not preloaded.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>typeName</code> requires a dependent assembly, but the file is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> <code>typeName</code> requires a dependent assembly which that was compiled for a version of the runtime that is later than the currently loaded version.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_CreateQualifiedName_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_CreateQualifiedName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateQualifiedName(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates the name of a type qualified by the display name of its assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string CreateQualifiedName (string assemblyName, string typeName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The display name of an assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>typeName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The full name of a type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The full name of the type qualified by the display name of the assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The format of the returned string is:  </p>\n<p> &lt;FullTypeName&gt;, &lt;AssemblyDisplayName&gt;  </p>\n<p> See <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a> for a description of the format of the display name of an assembly.  </p>\n<p> To accommodate changes in versions of the common language runtime, use this method rather than constructing the qualified name yourself.  For information about qualified assembly names, see <a class=\"xref\" href=\"system.type#System_Type_AssemblyQualifiedName_\" data-linktype=\"relative-path\">AssemblyQualifiedName</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether this assembly and the specified object are equal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object o);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>o</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to compare with this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>o</code> is equal to this instance; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Equals method performs a test for reference equality to determine whether the current instance and <code>o</code> are equal.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_GetAssembly_System_Type_\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_GetAssembly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAssembly(Type)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the currently loaded assembly in which the specified type is defined.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Reflection.Assembly GetAssembly (Type type);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object representing a type in the assembly that will be returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </div>\r\n                  <p>The assembly in which the specified type is defined.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>type</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Calling this method is equivalent to retrieving the value of the  <a class=\"xref\" href=\"system.type#System_Type_Assembly\" data-linktype=\"relative-path\">System.Type.Assembly</a> property. However, the <a class=\"xref\" href=\"system.type#System_Type_Assembly\" data-linktype=\"relative-path\">System.Type.Assembly</a> property typically offers superior performance.  </p>\n<p> In order to call this method, you must have a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object, which means that the assembly in which the class is defined must already be loaded.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example retrieves the assembly that contains the <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> type and displays its name and file location.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Reflection.Assembly#12\">Imports System.Reflection\n\nModule Example\n   Public Sub Main()\n      &#39; Get a Type object.\n      Dim t As Type = GetType(Integer)\n      &#39; Instantiate an Assembly class to the assembly housing the Integer type.\n      Dim assem As Assembly = Assembly.GetAssembly(t)\n      &#39; Display the name of the assembly.\n      Console.WriteLine(&quot;Name: {0}&quot;, assem.FullName)\n      &#39; Get the location of the assembly using the file: protocol.\n      Console.WriteLine(&quot;CodeBase: {0}&quot;, assem.CodeBase)\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;    Name: mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\n&#39;    CodeBase: file:&#39;/C:/Windows/Microsoft.NET/Framework64/v4.0.30319/mscorlib.dll\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Reflection.Assembly#12\">using namespace System;\nusing namespace System::Reflection;\n\nvoid main()\n{\n   // Get a Type object.\n   Type^ t = int::typeid;\n   // Instantiate an Assembly class to the assembly housing the Integer type.\n   Assembly^ assem = Assembly::GetAssembly(t);\n   // Display the name of the assembly.\n   Console::WriteLine(&quot;Name: {0}&quot;, assem-&gt;FullName);\n   // Get the location of the assembly using the file: protocol.\n   Console::WriteLine(&quot;CodeBase: {0}&quot;, assem-&gt;CodeBase);\n}\n// The example displays output like the following:\n//    Name: mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\n//    CodeBase: file:///C:/Windows/Microsoft.NET/Framework64/v4.0.30319/mscorlib.dll\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Reflection.Assembly#12\">using System;\nusing System.Reflection;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Get a Type object.\n      Type t = typeof(int);\n      // Instantiate an Assembly class to the assembly housing the Integer type.\n      Assembly assem = Assembly.GetAssembly(t);\n      // Display the name of the assembly.\n      Console.WriteLine(&quot;Name: {0}&quot;, assem.FullName);\n      // Get the location of the assembly using the file: protocol.\n      Console.WriteLine(&quot;CodeBase: {0}&quot;, assem.CodeBase);\n   }\n}\n// The example displays output like the following:\n//    Name: mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\n//    CodeBase: file:///C:/Windows/Microsoft.NET/Framework64/v4.0.30319/mscorlib.dll\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_GetCallingAssembly\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_GetCallingAssembly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCallingAssembly()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> of the method that invoked the currently executing method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Reflection.Assembly GetCallingAssembly ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </div>\r\n                  <p>The <code>Assembly</code> object of the method that invoked the currently executing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the method that calls the GetCallingAssembly method is expanded inline by the just-in-time (JIT) compiler, or if its caller is expanded inline, the assembly that is returned by GetCallingAssemblymay differ unexpectedly. For example, consider the following methods and assemblies:  </p>\n<ul>\n<li><p>Method <code>M1</code> in assembly <code>A1</code> calls GetCallingAssembly.  </p>\n</li>\n<li><p>Method <code>M2</code> in assembly <code>A2</code> calls <code>M1</code>.  </p>\n</li>\n<li><p>Method <code>M3</code> in assembly <code>A3</code> calls <code>M2</code>.  </p>\n<p>When <code>M1</code> is not inlined, GetCallingAssembly returns <code>A2</code>. When <code>M1</code> is inlined, GetCallingAssembly returns <code>A3</code>. Similarly, when <code>M2</code> is not inlined, GetCallingAssembly returns <code>A2</code>. When <code>M2</code> is inlined, GetCallingAssembly returns <code>A3</code>.  </p>\n<p>This effect also occurs when <code>M1</code> executes as a tail call from <code>M2</code>, or when <code>M2</code> executes as a tail call from <code>M3</code>. You can prevent the JIT compiler from inlining the method that calls GetCallingAssembly, by applying the <a class=\"xref\" href=\"system.runtime.compilerservices.methodimplattribute\" data-linktype=\"relative-path\">MethodImplAttribute</a> attribute with the <a class=\"xref\" href=\"system.runtime.compilerservices.methodimploptions\" data-linktype=\"relative-path\">System.Runtime.CompilerServices.MethodImplOptions</a> flag, but there is no similar mechanism for preventing tail calls.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example gets the calling assembly of the current method.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Reflection.Assembly#4\">using namespace System;\nusing namespace System::Reflection;\n\nvoid main()\n{\n   // Instantiate a target object.\n   Int32 integer1 = 0;\n   // Set the Type instance to the target class type.\n   Type^ type1 = integer1.GetType();\n   // Instantiate an Assembly class to the assembly housing the Integer type.\n   Assembly^ sampleAssembly = Assembly::GetAssembly(integer1.GetType());\n   // Display the name of the assembly that is calling the method.\n   Console::WriteLine(&quot;GetCallingAssembly = {0}&quot;, Assembly::GetCallingAssembly()-&gt;FullName);\n}\n// The example displays output like the following:\n//    GetCallingAssembly = Example, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Reflection.Assembly#4\">Imports System.Reflection\n\nModule Example\n   Public Sub Main()\n      &#39; Instantiate a target object.\n      Dim int1 As Integer\n      &#39; Set the Type instance to the target class type.\n      Dim type1 As Type =int1.GetType()\n      &#39; Instantiate an Assembly class to the assembly housing the Integer type.\n      Dim sampleAssembly = Assembly.GetAssembly(int1.GetType())\n      &#39; Display the name of the assembly that is calling the method.\n      Console.WriteLine((&quot;GetCallingAssembly = &quot; + Assembly.GetCallingAssembly().FullName))\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;   GetCallingAssembly = Example, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Reflection.Assembly#4\">using System;\nusing System.Reflection;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Instantiate a target object.\n      int integer1 = 0;\n      // Set the Type instance to the target class type.\n      Type type1 = integer1.GetType();\n      // Instantiate an Assembly class to the assembly housing the Integer type.\n      Assembly sampleAssembly = Assembly.GetAssembly(integer1.GetType());\n      // Display the name of the assembly that is calling the method.\n      Console.WriteLine(&quot;GetCallingAssembly = &quot; + Assembly.GetCallingAssembly().FullName);\n   }\n}\n// The example displays output like the following:\n//    GetCallingAssembly = Example, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_GetCustomAttributes_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_GetCustomAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttributes(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Gets all the custom attributes for this assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual object[] GetCustomAttributes (bool inherit);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>inherit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This argument is ignored for objects of type <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </div>\r\n                  <p>An array that contains the custom attributes for this assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method implements the corresponding <a class=\"xref\" href=\"system.reflection.icustomattributeprovider\" data-linktype=\"relative-path\">ICustomAttributeProvider</a> interface method. Therefore, the <code>inherit</code> parameter must be specified even though it is ignored.  </p>\n<p> A pseudo-attribute indicates bits of the core metadata that must be set when the attribute is present. Unlike a custom attribute that extends the metadata for a type and is saved along with the type, a pseudo-attribute modifies the metadata for the type and then is discarded. Some of the resulting bits cannot be accessed using existing reflection APIs.  </p>\n<p> The following table summarizes the different pseudo-attributes and the accessors for the bits that are available in reflection.  </p>\n<table>\n<thead>\n<tr>\n<th>Pseudo-Attribute</th>\n<th>Metadata Bits</th>\n<th>Reflection Accessor</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DllImportAttribute</td>\n<td>CorPInvokeMap<br><br> DLL name</td>\n<td>No accessor for PInvokeMap for ordinary method/global method attributes.<br><br> No accessor for DLL name.</td>\n</tr>\n<tr>\n<td>GuidAttribute</td>\n<td>Stored as a real custom attribute.</td>\n<td>Accessed as a real custom attribute.</td>\n</tr>\n<tr>\n<td>ComImportAttribute</td>\n<td>CorTypeAttr.tdImport</td>\n<td>Type.Attributes.Import</td>\n</tr>\n<tr>\n<td>SerializableAttribute</td>\n<td>CorTypeAttr.tdSerializable</td>\n<td>Type.Attributes.Serializable</td>\n</tr>\n<tr>\n<td>NonSerializedAttribute</td>\n<td>CorFieldAttr.fdNotSerialized</td>\n<td>FieldInfo.Attributes.NotSerialized</td>\n</tr>\n<tr>\n<td>MethodImplAttribute</td>\n<td>CorMethodImpl</td>\n<td>MethodInfo.GetMethodImplementationFlags()<br><br> ConstructorInfo.GetMethodImplementationFlags()</td>\n</tr>\n<tr>\n<td>MarshalAsAttribute</td>\n<td>Various bits.</td>\n<td>No accessor.</td>\n</tr>\n<tr>\n<td>PreserveSigAttribute</td>\n<td>CorMethodImpl.miOLE</td>\n<td>MethodInfo.GetMethodImplementationFlags().OLE<br><br> ConstructorInfo.GetMethodImplementationFlags().OLE</td>\n</tr>\n<tr>\n<td>InAttribute</td>\n<td>CorParamAttr.pdIn</td>\n<td>ParameterInfo.Attributes.In</td>\n</tr>\n<tr>\n<td>OutAttribute</td>\n<td>CorParamAttr.pdOut</td>\n<td>ParameterInfo.Attributes.Out</td>\n</tr>\n<tr>\n<td>StructLayoutAttribute</td>\n<td>CorTypeAttr.tdLayoutSequential<br><br> CorTypeAttr.tdExplicitLayout<br><br> CorTypeAttr.tdAnsiClass<br><br> CorTypeAttr.tdUnicodeClass<br><br> CorTypeAttr.tdAutoClass<br><br> Class packing.</td>\n<td>Type.Attributes.LayoutSequential<br><br> Type.Attributes.ExplicitLayout<br><br> Type.Attributes.AnsiClass<br><br> Type.Attributes.UnicodeClass<br><br> Type.Attributes.AutoClass<br><br> No accessor.</td>\n</tr>\n<tr>\n<td>FieldOffsetAttribute</td>\n<td>Field offset.</td>\n<td>No accessor.</td>\n</tr>\n<tr>\n<td>AssemblyLoadAttribute</td>\n<td>CorAssemblyFlags</td>\n<td>No accessor or enumerator.</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_GetCustomAttributes_System_Type_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_GetCustomAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttributes(Type,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the custom attributes for this assembly as specified by type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual object[] GetCustomAttributes (Type attributeType, bool inherit);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type for which the custom attributes are to be returned.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inherit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This argument is ignored for objects of type <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </div>\r\n                  <p>An array that contains the custom attributes for this assembly as specified by <code>attributeType</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>attributeType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>attributeType</code> is not a runtime type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method implements the corresponding <a class=\"xref\" href=\"system.reflection.icustomattributeprovider\" data-linktype=\"relative-path\">ICustomAttributeProvider</a> interface method. Therefore, the <code>inherit</code> parameter must be specified even though it is ignored.  </p>\n<p> A pseudo-attribute indicates bits of the core metadata that must be set when the attribute is present. Unlike a custom attribute that extends the metadata for a type and is saved along with the type, a pseudo-attribute modifies the metadata for the type and then is discarded. Some of the resulting bits cannot be accessed using existing reflection APIs.  </p>\n<p> The following table summarizes the different pseudo-attributes and the accessors for the bits that are available in reflection.  </p>\n<table>\n<thead>\n<tr>\n<th>Pseudo-Attribute</th>\n<th>Metadata Bits</th>\n<th>Reflection Accessor</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DllImportAttribute</td>\n<td>CorPInvokeMap<br><br> DLL name</td>\n<td>No accessor for PInvokeMap for ordinary method/global method attributes.<br><br> No accessor for DLL name.</td>\n</tr>\n<tr>\n<td>GuidAttribute</td>\n<td>Stored as a real custom attribute.</td>\n<td>Accessed as a real custom attribute.</td>\n</tr>\n<tr>\n<td>ComImportAttribute</td>\n<td>CorTypeAttr.tdImport</td>\n<td>Type.Attributes.Import</td>\n</tr>\n<tr>\n<td>SerializableAttribute</td>\n<td>CorTypeAttr.tdSerializable</td>\n<td>Type.Attributes.Serializable</td>\n</tr>\n<tr>\n<td>NonSerializedAttribute</td>\n<td>CorFieldAttr.fdNotSerialized</td>\n<td>FieldInfo.Attributes.NotSerialized</td>\n</tr>\n<tr>\n<td>MethodImplAttribute</td>\n<td>CorMethodImpl</td>\n<td>MethodInfo.GetMethodImplementationFlags()<br><br> ConstructorInfo.GetMethodImplementationFlags()</td>\n</tr>\n<tr>\n<td>MarshalAsAttribute</td>\n<td>Various bits.</td>\n<td>No accessor.</td>\n</tr>\n<tr>\n<td>PreserveSigAttribute</td>\n<td>CorMethodImpl.miOLE</td>\n<td>MethodInfo.GetMethodImplementationFlags().OLE<br><br> ConstructorInfo.GetMethodImplementationFlags().OLE</td>\n</tr>\n<tr>\n<td>InAttribute</td>\n<td>CorParamAttr.pdIn</td>\n<td>ParameterInfo.Attributes.In</td>\n</tr>\n<tr>\n<td>OutAttribute</td>\n<td>CorParamAttr.pdOut</td>\n<td>ParameterInfo.Attributes.Out</td>\n</tr>\n<tr>\n<td>StructLayoutAttribute</td>\n<td>CorTypeAttr.tdLayoutSequential<br><br> CorTypeAttr.tdExplicitLayout<br><br> CorTypeAttr.tdAnsiClass<br><br> CorTypeAttr.tdUnicodeClass<br><br> CorTypeAttr.tdAutoClass<br><br> Class packing.</td>\n<td>Type.Attributes.LayoutSequential<br><br> Type.Attributes.ExplicitLayout<br><br> Type.Attributes.AnsiClass<br><br> Type.Attributes.UnicodeClass<br><br> Type.Attributes.AutoClass<br><br> No accessor.</td>\n</tr>\n<tr>\n<td>FieldOffsetAttribute</td>\n<td>Field offset.</td>\n<td>No accessor.</td>\n</tr>\n<tr>\n<td>AssemblyLoadAttribute</td>\n<td>CorAssemblyFlags</td>\n<td>No accessor or enumerator.</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_GetCustomAttributesData\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_GetCustomAttributesData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttributesData()</div>        \r\n          </div>\r\n    \r\n            <p>Returns information about the attributes that have been applied to the current <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a>, expressed as <a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a> objects.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt; GetCustomAttributesData ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList</a>&lt;<a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a>&gt;</div>\r\n                  </div>\r\n                  <p>A generic list of <a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a> objects representing data about the attributes that have been applied to the current assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to examine the custom attributes of code in the reflection-only context, in cases where the custom attributes themselves are defined in code that is loaded into the reflection-only context. Methods like <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a> and <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a> cannot be used in such cases, because they create instances of the attributes. Code in the reflection-only context cannot be executed. For more information and for example code, see the <a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a> class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_GetEntryAssembly\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_GetEntryAssembly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEntryAssembly()</div>        \r\n          </div>\r\n    \r\n            <p>Gets the process executable in the default application domain. In other application domains, this is the first executable that was executed by <span class=\"xref\">stem.AppDomain.ExecuteAssembly*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Reflection.Assembly GetEntryAssembly ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </div>\r\n                  <p>The assembly that is the process executable in the default application domain, or the first executable that was executed by <span class=\"xref\">stem.AppDomain.ExecuteAssembly*</span>. Can return <code>null</code> when called from unmanaged code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The GetEntryAssembly method can return <code>null</code> when a managed assembly has been loaded from an unmanaged application. For example, if an unmanaged application creates an instance of a COM component written in C#, a call to the GetEntryAssembly method from the C# component returns null, because the entry point for the process was unmanaged code rather than a managed assembly.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_GetExecutingAssembly\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_GetExecutingAssembly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetExecutingAssembly()</div>        \r\n          </div>\r\n    \r\n            <p>Gets the assembly that contains the code that is currently executing.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Reflection.Assembly GetExecutingAssembly ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </div>\r\n                  <p>The assembly that contains the code that is currently executing.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For performance reasons, you should call this method only when you do not know at design time what assembly is currently executing. The recommended way to retrieve an <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> object that represents the current assembly is to use the <a class=\"xref\" href=\"system.type#System_Type_Assembly_\" data-linktype=\"relative-path\">Assembly</a> property of a type found in the assembly, as the following example illustrates.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Reflection.Assembly.GetExecutingAssembly#1\">using System;\nusing System.Reflection;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Assembly assem = typeof(Example).Assembly;\n      Console.WriteLine(&quot;Assembly name: {0}&quot;, assem.FullName);\n   }\n}\n// The example displays output like the following:\n//    Assembly name: Assembly1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Reflection.Assembly.GetExecutingAssembly#1\">Imports System.Reflection\n\nModule Example\n   Public Sub Main()\n      Dim assem As Assembly = GetType(Example).Assembly\n      Console.WriteLine(&quot;Assembly name: {0}&quot;, assem.FullName)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;   Assembly name: Assembly1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\n</code></pre><p> To get the assembly that contains the method that called the currently executing code, use <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetCallingAssembly_\" data-linktype=\"relative-path\">GetCallingAssembly</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <a class=\"xref\" href=\"system.type#System_Type_Assembly_\" data-linktype=\"relative-path\">Assembly</a> property to get the currently executing assembly based on a type contained in that assembly. It also calls the GetExecutingAssembly method to show that it returns an <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> object that represents the same assembly.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Reflection.Assembly.GetExecutingAssembly#5\">using System;\nusing System.Reflection;\n\nclass Example\n{\n   static void Main()\n   {\n      // Get the assembly from a known type in that assembly.\n      Type t = typeof(Example);\n      Assembly assemFromType = t.Assembly;\n      Console.WriteLine(&quot;Assembly that contains Example:&quot;);\n      Console.WriteLine(&quot;   {0}<br>&quot;, assemFromType.FullName);\n\n      // Get the currently executing assembly.\n      Assembly currentAssem = Assembly.GetExecutingAssembly();\n      Console.WriteLine(&quot;Currently executing assembly:&quot;);\n      Console.WriteLine(&quot;   {0}<br>&quot;, currentAssem.FullName);\n      \n      Console.WriteLine(&quot;The two Assembly objects are equal: {0}&quot;,\n                        assemFromType.Equals(currentAssem));\n   }\n}\n// The example displays the following output:\n//    Assembly that contains Example:\n//       GetExecutingAssembly1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\n//\n//    Currently executing assembly:\n//       GetExecutingAssembly1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\n//\n//    The two Assembly objects are equal: True\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Reflection.Assembly.GetExecutingAssembly#5\">Imports System.Reflection\n\nPublic Module Example\n   Public Sub Main()\n      &#39; Get the assembly from a known type in that assembly.\n      Dim t As Type = GetType(Example)\n      Dim assemFromType As Assembly = t.Assembly\n      Console.WriteLine(&quot;Assembly that contains Example:&quot;)\n      Console.WriteLine(&quot;   {0}&quot;, assemFromType.FullName)\n      Console.WriteLine()\n      \n      &#39; Get the currently executing assembly.\n      Dim currentAssem As Assembly = Assembly.GetExecutingAssembly()\n      Console.WriteLine(&quot;Currently executing assembly:&quot;)\n      Console.WriteLine(&quot;   {0}&quot;, currentAssem.FullName)\n      Console.WriteLine()\n      \n      Console.WriteLine(&quot;The two Assembly objects are equal: {0}&quot;,\n                        assemFromType.Equals(currentAssem))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    Assembly that contains Example:\n&#39;       GetExecutingAssembly1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\n&#39;\n&#39;    Currently executing assembly:\n&#39;       GetExecutingAssembly1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\n&#39;\n&#39;    The two Assembly objects are equal: True\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Reflection.Assembly.GetExecutingAssembly#5\">using namespace System;\nusing namespace System::Reflection;\n\nref class Example\n{};\n\nvoid main()\n{\n   // Get the assembly from a known type in that assembly.\n   Type^ t = Example::typeid;\n   Assembly^ assemFromType = t-&gt;Assembly;\n   Console::WriteLine(&quot;Assembly that contains Example:&quot;);\n   Console::WriteLine(&quot;   {0}<br>&quot;, assemFromType-&gt;FullName);\n\n   // Get the currently executing assembly.\n   Assembly^ currentAssem = Assembly::GetExecutingAssembly();\n   Console::WriteLine(&quot;Currently executing assembly:&quot;);\n   Console::WriteLine(&quot;   {0}<br>&quot;, currentAssem-&gt;FullName);\n\n   Console::WriteLine(&quot;The two Assembly objects are equal: {0}&quot;,\n                      assemFromType-&gt;Equals(currentAssem));\n}\n// The example displays the following output:\n//    Assembly that contains Example:\n//       GetExecutingAssembly1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\n//\n//    Currently executing assembly:\n//       GetExecutingAssembly1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\n//\n//    The two Assembly objects are equal: True\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_GetExportedTypes\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_GetExportedTypes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetExportedTypes()</div>        \r\n          </div>\r\n    \r\n            <p>Gets the public types defined in this assembly that are visible outside the assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual Type[] GetExportedTypes ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </div>\r\n                  <p>An array that represents the types defined in this assembly that are visible outside the assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The assembly is a dynamic assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The only types visible outside an assembly are public types and public types nested within other public types.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code sample defines a number of classes with various access levels, and calls GetExportedTypes to display the ones that are visible from outside the assembly.  </p>\n<pre><code class=\"lang-vb\" name=\"Assembly.GetExportedTypes#1\">Imports System\nImports System.Reflection\n\nPublic Class Example\n    Public Shared Sub Main()\n        For Each t As Type In GetType(Example).Assembly.GetExportedTypes()\n            Console.WriteLine(t)\n        Next\n    End Sub\nEnd Class\n\nPublic Class PublicClass\n    Public Class PublicNestedClass\n    End Class\n\n    Protected Class ProtectedNestedClass\n    End Class\n\n    Friend Class FriendNestedClass\n    End Class\n\n    Private Class PrivateNestedClass\n    End Class\nEnd Class\n\nFriend Class FriendClass\n    Public Class PublicNestedClass\n    End Class\n\n    Protected Class ProtectedNestedClass\n    End Class\n\n    Friend Class FriendNestedClass\n    End Class\n\n    Private Class PrivateNestedClass\n    End Class\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"Assembly.GetExportedTypes#1\">using namespace System;\nusing namespace System::Reflection;\n\nnamespace ExportedClassExample\n{\n    public ref class Example sealed\n    {\n    private:\n        Example() \n        {\n        }\n\n    public:\n        void static EnumerateExportedTypes()\n        {\n            for each (Type^ exportedType in \n                Example::typeid-&gt;Assembly-&gt;GetExportedTypes())\n            {\n                Console::WriteLine(exportedType);\n            }\n        }\n    };\n\n    public ref class PublicClass\n    {\n    public:\n        ref class PublicNestedClass \n        { \n        };\n\n    protected:\n        ref class ProtectedNestedClass \n        { \n        };\n\n    internal:\n        ref class FriendNestedClass \n        { \n        };\n\n    private:\n        ref class PrivateNestedClass\n        { \n        };\n    };\n\n    ref class FriendClass\n    {\n    public:\n        ref class PublicNestedClass\n        { \n        };\n\n    protected:\n        ref class ProtectedNestedClass \n        { \n        };\n\n    internal:\n        ref class FriendNestedClass \n        { \n        };\n\n    private:\n        ref class PrivateNestedClass \n        { \n        };\n    };\n}\n\nint main()\n{\n    ExportedClassExample::Example::EnumerateExportedTypes();\n\n    return 0;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Assembly.GetExportedTypes#1\">using System;\nusing System.Reflection;\n\npublic class Example\n{\n    public static void Main()\n    {\n        foreach (Type t in typeof(Example).Assembly.GetExportedTypes())\n        {\n            Console.WriteLine(t);\n        }\n    }\n}\n\npublic class PublicClass\n{\n    public class PublicNestedClass {}\n\n    protected class ProtectedNestedClass {}\n \n    internal class FriendNestedClass {}\n\n    private class PrivateNestedClass {}\n}\n\ninternal class FriendClass\n{\n    public class PublicNestedClass {}\n\n    protected class ProtectedNestedClass {}\n\n    internal class FriendNestedClass {}\n\n    private class PrivateNestedClass {}\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_GetFile_System_String_\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_GetFile_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetFile(String)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a> for the specified file in the file table of the manifest of this assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.IO.FileStream GetFile (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the specified file. Do not include the path to the file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a></div>\r\n                  </div>\r\n                  <p>A stream that contains the specified file, or <code>null</code> if the file is not found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>A file that was found could not be loaded.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>name</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>name</code> parameter is an empty string (&quot;&quot;).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> was not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is not a valid assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method works on both public and private resource files.  </p>\n<p> The <code>name</code>should not include the path to the file.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_GetFiles\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_GetFiles_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetFiles()</div>        \r\n          </div>\r\n    \r\n            <p>Gets the files in the file table of an assembly manifest.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.IO.FileStream[] GetFiles ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a>[]</div>\r\n                  </div>\r\n                  <p>An array of streams that contain the files.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>A file that was found could not be loaded.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>A file was not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p>A file was not a valid assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method works on public and private resource files.  </p>\n<p> This overload is equivalent to calling the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetFiles_System_Boolean_\" data-linktype=\"relative-path\">GetFiles(Boolean)</a> overload and specifying <code>false</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_GetFiles_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_GetFiles_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetFiles(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the files in the file table of an assembly manifest, specifying whether to include resource modules.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.IO.FileStream[] GetFiles (bool getResourceModules);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>getResourceModules</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to include resource modules; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a>[]</div>\r\n                  </div>\r\n                  <p>An array of streams that contain the files.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>A file that was found could not be loaded.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>A file was not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p>A file was not a valid assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method works on public and private resource files.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_GetHashCode\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the hash code for this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer hash code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_GetLoadedModules\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_GetLoadedModules_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetLoadedModules()</div>        \r\n          </div>\r\n    \r\n            <p>Gets all the loaded modules that are part of this assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Module[] GetLoadedModules ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a>[]</div>\r\n                  </div>\r\n                  <p>An array of modules.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_GetLoadedModules_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_GetLoadedModules_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetLoadedModules(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Gets all the loaded modules that are part of this assembly, specifying whether to include resource modules.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Reflection.Module[] GetLoadedModules (bool getResourceModules);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>getResourceModules</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to include resource modules; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a>[]</div>\r\n                  </div>\r\n                  <p>An array of modules.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_GetManifestResourceInfo_System_String_\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_GetManifestResourceInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetManifestResourceInfo(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns information about how the given resource has been persisted.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Reflection.ManifestResourceInfo GetManifestResourceInfo (string resourceName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>resourceName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The case-sensitive name of the resource.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.manifestresourceinfo\" data-linktype=\"relative-path\">ManifestResourceInfo</a></div>\r\n                  </div>\r\n                  <p>An object that is populated with information about the resource&#39;s topology, or <code>null</code> if the resource is not found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>resourceName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>resourceName</code> parameter is an empty string (&quot;&quot;).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Resource information is returned only if the resource is visible to the caller, or the caller has <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_GetManifestResourceNames\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_GetManifestResourceNames_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetManifestResourceNames()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the names of all the resources in this assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string[] GetManifestResourceNames ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>An array that contains the names of all the resources.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can use each resource name in the array returned by this method as follows:  </p>\n<ul>\n<li><p>You can pass the resource name to the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetManifestResourceInfo_\" data-linktype=\"relative-path\">GetManifestResourceInfo</a> method to get additional information about the resource.  </p>\n</li>\n<li><p>If the name identifies a binary .resources file, you can remove its .resources file extension and pass it to the <a class=\"xref\" href=\"system.resources.resourcemanager#System_Resources_ResourceManager__ctor_System_String_System_Reflection_Assembly_\" data-linktype=\"relative-path\">System.Resources.ResourceManager.ResourceManager(String,Assembly)</a> constructor to instantiate the resource manager.  </p>\n</li>\n<li><p>You can pass the resource name to the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetManifestResourceStream_\" data-linktype=\"relative-path\">GetManifestResourceStream</a> method to retrieve a <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object that you can then pass to the <a class=\"xref\" href=\"system.resources.resourcereader#System_Resources_ResourceReader__ctor_System_IO_Stream_\" data-linktype=\"relative-path\">System.Resources.ResourceReader.ResourceReader(Stream)</a> constructor.  </p>\n</li>\n<li><p>You can pass the resource name to the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetManifestResourceStream_\" data-linktype=\"relative-path\">GetManifestResourceStream</a> method to retrieve a <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object that you can then pass to the <a class=\"xref\" href=\"system.resources.resourceset#System_Resources_ResourceSet__ctor_System_IO_Stream_\" data-linktype=\"relative-path\">System.Resources.ResourceSet.ResourceSet(Stream)</a> constructor.  </p>\n<p>Resource information is returned only if the resource is visible to the caller, or the caller has <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a>.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_GetManifestResourceStream_System_String_\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_GetManifestResourceStream_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetManifestResourceStream(String)</div>        \r\n          </div>\r\n    \r\n            <p>Loads the specified manifest resource from this assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.IO.Stream GetManifestResourceStream (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The case-sensitive name of the manifest resource being requested.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </div>\r\n                  <p>The manifest resource; or <code>null</code> if no resources were specified during compilation or if the resource is not visible to the caller.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>name</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>name</code> parameter is an empty string (&quot;&quot;).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <div class=\"alert NOTE\"><br> In the <a href=\"http://go.microsoft.com/fwlink/?LinkID=247912\" data-linktype=\"external\">.NET for Windows Store apps</a> or the <a href=\"../Topic/Cross-Platform%20Development%20with%20the%20Portable%20Class%20Library.md\" data-linktype=\"relative-path\">Portable Class Library</a>, catch the base class exception, <a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a>, instead.<br>\n</div>  \n\n<p> A file that was found could not be loaded.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> was not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is not a valid assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Resource length is greater than <a class=\"xref\" href=\"system.int64#System_Int64_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A manifest resource is a resource (such as an image file) that is embedded in the assembly at compile time. For more information about manifest resources, see <a href=\"http://go.microsoft.com/fwlink/?LinkId=204554\" data-linktype=\"external\">Microsoft .NET Framework Resource Basics</a> in the MSDN Library.  </p>\n<p> Resource information is returned only if the resource is visible to the caller, or the caller has <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This method returns <code>null</code> if a private resource in another assembly is accessed and the caller does not have <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag.  </p>\n</div>\n<p> If the assembly manifest lists a resource file, GetManifestResourceStream returns a <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object even if the resource file cannot be found on disk at the time. If the resource file is not found, passing the resulting <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object to the <a class=\"xref\" href=\"system.resources.resourcereader\" data-linktype=\"relative-path\">ResourceReader</a> constructor causes an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_GetManifestResourceStream_System_Type_System_String_\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_GetManifestResourceStream_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetManifestResourceStream(Type,String)</div>        \r\n          </div>\r\n    \r\n            <p>Loads the specified manifest resource, scoped by the namespace of the specified type, from this assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.IO.Stream GetManifestResourceStream (Type type, string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type whose namespace is used to scope the manifest resource name.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The case-sensitive name of the manifest resource being requested.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </div>\r\n                  <p>The manifest resource; or <code>null</code> if no resources were specified during compilation or if the resource is not visible to the caller.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>name</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>name</code> parameter is an empty string (&quot;&quot;).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>A file that was found could not be loaded.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> was not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is not a valid assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Resource length is greater than <a class=\"xref\" href=\"system.int64#System_Int64_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For example, if the full name specified for <code>type</code> is &quot;MyNameSpace.MyClasses&quot; and <code>name</code> is &quot;Net&quot;, this method overload searches for a resource named &quot;MyNameSpace.Net&quot;.  </p>\n<p> A manifest resource is a resource (such as an image file) that is embedded in the assembly at compile time. For more information about manifest resources, see <a href=\"http://go.microsoft.com/fwlink/?LinkId=204554\" data-linktype=\"external\">Microsoft .NET Framework Resource Basics</a> in the MSDN Library.  </p>\n<p> Resource information is returned only if the resource is visible to the caller, or the caller has <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This method returns <code>null</code> if a private resource in another assembly is accessed and the caller does not have <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag.  </p>\n</div>\n<p> If the assembly manifest lists a resource file, GetManifestResourceStream returns a <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object even if the resource file cannot be found on disk at the time. If the resource file is not found, passing the resulting <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object to the <a class=\"xref\" href=\"system.resources.resourcereader\" data-linktype=\"relative-path\">ResourceReader</a> constructor causes an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_GetModule_System_String_\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_GetModule_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetModule(String)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the specified module in this assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Reflection.Module GetModule (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the module being requested.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a></div>\r\n                  </div>\r\n                  <p>The module being requested, or <code>null</code> if the module is not found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>name</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>name</code> parameter is an empty string (&quot;&quot;).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>A file that was found could not be loaded.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> was not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is not a valid assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method works on file names.  </p>\n<p> Classes in the <code>Reflection.Emit</code> namespace emit the scope name for a dynamic module. The scope name can be determined by the <a class=\"xref\" href=\"system.reflection.module#System_Reflection_Module_ScopeName_\" data-linktype=\"relative-path\">ScopeName</a> property. Pass the kind of module you want to <code>Assembly.GetModule</code>. For example, if you want the module that contains the assembly manifest, pass the scope name of the module to <code>GetModule</code>. Otherwise, pass the file name of the module. Assemblies loaded by one of the <code>Load</code> methods that have a byte[] parameter have only one module, and that is the manifest module. Always seek these modules using the scope name.  </p>\n<p> A type can be retrieved from a specific module using <a class=\"xref\" href=\"system.reflection.module#System_Reflection_Module_GetType_\" data-linktype=\"relative-path\">GetType</a>. Calling <code>Module.GetType</code> on the module containing the manifest will not initiate a search of the entire assembly. To retrieve a type from an assembly, regardless of which module it is in, you must call <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetType_\" data-linktype=\"relative-path\">GetType</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_GetModules\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_GetModules_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetModules()</div>        \r\n          </div>\r\n    \r\n            <p>Gets all the modules that are part of this assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Module[] GetModules ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a>[]</div>\r\n                  </div>\r\n                  <p>An array of modules.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The module to be loaded does not specify a file name extension.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method works on public and private resource files.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Modules must be emitted with file name extensions.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the name of the module in the returned array that contains the assembly manifest.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Assembly.GetModules Example#1\">using namespace System;\nusing namespace System::Reflection;\nint main()\n{\n   Assembly^ mainAssembly = Assembly::GetExecutingAssembly();\n   Console::WriteLine( &quot;The executing assembly is {0}.&quot;, mainAssembly );\n   array&lt;Module^&gt;^mods = mainAssembly-&gt;GetModules();\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;Modules in the assembly:&quot; );\n   for ( int i = 0; i &lt; mods-&gt;Length; i++ )\n      Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, mods[ i ] );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Assembly.GetModules Example#1\">using System;\nusing System.Reflection;\n\npublic class Example\n{\n    public static void Main()\n    {\n        Assembly mainAssembly = typeof(Example).Assembly;\n        Console.WriteLine(&quot;The executing assembly is {0}.&quot;, mainAssembly);\n        Module[] mods = mainAssembly.GetModules();\n        Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Modules in the assembly:&quot;);\n        foreach (Module m in mods)\n            Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, m);\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Assembly.GetModules Example#1\">Imports System.Reflection\n\nPublic Class Example\n    Public Shared Sub Main()\n        Dim mainAssembly As Assembly = GetType(Example).Assembly\n        Console.WriteLine(&quot;The executing assembly is {0}.&quot;, mainAssembly)\n        Dim mods() As [Module] = mainAssembly.GetModules()\n        Console.WriteLine(vbTab &amp; &quot;Modules in the assembly:&quot;)\n        For Each m As [Module] In mods\n            Console.WriteLine(vbTab &amp; m.ToString())\n        Next\n    End Sub \nEnd Class \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_GetModules_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_GetModules_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetModules(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Gets all the modules that are part of this assembly, specifying whether to include resource modules.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Reflection.Module[] GetModules (bool getResourceModules);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>getResourceModules</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to include resource modules; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a>[]</div>\r\n                  </div>\r\n                  <p>An array of modules.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method works on public and private resource files.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Modules must be emitted with file name extensions.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_GetName\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_GetName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetName()</div>        \r\n          </div>\r\n    \r\n            <p>Gets an <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a> for this assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Reflection.AssemblyName GetName ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a></div>\r\n                  </div>\r\n                  <p>An object that contains the fully parsed display name for this assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_GetName_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_GetName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetName(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Gets an <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a> for this assembly, setting the codebase as specified by <code>copiedName</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Reflection.AssemblyName GetName (bool copiedName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>copiedName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to set the <span class=\"xref\">stem.Reflection.Assembly.CodeBase*</span> to the location of the assembly after it was shadow copied; <code>false</code> to set <span class=\"xref\">stem.Reflection.Assembly.CodeBase*</span> to the original location.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a></div>\r\n                  </div>\r\n                  <p>An object that contains the fully parsed display name for this assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_GetObjectData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetObjectData(SerializationInfo,StreamingContext)</div>        \r\n          </div>\r\n    \r\n            <p>Gets serialization information with all of the data needed to reinstantiate this assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>info</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to be populated with serialization information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>context</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The destination context of the serialization.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>info</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_GetReferencedAssemblies\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_GetReferencedAssemblies_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetReferencedAssemblies()</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a> objects for all the assemblies referenced by this assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Reflection.AssemblyName[] GetReferencedAssemblies ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a>[]</div>\r\n                  </div>\r\n                  <p>An array that contains the fully parsed display names of all the assemblies referenced by this assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"IMPORTANT\"><h5>Important</h5><p> Starting with the .NET Framework 4, the <a class=\"xref\" href=\"system.reflection.assemblyname#System_Reflection_AssemblyName_HashAlgorithm_\" data-linktype=\"relative-path\">HashAlgorithm</a> property of an <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a> object that is returned by this method is <a class=\"xref\" href=\"system.configuration.assemblies.assemblyhashalgorithm\" data-linktype=\"relative-path\">System.Configuration.Assemblies.AssemblyHashAlgorithm</a> if there is no hash algorithm for the referenced assembly, or if the hash algorithm of the referenced assembly is not identified by the <a class=\"xref\" href=\"system.configuration.assemblies.assemblyhashalgorithm\" data-linktype=\"relative-path\">System.Configuration.Assemblies.AssemblyHashAlgorithm</a> enumeration. In previous versions of the .NET Framework, the <a class=\"xref\" href=\"system.reflection.assemblyname#System_Reflection_AssemblyName_HashAlgorithm_\" data-linktype=\"relative-path\">HashAlgorithm</a> property returned <a class=\"xref\" href=\"system.configuration.assemblies.assemblyhashalgorithm\" data-linktype=\"relative-path\">System.Configuration.Assemblies.AssemblyHashAlgorithm</a> in this situation.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates calling the GetReferencedAssemblies method. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"Reflection#1\">Imports System.Reflection\n\nModule Module1\n    Sub Main()\n        &#39; This variable holds the amount of indenting that \n        &#39; should be used when displaying each line of information.\n        Dim indent As Int32 = 0\n        &#39; Display information about the EXE assembly.\n        Dim a As Assembly = GetType(Module1).Assembly\n        Display(indent, &quot;Assembly identity={0}&quot;, a.FullName)\n        Display(indent + 1, &quot;Codebase={0}&quot;, a.CodeBase)\n\n        &#39; Display the set of assemblies our assemblies reference.\n        Dim an As AssemblyName\n        Display(indent, &quot;Referenced assemblies:&quot;)\n        For Each an In a.GetReferencedAssemblies()\n            Display(indent + 1, &quot;Name={0}, Version={1}, Culture={2}, PublicKey token={3}&quot;, _\n                an.Name, an.Version, an.CultureInfo.Name, BitConverter.ToString(an.GetPublicKeyToken))\n        Next\n        Display(indent, &quot;&quot;)\n\n        &#39; Display information about each assembly loading into this AppDomain.\n        For Each a In AppDomain.CurrentDomain.GetAssemblies()\n            Display(indent, &quot;Assembly: {0}&quot;, a)\n\n            &#39; Display information about each module of this assembly.\n            Dim m As [Module]\n            For Each m In a.GetModules(True)\n                Display(indent + 1, &quot;Module: {0}&quot;, m.Name)\n            Next\n\n            &#39; Display information about each type exported from this assembly.\n            Dim t As Type\n            indent += 1\n            For Each t In a.GetExportedTypes()\n                Display(0, &quot;&quot;)\n                Display(indent, &quot;Type: {0}&quot;, t)\n\n                &#39; For each type, show its members &amp; their custom attributes.\n                Dim mi As MemberInfo\n                indent += 1\n                For Each mi In t.GetMembers()\n                    Display(indent, &quot;Member: {0}&quot;, mi.Name)\n                    DisplayAttributes(indent, mi)\n\n                    &#39; If the member is a method, display information about its parameters.\n                    Dim pi As ParameterInfo\n                    If mi.MemberType = MemberTypes.Method Then\n                        For Each pi In CType(mi, MethodInfo).GetParameters()\n                            Display(indent + 1, &quot;Parameter: Type={0}, Name={1}&quot;, pi.ParameterType, pi.Name)\n                        Next\n                    End If\n\n                    &#39; If the member is a property, display information about the property&#39;s accessor methods.\n                    If mi.MemberType = MemberTypes.Property Then\n                        Dim am As MethodInfo\n                        For Each am In CType(mi, PropertyInfo).GetAccessors()\n                            Display(indent + 1, &quot;Accessor method: {0}&quot;, am)\n                        Next\n                    End If\n                Next\n                indent -= 1\n            Next\n            indent -= 1\n        Next\n    End Sub\n\n    &#39; Displays the custom attributes applied to the specified member.\n    Sub DisplayAttributes(ByVal indent As Int32, ByVal mi As MemberInfo)\n        &#39; Get the set of custom attributes; if none exist, just return.\n        Dim attrs() As Object = mi.GetCustomAttributes(False)\n        If attrs.Length = 0 Then Return\n\n        &#39; Display the custom attributes applied to this member.\n        Display(indent + 1, &quot;Attributes:&quot;)\n        Dim o As Object\n        For Each o In attrs\n            Display(indent + 2, &quot;{0}&quot;, o.ToString())\n        Next\n    End Sub\n\n    &#39; Display a formatted string indented by the specified amount.\n    Sub Display(ByVal indent As Int32, ByVal format As String, ByVal ParamArray params() As Object)\n        Console.Write(New String(&quot; &quot;c, indent * 2))\n        Console.WriteLine(format, params)\n    End Sub\nEnd Module\n\n&#39;The output shown below is abbreviated.\n&#39;\n&#39;Assembly identity=Reflection, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\n&#39;  Codebase=file:///C:/Reflection.exe\n&#39;Referenced assemblies:\n&#39;  Name=mscorlib, Version=1.0.5000.0, Culture=, PublicKey token=B7-7A-5C-56-19-34-E0-89\n&#39;  Name=Microsoft.VisualBasic, Version=7.0.5000.0, Culture=, PublicKey token=B0-3F-5F-7F-11-D5-0A-3A\n&#39;\n&#39;Assembly: mscorlib, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\n&#39;  Module: mscorlib.dll\n&#39;  Module: prc.nlp\n&#39;  Module: prcp.nlp\n&#39;  Module: ksc.nlp\n&#39;  Module: ctype.nlp\n&#39;  Module: xjis.nlp\n&#39;  Module: bopomofo.nlp\n&#39;  Module: culture.nlp\n&#39;  Module: region.nlp\n&#39;  Module: sortkey.nlp\n&#39;  Module: charinfo.nlp\n&#39;  Module: big5.nlp\n&#39;  Module: sorttbls.nlp\n&#39;  Module: l_intl.nlp\n&#39;  Module: l_except.nlp\n&#39;\n&#39;  Type: System.Object\n&#39;    Member: GetHashCode\n&#39;    Member: Equals\n&#39;      Parameter: Type=System.Object, Name=obj\n&#39;    Member: ToString\n&#39;    Member: Equals\n&#39;      Parameter: Type=System.Object, Name=objA\n&#39;      Parameter: Type=System.Object, Name=objB\n&#39;    Member: ReferenceEquals\n&#39;      Parameter: Type=System.Object, Name=objA\n&#39;      Parameter: Type=System.Object, Name=objB\n&#39;    Member: GetType\n&#39;    Member: .ctor\n&#39;\n&#39;  Type: System.ICloneable\n&#39;    Member: Clone\n&#39;\n&#39;  Type: System.Collections.IEnumerable\n&#39;    Member: GetEnumerator\n&#39;      Attributes:\n&#39;        System.Runtime.InteropServices.DispIdAttribute\n&#39;\n&#39;  Type: System.Collections.ICollection\n&#39;    Member: get_IsSynchronized\n&#39;    Member: get_SyncRoot\n&#39;    Member: get_Count\n&#39;    Member: CopyTo\n&#39;      Parameter: Type=System.Array, Name=array\n&#39;      Parameter: Type=System.Int32, Name=index\n&#39;    Member: Count\n&#39;      Accessor method: Int32 get_Count()\n&#39;    Member: SyncRoot\n&#39;      Accessor method: System.Object get_SyncRoot()\n&#39;    Member: IsSynchronized\n&#39;      Accessor method: Boolean get_IsSynchronized()\n&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"Reflection#1\">using namespace System;\nusing namespace System::Reflection;\n\nstatic void Display(Int32 indent, String^ format, ... array&lt;Object^&gt;^param) \n{\n    Console::Write(&quot;{0}&quot;, gcnew String (&#39; &#39;, indent));\n    Console::WriteLine(format, param);\n}\n\t\n// Displays the custom attributes applied to the specified member.\nstatic void DisplayAttributes(Int32 indent, MemberInfo^ mi)\n{\n    // Get the set of custom attributes; if none exist, just return.\n    array&lt;Object^&gt;^attrs = mi-&gt;GetCustomAttributes(false);\n\t\t\n    if (attrs-&gt;Length==0)\n    {\n        return;          \n    }\n\t\t\n    // Display the custom attributes applied to this member.\n    Display(indent+1, &quot;Attributes:&quot;);\n    for each ( Object^ o in attrs )\n    {\n        Display(indent*2, &quot;{0}&quot;, o);\n    }\t\t\t\t\n}\n\nvoid main()\n{\n    try\n    {\n        // This variable holds the amount of indenting that \n        // should be used when displaying each line of information.\n        Int32 indent = 0; \n        // Display information about the EXE assembly.\n        Assembly^ a = System::Reflection::Assembly::GetExecutingAssembly();\n\t\t\n        Display(indent, &quot;Assembly identity={0}&quot;, gcnew array&lt;Object^&gt; {a-&gt;FullName});\n        Display(indent+1, &quot;Codebase={0}&quot;, gcnew array&lt;Object^&gt; {a-&gt;CodeBase});\n\n        // Display the set of assemblies our assemblies reference.\n  \n        Display(indent, &quot;Referenced assemblies:&quot;); \n\n        for each ( AssemblyName^ an in a-&gt;GetReferencedAssemblies() )\n        {\n            Display(indent + 1, &quot;Name={0}, Version={1}, Culture={2}, PublicKey token={3}&quot;, gcnew array&lt;Object^&gt; {an-&gt;Name, an-&gt;Version, an-&gt;CultureInfo, (BitConverter::ToString(an-&gt;GetPublicKeyToken()))});\n        }\n        Display(indent, &quot;&quot;);  \n        // Display information about each assembly loading into this AppDomain. \n        for each ( Assembly^ b in AppDomain::CurrentDomain-&gt;GetAssemblies()) \n        {\n            Display(indent, &quot;Assembly: {0}&quot;, gcnew array&lt;Object^&gt; {b});\n            // Display information about each module of this assembly.\n \n            for each ( Module^ m in b-&gt;GetModules(true) ) \n            {\n                Display(indent+1, &quot;Module: {0}&quot;, gcnew array&lt;Object^&gt; {m-&gt;Name});\n            }\n            // Display information about each type exported from this assembly.\n           \n            indent += 1; \n            for each ( Type^ t in b-&gt;GetExportedTypes() ) \n            {\n                Display(0, &quot;&quot;);  \n                Display(indent, &quot;Type: {0}&quot;, gcnew array&lt;Object^&gt; {t}); \n\n                // For each type, show its members &amp; their custom attributes.\n           \n                indent += 1; \n                for each (MemberInfo^ mi in t-&gt;GetMembers() )\n                {\n                    Display(indent, &quot;Member: {0}&quot;, gcnew array&lt;Object^&gt; {mi-&gt;Name}); \n                    DisplayAttributes(indent, mi);\n\n                    // If the member is a method, display information about its parameters.         \n                    if (mi-&gt;MemberType==MemberTypes::Method) \n                    {\n\t\t\t\t\t\n                        for each ( ParameterInfo^ pi in (((MethodInfo^) mi)-&gt;GetParameters()))\n                        {\n                            Display(indent+1, &quot;Parameter: Type={0}, Name={1}&quot;, gcnew array&lt;Object^&gt; {pi-&gt;ParameterType, pi-&gt;Name}); \n                        }\n                    }\n\n                    // If the member is a property, display information about the property&#39;s accessor methods.\n                    if (mi-&gt;MemberType==MemberTypes::Property) \n                    {\n                        for each ( MethodInfo^ am in (((PropertyInfo^) mi)-&gt;GetAccessors()) )\n                        {\n                            Display(indent+1, &quot;Accessor method: {0}&quot;, gcnew array&lt;Object^&gt; {am});\n                        }\n                    }\n                }\n                // Display a formatted string indented by the specified amount.               \n                indent -= 1;\n            }\n            indent -= 1;\n        }\n    }\n    catch (Exception^ e)\n    {\n        Console::WriteLine(e-&gt;Message);\n    }\n}\n\n// The output shown below is abbreviated.\n//\n//Assembly identity=Reflection, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\n//  Codebase=file:///C:/Reflection.exe\n//Referenced assemblies:\n//  Name=mscorlib, Version=1.0.5000.0, Culture=, PublicKey token=B7-7A-5C-56-19-34-E0-89\n//  Name=Microsoft.VisualBasic, Version=7.0.5000.0, Culture=, PublicKey token=B0-3F-5F-7F-11-D5-0A-3A\n//\n//Assembly: mscorlib, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\n//  Module: mscorlib.dll\n//  Module: prc.nlp\n//  Module: prcp.nlp\n//  Module: ksc.nlp\n//  Module: ctype.nlp\n//  Module: xjis.nlp\n//  Module: bopomofo.nlp\n//  Module: culture.nlp\n//  Module: region.nlp\n//  Module: sortkey.nlp\n//  Module: charinfo.nlp\n//  Module: big5.nlp\n//  Module: sorttbls.nlp\n//  Module: l_intl.nlp\n//  Module: l_except.nlp\n//\n//  Type: System.Object\n//    Member: GetHashCode\n//    Member: Equals\n//      Parameter: Type=System.Object, Name=obj\n//    Member: ToString\n//    Member: Equals\n//      Parameter: Type=System.Object, Name=objA\n//      Parameter: Type=System.Object, Name=objB\n//    Member: ReferenceEquals\n//      Parameter: Type=System.Object, Name=objA\n//      Parameter: Type=System.Object, Name=objB\n//    Member: GetType\n//    Member: .ctor\n//\n//  Type: System.ICloneable\n//    Member: Clone\n//\n//  Type: System.Collections.IEnumerable\n//    Member: GetEnumerator\n//      Attributes:\n//        System.Runtime.InteropServices.DispIdAttribute\n//\n//  Type: System.Collections.ICollection\n//    Member: get_IsSynchronized\n//    Member: get_SyncRoot\n//    Member: get_Count\n//    Member: CopyTo\n//      Parameter: Type=System.Array, Name=array\n//      Parameter: Type=System.Int32, Name=index\n//    Member: Count\n//      Accessor method: Int32 get_Count()\n//    Member: SyncRoot\n//      Accessor method: System.Object get_SyncRoot()\n//    Member: IsSynchronized\n//      Accessor method: Boolean get_IsSynchronized()\n//\n</code></pre><pre><code class=\"lang-cs\" name=\"Reflection#1\">using System;\nusing System.Reflection;\n\nclass Module1\n{\n    public static void Main()\n    {\n        // This variable holds the amount of indenting that \n        // should be used when displaying each line of information.\n        Int32 indent = 0;\n        // Display information about the EXE assembly.\n        Assembly a = typeof(Module1).Assembly;\n        Display(indent, &quot;Assembly identity={0}&quot;, a.FullName);\n        Display(indent+1, &quot;Codebase={0}&quot;, a.CodeBase);\n\n        // Display the set of assemblies our assemblies reference.\n      \n        Display(indent, &quot;Referenced assemblies:&quot;);\n        foreach (AssemblyName an in a.GetReferencedAssemblies() )\n        {\n             Display(indent + 1, &quot;Name={0}, Version={1}, Culture={2}, PublicKey token={3}&quot;, an.Name, an.Version, an.CultureInfo.Name, (BitConverter.ToString (an.GetPublicKeyToken())));\n        }\n        Display(indent, &quot;&quot;);\n        \n        // Display information about each assembly loading into this AppDomain.\n        foreach (Assembly b in AppDomain.CurrentDomain.GetAssemblies())\n        {\n            Display(indent, &quot;Assembly: {0}&quot;, b);\n\n            // Display information about each module of this assembly.\n            foreach ( Module m in b.GetModules(true) )\n            {\n                Display(indent+1, &quot;Module: {0}&quot;, m.Name);\n            }\n\n            // Display information about each type exported from this assembly.\n           \n            indent += 1;\n            foreach ( Type t in b.GetExportedTypes() )\n            {\n                Display(0, &quot;&quot;);\n                Display(indent, &quot;Type: {0}&quot;, t);\n\n                // For each type, show its members &amp; their custom attributes.\n           \n                indent += 1;\n                foreach (MemberInfo mi in t.GetMembers() )\n                {\n                    Display(indent, &quot;Member: {0}&quot;, mi.Name);\n                    DisplayAttributes(indent, mi);\n\n                    // If the member is a method, display information about its parameters.\n                    \n                    if (mi.MemberType==MemberTypes.Method)\n                    {\n                        foreach ( ParameterInfo pi in ((MethodInfo) mi).GetParameters() )\n                        {\n                            Display(indent+1, &quot;Parameter: Type={0}, Name={1}&quot;, pi.ParameterType, pi.Name);\n                        }\n                    }\n\n                    // If the member is a property, display information about the property&#39;s accessor methods.\n                    if (mi.MemberType==MemberTypes.Property)\n                    {\n                        foreach ( MethodInfo am in ((PropertyInfo) mi).GetAccessors() )\n                        {\n                            Display(indent+1, &quot;Accessor method: {0}&quot;, am);\n                        }\n                    }\n                }\n                indent -= 1;\n            }\n            indent -= 1;\n        }\n    }\n\n    // Displays the custom attributes applied to the specified member.\n    public static void DisplayAttributes(Int32 indent, MemberInfo mi)\n    {\n        // Get the set of custom attributes; if none exist, just return.\n        object[] attrs = mi.GetCustomAttributes(false);\n        if (attrs.Length==0) {return;}\n\n        // Display the custom attributes applied to this member.\n        Display(indent+1, &quot;Attributes:&quot;);\n        foreach ( object o in attrs )\n        {\n            Display(indent+2, &quot;{0}&quot;, o.ToString());\n        }\n    }\n\n    // Display a formatted string indented by the specified amount.\n    public static void Display(Int32 indent, string format, params object[] param) \n\n    {\n        Console.Write(new string(&#39; &#39;, indent*2));\n        Console.WriteLine(format, param);\n    }\n}\n\n//The output shown below is abbreviated.\n//\n//Assembly identity=ReflectionCS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\n//  Codebase=file:///C:/Documents and Settings/test/My Documents/Visual Studio 2005/Projects/Reflection/Reflection/obj/Debug/Reflection.exe\n//Referenced assemblies:\n//  Name=mscorlib, Version=2.0.0.0, Culture=, PublicKey token=B7-7A-5C-56-19-34-E0-89\n//\n//Assembly: mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\n//  Module: mscorlib.dll\n//  Module: mscorlib.dll\n//  Module: mscorlib.dll\n//  Module: mscorlib.dll\n//  Module: mscorlib.dll\n//  Module: mscorlib.dll\n//  Module: mscorlib.dll\n//  Module: mscorlib.dll\n//  Module: mscorlib.dll\n//  Module: mscorlib.dll\n//  Module: mscorlib.dll\n//  Module: mscorlib.dll\n//  Module: mscorlib.dll\n//  Module: mscorlib.dll\n//\n//  Type: System.Object\n//    Member: GetType\n//    Member: ToString\n//    Member: Equals\n//      Parameter: Type=System.Object, Name=obj\n//    Member: Equals\n//      Parameter: Type=System.Object, Name=objA\n//      Parameter: Type=System.Object, Name=objB\n//    Member: ReferenceEquals\n//      Attributes:\n//        System.Runtime.ConstrainedExecution.ReliabilityContractAttribute\n//      Parameter: Type=System.Object, Name=objA\n//      Parameter: Type=System.Object, Name=objB\n//    Member: GetHashCode\n//    Member: .ctor\n//      Attributes:\n//        System.Runtime.ConstrainedExecution.ReliabilityContractAttribute\n//\n//  Type: System.ICloneable\n//    Member: Clone\n//\n//  Type: System.Collections.IEnumerable\n//    Member: GetEnumerator\n//      Attributes:\n//        System.Runtime.InteropServices.DispIdAttribute\n//\n//  Type: System.Collections.ICollection\n//    Member: CopyTo\n//      Parameter: Type=System.Array, Name=array\n//      Parameter: Type=System.Int32, Name=index\n//    Member: get_Count\n//    Member: get_SyncRoot\n//    Member: get_IsSynchronized\n//    Member: Count\n//      Accessor method: Int32 get_Count()\n//    Member: SyncRoot\n//      Accessor method: System.Object get_SyncRoot()\n//    Member: IsSynchronized\n//      Accessor method: Boolean get_IsSynchronized()\n//\n//  Type: System.Collections.IList\n//    Member: get_Item\n//      Parameter: Type=System.Int32, Name=index\n//    Member: set_Item\n//      Parameter: Type=System.Int32, Name=index\n//      Parameter: Type=System.Object, Name=value\n//    Member: Add\n//      Parameter: Type=System.Object, Name=value\n//    Member: Contains\n//      Parameter: Type=System.Object, Name=value\n//    Member: Clear\n//    Member: get_IsReadOnly\n//    Member: get_IsFixedSize\n//    Member: IndexOf\n//      Parameter: Type=System.Object, Name=value\n//    Member: Insert\n//      Parameter: Type=System.Int32, Name=index\n//      Parameter: Type=System.Object, Name=value\n//    Member: Remove\n//      Parameter: Type=System.Object, Name=value\n//    Member: RemoveAt\n//      Parameter: Type=System.Int32, Name=index\n//    Member: Item\n//      Accessor method: System.Object get_Item(Int32)\n//      Accessor method: Void set_Item(Int32, System.Object)\n//    Member: IsReadOnly\n//      Accessor method: Boolean get_IsReadOnly()\n//    Member: IsFixedSize\n//      Accessor method: Boolean get_IsFixedSize()\n//\n//  Type: System.Array\n//    Member: IndexOf\n//      Parameter: Type=T[], Name=array\n//      Parameter: Type=T, Name=value\n//    Member: AsReadOnly\n//      Parameter: Type=T[], Name=array\n//    Member: Resize\n//      Attributes:\n//        System.Runtime.ConstrainedExecution.ReliabilityContractAttribute\n//      Parameter: Type=T[]&amp;, Name=array\n//      Parameter: Type=System.Int32, Name=newSize\n//    Member: BinarySearch\n//      Attributes:\n//        System.Runtime.ConstrainedExecution.ReliabilityContractAttribute\n//      Parameter: Type=T[], Name=array\n//      Parameter: Type=T, Name=value\n//    Member: BinarySearch\n//      Attributes:\n//        System.Runtime.ConstrainedExecution.ReliabilityContractAttribute\n//      Parameter: Type=T[], Name=array\n//      Parameter: Type=T, Name=value\n//      Parameter: Type=System.Collections.Generic.IComparer`1[T], Name=comparer\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_GetSatelliteAssembly_System_Globalization_CultureInfo_\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_GetSatelliteAssembly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetSatelliteAssembly(CultureInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the satellite assembly for the specified culture.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Reflection.Assembly GetSatelliteAssembly (System.Globalization.CultureInfo culture);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>culture</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The specified culture.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </div>\r\n                  <p>The specified satellite assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>culture</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The assembly cannot be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>The satellite assembly with a matching file name was found, but the <code>CultureInfo</code> did not match the one specified.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p>The satellite assembly is not a valid assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Satellite assemblies contain localized resources, as distinct from main application assemblies, which contain non-localizable executable code and resources for a single culture that serve as the default or neutral culture.  </p>\n<p> Call this method to use your current assembly version.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_GetSatelliteAssembly_System_Globalization_CultureInfo_System_Version_\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_GetSatelliteAssembly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetSatelliteAssembly(CultureInfo,Version)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the specified version of the satellite assembly for the specified culture.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Reflection.Assembly GetSatelliteAssembly (System.Globalization.CultureInfo culture, Version version);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>culture</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The specified culture.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>version</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The version of the satellite assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </div>\r\n                  <p>The specified satellite assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>culture</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>The satellite assembly with a matching file name was found, but the <code>CultureInfo</code> or the version did not match the one specified.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The assembly cannot be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p>The satellite assembly is not a valid assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Satellite assemblies contain localized resources, as distinct from main application assemblies, which contain non-localizable executable code and resources for a single culture that serve as the default or neutral culture.  </p>\n<p> Call the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetSatelliteAssembly_System_Globalization_CultureInfo_\" data-linktype=\"relative-path\">GetSatelliteAssembly(CultureInfo)</a> overload to use your current assembly version.  </p>\n<p> If <code>version</code> is <code>null</code>, the current assembly version is used if both the resource and main assemblies are signed.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_GetType_System_String_\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_GetType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetType(String)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object with the specified name in the assembly instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual Type GetType (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The full name of the type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>An object that represents the specified class, or <code>null</code> if the class is not found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is invalid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> requires a dependent assembly that could not be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p><div class=\"alert NOTE\"><br> In the <a href=\"http://go.microsoft.com/fwlink/?LinkID=247912\" data-linktype=\"external\">.NET for Windows Store apps</a> or the <a href=\"../Topic/Cross-Platform%20Development%20with%20the%20Portable%20Class%20Library.md\" data-linktype=\"relative-path\">Portable Class Library</a>, catch the base class exception, <a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a>, instead.  <p>\n<p></div>\n    <code>name</code> requires a dependent assembly that was found but could not be loaded.  </p>\n<p> -or-  </p>\n<p> The current assembly was loaded into the reflection-only context, and <code>name</code> requires a dependent assembly that was not preloaded.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> requires a dependent assembly, but the file is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> <code>name</code> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method only searches the current assembly instance. The <code>name</code> parameter includes the namespace but not the assembly. To search other assemblies for a type, use the <a class=\"xref\" href=\"system.type#System_Type_GetType_System_String_\" data-linktype=\"relative-path\">System.Type.GetType(String)</a> method overload, which can optionally include an assembly display name as part of the type name.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If the type has been forwarded to another assembly, it is still returned by this method. For information on type forwarding, see <a href=\"../Topic/Type%20Forwarding%20in%20the%20Common%20Language%20Runtime.md\" data-linktype=\"relative-path\">Type Forwarding in the Common Language Runtime</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines an abstract <code>MeansOfTransportation</code> class in the <code>Transportation</code> namespace. It calls the GetType method to retrieve its <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object, calls the <a class=\"xref\" href=\"system.type#System_Type_GetProperties_\" data-linktype=\"relative-path\">GetProperties</a> method to get an array of <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a> objects that represent the type&#39;s properties, and then displays information on the type&#39;s abstract properties. Note that the call to the GetType method uses the type&#39;s fully qualified name (that is, its namespace along with its type name).  </p>\n<pre><code class=\"lang-vb\" name=\"System.Reflection.Assembly.GetType#1\">Imports System.Reflection\n\nModule Example\n   Public Sub Main()\n      Dim assem As Assembly = GetType(Example).Assembly\n      Dim t As Type = assem.GetType(&quot;Transportation.MeansOfTransportation&quot;)\n      If Not t Is Nothing Then\n         Console.WriteLine(&quot;Virtual properties in type {0}:&quot;, \n                           t.FullName)\n         Dim props() As PropertyInfo = t.GetProperties()\n         Dim nVirtual As Integer = 0\n         For ctr As Integer = 0 To props.Length - 1\n            If props(ctr).GetMethod.IsVirtual Then\n               Console.WriteLine(&quot;   {0} (type {1})&quot;,\n                                 props(ctr).Name, \n                                 props(ctr).PropertyType.FullName)\n               nVirtual += 1\n            End If\n         Next\n         If nVirtual = 0 Then \n            Console.WriteLine(&quot;   No virtual properties&quot;)\n         End If   \n      End If   \n   End Sub\nEnd Module\n\nNamespace Transportation\n   Public MustInherit Class MeansOfTransportation\n      Public MustOverride Property HasWheels As Boolean\n      Public MustOverride Property Wheels As Integer\n      Public MustOverride Property ConsumesFuel As Boolean\n      Public MustOverride Property Living As Boolean\n   End Class\nEnd Namespace\n&#39; The example displays the following output:\n&#39;    Virtual properties in type Transportation.MeansOfTransportation:\n&#39;       HasWheels (type System.Boolean)\n&#39;       Wheels (type System.Int32)\n&#39;       ConsumesFuel (type System.Boolean)\n&#39;       Living (type System.Boolean)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Reflection.Assembly.GetType#1\">using System;\nusing System.Reflection;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Assembly assem = typeof(Example).Assembly;\n      Type t = assem.GetType(&quot;Transportation.MeansOfTransportation&quot;);\n      if (t != null) {\n         Console.WriteLine(&quot;Virtual properties in type {0}:&quot;, \n                           t.FullName);\n         PropertyInfo[] props = t.GetProperties();\n         int nVirtual = 0;\n         for (int ctr = 0; ctr &lt; props.Length; ctr++)\n            if (props[ctr].GetMethod.IsVirtual) {\n               Console.WriteLine(&quot;   {0} (type {1})&quot;,\n                                 props[ctr].Name, \n                                 props[ctr].PropertyType.FullName);\n               nVirtual++;\n            }\n\n         if (nVirtual == 0) \n            Console.WriteLine(&quot;   No virtual properties&quot;);\n      }   \n   }\n}\n\nnamespace Transportation\n{\n   public abstract class MeansOfTransportation\n   {\n      abstract public bool HasWheels { get; set; }\n      abstract public int Wheels { get; set; }\n      abstract public bool ConsumesFuel { get; set; }\n      abstract public bool Living  { get; set; }\n   }\n \n}\n// The example displays the following output:\n//    Virtual properties in type Transportation.MeansOfTransportation:\n//       HasWheels (type System.Boolean)\n//       Wheels (type System.Int32)\n//       ConsumesFuel (type System.Boolean)\n//       Living (type System.Boolean)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_GetType_System_String_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_GetType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetType(String,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object with the specified name in the assembly instance and optionally throws an exception if the type is not found.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual Type GetType (string name, bool throwOnError);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The full name of the type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>throwOnError</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to throw an exception if the type is not found; <code>false</code> to return <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>An object that represents the specified class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is invalid.  </p>\n<p> -or-  </p>\n<p> The length of <code>name</code> exceeds 1024 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a></div>\r\n                  </div>\r\n                  <p><code>throwOnError</code> is <code>true</code>, and the type cannot be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> requires a dependent assembly that could not be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> requires a dependent assembly that was found but could not be loaded.  </p>\n<p> -or-  </p>\n<p> The current assembly was loaded into the reflection-only context, and <code>name</code> requires a dependent assembly that was not preloaded.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> requires a dependent assembly, but the file is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> <code>name</code> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method only searches the current assembly instance. The <code>name</code> parameter includes the namespace but not the assembly. To search other assemblies for a type, use the <a class=\"xref\" href=\"system.type#System_Type_GetType_System_String_\" data-linktype=\"relative-path\">System.Type.GetType(String)</a> method overload, which can optionally include an assembly display name as part of the type name.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If the type has been forwarded to another assembly, it is still returned by this method. For information on type forwarding, see <a href=\"../Topic/Type%20Forwarding%20in%20the%20Common%20Language%20Runtime.md\" data-linktype=\"relative-path\">Type Forwarding in the Common Language Runtime</a>.  </p>\n</div>\n<p> The <code>throwOnError</code> parameter only affects what happens when the type is not found. It does not affect any other exceptions that might be thrown. In particular, if the type is found but cannot be loaded, <a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a> can be thrown even if <code>throwOnError</code> is <code>false</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_GetType_System_String_System_Boolean_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_GetType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetType(String,Boolean,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object with the specified name in the assembly instance, with the options of ignoring the case, and of throwing an exception if the type is not found.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual Type GetType (string name, bool throwOnError, bool ignoreCase);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The full name of the type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>throwOnError</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to throw an exception if the type is not found; <code>false</code> to return <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ignoreCase</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to ignore the case of the type name; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>An object that represents the specified class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is invalid.  </p>\n<p> -or-  </p>\n<p> The length of <code>name</code> exceeds 1024 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a></div>\r\n                  </div>\r\n                  <p><code>throwOnError</code> is <code>true</code>, and the type cannot be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> requires a dependent assembly that could not be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> requires a dependent assembly that was found but could not be loaded.  </p>\n<p> -or-  </p>\n<p> The current assembly was loaded into the reflection-only context, and <code>name</code> requires a dependent assembly that was not preloaded.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> requires a dependent assembly, but the file is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> <code>name</code> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method only searches the current assembly instance. The <code>name</code> parameter includes the namespace but not the assembly. To search other assemblies for a type, use the <a class=\"xref\" href=\"system.type#System_Type_GetType_System_String_\" data-linktype=\"relative-path\">System.Type.GetType(String)</a> method overload, which can optionally include an assembly display name as part of the type name.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If the type has been forwarded to another assembly, it is still returned by this method. For information on type forwarding, see <a href=\"../Topic/Type%20Forwarding%20in%20the%20Common%20Language%20Runtime.md\" data-linktype=\"relative-path\">Type Forwarding in the Common Language Runtime</a>.  </p>\n</div>\n<p> The <code>throwOnError</code> parameter only affects what happens when the type is not found. It does not affect any other exceptions that might be thrown. In particular, if the type is found but cannot be loaded, <a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a> can be thrown even if <code>throwOnError</code> is <code>false</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_GetTypes\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_GetTypes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetTypes()</div>        \r\n          </div>\r\n    \r\n            <p>Gets the types defined in this assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual Type[] GetTypes ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </div>\r\n                  <p>An array that contains all the types that are defined in this assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.reflectiontypeloadexception\" data-linktype=\"relative-path\">ReflectionTypeLoadException</a></div>\r\n                  </div>\r\n                  <p>The assembly contains one or more types that cannot be loaded. The array returned by the <span class=\"xref\">stem.Reflection.ReflectionTypeLoadException.Types*</span> property of this exception contains a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object for each type that was loaded and <code>null</code> for each type that could not be loaded, while the <span class=\"xref\">stem.Reflection.ReflectionTypeLoadException.LoaderExceptions*</span> property contains an exception for each type that could not be loaded.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned array includes nested types.  </p>\n<p> If the GetTypes method is called on an assembly and a type in that assembly is dependent on a type in an assembly that has not been loaded (for example, if it derives from a type in the second assembly), a <a class=\"xref\" href=\"system.reflection.reflectiontypeloadexception\" data-linktype=\"relative-path\">ReflectionTypeLoadException</a> is thrown. For example, this can happen if the first assembly was loaded with the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_ReflectionOnlyLoad_\" data-linktype=\"relative-path\">ReflectionOnlyLoad</a> or <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_ReflectionOnlyLoadFrom_\" data-linktype=\"relative-path\">ReflectionOnlyLoadFrom</a> methods, and the second assembly was not loaded. It can also happen with assemblies loaded using the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> and <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFile_\" data-linktype=\"relative-path\">LoadFile</a> methods if the second assembly cannot be located when the GetTypes method is called.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If a type has been forwarded to another assembly, it is not included in the returned array. For information on type forwarding, see <a href=\"../Topic/Type%20Forwarding%20in%20the%20Common%20Language%20Runtime.md\" data-linktype=\"relative-path\">Type Forwarding in the Common Language Runtime</a>.  </p>\n</div>\n<p> To retrieve a collection of <a class=\"xref\" href=\"system.reflection.typeinfo\" data-linktype=\"relative-path\">TypeInfo</a> objects instead of an array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects, use the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_DefinedTypes_\" data-linktype=\"relative-path\">DefinedTypes</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays parameters of one method on a type in the specified assembly.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Reflection.Assembly#11\">   Assembly^ SampleAssembly;\n   SampleAssembly = Assembly::LoadFrom( &quot;c:\\\\Sample.Assembly.dll&quot; );\n   // Obtain a reference to a method known to exist in assembly.\n   MethodInfo^ Method = SampleAssembly-&gt;GetTypes()[ 0 ]-&gt;GetMethod( &quot;Method1&quot; );\n   // Obtain a reference to the parameters collection of the MethodInfo instance.\n   array&lt;ParameterInfo^&gt;^ Params = Method-&gt;GetParameters();\n   // Display information about method parameters.\n   // Param = sParam1\n   //   Type = System::String\n   //   Position = 0\n   //   Optional=False\n   for each ( ParameterInfo^ Param in Params )\n   {\n      Console::WriteLine( &quot;Param= {0}&quot;, Param-&gt;Name );\n      Console::WriteLine( &quot;  Type= {0}&quot;, Param-&gt;ParameterType );\n      Console::WriteLine( &quot;  Position= {0}&quot;, Param-&gt;Position );\n      Console::WriteLine( &quot;  Optional= {0}&quot;, Param-&gt;IsOptional );\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Reflection.Assembly#11\">         Dim SampleAssembly As [Assembly]\n         SampleAssembly = [Assembly].LoadFrom(&quot;c:\\Sample.Assembly.dll&quot;)\n         &#39; Obtain a reference to a method known to exist in assembly.\n         Dim Method As MethodInfo = SampleAssembly.GetTypes()(0).GetMethod(&quot;Method1&quot;)\n         &#39; Obtain a reference to the parameters collection of the MethodInfo instance.\n         Dim Params As ParameterInfo() = Method.GetParameters()\n         &#39; Display information about method parameters.\n         &#39; Param = sParam1\n         &#39;   Type = System.String\n         &#39;   Position = 0\n         &#39;   Optional=False\n         For Each Param As ParameterInfo In Params\n             Console.WriteLine((&quot;Param=&quot; + Param.Name.ToString()))\n             Console.WriteLine((&quot;  Type=&quot; + Param.ParameterType.ToString()))\n             Console.WriteLine((&quot;  Position=&quot; + Param.Position.ToString()))\n             Console.WriteLine((&quot;  Optional=&quot; + Param.IsOptional.ToString()))\n         Next \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Reflection.Assembly#11\">         Assembly SampleAssembly;\n         SampleAssembly = Assembly.LoadFrom(&quot;c:\\\\Sample.Assembly.dll&quot;);\n         // Obtain a reference to a method known to exist in assembly.\n         MethodInfo Method = SampleAssembly.GetTypes()[0].GetMethod(&quot;Method1&quot;);\n         // Obtain a reference to the parameters collection of the MethodInfo instance.\n         ParameterInfo[] Params = Method.GetParameters();\n         // Display information about method parameters.\n         // Param = sParam1\n         //   Type = System.String\n         //   Position = 0\n         //   Optional=False\n         foreach (ParameterInfo Param in Params)\n         {\n             Console.WriteLine(&quot;Param=&quot; + Param.Name.ToString());\n             Console.WriteLine(&quot;  Type=&quot; + Param.ParameterType.ToString());\n             Console.WriteLine(&quot;  Position=&quot; + Param.Position.ToString());\n             Console.WriteLine(&quot;  Optional=&quot; + Param.IsOptional.ToString());\n         }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_IsDefined_System_Type_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_IsDefined_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsDefined(Type,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether or not a specified attribute has been applied to the assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool IsDefined (Type attributeType, bool inherit);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the attribute to be checked for this assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inherit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This argument is ignored for objects of this type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the attribute has been applied to the assembly; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>attributeType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>attributeType</code> uses an invalid type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example applies the <a class=\"xref\" href=\"system.reflection.assemblytitleattribute\" data-linktype=\"relative-path\">AssemblyTitleAttribute</a> attribute to an assembly and then uses IsDefined to indicate whether it was applied. It also tests an attribute that was not applied.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Reflection.Assembly.IsDefined#1\">using System;\nusing System.Reflection;\n\n// Set an assembly attribute.\n[assembly:AssemblyTitleAttribute(&quot;A title example&quot;)]\n\n\n// Note that the suffix &quot;Attribute&quot; can be omitted:\n// [assembly:AssemblyTitle(&quot;A title example&quot;)]\n\n\npublic class Test {\n\n    public static void Main() {\n\n        // Get the assembly that is executing this method.\n        Assembly asm = Assembly.GetCallingAssembly();\n\n        // Get the attribute type just defined.\n        Type aType = typeof(AssemblyTitleAttribute);\n        Console.WriteLine(asm.IsDefined(aType, false));\n\n        // Try an attribute not defined.\n        aType = typeof(AssemblyVersionAttribute);\n        Console.WriteLine(asm.IsDefined(aType, false));\n    }\n}\n//\n//  This code example produces the following output:\n//  True\n//  False\n//\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Reflection.Assembly.IsDefined#1\">\nImports System\nImports System.Reflection\n\n&#39; Set an assembly attribute.\n&lt;Assembly:AssemblyTitleAttribute(&quot;A title example&quot;)&gt;\n\n&#39; Note that the suffix &quot;Attribute&quot; can be omitted:\n&#39; &lt;Assembly:AssemblyTitle(&quot;A title examle&quot;)&gt;\n\nPublic Class Test\n    Public Shared Sub Main()\n\n        &#39; Get the assembly that is executing this method.\n        Dim asm As [Assembly] = [Assembly].GetCallingAssembly\n\n        &#39; Get the attribute type just defined.\n        Dim aType As Type = GetType(AssemblyTitleAttribute)\n\n        Console.WriteLine(asm.IsDefined(aType, false))\n\n        &#39; Try an attribute not defined.\n        aType = GetType(AssemblyVersionAttribute)\n\n        Console.WriteLine(asm.IsDefined(aType, false))\n\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39; True\n&#39; False\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_Load_System_Byte___\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_Load_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Load(Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Loads the assembly with a common object file format (COFF)-based image containing an emitted assembly. The assembly is loaded into the application domain of the caller.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Reflection.Assembly Load (byte[] rawAssembly);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rawAssembly</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A byte array that is a COFF-based image containing an emitted assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </div>\r\n                  <p>The loaded assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>rawAssembly</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>rawAssembly</code> is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> Version 2.0 or later of the common language runtime is currently loaded and <code>rawAssembly</code> was compiled with a later version.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The trust level of an assembly that is loaded by using this method is the same as the trust level of the calling assembly. To load an assembly from a byte array with the trust level of the application domain, use the [Load(Byte[],â€‚Byte&lt;xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%2CSystem.Byte%5B%5D%2CSystem.Security.SecurityContextSource%29&gt; method overload. For more information about the use of evidence with overloads of the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method that take byte arrays, see the [Load(Byte[],â€‚Byte&lt;xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%2CSystem.Byte%5B%5D%2CSystem.Security.Policy.Evidence%29&gt; method overload.  </p>\n<p> Reflecting on C++ executable files might throw a <a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a>. This is most likely caused by the C++ compiler stripping the relocation addresses or the <code>.reloc</code> section from your executable file. To preserve the <code>.reloc</code> address for your C++ executable file, specify <code>/fixed:no</code> when you are linking.  </p>\n<p> Note that this method overload always creates a new <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> object with its own mapping.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_Load_System_Reflection_AssemblyName_\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_Load_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Load(AssemblyName)</div>        \r\n          </div>\r\n    \r\n            <p>Loads an assembly given its <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Reflection.Assembly Load (System.Reflection.AssemblyName assemblyRef);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyRef</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object that describes the assembly to be loaded.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </div>\r\n                  <p>The loaded assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyRef</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyRef</code> is not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <div class=\"alert NOTE\"><br> In the <a href=\"http://go.microsoft.com/fwlink/?LinkID=247912\" data-linktype=\"external\">.NET for Windows Store apps</a> or the <a href=\"../Topic/Cross-Platform%20Development%20with%20the%20Portable%20Class%20Library.md\" data-linktype=\"relative-path\">Portable Class Library</a>, catch the base class exception, <a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a>, instead.<br>\n</div>  \n\n<p> A file that was found could not be loaded.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyRef</code> is not a valid assembly. -or-  </p>\n<p> Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyRef</code> was compiled with a later version.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a> is thrown if <code>assemblyRef</code> specifies the full assembly name and the first assembly that matches the simple name has a different version, culture, or public key token. The loader does not continue probing for other assemblies that match the simple name.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Do not use an <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a> with only the <a class=\"xref\" href=\"system.reflection.assemblyname#System_Reflection_AssemblyName_CodeBase_\" data-linktype=\"relative-path\">CodeBase</a> property set. The <a class=\"xref\" href=\"system.reflection.assemblyname#System_Reflection_AssemblyName_CodeBase_\" data-linktype=\"relative-path\">CodeBase</a> property does not supply any elements of the assembly identity (such as name or version), so loading does not occur according to load-by-identity rules, as you would expect from the Load method. Instead, the assembly is loaded using load-from rules. For information about the disadvantages of using the load-from context, see the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFrom_\" data-linktype=\"relative-path\">LoadFrom</a> method overload or <a href=\"../Topic/Best%20Practices%20for%20Assembly%20Loading.md\" data-linktype=\"relative-path\">Best Practices for Assembly Loading</a>.  </p>\n</div>\n<p> Whether certain permissions are granted or not granted to an assembly is based on evidence. The rules for assembly and security evidence merging are as follows:  </p>\n<ul>\n<li><p>When you use a <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method with no <a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a> parameter, the assembly is loaded with the evidence that the loader supplies.  </p>\n</li>\n<li><p>When you use a <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method with an <a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a> parameter, pieces of evidence are merged. Pieces of evidence supplied as an argument to the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method supersede pieces of evidence supplied by the loader.  </p>\n</li>\n<li><p>When you use a <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method overload with a <code>Byte[]</code> parameter to load a common object file format (COFF) image, evidence is inherited from the calling assembly. This applies to the .NET Framework version 1.1 Service Pack 1 (SP1) and subsequent releases.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework version 1.0 and in version 1.1 without SP1, when you use a <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method overload with a <code>Byte[]</code> parameter to load a COFF image, evidence is combined. <code>Zone</code>, <code>Url</code> and <code>Site</code> are inherited from the calling assembly, and <code>Hash</code> and <code>StrongName</code> are taken from the COFF assembly.  </p>\n</div>\n</li>\n<li><p>When you use a <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method with a <code>Byte[]</code> parameter and <a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a> to load a COFF image, only the supplied evidence is used. Evidence of the calling assembly and evidence of the COFF image is ignored.  </p>\n<p>Reflecting on C++ executable files might throw a <a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a>. This is most likely caused by the C++ compiler stripping the relocation addresses or the <code>.reloc</code> section from your executable file. To preserve the <code>.reloc</code> address for your C++ executable file, specify <code>/fixed:no</code> when you are linking.  </p>\n</li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> If both the <a class=\"xref\" href=\"system.reflection.assemblyname#System_Reflection_AssemblyName_Name_\" data-linktype=\"relative-path\">Name</a> property and the <a class=\"xref\" href=\"system.reflection.assemblyname#System_Reflection_AssemblyName_CodeBase_\" data-linktype=\"relative-path\">CodeBase</a> property are set, the first attempt to load the assembly uses the display name (including version, culture, and so on, as returned by the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_FullName_\" data-linktype=\"relative-path\">FullName</a> property). If the file is not found, <a class=\"xref\" href=\"system.reflection.assemblyname#System_Reflection_AssemblyName_CodeBase_\" data-linktype=\"relative-path\">CodeBase</a> is used to search for the assembly. If the assembly is found using <a class=\"xref\" href=\"system.reflection.assemblyname#System_Reflection_AssemblyName_CodeBase_\" data-linktype=\"relative-path\">CodeBase</a>, the display name is matched against the assembly. If the match fails, a <a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a> is thrown.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example instantiates an <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a> object and uses it to load the <code>sysglobal.dll</code> assembly. The example then displays the full name of the assembly&#39;s public types.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Reflection.Assembly.Load#2\">using System;\nusing System.Reflection;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String fullName = &quot;sysglobl, Version=4.0.0.0, Culture=neutral, &quot; +\n                        &quot;PublicKeyToken=b03f5f7f11d50a3a, processor architecture=MSIL&quot;;\n      var an = new AssemblyName(fullName);\n      var assem = Assembly.Load(an);\n      Console.WriteLine(&quot;Public types in assembly {0}:&quot;, assem.FullName);\n      foreach (var t in assem.GetTypes())\n         if (t.IsPublic)\n            Console.WriteLine(&quot;   {0}&quot;, t.FullName);\n   }\n}\n// The example displays the following output:\n//   Public types in assembly sysglobl, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a:\n//      System.Globalization.CultureAndRegionInfoBuilder\n//      System.Globalization.CultureAndRegionModifiers\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Reflection.Assembly.Load#2\">Imports System.Reflection\n\nModule Example\n   Public Sub Main()\n      Dim fullName As String = &quot;sysglobl, Version=4.0.0.0, Culture=neutral, &quot; +\n                               &quot;PublicKeyToken=b03f5f7f11d50a3a, processor architecture=MSIL&quot;\n      Dim an As New AssemblyName(fullName)\n      Dim assem As Assembly = Assembly.Load(an)\n      Console.WriteLine(&quot;Public types in assembly {0}:&quot;, assem.FullName)\n      For Each t As Type in assem.GetTypes()\n         If t.IsPublic Then Console.WriteLine(&quot;   {0}&quot;, t.FullName)\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;   Public types in assembly sysglobl, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a:\n&#39;      System.Globalization.CultureAndRegionInfoBuilder\n&#39;      System.Globalization.CultureAndRegionModifiers\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_Load_System_String_\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_Load_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Load(String)</div>        \r\n          </div>\r\n    \r\n            <p>Loads an assembly given the long form of its name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Reflection.Assembly Load (string assemblyString);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyString</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The long form of the assembly name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </div>\r\n                  <p>The loaded assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyString</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyString</code> is a zero-length string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyString</code> is not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>A file that was found could not be loaded.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyString</code> is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyString</code> was compiled with a later version.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The long form of an assembly name consists of its simple name (such as &quot;System&quot; for the System.dll assembly) along with its version, culture, public key token, and optionally its processor architecture. It corresponds to the assembly&#39;s <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_FullName_\" data-linktype=\"relative-path\">FullName</a> property. The following example illustrates the use of a long name to load the System.dll assembly for the .NET Framework 4.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Reflection.Assembly.Load#1\">using System;\nusing System.Reflection;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string longName = &quot;system, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&quot;;\n      Assembly assem = Assembly.Load(longName);\n      if (assem == null)\n         Console.WriteLine(&quot;Unable to load assembly...&quot;);\n      else\n         Console.WriteLine(assem.FullName);\n   }\n}\n// The example displays the following output:\n//        system, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Reflection.Assembly.Load#1\">Imports System.Reflection\n\nModule Example\n   Public Sub Main()\n      Dim longName As String = &quot;system, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&quot;\n      Dim assem As Assembly = Assembly.Load(longName)\n      If assem Is Nothing Then\n         Console.WriteLine(&quot;Unable to load assembly...&quot;)\n      Else\n         Console.WriteLine(assem.FullName)\n      End If\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       system, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\n</code></pre><p> <a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a> is thrown if <code>assemblyString</code> specifies the full assembly name, and the first assembly that matches the simple name has a different version, culture, or public key token. The loader does not continue probing for other assemblies that match the simple name.  </p>\n<p> Whether certain permissions are granted or not granted to an assembly is based on evidence. The rules for assembly and security evidence merging are as follows:  </p>\n<ul>\n<li><p>When you use a Load method with no <a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a> parameter, the assembly is loaded with the evidence that the loader supplies.  </p>\n</li>\n<li><p>When you use a Load method with an <a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a> parameter, pieces of evidence are merged. Pieces of evidence supplied as an argument to the Load method supersede pieces of evidence supplied by the loader.  </p>\n</li>\n<li><p>When you use a Load method overload with a <code>Byte[]</code> parameter to load a common object file format (COFF) image, evidence is inherited from the calling assembly. This applies to the .NET Framework version 1.1 Service Pack 1 (SP1) and subsequent releases.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework version 1.0 and in version 1.1 without SP1, when you use a Load method overload with a <code>Byte[]</code> parameter to load a COFF image, evidence is combined. <code>Zone</code>, <code>Url</code> and <code>Site</code> are inherited from the calling assembly, and <code>Hash</code> and <code>StrongName</code> are taken from the COFF assembly.  </p>\n</div>\n</li>\n<li><p>When you use a Load method with a <code>Byte[]</code> parameter and <a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a> to load a COFF image, only the supplied evidence is used. Evidence of the calling assembly and evidence of the COFF image is ignored.  </p>\n<p>Reflecting on C++ executable files might throw a <a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a>. This is most likely caused by the C++ compiler stripping the relocation addresses or the <code>.reloc</code> section from your executable file. To preserve the <code>.reloc</code> address for your C++ executable file, specify <code>/fixed:no</code> when you are linking.  </p>\n<p>In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings. For example, &quot;ProcessorArchitecture=msil&quot;. However, the recommended way to specify an assembly name is to create an <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a> object and pass it to an appropriate overload of the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method. See <a class=\"xref\" href=\"system.reflection.assemblyname#System_Reflection_AssemblyName_ProcessorArchitecture_\" data-linktype=\"relative-path\">ProcessorArchitecture</a>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example loads an assembly given its fully qualified name, and lists all the types contained in the specified assembly. For this code example to run, you must provide the fully qualified assembly name. For information about how to obtain the fully qualified assembly name, see <a href=\"../Topic/Assembly%20Names.md\" data-linktype=\"relative-path\">Assembly Names</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"assembly.load1#1\">using System;\nusing System.Reflection;\n\nclass Class1\n{\n    public static void Main()\n    {\n        // You must supply a valid fully qualified assembly name.            \n        Assembly SampleAssembly = Assembly.Load\n\t\t    (&quot;SampleAssembly, Version=1.0.2004.0, Culture=neutral, PublicKeyToken=8744b20f8da049e3&quot;);\n        // Display all the types contained in the specified assembly.\n\t\tforeach (Type oType in SampleAssembly.GetTypes()) {\n            Console.WriteLine(oType.Name);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"assembly.load1#1\">Imports System\nImports System.Reflection\n\nClass Class1\n    Public Shared Sub Main()\n\t\t&#39; You must supply a valid fully qualified assembly name.            \n\t\tDim SampleAssembly As [Assembly] = _\n\t\t\t[Assembly].Load(&quot;SampleAssembly, Version=1.0.2004.0, Culture=neutral, PublicKeyToken=8744b20f8da049e3&quot;)\n        Dim oType As Type\n        &#39; Display all the types contained in the specified assembly.\n\t\tFor Each oType In SampleAssembly.GetTypes()\n\t\t\tConsole.WriteLine(oType.Name)\n\t\tNext oType\n\tEnd Sub\t&#39;LoadSample\nEnd Class &#39;Class1\n</code></pre><pre><code class=\"lang-cpp\" name=\"assembly.load1#1\">using namespace System;\nusing namespace System::Collections;\nusing namespace System::Reflection;\nint main()\n{\n    // You must supply a valid fully qualified assembly name.            \n    Assembly^ SampleAssembly = Assembly::Load\n        ( &quot;SampleAssembly, Version=1.0.2004.0, Culture=neutral, PublicKeyToken=8744b20f8da049e3&quot; );\n    array&lt;Type^&gt;^ Types = SampleAssembly-&gt;GetTypes();\n    \n    // Display all the types contained in the specified assembly.\n    IEnumerator^ myEnum = Types-&gt;GetEnumerator();\n    Type^ oType;\n    while ( myEnum-&gt;MoveNext() )\n    {\n        oType = safe_cast&lt;Type^&gt;(myEnum-&gt;Current);\n        Console::WriteLine( oType-&gt;Name );\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_Load_System_Byte___System_Byte___\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_Load_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Load(Byte[],Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Loads the assembly with a common object file format (COFF)-based image containing an emitted assembly, optionally including symbols for the assembly. The assembly is loaded into the application domain of the caller.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Reflection.Assembly Load (byte[] rawAssembly, byte[] rawSymbolStore);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rawAssembly</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A byte array that is a COFF-based image containing an emitted assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rawSymbolStore</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A byte array that contains the raw bytes representing the symbols for the assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </div>\r\n                  <p>The loaded assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>rawAssembly</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>rawAssembly</code> is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> Version 2.0 or later of the common language runtime is currently loaded and <code>rawAssembly</code> was compiled with a later version.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The trust level of an assembly that is loaded by using this method is the same as the trust level of the calling assembly. To load an assembly from a byte array with the trust level of the application domain, use the [Load(Byte[],â€‚Byte&lt;xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%2CSystem.Byte%5B%5D%2CSystem.Security.SecurityContextSource%29&gt; method overload. For more information about the use of evidence with overloads of the Load method that take byte arrays, see the [Load(Byte[],â€‚Byte&lt;xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%2CSystem.Byte%5B%5D%2CSystem.Security.Policy.Evidence%29&gt; method overload.  </p>\n<p> Reflecting on C++ executable files might throw a <a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a>. This is most likely caused by the C++ compiler stripping the relocation addresses or the <code>.reloc</code> section from your executable file. To preserve the <code>.reloc</code> address for your C++ executable file, specify <code>/fixed:no</code> when you are linking.  </p>\n<p> Note that this method overload always creates a new <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> object with its own mapping.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_Load_System_Reflection_AssemblyName_System_Security_Policy_Evidence_\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_Load_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Load(AssemblyName,Evidence)</div>        \r\n          </div>\r\n    \r\n            <p>Loads an assembly given its <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a>. The assembly is loaded into the domain of the caller using the supplied evidence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Reflection.Assembly Load (System.Reflection.AssemblyName assemblyRef, System.Security.Policy.Evidence assemblySecurity);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyRef</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object that describes the assembly to be loaded.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblySecurity</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Evidence for loading the assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </div>\r\n                  <p>The loaded assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyRef</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyRef</code> is not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyRef</code> is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyRef</code> was compiled with a later version.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>An assembly or module was loaded twice with two different evidences.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a> is thrown if <code>assemblyRef</code> specifies the full assembly name, and the first assembly that matches the simple name has a different version, culture, or public key token. The loader does not continue probing for other assemblies that match the simple name.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Do not use an <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a> with only the <a class=\"xref\" href=\"system.reflection.assemblyname#System_Reflection_AssemblyName_CodeBase_\" data-linktype=\"relative-path\">CodeBase</a> property set. The <a class=\"xref\" href=\"system.reflection.assemblyname#System_Reflection_AssemblyName_CodeBase_\" data-linktype=\"relative-path\">CodeBase</a> property does not supply any elements of the assembly identity (such as name or version), so loading does not occur according to load-by-identity rules, as you would expect from the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method. Instead, the assembly is loaded using load-from rules. For information about the disadvantages of using the load-from context, see the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFrom_\" data-linktype=\"relative-path\">LoadFrom</a> method overload or <a href=\"../Topic/Best%20Practices%20for%20Assembly%20Loading.md\" data-linktype=\"relative-path\">Best Practices for Assembly Loading</a>.  </p>\n</div>\n<p> Whether certain permissions are granted or not granted to an assembly is based on evidence. The rules for assembly and security evidence merging are as follows:  </p>\n<ul>\n<li><p>When you use a <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method with no <a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a> parameter, the assembly is loaded with the evidence that the loader supplies.  </p>\n</li>\n<li><p>When you use a <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method with an <a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a> parameter, pieces of evidence are merged. Pieces of evidence supplied as an argument to the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method supersede pieces of evidence supplied by the loader.  </p>\n</li>\n<li><p>When you use a <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method overload with a <code>Byte[]</code> parameter to load a common object file format (COFF) image, evidence is inherited from the calling assembly. This applies to the .NET Framework version 1.1 Service Pack 1 (SP1) and subsequent releases.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework version 1.0 and in version 1.1 without SP1, when you use a <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method overload with a <code>Byte[]</code> parameter to load a COFF image, evidence is combined. <code>Zone</code>, <code>Url</code> and <code>Site</code> are inherited from the calling assembly, and <code>Hash</code> and <code>StrongName</code> are taken from the COFF assembly.  </p>\n</div>\n</li>\n<li><p>When you use a <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method with a <code>Byte[]</code> parameter and <a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a> to load a COFF image, only the supplied evidence is used. Evidence of the calling assembly and evidence of the COFF image is ignored.  </p>\n<p>Reflecting on C++ executable files might throw a <a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a>. This is most likely caused by the C++ compiler stripping the relocation addresses or the <code>.reloc</code> section from your executable file. To preserve the <code>.reloc</code> address for your C++ executable file, specify <code>/fixed:no</code> when you are linking.  </p>\n</li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> If both the <a class=\"xref\" href=\"system.reflection.assemblyname#System_Reflection_AssemblyName_Name_\" data-linktype=\"relative-path\">Name</a> property and the <a class=\"xref\" href=\"system.reflection.assemblyname#System_Reflection_AssemblyName_CodeBase_\" data-linktype=\"relative-path\">CodeBase</a> property are set, the first attempt to load the assembly uses the display name (including version, culture, and so on, as returned by the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_FullName_\" data-linktype=\"relative-path\">FullName</a> property). If the file is not found, <a class=\"xref\" href=\"system.reflection.assemblyname#System_Reflection_AssemblyName_CodeBase_\" data-linktype=\"relative-path\">CodeBase</a> is used to search for the assembly. If the assembly is found using <a class=\"xref\" href=\"system.reflection.assemblyname#System_Reflection_AssemblyName_CodeBase_\" data-linktype=\"relative-path\">CodeBase</a>, the display name is matched against the assembly. If the match fails, a <a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a> is thrown.  </p>\n</div>\n<p> If you call the Load method more than once on the same assembly but with a different evidence specified, the common language runtime does not throw a <a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a> because the equality and integrity of the different evidence specifications cannot be determined. The evidence that first succeeds is the evidence that is used.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_Load_System_String_System_Security_Policy_Evidence_\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_Load_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Load(String,Evidence)</div>        \r\n          </div>\r\n    \r\n            <p>Loads an assembly given its display name, loading the assembly into the domain of the caller using the supplied evidence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Reflection.Assembly Load (string assemblyString, System.Security.Policy.Evidence assemblySecurity);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyString</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The display name of the assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblySecurity</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Evidence for loading the assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </div>\r\n                  <p>The loaded assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyString</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyString</code> is not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyString</code> is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyString</code> was compiled with a later version.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>A file that was found could not be loaded.  </p>\n<p> -or-  </p>\n<p> An assembly or module was loaded twice with two different evidences.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a> is thrown if <code>assemblyString</code> specifies the full assembly name, and the first assembly that matches the simple name has a different version, culture, or public key token. The loader does not continue probing for other assemblies that match the simple name.  </p>\n<p> Whether certain permissions are granted or not granted to an assembly is based on evidence. The rules for assembly and security evidence merging are as follows:  </p>\n<ul>\n<li><p>When you use a <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method with no <a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a> parameter, the assembly is loaded with the evidence that the loader supplies.  </p>\n</li>\n<li><p>When you use a <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method with an <a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a> parameter, pieces of evidence are merged. Pieces of evidence supplied as an argument to the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method supersede pieces of evidence supplied by the loader.  </p>\n</li>\n<li><p>When you use a <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method overload with a <code>Byte[]</code> parameter to load a common object file format (COFF) image, evidence is inherited from the calling assembly. This applies to the .NET Framework version 1.1 Service Pack 1 (SP1) and subsequent releases.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework version 1.0 and in version 1.1 without SP1, when you use a <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method overload with a <code>Byte[]</code> parameter to load a COFF image, evidence is combined. <code>Zone</code>, <code>Url</code> and <code>Site</code> are inherited from the calling assembly, and <code>Hash</code> and <code>StrongName</code> are taken from the COFF assembly.  </p>\n</div>\n</li>\n<li><p>When you use a <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method with a <code>Byte[]</code> parameter and <a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a> to load a COFF image, only the supplied evidence is used. Evidence of the calling assembly and evidence of the COFF image is ignored.  </p>\n<p>Reflecting on C++ executable files might throw a <a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a>. This is most likely caused by the C++ compiler stripping the relocation addresses or the <code>.reloc</code> section from your executable file. To preserve the <code>.reloc</code> address for your C++ executable file, specify <code>/fixed:no</code> when you are linking.  </p>\n<p>If you call this method more than once on the same assembly but with a different evidence specified, the common language runtime does not throw a <a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a> because the equality and integrity of the different evidence specifications cannot be determined. The evidence that first succeeds is the evidence that is used.  </p>\n<p>In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings. For example, &quot;ProcessorArchitecture=msil&quot;. However, the recommended way to specify an assembly name is to create an <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a> object and pass it to an appropriate overload of the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method. See <a class=\"xref\" href=\"system.reflection.assemblyname#System_Reflection_AssemblyName_ProcessorArchitecture_\" data-linktype=\"relative-path\">ProcessorArchitecture</a>.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_Load_System_Byte___System_Byte___System_Security_Policy_Evidence_\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_Load_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Load(Byte[],Byte[],Evidence)</div>        \r\n          </div>\r\n    \r\n            <p>Loads the assembly with a common object file format (COFF)-based image containing an emitted assembly, optionally including symbols and evidence for the assembly. The assembly is loaded into the application domain of the caller.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Reflection.Assembly Load (byte[] rawAssembly, byte[] rawSymbolStore, System.Security.Policy.Evidence securityEvidence);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rawAssembly</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A byte array that is a COFF-based image containing an emitted assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rawSymbolStore</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A byte array that contains the raw bytes representing the symbols for the assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>securityEvidence</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Evidence for loading the assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </div>\r\n                  <p>The loaded assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>rawAssembly</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>rawAssembly</code> is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> Version 2.0 or later of the common language runtime is currently loaded and <code>rawAssembly</code> was compiled with a later version.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>An assembly or module was loaded twice with two different evidences.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>securityEvidence</code> is not <code>null</code>.  By default, legacy CAS policy is not enabled in the .NET Framework 4; when it is not enabled, <code>securityEvidence</code> must be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The assembly is loaded into the domain of the caller using the supplied evidence. The raw bytes representing the symbols for the assembly are also loaded.  </p>\n<p> Whether certain permissions are granted or not granted to an assembly is based on evidence. The rules for assembly and security evidence merging are as follows:  </p>\n<ul>\n<li><p>When you use a <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method with no <a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a> parameter, the assembly is loaded with the evidence that the loader supplies.  </p>\n</li>\n<li><p>When you use a <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method with an <a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a> parameter, pieces of evidence are merged. Pieces of evidence supplied as an argument to the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method supersede pieces of evidence supplied by the loader.  </p>\n</li>\n<li><p>When you use a <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method overload with a <code>Byte[]</code> parameter to load a COFF image, evidence is inherited from the calling assembly. This applies to the .NET Framework version 1.1 Service Pack 1 (SP1) and subsequent releases.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework version 1.0 and in version 1.1 without SP1, when you use a <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method overload with a <code>Byte[]</code> parameter to load a COFF image, evidence is combined. <code>Zone</code>, <code>Url</code> and <code>Site</code> are inherited from the calling assembly, and <code>Hash</code> and <code>StrongName</code> are taken from the COFF assembly.  </p>\n</div>\n</li>\n<li><p>When you use a <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method with a <code>Byte[]</code> parameter and <a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a> to load a COFF image, only the supplied evidence is used. Evidence of the calling assembly and evidence of the COFF image are ignored.  </p>\n<p>Reflecting on C++ executable files might throw a <a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a>. This is most likely caused by the C++ compiler stripping the relocation addresses or the <code>.reloc</code> section from your executable file. To preserve the <code>.reloc</code> address for your C++ executable file, specify <code>/fixed:no</code> when you are linking.  </p>\n<p>If you call the Loadmethod more than once on the same assembly but with a different evidence specified, the common language runtime does not throw a <a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a> because the equality and integrity of the different evidence specifications cannot be determined. The evidence that first succeeds is the evidence that is used.  </p>\n<p>Note that this method overload always creates a new <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> object with its own mapping.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_Load_System_Byte___System_Byte___System_Security_SecurityContextSource_\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_Load_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Load(Byte[],Byte[],SecurityContextSource)</div>        \r\n          </div>\r\n    \r\n            <p>Loads the assembly with a common object file format (COFF)-based image containing an emitted assembly, optionally including symbols and specifying the source for the security context. The assembly is loaded into the application domain of the caller.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Reflection.Assembly Load (byte[] rawAssembly, byte[] rawSymbolStore, System.Security.SecurityContextSource securityContextSource);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rawAssembly</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A byte array that is a COFF-based image containing an emitted assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rawSymbolStore</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A byte array that contains the raw bytes representing the symbols for the assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>securityContextSource</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securitycontextsource\" data-linktype=\"relative-path\">SecurityContextSource</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The source of the security context.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </div>\r\n                  <p>The loaded assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>rawAssembly</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>rawAssembly</code> is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> <code>rawAssembly</code> was compiled with a later version of the common language runtime than the version that is currently loaded.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The value of <code>securityContextSource</code> is not one of the enumeration values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The assembly is loaded into the application domain of the caller using the specified source for the security context. If <code>rawSymbolStore</code> was specified, the raw bytes that represent the symbols for the assembly are also loaded.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_LoadFile_System_String_\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_LoadFile_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LoadFile(String)</div>        \r\n          </div>\r\n    \r\n            <p>Loads the contents of an assembly file on the specified path.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Reflection.Assembly LoadFile (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The fully qualified path of the file to load.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </div>\r\n                  <p>The loaded assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>path</code> argument is not an absolute path.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>path</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>A file that was found could not be loaded.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The <code>path</code> parameter is an empty string (&quot;&quot;) or does not exist.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> Version 2.0 or later of the common language runtime is currently loaded and <code>path</code> was compiled with a later version.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the LoadFile method to load and examine assemblies that have the same identity, but are located in different paths.LoadFile does not load files into the load-from  context, and does not resolve dependencies using the load path, as the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFrom_\" data-linktype=\"relative-path\">LoadFrom</a> method does. LoadFile is useful in this limited scenario because <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFrom_\" data-linktype=\"relative-path\">LoadFrom</a> cannot be used to load assemblies that have the same identities but different paths; it will load only the first such assembly.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_LoadFile_System_String_System_Security_Policy_Evidence_\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_LoadFile_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LoadFile(String,Evidence)</div>        \r\n          </div>\r\n    \r\n            <p>Loads an assembly given its path, loading the assembly into the domain of the caller using the supplied evidence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Reflection.Assembly LoadFile (string path, System.Security.Policy.Evidence securityEvidence);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The fully qualified path of the assembly file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>securityEvidence</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Evidence for loading the assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </div>\r\n                  <p>The loaded assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>path</code> argument is not an absolute path.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>path</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The <code>path</code> parameter is an empty string (&quot;&quot;) or does not exist.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>A file that was found could not be loaded.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> Version 2.0 or later of the common language runtime is currently loaded and <code>path</code> was compiled with a later version.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>securityEvidence</code> is not <code>null</code>. By default, legacy CAS policy is not enabled in the .NET Framework 4; when it is not enabled, <code>securityEvidence</code> must be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFile_\" data-linktype=\"relative-path\">LoadFile</a> method to load and examine assemblies that have the same identity, but are located in different paths. <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFile_\" data-linktype=\"relative-path\">LoadFile</a> does not load files into the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFrom_\" data-linktype=\"relative-path\">LoadFrom</a> context, and does not resolve dependencies using the load path, as the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFrom_\" data-linktype=\"relative-path\">LoadFrom</a> method does. <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFile_\" data-linktype=\"relative-path\">LoadFile</a> is useful in this limited scenario because <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFrom_\" data-linktype=\"relative-path\">LoadFrom</a> cannot be used to load assemblies that have the same identities but different paths; it will load only the first such assembly.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_LoadFrom_System_String_\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_LoadFrom_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LoadFrom(String)</div>        \r\n          </div>\r\n    \r\n            <p>Loads an assembly given its file name or path.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Reflection.Assembly LoadFrom (string assemblyFile);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyFile</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name or path of the file that contains the manifest of the assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </div>\r\n                  <p>The loaded assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> is not found, or the module you are trying to load does not specify a filename extension.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>A file that was found could not be loaded.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> is not a valid assembly; for example, a 32-bit assembly in a 64-bit process. See the exception topic for more information.  </p>\n<p> -or-  </p>\n<p> Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyFile</code> was compiled with a later version.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>A codebase that does not start with &quot;file://&quot; was specified without the required <a class=\"xref\" href=\"system.net.webpermission\" data-linktype=\"relative-path\">WebPermission</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>assemblyFile</code> parameter is an empty string (&quot;&quot;).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The assembly name is longer than MAX_PATH characters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>assemblyFile</code> parameter must refer to a URI without escape characters. This method supplies escape characters for all invalid characters in the URI.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> File transfer protocol (FTP) is not supported. If the URI supplied for <code>assemblyFile</code> is an FTP address, the assembly is not loaded. No exception is thrown.  </p>\n</div>\n<p> <code>assemblyFile</code> may be absolute or relative to the current directory, and the assembly is loaded into the domain of the caller.  </p>\n<p> Assemblies can be loaded into one of three contexts, or can be loaded without context:  </p>\n<ul>\n<li><p>The load context contains assemblies found by probing: in the GAC, in a host assembly store if the runtime is hosted, or in the <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_ApplicationBase_\" data-linktype=\"relative-path\">ApplicationBase</a> and <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_PrivateBinPath_\" data-linktype=\"relative-path\">PrivateBinPath</a> of the application domain. Most overloads of the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method load assemblies into this context.  </p>\n</li>\n<li><p>The load-from context contains assemblies for which the user provided a path not included in the directories searched by probing. <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFrom_\" data-linktype=\"relative-path\">LoadFrom</a>, <a class=\"xref\" href=\"system.appdomain#System_AppDomain_CreateInstanceFrom_\" data-linktype=\"relative-path\">CreateInstanceFrom</a>, and <a class=\"xref\" href=\"system.appdomain#System_AppDomain_ExecuteAssembly_\" data-linktype=\"relative-path\">ExecuteAssembly</a> are examples of methods that load by path.  </p>\n</li>\n<li><p>The reflection-only context contains assemblies loaded with the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_ReflectionOnlyLoad_\" data-linktype=\"relative-path\">ReflectionOnlyLoad</a> and <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_ReflectionOnlyLoadFrom_\" data-linktype=\"relative-path\">ReflectionOnlyLoadFrom</a> methods; code in these contexts cannot be executed.  </p>\n</li>\n<li><p>If the user generated or found the assembly, it is not in any context. This applies to assemblies loaded using overloads of the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method that specify a byte array containing an assembly, and to transient dynamic assemblies created with reflection emit and not saved to disk.  </p>\n<p>The load-from context allows an assembly to be loaded from a path not included in probing, and yet allows dependencies on that path to be found and loaded because the path information is maintained by the context.  </p>\n<p>The <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFrom_\" data-linktype=\"relative-path\">LoadFrom</a> method has the following disadvantages. Consider using <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> instead.  </p>\n</li>\n<li><p>If an assembly with the same identity is already loaded, <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFrom_\" data-linktype=\"relative-path\">LoadFrom</a> returns the loaded assembly even if a different path was specified.  </p>\n</li>\n<li><p>If an assembly is loaded with <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFrom_\" data-linktype=\"relative-path\">LoadFrom</a>, and later an assembly in the load context attempts to load the same assembly by display name, the load attempt fails. This can occur when an assembly is de-serialized.  </p>\n</li>\n<li><p>If an assembly is loaded with <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFrom_\" data-linktype=\"relative-path\">LoadFrom</a>, and the probing path includes an assembly with the same identity but a different location, an <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>, <a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a>, or other unexpected behavior can occur.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFrom_\" data-linktype=\"relative-path\">LoadFrom</a> demands <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">System.Security.Permissions.FileIOPermissionAccess</a> and <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">System.Security.Permissions.FileIOPermissionAccess</a>, or <a class=\"xref\" href=\"system.net.webpermission\" data-linktype=\"relative-path\">WebPermission</a>, on the specified path.  </p>\n</li>\n<li><p>If a native image exists for <code>assemblyFile</code>, it is not used. The assembly cannot be loaded as domain neutral.  </p>\n</li>\n<li><p>In the .NET Framework version 1.0 and 1.1, policy is not applied.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example loads an assembly given its file name or path.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Reflection.Assembly#11\">   Assembly^ SampleAssembly;\n   SampleAssembly = Assembly::LoadFrom( &quot;c:\\\\Sample.Assembly.dll&quot; );\n   // Obtain a reference to a method known to exist in assembly.\n   MethodInfo^ Method = SampleAssembly-&gt;GetTypes()[ 0 ]-&gt;GetMethod( &quot;Method1&quot; );\n   // Obtain a reference to the parameters collection of the MethodInfo instance.\n   array&lt;ParameterInfo^&gt;^ Params = Method-&gt;GetParameters();\n   // Display information about method parameters.\n   // Param = sParam1\n   //   Type = System::String\n   //   Position = 0\n   //   Optional=False\n   for each ( ParameterInfo^ Param in Params )\n   {\n      Console::WriteLine( &quot;Param= {0}&quot;, Param-&gt;Name );\n      Console::WriteLine( &quot;  Type= {0}&quot;, Param-&gt;ParameterType );\n      Console::WriteLine( &quot;  Position= {0}&quot;, Param-&gt;Position );\n      Console::WriteLine( &quot;  Optional= {0}&quot;, Param-&gt;IsOptional );\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Reflection.Assembly#11\">         Dim SampleAssembly As [Assembly]\n         SampleAssembly = [Assembly].LoadFrom(&quot;c:\\Sample.Assembly.dll&quot;)\n         &#39; Obtain a reference to a method known to exist in assembly.\n         Dim Method As MethodInfo = SampleAssembly.GetTypes()(0).GetMethod(&quot;Method1&quot;)\n         &#39; Obtain a reference to the parameters collection of the MethodInfo instance.\n         Dim Params As ParameterInfo() = Method.GetParameters()\n         &#39; Display information about method parameters.\n         &#39; Param = sParam1\n         &#39;   Type = System.String\n         &#39;   Position = 0\n         &#39;   Optional=False\n         For Each Param As ParameterInfo In Params\n             Console.WriteLine((&quot;Param=&quot; + Param.Name.ToString()))\n             Console.WriteLine((&quot;  Type=&quot; + Param.ParameterType.ToString()))\n             Console.WriteLine((&quot;  Position=&quot; + Param.Position.ToString()))\n             Console.WriteLine((&quot;  Optional=&quot; + Param.IsOptional.ToString()))\n         Next \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Reflection.Assembly#11\">         Assembly SampleAssembly;\n         SampleAssembly = Assembly.LoadFrom(&quot;c:\\\\Sample.Assembly.dll&quot;);\n         // Obtain a reference to a method known to exist in assembly.\n         MethodInfo Method = SampleAssembly.GetTypes()[0].GetMethod(&quot;Method1&quot;);\n         // Obtain a reference to the parameters collection of the MethodInfo instance.\n         ParameterInfo[] Params = Method.GetParameters();\n         // Display information about method parameters.\n         // Param = sParam1\n         //   Type = System.String\n         //   Position = 0\n         //   Optional=False\n         foreach (ParameterInfo Param in Params)\n         {\n             Console.WriteLine(&quot;Param=&quot; + Param.Name.ToString());\n             Console.WriteLine(&quot;  Type=&quot; + Param.ParameterType.ToString());\n             Console.WriteLine(&quot;  Position=&quot; + Param.Position.ToString());\n             Console.WriteLine(&quot;  Optional=&quot; + Param.IsOptional.ToString());\n         }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_LoadFrom_System_String_System_Security_Policy_Evidence_\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_LoadFrom_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LoadFrom(String,Evidence)</div>        \r\n          </div>\r\n    \r\n            <p>Loads an assembly given its file name or path and supplying security evidence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Reflection.Assembly LoadFrom (string assemblyFile, System.Security.Policy.Evidence securityEvidence);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyFile</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name or path of the file that contains the manifest of the assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>securityEvidence</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Evidence for loading the assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </div>\r\n                  <p>The loaded assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> is not found, or the module you are trying to load does not specify a filename extension.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>A file that was found could not be loaded.  </p>\n<p> -or-  </p>\n<p> The <code>securityEvidence</code> is not ambiguous and is determined to be invalid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> is not a valid assembly; for example, a 32-bit assembly in a 64-bit process. See the exception topic for more information.  </p>\n<p> -or-  </p>\n<p> Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyFile</code> was compiled with a later version.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>A codebase that does not start with &quot;file://&quot; was specified without the required <a class=\"xref\" href=\"system.net.webpermission\" data-linktype=\"relative-path\">WebPermission</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>assemblyFile</code> parameter is an empty string (&quot;&quot;).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The assembly name is longer than MAX_PATH characters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>assemblyFile</code> parameter must refer to a URI without escape characters. This method supplies escape characters for all invalid characters in the URI.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> File transfer protocol (FTP) is not supported. If the URI supplied for <code>assemblyFile</code> is an FTP address, the assembly is not loaded. No exception is thrown.  </p>\n</div>\n<p> <code>assemblyFile</code> may be absolute or  relative to the current directory, and the assembly is loaded into the domain of the caller.  </p>\n<p> Assemblies can be loaded into one of three contexts, or can be loaded without context:  </p>\n<ul>\n<li><p>The load context contains assemblies found by probing: in the GAC, in a host assembly store if the runtime is hosted, or in the <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_ApplicationBase_\" data-linktype=\"relative-path\">ApplicationBase</a> and <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_PrivateBinPath_\" data-linktype=\"relative-path\">PrivateBinPath</a> of the application domain. Most overloads of the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method load assemblies into this context.  </p>\n</li>\n<li><p>The load-from context contains assemblies for which the user provided a path not included in the directories searched by probing. <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFrom_\" data-linktype=\"relative-path\">LoadFrom</a>, <a class=\"xref\" href=\"system.appdomain#System_AppDomain_CreateInstanceFrom_\" data-linktype=\"relative-path\">CreateInstanceFrom</a>, and <a class=\"xref\" href=\"system.appdomain#System_AppDomain_ExecuteAssembly_\" data-linktype=\"relative-path\">ExecuteAssembly</a> are examples of methods that load by path.  </p>\n</li>\n<li><p>The reflection-only context contains assemblies loaded with the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_ReflectionOnlyLoad_\" data-linktype=\"relative-path\">ReflectionOnlyLoad</a> and <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_ReflectionOnlyLoadFrom_\" data-linktype=\"relative-path\">ReflectionOnlyLoadFrom</a> methods; code in these contexts cannot be executed.  </p>\n</li>\n<li><p>If the user generated or found the assembly, it is not in any context. This applies to assemblies loaded using overloads of the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method that specify a byte array containing an assembly, and to transient dynamic assemblies created with reflection emit and not saved to disk.  </p>\n<p>The load-from context allows an assembly to be loaded from a path not included in probing, and yet allows dependencies on that path to be found and loaded because the path information is maintained by the context.  </p>\n<p>The <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFrom_\" data-linktype=\"relative-path\">LoadFrom</a> method has the following disadvantages. Consider using <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> instead.  </p>\n</li>\n<li><p>If an assembly with the same identity is already loaded, <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFrom_\" data-linktype=\"relative-path\">LoadFrom</a> returns the loaded assembly even if a different path was specified.  </p>\n</li>\n<li><p>If an assembly is loaded with <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFrom_\" data-linktype=\"relative-path\">LoadFrom</a>, and later an assembly in the load context attempts to load the same assembly by display name, the load attempt fails. This can occur when an assembly is deserialized.  </p>\n</li>\n<li><p>If an assembly is loaded with <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFrom_\" data-linktype=\"relative-path\">LoadFrom</a>, and the probing path includes an assembly with the same identity but a different location, an <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>, <a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a>, or other unexpected behavior can occur.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFrom_\" data-linktype=\"relative-path\">LoadFrom</a> demands <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">System.Security.Permissions.FileIOPermissionAccess</a> and <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">System.Security.Permissions.FileIOPermissionAccess</a>, or <a class=\"xref\" href=\"system.net.webpermission\" data-linktype=\"relative-path\">WebPermission</a>, on the specified path.  </p>\n</li>\n<li><p>If a native image exists for <code>assemblyFile</code>, it is not used. The assembly cannot be loaded as domain neutral.  </p>\n</li>\n<li><p>In the .NET Framework version 1.0 and 1.1, policy is not applied.  </p>\n<p>Whether certain permissions are granted or not granted to an assembly is based on evidence. The rules for assembly and security evidence merging are as follows:  </p>\n</li>\n<li><p>When you use a <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFrom_\" data-linktype=\"relative-path\">LoadFrom</a> method with no <a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a> parameter, the assembly is loaded with the evidence that the loader supplies.  </p>\n</li>\n<li><p>When you use a <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFrom_\" data-linktype=\"relative-path\">LoadFrom</a> method with an <a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a> parameter, pieces of evidence are merged. Pieces of evidence supplied as an argument to the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFrom_\" data-linktype=\"relative-path\">LoadFrom</a> method supersede pieces of evidence supplied by the loader.  </p>\n</li>\n<li><p>If you call this method more than once on the same assembly but with a different evidence specified, the common language runtime does not throw a <a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a> because the equality and integrity of the different evidence specifications cannot be determined. The evidence that first succeeds is the evidence that is used.  </p>\n</li>\n<li><p>When you use a <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFrom_\" data-linktype=\"relative-path\">LoadFrom</a> method with a <code>Byte[]</code> parameter to load a common object file format (COFF) image, evidence is combined. <code>Zone</code>, <code>Url</code> and <code>Site</code> are inherited from the calling assembly, and <code>Hash</code> and <code>StrongName</code> are taken from the COFF assembly.  </p>\n</li>\n<li><p>When you use a <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFrom_\" data-linktype=\"relative-path\">LoadFrom</a> method with a <code>Byte[]</code> parameter and <a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a> to load a COFF image, only the supplied evidence is used. Evidence of the calling assembly and evidence of the COFF image is ignored.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_LoadFrom_System_String_System_Byte___System_Configuration_Assemblies_AssemblyHashAlgorithm_\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_LoadFrom_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LoadFrom(String,Byte[],AssemblyHashAlgorithm)</div>        \r\n          </div>\r\n    \r\n            <p>Loads an assembly given its file name or path, hash value, and hash algorithm.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Reflection.Assembly LoadFrom (string assemblyFile, byte[] hashValue, System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyFile</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name or path of the file that contains the manifest of the assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>hashValue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value of the computed hash code.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>hashAlgorithm</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.assemblies.assemblyhashalgorithm\" data-linktype=\"relative-path\">AssemblyHashAlgorithm</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The hash algorithm used for hashing files and for generating the strong name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </div>\r\n                  <p>The loaded assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> is not found, or the module you are trying to load does not specify a file name extension.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>A file that was found could not be loaded.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> is not a valid assembly; for example, a 32-bit assembly in a 64-bit process. See the exception topic for more information.  </p>\n<p> -or-  </p>\n<p> <code>assemblyFile</code> was compiled with a later version of the common language runtime than the version that is currently loaded.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>A codebase that does not start with &quot;file://&quot; was specified without the required <a class=\"xref\" href=\"system.net.webpermission\" data-linktype=\"relative-path\">WebPermission</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>assemblyFile</code> parameter is an empty string (&quot;&quot;).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The assembly name is longer than MAX_PATH characters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>assemblyFile</code> parameter must refer to a URI without escape characters. This method supplies escape characters for all invalid characters in the URI.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> File transfer protocol (FTP) is not supported. If the URI supplied for <code>assemblyFile</code> is an FTP address, the assembly is not loaded. No exception is thrown.  </p>\n</div>\n<p> <code>assemblyFile</code> may be absolute or relative to the current directory, and the assembly is loaded into the domain of the caller.  </p>\n<p> Assemblies can be loaded into one of three contexts, or can be loaded without context:  </p>\n<ul>\n<li><p>The load context contains assemblies found by probing: in the global assembly cache, in a host assembly store if the runtime is hosted, or in the <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_ApplicationBase_\" data-linktype=\"relative-path\">ApplicationBase</a> and <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_PrivateBinPath_\" data-linktype=\"relative-path\">PrivateBinPath</a> of the application domain. Most overloads of the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method load assemblies into this context.  </p>\n</li>\n<li><p>The load-from context contains assemblies for which the user provided a path that is not included in probing. <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFrom_\" data-linktype=\"relative-path\">LoadFrom</a>, <a class=\"xref\" href=\"system.appdomain#System_AppDomain_CreateInstanceFrom_\" data-linktype=\"relative-path\">CreateInstanceFrom</a>, and <a class=\"xref\" href=\"system.appdomain#System_AppDomain_ExecuteAssembly_\" data-linktype=\"relative-path\">ExecuteAssembly</a> are examples of methods that load by path.  </p>\n</li>\n<li><p>The reflection-only context contains assemblies loaded with the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_ReflectionOnlyLoad_\" data-linktype=\"relative-path\">ReflectionOnlyLoad</a> and <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_ReflectionOnlyLoadFrom_\" data-linktype=\"relative-path\">ReflectionOnlyLoadFrom</a> methods; code in these contexts cannot be executed.  </p>\n</li>\n<li><p>If the user generated or found the assembly, it is not in any context. This applies to assemblies loaded using overloads of the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method that specify a byte array containing an assembly, and to transient dynamic assemblies created with reflection emit and not saved to disk.  </p>\n<p>The load-from context allows an assembly to be loaded from a path that is not included in probing, and yet allows dependencies on that path to be found and loaded because the path information is maintained by the context.  </p>\n<p>The <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFrom_\" data-linktype=\"relative-path\">LoadFrom</a> method has the following disadvantages. Consider using <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> instead.  </p>\n</li>\n<li><p>If an assembly with the same identity is already loaded, <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFrom_\" data-linktype=\"relative-path\">LoadFrom</a> returns the loaded assembly even if a different path was specified.  </p>\n</li>\n<li><p>If an assembly is loaded with <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFrom_\" data-linktype=\"relative-path\">LoadFrom</a>, and later an assembly in the load context attempts to load the same assembly by display name, the load attempt fails. This can occur when an assembly is deserialized.  </p>\n</li>\n<li><p>If an assembly is loaded with <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFrom_\" data-linktype=\"relative-path\">LoadFrom</a>, and the probing path includes an assembly with the same identity but a different location, an <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>, <a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a>, or other unexpected behavior can occur.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFrom_\" data-linktype=\"relative-path\">LoadFrom</a> demands <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">System.Security.Permissions.FileIOPermissionAccess</a> and <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">System.Security.Permissions.FileIOPermissionAccess</a>, or <a class=\"xref\" href=\"system.net.webpermission\" data-linktype=\"relative-path\">WebPermission</a>, on the specified path.  </p>\n</li>\n<li><p>If a native image exists for <code>assemblyFile</code>, it is not used. The assembly cannot be loaded as domain-neutral.  </p>\n<p>The assembly is loaded with the evidence that the loader supplies.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_LoadFrom_System_String_System_Security_Policy_Evidence_System_Byte___System_Configuration_Assemblies_AssemblyHashAlgorithm_\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_LoadFrom_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LoadFrom(String,Evidence,Byte[],AssemblyHashAlgorithm)</div>        \r\n          </div>\r\n    \r\n            <p>Loads an assembly given its file name or path, security evidence, hash value, and hash algorithm.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Reflection.Assembly LoadFrom (string assemblyFile, System.Security.Policy.Evidence securityEvidence, byte[] hashValue, System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyFile</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name or path of the file that contains the manifest of the assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>securityEvidence</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Evidence for loading the assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>hashValue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value of the computed hash code.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>hashAlgorithm</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.assemblies.assemblyhashalgorithm\" data-linktype=\"relative-path\">AssemblyHashAlgorithm</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The hash algorithm used for hashing files and for generating the strong name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </div>\r\n                  <p>The loaded assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> is not found, or the module you are trying to load does not specify a filename extension.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>A file that was found could not be loaded.  </p>\n<p> -or-  </p>\n<p> The <code>securityEvidence</code> is not ambiguous and is determined to be invalid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> is not a valid assembly; for example, a 32-bit assembly in a 64-bit process. See the exception topic for more information.  </p>\n<p> -or-  </p>\n<p> Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyFile</code> was compiled with a later version.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>A codebase that does not start with &quot;file://&quot; was specified without the required <a class=\"xref\" href=\"system.net.webpermission\" data-linktype=\"relative-path\">WebPermission</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>assemblyFile</code> parameter is an empty string (&quot;&quot;).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The assembly name is longer than MAX_PATH characters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>assemblyFile</code> parameter must refer to a URI without escape characters. This method supplies escape characters for all invalid characters in the URI.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> File transfer protocol (FTP) is not supported. If the URI supplied for <code>assemblyFile</code> is an FTP address, the assembly is not loaded. No exception is thrown.  </p>\n</div>\n<p> <code>assemblyFile</code> may be absolute or relative to the current directory, and the assembly is loaded into the domain of the caller.  </p>\n<p> Assemblies can be loaded into one of three contexts, or can be loaded without context:  </p>\n<ul>\n<li><p>The load context contains assemblies found by probing: in the GAC, in a host assembly store if the runtime is hosted, or in the <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_ApplicationBase_\" data-linktype=\"relative-path\">ApplicationBase</a> and <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_PrivateBinPath_\" data-linktype=\"relative-path\">PrivateBinPath</a> of the application domain. Most overloads of the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method load assemblies into this context.  </p>\n</li>\n<li><p>The load-from context contains assemblies for which the user provided a path not included in the directories searched by probing. <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFrom_\" data-linktype=\"relative-path\">LoadFrom</a>, <a class=\"xref\" href=\"system.appdomain#System_AppDomain_CreateInstanceFrom_\" data-linktype=\"relative-path\">CreateInstanceFrom</a>, and <a class=\"xref\" href=\"system.appdomain#System_AppDomain_ExecuteAssembly_\" data-linktype=\"relative-path\">ExecuteAssembly</a> are examples of methods that load by path.  </p>\n</li>\n<li><p>The reflection-only context contains assemblies loaded with the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_ReflectionOnlyLoad_\" data-linktype=\"relative-path\">ReflectionOnlyLoad</a> and <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_ReflectionOnlyLoadFrom_\" data-linktype=\"relative-path\">ReflectionOnlyLoadFrom</a> methods; code in these contexts cannot be executed.  </p>\n</li>\n<li><p>If the user generated or found the assembly, it is not in any context. This applies to assemblies loaded using overloads of the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method that specify a byte array containing an assembly, and to transient dynamic assemblies created with reflection emit and not saved to disk.  </p>\n<p>The load-from context allows an assembly to be loaded from a path not included in probing, and yet allows dependencies on that path to be found and loaded because the path information is maintained by the context.  </p>\n<p>The <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFrom_\" data-linktype=\"relative-path\">LoadFrom</a> method has the following disadvantages. Consider using <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> instead.  </p>\n</li>\n<li><p>If an assembly with the same identity is already loaded, <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFrom_\" data-linktype=\"relative-path\">LoadFrom</a> returns the loaded assembly even if a different path was specified.  </p>\n</li>\n<li><p>If an assembly is loaded with <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFrom_\" data-linktype=\"relative-path\">LoadFrom</a>, and later an assembly in the load context attempts to load the same assembly by display name, the load attempt fails. This can occur when an assembly is deserialized.  </p>\n</li>\n<li><p>If an assembly is loaded with <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFrom_\" data-linktype=\"relative-path\">LoadFrom</a>, and the probing path includes an assembly with the same identity but a different location, an <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>, <a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a>, or other unexpected behavior can occur.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFrom_\" data-linktype=\"relative-path\">LoadFrom</a> demands <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">System.Security.Permissions.FileIOPermissionAccess</a> and <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">System.Security.Permissions.FileIOPermissionAccess</a>, or <a class=\"xref\" href=\"system.net.webpermission\" data-linktype=\"relative-path\">WebPermission</a>, on the specified path.  </p>\n</li>\n<li><p>If a native image exists for <code>assemblyFile</code>, it is not used. The assembly cannot be loaded as domain neutral.  </p>\n</li>\n<li><p>In the .NET Framework version 1.0 and 1.1, policy is not applied.  </p>\n<p>Whether certain permissions are granted or not granted to an assembly is based on evidence. The rules for assembly and security evidence merging are as follows:  </p>\n</li>\n<li><p>When you use a <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFrom_\" data-linktype=\"relative-path\">LoadFrom</a> method with no <a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a> parameter, the assembly is loaded with the evidence that the loader supplies.  </p>\n</li>\n<li><p>When you use a <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFrom_\" data-linktype=\"relative-path\">LoadFrom</a> method with an <a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a> parameter, pieces of evidence are merged. Pieces of evidence supplied as an argument to the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFrom_\" data-linktype=\"relative-path\">LoadFrom</a> method supersede pieces of evidence supplied by the loader.  </p>\n</li>\n<li><p>If you call this method more than once on the same assembly but with a different evidence specified, the common language runtime does not throw a <a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a> because the equality and integrity of the different evidence specifications cannot be determined. The evidence that first succeeds is the evidence that is used.  </p>\n</li>\n<li><p>When you use a <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFrom_\" data-linktype=\"relative-path\">LoadFrom</a> method with a <code>Byte[]</code> parameter to load a common object file format (COFF) image, evidence is combined. <code>Zone</code>, <code>Url</code> and <code>Site</code> are inherited from the calling assembly, and <code>Hash</code> and <code>StrongName</code> are taken from the COFF assembly.  </p>\n</li>\n<li><p>When you use a <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFrom_\" data-linktype=\"relative-path\">LoadFrom</a> method with a <code>Byte[]</code> parameter and <a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a> to load a COFF image, only the supplied evidence is used. Evidence of the calling assembly and evidence of the COFF image is ignored.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_LoadModule_System_String_System_Byte___\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_LoadModule_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LoadModule(String,Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Loads the module, internal to this assembly, with a common object file format (COFF)-based image containing an emitted module, or a resource file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Module LoadModule (string moduleName, byte[] rawModule);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>moduleName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the module. This string must correspond to a file name in this assembly&#39;s manifest.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rawModule</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A byte array that is a COFF-based image containing an emitted module, or a resource.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a></div>\r\n                  </div>\r\n                  <p>The loaded module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>moduleName</code> or <code>rawModule</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>moduleName</code> does not match a file entry in this assembly&#39;s manifest.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>rawModule</code> is not a valid module.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>A file that was found could not be loaded.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_LoadModule_System_String_System_Byte___System_Byte___\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_LoadModule_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LoadModule(String,Byte[],Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Loads the module, internal to this assembly, with a common object file format (COFF)-based image containing an emitted module, or a resource file. The raw bytes representing the symbols for the module are also loaded.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Reflection.Module LoadModule (string moduleName, byte[] rawModule, byte[] rawSymbolStore);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>moduleName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the module. This string must correspond to a file name in this assembly&#39;s manifest.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rawModule</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A byte array that is a COFF-based image containing an emitted module, or a resource.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rawSymbolStore</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A byte array containing the raw bytes representing the symbols for the module. Must be <code>null</code> if this is a resource file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a></div>\r\n                  </div>\r\n                  <p>The loaded module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>moduleName</code> or <code>rawModule</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>moduleName</code> does not match a file entry in this assembly&#39;s manifest.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>rawModule</code> is not a valid module.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>A file that was found could not be loaded.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_LoadWithPartialName_System_String_\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_LoadWithPartialName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LoadWithPartialName(String)</div>        \r\n          </div>\r\n    \r\n            <p>Loads an assembly from the application directory or from the global assembly cache using a partial name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Reflection.Assembly LoadWithPartialName (string partialName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>partialName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The display name of the assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </div>\r\n                  <p>The loaded assembly. If <code>partialName</code> is not found, this method returns <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>partialName</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> Version 2.0 or later of the common language runtime is currently loaded and <code>partialName</code> was compiled with a later version.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"IMPORTANT\"><h5>Important</h5><p> The LoadWithPartialName method is obsolete and has been retained for backward compatibility. The non-obsolete alternative is <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_System_String_\" data-linktype=\"relative-path\">System.Reflection.Assembly.Load(String)</a>.  </p>\n</div>\n<p> Applications that load assemblies with this method will be affected by upgrades of those assemblies. Therefore, do not use this method; redesign the application to use the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_System_String_\" data-linktype=\"relative-path\">Load(String)</a> method overload or the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFrom_System_String_\" data-linktype=\"relative-path\">LoadFrom(String)</a> method overload.  </p>\n<p> This method first calls <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a>. If the assembly is not found, this method returns the assembly from the global assembly cache that has the same simple name, and the highest version number.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_LoadWithPartialName_System_String_System_Security_Policy_Evidence_\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_LoadWithPartialName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LoadWithPartialName(String,Evidence)</div>        \r\n          </div>\r\n    \r\n            <p>Loads an assembly from the application directory or from the global assembly cache using a partial name. The assembly is loaded into the domain of the caller using the supplied evidence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Reflection.Assembly LoadWithPartialName (string partialName, System.Security.Policy.Evidence securityEvidence);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>partialName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The display name of the assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>securityEvidence</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Evidence for loading the assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </div>\r\n                  <p>The loaded assembly. If <code>partialName</code> is not found, this method returns <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>An assembly or module was loaded twice with two different sets of evidence.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>partialName</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> Version 2.0 or later of the common language runtime is currently loaded and <code>partialName</code> was compiled with a later version.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"IMPORTANT\"><h5>Important</h5><p> The LoadWithPartialName method is obsolete and has been retained for backward compatibility. The non-obsolete alternative is <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_System_String_\" data-linktype=\"relative-path\">System.Reflection.Assembly.Load(String)</a>.  </p>\n</div>\n<p> Evidence is the set of information that constitutes input to security policy decisions, such as what permissions can be granted to code.  </p>\n<p> Applications that load assemblies with this method will be affected by upgrades of those assemblies. Therefore, do not use this method; redesign the application to use the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method or the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFrom_\" data-linktype=\"relative-path\">LoadFrom</a> method.  </p>\n<p> This method first calls <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a>. If the assembly is not found, this method returns the assembly from the global assembly cache that has the same simple name, and the highest version number.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_ReflectionOnlyLoad_System_Byte___\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_ReflectionOnlyLoad_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReflectionOnlyLoad(Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Loads the assembly from a common object file format (COFF)-based image containing an emitted assembly. The assembly is loaded into the reflection-only context of the caller&#39;s application domain.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Reflection.Assembly ReflectionOnlyLoad (byte[] rawAssembly);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rawAssembly</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A byte array that is a COFF-based image containing an emitted assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </div>\r\n                  <p>The loaded assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>rawAssembly</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>rawAssembly</code> is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> Version 2.0 or later of the common language runtime is currently loaded and <code>rawAssembly</code> was compiled with a later version.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p><code>rawAssembly</code> cannot be loaded.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You cannot execute code from an assembly loaded into the reflection-only context. To execute code, the assembly must be loaded into the execution context as well, using the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method.  </p>\n<p> The reflection-only context is no different from other contexts. Assemblies that are loaded into the context can be unloaded only by unloading the application domain.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_ReflectionOnlyLoad_System_String_\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_ReflectionOnlyLoad_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReflectionOnlyLoad(String)</div>        \r\n          </div>\r\n    \r\n            <p>Loads an assembly into the reflection-only context, given its display name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Reflection.Assembly ReflectionOnlyLoad (string assemblyString);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyString</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The display name of the assembly, as returned by the <span class=\"xref\">stem.Reflection.AssemblyName.FullName*</span> property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </div>\r\n                  <p>The loaded assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyString</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyString</code> is an empty string (&quot;&quot;).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyString</code> is not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyString</code> is found, but cannot be loaded.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyString</code> is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyString</code> was compiled with a later version.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Dependencies are not automatically loaded into the reflection-only context.  </p>\n<p> You cannot execute code from an assembly loaded into the reflection-only context. To execute code, the assembly must be loaded into the execution context as well, using the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method.  </p>\n<p> Whether certain permissions are granted or not granted to an assembly is based on evidence. The rules for assembly and security evidence merging are as follows:  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Reflecting on executable files compiled in C++ might throw a <a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a>. This is most likely caused by the C++ compiler stripping the relocation addresses or the .reloc section from your executable file. To preserve the .reloc address, specify <code>/fixed:no</code> when you are linking.  </p>\n</div>\n<p> The reflection-only context is no different from other contexts. Assemblies that are loaded into the context can be unloaded only by unloading the application domain.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_ReflectionOnlyLoadFrom_System_String_\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_ReflectionOnlyLoadFrom_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReflectionOnlyLoadFrom(String)</div>        \r\n          </div>\r\n    \r\n            <p>Loads an assembly into the reflection-only context, given its path.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Reflection.Assembly ReflectionOnlyLoadFrom (string assemblyFile);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyFile</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The path of the file that contains the manifest of the assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </div>\r\n                  <p>The loaded assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> is not found, or the module you are trying to load does not specify a file name extension.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> is found, but could not be loaded.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyFile</code> was compiled with a later version.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>A codebase that does not start with &quot;file://&quot; was specified without the required <a class=\"xref\" href=\"system.net.webpermission\" data-linktype=\"relative-path\">WebPermission</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The assembly name is longer than MAX_PATH characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> is an empty string (&quot;&quot;).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Dependencies are not automatically loaded into the reflection-only context. To automatically load dependencies, handle the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_ReflectionOnlyAssemblyResolve\" data-linktype=\"relative-path\">ReflectionOnlyAssemblyResolve</a> event and load the dependency in the event handler.  </p>\n<p> You cannot execute code from an assembly that has been loaded into the reflection-only context. To execute the code, load the assembly with the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFile_\" data-linktype=\"relative-path\">LoadFile</a> method.  </p>\n<p> The <code>assemblyFile</code> parameter must refer to a URI without escape characters. This method supplies escape characters for all invalid characters in the URI.  </p>\n<p> The path specified for <code>assemblyFile</code> is relative to the current directory. The assembly is loaded into the domain of the caller.  </p>\n<p> The reflection-only context is no different from other contexts. Assemblies that are loaded into the context can be unloaded only by unloading the application domain.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_ToString\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the full name of the assembly, also known as the display name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The full name of the assembly, or the class name if the full name of the assembly cannot be determined.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_UnsafeLoadFrom_System_String_\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_UnsafeLoadFrom_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UnsafeLoadFrom(String)</div>        \r\n          </div>\r\n    \r\n            <p>Loads an assembly into the load-from context, bypassing some security checks.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Reflection.Assembly UnsafeLoadFrom (string assemblyFile);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyFile</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name or path of the file that contains the manifest of the assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </div>\r\n                  <p>The loaded assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> is not found, or the module you are trying to load does not specify a filename extension.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>A file that was found could not be loaded.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> <code>assemblyFile</code> was compiled with a later version of the common language runtime than the version that is currently loaded.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>A codebase that does not start with &quot;file://&quot; was specified without the required <a class=\"xref\" href=\"system.net.webpermission\" data-linktype=\"relative-path\">WebPermission</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>assemblyFile</code> parameter is an empty string (&quot;&quot;).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The assembly name is longer than MAX_PATH characters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to load a local assembly that the operating system has flagged as having been loaded from the Web (for example, a temporary file that was downloaded from the Internet or intranet). Before the .NET Framework 4, such assemblies were automatically loaded into a sandboxed application domain. Starting with the .NET Framework 4, they are loaded with full trust.  </p>\n<p> As an alternative to using this method, you can apply the <a href=\"../Topic/%3CNetFx40_LegacySecurityPolicy%3E%20Element.md\" data-linktype=\"relative-path\">&amp;lt;NetFx40_LegacySecurityPolicy&amp;gt; Element</a> in your application configuration file. This causes the common language runtime to revert to the security policy of the  .NET Framework 3.5 .  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> If you use either of these solutions, you must be certain that it is safe to load <code>assemblyFile</code> with full trust.  </p>\n</div>\n<p> For a discussion of load contexts, including the load-from context, see the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFrom_System_String_\" data-linktype=\"relative-path\">LoadFrom(String)</a> method overload.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"events\">\r\n        <h2>Events\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_ModuleResolve\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ModuleResolve</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the common language runtime class loader cannot resolve a reference to an internal module of an assembly through normal means.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual event System.Reflection.ModuleResolveEventHandler ModuleResolve;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event gives the callback a chance to find and load the module itself and return it.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"operators\">\r\n        <h2>Operators\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_op_Equality_System_Reflection_Assembly_System_Reflection_Assembly_\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_op_Equality_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Equality(Assembly,Assembly)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether two <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> objects are equal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_Equality (System.Reflection.Assembly left, System.Reflection.Assembly right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The assembly to compare to <code>right</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The assembly to compare to <code>left</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>left</code> is equal to <code>right</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_op_Inequality_System_Reflection_Assembly_System_Reflection_Assembly_\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_op_Inequality_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Inequality(Assembly,Assembly)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether two <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> objects are not equal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_Inequality (System.Reflection.Assembly left, System.Reflection.Assembly right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The assembly to compare to <code>right</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The assembly to compare to <code>left</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>left</code> is not equal to <code>right</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Assembly_System_Runtime_InteropServices__Assembly_GetType\">\r\n    \r\n            <a id=\"System_Reflection_Assembly_System_Runtime_InteropServices__Assembly_GetType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_Assembly.GetType()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the type of the current instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">Type _Assembly.GetType ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>An object that represents the <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Reflection.Assembly.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Reflection.Assembly.yml\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly..ctor\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.CodeBase\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.CreateInstance\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.CreateQualifiedName\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.CustomAttributes\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.DefinedTypes\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.EntryPoint\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.Equals\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.EscapedCodeBase\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.Evidence\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.ExportedTypes\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.FullName\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.GetAssembly\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.GetCallingAssembly\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.GetCustomAttributes\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.GetCustomAttributesData\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.GetEntryAssembly\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.GetExecutingAssembly\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.GetExportedTypes\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.GetFile\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.GetFiles\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.GetLoadedModules\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.GetManifestResourceInfo\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.GetManifestResourceNames\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.GetManifestResourceStream\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.GetModule\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.GetModules\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.GetName\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.GetObjectData\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.GetReferencedAssemblies\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.GetSatelliteAssembly\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.GetType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.GetTypes\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.GlobalAssemblyCache\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.HostContext\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.ImageRuntimeVersion\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.IsDefined\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.IsDynamic\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.IsFullyTrusted\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.Load\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.LoadFile\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.LoadFrom\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.LoadModule\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.LoadWithPartialName\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.Location\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.ManifestModule\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.ModuleResolve\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.add_ModuleResolve\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.remove_ModuleResolve\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.Modules\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.op_Equality\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.op_op_Equality\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.op_op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.PermissionSet\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.ReflectionOnly\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.ReflectionOnlyLoad\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.ReflectionOnlyLoadFrom\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.SecurityRuleSet\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly._Assembly.GetType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.ToString\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Assembly.UnsafeLoadFrom\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"c8fed5c4-2086-bda6-a7d8-005359d824aa\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents an assembly, which is a reusable, versionable, and self-describing building block of a common language runtime application.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Reflection/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Reflection.Assembly\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Reflection.Assembly.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Reflection.Assembly.yml","open_to_public_contributors":true,"api_name":["System.Reflection.Assembly","System.Reflection.Assembly..ctor","System.Reflection.Assembly.CodeBase","System.Reflection.Assembly.CreateInstance","System.Reflection.Assembly.CreateQualifiedName","System.Reflection.Assembly.CustomAttributes","System.Reflection.Assembly.DefinedTypes","System.Reflection.Assembly.EntryPoint","System.Reflection.Assembly.Equals","System.Reflection.Assembly.EscapedCodeBase","System.Reflection.Assembly.Evidence","System.Reflection.Assembly.ExportedTypes","System.Reflection.Assembly.FullName","System.Reflection.Assembly.GetAssembly","System.Reflection.Assembly.GetCallingAssembly","System.Reflection.Assembly.GetCustomAttributes","System.Reflection.Assembly.GetCustomAttributesData","System.Reflection.Assembly.GetEntryAssembly","System.Reflection.Assembly.GetExecutingAssembly","System.Reflection.Assembly.GetExportedTypes","System.Reflection.Assembly.GetFile","System.Reflection.Assembly.GetFiles","System.Reflection.Assembly.GetHashCode","System.Reflection.Assembly.GetLoadedModules","System.Reflection.Assembly.GetManifestResourceInfo","System.Reflection.Assembly.GetManifestResourceNames","System.Reflection.Assembly.GetManifestResourceStream","System.Reflection.Assembly.GetModule","System.Reflection.Assembly.GetModules","System.Reflection.Assembly.GetName","System.Reflection.Assembly.GetObjectData","System.Reflection.Assembly.GetReferencedAssemblies","System.Reflection.Assembly.GetSatelliteAssembly","System.Reflection.Assembly.GetType","System.Reflection.Assembly.GetTypes","System.Reflection.Assembly.GlobalAssemblyCache","System.Reflection.Assembly.HostContext","System.Reflection.Assembly.ImageRuntimeVersion","System.Reflection.Assembly.IsDefined","System.Reflection.Assembly.IsDynamic","System.Reflection.Assembly.IsFullyTrusted","System.Reflection.Assembly.Load","System.Reflection.Assembly.LoadFile","System.Reflection.Assembly.LoadFrom","System.Reflection.Assembly.LoadModule","System.Reflection.Assembly.LoadWithPartialName","System.Reflection.Assembly.Location","System.Reflection.Assembly.ManifestModule","System.Reflection.Assembly.ModuleResolve","System.Reflection.Assembly.add_ModuleResolve","System.Reflection.Assembly.remove_ModuleResolve","System.Reflection.Assembly.Modules","System.Reflection.Assembly.op_Equality","System.Reflection.Assembly.op_op_Equality","System.Reflection.Assembly.op_Inequality","System.Reflection.Assembly.op_op_Inequality","System.Reflection.Assembly.PermissionSet","System.Reflection.Assembly.ReflectionOnly","System.Reflection.Assembly.ReflectionOnlyLoad","System.Reflection.Assembly.ReflectionOnlyLoadFrom","System.Reflection.Assembly.SecurityRuleSet","System.Reflection.Assembly._Assembly.GetType","System.Reflection.Assembly.ToString","System.Reflection.Assembly.UnsafeLoadFrom"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Reflection.Assembly","System::Reflection::Assembly","System.Reflection.Assembly.#ctor","System::Reflection::Assembly::#ctor","System.Reflection.Assembly.CodeBase","System::Reflection::Assembly::CodeBase","System.Reflection.Assembly.CreateInstance","System::Reflection::Assembly::CreateInstance","System.Reflection.Assembly.CreateQualifiedName","System::Reflection::Assembly::CreateQualifiedName","System.Reflection.Assembly.CustomAttributes","System::Reflection::Assembly::CustomAttributes","System.Reflection.Assembly.DefinedTypes","System::Reflection::Assembly::DefinedTypes","System.Reflection.Assembly.EntryPoint","System::Reflection::Assembly::EntryPoint","System.Reflection.Assembly.Equals","System::Reflection::Assembly::Equals","System.Reflection.Assembly.EscapedCodeBase","System::Reflection::Assembly::EscapedCodeBase","System.Reflection.Assembly.Evidence","System::Reflection::Assembly::Evidence","System.Reflection.Assembly.ExportedTypes","System::Reflection::Assembly::ExportedTypes","System.Reflection.Assembly.FullName","System::Reflection::Assembly::FullName","System.Reflection.Assembly.GetAssembly","System::Reflection::Assembly::GetAssembly","System.Reflection.Assembly.GetCallingAssembly","System::Reflection::Assembly::GetCallingAssembly","System.Reflection.Assembly.GetCustomAttributes","System::Reflection::Assembly::GetCustomAttributes","System.Reflection.Assembly.GetCustomAttributesData","System::Reflection::Assembly::GetCustomAttributesData","System.Reflection.Assembly.GetEntryAssembly","System::Reflection::Assembly::GetEntryAssembly","System.Reflection.Assembly.GetExecutingAssembly","System::Reflection::Assembly::GetExecutingAssembly","System.Reflection.Assembly.GetExportedTypes","System::Reflection::Assembly::GetExportedTypes","System.Reflection.Assembly.GetFile","System::Reflection::Assembly::GetFile","System.Reflection.Assembly.GetFiles","System::Reflection::Assembly::GetFiles","System.Reflection.Assembly.GetHashCode","System::Reflection::Assembly::GetHashCode","System.Reflection.Assembly.GetLoadedModules","System::Reflection::Assembly::GetLoadedModules","System.Reflection.Assembly.GetManifestResourceInfo","System::Reflection::Assembly::GetManifestResourceInfo","System.Reflection.Assembly.GetManifestResourceNames","System::Reflection::Assembly::GetManifestResourceNames","System.Reflection.Assembly.GetManifestResourceStream","System::Reflection::Assembly::GetManifestResourceStream","System.Reflection.Assembly.GetModule","System::Reflection::Assembly::GetModule","System.Reflection.Assembly.GetModules","System::Reflection::Assembly::GetModules","System.Reflection.Assembly.GetName","System::Reflection::Assembly::GetName","System.Reflection.Assembly.GetObjectData","System::Reflection::Assembly::GetObjectData","System.Reflection.Assembly.GetReferencedAssemblies","System::Reflection::Assembly::GetReferencedAssemblies","System.Reflection.Assembly.GetSatelliteAssembly","System::Reflection::Assembly::GetSatelliteAssembly","System.Reflection.Assembly.GetType","System::Reflection::Assembly::GetType","System.Reflection.Assembly.GetTypes","System::Reflection::Assembly::GetTypes","System.Reflection.Assembly.GlobalAssemblyCache","System::Reflection::Assembly::GlobalAssemblyCache","System.Reflection.Assembly.HostContext","System::Reflection::Assembly::HostContext","System.Reflection.Assembly.ImageRuntimeVersion","System::Reflection::Assembly::ImageRuntimeVersion","System.Reflection.Assembly.IsDefined","System::Reflection::Assembly::IsDefined","System.Reflection.Assembly.IsDynamic","System::Reflection::Assembly::IsDynamic","System.Reflection.Assembly.IsFullyTrusted","System::Reflection::Assembly::IsFullyTrusted","System.Reflection.Assembly.Load","System::Reflection::Assembly::Load","System.Reflection.Assembly.LoadFile","System::Reflection::Assembly::LoadFile","System.Reflection.Assembly.LoadFrom","System::Reflection::Assembly::LoadFrom","System.Reflection.Assembly.LoadModule","System::Reflection::Assembly::LoadModule","System.Reflection.Assembly.LoadWithPartialName","System::Reflection::Assembly::LoadWithPartialName","System.Reflection.Assembly.Location","System::Reflection::Assembly::Location","System.Reflection.Assembly.ManifestModule","System::Reflection::Assembly::ManifestModule","System.Reflection.Assembly.ModuleResolve","System::Reflection::Assembly::ModuleResolve","System.Reflection.Assembly.Modules","System::Reflection::Assembly::Modules","System.Reflection.Assembly.op_Equality","System::Reflection::Assembly::op_Equality","System.Reflection.Assembly.op_Inequality","System::Reflection::Assembly::op_Inequality","System.Reflection.Assembly.PermissionSet","System::Reflection::Assembly::PermissionSet","System.Reflection.Assembly.ReflectionOnly","System::Reflection::Assembly::ReflectionOnly","System.Reflection.Assembly.ReflectionOnlyLoad","System::Reflection::Assembly::ReflectionOnlyLoad","System.Reflection.Assembly.ReflectionOnlyLoadFrom","System::Reflection::Assembly::ReflectionOnlyLoadFrom","System.Reflection.Assembly.SecurityRuleSet","System::Reflection::Assembly::SecurityRuleSet","System.Reflection.Assembly.System#Runtime#InteropServices#_Assembly#GetType","System::Reflection::Assembly::System#Runtime#InteropServices#_Assembly#GetType","System.Reflection.Assembly.ToString","System::Reflection::Assembly::ToString","System.Reflection.Assembly.UnsafeLoadFrom","System::Reflection::Assembly::UnsafeLoadFrom"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"c8fed5c4-2086-bda6-a7d8-005359d824aa","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Reflection/Assembly.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Assembly class | Microsoft Docs","_op_ogTitle":"Assembly class","description":"Represents an assembly, which is a reusable, versionable, and self-describing building block of a common language runtime application.\n","toc_asset_id":"_splitted/System.Reflection/toc.json","toc_rel":"_splitted/System.Reflection/toc.json","source_url":"","ms.assetid":"System.Reflection.Assembly","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.reflection.assembly","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.reflection.assembly","fileRelativePath":"System.Reflection.Assembly.html"},"themesRelativePathToOutputRoot":"_themes/"}