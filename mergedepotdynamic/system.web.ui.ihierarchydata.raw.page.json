{"content":"    \r\n    <h1 id=\"System_Web_UI_IHierarchyData\">\r\n      <span class=\"lang-csharp\">IHierarchyData</span>\r\n        Interface\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Exposes a node of a hierarchical data structure, including the node object and some properties that describe characteristics of the node. Objects that implement the IHierarchyData interface can be contained in <a class=\"xref\" href=\"system.web.ui.ihierarchicalenumerable\" data-linktype=\"relative-path\">IHierarchicalEnumerable</a> collections, and are used by ASP.NET site navigation and data source controls.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public interface IHierarchyData</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The IHierarchyData interface is implemented by classes that represent nodes of a hierarchical structure, and track the hierarchical relationships to their parent and child nodes. Classes that implement the IHierarchyData interface can be contained in collections that implement the <a class=\"xref\" href=\"system.web.ui.ihierarchicalenumerable\" data-linktype=\"relative-path\">IHierarchicalEnumerable</a> interface.</p>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_IHierarchyData_HasChildren\" data-linktype=\"self-bookmark\">HasChildren</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether the hierarchical data node that the <a class=\"xref\" href=\"system.web.ui.ihierarchydata\" data-linktype=\"relative-path\">IHierarchyData</a> object represents has any child nodes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_IHierarchyData_Item\" data-linktype=\"self-bookmark\">Item</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the hierarchical data node that the <a class=\"xref\" href=\"system.web.ui.ihierarchydata\" data-linktype=\"relative-path\">IHierarchyData</a> object represents.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_IHierarchyData_Path\" data-linktype=\"self-bookmark\">Path</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the hierarchical path of the node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_IHierarchyData_Type\" data-linktype=\"self-bookmark\">Type</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the name of the type of <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> contained in the <span class=\"xref\">stem.Web.UI.IHierarchyData.Item*</span> property.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_IHierarchyData_GetChildren\" data-linktype=\"self-bookmark\">GetChildren()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an enumeration object that represents all the child nodes of the current hierarchical node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_IHierarchyData_GetParent\" data-linktype=\"self-bookmark\">GetParent()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an <a class=\"xref\" href=\"system.web.ui.ihierarchydata\" data-linktype=\"relative-path\">IHierarchyData</a> object that represents the parent node of the current hierarchical node.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_IHierarchyData_HasChildren\">\r\n    \r\n            <a id=\"System_Web_UI_IHierarchyData_HasChildren_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HasChildren</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether the hierarchical data node that the <a class=\"xref\" href=\"system.web.ui.ihierarchydata\" data-linktype=\"relative-path\">IHierarchyData</a> object represents has any child nodes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool HasChildren { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current node has child nodes; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The HasChildren property is a convenience property that enables callers to avoid checking the return value of the <a class=\"xref\" href=\"system.web.ui.ihierarchydata#System_Web_UI_IHierarchyData_GetChildren_\" data-linktype=\"relative-path\">GetChildren</a> method for <code>null</code>. If the HasChildren property returns <code>true</code>, call the <a class=\"xref\" href=\"system.web.ui.ihierarchydata#System_Web_UI_IHierarchyData_GetChildren_\" data-linktype=\"relative-path\">GetChildren</a> method to retrieve an <a class=\"xref\" href=\"system.web.ui.ihierarchicalenumerable\" data-linktype=\"relative-path\">IHierarchicalEnumerable</a> collection of child nodes.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how an ASP.NET hierarchical data-bound control uses an <a class=\"xref\" href=\"system.web.ui.ihierarchydata\" data-linktype=\"relative-path\">IHierarchyData</a> object in a recursive data-binding method. The items in an <a class=\"xref\" href=\"system.web.ui.ihierarchicalenumerable\" data-linktype=\"relative-path\">IHierarchicalEnumerable</a> collection are enumerated, and for each an <a class=\"xref\" href=\"system.web.ui.ihierarchydata\" data-linktype=\"relative-path\">IHierarchyData</a> object is retrieved using the <a class=\"xref\" href=\"system.web.ui.ihierarchicalenumerable#System_Web_UI_IHierarchicalEnumerable_GetHierarchyData_\" data-linktype=\"relative-path\">GetHierarchyData</a> method. Finally, the HasChildren property is checked to determine whether to recurse. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.web.ui.webcontrols.hierarchicaldataboundcontrol\" data-linktype=\"relative-path\">HierarchicalDataBoundControl</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"Samples.AspNet.GeneologyTree#5\">        Private Sub RecurseDataBindInternal(ByVal node As TreeNode, _\n            ByVal enumerable As IHierarchicalEnumerable, _\n            ByVal depth As Integer)\n\n            Dim item As Object\n            For Each item In enumerable\n\n                Dim data As IHierarchyData = enumerable.GetHierarchyData(item)\n\n                If Not data Is Nothing Then\n\n                    &#39; Create an object that represents the bound data\n                    &#39; to the control.\n                    Dim newNode As New TreeNode()\n                    Dim rvnode As New RootViewNode()\n\n                    rvnode.Node = newNode\n                    rvnode.Depth = depth\n\n                    &#39; The dataItem is not just a string, but potentially\n                    &#39; an XML node or some other container. \n                    &#39; If DataTextField is set, use it to determine which \n                    &#39; field to render. Otherwise, use the first field.                    \n                    If DataTextField.Length &gt; 0 Then\n                        newNode.Text = DataBinder.GetPropertyValue _\n                        (data, DataTextField, Nothing)\n                    Else\n                        Dim props As PropertyDescriptorCollection = _\n                        TypeDescriptor.GetProperties(data)\n\n                        &#39; Set the &quot;default&quot; value of the node.\n                        newNode.Text = String.Empty\n\n                        &#39; Set the true data-bound value of the TextBox,\n                        &#39; if possible.\n                        If props.Count &gt;= 1 Then\n                            If Not props(0).GetValue(data) Is Nothing Then\n                                newNode.Text = props(0).GetValue(data).ToString()\n                            End If\n                        End If\n                    End If\n\n                    Nodes.Add(rvnode)\n\n                    If data.HasChildren Then\n                        Dim newEnumerable As IHierarchicalEnumerable = _\n                            data.GetChildren()\n                        If Not (newEnumerable Is Nothing) Then\n                            RecurseDataBindInternal(newNode, _\n                            newEnumerable, depth + 1)\n                        End If\n                    End If\n\n                    If MaxDepth &lt; depth Then\n                        MaxDepth = depth\n                    End If\n                End If\n            Next item\n\n        End Sub &#39;RecurseDataBindInternal\n</code></pre><pre><code class=\"lang-cs\" name=\"Samples.AspNet.GeneologyTree#5\">        private void RecurseDataBindInternal(TreeNode node, \n            IHierarchicalEnumerable enumerable, int depth) {                                    \n                        \n            foreach(object item in enumerable) {\n                IHierarchyData data = enumerable.GetHierarchyData(item);\n\n                if (null != data) {\n                    // Create an object that represents the bound data\n                    // to the control.\n                    TreeNode newNode = new TreeNode();\n                    RootViewNode rvnode = new RootViewNode();\n                    \n                    rvnode.Node = newNode;\n                    rvnode.Depth = depth;\n\n                    // The dataItem is not just a string, but potentially\n                    // an XML node or some other container. \n                    // If DataTextField is set, use it to determine which \n                    // field to render. Otherwise, use the first field.                    \n                    if (DataTextField.Length &gt; 0) {\n                        newNode.Text = DataBinder.GetPropertyValue\n                            (data, DataTextField, null);\n                    }\n                    else {\n                        PropertyDescriptorCollection props = \n                            TypeDescriptor.GetProperties(data);\n\n                        // Set the &quot;default&quot; value of the node.\n                        newNode.Text = String.Empty;                        \n\n                        // Set the true data-bound value of the TextBox,\n                        // if possible.\n                        if (props.Count &gt;= 1) {                        \n                            if (null != props[0].GetValue(data)) {\n                                newNode.Text = \n                                    props[0].GetValue(data).ToString();\n                            } \n                        }\n                    }\n\n                    Nodes.Add(rvnode);                    \n                    \n                    if (data.HasChildren) {\n                        IHierarchicalEnumerable newEnumerable = \n                            data.GetChildren();\n                        if (newEnumerable != null) {                            \n                            RecurseDataBindInternal(newNode, \n                                newEnumerable, depth+1 );\n                        }\n                    }\n                    \n                    if ( _maxDepth &lt; depth) _maxDepth = depth;\n                    \n                }\n            }\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_IHierarchyData_Item\">\r\n    \r\n            <a id=\"System_Web_UI_IHierarchyData_Item_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Item</div>        \r\n          </div>\r\n    \r\n            <p>Gets the hierarchical data node that the <a class=\"xref\" href=\"system.web.ui.ihierarchydata\" data-linktype=\"relative-path\">IHierarchyData</a> object represents.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object Item { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> hierarchical data node object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>While many classes that represent hierarchical data nodes, such as the <a class=\"xref\" href=\"system.web.sitemapnode\" data-linktype=\"relative-path\">SiteMapNode</a> class, implement the <a class=\"xref\" href=\"system.web.ui.ihierarchydata\" data-linktype=\"relative-path\">IHierarchyData</a> interface directly, other classes only act as a wrapper for a class that does not implement the interface. The Item property is provided for these design situations, when business objects are functionally equivalent to an <a class=\"xref\" href=\"system.web.ui.ihierarchydata\" data-linktype=\"relative-path\">IHierarchyData</a> object but cannot be redesigned easily.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to access <a class=\"xref\" href=\"system.web.ui.ihierarchydata\" data-linktype=\"relative-path\">IHierarchyData</a> properties, check the type of an <a class=\"xref\" href=\"system.web.ui.ihierarchydata\" data-linktype=\"relative-path\">IHierarchyData</a> object using the <a class=\"xref\" href=\"system.web.ui.ihierarchydata#System_Web_UI_IHierarchyData_Type_\" data-linktype=\"relative-path\">Type</a> property, and cast the object to perform more type-specific operations. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.web.ui.ihierarchydata\" data-linktype=\"relative-path\">IHierarchyData</a> interface.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Web.UI.IHierarchyData_1#2\">    // Print out the the current data node, then iterate through its\n    // children and do the same.\n    private void PrintFullChildNodeInfo(IHierarchyData node)\n    {\n        string whitespace = &quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;;\n        string br = &quot;&lt;BR&gt;&quot;;\n\n        Response.Write(node.ToString() + br);\n        Response.Write(whitespace + node.Path + br);\n\n        // Check for specific types and perform extended functions.\n        if (node.Type == &quot;SiteMapNode&quot;)\n        {\n            // Because SiteMapNode implements the IHierarchyData interface,\n            // the IHierarchyData object can be cast directly as a SiteMapNode,\n            // rather than accessing the Item property for the object that\n            // the Type property identifies.\n            SiteMapNode siteNode = node.Item as SiteMapNode;\n            Response.Write(whitespace + siteNode.Url + br);\n            Response.Write(whitespace + siteNode.Description + br);\n        }\n        else if (node.Type == &quot;SomeBusinessObject&quot;)\n        {\n            // If the IHierarchyData instance is a wrapper class on a business\n            // object of some kind, you can retrieve the business object by using\n            // the IHierarchyData.Item property.\n            //          SomeBusinessObject busObj = node.Item as SomeBusinessObject;\n        }\n\n        if (node.HasChildren)\n        {\n            IEnumerator children = ((IHierarchicalEnumerable)node.GetChildren()).GetEnumerator();\n\n            while (children.MoveNext())\n            {\n                // Print out SiteMapNode Titles recursively.\n                IHierarchyData hierarchicalNode = node.GetChildren().GetHierarchyData(children.Current);\n                PrintFullChildNodeInfo(hierarchicalNode);\n            }\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Web.UI.IHierarchyData_1#2\">    &#39; Print out the the current data node, then iterate through its\n    &#39; children and do the same.\n\n    Private Sub PrintFullChildNodeInfo(ByVal node As IHierarchyData)\n        Dim whitespace As String = &quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;\n        Dim br As String = &quot;&lt;BR&gt;&quot;\n\n        Response.Write(Convert.ToString(node) &amp; br)\n        Response.Write(whitespace &amp; node.Path &amp; br)\n\n        &#39; Check for specific types and perform extended functions.\n        If node.Type = &quot;SiteMapNode&quot; Then\n            &#39; Because SiteMapNode implements the IHierarchyData interface,\n            &#39; the IHierarchyData object can be cast directly as a SiteMapNode,\n            &#39; rather than accessing the Item property for the object that\n            &#39; the Type property identifies.\n            Dim siteNode As SiteMapNode = CType(node.Item, SiteMapNode)\n            Response.Write(whitespace &amp; siteNode.Url &amp; br)\n            Response.Write(whitespace &amp; siteNode.Description &amp; br)\n\n        ElseIf node.Type = &quot;SomeBusinessObject Then&quot; Then\n            &#39; If the IHierarchyData instance is a wrapper class on a business\n            &#39; object of some kind, you can retrieve the business object by using\n            &#39; the IHierarchyData.Item property.\n            &#39;          SomeBusinessObject busObj = node.Item as SomeBusinessObject;\n        End If\n\n        If node.HasChildren Then\n            Dim children As IEnumerator = CType(node.GetChildren().GetEnumerator(), IHierarchicalEnumerable)\n            While children.MoveNext()\n                &#39; Print out SiteMapNode Titles recursively.\n                Dim hierarchicalNode As IHierarchyData = node.GetChildren().GetHierarchyData(children.Current)\n                PrintFullChildNodeInfo(hierarchicalNode)\n            End While\n        End If\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_IHierarchyData_Path\">\r\n    \r\n            <a id=\"System_Web_UI_IHierarchyData_Path_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Path</div>        \r\n          </div>\r\n    \r\n            <p>Gets the hierarchical path of the node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Path { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that identifies the hierarchical path relative to the current node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Path property can be passed to the <a class=\"xref\" href=\"system.web.ui.hierarchicaldatasourcecontrol#System_Web_UI_HierarchicalDataSourceControl_GetHierarchicalView_\" data-linktype=\"relative-path\">GetHierarchicalView</a> method to retrieve the <a class=\"xref\" href=\"system.web.ui.hierarchicaldatasourceview\" data-linktype=\"relative-path\">HierarchicalDataSourceView</a> object that corresponds to the node identified by Path.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> The Path property should not contain any sensitive information about the host environment, because it might be rendered to the client in a data-bound control.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to implement the Path property in a class that implements the <a class=\"xref\" href=\"system.web.ui.ihierarchydata\" data-linktype=\"relative-path\">IHierarchyData</a> interface. The <code>FileSystemHierarchyData</code> class wraps a <a class=\"xref\" href=\"system.io.filesysteminfo\" data-linktype=\"relative-path\">FileSystemInfo</a> object, and the Path property implementation returns its file system path. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.web.ui.ihierarchydata\" data-linktype=\"relative-path\">IHierarchyData</a> interface and the <a class=\"xref\" href=\"system.web.ui.hierarchicaldatasourcecontrol\" data-linktype=\"relative-path\">HierarchicalDataSourceControl</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"Urtue.Samples.Alexkr.FileSystemDataSource_1#7\">        // DirectoryInfo returns the OriginalPath, while FileInfo returns\n        // a fully qualified path.\n        public string Path\n        {\n            get\n            {\n                return fileSystemObject.ToString();\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"Urtue.Samples.Alexkr.FileSystemDataSource_1#7\">        &#39; DirectoryInfo returns the OriginalPath, while FileInfo returns\n        &#39; a fully qualified path.\n\n        Public Overridable ReadOnly Property Path() As String _\n         Implements IHierarchyData.Path\n            Get\n                Return fileSystemObject.ToString()\n            End Get\n        End Property\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_IHierarchyData_Type\">\r\n    \r\n            <a id=\"System_Web_UI_IHierarchyData_Type_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Type</div>        \r\n          </div>\r\n    \r\n            <p>Gets the name of the type of <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> contained in the <span class=\"xref\">stem.Web.UI.IHierarchyData.Item*</span> property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Type { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the type of object that the <a class=\"xref\" href=\"system.web.ui.ihierarchydata\" data-linktype=\"relative-path\">IHierarchyData</a> object represents.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Type property does not return the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">System.Type</a> of the object represented in an <a class=\"xref\" href=\"system.web.ui.ihierarchydata\" data-linktype=\"relative-path\">IHierarchyData</a> object. It returns a name used by data-bound controls to differentiate between items in a hierarchy that have different bindable properties.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to write the basic <a class=\"xref\" href=\"system.web.ui.ihierarchydata\" data-linktype=\"relative-path\">IHierarchyData</a> properties to an <a class=\"xref\" href=\"system.web.httpresponse\" data-linktype=\"relative-path\">HttpResponse</a> stream, then check the type of an <a class=\"xref\" href=\"system.web.ui.ihierarchydata\" data-linktype=\"relative-path\">IHierarchyData</a> object using the Type property and cast the object to perform more type-specific operations. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.web.ui.ihierarchydata\" data-linktype=\"relative-path\">IHierarchyData</a> interface.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Web.UI.IHierarchyData_1#2\">    // Print out the the current data node, then iterate through its\n    // children and do the same.\n    private void PrintFullChildNodeInfo(IHierarchyData node)\n    {\n        string whitespace = &quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;;\n        string br = &quot;&lt;BR&gt;&quot;;\n\n        Response.Write(node.ToString() + br);\n        Response.Write(whitespace + node.Path + br);\n\n        // Check for specific types and perform extended functions.\n        if (node.Type == &quot;SiteMapNode&quot;)\n        {\n            // Because SiteMapNode implements the IHierarchyData interface,\n            // the IHierarchyData object can be cast directly as a SiteMapNode,\n            // rather than accessing the Item property for the object that\n            // the Type property identifies.\n            SiteMapNode siteNode = node.Item as SiteMapNode;\n            Response.Write(whitespace + siteNode.Url + br);\n            Response.Write(whitespace + siteNode.Description + br);\n        }\n        else if (node.Type == &quot;SomeBusinessObject&quot;)\n        {\n            // If the IHierarchyData instance is a wrapper class on a business\n            // object of some kind, you can retrieve the business object by using\n            // the IHierarchyData.Item property.\n            //          SomeBusinessObject busObj = node.Item as SomeBusinessObject;\n        }\n\n        if (node.HasChildren)\n        {\n            IEnumerator children = ((IHierarchicalEnumerable)node.GetChildren()).GetEnumerator();\n\n            while (children.MoveNext())\n            {\n                // Print out SiteMapNode Titles recursively.\n                IHierarchyData hierarchicalNode = node.GetChildren().GetHierarchyData(children.Current);\n                PrintFullChildNodeInfo(hierarchicalNode);\n            }\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Web.UI.IHierarchyData_1#2\">    &#39; Print out the the current data node, then iterate through its\n    &#39; children and do the same.\n\n    Private Sub PrintFullChildNodeInfo(ByVal node As IHierarchyData)\n        Dim whitespace As String = &quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;\n        Dim br As String = &quot;&lt;BR&gt;&quot;\n\n        Response.Write(Convert.ToString(node) &amp; br)\n        Response.Write(whitespace &amp; node.Path &amp; br)\n\n        &#39; Check for specific types and perform extended functions.\n        If node.Type = &quot;SiteMapNode&quot; Then\n            &#39; Because SiteMapNode implements the IHierarchyData interface,\n            &#39; the IHierarchyData object can be cast directly as a SiteMapNode,\n            &#39; rather than accessing the Item property for the object that\n            &#39; the Type property identifies.\n            Dim siteNode As SiteMapNode = CType(node.Item, SiteMapNode)\n            Response.Write(whitespace &amp; siteNode.Url &amp; br)\n            Response.Write(whitespace &amp; siteNode.Description &amp; br)\n\n        ElseIf node.Type = &quot;SomeBusinessObject Then&quot; Then\n            &#39; If the IHierarchyData instance is a wrapper class on a business\n            &#39; object of some kind, you can retrieve the business object by using\n            &#39; the IHierarchyData.Item property.\n            &#39;          SomeBusinessObject busObj = node.Item as SomeBusinessObject;\n        End If\n\n        If node.HasChildren Then\n            Dim children As IEnumerator = CType(node.GetChildren().GetEnumerator(), IHierarchicalEnumerable)\n            While children.MoveNext()\n                &#39; Print out SiteMapNode Titles recursively.\n                Dim hierarchicalNode As IHierarchyData = node.GetChildren().GetHierarchyData(children.Current)\n                PrintFullChildNodeInfo(hierarchicalNode)\n            End While\n        End If\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_IHierarchyData_GetChildren\">\r\n    \r\n            <a id=\"System_Web_UI_IHierarchyData_GetChildren_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetChildren()</div>        \r\n          </div>\r\n    \r\n            <p>Gets an enumeration object that represents all the child nodes of the current hierarchical node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Web.UI.IHierarchicalEnumerable GetChildren ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.ihierarchicalenumerable\" data-linktype=\"relative-path\">IHierarchicalEnumerable</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.web.ui.ihierarchicalenumerable\" data-linktype=\"relative-path\">IHierarchicalEnumerable</a> collection of child nodes of the current hierarchical node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can use the <a class=\"xref\" href=\"system.web.ui.ihierarchydata#System_Web_UI_IHierarchyData_HasChildren_\" data-linktype=\"relative-path\">HasChildren</a> property to determine whether the <a class=\"xref\" href=\"system.web.ui.ihierarchydata\" data-linktype=\"relative-path\">IHierarchyData</a> node has child nodes.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to check the <a class=\"xref\" href=\"system.web.ui.ihierarchydata#System_Web_UI_IHierarchyData_HasChildren_\" data-linktype=\"relative-path\">HasChildren</a> property to determine whether the current hierarchical data node has child nodes, and retrieve them using the GetChildren method. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.web.ui.ihierarchydata\" data-linktype=\"relative-path\">IHierarchyData</a> interface.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Web.UI.IHierarchyData_1#2\">    // Print out the the current data node, then iterate through its\n    // children and do the same.\n    private void PrintFullChildNodeInfo(IHierarchyData node)\n    {\n        string whitespace = &quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;;\n        string br = &quot;&lt;BR&gt;&quot;;\n\n        Response.Write(node.ToString() + br);\n        Response.Write(whitespace + node.Path + br);\n\n        // Check for specific types and perform extended functions.\n        if (node.Type == &quot;SiteMapNode&quot;)\n        {\n            // Because SiteMapNode implements the IHierarchyData interface,\n            // the IHierarchyData object can be cast directly as a SiteMapNode,\n            // rather than accessing the Item property for the object that\n            // the Type property identifies.\n            SiteMapNode siteNode = node.Item as SiteMapNode;\n            Response.Write(whitespace + siteNode.Url + br);\n            Response.Write(whitespace + siteNode.Description + br);\n        }\n        else if (node.Type == &quot;SomeBusinessObject&quot;)\n        {\n            // If the IHierarchyData instance is a wrapper class on a business\n            // object of some kind, you can retrieve the business object by using\n            // the IHierarchyData.Item property.\n            //          SomeBusinessObject busObj = node.Item as SomeBusinessObject;\n        }\n\n        if (node.HasChildren)\n        {\n            IEnumerator children = ((IHierarchicalEnumerable)node.GetChildren()).GetEnumerator();\n\n            while (children.MoveNext())\n            {\n                // Print out SiteMapNode Titles recursively.\n                IHierarchyData hierarchicalNode = node.GetChildren().GetHierarchyData(children.Current);\n                PrintFullChildNodeInfo(hierarchicalNode);\n            }\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Web.UI.IHierarchyData_1#2\">    &#39; Print out the the current data node, then iterate through its\n    &#39; children and do the same.\n\n    Private Sub PrintFullChildNodeInfo(ByVal node As IHierarchyData)\n        Dim whitespace As String = &quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;\n        Dim br As String = &quot;&lt;BR&gt;&quot;\n\n        Response.Write(Convert.ToString(node) &amp; br)\n        Response.Write(whitespace &amp; node.Path &amp; br)\n\n        &#39; Check for specific types and perform extended functions.\n        If node.Type = &quot;SiteMapNode&quot; Then\n            &#39; Because SiteMapNode implements the IHierarchyData interface,\n            &#39; the IHierarchyData object can be cast directly as a SiteMapNode,\n            &#39; rather than accessing the Item property for the object that\n            &#39; the Type property identifies.\n            Dim siteNode As SiteMapNode = CType(node.Item, SiteMapNode)\n            Response.Write(whitespace &amp; siteNode.Url &amp; br)\n            Response.Write(whitespace &amp; siteNode.Description &amp; br)\n\n        ElseIf node.Type = &quot;SomeBusinessObject Then&quot; Then\n            &#39; If the IHierarchyData instance is a wrapper class on a business\n            &#39; object of some kind, you can retrieve the business object by using\n            &#39; the IHierarchyData.Item property.\n            &#39;          SomeBusinessObject busObj = node.Item as SomeBusinessObject;\n        End If\n\n        If node.HasChildren Then\n            Dim children As IEnumerator = CType(node.GetChildren().GetEnumerator(), IHierarchicalEnumerable)\n            While children.MoveNext()\n                &#39; Print out SiteMapNode Titles recursively.\n                Dim hierarchicalNode As IHierarchyData = node.GetChildren().GetHierarchyData(children.Current)\n                PrintFullChildNodeInfo(hierarchicalNode)\n            End While\n        End If\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_IHierarchyData_GetParent\">\r\n    \r\n            <a id=\"System_Web_UI_IHierarchyData_GetParent_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetParent()</div>        \r\n          </div>\r\n    \r\n            <p>Gets an <a class=\"xref\" href=\"system.web.ui.ihierarchydata\" data-linktype=\"relative-path\">IHierarchyData</a> object that represents the parent node of the current hierarchical node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Web.UI.IHierarchyData GetParent ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.ihierarchydata\" data-linktype=\"relative-path\">IHierarchyData</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.web.ui.ihierarchydata\" data-linktype=\"relative-path\">IHierarchyData</a> object that represents the parent node of the current hierarchical node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.web.ui.ihierarchydata\" data-linktype=\"relative-path\">IHierarchyData</a> interface does not define a HasParent convenience property, so callers must check the return value of the GetParent method for <code>null</code> to determine whether the current <a class=\"xref\" href=\"system.web.ui.ihierarchydata\" data-linktype=\"relative-path\">IHierarchyData</a> node is the root node of the hierarchical data structure to which the node belongs.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to implement the GetParent method in a class that implements the <a class=\"xref\" href=\"system.web.ui.ihierarchydata\" data-linktype=\"relative-path\">IHierarchyData</a> interface. The <code>FileSystemHierarchyData</code> class wraps a <a class=\"xref\" href=\"system.io.filesysteminfo\" data-linktype=\"relative-path\">FileSystemInfo</a> object, and the GetParent method implementation checks the type of the <a class=\"xref\" href=\"system.io.filesysteminfo\" data-linktype=\"relative-path\">FileSystemInfo</a> object, and returns the appropriate parent object based on the type. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.web.ui.ihierarchydata\" data-linktype=\"relative-path\">IHierarchyData</a> interface and the <a class=\"xref\" href=\"system.web.ui.hierarchicaldatasourcecontrol\" data-linktype=\"relative-path\">HierarchicalDataSourceControl</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"Urtue.Samples.Alexkr.FileSystemDataSource_1#10\">        public IHierarchicalEnumerable GetChildren()\n        {\n            FileSystemHierarchicalEnumerable children =\n                new FileSystemHierarchicalEnumerable();\n\n            if (typeof(DirectoryInfo) == fileSystemObject.GetType())\n            {\n                DirectoryInfo temp = (DirectoryInfo)fileSystemObject;\n                foreach (FileSystemInfo fsi in temp.GetFileSystemInfos())\n                {\n                    children.Add(new FileSystemHierarchyData(fsi));\n                }\n            }\n            return children;\n        }\n\n        public IHierarchyData GetParent()\n        {\n            FileSystemHierarchicalEnumerable parentContainer =\n                new FileSystemHierarchicalEnumerable();\n\n            if (typeof(DirectoryInfo) == fileSystemObject.GetType())\n            {\n                DirectoryInfo temp = (DirectoryInfo)fileSystemObject;\n                return new FileSystemHierarchyData(temp.Parent);\n            }\n            else if (typeof(FileInfo) == fileSystemObject.GetType())\n            {\n                FileInfo temp = (FileInfo)fileSystemObject;\n                return new FileSystemHierarchyData(temp.Directory);\n            }\n            // If FileSystemObj is any other kind of FileSystemInfo, ignore it.\n            return null;\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"Urtue.Samples.Alexkr.FileSystemDataSource_1#10\">        Public Overridable Function GetChildren() _\n            As IHierarchicalEnumerable _\n            Implements IHierarchyData.GetChildren\n\n            Dim children As New FileSystemHierarchicalEnumerable()\n\n            If GetType(DirectoryInfo) Is fileSystemObject.GetType() Then\n                Dim temp As DirectoryInfo = _\n                    CType(fileSystemObject, DirectoryInfo)\n                Dim fsi As FileSystemInfo\n                For Each fsi In temp.GetFileSystemInfos()\n                    children.Add(New FileSystemHierarchyData(fsi))\n                Next fsi\n            End If\n            Return children\n        End Function &#39;GetChildren\n\n\n        Public Overridable Function GetParent() As IHierarchyData _\n         Implements IHierarchyData.GetParent\n            Dim parentContainer As New FileSystemHierarchicalEnumerable()\n\n            If GetType(DirectoryInfo) Is fileSystemObject.GetType() Then\n                Dim temp As DirectoryInfo = _\n                    CType(fileSystemObject, DirectoryInfo)\n                Return New FileSystemHierarchyData(temp.Parent)\n            ElseIf GetType(FileInfo) Is fileSystemObject.GetType() Then\n                Dim temp As FileInfo = CType(fileSystemObject, FileInfo)\n                Return New FileSystemHierarchyData(temp.Directory)\n            End If\n            &#39; If FileSystemObj is any other kind of FileSystemInfo, ignore it.\n            Return Nothing\n        End Function &#39;GetParent\n    End Class &#39;FileSystemHierarchyData\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Web.UI.IHierarchyData.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Web.UI.IHierarchyData.yml\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.IHierarchyData\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.IHierarchyData.GetChildren\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.IHierarchyData.GetParent\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.IHierarchyData.HasChildren\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.IHierarchyData.Item\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.IHierarchyData.Path\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.IHierarchyData.Type\">\r\n<meta name=\"APILocation\" content=\"System.Web.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"c69e512c-0089-af24-c17a-65ca56e9f15d\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\o2y0\\s\\fulldocset\\xml\\System.Web.UI\\IHierarchyData.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Exposes a node of a hierarchical data structure, including the node object and some properties that describe characteristics of the node. Objects that implement the IHierarchyData interface can be coâ€¦\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Web.UI/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Web.UI.IHierarchyData\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Web.UI.IHierarchyData.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Web.UI.IHierarchyData.yml","open_to_public_contributors":true,"api_name":["System.Web.UI.IHierarchyData","System.Web.UI.IHierarchyData.GetChildren","System.Web.UI.IHierarchyData.GetParent","System.Web.UI.IHierarchyData.HasChildren","System.Web.UI.IHierarchyData.Item","System.Web.UI.IHierarchyData.Path","System.Web.UI.IHierarchyData.Type"],"api_location":["System.Web.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Web.UI.IHierarchyData","System::Web::UI::IHierarchyData","System.Web.UI.IHierarchyData.GetChildren","System::Web::UI::IHierarchyData::GetChildren","System.Web.UI.IHierarchyData.GetParent","System::Web::UI::IHierarchyData::GetParent","System.Web.UI.IHierarchyData.HasChildren","System::Web::UI::IHierarchyData::HasChildren","System.Web.UI.IHierarchyData.Item","System::Web::UI::IHierarchyData::Item","System.Web.UI.IHierarchyData.Path","System::Web::UI::IHierarchyData::Path","System.Web.UI.IHierarchyData.Type","System::Web::UI::IHierarchyData::Type"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"c69e512c-0089-af24-c17a-65ca56e9f15d","original_ecmaxml_local_path":"W:\\o2y0\\s\\fulldocset\\xml\\System.Web.UI\\IHierarchyData.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Web.UI/IHierarchyData.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IHierarchyData interface | Microsoft Docs","_op_ogTitle":"IHierarchyData interface","description":"Exposes a node of a hierarchical data structure, including the node object and some properties that describe characteristics of the node. Objects that implement the IHierarchyData interface can be coâ€¦","toc_asset_id":"_splitted/System.Web.UI/toc.json","toc_rel":"_splitted/System.Web.UI/toc.json","source_url":"","ms.assetid":"System.Web.UI.IHierarchyData","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.web.ui.ihierarchydata","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.web.ui.ihierarchydata","fileRelativePath":"System.Web.UI.IHierarchyData.html"},"themesRelativePathToOutputRoot":"_themes/"}