{"content":"    \r\n    <h1 id=\"System_ValueType\">\r\n      <span class=\"lang-csharp\">ValueType</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides the base class for value types.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic abstract class ValueType</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">ValueType</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>ValueType overrides the virtual methods from <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> with more appropriate implementations for value types. See also <a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a>, which inherits from ValueType.  </p>\n<p> Data types are separated into value types and reference types. Value types are either stack-allocated or allocated inline in a structure. Reference types are heap-allocated. Both reference and value types are derived from the ultimate base class <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>. In cases where it is necessary for a value type to behave like an object, a wrapper that makes the value type look like a reference object is allocated on the heap, and the value type&#39;s value is copied into it. The wrapper is marked so the system knows that it contains a value type. This process is known as boxing, and the reverse process is known as unboxing. Boxing and unboxing allow any type to be treated as an object.  </p>\n<p> Although ValueType is the implicit base class for value types, you cannot create a class that inherits from ValueType directly. Instead, individual compilers provide a language keyword or construct (such as <code>struct</code> in C# and <code>Structure</code>â€¦<code>End Structure</code> in Visual Basic) to support the creation of value types.  </p>\n<p> Aside from serving as the base class for value types in the .NET Framework, the ValueType structure is generally not used directly in code. However, it can be used as a parameter in method calls to restrict possible arguments to value types instead of all objects, or to permit a method to handle a number of different value types. The following example illustrates how ValueType prevents reference types from being passed to methods. It defines a class named <code>Utility</code> that contains four methods: <code>IsNumeric</code>, which indicates whether its argument is a number; <code>IsInteger</code>, which indicates whether its argument is an integer; <code>IsFloat</code>, which indicates whether its argument is a floating-point number; and <code>Compare</code>, which indicates the relationship between two numeric values. In each case, the method parameters are of type ValueType, and reference types are prevented from being passed to the methods.  </p>\n<pre><code class=\"lang-cs\" name=\"System.ValueType.Structure#1\">using System;\nusing System.Numerics;\n\n\npublic class Utility\n{\n   public enum NumericRelationship {\n      GreaterThan = 1, \n      EqualTo = 0,\n      LessThan = -1\n   };\n   \n   public static NumericRelationship Compare(ValueType value1, ValueType value2)\n   {\n      if (! IsNumeric(value1)) \n         throw new ArgumentException(&quot;value1 is not a number.&quot;);\n      else if (! IsNumeric(value2))\n         throw new ArgumentException(&quot;value2 is not a number.&quot;);\n\n      // Use BigInteger as common integral type\n      if (IsInteger(value1) &amp;&amp; IsInteger(value2)) {\n         BigInteger bigint1 = (BigInteger) value1;\n         BigInteger bigint2 = (BigInteger) value2;\n         return (NumericRelationship) BigInteger.Compare(bigint1, bigint2);\n      }\n      // At least one value is floating point; use Double.\n      else {\n         Double dbl1 = 0;\n         Double dbl2 = 0;\n         try {\n            dbl1 = Convert.ToDouble(value1);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;value1 is outside the range of a Double.&quot;);\n         }\n         try {\n            dbl2 = Convert.ToDouble(value2);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;value2 is outside the range of a Double.&quot;);\n         }\n         return (NumericRelationship) dbl1.CompareTo(dbl2);\n      }\n   }\n   \n   public static bool IsInteger(ValueType value)\n   {         \n      return (value is SByte || value is Int16 || value is Int32 \n              || value is Int64 || value is Byte || value is UInt16  \n              || value is UInt32 || value is UInt64 \n              || value is BigInteger); \n   }\n\n   public static bool IsFloat(ValueType value) \n   {         \n      return (value is float | value is double | value is Decimal);\n   }\n\n   public static bool IsNumeric(ValueType value)\n   {\n      return (value is Byte ||\n              value is Int16 ||\n              value is Int32 ||\n              value is Int64 ||\n              value is SByte ||\n              value is UInt16 ||\n              value is UInt32 ||\n              value is UInt64 ||\n              value is BigInteger ||\n              value is Decimal ||\n              value is Double ||\n              value is Single);\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.ValueType.Structure#1\">Imports System.Numerics\n\nPublic Class Utility\n   Public Enum NumericRelationship As Integer\n      GreaterThan = 1\n      EqualTo = 0\n      LessThan = -1\n   End Enum\n      \n   Public Shared Function Compare(value1 As ValueType, value2 As ValueType) _\n                                  As NumericRelationship\n      If Not IsNumeric(value1) Then \n         Throw New ArgumentException(&quot;value1 is not a number.&quot;)\n      Else If Not IsNumeric(value2) Then\n         Throw New ArgumentException(&quot;value2 is not a number.&quot;)\n      Else\n         &#39; Use BigInteger as common integral type\n         If isInteger(value1) And IsInteger(value2) Then\n            Dim bigint1 As BigInteger = CType(value1, BigInteger)\n            Dim bigInt2 As BigInteger = CType(value2, BigInteger)\n            Return CType(BigInteger.Compare(bigint1, bigint2), NumericRelationship)\n         &#39; At least one value is floating point; use Double.\n         Else   \n            Dim dbl1, dbl2 As Double\n            Try\n               dbl1 = CDbl(value1)\n            Catch e As OverflowException\n               Console.WriteLine(&quot;value1 is outside the range of a Double.&quot;)\n            End Try\n               \n            Try\n               dbl2 = CDbl(value2)\n            Catch e As OverflowException\n               Console.WriteLine(&quot;value2 is outside the range of a Double.&quot;)\n            End Try\n            Return CType(dbl1.CompareTo(dbl2), NumericRelationship)\n         End If\n      End If\n   End Function\n   \n   Public Shared Function IsInteger(value As ValueType) As Boolean         \n      Return (TypeOf value Is SByte Or TypeOf value Is Int16 Or TypeOf value Is Int32 _\n                 Or TypeOf value Is Int64 Or TypeOf value Is Byte Or TypeOf value Is UInt16 _ \n                 Or TypeOf value Is UInt32 Or TypeOf value Is UInt64 _\n                 Or TypeOf value Is BigInteger) \n   End Function\n\n   Public Shared Function IsFloat(value As ValueType) As Boolean         \n      Return (TypeOf value Is Single Or TypeOf value Is Double Or TypeOf value Is Decimal)\n   End Function\n\n   Public Shared Function IsNumeric(value As ValueType) As Boolean\n      Return TypeOf value Is Byte OrElse\n         TypeOf value Is Int16 OrElse\n         TypeOf value Is Int32 OrElse\n         TypeOf value Is Int64 OrElse\n         TypeOf value Is SByte OrElse\n         TypeOf value Is UInt16 OrElse\n         TypeOf value Is UInt32 OrElse\n         TypeOf value Is UInt64 OrElse\n         TypeOf value Is BigInteger OrElse\n         TypeOf value Is Decimal OrElse\n         TypeOf value Is Double OrElse\n         TypeOf value Is Single\n   End Function\nEnd Class\n</code></pre><p> The following example illustrates calls to the methods of the <code>Utility</code> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.ValueType.Structure#2\">public class Example\n{\n   public static void Main()\n   {\n      Console.WriteLine(Utility.IsNumeric(12));\n      Console.WriteLine(Utility.IsNumeric(true));\n      Console.WriteLine(Utility.IsNumeric(&#39;c&#39;));\n      Console.WriteLine(Utility.IsNumeric(new DateTime(2012, 1, 1)));\n      Console.WriteLine(Utility.IsInteger(12.2));\n      Console.WriteLine(Utility.IsInteger(123456789));\n      Console.WriteLine(Utility.IsFloat(true));\n      Console.WriteLine(Utility.IsFloat(12.2));\n      Console.WriteLine(Utility.IsFloat(12));\n      Console.WriteLine(&quot;{0} {1} {2}&quot;, 12.1, Utility.Compare(12.1, 12), 12);\n   }\n}\n// The example displays the following output:\n//       True\n//       False\n//       False\n//       False\n//       False\n//       True\n//       False\n//       True\n//       False\n//       12.1 GreaterThan 12\n</code></pre><pre><code class=\"lang-vb\" name=\"System.ValueType.Structure#2\">Module Example\n   Public Sub Main()\n      Console.WriteLine(Utility.IsNumeric(12))\n      Console.WriteLine(Utility.IsNumeric(True))\n      Console.WriteLine(Utility.IsNumeric(&quot;c&quot;c))\n      Console.WriteLine(Utility.IsNumeric(#01/01/2012#))\n      Console.WriteLine(Utility.IsInteger(12.2))\n      Console.WriteLine(Utility.IsInteger(123456789))\n      Console.WriteLine(Utility.IsFloat(True))\n      Console.WriteLine(Utility.IsFloat(12.2))\n      Console.WriteLine(Utility.IsFloat(12))\n      Console.WriteLine(&quot;{0} {1} {2}&quot;, 12.1, Utility.Compare(12.1, 12), 12)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       True\n&#39;       False\n&#39;       False\n&#39;       False\n&#39;       False\n&#39;       True\n&#39;       False\n&#39;       True\n&#39;       False\n&#39;       12.1 GreaterThan 12\n</code></pre>\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ValueType__ctor\" data-linktype=\"self-bookmark\">ValueType()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ValueType_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether this instance and a specified object are equal.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ValueType_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the hash code for this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ValueType_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the fully qualified type name of this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_ValueType__ctor\">\r\n    \r\n            <a id=\"System_ValueType__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ValueType()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected ValueType ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_ValueType_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_ValueType_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether this instance and a specified object are equal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to compare with the current instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>obj</code> and this instance are the same type and represent the same value; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Equals method overrides <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">System.Object.Equals(Object)</a> and provides the default implementation of value equality for all value types in the .NET Framework.  </p>\n<p> If none of the fields of the current instance and <code>obj</code> are reference types, the Equals method performs a byte-by-byte comparison of the two objects in memory. Otherwise, it uses reflection to compare the corresponding fields of <code>obj</code> and this instance.  </p>\n<div class=\"TIP\"><h5>Tip</h5><p> Particularly if your value type contains fields that are reference types, you should override the Equals method. This can improve performance and enable you to more closely represent the meaning of equality for the type.  </p>\n</div>\n<h2 id=\"notes-for-the-includewrtaddincludeswrt-mdmd\">Notes for the Windows Runtime</h2>\n<p> When you call the Equalsmethod on a Windows Runtime structure, it provides the default behavior for value types that donâ€™t override Equals. This is part of the support that the .NET Framework provides for the Windows Runtime (see <a href=\"../Topic/.NET%20Framework%20Support%20for%20Windows%20Store%20Apps%20and%20Windows%20Runtime.md\" data-linktype=\"relative-path\">.NET Framework Support for Windows Store Apps and Windows Runtime</a>). Windows Runtime structures canâ€™t override Equals, even if theyâ€™re written with C# or Visual Basic, because they canâ€™t have methods. (In addition, structures in the Windows Runtime itself donâ€™t inherit <a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a>.) However, they appear to have <a class=\"xref\" href=\"system.valuetype#System_ValueType_ToString_\" data-linktype=\"relative-path\">ToString</a>, Equals, and <a class=\"xref\" href=\"system.valuetype#System_ValueType_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a> methods when you use them in your C# or Visual Basic code, and the .NET Framework provides the default behavior for these methods.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how the Equals method can be overridden by a derived value type.  </p>\n<pre><code class=\"lang-cs\" name=\"ValueType.Equals Example#1\">\tpublic struct Complex \n\t{\n\t\tpublic double m_Re;\n\t\tpublic double m_Im;\n\n\t\tpublic override bool Equals( object ob ){\n\t\t\tif( ob is Complex ) {\n\t\t\t\tComplex c = (Complex) ob;\n\t\t\t\treturn m_Re==c.m_Re &amp;&amp; m_Im==c.m_Im;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tpublic override int GetHashCode(){\n\t\t\treturn m_Re.GetHashCode() ^ m_Im.GetHashCode();\n\t\t}\n\t}\n</code></pre><pre><code class=\"lang-vb\" name=\"ValueType.Equals Example#1\">   Public Structure Complex\n      Private m_Re As Double\n      Private m_Im As Double\n          \n      Public Overloads Function Equals(ob As Object) As Boolean\n         If TypeOf ob Is Complex Then\n            Dim c As Complex = CType(ob, Complex)\n            Return m_Re = c.m_Re And m_Im = c.m_Im\n         Else\n            Return False\n         End If\n      End Function\n      \n      \n      Public Overloads Function GetHashCode() As Integer\n         Return m_Re.GetHashCode() ^ m_Im.GetHashCode()\n      End Function\n\n   End Structure\n</code></pre><pre><code class=\"lang-cpp\" name=\"ValueType.Equals Example#1\">public ref struct Complex\n{\npublic:\n   double m_Re;\n   double m_Im;\n   virtual bool Equals( Object^ ob ) override\n   {\n      if ( dynamic_cast&lt;Complex^&gt;(ob) )\n      {\n         Complex^ c = dynamic_cast&lt;Complex^&gt;(ob);\n         return m_Re == c-&gt;m_Re &amp;&amp; m_Im == c-&gt;m_Im;\n      }\n      else\n      {\n         return false;\n      }\n   }\n\n   virtual int GetHashCode() override\n   {\n      return m_Re.GetHashCode() ^ m_Im.GetHashCode();\n   }\n};\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ValueType_GetHashCode\">\r\n    \r\n            <a id=\"System_ValueType_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the hash code for this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer that is the hash code for this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The GetHashCode method applies to types derived from <a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a>. One or more fields of the derived type is used to calculate the return value. If you call the derived type&#39;s <code>GetHashCode</code>method, the return value is not likely to be suitable for use as a key in a hash table. Additionally, if the value of one or more of those fields changes, the return value might become unsuitable for use as a key in a hash table. In either case, consider writing your own implementation of the GetHashCode method that more closely represents the concept of a hash code for the type.  </p>\n<p> For more information, see <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a>, and <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">System.Collections.Hashtable</a>.  </p>\n<h2 id=\"notes-for-the-includewrtaddincludeswrt-mdmd\">Notes for the Windows Runtime</h2>\n<p> When you call the GetHashCode method on a Windows Runtime structure, it provides the default behavior for value types that donâ€™t override GetHashCode. This is part of the support that the .NET Framework provides for the Windows Runtime (see <a href=\"../Topic/.NET%20Framework%20Support%20for%20Windows%20Store%20Apps%20and%20Windows%20Runtime.md\" data-linktype=\"relative-path\">.NET Framework Support for Windows Store Apps and Windows Runtime</a>). Windows Runtime structures canâ€™t override GetHashCode, even if theyâ€™re written with C# or Visual Basic, because they canâ€™t have methods. (In addition, structures in the Windows Runtime itself donâ€™t inherit <a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a>.) However, they appear to have <a class=\"xref\" href=\"system.valuetype#System_ValueType_ToString_\" data-linktype=\"relative-path\">ToString</a>, <a class=\"xref\" href=\"system.valuetype#System_ValueType_Equals_\" data-linktype=\"relative-path\">Equals</a>, and GetHashCode methods when you use them in your C# or Visual Basic code, and the .NET Framework provides the default behavior for these methods.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how the GetHashCode method can be overridden by a derived value type.  </p>\n<pre><code class=\"lang-cs\" name=\"ValueType.Equals Example#1\">\tpublic struct Complex \n\t{\n\t\tpublic double m_Re;\n\t\tpublic double m_Im;\n\n\t\tpublic override bool Equals( object ob ){\n\t\t\tif( ob is Complex ) {\n\t\t\t\tComplex c = (Complex) ob;\n\t\t\t\treturn m_Re==c.m_Re &amp;&amp; m_Im==c.m_Im;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tpublic override int GetHashCode(){\n\t\t\treturn m_Re.GetHashCode() ^ m_Im.GetHashCode();\n\t\t}\n\t}\n</code></pre><pre><code class=\"lang-vb\" name=\"ValueType.Equals Example#1\">   Public Structure Complex\n      Private m_Re As Double\n      Private m_Im As Double\n          \n      Public Overloads Function Equals(ob As Object) As Boolean\n         If TypeOf ob Is Complex Then\n            Dim c As Complex = CType(ob, Complex)\n            Return m_Re = c.m_Re And m_Im = c.m_Im\n         Else\n            Return False\n         End If\n      End Function\n      \n      \n      Public Overloads Function GetHashCode() As Integer\n         Return m_Re.GetHashCode() ^ m_Im.GetHashCode()\n      End Function\n\n   End Structure\n</code></pre><pre><code class=\"lang-cpp\" name=\"ValueType.Equals Example#1\">public ref struct Complex\n{\npublic:\n   double m_Re;\n   double m_Im;\n   virtual bool Equals( Object^ ob ) override\n   {\n      if ( dynamic_cast&lt;Complex^&gt;(ob) )\n      {\n         Complex^ c = dynamic_cast&lt;Complex^&gt;(ob);\n         return m_Re == c-&gt;m_Re &amp;&amp; m_Im == c-&gt;m_Im;\n      }\n      else\n      {\n         return false;\n      }\n   }\n\n   virtual int GetHashCode() override\n   {\n      return m_Re.GetHashCode() ^ m_Im.GetHashCode();\n   }\n};\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ValueType_ToString\">\r\n    \r\n            <a id=\"System_ValueType_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the fully qualified type name of this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The fully qualified type name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ToString method overrides the <a class=\"xref\" href=\"system.object#System_Object_ToString_\" data-linktype=\"relative-path\">ToString</a> method and provides the default implementation of the <code>ToString</code> method for value types. (Value types are types defined by the <code>struct</code> keyword in C#, and by the <code>Structure</code>...<code>End Structure</code> construct in Visual Basic.) Functionally, however, the implementation is that same as that of <a class=\"xref\" href=\"system.object#System_Object_ToString_\" data-linktype=\"relative-path\">ToString</a>: the method returns the fully qualified type name.  </p>\n<p> Value types defined by the <code>struct</code> keyword in C# and the <code>Structure</code>...<code>End Structure</code> construct in Visual Basic typically override the ToString method to provide a more meaningful string representation of the value type. The following example illustrates the difference. It defines two value types, <code>EmployeeA</code> and <code>EmployeeB</code>, creates an instance of each, and calls its <code>ToString</code> method. Because the <code>EmployeeA</code> structure does not override the ToString method, it displays only the fully qualified type name. The <code>EmployeeB.ToString</code> method, on the other hand, provides meaningful information about the object.  </p>\n<pre><code class=\"lang-vb\" name=\"System.ValueType.ToString#1\">Imports Corporate.EmployeeObjects\n\nModule Example\n   Public Sub Main()\n      Dim empA As New EmployeeA With { .Name = &quot;Robert&quot; }\n      Console.WriteLine(empA.ToString())\n      \n      Dim empB = new EmployeeB With { .Name = &quot;Robert&quot; }\n      Console.WriteLine(empB.ToString())\n   End Sub\nEnd Module\n\nNamespace Corporate.EmployeeObjects\n    Public Structure EmployeeA\n         Public Property Name As String \n    End Structure\n    \n    Public Structure EmployeeB\n         Public Property Name As String \n\n         Public Overrides Function ToString() As String \n              Return Name\n         End Function\n    End Structure  \nEnd Namespace\n&#39; The example displays the following output:\n&#39;     Corporate.EmployeeObjects.EmployeeA\n&#39;     Robert\n</code></pre><pre><code class=\"lang-cs\" name=\"System.ValueType.ToString#1\">using System;\nusing Corporate.EmployeeObjects;\n\npublic class Example\n{\n   public static void Main()\n   {\n      var empA = new EmployeeA{ Name = &quot;Robert&quot;,};\n      Console.WriteLine(empA.ToString());\n      \n      var empB = new EmployeeB{ Name = &quot;Robert&quot;,};\n      Console.WriteLine(empB.ToString());\n   }\n}\n\nnamespace Corporate.EmployeeObjects\n{\n    public struct EmployeeA\n    {\n         public String Name { get; set; }\n    }\n    \n    public struct EmployeeB\n    {\n         public String Name { get; set; }\n\n         public override String ToString()\n         {\n              return Name;\n         }\n    }  \n}\n// The example displays the following output:\n//     Corporate.EmployeeObjects.EmployeeA\n//     Robert\n</code></pre><p> Note that, although enumeration types are also value types, they derive from the <a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a> class, which overrides  ToString.  </p>\n<h2 id=\"notes-for-the-windows-runtime\">Notes for the Windows Runtime</h2>\n<p> When you call the ToString method on a Windows Runtime structure, it provides the default behavior for value types that donâ€™t override ToString. This is part of the support that the .NET Framework provides for the Windows Runtime (see <a href=\"../Topic/.NET%20Framework%20Support%20for%20Windows%20Store%20Apps%20and%20Windows%20Runtime.md\" data-linktype=\"relative-path\">.NET Framework Support for Windows Store Apps and Windows Runtime</a>). Windows Runtime structures canâ€™t override ToString, even if theyâ€™re written with C# or Visual Basic, because they canâ€™t have methods. (In addition, structures in the Windows Runtime itself donâ€™t inherit <a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a>.) However, they appear to have ToString, <a class=\"xref\" href=\"system.valuetype#System_ValueType_Equals_\" data-linktype=\"relative-path\">Equals</a>, and <a class=\"xref\" href=\"system.valuetype#System_ValueType_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a> methods when you use them in your C# or Visual Basic code, and the .NET Framework provides the default behavior for these methods.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.ValueType.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.ValueType.yml\">\r\n<meta name=\"APIName\" content=\"System.ValueType\">\r\n<meta name=\"APIName\" content=\"System.ValueType..ctor\">\r\n<meta name=\"APIName\" content=\"System.ValueType.Equals\">\r\n<meta name=\"APIName\" content=\"System.ValueType.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.ValueType.ToString\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"110eed6b-b3a3-2ac2-904f-7ba963b88143\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides the base class for value types.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.ValueType\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.ValueType.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.ValueType.yml","open_to_public_contributors":true,"api_name":["System.ValueType","System.ValueType..ctor","System.ValueType.Equals","System.ValueType.GetHashCode","System.ValueType.ToString"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.ValueType","System::ValueType","System.ValueType.#ctor","System::ValueType::#ctor","System.ValueType.Equals","System::ValueType::Equals","System.ValueType.GetHashCode","System::ValueType::GetHashCode","System.ValueType.ToString","System::ValueType::ToString"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"110eed6b-b3a3-2ac2-904f-7ba963b88143","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/ValueType.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ValueType class | Microsoft Docs","_op_ogTitle":"ValueType class","description":"Provides the base class for value types.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.ValueType","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.valuetype","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.valuetype","fileRelativePath":"System.ValueType.html"},"themesRelativePathToOutputRoot":"_themes/"}