{"content":"    \r\n    <h1 id=\"System_Windows_Forms_IDataObject\">\r\n      <span class=\"lang-csharp\">IDataObject</span>\r\n        Interface\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides a format-independent mechanism for transferring data.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic interface IDataObject</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The <code>IDataObject</code> interface is used by the <a class=\"xref\" href=\"system.windows.forms.clipboard\" data-linktype=\"relative-path\">Clipboard</a> class and in drag-and-drop operations.  </p>\n<p> When implemented in a class, the IDataObject methods allow the user to store data in multiple formats in an instance of the class. Storing data in more than one format increases the chance that a target application, whose format requirements you might not know, can retrieve the stored data. To store data in an instance of IDataObject, call the <a class=\"xref\" href=\"system.windows.forms.idataobject#System_Windows_Forms_IDataObject_SetData_\" data-linktype=\"relative-path\">SetData</a> method and specify the data format in the <code>format</code> parameter. Set the <code>autoConvert</code> parameter to <code>false</code> if you do not want stored data to be converted to another format when it is retrieved. Invoke <a class=\"xref\" href=\"system.windows.forms.idataobject#System_Windows_Forms_IDataObject_SetData_\" data-linktype=\"relative-path\">SetData</a> multiple times on one instance of IDataObject to store data in more than one format.  </p>\n<p> You retrieve stored data from an IDataObject by calling the <a class=\"xref\" href=\"system.windows.forms.idataobject#System_Windows_Forms_IDataObject_GetData_\" data-linktype=\"relative-path\">GetData</a> method and specifying the data format in the <code>format</code> parameter. Set the <code>autoConvert</code> parameter to <code>false</code> to retrieve only data that was stored in the specified format. To convert the stored data to the specified format, set <code>autoConvert</code> to <code>true</code>, or do not use <code>autoConvert</code>.  </p>\n<p> To determine the formats of the data stored in an IDataObject, use the following IDataObject methods.  </p>\n<ul>\n<li><p>Call the <a class=\"xref\" href=\"system.windows.forms.idataobject#System_Windows_Forms_IDataObject_GetFormats_\" data-linktype=\"relative-path\">GetFormats</a> method to retrieve an array of all the formats in which the data is available. Set the <code>autoConvert</code> parameter to <code>false</code> to get only the formats in which the data is stored. To get all the formats in which the data is available, set <code>autoConvert</code> to <code>true</code>, or do not use this parameter.  </p>\n</li>\n<li><p>Call the <a class=\"xref\" href=\"system.windows.forms.idataobject#System_Windows_Forms_IDataObject_GetDataPresent_\" data-linktype=\"relative-path\">GetDataPresent</a> method to determine whether stored data is available in a certain format. If you do not want stored data to be converted to the specified format, set the <code>autoConvert</code> parameter to <code>false</code>.  </p>\n<p>See the <a class=\"xref\" href=\"system.windows.forms.dataobject\" data-linktype=\"relative-path\">DataObject</a> class for an implementation of this interface. See the <a class=\"xref\" href=\"system.windows.forms.dataformats\" data-linktype=\"relative-path\">DataFormats</a> class for the predefined <a class=\"xref\" href=\"system.windows.forms.clipboard\" data-linktype=\"relative-path\">Clipboard</a> data formats.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_IDataObject_GetData_System_String_\" data-linktype=\"self-bookmark\">GetData(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the data associated with the specified data format.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_IDataObject_GetData_System_Type_\" data-linktype=\"self-bookmark\">GetData(Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the data associated with the specified class type format.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_IDataObject_GetData_System_String_System_Boolean_\" data-linktype=\"self-bookmark\">GetData(String,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the data associated with the specified data format, using a Boolean to determine whether to convert the data to the format.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_IDataObject_GetDataPresent_System_String_\" data-linktype=\"self-bookmark\">GetDataPresent(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether data stored in this instance is associated with, or can be converted to, the specified format.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_IDataObject_GetDataPresent_System_Type_\" data-linktype=\"self-bookmark\">GetDataPresent(Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether data stored in this instance is associated with, or can be converted to, the specified format.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_IDataObject_GetDataPresent_System_String_System_Boolean_\" data-linktype=\"self-bookmark\">GetDataPresent(String,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether data stored in this instance is associated with the specified format, using a Boolean value to determine whether to convert the data to the format.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_IDataObject_GetFormats\" data-linktype=\"self-bookmark\">GetFormats()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a list of all formats that data stored in this instance is associated with or can be converted to.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_IDataObject_GetFormats_System_Boolean_\" data-linktype=\"self-bookmark\">GetFormats(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a list of all formats that data stored in this instance is associated with or can be converted to, using a Boolean value to determine whether to retrieve all formats that the data can be converted to or only native data formats.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_IDataObject_SetData_System_Object_\" data-linktype=\"self-bookmark\">SetData(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Stores the specified data in this instance, using the class of the data for the format.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_IDataObject_SetData_System_String_System_Object_\" data-linktype=\"self-bookmark\">SetData(String,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Stores the specified data and its associated format in this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_IDataObject_SetData_System_Type_System_Object_\" data-linktype=\"self-bookmark\">SetData(Type,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Stores the specified data and its associated class type in this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_IDataObject_SetData_System_String_System_Boolean_System_Object_\" data-linktype=\"self-bookmark\">SetData(String,Boolean,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Stores the specified data and its associated format in this instance, using a Boolean value to specify whether the data can be converted to another format.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_IDataObject_GetData_System_String_\">\r\n    \r\n            <a id=\"System_Windows_Forms_IDataObject_GetData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetData(String)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the data associated with the specified data format.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object GetData (string format);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The format of the data to retrieve. See <a class=\"xref\" href=\"system.windows.forms.dataformats\" data-linktype=\"relative-path\">DataFormats</a> for predefined formats.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>The data associated with the specified format, or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If this method cannot find data in the specified format, it attempts to convert the data to the format. If the data cannot be converted to the specified format, this method returns <code>null</code>.  </p>\n<p> To determine whether data is associated with, or can be converted to, a format, call <a class=\"xref\" href=\"system.windows.forms.idataobject#System_Windows_Forms_IDataObject_GetDataPresent_\" data-linktype=\"relative-path\">GetDataPresent</a> before calling <a class=\"xref\" href=\"system.windows.forms.idataobject#System_Windows_Forms_IDataObject_GetData_\" data-linktype=\"relative-path\">GetData</a>. Call <a class=\"xref\" href=\"system.windows.forms.idataobject#System_Windows_Forms_IDataObject_GetFormats_\" data-linktype=\"relative-path\">GetFormats</a> for a list of valid formats for the data stored in this instance.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Data can be converted to another format if it was stored specifying that conversion is allowed, and if the requested format is compatible with the stored format. For example, data stored as Unicode can be converted to text.  </p>\n</div>\n<p> For an implementation of this method, see <a class=\"xref\" href=\"system.windows.forms.dataobject#System_Windows_Forms_DataObject_GetData_\" data-linktype=\"relative-path\">GetData</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses the <a class=\"xref\" href=\"system.windows.forms.dataobject\" data-linktype=\"relative-path\">DataObject</a> class, which implements <code>IDataObject,</code> to demonstrate the use of the <code>GetData</code> method. The method is used to retrieve the data stored in <code>myDataObject</code>, which is associated with the <code>Text</code> format. The example assumes that you have already created a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> named <code>Form1</code> and a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> named <code>textBox1</code>.  </p>\n<pre><code class=\"lang-cpp\" name=\"GetData1#1\">private:\n   void GetData1()\n   {\n      // Creates a new data object using a string and the text format.\n      String^ myString = &quot;My text string&quot;;\n      DataObject^ myDataObject = gcnew DataObject( DataFormats::Text,myString );\n\n      // Displays the string in a text box.\n      textBox1-&gt;Text = myDataObject-&gt;GetData( DataFormats::Text )-&gt;ToString();\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"GetData1#1\">        private void GetData1() \n        {\n            // Creates a new data object using a string and the text format.\n            string myString = &quot;My text string&quot;;\n            DataObject myDataObject = new DataObject(DataFormats.Text, myString);\n\n            // Displays the string in a text box.\n            textBox1.Text = myDataObject.GetData(DataFormats.Text).ToString();\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"GetData1#1\">    Private Sub GetData1()\n        &#39; Creates a new data object using a string and the text format.\n        Dim myString As String = &quot;My text string&quot;\n        Dim myDataObject As New DataObject(DataFormats.Text, myString)\n\n        &#39; Displays the string in a text box.\n        textBox1.Text = myDataObject.GetData(DataFormats.Text).ToString()\n    End Sub &#39;GetData1\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_IDataObject_GetData_System_Type_\">\r\n    \r\n            <a id=\"System_Windows_Forms_IDataObject_GetData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetData(Type)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the data associated with the specified class type format.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object GetData (Type format);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> representing the format of the data to retrieve. See <a class=\"xref\" href=\"system.windows.forms.dataformats\" data-linktype=\"relative-path\">DataFormats</a> for predefined formats.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>The data associated with the specified format, or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If this method cannot find data in the specified format, it attempts to convert the data to the format. If the data cannot be converted to the specified format, this method returns <code>null</code>.  </p>\n<p> To determine whether data is associated with, or can be converted to, a format, call <a class=\"xref\" href=\"system.windows.forms.idataobject#System_Windows_Forms_IDataObject_GetDataPresent_\" data-linktype=\"relative-path\">GetDataPresent</a> before calling <a class=\"xref\" href=\"system.windows.forms.idataobject#System_Windows_Forms_IDataObject_GetData_\" data-linktype=\"relative-path\">GetData</a>. Call <a class=\"xref\" href=\"system.windows.forms.idataobject#System_Windows_Forms_IDataObject_GetFormats_\" data-linktype=\"relative-path\">GetFormats</a> for a list of valid formats for the data stored in this instance.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Data can be converted to another format if it was stored specifying that conversion is allowed, and if the requested format is compatible with the stored format. For example, data stored as Unicode can be converted to text.  </p>\n</div>\n<p> For an implementation of this method, see <a class=\"xref\" href=\"system.windows.forms.dataobject#System_Windows_Forms_DataObject_GetData_\" data-linktype=\"relative-path\">GetData</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses the <a class=\"xref\" href=\"system.windows.forms.dataobject\" data-linktype=\"relative-path\">DataObject</a> class, which implements <code>IDataObject</code>, to demonstrate the use of the <code>GetData</code> method. The method is used to retrieve the data stored in <code>myObject</code>, which is associated with a specific type, <code>myType</code>. The type of the retrieved data is displayed in a message box. The example assumes that you have already created a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> named <code>Form1</code>.  </p>\n<pre><code class=\"lang-cpp\" name=\"GetData2#1\">private:\n   void GetData2()\n   {\n      // Creates a component.\n      Component^ myComponent = gcnew Component;\n\n      // Creates a data object, and assigns it the component.\n      DataObject^ myDataObject = gcnew DataObject( myComponent );\n\n      // Creates a type, myType, to store the type of data.\n      Type^ myType = myComponent-&gt;GetType();\n\n      // Retrieves the data using myType to represent its type.\n      Object^ myObject = myDataObject-&gt;GetData( myType );\n      if ( myObject != nullptr )\n            MessageBox::Show( &quot;The data type stored in the data object is &quot; +\n                  myObject-&gt;GetType()-&gt;Name + &quot;.&quot; );\n      else\n            MessageBox::Show( &quot;Data of the specified type was not stored in the data object.&quot; );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"GetData2#1\">        private void GetData2() \n        {\n            // Creates a component.\n            Component myComponent = new Component();\n \n            // Creates a data object, and assigns it the component.\n            DataObject myDataObject = new DataObject(myComponent);\n \n            // Creates a type, myType, to store the type of data.\n            Type myType = myComponent.GetType();\n \n            // Retrieves the data using myType to represent its type.\n            Object myObject = myDataObject.GetData(myType);\n            if(myObject != null)\n                MessageBox.Show(&quot;The data type stored in the data object is &quot; +\n                    myObject.GetType().Name + &quot;.&quot;);\n            else\n                MessageBox.Show(&quot;Data of the specified type was not stored &quot; +\n                    &quot;in the data object.&quot;);\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"GetData2#1\">    Private Sub GetData2()\n        &#39; Creates a component.\n        Dim myComponent As New System.ComponentModel.Component()\n\n        &#39; Creates a data object, and assigns it the component.\n        Dim myDataObject As New DataObject(myComponent)\n\n        &#39; Creates a type, myType, to store the type of data.\n        Dim myType As Type = myComponent.GetType()\n\n        &#39; Retrieves the data using myType to represent its type.\n        Dim myObject As [Object] = myDataObject.GetData(myType)\n        If (myObject IsNot Nothing) Then\n            MessageBox.Show(&quot;The data type stored in the data object is &quot; + myObject.GetType().Name + &quot;.&quot;)\n        Else\n            MessageBox.Show(&quot;Data of the specified type was not stored &quot; + &quot;in the data object.&quot;)\n        End If\n    End Sub &#39;GetData2\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_IDataObject_GetData_System_String_System_Boolean_\">\r\n    \r\n            <a id=\"System_Windows_Forms_IDataObject_GetData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetData(String,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the data associated with the specified data format, using a Boolean to determine whether to convert the data to the format.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object GetData (string format, bool autoConvert);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The format of the data to retrieve. See <a class=\"xref\" href=\"system.windows.forms.dataformats\" data-linktype=\"relative-path\">DataFormats</a> for predefined formats.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>autoConvert</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to convert the data to the specified format; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>The data associated with the specified format, or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the <code>autoConvert</code> parameter is <code>true</code> and this method cannot find data in the specified format, it attempts to convert the data to the format. If the data cannot be converted to the specified format, or if the data was stored with the <code>autoConvert</code> parameter set to <code>false</code>, this method returns <code>null</code>.  </p>\n<p> If the <code>autoConvert</code> parameter is <code>false</code>, this method returns data in the specified format, or <code>null</code> if no data in this format can be found.  </p>\n<p> To determine whether data is associated with, or can be converted to, a format, call <a class=\"xref\" href=\"system.windows.forms.idataobject#System_Windows_Forms_IDataObject_GetDataPresent_\" data-linktype=\"relative-path\">GetDataPresent</a> before calling GetData. Call <a class=\"xref\" href=\"system.windows.forms.idataobject#System_Windows_Forms_IDataObject_GetFormats_\" data-linktype=\"relative-path\">GetFormats</a> for a list of valid formats for the data stored in this instance.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Data can be converted to another format if it was stored specifying that conversion is allowed, and if the requested format is compatible with the stored format. For example, data stored as Unicode can be converted to text.  </p>\n</div>\n<p> For an implementation of this method, see <a class=\"xref\" href=\"system.windows.forms.dataobject#System_Windows_Forms_DataObject_GetData_\" data-linktype=\"relative-path\">GetData</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses the <a class=\"xref\" href=\"system.windows.forms.dataobject\" data-linktype=\"relative-path\">DataObject</a> class, which implements <code>IDataObject</code>, to demonstrate the use of the <code>GetData</code> method. The example retrieves the data stored in a <code>DataObject</code>, using the <code>autoConvert</code> parameter to specify whether or not to convert the data format. First, <code>myDataObject</code> is created with text data. Then the example tries twice to retrieve the data. In the first trial, it specifies its format as a string and sets the <code>autoConvert</code> parameter to <code>false</code>. This trial fails, and the result is displayed in a message box labeled &quot;Message #1.&quot; In the second trial, the example retrieves the same data with the <code>autoConvert</code> parameter set to <code>true</code>. This trial succeeds, and the result is displayed in a message box labeled &quot;Message #2.&quot; The example assumes that you have created a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> named <code>Form1</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"GetData3#1\">        private void GetData3() \n        {\n            // Creates a new data object using a text string.\n            string myString = &quot;Hello World!&quot;;\n            DataObject myDataObject = new DataObject(DataFormats.Text, myString);\n \n            // Displays the string with autoConvert equal to false.\n            if (myDataObject.GetData(&quot;System.String&quot;, false) != null) \n            {\n                // Displays the string in a message box.\n                MessageBox.Show(myDataObject.GetData(&quot;System.String&quot;, false).ToString() + &quot;.&quot;, &quot;Message #1&quot;);\n            } \n            else\n                // Displays a not found message in a message box.\n                MessageBox.Show(&quot;Could not find data of the specified format.&quot;, &quot;Message #1&quot;);\n \n            // Displays the string in a text box with autoConvert equal to true.\n            string myData = &quot;The data is &quot; + myDataObject.GetData(&quot;System.String&quot;, true).ToString() +&quot;.&quot;;\n            MessageBox.Show(myData,&quot;Message #2&quot;);\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"GetData3#1\">private:\n   void GetData3()\n   {\n      // Creates a new data object using a text string.\n      String^ myString = &quot;Hello World!&quot;;\n      DataObject^ myDataObject = gcnew DataObject( DataFormats::Text,myString );\n\n      // Displays the string with autoConvert equal to false.\n      if ( myDataObject-&gt;GetData( &quot;System::String&quot;, false ) != nullptr )\n      {\n         // Displays the string in a message box.\n         MessageBox::Show( myDataObject-&gt;GetData( &quot;System::String&quot;, false ) + &quot;.&quot;, &quot;Message #1&quot; );\n      }\n      else\n            MessageBox::Show( &quot;Could not find data of the specified format.&quot;, &quot;Message #1&quot; );\n\n      // Displays a not found message in a message box.\n      // Displays the string in a text box with autoConvert equal to true.\n      String^ myData = &quot;The data is &quot; + myDataObject-&gt;GetData( &quot;System::String&quot;, true ) + &quot;.&quot;;\n      MessageBox::Show( myData, &quot;Message #2&quot; );\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"GetData3#1\">    Private Sub GetData3()\n        &#39; Creates a new data object using a text string.\n        Dim myString As String = &quot;Hello World!&quot;\n        Dim myDataObject As New DataObject(DataFormats.Text, myString)\n\n        &#39; Displays the string with autoConvert equal to false.\n        If (myDataObject.GetData(&quot;System.String&quot;, False) IsNot Nothing) Then\n            &#39; Displays the string in a message box.\n            MessageBox.Show(myDataObject.GetData(&quot;System.String&quot;, False).ToString() + &quot;.&quot;, &quot;Message #1&quot;)\n            &#39; Displays a not found message in a message box.\n        Else\n            MessageBox.Show(&quot;Could not find data of the specified format.&quot;, &quot;Message #1&quot;)\n        End If\n\n        &#39; Displays the string in a text box with autoConvert equal to true.\n        Dim myData As String = &quot;The data is &quot; + myDataObject.GetData(&quot;System.String&quot;, True).ToString()\n        MessageBox.Show(myData, &quot;Message #2&quot;)\n    End Sub &#39;GetData3\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_IDataObject_GetDataPresent_System_String_\">\r\n    \r\n            <a id=\"System_Windows_Forms_IDataObject_GetDataPresent_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDataPresent(String)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether data stored in this instance is associated with, or can be converted to, the specified format.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool GetDataPresent (string format);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The format for which to check. See <a class=\"xref\" href=\"system.windows.forms.dataformats\" data-linktype=\"relative-path\">DataFormats</a> for predefined formats.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if data stored in this instance is associated with, or can be converted to, the specified format; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Call this method to determine whether a format exists in this <a class=\"xref\" href=\"system.windows.forms.dataobject\" data-linktype=\"relative-path\">DataObject</a> before calling <a class=\"xref\" href=\"system.windows.forms.idataobject#System_Windows_Forms_IDataObject_GetData_\" data-linktype=\"relative-path\">GetData</a>. Call <a class=\"xref\" href=\"system.windows.forms.idataobject#System_Windows_Forms_IDataObject_GetFormats_\" data-linktype=\"relative-path\">GetFormats</a> for the formats that are available in this instance.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Data can be converted to another format if it was stored specifying that conversion is allowed, and if the requested format is compatible with the stored format. For example, data stored as Unicode can be converted to text.  </p>\n</div>\n<p> For an implementation of this method, see <a class=\"xref\" href=\"system.windows.forms.dataobject#System_Windows_Forms_DataObject_GetDataPresent_\" data-linktype=\"relative-path\">GetDataPresent</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses the <a class=\"xref\" href=\"system.windows.forms.dataobject\" data-linktype=\"relative-path\">DataObject</a> class, which implements <code>IDataObject</code>, to demonstrate the use of the <code>GetDataPresent</code> method. First, it creates a data object using a string and the <code>Text</code> format. Then it verifies that the data is present in the <code>Text</code> format and displays the results in a message box. The example assumes that you have created a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> named <code>Form1</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"GetDataPresent1#1\">    Private Sub TestDataObject()\n        &#39; Creates a new data object using a string and the Text format.\n        Dim myString As New String(&quot;Hello World!&quot;)\n        Dim myDataObject As New DataObject(DataFormats.Text, myString)\n\n        &#39; Checks whether the data is present in the Text format and displays the result.\n        If (myDataObject.GetDataPresent(DataFormats.Text)) Then\n            MessageBox.Show(&quot;The stored data is in the Text format.&quot;, &quot;Test Result&quot;)\n        Else\n            MessageBox.Show(&quot;The stored data is not in the Text format.&quot;, &quot;Test Result&quot;)\n        End If\n    End Sub &#39;TestDataObject\n</code></pre><pre><code class=\"lang-cs\" name=\"GetDataPresent1#1\">        private void TestDataObject() \n        {\n            // Creates a new data object using a string and the Text format.\n            string myString = &quot;Hello World!&quot;;\n            DataObject myDataObject = new DataObject(DataFormats.Text, myString);\n \n            // Checks whether the data is present in the Text format and displays the result.\n            if (myDataObject.GetDataPresent(DataFormats.Text))\n                MessageBox.Show(&quot;The stored data is in the Text format.&quot; , &quot;Test Result&quot;);\n            else\n                MessageBox.Show(&quot;The stored data is not in the Text format.&quot;, &quot;Test Result&quot;);\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"GetDataPresent1#1\">private:\n   void TestDataObject()\n   {\n      // Creates a new data object using a string and the Text format.\n      String^ myString = &quot;Hello World!&quot;;\n      DataObject^ myDataObject = gcnew DataObject( DataFormats::Text,myString );\n\n      // Checks whether the data is present in the Text format and displays the result.\n      if ( myDataObject-&gt;GetDataPresent( DataFormats::Text ) )\n            MessageBox::Show( &quot;The stored data is in the Text format.&quot;, &quot;Test Result&quot; );\n      else\n            MessageBox::Show( &quot;The stored data is not in the Text format.&quot;, &quot;Test Result&quot; );\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_IDataObject_GetDataPresent_System_Type_\">\r\n    \r\n            <a id=\"System_Windows_Forms_IDataObject_GetDataPresent_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDataPresent(Type)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether data stored in this instance is associated with, or can be converted to, the specified format.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool GetDataPresent (Type format);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> representing the format for which to check. See <a class=\"xref\" href=\"system.windows.forms.dataformats\" data-linktype=\"relative-path\">DataFormats</a> for predefined formats.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if data stored in this instance is associated with, or can be converted to, the specified format; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Call this method to determine whether a format exists in this <a class=\"xref\" href=\"system.windows.forms.dataobject\" data-linktype=\"relative-path\">DataObject</a> before calling <a class=\"xref\" href=\"system.windows.forms.idataobject#System_Windows_Forms_IDataObject_GetData_\" data-linktype=\"relative-path\">GetData</a>. Call <a class=\"xref\" href=\"system.windows.forms.idataobject#System_Windows_Forms_IDataObject_GetFormats_\" data-linktype=\"relative-path\">GetFormats</a> for the formats that are available in this instance.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Data can be converted to another format if it was stored specifying that conversion is allowed, and if the requested format is compatible with the stored format. For example, data stored as Unicode can be converted to text.  </p>\n</div>\n<p> For an implementation of this method, see <a class=\"xref\" href=\"system.windows.forms.dataobject#System_Windows_Forms_DataObject_GetDataPresent_\" data-linktype=\"relative-path\">GetDataPresent</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses the <a class=\"xref\" href=\"system.windows.forms.dataobject\" data-linktype=\"relative-path\">DataObject</a> class, which implements <code>IDataObject</code>, to demonstrate the use of the <code>GetDataPresent</code> method. First, it creates a component (<code>myComponent</code>) and stores it in a data object (<code>myDataObject</code>). Then it checks whether the specified data is stored in <code>myDataObject</code>. If the test evaluates <code>true</code>, it displays the result in a message box and displays the data type in a text box. This example assumes that you have already created a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> named <code>Form1</code> and a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> named <code>textBox1</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"GetDataPresent2#1\">        private void GetDataPresent2() \n        {\n            // Creates a component to store in the data object.\n            Component myComponent = new Component();\n\n            // Creates a new data object and assigns it the component.\n            DataObject myDataObject = new DataObject(myComponent);\n \n            // Creates a type to store the type of data.\n            Type myType = myComponent.GetType();\n \n            // Checks whether the specified data type exists in the object.\n            if (myDataObject.GetDataPresent(myType))\n            {\n                MessageBox.Show(&quot;The specified data is stored in the data object.&quot;);\n                // Displays the type of data.\n                textBox1.Text = &quot;The data type is &quot; + myDataObject.GetData(myType).GetType().Name + &quot;.&quot;;\n            }\n            else\n                MessageBox.Show(&quot;The specified data is not stored in the data object.&quot;);\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"GetDataPresent2#1\">private:\n   void GetDataPresent2()\n   {\n      // Creates a component to store in the data object.\n      Component^ myComponent = gcnew Component;\n\n      // Creates a new data object and assigns it the component.\n      DataObject^ myDataObject = gcnew DataObject( myComponent );\n\n      // Creates a type to store the type of data.\n      Type^ myType = myComponent-&gt;GetType();\n\n      // Checks whether the specified data type exists in the object.\n      if ( myDataObject-&gt;GetDataPresent( myType ) )\n      {\n         MessageBox::Show( &quot;The specified data is stored in the data object.&quot; );\n\n         // Displays the type of data.\n         textBox1-&gt;Text = &quot;The data type is &quot; + myDataObject-&gt;GetData( myType )-&gt;GetType()-&gt;Name + &quot;.&quot;;\n      }\n      else\n            MessageBox::Show( &quot;The specified data is not stored in the data object.&quot; );\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"GetDataPresent2#1\">    Private Sub GetDataPresent2()\n        &#39; Creates a component to store in the data object.\n        Dim myComponent As New System.ComponentModel.Component()\n\n        &#39; Creates a new data object and assigns it the component.\n        Dim myDataObject As New DataObject(myComponent)\n\n        &#39;Creates a type to store the type of data.\n        Dim myType As Type = myComponent.GetType()\n\n        &#39; Checks whether the specified data type exists in the object.\n        If myDataObject.GetDataPresent(myType) Then\n            MessageBox.Show(&quot;The specified data is stored in the data object.&quot;)\n            &#39; Displays the type of data.\n            TextBox1.Text = &quot;The data type is &quot; &amp; myDataObject.GetData(myType).GetType().Name &amp; &quot;.&quot;\n        Else\n            MessageBox.Show(&quot;The specified data is not stored in the data object.&quot;)\n        End If\n    End Sub &#39;GetDataPresent2\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_IDataObject_GetDataPresent_System_String_System_Boolean_\">\r\n    \r\n            <a id=\"System_Windows_Forms_IDataObject_GetDataPresent_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDataPresent(String,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether data stored in this instance is associated with the specified format, using a Boolean value to determine whether to convert the data to the format.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool GetDataPresent (string format, bool autoConvert);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The format for which to check. See <a class=\"xref\" href=\"system.windows.forms.dataformats\" data-linktype=\"relative-path\">DataFormats</a> for predefined formats.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>autoConvert</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to determine whether data stored in this instance can be converted to the specified format; <code>false</code> to check whether the data is in the specified format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the data is in, or can be converted to, the specified format; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Call this method to determine whether a format exists in this <a class=\"xref\" href=\"system.windows.forms.dataobject\" data-linktype=\"relative-path\">DataObject</a> before calling <a class=\"xref\" href=\"system.windows.forms.idataobject#System_Windows_Forms_IDataObject_GetData_\" data-linktype=\"relative-path\">GetData</a>. Call <a class=\"xref\" href=\"system.windows.forms.idataobject#System_Windows_Forms_IDataObject_GetFormats_\" data-linktype=\"relative-path\">GetFormats</a> for the formats that are available in this instance.  </p>\n<p> This method returns <code>true</code> when:  </p>\n<ul>\n<li><p>The <code>autoConvert</code> parameter is <code>true</code> and the data is in a format that can be converted to the appropriate format.  </p>\n</li>\n<li><p>The <code>autoConvert</code> parameter is <code>false</code> and the data is in the appropriate format.  </p>\n<p>This method returns <code>false</code> when:  </p>\n</li>\n<li><p>The <code>autoConvert</code> parameter is <code>true</code> and this method cannot find data in the specified format, and it cannot convert data to the specified format, or the data was stored with <code>autoConvert</code> set to <code>false</code>.  </p>\n</li>\n<li><p>The <code>autoConvert</code> parameter is <code>false</code>, and data does not exist in this instance in the specified format.  </p>\n</li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> Data can be converted to another format if it was stored specifying that conversion is allowed, and if the requested format is compatible with the stored format. For example, data stored as Unicode can be converted to text.  </p>\n</div>\n<p> For an implementation of this method, see <a class=\"xref\" href=\"system.windows.forms.dataobject#System_Windows_Forms_DataObject_GetDataPresent_\" data-linktype=\"relative-path\">GetDataPresent</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses the <a class=\"xref\" href=\"system.windows.forms.dataobject\" data-linktype=\"relative-path\">DataObject</a> class, which implements <code>IDataObject</code>, to demonstrate the use of the <code>GetDataPresent</code> method. First, it creates a data object (<code>myDataObject</code>) using a string and the <code>Text</code> format. Then it queries the object for data associated with the <code>Text</code> format, with the <code>autoConvert</code> parameter set to <code>false</code>. This trial fails, and the result is displayed in a message box labeled &quot;Message #1.&quot; In the second trial, it sets the <code>autoConvert</code> parameter to <code>true</code>. This trial succeeds, and the result is displayed in a message box labeled &quot;Message #2.&quot; The example assumes that you have created a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> named <code>Form1</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"GetDataPresent3#1\">        private void GetDataPresent3() \n        {\n            // Creates a new data object using a string and the Text format.\n            DataObject myDataObject = new DataObject(DataFormats.Text, &quot;My String&quot;);\n \n            // Checks whether the string can be displayed with autoConvert equal to false.\n            if(myDataObject.GetDataPresent(&quot;System.String&quot;, false)) \n                MessageBox.Show(myDataObject.GetData(&quot;System.String&quot;, false).ToString(), &quot;Message #1&quot;);\n            else\n                MessageBox.Show(&quot;Cannot convert data to the specified format with autoConvert set to false.&quot;, &quot;Message #1&quot;);\n \n            // Displays the string with autoConvert equal to true.\n            MessageBox.Show(&quot;Now that autoConvert is true, you can convert &quot; + \n                myDataObject.GetData(&quot;System.String&quot;, true).ToString() + &quot; to string format.&quot;,&quot;Message #2&quot;);\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"GetDataPresent3#1\">private:\n   void GetDataPresent3()\n   {\n      // Creates a new data object using a string and the Text format.\n      DataObject^ myDataObject = gcnew DataObject( DataFormats::Text,&quot;My String&quot; );\n\n      // Checks whether the string can be displayed with autoConvert equal to false.\n      if ( myDataObject-&gt;GetDataPresent( &quot;System::String&quot;, false ) )\n            MessageBox::Show( myDataObject-&gt;GetData( &quot;System::String&quot;, false )-&gt;ToString(), &quot;Message #1&quot; );\n      else\n            MessageBox::Show( &quot;Cannot convert data to the specified format with autoConvert set to false.&quot;, &quot;Message #1&quot; );\n\n      // Displays the string with autoConvert equal to true.\n      MessageBox::Show( &quot;Now that autoConvert is true, you can convert &quot; + myDataObject-&gt;GetData( &quot;System::String&quot;, true ) + &quot; to string format.&quot;, &quot;Message #2&quot; );\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"GetDataPresent3#1\">    Private Sub GetDataPresent3()\n        &#39; Creates a new data object using a string and the Text format.\n        Dim myDataObject As New DataObject(DataFormats.Text, &quot;My String&quot;)\n\n        &#39; Checks whether the string can be displayed with autoConvert equal to false.\n        If myDataObject.GetDataPresent(&quot;System.String&quot;, False) Then\n            MessageBox.Show(myDataObject.GetData(&quot;System.String&quot;, False).ToString() + &quot;.&quot;, &quot;Message #1&quot;)\n        Else\n            MessageBox.Show(&quot;Cannot convert data to the specified format with autoConvert set to false.&quot;, &quot;Message #1&quot;)\n        End If\n        &#39; Displays the string with autoConvert equal to true.\n        MessageBox.Show((&quot;Now that autoConvert is true, you can convert &quot; + myDataObject.GetData(&quot;System.String&quot;, _\n             True).ToString() + &quot; to string format.&quot;), &quot;Message #2&quot;)\n\n    End Sub &#39;GetDataPresent3\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_IDataObject_GetFormats\">\r\n    \r\n            <a id=\"System_Windows_Forms_IDataObject_GetFormats_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetFormats()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a list of all formats that data stored in this instance is associated with or can be converted to.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string[] GetFormats ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>An array of the names that represents a list of all formats that are supported by the data stored in this object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Call this method to get the supported data formats before calling the <a class=\"xref\" href=\"system.windows.forms.idataobject#System_Windows_Forms_IDataObject_GetData_\" data-linktype=\"relative-path\">GetData</a> method. See the <a class=\"xref\" href=\"system.windows.forms.dataformats\" data-linktype=\"relative-path\">DataFormats</a> class for the predefined formats.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Data can be converted to another format if it was stored specifying that conversion is allowed, and if the requested format is compatible with the stored format. For example, data stored as Unicode can be converted to text.  </p>\n</div>\n<p> For an implementation of this method, see <a class=\"xref\" href=\"system.windows.forms.dataobject#System_Windows_Forms_DataObject_GetFormats_\" data-linktype=\"relative-path\">GetFormats</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses the <a class=\"xref\" href=\"system.windows.forms.dataobject\" data-linktype=\"relative-path\">DataObject</a> class, which implements <code>IDataObject</code>, to demonstrate the use of the <code>GetFormats</code> method. First, it creates a data object (<code>myDataObject</code>) using a string and the <code>Text</code> format. Then it retrieves all the data formats and data conversion formats in the data object, and displays the resulting list in a message box. This example assumes that you have created a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> named <code>Form1</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"GetFormats1#1\">private void GetFormats1() \n{\n    // Creates a data object using a string and the Text format.\n    DataObject myDataObject = new DataObject(DataFormats.Text, &quot;My text string&quot;);\n \n    // Gets all the data formats and data conversion formats in the data object.\n    String[] allFormats = myDataObject.GetFormats();\n\n    // Creates the string that contains the formats.\n    string theResult = &quot;The format(s) associated with the data are: &quot; + &#39;<br>&#39;;\n    for(int i = 0; i &lt; allFormats.Length; i++)\n        theResult += allFormats[i] + &#39;<br>&#39;;\n    // Displays the result in a message box.\n    MessageBox.Show(theResult);\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"GetFormats1#1\">private:\n   void GetFormats1()\n   {\n      // Creates a data object using a string and the Text format.\n      DataObject^ myDataObject = gcnew DataObject( DataFormats::Text,&quot;My text string&quot; );\n      \n      // Gets all the data formats and data conversion formats in the data object.\n      array&lt;String^&gt;^allFormats = myDataObject-&gt;GetFormats();\n      \n      // Creates the string that contains the formats.\n      String^ theResult = &quot;The format(s) associated with the data are: <br>&quot;;\n      for ( int i = 0; i &lt; allFormats-&gt;Length; i++ )\n         theResult = theResult + allFormats[ i ] + &quot;<br>&quot;;\n      \n      // Displays the result in a message box.\n      MessageBox::Show( theResult );\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"GetFormats1#1\">Private Sub GetFormats1()\n   &#39; Creates a data object using a string and the Text format.\n   Dim myDataObject As New DataObject(DataFormats.Text, &quot;My text string&quot;)\n   \n   &#39; Gets all the data formats and data conversion formats in the data object.\n   Dim allFormats As [String]() = myDataObject.GetFormats()\n   \n   &#39; Creates the string that contains the formats.\n   Dim theResult As String = &quot;The format(s) associated with the data are: &quot; &amp; _\n                vbCr\n   Dim i As Integer\n   For i = 0 To allFormats.Length - 1\n      theResult += allFormats(i) + vbCr\n   Next i \n   &#39; Displays the result in a message box.\n   MessageBox.Show(theResult)\nEnd Sub &#39;GetFormats1\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_IDataObject_GetFormats_System_Boolean_\">\r\n    \r\n            <a id=\"System_Windows_Forms_IDataObject_GetFormats_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetFormats(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a list of all formats that data stored in this instance is associated with or can be converted to, using a Boolean value to determine whether to retrieve all formats that the data can be converted to or only native data formats.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string[] GetFormats (bool autoConvert);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>autoConvert</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to retrieve all formats that data stored in this instance is associated with or can be converted to; <code>false</code> to retrieve only native data formats.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>An array of the names that represents a list of all formats that are supported by the data stored in this object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Call this method to get the supported data formats before calling the <a class=\"xref\" href=\"system.windows.forms.idataobject#System_Windows_Forms_IDataObject_GetData_\" data-linktype=\"relative-path\">GetData</a> method. See the <a class=\"xref\" href=\"system.windows.forms.dataformats\" data-linktype=\"relative-path\">DataFormats</a> class for the predefined formats.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Data can be converted to another format if it was stored specifying that conversion is allowed, and if the requested format is compatible with the stored format. For example, data stored as Unicode can be converted to text.  </p>\n</div>\n<p> For an implementation of this method, see <a class=\"xref\" href=\"system.windows.forms.dataobject#System_Windows_Forms_DataObject_GetFormats_\" data-linktype=\"relative-path\">GetFormats</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses the <a class=\"xref\" href=\"system.windows.forms.dataobject\" data-linktype=\"relative-path\">DataObject</a> class, which implements <code>IDataObject</code>, to demonstrate the use of the <code>GetFormats</code> method. First, it creates a data object (<code>myDataObject</code>) using a string and the <code>UnicodeText</code> format. Then it makes two queries to get the formats associated with the data. In the first query, it sets the <code>autoConvert</code> parameter to <code>false</code> : in this case, only the native format of the data is returned. In the second query, it sets the <code>autoConvert</code> parameter to <code>true</code>, so that it gets the list of formats, including the formats that the data can be converted to. In each case, the resulting list is displayed in a message box. This example assumes that you have created a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> named <code>Form1</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"GetFormats2#1\">Private Sub GetFormats2()\n   &#39; Creates a new data object using a string and the UnicodeText format.\n   Dim myDataObject As New DataObject(DataFormats.UnicodeText, &quot;My text string&quot;)\n   \n   &#39; Gets the original data formats in the data object by setting the automatic\n   &#39; conversion parameter to false.\n   Dim myFormatsArray As [String]() = myDataObject.GetFormats(False)\n   \n   &#39; Stores the results in a string.\n   Dim theResult As String = &quot;The original format associated with the data is:&quot; &amp; vbCr\n   Dim i As Integer\n   For i = 0 To myFormatsArray.Length - 1\n      theResult += myFormatsArray(i) + vbCr\n   Next i \n   &#39; Gets all data formats and data conversion formats for the data object.\n   myFormatsArray = myDataObject.GetFormats(True)\n   \n   &#39; Stores the results in the string.\n   theResult += vbCr + &quot;The data format(s) and conversion format(s) associated with &quot; &amp; _\n     &quot;the data are:&quot; &amp; vbCr\n   For i = 0 To myFormatsArray.Length - 1\n      theResult += myFormatsArray(i) + vbCr\n   Next i\n   &#39; Displays the results.\n   MessageBox.Show(theResult)\nEnd Sub &#39;GetFormats2\n</code></pre><pre><code class=\"lang-cpp\" name=\"GetFormats2#1\">private:\n   void GetFormats2()\n   {\n      // Creates a new data object using a string and the UnicodeText format.\n      DataObject^ myDataObject = gcnew DataObject( DataFormats::UnicodeText,&quot;My text string&quot; );\n      \n      // Gets the original data formats in the data object by setting the automatic\n      // conversion parameter to false.\n      array&lt;String^&gt;^myFormatsArray = myDataObject-&gt;GetFormats( false );\n      \n      // Stores the results in a string.\n      String^ theResult = &quot;The original format associated with the data is:<br>&quot;;\n      for ( int i = 0; i &lt; myFormatsArray-&gt;Length; i++ )\n         theResult = theResult + myFormatsArray[ i ] + &quot;<br>&quot;;\n      \n      // Gets all data formats and data conversion formats for the data object.\n      myFormatsArray = myDataObject-&gt;GetFormats( true );\n      \n      // Stores the results in the string.\n      theResult = theResult + &quot;<br>The data format(s) and conversion format(s) associated with the data are:<br>&quot;;\n      for ( int i = 0; i &lt; myFormatsArray-&gt;Length; i++ )\n         theResult = theResult + myFormatsArray[ i ] + &quot;<br>&quot;;\n      \n      // Displays the results.\n      MessageBox::Show( theResult );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"GetFormats2#1\">private void GetFormats2() \n{\n    // Creates a new data object using a string and the UnicodeText format.\n    DataObject myDataObject = new DataObject(DataFormats.UnicodeText, &quot;My text string&quot;);\n\n    // Gets the original data formats in the data object by setting the automatic\n    // conversion parameter to false.\n    String[] myFormatsArray = myDataObject.GetFormats(false);\n\n    // Stores the results in a string.\n    string theResult = &quot;The original format associated with the data is:<br>&quot;;\n    for(int i = 0; i &lt; myFormatsArray.Length; i++)\n        theResult += myFormatsArray[i] + &#39;<br>&#39;;\n\n    // Gets all data formats and data conversion formats for the data object.\n    myFormatsArray = myDataObject.GetFormats(true);\n \n    // Stores the results in the string.\n    theResult += &quot;<br>The data format(s) and conversion format(s) associated with &quot; +\n        &quot;the data are:<br>&quot;;\n    for(int i = 0; i &lt; myFormatsArray.Length; i++)\n        theResult += myFormatsArray[i] + &#39;<br>&#39;;\n\n    // Displays the results.\n    MessageBox.Show(theResult);\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_IDataObject_SetData_System_Object_\">\r\n    \r\n            <a id=\"System_Windows_Forms_IDataObject_SetData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetData(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Stores the specified data in this instance, using the class of the data for the format.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetData (object data);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>data</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The data to store.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The format is derived from the data class.  </p>\n<p> Data stored using this method can be converted to a compatible format when it is retrieved.  </p>\n<p> For an implementation of this method, see <a class=\"xref\" href=\"system.windows.forms.dataobject#System_Windows_Forms_DataObject_SetData_\" data-linktype=\"relative-path\">SetData</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses the <a class=\"xref\" href=\"system.windows.forms.dataobject\" data-linktype=\"relative-path\">DataObject</a> class, which implements <code>IDataObject</code>, to demonstrate the use of the <code>SetData</code> method. First, it creates a component (<code>myComponent</code>) and stores it in a data object (<code>myDataObject</code>). Then it checks whether the specified data is stored in the data object, and displays the result in a message box. The example assumes that you have created a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> named <code>Form1</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"SetData1#1\">private void SetData1() \n{\n    // Creates a component to store in the data object.\n    Component myComponent = new Component();\n \n    // Creates a data object.\n    DataObject myDataObject = new DataObject();\n\n    // Adds the component to the data object.\n    myDataObject.SetData(myComponent);\n \n    // Checks whether data of the specified type is in the data object.\n    Type myType = myComponent.GetType();\n    string myMessageText;\n    if(myDataObject.GetDataPresent(myType))\n         myMessageText = &quot;Data of type &quot; + myType.Name + \n            &quot; is present in the data object&quot;;\n    else\n        myMessageText = &quot;Data of type &quot; + myType.Name +\n            &quot; is not present in the data object&quot;;\n\n    // Displays the result in a message box.\n    MessageBox.Show(myMessageText, &quot;The Test Result&quot;); \n}\n</code></pre><pre><code class=\"lang-vb\" name=\"SetData1#1\">Private Sub SetData1()\n   &#39; Creates a component to store in the data object.\n   Dim myComponent As New System.ComponentModel.Component()\n   \n   &#39; Creates a data object.\n   Dim myDataObject As New DataObject()\n   \n   &#39; Adds the component to the data object.\n   myDataObject.SetData(myComponent)\n   \n   &#39; Checks whether data of the specified type is in the data object.\n   Dim myType As Type = myComponent.GetType()\n   Dim myMessageText As String\n   If myDataObject.GetDataPresent(myType) Then\n      myMessageText = &quot;Data of type &quot; + myType.Name + &quot; is present in the data object&quot;\n   Else\n      myMessageText = &quot;Data of type &quot; + myType.Name + &quot; is not present in the data object&quot;\n   End If\n\n   &#39; Displays the result in a message box.\n   MessageBox.Show(myMessageText, &quot;The Test Result&quot;)\nEnd Sub &#39;SetData1\n</code></pre><pre><code class=\"lang-cpp\" name=\"SetData1#1\">private:\n   void SetData1()\n   {\n      // Creates a component to store in the data object.\n      Component^ myComponent = gcnew Component;\n      \n      // Creates a data object.\n      DataObject^ myDataObject = gcnew DataObject;\n      \n      // Adds the component to the data object.\n      myDataObject-&gt;SetData( myComponent );\n      \n      // Checks whether data of the specified type is in the data object.\n      Type^ myType = myComponent-&gt;GetType();\n      String^ myMessageText;\n      if ( myDataObject-&gt;GetDataPresent( myType ) )\n      {\n         myMessageText = &quot;Data of type &quot; + myType-&gt;Name +\n            &quot; is present in the data object&quot;;\n      }\n      else\n      {\n         myMessageText = &quot;Data of type &quot; + myType-&gt;Name +\n            &quot; is not present in the data object&quot;;\n      }\n      \n      // Displays the result in a message box.\n      MessageBox::Show( myMessageText, &quot;The Test Result&quot; );\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_IDataObject_SetData_System_String_System_Object_\">\r\n    \r\n            <a id=\"System_Windows_Forms_IDataObject_SetData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetData(String,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Stores the specified data and its associated format in this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetData (string format, object data);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The format associated with the data. See <a class=\"xref\" href=\"system.windows.forms.dataformats\" data-linktype=\"relative-path\">DataFormats</a> for predefined formats.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>data</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The data to store.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If you do not know the format of the target application, you can store data in multiple formats using this method.  </p>\n<p> Data stored using this method can be converted to a compatible format when it is retrieved.  </p>\n<p> For an implementation of this method, see <a class=\"xref\" href=\"system.windows.forms.dataobject#System_Windows_Forms_DataObject_SetData_\" data-linktype=\"relative-path\">SetData</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses the <a class=\"xref\" href=\"system.windows.forms.dataobject\" data-linktype=\"relative-path\">DataObject</a> class, which implements <code>IDataObject</code>, to demonstrate the use of the <code>SetData</code> method. First, it creates a data object (<code>myDataObject</code>) and stores a string in the object specifying the <code>UnicodeText</code> format. Then it retrieves that data stored in the object specifying the <code>Text</code> format, so that the data is converted to the <code>Text</code> format. The result is displayed in a message box. This example assumes that you have created a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> named <code>Form1</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"SetData2#1\">private void SetData2() \n{\n    // Creates a data object.\n    DataObject myDataObject = new DataObject();\n \n    // Stores a string, specifying the UnicodeText format.\n    myDataObject.SetData(DataFormats.UnicodeText, &quot;Hello World!&quot;);\n \n    // Retrieves the data by specifying the Text format.\n    string myMessageText = &quot;The data type is &quot; + myDataObject.GetData(DataFormats.Text).GetType().Name;\n\n    // Displays the result.\n    MessageBox.Show(myMessageText, &quot;The Test Result&quot;);\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"SetData2#1\">private:\n   void SetData2()\n   {\n      // Creates a data object.\n      DataObject^ myDataObject = gcnew DataObject;\n      \n      // Stores a string, specifying the UnicodeText format.\n      myDataObject-&gt;SetData( DataFormats::UnicodeText, &quot;Hello World!&quot; );\n      \n      // Retrieves the data by specifying the Text format.\n      String^ myMessageText = &quot;The data type is &quot; +\n         myDataObject-&gt;GetData( DataFormats::Text )-&gt;GetType()-&gt;Name;\n      \n      // Displays the result.\n      MessageBox::Show( myMessageText, &quot;The Test Result&quot; );\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"SetData2#1\">Private Sub SetData2()\n   &#39; Creates a data object.\n   Dim myDataObject As New DataObject()\n   \n   &#39; Stores a string, specifying the UnicodeText format.\n   myDataObject.SetData(DataFormats.UnicodeText, &quot;Hello World!&quot;)\n   \n   &#39; Retrieves the data by specifying the Text format.\n   Dim myMessageText As String = &quot;The data type is &quot; &amp; _\n             myDataObject.GetData(DataFormats.Text).GetType().Name\n   \n   &#39; Displays the result.\n   MessageBox.Show(myMessageText, &quot;The Test Result&quot;)\nEnd Sub &#39;SetData2\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_IDataObject_SetData_System_Type_System_Object_\">\r\n    \r\n            <a id=\"System_Windows_Forms_IDataObject_SetData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetData(Type,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Stores the specified data and its associated class type in this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetData (Type format, object data);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> representing the format associated with the data. See <a class=\"xref\" href=\"system.windows.forms.dataformats\" data-linktype=\"relative-path\">DataFormats</a> for predefined formats.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>data</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The data to store.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If you do not know the format of the target application, you can store data in multiple formats using this method.  </p>\n<p> Data stored using this method can be converted to a compatible format when it is retrieved.  </p>\n<p> For an implementation of this method, see <a class=\"xref\" href=\"system.windows.forms.dataobject#System_Windows_Forms_DataObject_SetData_\" data-linktype=\"relative-path\">SetData</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses the <a class=\"xref\" href=\"system.windows.forms.dataobject\" data-linktype=\"relative-path\">DataObject</a> class, which implements <code>IDataObject</code>, to demonstrate the use of the <code>SetData</code> method. First, it creates a component (<code>myComponent</code>) and stores it in a data object (<code>myDataObject</code>), using <code>myType</code> to specify the data format. Then it checks whether the data of the specified type is stored in the object, and displays the result in a message box. The example assumes that you have created a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> named <code>Form1</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"SetData3#1\">Private Sub SetData3()\n   &#39; Creates a component.\n   Dim myComponent As New System.ComponentModel.Component()\n   \n   &#39; Gets the type of the component.\n   Dim myType As Type = myComponent.GetType()\n   \n   &#39; Creates a data object.\n   Dim myDataObject As New DataObject()\n   \n   &#39; Stores the component in the data object.\n   myDataObject.SetData(myType, myComponent)\n   \n   &#39; Checks whether data of the specified type is in the data object.\n   Dim myMessageText As String\n   If myDataObject.GetDataPresent(myType) Then\n      myMessageText = &quot;Data of type &quot; &amp; myType.Name &amp; &quot; is stored in the data object&quot;\n   Else\n      myMessageText = &quot;No data of type &quot; &amp; myType.Name &amp; &quot; is stored in the data object&quot;\n   End If\n   \n   &#39; Displays the result.\n   MessageBox.Show(myMessageText, &quot;The Test Result&quot;)\nEnd Sub &#39;SetData3\n</code></pre><pre><code class=\"lang-cpp\" name=\"SetData3#1\">private:\n   void SetData3()\n   {\n      // Creates a component.\n      Component^ myComponent = gcnew Component;\n      \n      // Gets the type of the component.\n      Type^ myType = myComponent-&gt;GetType();\n      \n      // Creates a data object.\n      DataObject^ myDataObject = gcnew DataObject;\n      \n      // Stores the component in the data object.\n      myDataObject-&gt;SetData( myType, myComponent );\n      \n      // Checks whether data of the specified type is in the data object.\n      String^ myMessageText;\n      if ( myDataObject-&gt;GetDataPresent( myType ) )\n      {\n         myMessageText = &quot;Data of type &quot; + myType-&gt;Name +\n            &quot; is stored in the data object&quot;;\n      }\n      else\n      {\n         myMessageText = &quot;No data of type &quot; + myType-&gt;Name +\n            &quot; is stored in the data object&quot;;\n      }\n      \n      // Displays the result.\n      MessageBox::Show( myMessageText, &quot;The Test Result&quot; );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"SetData3#1\">private void SetData3() \n{\n    // Creates a component.\n    Component myComponent = new Component();\n \n    // Gets the type of the component.\n    Type myType = myComponent.GetType();\n \n    // Creates a data object.\n    DataObject myDataObject = new DataObject();\n \n    // Stores the component in the data object.\n    myDataObject.SetData(myType, myComponent);\n \n    // Checks whether data of the specified type is in the data object.\n    string myMessageText;\n    if(myDataObject.GetDataPresent(myType))\n        myMessageText = &quot;Data of type &quot; + myType.Name + \n            &quot; is stored in the data object&quot;;\n    else\n        myMessageText = &quot;No data of type &quot; + myType.Name +\n            &quot; is stored in the data object&quot;;\n            \n    // Displays the result.\n    MessageBox.Show(myMessageText, &quot;The Test Result&quot;);\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_IDataObject_SetData_System_String_System_Boolean_System_Object_\">\r\n    \r\n            <a id=\"System_Windows_Forms_IDataObject_SetData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetData(String,Boolean,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Stores the specified data and its associated format in this instance, using a Boolean value to specify whether the data can be converted to another format.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetData (string format, bool autoConvert, object data);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The format associated with the data. See <a class=\"xref\" href=\"system.windows.forms.dataformats\" data-linktype=\"relative-path\">DataFormats</a> for predefined formats.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>autoConvert</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to allow the data to be converted to another format; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>data</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The data to store.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If you do not know the format of the target application, you can store data in multiple formats using this method.  </p>\n<p> For an implementation of this method, see <a class=\"xref\" href=\"system.windows.forms.dataobject#System_Windows_Forms_DataObject_SetData_\" data-linktype=\"relative-path\">SetData</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses the <a class=\"xref\" href=\"system.windows.forms.dataobject\" data-linktype=\"relative-path\">DataObject</a> class, which implements <code>IDataObject</code>, to demonstrate the use of the <code>SetData</code> method. First, it creates a data object (<code>myDataObject</code>) and stores a <code>UnicodeText</code> string in it, with the <code>autoConvert</code> parameter set to <code>false</code>. Then it retrieves the format(s) associated with the data stored in the object and displays the result in a message box. The only format associated with the data is the <code>UnicodeText</code> format. This example assumes that you have created a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> named <code>Form1</code>.  </p>\n<pre><code class=\"lang-cpp\" name=\"SetData4#1\">   private:\n      void SetData4()\n      {\n         // Creates a new data object.\n         DataObject^ myDataObject = gcnew DataObject;\n\n         // Adds UnicodeText string to the object, and set the autoConvert\n         // parameter to false.\n         myDataObject-&gt;SetData( DataFormats::UnicodeText, false, &quot;My text String*&quot; );\n\n         // Gets the data format(s) in the data object.\n         array&lt;String^&gt;^arrayOfFormats = myDataObject-&gt;GetFormats();\n\n         // Stores the results in a string.\n         String^ theResult = &quot;The format(s) associated with the data are: <br>&quot;;\n         for ( int i = 0; i &lt; arrayOfFormats-&gt;Length; i++ )\n            theResult = theResult + arrayOfFormats[ i ], &quot; <br>&quot;;\n\n         // Show the results in a message box.\n         MessageBox::Show( theResult );\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"SetData4#1\">    Private Sub SetData4()\n        &#39; Creates a new data object.\n        Dim myDataObject As New DataObject()\n\n        &#39; Adds UnicodeText string to the object, and set the autoConvert\n        &#39; parameter to false.\n        myDataObject.SetData(DataFormats.UnicodeText, False, &quot;My text string&quot;)\n\n        &#39; Gets the data format(s) in the data object.\n        Dim arrayOfFormats As [String]() = myDataObject.GetFormats()\n\n        &#39; Stores the results in a string.\n        Dim theResult As String = &quot;The format(s) associated with the data are:&quot; + _\n                ControlChars.Cr\n        Dim i As Integer\n        For i = 0 To arrayOfFormats.Length - 1\n            theResult += arrayOfFormats(i) + ControlChars.Cr\n        Next i\n        &#39; Show the results in a message box. \n        MessageBox.Show(theResult)\n    End Sub &#39;SetData4 \n</code></pre><pre><code class=\"lang-cs\" name=\"SetData4#1\">        private void SetData4() \n        {\n            // Creates a new data object.\n            DataObject myDataObject = new DataObject();\n \n            // Adds UnicodeText string to the object, and set the autoConvert \n            // parameter to false.\n            myDataObject.SetData(DataFormats.UnicodeText, false, &quot;My text string&quot;);\n \n            // Gets the data format(s) in the data object.\n            String[] arrayOfFormats = myDataObject.GetFormats();\n \n            // Stores the results in a string.\n            string theResult = &quot;The format(s) associated with the data are:&quot; + &#39;<br>&#39;;\n            for(int i=0; i&lt;arrayOfFormats.Length; i++)\n                theResult += arrayOfFormats[i] + &#39;<br>&#39;;\n            \n            // Show the results in a message box. \n            MessageBox.Show(theResult);\n\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Forms.IDataObject.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Forms.IDataObject.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.IDataObject\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.IDataObject.GetData\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.IDataObject.GetDataPresent\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.IDataObject.GetFormats\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.IDataObject.SetData\">\r\n<meta name=\"APILocation\" content=\"System.Windows.Forms.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"0ec338a4-1091-84c2-86bb-2b60689d9fa0\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides a format-independent mechanism for transferring data.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Windows.Forms/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Forms.IDataObject\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Forms.IDataObject.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Forms.IDataObject.yml","open_to_public_contributors":true,"api_name":["System.Windows.Forms.IDataObject","System.Windows.Forms.IDataObject.GetData","System.Windows.Forms.IDataObject.GetDataPresent","System.Windows.Forms.IDataObject.GetFormats","System.Windows.Forms.IDataObject.SetData"],"api_location":["System.Windows.Forms.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Forms.IDataObject","System::Windows::Forms::IDataObject","System.Windows.Forms.IDataObject.GetData","System::Windows::Forms::IDataObject::GetData","System.Windows.Forms.IDataObject.GetDataPresent","System::Windows::Forms::IDataObject::GetDataPresent","System.Windows.Forms.IDataObject.GetFormats","System::Windows::Forms::IDataObject::GetFormats","System.Windows.Forms.IDataObject.SetData","System::Windows::Forms::IDataObject::SetData"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"0ec338a4-1091-84c2-86bb-2b60689d9fa0","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Windows.Forms/IDataObject.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IDataObject interface | Microsoft Docs","_op_ogTitle":"IDataObject interface","description":"Provides a format-independent mechanism for transferring data.\n","toc_asset_id":"_splitted/System.Windows.Forms/toc.json","toc_rel":"_splitted/System.Windows.Forms/toc.json","source_url":"","ms.assetid":"System.Windows.Forms.IDataObject","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.forms.idataobject","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.forms.idataobject","fileRelativePath":"System.Windows.Forms.IDataObject.html"},"themesRelativePathToOutputRoot":"_themes/"}