{"content":"    \r\n    <h1 id=\"System_Tuple_7\">\r\n      <span class=\"lang-csharp\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a 7-tuple, or septuple.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt; : IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable</code></pre>\r\n    \r\n    \r\n    \t<h2>Type Parameters</h2>\r\n    \r\n    \t<table class=\"nameValue\">\r\n    \t\t<tr>\r\n    \t\t<td>\r\n    \t\tT1\r\n    \t\t</td>\r\n    \t\t<td>\r\n    \t\t<p>The type of the tuple&#39;s first component.</p>\n\r\n    \t\t</td>\r\n    \t\t</tr>\r\n    \t\t<tr>\r\n    \t\t<td>\r\n    \t\tT2\r\n    \t\t</td>\r\n    \t\t<td>\r\n    \t\t<p>The type of the tuple&#39;s second component.</p>\n\r\n    \t\t</td>\r\n    \t\t</tr>\r\n    \t\t<tr>\r\n    \t\t<td>\r\n    \t\tT3\r\n    \t\t</td>\r\n    \t\t<td>\r\n    \t\t<p>The type of the tuple&#39;s third component.</p>\n\r\n    \t\t</td>\r\n    \t\t</tr>\r\n    \t\t<tr>\r\n    \t\t<td>\r\n    \t\tT4\r\n    \t\t</td>\r\n    \t\t<td>\r\n    \t\t<p>The type of the tuple&#39;s fourth component.</p>\n\r\n    \t\t</td>\r\n    \t\t</tr>\r\n    \t\t<tr>\r\n    \t\t<td>\r\n    \t\tT5\r\n    \t\t</td>\r\n    \t\t<td>\r\n    \t\t<p>The type of the tuple&#39;s fifth component.</p>\n\r\n    \t\t</td>\r\n    \t\t</tr>\r\n    \t\t<tr>\r\n    \t\t<td>\r\n    \t\tT6\r\n    \t\t</td>\r\n    \t\t<td>\r\n    \t\t<p>The type of the tuple&#39;s sixth component.</p>\n\r\n    \t\t</td>\r\n    \t\t</tr>\r\n    \t\t<tr>\r\n    \t\t<td>\r\n    \t\tT7\r\n    \t\t</td>\r\n    \t\t<td>\r\n    \t\t<p>The type of the tuple&#39;s seventh component.</p>\n\r\n    \t\t</td>\r\n    \t\t</tr>\r\n    \t</table>\r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>A tuple is a data structure that has a specific number and sequence of values. The Tuple(T1, class represents a 7-tuple, or septuple, which is a tuple that has seven components.  </p>\n<p> You can instantiate a Tuple(T1, object by calling either the <a class=\"xref\" href=\"system.tuple-7#System_Tuple_7__ctor_\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;</a> or the static <a class=\"xref\" href=\"system.tuple#System_Tuple_Create__7___0___1___2___3___4___5___6_\" data-linktype=\"relative-path\">System.Tuple.Create&lt;T1,T2,T3,T4,T5,T6,T7&gt;(T1,T2,T3,T4,T5,T6,T7)</a> method. You can retrieve the value of the tuple&#39;s components by using the read-only <a class=\"xref\" href=\"system.tuple-7#System_Tuple_7_Item1_\" data-linktype=\"relative-path\">Item1</a>, <a class=\"xref\" href=\"system.tuple-7#System_Tuple_7_Item2_\" data-linktype=\"relative-path\">Item2</a>, <a class=\"xref\" href=\"system.tuple-7#System_Tuple_7_Item3_\" data-linktype=\"relative-path\">Item3</a>, <a class=\"xref\" href=\"system.tuple-7#System_Tuple_7_Item4_\" data-linktype=\"relative-path\">Item4</a>, <a class=\"xref\" href=\"system.tuple-7#System_Tuple_7_Item5_\" data-linktype=\"relative-path\">Item5</a>, <a class=\"xref\" href=\"system.tuple-7#System_Tuple_7_Item6_\" data-linktype=\"relative-path\">Item6</a>, and <a class=\"xref\" href=\"system.tuple-7#System_Tuple_7_Item7_\" data-linktype=\"relative-path\">Item7</a> instance properties.  </p>\n<p> Tuples are commonly used in four different ways:  </p>\n<ul>\n<li><p>To represent a single set of data. For example, a tuple can represent a database record, and its components can represent individual fields of the record.  </p>\n</li>\n<li><p>To provide easy access to, and manipulation of, a data set. The following example defines a Tuple(T1, object that contains population data for New York City for each census from 1950 through 2000. The septuple is passed to the <code>ComputePopulationChange</code> method, which calculates the annual rate of change between censuses, as well as the annual rate of change for the entire 60 year period.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple`7.Class#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Get population data for New York City, 1950-2000.\n      var population = Tuple.Create(&quot;New York&quot;, 7891957, 7781984, \n                                    7894862, 7071639, 7322564, 8008278);\n      var rate = ComputePopulationChange(population);\n      // Display results.\n      Console.WriteLine(&quot;Population Change, {0}, 1950-2000\\n&quot;, population.Item1);\n      Console.WriteLine(&quot;Year      {0,10} {1,9}&quot;, &quot;Population&quot;, &quot;Annual Rate&quot;);\n      Console.WriteLine(&quot;1950      {0,10:N0} {1,11}&quot;, population.Item2, &quot;NA&quot;);\n      Console.WriteLine(&quot;1960      {0,10:N0} {1,11:P2}&quot;, population.Item3, rate.Item2/10);\n      Console.WriteLine(&quot;1970      {0,10:N0} {1,11:P2}&quot;, population.Item4, rate.Item3/10);\n      Console.WriteLine(&quot;1980      {0,10:N0} {1,11:P2}&quot;, population.Item5, rate.Item4/10);\n      Console.WriteLine(&quot;1990      {0,10:N0} {1,11:P2}&quot;, population.Item6, rate.Item5/10);\n      Console.WriteLine(&quot;2000      {0,10:N0} {1,11:P2}&quot;, population.Item7, rate.Item6/10);\n      Console.WriteLine(&quot;1950-2000 {0,10:N0} {1,11:P2}&quot;, &quot;&quot;, rate.Item7/50);\n   }\n\n   private static Tuple&lt;string, double, double, double, double, double, double&gt; \n        ComputePopulationChange(\n           Tuple&lt;string, int, int, int, int, int, int&gt; data)  \n   {           \n      var rate = Tuple.Create(data.Item1, \n                       (double)(data.Item3 - data.Item2)/data.Item2, \n                       (double)(data.Item4 - data.Item3)/data.Item3, \n                       (double)(data.Item5 - data.Item4)/data.Item4, \n                       (double)(data.Item6 - data.Item5)/data.Item5,\n                       (double)(data.Item7 - data.Item6)/data.Item6,\n                       (double)(data.Item7 - data.Item2)/data.Item2 );\n      return rate;\n   }           \n}\n// The example displays the following output:\n//       Population Change, New York, 1950-2000\n//       \n//       Year      Population Annual Rate\n//       1950       7,891,957          NA\n//       1960       7,781,984     -0.14 %\n//       1970       7,894,862      0.15 %\n//       1980       7,071,639     -1.04 %\n//       1990       7,322,564      0.35 %\n//       2000       8,008,278      0.94 %\n//       1950-2000                 0.03 %\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple`7.Class#1\">Module Example\n   Public Sub Main()\n      &#39; Get population data for New York City, 1950-2000.\n      Dim population = Tuple.Create(&quot;New York&quot;, 7891957, 7781984, \n                                    7894862, 7071639, 7322564, 8008278)\n      Dim rate = ComputePopulationChange(population)      \n      &#39; Display results.\n      Console.WriteLine(&quot;Population Change, {0}, 1950-2000&quot;, population.Item1)\n      Console.WriteLine()\n      Console.WriteLine(&quot;Year      {0,10} {1,9}&quot;, &quot;Population&quot;, &quot;Annual Rate&quot;)\n      Console.WriteLine(&quot;1950      {0,10:N0} {1,11}&quot;, population.Item2, &quot;NA&quot;)\n      Console.WriteLine(&quot;1960      {0,10:N0} {1,11:P2}&quot;, population.Item3, rate.Item2/10)\n      Console.WriteLine(&quot;1970      {0,10:N0} {1,11:P2}&quot;, population.Item4, rate.Item3/10)\n      Console.WriteLine(&quot;1980      {0,10:N0} {1,11:P2}&quot;, population.Item5, rate.Item4/10)\n      Console.WriteLine(&quot;1990      {0,10:N0} {1,11:P2}&quot;, population.Item6, rate.Item5/10)\n      Console.WriteLine(&quot;2000      {0,10:N0} {1,11:P2}&quot;, population.Item7, rate.Item6/10)\n      Console.WriteLine(&quot;1950-2000 {0,10:N0} {1,11:P2}&quot;, &quot;&quot;, rate.Item7/50)\n   End Sub\n   \n      &#39; Compute rate of population change by decade and overall.\n   Private Function ComputePopulationChange(data As Tuple(Of String, Integer, Integer, Integer, Integer, Integer, Integer)) _ \n           As Tuple(Of String, Double, Double, Double, Double, Double, Double)\n      Dim rate = Tuple.Create( data.Item1, \n                       (data.Item3 - data.Item2)/data.Item2, \n                       (data.Item4 - data.Item3)/data.Item3, \n                       (data.Item5 - data.Item4)/data.Item4, \n                       (data.Item6 - data.Item5)/data.Item5,\n                       (data.Item7 - data.Item6)/data.Item6,\n                       (data.Item7 - data.Item2)/data.Item2 )\n      Return rate\n   End Function           \nEnd Module\n&#39; The example displays the following output:\n&#39;       Population Change, New York, 1950-2000\n&#39;       \n&#39;       Year      Population Annual Rate\n&#39;       1950       7,891,957          NA\n&#39;       1960       7,781,984     -0.14 %\n&#39;       1970       7,894,862      0.15 %\n&#39;       1980       7,071,639     -1.04 %\n&#39;       1990       7,322,564      0.35 %\n&#39;       2000       8,008,278      0.94 %\n&#39;       1950-2000                 0.03 %\n</code></pre></li>\n<li><p>To return multiple values from a method without the use of <code>out</code> parameters (in C#) or <code>ByRef</code> parameters (in Visual Basic). For example, the previous example returns its computed statistics, along with the city name, in a Tuple(T1, object.  </p>\n</li>\n<li><p>To pass multiple values to a method through a single parameter. For example, the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_Start_System_Object_\" data-linktype=\"relative-path\">System.Threading.Thread.Start(Object)</a> method has a single parameter that lets you supply one value to the method that the thread executes at startup. If you supply a Tuple(T1, object as the method argument, you can supply the threadâ€™s startup routine with seven items of data.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_7__ctor__0__1__2__3__4__5__6_\" data-linktype=\"self-bookmark\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;(T1,T2,T3,T4,T5,T6,T7)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Tuple`7</span> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_7_Item1\" data-linktype=\"self-bookmark\">Item1</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the current <span class=\"xref\">stem.Tuple`7</span> object&#39;s first component.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_7_Item2\" data-linktype=\"self-bookmark\">Item2</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the current <span class=\"xref\">stem.Tuple`7</span> object&#39;s second component.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_7_Item3\" data-linktype=\"self-bookmark\">Item3</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the current <span class=\"xref\">stem.Tuple`7</span> object&#39;s third component.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_7_Item4\" data-linktype=\"self-bookmark\">Item4</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the current <span class=\"xref\">stem.Tuple`7</span> object&#39;s fourth component.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_7_Item5\" data-linktype=\"self-bookmark\">Item5</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the current <span class=\"xref\">stem.Tuple`7</span> object&#39;s fifth component.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_7_Item6\" data-linktype=\"self-bookmark\">Item6</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the current <span class=\"xref\">stem.Tuple`7</span> object&#39;s sixth component.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_7_Item7\" data-linktype=\"self-bookmark\">Item7</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the current <span class=\"xref\">stem.Tuple`7</span> object&#39;s seventh component.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_7_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value that indicates whether the current <span class=\"xref\">stem.Tuple`7</span> object is equal to a specified object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_7_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the hash code for the current <span class=\"xref\">stem.Tuple`7</span> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_7_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string that represents the value of this <span class=\"xref\">stem.Tuple`7</span> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_7_System_Collections_IStructuralComparable_CompareTo_System_Object_System_Collections_IComparer_\" data-linktype=\"self-bookmark\">IStructuralComparable.CompareTo(Object,IComparer)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares the current <span class=\"xref\">stem.Tuple`7</span> object to a specified object by using a specified comparer, and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_7_System_Collections_IStructuralEquatable_Equals_System_Object_System_Collections_IEqualityComparer_\" data-linktype=\"self-bookmark\">IStructuralEquatable.Equals(Object,IEqualityComparer)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value that indicates whether the current <span class=\"xref\">stem.Tuple`7</span> object is equal to a specified object based on a specified comparison method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_7_System_Collections_IStructuralEquatable_GetHashCode_System_Collections_IEqualityComparer_\" data-linktype=\"self-bookmark\">IStructuralEquatable.GetHashCode(IEqualityComparer)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calculates the hash code for the current <span class=\"xref\">stem.Tuple`7</span> object by using a specified computation method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_7_System_IComparable_CompareTo_System_Object_\" data-linktype=\"self-bookmark\">IComparable.CompareTo(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares the current <span class=\"xref\">stem.Tuple`7</span> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_7__ctor__0__1__2__3__4__5__6_\">\r\n    \r\n            <a id=\"System_Tuple_7__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;(T1,T2,T3,T4,T5,T6,T7)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Tuple`7</span> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Tuple (T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>item1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T1</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value of the tuple&#39;s first component.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>item2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T2</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value of the tuple&#39;s second component.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>item3</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T3</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value of the tuple&#39;s third component.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>item4</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T4</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value of the tuple&#39;s fourth component</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>item5</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T5</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value of the tuple&#39;s fifth component.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>item6</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T6</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value of the tuple&#39;s sixth component.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>item7</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T7</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value of the tuple&#39;s seventh component.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can use the static <a class=\"xref\" href=\"system.tuple#System_Tuple_Create__7___0___1___2___3___4___5___6_\" data-linktype=\"relative-path\">System.Tuple.Create&lt;T1,T2,T3,T4,T5,T6,T7&gt;(T1,T2,T3,T4,T5,T6,T7)</a> method to instantiate a 7-tuple object without having to explicitly specify the types of its components. The following example uses the <a class=\"xref\" href=\"system.tuple#System_Tuple_Create__7___0___1___2___3___4___5___6_\" data-linktype=\"relative-path\">System.Tuple.Create&lt;T1,T2,T3,T4,T5,T6,T7&gt;(T1,T2,T3,T4,T5,T6,T7)</a> method to instantiate a 7-tuple whose first component is of type <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> and whose remaining components are of type <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple.Create#13\">            var tuple7 = Tuple.Create(&quot;Jane&quot;, 90, 87, 93, 67, 100, 92);\n            Console.WriteLine(&quot;Test scores for {0}: {1}, {2}, {3}, {4}, {5}, {6}&quot;,\n                              tuple7.Item1, tuple7.Item2, tuple7.Item3,\n                              tuple7.Item4, tuple7.Item5, tuple7.Item6,\n                              tuple7.Item7);\n            // Displays Test scores for Jane: 90, 87, 93, 67, 100, 92\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple.Create#13\">        Dim tuple7 = Tuple.Create(&quot;Jane&quot;, 90, 87, 93, 67, 100, 92)\n        Console.WriteLine(&quot;Test scores for {0}: {1}, {2}, {3}, {4}, {5}, {6}&quot;,\n                          tuple7.Item1, tuple7.Item2, tuple7.Item3,\n                          tuple7.Item4, tuple7.Item5, tuple7.Item6,\n                          tuple7.Item7)\n        &#39; Displays Test scores for Jane: 90, 87, 93, 67, 100, 92\n</code></pre><p> This is equivalent to the following call to the Tuple(T1, class constructor.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple.Create#14\">            var tuple7 = new Tuple&lt;string, int, int, int, int, int, int&gt;\n                                  (&quot;Jane&quot;, 90, 87, 93, 67, 100, 92);\n            Console.WriteLine(&quot;Test scores for {0}: {1}, {2}, {3}, {4}, {5}, {6}&quot;,\n                              tuple7.Item1, tuple7.Item2, tuple7.Item3,\n                              tuple7.Item4, tuple7.Item5, tuple7.Item6,\n                              tuple7.Item7);\n            // Displays Test scores for Jane: 90, 87, 93, 67, 100, 92\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple.Create#14\">        Dim tuple7 = New Tuple(Of String, Integer, Integer, \n                               Integer, Integer, Integer, Integer) _\n                               (&quot;Jane&quot;, 90, 87, 93, 67, 100, 92)\n        Console.WriteLine(&quot;Test scores for {0}: {1}, {2}, {3}, {4}, {5}, {6}&quot;,\n                          tuple7.Item1, tuple7.Item2, tuple7.Item3,\n                          tuple7.Item4, tuple7.Item5, tuple7.Item6,\n                          tuple7.Item7)\n        &#39; Displays Test scores for Jane: 90, 87, 93, 67, 100, 92\n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_7_Item1\">\r\n    \r\n            <a id=\"System_Tuple_7_Item1_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Item1</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the current <span class=\"xref\">stem.Tuple`7</span> object&#39;s first component.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public T1 Item1 { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">T1</span></div>\r\n                  </div>\r\n                  <p>The value of the current <span class=\"xref\">stem.Tuple`7</span> object&#39;s first component.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can dynamically determine the type of the Item1 component in one of two ways:  </p>\n<ul>\n<li><p>By calling the <code>GetType</code> method on the value that is returned by the Item1 property.  </p>\n</li>\n<li><p>By retrieving the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the <a class=\"xref\" href=\"system.tuple-7\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;</a> object, and retrieving the first element from the array that is returned by its <a class=\"xref\" href=\"system.type#System_Type_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines an array of <a class=\"xref\" href=\"system.tuple-7\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;</a> objects whose components contain population data for three U.S. cities (New York, Chicago, and Los Angeles) from 1950 through 2000. It then displays a table that lists the data. To display the city name, it retrieves the value of the Item1 property for each <a class=\"xref\" href=\"system.tuple-7\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;</a> object.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple`7.Item1#1\">using System;\nusing System.Text.RegularExpressions;\n\npublic class Class1\n{\n   public static void Main()\n   {\n      // Create tuples containing population data for New York, Chicago, \n      // and Los Angeles, 1960-2000.\n      Tuple&lt;string, int, int, int, int, int, int&gt;[] cities =\n           { Tuple.Create(&quot;New York&quot;, 7891957, 7781984, 7894862, 7071639, 7322564, 8008278),\n             Tuple.Create(&quot;Los Angeles&quot;, 1970358, 2479015, 2816061, 2966850, 3485398, 3694820),\n             Tuple.Create(&quot;Chicago&quot;, 3620962, 3550904, 3366957, 3005072, 2783726, 2896016) };\n\n      // Display tuple data in table.\n      string header = &quot;Population in&quot;;\n      Console.WriteLine(&quot;{0,-12} {1,66}&quot;, \n                        &quot;City&quot;, new String(&#39;-&#39;,(66-header.Length)/2) + header + \n                                new String(&#39;-&#39;, (66-header.Length)/2));\n      Console.WriteLine(&quot;{0,24}{1,11}{2,11}{3,11}{4,11}{5,11}<br>&quot;, \n                        &quot;1950&quot;, &quot;1960&quot;, &quot;1970&quot;, &quot;1980&quot;, &quot;1990&quot;, &quot;2000&quot;);         \n\n      foreach (var city in cities)                      \n         Console.WriteLine(&quot;{0,-12} {1,11:N0}{2,11:N0}{3,11:N0}{4,11:N0}{5,11:N0}{6,11:N0}&quot;, \n                           city.Item1, city.Item2, city.Item3, city.Item4, \n                           city.Item5, city.Item6, city.Item7);\n   }\n}\n// The example displays the following output:\n//   City          --------------------------Population in--------------------------\n//                       1950       1960       1970       1980       1990       2000\n//\n//   New York       7,891,957  7,781,984  7,894,862  7,071,639  7,322,564  8,008,278\n//   Los Angeles    1,970,358  2,479,015  2,816,061  2,966,850  3,485,398  3,694,820\n//   Chicago        3,620,962  3,550,904  3,366,957  3,005,072  2,783,726  2,896,016\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple`7.Item1#1\">Module Example\n   Public Sub Main()\n      &#39; Create tuples containing population data for New York, Chicago, \n      &#39; and Los Angeles, 1960-2000.\n      Dim cities() =\n           { Tuple.Create(&quot;New York&quot;, 7891957, 7781984, 7894862, \n                          7071639, 7322564, 8008278),\n             Tuple.Create(&quot;Los Angeles&quot;, 1970358, 2479015, 2816061, \n                          2966850, 3485398, 3694820),\n             Tuple.Create(&quot;Chicago&quot;, 3620962, 3550904, 3366957, \n                          3005072, 2783726, 2896016) }\n\n      &#39; Display tuple data in table.\n      Dim header As String = &quot;Population in&quot;\n      Console.WriteLine(&quot;{0,-12} {1,66}&quot;, \n                        &quot;City&quot;, New String(&quot;-&quot;c,(66-header.Length)\\2) + header + _\n                                New String(&quot;-&quot;c, (66-header.Length)\\2))\n      Console.WriteLine(&quot;{0,24}{1,11}{2,11}{3,11}{4,11}{5,11}&quot;, \n                        &quot;1950&quot;, &quot;1960&quot;, &quot;1970&quot;, &quot;1980&quot;, &quot;1990&quot;, &quot;2000&quot;)                  \n      Console.WriteLine()\n      For Each city In cities                      \n         Console.WriteLine(&quot;{0,-12} {1,11:N0}{2,11:N0}{3,11:N0}{4,11:N0}{5,11:N0}{6,11:N0}&quot;, \n                           city.Item1, city.Item2, city.Item3, city.Item4, \n                           city.Item5, city.Item6, city.Item7)\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    City          --------------------------Population in--------------------------\n&#39;                        1950       1960       1970       1980       1990       2000\n&#39;    \n&#39;    New York       7,891,957  7,781,984  7,894,862  7,071,639  7,322,564  8,008,278\n&#39;    Los Angeles    1,970,358  2,479,015  2,816,061  2,966,850  3,485,398  3,694,820\n&#39;    Chicago        3,620,962  3,550,904  3,366,957  3,005,072  2,783,726  2,896,016\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_7_Item2\">\r\n    \r\n            <a id=\"System_Tuple_7_Item2_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Item2</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the current <span class=\"xref\">stem.Tuple`7</span> object&#39;s second component.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public T2 Item2 { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">T2</span></div>\r\n                  </div>\r\n                  <p>The value of the current <span class=\"xref\">stem.Tuple`7</span> object&#39;s second component.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can dynamically determine the type of the Item2 component in one of two ways:  </p>\n<ul>\n<li><p>By calling the <code>GetType</code> method on the value that is returned by the Item2 property.  </p>\n</li>\n<li><p>By retrieving the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the <a class=\"xref\" href=\"system.tuple-7\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;</a> object, and retrieving the second element from the array that is returned by its <a class=\"xref\" href=\"system.type#System_Type_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines an array of <a class=\"xref\" href=\"system.tuple-7\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;</a> objects whose components contain population data for three U.S. cities (New York, Chicago, and Los Angeles) from 1950 through 2000. It then displays a table that lists the data. To display the population in 1950, it retrieves the value of the Item2 property for each <a class=\"xref\" href=\"system.tuple-7\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;</a> object.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple`7.Item1#1\">using System;\nusing System.Text.RegularExpressions;\n\npublic class Class1\n{\n   public static void Main()\n   {\n      // Create tuples containing population data for New York, Chicago, \n      // and Los Angeles, 1960-2000.\n      Tuple&lt;string, int, int, int, int, int, int&gt;[] cities =\n           { Tuple.Create(&quot;New York&quot;, 7891957, 7781984, 7894862, 7071639, 7322564, 8008278),\n             Tuple.Create(&quot;Los Angeles&quot;, 1970358, 2479015, 2816061, 2966850, 3485398, 3694820),\n             Tuple.Create(&quot;Chicago&quot;, 3620962, 3550904, 3366957, 3005072, 2783726, 2896016) };\n\n      // Display tuple data in table.\n      string header = &quot;Population in&quot;;\n      Console.WriteLine(&quot;{0,-12} {1,66}&quot;, \n                        &quot;City&quot;, new String(&#39;-&#39;,(66-header.Length)/2) + header + \n                                new String(&#39;-&#39;, (66-header.Length)/2));\n      Console.WriteLine(&quot;{0,24}{1,11}{2,11}{3,11}{4,11}{5,11}<br>&quot;, \n                        &quot;1950&quot;, &quot;1960&quot;, &quot;1970&quot;, &quot;1980&quot;, &quot;1990&quot;, &quot;2000&quot;);         \n\n      foreach (var city in cities)                      \n         Console.WriteLine(&quot;{0,-12} {1,11:N0}{2,11:N0}{3,11:N0}{4,11:N0}{5,11:N0}{6,11:N0}&quot;, \n                           city.Item1, city.Item2, city.Item3, city.Item4, \n                           city.Item5, city.Item6, city.Item7);\n   }\n}\n// The example displays the following output:\n//   City          --------------------------Population in--------------------------\n//                       1950       1960       1970       1980       1990       2000\n//\n//   New York       7,891,957  7,781,984  7,894,862  7,071,639  7,322,564  8,008,278\n//   Los Angeles    1,970,358  2,479,015  2,816,061  2,966,850  3,485,398  3,694,820\n//   Chicago        3,620,962  3,550,904  3,366,957  3,005,072  2,783,726  2,896,016\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple`7.Item1#1\">Module Example\n   Public Sub Main()\n      &#39; Create tuples containing population data for New York, Chicago, \n      &#39; and Los Angeles, 1960-2000.\n      Dim cities() =\n           { Tuple.Create(&quot;New York&quot;, 7891957, 7781984, 7894862, \n                          7071639, 7322564, 8008278),\n             Tuple.Create(&quot;Los Angeles&quot;, 1970358, 2479015, 2816061, \n                          2966850, 3485398, 3694820),\n             Tuple.Create(&quot;Chicago&quot;, 3620962, 3550904, 3366957, \n                          3005072, 2783726, 2896016) }\n\n      &#39; Display tuple data in table.\n      Dim header As String = &quot;Population in&quot;\n      Console.WriteLine(&quot;{0,-12} {1,66}&quot;, \n                        &quot;City&quot;, New String(&quot;-&quot;c,(66-header.Length)\\2) + header + _\n                                New String(&quot;-&quot;c, (66-header.Length)\\2))\n      Console.WriteLine(&quot;{0,24}{1,11}{2,11}{3,11}{4,11}{5,11}&quot;, \n                        &quot;1950&quot;, &quot;1960&quot;, &quot;1970&quot;, &quot;1980&quot;, &quot;1990&quot;, &quot;2000&quot;)                  \n      Console.WriteLine()\n      For Each city In cities                      \n         Console.WriteLine(&quot;{0,-12} {1,11:N0}{2,11:N0}{3,11:N0}{4,11:N0}{5,11:N0}{6,11:N0}&quot;, \n                           city.Item1, city.Item2, city.Item3, city.Item4, \n                           city.Item5, city.Item6, city.Item7)\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    City          --------------------------Population in--------------------------\n&#39;                        1950       1960       1970       1980       1990       2000\n&#39;    \n&#39;    New York       7,891,957  7,781,984  7,894,862  7,071,639  7,322,564  8,008,278\n&#39;    Los Angeles    1,970,358  2,479,015  2,816,061  2,966,850  3,485,398  3,694,820\n&#39;    Chicago        3,620,962  3,550,904  3,366,957  3,005,072  2,783,726  2,896,016\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_7_Item3\">\r\n    \r\n            <a id=\"System_Tuple_7_Item3_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Item3</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the current <span class=\"xref\">stem.Tuple`7</span> object&#39;s third component.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public T3 Item3 { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">T3</span></div>\r\n                  </div>\r\n                  <p>The value of the current <span class=\"xref\">stem.Tuple`7</span> object&#39;s third component.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can dynamically determine the type of the Item3 component in one of two ways:  </p>\n<ul>\n<li><p>By calling the <code>GetType</code> method on the value that is returned by the Item3 property.  </p>\n</li>\n<li><p>By retrieving the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the <a class=\"xref\" href=\"system.tuple-7\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;</a> object, and retrieving the third element from the array that is returned by its <a class=\"xref\" href=\"system.type#System_Type_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines an array of <a class=\"xref\" href=\"system.tuple-7\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;</a> objects whose components contain population data for three U.S. cities (New York, Chicago, and Los Angeles) from 1950 through 2000. It then displays a table that lists the data. To display the population in 1960, it retrieves the value of the Item3 property for each <a class=\"xref\" href=\"system.tuple-7\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;</a> object.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple`7.Item1#1\">using System;\nusing System.Text.RegularExpressions;\n\npublic class Class1\n{\n   public static void Main()\n   {\n      // Create tuples containing population data for New York, Chicago, \n      // and Los Angeles, 1960-2000.\n      Tuple&lt;string, int, int, int, int, int, int&gt;[] cities =\n           { Tuple.Create(&quot;New York&quot;, 7891957, 7781984, 7894862, 7071639, 7322564, 8008278),\n             Tuple.Create(&quot;Los Angeles&quot;, 1970358, 2479015, 2816061, 2966850, 3485398, 3694820),\n             Tuple.Create(&quot;Chicago&quot;, 3620962, 3550904, 3366957, 3005072, 2783726, 2896016) };\n\n      // Display tuple data in table.\n      string header = &quot;Population in&quot;;\n      Console.WriteLine(&quot;{0,-12} {1,66}&quot;, \n                        &quot;City&quot;, new String(&#39;-&#39;,(66-header.Length)/2) + header + \n                                new String(&#39;-&#39;, (66-header.Length)/2));\n      Console.WriteLine(&quot;{0,24}{1,11}{2,11}{3,11}{4,11}{5,11}<br>&quot;, \n                        &quot;1950&quot;, &quot;1960&quot;, &quot;1970&quot;, &quot;1980&quot;, &quot;1990&quot;, &quot;2000&quot;);         \n\n      foreach (var city in cities)                      \n         Console.WriteLine(&quot;{0,-12} {1,11:N0}{2,11:N0}{3,11:N0}{4,11:N0}{5,11:N0}{6,11:N0}&quot;, \n                           city.Item1, city.Item2, city.Item3, city.Item4, \n                           city.Item5, city.Item6, city.Item7);\n   }\n}\n// The example displays the following output:\n//   City          --------------------------Population in--------------------------\n//                       1950       1960       1970       1980       1990       2000\n//\n//   New York       7,891,957  7,781,984  7,894,862  7,071,639  7,322,564  8,008,278\n//   Los Angeles    1,970,358  2,479,015  2,816,061  2,966,850  3,485,398  3,694,820\n//   Chicago        3,620,962  3,550,904  3,366,957  3,005,072  2,783,726  2,896,016\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple`7.Item1#1\">Module Example\n   Public Sub Main()\n      &#39; Create tuples containing population data for New York, Chicago, \n      &#39; and Los Angeles, 1960-2000.\n      Dim cities() =\n           { Tuple.Create(&quot;New York&quot;, 7891957, 7781984, 7894862, \n                          7071639, 7322564, 8008278),\n             Tuple.Create(&quot;Los Angeles&quot;, 1970358, 2479015, 2816061, \n                          2966850, 3485398, 3694820),\n             Tuple.Create(&quot;Chicago&quot;, 3620962, 3550904, 3366957, \n                          3005072, 2783726, 2896016) }\n\n      &#39; Display tuple data in table.\n      Dim header As String = &quot;Population in&quot;\n      Console.WriteLine(&quot;{0,-12} {1,66}&quot;, \n                        &quot;City&quot;, New String(&quot;-&quot;c,(66-header.Length)\\2) + header + _\n                                New String(&quot;-&quot;c, (66-header.Length)\\2))\n      Console.WriteLine(&quot;{0,24}{1,11}{2,11}{3,11}{4,11}{5,11}&quot;, \n                        &quot;1950&quot;, &quot;1960&quot;, &quot;1970&quot;, &quot;1980&quot;, &quot;1990&quot;, &quot;2000&quot;)                  \n      Console.WriteLine()\n      For Each city In cities                      \n         Console.WriteLine(&quot;{0,-12} {1,11:N0}{2,11:N0}{3,11:N0}{4,11:N0}{5,11:N0}{6,11:N0}&quot;, \n                           city.Item1, city.Item2, city.Item3, city.Item4, \n                           city.Item5, city.Item6, city.Item7)\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    City          --------------------------Population in--------------------------\n&#39;                        1950       1960       1970       1980       1990       2000\n&#39;    \n&#39;    New York       7,891,957  7,781,984  7,894,862  7,071,639  7,322,564  8,008,278\n&#39;    Los Angeles    1,970,358  2,479,015  2,816,061  2,966,850  3,485,398  3,694,820\n&#39;    Chicago        3,620,962  3,550,904  3,366,957  3,005,072  2,783,726  2,896,016\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_7_Item4\">\r\n    \r\n            <a id=\"System_Tuple_7_Item4_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Item4</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the current <span class=\"xref\">stem.Tuple`7</span> object&#39;s fourth component.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public T4 Item4 { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">T4</span></div>\r\n                  </div>\r\n                  <p>The value of the current <span class=\"xref\">stem.Tuple`7</span> object&#39;s fourth component.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can dynamically determine the type of the Item4 component in one of two ways:  </p>\n<ul>\n<li><p>By calling the <code>GetType</code> method on the value that is returned by the Item4 property.  </p>\n</li>\n<li><p>By retrieving the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the <a class=\"xref\" href=\"system.tuple-7\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;</a> object, and retrieving the fourth element from the array that is returned by its <a class=\"xref\" href=\"system.type#System_Type_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines an array of <a class=\"xref\" href=\"system.tuple-7\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;</a> objects whose components contain population data for three U.S. cities (New York, Chicago, and Los Angeles) from 1950 through 2000. It then displays a table that lists the data. To display the population in 1970, it retrieves the value of the Item4 property for each <a class=\"xref\" href=\"system.tuple-7\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;</a> object.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple`7.Item1#1\">using System;\nusing System.Text.RegularExpressions;\n\npublic class Class1\n{\n   public static void Main()\n   {\n      // Create tuples containing population data for New York, Chicago, \n      // and Los Angeles, 1960-2000.\n      Tuple&lt;string, int, int, int, int, int, int&gt;[] cities =\n           { Tuple.Create(&quot;New York&quot;, 7891957, 7781984, 7894862, 7071639, 7322564, 8008278),\n             Tuple.Create(&quot;Los Angeles&quot;, 1970358, 2479015, 2816061, 2966850, 3485398, 3694820),\n             Tuple.Create(&quot;Chicago&quot;, 3620962, 3550904, 3366957, 3005072, 2783726, 2896016) };\n\n      // Display tuple data in table.\n      string header = &quot;Population in&quot;;\n      Console.WriteLine(&quot;{0,-12} {1,66}&quot;, \n                        &quot;City&quot;, new String(&#39;-&#39;,(66-header.Length)/2) + header + \n                                new String(&#39;-&#39;, (66-header.Length)/2));\n      Console.WriteLine(&quot;{0,24}{1,11}{2,11}{3,11}{4,11}{5,11}<br>&quot;, \n                        &quot;1950&quot;, &quot;1960&quot;, &quot;1970&quot;, &quot;1980&quot;, &quot;1990&quot;, &quot;2000&quot;);         \n\n      foreach (var city in cities)                      \n         Console.WriteLine(&quot;{0,-12} {1,11:N0}{2,11:N0}{3,11:N0}{4,11:N0}{5,11:N0}{6,11:N0}&quot;, \n                           city.Item1, city.Item2, city.Item3, city.Item4, \n                           city.Item5, city.Item6, city.Item7);\n   }\n}\n// The example displays the following output:\n//   City          --------------------------Population in--------------------------\n//                       1950       1960       1970       1980       1990       2000\n//\n//   New York       7,891,957  7,781,984  7,894,862  7,071,639  7,322,564  8,008,278\n//   Los Angeles    1,970,358  2,479,015  2,816,061  2,966,850  3,485,398  3,694,820\n//   Chicago        3,620,962  3,550,904  3,366,957  3,005,072  2,783,726  2,896,016\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple`7.Item1#1\">Module Example\n   Public Sub Main()\n      &#39; Create tuples containing population data for New York, Chicago, \n      &#39; and Los Angeles, 1960-2000.\n      Dim cities() =\n           { Tuple.Create(&quot;New York&quot;, 7891957, 7781984, 7894862, \n                          7071639, 7322564, 8008278),\n             Tuple.Create(&quot;Los Angeles&quot;, 1970358, 2479015, 2816061, \n                          2966850, 3485398, 3694820),\n             Tuple.Create(&quot;Chicago&quot;, 3620962, 3550904, 3366957, \n                          3005072, 2783726, 2896016) }\n\n      &#39; Display tuple data in table.\n      Dim header As String = &quot;Population in&quot;\n      Console.WriteLine(&quot;{0,-12} {1,66}&quot;, \n                        &quot;City&quot;, New String(&quot;-&quot;c,(66-header.Length)\\2) + header + _\n                                New String(&quot;-&quot;c, (66-header.Length)\\2))\n      Console.WriteLine(&quot;{0,24}{1,11}{2,11}{3,11}{4,11}{5,11}&quot;, \n                        &quot;1950&quot;, &quot;1960&quot;, &quot;1970&quot;, &quot;1980&quot;, &quot;1990&quot;, &quot;2000&quot;)                  \n      Console.WriteLine()\n      For Each city In cities                      \n         Console.WriteLine(&quot;{0,-12} {1,11:N0}{2,11:N0}{3,11:N0}{4,11:N0}{5,11:N0}{6,11:N0}&quot;, \n                           city.Item1, city.Item2, city.Item3, city.Item4, \n                           city.Item5, city.Item6, city.Item7)\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    City          --------------------------Population in--------------------------\n&#39;                        1950       1960       1970       1980       1990       2000\n&#39;    \n&#39;    New York       7,891,957  7,781,984  7,894,862  7,071,639  7,322,564  8,008,278\n&#39;    Los Angeles    1,970,358  2,479,015  2,816,061  2,966,850  3,485,398  3,694,820\n&#39;    Chicago        3,620,962  3,550,904  3,366,957  3,005,072  2,783,726  2,896,016\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_7_Item5\">\r\n    \r\n            <a id=\"System_Tuple_7_Item5_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Item5</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the current <span class=\"xref\">stem.Tuple`7</span> object&#39;s fifth component.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public T5 Item5 { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">T5</span></div>\r\n                  </div>\r\n                  <p>The value of the current <span class=\"xref\">stem.Tuple`7</span> object&#39;s fifth component.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can dynamically determine the type of the Item5 component in one of two ways:  </p>\n<ul>\n<li><p>By calling the <code>GetType</code> method on the value that is returned by the Item5 property.  </p>\n</li>\n<li><p>By retrieving the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the <a class=\"xref\" href=\"system.tuple-7\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;</a> object, and retrieving the fifth element from the array that is returned by its <a class=\"xref\" href=\"system.type#System_Type_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines an array of <a class=\"xref\" href=\"system.tuple-7\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;</a> objects whose components contain population data for three U.S. cities (New York, Chicago, and Los Angeles) from 1950 through 2000. It then displays a table that lists the data. To display the population in 1980, it retrieves the value of the Item5 property for each <a class=\"xref\" href=\"system.tuple-7\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;</a> object.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple`7.Item1#1\">using System;\nusing System.Text.RegularExpressions;\n\npublic class Class1\n{\n   public static void Main()\n   {\n      // Create tuples containing population data for New York, Chicago, \n      // and Los Angeles, 1960-2000.\n      Tuple&lt;string, int, int, int, int, int, int&gt;[] cities =\n           { Tuple.Create(&quot;New York&quot;, 7891957, 7781984, 7894862, 7071639, 7322564, 8008278),\n             Tuple.Create(&quot;Los Angeles&quot;, 1970358, 2479015, 2816061, 2966850, 3485398, 3694820),\n             Tuple.Create(&quot;Chicago&quot;, 3620962, 3550904, 3366957, 3005072, 2783726, 2896016) };\n\n      // Display tuple data in table.\n      string header = &quot;Population in&quot;;\n      Console.WriteLine(&quot;{0,-12} {1,66}&quot;, \n                        &quot;City&quot;, new String(&#39;-&#39;,(66-header.Length)/2) + header + \n                                new String(&#39;-&#39;, (66-header.Length)/2));\n      Console.WriteLine(&quot;{0,24}{1,11}{2,11}{3,11}{4,11}{5,11}<br>&quot;, \n                        &quot;1950&quot;, &quot;1960&quot;, &quot;1970&quot;, &quot;1980&quot;, &quot;1990&quot;, &quot;2000&quot;);         \n\n      foreach (var city in cities)                      \n         Console.WriteLine(&quot;{0,-12} {1,11:N0}{2,11:N0}{3,11:N0}{4,11:N0}{5,11:N0}{6,11:N0}&quot;, \n                           city.Item1, city.Item2, city.Item3, city.Item4, \n                           city.Item5, city.Item6, city.Item7);\n   }\n}\n// The example displays the following output:\n//   City          --------------------------Population in--------------------------\n//                       1950       1960       1970       1980       1990       2000\n//\n//   New York       7,891,957  7,781,984  7,894,862  7,071,639  7,322,564  8,008,278\n//   Los Angeles    1,970,358  2,479,015  2,816,061  2,966,850  3,485,398  3,694,820\n//   Chicago        3,620,962  3,550,904  3,366,957  3,005,072  2,783,726  2,896,016\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple`7.Item1#1\">Module Example\n   Public Sub Main()\n      &#39; Create tuples containing population data for New York, Chicago, \n      &#39; and Los Angeles, 1960-2000.\n      Dim cities() =\n           { Tuple.Create(&quot;New York&quot;, 7891957, 7781984, 7894862, \n                          7071639, 7322564, 8008278),\n             Tuple.Create(&quot;Los Angeles&quot;, 1970358, 2479015, 2816061, \n                          2966850, 3485398, 3694820),\n             Tuple.Create(&quot;Chicago&quot;, 3620962, 3550904, 3366957, \n                          3005072, 2783726, 2896016) }\n\n      &#39; Display tuple data in table.\n      Dim header As String = &quot;Population in&quot;\n      Console.WriteLine(&quot;{0,-12} {1,66}&quot;, \n                        &quot;City&quot;, New String(&quot;-&quot;c,(66-header.Length)\\2) + header + _\n                                New String(&quot;-&quot;c, (66-header.Length)\\2))\n      Console.WriteLine(&quot;{0,24}{1,11}{2,11}{3,11}{4,11}{5,11}&quot;, \n                        &quot;1950&quot;, &quot;1960&quot;, &quot;1970&quot;, &quot;1980&quot;, &quot;1990&quot;, &quot;2000&quot;)                  \n      Console.WriteLine()\n      For Each city In cities                      \n         Console.WriteLine(&quot;{0,-12} {1,11:N0}{2,11:N0}{3,11:N0}{4,11:N0}{5,11:N0}{6,11:N0}&quot;, \n                           city.Item1, city.Item2, city.Item3, city.Item4, \n                           city.Item5, city.Item6, city.Item7)\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    City          --------------------------Population in--------------------------\n&#39;                        1950       1960       1970       1980       1990       2000\n&#39;    \n&#39;    New York       7,891,957  7,781,984  7,894,862  7,071,639  7,322,564  8,008,278\n&#39;    Los Angeles    1,970,358  2,479,015  2,816,061  2,966,850  3,485,398  3,694,820\n&#39;    Chicago        3,620,962  3,550,904  3,366,957  3,005,072  2,783,726  2,896,016\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_7_Item6\">\r\n    \r\n            <a id=\"System_Tuple_7_Item6_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Item6</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the current <span class=\"xref\">stem.Tuple`7</span> object&#39;s sixth component.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public T6 Item6 { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">T6</span></div>\r\n                  </div>\r\n                  <p>The value of the current <span class=\"xref\">stem.Tuple`7</span> object&#39;s sixth component.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can dynamically determine the type of the Item6 component in one of two ways:  </p>\n<ul>\n<li><p>By calling the <code>GetType</code> method on the value that is returned by the Item6 property.  </p>\n</li>\n<li><p>By retrieving the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the <a class=\"xref\" href=\"system.tuple-7\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;</a> object, and retrieving the sixth element from the array that is returned by its <a class=\"xref\" href=\"system.type#System_Type_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines an array of <a class=\"xref\" href=\"system.tuple-7\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;</a> objects whose components contain population data for three U.S. cities (New York, Chicago, and Los Angeles) from 1950 through 2000. It then displays a table that lists the data. To display the population in 1990, it retrieves the value of the Item6 property for each <a class=\"xref\" href=\"system.tuple-7\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;</a> object.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple`7.Item1#1\">using System;\nusing System.Text.RegularExpressions;\n\npublic class Class1\n{\n   public static void Main()\n   {\n      // Create tuples containing population data for New York, Chicago, \n      // and Los Angeles, 1960-2000.\n      Tuple&lt;string, int, int, int, int, int, int&gt;[] cities =\n           { Tuple.Create(&quot;New York&quot;, 7891957, 7781984, 7894862, 7071639, 7322564, 8008278),\n             Tuple.Create(&quot;Los Angeles&quot;, 1970358, 2479015, 2816061, 2966850, 3485398, 3694820),\n             Tuple.Create(&quot;Chicago&quot;, 3620962, 3550904, 3366957, 3005072, 2783726, 2896016) };\n\n      // Display tuple data in table.\n      string header = &quot;Population in&quot;;\n      Console.WriteLine(&quot;{0,-12} {1,66}&quot;, \n                        &quot;City&quot;, new String(&#39;-&#39;,(66-header.Length)/2) + header + \n                                new String(&#39;-&#39;, (66-header.Length)/2));\n      Console.WriteLine(&quot;{0,24}{1,11}{2,11}{3,11}{4,11}{5,11}<br>&quot;, \n                        &quot;1950&quot;, &quot;1960&quot;, &quot;1970&quot;, &quot;1980&quot;, &quot;1990&quot;, &quot;2000&quot;);         \n\n      foreach (var city in cities)                      \n         Console.WriteLine(&quot;{0,-12} {1,11:N0}{2,11:N0}{3,11:N0}{4,11:N0}{5,11:N0}{6,11:N0}&quot;, \n                           city.Item1, city.Item2, city.Item3, city.Item4, \n                           city.Item5, city.Item6, city.Item7);\n   }\n}\n// The example displays the following output:\n//   City          --------------------------Population in--------------------------\n//                       1950       1960       1970       1980       1990       2000\n//\n//   New York       7,891,957  7,781,984  7,894,862  7,071,639  7,322,564  8,008,278\n//   Los Angeles    1,970,358  2,479,015  2,816,061  2,966,850  3,485,398  3,694,820\n//   Chicago        3,620,962  3,550,904  3,366,957  3,005,072  2,783,726  2,896,016\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple`7.Item1#1\">Module Example\n   Public Sub Main()\n      &#39; Create tuples containing population data for New York, Chicago, \n      &#39; and Los Angeles, 1960-2000.\n      Dim cities() =\n           { Tuple.Create(&quot;New York&quot;, 7891957, 7781984, 7894862, \n                          7071639, 7322564, 8008278),\n             Tuple.Create(&quot;Los Angeles&quot;, 1970358, 2479015, 2816061, \n                          2966850, 3485398, 3694820),\n             Tuple.Create(&quot;Chicago&quot;, 3620962, 3550904, 3366957, \n                          3005072, 2783726, 2896016) }\n\n      &#39; Display tuple data in table.\n      Dim header As String = &quot;Population in&quot;\n      Console.WriteLine(&quot;{0,-12} {1,66}&quot;, \n                        &quot;City&quot;, New String(&quot;-&quot;c,(66-header.Length)\\2) + header + _\n                                New String(&quot;-&quot;c, (66-header.Length)\\2))\n      Console.WriteLine(&quot;{0,24}{1,11}{2,11}{3,11}{4,11}{5,11}&quot;, \n                        &quot;1950&quot;, &quot;1960&quot;, &quot;1970&quot;, &quot;1980&quot;, &quot;1990&quot;, &quot;2000&quot;)                  \n      Console.WriteLine()\n      For Each city In cities                      \n         Console.WriteLine(&quot;{0,-12} {1,11:N0}{2,11:N0}{3,11:N0}{4,11:N0}{5,11:N0}{6,11:N0}&quot;, \n                           city.Item1, city.Item2, city.Item3, city.Item4, \n                           city.Item5, city.Item6, city.Item7)\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    City          --------------------------Population in--------------------------\n&#39;                        1950       1960       1970       1980       1990       2000\n&#39;    \n&#39;    New York       7,891,957  7,781,984  7,894,862  7,071,639  7,322,564  8,008,278\n&#39;    Los Angeles    1,970,358  2,479,015  2,816,061  2,966,850  3,485,398  3,694,820\n&#39;    Chicago        3,620,962  3,550,904  3,366,957  3,005,072  2,783,726  2,896,016\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_7_Item7\">\r\n    \r\n            <a id=\"System_Tuple_7_Item7_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Item7</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the current <span class=\"xref\">stem.Tuple`7</span> object&#39;s seventh component.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public T7 Item7 { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">T7</span></div>\r\n                  </div>\r\n                  <p>The value of the current <span class=\"xref\">stem.Tuple`7</span> object&#39;s seventh component.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can dynamically determine the type of the Item7 component in one of two ways:  </p>\n<ul>\n<li><p>By calling the <code>GetType</code> method on the value that is returned by the Item7 property.  </p>\n</li>\n<li><p>By retrieving the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the <a class=\"xref\" href=\"system.tuple-7\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;</a> object, and retrieving the seventh element from the array that is returned by its <a class=\"xref\" href=\"system.type#System_Type_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines an array of <a class=\"xref\" href=\"system.tuple-7\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;</a> objects whose components contain population data for three U.S. cities (New York, Chicago, and Los Angeles) from 1950 through 2000. It then displays a table that lists the data. To display the population in 2000, it retrieves the value of the Item7 property for each <a class=\"xref\" href=\"system.tuple-7\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;</a> object.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple`7.Item1#1\">using System;\nusing System.Text.RegularExpressions;\n\npublic class Class1\n{\n   public static void Main()\n   {\n      // Create tuples containing population data for New York, Chicago, \n      // and Los Angeles, 1960-2000.\n      Tuple&lt;string, int, int, int, int, int, int&gt;[] cities =\n           { Tuple.Create(&quot;New York&quot;, 7891957, 7781984, 7894862, 7071639, 7322564, 8008278),\n             Tuple.Create(&quot;Los Angeles&quot;, 1970358, 2479015, 2816061, 2966850, 3485398, 3694820),\n             Tuple.Create(&quot;Chicago&quot;, 3620962, 3550904, 3366957, 3005072, 2783726, 2896016) };\n\n      // Display tuple data in table.\n      string header = &quot;Population in&quot;;\n      Console.WriteLine(&quot;{0,-12} {1,66}&quot;, \n                        &quot;City&quot;, new String(&#39;-&#39;,(66-header.Length)/2) + header + \n                                new String(&#39;-&#39;, (66-header.Length)/2));\n      Console.WriteLine(&quot;{0,24}{1,11}{2,11}{3,11}{4,11}{5,11}<br>&quot;, \n                        &quot;1950&quot;, &quot;1960&quot;, &quot;1970&quot;, &quot;1980&quot;, &quot;1990&quot;, &quot;2000&quot;);         \n\n      foreach (var city in cities)                      \n         Console.WriteLine(&quot;{0,-12} {1,11:N0}{2,11:N0}{3,11:N0}{4,11:N0}{5,11:N0}{6,11:N0}&quot;, \n                           city.Item1, city.Item2, city.Item3, city.Item4, \n                           city.Item5, city.Item6, city.Item7);\n   }\n}\n// The example displays the following output:\n//   City          --------------------------Population in--------------------------\n//                       1950       1960       1970       1980       1990       2000\n//\n//   New York       7,891,957  7,781,984  7,894,862  7,071,639  7,322,564  8,008,278\n//   Los Angeles    1,970,358  2,479,015  2,816,061  2,966,850  3,485,398  3,694,820\n//   Chicago        3,620,962  3,550,904  3,366,957  3,005,072  2,783,726  2,896,016\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple`7.Item1#1\">Module Example\n   Public Sub Main()\n      &#39; Create tuples containing population data for New York, Chicago, \n      &#39; and Los Angeles, 1960-2000.\n      Dim cities() =\n           { Tuple.Create(&quot;New York&quot;, 7891957, 7781984, 7894862, \n                          7071639, 7322564, 8008278),\n             Tuple.Create(&quot;Los Angeles&quot;, 1970358, 2479015, 2816061, \n                          2966850, 3485398, 3694820),\n             Tuple.Create(&quot;Chicago&quot;, 3620962, 3550904, 3366957, \n                          3005072, 2783726, 2896016) }\n\n      &#39; Display tuple data in table.\n      Dim header As String = &quot;Population in&quot;\n      Console.WriteLine(&quot;{0,-12} {1,66}&quot;, \n                        &quot;City&quot;, New String(&quot;-&quot;c,(66-header.Length)\\2) + header + _\n                                New String(&quot;-&quot;c, (66-header.Length)\\2))\n      Console.WriteLine(&quot;{0,24}{1,11}{2,11}{3,11}{4,11}{5,11}&quot;, \n                        &quot;1950&quot;, &quot;1960&quot;, &quot;1970&quot;, &quot;1980&quot;, &quot;1990&quot;, &quot;2000&quot;)                  \n      Console.WriteLine()\n      For Each city In cities                      \n         Console.WriteLine(&quot;{0,-12} {1,11:N0}{2,11:N0}{3,11:N0}{4,11:N0}{5,11:N0}{6,11:N0}&quot;, \n                           city.Item1, city.Item2, city.Item3, city.Item4, \n                           city.Item5, city.Item6, city.Item7)\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    City          --------------------------Population in--------------------------\n&#39;                        1950       1960       1970       1980       1990       2000\n&#39;    \n&#39;    New York       7,891,957  7,781,984  7,894,862  7,071,639  7,322,564  8,008,278\n&#39;    Los Angeles    1,970,358  2,479,015  2,816,061  2,966,850  3,485,398  3,694,820\n&#39;    Chicago        3,620,962  3,550,904  3,366,957  3,005,072  2,783,726  2,896,016\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_7_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_Tuple_7_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value that indicates whether the current <span class=\"xref\">stem.Tuple`7</span> object is equal to a specified object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to compare with this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current instance is equal to the specified object; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>obj</code> parameter is considered to be equal to the current instance under the following conditions:  </p>\n<ul>\n<li><p>It is a <a class=\"xref\" href=\"system.tuple-7\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;</a> object.  </p>\n</li>\n<li><p>Its seven components are of the same types as the current instance.  </p>\n</li>\n<li><p>Its seven components are equal to those of the current instance. Equality is determined by the default object equality comparer for each component.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines an array of sextuples that contain population data for Los Angeles and New York from 1950 to 2000. The first component of each septuple identifies the city. The first, third, and fourth septuples contain data for New York. The first septuple is a duplicate of the fourth septuple. The third septuple identifies the city as &quot;New York City&quot; instead of &quot;New York&quot;. As the example shows, only the fourth septuple is equal to the first septuple.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple`7.Equals#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Get population data for New York City and Los Angeles, 1960-2000.\n      Tuple&lt;string, int, int, int, int, int, int&gt;[] urbanPopulations =\n           { Tuple.Create(&quot;New York&quot;, 7891957, 7781984, 7894862, 7071639, 7322564, 8008278),\n             Tuple.Create(&quot;Los Angeles&quot;, 1970358, 2479015, 2816061, 2966850, 3485398, 3694820),\n             Tuple.Create(&quot;New York City&quot;, 7891957, 7781984, 7894862, 7071639, 7322564, 8008278),\n             Tuple.Create(&quot;New York&quot;, 7891957, 7781984, 7894862, 7071639, 7322564, 8008278) };\n      // Compare each tuple with every other tuple for equality.\n      for (int ctr = 0; ctr &lt;= urbanPopulations.Length - 2; ctr++)\n      {                      \n         var urbanPopulation = urbanPopulations[ctr];\n         Console.WriteLine(urbanPopulation.ToString() + &quot; = &quot;);\n         for (int innerCtr = ctr +1; innerCtr &lt;= urbanPopulations.Length - 1; innerCtr++)\n            Console.WriteLine(&quot;   {0}: {1}&quot;, urbanPopulations[innerCtr], \n                              urbanPopulation.Equals(urbanPopulations[innerCtr]));\n         Console.WriteLine();\n      }   \n   }\n}\n// The example displays the following output:\n//    (New York, 7891957, 7781984, 7894862, 7071639, 7322564, 8008278) =\n//       (Los Angeles, 1970358, 2479015, 2816061, 2966850, 3485398, 3694820): False\n//       (New York City, 7891957, 7781984, 7894862, 7071639, 7322564, 8008278): False\n//       (New York, 7891957, 7781984, 7894862, 7071639, 7322564, 8008278): True\n//    \n//    (Los Angeles, 1970358, 2479015, 2816061, 2966850, 3485398, 3694820) =\n//       (New York City, 7891957, 7781984, 7894862, 7071639, 7322564, 8008278): False\n//       (New York, 7891957, 7781984, 7894862, 7071639, 7322564, 8008278): False\n//    \n//    (New York City, 7891957, 7781984, 7894862, 7071639, 7322564, 8008278) =\n//       (New York, 7891957, 7781984, 7894862, 7071639, 7322564, 8008278): False\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple`7.Equals#1\">Module Example\n   Public Sub Main()\n      &#39; Get population data for New York City and Los Angeles, 1960-2000.\n      Dim urbanPopulations() =\n           { Tuple.Create(&quot;New York&quot;, 7891957, 7781984, 7894862, \n                          7071639, 7322564, 8008278),\n             Tuple.Create(&quot;Los Angeles&quot;, 1970358, 2479015, 2816061, \n                          2966850, 3485398, 3694820),\n             Tuple.Create(&quot;New York City&quot;, 7891957, 7781984, 7894862, \n                          7071639, 7322564, 8008278),\n             Tuple.Create(&quot;New York&quot;, 7891957, 7781984, 7894862, \n                          7071639, 7322564, 8008278) }\n      &#39; Compare each tuple with every other tuple for equality.\n      For ctr As Integer = 0 To urbanPopulations.Length - 2                      \n         Dim urbanPopulation = urbanPopulations(ctr)\n         Console.WriteLine(urbanPopulation.ToString() + &quot; = &quot;)\n         For innerCtr As Integer = ctr + 1 To urbanPopulations.Length - 1\n            Console.WriteLine(&quot;   {0}: {1}&quot;, urbanPopulations(innerCtr), _\n                              urbanPopulation.Equals(urbanPopulations(innerCtr)))\n         Next\n         Console.WriteLine()\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    (New York, 7891957, 7781984, 7894862, 7071639, 7322564, 8008278) =\n&#39;       (Los Angeles, 1970358, 2479015, 2816061, 2966850, 3485398, 3694820): False\n&#39;       (New York City, 7891957, 7781984, 7894862, 7071639, 7322564, 8008278): False\n&#39;       (New York, 7891957, 7781984, 7894862, 7071639, 7322564, 8008278): True\n&#39;    \n&#39;    (Los Angeles, 1970358, 2479015, 2816061, 2966850, 3485398, 3694820) =\n&#39;       (New York City, 7891957, 7781984, 7894862, 7071639, 7322564, 8008278): False\n&#39;       (New York, 7891957, 7781984, 7894862, 7071639, 7322564, 8008278): False\n&#39;    \n&#39;    (New York City, 7891957, 7781984, 7894862, 7071639, 7322564, 8008278) =\n&#39;       (New York, 7891957, 7781984, 7894862, 7071639, 7322564, 8008278): False\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_7_GetHashCode\">\r\n    \r\n            <a id=\"System_Tuple_7_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the hash code for the current <span class=\"xref\">stem.Tuple`7</span> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer hash code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_7_ToString\">\r\n    \r\n            <a id=\"System_Tuple_7_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string that represents the value of this <span class=\"xref\">stem.Tuple`7</span> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of this <span class=\"xref\">stem.Tuple`7</span> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The string returned by this method takes the form (<em>Item1</em>, <em>Item2</em>, <em>Item3</em>, <em>Item4</em>, <code>Item5, Item6, Item7</code>), where <em>Item1</em>, <em>Item2</em>, <em>Item3</em>, <em>Item4</em>, <em>Item5</em>, <em>Item6</em>, and <em>Item7</em> represent the values of the <a class=\"xref\" href=\"system.tuple-7#System_Tuple_7_Item1_\" data-linktype=\"relative-path\">Item1</a>, <a class=\"xref\" href=\"system.tuple-7#System_Tuple_7_Item2_\" data-linktype=\"relative-path\">Item2</a>, <a class=\"xref\" href=\"system.tuple-7#System_Tuple_7_Item3_\" data-linktype=\"relative-path\">Item3</a>, <a class=\"xref\" href=\"system.tuple-7#System_Tuple_7_Item4_\" data-linktype=\"relative-path\">Item4</a>, <a class=\"xref\" href=\"system.tuple-7#System_Tuple_7_Item5_\" data-linktype=\"relative-path\">Item5</a>, <a class=\"xref\" href=\"system.tuple-7#System_Tuple_7_Item6_\" data-linktype=\"relative-path\">Item6</a>, and <a class=\"xref\" href=\"system.tuple-7#System_Tuple_7_Item7_\" data-linktype=\"relative-path\">Item7</a> properties, respectively. If any of the property values is <code>null</code>, it is represented as <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a <a class=\"xref\" href=\"system.tuple-7\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;</a> object that contains population data for New York City for each census from 1950 through 2000. The components of the sextuple are then displayed by a call to the ToString method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple`7.ToString#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Get population data for New York City, 1960-2000.\n      var population = Tuple.Create(&quot;New York&quot;, 7891957, 7781984, \n                                    7894862, 7071639, 7322564, 8008278);\n      Console.WriteLine(population.ToString());\n   }\n}\n// The example displays the following output:\n//    (New York, 7891957, 7781984, 7894862, 7071639, 7322564, 8008278)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple`7.ToString#1\">Module Example\n   Public Sub Main()\n      &#39; Get population data for New York City, 1960-2000.\n      Dim population = Tuple.Create(&quot;New York&quot;, 7891957, 7781984, \n                                    7894862, 7071639, 7322564, 8008278)\n      Console.WriteLine(population.ToString())                                 \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       (New York, 7891957, 7781984, 7894862, 7071639, 7322564, 8008278)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_7_System_Collections_IStructuralComparable_CompareTo_System_Object_System_Collections_IComparer_\">\r\n    \r\n            <a id=\"System_Tuple_7_System_Collections_IStructuralComparable_CompareTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IStructuralComparable.CompareTo(Object,IComparer)</div>        \r\n          </div>\r\n    \r\n            <p>Compares the current <span class=\"xref\">stem.Tuple`7</span> object to a specified object by using a specified comparer, and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">int IStructuralComparable.CompareTo (object other, System.Collections.IComparer comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>other</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to compare with the current instance.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that provides custom rules for comparison.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A signed integer that indicates the relative position of this instance and <code>other</code> in the sort order, as shown in the following table.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Description<br>\n </th></tr></thead><tbody><tr><td> A negative integer<br>\n </td><td> This instance precedes <code>other</code>.<br>\n </td></tr><tr><td> Zero<br>\n </td><td> This instance and <code>other</code> have the same position in the sort order.<br>\n </td></tr><tr><td> A positive integer<br>\n </td><td> This instance follows <code>other</code>.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>other</code> is not a <span class=\"xref\">stem.Tuple`7</span> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface implementation. It can be used only when the <a class=\"xref\" href=\"system.tuple-7\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;</a> instance is cast to an <a class=\"xref\" href=\"system.collections.istructuralcomparable\" data-linktype=\"relative-path\">IStructuralComparable</a> interface.  </p>\n<p> This method lets you define customized comparisons of <a class=\"xref\" href=\"system.tuple-7\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;</a> objects. For example, you can use this method to order <a class=\"xref\" href=\"system.tuple-7\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;</a> objects based on the value of a specific component.  </p>\n<p> Although this method can be called directly, it is most commonly called by collection-sorting methods that include <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> parameters to order the members of a collection. For example, it is called by the <a class=\"xref\" href=\"system.array#System_Array_Sort_System_Array_System_Collections_IComparer_\" data-linktype=\"relative-path\">System.Array.Sort(Array,IComparer)</a> method and the <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_Add_\" data-linktype=\"relative-path\">Add</a> method of a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object that is instantiated by using the <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList__ctor_System_Collections_IComparer_\" data-linktype=\"relative-path\">System.Collections.SortedList.SortedList(IComparer)</a> constructor.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> The IStructuralComparable.CompareTo method is intended for use in sorting operations. It should not be used when the primary purpose of a comparison is to determine whether two objects are equal. To determine whether two objects are equal, call the <a class=\"xref\" href=\"system.tuple-7#System_Tuple_7_System_Collections_IStructuralEquatable_Equals_\" data-linktype=\"relative-path\">System.Collections.IStructuralEquatable.Equals</a> method.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an array of <a class=\"xref\" href=\"system.tuple-7\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;</a> objects that contains population data for three U.S. cities from 1950 to 2000. The septuple&#39;s first component is the city name. The remaining five components represent the population at 10-year intervals from 1950 to 2000.  </p>\n<p> The <code>PopulationComparer</code> class provides an <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> implementation that allows the array of septuples to be sorted by any one of its components. Two values are provided to the <code>PopulationComparer</code> class in its constructor: The position of the component that defines the sort order, and a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the tuple objects should be sorted in ascending or descending order.  </p>\n<p> The example then displays the elements in the array in unsorted order, sorts them by the third component (the population in 1960) and displays them, and then sorts them by the sixth component (the population in 1990) and displays them.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple`7.CompareTo#2\">using System;\nusing System.Collections;\nusing System.Collections.Generic;\n\npublic class PopulationComparer&lt;T1, T2, T3, T4, T5, T6, T7&gt; : IComparer\n{\n   private int itemPosition;\n   private int multiplier = -1;\n\n   public PopulationComparer(int component) : this(component, true)\n   { }\n\n   public PopulationComparer(int component, bool descending)\n   {\n      if (! descending) multiplier = 1;\n\n      if (component &lt;= 0 || component &gt; 7)\n         throw new ArgumentException(&quot;The component argument is out of range.&quot;);\n\n      itemPosition = component;\n   }\n\n   public int Compare(object x, object y)\n   {\n      Tuple&lt;T1, T2, T3, T4, T5, T6, T7&gt; tX = x as Tuple&lt;T1, T2, T3, T4, T5, T6, T7&gt;;\n      if (tX == null)\n      {\n         return 0;\n      }\n      else\n      {\n         Tuple&lt;T1, T2, T3, T4, T5, T6, T7&gt; tY = y as Tuple&lt;T1, T2, T3, T4, T5, T6, T7&gt;;\n         switch (itemPosition)\n         {\n            case 1:\n               return Comparer&lt;T1&gt;.Default.Compare(tX.Item1, tY.Item1) * multiplier;\n            case 2:\n               return Comparer&lt;T2&gt;.Default.Compare(tX.Item2, tY.Item2) * multiplier;\n            case 3:\n               return Comparer&lt;T3&gt;.Default.Compare(tX.Item3, tY.Item3) * multiplier;\n            case 4:\n               return Comparer&lt;T4&gt;.Default.Compare(tX.Item4, tY.Item4) * multiplier;\n            case 5:\n               return Comparer&lt;T5&gt;.Default.Compare(tX.Item5, tY.Item5) * multiplier;\n            case 6:\n               return Comparer&lt;T6&gt;.Default.Compare(tX.Item6, tY.Item6) * multiplier;\n            case 7:\n               return Comparer&lt;T7&gt;.Default.Compare(tX.Item7, tY.Item7) * multiplier;\n            default:\n               return Comparer&lt;T1&gt;.Default.Compare(tX.Item1, tY.Item1) * multiplier;\n         }\n      }\n   }\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Create array of sextuple with population data for three U.S.\n      // cities, 1960-2000.\n      Tuple&lt;string, int, int, int, int, int, int&gt;[] cities =\n           { Tuple.Create(&quot;Los Angeles&quot;, 1970358, 2479015, 2816061, 2966850, 3485398, 3694820),\n             Tuple.Create(&quot;New York&quot;, 7891957, 7781984, 7894862, 7071639, 7322564, 8008278),\n             Tuple.Create(&quot;Chicago&quot;, 3620962, 3550904, 3366957, 3005072, 2783726, 2896016) };\n\n      // Display array in unsorted order.\n      Console.WriteLine(&quot;In unsorted order:&quot;);\n      foreach (var city in cities)\n         Console.WriteLine(city.ToString());\n      Console.WriteLine();\n\n      Array.Sort(cities, new PopulationComparer&lt;string, int, int, int, int, int, int&gt;(3));\n\n      // Display array in sorted order.\n      Console.WriteLine(&quot;Sorted by population in 1960:&quot;);\n      foreach (var city in cities)\n         Console.WriteLine(city.ToString());\n      Console.WriteLine();\n\n      Array.Sort(cities, new PopulationComparer&lt;string, int, int, int, int, int, int&gt;(6));\n\n      // Display array in sorted order.\n      Console.WriteLine(&quot;Sorted by population in 1990:&quot;);\n      foreach (var city in cities)\n         Console.WriteLine(city.ToString());\n   }\n}\n// The example displays the following output:\n//    In unsorted order:\n//    (Los Angeles, 1970358, 2479015, 2816061, 2966850, 3485398, 3694820)\n//    (New York, 7891957, 7781984, 7894862, 7071639, 7322564, 8008278)\n//    (Chicago, 3620962, 3550904, 3366957, 3005072, 2783726, 2896016)\n//    \n//    Sorted by population in 1960:\n//    (New York, 7891957, 7781984, 7894862, 7071639, 7322564, 8008278)\n//    (Chicago, 3620962, 3550904, 3366957, 3005072, 2783726, 2896016)\n//    (Los Angeles, 1970358, 2479015, 2816061, 2966850, 3485398, 3694820)\n//    \n//    Sorted by population in 1990:\n//    (New York, 7891957, 7781984, 7894862, 7071639, 7322564, 8008278)\n//    (Los Angeles, 1970358, 2479015, 2816061, 2966850, 3485398, 3694820)\n//    (Chicago, 3620962, 3550904, 3366957, 3005072, 2783726, 2896016)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple`7.CompareTo#2\">Imports System.Collections\nImports System.Collections.Generic\n\nPublic Class PopulationComparer(Of T1, T2, T3, T4, T5, T6, T7) : Implements IComparer\n   Private itemPosition As Integer\n   Private multiplier As Integer = -1\n      \n   Public Sub New(component As Integer)\n      Me.New(component, True)\n   End Sub\n   \n   Public Sub New(component As Integer, descending As Boolean)\n      If Not descending Then multiplier = 1\n      \n      If component &lt;= 0 Or component &gt; 7 Then \n         Throw New ArgumentException(&quot;The component argument is out of range.&quot;)\n      End If\n      itemPosition = component\n   End Sub \n   \n   Public Function Compare(x As Object, y As Object) As Integer _\n                   Implements IComparer.Compare\n \n      Dim tX As Tuple(Of T1, T2, T3, T4, T5, T6, T7) = TryCast(x, Tuple(Of T1, T2, T3, T4, T5, T6, T7))\n      If tX Is Nothing Then\n         Return 0\n      Else\n         Dim tY As Tuple(Of T1, T2, T3, T4, T5, T6, T7) = DirectCast(y, Tuple(Of T1, T2, T3, T4, T5, T6, T7))\n         Select Case itemPosition\n            Case 1\n               Return Comparer(Of T1).Default.Compare(tX.Item1, tY.Item1) * multiplier\n            Case 2\n               Return Comparer(Of T2).Default.Compare(tX.Item2, tY.Item2) * multiplier\n            Case 3\n               Return Comparer(Of T3).Default.Compare(tX.Item3, tY.Item3) * multiplier\n            Case 4\n               Return Comparer(Of T4).Default.Compare(tX.Item4, tY.Item4) * multiplier\n            Case 5\n               Return Comparer(Of T5).Default.Compare(tX.Item5, tY.Item5) * multiplier\n            Case 6\n               Return Comparer(Of T6).Default.Compare(tX.Item6, tY.Item6) * multiplier\n            Case 7\n               Return Comparer(Of T7).Default.Compare(tX.Item7, tY.Item7) * multiplier\n            &#39; This should never be reached.\n            Case Else\n               Return 0\n         End Select      \n      End If\n   End Function\nEnd Class\n\nModule Example\n   Public Sub Main()\n      &#39; Create array of sextuple with population data for three U.S. \n      &#39; cities, 1950-2000.\n      Dim cities() = \n          { Tuple.Create(&quot;Los Angeles&quot;, 1970358, 2479015, 2816061, 2966850, 3485398, 3694820),\n            Tuple.Create(&quot;New York&quot;, 7891957, 7781984, 7894862, 7071639, 7322564, 8008278),  \n            Tuple.Create(&quot;Chicago&quot;, 3620962, 3550904, 3366957, 3005072, 2783726, 2896016) } \n      \n      &#39; Display array in unsorted order.\n      Console.WriteLine(&quot;In unsorted order:&quot;)\n      For Each city In cities\n         Console.WriteLine(city.ToString())\n      Next\n      Console.WriteLine()\n      \n      Array.Sort(cities, New PopulationComparer(Of String, Integer, Integer, Integer, Integer, Integer, Integer)(3)) \n                           \n      &#39; Display array in sorted order.\n      Console.WriteLine(&quot;Sorted by population in 1960:&quot;)\n      For Each city In cities\n         Console.WriteLine(city.ToString())\n      Next\n      Console.WriteLine()\n      \n      Array.Sort(cities, New PopulationComparer(Of String, Integer, Integer, Integer, Integer, Integer, Integer)(6))\n                           \n      &#39; Display array in sorted order.\n      Console.WriteLine(&quot;Sorted by population in 1990:&quot;)\n      For Each city In cities\n         Console.WriteLine(city.ToString())\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    In unsorted order:\n&#39;    (Los Angeles, 1970358, 2479015, 2816061, 2966850, 3485398, 3694820)\n&#39;    (New York, 7891957, 7781984, 7894862, 7071639, 7322564, 8008278)\n&#39;    (Chicago, 3620962, 3550904, 3366957, 3005072, 2783726, 2896016)\n&#39;    \n&#39;    Sorted by population in 1960:\n&#39;    (New York, 7891957, 7781984, 7894862, 7071639, 7322564, 8008278)\n&#39;    (Chicago, 3620962, 3550904, 3366957, 3005072, 2783726, 2896016)\n&#39;    (Los Angeles, 1970358, 2479015, 2816061, 2966850, 3485398, 3694820)\n&#39;    \n&#39;    Sorted by population in 1990:\n&#39;    (New York, 7891957, 7781984, 7894862, 7071639, 7322564, 8008278)\n&#39;    (Los Angeles, 1970358, 2479015, 2816061, 2966850, 3485398, 3694820)\n&#39;    (Chicago, 3620962, 3550904, 3366957, 3005072, 2783726, 2896016)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_7_System_Collections_IStructuralEquatable_Equals_System_Object_System_Collections_IEqualityComparer_\">\r\n    \r\n            <a id=\"System_Tuple_7_System_Collections_IStructuralEquatable_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IStructuralEquatable.Equals(Object,IEqualityComparer)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value that indicates whether the current <span class=\"xref\">stem.Tuple`7</span> object is equal to a specified object based on a specified comparison method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool IStructuralEquatable.Equals (object other, System.Collections.IEqualityComparer comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>other</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to compare with this instance.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that defines the method to use to evaluate whether the two objects are equal.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current instance is equal to the specified object; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.tuple-7\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;</a> instance is cast to an <a class=\"xref\" href=\"system.collections.istructuralequatable\" data-linktype=\"relative-path\">IStructuralEquatable</a> interface.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.iequalitycomparer#System_Collections_IEqualityComparer_Equals_\" data-linktype=\"relative-path\">Equals</a> implementation is called only if other is not <code>null</code>, and if it can be successfully cast (in C#) or converted (in Visual Basic) to a <a class=\"xref\" href=\"system.tuple-7\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;</a> object whose components are of the same types as the current instance. The IStructuralEquatable.Equals method first passes the <a class=\"xref\" href=\"system.tuple-7#System_Tuple_7_Item1_\" data-linktype=\"relative-path\">Item1</a> values of the <a class=\"xref\" href=\"system.tuple-7\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;</a> objects to be compared to the <a class=\"xref\" href=\"system.collections.iequalitycomparer#System_Collections_IEqualityComparer_Equals_\" data-linktype=\"relative-path\">Equals</a> implementation. If this method call returns <code>true</code>, the method is called again and passed the <a class=\"xref\" href=\"system.tuple-7#System_Tuple_7_Item2_\" data-linktype=\"relative-path\">Item2</a> values of the two <a class=\"xref\" href=\"system.tuple-7\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;</a> objects. This continues until the method call returns <code>false</code> when it compares a specific pair of <code>Item</code> values, or the two <a class=\"xref\" href=\"system.tuple-7#System_Tuple_7_Item7_\" data-linktype=\"relative-path\">Item7</a> values are passed to the method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a <code>RateComparer</code> class that performs a custom test for equality. If the values that are passed to its <a class=\"xref\" href=\"system.collections.istructuralequatable#System_Collections_IStructuralEquatable_Equals_\" data-linktype=\"relative-path\">Equals</a> method are of type <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> or <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>, the method tests for equality by using only up to three fractional digits. Otherwise, it simply calls the <code>x</code> parameter&#39;s <code>Equals</code> method. The example uses this <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a> implementation to determine whether four <a class=\"xref\" href=\"system.tuple-7\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;</a> objects that contain data on the rate of population change between 1950 and 2000 are equal.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple`7.Equals#2\">using System;\nusing System.Collections;\n\npublic class RateComparer&lt;T1, T2, T3, T4, T5, T6, T7&gt; : IEqualityComparer\n{\n   private int argument = 0;\n\n   public new bool Equals(object x, object y) \n   {\n      argument++;\n      if (argument == 1) return true;\n\n      double fx, fy; \n      if (x is Double || x is Single)\n      {\n            fx = (double) x;\n            fy = (double) y;\n            return Math.Round(fx * 1000).Equals(Math.Round(fy * 1000));\n      }\n      else\n      {\n         return x.Equals(y);\n      }\n   }\n   \n   public int GetHashCode(object obj)\n   {\n      if (obj is Single || obj is Double)\n         return Math.Round(((double) obj) * 1000).GetHashCode();\n      else\n         return obj.GetHashCode();\n   }                \n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      var rate1 = Tuple.Create(&quot;New York&quot;, -.013934, .014505, \n                               -.1042733, .0354833, .093644, .0290792);\n      var rate2 = Tuple.Create(&quot;Unknown City&quot;, -.013934, .014505, \n                               -.1042733, .0354833, .093644, .0290792);\n      var rate3 = Tuple.Create(&quot;Unknown City&quot;, -.013934, .014505, \n                               -.1042733, .0354833, .093644, .029079);\n      var rate4 = Tuple.Create(&quot;San Francisco&quot;, -.0451934, -.0332858, \n                               -.0512803, .0662544, .0728964, .0491912);\n      IStructuralEquatable eq = rate1;\n      // Compare first tuple with remaining two tuples.\n      Console.WriteLine(&quot;{0} = &quot;, rate1.ToString());\n      Console.WriteLine(&quot;   {0} : {1}&quot;, rate2, \n                        eq.Equals(rate2, new RateComparer&lt;string, double, double, double, double, double, double&gt;()));\n      Console.WriteLine(&quot;   {0} : {1}&quot;, rate3, \n                        eq.Equals(rate3, new RateComparer&lt;string, double, double, double, double, double, double&gt;()));\n      Console.WriteLine(&quot;   {0} : {1}&quot;, rate4, \n                        eq.Equals(rate4, new RateComparer&lt;string, double, double,double,  double, double, double&gt;()));\n   }\n}\n// The example displays the following output:\n//    (New York, 0.014505, -0.1042733, 0.0354833, 0.093644, 0.0290792) =\n//       (Unknown City, 0.014505, -0.1042733, 0.0354833, 0.093644, 0.0290792) : True\n//       (Unknown City, 0.014505, -0.1042733, 0.0354833, 0.093644, 0.029079) : True\n//       (San Francisco, -0.0332858, -0.0512803, 0.0662544, 0.0728964, 0.0491912) : False\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple`7.Equals#2\">Imports System.Collections\n\nPublic Class RateComparer(Of T1, T2, T3, T4, T5, T6, T7) : Implements IEqualityComparer\n   Private argument As Integer = 0\n\n   Public Overloads Function Equals(x As Object, y As Object) As Boolean _\n                   Implements IEqualityComparer.Equals\n      argument += 1\n      If argument = 1 Then\n         Return True\n      Else\n         Dim fx, fy As Double\n         If typeof x Is Double Or typeof x Is Single Then\n            fx = CDbl(x)\n            fy = CDbl(y)\n            Return Math.Round(fx * 1000).Equals(Math.Round(fy * 1000))\n         Else\n            Return x.Equals(y)\n         End If\n      End If   \n   End Function\n   \n   Public Overloads Function GetHashCode(obj As Object) As Integer _\n                    Implements IEqualityComparer.GetHashCode\n      If TypeOf(obj) Is Single Or TypeOf(obj) Is Double Then\n         Return Math.Round(CDbl(obj) * 1000).GetHashCode()\n      Else\n         Return obj.GetHashCode()\n      End If\n   End Function                \nEnd Class\n\nModule Example\n   Public Sub Main()\n      Dim rate1 = Tuple.Create(&quot;New York&quot;, -.013934, .014505, \n                               -.1042733, .0354833, .093644, .0290792)\n      Dim rate2 = Tuple.Create(&quot;Unknown City&quot;, -.013934, .014505, \n                               -.1042733, .0354833, .093644, .0290792)\n      Dim rate3 = Tuple.Create(&quot;Unknown City&quot;, -.013934, .014505, \n                               -.1042733, .0354833, .093644, .029079)\n      Dim rate4 = Tuple.Create(&quot;San Francisco&quot;, -.0451934, -.0332858, \n                               -.0512803, .0662544, .0728964, .0491912)\n      Dim eq As IStructuralEquatable = rate1\n      &#39; Compare first tuple with remaining two tuples.\n      Console.WriteLine(&quot;{0} = &quot;, rate1.ToString())\n      Console.WriteLine(&quot;   {0} : {1}&quot;, rate2, \n                        eq.Equals(rate2, New RateComparer(Of String, Double, Double, Double, Double, Double, Double)()))\n      Console.WriteLine(&quot;   {0} : {1}&quot;, rate3, \n                        eq.Equals(rate3, New RateComparer(Of String, Double, Double, Double, Double, Double, Double)()))\n      Console.WriteLine(&quot;   {0} : {1}&quot;, rate4, \n                        eq.Equals(rate4, New RateComparer(Of String, Double, Double, Double, Double, Double, Double)()))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    (New York, -0.013934, 0.014505, -0.1042733, 0.0354833, 0.093644, 0.0290792) =\n&#39;       (Unknown City, -0.013934, 0.014505, -0.1042733, 0.0354833, 0.093644, 0.0290792) : True\n&#39;       (Unknown City, -0.013934, 0.014505, -0.1042733, 0.0354833, 0.093644, 0.029079) : True\n&#39;       (San Francisco, -0.0451934, -0.0332858, -0.0512803, 0.0662544, 0.0728964, 0.0491912) : False\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_7_System_Collections_IStructuralEquatable_GetHashCode_System_Collections_IEqualityComparer_\">\r\n    \r\n            <a id=\"System_Tuple_7_System_Collections_IStructuralEquatable_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IStructuralEquatable.GetHashCode(IEqualityComparer)</div>        \r\n          </div>\r\n    \r\n            <p>Calculates the hash code for the current <span class=\"xref\">stem.Tuple`7</span> object by using a specified computation method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">int IStructuralEquatable.GetHashCode (System.Collections.IEqualityComparer comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object whose <span class=\"xref\">stem.Collections.IEqualityComparer.GetHashCode*</span> method calculates the hash code of the current <span class=\"xref\">stem.Tuple`7</span> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer hash code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.tuple-7\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;</a> instance is cast to an <a class=\"xref\" href=\"system.collections.istructuralequatable\" data-linktype=\"relative-path\">IStructuralEquatable</a> interface.  </p>\n<p> the method simply wraps a call to the comparer object&#39;s <a class=\"xref\" href=\"system.collections.iequalitycomparer#System_Collections_IEqualityComparer_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a> implementation.  </p>\n<p> The algorithm used to compute the hash code should return the same hash code for two <a class=\"xref\" href=\"system.tuple-7\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;</a> objects that are considered to be equal.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_7_System_IComparable_CompareTo_System_Object_\">\r\n    \r\n            <a id=\"System_Tuple_7_System_IComparable_CompareTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IComparable.CompareTo(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Compares the current <span class=\"xref\">stem.Tuple`7</span> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">int IComparable.CompareTo (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to compare with the current instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A signed integer that indicates the relative position of this instance and <code>obj</code> in the sort order, as shown in the following table.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Description<br>\n </th></tr></thead><tbody><tr><td> A negative integer<br>\n </td><td> This instance precedes <code>obj</code>.<br>\n </td></tr><tr><td> Zero<br>\n </td><td> This instance and <code>obj</code> have the same position in the sort order.<br>\n </td></tr><tr><td> A positive integer<br>\n </td><td> This instance follows <code>obj</code>.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>obj</code> is not a <span class=\"xref\">stem.Tuple`7</span> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.tuple-7\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;</a> instance is cast to an <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface.  </p>\n<p> This method provides the <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> implementation for the <a class=\"xref\" href=\"system.tuple-7\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;</a> class. Although the method can be called directly, it is most commonly called by the default overloads of collection-sorting methods, such as <a class=\"xref\" href=\"system.array#System_Array_Sort_System_Array_\" data-linktype=\"relative-path\">System.Array.Sort(Array)</a> and <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_Add_\" data-linktype=\"relative-path\">Add</a>, to order the members of a collection.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> The IComparable.CompareTo method is intended for use in sorting operations. It should not be used when the primary purpose of a comparison is to determine whether two objects are equal. To determine whether two objects are equal, call the <a class=\"xref\" href=\"system.tuple-7#System_Tuple_7_Equals_System_Object_\" data-linktype=\"relative-path\">System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;.Equals(Object)</a> method.  </p>\n</div>\n<p> This method uses the default object comparer to compare each component.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an array of <a class=\"xref\" href=\"system.tuple-7\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;</a> objects that contain population data for three cities in the United States from 1950 to 2000. The seven components consist of the city name followed by the city&#39;s population at 10-year intervals from 1950 to 2000. The example displays the components of each tuple in the array in unsorted order, sorts the array, and then calls the <a class=\"xref\" href=\"system.tuple-7#System_Tuple_7_ToString_\" data-linktype=\"relative-path\">ToString</a> method to display each tuple in sorted order. The output shows that the array has been sorted by name, which is the first component. Note that the example does not directly call the IComparable.CompareTo method. This method is called implicitly by the <a class=\"xref\" href=\"system.array#System_Array_Sort_System_Array_\" data-linktype=\"relative-path\">Sort(Array)</a> method for each element in the array.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple`7.CompareTo#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Create array of sextuple with population data for three U.S. \n      // cities, 1950-2000.\n      Tuple&lt;string, int, int, int, int, int, int&gt;[] cities = \n          { Tuple.Create(&quot;Los Angeles&quot;, 1970358, 2479015, 2816061, 2966850, 3485398, 3694820),\n            Tuple.Create(&quot;New York&quot;, 7891957, 7781984, 7894862, 7071639, 7322564, 8008278),  \n            Tuple.Create(&quot;Chicago&quot;, 3620962, 3550904, 3366957, 3005072, 2783726, 2896016) }; \n      \n      // Display array in unsorted order.\n      Console.WriteLine(&quot;In unsorted order:&quot;);\n      foreach (var city in cities)\n         Console.WriteLine(city.ToString());\n\n      Console.WriteLine();\n      \n      Array.Sort(cities);\n                           \n      // Display array in sorted order.\n      Console.WriteLine(&quot;In sorted order:&quot;);\n      foreach (var city in cities)\n         Console.WriteLine(city.ToString());\n   }\n}\n// The example displays the following output:\n//    In unsorted order:\n//    (Los Angeles, 1970358, 2479015, 2816061, 2966850, 3485398, 3694820)\n//    (New York, 7891957, 7781984, 7894862, 7071639, 7322564, 8008278)\n//    (Chicago, 3620962, 3550904, 3366957, 3005072, 2783726, 2896016)\n//    \n//    In sorted order:\n//    (Chicago, 3620962, 3550904, 3366957, 3005072, 2783726, 2896016)\n//    (Los Angeles, 1970358, 2479015, 2816061, 2966850, 3485398, 3694820)\n//    (New York, 7891957, 7781984, 7894862, 7071639, 7322564, 8008278)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple`7.CompareTo#1\">Module Example\n   Public Sub Main()\n      &#39; Create array of sextuple with population data for three U.S. \n      &#39; cities, 1950-2000.\n      Dim cities() = _\n          { Tuple.Create(&quot;Los Angeles&quot;, 1970358, 2479015, 2816061, 2966850, 3485398, 3694820),\n            Tuple.Create(&quot;New York&quot;, 7891957, 7781984, 7894862, 7071639, 7322564, 8008278),  \n            Tuple.Create(&quot;Chicago&quot;, 3620962, 3550904, 3366957, 3005072, 2783726, 2896016) } \n      \n      &#39; Display array in unsorted order.\n      Console.WriteLine(&quot;In unsorted order:&quot;)\n      For Each city In cities\n         Console.WriteLine(city.ToString())\n      Next\n      Console.WriteLine()\n      \n      Array.Sort(cities) \n                           \n      &#39; Display array in sorted order.\n      Console.WriteLine(&quot;In sorted order:&quot;)\n      For Each city In cities\n         Console.WriteLine(city.ToString())\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    In unsorted order:\n&#39;    (Los Angeles, 1970358, 2479015, 2816061, 2966850, 3485398, 3694820)\n&#39;    (New York, 7891957, 7781984, 7894862, 7071639, 7322564, 8008278)\n&#39;    (Chicago, 3620962, 3550904, 3366957, 3005072, 2783726, 2896016)\n&#39;    \n&#39;    In sorted order:\n&#39;    (Chicago, 3620962, 3550904, 3366957, 3005072, 2783726, 2896016)\n&#39;    (Los Angeles, 1970358, 2479015, 2816061, 2966850, 3485398, 3694820)\n&#39;    (New York, 7891957, 7781984, 7894862, 7071639, 7322564, 8008278)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Tuple-7.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Tuple-7.yml\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;..ctor\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;.Equals\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;.Item1\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;.Item2\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;.Item3\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;.Item4\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;.Item5\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;.Item6\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;.Item7\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;.IStructuralComparable.CompareTo\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;.IStructuralEquatable.Equals\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;.IStructuralEquatable.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;.IComparable.CompareTo\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;.ToString\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"c0572ee7-963a-91e7-43e4-7441a00dbf64\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a 7-tuple, or septuple.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Tuple`7\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Tuple-7.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Tuple-7.yml","open_to_public_contributors":true,"api_name":["System.Tuple<T1,T2,T3,T4,T5,T6,T7>","System.Tuple<T1,T2,T3,T4,T5,T6,T7>..ctor","System.Tuple<T1,T2,T3,T4,T5,T6,T7>.Equals","System.Tuple<T1,T2,T3,T4,T5,T6,T7>.GetHashCode","System.Tuple<T1,T2,T3,T4,T5,T6,T7>.Item1","System.Tuple<T1,T2,T3,T4,T5,T6,T7>.Item2","System.Tuple<T1,T2,T3,T4,T5,T6,T7>.Item3","System.Tuple<T1,T2,T3,T4,T5,T6,T7>.Item4","System.Tuple<T1,T2,T3,T4,T5,T6,T7>.Item5","System.Tuple<T1,T2,T3,T4,T5,T6,T7>.Item6","System.Tuple<T1,T2,T3,T4,T5,T6,T7>.Item7","System.Tuple<T1,T2,T3,T4,T5,T6,T7>.IStructuralComparable.CompareTo","System.Tuple<T1,T2,T3,T4,T5,T6,T7>.IStructuralEquatable.Equals","System.Tuple<T1,T2,T3,T4,T5,T6,T7>.IStructuralEquatable.GetHashCode","System.Tuple<T1,T2,T3,T4,T5,T6,T7>.IComparable.CompareTo","System.Tuple<T1,T2,T3,T4,T5,T6,T7>.ToString"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Tuple`7","System::Tuple`7","System.Tuple`7.#ctor","System::Tuple`7::#ctor","System.Tuple`7.Equals","System::Tuple`7::Equals","System.Tuple`7.GetHashCode","System::Tuple`7::GetHashCode","System.Tuple`7.Item1","System::Tuple`7::Item1","System.Tuple`7.Item2","System::Tuple`7::Item2","System.Tuple`7.Item3","System::Tuple`7::Item3","System.Tuple`7.Item4","System::Tuple`7::Item4","System.Tuple`7.Item5","System::Tuple`7::Item5","System.Tuple`7.Item6","System::Tuple`7::Item6","System.Tuple`7.Item7","System::Tuple`7::Item7","System.Tuple`7.System#Collections#IStructuralComparable#CompareTo","System::Tuple`7::System#Collections#IStructuralComparable#CompareTo","System.Tuple`7.System#Collections#IStructuralEquatable#Equals","System::Tuple`7::System#Collections#IStructuralEquatable#Equals","System.Tuple`7.System#Collections#IStructuralEquatable#GetHashCode","System::Tuple`7::System#Collections#IStructuralEquatable#GetHashCode","System.Tuple`7.System#IComparable#CompareTo","System::Tuple`7::System#IComparable#CompareTo","System.Tuple`7.ToString","System::Tuple`7::ToString"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"c0572ee7-963a-91e7-43e4-7441a00dbf64","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/Tuple`7.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Tuple<T1,T2,T3,T4,T5,T6,T7> class | Microsoft Docs","_op_ogTitle":"Tuple<T1,T2,T3,T4,T5,T6,T7> class","description":"Represents a 7-tuple, or septuple.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.Tuple`7","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.tuple-7","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.tuple-7","fileRelativePath":"System.Tuple-7.html"},"themesRelativePathToOutputRoot":"_themes/"}