{"content":"    \r\n    <h1 id=\"System_Action_1\">\r\n      <span class=\"lang-csharp\">Action&lt;T&gt;</span>\r\n        Delegate\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Encapsulates a method that has a single parameter and does not return a value.  </p>\n<p> To browse the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#mscorlib/system/action.cs#486d58da4553e12d\" data-linktype=\"external\">Reference Source</a>.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public delegate void Action&lt;in T&gt;(T obj);</code></pre>\r\n    \r\n    \r\n    \t<h2>Type Parameters</h2>\r\n    \r\n    \t<table class=\"nameValue\">\r\n    \t\t<tr>\r\n    \t\t<td>\r\n    \t\tT\r\n    \t\t</td>\r\n    \t\t<td>\r\n    \t\t<p>The type of the parameter of the method that this delegate encapsulates.</p>\n\r\n    \t\t</td>\r\n    \t\t</tr>\r\n    \t</table>\r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">System.Delegate</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Action&lt;T&gt;</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <div class=\"NOTE\"><h5>Note</h5><p> To view the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#mscorlib/system/action.cs#486d58da4553e12d\" data-linktype=\"external\">Reference Source</a>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <a href=\"http://referencesource.microsoft.com/\" data-linktype=\"external\">instructions</a>.  </p>\n</div>\n<p> You can use the Action(T) delegate to pass a method as a parameter without explicitly declaring a custom delegate. The encapsulated method must correspond to the method signature that is defined by this delegate. This means that the encapsulated method must have one parameter that is passed to it by value, and it must not return a value. (In C#, the method must return <code>void</code>. In Visual Basic, it must be defined by the <code>Sub</code>â€¦<code>End Sub</code> construct. It can also be a method that returns a value that is ignored.) Typically, such a method is used to perform an operation.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To reference a method that has one parameter and returns a value, use the generic <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> delegate instead.  </p>\n</div>\n<p> When you use the Action(T) delegate, you do not have to explicitly define a delegate that encapsulates a method with a single parameter. For example, the following code explicitly declares a delegate named <code>DisplayMessage</code> and assigns a reference to either the <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> method or the <code>ShowWindowsMessage</code> method to its delegate instance.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Action~1#1\">using System;\nusing System.Windows.Forms;\n\ndelegate void DisplayMessage(string message);\n\npublic class TestCustomDelegate\n{\n   public static void Main()\n   {\n      DisplayMessage messageTarget; \n      \n      if (Environment.GetCommandLineArgs().Length &gt; 1)\n         messageTarget = ShowWindowsMessage;\n      else\n         messageTarget = Console.WriteLine;\n      \n      messageTarget(&quot;Hello, World!&quot;);   \n   }      \n      \n   private static void ShowWindowsMessage(string message)\n   {\n      MessageBox.Show(message);      \n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Action~1#1\">#using &lt;System.Windows.Forms.dll&gt;\n\nusing namespace System;\nusing namespace System::Windows::Forms;\n\npublic delegate void DisplayMessage(String^ message);\n\npublic ref class TestCustomDelegate\n{\npublic:\n   static void ShowWindowsMessage(String^ message)\n   {\n      MessageBox::Show(message);      \n   }\n};\n\nint main()\n{\n    DisplayMessage^ messageTarget; \n      \n    if (Environment::GetCommandLineArgs()-&gt;Length &gt; 1)\n       messageTarget = gcnew DisplayMessage(&amp;TestCustomDelegate::ShowWindowsMessage);\n    else\n       messageTarget = gcnew DisplayMessage(&amp;Console::WriteLine);\n    \n    messageTarget(L&quot;Hello World!&quot;);\n    return 0;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Action~1#1\">Delegate Sub DisplayMessage(message As String) \n\nModule TestCustomDelegate\n   Public Sub Main\n      Dim messageTarget As DisplayMessage \n\n      If Environment.GetCommandLineArgs().Length &gt; 1 Then\n         messageTarget = AddressOf ShowWindowsMessage\n      Else\n         messageTarget = AddressOf Console.WriteLine\n      End If\n      messageTarget(&quot;Hello, World!&quot;)\n   End Sub\n   \n   Private Sub ShowWindowsMessage(message As String)\n      MsgBox(message)\n   End Sub   \nEnd Module\n</code></pre><p> The following example simplifies this code by instantiating the Action(T) delegate instead of explicitly defining a new delegate and assigning a named method to it.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Action~1#2\">Module TestAction1\n   Public Sub Main\n      Dim messageTarget As Action(Of String) \n\n      If Environment.GetCommandLineArgs().Length &gt; 1 Then\n         messageTarget = AddressOf ShowWindowsMessage\n      Else\n         messageTarget = AddressOf Console.WriteLine\n      End If\n      messageTarget(&quot;Hello, World!&quot;)\n   End Sub\n   \n   Private Sub ShowWindowsMessage(message As String)\n      MsgBox(message)\n   End Sub   \nEnd Module\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Action~1#2\">#using &lt;System.Windows.Forms.dll&gt;\n\nusing namespace System;\nusing namespace System::Windows::Forms;\n\nnamespace ActionExample\n{\n   public ref class Message\n   {\n   public:\n      static void ShowWindowsMessage(String^ message)\n      {\n         MessageBox::Show(message);\n      }\n   };\n}\n\nint main()\n{\n   Action&lt;String^&gt;^ messageTarget;\n\n   if (Environment::GetCommandLineArgs()-&gt;Length &gt; 1)\n      messageTarget = gcnew Action&lt;String^&gt;(&amp;ActionExample::Message::ShowWindowsMessage);\n   else\n      messageTarget = gcnew Action&lt;String^&gt;(&amp;Console::WriteLine);\n\n   messageTarget(&quot;Hello, World!&quot;);\n   return 0;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Action~1#2\">using System;\nusing System.Windows.Forms;\n\npublic class TestAction1\n{\n   public static void Main()\n   {\n      Action&lt;string&gt; messageTarget; \n      \n      if (Environment.GetCommandLineArgs().Length &gt; 1)\n         messageTarget = ShowWindowsMessage;\n      else\n         messageTarget = Console.WriteLine;\n      \n      messageTarget(&quot;Hello, World!&quot;);   \n   }      \n      \n   private static void ShowWindowsMessage(string message)\n   {\n      MessageBox.Show(message);      \n   }\n}\n</code></pre><p> You can also use the Action(T) delegate with anonymous methods in C#, as the following example illustrates. (For an introduction to anonymous methods, see <a href=\"../Topic/Anonymous%20Methods%20(C%23%20Programming%20Guide).md\" data-linktype=\"relative-path\">Anonymous Methods</a>.)  </p>\n<pre><code class=\"lang-cs\" name=\"System.Action~1#3\">using System;\nusing System.Windows.Forms;\n\npublic class TestAnonMethod\n{\n   public static void Main()\n   {\n      Action&lt;string&gt; messageTarget; \n      \n      if (Environment.GetCommandLineArgs().Length &gt; 1)\n         messageTarget = delegate(string s) { ShowWindowsMessage(s); };\n      else\n         messageTarget = delegate(string s) { Console.WriteLine(s); };\n      \n      messageTarget(&quot;Hello, World!&quot;);\n   }\n      \n   private static void ShowWindowsMessage(string message)\n   {\n      MessageBox.Show(message);      \n   }\n}\n</code></pre><p> You can also assign a lambda expression to an Action(T) delegate instance, as the following example illustrates. (For an introduction to lambda expressions, see <a href=\"../Topic/Lambda%20Expressions%20(C%23%20Programming%20Guide).md\" data-linktype=\"relative-path\">Lambda Expressions</a>.)  </p>\n<pre><code class=\"lang-cs\" name=\"System.Action~1#4\">using System;\nusing System.Windows.Forms;\n\npublic class TestLambdaExpression\n{\n   public static void Main()\n   {\n      Action&lt;string&gt; messageTarget; \n      \n      if (Environment.GetCommandLineArgs().Length &gt; 1)\n         messageTarget = s =&gt; ShowWindowsMessage(s); \n      else\n         messageTarget = s =&gt; Console.WriteLine(s);\n      \n      messageTarget(&quot;Hello, World!&quot;);\n   }\n      \n   private static void ShowWindowsMessage(string message)\n   {\n      MessageBox.Show(message);      \n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Action~1#4\">Imports System.Windows.Forms\n\nPublic Module TestLambdaExpression\n   Public Sub Main()\n      Dim messageTarget As Action(Of String) \n      \n      If Environment.GetCommandLineArgs().Length &gt; 1 Then\n         messageTarget = Sub(s) ShowWindowsMessage(s) \n      Else\n         messageTarget = Sub(s) ShowConsoleMessage(s)\n      End If\n      messageTarget(&quot;Hello, World!&quot;)\n   End Sub\n      \n   Private Function ShowWindowsMessage(message As String) As Integer\n      Return MessageBox.Show(message)      \n   End Function\n   \n   Private Function ShowConsoleMessage(message As String) As Integer\n      Console.WriteLine(message)\n      Return 0\n   End Function\nEnd Module\n</code></pre><p> The <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_ForEach_\" data-linktype=\"relative-path\">ForEach</a> and &lt;xref:System.Array.ForEach%2A&gt; methods each take an Action(T) delegate as a parameter. The method encapsulated by the delegate allows you to perform an action on each element in the array or list. The example uses the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_ForEach_\" data-linktype=\"relative-path\">ForEach</a> method to provide an illustration.</p>\n\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Action-1.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Action-1.yml\">\r\n<meta name=\"APIName\" content=\"System.Action&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.Action&lt;T&gt;..ctor\">\r\n<meta name=\"APIName\" content=\"System.Action&lt;T&gt;.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Action&lt;T&gt;.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Action&lt;T&gt;.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"7ca08237-05c6-6d84-0bf3-5d53f7b5169f\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Encapsulates a method that has a single parameter and does not return a value.  \n To browse the .NET Framework source code for this type, see the Reference Source.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Action`1\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Action-1.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Action-1.yml","open_to_public_contributors":true,"api_name":["System.Action<T>","System.Action<T>..ctor","System.Action<T>.Invoke","System.Action<T>.BeginInvoke","System.Action<T>.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Action`1","System::Action`1"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"7ca08237-05c6-6d84-0bf3-5d53f7b5169f","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/Action`1.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Action<T> delegate | Microsoft Docs","_op_ogTitle":"Action<T> delegate","description":"Encapsulates a method that has a single parameter and does not return a value.  \n To browse the .NET Framework source code for this type, see the Reference Source.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.Action`1","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.action-1","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.action-1","fileRelativePath":"System.Action-1.html"},"themesRelativePathToOutputRoot":"_themes/"}