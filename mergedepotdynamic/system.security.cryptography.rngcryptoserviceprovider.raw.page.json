{"content":"    \r\n    <h1 id=\"System_Security_Cryptography_RNGCryptoServiceProvider\">\r\n      <span class=\"lang-csharp\">RNGCryptoServiceProvider</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Implements a cryptographic Random Number Generator (RNG) using the implementation provided by the cryptographic service provider (CSP). This class cannot be inherited.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic sealed class RNGCryptoServiceProvider : System.Security.Cryptography.RandomNumberGenerator</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.randomnumbergenerator\" data-linktype=\"relative-path\">System.Security.Cryptography.RandomNumberGenerator</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">RNGCryptoServiceProvider</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.randomnumbergenerator#System_Security_Cryptography_RandomNumberGenerator_Create\" data-linktype=\"relative-path\">Create()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.randomnumbergenerator#System_Security_Cryptography_RandomNumberGenerator_Create_System_String_\" data-linktype=\"relative-path\">Create(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.randomnumbergenerator#System_Security_Cryptography_RandomNumberGenerator_Dispose\" data-linktype=\"relative-path\">Dispose()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.randomnumbergenerator#System_Security_Cryptography_RandomNumberGenerator_GetBytes_System_Byte___System_Int32_System_Int32_\" data-linktype=\"relative-path\">GetBytes(Byte[],Int32,Int32)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <div class=\"IMPORTANT\"><h5>Important</h5><p> This type implements the <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <a class=\"xref\" href=\"system.idisposable#System_IDisposable_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method in a <code>try</code>/<code>catch</code> block. To dispose of it indirectly, use a language construct such as <code>using</code> (in C#) or <code>Using</code> (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface topic.</p>\n</div>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_RNGCryptoServiceProvider__ctor\" data-linktype=\"self-bookmark\">RNGCryptoServiceProvider()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.rngcryptoserviceprovider\" data-linktype=\"relative-path\">RNGCryptoServiceProvider</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_RNGCryptoServiceProvider__ctor_System_Byte___\" data-linktype=\"self-bookmark\">RNGCryptoServiceProvider(Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.rngcryptoserviceprovider\" data-linktype=\"relative-path\">RNGCryptoServiceProvider</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_RNGCryptoServiceProvider__ctor_System_Security_Cryptography_CspParameters_\" data-linktype=\"self-bookmark\">RNGCryptoServiceProvider(CspParameters)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.rngcryptoserviceprovider\" data-linktype=\"relative-path\">RNGCryptoServiceProvider</a> class with the specified parameters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_RNGCryptoServiceProvider__ctor_System_String_\" data-linktype=\"self-bookmark\">RNGCryptoServiceProvider(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.rngcryptoserviceprovider\" data-linktype=\"relative-path\">RNGCryptoServiceProvider</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_RNGCryptoServiceProvider_Dispose_System_Boolean_\" data-linktype=\"self-bookmark\">Dispose(Boolean)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_RNGCryptoServiceProvider_GetBytes_System_Byte___\" data-linktype=\"self-bookmark\">GetBytes(Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Fills an array of bytes with a cryptographically strong sequence of random values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_RNGCryptoServiceProvider_GetNonZeroBytes_System_Byte___\" data-linktype=\"self-bookmark\">GetNonZeroBytes(Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Fills an array of bytes with a cryptographically strong sequence of random nonzero values.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_RNGCryptoServiceProvider__ctor\">\r\n    \r\n            <a id=\"System_Security_Cryptography_RNGCryptoServiceProvider__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RNGCryptoServiceProvider()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.rngcryptoserviceprovider\" data-linktype=\"relative-path\">RNGCryptoServiceProvider</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public RNGCryptoServiceProvider ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to create a random number with the <a class=\"xref\" href=\"system.security.cryptography.rngcryptoserviceprovider\" data-linktype=\"relative-path\">RNGCryptoServiceProvider</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"RNGCSP#1\">&#39;The following sample uses the Cryptography class to simulate the roll of a dice.\nImports System\nImports System.IO\nImports System.Text\nImports System.Security.Cryptography\n\n\n\nClass RNGCSP\n    Private Shared rngCsp As New RNGCryptoServiceProvider()\n    &#39; Main method.\n    Public Shared Sub Main()\n        Const totalRolls As Integer = 25000\n        Dim results(5) As Integer\n\n        &#39; Roll the dice 25000 times and display\n        &#39; the results to the console.\n        Dim x As Integer\n        For x = 0 To totalRolls\n            Dim roll As Byte = RollDice(System.Convert.ToByte(results.Length))\n            results((roll - 1)) += 1\n        Next x\n        Dim i As Integer\n\n        While i &lt; results.Length\n            Console.WriteLine(&quot;{0}: {1} ({2:p1})&quot;, i + 1, results(i), System.Convert.ToDouble(results(i)) / System.Convert.ToDouble(totalRolls))\n            i += 1\n        End While\n        rngCsp.Dispose()\n        Console.ReadLine()\n    End Sub\n\n\n    &#39; This method simulates a roll of the dice. The input parameter is the\n    &#39; number of sides of the dice.\n    Public Shared Function RollDice(ByVal numberSides As Byte) As Byte\n        If numberSides &lt;= 0 Then\n            Throw New ArgumentOutOfRangeException(&quot;NumSides&quot;)\n        End If \n        &#39; Create a byte array to hold the random value.\n        Dim randomNumber(0) As Byte\n        Do\n            &#39; Fill the array with a random value.\n            rngCsp.GetBytes(randomNumber)\n        Loop While Not IsFairRoll(randomNumber(0), numberSides)\n        &#39; Return the random number mod the number\n        &#39; of sides.  The possible values are zero-\n        &#39; based, so we add one.\n        Return System.Convert.ToByte(randomNumber(0) Mod numberSides + 1)\n\n    End Function\n\n\n    Private Shared Function IsFairRoll(ByVal roll As Byte, ByVal numSides As Byte) As Boolean\n        &#39; There are MaxValue / numSides full sets of numbers that can come up\n        &#39; in a single byte.  For instance, if we have a 6 sided die, there are\n        &#39; 42 full sets of 1-6 that come up.  The 43rd set is incomplete.\n        Dim fullSetsOfValues As Integer = [Byte].MaxValue / numSides\n\n        &#39; If the roll is within this range of fair values, then we let it continue.\n        &#39; In the 6 sided die case, a roll between 0 and 251 is allowed.  (We use\n        &#39; &lt; rather than &lt;= since the = portion allows through an extra 0 value).\n        &#39; 252 through 255 would provide an extra 0, 1, 2, 3 so they are not fair\n        &#39; to use.\n        Return roll &lt; numSides * fullSetsOfValues\n\n    End Function &#39;IsFairRoll\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"RNGCSP#1\">//The following sample uses the Cryptography class to simulate the roll of a dice.\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Text;\nusing namespace System::Security::Cryptography;\n\nref class RNGCSP\n{\npublic:\n    // Main method.\n    static void Main()\n    {\n        const int totalRolls = 25000;\n        array&lt;int&gt;^ results = gcnew array&lt;int&gt;(6);\n\n        // Roll the dice 25000 times and display\n        // the results to the console.\n        for (int x = 0; x &lt; totalRolls; x++)\n        {\n            Byte roll = RollDice((Byte)results-&gt;Length);\n            results[roll - 1]++;\n        }\n        for (int i = 0; i &lt; results-&gt;Length; ++i)\n        {\n            Console::WriteLine(&quot;{0}: {1} ({2:p1})&quot;, i + 1, results[i], (double)results[i] / (double)totalRolls);\n        }\n    }\n\n    // This method simulates a roll of the dice. The input parameter is the\n    // number of sides of the dice.\n\n    static Byte RollDice(Byte numberSides)\n    {\n        if (numberSides &lt;= 0)\n            throw gcnew ArgumentOutOfRangeException(&quot;numberSides&quot;);\n        // Create a new instance of the RNGCryptoServiceProvider.\n        RNGCryptoServiceProvider^ rngCsp = gcnew RNGCryptoServiceProvider();\n        // Create a byte array to hold the random value.\n        array&lt;Byte&gt;^ randomNumber = gcnew array&lt;Byte&gt;(1);\n        do\n        {\n            // Fill the array with a random value.\n            rngCsp-&gt;GetBytes(randomNumber);\n        }\n        while (!IsFairRoll(randomNumber[0], numberSides));\n        // Return the random number mod the number\n        // of sides.  The possible values are zero-\n        // based, so we add one.\n        return (Byte)((randomNumber[0] % numberSides) + 1);\n    }\n\nprivate:\n    static bool IsFairRoll(Byte roll, Byte numSides)\n    {\n        // There are MaxValue / numSides full sets of numbers that can come up\n        // in a single byte.  For instance, if we have a 6 sided die, there are\n        // 42 full sets of 1-6 that come up.  The 43rd set is incomplete.\n        int fullSetsOfValues = Byte::MaxValue / numSides;\n\n        // If the roll is within this range of fair values, then we let it continue.\n        // In the 6 sided die case, a roll between 0 and 251 is allowed.  (We use\n        // &lt; rather than &lt;= since the = portion allows through an extra 0 value).\n        // 252 through 255 would provide an extra 0, 1, 2, 3 so they are not fair\n        // to use.\n        return roll &lt; numSides * fullSetsOfValues;\n    }\n};\n\nint main()\n{\n    RNGCSP::Main();\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"RNGCSP#1\">//The following sample uses the Cryptography class to simulate the roll of a dice.\n\nusing System;\nusing System.IO;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass RNGCSP\n{\n    private static RNGCryptoServiceProvider rngCsp = new RNGCryptoServiceProvider();\n    // Main method.\n    public static void Main()\n    {\n        const int totalRolls = 25000;\n        int[] results = new int[6];\n\n        // Roll the dice 25000 times and display\n        // the results to the console.\n        for (int x = 0; x &lt; totalRolls; x++)\n        {\n            byte roll = RollDice((byte)results.Length);\n            results[roll - 1]++;\n        }\n        for (int i = 0; i &lt; results.Length; ++i)\n        {\n            Console.WriteLine(&quot;{0}: {1} ({2:p1})&quot;, i + 1, results[i], (double)results[i] / (double)totalRolls);\n        }\n        rngCsp.Dispose();\n        Console.ReadLine();\n    }\n\n    // This method simulates a roll of the dice. The input parameter is the\n    // number of sides of the dice.\n\n    public static byte RollDice(byte numberSides)\n    {\n        if (numberSides &lt;= 0)\n            throw new ArgumentOutOfRangeException(&quot;numberSides&quot;);\n\n        // Create a byte array to hold the random value.\n        byte[] randomNumber = new byte[1];\n        do\n        {\n            // Fill the array with a random value.\n            rngCsp.GetBytes(randomNumber);\n        }\n        while (!IsFairRoll(randomNumber[0], numberSides));\n        // Return the random number mod the number\n        // of sides.  The possible values are zero-\n        // based, so we add one.\n        return (byte)((randomNumber[0] % numberSides) + 1);\n    }\n\n    private static bool IsFairRoll(byte roll, byte numSides)\n    {\n        // There are MaxValue / numSides full sets of numbers that can come up\n        // in a single byte.  For instance, if we have a 6 sided die, there are\n        // 42 full sets of 1-6 that come up.  The 43rd set is incomplete.\n        int fullSetsOfValues = Byte.MaxValue / numSides;\n\n        // If the roll is within this range of fair values, then we let it continue.\n        // In the 6 sided die case, a roll between 0 and 251 is allowed.  (We use\n        // &lt; rather than &lt;= since the = portion allows through an extra 0 value).\n        // 252 through 255 would provide an extra 0, 1, 2, 3 so they are not fair\n        // to use.\n        return roll &lt; numSides * fullSetsOfValues;\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_RNGCryptoServiceProvider__ctor_System_Byte___\">\r\n    \r\n            <a id=\"System_Security_Cryptography_RNGCryptoServiceProvider__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RNGCryptoServiceProvider(Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.rngcryptoserviceprovider\" data-linktype=\"relative-path\">RNGCryptoServiceProvider</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public RNGCryptoServiceProvider (byte[] rgb);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgb</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A byte array. This value is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method does not directly initialize the <a class=\"xref\" href=\"system.security.cryptography.rngcryptoserviceprovider\" data-linktype=\"relative-path\">RNGCryptoServiceProvider</a> class.  Calling this method is equivalent to calling the <a class=\"xref\" href=\"system.security.cryptography.rngcryptoserviceprovider#System_Security_Cryptography_RNGCryptoServiceProvider__ctor_\" data-linktype=\"relative-path\">RNGCryptoServiceProvider</a> constructor and passing <code>null</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_RNGCryptoServiceProvider__ctor_System_Security_Cryptography_CspParameters_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_RNGCryptoServiceProvider__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RNGCryptoServiceProvider(CspParameters)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.rngcryptoserviceprovider\" data-linktype=\"relative-path\">RNGCryptoServiceProvider</a> class with the specified parameters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public RNGCryptoServiceProvider (System.Security.Cryptography.CspParameters cspParams);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>cspParams</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cspparameters\" data-linktype=\"relative-path\">CspParameters</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The parameters to pass to the cryptographic service provider (CSP).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_RNGCryptoServiceProvider__ctor_System_String_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_RNGCryptoServiceProvider__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RNGCryptoServiceProvider(String)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.rngcryptoserviceprovider\" data-linktype=\"relative-path\">RNGCryptoServiceProvider</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public RNGCryptoServiceProvider (string str);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>str</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string input. This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method does not directly initialize the <a class=\"xref\" href=\"system.security.cryptography.rngcryptoserviceprovider\" data-linktype=\"relative-path\">RNGCryptoServiceProvider</a> class.  Calling this method is equivalent to calling the <a class=\"xref\" href=\"system.security.cryptography.rngcryptoserviceprovider#System_Security_Cryptography_RNGCryptoServiceProvider__ctor_\" data-linktype=\"relative-path\">RNGCryptoServiceProvider</a> constructor and passing <code>null</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_RNGCryptoServiceProvider_Dispose_System_Boolean_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_RNGCryptoServiceProvider_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dispose(Boolean)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override void Dispose (bool disposing);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>disposing</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_RNGCryptoServiceProvider_GetBytes_System_Byte___\">\r\n    \r\n            <a id=\"System_Security_Cryptography_RNGCryptoServiceProvider_GetBytes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetBytes(Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Fills an array of bytes with a cryptographically strong sequence of random values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void GetBytes (byte[] data);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>data</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The array to fill with a cryptographically strong sequence of random values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The cryptographic service provider (CSP) cannot be acquired.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>data</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The length of the byte array determines how many cryptographically strong random bytes are produced.  </p>\n<p> This method is thread safe.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to create a random number with the <a class=\"xref\" href=\"system.security.cryptography.rngcryptoserviceprovider\" data-linktype=\"relative-path\">RNGCryptoServiceProvider</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"RNGCSP#1\">&#39;The following sample uses the Cryptography class to simulate the roll of a dice.\nImports System\nImports System.IO\nImports System.Text\nImports System.Security.Cryptography\n\n\n\nClass RNGCSP\n    Private Shared rngCsp As New RNGCryptoServiceProvider()\n    &#39; Main method.\n    Public Shared Sub Main()\n        Const totalRolls As Integer = 25000\n        Dim results(5) As Integer\n\n        &#39; Roll the dice 25000 times and display\n        &#39; the results to the console.\n        Dim x As Integer\n        For x = 0 To totalRolls\n            Dim roll As Byte = RollDice(System.Convert.ToByte(results.Length))\n            results((roll - 1)) += 1\n        Next x\n        Dim i As Integer\n\n        While i &lt; results.Length\n            Console.WriteLine(&quot;{0}: {1} ({2:p1})&quot;, i + 1, results(i), System.Convert.ToDouble(results(i)) / System.Convert.ToDouble(totalRolls))\n            i += 1\n        End While\n        rngCsp.Dispose()\n        Console.ReadLine()\n    End Sub\n\n\n    &#39; This method simulates a roll of the dice. The input parameter is the\n    &#39; number of sides of the dice.\n    Public Shared Function RollDice(ByVal numberSides As Byte) As Byte\n        If numberSides &lt;= 0 Then\n            Throw New ArgumentOutOfRangeException(&quot;NumSides&quot;)\n        End If \n        &#39; Create a byte array to hold the random value.\n        Dim randomNumber(0) As Byte\n        Do\n            &#39; Fill the array with a random value.\n            rngCsp.GetBytes(randomNumber)\n        Loop While Not IsFairRoll(randomNumber(0), numberSides)\n        &#39; Return the random number mod the number\n        &#39; of sides.  The possible values are zero-\n        &#39; based, so we add one.\n        Return System.Convert.ToByte(randomNumber(0) Mod numberSides + 1)\n\n    End Function\n\n\n    Private Shared Function IsFairRoll(ByVal roll As Byte, ByVal numSides As Byte) As Boolean\n        &#39; There are MaxValue / numSides full sets of numbers that can come up\n        &#39; in a single byte.  For instance, if we have a 6 sided die, there are\n        &#39; 42 full sets of 1-6 that come up.  The 43rd set is incomplete.\n        Dim fullSetsOfValues As Integer = [Byte].MaxValue / numSides\n\n        &#39; If the roll is within this range of fair values, then we let it continue.\n        &#39; In the 6 sided die case, a roll between 0 and 251 is allowed.  (We use\n        &#39; &lt; rather than &lt;= since the = portion allows through an extra 0 value).\n        &#39; 252 through 255 would provide an extra 0, 1, 2, 3 so they are not fair\n        &#39; to use.\n        Return roll &lt; numSides * fullSetsOfValues\n\n    End Function &#39;IsFairRoll\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"RNGCSP#1\">//The following sample uses the Cryptography class to simulate the roll of a dice.\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Text;\nusing namespace System::Security::Cryptography;\n\nref class RNGCSP\n{\npublic:\n    // Main method.\n    static void Main()\n    {\n        const int totalRolls = 25000;\n        array&lt;int&gt;^ results = gcnew array&lt;int&gt;(6);\n\n        // Roll the dice 25000 times and display\n        // the results to the console.\n        for (int x = 0; x &lt; totalRolls; x++)\n        {\n            Byte roll = RollDice((Byte)results-&gt;Length);\n            results[roll - 1]++;\n        }\n        for (int i = 0; i &lt; results-&gt;Length; ++i)\n        {\n            Console::WriteLine(&quot;{0}: {1} ({2:p1})&quot;, i + 1, results[i], (double)results[i] / (double)totalRolls);\n        }\n    }\n\n    // This method simulates a roll of the dice. The input parameter is the\n    // number of sides of the dice.\n\n    static Byte RollDice(Byte numberSides)\n    {\n        if (numberSides &lt;= 0)\n            throw gcnew ArgumentOutOfRangeException(&quot;numberSides&quot;);\n        // Create a new instance of the RNGCryptoServiceProvider.\n        RNGCryptoServiceProvider^ rngCsp = gcnew RNGCryptoServiceProvider();\n        // Create a byte array to hold the random value.\n        array&lt;Byte&gt;^ randomNumber = gcnew array&lt;Byte&gt;(1);\n        do\n        {\n            // Fill the array with a random value.\n            rngCsp-&gt;GetBytes(randomNumber);\n        }\n        while (!IsFairRoll(randomNumber[0], numberSides));\n        // Return the random number mod the number\n        // of sides.  The possible values are zero-\n        // based, so we add one.\n        return (Byte)((randomNumber[0] % numberSides) + 1);\n    }\n\nprivate:\n    static bool IsFairRoll(Byte roll, Byte numSides)\n    {\n        // There are MaxValue / numSides full sets of numbers that can come up\n        // in a single byte.  For instance, if we have a 6 sided die, there are\n        // 42 full sets of 1-6 that come up.  The 43rd set is incomplete.\n        int fullSetsOfValues = Byte::MaxValue / numSides;\n\n        // If the roll is within this range of fair values, then we let it continue.\n        // In the 6 sided die case, a roll between 0 and 251 is allowed.  (We use\n        // &lt; rather than &lt;= since the = portion allows through an extra 0 value).\n        // 252 through 255 would provide an extra 0, 1, 2, 3 so they are not fair\n        // to use.\n        return roll &lt; numSides * fullSetsOfValues;\n    }\n};\n\nint main()\n{\n    RNGCSP::Main();\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"RNGCSP#1\">//The following sample uses the Cryptography class to simulate the roll of a dice.\n\nusing System;\nusing System.IO;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass RNGCSP\n{\n    private static RNGCryptoServiceProvider rngCsp = new RNGCryptoServiceProvider();\n    // Main method.\n    public static void Main()\n    {\n        const int totalRolls = 25000;\n        int[] results = new int[6];\n\n        // Roll the dice 25000 times and display\n        // the results to the console.\n        for (int x = 0; x &lt; totalRolls; x++)\n        {\n            byte roll = RollDice((byte)results.Length);\n            results[roll - 1]++;\n        }\n        for (int i = 0; i &lt; results.Length; ++i)\n        {\n            Console.WriteLine(&quot;{0}: {1} ({2:p1})&quot;, i + 1, results[i], (double)results[i] / (double)totalRolls);\n        }\n        rngCsp.Dispose();\n        Console.ReadLine();\n    }\n\n    // This method simulates a roll of the dice. The input parameter is the\n    // number of sides of the dice.\n\n    public static byte RollDice(byte numberSides)\n    {\n        if (numberSides &lt;= 0)\n            throw new ArgumentOutOfRangeException(&quot;numberSides&quot;);\n\n        // Create a byte array to hold the random value.\n        byte[] randomNumber = new byte[1];\n        do\n        {\n            // Fill the array with a random value.\n            rngCsp.GetBytes(randomNumber);\n        }\n        while (!IsFairRoll(randomNumber[0], numberSides));\n        // Return the random number mod the number\n        // of sides.  The possible values are zero-\n        // based, so we add one.\n        return (byte)((randomNumber[0] % numberSides) + 1);\n    }\n\n    private static bool IsFairRoll(byte roll, byte numSides)\n    {\n        // There are MaxValue / numSides full sets of numbers that can come up\n        // in a single byte.  For instance, if we have a 6 sided die, there are\n        // 42 full sets of 1-6 that come up.  The 43rd set is incomplete.\n        int fullSetsOfValues = Byte.MaxValue / numSides;\n\n        // If the roll is within this range of fair values, then we let it continue.\n        // In the 6 sided die case, a roll between 0 and 251 is allowed.  (We use\n        // &lt; rather than &lt;= since the = portion allows through an extra 0 value).\n        // 252 through 255 would provide an extra 0, 1, 2, 3 so they are not fair\n        // to use.\n        return roll &lt; numSides * fullSetsOfValues;\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_RNGCryptoServiceProvider_GetNonZeroBytes_System_Byte___\">\r\n    \r\n            <a id=\"System_Security_Cryptography_RNGCryptoServiceProvider_GetNonZeroBytes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetNonZeroBytes(Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Fills an array of bytes with a cryptographically strong sequence of random nonzero values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void GetNonZeroBytes (byte[] data);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>data</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The array to fill with a cryptographically strong sequence of random nonzero values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The cryptographic service provider (CSP) cannot be acquired.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>data</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The length of the byte array determines how many cryptographically strong random nonzero bytes are produced.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a random sequence of 100 nonzero bytes and stores it in <code>random</code>.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic RandomNumberGenerator.GetNonZeroBytes Example#1\">      array&lt;Byte&gt;^ random = gcnew array&lt;Byte&gt;(100);\n      //RNGCryptoServiceProvider is an implementation of a random number generator.\n      RNGCryptoServiceProvider^ rng = gcnew RNGCryptoServiceProvider;\n      rng-&gt;GetNonZeroBytes( random ); // The array is now filled with cryptographically strong random bytes, and none are zero.\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic RandomNumberGenerator.GetNonZeroBytes Example#1\">    byte[] random = new Byte[100];\n    //RNGCryptoServiceProvider is an implementation of a random number generator.\n    RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();\n    rng.GetNonZeroBytes(random); // The array is now filled with cryptographically strong random bytes, and none are zero.\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic RandomNumberGenerator.GetNonZeroBytes Example#1\"> Dim random() As Byte = New Byte(100) {}\n &#39;RNGCryptoServiceProvider is an implementation of an RNG\n Dim rng As New RNGCryptoServiceProvider()\n rng.GetNonZeroBytes(random) &#39; bytes in random are now random and none are zero\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Security.Cryptography.RNGCryptoServiceProvider.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.Cryptography.RNGCryptoServiceProvider.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.RNGCryptoServiceProvider\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.RNGCryptoServiceProvider..ctor\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.RNGCryptoServiceProvider.Dispose\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.RNGCryptoServiceProvider.GetBytes\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.RNGCryptoServiceProvider.GetNonZeroBytes\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"b3cb6459-9cee-ec87-3059-acc5ad51e237\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Implements a cryptographic Random Number Generator (RNG) using the implementation provided by the cryptographic service provider (CSP). This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Security.Cryptography/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.Cryptography.RNGCryptoServiceProvider\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Security.Cryptography.RNGCryptoServiceProvider.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.Cryptography.RNGCryptoServiceProvider.yml","open_to_public_contributors":true,"api_name":["System.Security.Cryptography.RNGCryptoServiceProvider","System.Security.Cryptography.RNGCryptoServiceProvider..ctor","System.Security.Cryptography.RNGCryptoServiceProvider.Dispose","System.Security.Cryptography.RNGCryptoServiceProvider.GetBytes","System.Security.Cryptography.RNGCryptoServiceProvider.GetNonZeroBytes"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.Cryptography.RNGCryptoServiceProvider","System::Security::Cryptography::RNGCryptoServiceProvider","System.Security.Cryptography.RNGCryptoServiceProvider.#ctor","System::Security::Cryptography::RNGCryptoServiceProvider::#ctor","System.Security.Cryptography.RNGCryptoServiceProvider.Dispose","System::Security::Cryptography::RNGCryptoServiceProvider::Dispose","System.Security.Cryptography.RNGCryptoServiceProvider.GetBytes","System::Security::Cryptography::RNGCryptoServiceProvider::GetBytes","System.Security.Cryptography.RNGCryptoServiceProvider.GetNonZeroBytes","System::Security::Cryptography::RNGCryptoServiceProvider::GetNonZeroBytes"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"b3cb6459-9cee-ec87-3059-acc5ad51e237","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Security.Cryptography/RNGCryptoServiceProvider.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"RNGCryptoServiceProvider class | Microsoft Docs","_op_ogTitle":"RNGCryptoServiceProvider class","description":"Implements a cryptographic Random Number Generator (RNG) using the implementation provided by the cryptographic service provider (CSP). This class cannot be inherited.\n","toc_asset_id":"_splitted/System.Security.Cryptography/toc.json","toc_rel":"_splitted/System.Security.Cryptography/toc.json","source_url":"","ms.assetid":"System.Security.Cryptography.RNGCryptoServiceProvider","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.cryptography.rngcryptoserviceprovider","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.cryptography.rngcryptoserviceprovider","fileRelativePath":"System.Security.Cryptography.RNGCryptoServiceProvider.html"},"themesRelativePathToOutputRoot":"_themes/"}