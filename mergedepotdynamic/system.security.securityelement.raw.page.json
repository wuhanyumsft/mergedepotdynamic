{"content":"    \r\n    <h1 id=\"System_Security_SecurityElement\">\r\n      <span class=\"lang-csharp\">SecurityElement</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents the XML object model for encoding security objects. This class cannot be inherited.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic sealed class SecurityElement</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">SecurityElement</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>This class is intended to be a lightweight implementation of a simple XML object model for use within the security system, and not for use as a general XML object model. This documentation assumes a basic knowledge of XML.  </p>\n<p> The simple XML object model for an element consists of the following parts:  </p>\n<ul>\n<li><p>The tag is the element name.  </p>\n</li>\n<li><p>The attributes are zero or more name/value attribute pairs on the element.  </p>\n</li>\n<li><p>The children are zero or more elements nested within <code>&lt;tag&gt;</code> and <code>&lt;/tag&gt;</code>.  </p>\n<p>It is strongly suggested that attribute based XML representation is used to express security elements and their values. This means properties of an element are expressed as attributes and property values are expressed as attribute values. Avoid nesting text within tags. For any <code>&lt;tag&gt;text&lt;/tag&gt;</code> representation a representation of type <code>&lt;tag value=&quot;text&quot;/&gt;</code> is usually available. Using this attribute-based XML representation increases readability and allows easy WMI portability of the resulting XML serialization.  </p>\n<p>An attribute name must be one character or longer, and cannot be <code>null</code>. If element-based value representation is used, elements with a text string that is <code>null</code> are represented in the <code>&lt;tag/&gt;</code> form; otherwise, text is delimited by the <code>&lt;tag&gt;</code> and <code>&lt;/tag&gt;</code> tokens. Both forms can be combined with attributes, which are shown if present.  </p>\n<p>The tags, attributes, and text of elements, if present, are always case-sensitive. The XML form contains quotations and escapes where necessary. String values that include characters invalid for use in XML result in an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>. These rules apply to all properties and methods.  </p>\n</li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> For performance reasons, character validity is only checked when the element is encoded into XML text form, and not on every set of a property or method. Static methods allow explicit checking where needed.</p>\n</div>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_SecurityElement__ctor_System_String_\" data-linktype=\"self-bookmark\">SecurityElement(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a> class with the specified tag.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_SecurityElement__ctor_System_String_System_String_\" data-linktype=\"self-bookmark\">SecurityElement(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a> class with the specified tag and text.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_SecurityElement_Attributes\" data-linktype=\"self-bookmark\">Attributes</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the attributes of an XML element as name/value pairs.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_SecurityElement_Children\" data-linktype=\"self-bookmark\">Children</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the array of child elements of the XML element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_SecurityElement_Tag\" data-linktype=\"self-bookmark\">Tag</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the tag name of an XML element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_SecurityElement_Text\" data-linktype=\"self-bookmark\">Text</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the text within an XML element.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_SecurityElement_AddAttribute_System_String_System_String_\" data-linktype=\"self-bookmark\">AddAttribute(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds a name/value attribute to an XML element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_SecurityElement_AddChild_System_Security_SecurityElement_\" data-linktype=\"self-bookmark\">AddChild(SecurityElement)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds a child element to the XML element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_SecurityElement_Attribute_System_String_\" data-linktype=\"self-bookmark\">Attribute(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Finds an attribute by name in an XML element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_SecurityElement_Copy\" data-linktype=\"self-bookmark\">Copy()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates and returns an identical copy of the current <a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_SecurityElement_Equal_System_Security_SecurityElement_\" data-linktype=\"self-bookmark\">Equal(SecurityElement)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares two XML element objects for equality.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_SecurityElement_Escape_System_String_\" data-linktype=\"self-bookmark\">Escape(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Replaces invalid XML characters in a string with their valid XML equivalent.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_SecurityElement_FromString_System_String_\" data-linktype=\"self-bookmark\">FromString(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a security element from an XML-encoded string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_SecurityElement_IsValidAttributeName_System_String_\" data-linktype=\"self-bookmark\">IsValidAttributeName(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether a string is a valid attribute name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_SecurityElement_IsValidAttributeValue_System_String_\" data-linktype=\"self-bookmark\">IsValidAttributeValue(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether a string is a valid attribute value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_SecurityElement_IsValidTag_System_String_\" data-linktype=\"self-bookmark\">IsValidTag(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether a string is a valid tag.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_SecurityElement_IsValidText_System_String_\" data-linktype=\"self-bookmark\">IsValidText(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether a string is valid as text within an XML element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_SecurityElement_SearchForChildByTag_System_String_\" data-linktype=\"self-bookmark\">SearchForChildByTag(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Finds a child by its tag name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_SecurityElement_SearchForTextOfTag_System_String_\" data-linktype=\"self-bookmark\">SearchForTextOfTag(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Finds a child by its tag name and returns the contained text.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_SecurityElement_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Produces a string representation of an XML element and its constituent attributes, child elements, and text.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_SecurityElement__ctor_System_String_\">\r\n    \r\n            <a id=\"System_Security_SecurityElement__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SecurityElement(String)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a> class with the specified tag.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public SecurityElement (string tag);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>tag</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The tag name of an XML element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>tag</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>tag</code> parameter is invalid in XML.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>tag</code> parameter must consist of a valid XML tag name. Use <a class=\"xref\" href=\"system.security.securityelement#System_Security_SecurityElement_Escape_\" data-linktype=\"relative-path\">Escape</a> to remove invalid characters from the string.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code shows the use of  the SecurityElement constructor to create a new <a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a> object.  This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"SecurityElementMembers#2\">        Dim windowsRoleElement As New SecurityElement(&quot;WindowsMembership.WindowsRole&quot;)\n</code></pre><pre><code class=\"lang-cpp\" name=\"SecurityElementMembers#2\">      SecurityElement^ windowsRoleElement = gcnew SecurityElement( L&quot;WindowsMembership.WindowsRole&quot; );\n</code></pre><pre><code class=\"lang-cs\" name=\"SecurityElementMembers#2\">        SecurityElement windowsRoleElement = \n            new SecurityElement(&quot;WindowsMembership.WindowsRole&quot;);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_SecurityElement__ctor_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Security_SecurityElement__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SecurityElement(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a> class with the specified tag and text.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public SecurityElement (string tag, string text);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>tag</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The tag name of the XML element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>text</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The text content within the element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>tag</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>tag</code> parameter or <code>text</code> parameter is invalid in XML.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the <code>text</code> parameter is <code>null</code> this constructor produces an element identical to the default constructor.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_SecurityElement_Attributes\">\r\n    \r\n            <a id=\"System_Security_SecurityElement_Attributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Attributes</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the attributes of an XML element as name/value pairs.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Hashtable Attributes { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object for the attribute values of the XML element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>The name or value of the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object is invalid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The name is not a valid XML attribute name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Each attribute is stored in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> as a name/value pair.  </p>\n<p> Names and values in attributes should contain only valid XML attribute characters. Use <a class=\"xref\" href=\"system.security.securityelement#System_Security_SecurityElement_Escape_\" data-linktype=\"relative-path\">Escape</a> to remove invalid characters from the string.  </p>\n<p> There is no support for quoted strings, so strings for name/value pairs should not contain quotes or other characters requiring quoting.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code shows the use of the Attributes property to get an attribute of an XML element. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"SecurityElementMembers#15\">        Dim attributeKeys As Hashtable = xmlElement.Attributes\n        Dim attributeValue As String = attributeKeys(attributeName).ToString()\n</code></pre><pre><code class=\"lang-cpp\" name=\"SecurityElementMembers#15\">      Hashtable^ attributeKeys = xmlElement-&gt;Attributes;\n      String^ attributeValue = attributeKeys[ attributeName ]-&gt;ToString();\n</code></pre><pre><code class=\"lang-cs\" name=\"SecurityElementMembers#15\">        Hashtable attributeKeys = xmlElement.Attributes;\n        string attributeValue = attributeKeys[attributeName].ToString();\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_SecurityElement_Children\">\r\n    \r\n            <a id=\"System_Security_SecurityElement_Children_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Children</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the array of child elements of the XML element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.ArrayList Children { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a></div>\r\n                  </div>\r\n                  <p>The ordered child elements of the XML element as security elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>A child of the XML parent node is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If a <a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a> contains both <a class=\"xref\" href=\"system.security.securityelement#System_Security_SecurityElement_Text_\" data-linktype=\"relative-path\">Text</a> and Children, <a class=\"xref\" href=\"system.security.securityelement#System_Security_SecurityElement_Text_\" data-linktype=\"relative-path\">Text</a> will appear first.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code shows the use of the Children property to get the array of child elements of the XML element. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"SecurityElementMembers#14\">        Dim childrenCount As String = xmlElement.Children.Count.ToString()\n</code></pre><pre><code class=\"lang-cpp\" name=\"SecurityElementMembers#14\">      String^ childrenCount = xmlElement-&gt;Children-&gt;Count.ToString();\n</code></pre><pre><code class=\"lang-cs\" name=\"SecurityElementMembers#14\">        string childrenCount = xmlElement.Children.Count.ToString();\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_SecurityElement_Tag\">\r\n    \r\n            <a id=\"System_Security_SecurityElement_Tag_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Tag</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the tag name of an XML element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Tag { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The tag name of an XML element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The tag is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The tag is not valid in XML.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In XML, the tag appears in the script as appears below:  </p>\n<pre><code>&lt;tag attributes&gt;text&lt;/tag&gt;\n</code></pre><p> If this element has child elements, the children will replace <code>text</code>.  </p>\n<p> Assign only valid XML tag strings to this property. Use <a class=\"xref\" href=\"system.security.securityelement#System_Security_SecurityElement_Escape_\" data-linktype=\"relative-path\">Escape</a> to remove invalid characters from the string.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code shows the use of the Tag property to get the tag name of an XML element. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"SecurityElementMembers#11\">        Dim xmlTreeName As String = xmlElement.Tag.ToString()\n</code></pre><pre><code class=\"lang-cpp\" name=\"SecurityElementMembers#11\">      String^ xmlTreeName = xmlElement-&gt;Tag-&gt;ToString();\n</code></pre><pre><code class=\"lang-cs\" name=\"SecurityElementMembers#11\">        string xmlTreeName = xmlElement.Tag.ToString();\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_SecurityElement_Text\">\r\n    \r\n            <a id=\"System_Security_SecurityElement_Text_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Text</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the text within an XML element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Text { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The value of the text within an XML element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The text is not valid in XML.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The text should not contain XML special characters. Use <a class=\"xref\" href=\"system.security.securityelement#System_Security_SecurityElement_Escape_\" data-linktype=\"relative-path\">Escape</a> to remove invalid characters from the string.  </p>\n<p> If a <a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a> contains both Text and <a class=\"xref\" href=\"system.security.securityelement#System_Security_SecurityElement_Children_\" data-linktype=\"relative-path\">Children</a>, Text will appear first.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code shows the use of the Text property to get the text of an XML element. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"SecurityElementMembers#12\">        Dim xmlTreeDescription As String = xmlElement.Text\n</code></pre><pre><code class=\"lang-cpp\" name=\"SecurityElementMembers#12\">      String^ xmlTreeDescription = xmlElement-&gt;Text;\n</code></pre><pre><code class=\"lang-cs\" name=\"SecurityElementMembers#12\">        string xmlTreeDescription = xmlElement.Text;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_SecurityElement_AddAttribute_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Security_SecurityElement_AddAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddAttribute(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Adds a name/value attribute to an XML element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AddAttribute (string name, string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the attribute.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value of the attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>name</code> parameter or <code>value</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>name</code> parameter or <code>value</code> parameter is invalid in XML.  </p>\n<p> -or-  </p>\n<p> An attribute with the name specified by the <code>name</code> parameter already exists.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Names and values in attributes should only contain valid XML attribute characters. XML attribute names must be unique. Use <a class=\"xref\" href=\"system.security.securityelement#System_Security_SecurityElement_Escape_\" data-linktype=\"relative-path\">Escape</a> to remove invalid characters from the string.  </p>\n<p> There is no support for quoted strings, so strings for name/value pairs should not contain quotes or other characters requiring quoting.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code shows the use of the AddAttribute method to add a name/value attribute to an XML element. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"SecurityElementMembers#4\">        windowsRoleElement.AddAttribute(&quot;version&quot;, &quot;1.00&quot;)\n</code></pre><pre><code class=\"lang-cpp\" name=\"SecurityElementMembers#4\">      windowsRoleElement-&gt;AddAttribute( L&quot;version&quot;, L&quot;1.00&quot; );\n</code></pre><pre><code class=\"lang-cs\" name=\"SecurityElementMembers#4\">        windowsRoleElement.AddAttribute(&quot;version&quot;,&quot;1.00&quot;);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_SecurityElement_AddChild_System_Security_SecurityElement_\">\r\n    \r\n            <a id=\"System_Security_SecurityElement_AddChild_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddChild(SecurityElement)</div>        \r\n          </div>\r\n    \r\n            <p>Adds a child element to the XML element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AddChild (System.Security.SecurityElement child);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>child</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The child element to add.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>child</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The child element is added following any previously existing child elements.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code shows the use of the AddChild method to add a child element to the XML element.  This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"SecurityElementMembers#5\">        xmlRootElement.AddChild(windowsRoleElement)\n</code></pre><pre><code class=\"lang-cpp\" name=\"SecurityElementMembers#5\">      xmlRootElement-&gt;AddChild( windowsRoleElement );\n</code></pre><pre><code class=\"lang-cs\" name=\"SecurityElementMembers#5\">        xmlRootElement.AddChild(windowsRoleElement);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_SecurityElement_Attribute_System_String_\">\r\n    \r\n            <a id=\"System_Security_SecurityElement_Attribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Attribute(String)</div>        \r\n          </div>\r\n    \r\n            <p>Finds an attribute by name in an XML element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Attribute (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the attribute for which to search.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The value associated with the named attribute, or <code>null</code> if no attribute with <code>name</code> exists.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>name</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>With XML as follows, <code>Attribute(&quot;B&quot;)</code> would return &quot;456&quot;.  </p>\n<pre><code>&lt;thetag A=&quot;123&quot; B=&quot;456&quot; C=&quot;789&quot;&gt;text&lt;/thetag&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code shows the use of the Attribute method to find an attribute by name. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"SecurityElementMembers#13\">        Dim xmlCreationDate As String = xmlElement.Attribute(&quot;creationdate&quot;)\n</code></pre><pre><code class=\"lang-cpp\" name=\"SecurityElementMembers#13\">      String^ xmlCreationDate = xmlElement-&gt;Attribute(L&quot;creationdate&quot;);\n</code></pre><pre><code class=\"lang-cs\" name=\"SecurityElementMembers#13\">        string xmlCreationDate = xmlElement.Attribute(&quot;creationdate&quot;);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_SecurityElement_Copy\">\r\n    \r\n            <a id=\"System_Security_SecurityElement_Copy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Copy()</div>        \r\n          </div>\r\n    \r\n            <p>Creates and returns an identical copy of the current <a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Security.SecurityElement Copy ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a></div>\r\n                  </div>\r\n                  <p>A copy of the current <a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The copy includes both the <a class=\"xref\" href=\"system.security.securityelement#System_Security_SecurityElement_Children_\" data-linktype=\"relative-path\">Children</a> and <a class=\"xref\" href=\"system.security.securityelement#System_Security_SecurityElement_Attributes_\" data-linktype=\"relative-path\">Attributes</a> properties.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_SecurityElement_Equal_System_Security_SecurityElement_\">\r\n    \r\n            <a id=\"System_Security_SecurityElement_Equal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equal(SecurityElement)</div>        \r\n          </div>\r\n    \r\n            <p>Compares two XML element objects for equality.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Equal (System.Security.SecurityElement other);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>other</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An XML element object to which to compare the current XML element object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the tag, attribute names and values, child elements, and text fields in the current XML element are identical to their counterparts in the <code>other</code> parameter; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If there are child elements, comparison extends recursively to them.  </p>\n<p> There is no support for comparing different XML representations of the same characters.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code shows the use of the Equal method to compare two XML elements. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"SecurityElementMembers#22\">                If xmlElement.Equal(localXmlElement) Then\n</code></pre><pre><code class=\"lang-cpp\" name=\"SecurityElementMembers#22\">            if ( xmlElement-&gt;Equal( localXmlElement ) )\n</code></pre><pre><code class=\"lang-cs\" name=\"SecurityElementMembers#22\">                if (xmlElement.Equal(localXmlElement))\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_SecurityElement_Escape_System_String_\">\r\n    \r\n            <a id=\"System_Security_SecurityElement_Escape_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Escape(String)</div>        \r\n          </div>\r\n    \r\n            <p>Replaces invalid XML characters in a string with their valid XML equivalent.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Escape (string str);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>str</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string within which to escape invalid characters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The input string with invalid characters replaced.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to replace invalid characters in a string before using the string in a <a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a>. If invalid characters are used in a <a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a> without being escaped, an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a> is thrown.  </p>\n<p> The following table shows the invalid XML characters and their escaped equivalents.  </p>\n<table>\n<thead>\n<tr>\n<th>invalid XML Character</th>\n<th>Replaced With</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&quot;&lt;&quot;</td>\n<td>&quot;&lt;&quot;</td>\n</tr>\n<tr>\n<td>&quot;&gt;&quot;</td>\n<td>&quot;&gt;&quot;</td>\n</tr>\n<tr>\n<td>&quot;\\&quot;&quot;</td>\n<td>&quot;&quot;&quot;</td>\n</tr>\n<tr>\n<td>&quot;\\&#39;&quot;</td>\n<td>&quot;&apos;&quot;</td>\n</tr>\n<tr>\n<td>&quot;&amp;&quot;</td>\n<td>&quot;&amp;&quot;</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code shows the use of the Escape method to replace invalid XML characters in a string with their valid XML equivalent. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"SecurityElementMembers#19\">                tagText = SecurityElement.Escape(tagText)\n            End If\n</code></pre><pre><code class=\"lang-cpp\" name=\"SecurityElementMembers#19\">            tagText = SecurityElement::Escape( tagText );\n</code></pre><pre><code class=\"lang-cs\" name=\"SecurityElementMembers#19\">                tagText = SecurityElement.Escape(tagText);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_SecurityElement_FromString_System_String_\">\r\n    \r\n            <a id=\"System_Security_SecurityElement_FromString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FromString(String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a security element from an XML-encoded string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Security.SecurityElement FromString (string xml);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>xml</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The XML-encoded string from which to create the security element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a> created from the XML.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.xmlsyntaxexception\" data-linktype=\"relative-path\">XmlSyntaxException</a></div>\r\n                  </div>\r\n                  <p><code>xml</code> contains one or more single quotation mark characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>xml</code> is<code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Do not use single quotation marks in the XML string; instead, use escaped double quotation marks. For example, instead of &quot;<code>&lt;value name=&#39;Company&#39;&gt;Microsoft&lt;/value&gt;&quot;</code> use &quot;<code>&lt;value name=\\&quot;Company\\&quot;&gt;Microsoft&lt;/value&gt;&quot;</code>.  </p>\n<p> Using single quotation marks can result in either an exception being thrown or, in some cases, the single quotation marks being treated as text in the string.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_SecurityElement_IsValidAttributeName_System_String_\">\r\n    \r\n            <a id=\"System_Security_SecurityElement_IsValidAttributeName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsValidAttributeName(String)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether a string is a valid attribute name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsValidAttributeName (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The attribute name to test for validity.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <code>name</code> parameter is a valid XML attribute name; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method can be used to test an attribute before adding it to a security element.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code shows the use of the IsValidAttributeName method to determine whether a string is a valid attribute name. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"SecurityElementMembers#6\">            If SecurityElement.IsValidAttributeName(attributeName) AndAlso SecurityElement.IsValidAttributeValue(attributeValue) Then\n</code></pre><pre><code class=\"lang-cpp\" name=\"SecurityElementMembers#6\">         if ( SecurityElement::IsValidAttributeName( attributeName ) &amp;&amp;\n                SecurityElement::IsValidAttributeValue( attributeValue ) )\n</code></pre><pre><code class=\"lang-cs\" name=\"SecurityElementMembers#6\">            if (SecurityElement.IsValidAttributeName(attributeName) &amp;&amp;\n                SecurityElement.IsValidAttributeValue(attributeValue))\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_SecurityElement_IsValidAttributeValue_System_String_\">\r\n    \r\n            <a id=\"System_Security_SecurityElement_IsValidAttributeValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsValidAttributeValue(String)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether a string is a valid attribute value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsValidAttributeValue (string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The attribute value to test for validity.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <code>value</code> parameter is a valid XML attribute value; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method can be used to test an attribute before adding it to a security element.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code shows the use of the IsValidAttributeValue method to determine whether a string is a valid attribute value. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"SecurityElementMembers#7\">            If SecurityElement.IsValidAttributeName(attributeName) AndAlso SecurityElement.IsValidAttributeValue(attributeValue) Then\n</code></pre><pre><code class=\"lang-cpp\" name=\"SecurityElementMembers#7\">         if ( SecurityElement::IsValidAttributeName( attributeName ) &amp;&amp;\n                SecurityElement::IsValidAttributeValue( attributeValue ) )\n</code></pre><pre><code class=\"lang-cs\" name=\"SecurityElementMembers#7\">            if (SecurityElement.IsValidAttributeName(attributeName) &amp;&amp;\n                SecurityElement.IsValidAttributeValue(attributeValue))\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_SecurityElement_IsValidTag_System_String_\">\r\n    \r\n            <a id=\"System_Security_SecurityElement_IsValidTag_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsValidTag(String)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether a string is a valid tag.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsValidTag (string tag);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>tag</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The tag to test for validity.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <code>tag</code> parameter is a valid XML tag; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This can be used to test a <a class=\"xref\" href=\"system.security.securityelement#System_Security_SecurityElement_Tag_\" data-linktype=\"relative-path\">Tag</a> before setting it.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code shows the use of the IsValidTag method to determine whether a string is a valid attribute tag. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"SecurityElementMembers#10\">            If SecurityElement.IsValidTag(tagName) Then\n</code></pre><pre><code class=\"lang-cpp\" name=\"SecurityElementMembers#10\">         if ( SecurityElement::IsValidTag( tagName ) )\n</code></pre><pre><code class=\"lang-cs\" name=\"SecurityElementMembers#10\">            if (SecurityElement.IsValidTag(tagName))\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_SecurityElement_IsValidText_System_String_\">\r\n    \r\n            <a id=\"System_Security_SecurityElement_IsValidText_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsValidText(String)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether a string is valid as text within an XML element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsValidText (string text);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>text</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The text to test for validity.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <code>text</code> parameter is a valid XML text element; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method can be used to test <a class=\"xref\" href=\"system.security.securityelement#System_Security_SecurityElement_Text_\" data-linktype=\"relative-path\">Text</a> before setting it.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code shows the use of the IsValidText method to determine whether a string is valid as XML element text. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"SecurityElementMembers#9\">            If Not SecurityElement.IsValidText(tagText) Then\n</code></pre><pre><code class=\"lang-cpp\" name=\"SecurityElementMembers#9\">         if (  !SecurityElement::IsValidText( tagText ) )\n</code></pre><pre><code class=\"lang-cs\" name=\"SecurityElementMembers#9\">            if (!SecurityElement.IsValidText(tagText))\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_SecurityElement_SearchForChildByTag_System_String_\">\r\n    \r\n            <a id=\"System_Security_SecurityElement_SearchForChildByTag_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SearchForChildByTag(String)</div>        \r\n          </div>\r\n    \r\n            <p>Finds a child by its tag name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Security.SecurityElement SearchForChildByTag (string tag);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>tag</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The tag for which to search in child elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a></div>\r\n                  </div>\r\n                  <p>The first child XML element with the specified tag value, or <code>null</code> if no child element with <code>tag</code> exists.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>tag</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>With XML as follows, <code>SearchForChildByTag(&quot;second&quot;)</code> would return the child element <code>&lt;second&gt;</code>.  </p>\n<pre><code>&lt;thetag A=&quot;123&quot; B=&quot;456&quot; C=&quot;789&quot;&gt; &lt;first&gt;text1&lt;/first&gt;  \n       &lt;second&gt;text2&lt;/second&gt;&lt;/thetag&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code shows the use of the SearchForChildByTag method to find a child by its tag name. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"SecurityElementMembers#17\">        If Not (localXmlElement.SearchForChildByTag(&quot;destroytime&quot;) Is Nothing) Then\n</code></pre><pre><code class=\"lang-cpp\" name=\"SecurityElementMembers#17\">      if ( localXmlElement-&gt;SearchForChildByTag( L&quot;destroytime&quot; ) != nullptr )\n</code></pre><pre><code class=\"lang-cs\" name=\"SecurityElementMembers#17\">        if (localXmlElement.SearchForChildByTag(&quot;destroytime&quot;) != null)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_SecurityElement_SearchForTextOfTag_System_String_\">\r\n    \r\n            <a id=\"System_Security_SecurityElement_SearchForTextOfTag_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SearchForTextOfTag(String)</div>        \r\n          </div>\r\n    \r\n            <p>Finds a child by its tag name and returns the contained text.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string SearchForTextOfTag (string tag);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>tag</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The tag for which to search in child elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The text contents of the first child element with the specified tag value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>tag</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is equivalent to the following:  </p>\n<pre><code class=\"lang-vb\" name=\"System.Security.SecurityElement#1\">    Public Function SearchForTextOfTag(ByVal tag As String) As String\n        Dim element As SecurityElement = MyClass.SearchForChildByTag(tag)\n        Return element.Text\n    End Function\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Security.SecurityElement#1\">    String^ SearchForTextOfTag(String^ tag)\n    {\n        SecurityElement^ element = this-&gt;SearchForChildByTag(tag);\n        return element-&gt;Text;\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Security.SecurityElement#1\">    string SearchForTextOfTag(string tag)\n    {\n        SecurityElement element = this.SearchForChildByTag(tag);\n        return element.Text;\n    }\n</code></pre><p> With XML as follows, <code>SearchForTextOfTag(&quot;second&quot;)</code> would return &quot;text2&quot;.  </p>\n<pre><code>&lt;thetag A=&quot;123&quot; B=&quot;456&quot; C=&quot;789&quot;&gt; &lt;first&gt;text1&lt;/first&gt;  \n    &lt;second&gt;text2&lt;/second&gt;&lt;/thetag&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code shows the use of the SearchForTextOfTag method to find a child by its tag name and return the contained text. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"SecurityElementMembers#18\">            Dim storedDestroyTime As String = localXmlElement.SearchForTextOfTag(&quot;destroytime&quot;)\n</code></pre><pre><code class=\"lang-cpp\" name=\"SecurityElementMembers#18\">         String^ storedDestroyTime = localXmlElement-&gt;SearchForTextOfTag( L&quot;destroytime&quot; );\n</code></pre><pre><code class=\"lang-cs\" name=\"SecurityElementMembers#18\">            string storedDestroyTime =\n                localXmlElement.SearchForTextOfTag(&quot;destroytime&quot;);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_SecurityElement_ToString\">\r\n    \r\n            <a id=\"System_Security_SecurityElement_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Produces a string representation of an XML element and its constituent attributes, child elements, and text.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The XML element and its contents.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is useful in debugging to see the XML representation of the element.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Security.SecurityElement.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.SecurityElement.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.SecurityElement\">\r\n<meta name=\"APIName\" content=\"System.Security.SecurityElement..ctor\">\r\n<meta name=\"APIName\" content=\"System.Security.SecurityElement.AddAttribute\">\r\n<meta name=\"APIName\" content=\"System.Security.SecurityElement.AddChild\">\r\n<meta name=\"APIName\" content=\"System.Security.SecurityElement.Attribute\">\r\n<meta name=\"APIName\" content=\"System.Security.SecurityElement.Attributes\">\r\n<meta name=\"APIName\" content=\"System.Security.SecurityElement.Children\">\r\n<meta name=\"APIName\" content=\"System.Security.SecurityElement.Copy\">\r\n<meta name=\"APIName\" content=\"System.Security.SecurityElement.Equal\">\r\n<meta name=\"APIName\" content=\"System.Security.SecurityElement.Escape\">\r\n<meta name=\"APIName\" content=\"System.Security.SecurityElement.FromString\">\r\n<meta name=\"APIName\" content=\"System.Security.SecurityElement.IsValidAttributeName\">\r\n<meta name=\"APIName\" content=\"System.Security.SecurityElement.IsValidAttributeValue\">\r\n<meta name=\"APIName\" content=\"System.Security.SecurityElement.IsValidTag\">\r\n<meta name=\"APIName\" content=\"System.Security.SecurityElement.IsValidText\">\r\n<meta name=\"APIName\" content=\"System.Security.SecurityElement.SearchForChildByTag\">\r\n<meta name=\"APIName\" content=\"System.Security.SecurityElement.SearchForTextOfTag\">\r\n<meta name=\"APIName\" content=\"System.Security.SecurityElement.Tag\">\r\n<meta name=\"APIName\" content=\"System.Security.SecurityElement.Text\">\r\n<meta name=\"APIName\" content=\"System.Security.SecurityElement.ToString\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"9ccb2edd-853d-18f9-9257-375c0d4c5b1f\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Security\\SecurityElement.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the XML object model for encoding security objects. This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Security/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.SecurityElement\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Security.SecurityElement.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.SecurityElement.yml","open_to_public_contributors":true,"api_name":["System.Security.SecurityElement","System.Security.SecurityElement..ctor","System.Security.SecurityElement.AddAttribute","System.Security.SecurityElement.AddChild","System.Security.SecurityElement.Attribute","System.Security.SecurityElement.Attributes","System.Security.SecurityElement.Children","System.Security.SecurityElement.Copy","System.Security.SecurityElement.Equal","System.Security.SecurityElement.Escape","System.Security.SecurityElement.FromString","System.Security.SecurityElement.IsValidAttributeName","System.Security.SecurityElement.IsValidAttributeValue","System.Security.SecurityElement.IsValidTag","System.Security.SecurityElement.IsValidText","System.Security.SecurityElement.SearchForChildByTag","System.Security.SecurityElement.SearchForTextOfTag","System.Security.SecurityElement.Tag","System.Security.SecurityElement.Text","System.Security.SecurityElement.ToString"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.SecurityElement","System::Security::SecurityElement","System.Security.SecurityElement.#ctor","System::Security::SecurityElement::#ctor","System.Security.SecurityElement.AddAttribute","System::Security::SecurityElement::AddAttribute","System.Security.SecurityElement.AddChild","System::Security::SecurityElement::AddChild","System.Security.SecurityElement.Attribute","System::Security::SecurityElement::Attribute","System.Security.SecurityElement.Attributes","System::Security::SecurityElement::Attributes","System.Security.SecurityElement.Children","System::Security::SecurityElement::Children","System.Security.SecurityElement.Copy","System::Security::SecurityElement::Copy","System.Security.SecurityElement.Equal","System::Security::SecurityElement::Equal","System.Security.SecurityElement.Escape","System::Security::SecurityElement::Escape","System.Security.SecurityElement.FromString","System::Security::SecurityElement::FromString","System.Security.SecurityElement.IsValidAttributeName","System::Security::SecurityElement::IsValidAttributeName","System.Security.SecurityElement.IsValidAttributeValue","System::Security::SecurityElement::IsValidAttributeValue","System.Security.SecurityElement.IsValidTag","System::Security::SecurityElement::IsValidTag","System.Security.SecurityElement.IsValidText","System::Security::SecurityElement::IsValidText","System.Security.SecurityElement.SearchForChildByTag","System::Security::SecurityElement::SearchForChildByTag","System.Security.SecurityElement.SearchForTextOfTag","System::Security::SecurityElement::SearchForTextOfTag","System.Security.SecurityElement.Tag","System::Security::SecurityElement::Tag","System.Security.SecurityElement.Text","System::Security::SecurityElement::Text","System.Security.SecurityElement.ToString","System::Security::SecurityElement::ToString"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"9ccb2edd-853d-18f9-9257-375c0d4c5b1f","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Security\\SecurityElement.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Security/SecurityElement.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"SecurityElement class | Microsoft Docs","_op_ogTitle":"SecurityElement class","description":"Represents the XML object model for encoding security objects. This class cannot be inherited.\n","toc_asset_id":"_splitted/System.Security/toc.json","toc_rel":"_splitted/System.Security/toc.json","source_url":"","ms.assetid":"System.Security.SecurityElement","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.securityelement","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.securityelement","fileRelativePath":"System.Security.SecurityElement.html"},"themesRelativePathToOutputRoot":"_themes/"}