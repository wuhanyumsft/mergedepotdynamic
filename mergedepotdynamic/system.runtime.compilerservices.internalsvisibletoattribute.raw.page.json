{"content":"\r\n<div style=\"display:none\">\r\n\t\r\n</div>\r\n\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">InternalsVisibleToAttribute</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Specifies that types that are ordinarily visible only within the current assembly are visible to a specified assembly.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.AttributeUsage(System.AttributeTargets.Assembly, AllowMultiple=true, Inherited=false)]\npublic sealed class InternalsVisibleToAttribute : Attribute</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div>\r\n  \t\t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">System.Attribute</a></span></div>\r\n  \t\t\t<span class=\"lang-csharp\">InternalsVisibleToAttribute</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_Assembly_System_Type_\" data-linktype=\"relative-path\">GetCustomAttribute(Assembly,Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_Assembly_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttribute(Assembly,Type,Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_MemberInfo_System_Type_\" data-linktype=\"relative-path\">GetCustomAttribute(MemberInfo,Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_MemberInfo_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttribute(MemberInfo,Type,Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_Module_System_Type_\" data-linktype=\"relative-path\">GetCustomAttribute(Module,Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_Module_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttribute(Module,Type,Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_ParameterInfo_System_Type_\" data-linktype=\"relative-path\">GetCustomAttribute(ParameterInfo,Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_ParameterInfo_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttribute(ParameterInfo,Type,Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Assembly_\" data-linktype=\"relative-path\">GetCustomAttributes(Assembly)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Assembly_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(Assembly,Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Assembly_System_Type_\" data-linktype=\"relative-path\">GetCustomAttributes(Assembly,Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Assembly_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(Assembly,Type,Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_MemberInfo_\" data-linktype=\"relative-path\">GetCustomAttributes(MemberInfo)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_MemberInfo_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(MemberInfo,Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_MemberInfo_System_Type_\" data-linktype=\"relative-path\">GetCustomAttributes(MemberInfo,Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_MemberInfo_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(MemberInfo,Type,Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Module_\" data-linktype=\"relative-path\">GetCustomAttributes(Module)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Module_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(Module,Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Module_System_Type_\" data-linktype=\"relative-path\">GetCustomAttributes(Module,Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Module_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(Module,Type,Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_ParameterInfo_\" data-linktype=\"relative-path\">GetCustomAttributes(ParameterInfo)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_ParameterInfo_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(ParameterInfo,Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_ParameterInfo_System_Type_\" data-linktype=\"relative-path\">GetCustomAttributes(ParameterInfo,Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_ParameterInfo_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(ParameterInfo,Type,Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefaultAttribute\" data-linktype=\"relative-path\">IsDefaultAttribute()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_Assembly_System_Type_\" data-linktype=\"relative-path\">IsDefined(Assembly,Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_Assembly_System_Type_System_Boolean_\" data-linktype=\"relative-path\">IsDefined(Assembly,Type,Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_MemberInfo_System_Type_\" data-linktype=\"relative-path\">IsDefined(MemberInfo,Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_MemberInfo_System_Type_System_Boolean_\" data-linktype=\"relative-path\">IsDefined(MemberInfo,Type,Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_Module_System_Type_\" data-linktype=\"relative-path\">IsDefined(Module,Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_Module_System_Type_System_Boolean_\" data-linktype=\"relative-path\">IsDefined(Module,Type,Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_ParameterInfo_System_Type_\" data-linktype=\"relative-path\">IsDefined(ParameterInfo,Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_ParameterInfo_System_Type_System_Boolean_\" data-linktype=\"relative-path\">IsDefined(ParameterInfo,Type,Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_Match_System_Object_\" data-linktype=\"relative-path\">Match(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_System_Runtime_InteropServices__Attribute_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_Attribute.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_System_Runtime_InteropServices__Attribute_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_Attribute.GetTypeInfo(UInt32,UInt32,IntPtr)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_System_Runtime_InteropServices__Attribute_GetTypeInfoCount_System_UInt32__\" data-linktype=\"relative-path\">_Attribute.GetTypeInfoCount(UInt32)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_System_Runtime_InteropServices__Attribute_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\" data-linktype=\"relative-path\">_Attribute.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_TypeId\" data-linktype=\"relative-path\">TypeId</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>Ordinarily, types and members with <code>internal</code> scope (in C#) and <code>friend</code> scope (in Visual Basic) are visible only in the assembly in which they are defined. The InternalsVisibleToAttribute attribute makes them also visible to the types in a specified assembly, which is known as a friend assembly.  </p>\n<p> The attribute is applied at the assembly level. This means that it can be included at the beginning of a source code file, or it can be included in the AssemblyInfo file in a Visual Studio project. You can use the attribute to specify a single friend assembly that can access the internal types and members of the current assembly. You can define multiple friend assemblies in two ways. They can appear as individual assembly-level attributes, as the following example illustrates.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Runtime.CompilerServices.InternalsVisibleToAttribute#3\">[assembly:InternalsVisibleTo(&quot;Friend1a&quot;)]\n[assembly:InternalsVisibleTo(&quot;Friend1b&quot;)]\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Runtime.CompilerServices.InternalsVisibleToAttribute#3\">&lt;assembly:InternalsVisibleTo(&quot;Friend1a&quot;)&gt;\n&lt;assembly:InternalsVisibleTo(&quot;Friend1b&quot;)&gt;\n</code></pre><p> They can also appear with separateInternalsVisibleToAttribute tags but a single <code>assembly</code> keyword, as the following example illustrates.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Runtime.CompilerServices.InternalsVisibleToAttribute#4\">[assembly:InternalsVisibleTo(&quot;Friend2a&quot;), \n          InternalsVisibleTo(&quot;Friend2b&quot;)]\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Runtime.CompilerServices.InternalsVisibleToAttribute#4\">&lt;Assembly:InternalsVisibleTo(&quot;Friend2a&quot;), _\n Assembly:InternalsVisibleTo(&quot;Friend2b&quot;)&gt;\n</code></pre><p> The friend assembly is identified by the <a class=\"xref\" href=\"system.runtime.compilerservices.internalsvisibletoattribute#System_Runtime_CompilerServices_InternalsVisibleToAttribute__ctor_\" data-linktype=\"relative-path\">InternalsVisibleToAttribute</a> constructor. Both the current assembly and the friend assembly must be unsigned, or both assemblies must be signed with a strong name.  </p>\n<p> If both assemblies are unsigned, the <code>assemblyName</code> argument consists of the name of the friend assembly, specified without a directory path or file name extension.  </p>\n<p> If both assemblies are signed with a strong name, the argument to the <a class=\"xref\" href=\"system.runtime.compilerservices.internalsvisibletoattribute#System_Runtime_CompilerServices_InternalsVisibleToAttribute__ctor_\" data-linktype=\"relative-path\">InternalsVisibleToAttribute</a> constructor must consist of the name of the assembly without its directory path or file name extension, along with the full public key (and not its public key token). To get the full public key of a strong-named assembly, see the <a href=\"#Key\" data-linktype=\"self-bookmark\">Getting the full public key</a> section later in this article. For more information about using InternalsVisibleToAttribute with strong-named assemblies, see the <a class=\"xref\" href=\"system.runtime.compilerservices.internalsvisibletoattribute#System_Runtime_CompilerServices_InternalsVisibleToAttribute__ctor_\" data-linktype=\"relative-path\">InternalsVisibleToAttribute</a> constructor.  </p>\n<p> Do not include values for the <a class=\"xref\" href=\"system.reflection.assemblyname#System_Reflection_AssemblyName_CultureInfo_\" data-linktype=\"relative-path\">CultureInfo</a>, <a class=\"xref\" href=\"system.reflection.assemblyname#System_Reflection_AssemblyName_Version_\" data-linktype=\"relative-path\">Version</a>, or <a class=\"xref\" href=\"system.reflection.assemblyname#System_Reflection_AssemblyName_ProcessorArchitecture_\" data-linktype=\"relative-path\">ProcessorArchitecture</a> field in the argument; the Visual Basic, C#, and C++ compilers treat this as a compiler error. If you use a compiler that does not treat it as an error (such as the <a href=\"../Topic/Ilasm.exe%20(IL%20Assembler).md\" data-linktype=\"relative-path\">IL Assembler (ILAsm.exe)</a>) and the assemblies are strong-named, a <a class=\"xref\" href=\"system.methodaccessexception\" data-linktype=\"relative-path\">MethodAccessException</a> exception is thrown the first time the specified friend assembly accesses the assembly that contains the InternalsVisibleToAttribute attribute.  </p>\n<p> For more information about how to use this attribute, see the following topics:  </p>\n<ul>\n<li><p><a href=\"../Topic/Friend%20Assemblies%20(C++).md\" data-linktype=\"relative-path\">Friend Assemblies (C++)</a>  </p>\n</li>\n<li><p><a href=\"../Topic/Friend%20Assemblies%20(C%23%20and%20Visual%20Basic).md\" data-linktype=\"relative-path\">Friend Assemblies</a>  </p>\n</li>\n</ul>\n<p><a name=\"Key\"></a>   </p>\n<h2 id=\"getting-the-full-public-key\">Getting the full public key</h2>\n<p> You can use the <a href=\"../Topic/Sn.exe%20(Strong%20Name%20Tool).md\" data-linktype=\"relative-path\">Strong Name Tool (Sn.exe)</a> to retrieve the full public key from a strong-named key (.snk) file. To do this, you perform the following steps:  </p>\n<ol>\n<li><p>Extract the public key from the strong-named key file to a separate file:  </p>\n<p> <strong>Sn -p</strong>  <em>snk_file</em> <em>outfile</em>  </p>\n</li>\n<li><p>Display the full public key to the console:  </p>\n<p> <strong>Sn -tp</strong>  <em>outfile</em>  </p>\n</li>\n<li><p>Copy and paste the full public key value into your source code.  </p>\n</li>\n</ol>\n<h2 id=\"compiling-the-friend-assembly-with-c\">Compiling the friend assembly with C</h2>\n<p> If you use the C# compiler to compile the friend assembly, you must explicitly specify the name of the output file (.exe or .dll) by using the <strong>/out</strong> compiler option. This is required because the compiler has not yet generated the name for the assembly it is building at the time it is binding to external references. The <strong>/out</strong> compiler option is optional for the Visual Basic compiler, and the corresponding <strong>-out</strong> or <strong>-o</strong> compiler option should not be used when compiling friend assemblies with the F# compiler.  </p>\n<h2 id=\"compiling-the-friend-assembly-with-c-1\">Compiling the friend assembly with C++</h2>\n<p> In C++, in order to make the internal members enabled by the InternalsVisibleToAttribute attribute accessible to a friend assembly, you must use the <code>as_friend</code> attribute in the C++  directive. For more information, see <a href=\"../Topic/Friend%20Assemblies%20(C++).md\" data-linktype=\"relative-path\">Friend Assemblies (C++)</a>.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Runtime_CompilerServices_InternalsVisibleToAttribute__ctor_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">InternalsVisibleToAttribute(String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.runtime.compilerservices.internalsvisibletoattribute\" data-linktype=\"relative-path\">InternalsVisibleToAttribute</a> class with the name of the specified friend assembly.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public InternalsVisibleToAttribute (string assemblyName);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>assemblyName</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The name of a friend assembly.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The InternalsVisibleToAttribute constructor defines a friend assembly, which is an assembly that has access to the internal types and members of the current assembly.  </p>\n<p> Both the current assembly and the friend assembly must be unsigned, or both must be signed with a strong name. (For more information about strong-named assemblies, see <a href=\"../Topic/Creating%20and%20Using%20Strong-Named%20Assemblies.md\" data-linktype=\"relative-path\">Creating and Using Strong-Named Assemblies</a>.) If both are unsigned, the <code>assemblyName</code> argument consists of the name of the friend assembly, specified without a directory path or file extension. If both are signed, <code>assemblyName</code> consists of the name of the friend assembly without its directory path or file name extension, along with its full public key (but not its public key token). The other components of a strong name, such as those that provide culture, version, or processor architecture information, cannot be specified in the <code>assemblyName</code> argument.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> If you use the C# compiler to compile the friend assembly, you must explicitly specify the name of the output file (.exe or .dll) by using the <strong>/out</strong> compiler option. This is required because the compiler has not yet generated the name for the assembly it is building at the time it is binding to external references. The <strong>/out</strong> compiler option is optional for the Visual Basic compiler, and the corresponding <strong>-out</strong> or <strong>-o</strong> compiler option should not be used when compiling friend assemblies with the F# compiler.  </p>\n</div>\n<p> You can use <a href=\"../Topic/Sn.exe%20(Strong%20Name%20Tool).md\" data-linktype=\"relative-path\">Sn.exe (Strong Name Tool)</a> to retrieve the full public key from a strong-named key (.snk) file. To do this, you perform the following steps:  </p>\n<ol>\n<li><p>Extract the public key from the strong-named key file to a separate file:  </p>\n<p> <strong>Sn -p</strong>  <em>snk_file</em> <em>outfile</em>  </p>\n</li>\n<li><p>Display the full public key to the console:  </p>\n<p> <strong>Sn -tp</strong>  <em>outfile</em>  </p>\n</li>\n<li><p>Copy and paste the full public key value into your source code.  </p>\n<p>For more information about how to use the <a class=\"xref\" href=\"system.runtime.compilerservices.internalsvisibletoattribute\" data-linktype=\"relative-path\">InternalsVisibleToAttribute</a> attribute, see the following topics:  </p>\n</li>\n</ol>\n<ul>\n<li><p><a href=\"../Topic/Friend%20Assemblies%20(C++).md\" data-linktype=\"relative-path\">Friend Assemblies (C++)</a>  </p>\n</li>\n<li><p><a href=\"../Topic/Friend%20Assemblies%20(C%23%20and%20Visual%20Basic).md\" data-linktype=\"relative-path\">Friend Assemblies</a></p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Runtime_CompilerServices_InternalsVisibleToAttribute_AllInternalsVisible\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AllInternalsVisible</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>This property is not implemented.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool AllInternalsVisible { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>This property does not return a value.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Runtime_CompilerServices_InternalsVisibleToAttribute_AssemblyName\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AssemblyName</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the name of the friend assembly to which all types and type members that are marked with the <code>internal</code> keyword are to be made visible.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string AssemblyName { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A string that represents the name of the friend assembly.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>For more information about how to use the <a class=\"xref\" href=\"system.runtime.compilerservices.internalsvisibletoattribute\" data-linktype=\"relative-path\">InternalsVisibleToAttribute</a> attribute, see the following topics:  </p>\n<ul>\n<li><p><a href=\"../Topic/Friend%20Assemblies%20(C++).md\" data-linktype=\"relative-path\">Friend Assemblies (C++)</a>  </p>\n</li>\n<li><p><a href=\"../Topic/Friend%20Assemblies%20(C%23%20and%20Visual%20Basic).md\" data-linktype=\"relative-path\">Friend Assemblies</a></p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Runtime.CompilerServices.InternalsVisibleToAttribute.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Runtime.CompilerServices.InternalsVisibleToAttribute.yml\">\r\n<meta name=\"APIName\" content=\"System.Runtime.CompilerServices.InternalsVisibleToAttribute\">\r\n<meta name=\"APIName\" content=\"System.Runtime.CompilerServices.InternalsVisibleToAttribute..ctor\">\r\n<meta name=\"APIName\" content=\"System.Runtime.CompilerServices.InternalsVisibleToAttribute.AllInternalsVisible\">\r\n<meta name=\"APIName\" content=\"System.Runtime.CompilerServices.InternalsVisibleToAttribute.AssemblyName\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"c28ecff5-e0b3-f0bd-a488-c89f9196cd97\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Specifies that types that are ordinarily visible only within the current assembly are visible to a specified assembly.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Runtime.CompilerServices/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Runtime.CompilerServices.InternalsVisibleToAttribute\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Runtime.CompilerServices.InternalsVisibleToAttribute.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Runtime.CompilerServices.InternalsVisibleToAttribute.yml","open_to_public_contributors":true,"api_name":["System.Runtime.CompilerServices.InternalsVisibleToAttribute","System.Runtime.CompilerServices.InternalsVisibleToAttribute..ctor","System.Runtime.CompilerServices.InternalsVisibleToAttribute.AllInternalsVisible","System.Runtime.CompilerServices.InternalsVisibleToAttribute.AssemblyName"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Runtime.CompilerServices.InternalsVisibleToAttribute","System::Runtime::CompilerServices::InternalsVisibleToAttribute","System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor","System::Runtime::CompilerServices::InternalsVisibleToAttribute::#ctor","System.Runtime.CompilerServices.InternalsVisibleToAttribute.AllInternalsVisible","System::Runtime::CompilerServices::InternalsVisibleToAttribute::AllInternalsVisible","System.Runtime.CompilerServices.InternalsVisibleToAttribute.AssemblyName","System::Runtime::CompilerServices::InternalsVisibleToAttribute::AssemblyName"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"c28ecff5-e0b3-f0bd-a488-c89f9196cd97","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Runtime.CompilerServices/InternalsVisibleToAttribute.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"InternalsVisibleToAttribute class | Microsoft Docs","_op_ogTitle":"InternalsVisibleToAttribute class","description":"Specifies that types that are ordinarily visible only within the current assembly are visible to a specified assembly.\n","toc_asset_id":"_splitted/System.Runtime.CompilerServices/toc.json","toc_rel":"_splitted/System.Runtime.CompilerServices/toc.json","source_url":"","ms.assetid":"System.Runtime.CompilerServices.InternalsVisibleToAttribute","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.runtime.compilerservices.internalsvisibletoattribute","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.runtime.compilerservices.internalsvisibletoattribute","fileRelativePath":"System.Runtime.CompilerServices.InternalsVisibleToAttribute.html"},"themesRelativePathToOutputRoot":"_themes/"}