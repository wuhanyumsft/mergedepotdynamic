{"content":"    \r\n    <h1 id=\"System_Windows_Automation_WindowPattern\">\r\n      <span class=\"lang-csharp\">WindowPattern</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a control that provides fundamental window-based functionality within a traditional graphical user interface (GUI).</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class WindowPattern : System.Windows.Automation.BasePattern</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.automation.basepattern\" data-linktype=\"relative-path\">System.Windows.Automation.BasePattern</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">WindowPattern</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Examples of controls that support this control pattern include top-level application windows, <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/tlasharptla-mdi-md.md&quot; -->multiple-document interface (MDI)<!--END INCLUDE --> child windows, modal dialogs and balloon help windows.</p>\n\r\n    \r\n    \r\n    <h2>Fields\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_WindowPattern_CanMaximizeProperty\" data-linktype=\"self-bookmark\">CanMaximizeProperty</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <span class=\"xref\">stem.Windows.Automation.WindowPattern.WindowPatternInformation.CanMaximize*</span> property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_WindowPattern_CanMinimizeProperty\" data-linktype=\"self-bookmark\">CanMinimizeProperty</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <span class=\"xref\">stem.Windows.Automation.WindowPattern.WindowPatternInformation.CanMinimize*</span> property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_WindowPattern_IsModalProperty\" data-linktype=\"self-bookmark\">IsModalProperty</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <span class=\"xref\">stem.Windows.Automation.WindowPattern.WindowPatternInformation.IsModal*</span> property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_WindowPattern_IsTopmostProperty\" data-linktype=\"self-bookmark\">IsTopmostProperty</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <span class=\"xref\">stem.Windows.Automation.WindowPattern.WindowPatternInformation.IsTopmost*</span> property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_WindowPattern_Pattern\" data-linktype=\"self-bookmark\">Pattern</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.automation.windowpattern\" data-linktype=\"relative-path\">WindowPattern</a> control pattern.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_WindowPattern_WindowClosedEvent\" data-linktype=\"self-bookmark\">WindowClosedEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the event that is raised when a window is closed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_WindowPattern_WindowInteractionStateProperty\" data-linktype=\"self-bookmark\">WindowInteractionStateProperty</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <span class=\"xref\">stem.Windows.Automation.WindowPattern.WindowPatternInformation.WindowInteractionState*</span> property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_WindowPattern_WindowOpenedEvent\" data-linktype=\"self-bookmark\">WindowOpenedEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the event that is raised when a window is opened.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_WindowPattern_WindowVisualStateProperty\" data-linktype=\"self-bookmark\">WindowVisualStateProperty</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <span class=\"xref\">stem.Windows.Automation.WindowPattern.WindowPatternInformation.WindowVisualState*</span> property.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_WindowPattern_Cached\" data-linktype=\"self-bookmark\">Cached</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the cached <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/tla2sharptla-uiautomation-md.md&quot; -->UI Automation<!--END INCLUDE --> property values for this <a class=\"xref\" href=\"system.windows.automation.windowpattern\" data-linktype=\"relative-path\">WindowPattern</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_WindowPattern_Current\" data-linktype=\"self-bookmark\">Current</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the current <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/tla2sharptla-uiautomation-md.md&quot; -->UI Automation<!--END INCLUDE --> property values for this <a class=\"xref\" href=\"system.windows.automation.windowpattern\" data-linktype=\"relative-path\">WindowPattern</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_WindowPattern_Close\" data-linktype=\"self-bookmark\">Close()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Attempts to close the current window.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_WindowPattern_SetWindowVisualState_System_Windows_Automation_WindowVisualState_\" data-linktype=\"self-bookmark\">SetWindowVisualState(WindowVisualState)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Changes the <a class=\"xref\" href=\"system.windows.automation.windowvisualstate\" data-linktype=\"relative-path\">WindowVisualState</a> of the window.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_WindowPattern_WaitForInputIdle_System_Int32_\" data-linktype=\"self-bookmark\">WaitForInputIdle(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Causes the calling code to block for the specified time or until the associated process enters an idle state, whichever completes first.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"fields\">\r\n        <h2>Fields\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_WindowPattern_CanMaximizeProperty\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CanMaximizeProperty</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <span class=\"xref\">stem.Windows.Automation.WindowPattern.WindowPatternInformation.CanMaximize*</span> property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.Automation.AutomationProperty CanMaximizeProperty;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This identifier is used by UI Automation client applications. UI Automation providers should use the equivalent field in <a class=\"xref\" href=\"system.windows.automation.windowpatternidentifiers\" data-linktype=\"relative-path\">WindowPatternIdentifiers</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>In the following example, a root element is passed to a function that returns a collection of automation elements that are descendants of the root and satisfy a set of property conditions.  </p>\n<pre><code class=\"lang-vb\" name=\"UIAWindowPattern_snip#100\">&#39;&#39;&#39;------------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Finds all automation elements that satisfy \n&#39;&#39;&#39; the specified condition(s).\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;rootElement&quot;&gt;\n&#39;&#39;&#39; The automation element from which to start searching.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;returns&gt;\n&#39;&#39;&#39; A collection of automation elements satisfying \n&#39;&#39;&#39; the specified condition(s).\n&#39;&#39;&#39; &lt;/returns&gt;\n&#39;&#39;&#39;------------------------------------------------------------------------\nPrivate Function FindAutomationElement( _\n    ByVal rootElement As AutomationElement) As AutomationElementCollection\n    If rootElement Is Nothing Then\n        Throw New ArgumentException(&quot;Root element cannot be null.&quot;)\n    End If\n\n    Dim conditionCanMaximize As _\n        New PropertyCondition(WindowPattern.CanMaximizeProperty, True)\n\n    Dim conditionCanMinimize As _\n        New PropertyCondition(WindowPattern.CanMinimizeProperty, True)\n\n    Dim conditionIsModal As _\n        New PropertyCondition(WindowPattern.IsModalProperty, False)\n\n    Dim conditionIsTopmost As _\n        New PropertyCondition(WindowPattern.IsTopmostProperty, True)\n\n    Dim conditionWindowInteractionState As _\n        New PropertyCondition(WindowPattern.WindowInteractionStateProperty, _\n        WindowInteractionState.ReadyForUserInteraction)\n\n    Dim conditionWindowVisualState As _\n        New PropertyCondition(WindowPattern.WindowVisualStateProperty, _\n        WindowVisualState.Normal)\n\n    &#39; Use any combination of the preceding condtions to \n    &#39; find the control(s) of interest\n    Dim condition = New AndCondition(conditionCanMaximize, _\n        conditionIsModal, conditionWindowInteractionState)\n\n    Return rootElement.FindAll(TreeScope.Descendants, condition)\n\nEnd Function &#39;FindAutomationElement\n\n</code></pre><pre><code class=\"lang-cs\" name=\"UIAWindowPattern_snip#100\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Finds all automation elements that satisfy \n/// the specified condition(s).\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;rootElement&quot;&gt;\n/// The automation element from which to start searching.\n/// &lt;/param&gt;\n/// &lt;returns&gt;\n/// A collection of automation elements satisfying \n/// the specified condition(s).\n/// &lt;/returns&gt;\n///--------------------------------------------------------------------\nprivate AutomationElementCollection FindAutomationElement(\n    AutomationElement rootElement)\n{\n    if (rootElement == null)\n    {\n        throw new ArgumentException(&quot;Root element cannot be null.&quot;);\n    }\n\n    PropertyCondition conditionCanMaximize = \n        new PropertyCondition(WindowPattern.CanMaximizeProperty, true);\n\n    PropertyCondition conditionCanMinimize =\n        new PropertyCondition(WindowPattern.CanMinimizeProperty, true);\n\n    PropertyCondition conditionIsModal =\n        new PropertyCondition(WindowPattern.IsModalProperty, false);\n\n    PropertyCondition conditionIsTopmost =\n        new PropertyCondition(WindowPattern.IsTopmostProperty, true);\n\n    PropertyCondition conditionWindowInteractionState =\n        new PropertyCondition(\n        WindowPattern.WindowInteractionStateProperty, \n        WindowInteractionState.ReadyForUserInteraction);\n\n    PropertyCondition conditionWindowVisualState =\n        new PropertyCondition(\n        WindowPattern.WindowVisualStateProperty, \n        WindowVisualState.Normal);\n\n    // Use any combination of the preceding condtions to \n    // find the control(s) of interest\n    Condition condition = new AndCondition(\n        conditionCanMaximize, \n        conditionIsModal, \n        conditionWindowInteractionState);\n\n    return rootElement.FindAll(TreeScope.Descendants, condition); \n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_WindowPattern_CanMinimizeProperty\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CanMinimizeProperty</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <span class=\"xref\">stem.Windows.Automation.WindowPattern.WindowPatternInformation.CanMinimize*</span> property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.Automation.AutomationProperty CanMinimizeProperty;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This identifier is used by UI Automation client applications. UI Automation providers should use the equivalent field in <a class=\"xref\" href=\"system.windows.automation.windowpatternidentifiers\" data-linktype=\"relative-path\">WindowPatternIdentifiers</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>In the following example, a root element is passed to a function that returns a collection of automation elements that are descendants of the root and satisfy a set of property conditions.  </p>\n<pre><code class=\"lang-vb\" name=\"UIAWindowPattern_snip#100\">&#39;&#39;&#39;------------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Finds all automation elements that satisfy \n&#39;&#39;&#39; the specified condition(s).\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;rootElement&quot;&gt;\n&#39;&#39;&#39; The automation element from which to start searching.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;returns&gt;\n&#39;&#39;&#39; A collection of automation elements satisfying \n&#39;&#39;&#39; the specified condition(s).\n&#39;&#39;&#39; &lt;/returns&gt;\n&#39;&#39;&#39;------------------------------------------------------------------------\nPrivate Function FindAutomationElement( _\n    ByVal rootElement As AutomationElement) As AutomationElementCollection\n    If rootElement Is Nothing Then\n        Throw New ArgumentException(&quot;Root element cannot be null.&quot;)\n    End If\n\n    Dim conditionCanMaximize As _\n        New PropertyCondition(WindowPattern.CanMaximizeProperty, True)\n\n    Dim conditionCanMinimize As _\n        New PropertyCondition(WindowPattern.CanMinimizeProperty, True)\n\n    Dim conditionIsModal As _\n        New PropertyCondition(WindowPattern.IsModalProperty, False)\n\n    Dim conditionIsTopmost As _\n        New PropertyCondition(WindowPattern.IsTopmostProperty, True)\n\n    Dim conditionWindowInteractionState As _\n        New PropertyCondition(WindowPattern.WindowInteractionStateProperty, _\n        WindowInteractionState.ReadyForUserInteraction)\n\n    Dim conditionWindowVisualState As _\n        New PropertyCondition(WindowPattern.WindowVisualStateProperty, _\n        WindowVisualState.Normal)\n\n    &#39; Use any combination of the preceding condtions to \n    &#39; find the control(s) of interest\n    Dim condition = New AndCondition(conditionCanMaximize, _\n        conditionIsModal, conditionWindowInteractionState)\n\n    Return rootElement.FindAll(TreeScope.Descendants, condition)\n\nEnd Function &#39;FindAutomationElement\n\n</code></pre><pre><code class=\"lang-cs\" name=\"UIAWindowPattern_snip#100\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Finds all automation elements that satisfy \n/// the specified condition(s).\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;rootElement&quot;&gt;\n/// The automation element from which to start searching.\n/// &lt;/param&gt;\n/// &lt;returns&gt;\n/// A collection of automation elements satisfying \n/// the specified condition(s).\n/// &lt;/returns&gt;\n///--------------------------------------------------------------------\nprivate AutomationElementCollection FindAutomationElement(\n    AutomationElement rootElement)\n{\n    if (rootElement == null)\n    {\n        throw new ArgumentException(&quot;Root element cannot be null.&quot;);\n    }\n\n    PropertyCondition conditionCanMaximize = \n        new PropertyCondition(WindowPattern.CanMaximizeProperty, true);\n\n    PropertyCondition conditionCanMinimize =\n        new PropertyCondition(WindowPattern.CanMinimizeProperty, true);\n\n    PropertyCondition conditionIsModal =\n        new PropertyCondition(WindowPattern.IsModalProperty, false);\n\n    PropertyCondition conditionIsTopmost =\n        new PropertyCondition(WindowPattern.IsTopmostProperty, true);\n\n    PropertyCondition conditionWindowInteractionState =\n        new PropertyCondition(\n        WindowPattern.WindowInteractionStateProperty, \n        WindowInteractionState.ReadyForUserInteraction);\n\n    PropertyCondition conditionWindowVisualState =\n        new PropertyCondition(\n        WindowPattern.WindowVisualStateProperty, \n        WindowVisualState.Normal);\n\n    // Use any combination of the preceding condtions to \n    // find the control(s) of interest\n    Condition condition = new AndCondition(\n        conditionCanMaximize, \n        conditionIsModal, \n        conditionWindowInteractionState);\n\n    return rootElement.FindAll(TreeScope.Descendants, condition); \n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_WindowPattern_IsModalProperty\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsModalProperty</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <span class=\"xref\">stem.Windows.Automation.WindowPattern.WindowPatternInformation.IsModal*</span> property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.Automation.AutomationProperty IsModalProperty;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This identifier is used by UI Automation client applications. UI Automation providers should use the equivalent field in <a class=\"xref\" href=\"system.windows.automation.windowpatternidentifiers\" data-linktype=\"relative-path\">WindowPatternIdentifiers</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>In the following example, a root element is passed to a function that returns a collection of automation elements that are descendants of the root and satisfy a set of property conditions.  </p>\n<pre><code class=\"lang-vb\" name=\"UIAWindowPattern_snip#100\">&#39;&#39;&#39;------------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Finds all automation elements that satisfy \n&#39;&#39;&#39; the specified condition(s).\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;rootElement&quot;&gt;\n&#39;&#39;&#39; The automation element from which to start searching.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;returns&gt;\n&#39;&#39;&#39; A collection of automation elements satisfying \n&#39;&#39;&#39; the specified condition(s).\n&#39;&#39;&#39; &lt;/returns&gt;\n&#39;&#39;&#39;------------------------------------------------------------------------\nPrivate Function FindAutomationElement( _\n    ByVal rootElement As AutomationElement) As AutomationElementCollection\n    If rootElement Is Nothing Then\n        Throw New ArgumentException(&quot;Root element cannot be null.&quot;)\n    End If\n\n    Dim conditionCanMaximize As _\n        New PropertyCondition(WindowPattern.CanMaximizeProperty, True)\n\n    Dim conditionCanMinimize As _\n        New PropertyCondition(WindowPattern.CanMinimizeProperty, True)\n\n    Dim conditionIsModal As _\n        New PropertyCondition(WindowPattern.IsModalProperty, False)\n\n    Dim conditionIsTopmost As _\n        New PropertyCondition(WindowPattern.IsTopmostProperty, True)\n\n    Dim conditionWindowInteractionState As _\n        New PropertyCondition(WindowPattern.WindowInteractionStateProperty, _\n        WindowInteractionState.ReadyForUserInteraction)\n\n    Dim conditionWindowVisualState As _\n        New PropertyCondition(WindowPattern.WindowVisualStateProperty, _\n        WindowVisualState.Normal)\n\n    &#39; Use any combination of the preceding condtions to \n    &#39; find the control(s) of interest\n    Dim condition = New AndCondition(conditionCanMaximize, _\n        conditionIsModal, conditionWindowInteractionState)\n\n    Return rootElement.FindAll(TreeScope.Descendants, condition)\n\nEnd Function &#39;FindAutomationElement\n\n</code></pre><pre><code class=\"lang-cs\" name=\"UIAWindowPattern_snip#100\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Finds all automation elements that satisfy \n/// the specified condition(s).\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;rootElement&quot;&gt;\n/// The automation element from which to start searching.\n/// &lt;/param&gt;\n/// &lt;returns&gt;\n/// A collection of automation elements satisfying \n/// the specified condition(s).\n/// &lt;/returns&gt;\n///--------------------------------------------------------------------\nprivate AutomationElementCollection FindAutomationElement(\n    AutomationElement rootElement)\n{\n    if (rootElement == null)\n    {\n        throw new ArgumentException(&quot;Root element cannot be null.&quot;);\n    }\n\n    PropertyCondition conditionCanMaximize = \n        new PropertyCondition(WindowPattern.CanMaximizeProperty, true);\n\n    PropertyCondition conditionCanMinimize =\n        new PropertyCondition(WindowPattern.CanMinimizeProperty, true);\n\n    PropertyCondition conditionIsModal =\n        new PropertyCondition(WindowPattern.IsModalProperty, false);\n\n    PropertyCondition conditionIsTopmost =\n        new PropertyCondition(WindowPattern.IsTopmostProperty, true);\n\n    PropertyCondition conditionWindowInteractionState =\n        new PropertyCondition(\n        WindowPattern.WindowInteractionStateProperty, \n        WindowInteractionState.ReadyForUserInteraction);\n\n    PropertyCondition conditionWindowVisualState =\n        new PropertyCondition(\n        WindowPattern.WindowVisualStateProperty, \n        WindowVisualState.Normal);\n\n    // Use any combination of the preceding condtions to \n    // find the control(s) of interest\n    Condition condition = new AndCondition(\n        conditionCanMaximize, \n        conditionIsModal, \n        conditionWindowInteractionState);\n\n    return rootElement.FindAll(TreeScope.Descendants, condition); \n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_WindowPattern_IsTopmostProperty\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsTopmostProperty</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <span class=\"xref\">stem.Windows.Automation.WindowPattern.WindowPatternInformation.IsTopmost*</span> property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.Automation.AutomationProperty IsTopmostProperty;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This identifier is used by UI Automation client applications. UI Automation providers should use the equivalent field in <a class=\"xref\" href=\"system.windows.automation.windowpatternidentifiers\" data-linktype=\"relative-path\">WindowPatternIdentifiers</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>In the following example, a root element is passed to a function that returns a collection of automation elements that are descendants of the root and satisfy a set of property conditions.  </p>\n<pre><code class=\"lang-vb\" name=\"UIAWindowPattern_snip#100\">&#39;&#39;&#39;------------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Finds all automation elements that satisfy \n&#39;&#39;&#39; the specified condition(s).\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;rootElement&quot;&gt;\n&#39;&#39;&#39; The automation element from which to start searching.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;returns&gt;\n&#39;&#39;&#39; A collection of automation elements satisfying \n&#39;&#39;&#39; the specified condition(s).\n&#39;&#39;&#39; &lt;/returns&gt;\n&#39;&#39;&#39;------------------------------------------------------------------------\nPrivate Function FindAutomationElement( _\n    ByVal rootElement As AutomationElement) As AutomationElementCollection\n    If rootElement Is Nothing Then\n        Throw New ArgumentException(&quot;Root element cannot be null.&quot;)\n    End If\n\n    Dim conditionCanMaximize As _\n        New PropertyCondition(WindowPattern.CanMaximizeProperty, True)\n\n    Dim conditionCanMinimize As _\n        New PropertyCondition(WindowPattern.CanMinimizeProperty, True)\n\n    Dim conditionIsModal As _\n        New PropertyCondition(WindowPattern.IsModalProperty, False)\n\n    Dim conditionIsTopmost As _\n        New PropertyCondition(WindowPattern.IsTopmostProperty, True)\n\n    Dim conditionWindowInteractionState As _\n        New PropertyCondition(WindowPattern.WindowInteractionStateProperty, _\n        WindowInteractionState.ReadyForUserInteraction)\n\n    Dim conditionWindowVisualState As _\n        New PropertyCondition(WindowPattern.WindowVisualStateProperty, _\n        WindowVisualState.Normal)\n\n    &#39; Use any combination of the preceding condtions to \n    &#39; find the control(s) of interest\n    Dim condition = New AndCondition(conditionCanMaximize, _\n        conditionIsModal, conditionWindowInteractionState)\n\n    Return rootElement.FindAll(TreeScope.Descendants, condition)\n\nEnd Function &#39;FindAutomationElement\n\n</code></pre><pre><code class=\"lang-cs\" name=\"UIAWindowPattern_snip#100\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Finds all automation elements that satisfy \n/// the specified condition(s).\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;rootElement&quot;&gt;\n/// The automation element from which to start searching.\n/// &lt;/param&gt;\n/// &lt;returns&gt;\n/// A collection of automation elements satisfying \n/// the specified condition(s).\n/// &lt;/returns&gt;\n///--------------------------------------------------------------------\nprivate AutomationElementCollection FindAutomationElement(\n    AutomationElement rootElement)\n{\n    if (rootElement == null)\n    {\n        throw new ArgumentException(&quot;Root element cannot be null.&quot;);\n    }\n\n    PropertyCondition conditionCanMaximize = \n        new PropertyCondition(WindowPattern.CanMaximizeProperty, true);\n\n    PropertyCondition conditionCanMinimize =\n        new PropertyCondition(WindowPattern.CanMinimizeProperty, true);\n\n    PropertyCondition conditionIsModal =\n        new PropertyCondition(WindowPattern.IsModalProperty, false);\n\n    PropertyCondition conditionIsTopmost =\n        new PropertyCondition(WindowPattern.IsTopmostProperty, true);\n\n    PropertyCondition conditionWindowInteractionState =\n        new PropertyCondition(\n        WindowPattern.WindowInteractionStateProperty, \n        WindowInteractionState.ReadyForUserInteraction);\n\n    PropertyCondition conditionWindowVisualState =\n        new PropertyCondition(\n        WindowPattern.WindowVisualStateProperty, \n        WindowVisualState.Normal);\n\n    // Use any combination of the preceding condtions to \n    // find the control(s) of interest\n    Condition condition = new AndCondition(\n        conditionCanMaximize, \n        conditionIsModal, \n        conditionWindowInteractionState);\n\n    return rootElement.FindAll(TreeScope.Descendants, condition); \n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_WindowPattern_Pattern\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Pattern</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.automation.windowpattern\" data-linktype=\"relative-path\">WindowPattern</a> control pattern.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.Automation.AutomationPattern Pattern;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This identifier is used by UI Automation client applications. UI Automation providers should use the equivalent field in <a class=\"xref\" href=\"system.windows.automation.windowpatternidentifiers\" data-linktype=\"relative-path\">WindowPatternIdentifiers</a>.  </p>\n<p> The pattern identifier is passed to methods such as <a class=\"xref\" href=\"system.windows.automation.automationelement#System_Windows_Automation_AutomationElement_GetCurrentPattern_\" data-linktype=\"relative-path\">GetCurrentPattern</a> to retrieve the control pattern of interest from the specified <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>In the following example, a <a class=\"xref\" href=\"system.windows.automation.windowpattern\" data-linktype=\"relative-path\">WindowPattern</a> control pattern is obtained from an <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"UIAWindowPattern_snip#101\">&#39;&#39;&#39;------------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Obtains a WindowPattern control pattern from an automation element.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;targetControl&quot;&gt;\n&#39;&#39;&#39; The automation element of interest.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;returns&gt;\n&#39;&#39;&#39; A WindowPattern object.\n&#39;&#39;&#39; &lt;/returns&gt;\n&#39;&#39;&#39;------------------------------------------------------------------------\nPrivate Function GetWindowPattern(ByVal targetControl As AutomationElement) As WindowPattern\n    Dim windowPattern As WindowPattern = Nothing\n\n    Try\n        windowPattern = DirectCast( _\n        targetControl.GetCurrentPattern(windowPattern.Pattern), _\n        WindowPattern)\n    Catch\n        &#39; object doesn&#39;t support the WindowPattern control pattern\n        Return Nothing\n    End Try\n    &#39; Make sure the element is usable.\n    If False = windowPattern.WaitForInputIdle(10000) Then\n        &#39; Object not responding in a timely manner\n        Return Nothing\n    End If\n    Return windowPattern\nEnd Function &#39;GetWindowPattern\n\n</code></pre><pre><code class=\"lang-cs\" name=\"UIAWindowPattern_snip#101\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Obtains a WindowPattern control pattern from an automation element.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;targetControl&quot;&gt;\n/// The automation element of interest.\n/// &lt;/param&gt;\n/// &lt;returns&gt;\n/// A WindowPattern object.\n/// &lt;/returns&gt;\n///--------------------------------------------------------------------\nprivate WindowPattern GetWindowPattern(AutomationElement targetControl)\n{\n    WindowPattern windowPattern = null;\n\n    try\n    {\n        windowPattern =\n            targetControl.GetCurrentPattern(WindowPattern.Pattern)\n            as WindowPattern;\n    }\n    catch (InvalidOperationException)\n    {\n        // object doesn&#39;t support the WindowPattern control pattern\n        return null;\n    }\n    // Make sure the element is usable.\n    if (false == windowPattern.WaitForInputIdle(10000))\n    {\n        // Object not responding in a timely manner\n        return null;\n    }\n    return windowPattern;\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_WindowPattern_WindowClosedEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WindowClosedEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the event that is raised when a window is closed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.Automation.AutomationEvent WindowClosedEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A client application may need to listen for WindowClosedEvent from a cached object since a window is removed from the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/tla2sharptla-uiautomation-md.md&quot; -->UI Automation<!--END INCLUDE --> control view structure immediately upon being closed.  </p>\n<p> This identifier is used by UI Automation client applications. UI Automation providers should use the equivalent field in <a class=\"xref\" href=\"system.windows.automation.windowpatternidentifiers\" data-linktype=\"relative-path\">WindowPatternIdentifiers</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>In the following example, event listeners are declared and an <a class=\"xref\" href=\"system.windows.automation.automationeventhandler\" data-linktype=\"relative-path\">AutomationEventHandler</a> delegate is specified for <a class=\"xref\" href=\"system.windows.automation.windowpattern#System_Windows_Automation_WindowPattern_WindowOpenedEvent\" data-linktype=\"relative-path\">WindowOpenedEvent</a> and WindowClosedEvent events.  </p>\n<pre><code class=\"lang-vb\" name=\"UIAWindowPattern_snip#104\">&#39;&#39;&#39;------------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Register for events of interest.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;targetControl&quot;&gt;\n&#39;&#39;&#39; The automation element of interest.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39;------------------------------------------------------------------------\nPrivate Sub RegisterForEvents(ByVal targetControl As AutomationElement)\n    Dim eventHandler As AutomationEventHandler = AddressOf OnWindowOpenOrClose\n    Automation.AddAutomationEventHandler(WindowPattern.WindowClosedEvent, _\n        targetControl, TreeScope.Element, eventHandler)\n    Automation.AddAutomationEventHandler(WindowPattern.WindowOpenedEvent, _\n        targetControl, TreeScope.Element, eventHandler)\nEnd Sub &#39;RegisterForEvents\n\n&#39;&#39;&#39;------------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; AutomationEventHandler delegate.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;src&quot;&gt;Object that raised the event.&lt;/param&gt;\n&#39;&#39;&#39; &lt;param name=&quot;e&quot;&gt;Event arguments.&lt;/param&gt;\n&#39;&#39;&#39;------------------------------------------------------------------------\nPrivate Sub OnWindowOpenOrClose(ByVal src As Object, _\n    ByVal e As AutomationEventArgs)\n    &#39; Make sure the element still exists. Elements such as tooltips\n    &#39; can disappear before the event is processed.\n    Dim sourceElement As AutomationElement\n    Try\n        sourceElement = DirectCast(src, AutomationElement)\n    Catch\n        Return\n    End Try\n\n    If e.EventId Is WindowPattern.WindowOpenedEvent Then\n        &#39; TODO: event handling\n        Return\n    End If\n    If e.EventId Is WindowPattern.WindowClosedEvent Then\n        &#39; TODO: event handling\n        Return\n    End If\nEnd Sub &#39;OnWindowOpenOrClose\n</code></pre><pre><code class=\"lang-cs\" name=\"UIAWindowPattern_snip#104\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Register for events of interest.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;targetControl&quot;&gt;\n/// The automation element of interest.\n/// &lt;/param&gt;\n///--------------------------------------------------------------------\nprivate void RegisterForAutomationEvents(\n    AutomationElement targetControl)\n{\n    AutomationEventHandler eventHandler = \n        new AutomationEventHandler(OnWindowOpenOrClose);\n    Automation.AddAutomationEventHandler(\n        WindowPattern.WindowClosedEvent, \n        targetControl, TreeScope.Element, eventHandler);\n    Automation.AddAutomationEventHandler(\n        WindowPattern.WindowOpenedEvent, \n        targetControl, TreeScope.Element, eventHandler);\n}\n\n///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// AutomationEventHandler delegate.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;src&quot;&gt;Object that raised the event.&lt;/param&gt;\n/// &lt;param name=&quot;e&quot;&gt;Event arguments.&lt;/param&gt;\n///--------------------------------------------------------------------\nprivate void OnWindowOpenOrClose(object src, AutomationEventArgs e)\n{\n    // Make sure the element still exists. Elements such as tooltips\n    // can disappear before the event is processed.\n    AutomationElement sourceElement;\n    try\n    {\n        sourceElement = src as AutomationElement;\n    }\n    catch (ElementNotAvailableException)\n    {\n        return;\n    }\n    \n    if (e.EventId == WindowPattern.WindowOpenedEvent)\n    {\n        // TODO: event handling\n        return;\n    }\n    if (e.EventId == WindowPattern.WindowClosedEvent)\n    {\n        // TODO: event handling\n        return;\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_WindowPattern_WindowInteractionStateProperty\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WindowInteractionStateProperty</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <span class=\"xref\">stem.Windows.Automation.WindowPattern.WindowPatternInformation.WindowInteractionState*</span> property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.Automation.AutomationProperty WindowInteractionStateProperty;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This identifier is used by UI Automation client applications. UI Automation providers should use the equivalent field in <a class=\"xref\" href=\"system.windows.automation.windowpatternidentifiers\" data-linktype=\"relative-path\">WindowPatternIdentifiers</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>In the following example, a root element is passed to a function that returns a collection of automation elements that are descendants of the root and satisfy a set of property conditions.  </p>\n<pre><code class=\"lang-vb\" name=\"UIAWindowPattern_snip#100\">&#39;&#39;&#39;------------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Finds all automation elements that satisfy \n&#39;&#39;&#39; the specified condition(s).\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;rootElement&quot;&gt;\n&#39;&#39;&#39; The automation element from which to start searching.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;returns&gt;\n&#39;&#39;&#39; A collection of automation elements satisfying \n&#39;&#39;&#39; the specified condition(s).\n&#39;&#39;&#39; &lt;/returns&gt;\n&#39;&#39;&#39;------------------------------------------------------------------------\nPrivate Function FindAutomationElement( _\n    ByVal rootElement As AutomationElement) As AutomationElementCollection\n    If rootElement Is Nothing Then\n        Throw New ArgumentException(&quot;Root element cannot be null.&quot;)\n    End If\n\n    Dim conditionCanMaximize As _\n        New PropertyCondition(WindowPattern.CanMaximizeProperty, True)\n\n    Dim conditionCanMinimize As _\n        New PropertyCondition(WindowPattern.CanMinimizeProperty, True)\n\n    Dim conditionIsModal As _\n        New PropertyCondition(WindowPattern.IsModalProperty, False)\n\n    Dim conditionIsTopmost As _\n        New PropertyCondition(WindowPattern.IsTopmostProperty, True)\n\n    Dim conditionWindowInteractionState As _\n        New PropertyCondition(WindowPattern.WindowInteractionStateProperty, _\n        WindowInteractionState.ReadyForUserInteraction)\n\n    Dim conditionWindowVisualState As _\n        New PropertyCondition(WindowPattern.WindowVisualStateProperty, _\n        WindowVisualState.Normal)\n\n    &#39; Use any combination of the preceding condtions to \n    &#39; find the control(s) of interest\n    Dim condition = New AndCondition(conditionCanMaximize, _\n        conditionIsModal, conditionWindowInteractionState)\n\n    Return rootElement.FindAll(TreeScope.Descendants, condition)\n\nEnd Function &#39;FindAutomationElement\n\n</code></pre><pre><code class=\"lang-cs\" name=\"UIAWindowPattern_snip#100\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Finds all automation elements that satisfy \n/// the specified condition(s).\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;rootElement&quot;&gt;\n/// The automation element from which to start searching.\n/// &lt;/param&gt;\n/// &lt;returns&gt;\n/// A collection of automation elements satisfying \n/// the specified condition(s).\n/// &lt;/returns&gt;\n///--------------------------------------------------------------------\nprivate AutomationElementCollection FindAutomationElement(\n    AutomationElement rootElement)\n{\n    if (rootElement == null)\n    {\n        throw new ArgumentException(&quot;Root element cannot be null.&quot;);\n    }\n\n    PropertyCondition conditionCanMaximize = \n        new PropertyCondition(WindowPattern.CanMaximizeProperty, true);\n\n    PropertyCondition conditionCanMinimize =\n        new PropertyCondition(WindowPattern.CanMinimizeProperty, true);\n\n    PropertyCondition conditionIsModal =\n        new PropertyCondition(WindowPattern.IsModalProperty, false);\n\n    PropertyCondition conditionIsTopmost =\n        new PropertyCondition(WindowPattern.IsTopmostProperty, true);\n\n    PropertyCondition conditionWindowInteractionState =\n        new PropertyCondition(\n        WindowPattern.WindowInteractionStateProperty, \n        WindowInteractionState.ReadyForUserInteraction);\n\n    PropertyCondition conditionWindowVisualState =\n        new PropertyCondition(\n        WindowPattern.WindowVisualStateProperty, \n        WindowVisualState.Normal);\n\n    // Use any combination of the preceding condtions to \n    // find the control(s) of interest\n    Condition condition = new AndCondition(\n        conditionCanMaximize, \n        conditionIsModal, \n        conditionWindowInteractionState);\n\n    return rootElement.FindAll(TreeScope.Descendants, condition); \n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_WindowPattern_WindowOpenedEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WindowOpenedEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the event that is raised when a window is opened.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.Automation.AutomationEvent WindowOpenedEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This identifier is used by UI Automation client applications. UI Automation providers should use the equivalent field in <a class=\"xref\" href=\"system.windows.automation.windowpatternidentifiers\" data-linktype=\"relative-path\">WindowPatternIdentifiers</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>In the following example, event listeners are declared and an <a class=\"xref\" href=\"system.windows.automation.automationeventhandler\" data-linktype=\"relative-path\">AutomationEventHandler</a> delegate is specified for WindowOpenedEvent and <a class=\"xref\" href=\"system.windows.automation.windowpattern#System_Windows_Automation_WindowPattern_WindowClosedEvent\" data-linktype=\"relative-path\">WindowClosedEvent</a> events.  </p>\n<pre><code class=\"lang-vb\" name=\"UIAWindowPattern_snip#104\">&#39;&#39;&#39;------------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Register for events of interest.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;targetControl&quot;&gt;\n&#39;&#39;&#39; The automation element of interest.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39;------------------------------------------------------------------------\nPrivate Sub RegisterForEvents(ByVal targetControl As AutomationElement)\n    Dim eventHandler As AutomationEventHandler = AddressOf OnWindowOpenOrClose\n    Automation.AddAutomationEventHandler(WindowPattern.WindowClosedEvent, _\n        targetControl, TreeScope.Element, eventHandler)\n    Automation.AddAutomationEventHandler(WindowPattern.WindowOpenedEvent, _\n        targetControl, TreeScope.Element, eventHandler)\nEnd Sub &#39;RegisterForEvents\n\n&#39;&#39;&#39;------------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; AutomationEventHandler delegate.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;src&quot;&gt;Object that raised the event.&lt;/param&gt;\n&#39;&#39;&#39; &lt;param name=&quot;e&quot;&gt;Event arguments.&lt;/param&gt;\n&#39;&#39;&#39;------------------------------------------------------------------------\nPrivate Sub OnWindowOpenOrClose(ByVal src As Object, _\n    ByVal e As AutomationEventArgs)\n    &#39; Make sure the element still exists. Elements such as tooltips\n    &#39; can disappear before the event is processed.\n    Dim sourceElement As AutomationElement\n    Try\n        sourceElement = DirectCast(src, AutomationElement)\n    Catch\n        Return\n    End Try\n\n    If e.EventId Is WindowPattern.WindowOpenedEvent Then\n        &#39; TODO: event handling\n        Return\n    End If\n    If e.EventId Is WindowPattern.WindowClosedEvent Then\n        &#39; TODO: event handling\n        Return\n    End If\nEnd Sub &#39;OnWindowOpenOrClose\n</code></pre><pre><code class=\"lang-cs\" name=\"UIAWindowPattern_snip#104\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Register for events of interest.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;targetControl&quot;&gt;\n/// The automation element of interest.\n/// &lt;/param&gt;\n///--------------------------------------------------------------------\nprivate void RegisterForAutomationEvents(\n    AutomationElement targetControl)\n{\n    AutomationEventHandler eventHandler = \n        new AutomationEventHandler(OnWindowOpenOrClose);\n    Automation.AddAutomationEventHandler(\n        WindowPattern.WindowClosedEvent, \n        targetControl, TreeScope.Element, eventHandler);\n    Automation.AddAutomationEventHandler(\n        WindowPattern.WindowOpenedEvent, \n        targetControl, TreeScope.Element, eventHandler);\n}\n\n///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// AutomationEventHandler delegate.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;src&quot;&gt;Object that raised the event.&lt;/param&gt;\n/// &lt;param name=&quot;e&quot;&gt;Event arguments.&lt;/param&gt;\n///--------------------------------------------------------------------\nprivate void OnWindowOpenOrClose(object src, AutomationEventArgs e)\n{\n    // Make sure the element still exists. Elements such as tooltips\n    // can disappear before the event is processed.\n    AutomationElement sourceElement;\n    try\n    {\n        sourceElement = src as AutomationElement;\n    }\n    catch (ElementNotAvailableException)\n    {\n        return;\n    }\n    \n    if (e.EventId == WindowPattern.WindowOpenedEvent)\n    {\n        // TODO: event handling\n        return;\n    }\n    if (e.EventId == WindowPattern.WindowClosedEvent)\n    {\n        // TODO: event handling\n        return;\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_WindowPattern_WindowVisualStateProperty\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WindowVisualStateProperty</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <span class=\"xref\">stem.Windows.Automation.WindowPattern.WindowPatternInformation.WindowVisualState*</span> property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.Automation.AutomationProperty WindowVisualStateProperty;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This identifier is used by UI Automation client applications. UI Automation providers should use the equivalent field in <a class=\"xref\" href=\"system.windows.automation.windowpatternidentifiers\" data-linktype=\"relative-path\">WindowPatternIdentifiers</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>In the following example, a root element is passed to a function that returns a collection of automation elements that are descendants of the root and satisfy a set of property conditions.  </p>\n<pre><code class=\"lang-vb\" name=\"UIAWindowPattern_snip#100\">&#39;&#39;&#39;------------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Finds all automation elements that satisfy \n&#39;&#39;&#39; the specified condition(s).\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;rootElement&quot;&gt;\n&#39;&#39;&#39; The automation element from which to start searching.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;returns&gt;\n&#39;&#39;&#39; A collection of automation elements satisfying \n&#39;&#39;&#39; the specified condition(s).\n&#39;&#39;&#39; &lt;/returns&gt;\n&#39;&#39;&#39;------------------------------------------------------------------------\nPrivate Function FindAutomationElement( _\n    ByVal rootElement As AutomationElement) As AutomationElementCollection\n    If rootElement Is Nothing Then\n        Throw New ArgumentException(&quot;Root element cannot be null.&quot;)\n    End If\n\n    Dim conditionCanMaximize As _\n        New PropertyCondition(WindowPattern.CanMaximizeProperty, True)\n\n    Dim conditionCanMinimize As _\n        New PropertyCondition(WindowPattern.CanMinimizeProperty, True)\n\n    Dim conditionIsModal As _\n        New PropertyCondition(WindowPattern.IsModalProperty, False)\n\n    Dim conditionIsTopmost As _\n        New PropertyCondition(WindowPattern.IsTopmostProperty, True)\n\n    Dim conditionWindowInteractionState As _\n        New PropertyCondition(WindowPattern.WindowInteractionStateProperty, _\n        WindowInteractionState.ReadyForUserInteraction)\n\n    Dim conditionWindowVisualState As _\n        New PropertyCondition(WindowPattern.WindowVisualStateProperty, _\n        WindowVisualState.Normal)\n\n    &#39; Use any combination of the preceding condtions to \n    &#39; find the control(s) of interest\n    Dim condition = New AndCondition(conditionCanMaximize, _\n        conditionIsModal, conditionWindowInteractionState)\n\n    Return rootElement.FindAll(TreeScope.Descendants, condition)\n\nEnd Function &#39;FindAutomationElement\n\n</code></pre><pre><code class=\"lang-cs\" name=\"UIAWindowPattern_snip#100\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Finds all automation elements that satisfy \n/// the specified condition(s).\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;rootElement&quot;&gt;\n/// The automation element from which to start searching.\n/// &lt;/param&gt;\n/// &lt;returns&gt;\n/// A collection of automation elements satisfying \n/// the specified condition(s).\n/// &lt;/returns&gt;\n///--------------------------------------------------------------------\nprivate AutomationElementCollection FindAutomationElement(\n    AutomationElement rootElement)\n{\n    if (rootElement == null)\n    {\n        throw new ArgumentException(&quot;Root element cannot be null.&quot;);\n    }\n\n    PropertyCondition conditionCanMaximize = \n        new PropertyCondition(WindowPattern.CanMaximizeProperty, true);\n\n    PropertyCondition conditionCanMinimize =\n        new PropertyCondition(WindowPattern.CanMinimizeProperty, true);\n\n    PropertyCondition conditionIsModal =\n        new PropertyCondition(WindowPattern.IsModalProperty, false);\n\n    PropertyCondition conditionIsTopmost =\n        new PropertyCondition(WindowPattern.IsTopmostProperty, true);\n\n    PropertyCondition conditionWindowInteractionState =\n        new PropertyCondition(\n        WindowPattern.WindowInteractionStateProperty, \n        WindowInteractionState.ReadyForUserInteraction);\n\n    PropertyCondition conditionWindowVisualState =\n        new PropertyCondition(\n        WindowPattern.WindowVisualStateProperty, \n        WindowVisualState.Normal);\n\n    // Use any combination of the preceding condtions to \n    // find the control(s) of interest\n    Condition condition = new AndCondition(\n        conditionCanMaximize, \n        conditionIsModal, \n        conditionWindowInteractionState);\n\n    return rootElement.FindAll(TreeScope.Descendants, condition); \n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_WindowPattern_Cached\">\r\n    \r\n            <a id=\"System_Windows_Automation_WindowPattern_Cached_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Cached</div>        \r\n          </div>\r\n    \r\n            <p>Gets the cached <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/tla2sharptla-uiautomation-md.md&quot; -->UI Automation<!--END INCLUDE --> property values for this <a class=\"xref\" href=\"system.windows.automation.windowpattern\" data-linktype=\"relative-path\">WindowPattern</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Automation.WindowPattern.WindowPatternInformation Cached { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.automation.windowpattern.windowpatterninformation\" data-linktype=\"relative-path\">WindowPattern+WindowPatternInformation</a></div>\r\n                  </div>\r\n                  <p>A structure containing the cached <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/tla2sharptla-uiautomation-md.md&quot; -->UI Automation<!--END INCLUDE --> property values for the control pattern.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The requested property is not in the cache.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Cached property values must have been previously requested using a <a class=\"xref\" href=\"system.windows.automation.cacherequest\" data-linktype=\"relative-path\">CacheRequest</a>. Use <a class=\"xref\" href=\"system.windows.automation.windowpattern#System_Windows_Automation_WindowPattern_Current_\" data-linktype=\"relative-path\">Current</a> to get the current value of a property.  </p>\n<p> For information on the properties available and their use, see <a class=\"xref\" href=\"system.windows.automation.windowpattern.windowpatterninformation\" data-linktype=\"relative-path\">WindowPattern+WindowPatternInformation</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_WindowPattern_Current\">\r\n    \r\n            <a id=\"System_Windows_Automation_WindowPattern_Current_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Current</div>        \r\n          </div>\r\n    \r\n            <p>Gets the current <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/tla2sharptla-uiautomation-md.md&quot; -->UI Automation<!--END INCLUDE --> property values for this <a class=\"xref\" href=\"system.windows.automation.windowpattern\" data-linktype=\"relative-path\">WindowPattern</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Automation.WindowPattern.WindowPatternInformation Current { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.automation.windowpattern.windowpatterninformation\" data-linktype=\"relative-path\">WindowPattern+WindowPatternInformation</a></div>\r\n                  </div>\r\n                  <p>A structure containing the current <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/tla2sharptla-uiautomation-md.md&quot; -->UI Automation<!--END INCLUDE --> property values for the control pattern.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This pattern must be from an <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a> with an <a class=\"xref\" href=\"system.windows.automation.automationelementmode\" data-linktype=\"relative-path\">AutomationElementMode</a> reference in order to get current values. If the <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a> was obtained using <a class=\"xref\" href=\"system.windows.automation.automationelementmode\" data-linktype=\"relative-path\">AutomationElementMode</a>, it contains only cached data, and attempting to get the current value of any property raises an exception. Use <a class=\"xref\" href=\"system.windows.automation.windowpattern#System_Windows_Automation_WindowPattern_Cached_\" data-linktype=\"relative-path\">Cached</a> to get the cached value of a property that was previously specified using a <a class=\"xref\" href=\"system.windows.automation.cacherequest\" data-linktype=\"relative-path\">CacheRequest</a>.  </p>\n<p> For information on the properties available and their use, see <a class=\"xref\" href=\"system.windows.automation.windowpattern.windowpatterninformation\" data-linktype=\"relative-path\">WindowPattern+WindowPatternInformation</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_WindowPattern_Close\">\r\n    \r\n            <a id=\"System_Windows_Automation_WindowPattern_Close_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Close()</div>        \r\n          </div>\r\n    \r\n            <p>Attempts to close the current window.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Close ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The control is unable to perform the requested action.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.automation.elementnotavailableexception\" data-linktype=\"relative-path\">ElementNotAvailableException</a></div>\r\n                  </div>\r\n                  <p>When the control is no longer available.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When called on a split pane control, this method will close the pane and remove the associated split. This method may also close all other panes depending on implementation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>In the following example, a <a class=\"xref\" href=\"system.windows.automation.windowpattern\" data-linktype=\"relative-path\">WindowPattern</a>control pattern is obtained from an <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a> and is subsequently used to close the <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"UIAWindowPattern_snip#101\">&#39;&#39;&#39;------------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Obtains a WindowPattern control pattern from an automation element.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;targetControl&quot;&gt;\n&#39;&#39;&#39; The automation element of interest.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;returns&gt;\n&#39;&#39;&#39; A WindowPattern object.\n&#39;&#39;&#39; &lt;/returns&gt;\n&#39;&#39;&#39;------------------------------------------------------------------------\nPrivate Function GetWindowPattern(ByVal targetControl As AutomationElement) As WindowPattern\n    Dim windowPattern As WindowPattern = Nothing\n\n    Try\n        windowPattern = DirectCast( _\n        targetControl.GetCurrentPattern(windowPattern.Pattern), _\n        WindowPattern)\n    Catch\n        &#39; object doesn&#39;t support the WindowPattern control pattern\n        Return Nothing\n    End Try\n    &#39; Make sure the element is usable.\n    If False = windowPattern.WaitForInputIdle(10000) Then\n        &#39; Object not responding in a timely manner\n        Return Nothing\n    End If\n    Return windowPattern\nEnd Function &#39;GetWindowPattern\n\n</code></pre><pre><code class=\"lang-cs\" name=\"UIAWindowPattern_snip#101\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Obtains a WindowPattern control pattern from an automation element.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;targetControl&quot;&gt;\n/// The automation element of interest.\n/// &lt;/param&gt;\n/// &lt;returns&gt;\n/// A WindowPattern object.\n/// &lt;/returns&gt;\n///--------------------------------------------------------------------\nprivate WindowPattern GetWindowPattern(AutomationElement targetControl)\n{\n    WindowPattern windowPattern = null;\n\n    try\n    {\n        windowPattern =\n            targetControl.GetCurrentPattern(WindowPattern.Pattern)\n            as WindowPattern;\n    }\n    catch (InvalidOperationException)\n    {\n        // object doesn&#39;t support the WindowPattern control pattern\n        return null;\n    }\n    // Make sure the element is usable.\n    if (false == windowPattern.WaitForInputIdle(10000))\n    {\n        // Object not responding in a timely manner\n        return null;\n    }\n    return windowPattern;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIAWindowPattern_snip#102\">&#39;&#39;&#39;------------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Calls the WindowPattern.Close() method for an associated \n&#39;&#39;&#39; automation element.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;windowPattern&quot;&gt;\n&#39;&#39;&#39; The WindowPattern control pattern obtained from\n&#39;&#39;&#39; an automation element.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39;------------------------------------------------------------------------\nPrivate Sub CloseWindow(ByVal windowPattern As WindowPattern)\n    Try\n        windowPattern.Close()\n    Catch\n        &#39; object is not able to perform the requested action\n        Return\n    End Try\n\nEnd Sub &#39;CloseWindow\n\n</code></pre><pre><code class=\"lang-cs\" name=\"UIAWindowPattern_snip#102\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Calls the WindowPattern.Close() method for an associated \n/// automation element.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;windowPattern&quot;&gt;\n/// The WindowPattern control pattern obtained from\n/// an automation element.\n/// &lt;/param&gt;\n///--------------------------------------------------------------------\nprivate void CloseWindow(WindowPattern windowPattern)\n{\n    try\n    {\n        windowPattern.Close();\n    }\n    catch (InvalidOperationException)\n    {\n        // object is not able to perform the requested action\n        return;\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_WindowPattern_SetWindowVisualState_System_Windows_Automation_WindowVisualState_\">\r\n    \r\n            <a id=\"System_Windows_Automation_WindowPattern_SetWindowVisualState_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetWindowVisualState(WindowVisualState)</div>        \r\n          </div>\r\n    \r\n            <p>Changes the <a class=\"xref\" href=\"system.windows.automation.windowvisualstate\" data-linktype=\"relative-path\">WindowVisualState</a> of the window.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetWindowVisualState (System.Windows.Automation.WindowVisualState state);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.automation.windowvisualstate\" data-linktype=\"relative-path\">WindowVisualState</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The requested <a class=\"xref\" href=\"system.windows.automation.windowvisualstate\" data-linktype=\"relative-path\">WindowVisualState</a> of the window.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>A control does not support a requested behavior.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>In the following example, a <a class=\"xref\" href=\"system.windows.automation.windowpattern\" data-linktype=\"relative-path\">WindowPattern</a>control pattern is obtained from an <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a> and is subsequently used to specify the visual state of the <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"UIAWindowPattern_snip#101\">&#39;&#39;&#39;------------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Obtains a WindowPattern control pattern from an automation element.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;targetControl&quot;&gt;\n&#39;&#39;&#39; The automation element of interest.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;returns&gt;\n&#39;&#39;&#39; A WindowPattern object.\n&#39;&#39;&#39; &lt;/returns&gt;\n&#39;&#39;&#39;------------------------------------------------------------------------\nPrivate Function GetWindowPattern(ByVal targetControl As AutomationElement) As WindowPattern\n    Dim windowPattern As WindowPattern = Nothing\n\n    Try\n        windowPattern = DirectCast( _\n        targetControl.GetCurrentPattern(windowPattern.Pattern), _\n        WindowPattern)\n    Catch\n        &#39; object doesn&#39;t support the WindowPattern control pattern\n        Return Nothing\n    End Try\n    &#39; Make sure the element is usable.\n    If False = windowPattern.WaitForInputIdle(10000) Then\n        &#39; Object not responding in a timely manner\n        Return Nothing\n    End If\n    Return windowPattern\nEnd Function &#39;GetWindowPattern\n\n</code></pre><pre><code class=\"lang-cs\" name=\"UIAWindowPattern_snip#101\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Obtains a WindowPattern control pattern from an automation element.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;targetControl&quot;&gt;\n/// The automation element of interest.\n/// &lt;/param&gt;\n/// &lt;returns&gt;\n/// A WindowPattern object.\n/// &lt;/returns&gt;\n///--------------------------------------------------------------------\nprivate WindowPattern GetWindowPattern(AutomationElement targetControl)\n{\n    WindowPattern windowPattern = null;\n\n    try\n    {\n        windowPattern =\n            targetControl.GetCurrentPattern(WindowPattern.Pattern)\n            as WindowPattern;\n    }\n    catch (InvalidOperationException)\n    {\n        // object doesn&#39;t support the WindowPattern control pattern\n        return null;\n    }\n    // Make sure the element is usable.\n    if (false == windowPattern.WaitForInputIdle(10000))\n    {\n        // Object not responding in a timely manner\n        return null;\n    }\n    return windowPattern;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIAWindowPattern_snip#103\">&#39;&#39;&#39;------------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Calls the WindowPattern.SetVisualState() method for an associated \n&#39;&#39;&#39; automation element.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;windowPattern&quot;&gt;\n&#39;&#39;&#39; The WindowPattern control pattern obtained from\n&#39;&#39;&#39; an automation element.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;param name=&quot;visualState&quot;&gt;\n&#39;&#39;&#39; The specified WindowVisualState enumeration value.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39;------------------------------------------------------------------------\nPrivate Sub SetVisualState(ByVal windowPattern As WindowPattern, _\n    ByVal visualState As WindowVisualState)\n    Try\n        If (windowPattern.Current.WindowInteractionState = _\n                WindowInteractionState.ReadyForUserInteraction) Then\n            Select Case visualState\n                Case WindowVisualState.Maximized\n                    &#39; Confirm that the element can be maximized\n                    If ((windowPattern.Current.CanMaximize) &amp; _\n                            Not (windowPattern.Current.IsModal)) Then\n                        windowPattern.SetWindowVisualState( _\n                        WindowVisualState.Maximized)\n                    End If\n                    &#39; TODO: additional processing\n                Case WindowVisualState.Minimized\n                    &#39; Confirm that the element can be minimized\n                    If ((windowPattern.Current.CanMinimize) &amp; _\n                            Not (windowPattern.Current.IsModal)) Then\n                        windowPattern.SetWindowVisualState( _\n                        WindowVisualState.Minimized)\n                    End If\n                    &#39; TODO: additional processing\n                Case WindowVisualState.Normal\n                    windowPattern.SetWindowVisualState( _\n                    WindowVisualState.Normal)\n                Case Else\n                    windowPattern.SetWindowVisualState( _\n                    WindowVisualState.Normal)\n            End Select\n            &#39; TODO: additional processing\n        End If\n    Catch exc As InvalidOperationException\n        &#39; object is not able to perform the requested action\n        Return\n    End Try\nEnd Sub &#39;SetVisualState\n\n</code></pre><pre><code class=\"lang-cs\" name=\"UIAWindowPattern_snip#103\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Calls the WindowPattern.SetVisualState() method for an associated \n/// automation element.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;windowPattern&quot;&gt;\n/// The WindowPattern control pattern obtained from\n/// an automation element.\n/// &lt;/param&gt;\n/// &lt;param name=&quot;visualState&quot;&gt;\n/// The specified WindowVisualState enumeration value.\n/// &lt;/param&gt;\n///--------------------------------------------------------------------\nprivate void SetVisualState(WindowPattern windowPattern, \n    WindowVisualState visualState)\n{\n    try\n    {\n        if (windowPattern.Current.WindowInteractionState ==\n            WindowInteractionState.ReadyForUserInteraction)\n        {\n            switch (visualState)\n            {\n                case WindowVisualState.Maximized:\n                    // Confirm that the element can be maximized\n                    if ((windowPattern.Current.CanMaximize) &amp;&amp; \n                        !(windowPattern.Current.IsModal))\n                    {\n                        windowPattern.SetWindowVisualState(\n                            WindowVisualState.Maximized);\n                        // TODO: additional processing\n                    }\n                    break;\n                case WindowVisualState.Minimized:\n                    // Confirm that the element can be minimized\n                    if ((windowPattern.Current.CanMinimize) &amp;&amp;\n                        !(windowPattern.Current.IsModal))\n                    {\n                        windowPattern.SetWindowVisualState(\n                            WindowVisualState.Minimized);\n                        // TODO: additional processing\n                    }\n                    break;\n                case WindowVisualState.Normal:\n                    windowPattern.SetWindowVisualState(\n                        WindowVisualState.Normal);\n                    break;\n                default:\n                    windowPattern.SetWindowVisualState(\n                        WindowVisualState.Normal);\n                    // TODO: additional processing\n                    break;\n            }\n        }\n    }\n    catch (InvalidOperationException)\n    {\n        // object is not able to perform the requested action\n        return;\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_WindowPattern_WaitForInputIdle_System_Int32_\">\r\n    \r\n            <a id=\"System_Windows_Automation_WindowPattern_WaitForInputIdle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WaitForInputIdle(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Causes the calling code to block for the specified time or until the associated process enters an idle state, whichever completes first.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool WaitForInputIdle (int milliseconds);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>milliseconds</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The amount of time, in milliseconds, to wait for the associated process to become idle. The maximum is <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the window has entered the idle state; <code>false</code> if the timeout occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The parameter passed in is not a valid number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is typically used in conjunction with the handling of a <a class=\"xref\" href=\"system.windows.automation.windowpatternidentifiers#System_Windows_Automation_WindowPatternIdentifiers_WindowOpenedEvent\" data-linktype=\"relative-path\">WindowOpenedEvent</a>.  </p>\n<p> The implementation is dependent on the underlying application framework; therefore this method may return some time after the window is ready for user input. The calling code should not rely on this method to ascertain exactly when the window has become idle.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>In the following example, a <a class=\"xref\" href=\"system.windows.automation.windowpattern\" data-linktype=\"relative-path\">WindowPattern</a>control pattern is obtained from an <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a> and uses WaitForInputIdle to confirm the element is ready for user interaction within a reasonable amount of time.  </p>\n<pre><code class=\"lang-vb\" name=\"UIAWindowPattern_snip#101\">&#39;&#39;&#39;------------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Obtains a WindowPattern control pattern from an automation element.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;targetControl&quot;&gt;\n&#39;&#39;&#39; The automation element of interest.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;returns&gt;\n&#39;&#39;&#39; A WindowPattern object.\n&#39;&#39;&#39; &lt;/returns&gt;\n&#39;&#39;&#39;------------------------------------------------------------------------\nPrivate Function GetWindowPattern(ByVal targetControl As AutomationElement) As WindowPattern\n    Dim windowPattern As WindowPattern = Nothing\n\n    Try\n        windowPattern = DirectCast( _\n        targetControl.GetCurrentPattern(windowPattern.Pattern), _\n        WindowPattern)\n    Catch\n        &#39; object doesn&#39;t support the WindowPattern control pattern\n        Return Nothing\n    End Try\n    &#39; Make sure the element is usable.\n    If False = windowPattern.WaitForInputIdle(10000) Then\n        &#39; Object not responding in a timely manner\n        Return Nothing\n    End If\n    Return windowPattern\nEnd Function &#39;GetWindowPattern\n\n</code></pre><pre><code class=\"lang-cs\" name=\"UIAWindowPattern_snip#101\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Obtains a WindowPattern control pattern from an automation element.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;targetControl&quot;&gt;\n/// The automation element of interest.\n/// &lt;/param&gt;\n/// &lt;returns&gt;\n/// A WindowPattern object.\n/// &lt;/returns&gt;\n///--------------------------------------------------------------------\nprivate WindowPattern GetWindowPattern(AutomationElement targetControl)\n{\n    WindowPattern windowPattern = null;\n\n    try\n    {\n        windowPattern =\n            targetControl.GetCurrentPattern(WindowPattern.Pattern)\n            as WindowPattern;\n    }\n    catch (InvalidOperationException)\n    {\n        // object doesn&#39;t support the WindowPattern control pattern\n        return null;\n    }\n    // Make sure the element is usable.\n    if (false == windowPattern.WaitForInputIdle(10000))\n    {\n        // Object not responding in a timely manner\n        return null;\n    }\n    return windowPattern;\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Automation.WindowPattern.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Automation.WindowPattern.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.WindowPattern\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.WindowPattern.Cached\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.WindowPattern.CanMaximizeProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.WindowPattern.CanMinimizeProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.WindowPattern.Close\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.WindowPattern.Current\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.WindowPattern.IsModalProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.WindowPattern.IsTopmostProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.WindowPattern.Pattern\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.WindowPattern.SetWindowVisualState\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.WindowPattern.WaitForInputIdle\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.WindowPattern.WindowClosedEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.WindowPattern.WindowInteractionStateProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.WindowPattern.WindowOpenedEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.WindowPattern.WindowVisualStateProperty\">\r\n<meta name=\"APILocation\" content=\"UIAutomationClient.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"b964abd2-3b0b-d1dc-baf0-9f2a53ef47b1\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Windows.Automation\\WindowPattern.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a control that provides fundamental window-based functionality within a traditional graphical user interface (GUI).\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Windows.Automation/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Automation.WindowPattern\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Automation.WindowPattern.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Automation.WindowPattern.yml","open_to_public_contributors":true,"api_name":["System.Windows.Automation.WindowPattern","System.Windows.Automation.WindowPattern.Cached","System.Windows.Automation.WindowPattern.CanMaximizeProperty","System.Windows.Automation.WindowPattern.CanMinimizeProperty","System.Windows.Automation.WindowPattern.Close","System.Windows.Automation.WindowPattern.Current","System.Windows.Automation.WindowPattern.IsModalProperty","System.Windows.Automation.WindowPattern.IsTopmostProperty","System.Windows.Automation.WindowPattern.Pattern","System.Windows.Automation.WindowPattern.SetWindowVisualState","System.Windows.Automation.WindowPattern.WaitForInputIdle","System.Windows.Automation.WindowPattern.WindowClosedEvent","System.Windows.Automation.WindowPattern.WindowInteractionStateProperty","System.Windows.Automation.WindowPattern.WindowOpenedEvent","System.Windows.Automation.WindowPattern.WindowVisualStateProperty"],"api_location":["UIAutomationClient.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Automation.WindowPattern","System::Windows::Automation::WindowPattern","System.Windows.Automation.WindowPattern.Cached","System::Windows::Automation::WindowPattern::Cached","System.Windows.Automation.WindowPattern.CanMaximizeProperty","System::Windows::Automation::WindowPattern::CanMaximizeProperty","System.Windows.Automation.WindowPattern.CanMinimizeProperty","System::Windows::Automation::WindowPattern::CanMinimizeProperty","System.Windows.Automation.WindowPattern.Close","System::Windows::Automation::WindowPattern::Close","System.Windows.Automation.WindowPattern.Current","System::Windows::Automation::WindowPattern::Current","System.Windows.Automation.WindowPattern.IsModalProperty","System::Windows::Automation::WindowPattern::IsModalProperty","System.Windows.Automation.WindowPattern.IsTopmostProperty","System::Windows::Automation::WindowPattern::IsTopmostProperty","System.Windows.Automation.WindowPattern.Pattern","System::Windows::Automation::WindowPattern::Pattern","System.Windows.Automation.WindowPattern.SetWindowVisualState","System::Windows::Automation::WindowPattern::SetWindowVisualState","System.Windows.Automation.WindowPattern.WaitForInputIdle","System::Windows::Automation::WindowPattern::WaitForInputIdle","System.Windows.Automation.WindowPattern.WindowClosedEvent","System::Windows::Automation::WindowPattern::WindowClosedEvent","System.Windows.Automation.WindowPattern.WindowInteractionStateProperty","System::Windows::Automation::WindowPattern::WindowInteractionStateProperty","System.Windows.Automation.WindowPattern.WindowOpenedEvent","System::Windows::Automation::WindowPattern::WindowOpenedEvent","System.Windows.Automation.WindowPattern.WindowVisualStateProperty","System::Windows::Automation::WindowPattern::WindowVisualStateProperty"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"b964abd2-3b0b-d1dc-baf0-9f2a53ef47b1","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Windows.Automation\\WindowPattern.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Windows.Automation/WindowPattern.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"WindowPattern class | Microsoft Docs","_op_ogTitle":"WindowPattern class","description":"Represents a control that provides fundamental window-based functionality within a traditional graphical user interface (GUI).\n","toc_asset_id":"_splitted/System.Windows.Automation/toc.json","toc_rel":"_splitted/System.Windows.Automation/toc.json","source_url":"","ms.assetid":"System.Windows.Automation.WindowPattern","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.automation.windowpattern","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.automation.windowpattern","fileRelativePath":"System.Windows.Automation.WindowPattern.html"},"themesRelativePathToOutputRoot":"_themes/"}