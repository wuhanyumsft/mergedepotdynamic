{"content":"    \r\n    <h1 id=\"System_Net_FtpWebRequest\">\r\n      <span class=\"lang-csharp\">FtpWebRequest</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Implements a File Transfer Protocol (FTP) client.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public sealed class FtpWebRequest : System.Net.WebRequest</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.net.webrequest\" data-linktype=\"relative-path\">System.Net.WebRequest</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l3\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">FtpWebRequest</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_CreateObjRef_System_Type_\" data-linktype=\"relative-path\">CreateObjRef(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_GetLifetimeService\" data-linktype=\"relative-path\">GetLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_InitializeLifetimeService\" data-linktype=\"relative-path\">InitializeLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_MemberwiseClone_System_Boolean_\" data-linktype=\"relative-path\">MemberwiseClone(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.net.webrequest#System_Net_WebRequest_AuthenticationLevel\" data-linktype=\"relative-path\">AuthenticationLevel</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.net.webrequest#System_Net_WebRequest_CachePolicy\" data-linktype=\"relative-path\">CachePolicy</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.net.webrequest#System_Net_WebRequest_Create_System_String_\" data-linktype=\"relative-path\">Create(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.net.webrequest#System_Net_WebRequest_Create_System_Uri_\" data-linktype=\"relative-path\">Create(Uri)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.net.webrequest#System_Net_WebRequest_CreateDefault_System_Uri_\" data-linktype=\"relative-path\">CreateDefault(Uri)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.net.webrequest#System_Net_WebRequest_CreateHttp_System_String_\" data-linktype=\"relative-path\">CreateHttp(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.net.webrequest#System_Net_WebRequest_CreateHttp_System_Uri_\" data-linktype=\"relative-path\">CreateHttp(Uri)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.net.webrequest#System_Net_WebRequest_CreatorInstance\" data-linktype=\"relative-path\">CreatorInstance</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.net.webrequest#System_Net_WebRequest_DefaultWebProxy\" data-linktype=\"relative-path\">DefaultWebProxy</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.net.webrequest#System_Net_WebRequest_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"relative-path\">GetObjectData(SerializationInfo,StreamingContext)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.net.webrequest#System_Net_WebRequest_GetRequestStreamAsync\" data-linktype=\"relative-path\">GetRequestStreamAsync()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.net.webrequest#System_Net_WebRequest_GetResponseAsync\" data-linktype=\"relative-path\">GetResponseAsync()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.net.webrequest#System_Net_WebRequest_GetSystemWebProxy\" data-linktype=\"relative-path\">GetSystemWebProxy()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.net.webrequest#System_Net_WebRequest_ImpersonationLevel\" data-linktype=\"relative-path\">ImpersonationLevel</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.net.webrequest#System_Net_WebRequest_RegisterPortableWebRequestCreator_System_Net_IWebRequestCreate_\" data-linktype=\"relative-path\">RegisterPortableWebRequestCreator(IWebRequestCreate)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.net.webrequest#System_Net_WebRequest_RegisterPrefix_System_String_System_Net_IWebRequestCreate_\" data-linktype=\"relative-path\">RegisterPrefix(String,IWebRequestCreate)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.net.webrequest#System_Net_WebRequest_System_Runtime_Serialization_ISerializable_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"relative-path\">ISerializable.GetObjectData(SerializationInfo,StreamingContext)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>To obtain an instance of FtpWebRequest, use the <a class=\"xref\" href=\"system.net.webrequest#System_Net_WebRequest_Create_\" data-linktype=\"relative-path\">Create</a> method. You can also use the <a class=\"xref\" href=\"system.net.webclient\" data-linktype=\"relative-path\">WebClient</a> class to upload and download information from an FTP server. Using either of these approaches, when you specify a network resource that uses the FTP scheme (for example, <code>&quot;ftp://contoso.com&quot;</code>) the FtpWebRequest class provides the ability to programmatically interact with FTP servers.  </p>\n<p> The URI may be relative or absolute. If the URI is of the form <code>&quot;ftp://contoso.com/%2fpath&quot;</code> (%2f is an escaped &#39;/&#39;), then the URI is absolute, and the current directory is <code>/path</code>. If, however, the URI is of the form <code>&quot;ftp://contoso.com/path&quot;</code>, first the .NET Framework logs into the FTP server (using the user name and password set by the <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_Credentials_\" data-linktype=\"relative-path\">Credentials</a> property), then the current directory is set to <code>&lt;UserLoginDirectory&gt;/path</code>.  </p>\n<p> You must have a valid user name and password for the server or the server must allow anonymous logon. You can specify the credentials used to connect to the server by setting the <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_Credentials_\" data-linktype=\"relative-path\">Credentials</a> property or you can include them in the <a class=\"xref\" href=\"system.uri#System_Uri_UserInfo_\" data-linktype=\"relative-path\">UserInfo</a> portion of the URI passed to the <a class=\"xref\" href=\"system.net.webrequest#System_Net_WebRequest_Create_\" data-linktype=\"relative-path\">Create</a> method. If you include <a class=\"xref\" href=\"system.uri#System_Uri_UserInfo_\" data-linktype=\"relative-path\">UserInfo</a> information in the URI, the <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_Credentials_\" data-linktype=\"relative-path\">Credentials</a> property is set to a new network credential with the specified user name and password information.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Unless the <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_EnableSsl_\" data-linktype=\"relative-path\">EnableSsl</a> property is <code>true</code>, all data and commands, including your user name and password information, are sent to the server in clear text. Anyone monitoring network traffic can view your credentials and use them to connect to the server. If you are connecting to an FTP server that requires credentials and supports Secure Sockets Layer (SSL), you should set <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_EnableSsl_\" data-linktype=\"relative-path\">EnableSsl</a> to <code>true</code>.  </p>\n</div>\n<p> You must have <a class=\"xref\" href=\"system.net.webpermission\" data-linktype=\"relative-path\">WebPermission</a> to access the FTP resource; otherwise, a <a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a> exception is thrown.  </p>\n<p> Specify the FTP command to send to the server by setting the <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_Method_\" data-linktype=\"relative-path\">Method</a> property to a value defined in the <a class=\"xref\" href=\"system.net.webrequestmethods.ftp\" data-linktype=\"relative-path\">WebRequestMethods+Ftp</a> structure. To transmit text data, change the <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_UseBinary_\" data-linktype=\"relative-path\">UseBinary</a> property from its default value (<code>true</code>) to <code>false</code>. For details and restrictions, see <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_Method_\" data-linktype=\"relative-path\">Method</a>.  </p>\n<p> When using an FtpWebRequest object to upload a file to a server, you must write the file content to the request stream obtained by calling the <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_GetRequestStream_\" data-linktype=\"relative-path\">GetRequestStream</a> method or its asynchronous counterparts, the <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_BeginGetRequestStream_\" data-linktype=\"relative-path\">BeginGetRequestStream</a> and <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_EndGetRequestStream_\" data-linktype=\"relative-path\">EndGetRequestStream</a> methods. You must write to the stream and close the stream before sending the request.  </p>\n<p> Requests are sent to the server by calling the <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_GetResponse_\" data-linktype=\"relative-path\">GetResponse</a> method or its asynchronous counterparts, the <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_BeginGetResponse_\" data-linktype=\"relative-path\">BeginGetResponse</a> and <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_EndGetResponse_\" data-linktype=\"relative-path\">EndGetResponse</a> methods. When the requested operation completes, an <a class=\"xref\" href=\"system.net.ftpwebresponse\" data-linktype=\"relative-path\">FtpWebResponse</a> object is returned. The <a class=\"xref\" href=\"system.net.ftpwebresponse\" data-linktype=\"relative-path\">FtpWebResponse</a> object provides the status of the operation and any data downloaded from the server.  </p>\n<p> You can set a time-out value for reading or writing to the server by using the <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_ReadWriteTimeout_\" data-linktype=\"relative-path\">ReadWriteTimeout</a> property. If the time-out period is exceeded, the calling method throws a <a class=\"xref\" href=\"system.net.webexception\" data-linktype=\"relative-path\">WebException</a> with <a class=\"xref\" href=\"system.net.webexceptionstatus\" data-linktype=\"relative-path\">WebExceptionStatus</a> set to <a class=\"xref\" href=\"system.net.webexceptionstatus\" data-linktype=\"relative-path\">WebExceptionStatus</a>.  </p>\n<p> When downloading a file from an FTP server, if the command was successful, the contents of the requested file are available in the response object&#39;s stream. You can access this stream by calling the <a class=\"xref\" href=\"system.net.ftpwebresponse#System_Net_FtpWebResponse_GetResponseStream_\" data-linktype=\"relative-path\">GetResponseStream</a> method. For more information, see <a class=\"xref\" href=\"system.net.ftpwebresponse\" data-linktype=\"relative-path\">FtpWebResponse</a>.  </p>\n<p> If the <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_Proxy_\" data-linktype=\"relative-path\">Proxy</a> property is set, either directly or in a configuration file, communications with the FTP server are made through the specified proxy. If the specified proxy is an HTTP proxy, only the <a class=\"xref\" href=\"system.net.webrequestmethods.ftp#System_Net_WebRequestMethods_Ftp_DownloadFile\" data-linktype=\"relative-path\">DownloadFile</a>, <a class=\"xref\" href=\"system.net.webrequestmethods.ftp#System_Net_WebRequestMethods_Ftp_ListDirectory\" data-linktype=\"relative-path\">ListDirectory</a>, and <a class=\"xref\" href=\"system.net.webrequestmethods.ftp#System_Net_WebRequestMethods_Ftp_ListDirectoryDetails\" data-linktype=\"relative-path\">ListDirectoryDetails</a> commands are supported.  </p>\n<p> Only downloaded binary content is cached; that is, content received using the <a class=\"xref\" href=\"system.net.webrequestmethods.ftp#System_Net_WebRequestMethods_Ftp_DownloadFile\" data-linktype=\"relative-path\">DownloadFile</a> command with the <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_UseBinary_\" data-linktype=\"relative-path\">UseBinary</a> property set to <code>true</code>.  </p>\n<p> Multiple FtpWebRequests reuse existing connections, if possible.  </p>\n<p> For more information about the FTP protocol, see RFC 959, &quot;File Transfer Protocol,&quot; available at <a href=\"http://www.ietf.org/rfc/rfc959.txt\" data-linktype=\"external\">http://www.rfc-editor.org/</a>.</p>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_FtpWebRequest_ClientCertificates\" data-linktype=\"self-bookmark\">ClientCertificates</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the certificates used for establishing an encrypted connection to the FTP server.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_FtpWebRequest_ConnectionGroupName\" data-linktype=\"self-bookmark\">ConnectionGroupName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the name of the connection group that contains the service point used to send the current request.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_FtpWebRequest_ContentLength\" data-linktype=\"self-bookmark\">ContentLength</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that is ignored by the <a class=\"xref\" href=\"system.net.ftpwebrequest\" data-linktype=\"relative-path\">FtpWebRequest</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_FtpWebRequest_ContentOffset\" data-linktype=\"self-bookmark\">ContentOffset</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a byte offset into the file being downloaded by this request.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_FtpWebRequest_ContentType\" data-linktype=\"self-bookmark\">ContentType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Always throws a <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_FtpWebRequest_Credentials\" data-linktype=\"self-bookmark\">Credentials</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the credentials used to communicate with the FTP server.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_FtpWebRequest_DefaultCachePolicy\" data-linktype=\"self-bookmark\">DefaultCachePolicy</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines the default cache policy for all FTP requests.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_FtpWebRequest_EnableSsl\" data-linktype=\"self-bookmark\">EnableSsl</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> that specifies that an SSL connection should be used.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_FtpWebRequest_Headers\" data-linktype=\"self-bookmark\">Headers</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an empty <a class=\"xref\" href=\"system.net.webheadercollection\" data-linktype=\"relative-path\">WebHeaderCollection</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_FtpWebRequest_KeepAlive\" data-linktype=\"self-bookmark\">KeepAlive</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that specifies whether the control connection to the FTP server is closed after the request completes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_FtpWebRequest_Method\" data-linktype=\"self-bookmark\">Method</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the command to send to the FTP server.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_FtpWebRequest_PreAuthenticate\" data-linktype=\"self-bookmark\">PreAuthenticate</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Always throws a <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_FtpWebRequest_Proxy\" data-linktype=\"self-bookmark\">Proxy</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the proxy used to communicate with the FTP server.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_FtpWebRequest_ReadWriteTimeout\" data-linktype=\"self-bookmark\">ReadWriteTimeout</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a time-out when reading from or writing to a stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_FtpWebRequest_RenameTo\" data-linktype=\"self-bookmark\">RenameTo</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the new name of a file being renamed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_FtpWebRequest_RequestUri\" data-linktype=\"self-bookmark\">RequestUri</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the URI requested by this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_FtpWebRequest_ServicePoint\" data-linktype=\"self-bookmark\">ServicePoint</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a> object used to connect to the FTP server.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_FtpWebRequest_Timeout\" data-linktype=\"self-bookmark\">Timeout</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the number of milliseconds to wait for a request.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_FtpWebRequest_UseBinary\" data-linktype=\"self-bookmark\">UseBinary</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that specifies the data type for file transfers.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_FtpWebRequest_UseDefaultCredentials\" data-linktype=\"self-bookmark\">UseDefaultCredentials</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Always throws a <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_FtpWebRequest_UsePassive\" data-linktype=\"self-bookmark\">UsePassive</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the behavior of a client application&#39;s data transfer process.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_FtpWebRequest_Abort\" data-linktype=\"self-bookmark\">Abort()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Terminates an asynchronous FTP operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_FtpWebRequest_BeginGetRequestStream_System_AsyncCallback_System_Object_\" data-linktype=\"self-bookmark\">BeginGetRequestStream(AsyncCallback,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Begins asynchronously opening a request&#39;s content stream for writing.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_FtpWebRequest_BeginGetResponse_System_AsyncCallback_System_Object_\" data-linktype=\"self-bookmark\">BeginGetResponse(AsyncCallback,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Begins sending a request and receiving a response from an FTP server asynchronously.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_FtpWebRequest_EndGetRequestStream_System_IAsyncResult_\" data-linktype=\"self-bookmark\">EndGetRequestStream(IAsyncResult)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Ends a pending asynchronous operation started with <span class=\"xref\">stem.Net.FtpWebRequest.BeginGetRequestStream*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_FtpWebRequest_EndGetResponse_System_IAsyncResult_\" data-linktype=\"self-bookmark\">EndGetResponse(IAsyncResult)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Ends a pending asynchronous operation started with <span class=\"xref\">stem.Net.FtpWebRequest.BeginGetResponse*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_FtpWebRequest_GetRequestStream\" data-linktype=\"self-bookmark\">GetRequestStream()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the stream used to upload data to an FTP server.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_FtpWebRequest_GetResponse\" data-linktype=\"self-bookmark\">GetResponse()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the FTP server response.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_FtpWebRequest_ClientCertificates\">\r\n    \r\n            <a id=\"System_Net_FtpWebRequest_ClientCertificates_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ClientCertificates</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the certificates used for establishing an encrypted connection to the FTP server.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Security.Cryptography.X509Certificates.X509CertificateCollection ClientCertificates { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificatecollection\" data-linktype=\"relative-path\">X509CertificateCollection</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificatecollection\" data-linktype=\"relative-path\">X509CertificateCollection</a> object that contains the client certificates.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The value specified for a set operation is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Client certificates are used to authenticate the client during the initial SSL connection negotiation. For more information, see <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_EnableSsl_\" data-linktype=\"relative-path\">EnableSsl</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The .NET Framework caches SSL sessions as they are created and attempts to reuse a cached session for a new request, if possible. When attempting to reuse an SSL session, the .NET Framework uses the first element of <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_ClientCertificates_\" data-linktype=\"relative-path\">ClientCertificates</a> (if there is one), or tries to reuse an anonymous session if <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_ClientCertificates_\" data-linktype=\"relative-path\">ClientCertificates</a> is empty.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_FtpWebRequest_ConnectionGroupName\">\r\n    \r\n            <a id=\"System_Net_FtpWebRequest_ConnectionGroupName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ConnectionGroupName</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the name of the connection group that contains the service point used to send the current request.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ConnectionGroupName { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> value that contains a connection group name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>A new value was specified for this property for a request that is already in progress.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Connection groups associate a set of requests with a particular connection or set of connections. The connections in a connection group can be reused only by requests originating in the same application domain, when the credentials on the request are the same and the request specifies the connection group name. When a request does not specify a connection group name, any existing connection to the requested server that is not associated with a connection group can be used. When the credentials are not the same, the existing connection is closed and the new request must be reauthenticated.  </p>\n<p> Using connection groups can improve performance because this allows all of the requests for a user to reuse the connection authenticated with the user&#39;s credentials.  </p>\n<p> Changing the ConnectionGroupName property after calling the <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_GetRequestStream_\" data-linktype=\"relative-path\">GetRequestStream</a>, <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_BeginGetRequestStream_\" data-linktype=\"relative-path\">BeginGetRequestStream</a>, <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_GetResponse_\" data-linktype=\"relative-path\">GetResponse</a>, or <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_BeginGetResponse_\" data-linktype=\"relative-path\">BeginGetResponse</a> method causes an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> exception.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example retrieves the value of this property.  </p>\n<pre><code class=\"lang-cpp\" name=\"NCLFtpClient#16\">      IWebProxy^ proxy = request-&gt;Proxy;\n      if ( proxy )\n      {\n         Console::WriteLine( &quot;Proxy: {0}&quot;, proxy-&gt;GetProxy( request-&gt;RequestUri ) );\n      }\n      else\n      {\n         Console::WriteLine( &quot;Proxy: (none)&quot; );\n      }\n\n      Console::WriteLine( &quot;ConnectionGroup: {0}&quot;, request-&gt;ConnectionGroupName == nullptr ? &quot;none&quot; : request-&gt;ConnectionGroupName );\n</code></pre><pre><code class=\"lang-cs\" name=\"NCLFtpClient#16\">            IWebProxy proxy = request.Proxy;\n            if (proxy != null)\n            {\n                Console.WriteLine(&quot;Proxy: {0}&quot;, proxy.GetProxy(request.RequestUri));\n            } \n            else\n            {\n                Console.WriteLine(&quot;Proxy: (none)&quot;);\n            }\n            \n            Console.WriteLine(&quot;ConnectionGroup: {0}&quot;,\n                request.ConnectionGroupName == null ? &quot;none&quot; : request.ConnectionGroupName\n            );\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_FtpWebRequest_ContentLength\">\r\n    \r\n            <a id=\"System_Net_FtpWebRequest_ContentLength_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContentLength</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that is ignored by the <a class=\"xref\" href=\"system.net.ftpwebrequest\" data-linktype=\"relative-path\">FtpWebRequest</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override long ContentLength { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> value that should be ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ContentLength property is provided only for compatibility with other implementations of the <a class=\"xref\" href=\"system.net.webrequest\" data-linktype=\"relative-path\">WebRequest</a> and <a class=\"xref\" href=\"system.net.webresponse\" data-linktype=\"relative-path\">WebResponse</a> classes. There is no reason to use ContentLength.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_FtpWebRequest_ContentOffset\">\r\n    \r\n            <a id=\"System_Net_FtpWebRequest_ContentOffset_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContentOffset</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a byte offset into the file being downloaded by this request.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public long ContentOffset { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> instance that specifies the file offset, in bytes. The default value is zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>A new value was specified for this property for a request that is already in progress.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The value specified for this property is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Set the ContentOffset property when downloading a file from an FTP server. This offset indicates the position in the server&#39;s file that marks the start of the data to be downloaded. The offset is specified as the number of bytes from the start of the file; the offset of the first byte is zero.  </p>\n<p> Setting ContentOffset causes the <a class=\"xref\" href=\"system.net.ftpwebrequest\" data-linktype=\"relative-path\">FtpWebRequest</a> to send a restart (<code>REST</code>) command to the server. This command is ignored by most FTP server implementations if you are uploading data to the server.  </p>\n<p> Changing ContentOffset after calling the <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_GetRequestStream_\" data-linktype=\"relative-path\">GetRequestStream</a>, <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_BeginGetRequestStream_\" data-linktype=\"relative-path\">BeginGetRequestStream</a>, <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_GetResponse_\" data-linktype=\"relative-path\">GetResponse</a>, or <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_BeginGetResponse_\" data-linktype=\"relative-path\">BeginGetResponse</a> method causes an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> exception.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates downloading part of a file from a server and appending the downloaded data to a local file.  </p>\n<pre><code class=\"lang-cpp\" name=\"NclFtpClient#7\">public:\n   // NOT Working - throws a protocolError - 350 Restarting at 8. for args shown in Main.\n   static bool RestartDownloadFromServer( String^ fileName, Uri^ serverUri, long offset )\n   {\n      // The serverUri parameter should use the ftp:// scheme.\n      // It identifies the server file that is to be appended.\n      // Example: ftp://contoso.com/someFile.txt.\n      // \n      // The fileName parameter identifies the local file\n      //\n      // The offset parameter specifies where in the server file to start reading data.\n      if ( serverUri-&gt;Scheme != Uri::UriSchemeFtp )\n      {\n         return false;\n      }\n\n      // Get the object used to communicate with the server.\n      FtpWebRequest^ request = dynamic_cast&lt;FtpWebRequest^&gt;(WebRequest::Create( serverUri ));\n      request-&gt;Method = WebRequestMethods::Ftp::DownloadFile;\n      request-&gt;ContentOffset = offset;\n      FtpWebResponse^ response = nullptr;\n      try\n      {\n         response = dynamic_cast&lt;FtpWebResponse^&gt;(request-&gt;GetResponse());\n      }\n      catch ( WebException^ e ) \n      {\n         Console::WriteLine( e-&gt;Status );\n         Console::WriteLine( e-&gt;Message );\n         return false;\n      }\n\n      Stream^ newFile = response-&gt;GetResponseStream();\n      StreamReader^ reader = gcnew StreamReader( newFile );\n\n      // Display downloaded data.\n      String^ newFileData = reader-&gt;ReadToEnd();\n\n      // Append the response data to the local file\n      // using a StreamWriter.\n      StreamWriter^ writer = File::AppendText(fileName);\n      writer-&gt;Write(newFileData);\n\n     // Display the status description.\n\n     // Cleanup.\n     writer-&gt;Close();\n     reader-&gt;Close();\n     response-&gt;Close();\n     // string fileString = System.Text.Encoding.UTF8.GetString(newFileData);\n     // Console::WriteLine( sr );\n     Console::WriteLine(&quot;Download restart - status: {0}&quot;,response-&gt;StatusDescription);\n     return true;\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"NclFtpClient#7\">        public static bool RestartDownloadFromServer(string fileName, Uri serverUri, long offset)\n        {\n            // The serverUri parameter should use the ftp:// scheme.\n            // It identifies the server file that is to be downloaded\n            // Example: ftp://contoso.com/someFile.txt.\n\n            // The fileName parameter identifies the local file.\n            //The serverUri parameter identifies the remote file.\n            // The offset parameter specifies where in the server file to start reading data.\n            \n            if (serverUri.Scheme != Uri.UriSchemeFtp)\n            {\n                return false;\n            }\n            // Get the object used to communicate with the server.\n            FtpWebRequest request = (FtpWebRequest)WebRequest.Create(serverUri);\n            request.Method = WebRequestMethods.Ftp.DownloadFile;\n            request.ContentOffset = offset;\n            FtpWebResponse response = null;\n            try \n            {\n                response = (FtpWebResponse) request.GetResponse();\n            }\n            catch (WebException e)\n            {\n                Console.WriteLine (e.Status);\n                Console.WriteLine (e.Message);\n                return false;\n            }\n            // Get the data stream from the response.\n            Stream newFile = response.GetResponseStream();\n            // Use a StreamReader to simplify reading the response data.\n            StreamReader reader  = new StreamReader(newFile);\n            string newFileData = reader.ReadToEnd();\n            // Append the response data to the local file\n            // using a StreamWriter.\n            StreamWriter writer = File.AppendText(fileName);\n            writer.Write(newFileData);\n            // Display the status description.\n\n            // Cleanup.\n            writer.Close();\n            reader.Close();\n            response.Close();\n            Console.WriteLine(&quot;Download restart - status: {0}&quot;,response.StatusDescription);\n            return true;\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_FtpWebRequest_ContentType\">\r\n    \r\n            <a id=\"System_Net_FtpWebRequest_ContentType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContentType</div>        \r\n          </div>\r\n    \r\n            <p>Always throws a <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ContentType { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Always throws a <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>Content type information is not supported for FTP.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ContentType property is provided only for compatibility with other implementations of the <a class=\"xref\" href=\"system.net.webrequest\" data-linktype=\"relative-path\">WebRequest</a> and <a class=\"xref\" href=\"system.net.webresponse\" data-linktype=\"relative-path\">WebResponse</a> classes. There is no reason to use ContentType.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_FtpWebRequest_Credentials\">\r\n    \r\n            <a id=\"System_Net_FtpWebRequest_Credentials_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Credentials</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the credentials used to communicate with the FTP server.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Net.ICredentials Credentials { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.icredentials\" data-linktype=\"relative-path\">ICredentials</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.net.icredentials\" data-linktype=\"relative-path\">ICredentials</a> instance; otherwise, <code>null</code> if the property has not been set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The value specified for a set operation is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.net.icredentials\" data-linktype=\"relative-path\">ICredentials</a> of a type other than <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> was specified for a set operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>A new value was specified for this property for a request that is already in progress.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You are not required to specify credentials when connecting using anonymous logon. You must set the Credentials property by using a credential of type <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a>; this ensures that the user name and password can be read and sent to the server.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Credentials information is not encrypted when transmitted to the server unless the <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_EnableSsl_\" data-linktype=\"relative-path\">EnableSsl</a> property is set to <code>true</code>.  </p>\n</div>\n<p> Changing Credentials after calling the <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_GetRequestStream_\" data-linktype=\"relative-path\">GetRequestStream</a>, <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_BeginGetRequestStream_\" data-linktype=\"relative-path\">BeginGetRequestStream</a>, <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_GetResponse_\" data-linktype=\"relative-path\">GetResponse</a>, or <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_BeginGetResponse_\" data-linktype=\"relative-path\">BeginGetResponse</a> method causes an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> exception.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example retrieves the value of this property and uses it to display the user name.  </p>\n<pre><code class=\"lang-cpp\" name=\"NCLFtpClient#14\">      Console::WriteLine( &quot;User {0} {1}&quot;, request-&gt;Credentials-&gt;GetCredential( request-&gt;RequestUri, &quot;basic&quot; )-&gt;UserName, request-&gt;RequestUri );\n</code></pre><pre><code class=\"lang-cs\" name=\"NCLFtpClient#14\">            Console.WriteLine(&quot;User {0} {1}&quot;, \n                request.Credentials.GetCredential(request.RequestUri,&quot;basic&quot;).UserName,\n                request.RequestUri\n            );\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_FtpWebRequest_DefaultCachePolicy\">\r\n    \r\n            <a id=\"System_Net_FtpWebRequest_DefaultCachePolicy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefaultCachePolicy</div>        \r\n          </div>\r\n    \r\n            <p>Defines the default cache policy for all FTP requests.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Net.Cache.RequestCachePolicy DefaultCachePolicy { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.cache.requestcachepolicy\" data-linktype=\"relative-path\">RequestCachePolicy</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.net.cache.requestcachepolicy\" data-linktype=\"relative-path\">RequestCachePolicy</a> that defines the cache policy for FTP requests.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The caller tried to set this property to <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Only content received using the <a class=\"xref\" href=\"system.net.webrequestmethods.ftp#System_Net_WebRequestMethods_Ftp_DownloadFile\" data-linktype=\"relative-path\">DownloadFile</a> command is cached.  </p>\n<p> The following table describes the effects of FTP caching policies on <a class=\"xref\" href=\"system.net.ftpwebrequest\" data-linktype=\"relative-path\">FtpWebRequest</a>.  </p>\n<table>\n<thead>\n<tr>\n<th>Policy</th>\n<th>Effect</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.net.cache.requestcachelevel\" data-linktype=\"relative-path\">RequestCacheLevel</a></td>\n<td>Returns the cached resource if the resource is fresh, the content length is accurate, and the expiration, modification, and content length attributes are present.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.net.cache.requestcachelevel\" data-linktype=\"relative-path\">RequestCacheLevel</a></td>\n<td>Returns the resource from the server.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.net.cache.requestcachelevel\" data-linktype=\"relative-path\">RequestCacheLevel</a></td>\n<td>Returns the cached resource if the content length is present and matches the entry size; otherwise, throws a <a class=\"xref\" href=\"system.net.webexception\" data-linktype=\"relative-path\">WebException</a>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.net.cache.requestcachelevel\" data-linktype=\"relative-path\">RequestCacheLevel</a></td>\n<td>Returns the cached resource if the content length is provided and matches the entry size; otherwise, the resource is downloaded from the server and is returned to the caller.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.net.cache.requestcachelevel\" data-linktype=\"relative-path\">RequestCacheLevel</a></td>\n<td>Returns the cached resource if the timestamp of the cached resource is the same as the time stamp of the resource on the server; otherwise, the resource is downloaded from the server, stored in the cache, and returned to the caller.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.net.cache.requestcachelevel\" data-linktype=\"relative-path\">RequestCacheLevel</a></td>\n<td>Downloads the resource from the server, stores it in the cache, and returns the resource to the caller.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.net.cache.requestcachelevel\" data-linktype=\"relative-path\">RequestCacheLevel</a></td>\n<td>If a cached resource exists, it is deleted. The resource is downloaded from the server and is returned to the caller.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"NOTE\"><h5>Note</h5><p> Setting DefaultCachePolicy overrides any configuration setting.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_FtpWebRequest_EnableSsl\">\r\n    \r\n            <a id=\"System_Net_FtpWebRequest_EnableSsl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EnableSsl</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> that specifies that an SSL connection should be used.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool EnableSsl { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if control and data transmissions are encrypted; otherwise, <code>false</code>. The default value is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The connection to the FTP server has already been established.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"CAUTION\"><h5>Caution</h5><p> Unless the EnableSsl property is <code>true</code>, all data and commands, including your user name and password information, are sent to the server in clear text. Anyone monitoring network traffic can view your credentials and use them to connect to the server. If you are connecting to an FTP server that requires credentials and supports SSL, you should set EnableSsl to <code>true</code>.  </p>\n</div>\n<p> The <code>&quot;AUTH TLS&quot;</code> command is sent to the server to request an encrypted session. If the server does not recognize this command, you receive a <a class=\"xref\" href=\"system.net.webexception\" data-linktype=\"relative-path\">WebException</a> exception.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses an encrypted connection to download the directory listing from an FTP server.  </p>\n<pre><code class=\"lang-cpp\" name=\"NCLFtpClient#8\">   static bool ListFilesOnServerSsl( Uri^ serverUri )\n   {\n      // The serverUri should start with the ftp:// scheme.\n      if ( serverUri-&gt;Scheme != Uri::UriSchemeFtp )\n      {\n         return false;\n      }\n\n      // Get the object used to communicate with the server.\n      FtpWebRequest^ request = dynamic_cast&lt;FtpWebRequest^&gt;(WebRequest::Create( serverUri ));\n      request-&gt;Method = WebRequestMethods::Ftp::ListDirectory;\n      request-&gt;EnableSsl = true;\n\n      // Get the ServicePoint object used for this request, and limit it to one connection.\n      // In a real-world application you might use the default number of connections (2),\n      // or select a value that works best for your application.\n      ServicePoint^ sp = request-&gt;ServicePoint;\n      Console::WriteLine( &quot;ServicePoint connections = {0}.&quot;, sp-&gt;ConnectionLimit );\n      sp-&gt;ConnectionLimit = 1;\n      FtpWebResponse^ response = dynamic_cast&lt;FtpWebResponse^&gt;(request-&gt;GetResponse());\n      Console::WriteLine( &quot;The content length is {0}&quot;, response-&gt;ContentLength );\n\n      // The following streams are used to read the data returned from the server.\n      Stream^ responseStream = nullptr;\n      StreamReader^ readStream = nullptr;\n      responseStream = response-&gt;GetResponseStream();\n      readStream = gcnew StreamReader( responseStream,System::Text::Encoding::UTF8 );\n\n      // Display the data received from the server.\n      Console::WriteLine( readStream-&gt;ReadToEnd() );\n      Console::WriteLine( &quot;List status: {0}&quot;, response-&gt;StatusDescription );\n      readStream-&gt;Close();\n      response-&gt;Close();\n\n      Console::WriteLine( &quot;Banner message: {0}&quot;, response-&gt;BannerMessage );\n\n      Console::WriteLine( &quot;Welcome message: {0}&quot;, response-&gt;WelcomeMessage );\n\n      Console::WriteLine( &quot;Exit message: {0}&quot;, response-&gt;ExitMessage );\n\n      return true;\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"NCLFtpClient#8\">        public static bool ListFilesOnServerSsl(Uri serverUri)\n        {\n            // The serverUri should start with the ftp:// scheme.\n            if (serverUri.Scheme != Uri.UriSchemeFtp)\n            {\n                return false;\n            }\n            // Get the object used to communicate with the server.\n            FtpWebRequest request = (FtpWebRequest)WebRequest.Create(serverUri);\n            request.Method = WebRequestMethods.Ftp.ListDirectory;\n            request.EnableSsl = true;\n            \n            // Get the ServicePoint object used for this request, and limit it to one connection.\n            // In a real-world application you might use the default number of connections (2),\n            // or select a value that works best for your application.\n            \n            ServicePoint sp = request.ServicePoint;\n            Console.WriteLine(&quot;ServicePoint connections = {0}.&quot;, sp.ConnectionLimit);\n            sp.ConnectionLimit = 1;\n            \n            FtpWebResponse response = (FtpWebResponse) request.GetResponse();\n             Console.WriteLine(&quot;The content length is {0}&quot;, response.ContentLength);\n            // The following streams are used to read the data returned from the server.\n            Stream responseStream = null;\n            StreamReader readStream = null;\n            try\n            {\n                responseStream = response.GetResponseStream(); \n                readStream = new StreamReader(responseStream, System.Text.Encoding.UTF8);\n \n                if (readStream != null)\n                {\n                    // Display the data received from the server.\n                    Console.WriteLine(readStream.ReadToEnd());\n                } \n                Console.WriteLine(&quot;List status: {0}&quot;,response.StatusDescription);            \n            }\n            finally\n            {\n                if (readStream != null)\n                {\n                    readStream.Close();\n                }\n                if (response != null)\n                {\n                    response.Close();\n                }\n            }\n           \n\n            Console.WriteLine(&quot;Banner message: {0}&quot;, \n                response.BannerMessage);\n\n            Console.WriteLine(&quot;Welcome message: {0}&quot;, \n                response.WelcomeMessage);\n\n            Console.WriteLine(&quot;Exit message: {0}&quot;, \n                response.ExitMessage);\n            return true;\n        }\n \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_FtpWebRequest_Headers\">\r\n    \r\n            <a id=\"System_Net_FtpWebRequest_Headers_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Headers</div>        \r\n          </div>\r\n    \r\n            <p>Gets an empty <a class=\"xref\" href=\"system.net.webheadercollection\" data-linktype=\"relative-path\">WebHeaderCollection</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Net.WebHeaderCollection Headers { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.webheadercollection\" data-linktype=\"relative-path\">WebHeaderCollection</a></div>\r\n                  </div>\r\n                  <p>An empty <a class=\"xref\" href=\"system.net.webheadercollection\" data-linktype=\"relative-path\">WebHeaderCollection</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Headers property is provided only for compatibility with other implementations of the <a class=\"xref\" href=\"system.net.webrequest\" data-linktype=\"relative-path\">WebRequest</a> and <a class=\"xref\" href=\"system.net.webresponse\" data-linktype=\"relative-path\">WebResponse</a> classes. There is no reason to use Headers.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_FtpWebRequest_KeepAlive\">\r\n    \r\n            <a id=\"System_Net_FtpWebRequest_KeepAlive_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">KeepAlive</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that specifies whether the control connection to the FTP server is closed after the request completes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool KeepAlive { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the connection to the server should not be destroyed; otherwise, <code>false</code>. The default value is <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>A new value was specified for this property for a request that is already in progress.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When the KeepAlive property is set to <code>false</code>, the control connection is closed when you call the <a class=\"xref\" href=\"system.net.ftpwebresponse#System_Net_FtpWebResponse_Close_\" data-linktype=\"relative-path\">Close</a> method.  </p>\n<p> Changing KeepAlive after calling the <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_GetRequestStream_\" data-linktype=\"relative-path\">GetRequestStream</a>, <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_BeginGetRequestStream_\" data-linktype=\"relative-path\">BeginGetRequestStream</a>, <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_GetResponse_\" data-linktype=\"relative-path\">GetResponse</a>, or <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_BeginGetResponse_\" data-linktype=\"relative-path\">BeginGetResponse</a> method causes an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> exception.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example retrieves and displays property values for a specified <a class=\"xref\" href=\"system.net.ftpwebrequest\" data-linktype=\"relative-path\">FtpWebRequest</a> object.  </p>\n<pre><code class=\"lang-cpp\" name=\"NCLFtpClient#15\">      Console::WriteLine( &quot;Passive: {0}  Keep alive: {1}  Binary: {2} Timeout: {3}.&quot;, request-&gt;UsePassive, request-&gt;KeepAlive, request-&gt;UseBinary, request-&gt;Timeout == -1 ? &quot;none&quot; : request-&gt;Timeout.ToString() );\n</code></pre><pre><code class=\"lang-cs\" name=\"NCLFtpClient#15\">            Console.WriteLine(&quot;Passive: {0}  Keep alive: {1}  Binary: {2} Timeout: {3}.&quot;, \n                request.UsePassive, \n                request.KeepAlive, \n                request.UseBinary,\n                request.Timeout == -1 ? &quot;none&quot; : request.Timeout.ToString()\n            );\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_FtpWebRequest_Method\">\r\n    \r\n            <a id=\"System_Net_FtpWebRequest_Method_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Method</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the command to send to the FTP server.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string Method { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> value that contains the FTP command to send to the server. The default value is <a class=\"xref\" href=\"system.net.webrequestmethods.ftp#System_Net_WebRequestMethods_Ftp_DownloadFile\" data-linktype=\"relative-path\">DownloadFile</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>A new value was specified for this property for a request that is already in progress.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The method is invalid.  </p>\n<p> - or -  </p>\n<p> The method is not supported.  </p>\n<p> - or -  </p>\n<p> Multiple methods were specified.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Method property determines which command is sent to the server. You set the Method by using the strings defined in the public field members of the <a class=\"xref\" href=\"system.net.webrequestmethods.ftp\" data-linktype=\"relative-path\">WebRequestMethods+Ftp</a> class. Note that the strings defined in the <a class=\"xref\" href=\"system.net.webrequestmethods.ftp\" data-linktype=\"relative-path\">WebRequestMethods+Ftp</a> class are the only supported options for the Method property. Setting the Method property to any other value will result in an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a> exception.  </p>\n<p> When setting Method to <a class=\"xref\" href=\"system.net.webrequestmethods.ftp#System_Net_WebRequestMethods_Ftp_UploadFile\" data-linktype=\"relative-path\">UploadFile</a>, you must do so before calling the <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_GetRequestStream_\" data-linktype=\"relative-path\">GetRequestStream</a> method. Failure to call these members in the correct order causes a <a class=\"xref\" href=\"system.net.protocolviolationexception\" data-linktype=\"relative-path\">ProtocolViolationException</a> exception when you attempt to get the request stream.  </p>\n<p> The credentials supplied for the <a class=\"xref\" href=\"system.net.ftpwebrequest\" data-linktype=\"relative-path\">FtpWebRequest</a> object must have permission to perform the specified method. If not, the FTP command fails.  </p>\n<p> To determine the success or failure of a command, check the <a class=\"xref\" href=\"system.net.ftpwebresponse#System_Net_FtpWebResponse_StatusCode_\" data-linktype=\"relative-path\">StatusCode</a> and <a class=\"xref\" href=\"system.net.ftpwebresponse#System_Net_FtpWebResponse_StatusDescription_\" data-linktype=\"relative-path\">StatusDescription</a> properties.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example sets this property to <a class=\"xref\" href=\"system.net.webrequestmethods.ftp#System_Net_WebRequestMethods_Ftp_DeleteFile\" data-linktype=\"relative-path\">DeleteFile</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"NCLFtpClient#4\">   static bool DeleteFileOnServer( Uri^ serverUri )\n   {\n      // The serverUri parameter should use the ftp:// scheme.\n      // It contains the name of the server file that is to be deleted.\n      // Example: ftp://contoso.com/someFile.txt.\n      // \n      if ( serverUri-&gt;Scheme != Uri::UriSchemeFtp )\n      {\n         return false;\n      }\n\n      // Get the object used to communicate with the server.\n      FtpWebRequest^ request = dynamic_cast&lt;FtpWebRequest^&gt;(WebRequest::Create( serverUri ));\n      request-&gt;Method = WebRequestMethods::Ftp::DeleteFile;\n      FtpWebResponse^ response = dynamic_cast&lt;FtpWebResponse^&gt;(request-&gt;GetResponse());\n      Console::WriteLine( &quot;Delete status: {0}&quot;, response-&gt;StatusDescription );\n      response-&gt;Close();\n      return true;\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"NCLFtpClient#4\">        public static bool DeleteFileOnServer(Uri serverUri)\n        {\n            // The serverUri parameter should use the ftp:// scheme.\n            // It contains the name of the server file that is to be deleted.\n            // Example: ftp://contoso.com/someFile.txt.\n            // \n            \n            if (serverUri.Scheme != Uri.UriSchemeFtp)\n            {\n                return false;\n            }\n            // Get the object used to communicate with the server.\n            FtpWebRequest request = (FtpWebRequest)WebRequest.Create(serverUri);\n            request.Method = WebRequestMethods.Ftp.DeleteFile;\n         \n            FtpWebResponse response = (FtpWebResponse) request.GetResponse();\n            Console.WriteLine(&quot;Delete status: {0}&quot;,response.StatusDescription);  \n            response.Close();\n            return true;\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_FtpWebRequest_PreAuthenticate\">\r\n    \r\n            <a id=\"System_Net_FtpWebRequest_PreAuthenticate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreAuthenticate</div>        \r\n          </div>\r\n    \r\n            <p>Always throws a <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool PreAuthenticate { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>Always throws a <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>Preauthentication is not supported for FTP.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The PreAuthenticate property is provided only for compatibility with other implementations of the <a class=\"xref\" href=\"system.net.webrequest\" data-linktype=\"relative-path\">WebRequest</a> and <a class=\"xref\" href=\"system.net.webresponse\" data-linktype=\"relative-path\">WebResponse</a> classes.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_FtpWebRequest_Proxy\">\r\n    \r\n            <a id=\"System_Net_FtpWebRequest_Proxy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Proxy</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the proxy used to communicate with the FTP server.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Net.IWebProxy Proxy { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.iwebproxy\" data-linktype=\"relative-path\">IWebProxy</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.net.iwebproxy\" data-linktype=\"relative-path\">IWebProxy</a> instance responsible for communicating with the FTP server.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>This property cannot be set to <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>A new value was specified for this property for a request that is already in progress.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Proxy property identifies the <a class=\"xref\" href=\"system.net.iwebproxy\" data-linktype=\"relative-path\">IWebProxy</a> instance that communicates with the FTP server. The proxy is set by the system by using configuration files and the Internet Explorer Local Area Network settings. To specify that no proxy should be used, set Proxy to the proxy instance returned by the <a class=\"xref\" href=\"system.net.globalproxyselection#System_Net_GlobalProxySelection_GetEmptyWebProxy_\" data-linktype=\"relative-path\">GetEmptyWebProxy</a> method. For more information about automatic proxy detection, see <a href=\"../Topic/Automatic%20Proxy%20Detection.md\" data-linktype=\"relative-path\">Automatic Proxy Detection</a>.  </p>\n<p> You must set Proxy before writing data to the request&#39;s stream or getting the response. Changing Proxy after calling the <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_GetRequestStream_\" data-linktype=\"relative-path\">GetRequestStream</a>, <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_BeginGetRequestStream_\" data-linktype=\"relative-path\">BeginGetRequestStream</a>, <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_GetResponse_\" data-linktype=\"relative-path\">GetResponse</a>, or <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_BeginGetResponse_\" data-linktype=\"relative-path\">BeginGetResponse</a> method causes an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> exception.  </p>\n<p> The <a class=\"xref\" href=\"system.net.ftpwebrequest\" data-linktype=\"relative-path\">FtpWebRequest</a> class supports HTTP and ISA Firewall Client proxies.  </p>\n<p> If the specified proxy is an HTTP proxy, only the <a class=\"xref\" href=\"system.net.webrequestmethods.ftp#System_Net_WebRequestMethods_Ftp_DownloadFile\" data-linktype=\"relative-path\">DownloadFile</a>, <a class=\"xref\" href=\"system.net.webrequestmethods.ftp#System_Net_WebRequestMethods_Ftp_ListDirectory\" data-linktype=\"relative-path\">ListDirectory</a>, and <a class=\"xref\" href=\"system.net.webrequestmethods.ftp#System_Net_WebRequestMethods_Ftp_ListDirectoryDetails\" data-linktype=\"relative-path\">ListDirectoryDetails</a> commands are supported.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays this property value.  </p>\n<pre><code class=\"lang-cpp\" name=\"NCLFtpClient#16\">      IWebProxy^ proxy = request-&gt;Proxy;\n      if ( proxy )\n      {\n         Console::WriteLine( &quot;Proxy: {0}&quot;, proxy-&gt;GetProxy( request-&gt;RequestUri ) );\n      }\n      else\n      {\n         Console::WriteLine( &quot;Proxy: (none)&quot; );\n      }\n\n      Console::WriteLine( &quot;ConnectionGroup: {0}&quot;, request-&gt;ConnectionGroupName == nullptr ? &quot;none&quot; : request-&gt;ConnectionGroupName );\n</code></pre><pre><code class=\"lang-cs\" name=\"NCLFtpClient#16\">            IWebProxy proxy = request.Proxy;\n            if (proxy != null)\n            {\n                Console.WriteLine(&quot;Proxy: {0}&quot;, proxy.GetProxy(request.RequestUri));\n            } \n            else\n            {\n                Console.WriteLine(&quot;Proxy: (none)&quot;);\n            }\n            \n            Console.WriteLine(&quot;ConnectionGroup: {0}&quot;,\n                request.ConnectionGroupName == null ? &quot;none&quot; : request.ConnectionGroupName\n            );\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_FtpWebRequest_ReadWriteTimeout\">\r\n    \r\n            <a id=\"System_Net_FtpWebRequest_ReadWriteTimeout_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadWriteTimeout</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a time-out when reading from or writing to a stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int ReadWriteTimeout { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of milliseconds before the reading or writing times out. The default value is 300,000 milliseconds (5 minutes).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The request has already been sent.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The value specified for a set operation is less than or equal to zero and is not equal to <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ReadWriteTimeout is used when writing to the stream returned by the <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_GetRequestStream_\" data-linktype=\"relative-path\">GetRequestStream</a> method or reading from the stream returned by the <a class=\"xref\" href=\"system.net.ftpwebresponse#System_Net_FtpWebResponse_GetResponseStream_\" data-linktype=\"relative-path\">GetResponseStream</a> method.  </p>\n<p> Specifically, the ReadWriteTimeout property controls the time-out for the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Read_\" data-linktype=\"relative-path\">Read</a> method, which is used to read the stream returned by the <a class=\"xref\" href=\"system.net.ftpwebresponse#System_Net_FtpWebResponse_GetResponseStream_\" data-linktype=\"relative-path\">GetResponseStream</a> method, and for the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Write_\" data-linktype=\"relative-path\">Write</a> method, which is used to write to the stream returned by the <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_GetRequestStream_\" data-linktype=\"relative-path\">GetRequestStream</a> method. If the time-out period is exceeded, the calling method throws a <a class=\"xref\" href=\"system.net.webexception\" data-linktype=\"relative-path\">WebException</a> with <a class=\"xref\" href=\"system.net.webexceptionstatus\" data-linktype=\"relative-path\">WebExceptionStatus</a> set to <a class=\"xref\" href=\"system.net.webexceptionstatus\" data-linktype=\"relative-path\">WebExceptionStatus</a>.  </p>\n<p> To specify the amount of time to wait for the request to complete, use the <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_Timeout_\" data-linktype=\"relative-path\">Timeout</a> property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_FtpWebRequest_RenameTo\">\r\n    \r\n            <a id=\"System_Net_FtpWebRequest_RenameTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RenameTo</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the new name of a file being renamed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string RenameTo { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The new name of the file being renamed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The value specified for a set operation is <code>null</code> or an empty string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>A new value was specified for this property for a request that is already in progress.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_FtpWebRequest_RequestUri\">\r\n    \r\n            <a id=\"System_Net_FtpWebRequest_RequestUri_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RequestUri</div>        \r\n          </div>\r\n    \r\n            <p>Gets the URI requested by this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Uri RequestUri { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uri\" data-linktype=\"relative-path\">Uri</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.uri\" data-linktype=\"relative-path\">Uri</a> instance that identifies a resource that is accessed using the File Transfer Protocol.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of the RequestUri property is the URI specified when the <a class=\"xref\" href=\"system.net.webrequest#System_Net_WebRequest_Create_\" data-linktype=\"relative-path\">Create</a> method was called to obtain this instance.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays this property value.  </p>\n<pre><code class=\"lang-cpp\" name=\"NCLFtpClient#14\">      Console::WriteLine( &quot;User {0} {1}&quot;, request-&gt;Credentials-&gt;GetCredential( request-&gt;RequestUri, &quot;basic&quot; )-&gt;UserName, request-&gt;RequestUri );\n</code></pre><pre><code class=\"lang-cs\" name=\"NCLFtpClient#14\">            Console.WriteLine(&quot;User {0} {1}&quot;, \n                request.Credentials.GetCredential(request.RequestUri,&quot;basic&quot;).UserName,\n                request.RequestUri\n            );\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_FtpWebRequest_ServicePoint\">\r\n    \r\n            <a id=\"System_Net_FtpWebRequest_ServicePoint_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ServicePoint</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a> object used to connect to the FTP server.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Net.ServicePoint ServicePoint { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a> object that can be used to customize connection behavior.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If no <a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a> object exists, one is created for the FTP server. To set the maximum number of connections that can be open for an FTP server, set the <a class=\"xref\" href=\"system.net.servicepoint#System_Net_ServicePoint_ConnectionLimit_\" data-linktype=\"relative-path\">ConnectionLimit</a> property of the <a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a> instance returned by this property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example retrieves the service point from a request and sets the maximum number of connections to one.  </p>\n<pre><code class=\"lang-cpp\" name=\"NCLFtpClient#1\">   static bool ListFilesOnServer( Uri^ serverUri )\n   {\n      // The serverUri should start with the ftp:// scheme.\n      if ( serverUri-&gt;Scheme != Uri::UriSchemeFtp )\n      {\n         return false;\n      }\n\n      // Get the object used to communicate with the server.\n      FtpWebRequest^ request = dynamic_cast&lt;FtpWebRequest^&gt;(WebRequest::Create( serverUri ));\n      request-&gt;Method = WebRequestMethods::Ftp::ListDirectory;\n\n      // Get the ServicePoint object used for this request, and limit it to one connection.\n      // In a real-world application you might use the default number of connections (2),\n      // or select a value that works best for your application.\n      ServicePoint^ sp = request-&gt;ServicePoint;\n      Console::WriteLine( &quot;ServicePoint connections = {0}.&quot;, sp-&gt;ConnectionLimit );\n      sp-&gt;ConnectionLimit = 1;\n      FtpWebResponse^ response = dynamic_cast&lt;FtpWebResponse^&gt;(request-&gt;GetResponse());\n\n      // The following streams are used to read the data returned from the server.\n      Stream^ responseStream = nullptr;\n      StreamReader^ readStream = nullptr;\n      try\n      {\n         responseStream = response-&gt;GetResponseStream();\n         readStream = gcnew StreamReader( responseStream,System::Text::Encoding::UTF8 );\n         if ( readStream != nullptr )\n         {\n            // Display the data received from the server.\n            Console::WriteLine( readStream-&gt;ReadToEnd() );\n         }\n\n         Console::WriteLine( &quot;List status: {0}&quot;, response-&gt;StatusDescription );\n      }\n      finally\n      {\n         if ( readStream != nullptr )\n         {\n            readStream-&gt;Close();\n         }\n\n         if ( response != nullptr )\n         {\n            response-&gt;Close();\n         }\n      }\n\n      return true;\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"NCLFtpClient#1\">        public static bool ListFilesOnServer(Uri serverUri)\n        {\n            // The serverUri should start with the ftp:// scheme.\n            if (serverUri.Scheme != Uri.UriSchemeFtp)\n            {\n                return false;\n            }\n            // Get the object used to communicate with the server.\n            FtpWebRequest request = (FtpWebRequest)WebRequest.Create(serverUri);\n            request.Method = WebRequestMethods.Ftp.ListDirectory;\n            \n            // Get the ServicePoint object used for this request, and limit it to one connection.\n            // In a real-world application you might use the default number of connections (2),\n            // or select a value that works best for your application.\n            \n            ServicePoint sp = request.ServicePoint;\n            Console.WriteLine(&quot;ServicePoint connections = {0}.&quot;, sp.ConnectionLimit);\n            sp.ConnectionLimit = 1;\n            \n            FtpWebResponse response = (FtpWebResponse) request.GetResponse();\n             \n            // The following streams are used to read the data returned from the server.\n            Stream responseStream = null;\n            StreamReader readStream = null;\n            try\n            {\n                responseStream = response.GetResponseStream(); \n                readStream = new StreamReader(responseStream, System.Text.Encoding.UTF8);\n \n                if (readStream != null)\n                {\n                    // Display the data received from the server.\n                    Console.WriteLine(readStream.ReadToEnd());\n                } \n                Console.WriteLine(&quot;List status: {0}&quot;,response.StatusDescription);            \n            }\n            finally\n            {\n                if (readStream != null)\n                {\n                    readStream.Close();\n                }\n                if (response != null)\n                {\n                    response.Close();\n                }\n            }\n           \n            return true;\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_FtpWebRequest_Timeout\">\r\n    \r\n            <a id=\"System_Net_FtpWebRequest_Timeout_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Timeout</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the number of milliseconds to wait for a request.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int Timeout { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> value that contains the number of milliseconds to wait before a request times out. The default value is <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The value specified is less than zero and is not <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>A new value was specified for this property for a request that is already in progress.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To specify an infinite value, set the Timeout property to <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a> (-1). This is the default value.  </p>\n<p> Timeout is the number of milliseconds that a synchronous request made with the <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_GetResponse_\" data-linktype=\"relative-path\">GetResponse</a> method waits for a response and that the <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_GetRequestStream_\" data-linktype=\"relative-path\">GetRequestStream</a> method waits for a stream. If a resource does not respond within the time-out period, the request throws a <a class=\"xref\" href=\"system.net.webexception\" data-linktype=\"relative-path\">WebException</a> with the <a class=\"xref\" href=\"system.net.webexception#System_Net_WebException_Status_\" data-linktype=\"relative-path\">Status</a> property set to <a class=\"xref\" href=\"system.net.webexceptionstatus\" data-linktype=\"relative-path\">WebExceptionStatus</a>.  </p>\n<p> Changing Timeout after calling the <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_GetRequestStream_\" data-linktype=\"relative-path\">GetRequestStream</a>, <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_BeginGetRequestStream_\" data-linktype=\"relative-path\">BeginGetRequestStream</a>, <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_GetResponse_\" data-linktype=\"relative-path\">GetResponse</a>, or <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_BeginGetResponse_\" data-linktype=\"relative-path\">BeginGetResponse</a> method causes an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> exception.  </p>\n<p> A Domain Name System (DNS) query may take up to 15 seconds to return or time out. If your request contains a host name that requires resolution and you set Timeout to a value less than 15 seconds, it may take 15 seconds or more before a <a class=\"xref\" href=\"system.net.webexception\" data-linktype=\"relative-path\">WebException</a> is thrown to indicate a time-out on your request.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example sets this property.  </p>\n<pre><code class=\"lang-cpp\" name=\"NCLFtpClient#23\">   static bool UploadUniqueFileOnServer( Uri^ serverUri, String^ fileName )\n   {\n      // The URI described by serverUri should use the ftp:// scheme.\n      // It contains the name of the directory on the server.\n      // Example: ftp://contoso.com.\n      // \n      // The fileName parameter identifies the file containing the data to be uploaded.\n      if ( serverUri-&gt;Scheme != Uri::UriSchemeFtp )\n      {\n         return false;\n      }\n\n      // Get the object used to communicate with the server.\n      FtpWebRequest^ request = dynamic_cast&lt;FtpWebRequest^&gt;(WebRequest::Create( serverUri ));\n      request-&gt;Method = WebRequestMethods::Ftp::UploadFileWithUniqueName;\n\n      // Don&#39;t set a time limit for the operation to complete.\n      request-&gt;Timeout = System::Threading::Timeout::Infinite;\n\n      // Copy the file contents to the request stream.\n      const int bufferLength = 2048;\n      array&lt;Byte&gt;^buffer = gcnew array&lt;Byte&gt;(bufferLength);\n      int count = 0;\n      int readBytes = 0;\n      FileStream^ stream = File::OpenRead( fileName );\n      Stream^ requestStream = request-&gt;GetRequestStream();\n      do\n      {\n         readBytes = stream-&gt;Read( buffer, 0, bufferLength );\n         requestStream-&gt;Write( buffer, 0, bufferLength );\n         count += readBytes;\n      }\n      while ( readBytes != 0 );\n\n      Console::WriteLine( &quot;Writing {0} bytes to the stream.&quot;, count );\n      \n      // IMPORTANT: Close the request stream before sending the request.\n      requestStream-&gt;Close();\n      FtpWebResponse^ response = dynamic_cast&lt;FtpWebResponse^&gt;(request-&gt;GetResponse());\n      Console::WriteLine( &quot;Upload status: {0}, {1}&quot;, response-&gt;StatusCode, response-&gt;StatusDescription );\n      Console::WriteLine( &quot;File name: {0}&quot;, response-&gt;ResponseUri );\n      response-&gt;Close();\n      return true;\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"NCLFtpClient#23\">        public static bool UploadUniqueFileOnServer (Uri serverUri, string fileName)\n        {\n            // The URI described by serverUri should use the ftp:// scheme.\n            // It contains the name of the directory on the server.\n            // Example: ftp://contoso.com.\n            // \n            // The fileName parameter identifies the file containing the data to be uploaded.\n\n            if (serverUri.Scheme != Uri.UriSchemeFtp)\n            {\n                return false;\n            }\n            // Get the object used to communicate with the server.\n            FtpWebRequest request = (FtpWebRequest)WebRequest.Create(serverUri);\n            request.Method = WebRequestMethods.Ftp.UploadFileWithUniqueName;\n            // Set a time limit for the operation to complete.\n            request.Timeout = 600000;\n            \n            // Copy the file contents to the request stream.\n            const int bufferLength = 2048;\n            byte[] buffer = new byte[bufferLength];\n            int count = 0;\n            int readBytes = 0;\n            FileStream stream = File.OpenRead(fileName);\n            Stream requestStream = request.GetRequestStream();\n            do\n            {\n                readBytes = stream.Read(buffer, 0, bufferLength);\n                requestStream.Write(buffer, 0, bufferLength);\n                count += readBytes;\n            }\n            while (readBytes != 0);\n            \n            Console.WriteLine (&quot;Writing {0} bytes to the stream.&quot;, count);\n            // IMPORTANT: Close the request stream before sending the request.\n            requestStream.Close();\n            FtpWebResponse response = (FtpWebResponse) request.GetResponse();\n            Console.WriteLine(&quot;Upload status: {0}, {1}&quot;,response.StatusCode, response.StatusDescription);         \n            Console.WriteLine (&quot;File name: {0}&quot;, response.ResponseUri);\n            response.Close();\n            return true;\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_FtpWebRequest_UseBinary\">\r\n    \r\n            <a id=\"System_Net_FtpWebRequest_UseBinary_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UseBinary</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that specifies the data type for file transfers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool UseBinary { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to indicate to the server that the data to be transferred is binary; <code>false</code> to indicate that the data is text. The default value is <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>A new value was specified for this property for a request that is already in progress.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If you are sending binary data, such as an image, set this property to <code>true</code>. If you are sending text, set the property to <code>false</code>. Specifying <code>true</code> causes the <a class=\"xref\" href=\"system.net.ftpwebrequest\" data-linktype=\"relative-path\">FtpWebRequest</a> to send a <code>&quot;TYPE I&quot;</code> command to the server. Specifying <code>false</code> causes the <a class=\"xref\" href=\"system.net.ftpwebrequest\" data-linktype=\"relative-path\">FtpWebRequest</a> to send a <code>&quot;Type A&quot;</code> command to the server. FTP servers can ignore these commands.  </p>\n<p> Changing UseBinary after calling the <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_GetRequestStream_\" data-linktype=\"relative-path\">GetRequestStream</a>, <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_BeginGetRequestStream_\" data-linktype=\"relative-path\">BeginGetRequestStream</a>, <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_GetResponse_\" data-linktype=\"relative-path\">GetResponse</a>, or <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_BeginGetResponse_\" data-linktype=\"relative-path\">BeginGetResponse</a> method causes an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> exception.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example retrieves and displays property values for a specified <a class=\"xref\" href=\"system.net.ftpwebrequest\" data-linktype=\"relative-path\">FtpWebRequest</a> object.  </p>\n<pre><code class=\"lang-cpp\" name=\"NCLFtpClient#15\">      Console::WriteLine( &quot;Passive: {0}  Keep alive: {1}  Binary: {2} Timeout: {3}.&quot;, request-&gt;UsePassive, request-&gt;KeepAlive, request-&gt;UseBinary, request-&gt;Timeout == -1 ? &quot;none&quot; : request-&gt;Timeout.ToString() );\n</code></pre><pre><code class=\"lang-cs\" name=\"NCLFtpClient#15\">            Console.WriteLine(&quot;Passive: {0}  Keep alive: {1}  Binary: {2} Timeout: {3}.&quot;, \n                request.UsePassive, \n                request.KeepAlive, \n                request.UseBinary,\n                request.Timeout == -1 ? &quot;none&quot; : request.Timeout.ToString()\n            );\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_FtpWebRequest_UseDefaultCredentials\">\r\n    \r\n            <a id=\"System_Net_FtpWebRequest_UseDefaultCredentials_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UseDefaultCredentials</div>        \r\n          </div>\r\n    \r\n            <p>Always throws a <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool UseDefaultCredentials { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>Always throws a <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>Default credentials are not supported for FTP.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The UseDefaultCredentials property is provided only for compatibility with other implementations of the <a class=\"xref\" href=\"system.net.webrequest\" data-linktype=\"relative-path\">WebRequest</a> and <a class=\"xref\" href=\"system.net.webresponse\" data-linktype=\"relative-path\">WebResponse</a> classes. There is no reason to use UseDefaultCredentials.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_FtpWebRequest_UsePassive\">\r\n    \r\n            <a id=\"System_Net_FtpWebRequest_UsePassive_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UsePassive</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the behavior of a client application&#39;s data transfer process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool UsePassive { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>false</code> if the client application&#39;s data transfer process listens for a connection on the data port; otherwise, <code>true</code> if the client should initiate a connection on the data port. The default value is <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>A new value was specified for this property for a request that is already in progress.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Setting the UsePassive property to <code>true</code> sends the &quot;<code>PASV&quot;</code> command to the server. This command requests the server to listen on a data port and to wait for a connection rather than initiate one upon receipt of a transfer command.  </p>\n<p> For a description of the behaviors that are specified using UsePassive, see RFC 959, &quot;File Transfer Protocol,&quot; Section 3.2, &quot;Establishing Data Connections&quot; and Section 4.1.2, &quot;Transfer Parameter Commands,&quot; available at <a href=\"http://www.ietf.org/rfc/rfc959.txt\" data-linktype=\"external\">http://www.rfc-editor.org/</a>.  </p>\n<p> Changing UsePassive after calling the <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_GetRequestStream_\" data-linktype=\"relative-path\">GetRequestStream</a>, <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_BeginGetRequestStream_\" data-linktype=\"relative-path\">BeginGetRequestStream</a>, <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_GetResponse_\" data-linktype=\"relative-path\">GetResponse</a>, or <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_BeginGetResponse_\" data-linktype=\"relative-path\">BeginGetResponse</a> method causes an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> exception.  </p>\n<p> If UsePassive is set to <code>true</code>, the FTP server may not send the size of the file, and download progress can always be zero. If UsePassive is set to <code>false</code>, a firewall can raise an alert and block the file download.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example retrieves and displays property values for a specified <a class=\"xref\" href=\"system.net.ftpwebrequest\" data-linktype=\"relative-path\">FtpWebRequest</a> object.  </p>\n<pre><code class=\"lang-cpp\" name=\"NCLFtpClient#6\">private:\n   // DisplayRequestProperties prints a request&#39;s properties.\n   // This method should be called after the request is sent to the server.\n   static void DisplayRequestProperties( FtpWebRequest^ request )\n   {\n      Console::WriteLine( &quot;User {0} {1}&quot;, request-&gt;Credentials-&gt;GetCredential( request-&gt;RequestUri, &quot;basic&quot; )-&gt;UserName, request-&gt;RequestUri );\n\n      Console::WriteLine( &quot;Request: {0} {1}&quot;, request-&gt;Method, request-&gt;RequestUri );\n\n      Console::WriteLine( &quot;Passive: {0}  Keep alive: {1}  Binary: {2} Timeout: {3}.&quot;, request-&gt;UsePassive, request-&gt;KeepAlive, request-&gt;UseBinary, request-&gt;Timeout == -1 ? &quot;none&quot; : request-&gt;Timeout.ToString() );\n\n      IWebProxy^ proxy = request-&gt;Proxy;\n      if ( proxy )\n      {\n         Console::WriteLine( &quot;Proxy: {0}&quot;, proxy-&gt;GetProxy( request-&gt;RequestUri ) );\n      }\n      else\n      {\n         Console::WriteLine( &quot;Proxy: (none)&quot; );\n      }\n\n      Console::WriteLine( &quot;ConnectionGroup: {0}&quot;, request-&gt;ConnectionGroupName == nullptr ? &quot;none&quot; : request-&gt;ConnectionGroupName );\n\n      Console::WriteLine( &quot;Encrypted connection: {0}&quot;, request-&gt;EnableSsl );\n\n      Console::WriteLine(&quot;Method: {0}&quot;, request-&gt;Method);\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"NCLFtpClient#6\">        // DisplayRequestProperties prints a request&#39;s properties.\n        // This method should be called after the request is sent to the server.\n       \n        private static void DisplayRequestProperties(FtpWebRequest request)\n        {\n            Console.WriteLine(&quot;User {0} {1}&quot;, \n                request.Credentials.GetCredential(request.RequestUri,&quot;basic&quot;).UserName,\n                request.RequestUri\n            );\n            Console.WriteLine(&quot;Request: {0} {1}&quot;, \n                request.Method,\n                request.RequestUri\n            );\n            Console.WriteLine(&quot;Passive: {0}  Keep alive: {1}  Binary: {2} Timeout: {3}.&quot;, \n                request.UsePassive, \n                request.KeepAlive, \n                request.UseBinary,\n                request.Timeout == -1 ? &quot;none&quot; : request.Timeout.ToString()\n            );\n            IWebProxy proxy = request.Proxy;\n            if (proxy != null)\n            {\n                Console.WriteLine(&quot;Proxy: {0}&quot;, proxy.GetProxy(request.RequestUri));\n            } \n            else\n            {\n                Console.WriteLine(&quot;Proxy: (none)&quot;);\n            }\n            \n            Console.WriteLine(&quot;ConnectionGroup: {0}&quot;,\n                request.ConnectionGroupName == null ? &quot;none&quot; : request.ConnectionGroupName\n            );\n\n            Console.WriteLine(&quot;Encrypted connection: {0}&quot;, \n                request.EnableSsl);\n\n            Console.WriteLine(&quot;Method: {0}&quot;, request.Method);\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_FtpWebRequest_Abort\">\r\n    \r\n            <a id=\"System_Net_FtpWebRequest_Abort_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Abort()</div>        \r\n          </div>\r\n    \r\n            <p>Terminates an asynchronous FTP operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void Abort ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If there is no operation in progress, this method does nothing. If a file transfer is in progress, this method terminates the transfer.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This member outputs trace information when you enable network tracing in your application. For more information, see <a href=\"../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Network Tracing in the .NET Framework</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how the user can terminate an asynchronous upload of a file from the local directory to the server.  </p>\n<pre><code class=\"lang-cpp\" name=\"NCLFtpClient#10\">public:\n   void AbortUpload( String^ fileName, String^ serverUri )\n   {\n      request = dynamic_cast&lt;FtpWebRequest^&gt;(WebRequest::Create( serverUri ));\n      request-&gt;Method = WebRequestMethods::Ftp::UploadFile;\n\n      // Get the file to be uploaded and convert it to bytes.\n      StreamReader^ sourceStream = gcnew StreamReader( fileName );\n      fileContents = Encoding::UTF8-&gt;GetBytes( sourceStream-&gt;ReadToEnd() );\n      sourceStream-&gt;Close();\n\n      // Set the content length to the number of bytes in the file.\n      request-&gt;ContentLength = fileContents-&gt;Length;\n\n      // Asynchronously get the stream for the file contents.\n      IAsyncResult^ ar = request-&gt;BeginGetRequestStream( gcnew AsyncCallback( this, &amp;AsynchronousFtpUpLoader::EndGetStreamCallback ), nullptr );\n      Console::WriteLine( &quot;Getting the request stream asynchronously...&quot; );\n      Console::WriteLine( &quot;Press &#39;a&#39; to abort the upload or any other key to continue&quot; );\n      String^ input = Console::ReadLine();\n      if ( input-&gt;Equals( &quot;a&quot; ) )\n      {\n         request-&gt;Abort();\n         Console::WriteLine( &quot;Request aborted&quot; );\n         return;\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"NCLFtpClient#10\">public class ApplicationMain\n{\n    public static void Main()\n    {\n          ManualResetEvent wait = new ManualResetEvent(false);\n          AsynchronousFtpUpLoader uploader = new AsynchronousFtpUpLoader(wait);\n          uploader.AllowAbortUpload(&quot;out.txt&quot;, &quot;ftp://sharriso1/ftptests.txt&quot;);\n          wait.WaitOne();\n          if (uploader.AsyncException != null)\n          {\n                Console.WriteLine(uploader.AsyncException.ToString());\n          }\n    }\n}\n    public class AsynchronousFtpUpLoader\n    {\n        ManualResetEvent wait;\n        FtpWebRequest request;\n        byte [] fileContents;\n        Exception asyncException = null;\n        \n        public AsynchronousFtpUpLoader(ManualResetEvent wait)\n        {\n            this.wait = wait;\n        }\n\n        public Exception AsyncException\n        {\n            get { return asyncException;}\n        }\n        \n        private void EndGetStreamCallback(IAsyncResult ar)\n        {\n            Stream requestStream = null;\n            // End the asynchronous call to get the request stream.\n            try\n            {\n                requestStream = request.EndGetRequestStream(ar);\n            } \n            // Return exceptions to the main application thread.\n            catch (Exception e)\n            {\n                Console.WriteLine(&quot;Could not get the request stream.&quot;);\n                asyncException = e;\n                wait.Set();\n                return;\n            }\n            // Write the file contents to the request stream.\n            requestStream.Write(fileContents, 0, fileContents.Length);\n            Console.WriteLine (&quot;Writing {0} bytes to the stream.&quot;, fileContents.Length);\n            // IMPORTANT: Close the request stream before sending the request.\n            requestStream.Close();\n        }\n   \n    \n        // The EndGetResponseCallback method  \n        // completes a call to BeginGetResponse.\n        private void EndGetResponseCallback(IAsyncResult ar)\n        {\n            FtpWebResponse response = null;\n            try \n            {\n                response = (FtpWebResponse) request.EndGetResponse(ar);\n            }\n            // Return exceptions to the main application thread.\n            catch (Exception e)\n            {\n                Console.WriteLine (&quot;Error getting response.&quot;);\n                asyncException = e;\n                wait.Set();\n            }\n            Console.WriteLine(&quot;Upload status: {0}&quot;,response.StatusDescription);\n            // Signal the application thread that this operation is complete.\n            wait.Set();\n        }\n        internal void AbortRequest(FtpWebRequest request)\n        {\n            request.Abort();\n            Console.WriteLine(&quot;Request aborted!&quot;);\n            wait.Set();\n        }\n        \n       public void AllowAbortUpload(string fileName, string serverUri)\n       {\n            request = (FtpWebRequest)WebRequest.Create(serverUri);\n            request.Method = WebRequestMethods.Ftp.UploadFile;\n            // Get the file to be uploaded and convert it to bytes.\n            StreamReader sourceStream = new StreamReader(fileName);\n            fileContents = Encoding.UTF8.GetBytes(sourceStream.ReadToEnd());\n            sourceStream.Close();\n            // Set the content length to the number of bytes in the file.\n            request.ContentLength = fileContents.Length;\n            // Asynchronously get the stream for the file contents.\n            IAsyncResult ar = request.BeginGetRequestStream(\n                new AsyncCallback (EndGetStreamCallback), null);\n             while (!ar.IsCompleted)\n            {\n                Console.WriteLine(&quot;Press &#39;a&#39; to abort writing to the request stream. Press any other key to continue...&quot;);\n                string input = Console.ReadLine();\n                if (input == &quot;a&quot;)\n                {\n                    AbortRequest(request);\n                    return;\n                }\n            }\n            Console.WriteLine(&quot;Sending the request asynchronously...&quot;);\n            IAsyncResult responseAR = request.BeginGetResponse(\n                new AsyncCallback (EndGetResponseCallback), null);\n\n            while (!responseAR.IsCompleted)\n            {\n                Console.WriteLine(&quot;Press &#39;a&#39; to abort the upload. Press any other key to continue.&quot;);\n                string input = Console.ReadLine();\n                if (input == &quot;a&quot;)\n                {\n                    AbortRequest(request);\n                    return;\n                }\n            }\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_FtpWebRequest_BeginGetRequestStream_System_AsyncCallback_System_Object_\">\r\n    \r\n            <a id=\"System_Net_FtpWebRequest_BeginGetRequestStream_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginGetRequestStream(AsyncCallback,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Begins asynchronously opening a request&#39;s content stream for writing.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override IAsyncResult BeginGetRequestStream (AsyncCallback callback, object state);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>callback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a> delegate that references the method to invoke when the operation is complete.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A user-defined object that contains information about the operation. This object is passed to the <code>callback</code> delegate when the operation completes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> instance that indicates the status of the operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>A previous call to this method or <span class=\"xref\">stem.Net.FtpWebRequest.GetRequestStream*</span> has not yet completed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.webexception\" data-linktype=\"relative-path\">WebException</a></div>\r\n                  </div>\r\n                  <p>A connection to the FTP server could not be established.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.protocolviolationexception\" data-linktype=\"relative-path\">ProtocolViolationException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Net.FtpWebRequest.Method*</span> property is not set to <a class=\"xref\" href=\"system.net.webrequestmethods.ftp#System_Net_WebRequestMethods_Ftp_UploadFile\" data-linktype=\"relative-path\">UploadFile</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You must complete the asynchronous operation by calling the <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_EndGetRequestStream_\" data-linktype=\"relative-path\">EndGetRequestStream</a> method. Typically, <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_EndGetRequestStream_\" data-linktype=\"relative-path\">EndGetRequestStream</a> is called by the method referenced by <code>callback</code>. To determine the state of the operation, check the properties in the <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> object returned by this method.  </p>\n<p> This method does not block while waiting for the stream. To block, call <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_GetRequestStream_\" data-linktype=\"relative-path\">GetRequestStream</a> in place of this method.  </p>\n<p> For detailed information about using the asynchronous programming model, see <a href=\"../Topic/Calling%20Synchronous%20Methods%20Asynchronously.md\" data-linktype=\"relative-path\">Calling Synchronous Methods Asynchronously</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This member outputs trace information when you enable network tracing in your application. For more information, see <a href=\"../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Network Tracing in the .NET Framework</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates beginning an asynchronous operation to get a request&#39;s stream. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.net.ftpwebrequest\" data-linktype=\"relative-path\">FtpWebRequest</a> class overview.  </p>\n<pre><code class=\"lang-cs\" name=\"NCLFtpAsync#4\">        // Command line arguments are two strings:\n        // 1. The url that is the name of the file being uploaded to the server.\n        // 2. The name of the file on the local machine.\n        //\n        public static void Main(string[] args)\n        {\n            // Create a Uri instance with the specified URI string.\n            // If the URI is not correctly formed, the Uri constructor\n            // will throw an exception.\n            ManualResetEvent waitObject;\n            \n            Uri target = new Uri (args[0]);\n            string fileName = args[1];\n            FtpState state = new FtpState();\n            FtpWebRequest request = (FtpWebRequest)WebRequest.Create(target);\n            request.Method = WebRequestMethods.Ftp.UploadFile;\n            \n            // This example uses anonymous logon.\n            // The request is anonymous by default; the credential does not have to be specified. \n            // The example specifies the credential only to\n            // control how actions are logged on the server.\n            \n            request.Credentials = new NetworkCredential (&quot;anonymous&quot;,&quot;janeDoe@contoso.com&quot;);\n            \n            // Store the request in the object that we pass into the\n            // asynchronous operations.\n            state.Request = request;\n            state.FileName = fileName;\n            \n            // Get the event to wait on.\n            waitObject = state.OperationComplete;\n            \n            // Asynchronously get the stream for the file contents.\n            request.BeginGetRequestStream(\n                new AsyncCallback (EndGetStreamCallback), \n                state\n            );\n            \n            // Block the current thread until all operations are complete.\n            waitObject.WaitOne();\n            \n            // The operations either completed or threw an exception.\n            if (state.OperationException != null)\n            {\n                throw state.OperationException;\n            }\n            else\n            {\n                Console.WriteLine(&quot;The operation completed - {0}&quot;, state.StatusDescription);\n            }\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"NCLFtpAsync#4\">   // Command line arguments are two strings:\n   // 1. The url that is the name of the file being uploaded to the server.\n   // 2. The name of the file on the local machine.\n   //\n   static void Main()\n   {\n      array&lt;String^&gt;^args = Environment::GetCommandLineArgs();\n\n      // Create a Uri instance with the specified URI string.\n      // If the URI is not correctly formed, the Uri constructor\n      // will throw an exception.\n      ManualResetEvent^ waitObject;\n      Uri^ target = gcnew Uri( args[ 1 ] );\n      String^ fileName = args[ 2 ];\n      FtpState^ state = gcnew FtpState;\n      FtpWebRequest ^ request = dynamic_cast&lt;FtpWebRequest^&gt;(WebRequest::Create( target ));\n      request-&gt;Method = WebRequestMethods::Ftp::UploadFile;\n\n      // This example uses anonymous logon.\n      // The request is anonymous by default; the credential does not have to be specified. \n      // The example specifies the credential only to\n      // control how actions are logged on the server.\n      request-&gt;Credentials = gcnew NetworkCredential( &quot;anonymous&quot;,&quot;janeDoe@contoso.com&quot; );\n\n      // Store the request in the object that we pass into the\n      // asynchronous operations.\n      state-&gt;Request = request;\n      state-&gt;FileName = fileName;\n\n      // Get the event to wait on.\n      waitObject = state-&gt;OperationComplete;\n\n      // Asynchronously get the stream for the file contents.\n      request-&gt;BeginGetRequestStream( gcnew AsyncCallback( EndGetStreamCallback ), state );\n\n      // Block the current thread until all operations are complete.\n      waitObject-&gt;WaitOne();\n\n      // The operations either completed or threw an exception.\n      if ( state-&gt;OperationException != nullptr )\n      {\n         throw state-&gt;OperationException;\n      }\n      else\n      {\n         Console::WriteLine( &quot;The operation completed - {0}&quot;, state-&gt;StatusDescription );\n      }\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_FtpWebRequest_BeginGetResponse_System_AsyncCallback_System_Object_\">\r\n    \r\n            <a id=\"System_Net_FtpWebRequest_BeginGetResponse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginGetResponse(AsyncCallback,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Begins sending a request and receiving a response from an FTP server asynchronously.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override IAsyncResult BeginGetResponse (AsyncCallback callback, object state);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>callback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a> delegate that references the method to invoke when the operation is complete.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A user-defined object that contains information about the operation. This object is passed to the <code>callback</code> delegate when the operation completes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> instance that indicates the status of the operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><span class=\"xref\">stem.Net.FtpWebRequest.GetResponse*</span> or BeginGetResponse has already been called for this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You must complete the asynchronous operation by calling the <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_EndGetResponse_\" data-linktype=\"relative-path\">EndGetResponse</a> method. Typically, <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_EndGetResponse_\" data-linktype=\"relative-path\">EndGetResponse</a> is called by the method referenced by <code>callback</code>. To determine the state of the operation, check the properties in the <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> object returned by the BeginGetResponse method.  </p>\n<p> If the <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_Proxy_\" data-linktype=\"relative-path\">Proxy</a> property is set, either directly or in a configuration file, communications with the FTP server are made through the specified proxy.  </p>\n<p> BeginGetResponse does not block while waiting for the response from the server. To block, call the <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_GetResponse_\" data-linktype=\"relative-path\">GetResponse</a> method in place of BeginGetResponse.  </p>\n<p> For more information about using the asynchronous programming model, see <a href=\"../Topic/Calling%20Synchronous%20Methods%20Asynchronously.md\" data-linktype=\"relative-path\">Calling Synchronous Methods Asynchronously</a>.  </p>\n<p> This member outputs trace information when you enable network tracing in your application. For more information, see <a href=\"../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Network Tracing in the .NET Framework</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If a <a class=\"xref\" href=\"system.net.webexception\" data-linktype=\"relative-path\">WebException</a> is thrown, use the <a class=\"xref\" href=\"system.net.webexception#System_Net_WebException_Response_\" data-linktype=\"relative-path\">Response</a> and <a class=\"xref\" href=\"system.net.webexception#System_Net_WebException_Status_\" data-linktype=\"relative-path\">Status</a> properties of the exception to determine the response from the server.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates ending an asynchronous operation to get a request&#39;s stream, and then starting a request to get the response. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.net.ftpwebrequest\" data-linktype=\"relative-path\">FtpWebRequest</a> class overview.  </p>\n<pre><code class=\"lang-cs\" name=\"NCLFtpAsync#5\">        private static void EndGetStreamCallback(IAsyncResult ar)\n        {\n            FtpState state = (FtpState) ar.AsyncState;\n            \n            Stream requestStream = null;\n            // End the asynchronous call to get the request stream.\n            try\n            {\n                requestStream = state.Request.EndGetRequestStream(ar);\n                // Copy the file contents to the request stream.\n                const int bufferLength = 2048;\n                byte[] buffer = new byte[bufferLength];\n                int count = 0;\n                int readBytes = 0;\n                FileStream stream = File.OpenRead(state.FileName);\n                do\n                {\n                    readBytes = stream.Read(buffer, 0, bufferLength);\n                    requestStream.Write(buffer, 0, readBytes);\n                    count += readBytes;\n                }\n                while (readBytes != 0);\n                Console.WriteLine (&quot;Writing {0} bytes to the stream.&quot;, count);\n                // IMPORTANT: Close the request stream before sending the request.\n                requestStream.Close();\n                // Asynchronously get the response to the upload request.\n                state.Request.BeginGetResponse(\n                    new AsyncCallback (EndGetResponseCallback), \n                    state\n                );\n            } \n            // Return exceptions to the main application thread.\n            catch (Exception e)\n            {\n                Console.WriteLine(&quot;Could not get the request stream.&quot;);\n                state.OperationException = e;\n                state.OperationComplete.Set();\n                return;\n            }\n           \n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"NCLFtpAsync#5\">private:\n   static void EndGetStreamCallback( IAsyncResult^ ar )\n   {\n      FtpState^ state = dynamic_cast&lt;FtpState^&gt;(ar-&gt;AsyncState);\n      Stream^ requestStream = nullptr;\n\n      // End the asynchronous call to get the request stream.\n      try\n      {\n         requestStream = state-&gt;Request-&gt;EndGetRequestStream( ar );\n\n         // Copy the file contents to the request stream.\n         const int bufferLength = 2048;\n         array&lt;Byte&gt;^buffer = gcnew array&lt;Byte&gt;(bufferLength);\n         int count = 0;\n         int readBytes = 0;\n         FileStream^ stream = File::OpenRead( state-&gt;FileName );\n         do\n         {\n            readBytes = stream-&gt;Read( buffer, 0, bufferLength );\n            requestStream-&gt;Write( buffer, 0, bufferLength );\n            count += readBytes;\n         }\n         while ( readBytes != 0 );\n         Console::WriteLine( &quot;Writing {0} bytes to the stream.&quot;, count );\n\n         // IMPORTANT: Close the request stream before sending the request.\n         requestStream-&gt;Close();\n\n         // Asynchronously get the response to the upload request.\n         state-&gt;Request-&gt;BeginGetResponse( gcnew AsyncCallback( EndGetResponseCallback ), state );\n      }\n      // Return exceptions to the main application thread.\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Could not get the request stream.&quot; );\n         state-&gt;OperationException = e;\n         state-&gt;OperationComplete-&gt;Set();\n         return;\n      }\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_FtpWebRequest_EndGetRequestStream_System_IAsyncResult_\">\r\n    \r\n            <a id=\"System_Net_FtpWebRequest_EndGetRequestStream_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EndGetRequestStream(IAsyncResult)</div>        \r\n          </div>\r\n    \r\n            <p>Ends a pending asynchronous operation started with <span class=\"xref\">stem.Net.FtpWebRequest.BeginGetRequestStream*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.IO.Stream EndGetRequestStream (IAsyncResult asyncResult);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncResult</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> object that was returned when the operation started.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </div>\r\n                  <p>A writable <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> instance associated with this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>asyncResult</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>asyncResult</code> was not obtained by calling <span class=\"xref\">stem.Net.FtpWebRequest.BeginGetRequestStream*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>This method was already called for the operation identified by <code>asyncResult</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the operation has not completed, the EndGetRequestStream method blocks until the operation completes. To determine whether the operation has completed, check the <a class=\"xref\" href=\"system.iasyncresult#System_IAsyncResult_IsCompleted_\" data-linktype=\"relative-path\">IsCompleted</a> property before calling EndGetRequestStream.  </p>\n<p> In addition to the exceptions noted in &quot;Exceptions,&quot; EndGetRequestStream rethrows exceptions that were thrown while opening the stream for writing.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This member outputs trace information when you enable network tracing in your application. For more information, see <a href=\"../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Network Tracing in the .NET Framework</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates ending an asynchronous operation to get a request&#39;s stream. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.net.ftpwebrequest\" data-linktype=\"relative-path\">FtpWebRequest</a> class overview.  </p>\n<pre><code class=\"lang-cs\" name=\"NCLFtpAsync#5\">        private static void EndGetStreamCallback(IAsyncResult ar)\n        {\n            FtpState state = (FtpState) ar.AsyncState;\n            \n            Stream requestStream = null;\n            // End the asynchronous call to get the request stream.\n            try\n            {\n                requestStream = state.Request.EndGetRequestStream(ar);\n                // Copy the file contents to the request stream.\n                const int bufferLength = 2048;\n                byte[] buffer = new byte[bufferLength];\n                int count = 0;\n                int readBytes = 0;\n                FileStream stream = File.OpenRead(state.FileName);\n                do\n                {\n                    readBytes = stream.Read(buffer, 0, bufferLength);\n                    requestStream.Write(buffer, 0, readBytes);\n                    count += readBytes;\n                }\n                while (readBytes != 0);\n                Console.WriteLine (&quot;Writing {0} bytes to the stream.&quot;, count);\n                // IMPORTANT: Close the request stream before sending the request.\n                requestStream.Close();\n                // Asynchronously get the response to the upload request.\n                state.Request.BeginGetResponse(\n                    new AsyncCallback (EndGetResponseCallback), \n                    state\n                );\n            } \n            // Return exceptions to the main application thread.\n            catch (Exception e)\n            {\n                Console.WriteLine(&quot;Could not get the request stream.&quot;);\n                state.OperationException = e;\n                state.OperationComplete.Set();\n                return;\n            }\n           \n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"NCLFtpAsync#5\">private:\n   static void EndGetStreamCallback( IAsyncResult^ ar )\n   {\n      FtpState^ state = dynamic_cast&lt;FtpState^&gt;(ar-&gt;AsyncState);\n      Stream^ requestStream = nullptr;\n\n      // End the asynchronous call to get the request stream.\n      try\n      {\n         requestStream = state-&gt;Request-&gt;EndGetRequestStream( ar );\n\n         // Copy the file contents to the request stream.\n         const int bufferLength = 2048;\n         array&lt;Byte&gt;^buffer = gcnew array&lt;Byte&gt;(bufferLength);\n         int count = 0;\n         int readBytes = 0;\n         FileStream^ stream = File::OpenRead( state-&gt;FileName );\n         do\n         {\n            readBytes = stream-&gt;Read( buffer, 0, bufferLength );\n            requestStream-&gt;Write( buffer, 0, bufferLength );\n            count += readBytes;\n         }\n         while ( readBytes != 0 );\n         Console::WriteLine( &quot;Writing {0} bytes to the stream.&quot;, count );\n\n         // IMPORTANT: Close the request stream before sending the request.\n         requestStream-&gt;Close();\n\n         // Asynchronously get the response to the upload request.\n         state-&gt;Request-&gt;BeginGetResponse( gcnew AsyncCallback( EndGetResponseCallback ), state );\n      }\n      // Return exceptions to the main application thread.\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Could not get the request stream.&quot; );\n         state-&gt;OperationException = e;\n         state-&gt;OperationComplete-&gt;Set();\n         return;\n      }\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_FtpWebRequest_EndGetResponse_System_IAsyncResult_\">\r\n    \r\n            <a id=\"System_Net_FtpWebRequest_EndGetResponse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EndGetResponse(IAsyncResult)</div>        \r\n          </div>\r\n    \r\n            <p>Ends a pending asynchronous operation started with <span class=\"xref\">stem.Net.FtpWebRequest.BeginGetResponse*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Net.WebResponse EndGetResponse (IAsyncResult asyncResult);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncResult</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> that was returned when the operation started.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.webresponse\" data-linktype=\"relative-path\">WebResponse</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.net.webresponse\" data-linktype=\"relative-path\">WebResponse</a> reference that contains an <a class=\"xref\" href=\"system.net.ftpwebresponse\" data-linktype=\"relative-path\">FtpWebResponse</a> instance. This object contains the FTP server&#39;s response to the request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>asyncResult</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>asyncResult</code> was not obtained by calling <span class=\"xref\">stem.Net.FtpWebRequest.BeginGetResponse*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>This method was already called for the operation identified by <code>asyncResult</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.webexception\" data-linktype=\"relative-path\">WebException</a></div>\r\n                  </div>\r\n                  <p>An error occurred using an HTTP proxy.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the operation has not completed at the time the EndGetResponse method is called, EndGetResponse blocks until the operation completes. To prevent blocking, check the <a class=\"xref\" href=\"system.iasyncresult#System_IAsyncResult_IsCompleted_\" data-linktype=\"relative-path\">IsCompleted</a> property before calling EndGetResponse.  </p>\n<p> In addition to the exceptions noted in &quot;Exceptions,&quot; EndGetResponse rethrows exceptions that were thrown while communicating with the server.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This member outputs trace information when you enable network tracing in your application. For more information, see <a href=\"../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Network Tracing in the .NET Framework</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates ending an asynchronous operation to get a response. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.net.ftpwebrequest\" data-linktype=\"relative-path\">FtpWebRequest</a> class overview.  </p>\n<pre><code class=\"lang-cs\" name=\"NCLFtpAsync#6\">        // The EndGetResponseCallback method  \n        // completes a call to BeginGetResponse.\n        private static void EndGetResponseCallback(IAsyncResult ar)\n        {\n            FtpState state = (FtpState) ar.AsyncState;\n            FtpWebResponse response = null;\n            try \n            {\n                response = (FtpWebResponse) state.Request.EndGetResponse(ar);\n                response.Close();\n                state.StatusDescription = response.StatusDescription;\n                // Signal the main application thread that \n                // the operation is complete.\n                state.OperationComplete.Set();\n            }\n            // Return exceptions to the main application thread.\n            catch (Exception e)\n            {\n                Console.WriteLine (&quot;Error getting response.&quot;);\n                state.OperationException = e;\n                state.OperationComplete.Set();\n            }\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"NCLFtpAsync#6\">   // The EndGetResponseCallback method  \n   // completes a call to BeginGetResponse.\n   static void EndGetResponseCallback( IAsyncResult^ ar )\n   {\n      FtpState^ state = dynamic_cast&lt;FtpState^&gt;(ar-&gt;AsyncState);\n      FtpWebResponse ^ response = nullptr;\n      try\n      {\n         response = dynamic_cast&lt;FtpWebResponse^&gt;(state-&gt;Request-&gt;EndGetResponse( ar ));\n         response-&gt;Close();\n         state-&gt;StatusDescription = response-&gt;StatusDescription;\n\n         // Signal the main application thread that \n         // the operation is complete.\n         state-&gt;OperationComplete-&gt;Set();\n      }\n      // Return exceptions to the main application thread.\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Error getting response.&quot; );\n         state-&gt;OperationException = e;\n         state-&gt;OperationComplete-&gt;Set();\n      }\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_FtpWebRequest_GetRequestStream\">\r\n    \r\n            <a id=\"System_Net_FtpWebRequest_GetRequestStream_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetRequestStream()</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the stream used to upload data to an FTP server.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.IO.Stream GetRequestStream ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </div>\r\n                  <p>A writable <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> instance used to store data to be sent to the server by the current request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><span class=\"xref\">stem.Net.FtpWebRequest.BeginGetRequestStream*</span> has been called and has not completed.  </p>\n<p> - or -  </p>\n<p> An HTTP proxy is enabled, and you attempted to use an FTP command other than <a class=\"xref\" href=\"system.net.webrequestmethods.ftp#System_Net_WebRequestMethods_Ftp_DownloadFile\" data-linktype=\"relative-path\">DownloadFile</a>, <a class=\"xref\" href=\"system.net.webrequestmethods.ftp#System_Net_WebRequestMethods_Ftp_ListDirectory\" data-linktype=\"relative-path\">ListDirectory</a>, or <a class=\"xref\" href=\"system.net.webrequestmethods.ftp#System_Net_WebRequestMethods_Ftp_ListDirectoryDetails\" data-linktype=\"relative-path\">ListDirectoryDetails</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.webexception\" data-linktype=\"relative-path\">WebException</a></div>\r\n                  </div>\r\n                  <p>A connection to the FTP server could not be established.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.protocolviolationexception\" data-linktype=\"relative-path\">ProtocolViolationException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Net.FtpWebRequest.Method*</span> property is not set to <a class=\"xref\" href=\"system.net.webrequestmethods.ftp#System_Net_WebRequestMethods_Ftp_UploadFile\" data-linktype=\"relative-path\">UploadFile</a> or <a class=\"xref\" href=\"system.net.webrequestmethods.ftp#System_Net_WebRequestMethods_Ftp_AppendFile\" data-linktype=\"relative-path\">AppendFile</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Set the request properties before calling the GetRequestStream method. After writing the data to the stream, you must close the stream prior to sending the request.  </p>\n<p> If you have not set the <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_Method_\" data-linktype=\"relative-path\">Method</a> property to <a class=\"xref\" href=\"system.net.webrequestmethods.ftp#System_Net_WebRequestMethods_Ftp_UploadFile\" data-linktype=\"relative-path\">UploadFile</a> or <a class=\"xref\" href=\"system.net.webrequestmethods.ftp#System_Net_WebRequestMethods_Ftp_AppendFile\" data-linktype=\"relative-path\">AppendFile</a>, you cannot get the stream.  </p>\n<p> GetRequestStream blocks while waiting for the stream. To prevent this, call the <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_BeginGetRequestStream_\" data-linktype=\"relative-path\">BeginGetRequestStream</a> method in place of GetRequestStream.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This member outputs trace information when you enable network tracing in your application. For more information, see <a href=\"../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Network Tracing in the .NET Framework</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates copying a file to a request&#39;s data stream and sending a request to the server to upload the data and append it to a file.  </p>\n<pre><code class=\"lang-cpp\" name=\"NCLFtpClient#3\">   static bool AppendFileOnServer( String^ fileName, Uri^ serverUri )\n   {\n      // The URI described by serverUri should use the ftp:// scheme.\n      // It contains the name of the file on the server.\n      // Example: ftp://contoso.com/someFile.txt. \n      // The fileName parameter identifies the file containing \n      // the data to be appended to the file on the server.\n      if ( serverUri-&gt;Scheme != Uri::UriSchemeFtp )\n      {\n         return false;\n      }\n\n      // Get the object used to communicate with the server.\n      FtpWebRequest^ request = dynamic_cast&lt;FtpWebRequest^&gt;(WebRequest::Create( serverUri ));\n      request-&gt;Method = WebRequestMethods::Ftp::AppendFile;\n      StreamReader^ sourceStream = gcnew StreamReader( fileName );\n      array&lt;Byte&gt;^fileContents = Encoding::UTF8-&gt;GetBytes( sourceStream-&gt;ReadToEnd() );\n      sourceStream-&gt;Close();\n      request-&gt;ContentLength = fileContents-&gt;Length;\n\n      // This example assumes the FTP site uses anonymous logon.\n      request-&gt;Credentials = gcnew NetworkCredential( &quot;anonymous&quot;,&quot;janeDoe@contoso.com&quot; );\n      Stream^ requestStream = request-&gt;GetRequestStream();\n      requestStream-&gt;Write( fileContents, 0, fileContents-&gt;Length );\n      requestStream-&gt;Close();\n      FtpWebResponse^ response = dynamic_cast&lt;FtpWebResponse^&gt;(request-&gt;GetResponse());\n      Console::WriteLine( &quot;Append status: {0}&quot;, response-&gt;StatusDescription );\n      response-&gt;Close();\n      return true;\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"NCLFtpClient#3\">        public static bool AppendFileOnServer(string fileName, Uri serverUri)\n        {\n            // The URI described by serverUri should use the ftp:// scheme.\n            // It contains the name of the file on the server.\n            // Example: ftp://contoso.com/someFile.txt. \n            // The fileName parameter identifies the file containing \n            // the data to be appended to the file on the server.\n            \n            if (serverUri.Scheme != Uri.UriSchemeFtp)\n            {\n                return false;\n            }\n            // Get the object used to communicate with the server.\n            FtpWebRequest request = (FtpWebRequest)WebRequest.Create(serverUri);\n            request.Method = WebRequestMethods.Ftp.AppendFile;\n            \n            StreamReader sourceStream = new StreamReader(fileName);\n            byte [] fileContents = Encoding.UTF8.GetBytes(sourceStream.ReadToEnd());\n            sourceStream.Close();\n            request.ContentLength = fileContents.Length;\n \n            // This example assumes the FTP site uses anonymous logon.\n            request.Credentials = new NetworkCredential (&quot;anonymous&quot;,&quot;janeDoe@contoso.com&quot;);\n            Stream requestStream = request.GetRequestStream();\n            requestStream.Write(fileContents, 0, fileContents.Length);\n            requestStream.Close();\n            FtpWebResponse response = (FtpWebResponse) request.GetResponse();\n            \n            Console.WriteLine(&quot;Append status: {0}&quot;,response.StatusDescription);\n            \n            response.Close();  \n            return true;\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_FtpWebRequest_GetResponse\">\r\n    \r\n            <a id=\"System_Net_FtpWebRequest_GetResponse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetResponse()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the FTP server response.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Net.WebResponse GetResponse ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.webresponse\" data-linktype=\"relative-path\">WebResponse</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.net.webresponse\" data-linktype=\"relative-path\">WebResponse</a> reference that contains an <a class=\"xref\" href=\"system.net.ftpwebresponse\" data-linktype=\"relative-path\">FtpWebResponse</a> instance. This object contains the FTP server&#39;s response to the request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>GetResponse or <span class=\"xref\">stem.Net.FtpWebRequest.BeginGetResponse*</span> has already been called for this instance.  </p>\n<p> - or -  </p>\n<p> An HTTP proxy is enabled, and you attempted to use an FTP command other than <a class=\"xref\" href=\"system.net.webrequestmethods.ftp#System_Net_WebRequestMethods_Ftp_DownloadFile\" data-linktype=\"relative-path\">DownloadFile</a>, <a class=\"xref\" href=\"system.net.webrequestmethods.ftp#System_Net_WebRequestMethods_Ftp_ListDirectory\" data-linktype=\"relative-path\">ListDirectory</a>, or <a class=\"xref\" href=\"system.net.webrequestmethods.ftp#System_Net_WebRequestMethods_Ftp_ListDirectoryDetails\" data-linktype=\"relative-path\">ListDirectoryDetails</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.webexception\" data-linktype=\"relative-path\">WebException</a></div>\r\n                  </div>\r\n                  <p><span class=\"xref\">stem.Net.FtpWebRequest.EnableSsl*</span> is set to <code>true</code>, but the server does not support this feature.  </p>\n<p> - or -  </p>\n<p> A <span class=\"xref\">stem.Net.FtpWebRequest.Timeout*</span> was specified and the timeout has expired.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To access the FTP-specific properties, you must cast the <a class=\"xref\" href=\"system.net.webresponse\" data-linktype=\"relative-path\">WebResponse</a> object returned by this method to <a class=\"xref\" href=\"system.net.ftpwebresponse\" data-linktype=\"relative-path\">FtpWebResponse</a>.  </p>\n<p> GetResponse causes a control connection to be established, and might also create a data connection. GetResponse blocks until the response is received. To prevent this, you can perform this operation asynchronously by calling the <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_BeginGetResponse_\" data-linktype=\"relative-path\">BeginGetResponse</a> and <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_EndGetResponse_\" data-linktype=\"relative-path\">EndGetResponse</a> methods in place of GetResponse.  </p>\n<p> If the <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_Proxy_\" data-linktype=\"relative-path\">Proxy</a> property is set, either directly or in a configuration file, communications with the FTP server are made through the proxy.  </p>\n<p> If a <a class=\"xref\" href=\"system.net.webexception\" data-linktype=\"relative-path\">WebException</a> is thrown, use the <a class=\"xref\" href=\"system.net.webexception#System_Net_WebException_Response_\" data-linktype=\"relative-path\">Response</a> and <a class=\"xref\" href=\"system.net.webexception#System_Net_WebException_Status_\" data-linktype=\"relative-path\">Status</a> properties of the exception to determine the response from the server.  </p>\n<p> This member outputs trace information when you enable network tracing in your application. For more information, see <a href=\"../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Network Tracing in the .NET Framework</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Multiple calls to GetResponse return the same response object; the request is not reissued.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates copying a file to a request&#39;s data stream and sending a request to append data to a file to the server. The example calls GetResponse to send the request and block until the response is returned by the server.  </p>\n<pre><code class=\"lang-cpp\" name=\"NCLFtpClient#3\">   static bool AppendFileOnServer( String^ fileName, Uri^ serverUri )\n   {\n      // The URI described by serverUri should use the ftp:// scheme.\n      // It contains the name of the file on the server.\n      // Example: ftp://contoso.com/someFile.txt. \n      // The fileName parameter identifies the file containing \n      // the data to be appended to the file on the server.\n      if ( serverUri-&gt;Scheme != Uri::UriSchemeFtp )\n      {\n         return false;\n      }\n\n      // Get the object used to communicate with the server.\n      FtpWebRequest^ request = dynamic_cast&lt;FtpWebRequest^&gt;(WebRequest::Create( serverUri ));\n      request-&gt;Method = WebRequestMethods::Ftp::AppendFile;\n      StreamReader^ sourceStream = gcnew StreamReader( fileName );\n      array&lt;Byte&gt;^fileContents = Encoding::UTF8-&gt;GetBytes( sourceStream-&gt;ReadToEnd() );\n      sourceStream-&gt;Close();\n      request-&gt;ContentLength = fileContents-&gt;Length;\n\n      // This example assumes the FTP site uses anonymous logon.\n      request-&gt;Credentials = gcnew NetworkCredential( &quot;anonymous&quot;,&quot;janeDoe@contoso.com&quot; );\n      Stream^ requestStream = request-&gt;GetRequestStream();\n      requestStream-&gt;Write( fileContents, 0, fileContents-&gt;Length );\n      requestStream-&gt;Close();\n      FtpWebResponse^ response = dynamic_cast&lt;FtpWebResponse^&gt;(request-&gt;GetResponse());\n      Console::WriteLine( &quot;Append status: {0}&quot;, response-&gt;StatusDescription );\n      response-&gt;Close();\n      return true;\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"NCLFtpClient#3\">        public static bool AppendFileOnServer(string fileName, Uri serverUri)\n        {\n            // The URI described by serverUri should use the ftp:// scheme.\n            // It contains the name of the file on the server.\n            // Example: ftp://contoso.com/someFile.txt. \n            // The fileName parameter identifies the file containing \n            // the data to be appended to the file on the server.\n            \n            if (serverUri.Scheme != Uri.UriSchemeFtp)\n            {\n                return false;\n            }\n            // Get the object used to communicate with the server.\n            FtpWebRequest request = (FtpWebRequest)WebRequest.Create(serverUri);\n            request.Method = WebRequestMethods.Ftp.AppendFile;\n            \n            StreamReader sourceStream = new StreamReader(fileName);\n            byte [] fileContents = Encoding.UTF8.GetBytes(sourceStream.ReadToEnd());\n            sourceStream.Close();\n            request.ContentLength = fileContents.Length;\n \n            // This example assumes the FTP site uses anonymous logon.\n            request.Credentials = new NetworkCredential (&quot;anonymous&quot;,&quot;janeDoe@contoso.com&quot;);\n            Stream requestStream = request.GetRequestStream();\n            requestStream.Write(fileContents, 0, fileContents.Length);\n            requestStream.Close();\n            FtpWebResponse response = (FtpWebResponse) request.GetResponse();\n            \n            Console.WriteLine(&quot;Append status: {0}&quot;,response.StatusDescription);\n            \n            response.Close();  \n            return true;\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Net.FtpWebRequest.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Net.FtpWebRequest.yml\">\r\n<meta name=\"APIName\" content=\"System.Net.FtpWebRequest\">\r\n<meta name=\"APIName\" content=\"System.Net.FtpWebRequest.Abort\">\r\n<meta name=\"APIName\" content=\"System.Net.FtpWebRequest.BeginGetRequestStream\">\r\n<meta name=\"APIName\" content=\"System.Net.FtpWebRequest.BeginGetResponse\">\r\n<meta name=\"APIName\" content=\"System.Net.FtpWebRequest.ClientCertificates\">\r\n<meta name=\"APIName\" content=\"System.Net.FtpWebRequest.ConnectionGroupName\">\r\n<meta name=\"APIName\" content=\"System.Net.FtpWebRequest.ContentLength\">\r\n<meta name=\"APIName\" content=\"System.Net.FtpWebRequest.ContentOffset\">\r\n<meta name=\"APIName\" content=\"System.Net.FtpWebRequest.ContentType\">\r\n<meta name=\"APIName\" content=\"System.Net.FtpWebRequest.Credentials\">\r\n<meta name=\"APIName\" content=\"System.Net.FtpWebRequest.DefaultCachePolicy\">\r\n<meta name=\"APIName\" content=\"System.Net.FtpWebRequest.EnableSsl\">\r\n<meta name=\"APIName\" content=\"System.Net.FtpWebRequest.EndGetRequestStream\">\r\n<meta name=\"APIName\" content=\"System.Net.FtpWebRequest.EndGetResponse\">\r\n<meta name=\"APIName\" content=\"System.Net.FtpWebRequest.GetRequestStream\">\r\n<meta name=\"APIName\" content=\"System.Net.FtpWebRequest.GetResponse\">\r\n<meta name=\"APIName\" content=\"System.Net.FtpWebRequest.Headers\">\r\n<meta name=\"APIName\" content=\"System.Net.FtpWebRequest.KeepAlive\">\r\n<meta name=\"APIName\" content=\"System.Net.FtpWebRequest.Method\">\r\n<meta name=\"APIName\" content=\"System.Net.FtpWebRequest.PreAuthenticate\">\r\n<meta name=\"APIName\" content=\"System.Net.FtpWebRequest.Proxy\">\r\n<meta name=\"APIName\" content=\"System.Net.FtpWebRequest.ReadWriteTimeout\">\r\n<meta name=\"APIName\" content=\"System.Net.FtpWebRequest.RenameTo\">\r\n<meta name=\"APIName\" content=\"System.Net.FtpWebRequest.RequestUri\">\r\n<meta name=\"APIName\" content=\"System.Net.FtpWebRequest.ServicePoint\">\r\n<meta name=\"APIName\" content=\"System.Net.FtpWebRequest.Timeout\">\r\n<meta name=\"APIName\" content=\"System.Net.FtpWebRequest.UseBinary\">\r\n<meta name=\"APIName\" content=\"System.Net.FtpWebRequest.UseDefaultCredentials\">\r\n<meta name=\"APIName\" content=\"System.Net.FtpWebRequest.UsePassive\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"edac123b-514e-9812-5701-80c157fe312c\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Net\\FtpWebRequest.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Implements a File Transfer Protocol (FTP) client.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Net/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Net.FtpWebRequest\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Net.FtpWebRequest.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Net.FtpWebRequest.yml","open_to_public_contributors":true,"api_name":["System.Net.FtpWebRequest","System.Net.FtpWebRequest.Abort","System.Net.FtpWebRequest.BeginGetRequestStream","System.Net.FtpWebRequest.BeginGetResponse","System.Net.FtpWebRequest.ClientCertificates","System.Net.FtpWebRequest.ConnectionGroupName","System.Net.FtpWebRequest.ContentLength","System.Net.FtpWebRequest.ContentOffset","System.Net.FtpWebRequest.ContentType","System.Net.FtpWebRequest.Credentials","System.Net.FtpWebRequest.DefaultCachePolicy","System.Net.FtpWebRequest.EnableSsl","System.Net.FtpWebRequest.EndGetRequestStream","System.Net.FtpWebRequest.EndGetResponse","System.Net.FtpWebRequest.GetRequestStream","System.Net.FtpWebRequest.GetResponse","System.Net.FtpWebRequest.Headers","System.Net.FtpWebRequest.KeepAlive","System.Net.FtpWebRequest.Method","System.Net.FtpWebRequest.PreAuthenticate","System.Net.FtpWebRequest.Proxy","System.Net.FtpWebRequest.ReadWriteTimeout","System.Net.FtpWebRequest.RenameTo","System.Net.FtpWebRequest.RequestUri","System.Net.FtpWebRequest.ServicePoint","System.Net.FtpWebRequest.Timeout","System.Net.FtpWebRequest.UseBinary","System.Net.FtpWebRequest.UseDefaultCredentials","System.Net.FtpWebRequest.UsePassive"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Net.FtpWebRequest","System::Net::FtpWebRequest","System.Net.FtpWebRequest.Abort","System::Net::FtpWebRequest::Abort","System.Net.FtpWebRequest.BeginGetRequestStream","System::Net::FtpWebRequest::BeginGetRequestStream","System.Net.FtpWebRequest.BeginGetResponse","System::Net::FtpWebRequest::BeginGetResponse","System.Net.FtpWebRequest.ClientCertificates","System::Net::FtpWebRequest::ClientCertificates","System.Net.FtpWebRequest.ConnectionGroupName","System::Net::FtpWebRequest::ConnectionGroupName","System.Net.FtpWebRequest.ContentLength","System::Net::FtpWebRequest::ContentLength","System.Net.FtpWebRequest.ContentOffset","System::Net::FtpWebRequest::ContentOffset","System.Net.FtpWebRequest.ContentType","System::Net::FtpWebRequest::ContentType","System.Net.FtpWebRequest.Credentials","System::Net::FtpWebRequest::Credentials","System.Net.FtpWebRequest.DefaultCachePolicy","System::Net::FtpWebRequest::DefaultCachePolicy","System.Net.FtpWebRequest.EnableSsl","System::Net::FtpWebRequest::EnableSsl","System.Net.FtpWebRequest.EndGetRequestStream","System::Net::FtpWebRequest::EndGetRequestStream","System.Net.FtpWebRequest.EndGetResponse","System::Net::FtpWebRequest::EndGetResponse","System.Net.FtpWebRequest.GetRequestStream","System::Net::FtpWebRequest::GetRequestStream","System.Net.FtpWebRequest.GetResponse","System::Net::FtpWebRequest::GetResponse","System.Net.FtpWebRequest.Headers","System::Net::FtpWebRequest::Headers","System.Net.FtpWebRequest.KeepAlive","System::Net::FtpWebRequest::KeepAlive","System.Net.FtpWebRequest.Method","System::Net::FtpWebRequest::Method","System.Net.FtpWebRequest.PreAuthenticate","System::Net::FtpWebRequest::PreAuthenticate","System.Net.FtpWebRequest.Proxy","System::Net::FtpWebRequest::Proxy","System.Net.FtpWebRequest.ReadWriteTimeout","System::Net::FtpWebRequest::ReadWriteTimeout","System.Net.FtpWebRequest.RenameTo","System::Net::FtpWebRequest::RenameTo","System.Net.FtpWebRequest.RequestUri","System::Net::FtpWebRequest::RequestUri","System.Net.FtpWebRequest.ServicePoint","System::Net::FtpWebRequest::ServicePoint","System.Net.FtpWebRequest.Timeout","System::Net::FtpWebRequest::Timeout","System.Net.FtpWebRequest.UseBinary","System::Net::FtpWebRequest::UseBinary","System.Net.FtpWebRequest.UseDefaultCredentials","System::Net::FtpWebRequest::UseDefaultCredentials","System.Net.FtpWebRequest.UsePassive","System::Net::FtpWebRequest::UsePassive"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"edac123b-514e-9812-5701-80c157fe312c","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Net\\FtpWebRequest.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Net/FtpWebRequest.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"FtpWebRequest class | Microsoft Docs","_op_ogTitle":"FtpWebRequest class","description":"Implements a File Transfer Protocol (FTP) client.\n","toc_asset_id":"_splitted/System.Net/toc.json","toc_rel":"_splitted/System.Net/toc.json","source_url":"","ms.assetid":"System.Net.FtpWebRequest","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.net.ftpwebrequest","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.net.ftpwebrequest","fileRelativePath":"System.Net.FtpWebRequest.html"},"themesRelativePathToOutputRoot":"_themes/"}