{"content":"    \r\n    <h1 id=\"System_Collections_Specialized_BitVector32\">\r\n      <span class=\"lang-csharp\">BitVector32</span>\r\n        Struct\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides a simple structure that stores Boolean values and small integers in 32 bits of memory.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public struct BitVector32</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">System.ValueType</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">BitVector32</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>BitVector32 is more efficient than <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> for Boolean values and small integers that are used internally. A <a class=\"xref\" href=\"system.collections.bitarray\" data-linktype=\"relative-path\">BitArray</a> can grow indefinitely as needed, but it has the memory and performance overhead that a class instance requires. In contrast, a BitVector32 uses only 32 bits.  </p>\n<p> A BitVector32 structure can be set up to contain either sections for small integers or bit flags for Booleans, but not both. A <a class=\"xref\" href=\"system.collections.specialized.bitvector32.section\" data-linktype=\"relative-path\">BitVector32+Section</a> is a window into the BitVector32 and is composed of the smallest number of consecutive bits that can contain the maximum value specified in <a class=\"xref\" href=\"system.collections.specialized.bitvector32#System_Collections_Specialized_BitVector32_CreateSection_\" data-linktype=\"relative-path\">CreateSection</a>. For example, a section with a maximum value of 1 is composed of only one bit, whereas a section with a maximum value of 5 is composed of three bits. You can create a <a class=\"xref\" href=\"system.collections.specialized.bitvector32.section\" data-linktype=\"relative-path\">BitVector32+Section</a> with a maximum value of 1 to serve as a Boolean, thereby allowing you to store integers and Booleans in the same BitVector32.  </p>\n<p> Some members can be used for a BitVector32 that is set up as sections, while other members can be used for one that is set up as bit flags. For example, the <a class=\"xref\" href=\"system.collections.specialized.bitvector32#System_Collections_Specialized_BitVector32_Item_\" data-linktype=\"relative-path\">Item</a> property is the indexer for a BitVector32 that is set up as sections, and the <a class=\"xref\" href=\"system.collections.specialized.bitvector32#System_Collections_Specialized_BitVector32_Item_\" data-linktype=\"relative-path\">Item</a> property is the indexer for a BitVector32 that is set up as bit flags. <a class=\"xref\" href=\"system.collections.specialized.bitvector32#System_Collections_Specialized_BitVector32_CreateMask_\" data-linktype=\"relative-path\">CreateMask</a> creates a series of masks that can be used to access individual bits in a BitVector32 that is set up as bit flags.  </p>\n<p> Using a mask on a BitVector32 that is set up as sections might cause unexpected results.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_BitVector32__ctor_System_Collections_Specialized_BitVector32_\" data-linktype=\"self-bookmark\">BitVector32(BitVector32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a> structure containing the data represented in an existing <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a> structure.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_BitVector32__ctor_System_Int32_\" data-linktype=\"self-bookmark\">BitVector32(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a> structure containing the data represented in an integer.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_BitVector32_Data\" data-linktype=\"self-bookmark\">Data</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a> as an integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_BitVector32_Item_System_Collections_Specialized_BitVector32_Section_\" data-linktype=\"self-bookmark\">Item(BitVector32+Section)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the value stored in the specified <a class=\"xref\" href=\"system.collections.specialized.bitvector32.section\" data-linktype=\"relative-path\">BitVector32+Section</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_BitVector32_Item_System_Int32_\" data-linktype=\"self-bookmark\">Item(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the state of the bit flag indicated by the specified mask.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_BitVector32_CreateMask\" data-linktype=\"self-bookmark\">CreateMask()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates the first mask in a series of masks that can be used to retrieve individual bits in a <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a> that is set up as bit flags.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_BitVector32_CreateMask_System_Int32_\" data-linktype=\"self-bookmark\">CreateMask(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an additional mask following the specified mask in a series of masks that can be used to retrieve individual bits in a <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a> that is set up as bit flags.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_BitVector32_CreateSection_System_Int16_\" data-linktype=\"self-bookmark\">CreateSection(Int16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates the first <a class=\"xref\" href=\"system.collections.specialized.bitvector32.section\" data-linktype=\"relative-path\">BitVector32+Section</a> in a series of sections that contain small integers.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_BitVector32_CreateSection_System_Int16_System_Collections_Specialized_BitVector32_Section_\" data-linktype=\"self-bookmark\">CreateSection(Int16,BitVector32+Section)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new <a class=\"xref\" href=\"system.collections.specialized.bitvector32.section\" data-linktype=\"relative-path\">BitVector32+Section</a> following the specified <a class=\"xref\" href=\"system.collections.specialized.bitvector32.section\" data-linktype=\"relative-path\">BitVector32+Section</a> in a series of sections that contain small integers.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_BitVector32_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the specified object is equal to the <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_BitVector32_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Serves as a hash function for the <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_BitVector32_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string that represents the current <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_BitVector32_ToString_System_Collections_Specialized_BitVector32_\" data-linktype=\"self-bookmark\">ToString(BitVector32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string that represents the specified <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_BitVector32__ctor_System_Collections_Specialized_BitVector32_\">\r\n    \r\n            <a id=\"System_Collections_Specialized_BitVector32__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BitVector32(BitVector32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a> structure containing the data represented in an existing <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a> structure.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public BitVector32 (System.Collections.Specialized.BitVector32 value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a> structure that contains the data to copy.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_BitVector32__ctor_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_Specialized_BitVector32__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BitVector32(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a> structure containing the data represented in an integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public BitVector32 (int data);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>data</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer representing the data of the new <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_BitVector32_Data\">\r\n    \r\n            <a id=\"System_Collections_Specialized_BitVector32_Data_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Data</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a> as an integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Data { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The value of the <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a> as an integer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To access the value of the individual sections or bit flags, use the <a class=\"xref\" href=\"system.collections.specialized.bitvector32#System_Collections_Specialized_BitVector32_Item_\" data-linktype=\"relative-path\">Item</a> property.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_BitVector32_Item_System_Collections_Specialized_BitVector32_Section_\">\r\n    \r\n            <a id=\"System_Collections_Specialized_BitVector32_Item_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Item(BitVector32+Section)</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the value stored in the specified <a class=\"xref\" href=\"system.collections.specialized.bitvector32.section\" data-linktype=\"relative-path\">BitVector32+Section</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int this[System.Collections.Specialized.BitVector32.Section section] { get; set; }</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>section</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.specialized.bitvector32.section\" data-linktype=\"relative-path\">BitVector32+Section</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.collections.specialized.bitvector32.section\" data-linktype=\"relative-path\">BitVector32+Section</a> that contains the value to get or set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The value stored in the specified <a class=\"xref\" href=\"system.collections.specialized.bitvector32.section\" data-linktype=\"relative-path\">BitVector32+Section</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.collections.specialized.bitvector32#System_Collections_Specialized_BitVector32_Item_\" data-linktype=\"relative-path\">Item</a> [Section] property is the indexer for a <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a> that is set up as sections, and the <a class=\"xref\" href=\"system.collections.specialized.bitvector32#System_Collections_Specialized_BitVector32_Item_\" data-linktype=\"relative-path\">Item</a> [int] property is the indexer for a <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a> that is set up as bit flags.  </p>\n<p> A <a class=\"xref\" href=\"system.collections.specialized.bitvector32.section\" data-linktype=\"relative-path\">BitVector32+Section</a> is a window into the <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a> and is composed of the smallest number of consecutive bits that can contain the maximum value specified in <a class=\"xref\" href=\"system.collections.specialized.bitvector32#System_Collections_Specialized_BitVector32_CreateSection_\" data-linktype=\"relative-path\">CreateSection</a>. For example, a section with a maximum value of 1 is composed of only one bit, whereas a section with a maximum value of 5 is composed of three bits. You can create a <a class=\"xref\" href=\"system.collections.specialized.bitvector32.section\" data-linktype=\"relative-path\">BitVector32+Section</a> with a maximum value of 1 to serve as a Boolean, thereby allowing you to store integers and Booleans in the same <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a>.  </p>\n<p> The C# language uses the  keyword to define the indexers instead of implementing the Item property. Visual Basic implements Item as a default property, which provides the same indexing functionality.  </p>\n<p> Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_BitVector32_Item_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_Specialized_BitVector32_Item_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Item(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the state of the bit flag indicated by the specified mask.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool this[int bit] { get; set; }</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A mask that indicates the bit to get or set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the specified bit flag is on (1); otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Item [Section] property is the indexer for a <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a> that is set up as sections, and the Item [int] property is the indexer for a <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a> that is set up as bit flags.  </p>\n<p> Using this property on a <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a> that is set up as sections might cause unexpected results.  </p>\n<p> The C# language uses the  keyword to define the indexers instead of implementing the Item property. Visual Basic implements Item as a default property, which provides the same indexing functionality.  </p>\n<p> Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_BitVector32_CreateMask\">\r\n    \r\n            <a id=\"System_Collections_Specialized_BitVector32_CreateMask_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateMask()</div>        \r\n          </div>\r\n    \r\n            <p>Creates the first mask in a series of masks that can be used to retrieve individual bits in a <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a> that is set up as bit flags.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int CreateMask ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A mask that isolates the first bit flag in the <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use <code>CreateMask()</code> to create the first mask in a series and <code>CreateMask(int)</code> for all subsequent masks.  </p>\n<p> Multiple masks can be created to refer to the same bit flag.  </p>\n<p> The resulting mask isolates only one bit flag in the <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a>. You can combine masks using the bitwise OR operation to create a mask that isolates multiple bit flags in the <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a>.  </p>\n<p> Using a mask on a <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a> that is set up as sections might cause unexpected results.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to create and use masks.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.Specialized.BitVector32.CreateMasks#1\">using System;\nusing System.Collections.Specialized;\n\n\npublic class SamplesBitVector32  {\n\n   public static void Main()  {\n\n      // Creates and initializes a BitVector32 with all bit flags set to FALSE.\n      BitVector32 myBV = new BitVector32( 0 );\n\n      // Creates masks to isolate each of the first five bit flags.\n      int myBit1 = BitVector32.CreateMask();\n      int myBit2 = BitVector32.CreateMask( myBit1 );\n      int myBit3 = BitVector32.CreateMask( myBit2 );\n      int myBit4 = BitVector32.CreateMask( myBit3 );\n      int myBit5 = BitVector32.CreateMask( myBit4 );\n      Console.WriteLine( &quot;Initial:               &nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myBV.ToString() );\n\n      // Sets the third bit to TRUE.\n      myBV[myBit3] = true;\n      Console.WriteLine( &quot;myBit3 = TRUE          &nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myBV.ToString() );\n\n      // Combines two masks to access multiple bits at a time.\n      myBV[myBit4 + myBit5] = true;\n      Console.WriteLine( &quot;myBit4 + myBit5 = TRUE &nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myBV.ToString() );\n      myBV[myBit1 | myBit2] = true;\n      Console.WriteLine( &quot;myBit1 | myBit2 = TRUE &nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myBV.ToString() );\n\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nInitial:                BitVector32{00000000000000000000000000000000}\nmyBit3 = TRUE           BitVector32{00000000000000000000000000000100}\nmyBit4 + myBit5 = TRUE  BitVector32{00000000000000000000000000011100}\nmyBit1 | myBit2 = TRUE  BitVector32{00000000000000000000000000011111}\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Collections.Specialized.BitVector32.CreateMasks#1\">#using &lt;system.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections::Specialized;\nint main()\n{\n   // Creates and initializes a BitVector32 with all bit flags set to FALSE.\n   BitVector32 myBV;\n\n   // Creates masks to isolate each of the first five bit flags.\n   int myBit1 = BitVector32::CreateMask();\n   int myBit2 = BitVector32::CreateMask( myBit1 );\n   int myBit3 = BitVector32::CreateMask( myBit2 );\n   int myBit4 = BitVector32::CreateMask( myBit3 );\n   int myBit5 = BitVector32::CreateMask( myBit4 );\n   Console::WriteLine( &quot;Initial:               &nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myBV );\n\n   // Sets the third bit to TRUE.\n   myBV[ myBit3 ] = true;\n   Console::WriteLine( &quot;myBit3 = TRUE          &nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myBV );\n\n   // Combines two masks to access multiple bits at a time.\n   myBV[ myBit4 + myBit5 ] = true;\n   Console::WriteLine( &quot;myBit4 + myBit5 = TRUE &nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myBV );\n   myBV[ myBit1 | myBit2 ] = true;\n   Console::WriteLine( &quot;myBit1 | myBit2 = TRUE &nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myBV );\n}\n\n/*\nThis code produces the following output.\n\nInitial:                BitVector32 {00000000000000000000000000000000}\nmyBit3 = TRUE           BitVector32 {00000000000000000000000000000100}\nmyBit4 + myBit5 = TRUE  BitVector32 {00000000000000000000000000011100}\nmyBit1 | myBit2 = TRUE  BitVector32 {00000000000000000000000000011111}\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Specialized.BitVector32.CreateMasks#1\">Imports System\nImports System.Collections.Specialized\n\n\nPublic Class SamplesBitVector32\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a BitVector32 with all bit flags set to FALSE.\n      Dim myBV As New BitVector32(0)\n      \n      &#39; Creates masks to isolate each of the first five bit flags.\n      Dim myBit1 As Integer = BitVector32.CreateMask()\n      Dim myBit2 As Integer = BitVector32.CreateMask(myBit1)\n      Dim myBit3 As Integer = BitVector32.CreateMask(myBit2)\n      Dim myBit4 As Integer = BitVector32.CreateMask(myBit3)\n      Dim myBit5 As Integer = BitVector32.CreateMask(myBit4)\n      Console.WriteLine(&quot;Initial:               &quot; + ControlChars.Tab + &quot;{0}&quot;, myBV.ToString())\n      \n      &#39; Sets the third bit to TRUE.\n      myBV(myBit3) = True\n      Console.WriteLine(&quot;myBit3 = TRUE          &quot; + ControlChars.Tab + &quot;{0}&quot;, myBV.ToString())\n      \n      &#39; Combines two masks to access multiple bits at a time.\n      myBV((myBit4 + myBit5)) = True\n      Console.WriteLine(&quot;myBit4 + myBit5 = TRUE &quot; + ControlChars.Tab + &quot;{0}&quot;, myBV.ToString())\n      myBV((myBit1 Or myBit2)) = True\n      Console.WriteLine(&quot;myBit1 | myBit2 = TRUE &quot; + ControlChars.Tab + &quot;{0}&quot;, myBV.ToString())\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesBitVector32\n\n\n&#39; This code produces the following output.\n&#39;\n&#39; Initial:                BitVector32{00000000000000000000000000000000}\n&#39; myBit3 = TRUE           BitVector32{00000000000000000000000000000100}\n&#39; myBit4 + myBit5 = TRUE  BitVector32{00000000000000000000000000011100}\n&#39; myBit1 | myBit2 = TRUE  BitVector32{00000000000000000000000000011111}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_BitVector32_CreateMask_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_Specialized_BitVector32_CreateMask_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateMask(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Creates an additional mask following the specified mask in a series of masks that can be used to retrieve individual bits in a <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a> that is set up as bit flags.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int CreateMask (int previous);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>previous</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The mask that indicates the previous bit flag.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A mask that isolates the bit flag following the one that <code>previous</code> points to in <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>previous</code> indicates the last bit flag in the <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use <code>CreateMask()</code> to create the first mask in a series and <code>CreateMask(int)</code> for all subsequent masks.  </p>\n<p> Multiple masks can be created to refer to the same bit flag.  </p>\n<p> The resulting mask isolates only one bit flag in the <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a>. You can combine masks using the bitwise OR operation to create a mask that isolates multiple bit flags in the <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a>.  </p>\n<p> Using a mask on a <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a> that is set up as sections might cause unexpected results.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to create and use masks.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.Specialized.BitVector32.CreateMasks#1\">using System;\nusing System.Collections.Specialized;\n\n\npublic class SamplesBitVector32  {\n\n   public static void Main()  {\n\n      // Creates and initializes a BitVector32 with all bit flags set to FALSE.\n      BitVector32 myBV = new BitVector32( 0 );\n\n      // Creates masks to isolate each of the first five bit flags.\n      int myBit1 = BitVector32.CreateMask();\n      int myBit2 = BitVector32.CreateMask( myBit1 );\n      int myBit3 = BitVector32.CreateMask( myBit2 );\n      int myBit4 = BitVector32.CreateMask( myBit3 );\n      int myBit5 = BitVector32.CreateMask( myBit4 );\n      Console.WriteLine( &quot;Initial:               &nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myBV.ToString() );\n\n      // Sets the third bit to TRUE.\n      myBV[myBit3] = true;\n      Console.WriteLine( &quot;myBit3 = TRUE          &nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myBV.ToString() );\n\n      // Combines two masks to access multiple bits at a time.\n      myBV[myBit4 + myBit5] = true;\n      Console.WriteLine( &quot;myBit4 + myBit5 = TRUE &nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myBV.ToString() );\n      myBV[myBit1 | myBit2] = true;\n      Console.WriteLine( &quot;myBit1 | myBit2 = TRUE &nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myBV.ToString() );\n\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nInitial:                BitVector32{00000000000000000000000000000000}\nmyBit3 = TRUE           BitVector32{00000000000000000000000000000100}\nmyBit4 + myBit5 = TRUE  BitVector32{00000000000000000000000000011100}\nmyBit1 | myBit2 = TRUE  BitVector32{00000000000000000000000000011111}\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Collections.Specialized.BitVector32.CreateMasks#1\">#using &lt;system.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections::Specialized;\nint main()\n{\n   // Creates and initializes a BitVector32 with all bit flags set to FALSE.\n   BitVector32 myBV;\n\n   // Creates masks to isolate each of the first five bit flags.\n   int myBit1 = BitVector32::CreateMask();\n   int myBit2 = BitVector32::CreateMask( myBit1 );\n   int myBit3 = BitVector32::CreateMask( myBit2 );\n   int myBit4 = BitVector32::CreateMask( myBit3 );\n   int myBit5 = BitVector32::CreateMask( myBit4 );\n   Console::WriteLine( &quot;Initial:               &nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myBV );\n\n   // Sets the third bit to TRUE.\n   myBV[ myBit3 ] = true;\n   Console::WriteLine( &quot;myBit3 = TRUE          &nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myBV );\n\n   // Combines two masks to access multiple bits at a time.\n   myBV[ myBit4 + myBit5 ] = true;\n   Console::WriteLine( &quot;myBit4 + myBit5 = TRUE &nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myBV );\n   myBV[ myBit1 | myBit2 ] = true;\n   Console::WriteLine( &quot;myBit1 | myBit2 = TRUE &nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myBV );\n}\n\n/*\nThis code produces the following output.\n\nInitial:                BitVector32 {00000000000000000000000000000000}\nmyBit3 = TRUE           BitVector32 {00000000000000000000000000000100}\nmyBit4 + myBit5 = TRUE  BitVector32 {00000000000000000000000000011100}\nmyBit1 | myBit2 = TRUE  BitVector32 {00000000000000000000000000011111}\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Specialized.BitVector32.CreateMasks#1\">Imports System\nImports System.Collections.Specialized\n\n\nPublic Class SamplesBitVector32\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a BitVector32 with all bit flags set to FALSE.\n      Dim myBV As New BitVector32(0)\n      \n      &#39; Creates masks to isolate each of the first five bit flags.\n      Dim myBit1 As Integer = BitVector32.CreateMask()\n      Dim myBit2 As Integer = BitVector32.CreateMask(myBit1)\n      Dim myBit3 As Integer = BitVector32.CreateMask(myBit2)\n      Dim myBit4 As Integer = BitVector32.CreateMask(myBit3)\n      Dim myBit5 As Integer = BitVector32.CreateMask(myBit4)\n      Console.WriteLine(&quot;Initial:               &quot; + ControlChars.Tab + &quot;{0}&quot;, myBV.ToString())\n      \n      &#39; Sets the third bit to TRUE.\n      myBV(myBit3) = True\n      Console.WriteLine(&quot;myBit3 = TRUE          &quot; + ControlChars.Tab + &quot;{0}&quot;, myBV.ToString())\n      \n      &#39; Combines two masks to access multiple bits at a time.\n      myBV((myBit4 + myBit5)) = True\n      Console.WriteLine(&quot;myBit4 + myBit5 = TRUE &quot; + ControlChars.Tab + &quot;{0}&quot;, myBV.ToString())\n      myBV((myBit1 Or myBit2)) = True\n      Console.WriteLine(&quot;myBit1 | myBit2 = TRUE &quot; + ControlChars.Tab + &quot;{0}&quot;, myBV.ToString())\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesBitVector32\n\n\n&#39; This code produces the following output.\n&#39;\n&#39; Initial:                BitVector32{00000000000000000000000000000000}\n&#39; myBit3 = TRUE           BitVector32{00000000000000000000000000000100}\n&#39; myBit4 + myBit5 = TRUE  BitVector32{00000000000000000000000000011100}\n&#39; myBit1 | myBit2 = TRUE  BitVector32{00000000000000000000000000011111}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_BitVector32_CreateSection_System_Int16_\">\r\n    \r\n            <a id=\"System_Collections_Specialized_BitVector32_CreateSection_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateSection(Int16)</div>        \r\n          </div>\r\n    \r\n            <p>Creates the first <a class=\"xref\" href=\"system.collections.specialized.bitvector32.section\" data-linktype=\"relative-path\">BitVector32+Section</a> in a series of sections that contain small integers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Specialized.BitVector32.Section CreateSection (short maxValue);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>maxValue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A 16-bit signed integer that specifies the maximum value for the new <a class=\"xref\" href=\"system.collections.specialized.bitvector32.section\" data-linktype=\"relative-path\">BitVector32+Section</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.specialized.bitvector32.section\" data-linktype=\"relative-path\">BitVector32+Section</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.collections.specialized.bitvector32.section\" data-linktype=\"relative-path\">BitVector32+Section</a> that can hold a number from zero to <code>maxValue</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>maxValue</code> is less than 1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A <a class=\"xref\" href=\"system.collections.specialized.bitvector32.section\" data-linktype=\"relative-path\">BitVector32+Section</a> is a window into the <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a> and is composed of the smallest number of consecutive bits that can contain the maximum value specified in CreateSection. For example, a section with a maximum value of 1 is composed of only one bit, whereas a section with a maximum value of 5 is composed of three bits. You can create a <a class=\"xref\" href=\"system.collections.specialized.bitvector32.section\" data-linktype=\"relative-path\">BitVector32+Section</a> with a maximum value of 1 to serve as a Boolean, thereby allowing you to store integers and Booleans in the same <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a>.  </p>\n<p> If sections already exist in the <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a>, those sections are still accessible; however, overlapping sections might cause unexpected results.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses a <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a> as a collection of sections.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.Specialized.BitVector32_Sections#1\">#using &lt;system.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections::Specialized;\n\nint main()\n{\n   // Creates and initializes a BitVector32.\n   BitVector32 myBV(0);\n\n   // Creates four sections in the BitVector32 with maximum values 6, 3, 1, and 15.\n   // mySect3, which uses exactly one bit, can also be used as a bit flag.\n   BitVector32::Section mySect1 = BitVector32::CreateSection( 6 );\n   BitVector32::Section mySect2 = BitVector32::CreateSection( 3, mySect1 );\n   BitVector32::Section mySect3 = BitVector32::CreateSection( 1, mySect2 );\n   BitVector32::Section mySect4 = BitVector32::CreateSection( 15, mySect3 );\n\n   // Displays the values of the sections.\n   Console::WriteLine( &quot;Initial values:&quot; );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;mySect1: {0}&quot;, myBV[ mySect1 ] );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;mySect2: {0}&quot;, myBV[ mySect2 ] );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;mySect3: {0}&quot;, myBV[ mySect3 ] );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;mySect4: {0}&quot;, myBV[ mySect4 ] );\n\n   // Sets each section to a new value and displays the value of the BitVector32 at each step.\n   Console::WriteLine( &quot;Changing the values of each section:&quot; );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;Initial:    &nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myBV );\n   myBV[ mySect1 ] = 5;\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;mySect1 = 5:&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myBV );\n   myBV[ mySect2 ] = 3;\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;mySect2 = 3:&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myBV );\n   myBV[ mySect3 ] = 1;\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;mySect3 = 1:&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myBV );\n   myBV[ mySect4 ] = 9;\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;mySect4 = 9:&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myBV );\n\n   // Displays the values of the sections.\n   Console::WriteLine( &quot;New values:&quot; );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;mySect1: {0}&quot;, myBV[ mySect1 ] );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;mySect2: {0}&quot;, myBV[ mySect2 ] );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;mySect3: {0}&quot;, myBV[ mySect3 ] );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;mySect4: {0}&quot;, myBV[ mySect4 ] );\n}\n\n/*\nThis code produces the following output.\n\nInitial values:\n        mySect1: 0\n        mySect2: 0\n        mySect3: 0\n        mySect4: 0\nChanging the values of each section:\n        Initial:        BitVector32 {00000000000000000000000000000000}\n        mySect1 = 5:    BitVector32 {00000000000000000000000000000101}\n        mySect2 = 3:    BitVector32 {00000000000000000000000000011101}\n        mySect3 = 1:    BitVector32 {00000000000000000000000000111101}\n        mySect4 = 9:    BitVector32 {00000000000000000000001001111101}\nNew values:\n        mySect1: 5\n        mySect2: 3\n        mySect3: 1\n        mySect4: 9\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.Specialized.BitVector32_Sections#1\">using System;\nusing System.Collections.Specialized;\n\n\npublic class SamplesBitVector32  {\n\n   public static void Main()  {\n\n      // Creates and initializes a BitVector32.\n      BitVector32 myBV = new BitVector32( 0 );\n\n      // Creates four sections in the BitVector32 with maximum values 6, 3, 1, and 15.\n      // mySect3, which uses exactly one bit, can also be used as a bit flag.\n      BitVector32.Section mySect1 = BitVector32.CreateSection( 6 );\n      BitVector32.Section mySect2 = BitVector32.CreateSection( 3, mySect1 );\n      BitVector32.Section mySect3 = BitVector32.CreateSection( 1, mySect2 );\n      BitVector32.Section mySect4 = BitVector32.CreateSection( 15, mySect3 );\n\n      // Displays the values of the sections.\n      Console.WriteLine( &quot;Initial values:&quot; );\n      Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;mySect1: {0}&quot;, myBV[mySect1] );\n      Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;mySect2: {0}&quot;, myBV[mySect2] );\n      Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;mySect3: {0}&quot;, myBV[mySect3] );\n      Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;mySect4: {0}&quot;, myBV[mySect4] );\n\n      // Sets each section to a new value and displays the value of the BitVector32 at each step.\n      Console.WriteLine( &quot;Changing the values of each section:&quot; );\n      Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;Initial:    &nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myBV.ToString() );\n      myBV[mySect1] = 5;\n      Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;mySect1 = 5:&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myBV.ToString() );\n      myBV[mySect2] = 3;\n      Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;mySect2 = 3:&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myBV.ToString() );\n      myBV[mySect3] = 1;\n      Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;mySect3 = 1:&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myBV.ToString() );\n      myBV[mySect4] = 9;\n      Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;mySect4 = 9:&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myBV.ToString() );\n\n      // Displays the values of the sections.\n      Console.WriteLine( &quot;New values:&quot; );\n      Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;mySect1: {0}&quot;, myBV[mySect1] );\n      Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;mySect2: {0}&quot;, myBV[mySect2] );\n      Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;mySect3: {0}&quot;, myBV[mySect3] );\n      Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;mySect4: {0}&quot;, myBV[mySect4] );\n\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nInitial values:\n        mySect1: 0\n        mySect2: 0\n        mySect3: 0\n        mySect4: 0\nChanging the values of each section:\n        Initial:        BitVector32{00000000000000000000000000000000}\n        mySect1 = 5:    BitVector32{00000000000000000000000000000101}\n        mySect2 = 3:    BitVector32{00000000000000000000000000011101}\n        mySect3 = 1:    BitVector32{00000000000000000000000000111101}\n        mySect4 = 9:    BitVector32{00000000000000000000001001111101}\nNew values:\n        mySect1: 5\n        mySect2: 3\n        mySect3: 1\n        mySect4: 9\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Specialized.BitVector32_Sections#1\">Imports System\nImports System.Collections.Specialized\n\nPublic Class SamplesBitVector32\n   \n   Public Shared Sub Main()\n      \n      &#39; Creates and initializes a BitVector32.\n      Dim myBV As New BitVector32(0)\n      \n      &#39; Creates four sections in the BitVector32 with maximum values 6, 3, 1, and 15.\n      &#39; mySect3, which uses exactly one bit, can also be used as a bit flag.\n      Dim mySect1 As BitVector32.Section = BitVector32.CreateSection(6)\n      Dim mySect2 As BitVector32.Section = BitVector32.CreateSection(3, mySect1)\n      Dim mySect3 As BitVector32.Section = BitVector32.CreateSection(1, mySect2)\n      Dim mySect4 As BitVector32.Section = BitVector32.CreateSection(15, mySect3)\n      \n      &#39; Displays the values of the sections.\n      Console.WriteLine(&quot;Initial values:&quot;)\n      Console.WriteLine(ControlChars.Tab + &quot;mySect1: {0}&quot;, myBV(mySect1))\n      Console.WriteLine(ControlChars.Tab + &quot;mySect2: {0}&quot;, myBV(mySect2))\n      Console.WriteLine(ControlChars.Tab + &quot;mySect3: {0}&quot;, myBV(mySect3))\n      Console.WriteLine(ControlChars.Tab + &quot;mySect4: {0}&quot;, myBV(mySect4))\n      \n      &#39; Sets each section to a new value and displays the value of the BitVector32 at each step.\n      Console.WriteLine(&quot;Changing the values of each section:&quot;)\n      Console.WriteLine(ControlChars.Tab + &quot;Initial:    &quot; + ControlChars.Tab + &quot;{0}&quot;, myBV.ToString())\n      myBV(mySect1) = 5\n      Console.WriteLine(ControlChars.Tab + &quot;mySect1 = 5:&quot; + ControlChars.Tab + &quot;{0}&quot;, myBV.ToString())\n      myBV(mySect2) = 3\n      Console.WriteLine(ControlChars.Tab + &quot;mySect2 = 3:&quot; + ControlChars.Tab + &quot;{0}&quot;, myBV.ToString())\n      myBV(mySect3) = 1\n      Console.WriteLine(ControlChars.Tab + &quot;mySect3 = 1:&quot; + ControlChars.Tab + &quot;{0}&quot;, myBV.ToString())\n      myBV(mySect4) = 9\n      Console.WriteLine(ControlChars.Tab + &quot;mySect4 = 9:&quot; + ControlChars.Tab + &quot;{0}&quot;, myBV.ToString())\n      \n      &#39; Displays the values of the sections.\n      Console.WriteLine(&quot;New values:&quot;)\n      Console.WriteLine(ControlChars.Tab + &quot;mySect1: {0}&quot;, myBV(mySect1))\n      Console.WriteLine(ControlChars.Tab + &quot;mySect2: {0}&quot;, myBV(mySect2))\n      Console.WriteLine(ControlChars.Tab + &quot;mySect3: {0}&quot;, myBV(mySect3))\n      Console.WriteLine(ControlChars.Tab + &quot;mySect4: {0}&quot;, myBV(mySect4))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesBitVector32\n\n\n&#39; This code produces the following output.\n&#39;\n&#39; Initial values:\n&#39;        mySect1: 0\n&#39;        mySect2: 0\n&#39;        mySect3: 0\n&#39;        mySect4: 0\n&#39; Changing the values of each section:\n&#39;        Initial:        BitVector32{00000000000000000000000000000000}\n&#39;        mySect1 = 5:    BitVector32{00000000000000000000000000000101}\n&#39;        mySect2 = 3:    BitVector32{00000000000000000000000000011101}\n&#39;        mySect3 = 1:    BitVector32{00000000000000000000000000111101}\n&#39;        mySect4 = 9:    BitVector32{00000000000000000000001001111101}\n&#39; New values:\n&#39;        mySect1: 5\n&#39;        mySect2: 3\n&#39;        mySect3: 1\n&#39;        mySect4: 9\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_BitVector32_CreateSection_System_Int16_System_Collections_Specialized_BitVector32_Section_\">\r\n    \r\n            <a id=\"System_Collections_Specialized_BitVector32_CreateSection_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateSection(Int16,BitVector32+Section)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new <a class=\"xref\" href=\"system.collections.specialized.bitvector32.section\" data-linktype=\"relative-path\">BitVector32+Section</a> following the specified <a class=\"xref\" href=\"system.collections.specialized.bitvector32.section\" data-linktype=\"relative-path\">BitVector32+Section</a> in a series of sections that contain small integers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Specialized.BitVector32.Section CreateSection (short maxValue, System.Collections.Specialized.BitVector32.Section previous);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>maxValue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A 16-bit signed integer that specifies the maximum value for the new <a class=\"xref\" href=\"system.collections.specialized.bitvector32.section\" data-linktype=\"relative-path\">BitVector32+Section</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>previous</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.specialized.bitvector32.section\" data-linktype=\"relative-path\">BitVector32+Section</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The previous <a class=\"xref\" href=\"system.collections.specialized.bitvector32.section\" data-linktype=\"relative-path\">BitVector32+Section</a> in the <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.specialized.bitvector32.section\" data-linktype=\"relative-path\">BitVector32+Section</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.collections.specialized.bitvector32.section\" data-linktype=\"relative-path\">BitVector32+Section</a> that can hold a number from zero to <code>maxValue</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>maxValue</code> is less than 1.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>previous</code> includes the final bit in the <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a>.  </p>\n<p> -or-  </p>\n<p> <code>maxValue</code> is greater than the highest value that can be represented by the number of bits after <code>previous</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A <a class=\"xref\" href=\"system.collections.specialized.bitvector32.section\" data-linktype=\"relative-path\">BitVector32+Section</a> is a window into the <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a> and is composed of the smallest number of consecutive bits that can contain the maximum value specified in <a class=\"xref\" href=\"system.collections.specialized.bitvector32#System_Collections_Specialized_BitVector32_CreateSection_\" data-linktype=\"relative-path\">CreateSection</a>. For example, a section with a maximum value of 1 is composed of only one bit, whereas a section with a maximum value of 5 is composed of three bits. You can create a <a class=\"xref\" href=\"system.collections.specialized.bitvector32.section\" data-linktype=\"relative-path\">BitVector32+Section</a> with a maximum value of 1 to serve as a Boolean, thereby allowing you to store integers and Booleans in the same <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a>.  </p>\n<p> If sections already exist after <code>previous</code> in the <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a>, those sections are still accessible; however, overlapping sections might cause unexpected results.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses a <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a> as a collection of sections.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.Specialized.BitVector32_Sections#1\">#using &lt;system.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections::Specialized;\n\nint main()\n{\n   // Creates and initializes a BitVector32.\n   BitVector32 myBV(0);\n\n   // Creates four sections in the BitVector32 with maximum values 6, 3, 1, and 15.\n   // mySect3, which uses exactly one bit, can also be used as a bit flag.\n   BitVector32::Section mySect1 = BitVector32::CreateSection( 6 );\n   BitVector32::Section mySect2 = BitVector32::CreateSection( 3, mySect1 );\n   BitVector32::Section mySect3 = BitVector32::CreateSection( 1, mySect2 );\n   BitVector32::Section mySect4 = BitVector32::CreateSection( 15, mySect3 );\n\n   // Displays the values of the sections.\n   Console::WriteLine( &quot;Initial values:&quot; );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;mySect1: {0}&quot;, myBV[ mySect1 ] );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;mySect2: {0}&quot;, myBV[ mySect2 ] );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;mySect3: {0}&quot;, myBV[ mySect3 ] );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;mySect4: {0}&quot;, myBV[ mySect4 ] );\n\n   // Sets each section to a new value and displays the value of the BitVector32 at each step.\n   Console::WriteLine( &quot;Changing the values of each section:&quot; );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;Initial:    &nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myBV );\n   myBV[ mySect1 ] = 5;\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;mySect1 = 5:&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myBV );\n   myBV[ mySect2 ] = 3;\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;mySect2 = 3:&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myBV );\n   myBV[ mySect3 ] = 1;\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;mySect3 = 1:&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myBV );\n   myBV[ mySect4 ] = 9;\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;mySect4 = 9:&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myBV );\n\n   // Displays the values of the sections.\n   Console::WriteLine( &quot;New values:&quot; );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;mySect1: {0}&quot;, myBV[ mySect1 ] );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;mySect2: {0}&quot;, myBV[ mySect2 ] );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;mySect3: {0}&quot;, myBV[ mySect3 ] );\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;mySect4: {0}&quot;, myBV[ mySect4 ] );\n}\n\n/*\nThis code produces the following output.\n\nInitial values:\n        mySect1: 0\n        mySect2: 0\n        mySect3: 0\n        mySect4: 0\nChanging the values of each section:\n        Initial:        BitVector32 {00000000000000000000000000000000}\n        mySect1 = 5:    BitVector32 {00000000000000000000000000000101}\n        mySect2 = 3:    BitVector32 {00000000000000000000000000011101}\n        mySect3 = 1:    BitVector32 {00000000000000000000000000111101}\n        mySect4 = 9:    BitVector32 {00000000000000000000001001111101}\nNew values:\n        mySect1: 5\n        mySect2: 3\n        mySect3: 1\n        mySect4: 9\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.Specialized.BitVector32_Sections#1\">using System;\nusing System.Collections.Specialized;\n\n\npublic class SamplesBitVector32  {\n\n   public static void Main()  {\n\n      // Creates and initializes a BitVector32.\n      BitVector32 myBV = new BitVector32( 0 );\n\n      // Creates four sections in the BitVector32 with maximum values 6, 3, 1, and 15.\n      // mySect3, which uses exactly one bit, can also be used as a bit flag.\n      BitVector32.Section mySect1 = BitVector32.CreateSection( 6 );\n      BitVector32.Section mySect2 = BitVector32.CreateSection( 3, mySect1 );\n      BitVector32.Section mySect3 = BitVector32.CreateSection( 1, mySect2 );\n      BitVector32.Section mySect4 = BitVector32.CreateSection( 15, mySect3 );\n\n      // Displays the values of the sections.\n      Console.WriteLine( &quot;Initial values:&quot; );\n      Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;mySect1: {0}&quot;, myBV[mySect1] );\n      Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;mySect2: {0}&quot;, myBV[mySect2] );\n      Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;mySect3: {0}&quot;, myBV[mySect3] );\n      Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;mySect4: {0}&quot;, myBV[mySect4] );\n\n      // Sets each section to a new value and displays the value of the BitVector32 at each step.\n      Console.WriteLine( &quot;Changing the values of each section:&quot; );\n      Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;Initial:    &nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myBV.ToString() );\n      myBV[mySect1] = 5;\n      Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;mySect1 = 5:&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myBV.ToString() );\n      myBV[mySect2] = 3;\n      Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;mySect2 = 3:&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myBV.ToString() );\n      myBV[mySect3] = 1;\n      Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;mySect3 = 1:&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myBV.ToString() );\n      myBV[mySect4] = 9;\n      Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;mySect4 = 9:&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myBV.ToString() );\n\n      // Displays the values of the sections.\n      Console.WriteLine( &quot;New values:&quot; );\n      Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;mySect1: {0}&quot;, myBV[mySect1] );\n      Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;mySect2: {0}&quot;, myBV[mySect2] );\n      Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;mySect3: {0}&quot;, myBV[mySect3] );\n      Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;mySect4: {0}&quot;, myBV[mySect4] );\n\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nInitial values:\n        mySect1: 0\n        mySect2: 0\n        mySect3: 0\n        mySect4: 0\nChanging the values of each section:\n        Initial:        BitVector32{00000000000000000000000000000000}\n        mySect1 = 5:    BitVector32{00000000000000000000000000000101}\n        mySect2 = 3:    BitVector32{00000000000000000000000000011101}\n        mySect3 = 1:    BitVector32{00000000000000000000000000111101}\n        mySect4 = 9:    BitVector32{00000000000000000000001001111101}\nNew values:\n        mySect1: 5\n        mySect2: 3\n        mySect3: 1\n        mySect4: 9\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Specialized.BitVector32_Sections#1\">Imports System\nImports System.Collections.Specialized\n\nPublic Class SamplesBitVector32\n   \n   Public Shared Sub Main()\n      \n      &#39; Creates and initializes a BitVector32.\n      Dim myBV As New BitVector32(0)\n      \n      &#39; Creates four sections in the BitVector32 with maximum values 6, 3, 1, and 15.\n      &#39; mySect3, which uses exactly one bit, can also be used as a bit flag.\n      Dim mySect1 As BitVector32.Section = BitVector32.CreateSection(6)\n      Dim mySect2 As BitVector32.Section = BitVector32.CreateSection(3, mySect1)\n      Dim mySect3 As BitVector32.Section = BitVector32.CreateSection(1, mySect2)\n      Dim mySect4 As BitVector32.Section = BitVector32.CreateSection(15, mySect3)\n      \n      &#39; Displays the values of the sections.\n      Console.WriteLine(&quot;Initial values:&quot;)\n      Console.WriteLine(ControlChars.Tab + &quot;mySect1: {0}&quot;, myBV(mySect1))\n      Console.WriteLine(ControlChars.Tab + &quot;mySect2: {0}&quot;, myBV(mySect2))\n      Console.WriteLine(ControlChars.Tab + &quot;mySect3: {0}&quot;, myBV(mySect3))\n      Console.WriteLine(ControlChars.Tab + &quot;mySect4: {0}&quot;, myBV(mySect4))\n      \n      &#39; Sets each section to a new value and displays the value of the BitVector32 at each step.\n      Console.WriteLine(&quot;Changing the values of each section:&quot;)\n      Console.WriteLine(ControlChars.Tab + &quot;Initial:    &quot; + ControlChars.Tab + &quot;{0}&quot;, myBV.ToString())\n      myBV(mySect1) = 5\n      Console.WriteLine(ControlChars.Tab + &quot;mySect1 = 5:&quot; + ControlChars.Tab + &quot;{0}&quot;, myBV.ToString())\n      myBV(mySect2) = 3\n      Console.WriteLine(ControlChars.Tab + &quot;mySect2 = 3:&quot; + ControlChars.Tab + &quot;{0}&quot;, myBV.ToString())\n      myBV(mySect3) = 1\n      Console.WriteLine(ControlChars.Tab + &quot;mySect3 = 1:&quot; + ControlChars.Tab + &quot;{0}&quot;, myBV.ToString())\n      myBV(mySect4) = 9\n      Console.WriteLine(ControlChars.Tab + &quot;mySect4 = 9:&quot; + ControlChars.Tab + &quot;{0}&quot;, myBV.ToString())\n      \n      &#39; Displays the values of the sections.\n      Console.WriteLine(&quot;New values:&quot;)\n      Console.WriteLine(ControlChars.Tab + &quot;mySect1: {0}&quot;, myBV(mySect1))\n      Console.WriteLine(ControlChars.Tab + &quot;mySect2: {0}&quot;, myBV(mySect2))\n      Console.WriteLine(ControlChars.Tab + &quot;mySect3: {0}&quot;, myBV(mySect3))\n      Console.WriteLine(ControlChars.Tab + &quot;mySect4: {0}&quot;, myBV(mySect4))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesBitVector32\n\n\n&#39; This code produces the following output.\n&#39;\n&#39; Initial values:\n&#39;        mySect1: 0\n&#39;        mySect2: 0\n&#39;        mySect3: 0\n&#39;        mySect4: 0\n&#39; Changing the values of each section:\n&#39;        Initial:        BitVector32{00000000000000000000000000000000}\n&#39;        mySect1 = 5:    BitVector32{00000000000000000000000000000101}\n&#39;        mySect2 = 3:    BitVector32{00000000000000000000000000011101}\n&#39;        mySect3 = 1:    BitVector32{00000000000000000000000000111101}\n&#39;        mySect4 = 9:    BitVector32{00000000000000000000001001111101}\n&#39; New values:\n&#39;        mySect1: 5\n&#39;        mySect2: 3\n&#39;        mySect3: 1\n&#39;        mySect4: 9\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_BitVector32_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_Specialized_BitVector32_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the specified object is equal to the <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object o);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>o</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to compare with the current <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the specified object is equal to the <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The object <code>o</code> is considered equal to the <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a> if the type of <code>o</code> is compatible with the <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a> type and if the value of <code>o</code> is equal to the value of <a class=\"xref\" href=\"system.collections.specialized.bitvector32#System_Collections_Specialized_BitVector32_Data_\" data-linktype=\"relative-path\">Data</a>.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example compares a <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a> with another <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a> and with an <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.Specialized.BitVector32.Equals#1\">#using &lt;system.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections::Specialized;\n\nint main()\n{\n   // Creates and initializes a BitVector32 with the value 123.\n   // This is the BitVector32 that will be compared to different types.\n   BitVector32 myBV(123);\n\n   // Creates and initializes a new BitVector32 which will be set up as sections.\n   BitVector32 myBVsect(0);\n\n   // Compares myBV and myBVsect.\n   Console::WriteLine( &quot;myBV                 : {0}&quot;, myBV );\n   Console::WriteLine( &quot;myBVsect             : {0}&quot;, myBVsect );\n   if ( myBV.Equals( myBVsect ) )\n      Console::WriteLine( &quot;   myBV( {0}) equals myBVsect( {1}).&quot;, myBV.Data, myBVsect.Data );\n   else\n      Console::WriteLine( &quot;   myBV( {0}) does not equal myBVsect( {1}).&quot;, myBV.Data, myBVsect.Data );\n\n   Console::WriteLine();\n\n   // Assigns values to the sections of myBVsect.\n   BitVector32::Section mySect1 = BitVector32::CreateSection( 5 );\n   BitVector32::Section mySect2 = BitVector32::CreateSection( 1, mySect1 );\n   BitVector32::Section mySect3 = BitVector32::CreateSection( 20, mySect2 );\n   myBVsect[ mySect1 ] = 3;\n   myBVsect[ mySect2 ] = 1;\n   myBVsect[ mySect3 ] = 7;\n\n   // Compares myBV and myBVsect.\n   Console::WriteLine( &quot;myBV                 : {0}&quot;, myBV );\n   Console::WriteLine( &quot;myBVsect with values : {0}&quot;, myBVsect );\n   if ( myBV.Equals( myBVsect ) )\n      Console::WriteLine( &quot;   myBV( {0}) equals myBVsect( {1}).&quot;, myBV.Data, myBVsect.Data );\n   else\n      Console::WriteLine( &quot;   myBV( {0}) does not equal myBVsect( {1}).&quot;, myBV.Data, myBVsect.Data );\n\n   Console::WriteLine();\n\n   // Compare myBV with an Int32.\n   Console::WriteLine( &quot;Comparing myBV with an Int32: &quot; );\n   Int32 myInt32 = 123;\n\n   // Using Equals will fail because Int32 is not compatible with BitVector32.\n   if ( myBV.Equals( myInt32 ) )\n      Console::WriteLine( &quot;   Using BitVector32::Equals, myBV( {0}) equals myInt32( {1}).&quot;, myBV.Data, myInt32 );\n   else\n      Console::WriteLine( &quot;   Using BitVector32::Equals, myBV( {0}) does not equal myInt32( {1}).&quot;, myBV.Data, myInt32 );\n\n   // To compare a BitVector32 with an Int32, use the &quot;==&quot; operator.\n   if ( myBV.Data == myInt32 )\n      Console::WriteLine( &quot;   Using the \\&quot;==\\&quot; operator, myBV.Data( {0}) equals myInt32( {1}).&quot;, myBV.Data, myInt32 );\n   else\n      Console::WriteLine( &quot;   Using the \\&quot;==\\&quot; operator, myBV.Data( {0}) does not equal myInt32( {1}).&quot;, myBV.Data, myInt32 );\n}\n\n/*\nThis code produces the following output.\n\nmyBV                 : BitVector32 {00000000000000000000000001111011}\nmyBVsect             : BitVector32 {00000000000000000000000000000000}\n   myBV(123) does not equal myBVsect(0).\n\nmyBV                 : BitVector32 {00000000000000000000000001111011}\nmyBVsect with values : BitVector32 {00000000000000000000000001111011}\n   myBV(123) equals myBVsect(123).\n\nComparing myBV with an Int32:\n   Using BitVector32::Equals, myBV(123) does not equal myInt32(123).\n   Using the &quot;==&quot; operator, myBV.Data(123) equals myInt32(123).\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.Specialized.BitVector32.Equals#1\">using System;\nusing System.Collections.Specialized;\n\n\npublic class SamplesBitVector32  {\n\n   public static void Main()  {\n\n      // Creates and initializes a BitVector32 with the value 123.\n      // This is the BitVector32 that will be compared to different types.\n      BitVector32 myBV = new BitVector32( 123 );\n\n      // Creates and initializes a new BitVector32 which will be set up as sections.\n      BitVector32 myBVsect = new BitVector32( 0 );\n\n      // Compares myBV and myBVsect.\n      Console.WriteLine( &quot;myBV                 : {0}&quot;, myBV.ToString() );\n      Console.WriteLine( &quot;myBVsect             : {0}&quot;, myBVsect.ToString() );\n      if ( myBV.Equals( myBVsect ) )\n         Console.WriteLine( &quot;   myBV({0}) equals myBVsect({1}).&quot;, myBV.Data, myBVsect.Data );\n      else\n         Console.WriteLine( &quot;   myBV({0}) does not equal myBVsect({1}).&quot;, myBV.Data, myBVsect.Data );\n      Console.WriteLine();\n\n      // Assigns values to the sections of myBVsect.\n      BitVector32.Section mySect1 = BitVector32.CreateSection( 5 );\n      BitVector32.Section mySect2 = BitVector32.CreateSection( 1, mySect1 );\n      BitVector32.Section mySect3 = BitVector32.CreateSection( 20, mySect2 );\n      myBVsect[mySect1] = 3;\n      myBVsect[mySect2] = 1;\n      myBVsect[mySect3] = 7;\n\n      // Compares myBV and myBVsect.\n      Console.WriteLine( &quot;myBV                 : {0}&quot;, myBV.ToString() );\n      Console.WriteLine( &quot;myBVsect with values : {0}&quot;, myBVsect.ToString() );\n      if ( myBV.Equals( myBVsect ) )\n         Console.WriteLine( &quot;   myBV({0}) equals myBVsect({1}).&quot;, myBV.Data, myBVsect.Data );\n      else\n         Console.WriteLine( &quot;   myBV({0}) does not equal myBVsect({1}).&quot;, myBV.Data, myBVsect.Data );\n      Console.WriteLine();\n\n      // Compare myBV with an Int32.\n      Console.WriteLine( &quot;Comparing myBV with an Int32: &quot; );\n      Int32 myInt32 = 123;\n      // Using Equals will fail because Int32 is not compatible with BitVector32.\n      if ( myBV.Equals( myInt32 ) )\n         Console.WriteLine( &quot;   Using BitVector32.Equals, myBV({0}) equals myInt32({1}).&quot;, myBV.Data, myInt32 );\n      else\n         Console.WriteLine( &quot;   Using BitVector32.Equals, myBV({0}) does not equal myInt32({1}).&quot;, myBV.Data, myInt32 );\n      // To compare a BitVector32 with an Int32, use the &quot;==&quot; operator.\n      if ( myBV.Data == myInt32 )\n         Console.WriteLine( &quot;   Using the \\&quot;==\\&quot; operator, myBV.Data({0}) equals myInt32({1}).&quot;, myBV.Data, myInt32 );\n      else\n         Console.WriteLine( &quot;   Using the \\&quot;==\\&quot; operator, myBV.Data({0}) does not equal myInt32({1}).&quot;, myBV.Data, myInt32 );\n      \n   }\n\n}\n\n/*\nThis code produces the following output.\n\nmyBV                 : BitVector32{00000000000000000000000001111011}\nmyBVsect             : BitVector32{00000000000000000000000000000000}\n   myBV(123) does not equal myBVsect(0).\n\nmyBV                 : BitVector32{00000000000000000000000001111011}\nmyBVsect with values : BitVector32{00000000000000000000000001111011}\n   myBV(123) equals myBVsect(123).\n\nComparing myBV with an Int32:\n   Using BitVector32.Equals, myBV(123) does not equal myInt32(123).\n   Using the &quot;==&quot; operator, myBV.Data(123) equals myInt32(123).\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Specialized.BitVector32.Equals#1\">Imports System\nImports System.Collections.Specialized\n\n\nPublic Class SamplesBitVector32\n\n   Public Shared Sub Main()\n      \n      &#39; Creates and initializes a BitVector32 with the value 123.\n      &#39; This is the BitVector32 that will be compared to different types.\n      Dim myBV As New BitVector32(123)\n      \n      &#39; Creates and initializes a new BitVector32 which will be set up as sections.\n      Dim myBVsect As New BitVector32(0)\n      \n      &#39; Compares myBV and myBVsect.\n      Console.WriteLine(&quot;myBV                 : {0}&quot;, myBV.ToString())\n      Console.WriteLine(&quot;myBVsect             : {0}&quot;, myBVsect.ToString())\n      If myBV.Equals(myBVsect) Then\n         Console.WriteLine(&quot;   myBV({0}) equals myBVsect({1}).&quot;, myBV.Data, myBVsect.Data)\n      Else\n         Console.WriteLine(&quot;   myBV({0}) does not equal myBVsect({1}).&quot;, myBV.Data, myBVsect.Data)\n      End If\n      Console.WriteLine()\n      \n      &#39; Assigns values to the sections of myBVsect.\n      Dim mySect1 As BitVector32.Section = BitVector32.CreateSection(5)\n      Dim mySect2 As BitVector32.Section = BitVector32.CreateSection(1, mySect1)\n      Dim mySect3 As BitVector32.Section = BitVector32.CreateSection(20, mySect2)\n      myBVsect(mySect1) = 3\n      myBVsect(mySect2) = 1\n      myBVsect(mySect3) = 7\n      \n      &#39; Compares myBV and myBVsect.\n      Console.WriteLine(&quot;myBV                 : {0}&quot;, myBV.ToString())\n      Console.WriteLine(&quot;myBVsect with values : {0}&quot;, myBVsect.ToString())\n      If myBV.Equals(myBVsect) Then\n         Console.WriteLine(&quot;   myBV({0}) equals myBVsect({1}).&quot;, myBV.Data, myBVsect.Data)\n      Else\n         Console.WriteLine(&quot;   myBV({0}) does not equal myBVsect({1}).&quot;, myBV.Data, myBVsect.Data)\n      End If\n      Console.WriteLine()\n      \n      &#39; Compare myBV with an Int32.\n      Console.WriteLine(&quot;Comparing myBV with an Int32: &quot;)\n      Dim myInt32 As Int32 = 123\n      &#39; Using Equals will fail because Int32 is not compatible with BitVector32.\n      If myBV.Equals(myInt32) Then\n         Console.WriteLine(&quot;   Using BitVector32.Equals, myBV({0}) equals myInt32({1}).&quot;, myBV.Data, myInt32)\n      Else\n         Console.WriteLine(&quot;   Using BitVector32.Equals, myBV({0}) does not equal myInt32({1}).&quot;, myBV.Data, myInt32)\n      End If &#39; To compare a BitVector32 with an Int32, use the &quot;==&quot; operator.\n      If myBV.Data = myInt32 Then\n         Console.WriteLine(&quot;   Using the &quot;&quot;==&quot;&quot; operator, myBV.Data({0}) equals myInt32({1}).&quot;, myBV.Data, myInt32)\n      Else\n         Console.WriteLine(&quot;   Using the &quot;&quot;==&quot;&quot; operator, myBV.Data({0}) does not equal myInt32({1}).&quot;, myBV.Data, myInt32)\n      End If \n\n   End Sub &#39;Main\n\nEnd Class &#39;SamplesBitVector32 \n\n\n&#39; This code produces the following output.\n&#39;\n&#39; myBV                 : BitVector32{00000000000000000000000001111011}\n&#39; myBVsect             : BitVector32{00000000000000000000000000000000}\n&#39;    myBV(123) does not equal myBVsect(0).\n&#39;\n&#39; myBV                 : BitVector32{00000000000000000000000001111011}\n&#39; myBVsect with values : BitVector32{00000000000000000000000001111011}\n&#39;    myBV(123) equals myBVsect(123).\n&#39;\n&#39; Comparing myBV with an Int32:\n&#39;    Using BitVector32.Equals, myBV(123) does not equal myInt32(123).\n&#39;    Using the &quot;==&quot; operator, myBV.Data(123) equals myInt32(123).\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_BitVector32_GetHashCode\">\r\n    \r\n            <a id=\"System_Collections_Specialized_BitVector32_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Serves as a hash function for the <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A hash code for the <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The hash code of a <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a> is based on the value of <a class=\"xref\" href=\"system.collections.specialized.bitvector32#System_Collections_Specialized_BitVector32_Data_\" data-linktype=\"relative-path\">Data</a>. Two instances of <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a> with the same value for <a class=\"xref\" href=\"system.collections.specialized.bitvector32#System_Collections_Specialized_BitVector32_Data_\" data-linktype=\"relative-path\">Data</a> will also generate the same hash code.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_BitVector32_ToString\">\r\n    \r\n            <a id=\"System_Collections_Specialized_BitVector32_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string that represents the current <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that represents the current <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method overrides <a class=\"xref\" href=\"system.object#System_Object_ToString_\" data-linktype=\"relative-path\">ToString</a>.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_BitVector32_ToString_System_Collections_Specialized_BitVector32_\">\r\n    \r\n            <a id=\"System_Collections_Specialized_BitVector32_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(BitVector32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string that represents the specified <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ToString (System.Collections.Specialized.BitVector32 value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a> to represent.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that represents the specified <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Collections.Specialized.BitVector32.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Collections.Specialized.BitVector32.yml\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.BitVector32\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.BitVector32..ctor\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.BitVector32.CreateMask\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.BitVector32.CreateSection\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.BitVector32.Data\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.BitVector32.Equals\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.BitVector32.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.BitVector32.Item\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.BitVector32.ToString\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"29ee0e7c-13cb-9b5a-8617-7761dbdf20c4\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\o2y0\\s\\fulldocset\\xml\\System.Collections.Specialized\\BitVector32.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides a simple structure that stores Boolean values and small integers in 32 bits of memory.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Collections.Specialized/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Collections.Specialized.BitVector32\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Collections.Specialized.BitVector32.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Collections.Specialized.BitVector32.yml","open_to_public_contributors":true,"api_name":["System.Collections.Specialized.BitVector32","System.Collections.Specialized.BitVector32..ctor","System.Collections.Specialized.BitVector32.CreateMask","System.Collections.Specialized.BitVector32.CreateSection","System.Collections.Specialized.BitVector32.Data","System.Collections.Specialized.BitVector32.Equals","System.Collections.Specialized.BitVector32.GetHashCode","System.Collections.Specialized.BitVector32.Item","System.Collections.Specialized.BitVector32.ToString"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Collections.Specialized.BitVector32","System::Collections::Specialized::BitVector32","System.Collections.Specialized.BitVector32.#ctor","System::Collections::Specialized::BitVector32::#ctor","System.Collections.Specialized.BitVector32.CreateMask","System::Collections::Specialized::BitVector32::CreateMask","System.Collections.Specialized.BitVector32.CreateSection","System::Collections::Specialized::BitVector32::CreateSection","System.Collections.Specialized.BitVector32.Data","System::Collections::Specialized::BitVector32::Data","System.Collections.Specialized.BitVector32.Equals","System::Collections::Specialized::BitVector32::Equals","System.Collections.Specialized.BitVector32.GetHashCode","System::Collections::Specialized::BitVector32::GetHashCode","System.Collections.Specialized.BitVector32.Item","System::Collections::Specialized::BitVector32::Item","System.Collections.Specialized.BitVector32.ToString","System::Collections::Specialized::BitVector32::ToString"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"29ee0e7c-13cb-9b5a-8617-7761dbdf20c4","original_ecmaxml_local_path":"W:\\o2y0\\s\\fulldocset\\xml\\System.Collections.Specialized\\BitVector32.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Collections.Specialized/BitVector32.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"BitVector32 struct | Microsoft Docs","_op_ogTitle":"BitVector32 struct","description":"Provides a simple structure that stores Boolean values and small integers in 32 bits of memory.\n","toc_asset_id":"_splitted/System.Collections.Specialized/toc.json","toc_rel":"_splitted/System.Collections.Specialized/toc.json","source_url":"","ms.assetid":"System.Collections.Specialized.BitVector32","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.collections.specialized.bitvector32","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.collections.specialized.bitvector32","fileRelativePath":"System.Collections.Specialized.BitVector32.html"},"themesRelativePathToOutputRoot":"_themes/"}