{"content":"    \r\n    <h1 id=\"System_Web_UI_WebControls_EditCommandColumn\">\r\n      <span class=\"lang-csharp\">EditCommandColumn</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>A special column type for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control that contains the <code>Edit</code> buttons for editing data items in each row.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class EditCommandColumn : System.Web.UI.WebControls.DataGridColumn</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcolumn\" data-linktype=\"relative-path\">System.Web.UI.WebControls.DataGridColumn</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">EditCommandColumn</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcolumn#System_Web_UI_WebControls_DataGridColumn_DesignMode\" data-linktype=\"relative-path\">DesignMode</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcolumn#System_Web_UI_WebControls_DataGridColumn_FooterStyle\" data-linktype=\"relative-path\">FooterStyle</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcolumn#System_Web_UI_WebControls_DataGridColumn_FooterText\" data-linktype=\"relative-path\">FooterText</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcolumn#System_Web_UI_WebControls_DataGridColumn_HeaderImageUrl\" data-linktype=\"relative-path\">HeaderImageUrl</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcolumn#System_Web_UI_WebControls_DataGridColumn_HeaderStyle\" data-linktype=\"relative-path\">HeaderStyle</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcolumn#System_Web_UI_WebControls_DataGridColumn_HeaderText\" data-linktype=\"relative-path\">HeaderText</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcolumn#System_Web_UI_WebControls_DataGridColumn_Initialize\" data-linktype=\"relative-path\">Initialize()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcolumn#System_Web_UI_WebControls_DataGridColumn_IsTrackingViewState\" data-linktype=\"relative-path\">IsTrackingViewState</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcolumn#System_Web_UI_WebControls_DataGridColumn_ItemStyle\" data-linktype=\"relative-path\">ItemStyle</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcolumn#System_Web_UI_WebControls_DataGridColumn_LoadViewState_System_Object_\" data-linktype=\"relative-path\">LoadViewState(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcolumn#System_Web_UI_WebControls_DataGridColumn_OnColumnChanged\" data-linktype=\"relative-path\">OnColumnChanged()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcolumn#System_Web_UI_WebControls_DataGridColumn_Owner\" data-linktype=\"relative-path\">Owner</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcolumn#System_Web_UI_WebControls_DataGridColumn_SaveViewState\" data-linktype=\"relative-path\">SaveViewState()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcolumn#System_Web_UI_WebControls_DataGridColumn_SortExpression\" data-linktype=\"relative-path\">SortExpression</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcolumn#System_Web_UI_WebControls_DataGridColumn_System_Web_UI_IStateManager_IsTrackingViewState\" data-linktype=\"relative-path\">IStateManager.IsTrackingViewState</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcolumn#System_Web_UI_WebControls_DataGridColumn_System_Web_UI_IStateManager_LoadViewState_System_Object_\" data-linktype=\"relative-path\">IStateManager.LoadViewState(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcolumn#System_Web_UI_WebControls_DataGridColumn_System_Web_UI_IStateManager_SaveViewState\" data-linktype=\"relative-path\">IStateManager.SaveViewState()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcolumn#System_Web_UI_WebControls_DataGridColumn_System_Web_UI_IStateManager_TrackViewState\" data-linktype=\"relative-path\">IStateManager.TrackViewState()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcolumn#System_Web_UI_WebControls_DataGridColumn_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcolumn#System_Web_UI_WebControls_DataGridColumn_TrackViewState\" data-linktype=\"relative-path\">TrackViewState()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcolumn#System_Web_UI_WebControls_DataGridColumn_ViewState\" data-linktype=\"relative-path\">ViewState</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcolumn#System_Web_UI_WebControls_DataGridColumn_Visible\" data-linktype=\"relative-path\">Visible</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Use the EditCommandColumn class to create a special column for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control that contains the <code>Edit</code>, <code>Update</code>, and <code>Cancel</code> buttons for each data row in the grid. These buttons allow you to edit the values of a row in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<p> If no row is selected, an <code>Edit</code> button displays in the EditCommandColumn object for each data row in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control. When the <code>Edit</code> button for an item is clicked, the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_EditCommand\" data-linktype=\"relative-path\">EditCommand</a> event is raised and the <code>Edit</code> button is replaced with the <code>Update</code> and <code>Cancel</code> buttons. You need to provide code to handle the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_EditCommand\" data-linktype=\"relative-path\">EditCommand</a> event. A typical event handler sets the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_EditItemIndex_\" data-linktype=\"relative-path\">EditItemIndex</a> property to the selected row, and then rebinds the data to the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> You must provide values for the <a class=\"xref\" href=\"system.web.ui.webcontrols.editcommandcolumn#System_Web_UI_WebControls_EditCommandColumn_CancelText_\" data-linktype=\"relative-path\">CancelText</a>, <a class=\"xref\" href=\"system.web.ui.webcontrols.editcommandcolumn#System_Web_UI_WebControls_EditCommandColumn_EditText_\" data-linktype=\"relative-path\">EditText</a>, and <a class=\"xref\" href=\"system.web.ui.webcontrols.editcommandcolumn#System_Web_UI_WebControls_EditCommandColumn_UpdateText_\" data-linktype=\"relative-path\">UpdateText</a> properties. Otherwise, the associated buttons will not appear in the EditCommandColumn.  </p>\n</div>\n<p> The buttons in the EditCommandColumn can be set to display as hyperlinks or push buttons by setting the <a class=\"xref\" href=\"system.web.ui.webcontrols.editcommandcolumn#System_Web_UI_WebControls_EditCommandColumn_ButtonType_\" data-linktype=\"relative-path\">ButtonType</a> property.  </p>\n<p> Clicking the <code>Update</code> or <code>Cancel</code> button raises the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_UpdateCommand\" data-linktype=\"relative-path\">UpdateCommand</a> or <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_CancelCommand\" data-linktype=\"relative-path\">CancelCommand</a> event, respectively. You need to provide code to handle these events.  </p>\n<p> A typical handler for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_UpdateCommand\" data-linktype=\"relative-path\">UpdateCommand</a> event updates the data, sets the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_EditItemIndex_\" data-linktype=\"relative-path\">EditItemIndex</a> property to <code>-1</code> (to deselect the item), and then rebinds the data to the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<p> A typical handler for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_CancelCommand\" data-linktype=\"relative-path\">CancelCommand</a> event sets the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_EditItemIndex_\" data-linktype=\"relative-path\">EditItemIndex</a> property to <code>-1</code> (to deselect the item), and then rebinds the data to the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> The EditCommandColumn object can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. You can use validation controls to verify user input before displaying the input text in a <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  ASP.NET provides an input request validation feature to block script and HTML in user input. For more information, see <a href=\"../Topic/Securing%20Standard%20Controls.md\" data-linktype=\"relative-path\">Securing Standard Controls</a>, <a href=\"../Topic/How%20to:%20Protect%20Against%20Script%20Exploits%20in%20a%20Web%20Application%20by%20Applying%20HTML%20Encoding%20to%20Strings.md\" data-linktype=\"relative-path\">How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings</a>, and <a href=\"../Topic/Validating%20User%20Input%20in%20ASP.NET%20Web%20Pages.md\" data-linktype=\"relative-path\">Validating User Input in ASP.NET Web Pages</a>.  </p>\n</div>\n<p> By default, page validation is performed when an <code>Update</code> button in the  EditCommandColumn control is clicked. Page validation determines whether the input controls that are associated with a validation control on the page all pass the validation rules that are specified by the validation control. To prevent page validation from occurring, set the <a class=\"xref\" href=\"system.web.ui.webcontrols.editcommandcolumn#System_Web_UI_WebControls_EditCommandColumn_CausesValidation_\" data-linktype=\"relative-path\">CausesValidation</a> property to <code>false</code>.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_EditCommandColumn__ctor\" data-linktype=\"self-bookmark\">EditCommandColumn()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.web.ui.webcontrols.editcommandcolumn\" data-linktype=\"relative-path\">EditCommandColumn</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_EditCommandColumn_ButtonType\" data-linktype=\"self-bookmark\">ButtonType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the button type for the column.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_EditCommandColumn_CancelText\" data-linktype=\"self-bookmark\">CancelText</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the text to display for the <code>Cancel</code> command button in the <a class=\"xref\" href=\"system.web.ui.webcontrols.editcommandcolumn\" data-linktype=\"relative-path\">EditCommandColumn</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_EditCommandColumn_CausesValidation\" data-linktype=\"self-bookmark\">CausesValidation</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether validation is performed when an <code>Update</code> button in the <a class=\"xref\" href=\"system.web.ui.webcontrols.editcommandcolumn\" data-linktype=\"relative-path\">EditCommandColumn</a> object is clicked.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_EditCommandColumn_EditText\" data-linktype=\"self-bookmark\">EditText</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the text to display for the <code>Edit</code> button in the <a class=\"xref\" href=\"system.web.ui.webcontrols.editcommandcolumn\" data-linktype=\"relative-path\">EditCommandColumn</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_EditCommandColumn_UpdateText\" data-linktype=\"self-bookmark\">UpdateText</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the text to display for the <code>Update</code> command button in the <a class=\"xref\" href=\"system.web.ui.webcontrols.editcommandcolumn\" data-linktype=\"relative-path\">EditCommandColumn</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_EditCommandColumn_ValidationGroup\" data-linktype=\"self-bookmark\">ValidationGroup</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the group of validation controls for which the <a class=\"xref\" href=\"system.web.ui.webcontrols.editcommandcolumn\" data-linktype=\"relative-path\">EditCommandColumn</a> object causes validation when it posts back to the server.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_EditCommandColumn_InitializeCell_System_Web_UI_WebControls_TableCell_System_Int32_System_Web_UI_WebControls_ListItemType_\" data-linktype=\"self-bookmark\">InitializeCell(TableCell,Int32,ListItemType)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a cell within the column.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_EditCommandColumn__ctor\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_EditCommandColumn__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EditCommandColumn()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.web.ui.webcontrols.editcommandcolumn\" data-linktype=\"relative-path\">EditCommandColumn</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public EditCommandColumn ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this constructor to create and initialize a new instance of the <a class=\"xref\" href=\"system.web.ui.webcontrols.editcommandcolumn\" data-linktype=\"relative-path\">EditCommandColumn</a> class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to create and initialize a new instance of the <a class=\"xref\" href=\"system.web.ui.webcontrols.editcommandcolumn\" data-linktype=\"relative-path\">EditCommandColumn</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic EditCommandColumn.EditCommandColumn Example#1\">    Sub Page_Load(sender As Object, e As EventArgs)\n        Dim editcolumn As New EditCommandColumn()\n    End Sub &#39;Page_Load \n</code></pre><pre><code class=\"lang-cs\" name=\"Classic EditCommandColumn.EditCommandColumn Example#1\">void Page_Load(Object sender, EventArgs e) \n{\n\n   EditCommandColumn editcolumn = new EditCommandColumn(); \n                  \n}   \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_EditCommandColumn_ButtonType\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_EditCommandColumn_ButtonType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ButtonType</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the button type for the column.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Web.UI.WebControls.ButtonColumnType ButtonType { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.buttoncolumntype\" data-linktype=\"relative-path\">ButtonColumnType</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.web.ui.webcontrols.buttoncolumntype\" data-linktype=\"relative-path\">ButtonColumnType</a> values. The default value is <code>LinkButton</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The specified button type is not one of the <a class=\"xref\" href=\"system.web.ui.webcontrols.buttoncolumntype\" data-linktype=\"relative-path\">ButtonColumnType</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the ButtonType property to specify whether the buttons in the column display as push buttons or hyperlinks.  </p>\n<p> The value of this property is stored in view state.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the ButtonType property to display the <code>Edit</code> command buttons as push buttons.  </p>\n<pre><code class=\"lang-cs\" name=\"DataGridEdit#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      // The Cart and CartView objects temporarily store the data source\n      // for the DataGrid control while the page is being processed.\n      DataTable Cart = new DataTable();\n      DataView CartView;   \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // With a database, use an select query to retrieve the data. Because \n         // the data source in this example is an in-memory DataTable, retrieve\n         // the data from session state if it exists; otherwise, create the data\n         // source.\n         GetSource();\n\n         // The DataGrid control maintains state between posts to the server;\n         // it only needs to be bound to a data source the first time the page\n         // is loaded or when the data source is updated.\n         if (!IsPostBack)\n         {\n\n            BindGrid();\n\n         }\n                   \n      }\n \n      void ItemsGrid_Edit(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to the index of the item clicked \n         // in the DataGrid control to enable editing for that item. Be sure\n         // to rebind the DateGrid to the data source to refresh the control.\n         ItemsGrid.EditItemIndex = e.Item.ItemIndex;\n         BindGrid();\n\n      }\n \n      void ItemsGrid_Cancel(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DateGrid to the data source to refresh\n         // the control.\n         ItemsGrid.EditItemIndex = -1;\n         BindGrid();\n\n      }\n \n      void ItemsGrid_Update(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Retrieve the text boxes that contain the values to update.\n         // For bound columns, the edited value is stored in a TextBox.\n         // The TextBox is the 0th control in a cell&#39;s Controls collection.\n         // Each cell in the Cells collection of a DataGrid item represents\n         // a column in the DataGrid control.\n         TextBox qtyText = (TextBox)e.Item.Cells[3].Controls[0];\n         TextBox priceText = (TextBox)e.Item.Cells[4].Controls[0];\n \n         // Retrieve the updated values.\n         String item = e.Item.Cells[2].Text;\n         String qty = qtyText.Text;\n         String price = priceText.Text;\n        \n         DataRow dr;\n \n         // With a database, use an update command to update the data. \n         // Because the data source in this example is an in-memory \n         // DataTable, delete the old row and replace it with a new one.\n \n         // Remove the old entry and clear the row filter.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0)\n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n \n         // ***************************************************************\n         // Insert data validation code here. Be sure to validate the\n         // values entered by the user before converting to the appropriate\n         // data types and updating the data source.\n         // ***************************************************************\n\n         // Add the new entry.\n         dr = Cart.NewRow();\n         dr[0] = Convert.ToInt32(qty);\n         dr[1] = item;\n\n         // If necessary, remove the &#39;$&#39; character from the price before \n         // converting it to a Double.\n         if(price[0] == &#39;$&#39;)\n         {\n            dr[2] = Convert.ToDouble(price.Substring(1));\n         }\n         else\n         {\n            dr[2] = Convert.ToDouble(price);\n         }\n\n         Cart.Rows.Add(dr);\n \n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DateGrid to the data source to refresh\n         // the control.\n         ItemsGrid.EditItemIndex = -1;\n         BindGrid();\n\n      }\n \n      void BindGrid() \n      {\n\n         // Set the data source and bind to the Data Grid control.\n         ItemsGrid.DataSource = CartView;\n         ItemsGrid.DataBind();\n\n      }\n\n      void GetSource()\n      {\n\n         // For this example, the data source is a DataTable that is stored\n         // in session state. If the data source does not exist, create it;\n         //  otherwise, load the data.\n         if (Session[&quot;ShoppingCart&quot;] == null) \n         {     \n\n            // Create the sample data.\n            DataRow dr;  \n \n            // Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(Int32)));\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(Double)));\n\n            // Store the table in session state to persist its values \n            // between posts to the server.\n            Session[&quot;ShoppingCart&quot;] = Cart;\n             \n            // Populate the DataTable with sample data.\n            for (int i = 1; i &lt;= 9; i++) \n            {\n               dr = Cart.NewRow();\n               if (i % 2 != 0)\n               {\n                  dr[0] = 2;\n               }\n               else\n               {\n                  dr[0] = 1;\n               }\n               dr[1] = &quot;Item &quot; + i.ToString();\n               dr[2] = (1.23 * (i + 1));\n               Cart.Rows.Add(dr);\n            }\n\n         } \n\n         else\n         {\n\n            // Retrieve the sample data from session state.\n            Cart = (DataTable)Session[&quot;ShoppingCart&quot;];\n\n         }         \n \n         // Create a DataView and specify the field to sort by.\n         CartView = new DataView(Cart);\n         CartView.Sort=&quot;Item&quot;;\n\n         return;\n\n      }\n\n      void ItemsGrid_Command(Object sender, DataGridCommandEventArgs e)\n      {\n\n         switch(((LinkButton)e.CommandSource).CommandName)\n         {\n\n            case &quot;Delete&quot;:\n               DeleteItem(e);\n               break;\n\n            // Add other cases here, if there are multiple ButtonColumns in \n            // the DataGrid control.\n\n            default:\n               // Do nothing.\n               break;\n\n         }\n\n      }\n\n      void DeleteItem(DataGridCommandEventArgs e)\n      {\n\n         // e.Item is the table row where the command is raised. For bound\n         // columns, the value is stored in the Text property of a TableCell.\n         TableCell itemCell = e.Item.Cells[2];\n         string item = itemCell.Text;\n\n         // Remove the selected item from the data source.         \n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0) \n         {     \n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // Rebind the data source to refresh the DataGrid control.\n         BindGrid();\n\n      }\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           OnEditCommand=&quot;ItemsGrid_Edit&quot;\n           OnCancelCommand=&quot;ItemsGrid_Cancel&quot;\n           OnUpdateCommand=&quot;ItemsGrid_Update&quot;\n           OnItemCommand=&quot;ItemsGrid_Command&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit item&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;False&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;False&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;\n\n            &lt;asp:ButtonColumn \n                 HeaderText=&quot;Delete item&quot; \n                 ButtonType=&quot;LinkButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot;/&gt;  \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;True&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot;\n                 DataField=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridEdit#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      &#39; The Cart and CartView objects temporarily store the data source\n      &#39; for the DataGrid control while the page is being processed.\n      Dim Cart As DataTable = New DataTable()\n      Dim CartView As DataView    \n \n      Sub Page_Load(sender As Object, e As EventArgs) \n \n         &#39; With a database, use an select query to retrieve the data. Because \n         &#39; the data source in this example is an in-memory DataTable, retrieve\n         &#39; the data from session state if it exists; otherwise create the data\n         &#39; source.\n         GetSource()\n\n         &#39; The DataGrid control maintains state between posts to the server;\n         &#39; it only needs to be bound to a data source the first time the page\n         &#39; is loaded or when the data source is updated.\n         If Not IsPostBack Then\n\n            BindGrid()\n\n         End If\n                   \n      End Sub\n \n      Sub ItemsGrid_Edit(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to the index of the item clicked \n         &#39; in the DataGrid control to enable editing for that item. Be sure\n         &#39; to rebind the DateGrid to the data source to refresh the control.\n         ItemsGrid.EditItemIndex = e.Item.ItemIndex\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Cancel(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode.\n         &#39; Be sure to rebind the DateGrid to the data source to refresh\n         &#39; the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Update(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Retrieve the text boxes that contain the values to update.\n         &#39; For bound columns, the edited value is stored in a TextBox.\n         &#39; The TextBox is the 0th control in a cell&#39;s Controls collection.\n         &#39; Each cell in the Cells collection of a DataGrid item represents\n         &#39; a column in the DataGrid control.\n         Dim qtyText As TextBox = CType(e.Item.Cells(3).Controls(0), TextBox)\n         Dim priceText As TextBox = CType(e.Item.Cells(4).Controls(0), TextBox)\n \n         &#39; Retrieve the updated values.\n         Dim item As String = e.Item.Cells(2).Text\n         Dim qty As String = qtyText.Text\n         Dim price As String = priceText.Text\n        \n         Dim dr As DataRow\n \n         &#39; With a database, use an update command to update the data. \n         &#39; Because the data source in this example is an in-memory \n         &#39; DataTable, delete the old row and replace it with a new one.\n \n         &#39; Remove the old entry and clear the row filter.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then\n       \n            CartView.Delete(0)\n         \n         End If \n         CartView.RowFilter = &quot;&quot;\n \n         &#39; ***************************************************************\n         &#39; Insert data validation code here. Be sure to validate the\n         &#39; values entered by the user before converting to the appropriate\n         &#39; data types and updating the data source.\n         &#39; ***************************************************************\n\n         &#39; Add the new entry.\n         dr = Cart.NewRow()\n         dr(0) = Convert.ToInt32(qty)\n         dr(1) = item\n\n         &#39; If necessary, remove the &#39;$&#39; character from the price before \n         &#39; converting it to a Double.\n         If price.Chars(0) = &quot;$&quot; Then\n         \n            dr(2) = Convert.ToDouble(price.Substring(1))\n         \n         Else\n         \n            dr(2) = Convert.ToDouble(price)\n         \n         End If\n\n         Cart.Rows.Add(dr)\n \n         &#39; Set the EditItemIndex property to -1 to exit editing mode.\n         &#39; Be sure to rebind the DateGrid to the data source to refresh\n         &#39; the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub BindGrid() \n\n         &#39; Set the data source and bind to the Data Grid control.\n         ItemsGrid.DataSource = CartView\n         ItemsGrid.DataBind()\n\n      End Sub\n\n      Sub GetSource()\n\n         &#39; For this example, the data source is a DataTable that is stored\n         &#39; in session state. If the data source does not exist, create it;\n         &#39; otherwise, load the data.\n         If Session(&quot;ShoppingCart&quot;) Is Nothing Then \n\n            &#39; Create the sample data.\n            Dim dr As DataRow  \n \n            &#39; Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, GetType(Int32)))\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, GetType(String)))\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, GetType(Double)))\n\n            &#39; Store the table in session state to persist its values\n            &#39; between posts to the server.\n            Session(&quot;ShoppingCart&quot;) = Cart\n             \n            &#39; Populate the DataTable with sample data.\n            Dim i As Integer\n\n            For i = 1 To 9 \n            \n               dr = Cart.NewRow()\n               If (i Mod 2) &lt;&gt; 0 Then\n\n                  dr(0) = 2\n               \n               Else\n               \n                  dr(0) = 1\n               \n               End If\n\n               dr(1) = &quot;Item &quot; &amp; i.ToString()\n               dr(2) = (1.23 * (i + 1))\n               Cart.Rows.Add(dr)\n            \n            Next i\n\n         Else\n\n            &#39; Retrieve the sample data from session state.\n            Cart = CType(Session(&quot;ShoppingCart&quot;), DataTable)\n\n         End If         \n \n         &#39; Create a DataView and specify the field to sort by.\n         CartView = New DataView(Cart)\n         CartView.Sort=&quot;Item&quot;\n\n         Return\n\n      End Sub\n\n      Sub ItemsGrid_Command(sender As Object, e As DataGridCommandEventArgs)\n\n         Select (CType(e.CommandSource, LinkButton)).CommandName\n\n            Case &quot;Delete&quot;\n               DeleteItem(e)\n\n            &#39; Add other cases here, if there are multiple ButtonColumns in \n            &#39; the DataGrid control.\n\n            Case Else\n               &#39; Do nothing.\n\n         End Select\n\n      End Sub\n\n      Sub DeleteItem(e As DataGridCommandEventArgs)\n\n         &#39; e.Item is the table row where the command is raised. For bound \n         &#39; columns, the value is stored in the Text property of a TableCell.\n         Dim itemCell As TableCell = e.Item.Cells(2)\n         Dim item As String = itemCell.Text\n\n         &#39; Remove the selected item from the data source.         \n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item + &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n              \n            CartView.Delete(0)\n\n         End If\n         \n         CartView.RowFilter = &quot;&quot;\n\n         &#39; Rebind the data source to refresh the DataGrid control.\n         BindGrid()\n\n      End Sub\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           OnEditCommand=&quot;ItemsGrid_Edit&quot;\n           OnCancelCommand=&quot;ItemsGrid_Cancel&quot;\n           OnUpdateCommand=&quot;ItemsGrid_Update&quot;\n           OnItemCommand=&quot;ItemsGrid_Command&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit item&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;False&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;False&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;\n\n            &lt;asp:ButtonColumn \n                 HeaderText=&quot;Delete item&quot; \n                 ButtonType=&quot;LinkButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot;/&gt;  \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;True&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot;\n                 DataField=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_EditCommandColumn_CancelText\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_EditCommandColumn_CancelText_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CancelText</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the text to display for the <code>Cancel</code> command button in the <a class=\"xref\" href=\"system.web.ui.webcontrols.editcommandcolumn\" data-linktype=\"relative-path\">EditCommandColumn</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string CancelText { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The caption to display for the <code>Cancel</code> command button in the <a class=\"xref\" href=\"system.web.ui.webcontrols.editcommandcolumn\" data-linktype=\"relative-path\">EditCommandColumn</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the CancelText property to specify the text to display for the <code>Cancel</code> command button in the <a class=\"xref\" href=\"system.web.ui.webcontrols.editcommandcolumn\" data-linktype=\"relative-path\">EditCommandColumn</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> You must provide a value for the CancelText property. Otherwise, the <code>Cancel</code> command button will not appear in the <a class=\"xref\" href=\"system.web.ui.webcontrols.editcommandcolumn\" data-linktype=\"relative-path\">EditCommandColumn</a>.  </p>\n</div>\n<p> The value of this property is stored in view state.  </p>\n<p> The value of this property, when set, can be saved automatically to a resource file by using a designer tool. For more information, see <a class=\"xref\" href=\"system.componentmodel.localizableattribute\" data-linktype=\"relative-path\">LocalizableAttribute</a> and <a href=\"../Topic/ASP.NET%20Globalization%20and%20Localization.md\" data-linktype=\"relative-path\">Globalization and Localization</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the CancelText property to provide custom text for the <code>Cancel</code> command button.  </p>\n<pre><code class=\"lang-cs\" name=\"DataGridEdit#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      // The Cart and CartView objects temporarily store the data source\n      // for the DataGrid control while the page is being processed.\n      DataTable Cart = new DataTable();\n      DataView CartView;   \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // With a database, use an select query to retrieve the data. Because \n         // the data source in this example is an in-memory DataTable, retrieve\n         // the data from session state if it exists; otherwise, create the data\n         // source.\n         GetSource();\n\n         // The DataGrid control maintains state between posts to the server;\n         // it only needs to be bound to a data source the first time the page\n         // is loaded or when the data source is updated.\n         if (!IsPostBack)\n         {\n\n            BindGrid();\n\n         }\n                   \n      }\n \n      void ItemsGrid_Edit(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to the index of the item clicked \n         // in the DataGrid control to enable editing for that item. Be sure\n         // to rebind the DateGrid to the data source to refresh the control.\n         ItemsGrid.EditItemIndex = e.Item.ItemIndex;\n         BindGrid();\n\n      }\n \n      void ItemsGrid_Cancel(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DateGrid to the data source to refresh\n         // the control.\n         ItemsGrid.EditItemIndex = -1;\n         BindGrid();\n\n      }\n \n      void ItemsGrid_Update(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Retrieve the text boxes that contain the values to update.\n         // For bound columns, the edited value is stored in a TextBox.\n         // The TextBox is the 0th control in a cell&#39;s Controls collection.\n         // Each cell in the Cells collection of a DataGrid item represents\n         // a column in the DataGrid control.\n         TextBox qtyText = (TextBox)e.Item.Cells[3].Controls[0];\n         TextBox priceText = (TextBox)e.Item.Cells[4].Controls[0];\n \n         // Retrieve the updated values.\n         String item = e.Item.Cells[2].Text;\n         String qty = qtyText.Text;\n         String price = priceText.Text;\n        \n         DataRow dr;\n \n         // With a database, use an update command to update the data. \n         // Because the data source in this example is an in-memory \n         // DataTable, delete the old row and replace it with a new one.\n \n         // Remove the old entry and clear the row filter.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0)\n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n \n         // ***************************************************************\n         // Insert data validation code here. Be sure to validate the\n         // values entered by the user before converting to the appropriate\n         // data types and updating the data source.\n         // ***************************************************************\n\n         // Add the new entry.\n         dr = Cart.NewRow();\n         dr[0] = Convert.ToInt32(qty);\n         dr[1] = item;\n\n         // If necessary, remove the &#39;$&#39; character from the price before \n         // converting it to a Double.\n         if(price[0] == &#39;$&#39;)\n         {\n            dr[2] = Convert.ToDouble(price.Substring(1));\n         }\n         else\n         {\n            dr[2] = Convert.ToDouble(price);\n         }\n\n         Cart.Rows.Add(dr);\n \n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DateGrid to the data source to refresh\n         // the control.\n         ItemsGrid.EditItemIndex = -1;\n         BindGrid();\n\n      }\n \n      void BindGrid() \n      {\n\n         // Set the data source and bind to the Data Grid control.\n         ItemsGrid.DataSource = CartView;\n         ItemsGrid.DataBind();\n\n      }\n\n      void GetSource()\n      {\n\n         // For this example, the data source is a DataTable that is stored\n         // in session state. If the data source does not exist, create it;\n         //  otherwise, load the data.\n         if (Session[&quot;ShoppingCart&quot;] == null) \n         {     \n\n            // Create the sample data.\n            DataRow dr;  \n \n            // Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(Int32)));\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(Double)));\n\n            // Store the table in session state to persist its values \n            // between posts to the server.\n            Session[&quot;ShoppingCart&quot;] = Cart;\n             \n            // Populate the DataTable with sample data.\n            for (int i = 1; i &lt;= 9; i++) \n            {\n               dr = Cart.NewRow();\n               if (i % 2 != 0)\n               {\n                  dr[0] = 2;\n               }\n               else\n               {\n                  dr[0] = 1;\n               }\n               dr[1] = &quot;Item &quot; + i.ToString();\n               dr[2] = (1.23 * (i + 1));\n               Cart.Rows.Add(dr);\n            }\n\n         } \n\n         else\n         {\n\n            // Retrieve the sample data from session state.\n            Cart = (DataTable)Session[&quot;ShoppingCart&quot;];\n\n         }         \n \n         // Create a DataView and specify the field to sort by.\n         CartView = new DataView(Cart);\n         CartView.Sort=&quot;Item&quot;;\n\n         return;\n\n      }\n\n      void ItemsGrid_Command(Object sender, DataGridCommandEventArgs e)\n      {\n\n         switch(((LinkButton)e.CommandSource).CommandName)\n         {\n\n            case &quot;Delete&quot;:\n               DeleteItem(e);\n               break;\n\n            // Add other cases here, if there are multiple ButtonColumns in \n            // the DataGrid control.\n\n            default:\n               // Do nothing.\n               break;\n\n         }\n\n      }\n\n      void DeleteItem(DataGridCommandEventArgs e)\n      {\n\n         // e.Item is the table row where the command is raised. For bound\n         // columns, the value is stored in the Text property of a TableCell.\n         TableCell itemCell = e.Item.Cells[2];\n         string item = itemCell.Text;\n\n         // Remove the selected item from the data source.         \n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0) \n         {     \n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // Rebind the data source to refresh the DataGrid control.\n         BindGrid();\n\n      }\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           OnEditCommand=&quot;ItemsGrid_Edit&quot;\n           OnCancelCommand=&quot;ItemsGrid_Cancel&quot;\n           OnUpdateCommand=&quot;ItemsGrid_Update&quot;\n           OnItemCommand=&quot;ItemsGrid_Command&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit item&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;False&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;False&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;\n\n            &lt;asp:ButtonColumn \n                 HeaderText=&quot;Delete item&quot; \n                 ButtonType=&quot;LinkButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot;/&gt;  \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;True&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot;\n                 DataField=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridEdit#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      &#39; The Cart and CartView objects temporarily store the data source\n      &#39; for the DataGrid control while the page is being processed.\n      Dim Cart As DataTable = New DataTable()\n      Dim CartView As DataView    \n \n      Sub Page_Load(sender As Object, e As EventArgs) \n \n         &#39; With a database, use an select query to retrieve the data. Because \n         &#39; the data source in this example is an in-memory DataTable, retrieve\n         &#39; the data from session state if it exists; otherwise create the data\n         &#39; source.\n         GetSource()\n\n         &#39; The DataGrid control maintains state between posts to the server;\n         &#39; it only needs to be bound to a data source the first time the page\n         &#39; is loaded or when the data source is updated.\n         If Not IsPostBack Then\n\n            BindGrid()\n\n         End If\n                   \n      End Sub\n \n      Sub ItemsGrid_Edit(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to the index of the item clicked \n         &#39; in the DataGrid control to enable editing for that item. Be sure\n         &#39; to rebind the DateGrid to the data source to refresh the control.\n         ItemsGrid.EditItemIndex = e.Item.ItemIndex\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Cancel(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode.\n         &#39; Be sure to rebind the DateGrid to the data source to refresh\n         &#39; the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Update(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Retrieve the text boxes that contain the values to update.\n         &#39; For bound columns, the edited value is stored in a TextBox.\n         &#39; The TextBox is the 0th control in a cell&#39;s Controls collection.\n         &#39; Each cell in the Cells collection of a DataGrid item represents\n         &#39; a column in the DataGrid control.\n         Dim qtyText As TextBox = CType(e.Item.Cells(3).Controls(0), TextBox)\n         Dim priceText As TextBox = CType(e.Item.Cells(4).Controls(0), TextBox)\n \n         &#39; Retrieve the updated values.\n         Dim item As String = e.Item.Cells(2).Text\n         Dim qty As String = qtyText.Text\n         Dim price As String = priceText.Text\n        \n         Dim dr As DataRow\n \n         &#39; With a database, use an update command to update the data. \n         &#39; Because the data source in this example is an in-memory \n         &#39; DataTable, delete the old row and replace it with a new one.\n \n         &#39; Remove the old entry and clear the row filter.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then\n       \n            CartView.Delete(0)\n         \n         End If \n         CartView.RowFilter = &quot;&quot;\n \n         &#39; ***************************************************************\n         &#39; Insert data validation code here. Be sure to validate the\n         &#39; values entered by the user before converting to the appropriate\n         &#39; data types and updating the data source.\n         &#39; ***************************************************************\n\n         &#39; Add the new entry.\n         dr = Cart.NewRow()\n         dr(0) = Convert.ToInt32(qty)\n         dr(1) = item\n\n         &#39; If necessary, remove the &#39;$&#39; character from the price before \n         &#39; converting it to a Double.\n         If price.Chars(0) = &quot;$&quot; Then\n         \n            dr(2) = Convert.ToDouble(price.Substring(1))\n         \n         Else\n         \n            dr(2) = Convert.ToDouble(price)\n         \n         End If\n\n         Cart.Rows.Add(dr)\n \n         &#39; Set the EditItemIndex property to -1 to exit editing mode.\n         &#39; Be sure to rebind the DateGrid to the data source to refresh\n         &#39; the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub BindGrid() \n\n         &#39; Set the data source and bind to the Data Grid control.\n         ItemsGrid.DataSource = CartView\n         ItemsGrid.DataBind()\n\n      End Sub\n\n      Sub GetSource()\n\n         &#39; For this example, the data source is a DataTable that is stored\n         &#39; in session state. If the data source does not exist, create it;\n         &#39; otherwise, load the data.\n         If Session(&quot;ShoppingCart&quot;) Is Nothing Then \n\n            &#39; Create the sample data.\n            Dim dr As DataRow  \n \n            &#39; Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, GetType(Int32)))\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, GetType(String)))\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, GetType(Double)))\n\n            &#39; Store the table in session state to persist its values\n            &#39; between posts to the server.\n            Session(&quot;ShoppingCart&quot;) = Cart\n             \n            &#39; Populate the DataTable with sample data.\n            Dim i As Integer\n\n            For i = 1 To 9 \n            \n               dr = Cart.NewRow()\n               If (i Mod 2) &lt;&gt; 0 Then\n\n                  dr(0) = 2\n               \n               Else\n               \n                  dr(0) = 1\n               \n               End If\n\n               dr(1) = &quot;Item &quot; &amp; i.ToString()\n               dr(2) = (1.23 * (i + 1))\n               Cart.Rows.Add(dr)\n            \n            Next i\n\n         Else\n\n            &#39; Retrieve the sample data from session state.\n            Cart = CType(Session(&quot;ShoppingCart&quot;), DataTable)\n\n         End If         \n \n         &#39; Create a DataView and specify the field to sort by.\n         CartView = New DataView(Cart)\n         CartView.Sort=&quot;Item&quot;\n\n         Return\n\n      End Sub\n\n      Sub ItemsGrid_Command(sender As Object, e As DataGridCommandEventArgs)\n\n         Select (CType(e.CommandSource, LinkButton)).CommandName\n\n            Case &quot;Delete&quot;\n               DeleteItem(e)\n\n            &#39; Add other cases here, if there are multiple ButtonColumns in \n            &#39; the DataGrid control.\n\n            Case Else\n               &#39; Do nothing.\n\n         End Select\n\n      End Sub\n\n      Sub DeleteItem(e As DataGridCommandEventArgs)\n\n         &#39; e.Item is the table row where the command is raised. For bound \n         &#39; columns, the value is stored in the Text property of a TableCell.\n         Dim itemCell As TableCell = e.Item.Cells(2)\n         Dim item As String = itemCell.Text\n\n         &#39; Remove the selected item from the data source.         \n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item + &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n              \n            CartView.Delete(0)\n\n         End If\n         \n         CartView.RowFilter = &quot;&quot;\n\n         &#39; Rebind the data source to refresh the DataGrid control.\n         BindGrid()\n\n      End Sub\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           OnEditCommand=&quot;ItemsGrid_Edit&quot;\n           OnCancelCommand=&quot;ItemsGrid_Cancel&quot;\n           OnUpdateCommand=&quot;ItemsGrid_Update&quot;\n           OnItemCommand=&quot;ItemsGrid_Command&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit item&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;False&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;False&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;\n\n            &lt;asp:ButtonColumn \n                 HeaderText=&quot;Delete item&quot; \n                 ButtonType=&quot;LinkButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot;/&gt;  \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;True&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot;\n                 DataField=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_EditCommandColumn_CausesValidation\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_EditCommandColumn_CausesValidation_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CausesValidation</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether validation is performed when an <code>Update</code> button in the <a class=\"xref\" href=\"system.web.ui.webcontrols.editcommandcolumn\" data-linktype=\"relative-path\">EditCommandColumn</a> object is clicked.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool CausesValidation { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if validation is performed when an <code>Update</code> button in the <a class=\"xref\" href=\"system.web.ui.webcontrols.editcommandcolumn\" data-linktype=\"relative-path\">EditCommandColumn</a> is clicked; otherwise, <code>false</code>. The default is <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default, page validation is performed when an <code>Update</code> button in a <a class=\"xref\" href=\"system.web.ui.webcontrols.editcommandcolumn\" data-linktype=\"relative-path\">EditCommandColumn</a> control is clicked. Page validation determines whether the input controls that are associated with a validation control on the page all pass the validation rules that are specified by the validation control.  </p>\n<p> You can specify or determine whether validation is performed on both the client and the server when an <code>Update</code> button in an <a class=\"xref\" href=\"system.web.ui.webcontrols.editcommandcolumn\" data-linktype=\"relative-path\">EditCommandColumn</a> control is clicked by using the CausesValidation property. To prevent validation from being performed, set the CausesValidation property to <code>false</code>.  </p>\n<p> When the value of the CausesValidation property is set to <code>true</code>, you can also use the <a class=\"xref\" href=\"system.web.ui.webcontrols.editcommandcolumn#System_Web_UI_WebControls_EditCommandColumn_ValidationGroup_\" data-linktype=\"relative-path\">ValidationGroup</a> property to specify the name of the validation group for which an <code>Update</code> button in the <a class=\"xref\" href=\"system.web.ui.webcontrols.editcommandcolumn\" data-linktype=\"relative-path\">EditCommandColumn</a> object causes validation.  </p>\n<p> The value of this property is stored in view state.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_EditCommandColumn_EditText\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_EditCommandColumn_EditText_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EditText</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the text to display for the <code>Edit</code> button in the <a class=\"xref\" href=\"system.web.ui.webcontrols.editcommandcolumn\" data-linktype=\"relative-path\">EditCommandColumn</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string EditText { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The caption to display for the <code>Edit</code> button in the <a class=\"xref\" href=\"system.web.ui.webcontrols.editcommandcolumn\" data-linktype=\"relative-path\">EditCommandColumn</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the EditText property to specify the text to display for the <code>Edit</code> button in the <a class=\"xref\" href=\"system.web.ui.webcontrols.editcommandcolumn\" data-linktype=\"relative-path\">EditCommandColumn</a> control.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> You must provide a value for the EditText property. Otherwise, the <code>Edit</code> button will not appear in the <a class=\"xref\" href=\"system.web.ui.webcontrols.editcommandcolumn\" data-linktype=\"relative-path\">EditCommandColumn</a>.  </p>\n</div>\n<p> The value of this property is stored in view state.  </p>\n<p> The value of this property, when set, can be saved automatically to a resource file by using a designer tool. For more information, see <a class=\"xref\" href=\"system.componentmodel.localizableattribute\" data-linktype=\"relative-path\">LocalizableAttribute</a> and <a href=\"../Topic/ASP.NET%20Globalization%20and%20Localization.md\" data-linktype=\"relative-path\">Globalization and Localization</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the EditText property to provide custom text for the <code>Edit</code> button.  </p>\n<pre><code class=\"lang-cs\" name=\"DataGridEdit#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      // The Cart and CartView objects temporarily store the data source\n      // for the DataGrid control while the page is being processed.\n      DataTable Cart = new DataTable();\n      DataView CartView;   \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // With a database, use an select query to retrieve the data. Because \n         // the data source in this example is an in-memory DataTable, retrieve\n         // the data from session state if it exists; otherwise, create the data\n         // source.\n         GetSource();\n\n         // The DataGrid control maintains state between posts to the server;\n         // it only needs to be bound to a data source the first time the page\n         // is loaded or when the data source is updated.\n         if (!IsPostBack)\n         {\n\n            BindGrid();\n\n         }\n                   \n      }\n \n      void ItemsGrid_Edit(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to the index of the item clicked \n         // in the DataGrid control to enable editing for that item. Be sure\n         // to rebind the DateGrid to the data source to refresh the control.\n         ItemsGrid.EditItemIndex = e.Item.ItemIndex;\n         BindGrid();\n\n      }\n \n      void ItemsGrid_Cancel(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DateGrid to the data source to refresh\n         // the control.\n         ItemsGrid.EditItemIndex = -1;\n         BindGrid();\n\n      }\n \n      void ItemsGrid_Update(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Retrieve the text boxes that contain the values to update.\n         // For bound columns, the edited value is stored in a TextBox.\n         // The TextBox is the 0th control in a cell&#39;s Controls collection.\n         // Each cell in the Cells collection of a DataGrid item represents\n         // a column in the DataGrid control.\n         TextBox qtyText = (TextBox)e.Item.Cells[3].Controls[0];\n         TextBox priceText = (TextBox)e.Item.Cells[4].Controls[0];\n \n         // Retrieve the updated values.\n         String item = e.Item.Cells[2].Text;\n         String qty = qtyText.Text;\n         String price = priceText.Text;\n        \n         DataRow dr;\n \n         // With a database, use an update command to update the data. \n         // Because the data source in this example is an in-memory \n         // DataTable, delete the old row and replace it with a new one.\n \n         // Remove the old entry and clear the row filter.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0)\n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n \n         // ***************************************************************\n         // Insert data validation code here. Be sure to validate the\n         // values entered by the user before converting to the appropriate\n         // data types and updating the data source.\n         // ***************************************************************\n\n         // Add the new entry.\n         dr = Cart.NewRow();\n         dr[0] = Convert.ToInt32(qty);\n         dr[1] = item;\n\n         // If necessary, remove the &#39;$&#39; character from the price before \n         // converting it to a Double.\n         if(price[0] == &#39;$&#39;)\n         {\n            dr[2] = Convert.ToDouble(price.Substring(1));\n         }\n         else\n         {\n            dr[2] = Convert.ToDouble(price);\n         }\n\n         Cart.Rows.Add(dr);\n \n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DateGrid to the data source to refresh\n         // the control.\n         ItemsGrid.EditItemIndex = -1;\n         BindGrid();\n\n      }\n \n      void BindGrid() \n      {\n\n         // Set the data source and bind to the Data Grid control.\n         ItemsGrid.DataSource = CartView;\n         ItemsGrid.DataBind();\n\n      }\n\n      void GetSource()\n      {\n\n         // For this example, the data source is a DataTable that is stored\n         // in session state. If the data source does not exist, create it;\n         //  otherwise, load the data.\n         if (Session[&quot;ShoppingCart&quot;] == null) \n         {     \n\n            // Create the sample data.\n            DataRow dr;  \n \n            // Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(Int32)));\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(Double)));\n\n            // Store the table in session state to persist its values \n            // between posts to the server.\n            Session[&quot;ShoppingCart&quot;] = Cart;\n             \n            // Populate the DataTable with sample data.\n            for (int i = 1; i &lt;= 9; i++) \n            {\n               dr = Cart.NewRow();\n               if (i % 2 != 0)\n               {\n                  dr[0] = 2;\n               }\n               else\n               {\n                  dr[0] = 1;\n               }\n               dr[1] = &quot;Item &quot; + i.ToString();\n               dr[2] = (1.23 * (i + 1));\n               Cart.Rows.Add(dr);\n            }\n\n         } \n\n         else\n         {\n\n            // Retrieve the sample data from session state.\n            Cart = (DataTable)Session[&quot;ShoppingCart&quot;];\n\n         }         \n \n         // Create a DataView and specify the field to sort by.\n         CartView = new DataView(Cart);\n         CartView.Sort=&quot;Item&quot;;\n\n         return;\n\n      }\n\n      void ItemsGrid_Command(Object sender, DataGridCommandEventArgs e)\n      {\n\n         switch(((LinkButton)e.CommandSource).CommandName)\n         {\n\n            case &quot;Delete&quot;:\n               DeleteItem(e);\n               break;\n\n            // Add other cases here, if there are multiple ButtonColumns in \n            // the DataGrid control.\n\n            default:\n               // Do nothing.\n               break;\n\n         }\n\n      }\n\n      void DeleteItem(DataGridCommandEventArgs e)\n      {\n\n         // e.Item is the table row where the command is raised. For bound\n         // columns, the value is stored in the Text property of a TableCell.\n         TableCell itemCell = e.Item.Cells[2];\n         string item = itemCell.Text;\n\n         // Remove the selected item from the data source.         \n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0) \n         {     \n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // Rebind the data source to refresh the DataGrid control.\n         BindGrid();\n\n      }\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           OnEditCommand=&quot;ItemsGrid_Edit&quot;\n           OnCancelCommand=&quot;ItemsGrid_Cancel&quot;\n           OnUpdateCommand=&quot;ItemsGrid_Update&quot;\n           OnItemCommand=&quot;ItemsGrid_Command&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit item&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;False&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;False&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;\n\n            &lt;asp:ButtonColumn \n                 HeaderText=&quot;Delete item&quot; \n                 ButtonType=&quot;LinkButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot;/&gt;  \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;True&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot;\n                 DataField=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridEdit#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      &#39; The Cart and CartView objects temporarily store the data source\n      &#39; for the DataGrid control while the page is being processed.\n      Dim Cart As DataTable = New DataTable()\n      Dim CartView As DataView    \n \n      Sub Page_Load(sender As Object, e As EventArgs) \n \n         &#39; With a database, use an select query to retrieve the data. Because \n         &#39; the data source in this example is an in-memory DataTable, retrieve\n         &#39; the data from session state if it exists; otherwise create the data\n         &#39; source.\n         GetSource()\n\n         &#39; The DataGrid control maintains state between posts to the server;\n         &#39; it only needs to be bound to a data source the first time the page\n         &#39; is loaded or when the data source is updated.\n         If Not IsPostBack Then\n\n            BindGrid()\n\n         End If\n                   \n      End Sub\n \n      Sub ItemsGrid_Edit(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to the index of the item clicked \n         &#39; in the DataGrid control to enable editing for that item. Be sure\n         &#39; to rebind the DateGrid to the data source to refresh the control.\n         ItemsGrid.EditItemIndex = e.Item.ItemIndex\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Cancel(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode.\n         &#39; Be sure to rebind the DateGrid to the data source to refresh\n         &#39; the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Update(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Retrieve the text boxes that contain the values to update.\n         &#39; For bound columns, the edited value is stored in a TextBox.\n         &#39; The TextBox is the 0th control in a cell&#39;s Controls collection.\n         &#39; Each cell in the Cells collection of a DataGrid item represents\n         &#39; a column in the DataGrid control.\n         Dim qtyText As TextBox = CType(e.Item.Cells(3).Controls(0), TextBox)\n         Dim priceText As TextBox = CType(e.Item.Cells(4).Controls(0), TextBox)\n \n         &#39; Retrieve the updated values.\n         Dim item As String = e.Item.Cells(2).Text\n         Dim qty As String = qtyText.Text\n         Dim price As String = priceText.Text\n        \n         Dim dr As DataRow\n \n         &#39; With a database, use an update command to update the data. \n         &#39; Because the data source in this example is an in-memory \n         &#39; DataTable, delete the old row and replace it with a new one.\n \n         &#39; Remove the old entry and clear the row filter.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then\n       \n            CartView.Delete(0)\n         \n         End If \n         CartView.RowFilter = &quot;&quot;\n \n         &#39; ***************************************************************\n         &#39; Insert data validation code here. Be sure to validate the\n         &#39; values entered by the user before converting to the appropriate\n         &#39; data types and updating the data source.\n         &#39; ***************************************************************\n\n         &#39; Add the new entry.\n         dr = Cart.NewRow()\n         dr(0) = Convert.ToInt32(qty)\n         dr(1) = item\n\n         &#39; If necessary, remove the &#39;$&#39; character from the price before \n         &#39; converting it to a Double.\n         If price.Chars(0) = &quot;$&quot; Then\n         \n            dr(2) = Convert.ToDouble(price.Substring(1))\n         \n         Else\n         \n            dr(2) = Convert.ToDouble(price)\n         \n         End If\n\n         Cart.Rows.Add(dr)\n \n         &#39; Set the EditItemIndex property to -1 to exit editing mode.\n         &#39; Be sure to rebind the DateGrid to the data source to refresh\n         &#39; the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub BindGrid() \n\n         &#39; Set the data source and bind to the Data Grid control.\n         ItemsGrid.DataSource = CartView\n         ItemsGrid.DataBind()\n\n      End Sub\n\n      Sub GetSource()\n\n         &#39; For this example, the data source is a DataTable that is stored\n         &#39; in session state. If the data source does not exist, create it;\n         &#39; otherwise, load the data.\n         If Session(&quot;ShoppingCart&quot;) Is Nothing Then \n\n            &#39; Create the sample data.\n            Dim dr As DataRow  \n \n            &#39; Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, GetType(Int32)))\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, GetType(String)))\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, GetType(Double)))\n\n            &#39; Store the table in session state to persist its values\n            &#39; between posts to the server.\n            Session(&quot;ShoppingCart&quot;) = Cart\n             \n            &#39; Populate the DataTable with sample data.\n            Dim i As Integer\n\n            For i = 1 To 9 \n            \n               dr = Cart.NewRow()\n               If (i Mod 2) &lt;&gt; 0 Then\n\n                  dr(0) = 2\n               \n               Else\n               \n                  dr(0) = 1\n               \n               End If\n\n               dr(1) = &quot;Item &quot; &amp; i.ToString()\n               dr(2) = (1.23 * (i + 1))\n               Cart.Rows.Add(dr)\n            \n            Next i\n\n         Else\n\n            &#39; Retrieve the sample data from session state.\n            Cart = CType(Session(&quot;ShoppingCart&quot;), DataTable)\n\n         End If         \n \n         &#39; Create a DataView and specify the field to sort by.\n         CartView = New DataView(Cart)\n         CartView.Sort=&quot;Item&quot;\n\n         Return\n\n      End Sub\n\n      Sub ItemsGrid_Command(sender As Object, e As DataGridCommandEventArgs)\n\n         Select (CType(e.CommandSource, LinkButton)).CommandName\n\n            Case &quot;Delete&quot;\n               DeleteItem(e)\n\n            &#39; Add other cases here, if there are multiple ButtonColumns in \n            &#39; the DataGrid control.\n\n            Case Else\n               &#39; Do nothing.\n\n         End Select\n\n      End Sub\n\n      Sub DeleteItem(e As DataGridCommandEventArgs)\n\n         &#39; e.Item is the table row where the command is raised. For bound \n         &#39; columns, the value is stored in the Text property of a TableCell.\n         Dim itemCell As TableCell = e.Item.Cells(2)\n         Dim item As String = itemCell.Text\n\n         &#39; Remove the selected item from the data source.         \n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item + &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n              \n            CartView.Delete(0)\n\n         End If\n         \n         CartView.RowFilter = &quot;&quot;\n\n         &#39; Rebind the data source to refresh the DataGrid control.\n         BindGrid()\n\n      End Sub\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           OnEditCommand=&quot;ItemsGrid_Edit&quot;\n           OnCancelCommand=&quot;ItemsGrid_Cancel&quot;\n           OnUpdateCommand=&quot;ItemsGrid_Update&quot;\n           OnItemCommand=&quot;ItemsGrid_Command&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit item&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;False&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;False&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;\n\n            &lt;asp:ButtonColumn \n                 HeaderText=&quot;Delete item&quot; \n                 ButtonType=&quot;LinkButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot;/&gt;  \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;True&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot;\n                 DataField=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_EditCommandColumn_UpdateText\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_EditCommandColumn_UpdateText_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UpdateText</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the text to display for the <code>Update</code> command button in the <a class=\"xref\" href=\"system.web.ui.webcontrols.editcommandcolumn\" data-linktype=\"relative-path\">EditCommandColumn</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string UpdateText { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The caption to display for the <code>Update</code> command button in the <a class=\"xref\" href=\"system.web.ui.webcontrols.editcommandcolumn\" data-linktype=\"relative-path\">EditCommandColumn</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the UpdateText property to specify the text to display for the <code>Update</code> command button in the <a class=\"xref\" href=\"system.web.ui.webcontrols.editcommandcolumn\" data-linktype=\"relative-path\">EditCommandColumn</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> You must provide a value for the UpdateText property. Otherwise, the <code>Update</code> command button will not appear in the <a class=\"xref\" href=\"system.web.ui.webcontrols.editcommandcolumn\" data-linktype=\"relative-path\">EditCommandColumn</a>.  </p>\n</div>\n<p> The value of this property is stored in view state.  </p>\n<p> The value of this property, when set, can be saved automatically to a resource file by using a designer tool. For more information, see <a class=\"xref\" href=\"system.componentmodel.localizableattribute\" data-linktype=\"relative-path\">LocalizableAttribute</a> and <a href=\"../Topic/ASP.NET%20Globalization%20and%20Localization.md\" data-linktype=\"relative-path\">Globalization and Localization</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the UpdateText property to provide custom text for the <code>Update</code> command button.  </p>\n<pre><code class=\"lang-cs\" name=\"DataGridEdit#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      // The Cart and CartView objects temporarily store the data source\n      // for the DataGrid control while the page is being processed.\n      DataTable Cart = new DataTable();\n      DataView CartView;   \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // With a database, use an select query to retrieve the data. Because \n         // the data source in this example is an in-memory DataTable, retrieve\n         // the data from session state if it exists; otherwise, create the data\n         // source.\n         GetSource();\n\n         // The DataGrid control maintains state between posts to the server;\n         // it only needs to be bound to a data source the first time the page\n         // is loaded or when the data source is updated.\n         if (!IsPostBack)\n         {\n\n            BindGrid();\n\n         }\n                   \n      }\n \n      void ItemsGrid_Edit(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to the index of the item clicked \n         // in the DataGrid control to enable editing for that item. Be sure\n         // to rebind the DateGrid to the data source to refresh the control.\n         ItemsGrid.EditItemIndex = e.Item.ItemIndex;\n         BindGrid();\n\n      }\n \n      void ItemsGrid_Cancel(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DateGrid to the data source to refresh\n         // the control.\n         ItemsGrid.EditItemIndex = -1;\n         BindGrid();\n\n      }\n \n      void ItemsGrid_Update(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Retrieve the text boxes that contain the values to update.\n         // For bound columns, the edited value is stored in a TextBox.\n         // The TextBox is the 0th control in a cell&#39;s Controls collection.\n         // Each cell in the Cells collection of a DataGrid item represents\n         // a column in the DataGrid control.\n         TextBox qtyText = (TextBox)e.Item.Cells[3].Controls[0];\n         TextBox priceText = (TextBox)e.Item.Cells[4].Controls[0];\n \n         // Retrieve the updated values.\n         String item = e.Item.Cells[2].Text;\n         String qty = qtyText.Text;\n         String price = priceText.Text;\n        \n         DataRow dr;\n \n         // With a database, use an update command to update the data. \n         // Because the data source in this example is an in-memory \n         // DataTable, delete the old row and replace it with a new one.\n \n         // Remove the old entry and clear the row filter.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0)\n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n \n         // ***************************************************************\n         // Insert data validation code here. Be sure to validate the\n         // values entered by the user before converting to the appropriate\n         // data types and updating the data source.\n         // ***************************************************************\n\n         // Add the new entry.\n         dr = Cart.NewRow();\n         dr[0] = Convert.ToInt32(qty);\n         dr[1] = item;\n\n         // If necessary, remove the &#39;$&#39; character from the price before \n         // converting it to a Double.\n         if(price[0] == &#39;$&#39;)\n         {\n            dr[2] = Convert.ToDouble(price.Substring(1));\n         }\n         else\n         {\n            dr[2] = Convert.ToDouble(price);\n         }\n\n         Cart.Rows.Add(dr);\n \n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DateGrid to the data source to refresh\n         // the control.\n         ItemsGrid.EditItemIndex = -1;\n         BindGrid();\n\n      }\n \n      void BindGrid() \n      {\n\n         // Set the data source and bind to the Data Grid control.\n         ItemsGrid.DataSource = CartView;\n         ItemsGrid.DataBind();\n\n      }\n\n      void GetSource()\n      {\n\n         // For this example, the data source is a DataTable that is stored\n         // in session state. If the data source does not exist, create it;\n         //  otherwise, load the data.\n         if (Session[&quot;ShoppingCart&quot;] == null) \n         {     \n\n            // Create the sample data.\n            DataRow dr;  \n \n            // Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(Int32)));\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(Double)));\n\n            // Store the table in session state to persist its values \n            // between posts to the server.\n            Session[&quot;ShoppingCart&quot;] = Cart;\n             \n            // Populate the DataTable with sample data.\n            for (int i = 1; i &lt;= 9; i++) \n            {\n               dr = Cart.NewRow();\n               if (i % 2 != 0)\n               {\n                  dr[0] = 2;\n               }\n               else\n               {\n                  dr[0] = 1;\n               }\n               dr[1] = &quot;Item &quot; + i.ToString();\n               dr[2] = (1.23 * (i + 1));\n               Cart.Rows.Add(dr);\n            }\n\n         } \n\n         else\n         {\n\n            // Retrieve the sample data from session state.\n            Cart = (DataTable)Session[&quot;ShoppingCart&quot;];\n\n         }         \n \n         // Create a DataView and specify the field to sort by.\n         CartView = new DataView(Cart);\n         CartView.Sort=&quot;Item&quot;;\n\n         return;\n\n      }\n\n      void ItemsGrid_Command(Object sender, DataGridCommandEventArgs e)\n      {\n\n         switch(((LinkButton)e.CommandSource).CommandName)\n         {\n\n            case &quot;Delete&quot;:\n               DeleteItem(e);\n               break;\n\n            // Add other cases here, if there are multiple ButtonColumns in \n            // the DataGrid control.\n\n            default:\n               // Do nothing.\n               break;\n\n         }\n\n      }\n\n      void DeleteItem(DataGridCommandEventArgs e)\n      {\n\n         // e.Item is the table row where the command is raised. For bound\n         // columns, the value is stored in the Text property of a TableCell.\n         TableCell itemCell = e.Item.Cells[2];\n         string item = itemCell.Text;\n\n         // Remove the selected item from the data source.         \n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0) \n         {     \n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // Rebind the data source to refresh the DataGrid control.\n         BindGrid();\n\n      }\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           OnEditCommand=&quot;ItemsGrid_Edit&quot;\n           OnCancelCommand=&quot;ItemsGrid_Cancel&quot;\n           OnUpdateCommand=&quot;ItemsGrid_Update&quot;\n           OnItemCommand=&quot;ItemsGrid_Command&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit item&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;False&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;False&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;\n\n            &lt;asp:ButtonColumn \n                 HeaderText=&quot;Delete item&quot; \n                 ButtonType=&quot;LinkButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot;/&gt;  \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;True&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot;\n                 DataField=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridEdit#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      &#39; The Cart and CartView objects temporarily store the data source\n      &#39; for the DataGrid control while the page is being processed.\n      Dim Cart As DataTable = New DataTable()\n      Dim CartView As DataView    \n \n      Sub Page_Load(sender As Object, e As EventArgs) \n \n         &#39; With a database, use an select query to retrieve the data. Because \n         &#39; the data source in this example is an in-memory DataTable, retrieve\n         &#39; the data from session state if it exists; otherwise create the data\n         &#39; source.\n         GetSource()\n\n         &#39; The DataGrid control maintains state between posts to the server;\n         &#39; it only needs to be bound to a data source the first time the page\n         &#39; is loaded or when the data source is updated.\n         If Not IsPostBack Then\n\n            BindGrid()\n\n         End If\n                   \n      End Sub\n \n      Sub ItemsGrid_Edit(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to the index of the item clicked \n         &#39; in the DataGrid control to enable editing for that item. Be sure\n         &#39; to rebind the DateGrid to the data source to refresh the control.\n         ItemsGrid.EditItemIndex = e.Item.ItemIndex\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Cancel(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode.\n         &#39; Be sure to rebind the DateGrid to the data source to refresh\n         &#39; the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Update(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Retrieve the text boxes that contain the values to update.\n         &#39; For bound columns, the edited value is stored in a TextBox.\n         &#39; The TextBox is the 0th control in a cell&#39;s Controls collection.\n         &#39; Each cell in the Cells collection of a DataGrid item represents\n         &#39; a column in the DataGrid control.\n         Dim qtyText As TextBox = CType(e.Item.Cells(3).Controls(0), TextBox)\n         Dim priceText As TextBox = CType(e.Item.Cells(4).Controls(0), TextBox)\n \n         &#39; Retrieve the updated values.\n         Dim item As String = e.Item.Cells(2).Text\n         Dim qty As String = qtyText.Text\n         Dim price As String = priceText.Text\n        \n         Dim dr As DataRow\n \n         &#39; With a database, use an update command to update the data. \n         &#39; Because the data source in this example is an in-memory \n         &#39; DataTable, delete the old row and replace it with a new one.\n \n         &#39; Remove the old entry and clear the row filter.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then\n       \n            CartView.Delete(0)\n         \n         End If \n         CartView.RowFilter = &quot;&quot;\n \n         &#39; ***************************************************************\n         &#39; Insert data validation code here. Be sure to validate the\n         &#39; values entered by the user before converting to the appropriate\n         &#39; data types and updating the data source.\n         &#39; ***************************************************************\n\n         &#39; Add the new entry.\n         dr = Cart.NewRow()\n         dr(0) = Convert.ToInt32(qty)\n         dr(1) = item\n\n         &#39; If necessary, remove the &#39;$&#39; character from the price before \n         &#39; converting it to a Double.\n         If price.Chars(0) = &quot;$&quot; Then\n         \n            dr(2) = Convert.ToDouble(price.Substring(1))\n         \n         Else\n         \n            dr(2) = Convert.ToDouble(price)\n         \n         End If\n\n         Cart.Rows.Add(dr)\n \n         &#39; Set the EditItemIndex property to -1 to exit editing mode.\n         &#39; Be sure to rebind the DateGrid to the data source to refresh\n         &#39; the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub BindGrid() \n\n         &#39; Set the data source and bind to the Data Grid control.\n         ItemsGrid.DataSource = CartView\n         ItemsGrid.DataBind()\n\n      End Sub\n\n      Sub GetSource()\n\n         &#39; For this example, the data source is a DataTable that is stored\n         &#39; in session state. If the data source does not exist, create it;\n         &#39; otherwise, load the data.\n         If Session(&quot;ShoppingCart&quot;) Is Nothing Then \n\n            &#39; Create the sample data.\n            Dim dr As DataRow  \n \n            &#39; Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, GetType(Int32)))\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, GetType(String)))\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, GetType(Double)))\n\n            &#39; Store the table in session state to persist its values\n            &#39; between posts to the server.\n            Session(&quot;ShoppingCart&quot;) = Cart\n             \n            &#39; Populate the DataTable with sample data.\n            Dim i As Integer\n\n            For i = 1 To 9 \n            \n               dr = Cart.NewRow()\n               If (i Mod 2) &lt;&gt; 0 Then\n\n                  dr(0) = 2\n               \n               Else\n               \n                  dr(0) = 1\n               \n               End If\n\n               dr(1) = &quot;Item &quot; &amp; i.ToString()\n               dr(2) = (1.23 * (i + 1))\n               Cart.Rows.Add(dr)\n            \n            Next i\n\n         Else\n\n            &#39; Retrieve the sample data from session state.\n            Cart = CType(Session(&quot;ShoppingCart&quot;), DataTable)\n\n         End If         \n \n         &#39; Create a DataView and specify the field to sort by.\n         CartView = New DataView(Cart)\n         CartView.Sort=&quot;Item&quot;\n\n         Return\n\n      End Sub\n\n      Sub ItemsGrid_Command(sender As Object, e As DataGridCommandEventArgs)\n\n         Select (CType(e.CommandSource, LinkButton)).CommandName\n\n            Case &quot;Delete&quot;\n               DeleteItem(e)\n\n            &#39; Add other cases here, if there are multiple ButtonColumns in \n            &#39; the DataGrid control.\n\n            Case Else\n               &#39; Do nothing.\n\n         End Select\n\n      End Sub\n\n      Sub DeleteItem(e As DataGridCommandEventArgs)\n\n         &#39; e.Item is the table row where the command is raised. For bound \n         &#39; columns, the value is stored in the Text property of a TableCell.\n         Dim itemCell As TableCell = e.Item.Cells(2)\n         Dim item As String = itemCell.Text\n\n         &#39; Remove the selected item from the data source.         \n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item + &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n              \n            CartView.Delete(0)\n\n         End If\n         \n         CartView.RowFilter = &quot;&quot;\n\n         &#39; Rebind the data source to refresh the DataGrid control.\n         BindGrid()\n\n      End Sub\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           OnEditCommand=&quot;ItemsGrid_Edit&quot;\n           OnCancelCommand=&quot;ItemsGrid_Cancel&quot;\n           OnUpdateCommand=&quot;ItemsGrid_Update&quot;\n           OnItemCommand=&quot;ItemsGrid_Command&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit item&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;False&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;False&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;\n\n            &lt;asp:ButtonColumn \n                 HeaderText=&quot;Delete item&quot; \n                 ButtonType=&quot;LinkButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot;/&gt;  \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;True&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot;\n                 DataField=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_EditCommandColumn_ValidationGroup\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_EditCommandColumn_ValidationGroup_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ValidationGroup</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the group of validation controls for which the <a class=\"xref\" href=\"system.web.ui.webcontrols.editcommandcolumn\" data-linktype=\"relative-path\">EditCommandColumn</a> object causes validation when it posts back to the server.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string ValidationGroup { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The group of validation controls for which the Update button in an <a class=\"xref\" href=\"system.web.ui.webcontrols.editcommandcolumn\" data-linktype=\"relative-path\">EditCommandColumn</a> causes validation when it posts back to the server. The default is an empty string (&quot;&quot;).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Validation groups allow you to assign validation controls on a page to a specific category. Each validation group can be validated independently of other validation groups on the page. Use the ValidationGroup property to specify the name of the validation group for which the Update button in an <a class=\"xref\" href=\"system.web.ui.webcontrols.editcommandcolumn\" data-linktype=\"relative-path\">EditCommandColumn</a> object causes validation when it posts back to the server.  </p>\n<p> The ValidationGroup property has an effect only when the value of the <a class=\"xref\" href=\"system.web.ui.webcontrols.editcommandcolumn#System_Web_UI_WebControls_EditCommandColumn_CausesValidation_\" data-linktype=\"relative-path\">CausesValidation</a> property is set to <code>true</code>. When you specify a value for the ValidationGroup property, only the validation controls that are part of the specified group are validated when the Update button in an <a class=\"xref\" href=\"system.web.ui.webcontrols.editcommandcolumn\" data-linktype=\"relative-path\">EditCommandColumn</a> object posts back to the server. If you do not specify a value for the ValidationGroup property and the <a class=\"xref\" href=\"system.web.ui.webcontrols.editcommandcolumn#System_Web_UI_WebControls_EditCommandColumn_CausesValidation_\" data-linktype=\"relative-path\">CausesValidation</a> property is set to <code>true</code>, all validation controls on the page that are not assigned to a validation group are validated when the Update button in an <a class=\"xref\" href=\"system.web.ui.webcontrols.editcommandcolumn\" data-linktype=\"relative-path\">EditCommandColumn</a> object posts back to the server.  </p>\n<p> The value of this property is stored in view state.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_EditCommandColumn_InitializeCell_System_Web_UI_WebControls_TableCell_System_Int32_System_Web_UI_WebControls_ListItemType_\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_EditCommandColumn_InitializeCell_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InitializeCell(TableCell,Int32,ListItemType)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a cell within the column.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void InitializeCell (System.Web.UI.WebControls.TableCell cell, int columnIndex, System.Web.UI.WebControls.ListItemType itemType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>cell</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.tablecell\" data-linktype=\"relative-path\">TableCell</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.tablecell\" data-linktype=\"relative-path\">TableCell</a> that contains information about the cell to initialize.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>columnIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The column number where the cell is located.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>itemType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.listitemtype\" data-linktype=\"relative-path\">ListItemType</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.web.ui.webcontrols.listitemtype\" data-linktype=\"relative-path\">ListItemType</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Web.UI.WebControls.EditCommandColumn.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Web.UI.WebControls.EditCommandColumn.yml\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.EditCommandColumn\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.EditCommandColumn..ctor\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.EditCommandColumn.ButtonType\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.EditCommandColumn.CancelText\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.EditCommandColumn.CausesValidation\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.EditCommandColumn.EditText\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.EditCommandColumn.InitializeCell\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.EditCommandColumn.UpdateText\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.EditCommandColumn.ValidationGroup\">\r\n<meta name=\"APILocation\" content=\"System.Web.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"b83bf7bf-7419-1a7f-1794-34ca45ed7dda\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"A special column type for the  control that contains the Edit buttons for editing data items in each row.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Web.UI.WebControls/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Web.UI.WebControls.EditCommandColumn\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Web.UI.WebControls.EditCommandColumn.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Web.UI.WebControls.EditCommandColumn.yml","open_to_public_contributors":true,"api_name":["System.Web.UI.WebControls.EditCommandColumn","System.Web.UI.WebControls.EditCommandColumn..ctor","System.Web.UI.WebControls.EditCommandColumn.ButtonType","System.Web.UI.WebControls.EditCommandColumn.CancelText","System.Web.UI.WebControls.EditCommandColumn.CausesValidation","System.Web.UI.WebControls.EditCommandColumn.EditText","System.Web.UI.WebControls.EditCommandColumn.InitializeCell","System.Web.UI.WebControls.EditCommandColumn.UpdateText","System.Web.UI.WebControls.EditCommandColumn.ValidationGroup"],"api_location":["System.Web.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Web.UI.WebControls.EditCommandColumn","System::Web::UI::WebControls::EditCommandColumn","System.Web.UI.WebControls.EditCommandColumn.#ctor","System::Web::UI::WebControls::EditCommandColumn::#ctor","System.Web.UI.WebControls.EditCommandColumn.ButtonType","System::Web::UI::WebControls::EditCommandColumn::ButtonType","System.Web.UI.WebControls.EditCommandColumn.CancelText","System::Web::UI::WebControls::EditCommandColumn::CancelText","System.Web.UI.WebControls.EditCommandColumn.CausesValidation","System::Web::UI::WebControls::EditCommandColumn::CausesValidation","System.Web.UI.WebControls.EditCommandColumn.EditText","System::Web::UI::WebControls::EditCommandColumn::EditText","System.Web.UI.WebControls.EditCommandColumn.InitializeCell","System::Web::UI::WebControls::EditCommandColumn::InitializeCell","System.Web.UI.WebControls.EditCommandColumn.UpdateText","System::Web::UI::WebControls::EditCommandColumn::UpdateText","System.Web.UI.WebControls.EditCommandColumn.ValidationGroup","System::Web::UI::WebControls::EditCommandColumn::ValidationGroup"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"b83bf7bf-7419-1a7f-1794-34ca45ed7dda","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Web.UI.WebControls/EditCommandColumn.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"EditCommandColumn class | Microsoft Docs","_op_ogTitle":"EditCommandColumn class","description":"A special column type for the  control that contains the Edit buttons for editing data items in each row.\n","toc_asset_id":"_splitted/System.Web.UI.WebControls/toc.json","toc_rel":"_splitted/System.Web.UI.WebControls/toc.json","source_url":"","ms.assetid":"System.Web.UI.WebControls.EditCommandColumn","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.web.ui.webcontrols.editcommandcolumn","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.web.ui.webcontrols.editcommandcolumn","fileRelativePath":"System.Web.UI.WebControls.EditCommandColumn.html"},"themesRelativePathToOutputRoot":"_themes/"}