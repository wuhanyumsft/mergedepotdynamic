{"content":"    \r\n    <h1 id=\"Microsoft_Build_Utilities_CommandLineBuilder\">\r\n      <span class=\"lang-csharp\">CommandLineBuilder</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Comprises utility methods for constructing a command line.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class CommandLineBuilder</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">CommandLineBuilder</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Build_Utilities_CommandLineBuilder__ctor\" data-linktype=\"self-bookmark\">CommandLineBuilder()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"microsoft.build.utilities.commandlinebuilder\" data-linktype=\"relative-path\">CommandLineBuilder</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Build_Utilities_CommandLineBuilder__ctor_System_Boolean_\" data-linktype=\"self-bookmark\">CommandLineBuilder(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Default constructor</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Build_Utilities_CommandLineBuilder_CommandLine\" data-linktype=\"self-bookmark\">CommandLine</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> instance representing the command line for inheriting classes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Build_Utilities_CommandLineBuilder_Length\" data-linktype=\"self-bookmark\">Length</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the length of the command line.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Build_Utilities_CommandLineBuilder_AppendFileNameIfNotNull_Microsoft_Build_Framework_ITaskItem_\" data-linktype=\"self-bookmark\">AppendFileNameIfNotNull(ITaskItem)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Appends the command line with the file name of the specified <a class=\"xref\" href=\"microsoft.build.framework.itaskitem\" data-linktype=\"relative-path\">ITaskItem</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Build_Utilities_CommandLineBuilder_AppendFileNameIfNotNull_System_String_\" data-linktype=\"self-bookmark\">AppendFileNameIfNotNull(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Appends the command line with file name represented by the parameter, inserting quotation marks if necessary.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Build_Utilities_CommandLineBuilder_AppendFileNamesIfNotNull_Microsoft_Build_Framework_ITaskItem___System_String_\" data-linktype=\"self-bookmark\">AppendFileNamesIfNotNull(ITaskItem[],String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Appends the command line with the list of file names in the specified <a class=\"xref\" href=\"microsoft.build.framework.itaskitem\" data-linktype=\"relative-path\">ITaskItem</a> array, separated by the specified delimiter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Build_Utilities_CommandLineBuilder_AppendFileNamesIfNotNull_System_String___System_String_\" data-linktype=\"self-bookmark\">AppendFileNamesIfNotNull(String[],String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Appends the command line with the list of file names in the specified <code>string</code> array, separated by the specified delimiter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Build_Utilities_CommandLineBuilder_AppendFileNameWithQuoting_System_String_\" data-linktype=\"self-bookmark\">AppendFileNameWithQuoting(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Appends the command line with a file name, and surrounds the file name with quotation marks as necessary.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Build_Utilities_CommandLineBuilder_AppendQuotedTextToBuffer_System_Text_StringBuilder_System_String_\" data-linktype=\"self-bookmark\">AppendQuotedTextToBuffer(StringBuilder,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Appends given text to the buffer after first quoting the text if necessary.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Build_Utilities_CommandLineBuilder_AppendSpaceIfNotEmpty\" data-linktype=\"self-bookmark\">AppendSpaceIfNotEmpty()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds a space to the specified string, given the string is not empty.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Build_Utilities_CommandLineBuilder_AppendSwitch_System_String_\" data-linktype=\"self-bookmark\">AppendSwitch(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Appends the command line with the specified switch.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Build_Utilities_CommandLineBuilder_AppendSwitchIfNotNull_System_String_Microsoft_Build_Framework_ITaskItem_\" data-linktype=\"self-bookmark\">AppendSwitchIfNotNull(String,ITaskItem)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Appends the command line with a switch that takes a task item specification that acts a single string parameter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Build_Utilities_CommandLineBuilder_AppendSwitchIfNotNull_System_String_System_String_\" data-linktype=\"self-bookmark\">AppendSwitchIfNotNull(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Appends the command line with a switch that takes a single string parameter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Build_Utilities_CommandLineBuilder_AppendSwitchIfNotNull_System_String_Microsoft_Build_Framework_ITaskItem___System_String_\" data-linktype=\"self-bookmark\">AppendSwitchIfNotNull(String,ITaskItem[],String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Appends the command line with a switch that takes an array of task item specifications that act as string parameters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Build_Utilities_CommandLineBuilder_AppendSwitchIfNotNull_System_String_System_String___System_String_\" data-linktype=\"self-bookmark\">AppendSwitchIfNotNull(String,String[],String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Appends the command line with a switch that takes an array of string parameters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Build_Utilities_CommandLineBuilder_AppendSwitchUnquotedIfNotNull_System_String_Microsoft_Build_Framework_ITaskItem_\" data-linktype=\"self-bookmark\">AppendSwitchUnquotedIfNotNull(String,ITaskItem)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Appends the command line with a switch that takes a task item specification as a single string parameter, without attempting to encapsulate the switch parameter with quotation marks.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Build_Utilities_CommandLineBuilder_AppendSwitchUnquotedIfNotNull_System_String_System_String_\" data-linktype=\"self-bookmark\">AppendSwitchUnquotedIfNotNull(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Appends the command line with a switch that takes a single string parameter, without attempting to encapsulate the switch parameter with quotation marks.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Build_Utilities_CommandLineBuilder_AppendSwitchUnquotedIfNotNull_System_String_Microsoft_Build_Framework_ITaskItem___System_String_\" data-linktype=\"self-bookmark\">AppendSwitchUnquotedIfNotNull(String,ITaskItem[],String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Appends the command line with a switch that takes an array of task item specifications that act as string parameters, without attempting to encapsulate them with quotation marks.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Build_Utilities_CommandLineBuilder_AppendSwitchUnquotedIfNotNull_System_String_System_String___System_String_\" data-linktype=\"self-bookmark\">AppendSwitchUnquotedIfNotNull(String,String[],String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Appends the command line with a switch that takes an array of string parameters, without attempting to encapsulate switch parameters with quotation marks.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Build_Utilities_CommandLineBuilder_AppendTextUnquoted_System_String_\" data-linktype=\"self-bookmark\">AppendTextUnquoted(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Appends the command line with string, without attempting to encapsulate the string with quotation marks.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Build_Utilities_CommandLineBuilder_AppendTextWithQuoting_System_String_\" data-linktype=\"self-bookmark\">AppendTextWithQuoting(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Appends the command line with string, and surrounds the string with quotations marks as necessary.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Build_Utilities_CommandLineBuilder_IsQuotingRequired_System_String_\" data-linktype=\"self-bookmark\">IsQuotingRequired(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the specified string parameter should be surrounded with quotation marks because it contains white space.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Build_Utilities_CommandLineBuilder_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the command line as a string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Build_Utilities_CommandLineBuilder_VerifyThrowNoEmbeddedDoubleQuotes_System_String_System_String_\" data-linktype=\"self-bookmark\">VerifyThrowNoEmbeddedDoubleQuotes(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an error if the command line parameter contains a double-quote (&quot;) character. Because double quotes are illegal in command line parameters, this method helps prevent parameter injection attacks.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Build_Utilities_CommandLineBuilder__ctor\">\r\n    \r\n            <a id=\"Microsoft_Build_Utilities_CommandLineBuilder__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CommandLineBuilder()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"microsoft.build.utilities.commandlinebuilder\" data-linktype=\"relative-path\">CommandLineBuilder</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public CommandLineBuilder ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"microsoft.build.utilities.tooltask\" data-linktype=\"relative-path\">ToolTask</a> that runs <a href=\"../Topic/Ilasm.exe%20(IL%20Assembler).md\" data-linktype=\"relative-path\">Ilasm.exe (IL Assembler)</a>. The <a class=\"xref\" href=\"microsoft.build.utilities.commandlinebuilder\" data-linktype=\"relative-path\">CommandLineBuilder</a>, <a class=\"xref\" href=\"microsoft.build.utilities.toollocationhelper\" data-linktype=\"relative-path\">ToolLocationHelper</a>, and <a class=\"xref\" href=\"microsoft.build.utilities.tasklogginghelper\" data-linktype=\"relative-path\">TaskLoggingHelper</a> classes are used to generate the information needed to run the task.  </p>\n<pre><code class=\"lang-cs\" name=\"msbuild_ToolTask#1\">using System;\nusing System.Collections;\nusing System.Text;\nusing Microsoft.Build.Utilities;\nusing Microsoft.Build.Framework;\n\nnamespace MSBuildTasks\n{\n    /// &lt;summary&gt;\n    /// A very simple and incomplete ToolTask to wrap the ILASM.EXE tool.\n    /// &lt;/summary&gt;\n    public class ILAsm : ToolTask\n    {\n        #region Member Data\n        /// &lt;summary&gt;\n        /// Gets the collection of parameters used by the task class.\n        /// &lt;/summary&gt;\n        /// &lt;value&gt;Parameter bag.&lt;/value&gt;\n        protected internal Hashtable Bag\n        {\n            get\n            {\n                return bag;\n            }\n        }\n\n        private Hashtable bag = new Hashtable();\n        #endregion\n\n        #region ILAsm Task Properties\n        /// &lt;summary&gt;\n        /// The Source file that is to be compled (.il)\n        /// &lt;/summary&gt;\n        public ITaskItem Source\n        {\n            get { return Bag[&quot;Source&quot;] as ITaskItem; }\n            set { Bag[&quot;Source&quot;] = value; }\n        }\n        /// &lt;summary&gt;\n        /// Either EXE or DLL indicating the assembly type to be generated\n        /// &lt;/summary&gt;\n        public string TargetType\n        {\n            get { return Bag[&quot;TargetType&quot;] as string; }\n            set { Bag[&quot;TargetType&quot;] = value; }\n        }\n        #endregion\n\n        #region ToolTask Members\n        protected override string ToolName\n        {\n            get { return &quot;ILAsm.exe&quot;; }\n        }\n\n        /// &lt;summary&gt;\n        /// Use ToolLocationHelper to find ILASM.EXE in the Framework directory\n        /// &lt;/summary&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        protected override string GenerateFullPathToTool()\n        {\n            // Ask ToolLocationHelper to find ILASM.EXE - it will look in the latest framework directory available\n            return ToolLocationHelper.GetPathToDotNetFrameworkFile(ToolName, TargetDotNetFrameworkVersion.VersionLatest);\n        }\n        #endregion\n\n        #region ILAsm Task Members\n        /// &lt;summary&gt;\n        /// Construct the command line from the task properties by using the CommandLineBuilder\n        /// &lt;/summary&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        protected override string GenerateCommandLineCommands()\n        {\n            CommandLineBuilder builder = new CommandLineBuilder();\n\n            // We don&#39;t need the tool&#39;s logo information shown\n            builder.AppendSwitch(&quot;/nologo&quot;);\n\n            string targetType = Bag[&quot;TargetType&quot;] as string;\n            // Be explicit with our switches\n            if (targetType != null)\n            {\n                if (String.Compare(targetType, &quot;DLL&quot;, true) == 0)\n                {\n                    builder.AppendSwitch(&quot;/DLL&quot;);\n                }\n                else if (String.Compare(targetType, &quot;EXE&quot;, true) == 0)\n                {\n                    builder.AppendSwitch(&quot;/EXE&quot;);\n                }\n                else\n                {\n                    Log.LogWarning(&quot;Invalid TargetType (valid values are DLL and EXE) specified: {0}&quot;, targetType);\n                }\n            }\n\n            // Add the filename that we want the tool to process\n            builder.AppendFileNameIfNotNull(Bag[&quot;Source&quot;] as ITaskItem);\n\n            // Log a High importance message stating the file that we are assembling\n            Log.LogMessage(MessageImportance.High, &quot;Assembling {0}&quot;, Bag[&quot;Source&quot;]);\n\n            // We have all of our switches added, return the commandline as a string\n            return builder.ToString();\n        }\n        #endregion\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"msbuild_ToolTask#1\">Imports System\nImports System.Collections\nImports System.Text\nImports Microsoft.Build.Utilities\nImports Microsoft.Build.Framework\n\nNamespace MSBuildTasks\n\n    &#39;&#39;&#39; &lt;summary&gt;\n    &#39;&#39;&#39; A very simple and incomplete ToolTask to wrap the ILASM.EXE tool.\n    &#39;&#39;&#39; &lt;/summary&gt;\n    Public Class ILAsm\n        Inherits ToolTask\n\n        &#39;&#39;&#39; &lt;summary&gt;\n        &#39;&#39;&#39; Parameter bag.\n        &#39;&#39;&#39; &lt;/summary&gt;\n        Protected Friend ReadOnly Property Bag() As Hashtable\n            Get\n                Return propertyBag\n            End Get\n        End Property\n\n        Private propertyBag As New Hashtable()\n\n        &#39;&#39;&#39; &lt;summary&gt;\n        &#39;&#39;&#39; The Source file that is to be compled (.il)\n        &#39;&#39;&#39; &lt;/summary&gt;\n        Public Property [Source]() As ITaskItem\n            Get\n                Return Bag(&quot;Source&quot;)\n            End Get\n            Set(ByVal value As ITaskItem)\n                Bag(&quot;Source&quot;) = value\n            End Set\n        End Property\n\n        &#39;&#39;&#39; &lt;summary&gt;\n        &#39;&#39;&#39; Either EXE or DLL indicating the assembly type to be generated\n        &#39;&#39;&#39; &lt;/summary&gt;\n        Public Property TargetType() As String\n            Get\n                Return Bag(&quot;TargetType&quot;)\n            End Get\n            Set(ByVal value As String)\n                Bag(&quot;TargetType&quot;) = value\n            End Set\n        End Property &#39;\n\n        Protected Overrides ReadOnly Property ToolName() As String\n            Get\n                Return &quot;ILAsm.exe&quot;\n            End Get\n        End Property\n\n        &#39;&#39;&#39; &lt;summary&gt;\n        &#39;&#39;&#39; Use ToolLocationHelper to find ILASM.EXE in the Framework directory\n        &#39;&#39;&#39; &lt;/summary&gt;\n        Protected Overrides Function GenerateFullPathToTool() As String\n            &#39; Ask ToolLocationHelper to find ILASM.EXE - it will look in the latest framework directory available\n            Return ToolLocationHelper.GetPathToDotNetFrameworkFile(ToolName, TargetDotNetFrameworkVersion.VersionLatest)\n        End Function\n\n        &#39;&#39;&#39; &lt;summary&gt;\n        &#39;&#39;&#39; Construct the command line from the task properties by using the CommandLineBuilder\n        &#39;&#39;&#39; &lt;/summary&gt;\n        Protected Overrides Function GenerateCommandLineCommands() As String\n            Dim builder As New CommandLineBuilder()\n\n            &#39; We don&#39;t need the tool&#39;s logo information shown\n            builder.AppendSwitch(&quot;/nologo&quot;)\n\n            Dim targetType As String = Bag(&quot;TargetType&quot;)\n            &#39; Be explicit with our switches\n            If Not (targetType Is Nothing) Then\n                If [String].Compare(targetType, &quot;DLL&quot;, True) = 0 Then\n                    builder.AppendSwitch(&quot;/DLL&quot;)\n                ElseIf [String].Compare(targetType, &quot;EXE&quot;, True) = 0 Then\n                    builder.AppendSwitch(&quot;/EXE&quot;)\n                Else\n                    Log.LogWarning(&quot;Invalid TargetType (valid values are DLL and EXE) specified: {0}&quot;, targetType)\n                End If\n            End If\n            &#39; Add the filename that we want the tool to process\n            builder.AppendFileNameIfNotNull(Bag(&quot;Source&quot;))\n\n            &#39; Log a High importance message stating the file that we are assembling\n            Log.LogMessage(MessageImportance.High, &quot;Assembling {0}&quot;, Bag(&quot;Source&quot;))\n\n            &#39; We have all of our switches added, return the commandline as a string\n            Return builder.ToString()\n        End Function\n    End Class\nEnd Namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Build_Utilities_CommandLineBuilder__ctor_System_Boolean_\">\r\n    \r\n            <a id=\"Microsoft_Build_Utilities_CommandLineBuilder__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CommandLineBuilder(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Default constructor</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public CommandLineBuilder (bool quoteHyphensOnCommandLine);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>quoteHyphensOnCommandLine</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>If true, hyphens should be quoted.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Build_Utilities_CommandLineBuilder_CommandLine\">\r\n    \r\n            <a id=\"Microsoft_Build_Utilities_CommandLineBuilder_CommandLine_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CommandLine</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> instance representing the command line for inheriting classes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected System.Text.StringBuilder CommandLine { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> for inheriting classes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Build_Utilities_CommandLineBuilder_Length\">\r\n    \r\n            <a id=\"Microsoft_Build_Utilities_CommandLineBuilder_Length_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Length</div>        \r\n          </div>\r\n    \r\n            <p>Represents the length of the command line.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Length { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Build_Utilities_CommandLineBuilder_AppendFileNameIfNotNull_Microsoft_Build_Framework_ITaskItem_\">\r\n    \r\n            <a id=\"Microsoft_Build_Utilities_CommandLineBuilder_AppendFileNameIfNotNull_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AppendFileNameIfNotNull(ITaskItem)</div>        \r\n          </div>\r\n    \r\n            <p>Appends the command line with the file name of the specified <a class=\"xref\" href=\"microsoft.build.framework.itaskitem\" data-linktype=\"relative-path\">ITaskItem</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AppendFileNameIfNotNull (Microsoft.Build.Framework.ITaskItem fileItem);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileItem</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.build.framework.itaskitem\" data-linktype=\"relative-path\">ITaskItem</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The task item specification to append to the command line. If it is <code>null</code>, then this method has no effect.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method appends the command line with a task item specification, and surrounds task item specification with quotations marks as necessary.  </p>\n<p> If the command line is not empty, then this method also appends the command line with a space, before the task item specification.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"microsoft.build.utilities.tooltask\" data-linktype=\"relative-path\">ToolTask</a> that runs <a href=\"../Topic/Ilasm.exe%20(IL%20Assembler).md\" data-linktype=\"relative-path\">Ilasm.exe (IL Assembler)</a>. The <a class=\"xref\" href=\"microsoft.build.utilities.commandlinebuilder\" data-linktype=\"relative-path\">CommandLineBuilder</a>, <a class=\"xref\" href=\"microsoft.build.utilities.toollocationhelper\" data-linktype=\"relative-path\">ToolLocationHelper</a>, and <a class=\"xref\" href=\"microsoft.build.utilities.tasklogginghelper\" data-linktype=\"relative-path\">TaskLoggingHelper</a> classes are used to generate the information needed to run the task.  </p>\n<pre><code class=\"lang-cs\" name=\"msbuild_ToolTask#1\">using System;\nusing System.Collections;\nusing System.Text;\nusing Microsoft.Build.Utilities;\nusing Microsoft.Build.Framework;\n\nnamespace MSBuildTasks\n{\n    /// &lt;summary&gt;\n    /// A very simple and incomplete ToolTask to wrap the ILASM.EXE tool.\n    /// &lt;/summary&gt;\n    public class ILAsm : ToolTask\n    {\n        #region Member Data\n        /// &lt;summary&gt;\n        /// Gets the collection of parameters used by the task class.\n        /// &lt;/summary&gt;\n        /// &lt;value&gt;Parameter bag.&lt;/value&gt;\n        protected internal Hashtable Bag\n        {\n            get\n            {\n                return bag;\n            }\n        }\n\n        private Hashtable bag = new Hashtable();\n        #endregion\n\n        #region ILAsm Task Properties\n        /// &lt;summary&gt;\n        /// The Source file that is to be compled (.il)\n        /// &lt;/summary&gt;\n        public ITaskItem Source\n        {\n            get { return Bag[&quot;Source&quot;] as ITaskItem; }\n            set { Bag[&quot;Source&quot;] = value; }\n        }\n        /// &lt;summary&gt;\n        /// Either EXE or DLL indicating the assembly type to be generated\n        /// &lt;/summary&gt;\n        public string TargetType\n        {\n            get { return Bag[&quot;TargetType&quot;] as string; }\n            set { Bag[&quot;TargetType&quot;] = value; }\n        }\n        #endregion\n\n        #region ToolTask Members\n        protected override string ToolName\n        {\n            get { return &quot;ILAsm.exe&quot;; }\n        }\n\n        /// &lt;summary&gt;\n        /// Use ToolLocationHelper to find ILASM.EXE in the Framework directory\n        /// &lt;/summary&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        protected override string GenerateFullPathToTool()\n        {\n            // Ask ToolLocationHelper to find ILASM.EXE - it will look in the latest framework directory available\n            return ToolLocationHelper.GetPathToDotNetFrameworkFile(ToolName, TargetDotNetFrameworkVersion.VersionLatest);\n        }\n        #endregion\n\n        #region ILAsm Task Members\n        /// &lt;summary&gt;\n        /// Construct the command line from the task properties by using the CommandLineBuilder\n        /// &lt;/summary&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        protected override string GenerateCommandLineCommands()\n        {\n            CommandLineBuilder builder = new CommandLineBuilder();\n\n            // We don&#39;t need the tool&#39;s logo information shown\n            builder.AppendSwitch(&quot;/nologo&quot;);\n\n            string targetType = Bag[&quot;TargetType&quot;] as string;\n            // Be explicit with our switches\n            if (targetType != null)\n            {\n                if (String.Compare(targetType, &quot;DLL&quot;, true) == 0)\n                {\n                    builder.AppendSwitch(&quot;/DLL&quot;);\n                }\n                else if (String.Compare(targetType, &quot;EXE&quot;, true) == 0)\n                {\n                    builder.AppendSwitch(&quot;/EXE&quot;);\n                }\n                else\n                {\n                    Log.LogWarning(&quot;Invalid TargetType (valid values are DLL and EXE) specified: {0}&quot;, targetType);\n                }\n            }\n\n            // Add the filename that we want the tool to process\n            builder.AppendFileNameIfNotNull(Bag[&quot;Source&quot;] as ITaskItem);\n\n            // Log a High importance message stating the file that we are assembling\n            Log.LogMessage(MessageImportance.High, &quot;Assembling {0}&quot;, Bag[&quot;Source&quot;]);\n\n            // We have all of our switches added, return the commandline as a string\n            return builder.ToString();\n        }\n        #endregion\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"msbuild_ToolTask#1\">Imports System\nImports System.Collections\nImports System.Text\nImports Microsoft.Build.Utilities\nImports Microsoft.Build.Framework\n\nNamespace MSBuildTasks\n\n    &#39;&#39;&#39; &lt;summary&gt;\n    &#39;&#39;&#39; A very simple and incomplete ToolTask to wrap the ILASM.EXE tool.\n    &#39;&#39;&#39; &lt;/summary&gt;\n    Public Class ILAsm\n        Inherits ToolTask\n\n        &#39;&#39;&#39; &lt;summary&gt;\n        &#39;&#39;&#39; Parameter bag.\n        &#39;&#39;&#39; &lt;/summary&gt;\n        Protected Friend ReadOnly Property Bag() As Hashtable\n            Get\n                Return propertyBag\n            End Get\n        End Property\n\n        Private propertyBag As New Hashtable()\n\n        &#39;&#39;&#39; &lt;summary&gt;\n        &#39;&#39;&#39; The Source file that is to be compled (.il)\n        &#39;&#39;&#39; &lt;/summary&gt;\n        Public Property [Source]() As ITaskItem\n            Get\n                Return Bag(&quot;Source&quot;)\n            End Get\n            Set(ByVal value As ITaskItem)\n                Bag(&quot;Source&quot;) = value\n            End Set\n        End Property\n\n        &#39;&#39;&#39; &lt;summary&gt;\n        &#39;&#39;&#39; Either EXE or DLL indicating the assembly type to be generated\n        &#39;&#39;&#39; &lt;/summary&gt;\n        Public Property TargetType() As String\n            Get\n                Return Bag(&quot;TargetType&quot;)\n            End Get\n            Set(ByVal value As String)\n                Bag(&quot;TargetType&quot;) = value\n            End Set\n        End Property &#39;\n\n        Protected Overrides ReadOnly Property ToolName() As String\n            Get\n                Return &quot;ILAsm.exe&quot;\n            End Get\n        End Property\n\n        &#39;&#39;&#39; &lt;summary&gt;\n        &#39;&#39;&#39; Use ToolLocationHelper to find ILASM.EXE in the Framework directory\n        &#39;&#39;&#39; &lt;/summary&gt;\n        Protected Overrides Function GenerateFullPathToTool() As String\n            &#39; Ask ToolLocationHelper to find ILASM.EXE - it will look in the latest framework directory available\n            Return ToolLocationHelper.GetPathToDotNetFrameworkFile(ToolName, TargetDotNetFrameworkVersion.VersionLatest)\n        End Function\n\n        &#39;&#39;&#39; &lt;summary&gt;\n        &#39;&#39;&#39; Construct the command line from the task properties by using the CommandLineBuilder\n        &#39;&#39;&#39; &lt;/summary&gt;\n        Protected Overrides Function GenerateCommandLineCommands() As String\n            Dim builder As New CommandLineBuilder()\n\n            &#39; We don&#39;t need the tool&#39;s logo information shown\n            builder.AppendSwitch(&quot;/nologo&quot;)\n\n            Dim targetType As String = Bag(&quot;TargetType&quot;)\n            &#39; Be explicit with our switches\n            If Not (targetType Is Nothing) Then\n                If [String].Compare(targetType, &quot;DLL&quot;, True) = 0 Then\n                    builder.AppendSwitch(&quot;/DLL&quot;)\n                ElseIf [String].Compare(targetType, &quot;EXE&quot;, True) = 0 Then\n                    builder.AppendSwitch(&quot;/EXE&quot;)\n                Else\n                    Log.LogWarning(&quot;Invalid TargetType (valid values are DLL and EXE) specified: {0}&quot;, targetType)\n                End If\n            End If\n            &#39; Add the filename that we want the tool to process\n            builder.AppendFileNameIfNotNull(Bag(&quot;Source&quot;))\n\n            &#39; Log a High importance message stating the file that we are assembling\n            Log.LogMessage(MessageImportance.High, &quot;Assembling {0}&quot;, Bag(&quot;Source&quot;))\n\n            &#39; We have all of our switches added, return the commandline as a string\n            Return builder.ToString()\n        End Function\n    End Class\nEnd Namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Build_Utilities_CommandLineBuilder_AppendFileNameIfNotNull_System_String_\">\r\n    \r\n            <a id=\"Microsoft_Build_Utilities_CommandLineBuilder_AppendFileNameIfNotNull_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AppendFileNameIfNotNull(String)</div>        \r\n          </div>\r\n    \r\n            <p>Appends the command line with file name represented by the parameter, inserting quotation marks if necessary.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AppendFileNameIfNotNull (string fileName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file name to append. If it is <code>null</code>, then this method has no effect.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method appends the command line with a file name, and surrounds the file name with quotation marks as necessary.  </p>\n<p> If the first character of the file name is a dash, then <code>.\\</code> is added to the beginning of the file name to distinguish it from a switch.  </p>\n<p> If the command line is not empty, then this method also appends the command line with a space, before the file name.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p><code>AppendFileNameIfNotNull(&quot;-StrangeFileName.cs&quot;)</code> yields <code>.\\-StrangeFileName.cs</code>.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Build_Utilities_CommandLineBuilder_AppendFileNamesIfNotNull_Microsoft_Build_Framework_ITaskItem___System_String_\">\r\n    \r\n            <a id=\"Microsoft_Build_Utilities_CommandLineBuilder_AppendFileNamesIfNotNull_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AppendFileNamesIfNotNull(ITaskItem[],String)</div>        \r\n          </div>\r\n    \r\n            <p>Appends the command line with the list of file names in the specified <a class=\"xref\" href=\"microsoft.build.framework.itaskitem\" data-linktype=\"relative-path\">ITaskItem</a> array, separated by the specified delimiter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AppendFileNamesIfNotNull (Microsoft.Build.Framework.ITaskItem[] fileItems, string delimiter);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileItems</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.build.framework.itaskitem\" data-linktype=\"relative-path\">ITaskItem</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The task item specifications to append. If the array is <code>null</code>, then this method has no effect.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>delimiter</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delimiter to put between task item specifications in the command line.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method appends the command line with file names, and surrounds the file names with quotation marks as necessary. The file names are separated by the specified delimiter.  </p>\n<p> If the command line is not empty, then this method also appends the command line with a space, before the file names.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>See example in <a class=\"xref\" href=\"microsoft.build.utilities.commandlinebuilder#Microsoft_Build_Utilities_CommandLineBuilder_AppendFileNamesIfNotNull_\" data-linktype=\"relative-path\">AppendFileNamesIfNotNull</a>.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Build_Utilities_CommandLineBuilder_AppendFileNamesIfNotNull_System_String___System_String_\">\r\n    \r\n            <a id=\"Microsoft_Build_Utilities_CommandLineBuilder_AppendFileNamesIfNotNull_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AppendFileNamesIfNotNull(String[],String)</div>        \r\n          </div>\r\n    \r\n            <p>Appends the command line with the list of file names in the specified <code>string</code> array, separated by the specified delimiter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AppendFileNamesIfNotNull (string[] fileNames, string delimiter);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileNames</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file names to append. If the array is <code>null</code>, then this method has no effect.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>delimiter</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delimiter to put between file names in the command line.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method appends the command line with file names, and surrounds the file names with quotation marks as necessary. The file names are separated by the specified delimiter.  </p>\n<p> If the command line is not empty, then this method also appends the command line with a space, before the file names.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p><code>AppendFileNamesIfNotNull(new string[] {&quot;Alpha.cs&quot;, &quot;Beta.cs&quot;}, &quot;,&quot;)</code> yields <code>Alpha.cs,Beta.cs</code>.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Build_Utilities_CommandLineBuilder_AppendFileNameWithQuoting_System_String_\">\r\n    \r\n            <a id=\"Microsoft_Build_Utilities_CommandLineBuilder_AppendFileNameWithQuoting_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AppendFileNameWithQuoting(String)</div>        \r\n          </div>\r\n    \r\n            <p>Appends the command line with a file name, and surrounds the file name with quotation marks as necessary.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected void AppendFileNameWithQuoting (string fileName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file name to append.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the first character of the file name is a dash, then <code>.\\</code> is added to the beginning of the file name to distinguish it from a switch.  </p>\n<p> This method does not append the command line with a space, before executing.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p><code>AppendFileNameWithQuoting(&quot;-StrangeFileName.cs&quot;)</code> yields <code>.\\-StrangeFileName.cs</code>.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Build_Utilities_CommandLineBuilder_AppendQuotedTextToBuffer_System_Text_StringBuilder_System_String_\">\r\n    \r\n            <a id=\"Microsoft_Build_Utilities_CommandLineBuilder_AppendQuotedTextToBuffer_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AppendQuotedTextToBuffer(StringBuilder,String)</div>        \r\n          </div>\r\n    \r\n            <p>Appends given text to the buffer after first quoting the text if necessary.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected void AppendQuotedTextToBuffer (System.Text.StringBuilder buffer, string unquotedTextToAppend);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The buffer to append to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>unquotedTextToAppend</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The text to be quoted.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Build_Utilities_CommandLineBuilder_AppendSpaceIfNotEmpty\">\r\n    \r\n            <a id=\"Microsoft_Build_Utilities_CommandLineBuilder_AppendSpaceIfNotEmpty_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AppendSpaceIfNotEmpty()</div>        \r\n          </div>\r\n    \r\n            <p>Adds a space to the specified string, given the string is not empty.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected void AppendSpaceIfNotEmpty ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is only available to inherited classes.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Build_Utilities_CommandLineBuilder_AppendSwitch_System_String_\">\r\n    \r\n            <a id=\"Microsoft_Build_Utilities_CommandLineBuilder_AppendSwitch_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AppendSwitch(String)</div>        \r\n          </div>\r\n    \r\n            <p>Appends the command line with the specified switch.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AppendSwitch (string switchName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>switchName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the switch to append to the command line. This value cannot be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the command line is not empty, then this method also appends the command line with a space, before the switch.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"microsoft.build.utilities.tooltask\" data-linktype=\"relative-path\">ToolTask</a> that runs <a href=\"../Topic/Ilasm.exe%20(IL%20Assembler).md\" data-linktype=\"relative-path\">Ilasm.exe (IL Assembler)</a>. The <a class=\"xref\" href=\"microsoft.build.utilities.commandlinebuilder\" data-linktype=\"relative-path\">CommandLineBuilder</a>, <a class=\"xref\" href=\"microsoft.build.utilities.toollocationhelper\" data-linktype=\"relative-path\">ToolLocationHelper</a>, and <a class=\"xref\" href=\"microsoft.build.utilities.tasklogginghelper\" data-linktype=\"relative-path\">TaskLoggingHelper</a> classes are used to generate the information needed to run the task.  </p>\n<pre><code class=\"lang-cs\" name=\"msbuild_ToolTask#1\">using System;\nusing System.Collections;\nusing System.Text;\nusing Microsoft.Build.Utilities;\nusing Microsoft.Build.Framework;\n\nnamespace MSBuildTasks\n{\n    /// &lt;summary&gt;\n    /// A very simple and incomplete ToolTask to wrap the ILASM.EXE tool.\n    /// &lt;/summary&gt;\n    public class ILAsm : ToolTask\n    {\n        #region Member Data\n        /// &lt;summary&gt;\n        /// Gets the collection of parameters used by the task class.\n        /// &lt;/summary&gt;\n        /// &lt;value&gt;Parameter bag.&lt;/value&gt;\n        protected internal Hashtable Bag\n        {\n            get\n            {\n                return bag;\n            }\n        }\n\n        private Hashtable bag = new Hashtable();\n        #endregion\n\n        #region ILAsm Task Properties\n        /// &lt;summary&gt;\n        /// The Source file that is to be compled (.il)\n        /// &lt;/summary&gt;\n        public ITaskItem Source\n        {\n            get { return Bag[&quot;Source&quot;] as ITaskItem; }\n            set { Bag[&quot;Source&quot;] = value; }\n        }\n        /// &lt;summary&gt;\n        /// Either EXE or DLL indicating the assembly type to be generated\n        /// &lt;/summary&gt;\n        public string TargetType\n        {\n            get { return Bag[&quot;TargetType&quot;] as string; }\n            set { Bag[&quot;TargetType&quot;] = value; }\n        }\n        #endregion\n\n        #region ToolTask Members\n        protected override string ToolName\n        {\n            get { return &quot;ILAsm.exe&quot;; }\n        }\n\n        /// &lt;summary&gt;\n        /// Use ToolLocationHelper to find ILASM.EXE in the Framework directory\n        /// &lt;/summary&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        protected override string GenerateFullPathToTool()\n        {\n            // Ask ToolLocationHelper to find ILASM.EXE - it will look in the latest framework directory available\n            return ToolLocationHelper.GetPathToDotNetFrameworkFile(ToolName, TargetDotNetFrameworkVersion.VersionLatest);\n        }\n        #endregion\n\n        #region ILAsm Task Members\n        /// &lt;summary&gt;\n        /// Construct the command line from the task properties by using the CommandLineBuilder\n        /// &lt;/summary&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        protected override string GenerateCommandLineCommands()\n        {\n            CommandLineBuilder builder = new CommandLineBuilder();\n\n            // We don&#39;t need the tool&#39;s logo information shown\n            builder.AppendSwitch(&quot;/nologo&quot;);\n\n            string targetType = Bag[&quot;TargetType&quot;] as string;\n            // Be explicit with our switches\n            if (targetType != null)\n            {\n                if (String.Compare(targetType, &quot;DLL&quot;, true) == 0)\n                {\n                    builder.AppendSwitch(&quot;/DLL&quot;);\n                }\n                else if (String.Compare(targetType, &quot;EXE&quot;, true) == 0)\n                {\n                    builder.AppendSwitch(&quot;/EXE&quot;);\n                }\n                else\n                {\n                    Log.LogWarning(&quot;Invalid TargetType (valid values are DLL and EXE) specified: {0}&quot;, targetType);\n                }\n            }\n\n            // Add the filename that we want the tool to process\n            builder.AppendFileNameIfNotNull(Bag[&quot;Source&quot;] as ITaskItem);\n\n            // Log a High importance message stating the file that we are assembling\n            Log.LogMessage(MessageImportance.High, &quot;Assembling {0}&quot;, Bag[&quot;Source&quot;]);\n\n            // We have all of our switches added, return the commandline as a string\n            return builder.ToString();\n        }\n        #endregion\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"msbuild_ToolTask#1\">Imports System\nImports System.Collections\nImports System.Text\nImports Microsoft.Build.Utilities\nImports Microsoft.Build.Framework\n\nNamespace MSBuildTasks\n\n    &#39;&#39;&#39; &lt;summary&gt;\n    &#39;&#39;&#39; A very simple and incomplete ToolTask to wrap the ILASM.EXE tool.\n    &#39;&#39;&#39; &lt;/summary&gt;\n    Public Class ILAsm\n        Inherits ToolTask\n\n        &#39;&#39;&#39; &lt;summary&gt;\n        &#39;&#39;&#39; Parameter bag.\n        &#39;&#39;&#39; &lt;/summary&gt;\n        Protected Friend ReadOnly Property Bag() As Hashtable\n            Get\n                Return propertyBag\n            End Get\n        End Property\n\n        Private propertyBag As New Hashtable()\n\n        &#39;&#39;&#39; &lt;summary&gt;\n        &#39;&#39;&#39; The Source file that is to be compled (.il)\n        &#39;&#39;&#39; &lt;/summary&gt;\n        Public Property [Source]() As ITaskItem\n            Get\n                Return Bag(&quot;Source&quot;)\n            End Get\n            Set(ByVal value As ITaskItem)\n                Bag(&quot;Source&quot;) = value\n            End Set\n        End Property\n\n        &#39;&#39;&#39; &lt;summary&gt;\n        &#39;&#39;&#39; Either EXE or DLL indicating the assembly type to be generated\n        &#39;&#39;&#39; &lt;/summary&gt;\n        Public Property TargetType() As String\n            Get\n                Return Bag(&quot;TargetType&quot;)\n            End Get\n            Set(ByVal value As String)\n                Bag(&quot;TargetType&quot;) = value\n            End Set\n        End Property &#39;\n\n        Protected Overrides ReadOnly Property ToolName() As String\n            Get\n                Return &quot;ILAsm.exe&quot;\n            End Get\n        End Property\n\n        &#39;&#39;&#39; &lt;summary&gt;\n        &#39;&#39;&#39; Use ToolLocationHelper to find ILASM.EXE in the Framework directory\n        &#39;&#39;&#39; &lt;/summary&gt;\n        Protected Overrides Function GenerateFullPathToTool() As String\n            &#39; Ask ToolLocationHelper to find ILASM.EXE - it will look in the latest framework directory available\n            Return ToolLocationHelper.GetPathToDotNetFrameworkFile(ToolName, TargetDotNetFrameworkVersion.VersionLatest)\n        End Function\n\n        &#39;&#39;&#39; &lt;summary&gt;\n        &#39;&#39;&#39; Construct the command line from the task properties by using the CommandLineBuilder\n        &#39;&#39;&#39; &lt;/summary&gt;\n        Protected Overrides Function GenerateCommandLineCommands() As String\n            Dim builder As New CommandLineBuilder()\n\n            &#39; We don&#39;t need the tool&#39;s logo information shown\n            builder.AppendSwitch(&quot;/nologo&quot;)\n\n            Dim targetType As String = Bag(&quot;TargetType&quot;)\n            &#39; Be explicit with our switches\n            If Not (targetType Is Nothing) Then\n                If [String].Compare(targetType, &quot;DLL&quot;, True) = 0 Then\n                    builder.AppendSwitch(&quot;/DLL&quot;)\n                ElseIf [String].Compare(targetType, &quot;EXE&quot;, True) = 0 Then\n                    builder.AppendSwitch(&quot;/EXE&quot;)\n                Else\n                    Log.LogWarning(&quot;Invalid TargetType (valid values are DLL and EXE) specified: {0}&quot;, targetType)\n                End If\n            End If\n            &#39; Add the filename that we want the tool to process\n            builder.AppendFileNameIfNotNull(Bag(&quot;Source&quot;))\n\n            &#39; Log a High importance message stating the file that we are assembling\n            Log.LogMessage(MessageImportance.High, &quot;Assembling {0}&quot;, Bag(&quot;Source&quot;))\n\n            &#39; We have all of our switches added, return the commandline as a string\n            Return builder.ToString()\n        End Function\n    End Class\nEnd Namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Build_Utilities_CommandLineBuilder_AppendSwitchIfNotNull_System_String_Microsoft_Build_Framework_ITaskItem_\">\r\n    \r\n            <a id=\"Microsoft_Build_Utilities_CommandLineBuilder_AppendSwitchIfNotNull_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AppendSwitchIfNotNull(String,ITaskItem)</div>        \r\n          </div>\r\n    \r\n            <p>Appends the command line with a switch that takes a task item specification that acts a single string parameter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AppendSwitchIfNotNull (string switchName, Microsoft.Build.Framework.ITaskItem parameter);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>switchName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the switch to append to the command line. This value cannot be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameter</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.build.framework.itaskitem\" data-linktype=\"relative-path\">ITaskItem</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The switch parameter to append to the command line. Quotation marks will be added as necessary. If this value is <code>null</code>, then this method has no effect.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method encapsulates individual file names with quotation marks as necessary.  </p>\n<p> If the command line is not empty, then this method also appends the command line with a space, before the switch.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>See example in <a class=\"xref\" href=\"microsoft.build.utilities.commandlinebuilder#Microsoft_Build_Utilities_CommandLineBuilder_AppendSwitchIfNotNull_\" data-linktype=\"relative-path\">AppendSwitchIfNotNull</a>.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Build_Utilities_CommandLineBuilder_AppendSwitchIfNotNull_System_String_System_String_\">\r\n    \r\n            <a id=\"Microsoft_Build_Utilities_CommandLineBuilder_AppendSwitchIfNotNull_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AppendSwitchIfNotNull(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Appends the command line with a switch that takes a single string parameter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AppendSwitchIfNotNull (string switchName, string parameter);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>switchName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the switch to append to the command line. This value cannot be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameter</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The switch parameter to append to the command line. Quotation marks will be added as necessary. If this value is <code>null</code>, then this method has no effect.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method encapsulates individual file names with quotation marks as necessary.  </p>\n<p> If the command line is not empty, then this method also appends the command line with a space, before the switch.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p><code>AppendSwitchIfNotNull(&quot;/source:&quot;, &quot;File Name.cs&quot;)</code> yields <code>/source:\\&quot;File Name.cs\\&quot;</code>.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Build_Utilities_CommandLineBuilder_AppendSwitchIfNotNull_System_String_Microsoft_Build_Framework_ITaskItem___System_String_\">\r\n    \r\n            <a id=\"Microsoft_Build_Utilities_CommandLineBuilder_AppendSwitchIfNotNull_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AppendSwitchIfNotNull(String,ITaskItem[],String)</div>        \r\n          </div>\r\n    \r\n            <p>Appends the command line with a switch that takes an array of task item specifications that act as string parameters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AppendSwitchIfNotNull (string switchName, Microsoft.Build.Framework.ITaskItem[] parameters, string delimiter);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>switchName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the switch to append to the command line. This value cannot be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameters</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.build.framework.itaskitem\" data-linktype=\"relative-path\">ITaskItem</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of switch parameters to append to the command line. Quotation marks will be added as necessary. If the array is <code>null</code>, then this method has no effect.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>delimiter</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delimiter that separates individual parameters. This value can be empty, but it cannot be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method encapsulates individual file names with quotation marks as necessary.  </p>\n<p> If the command line is not empty, then this method also appends the command line with a space, before the switch.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>See example in <a class=\"xref\" href=\"microsoft.build.utilities.commandlinebuilder#Microsoft_Build_Utilities_CommandLineBuilder_AppendSwitchIfNotNull_\" data-linktype=\"relative-path\">AppendSwitchIfNotNull</a>.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Build_Utilities_CommandLineBuilder_AppendSwitchIfNotNull_System_String_System_String___System_String_\">\r\n    \r\n            <a id=\"Microsoft_Build_Utilities_CommandLineBuilder_AppendSwitchIfNotNull_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AppendSwitchIfNotNull(String,String[],String)</div>        \r\n          </div>\r\n    \r\n            <p>Appends the command line with a switch that takes an array of string parameters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AppendSwitchIfNotNull (string switchName, string[] parameters, string delimiter);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>switchName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the switch to append to the command line. This value cannot be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameters</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of switch parameters to append to the command line. Quotation marks will be added as necessary. If the array is <code>null</code>, then this method has no effect.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>delimiter</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delimiter that separates individual parameters. This value can be empty, but it cannot be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method encapsulates individual file names with quotation marks as necessary.  </p>\n<p> If the command line is not empty, then this method also appends the command line with a space, before the switch.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p><code>AppendSwitchIfNotNull(&quot;/sources:&quot;, new string[] {&quot;Alpha.cs&quot;, &quot;Be ta.cs&quot;}, &quot;;&quot;)</code> yields <code>/sources:Alpha.cs;\\&quot;Be ta.cs\\&quot;</code>.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Build_Utilities_CommandLineBuilder_AppendSwitchUnquotedIfNotNull_System_String_Microsoft_Build_Framework_ITaskItem_\">\r\n    \r\n            <a id=\"Microsoft_Build_Utilities_CommandLineBuilder_AppendSwitchUnquotedIfNotNull_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AppendSwitchUnquotedIfNotNull(String,ITaskItem)</div>        \r\n          </div>\r\n    \r\n            <p>Appends the command line with a switch that takes a task item specification as a single string parameter, without attempting to encapsulate the switch parameter with quotation marks.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AppendSwitchUnquotedIfNotNull (string switchName, Microsoft.Build.Framework.ITaskItem parameter);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>switchName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the switch to append to the command line. This value cannot be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameter</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.build.framework.itaskitem\" data-linktype=\"relative-path\">ITaskItem</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The switch parameter to append to the command line. Quotation marks will not be added. If this value is <code>null</code>, then this method has no effect.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the command line is not empty, then this method also appends the command line with a space, before the switch.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>See example in <a class=\"xref\" href=\"microsoft.build.utilities.commandlinebuilder#Microsoft_Build_Utilities_CommandLineBuilder_AppendSwitchUnquotedIfNotNull_\" data-linktype=\"relative-path\">AppendSwitchUnquotedIfNotNull</a>.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Build_Utilities_CommandLineBuilder_AppendSwitchUnquotedIfNotNull_System_String_System_String_\">\r\n    \r\n            <a id=\"Microsoft_Build_Utilities_CommandLineBuilder_AppendSwitchUnquotedIfNotNull_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AppendSwitchUnquotedIfNotNull(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Appends the command line with a switch that takes a single string parameter, without attempting to encapsulate the switch parameter with quotation marks.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AppendSwitchUnquotedIfNotNull (string switchName, string parameter);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>switchName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the switch to append to the command line. This value cannot be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameter</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The switch parameter to append to the command line. Quotation marks will not be added. If this value is <code>null</code>, then this method has no effect.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the command line is not empty, then this method also appends the command line with a space, before the switch.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p><code>AppendSwitchUnquotedIfNotNull(&quot;/source:&quot;, &quot;File Name.cs&quot;)</code> yields <code>/source:File Name.cs</code>.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Build_Utilities_CommandLineBuilder_AppendSwitchUnquotedIfNotNull_System_String_Microsoft_Build_Framework_ITaskItem___System_String_\">\r\n    \r\n            <a id=\"Microsoft_Build_Utilities_CommandLineBuilder_AppendSwitchUnquotedIfNotNull_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AppendSwitchUnquotedIfNotNull(String,ITaskItem[],String)</div>        \r\n          </div>\r\n    \r\n            <p>Appends the command line with a switch that takes an array of task item specifications that act as string parameters, without attempting to encapsulate them with quotation marks.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AppendSwitchUnquotedIfNotNull (string switchName, Microsoft.Build.Framework.ITaskItem[] parameters, string delimiter);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>switchName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the switch to append to the command line. This value cannot be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameters</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.build.framework.itaskitem\" data-linktype=\"relative-path\">ITaskItem</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of switch parameters to append to the command line. Quotation marks will not be added. If the array is <code>null</code>, then this method has no effect.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>delimiter</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delimiter that separates individual parameters. This value can be empty, but it cannot be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the command line is not empty, then this method also appends the command line with a space, before the switch.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>See example in <a class=\"xref\" href=\"microsoft.build.utilities.commandlinebuilder#Microsoft_Build_Utilities_CommandLineBuilder_AppendSwitchUnquotedIfNotNull_\" data-linktype=\"relative-path\">AppendSwitchUnquotedIfNotNull</a>.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Build_Utilities_CommandLineBuilder_AppendSwitchUnquotedIfNotNull_System_String_System_String___System_String_\">\r\n    \r\n            <a id=\"Microsoft_Build_Utilities_CommandLineBuilder_AppendSwitchUnquotedIfNotNull_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AppendSwitchUnquotedIfNotNull(String,String[],String)</div>        \r\n          </div>\r\n    \r\n            <p>Appends the command line with a switch that takes an array of string parameters, without attempting to encapsulate switch parameters with quotation marks.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AppendSwitchUnquotedIfNotNull (string switchName, string[] parameters, string delimiter);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>switchName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the switch to append to the command line. This value cannot be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameters</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of switch parameters to append to the command line. Quotation marks will not be added. If the array is <code>null</code>, then this method has no effect.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>delimiter</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delimiter that separates individual parameters. This value can be empty, but it cannot be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the command line is not empty, then this method also appends the command line with a space, before the switch.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p><code>AppendSwitchUnquotedIfNotNull(&quot;/sources:&quot;, new string[] {&quot;Alpha.cs&quot;, &quot;Be ta.cs&quot;}, &quot;;&quot;)</code> yields <code>/sources:Alpha.cs;Be ta.cs</code>.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Build_Utilities_CommandLineBuilder_AppendTextUnquoted_System_String_\">\r\n    \r\n            <a id=\"Microsoft_Build_Utilities_CommandLineBuilder_AppendTextUnquoted_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AppendTextUnquoted(String)</div>        \r\n          </div>\r\n    \r\n            <p>Appends the command line with string, without attempting to encapsulate the string with quotation marks.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AppendTextUnquoted (string textToAppend);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>textToAppend</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to append to the command line.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method does not append the command line with a space, before executing.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p><code>AppendTextUnquoted(@&quot;Folder name\\filename.cs&quot;)</code> yields <code>Folder name\\\\filename.cs</code>.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Build_Utilities_CommandLineBuilder_AppendTextWithQuoting_System_String_\">\r\n    \r\n            <a id=\"Microsoft_Build_Utilities_CommandLineBuilder_AppendTextWithQuoting_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AppendTextWithQuoting(String)</div>        \r\n          </div>\r\n    \r\n            <p>Appends the command line with string, and surrounds the string with quotations marks as necessary.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected void AppendTextWithQuoting (string textToAppend);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>textToAppend</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to append to the command line.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method does not append the command line with a space, before executing.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p><code>AppendTextWithQuoting(@&quot;Folder name\\filename.cs&quot;)</code> yields <code>\\&quot;Folder name\\\\filename.cs\\&quot;</code>.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Build_Utilities_CommandLineBuilder_IsQuotingRequired_System_String_\">\r\n    \r\n            <a id=\"Microsoft_Build_Utilities_CommandLineBuilder_IsQuotingRequired_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsQuotingRequired(String)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the specified string parameter should be surrounded with quotation marks because it contains white space.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual bool IsQuotingRequired (string parameter);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameter</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to examine for characters that require quotation marks.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code>, if the switch parameter should be surrounded with quotation marks; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Build_Utilities_CommandLineBuilder_ToString\">\r\n    \r\n            <a id=\"Microsoft_Build_Utilities_CommandLineBuilder_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the command line as a string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that represents the command line.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"microsoft.build.utilities.tooltask\" data-linktype=\"relative-path\">ToolTask</a> that runs <a href=\"../Topic/Ilasm.exe%20(IL%20Assembler).md\" data-linktype=\"relative-path\">Ilasm.exe (IL Assembler)</a>. The <a class=\"xref\" href=\"microsoft.build.utilities.commandlinebuilder\" data-linktype=\"relative-path\">CommandLineBuilder</a>, <a class=\"xref\" href=\"microsoft.build.utilities.toollocationhelper\" data-linktype=\"relative-path\">ToolLocationHelper</a>, and <a class=\"xref\" href=\"microsoft.build.utilities.tasklogginghelper\" data-linktype=\"relative-path\">TaskLoggingHelper</a> classes are used to generate the information needed to run the task.  </p>\n<p> msbuild_ToolTask#1</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Build_Utilities_CommandLineBuilder_VerifyThrowNoEmbeddedDoubleQuotes_System_String_System_String_\">\r\n    \r\n            <a id=\"Microsoft_Build_Utilities_CommandLineBuilder_VerifyThrowNoEmbeddedDoubleQuotes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">VerifyThrowNoEmbeddedDoubleQuotes(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an error if the command line parameter contains a double-quote (&quot;) character. Because double quotes are illegal in command line parameters, this method helps prevent parameter injection attacks.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void VerifyThrowNoEmbeddedDoubleQuotes (string switchName, string parameter);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>switchName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string representing the switch name for the error message.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameter</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string representing the switch parameter to scan for double-quotes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>VerifyThrowNoEmbeddedDoubleQuotes is a virtual method so that your applications can override this method if you want to allow double-quotes escaped in filenames.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/Microsoft.Build.Utilities.CommandLineBuilder.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/Microsoft.Build.Utilities.CommandLineBuilder.yml\">\r\n<meta name=\"APIName\" content=\"Microsoft.Build.Utilities.CommandLineBuilder\">\r\n<meta name=\"APIName\" content=\"Microsoft.Build.Utilities.CommandLineBuilder..ctor\">\r\n<meta name=\"APIName\" content=\"Microsoft.Build.Utilities.CommandLineBuilder.AppendFileNameIfNotNull\">\r\n<meta name=\"APIName\" content=\"Microsoft.Build.Utilities.CommandLineBuilder.AppendFileNamesIfNotNull\">\r\n<meta name=\"APIName\" content=\"Microsoft.Build.Utilities.CommandLineBuilder.AppendFileNameWithQuoting\">\r\n<meta name=\"APIName\" content=\"Microsoft.Build.Utilities.CommandLineBuilder.AppendQuotedTextToBuffer\">\r\n<meta name=\"APIName\" content=\"Microsoft.Build.Utilities.CommandLineBuilder.AppendSpaceIfNotEmpty\">\r\n<meta name=\"APIName\" content=\"Microsoft.Build.Utilities.CommandLineBuilder.AppendSwitch\">\r\n<meta name=\"APIName\" content=\"Microsoft.Build.Utilities.CommandLineBuilder.AppendSwitchIfNotNull\">\r\n<meta name=\"APIName\" content=\"Microsoft.Build.Utilities.CommandLineBuilder.AppendSwitchUnquotedIfNotNull\">\r\n<meta name=\"APIName\" content=\"Microsoft.Build.Utilities.CommandLineBuilder.AppendTextUnquoted\">\r\n<meta name=\"APIName\" content=\"Microsoft.Build.Utilities.CommandLineBuilder.AppendTextWithQuoting\">\r\n<meta name=\"APIName\" content=\"Microsoft.Build.Utilities.CommandLineBuilder.CommandLine\">\r\n<meta name=\"APIName\" content=\"Microsoft.Build.Utilities.CommandLineBuilder.IsQuotingRequired\">\r\n<meta name=\"APIName\" content=\"Microsoft.Build.Utilities.CommandLineBuilder.Length\">\r\n<meta name=\"APIName\" content=\"Microsoft.Build.Utilities.CommandLineBuilder.ToString\">\r\n<meta name=\"APIName\" content=\"Microsoft.Build.Utilities.CommandLineBuilder.VerifyThrowNoEmbeddedDoubleQuotes\">\r\n<meta name=\"APILocation\" content=\"Microsoft.Build.Utilities.dll\">\r\n<meta name=\"APILocation\" content=\"Microsoft.Build.Utilities.v3.5.dll\">\r\n<meta name=\"APILocation\" content=\"Microsoft.Build.Utilities.v4.0.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"8ee76882-c051-1939-e8c2-ba5d977dfe64\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\Microsoft.Build.Utilities\\CommandLineBuilder.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Comprises utility methods for constructing a command line.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/Microsoft.Build.Utilities/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"Microsoft.Build.Utilities.CommandLineBuilder\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/Microsoft.Build.Utilities.CommandLineBuilder.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/Microsoft.Build.Utilities.CommandLineBuilder.yml","open_to_public_contributors":true,"api_name":["Microsoft.Build.Utilities.CommandLineBuilder","Microsoft.Build.Utilities.CommandLineBuilder..ctor","Microsoft.Build.Utilities.CommandLineBuilder.AppendFileNameIfNotNull","Microsoft.Build.Utilities.CommandLineBuilder.AppendFileNamesIfNotNull","Microsoft.Build.Utilities.CommandLineBuilder.AppendFileNameWithQuoting","Microsoft.Build.Utilities.CommandLineBuilder.AppendQuotedTextToBuffer","Microsoft.Build.Utilities.CommandLineBuilder.AppendSpaceIfNotEmpty","Microsoft.Build.Utilities.CommandLineBuilder.AppendSwitch","Microsoft.Build.Utilities.CommandLineBuilder.AppendSwitchIfNotNull","Microsoft.Build.Utilities.CommandLineBuilder.AppendSwitchUnquotedIfNotNull","Microsoft.Build.Utilities.CommandLineBuilder.AppendTextUnquoted","Microsoft.Build.Utilities.CommandLineBuilder.AppendTextWithQuoting","Microsoft.Build.Utilities.CommandLineBuilder.CommandLine","Microsoft.Build.Utilities.CommandLineBuilder.IsQuotingRequired","Microsoft.Build.Utilities.CommandLineBuilder.Length","Microsoft.Build.Utilities.CommandLineBuilder.ToString","Microsoft.Build.Utilities.CommandLineBuilder.VerifyThrowNoEmbeddedDoubleQuotes"],"api_location":["Microsoft.Build.Utilities.dll","Microsoft.Build.Utilities.v3.5.dll","Microsoft.Build.Utilities.v4.0.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["Microsoft.Build.Utilities.CommandLineBuilder","Microsoft::Build::Utilities::CommandLineBuilder","Microsoft.Build.Utilities.CommandLineBuilder.#ctor","Microsoft::Build::Utilities::CommandLineBuilder::#ctor","Microsoft.Build.Utilities.CommandLineBuilder.AppendFileNameIfNotNull","Microsoft::Build::Utilities::CommandLineBuilder::AppendFileNameIfNotNull","Microsoft.Build.Utilities.CommandLineBuilder.AppendFileNamesIfNotNull","Microsoft::Build::Utilities::CommandLineBuilder::AppendFileNamesIfNotNull","Microsoft.Build.Utilities.CommandLineBuilder.AppendFileNameWithQuoting","Microsoft::Build::Utilities::CommandLineBuilder::AppendFileNameWithQuoting","Microsoft.Build.Utilities.CommandLineBuilder.AppendQuotedTextToBuffer","Microsoft::Build::Utilities::CommandLineBuilder::AppendQuotedTextToBuffer","Microsoft.Build.Utilities.CommandLineBuilder.AppendSpaceIfNotEmpty","Microsoft::Build::Utilities::CommandLineBuilder::AppendSpaceIfNotEmpty","Microsoft.Build.Utilities.CommandLineBuilder.AppendSwitch","Microsoft::Build::Utilities::CommandLineBuilder::AppendSwitch","Microsoft.Build.Utilities.CommandLineBuilder.AppendSwitchIfNotNull","Microsoft::Build::Utilities::CommandLineBuilder::AppendSwitchIfNotNull","Microsoft.Build.Utilities.CommandLineBuilder.AppendSwitchUnquotedIfNotNull","Microsoft::Build::Utilities::CommandLineBuilder::AppendSwitchUnquotedIfNotNull","Microsoft.Build.Utilities.CommandLineBuilder.AppendTextUnquoted","Microsoft::Build::Utilities::CommandLineBuilder::AppendTextUnquoted","Microsoft.Build.Utilities.CommandLineBuilder.AppendTextWithQuoting","Microsoft::Build::Utilities::CommandLineBuilder::AppendTextWithQuoting","Microsoft.Build.Utilities.CommandLineBuilder.CommandLine","Microsoft::Build::Utilities::CommandLineBuilder::CommandLine","Microsoft.Build.Utilities.CommandLineBuilder.IsQuotingRequired","Microsoft::Build::Utilities::CommandLineBuilder::IsQuotingRequired","Microsoft.Build.Utilities.CommandLineBuilder.Length","Microsoft::Build::Utilities::CommandLineBuilder::Length","Microsoft.Build.Utilities.CommandLineBuilder.ToString","Microsoft::Build::Utilities::CommandLineBuilder::ToString","Microsoft.Build.Utilities.CommandLineBuilder.VerifyThrowNoEmbeddedDoubleQuotes","Microsoft::Build::Utilities::CommandLineBuilder::VerifyThrowNoEmbeddedDoubleQuotes"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"8ee76882-c051-1939-e8c2-ba5d977dfe64","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\Microsoft.Build.Utilities\\CommandLineBuilder.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/Microsoft.Build.Utilities/CommandLineBuilder.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"CommandLineBuilder class | Microsoft Docs","_op_ogTitle":"CommandLineBuilder class","description":"Comprises utility methods for constructing a command line.\n","toc_asset_id":"_splitted/Microsoft.Build.Utilities/toc.json","toc_rel":"_splitted/Microsoft.Build.Utilities/toc.json","source_url":"","ms.assetid":"Microsoft.Build.Utilities.CommandLineBuilder","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/microsoft.build.utilities.commandlinebuilder","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/microsoft.build.utilities.commandlinebuilder","fileRelativePath":"Microsoft.Build.Utilities.CommandLineBuilder.html"},"themesRelativePathToOutputRoot":"_themes/"}