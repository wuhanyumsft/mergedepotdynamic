{"content":"    \r\n    <h1 id=\"System_Net_IPAddress\">\r\n      <span class=\"lang-csharp\">IPAddress</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides an Internet Protocol (IP) address.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class IPAddress</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">IPAddress</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The IPAddress class contains the address of a computer on an IP network.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_IPAddress__ctor_System_Byte___\" data-linktype=\"self-bookmark\">IPAddress(Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> class with the address specified as a <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_IPAddress__ctor_System_Int64_\" data-linktype=\"self-bookmark\">IPAddress(Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> class with the address specified as an <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_IPAddress__ctor_System_Byte___System_Int64_\" data-linktype=\"self-bookmark\">IPAddress(Byte[],Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> class with the address specified as a <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> array and the specified scope identifier.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Fields\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_IPAddress_Any\" data-linktype=\"self-bookmark\">Any</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides an IP address that indicates that the server must listen for client activity on all network interfaces. This field is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_IPAddress_Broadcast\" data-linktype=\"self-bookmark\">Broadcast</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides the IP broadcast address. This field is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_IPAddress_IPv6Any\" data-linktype=\"self-bookmark\">IPv6Any</a></div>\r\n          </td>\r\n            <td>\r\n            <p>The <span class=\"xref\">stem.Net.Sockets.Socket.Bind*</span> method uses the IPv6Any field to indicate that a <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> must listen for client activity on all network interfaces.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_IPAddress_IPv6Loopback\" data-linktype=\"self-bookmark\">IPv6Loopback</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides the IP loopback address. This property is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_IPAddress_IPv6None\" data-linktype=\"self-bookmark\">IPv6None</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides an IP address that indicates that no network interface should be used. This property is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_IPAddress_Loopback\" data-linktype=\"self-bookmark\">Loopback</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides the IP loopback address. This field is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_IPAddress_None\" data-linktype=\"self-bookmark\">None</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides an IP address that indicates that no network interface should be used. This field is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_IPAddress_Address\" data-linktype=\"self-bookmark\">Address</a></div>\r\n          </td>\r\n            <td>\r\n            <p>An Internet Protocol (IP) address.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_IPAddress_AddressFamily\" data-linktype=\"self-bookmark\">AddressFamily</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the address family of the IP address.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_IPAddress_IsIPv4MappedToIPv6\" data-linktype=\"self-bookmark\">IsIPv4MappedToIPv6</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets whether the IP address is an IPv4-mapped IPv6 address.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_IPAddress_IsIPv6LinkLocal\" data-linktype=\"self-bookmark\">IsIPv6LinkLocal</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets whether the address is an IPv6 link local address.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_IPAddress_IsIPv6Multicast\" data-linktype=\"self-bookmark\">IsIPv6Multicast</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets whether the address is an IPv6 multicast global address.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_IPAddress_IsIPv6SiteLocal\" data-linktype=\"self-bookmark\">IsIPv6SiteLocal</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets whether the address is an IPv6 site local address.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_IPAddress_IsIPv6Teredo\" data-linktype=\"self-bookmark\">IsIPv6Teredo</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets whether the address is an IPv6 Teredo address.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_IPAddress_ScopeId\" data-linktype=\"self-bookmark\">ScopeId</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the IPv6 address scope identifier.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_IPAddress_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares two IP addresses.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_IPAddress_GetAddressBytes\" data-linktype=\"self-bookmark\">GetAddressBytes()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides a copy of the <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> as an array of bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_IPAddress_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a hash value for an IP address.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_IPAddress_HostToNetworkOrder_System_Int16_\" data-linktype=\"self-bookmark\">HostToNetworkOrder(Int16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts a short value from host byte order to network byte order.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_IPAddress_HostToNetworkOrder_System_Int32_\" data-linktype=\"self-bookmark\">HostToNetworkOrder(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts an integer value from host byte order to network byte order.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_IPAddress_HostToNetworkOrder_System_Int64_\" data-linktype=\"self-bookmark\">HostToNetworkOrder(Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts a long value from host byte order to network byte order.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_IPAddress_IsLoopback_System_Net_IPAddress_\" data-linktype=\"self-bookmark\">IsLoopback(IPAddress)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether the specified IP address is the loopback address.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_IPAddress_MapToIPv4\" data-linktype=\"self-bookmark\">MapToIPv4()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Maps the <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> object to an IPv4 address.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_IPAddress_MapToIPv6\" data-linktype=\"self-bookmark\">MapToIPv6()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Maps the <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> object to an IPv6 address.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_IPAddress_NetworkToHostOrder_System_Int16_\" data-linktype=\"self-bookmark\">NetworkToHostOrder(Int16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts a short value from network byte order to host byte order.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_IPAddress_NetworkToHostOrder_System_Int32_\" data-linktype=\"self-bookmark\">NetworkToHostOrder(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts an integer value from network byte order to host byte order.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_IPAddress_NetworkToHostOrder_System_Int64_\" data-linktype=\"self-bookmark\">NetworkToHostOrder(Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts a long value from network byte order to host byte order.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_IPAddress_Parse_System_String_\" data-linktype=\"self-bookmark\">Parse(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts an IP address string to an <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_IPAddress_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts an Internet address to its standard notation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_IPAddress_TryParse_System_String_System_Net_IPAddress__\" data-linktype=\"self-bookmark\">TryParse(String,IPAddress)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether a string is a valid IP address.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_IPAddress__ctor_System_Byte___\">\r\n    \r\n            <a id=\"System_Net_IPAddress__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IPAddress(Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> class with the address specified as a <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IPAddress (byte[] address);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>address</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The byte array value of the IP address.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>address</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>address</code> contains a bad IP address.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> is created with the <a class=\"xref\" href=\"system.net.ipaddress#System_Net_IPAddress_Address_\" data-linktype=\"relative-path\">Address</a> property set to <code>address</code>.  </p>\n<p> If the length of <code>address</code> is 4, IPAddress constructs an IPv4 address; otherwise, an IPv6 address with a scope of 0 is constructed.  </p>\n<p> The <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> array is assumed to be in network byte order with the most significant byte first in index position 0.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_IPAddress__ctor_System_Int64_\">\r\n    \r\n            <a id=\"System_Net_IPAddress__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IPAddress(Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> class with the address specified as an <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IPAddress (long newAddress);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>newAddress</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The long value of the IP address. For example, the value 0x2414188f in big-endian format would be the IP address &quot;143.24.20.36&quot;.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>newAddress</code> &lt; 0 or  </p>\n<p> <code>newAddress</code> &gt; 0x00000000FFFFFFFF</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> instance is created with the <a class=\"xref\" href=\"system.net.ipaddress#System_Net_IPAddress_Address_\" data-linktype=\"relative-path\">Address</a> property set to <code>newAddress</code>.  </p>\n<p> The <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> value is assumed to be in network byte order.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_IPAddress__ctor_System_Byte___System_Int64_\">\r\n    \r\n            <a id=\"System_Net_IPAddress__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IPAddress(Byte[],Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> class with the address specified as a <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> array and the specified scope identifier.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IPAddress (byte[] address, long scopeid);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>address</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The byte array value of the IP address.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>scopeid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The long value of the scope identifier.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>address</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>address</code> contains a bad IP address.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>scopeid</code> &lt; 0 or  </p>\n<p> <code>scopeid</code> &gt; 0x00000000FFFFFFFF</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor instantiates an IPv6 address. The <code>scopeid</code> identifies a network interface in the case of a link-local address. The scope is valid only for link-local and site-local addresses.  </p>\n<p> The <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> array is assumed to be in network byte order with the most significant byte first in index position 0.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"fields\">\r\n        <h2>Fields\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_IPAddress_Any\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Any</div>        \r\n          </div>\r\n    \r\n            <p>Provides an IP address that indicates that the server must listen for client activity on all network interfaces. This field is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Net.IPAddress Any;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.net.sockets.socket#System_Net_Sockets_Socket_Bind_\" data-linktype=\"relative-path\">Bind</a> method uses the Any field to indicate that a <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> instance must listen for client activity on all network interfaces.  </p>\n<p> The Any field is equivalent to 0.0.0.0 in dotted-quad notation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_IPAddress_Broadcast\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Broadcast</div>        \r\n          </div>\r\n    \r\n            <p>Provides the IP broadcast address. This field is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Net.IPAddress Broadcast;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Broadcast field is equivalent to 255.255.255.255 in dotted-quad notation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example prints the Broadcast address to the console.  </p>\n<pre><code class=\"lang-cs\" name=\"IPAddress_Broadcast_Loopback#2\">  public void PrintBroadcastAddress()\n  {\n    // Get the IP Broadcast address and convert it to string.\n    string ipAddressString = IPAddress.Broadcast.ToString();\n    Console.WriteLine(&quot;Broadcast IP address: {0}&quot;, ipAddressString);\n  }\n</code></pre><pre><code class=\"lang-cpp\" name=\"IPAddress_Broadcast_Loopback#2\">void PrintBroadcastAddress()\n{\n   // Get the IP Broadcast address and convert it to string.\n   String^ IpAddressString = IPAddress::Broadcast-&gt;ToString();\n   Console::WriteLine( &quot;<br>Broadcast IP address : {0}&quot;, IpAddressString );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"IPAddress_Broadcast_Loopback#2\">    Public Sub PrintBroadcastAddress()\n        &#39; gets the IP Broadcast address and convert it to string.\n        Dim IpAddressString As [String] = IPAddress.Broadcast.ToString()\n        Console.WriteLine((ControlChars.Cr + &quot;Broadcast IP address : &quot; + IpAddressString))\n    End Sub &#39;PrintBroadcastAddress\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_IPAddress_IPv6Any\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IPv6Any</div>        \r\n          </div>\r\n    \r\n            <p>The <span class=\"xref\">stem.Net.Sockets.Socket.Bind*</span> method uses the IPv6Any field to indicate that a <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> must listen for client activity on all network interfaces.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Net.IPAddress IPv6Any;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The IPv6Any field is equivalent to 0:0:0:0:0:0:0:0 in colon-hexadecimal notation, or to :: in compact notation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the value of the current host&#39;s Any address in standard compressed format.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Net.IPAddress.IPv6NoneAnyLoopback#2\">// This method displays the value of the current host&#39;s Any address in\n// standard compressed format. The Any address is used by the host to enable\n// listening to client activities on all the interfaces for a given port.\nvoid displayIPv6AnyAddress()\n{\n   try\n   {\n      // Get the Any address.\n      IPAddress^ any = IPAddress::IPv6Any;\n      \n      // Transform the Any address to a string using the overloaded\n      // ToString() method. Note that the resulting string is in the compact\n      // form: &quot;::&quot;.\n      String^ ipv6Any = any-&gt;ToString();\n      \n      // Display the Any address.\n      Console::WriteLine( &quot;The IPv6 Any address is: {0}&quot;, ipv6Any );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;-&gt;Item[displayIPv6AnyAddress] Exception: {0}&quot;, e );\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Net.IPAddress.IPv6NoneAnyLoopback#2\">   &#39; This function prints the value of the current host&#39;s Any address in  \n   &#39; standard compressed format. The Any address is used by the host to enable\n   &#39; listening to client activities on all the interfaces for a given port.\n   Private Shared Sub printIPv6AnyAddress()\n      Try\n         &#39; Get the Any address.\n         Dim any As IPAddress = IPAddress.IPv6Any\n         \n         &#39; Transform the Any address to a string using the overladed\n         &#39; ToString() method. Note that the resulting string is in the compact \n         &#39; form: &quot;::&quot;.\n         Dim ipv6Any As String = any.ToString()\n         \n         &#39; Display the Any address.\n         Console.WriteLine((&quot;The IPv6 Any address is: &quot; + ipv6Any))\n      Catch e As Exception\n         Console.WriteLine((&quot;[printIPv6AnyAddress] Exception: &quot; + e.ToString()))\n      End Try\n   End Sub &#39;printIPv6AnyAddress\n   \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Net.IPAddress.IPv6NoneAnyLoopback#2\">  // This method displays the value of the current host&#39;s Any address in  \n  // standard compressed format. The Any address is used by the host to enable\n  // listening to client activities on all the interfaces for a given port.\n  private static void displayIPv6AnyAddress()\n  {\n    try\n    {\n      // Get the Any address.\n      IPAddress any = IPAddress.IPv6Any;\n\n      // Transform the Any address to a string using the overloaded\n      // ToString() method. Note that the resulting string is in the compact \n      // form: &quot;::&quot;.\n      string ipv6Any = any.ToString();\n      \n      // Display the Any address.\n      Console.WriteLine(&quot;The IPv6 Any address is: &quot; + ipv6Any);\n    }\n    catch (Exception e) \n    {\n      Console.WriteLine(&quot;[displayIPv6AnyAddress] Exception: &quot; + e.ToString());\n    }\n  }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_IPAddress_IPv6Loopback\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IPv6Loopback</div>        \r\n          </div>\r\n    \r\n            <p>Provides the IP loopback address. This property is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Net.IPAddress IPv6Loopback;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The IPv6Loopback field is equivalent to 0:0:0:0:0:0:0:1 in colon-hexadecimal notation, or to ::1 in compact notation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the value of the current host&#39;s loopback address in standard compressed format.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Net.IPAddress.IPv6NoneAnyLoopback#1\">// This method displays the value of the current host loopback address in\n// standard compressed format.\nvoid displayIPv6LoopBackAddress()\n{\n   try\n   {\n      // Get the loopback address.\n      IPAddress^ loopBack = IPAddress::IPv6Loopback;\n      \n      // Transform the loop-back address to a string using the overladed\n      // ToString() method. Note that the resulting string is in the compact\n      // form: &quot;::1&quot;.\n      String^ ipv6LoopBack = loopBack-&gt;ToString();\n      Console::WriteLine( &quot;The IPv6 Loopback address is: {0}&quot;, ipv6LoopBack );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;-&gt;Item[displayIPv6LoopBackAddress] Exception: {0}&quot;, e );\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Net.IPAddress.IPv6NoneAnyLoopback#1\">   &#39; This methods prints the value of the current host loopback address in  \n   &#39; standard compressed format. \n   Private Shared Sub printIPv6LoopBackAddress()\n      Try\n         &#39; Get the loopback address.\n         Dim loopBack As IPAddress = IPAddress.IPv6Loopback\n         \n         &#39; Transform the loop-back address to a string using the overloaded\n         &#39; ToString() method. Note that the resulting string is in the compact \n         &#39; form: &quot;::1&quot;.\n         Dim ipv6LoopBack As String = loopBack.ToString()\n         Console.WriteLine((&quot;The IPv6 Loopback address is: &quot; + ipv6LoopBack))\n      Catch e As Exception\n         Console.WriteLine((&quot;[printIPv6LoopBackAddress] Exception: &quot; + e.ToString()))\n      End Try\n   End Sub &#39;printIPv6LoopBackAddress\n   \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Net.IPAddress.IPv6NoneAnyLoopback#1\">  // This method displays the value of the current host loopback address in  \n  // standard compressed format. \n  private static void displayIPv6LoopBackAddress()\n  {\n    try\n    { \n      // Get the loopback address.\n      IPAddress loopBack = IPAddress.IPv6Loopback;\n\n      // Transform the loop-back address to a string using the overladed\n      // ToString() method. Note that the resulting string is in the compact \n      // form: &quot;::1&quot;.\n      string ipv6LoopBack = loopBack.ToString();\n      Console.WriteLine(&quot;The IPv6 Loopback address is: &quot; + ipv6LoopBack);\n    }\n    catch (Exception e) \n    {\n      Console.WriteLine(&quot;[displayIPv6LoopBackAddress] Exception: &quot; + e.ToString());\n    }\n  }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_IPAddress_IPv6None\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IPv6None</div>        \r\n          </div>\r\n    \r\n            <p>Provides an IP address that indicates that no network interface should be used. This property is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Net.IPAddress IPv6None;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.net.sockets.socket#System_Net_Sockets_Socket_Bind_\" data-linktype=\"relative-path\">Bind</a> method uses the IPv6None field to indicate that a <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> must not listen for client activity. The IPv6None field is equivalent to 0:0:0:0:0:0:0:0 in colon-hexadecimal notation, or to ::0 in compact notation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the value of the current host&#39;s None address in standard compressed format.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Net.IPAddress.IPv6NoneAnyLoopback#3\">// This method displays the value of the current host&#39;s None address in\n// standard compressed format. The None address is used by the host to disable\n// listening to client activities on all the interfaces.\nvoid displayIPv6NoneAddress()\n{\n   try\n   {\n      // Get the None address.\n      IPAddress^ none = IPAddress::IPv6None;\n      \n      // Transform the None address to a string using the overloaded\n      // ToString() method. Note that the resulting string is in the compact\n      // form: &quot;::&quot;.\n      String^ ipv6None = none-&gt;ToString();\n\n      Console::WriteLine( &quot;The IPv6 None address is: {0}&quot;, ipv6None );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;-&gt;Item[displayIPv6NoneAddress] Exception: {0}&quot;, e );\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Net.IPAddress.IPv6NoneAnyLoopback#3\">   &#39; This function prints the value of the current host&#39;s None address in  \n   &#39; standard compressed format. The None address is used by the host to disable\n   &#39; listening to client activities on all the interfaces.\n   Private Shared Sub printIPv6NoneAddress()\n      Try\n         \n         &#39; Get the None address.\n         Dim none As IPAddress = IPAddress.IPv6None\n         \n         &#39; Transform the None address to a string using the overloaded\n         &#39; ToString() method. Note that the resulting string is in the compact \n         &#39; form: &quot;::&quot;.\n         Dim ipv6None As String = none.ToString()\n         \n         Console.WriteLine((&quot;The IPv6 None address is: &quot; + ipv6None))\n      Catch e As Exception\n         Console.WriteLine((&quot;[printIPv6NoneAddress] Exception: &quot; + e.ToString()))\n      End Try\n   End Sub &#39;printIPv6NoneAddress\n   \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Net.IPAddress.IPv6NoneAnyLoopback#3\">  // This method displays the value of the current host&#39;s None address in  \n  // standard compressed format. The None address is used by the host to disable\n  // listening to client activities on all the interfaces.\n  private static void displayIPv6NoneAddress()\n  {\n    try\n    {\n      \n      // Get the None address.\n      IPAddress none  = IPAddress.IPv6None;\n\n      // Transform the None address to a string using the overloaded\n      // ToString() method. Note that the resulting string is in the compact \n      // form: &quot;::&quot;.\n      string ipv6None = none.ToString();\n\n      Console.WriteLine(&quot;The IPv6 None address is: &quot; + ipv6None);\n    }\n    catch (Exception e) \n    {\n      Console.WriteLine(&quot;[displayIPv6NoneAddress] Exception: &quot; + e.ToString());\n    }\n  }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_IPAddress_Loopback\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Loopback</div>        \r\n          </div>\r\n    \r\n            <p>Provides the IP loopback address. This field is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Net.IPAddress Loopback;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Loopback field is equivalent to 127.0.0.1 in dotted-quad notation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example prints the Loopback address to the console.  </p>\n<pre><code class=\"lang-cs\" name=\"IPAddress_Broadcast_Loopback#1\">  public void PrintLoopbackAddress()\n  {\n    // Gets the IP loopback address and converts it to a string.\n    String IpAddressString = IPAddress.Loopback.ToString();\n    Console.WriteLine(&quot;Loopback IP address : &quot; + IpAddressString);\n  }\n</code></pre><pre><code class=\"lang-cpp\" name=\"IPAddress_Broadcast_Loopback#1\">void PrintLoopbackAddress()\n{\n   // Gets the IP loopback address and converts it to a string.\n   String^ IpAddressString = IPAddress::Loopback-&gt;ToString();\n   Console::WriteLine( &quot;Loopback IP address : {0}&quot;, IpAddressString );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"IPAddress_Broadcast_Loopback#1\">    Public Sub PrintLoopbackAddress()\n        &#39; Gets the IP loopback address and converts it to a string.\n        Dim IpAddressString As [String] = IPAddress.Loopback.ToString()\n        Console.WriteLine((&quot;Loopback IP address : &quot; + IpAddressString))\n    End Sub &#39;PrintLoopbackAddress\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_IPAddress_None\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">None</div>        \r\n          </div>\r\n    \r\n            <p>Provides an IP address that indicates that no network interface should be used. This field is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Net.IPAddress None;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.net.sockets.socket#System_Net_Sockets_Socket_Bind_\" data-linktype=\"relative-path\">Bind</a> method uses the None field to indicate that a <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> must not listen for client activity. The None field is equivalent to 255.255.255.255 in dotted-quad notation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the None property to indicate that no network interface should be used.  </p>\n<pre><code class=\"lang-cs\" name=\"IPAddress_None#1\">   public static void Main()\n   {\n      // Gets the IP address indicating that no network interface should be used \n      // and converts it to a string.\n      string address = IPAddress.None.ToString();\n      Console.WriteLine(&quot;IP address : &quot; + address);\n   }\n</code></pre><pre><code class=\"lang-cpp\" name=\"IPAddress_None#1\">int main()\n{\n   \n   // Gets the IP address indicating that no network interface should be used\n   // and converts it to a String*.\n   String^ address = IPAddress::None-&gt;ToString();\n   Console::WriteLine( &quot;IP address : {0}&quot;, address );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"IPAddress_None#1\">    Public Shared Sub Main()\n\n        &#39; Gets the IP address indicating that no network interface should be used\n        &#39; and converts it to a string. \n        Dim address As String = IPAddress.None.ToString()\n        Console.WriteLine((&quot;IP address : &quot; + address))\n    End Sub &#39;Main \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_IPAddress_Address\">\r\n    \r\n            <a id=\"System_Net_IPAddress_Address_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Address</div>        \r\n          </div>\r\n    \r\n            <p>An Internet Protocol (IP) address.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public long Address { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The long value of the IP address.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>The address family is <a class=\"xref\" href=\"system.net.sockets.addressfamily\" data-linktype=\"relative-path\">AddressFamily</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property is obsolete. Use <a class=\"xref\" href=\"system.net.ipaddress#System_Net_IPAddress_GetAddressBytes_\" data-linktype=\"relative-path\">GetAddressBytes</a>.  </p>\n<p> To convert Address to dotted-quad notation, use the <a class=\"xref\" href=\"system.net.ipaddress#System_Net_IPAddress_ToString_\" data-linktype=\"relative-path\">ToString</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the Address parameter to retrieve the IP address of the <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> instance.  </p>\n<pre><code class=\"lang-vb\" name=\"IPAddress_Address_AddressFamily#2\">\n    Public Sub PrintAddress(IpAddressString As [String])\n        &#39; Creates an instance of the IPAddress&#39; for the specified IP string in dotted-quad notation.\n        Dim hostIPAddress As IPAddress = IPAddress.Parse(IpAddressString)\n        Console.WriteLine(ControlChars.Cr + &quot;The IP address &#39;&quot; + IpAddressString + &quot;&#39; is {0}&quot;, hostIPAddress.ToString())\n    End Sub &#39;PrintAddressFamily\n</code></pre><pre><code class=\"lang-cs\" name=\"IPAddress_Address_AddressFamily#2\">  public void PrintAddress(String IpAddressString)\n  {\n    // Creates an instance of the IPAddress for the specified IP string in \n    // dotted-quad notation. \n    IPAddress hostIPAddress = IPAddress.Parse(IpAddressString);\n    Console.WriteLine(&quot;<br>The IP address &#39;&quot; + IpAddressString + &quot;&#39; is {0}&quot;, hostIPAddress.ToString()); \n  }\n</code></pre><pre><code class=\"lang-cpp\" name=\"IPAddress_Address_AddressFamily#2\">void PrintAddress( String^ IpAddressString )\n{\n   // Creates an instance of the IPAddress for the specified IP String* in\n   // dotted-quad notation.\n   IPAddress^ hostIPAddress = IPAddress::Parse( IpAddressString );\n   Console::WriteLine( &quot;<br>Integer value of IP address {0} is {1}&quot;, IpAddressString, hostIPAddress-&gt;Address );\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_IPAddress_AddressFamily\">\r\n    \r\n            <a id=\"System_Net_IPAddress_AddressFamily_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddressFamily</div>        \r\n          </div>\r\n    \r\n            <p>Gets the address family of the IP address.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Net.Sockets.AddressFamily AddressFamily { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.addressfamily\" data-linktype=\"relative-path\">AddressFamily</a></div>\r\n                  </div>\r\n                  <p>Returns <a class=\"xref\" href=\"system.net.sockets.addressfamily\" data-linktype=\"relative-path\">AddressFamily</a> for IPv4 or <a class=\"xref\" href=\"system.net.sockets.addressfamily\" data-linktype=\"relative-path\">AddressFamily</a> for IPv6.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>Refer to the example in the <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> class topic.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Net.IPAddress#3\">         // Display the type of address family supported by the server. If the\n         // server is IPv6-enabled this value is: InternNetworkV6. If the server\n         // is also IPv4-enabled there will be an additional value of InterNetwork.\n         Console::WriteLine( &quot;AddressFamily: {0}&quot;, curAdd-&gt;AddressFamily );\n         \n         // Display the ScopeId property in case of IPV6 addresses.\n         if ( curAdd-&gt;AddressFamily.ToString() == ProtocolFamily::InterNetworkV6.ToString() )\n                  Console::WriteLine( &quot;Scope Id: {0}&quot;, curAdd-&gt;ScopeId );\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Net.IPAddress#3\">\n          // Display the type of address family supported by the server. If the\n          // server is IPv6-enabled this value is: InternNetworkV6. If the server\n          // is also IPv4-enabled there will be an additional value of InterNetwork.\n          Console.WriteLine(&quot;AddressFamily: &quot; + curAdd.AddressFamily.ToString());\n          \n          // Display the ScopeId property in case of IPV6 addresses.\n          if(curAdd.AddressFamily.ToString() == ProtocolFamily.InterNetworkV6.ToString())\n            Console.WriteLine(&quot;Scope Id: &quot; + curAdd.ScopeId.ToString());\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Net.IPAddress#3\">            &#39; Display the type of address family supported by the server. If the\n            &#39; server is IPv6-enabled this value is: InternNetworkV6. If the server\n            &#39; is also IPv4-enabled there will be an additional value of InterNetwork.\n            Console.WriteLine((&quot;AddressFamily: &quot; + curAdd.AddressFamily.ToString()))\n\n            &#39; Display the ScopeId property in case of IPV6 addresses.\n            If curAdd.AddressFamily.ToString() = ProtocolFamily.InterNetworkV6.ToString() Then\n              Console.WriteLine((&quot;Scope Id: &quot; + curAdd.ScopeId.ToString()))\n            End If\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_IPAddress_IsIPv4MappedToIPv6\">\r\n    \r\n            <a id=\"System_Net_IPAddress_IsIPv4MappedToIPv6_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsIPv4MappedToIPv6</div>        \r\n          </div>\r\n    \r\n            <p>Gets whether the IP address is an IPv4-mapped IPv6 address.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsIPv4MappedToIPv6 { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>Returns <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>.  </p>\n<p> <code>true</code> if the IP address is an IPv4-mapped IPv6 address; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Dual-stack sockets always require IPv6 addresses. The ability to interact with an IPv4 address requires the use of the IPv4-mapped IPv6 address format. Any IPv4 addresses must be represented in the IPv4-mapped IPv6 address format which enables an IPv6 only application to communicate with an IPv4 node. The IPv4-mapped IPv6 address format allows the IPv4 address of an IPv4 node to be represented as an IPv6 address. The IPv4 address is encoded into the low-order 32 bits of the IPv6 address, and the high-order 96 bits hold the fixed prefix 0:0:0:0:0:FFFF. The IPv4-mapped IPv6 address format is specified in RFC 4291. For more information, see <a href=\"http://go.microsoft.com/fwlink/?LinkID=92231\" data-linktype=\"external\">www.ietf.org/rfc/rfc4291.txt</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_IPAddress_IsIPv6LinkLocal\">\r\n    \r\n            <a id=\"System_Net_IPAddress_IsIPv6LinkLocal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsIPv6LinkLocal</div>        \r\n          </div>\r\n    \r\n            <p>Gets whether the address is an IPv6 link local address.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsIPv6LinkLocal { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the IP address is an IPv6 link local address; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_IPAddress_IsIPv6Multicast\">\r\n    \r\n            <a id=\"System_Net_IPAddress_IsIPv6Multicast_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsIPv6Multicast</div>        \r\n          </div>\r\n    \r\n            <p>Gets whether the address is an IPv6 multicast global address.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsIPv6Multicast { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the IP address is an IPv6 multicast global address; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_IPAddress_IsIPv6SiteLocal\">\r\n    \r\n            <a id=\"System_Net_IPAddress_IsIPv6SiteLocal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsIPv6SiteLocal</div>        \r\n          </div>\r\n    \r\n            <p>Gets whether the address is an IPv6 site local address.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsIPv6SiteLocal { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the IP address is an IPv6 site local address; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_IPAddress_IsIPv6Teredo\">\r\n    \r\n            <a id=\"System_Net_IPAddress_IsIPv6Teredo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsIPv6Teredo</div>        \r\n          </div>\r\n    \r\n            <p>Gets whether the address is an IPv6 Teredo address.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsIPv6Teredo { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the IP address is an IPv6 Teredo address; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A Teredo address is an IPv6 address with the prefix of 2001::/32. Teredo addresses can be returned through normal DNS name resolution or enumerated as an IPv6 address assigned to a local interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_IPAddress_ScopeId\">\r\n    \r\n            <a id=\"System_Net_IPAddress_ScopeId_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ScopeId</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the IPv6 address scope identifier.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public long ScopeId { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>A long integer that specifies the scope of the address.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p><code>AddressFamily</code> = <code>InterNetwork</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>scopeId</code> &lt; 0  </p>\n<p> - or -  </p>\n<ul>\n<li><code>scopeId</code> &gt; 0x00000000FFFFFFFF</li>\n</ul>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The meaning of ScopeId changes depending on the context in which it is used.  </p>\n<ul>\n<li>Link-local address. On a host with multiple interfaces connected to separate links, the same link-local address can be assigned to multiple interfaces. To eliminate this ambiguity, a scope identifier is used to specify the interface over which messages are exchanged.  </li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> Link-local addresses, identified by the Format Prefix (FP) FE80, are used by nodes when communicating with neighboring nodes on the same link.  </p>\n</div>\n<ul>\n<li>Site-local addresses. A host can be connected to multiple sites. In this case, a scope identifier is used to indicate a specific site to communicate with.  </li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> Site-local addresses, identified by the Format Prefix (FP) FEC0, are used by nodes when communicating on private intranets.  </p>\n</div>\n<p> The notation that is used to specify the <code>ScopeId</code> with an address is <code>Address%ScopeId</code>. For example, <code>FE80::5EFE:192.168.41.30%2.</code></p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cpp\" name=\"System.Net.IPAddress#3\">         // Display the type of address family supported by the server. If the\n         // server is IPv6-enabled this value is: InternNetworkV6. If the server\n         // is also IPv4-enabled there will be an additional value of InterNetwork.\n         Console::WriteLine( &quot;AddressFamily: {0}&quot;, curAdd-&gt;AddressFamily );\n         \n         // Display the ScopeId property in case of IPV6 addresses.\n         if ( curAdd-&gt;AddressFamily.ToString() == ProtocolFamily::InterNetworkV6.ToString() )\n                  Console::WriteLine( &quot;Scope Id: {0}&quot;, curAdd-&gt;ScopeId );\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Net.IPAddress#3\">\n          // Display the type of address family supported by the server. If the\n          // server is IPv6-enabled this value is: InternNetworkV6. If the server\n          // is also IPv4-enabled there will be an additional value of InterNetwork.\n          Console.WriteLine(&quot;AddressFamily: &quot; + curAdd.AddressFamily.ToString());\n          \n          // Display the ScopeId property in case of IPV6 addresses.\n          if(curAdd.AddressFamily.ToString() == ProtocolFamily.InterNetworkV6.ToString())\n            Console.WriteLine(&quot;Scope Id: &quot; + curAdd.ScopeId.ToString());\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Net.IPAddress#3\">            &#39; Display the type of address family supported by the server. If the\n            &#39; server is IPv6-enabled this value is: InternNetworkV6. If the server\n            &#39; is also IPv4-enabled there will be an additional value of InterNetwork.\n            Console.WriteLine((&quot;AddressFamily: &quot; + curAdd.AddressFamily.ToString()))\n\n            &#39; Display the ScopeId property in case of IPV6 addresses.\n            If curAdd.AddressFamily.ToString() = ProtocolFamily.InterNetworkV6.ToString() Then\n              Console.WriteLine((&quot;Scope Id: &quot; + curAdd.ScopeId.ToString()))\n            End If\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_IPAddress_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_Net_IPAddress_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Compares two IP addresses.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object comparand);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparand</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> instance to compare to the current instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the two addresses are equal; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Equals method compares the current <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> instance with the <code>comparand</code> parameter and returns <code>true</code> if the two instances contain the same IP address.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_IPAddress_GetAddressBytes\">\r\n    \r\n            <a id=\"System_Net_IPAddress_GetAddressBytes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAddressBytes()</div>        \r\n          </div>\r\n    \r\n            <p>Provides a copy of the <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> as an array of bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public byte[] GetAddressBytes ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> array.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to get a server IP address in byte format.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Net.IPAddress#2\">         array&lt;Byte&gt;^bytes = curAdd-&gt;GetAddressBytes();\n         for ( int i = 0; i &lt; bytes-&gt;Length; i++ )\n         {\n            Console::Write( bytes[ i ] );\n\n         }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Net.IPAddress#2\">          Byte[] bytes = curAdd.GetAddressBytes();\n          for (int i = 0; i &lt; bytes.Length; i++) \n          {\n            Console.Write(bytes[i]);\n          }                          \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Net.IPAddress#2\">            Dim bytes As [Byte]() = curAdd.GetAddressBytes()\n            Dim i As Integer\n            For i = 0 To bytes.Length - 1\n              Console.Write(bytes(i))\n            Next i\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_IPAddress_GetHashCode\">\r\n    \r\n            <a id=\"System_Net_IPAddress_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a hash value for an IP address.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An integer hash value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The GetHashCode method returns a hash code of the IP address. This value can be used as a key in hash tables.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_IPAddress_HostToNetworkOrder_System_Int16_\">\r\n    \r\n            <a id=\"System_Net_IPAddress_HostToNetworkOrder_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HostToNetworkOrder(Int16)</div>        \r\n          </div>\r\n    \r\n            <p>Converts a short value from host byte order to network byte order.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static short HostToNetworkOrder (short host);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>host</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number to convert, expressed in host byte order.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </div>\r\n                  <p>A short value, expressed in network byte order.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Different computers use different conventions for ordering the bytes within multibyte integer values. Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order). To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.  </p>\n<p> The <a class=\"xref\" href=\"system.net.ipaddress#System_Net_IPAddress_HostToNetworkOrder_\" data-linktype=\"relative-path\">HostToNetworkOrder</a> method converts multibyte integer values that are stored on the host system from the byte order used by the host to the byte order used by the network.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_IPAddress_HostToNetworkOrder_System_Int32_\">\r\n    \r\n            <a id=\"System_Net_IPAddress_HostToNetworkOrder_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HostToNetworkOrder(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts an integer value from host byte order to network byte order.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int HostToNetworkOrder (int host);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>host</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number to convert, expressed in host byte order.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An integer value, expressed in network byte order.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Different computers use different conventions for ordering the bytes within multibyte integer values. Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order). To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.  </p>\n<p> The <a class=\"xref\" href=\"system.net.ipaddress#System_Net_IPAddress_HostToNetworkOrder_\" data-linktype=\"relative-path\">HostToNetworkOrder</a> method converts multibyte integer values that are stored on the host system from the byte order used by the host to the byte order used by the network.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_IPAddress_HostToNetworkOrder_System_Int64_\">\r\n    \r\n            <a id=\"System_Net_IPAddress_HostToNetworkOrder_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HostToNetworkOrder(Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Converts a long value from host byte order to network byte order.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static long HostToNetworkOrder (long host);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>host</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number to convert, expressed in host byte order.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>A long value, expressed in network byte order.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Different computers use different conventions for ordering the bytes within multibyte integer values. Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order). To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.  </p>\n<p> The HostToNetworkOrder method converts multibyte integer values that are stored on the host system from the byte order used by the host to the byte order used by the network.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_IPAddress_IsLoopback_System_Net_IPAddress_\">\r\n    \r\n            <a id=\"System_Net_IPAddress_IsLoopback_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsLoopback(IPAddress)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether the specified IP address is the loopback address.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsLoopback (System.Net.IPAddress address);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>address</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An IP address.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>address</code> is the loopback address; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The IsLoopback method compares <code>address</code> to <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> and returns <code>true</code> if the two IP addresses are the same.  </p>\n<p> In the case of IPv4, that the IsLoopback method returns <code>true</code> for any IP address of the form 127.X.Y.Z (where X, Y, and Z are in the range 0-255), not just <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> (127.0.0.1).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the IsLoopback method to determine whether the specified address is a loopback address.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Net.IPAddress.IsLoopback#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Net;\nusing namespace System::Net::Sockets;\n\n// This method calls the IPAddress::Parse method to check if the\n// passed ipAddress parameter is in the correct format.\n// Then it checks whether it represents a loopback address.\n// Finally, it displays the results.\nvoid parse( String^ ipAddress )\n{\n   String^ loopBack = &quot; is not a loopback address.&quot;;\n   try\n   {\n      \n      // Perform syntax check by parsing the address string entered by the user.\n      IPAddress^ address = IPAddress::Parse( ipAddress );\n      \n      // Perform semantic check by verifying that the address is a valid IPv4\n      // or IPv6 loopback address.\n      if ( IPAddress::IsLoopback( address ) &amp;&amp; address-&gt;AddressFamily == AddressFamily::InterNetworkV6 )\n            loopBack = String::Concat( &quot; is an IPv6 loopback address whose internal format is: &quot;, address, &quot;.&quot; );\n      else\n      if ( IPAddress::IsLoopback( address ) &amp;&amp; address-&gt;AddressFamily == AddressFamily::InterNetwork )\n            loopBack = String::Concat( &quot; is an IPv4 loopback address whose internal format is: &quot;, address, &quot;.&quot; );\n      \n      // Display the results.\n      Console::WriteLine( &quot;Your input address: \\&quot; {0} \\&quot; {1}&quot;, ipAddress, loopBack );\n   }\n   catch ( FormatException^ e ) \n   {\n      Console::WriteLine( &quot;FormatException caught!!!&quot; );\n      Console::WriteLine( &quot;Source : {0}&quot;, e-&gt;Source );\n      Console::WriteLine( &quot;Message : {0}&quot;, e-&gt;Message );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;Exception caught!!!&quot; );\n      Console::WriteLine( &quot;Source : {0}&quot;, e-&gt;Source );\n      Console::WriteLine( &quot;Message : {0}&quot;, e-&gt;Message );\n   }\n\n}\n\nint main()\n{\n   array&lt;String^&gt;^args = Environment::GetCommandLineArgs();\n   if ( args-&gt;Length == 1 )\n   {\n      \n      // No parameters entered. Display program usage.\n      Console::WriteLine( &quot;Please enter an IP address.&quot; );\n      Console::WriteLine( &quot;Usage:   &gt;ipaddress_isloopback any IPv4 or IPv6 address.&quot; );\n      Console::WriteLine( &quot;Example: &gt;ipaddress_isloopback 127.0.0.1&quot; );\n      Console::WriteLine( &quot;Example: &gt;ipaddress_isloopback 0:0:0:0:0:0:0:1&quot; );\n   }\n   else\n      parse( args[ 1 ] );\n\n   \n   // Parse the address string entered by the user.\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Net.IPAddress.IsLoopback#1\">\nusing System;\nusing System.Net;\nusing System.Net.Sockets;\n\nclass IsLoopbackTest\n{\n\n  private static void Main(string[] args) \n  {\n    \n    if (args.Length == 0)\n    {\n      // No parameters entered. Display program usage.\n      Console.WriteLine(&quot;Please enter an IP address.&quot;);\n      Console.WriteLine(&quot;Usage:   &gt;ipaddress_isloopback any IPv4 or IPv6 address.&quot;);\n      Console.WriteLine(&quot;Example: &gt;ipaddress_isloopback 127.0.0.1&quot;);\n      Console.WriteLine(&quot;Example: &gt;ipaddress_isloopback 0:0:0:0:0:0:0:1&quot;);\n      return;\n    }\n    else\n      // Parse the address string entered by the user.\n      parse(args[0]);\n   \n  }\n\n  // This method calls the IPAddress.Parse method to check if the \n  // passed ipAddress parameter is in the correct format.\n  // Then it checks whether it represents a loopback address.\n  // Finally, it displays the results.\n  private static void parse(string ipAddress)\n  {\n    string loopBack=&quot; is not a loopback address.&quot;;\n\n    try\n    {\n      // Perform syntax check by parsing the address string entered by the user.\n      IPAddress address = IPAddress.Parse(ipAddress);\n\n      // Perform semantic check by verifying that the address is a valid IPv4 \n      // or IPv6 loopback address. \n      if(IPAddress.IsLoopback(address)&amp;&amp; address.AddressFamily == AddressFamily.InterNetworkV6)\n        loopBack =  &quot; is an IPv6 loopback address &quot; +\n                    &quot;whose internal format is: &quot; + address.ToString() + &quot;.&quot;;\n      else\n        if(IPAddress.IsLoopback(address) &amp;&amp; address.AddressFamily == AddressFamily.InterNetwork)\n          loopBack = &quot; is an IPv4 loopback address &quot; +\n                     &quot;whose internal format is: &quot; + address.ToString() + &quot;.&quot;;\n\n      // Display the results.\n      Console.WriteLine(&quot;Your input address: &quot; + &quot;\\&quot;&quot; + ipAddress + &quot;\\&quot;&quot; + loopBack);\n    }\n\n    catch(FormatException e)\n    {\n      Console.WriteLine(&quot;FormatException caught!!!&quot;);\n      Console.WriteLine(&quot;Source : &quot; + e.Source);\n      Console.WriteLine(&quot;Message : &quot; + e.Message);\n    }\n    \n    catch(Exception e)\n    {\n      Console.WriteLine(&quot;Exception caught!!!&quot;);\n      Console.WriteLine(&quot;Source : &quot; + e.Source);\n      Console.WriteLine(&quot;Message : &quot; + e.Message);\n    }\n\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Net.IPAddress.IsLoopback#1\">Imports System\nImports System.Net\nImports System.Net.Sockets\n\n _\n\nClass IsLoopbackTest\n   \n   &#39;Entry point which delegates to C-style main Private Function\n   Public Overloads Shared Sub Main()\n      Main(System.Environment.GetCommandLineArgs())\n   End Sub\n   \n   \n   Overloads Private Shared Sub Main(args() As String)\n      \n       If args.Length = 1 Then\n         &#39; No parameters entered. Display program usage.\n         Console.WriteLine(&quot;Please enter an IP address.&quot;)\n         Console.WriteLine(&quot;Usage:   &gt;ipaddress_isloopback any IPv4 or IPv6 address.&quot;)\n         Console.WriteLine(&quot;Example: &gt;ipaddress_isloopback 127.0.0.1&quot;)\n         Console.WriteLine(&quot;Example: &gt;ipaddress_isloopback 0:0:0:0:0:0:0:1&quot;)\n         Return\n      &#39; Parse the address string entered by the user.\n      Else\n        parse(args(1))\n      End If \n   End Sub &#39;Main\n   \n   \n   &#39; This method calls the IPAddress.Parse method to check whether the \n   &#39; passed ipAddress parameter is in the correct format.\n   &#39; Then it checks whether it represents a loopback address.\n   &#39; Finally, it displays the results.\n   Private Shared Sub parse(ipAdd As String)\n      Dim loopBack As String = &quot; is not a loopback address.&quot;\n      \n      Try\n         &#39; Perform syntax check by parsing the address string entered by the user.\n         Dim address As IPAddress = IPAddress.Parse(ipAdd)\n         \n         &#39; Perform semantic check by verifying that the address is a valid IPv4 \n         &#39; or IPv6 loopback address. \n         If IPAddress.IsLoopback(address) And address.AddressFamily = AddressFamily.InterNetworkV6 Then\n            loopBack = &quot; is an IPv6 loopback address &quot; + &quot;whose internal format is: &quot; + address.ToString() + &quot;.&quot;\n         Else\n            If IPAddress.IsLoopback(address) And address.AddressFamily = AddressFamily.InterNetwork Then\n               loopBack = &quot; is an IPv4 loopback address &quot; + &quot;whose internal format is: &quot; + address.ToString() + &quot;.&quot;\n            End If\n         End If \n         &#39; Display the results.\n         Console.WriteLine((&quot;Your input address: &quot; + &quot;&quot;&quot;&quot; + ipAdd + &quot;&quot;&quot;&quot; + loopBack))\n      \n      Catch e As FormatException\n         Console.WriteLine(&quot;FormatException caught!!!&quot;)\n         Console.WriteLine((&quot;Source : &quot; + e.Source))\n         Console.WriteLine((&quot;Message : &quot; + e.Message))\n      \n      Catch e As Exception\n         Console.WriteLine(&quot;Exception caught!!!&quot;)\n         Console.WriteLine((&quot;Source : &quot; + e.Source))\n         Console.WriteLine((&quot;Message : &quot; + e.Message))\n      End Try\n   End Sub &#39;parse \nEnd Class &#39;IsLoopbackTest\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_IPAddress_MapToIPv4\">\r\n    \r\n            <a id=\"System_Net_IPAddress_MapToIPv4_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MapToIPv4()</div>        \r\n          </div>\r\n    \r\n            <p>Maps the <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> object to an IPv4 address.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Net.IPAddress MapToIPv4 ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a></div>\r\n                  </div>\r\n                  <p>Returns <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a>.  </p>\n<p> An IPv4 address.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Dual-stack sockets always require IPv6 addresses. The ability to interact with an IPv4 address requires the use of the IPv4-mapped IPv6 address format. Any IPv4 addresses must be represented in the IPv4-mapped IPv6 address format which enables an IPv6 only application to communicate with an IPv4 node. The IPv4-mapped IPv6 address format allows the IPv4 address of an IPv4 node to be represented as an IPv6 address. The IPv4 address is encoded into the low-order 32 bits of the IPv6 address, and the high-order 96 bits hold the fixed prefix 0:0:0:0:0:FFFF. The IPv4-mapped IPv6 address format is specified in RFC 4291. For more information, see <a href=\"http://go.microsoft.com/fwlink/?LinkID=92231\" data-linktype=\"external\">www.ietf.org/rfc/rfc4291.txt</a>.  </p>\n<p> If you want to use MapToIPv4 to convert an IPv4 address from IPv6 format to IPv4 format, you must first ensure that you&#39;ve got an IPv4 address. Call <a class=\"xref\" href=\"system.net.ipaddress#System_Net_IPAddress_IsIPv4MappedToIPv6_\" data-linktype=\"relative-path\">IsIPv4MappedToIPv6</a>, which will return <code>true</code> if the IP address is originally IPv4 written as IPv6, or <code>false</code> otherwise. If <a class=\"xref\" href=\"system.net.ipaddress#System_Net_IPAddress_IsIPv4MappedToIPv6_\" data-linktype=\"relative-path\">IsIPv4MappedToIPv6</a> returns <code>true</code>, use MapToIPv4 to make the conversion.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_IPAddress_MapToIPv6\">\r\n    \r\n            <a id=\"System_Net_IPAddress_MapToIPv6_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MapToIPv6()</div>        \r\n          </div>\r\n    \r\n            <p>Maps the <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> object to an IPv6 address.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Net.IPAddress MapToIPv6 ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a></div>\r\n                  </div>\r\n                  <p>Returns <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a>.  </p>\n<p> An IPv6 address.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Dual-stack sockets always require IPv6 addresses. The ability to interact with an IPv4 address requires the use of the IPv4-mapped IPv6 address format. Any IPv4 addresses must be represented in the IPv4-mapped IPv6 address format which enables an IPv6 only application to communicate with an IPv4 node. The IPv4-mapped IPv6 address format allows the IPv4 address of an IPv4 node to be represented as an IPv6 address. The IPv4 address is encoded into the low-order 32 bits of the IPv6 address, and the high-order 96 bits hold the fixed prefix 0:0:0:0:0:FFFF. The IPv4-mapped IPv6 address format is specified in RFC 4291. For more information, see <a href=\"http://go.microsoft.com/fwlink/?LinkID=92231\" data-linktype=\"external\">www.ietf.org/rfc/rfc4291.txt</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_IPAddress_NetworkToHostOrder_System_Int16_\">\r\n    \r\n            <a id=\"System_Net_IPAddress_NetworkToHostOrder_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NetworkToHostOrder(Int16)</div>        \r\n          </div>\r\n    \r\n            <p>Converts a short value from network byte order to host byte order.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static short NetworkToHostOrder (short network);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>network</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number to convert, expressed in network byte order.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </div>\r\n                  <p>A short value, expressed in host byte order.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Different computers use different conventions for ordering the bytes within multibyte integer values. Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order). To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.  </p>\n<p> The <a class=\"xref\" href=\"system.net.ipaddress#System_Net_IPAddress_NetworkToHostOrder_\" data-linktype=\"relative-path\">NetworkToHostOrder</a> method converts multibyte integer values that are stored on the host system from the byte order used by the network to the byte order used by the host.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <a class=\"xref\" href=\"system.net.ipaddress#System_Net_IPAddress_NetworkToHostOrder_\" data-linktype=\"relative-path\">NetworkToHostOrder</a> method to convert a short value from network byte order to host byte order.  </p>\n<pre><code class=\"lang-cpp\" name=\"IPAddress_NetworkToHost#1\">void NetworkToHostOrder_Short( short networkByte )\n{\n   short hostByte;\n   // Converts a short value from network Byte order to host Byte order.\n   hostByte = IPAddress::NetworkToHostOrder( networkByte );\n   Console::WriteLine( &quot;Network Byte order to Host Byte order of {0} is {1}&quot;, networkByte, hostByte );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"IPAddress_NetworkToHost#1\">    Public Sub NetworkToHostOrder_Short(networkByte As Short)\n        Dim hostByte As Short\n        &#39; Converts a short value from network byte order to host byte order.\n        hostByte = IPAddress.NetworkToHostOrder(networkByte)\n        Console.WriteLine(&quot;Network byte order to Host byte order of {0} is {1}&quot;, networkByte, hostByte)\n    End Sub &#39;NetworkToHostOrder_Short    \n</code></pre><pre><code class=\"lang-cs\" name=\"IPAddress_NetworkToHost#1\">  public void NetworkToHostOrder_Short(short networkByte)\n  {\n    short hostByte;\n    // Converts a short value from network byte order to host byte order.\n    hostByte = IPAddress.NetworkToHostOrder(networkByte);\n    Console.WriteLine(&quot;Network byte order to Host byte order of {0} is {1}&quot;, networkByte, hostByte);\n  }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_IPAddress_NetworkToHostOrder_System_Int32_\">\r\n    \r\n            <a id=\"System_Net_IPAddress_NetworkToHostOrder_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NetworkToHostOrder(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts an integer value from network byte order to host byte order.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int NetworkToHostOrder (int network);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>network</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number to convert, expressed in network byte order.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An integer value, expressed in host byte order.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Different computers use different conventions for ordering the bytes within multibyte integer values. Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order). To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.  </p>\n<p> The <a class=\"xref\" href=\"system.net.ipaddress#System_Net_IPAddress_NetworkToHostOrder_\" data-linktype=\"relative-path\">NetworkToHostOrder</a> method converts multibyte integer values that are stored on the host system from the byte order used by the network to the byte order used by the host.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <a class=\"xref\" href=\"system.net.ipaddress#System_Net_IPAddress_NetworkToHostOrder_\" data-linktype=\"relative-path\">NetworkToHostOrder</a> method to convert an integer value from network byte order to host byte order.  </p>\n<pre><code class=\"lang-cpp\" name=\"IPAddress_NetworkToHost#2\">void NetworkToHostOrder_Integer( int networkByte )\n{\n   int hostByte;\n   // Converts an integer value from network Byte order to host Byte order.\n   hostByte = IPAddress::NetworkToHostOrder( networkByte );\n   Console::WriteLine( &quot;Network Byte order to Host Byte order of {0} is {1}&quot;, networkByte, hostByte );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"IPAddress_NetworkToHost#2\">    Public Sub NetworkToHostOrder_Integer(networkByte As Integer)\n        Dim hostByte As Integer\n        &#39; Converts an integer value from network byte order to host byte order.\n        hostByte = IPAddress.NetworkToHostOrder(networkByte)\n        Console.WriteLine(&quot;Network byte order to Host byte order of {0} is {1}&quot;, networkByte, hostByte)\n    End Sub &#39;NetworkToHostOrder_Integer\n</code></pre><pre><code class=\"lang-cs\" name=\"IPAddress_NetworkToHost#2\">  public void NetworkToHostOrder_Integer(int networkByte)\n  {\n    int hostByte;\n    // Converts an integer value from network byte order to host byte order.\n    hostByte = IPAddress.NetworkToHostOrder(networkByte);\n    Console.WriteLine(&quot;Network byte order to Host byte order of {0} is {1}&quot;, networkByte, hostByte);\n  }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_IPAddress_NetworkToHostOrder_System_Int64_\">\r\n    \r\n            <a id=\"System_Net_IPAddress_NetworkToHostOrder_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NetworkToHostOrder(Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Converts a long value from network byte order to host byte order.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static long NetworkToHostOrder (long network);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>network</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number to convert, expressed in network byte order.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>A long value, expressed in host byte order.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Different computers use different conventions for ordering the bytes within multibyte integer values. Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order). To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.  </p>\n<p> The NetworkToHostOrder method converts multibyte integer values that are stored on the host system from the byte order used by the network to the byte order used by the host.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the NetworkToHostOrder method to convert a long value from network byte order to host byte order.  </p>\n<pre><code class=\"lang-cpp\" name=\"IPAddress_NetworkToHost#3\">void NetworkToHostOrder_Long( __int64 networkByte )\n{\n   __int64 hostByte;\n   // Converts a long value from network Byte order to host Byte order.\n   hostByte = IPAddress::NetworkToHostOrder( networkByte );\n   Console::WriteLine( &quot;Network Byte order to Host Byte order of {0} is {1}&quot;, networkByte, hostByte );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"IPAddress_NetworkToHost#3\">    Public Sub NetworkToHostOrder_Long(networkByte As Long)\n        Dim hostByte As Long\n        &#39; Converts a long value from network byte order to host byte order.\n        hostByte = IPAddress.NetworkToHostOrder(networkByte)\n        Console.WriteLine(&quot;Network byte order to Host byte order of {0} is {1}&quot;, networkByte, hostByte)\n    End Sub &#39;NetworkToHostOrder_Long\n</code></pre><pre><code class=\"lang-cs\" name=\"IPAddress_NetworkToHost#3\">  public void NetworkToHostOrder_Long(long networkByte)\n  {\n    long hostByte;\n    // Converts a long value from network byte order to host byte order.\n    hostByte = IPAddress.NetworkToHostOrder(networkByte);\n    Console.WriteLine(&quot;Network byte order to Host byte order of {0} is {1}&quot;, networkByte, hostByte);\n  }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_IPAddress_Parse_System_String_\">\r\n    \r\n            <a id=\"System_Net_IPAddress_Parse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Parse(String)</div>        \r\n          </div>\r\n    \r\n            <p>Converts an IP address string to an <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Net.IPAddress Parse (string ipString);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ipString</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains an IP address in dotted-quad notation for IPv4 and in colon-hexadecimal notation for IPv6.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>ipString</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>ipString</code> is not a valid IP address.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The static Parse method creates an <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> instance from an IP address expressed in dotted-quad notation for IPv4 and in colon-hexadecimal notation for IPv6.  </p>\n<p> The number of parts (each part is separated by a period) in <code>ipString</code> determines how the IP address is constructed. A one part address is stored directly in the network address. A two part address, convenient for specifying a class A address, puts the leading part in the first byte and the trailing part in the right-most three bytes of the network address. A three part address, convenient for specifying a class B address, puts the first part in the first byte, the second part in the second byte, and the final part in the right-most two bytes of the network address. For example:  </p>\n<table>\n<thead>\n<tr>\n<th>Number of parts and example <code>ipString</code></th>\n<th>IPv4 address for IPAddress</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1 -- &quot;65536&quot;</td>\n<td>0.0.255.255</td>\n</tr>\n<tr>\n<td>2 -- &quot;20.2&quot;</td>\n<td>20.0.0.2</td>\n</tr>\n<tr>\n<td>2 -- &quot;20.65535&quot;</td>\n<td>20.0.255.255</td>\n</tr>\n<tr>\n<td>3 -- &quot;128.1.2&quot;</td>\n<td>128.1.0.2</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code converts a string that contains an IP address, in dotted-quad notation for IPv4 or in colon-hexadecimal notation for IPv6, into an instance of the <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> class. Then it uses the overloaded <a class=\"xref\" href=\"system.net.ipaddress#System_Net_IPAddress_ToString_\" data-linktype=\"relative-path\">ToString</a> method to display the address in standard notation.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Net.IPAddress.Parse#1\">\nusing System;\nusing System.Net;\n\nclass ParseAddress\n{\n\n  private static void Main(string[] args) \n  {\n    string IPaddress;\n\n    if (args.Length == 0)\n    {\n      Console.WriteLine(&quot;Please enter an IP address.&quot;);\n      Console.WriteLine(&quot;Usage:   &gt;cs_parse any IPv4 or IPv6 address.&quot;);\n      Console.WriteLine(&quot;Example: &gt;cs_parse 127.0.0.1&quot;);\n      Console.WriteLine(&quot;Example: &gt;cs_parse 0:0:0:0:0:0:0:1&quot;);\n      return;\n    }\n    else\n      IPaddress = args[0];\n\n    // Get the list of the IPv6 addresses associated with the requested host.\n    parse(IPaddress);\n   \n  }\n\n  // This method calls the IPAddress.Parse method to check the ipAddress \n  // input string. If the ipAddress argument represents a syntatically correct IPv4 or\n  // IPv6 address, the method displays the Parse output into quad-notation or\n  // colon-hexadecimal notation, respectively. Otherwise, it displays an \n  // error message.\n  private static void parse(string ipAddress)\n  {\n    try\n    {\n      // Create an instance of IPAddress for the specified address string (in \n      // dotted-quad, or colon-hexadecimal notation).\n      IPAddress address = IPAddress.Parse(ipAddress);\n\n      // Display the address in standard notation.\n      Console.WriteLine(&quot;Parsing your input string: &quot; + &quot;\\&quot;&quot; + ipAddress + &quot;\\&quot;&quot; + &quot; produces this address (shown in its standard notation): &quot;+ address.ToString());\n    }\n\n    catch(ArgumentNullException e)\n    {\n      Console.WriteLine(&quot;ArgumentNullException caught!!!&quot;);\n      Console.WriteLine(&quot;Source : &quot; + e.Source);\n      Console.WriteLine(&quot;Message : &quot; + e.Message);\n    }\n\n    catch(FormatException e)\n    {\n      Console.WriteLine(&quot;FormatException caught!!!&quot;);\n      Console.WriteLine(&quot;Source : &quot; + e.Source);\n      Console.WriteLine(&quot;Message : &quot; + e.Message);\n    }\n    \n    catch(Exception e)\n    {\n      Console.WriteLine(&quot;Exception caught!!!&quot;);\n      Console.WriteLine(&quot;Source : &quot; + e.Source);\n      Console.WriteLine(&quot;Message : &quot; + e.Message);\n    }\n\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Net.IPAddress.Parse#1\">Imports System\nImports System.Net\n\n\n\nClass ParseAddress\n   \n   &#39;Entry point which delegates to C-style main Private Function\n   Public Overloads Shared Sub Main()\n      Main(System.Environment.GetCommandLineArgs())\n   End Sub\n   \n   \n   Overloads Private Shared Sub Main(args() As String)\n      Dim IPaddress As String\n      \n      If args.Length = 1 Then\n         Console.WriteLine(&quot;Please enter an IP address.&quot;)\n         Console.WriteLine(&quot;Usage:   &gt;cs_parse any IPv4 or IPv6 address.&quot;)\n         Console.WriteLine(&quot;Example: &gt;cs_parse 127.0.0.1&quot;)\n         Console.WriteLine(&quot;Example: &gt;cs_parse 0:0:0:0:0:0:0:1&quot;)\n         Return\n      Else\n         IPaddress = args(1)\n      End If \n      &#39; Get the list of the IPv6 addresses associated with the requested host.\n      parse(IPaddress)\n   End Sub &#39;Main\n    \n   \n   &#39; This method calls the IPAddress.Parse method to check the ipAddress \n   &#39; input string. If the ipAddress argument represents a syntatical correct IPv4 or\n   &#39; IPv6 address, the method displays the Parse output into quad-notation or\n   &#39; colon-hexadecimal notation, respectively. Otherwise, it displays an \n   &#39; error message.\n   Private Shared Sub parse(ipAddr As String)\n      Try\n         &#39; Create an instance of IPAddress for the specified address string (in \n         &#39; dotted-quad, or colon-hexadecimal notation).\n         Dim address As IPAddress = IPAddress.Parse(ipAddr)\n         \n         &#39; Display the address in standard notation.\n         Console.WriteLine((&quot;Parsing your input string: &quot; + &quot;&quot;&quot;&quot; + ipAddr + &quot;&quot;&quot;&quot; + &quot; produces this address (shown in its standard notation): &quot; + address.ToString()))\n      \n      Catch e As ArgumentNullException\n         Console.WriteLine(&quot;ArgumentNullException caught!!!&quot;)\n         Console.WriteLine((&quot;Source : &quot; + e.Source))\n         Console.WriteLine((&quot;Message : &quot; + e.Message))\n      \n      Catch e As FormatException\n         Console.WriteLine(&quot;FormatException caught!!!&quot;)\n         Console.WriteLine((&quot;Source : &quot; + e.Source))\n         Console.WriteLine((&quot;Message : &quot; + e.Message))\n      \n      Catch e As Exception\n         Console.WriteLine(&quot;Exception caught!!!&quot;)\n         Console.WriteLine((&quot;Source : &quot; + e.Source))\n         Console.WriteLine((&quot;Message : &quot; + e.Message))\n      End Try\n   End Sub &#39;parse \nEnd Class &#39;ParseAddress\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Net.IPAddress.Parse#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Net;\n\n// This method calls the IPAddress::Parse method to check the ipAddress\n// input string. If the ipAddress argument represents a syntatically correct IPv4 or\n// IPv6 address, the method displays the Parse output into quad-notation or\n// colon-hexadecimal notation, respectively. Otherwise, it displays an\n// error message.\nvoid parse( String^ ipAddress )\n{\n   try\n   {\n      \n      // Create an instance of IPAddress for the specified address string (in\n      // dotted-quad, or colon-hexadecimal notation).\n      IPAddress^ address = IPAddress::Parse( ipAddress );\n      \n      // Display the address in standard notation.\n      Console::WriteLine( &quot;Parsing your input string: \\&quot;{0}\\&quot; produces this address (shown in its standard notation): {1}&quot;, ipAddress, address );\n   }\n   catch ( ArgumentNullException^ e ) \n   {\n      Console::WriteLine( &quot;ArgumentNullException caught!!!&quot; );\n      Console::WriteLine( &quot;Source : {0}&quot;, e-&gt;Source );\n      Console::WriteLine( &quot;Message : {0}&quot;, e-&gt;Message );\n   }\n   catch ( FormatException^ e ) \n   {\n      Console::WriteLine( &quot;FormatException caught!!!&quot; );\n      Console::WriteLine( &quot;Source : {0}&quot;, e-&gt;Source );\n      Console::WriteLine( &quot;Message : {0}&quot;, e-&gt;Message );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;Exception caught!!!&quot; );\n      Console::WriteLine( &quot;Source : {0}&quot;, e-&gt;Source );\n      Console::WriteLine( &quot;Message : {0}&quot;, e-&gt;Message );\n   }\n\n}\n\nint main()\n{\n   array&lt;String^&gt;^args = Environment::GetCommandLineArgs();\n   String^ IPaddress;\n   if ( args-&gt;Length == 1 )\n   {\n      Console::WriteLine( &quot;Please enter an IP address.&quot; );\n      Console::WriteLine( &quot;Usage:   &gt;cs_parse any IPv4 or IPv6 address.&quot; );\n      Console::WriteLine( &quot;Example: &gt;cs_parse 127.0.0.1&quot; );\n      Console::WriteLine( &quot;Example: &gt;cs_parse 0:0:0:0:0:0:0:1&quot; );\n      return 0;\n   }\n   else\n      IPaddress = args[ 1 ];\n\n   \n   // Get the list of the IPv6 addresses associated with the requested host.\n   parse( IPaddress );\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_IPAddress_ToString\">\r\n    \r\n            <a id=\"System_Net_IPAddress_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Converts an Internet address to its standard notation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that contains the IP address in either IPv4 dotted-quad or in IPv6 colon-hexadecimal notation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>The address family is <a class=\"xref\" href=\"system.net.sockets.addressfamily\" data-linktype=\"relative-path\">AddressFamily</a> and the address is bad.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ToString method converts the IP address that is stored in the <a class=\"xref\" href=\"system.net.ipaddress#System_Net_IPAddress_Address_\" data-linktype=\"relative-path\">Address</a> property to either IPv4 dotted-quad or IPv6 colon-hexadecimal notation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_IPAddress_TryParse_System_String_System_Net_IPAddress__\">\r\n    \r\n            <a id=\"System_Net_IPAddress_TryParse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryParse(String,IPAddress)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether a string is a valid IP address.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool TryParse (string ipString, out System.Net.IPAddress address);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ipString</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to validate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>address</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> version of the string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>ipString</code> was able to be parsed as an IP address; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Note that this method accepts as valid an ipString value that can be parsed as an <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>, and then treats that Int64 as the long value of an IP address in network byte order, similar to the way that the <a class=\"xref\" href=\"system.net.ipaddress#System_Net_IPAddress__ctor_\" data-linktype=\"relative-path\">IPAddress</a> constructor does. This means that this method returns true if the Int64 is parsed successfully, even if it represents an address that&#39;s not a valid IP address. For example, if ipString is &quot;1&quot;, this method returns true even though &quot;1&quot; (or 0.0.0.1) is not a valid IP address and you might expect this method to return false. Fixing this bug would break existing apps, so the current behavior will not be changed. Your code can avoid this behavior by ensuring that it only uses this method to parse IP addresses in dotted-decimal format.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Net.IPAddress.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Net.IPAddress.yml\">\r\n<meta name=\"APIName\" content=\"System.Net.IPAddress\">\r\n<meta name=\"APIName\" content=\"System.Net.IPAddress..ctor\">\r\n<meta name=\"APIName\" content=\"System.Net.IPAddress.Address\">\r\n<meta name=\"APIName\" content=\"System.Net.IPAddress.AddressFamily\">\r\n<meta name=\"APIName\" content=\"System.Net.IPAddress.Any\">\r\n<meta name=\"APIName\" content=\"System.Net.IPAddress.Broadcast\">\r\n<meta name=\"APIName\" content=\"System.Net.IPAddress.Equals\">\r\n<meta name=\"APIName\" content=\"System.Net.IPAddress.GetAddressBytes\">\r\n<meta name=\"APIName\" content=\"System.Net.IPAddress.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Net.IPAddress.HostToNetworkOrder\">\r\n<meta name=\"APIName\" content=\"System.Net.IPAddress.IPv6Any\">\r\n<meta name=\"APIName\" content=\"System.Net.IPAddress.IPv6Loopback\">\r\n<meta name=\"APIName\" content=\"System.Net.IPAddress.IPv6None\">\r\n<meta name=\"APIName\" content=\"System.Net.IPAddress.IsIPv4MappedToIPv6\">\r\n<meta name=\"APIName\" content=\"System.Net.IPAddress.IsIPv6LinkLocal\">\r\n<meta name=\"APIName\" content=\"System.Net.IPAddress.IsIPv6Multicast\">\r\n<meta name=\"APIName\" content=\"System.Net.IPAddress.IsIPv6SiteLocal\">\r\n<meta name=\"APIName\" content=\"System.Net.IPAddress.IsIPv6Teredo\">\r\n<meta name=\"APIName\" content=\"System.Net.IPAddress.IsLoopback\">\r\n<meta name=\"APIName\" content=\"System.Net.IPAddress.Loopback\">\r\n<meta name=\"APIName\" content=\"System.Net.IPAddress.MapToIPv4\">\r\n<meta name=\"APIName\" content=\"System.Net.IPAddress.MapToIPv6\">\r\n<meta name=\"APIName\" content=\"System.Net.IPAddress.NetworkToHostOrder\">\r\n<meta name=\"APIName\" content=\"System.Net.IPAddress.None\">\r\n<meta name=\"APIName\" content=\"System.Net.IPAddress.Parse\">\r\n<meta name=\"APIName\" content=\"System.Net.IPAddress.ScopeId\">\r\n<meta name=\"APIName\" content=\"System.Net.IPAddress.ToString\">\r\n<meta name=\"APIName\" content=\"System.Net.IPAddress.TryParse\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"844a85ab-03fb-aa57-3b7e-94bf9270c78e\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Net\\IPAddress.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides an Internet Protocol (IP) address.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Net/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Net.IPAddress\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Net.IPAddress.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Net.IPAddress.yml","open_to_public_contributors":true,"api_name":["System.Net.IPAddress","System.Net.IPAddress..ctor","System.Net.IPAddress.Address","System.Net.IPAddress.AddressFamily","System.Net.IPAddress.Any","System.Net.IPAddress.Broadcast","System.Net.IPAddress.Equals","System.Net.IPAddress.GetAddressBytes","System.Net.IPAddress.GetHashCode","System.Net.IPAddress.HostToNetworkOrder","System.Net.IPAddress.IPv6Any","System.Net.IPAddress.IPv6Loopback","System.Net.IPAddress.IPv6None","System.Net.IPAddress.IsIPv4MappedToIPv6","System.Net.IPAddress.IsIPv6LinkLocal","System.Net.IPAddress.IsIPv6Multicast","System.Net.IPAddress.IsIPv6SiteLocal","System.Net.IPAddress.IsIPv6Teredo","System.Net.IPAddress.IsLoopback","System.Net.IPAddress.Loopback","System.Net.IPAddress.MapToIPv4","System.Net.IPAddress.MapToIPv6","System.Net.IPAddress.NetworkToHostOrder","System.Net.IPAddress.None","System.Net.IPAddress.Parse","System.Net.IPAddress.ScopeId","System.Net.IPAddress.ToString","System.Net.IPAddress.TryParse"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Net.IPAddress","System::Net::IPAddress","System.Net.IPAddress.#ctor","System::Net::IPAddress::#ctor","System.Net.IPAddress.Address","System::Net::IPAddress::Address","System.Net.IPAddress.AddressFamily","System::Net::IPAddress::AddressFamily","System.Net.IPAddress.Any","System::Net::IPAddress::Any","System.Net.IPAddress.Broadcast","System::Net::IPAddress::Broadcast","System.Net.IPAddress.Equals","System::Net::IPAddress::Equals","System.Net.IPAddress.GetAddressBytes","System::Net::IPAddress::GetAddressBytes","System.Net.IPAddress.GetHashCode","System::Net::IPAddress::GetHashCode","System.Net.IPAddress.HostToNetworkOrder","System::Net::IPAddress::HostToNetworkOrder","System.Net.IPAddress.IPv6Any","System::Net::IPAddress::IPv6Any","System.Net.IPAddress.IPv6Loopback","System::Net::IPAddress::IPv6Loopback","System.Net.IPAddress.IPv6None","System::Net::IPAddress::IPv6None","System.Net.IPAddress.IsIPv4MappedToIPv6","System::Net::IPAddress::IsIPv4MappedToIPv6","System.Net.IPAddress.IsIPv6LinkLocal","System::Net::IPAddress::IsIPv6LinkLocal","System.Net.IPAddress.IsIPv6Multicast","System::Net::IPAddress::IsIPv6Multicast","System.Net.IPAddress.IsIPv6SiteLocal","System::Net::IPAddress::IsIPv6SiteLocal","System.Net.IPAddress.IsIPv6Teredo","System::Net::IPAddress::IsIPv6Teredo","System.Net.IPAddress.IsLoopback","System::Net::IPAddress::IsLoopback","System.Net.IPAddress.Loopback","System::Net::IPAddress::Loopback","System.Net.IPAddress.MapToIPv4","System::Net::IPAddress::MapToIPv4","System.Net.IPAddress.MapToIPv6","System::Net::IPAddress::MapToIPv6","System.Net.IPAddress.NetworkToHostOrder","System::Net::IPAddress::NetworkToHostOrder","System.Net.IPAddress.None","System::Net::IPAddress::None","System.Net.IPAddress.Parse","System::Net::IPAddress::Parse","System.Net.IPAddress.ScopeId","System::Net::IPAddress::ScopeId","System.Net.IPAddress.ToString","System::Net::IPAddress::ToString","System.Net.IPAddress.TryParse","System::Net::IPAddress::TryParse"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"844a85ab-03fb-aa57-3b7e-94bf9270c78e","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Net\\IPAddress.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Net/IPAddress.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IPAddress class | Microsoft Docs","_op_ogTitle":"IPAddress class","description":"Provides an Internet Protocol (IP) address.\n","toc_asset_id":"_splitted/System.Net/toc.json","toc_rel":"_splitted/System.Net/toc.json","source_url":"","ms.assetid":"System.Net.IPAddress","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.net.ipaddress","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.net.ipaddress","fileRelativePath":"System.Net.IPAddress.html"},"themesRelativePathToOutputRoot":"_themes/"}