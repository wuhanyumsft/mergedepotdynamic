{"content":"    \r\n    <h1 id=\"System_Security_Cryptography_Xml_XmlDsigXsltTransform\">\r\n      <span class=\"lang-csharp\">XmlDsigXsltTransform</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents the XSLT transform for a digital signature as defined by the W3C.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class XmlDsigXsltTransform : System.Security.Cryptography.Xml.Transform</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.xml.transform\" data-linktype=\"relative-path\">System.Security.Cryptography.Xml.Transform</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">XmlDsigXsltTransform</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.xml.transform#System_Security_Cryptography_Xml_Transform_Algorithm\" data-linktype=\"relative-path\">Algorithm</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.xml.transform#System_Security_Cryptography_Xml_Transform_Context\" data-linktype=\"relative-path\">Context</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.xml.transform#System_Security_Cryptography_Xml_Transform_GetDigestedOutput_System_Security_Cryptography_HashAlgorithm_\" data-linktype=\"relative-path\">GetDigestedOutput(HashAlgorithm)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.xml.transform#System_Security_Cryptography_Xml_Transform_GetXml\" data-linktype=\"relative-path\">GetXml()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.xml.transform#System_Security_Cryptography_Xml_Transform_PropagatedNamespaces\" data-linktype=\"relative-path\">PropagatedNamespaces</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.xml.transform#System_Security_Cryptography_Xml_Transform_Resolver\" data-linktype=\"relative-path\">Resolver</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxpathtransform\" data-linktype=\"relative-path\">XmlDsigXPathTransform</a> class allows you to address an XML document using an XSLT transformation.  This class uses XSLT to transform XML nodes into other XML nodes that you want to sign or encrypt.  </p>\n<p> Use the XmlDsigXsltTransform class to sign or encrypt specific parts of an XML document using an XSLT transformation.  </p>\n<p> The Uniform Resource Identifier (URI) that describes the XmlDsigXsltTransform class is defined by the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml#System_Security_Cryptography_Xml_SignedXml_XmlDsigXsltTransformUrl\" data-linktype=\"relative-path\">XmlDsigXsltTransformUrl</a> field.  </p>\n<p> For more information about the XSLT transform, see Section 6.6.5 of the XMLDSIG specification, which is available from the W3C at www.w3.org/TR/xmldsig-core/.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_XmlDsigXsltTransform__ctor\" data-linktype=\"self-bookmark\">XmlDsigXsltTransform()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_XmlDsigXsltTransform__ctor_System_Boolean_\" data-linktype=\"self-bookmark\">XmlDsigXsltTransform(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> class with comments, if specified.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_XmlDsigXsltTransform_InputTypes\" data-linktype=\"self-bookmark\">InputTypes</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an array of types that are valid inputs to the <span class=\"xref\">stem.Security.Cryptography.Xml.XmlDsigXsltTransform.LoadInput*</span> method of the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_XmlDsigXsltTransform_OutputTypes\" data-linktype=\"self-bookmark\">OutputTypes</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an array of types that are possible outputs from the <span class=\"xref\">stem.Security.Cryptography.Xml.XmlDsigXsltTransform.GetOutput*</span> methods of the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_XmlDsigXsltTransform_GetInnerXml\" data-linktype=\"self-bookmark\">GetInnerXml()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an XML representation of the parameters of the <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> object that are suitable to be included as subelements of an XMLDSIG <code>&lt;Transform&gt;</code> element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_XmlDsigXsltTransform_GetOutput\" data-linktype=\"self-bookmark\">GetOutput()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the output of the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_XmlDsigXsltTransform_GetOutput_System_Type_\" data-linktype=\"self-bookmark\">GetOutput(Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the output of the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> object of type <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_XmlDsigXsltTransform_LoadInnerXml_System_Xml_XmlNodeList_\" data-linktype=\"self-bookmark\">LoadInnerXml(XmlNodeList)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Parses the specified <a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a> object as transform-specific content of a <code>&lt;Transform&gt;</code> element and configures the internal state of the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> object to match the <code>&lt;Transform&gt;</code> element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_XmlDsigXsltTransform_LoadInput_System_Object_\" data-linktype=\"self-bookmark\">LoadInput(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads the specified input into the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_XmlDsigXsltTransform__ctor\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_XmlDsigXsltTransform__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlDsigXsltTransform()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public XmlDsigXsltTransform ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to sign and verify an XML document using the <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> class with an envelope signature.  </p>\n<pre><code class=\"lang-vb\" name=\"Cryptography.Xml.XmlDsigXsltTransform#1\">&#39;\n&#39; This example signs an XML file using an\n&#39; envelope signature. It then verifies the \n&#39; signed XML.\n&#39;\nImports System\nImports System.Security.Cryptography\nImports System.Security.Cryptography.X509Certificates\nImports System.Security.Cryptography.Xml\nImports System.Text\nImports System.Xml\n\n\n\nModule SignVerifyEnvelope\n\n\n    Sub Main(ByVal args() As String)\n        &#39; Generate a signing key.\n        Dim Key As New RSACryptoServiceProvider()\n\n        Dim xsl As String = &quot;&lt;xs:transform xmlns:xs=&#39;http://www.w3.org/1999/XSL/Transform&#39; version=&#39;1.0&#39;&gt; &lt;xs:template match=&#39;/&#39;&gt; &lt;xs:apply-templates/&gt; &lt;/xs:template&gt; &lt;xs:template match=&#39;ElementToTransform&#39;&gt; &lt;transformedElement/&gt; &lt;/xs:template&gt; &lt;/xs:transform&gt;&quot;\n\n        Try\n            &#39; Create an XML file to sign.\n            CreateSomeXml(&quot;Example.xml&quot;)\n            Console.WriteLine(&quot;New XML file created.&quot;)\n\n            &#39; Sign the XML that was just created and save it in a \n            &#39; new file.\n            SignXmlFile(&quot;Example.xml&quot;, &quot;SignedExample.xml&quot;, Key, xsl)\n            Console.WriteLine(&quot;XML file signed.&quot;)\n\n            &#39; Verify the signature of the signed XML.\n            Console.WriteLine(&quot;Verifying signature...&quot;)\n            Dim result As Boolean = VerifyXmlFile(&quot;SignedExample.xml&quot;)\n\n            &#39; Display the results of the signature verification to \\\n            &#39; the console.\n            If result Then\n                Console.WriteLine(&quot;The XML signature is valid.&quot;)\n            Else\n                Console.WriteLine(&quot;The XML signature is not valid.&quot;)\n            End If\n        Catch e As CryptographicException\n            Console.WriteLine(e.Message)\n        Finally\n            Key.Clear()\n        End Try\n\n    End Sub\n\n\n    &#39; Sign an XML file and save the signature in a new file.\n    Sub SignXmlFile(ByVal FileName As String, ByVal SignedFileName As String, ByVal Key As RSA, ByVal XSLString As String)\n        &#39; Create a new XML document.\n        Dim doc As New XmlDocument()\n\n        &#39; Format the document to ignore white spaces.\n        doc.PreserveWhitespace = False\n\n        &#39; Load the passed XML file using it&#39;s name.\n        doc.Load(New XmlTextReader(FileName))\n\n        &#39; Create a SignedXml object.\n        Dim signedXml As New SignedXml(doc)\n\n        &#39; Add the key to the SignedXml document. \n        signedXml.SigningKey = Key\n\n        &#39; Create a reference to be signed.\n        Dim reference As New Reference()\n        reference.Uri = &quot;&quot;\n\n        &#39; Add an enveloped transformation to the reference.\n        Dim env As New XmlDsigEnvelopedSignatureTransform()\n        reference.AddTransform(env)\n\n        &#39; Create an XmlDsigXPathTransform object using \n        &#39; the helper method &#39;CreateXPathTransform&#39; defined\n        &#39; later in this sample.\n        Dim XsltTransform As XmlDsigXsltTransform = CreateXsltTransform(XSLString)\n\n        &#39; Add the transform to the reference.\n        reference.AddTransform(XsltTransform)\n\n        &#39; Add the reference to the SignedXml object.\n        signedXml.AddReference(reference)\n\n        &#39; Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n        Dim keyInfo As New KeyInfo()\n        keyInfo.AddClause(New RSAKeyValue(CType(Key, RSA)))\n        signedXml.KeyInfo = keyInfo\n\n        &#39; Compute the signature.\n        signedXml.ComputeSignature()\n\n        &#39; Get the XML representation of the signature and save\n        &#39; it to an XmlElement object.\n        Dim xmlDigitalSignature As XmlElement = signedXml.GetXml()\n\n        &#39; Append the element to the XML document.\n        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, True))\n\n        &#39; Save the signed XML document to a file specified\n        &#39; using the passed string.\n        Dim xmltw As New XmlTextWriter(SignedFileName, New UTF8Encoding(False))\n        doc.WriteTo(xmltw)\n        xmltw.Close()\n\n    End Sub\n\n    &#39; Verify the signature of an XML file and return the result.\n    Function VerifyXmlFile(ByVal Name As String) As [Boolean]\n        &#39; Create a new XML document.\n        Dim xmlDocument As New XmlDocument()\n\n        &#39; Format using white spaces.\n        xmlDocument.PreserveWhitespace = True\n\n        &#39; Load the passed XML file into the document. \n        xmlDocument.Load(Name)\n\n        &#39; Create a new SignedXml object and pass it\n        &#39; the XML document class.\n        Dim signedXml As New SignedXml(xmlDocument)\n\n        &#39; Find the &quot;Signature&quot; node and create a new\n        &#39; XmlNodeList object.\n        Dim nodeList As XmlNodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;)\n\n        &#39; Load the signature node.\n        signedXml.LoadXml(CType(nodeList(0), XmlElement))\n\n        &#39; Check the signature and return the result.\n        Return signedXml.CheckSignature()\n\n    End Function\n\n\n    &#39; Create the XML that represents the transform.\n    Function CreateXsltTransform(ByVal xsl As String) As XmlDsigXsltTransform\n        Dim doc As New XmlDocument()\n        doc.LoadXml(xsl)\n\n        Dim xform As New XmlDsigXsltTransform()\n        xform.LoadInnerXml(doc.ChildNodes)\n\n        Return xform\n\n    End Function\n\n\n    &#39; Create example data to sign.\n    Sub CreateSomeXml(ByVal FileName As String)\n        &#39; Create a new XmlDocument object.\n        Dim document As New XmlDocument()\n\n        &#39; Create a new XmlNode object.\n        Dim node As XmlNode = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;MyXML&quot;, &quot;Don&#39;t_Sign&quot;)\n\n        &#39; Append the node to the document.\n        document.AppendChild(node)\n\n        &#39; Create a new XmlNode object.\n        Dim subnode As XmlNode = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;ElementToTransform&quot;, &quot;Sign&quot;)\n\n        &#39; Add some text to the node.\n        subnode.InnerText = &quot;Here is some data to sign.&quot;\n\n        &#39; Append the node to the document.\n        document.DocumentElement.AppendChild(subnode)\n\n        &#39; Save the XML document to the file name specified.\n        Dim xmltw As New XmlTextWriter(FileName, New UTF8Encoding(False))\n        document.WriteTo(xmltw)\n        xmltw.Close()\n\n    End Sub\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"Cryptography.Xml.XmlDsigXsltTransform#1\">//\n// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n//\nusing System;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.X509Certificates;\nusing System.Security.Cryptography.Xml;\nusing System.Text;\nusing System.Xml;\n\npublic class SignVerifyEnvelope\n{\n\n    public static void Main(String[] args)\n    {\n        // Generate a signing key.\n        RSACryptoServiceProvider Key = new RSACryptoServiceProvider();\n\n        string xsl = @&quot;\n    &lt;xs:transform xmlns:xs=&#39;http://www.w3.org/1999/XSL/Transform&#39; version=&#39;1.0&#39;&gt;\n        &lt;xs:template match=&#39;/&#39;&gt;\n            &lt;xs:apply-templates/&gt;\n        &lt;/xs:template&gt;\n        &lt;xs:template match=&#39;ElementToTransform&#39;&gt; \n            &lt;transformedElement/&gt;\n        &lt;/xs:template&gt;\n    &lt;/xs:transform&gt;&quot;;\n\n        try\n        {\n            // Create an XML file to sign.\n            CreateSomeXml(&quot;Example.xml&quot;);\n            Console.WriteLine(&quot;New XML file created.&quot;);\n\n            // Sign the XML that was just created and save it in a \n            // new file.\n            SignXmlFile(&quot;Example.xml&quot;, &quot;SignedExample.xml&quot;, Key, xsl);\n            Console.WriteLine(&quot;XML file signed.&quot;);\n\n            // Verify the signature of the signed XML.\n            Console.WriteLine(&quot;Verifying signature...&quot;);\n            bool result = VerifyXmlFile(&quot;SignedExample.xml&quot;);\n\n            // Display the results of the signature verification to \\\n            // the console.\n            if (result)\n            {\n                Console.WriteLine(&quot;The XML signature is valid.&quot;);\n            }\n            else\n            {\n                Console.WriteLine(&quot;The XML signature is not valid.&quot;);\n            }\n        }\n        catch (CryptographicException e)\n        {\n            Console.WriteLine(e.Message);\n        }\n        finally\n        {\n            Key.Clear();\n        }\n\n    }\n\n    // Sign an XML file and save the signature in a new file.\n    public static void SignXmlFile(string FileName, string SignedFileName, RSA Key, string XSLString)\n    {\n        // Create a new XML document.\n        XmlDocument doc = new XmlDocument();\n\n        // Format the document to ignore white spaces.\n        doc.PreserveWhitespace = false;\n\n        // Load the passed XML file using it&#39;s name.\n        doc.Load(new XmlTextReader(FileName));\n\n        // Create a SignedXml object.\n        SignedXml signedXml = new SignedXml(doc);\n\n        // Add the key to the SignedXml document. \n        signedXml.SigningKey = Key;\n\n        // Create a reference to be signed.\n        Reference reference = new Reference();\n        reference.Uri = &quot;&quot;;\n\n        // Add an enveloped transformation to the reference.\n        XmlDsigEnvelopedSignatureTransform env = new XmlDsigEnvelopedSignatureTransform();\n        reference.AddTransform(env);\n\n        // Create an XmlDsigXPathTransform object using \n        // the helper method &#39;CreateXPathTransform&#39; defined\n        // later in this sample.\n\n        XmlDsigXsltTransform XsltTransform = CreateXsltTransform(XSLString);\n\n        // Add the transform to the reference.\n        reference.AddTransform(XsltTransform);\n\n        // Add the reference to the SignedXml object.\n        signedXml.AddReference(reference);\n\n        // Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n        KeyInfo keyInfo = new KeyInfo();\n        keyInfo.AddClause(new RSAKeyValue((RSA)Key));\n        signedXml.KeyInfo = keyInfo;\n\n        // Compute the signature.\n        signedXml.ComputeSignature();\n\n        // Get the XML representation of the signature and save\n        // it to an XmlElement object.\n        XmlElement xmlDigitalSignature = signedXml.GetXml();\n\n        // Append the element to the XML document.\n        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, true));\n\n        // Save the signed XML document to a file specified\n        // using the passed string.\n        XmlTextWriter xmltw = new XmlTextWriter(SignedFileName, new UTF8Encoding(false));\n        doc.WriteTo(xmltw);\n        xmltw.Close();\n    }\n    // Verify the signature of an XML file and return the result.\n    public static Boolean VerifyXmlFile(String Name)\n    {\n        // Create a new XML document.\n        XmlDocument xmlDocument = new XmlDocument();\n\n        // Format using white spaces.\n        xmlDocument.PreserveWhitespace = true;\n\n        // Load the passed XML file into the document. \n        xmlDocument.Load(Name);\n\n        // Create a new SignedXml object and pass it\n        // the XML document class.\n        SignedXml signedXml = new SignedXml(xmlDocument);\n\n        // Find the &quot;Signature&quot; node and create a new\n        // XmlNodeList object.\n        XmlNodeList nodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;);\n\n        // Load the signature node.\n        signedXml.LoadXml((XmlElement)nodeList[0]);\n\n        // Check the signature and return the result.\n        return signedXml.CheckSignature();\n\n    }\n\n    // Create the XML that represents the transform.\n    public static XmlDsigXsltTransform CreateXsltTransform(string xsl)\n    {\n        XmlDocument doc = new XmlDocument();\n        doc.LoadXml(xsl);\n\n        XmlDsigXsltTransform xform = new XmlDsigXsltTransform();\n        xform.LoadInnerXml(doc.ChildNodes);\n\n        return xform;\n    }\n\n    // Create example data to sign.\n    public static void CreateSomeXml(string FileName)\n    {\n        // Create a new XmlDocument object.\n        XmlDocument document = new XmlDocument();\n\n        // Create a new XmlNode object.\n        XmlNode node = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;MyXML&quot;, &quot;Don&#39;t_Sign&quot;);\n\n        // Append the node to the document.\n        document.AppendChild(node);\n\n        // Create a new XmlNode object.\n        XmlNode subnode = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;ElementToTransform&quot;, &quot;Sign&quot;);\n\n        // Add some text to the node.\n        subnode.InnerText = &quot;Here is some data to sign.&quot;;\n\n        // Append the node to the document.\n        document.DocumentElement.AppendChild(subnode);\n\n        // Save the XML document to the file name specified.\n        XmlTextWriter xmltw = new XmlTextWriter(FileName, new UTF8Encoding(false));\n        document.WriteTo(xmltw);\n        xmltw.Close();\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Cryptography.Xml.XmlDsigXsltTransform#1\">//\n// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n//\n#using &lt;System.Xml.dll&gt;\n#using &lt;System.Security.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::X509Certificates;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::Text;\nusing namespace System::Xml;\n\n// Create the XML that represents the transform.\nstatic XmlDsigXsltTransform^ CreateXsltTransform( String^ xsl )\n{\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;LoadXml( xsl );\n   XmlDsigXsltTransform^ xform = gcnew XmlDsigXsltTransform;\n   xform-&gt;LoadInnerXml( doc-&gt;ChildNodes );\n   return xform;\n}\n\n\n// Sign an XML file and save the signature in a new file.\nstatic void SignXmlFile( String^ FileName, String^ SignedFileName, RSA^ Key, String^ XSLString )\n{\n   \n   // Create a new XML document.\n   XmlDocument^ doc = gcnew XmlDocument;\n   \n   // Format the document to ignore white spaces.\n   doc-&gt;PreserveWhitespace = false;\n   \n   // Load the passed XML file using it&#39;s name.\n   doc-&gt;Load( gcnew XmlTextReader( FileName ) );\n   \n   // Create a SignedXml object.\n   SignedXml^ signedXml = gcnew SignedXml( doc );\n   \n   // Add the key to the SignedXml document. \n   signedXml-&gt;SigningKey = Key;\n   \n   // Create a reference to be signed.\n   Reference^ reference = gcnew Reference;\n   reference-&gt;Uri = L&quot;&quot;;\n   \n   // Add an enveloped transformation to the reference.\n   XmlDsigEnvelopedSignatureTransform^ env = gcnew XmlDsigEnvelopedSignatureTransform;\n   reference-&gt;AddTransform( env );\n   \n   // Create an XmlDsigXPathTransform object using \n   // the helper method &#39;CreateXPathTransform&#39; defined\n   // later in this sample.\n   XmlDsigXsltTransform^ XsltTransform = CreateXsltTransform( XSLString );\n   \n   // Add the transform to the reference.\n   reference-&gt;AddTransform( XsltTransform );\n   \n   // Add the reference to the SignedXml object.\n   signedXml-&gt;AddReference( reference );\n   \n   // Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n   KeyInfo^ keyInfo = gcnew KeyInfo;\n   keyInfo-&gt;AddClause( gcnew RSAKeyValue( dynamic_cast&lt;RSA^&gt;(Key) ) );\n   signedXml-&gt;KeyInfo = keyInfo;\n   \n   // Compute the signature.\n   signedXml-&gt;ComputeSignature();\n   \n   // Get the XML representation of the signature and save\n   // it to an XmlElement object.\n   XmlElement^ xmlDigitalSignature = signedXml-&gt;GetXml();\n   \n   // Append the element to the XML document.\n   doc-&gt;DocumentElement-&gt;AppendChild( doc-&gt;ImportNode( xmlDigitalSignature, true ) );\n   \n   // Save the signed XML document to a file specified\n   // using the passed string.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( SignedFileName,gcnew UTF8Encoding( false ) );\n   doc-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\n\n// Verify the signature of an XML file and return the result.\nstatic Boolean VerifyXmlFile( String^ Name )\n{\n   \n   // Create a new XML document.\n   XmlDocument^ xmlDocument = gcnew XmlDocument;\n   \n   // Format using white spaces.\n   xmlDocument-&gt;PreserveWhitespace = true;\n   \n   // Load the passed XML file into the document. \n   xmlDocument-&gt;Load( Name );\n   \n   // Create a new SignedXml object and pass it\n   // the XML document class.\n   SignedXml^ signedXml = gcnew SignedXml( xmlDocument );\n   \n   // Find the &quot;Signature&quot; node and create a new\n   // XmlNodeList object.\n   XmlNodeList^ nodeList = xmlDocument-&gt;GetElementsByTagName( L&quot;Signature&quot; );\n   \n   // Load the signature node.\n   signedXml-&gt;LoadXml( dynamic_cast&lt;XmlElement^&gt;(nodeList-&gt;Item( 0 )) );\n   \n   // Check the signature and return the result.\n   return signedXml-&gt;CheckSignature();\n}\n\n\n// Create example data to sign.\nstatic void CreateSomeXml( String^ FileName )\n{\n   \n   // Create a new XmlDocument object.\n   XmlDocument^ document = gcnew XmlDocument;\n   \n   // Create a new XmlNode object.\n   XmlNode^ node = document-&gt;CreateNode( XmlNodeType::Element, L&quot;&quot;, L&quot;MyXML&quot;, L&quot;Don&#39;t_Sign&quot; );\n   \n   // Append the node to the document.\n   document-&gt;AppendChild( node );\n   \n   // Create a new XmlNode object.\n   XmlNode^ subnode = document-&gt;CreateNode( XmlNodeType::Element, L&quot;&quot;, L&quot;ElementToTransform&quot;, L&quot;Sign&quot; );\n   \n   // Add some text to the node.\n   subnode-&gt;InnerText = L&quot;Here is some data to sign.&quot;;\n   \n   // Append the node to the document.\n   document-&gt;DocumentElement-&gt;AppendChild( subnode );\n   \n   // Save the XML document to the file name specified.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( FileName,gcnew UTF8Encoding( false ) );\n   document-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\nint main()\n{\n   \n   // Generate a signing key.\n   RSACryptoServiceProvider^ Key = gcnew RSACryptoServiceProvider;\n   String^ xsl = L&quot;\\r<br>    &lt;xs:transform xmlns:xs=&#39;http://www.w3.org/1999/XSL/Transform&#39; version=&#39;1.0&#39;&gt;\\r<br>        &lt;xs:template match=&#39;/&#39;&gt;\\r<br>            &lt;xs:apply-templates/&gt;\\r<br>        &lt;/xs:template&gt;\\r<br>        &lt;xs:template match=&#39;ElementToTransform&#39;&gt; \\r<br>            &lt;transformedElement/&gt;\\r<br>        &lt;/xs:template&gt;\\r<br>    &lt;/xs:transform&gt;&quot;;\n   try\n   {\n      \n      // Create an XML file to sign.\n      CreateSomeXml( L&quot;Example.xml&quot; );\n      Console::WriteLine( L&quot;New XML file created.&quot; );\n      \n      // Sign the XML that was just created and save it in a \n      // new file.\n      SignXmlFile( L&quot;Example.xml&quot;, L&quot;SignedExample.xml&quot;, Key, xsl );\n      Console::WriteLine( L&quot;XML file signed.&quot; );\n      \n      // Verify the signature of the signed XML.\n      Console::WriteLine( L&quot;Verifying signature...&quot; );\n      bool result = VerifyXmlFile( L&quot;SignedExample.xml&quot; );\n      \n      // Display the results of the signature verification to \\\n      // the console.\n      if ( result )\n      {\n         Console::WriteLine( L&quot;The XML signature is valid.&quot; );\n      }\n      else\n      {\n         Console::WriteLine( L&quot;The XML signature is not valid.&quot; );\n      }\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n   finally\n   {\n      Key-&gt;Clear();\n   }\n\n   return 1;\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_XmlDsigXsltTransform__ctor_System_Boolean_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_XmlDsigXsltTransform__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlDsigXsltTransform(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> class with comments, if specified.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public XmlDsigXsltTransform (bool includeComments);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>includeComments</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to include comments; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_XmlDsigXsltTransform_InputTypes\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_XmlDsigXsltTransform_InputTypes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InputTypes</div>        \r\n          </div>\r\n    \r\n            <p>Gets an array of types that are valid inputs to the <span class=\"xref\">stem.Security.Cryptography.Xml.XmlDsigXsltTransform.LoadInput*</span> method of the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type[] InputTypes { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </div>\r\n                  <p>An array of valid input types for the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> object; you can pass only objects of one of these types to the <span class=\"xref\">stem.Security.Cryptography.Xml.XmlDsigXsltTransform.LoadInput*</span> method of the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The valid input types to <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> are <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, <a class=\"xref\" href=\"system.xml.xmldocument\" data-linktype=\"relative-path\">XmlDocument</a>, and <a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to call the InputTypes property to retrieve the valid input types for the current transform. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.Xml.XmlDsigXsltTransform#4\">      array&lt;Type^&gt;^validInTypes = xmlTransform-&gt;InputTypes;\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.Xml.XmlDsigXsltTransform#4\">        Type[] validInTypes = xmlTransform.InputTypes;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.Xml.XmlDsigXsltTransform#4\">        Dim validInTypes() As Type = xmlTransform.InputTypes\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_XmlDsigXsltTransform_OutputTypes\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_XmlDsigXsltTransform_OutputTypes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OutputTypes</div>        \r\n          </div>\r\n    \r\n            <p>Gets an array of types that are possible outputs from the <span class=\"xref\">stem.Security.Cryptography.Xml.XmlDsigXsltTransform.GetOutput*</span> methods of the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type[] OutputTypes { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </div>\r\n                  <p>An array of valid output types for the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> object; only objects of one of these types are returned from the <span class=\"xref\">stem.Security.Cryptography.Xml.XmlDsigXsltTransform.GetOutput*</span> methods of the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> is the only valid output type for <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to call the OutputTypes property to retrieve the valid output types for the current transform. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.Xml.XmlDsigXsltTransform#5\">      array&lt;Type^&gt;^validOutTypes = xmlTransform-&gt;OutputTypes;\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.Xml.XmlDsigXsltTransform#5\">        Type[] validOutTypes = xmlTransform.OutputTypes;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.Xml.XmlDsigXsltTransform#5\">        Dim validOutTypes() As Type = xmlTransform.OutputTypes\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_XmlDsigXsltTransform_GetInnerXml\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_XmlDsigXsltTransform_GetInnerXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetInnerXml()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an XML representation of the parameters of the <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> object that are suitable to be included as subelements of an XMLDSIG <code>&lt;Transform&gt;</code> element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override System.Xml.XmlNodeList GetInnerXml ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a></div>\r\n                  </div>\r\n                  <p>A list of the XML nodes that represent the transform-specific content needed to describe the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> object in an XMLDSIG <code>&lt;Transform&gt;</code> element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_XmlDsigXsltTransform_GetOutput\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_XmlDsigXsltTransform_GetOutput_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetOutput()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the output of the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override object GetOutput ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>The output of the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The type of the returned object must be <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the GetOutput method to retrieve the output of the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> object. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.Xml.XmlDsigXsltTransform#8\">            Object^ outputObject = xmlTransform-&gt;GetOutput();\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.Xml.XmlDsigXsltTransform#8\">                object outputObject = xmlTransform.GetOutput();\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.Xml.XmlDsigXsltTransform#8\">                Dim outputObject As Object = xmlTransform.GetOutput()\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_XmlDsigXsltTransform_GetOutput_System_Type_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_XmlDsigXsltTransform_GetOutput_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetOutput(Type)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the output of the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> object of type <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override object GetOutput (Type type);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the output to return. <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> is the only valid type for this parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>The output of the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> object of type <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>type</code> parameter is not a <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The type of the returned object must be <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the GetOutput method to retrieve the output of the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> object. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.Xml.XmlDsigXsltTransform#7\">         Stream^ outputStream = (Stream^)xmlTransform-&gt;GetOutput(\n            System::IO::Stream::typeid );\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.Xml.XmlDsigXsltTransform#7\">            Stream outputStream = (Stream)\n                xmlTransform.GetOutput(typeof(System.IO.Stream));\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.Xml.XmlDsigXsltTransform#7\">            Dim outputStream As Stream\n            outputStream = CType(xmlTransform.GetOutput( _\n                GetType(System.IO.Stream)), _\n                System.IO.Stream)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_XmlDsigXsltTransform_LoadInnerXml_System_Xml_XmlNodeList_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_XmlDsigXsltTransform_LoadInnerXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LoadInnerXml(XmlNodeList)</div>        \r\n          </div>\r\n    \r\n            <p>Parses the specified <a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a> object as transform-specific content of a <code>&lt;Transform&gt;</code> element and configures the internal state of the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> object to match the <code>&lt;Transform&gt;</code> element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void LoadInnerXml (System.Xml.XmlNodeList nodeList);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>nodeList</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a> object that encapsulates an XSLT style sheet to load into the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> object. This style sheet is applied to the document loaded by the <span class=\"xref\">stem.Security.Cryptography.Xml.XmlDsigXsltTransform.LoadInput*</span> method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The <code>nodeList</code> parameter is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>nodeList</code> parameter does not contain an <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is used to process subelements of a <code>&lt;Transform&gt;</code> element.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to sign and verify an XML document using the <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> class with an envelope signature.  </p>\n<pre><code class=\"lang-vb\" name=\"Cryptography.Xml.XmlDsigXsltTransform#1\">&#39;\n&#39; This example signs an XML file using an\n&#39; envelope signature. It then verifies the \n&#39; signed XML.\n&#39;\nImports System\nImports System.Security.Cryptography\nImports System.Security.Cryptography.X509Certificates\nImports System.Security.Cryptography.Xml\nImports System.Text\nImports System.Xml\n\n\n\nModule SignVerifyEnvelope\n\n\n    Sub Main(ByVal args() As String)\n        &#39; Generate a signing key.\n        Dim Key As New RSACryptoServiceProvider()\n\n        Dim xsl As String = &quot;&lt;xs:transform xmlns:xs=&#39;http://www.w3.org/1999/XSL/Transform&#39; version=&#39;1.0&#39;&gt; &lt;xs:template match=&#39;/&#39;&gt; &lt;xs:apply-templates/&gt; &lt;/xs:template&gt; &lt;xs:template match=&#39;ElementToTransform&#39;&gt; &lt;transformedElement/&gt; &lt;/xs:template&gt; &lt;/xs:transform&gt;&quot;\n\n        Try\n            &#39; Create an XML file to sign.\n            CreateSomeXml(&quot;Example.xml&quot;)\n            Console.WriteLine(&quot;New XML file created.&quot;)\n\n            &#39; Sign the XML that was just created and save it in a \n            &#39; new file.\n            SignXmlFile(&quot;Example.xml&quot;, &quot;SignedExample.xml&quot;, Key, xsl)\n            Console.WriteLine(&quot;XML file signed.&quot;)\n\n            &#39; Verify the signature of the signed XML.\n            Console.WriteLine(&quot;Verifying signature...&quot;)\n            Dim result As Boolean = VerifyXmlFile(&quot;SignedExample.xml&quot;)\n\n            &#39; Display the results of the signature verification to \\\n            &#39; the console.\n            If result Then\n                Console.WriteLine(&quot;The XML signature is valid.&quot;)\n            Else\n                Console.WriteLine(&quot;The XML signature is not valid.&quot;)\n            End If\n        Catch e As CryptographicException\n            Console.WriteLine(e.Message)\n        Finally\n            Key.Clear()\n        End Try\n\n    End Sub\n\n\n    &#39; Sign an XML file and save the signature in a new file.\n    Sub SignXmlFile(ByVal FileName As String, ByVal SignedFileName As String, ByVal Key As RSA, ByVal XSLString As String)\n        &#39; Create a new XML document.\n        Dim doc As New XmlDocument()\n\n        &#39; Format the document to ignore white spaces.\n        doc.PreserveWhitespace = False\n\n        &#39; Load the passed XML file using it&#39;s name.\n        doc.Load(New XmlTextReader(FileName))\n\n        &#39; Create a SignedXml object.\n        Dim signedXml As New SignedXml(doc)\n\n        &#39; Add the key to the SignedXml document. \n        signedXml.SigningKey = Key\n\n        &#39; Create a reference to be signed.\n        Dim reference As New Reference()\n        reference.Uri = &quot;&quot;\n\n        &#39; Add an enveloped transformation to the reference.\n        Dim env As New XmlDsigEnvelopedSignatureTransform()\n        reference.AddTransform(env)\n\n        &#39; Create an XmlDsigXPathTransform object using \n        &#39; the helper method &#39;CreateXPathTransform&#39; defined\n        &#39; later in this sample.\n        Dim XsltTransform As XmlDsigXsltTransform = CreateXsltTransform(XSLString)\n\n        &#39; Add the transform to the reference.\n        reference.AddTransform(XsltTransform)\n\n        &#39; Add the reference to the SignedXml object.\n        signedXml.AddReference(reference)\n\n        &#39; Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n        Dim keyInfo As New KeyInfo()\n        keyInfo.AddClause(New RSAKeyValue(CType(Key, RSA)))\n        signedXml.KeyInfo = keyInfo\n\n        &#39; Compute the signature.\n        signedXml.ComputeSignature()\n\n        &#39; Get the XML representation of the signature and save\n        &#39; it to an XmlElement object.\n        Dim xmlDigitalSignature As XmlElement = signedXml.GetXml()\n\n        &#39; Append the element to the XML document.\n        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, True))\n\n        &#39; Save the signed XML document to a file specified\n        &#39; using the passed string.\n        Dim xmltw As New XmlTextWriter(SignedFileName, New UTF8Encoding(False))\n        doc.WriteTo(xmltw)\n        xmltw.Close()\n\n    End Sub\n\n    &#39; Verify the signature of an XML file and return the result.\n    Function VerifyXmlFile(ByVal Name As String) As [Boolean]\n        &#39; Create a new XML document.\n        Dim xmlDocument As New XmlDocument()\n\n        &#39; Format using white spaces.\n        xmlDocument.PreserveWhitespace = True\n\n        &#39; Load the passed XML file into the document. \n        xmlDocument.Load(Name)\n\n        &#39; Create a new SignedXml object and pass it\n        &#39; the XML document class.\n        Dim signedXml As New SignedXml(xmlDocument)\n\n        &#39; Find the &quot;Signature&quot; node and create a new\n        &#39; XmlNodeList object.\n        Dim nodeList As XmlNodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;)\n\n        &#39; Load the signature node.\n        signedXml.LoadXml(CType(nodeList(0), XmlElement))\n\n        &#39; Check the signature and return the result.\n        Return signedXml.CheckSignature()\n\n    End Function\n\n\n    &#39; Create the XML that represents the transform.\n    Function CreateXsltTransform(ByVal xsl As String) As XmlDsigXsltTransform\n        Dim doc As New XmlDocument()\n        doc.LoadXml(xsl)\n\n        Dim xform As New XmlDsigXsltTransform()\n        xform.LoadInnerXml(doc.ChildNodes)\n\n        Return xform\n\n    End Function\n\n\n    &#39; Create example data to sign.\n    Sub CreateSomeXml(ByVal FileName As String)\n        &#39; Create a new XmlDocument object.\n        Dim document As New XmlDocument()\n\n        &#39; Create a new XmlNode object.\n        Dim node As XmlNode = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;MyXML&quot;, &quot;Don&#39;t_Sign&quot;)\n\n        &#39; Append the node to the document.\n        document.AppendChild(node)\n\n        &#39; Create a new XmlNode object.\n        Dim subnode As XmlNode = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;ElementToTransform&quot;, &quot;Sign&quot;)\n\n        &#39; Add some text to the node.\n        subnode.InnerText = &quot;Here is some data to sign.&quot;\n\n        &#39; Append the node to the document.\n        document.DocumentElement.AppendChild(subnode)\n\n        &#39; Save the XML document to the file name specified.\n        Dim xmltw As New XmlTextWriter(FileName, New UTF8Encoding(False))\n        document.WriteTo(xmltw)\n        xmltw.Close()\n\n    End Sub\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"Cryptography.Xml.XmlDsigXsltTransform#1\">//\n// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n//\nusing System;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.X509Certificates;\nusing System.Security.Cryptography.Xml;\nusing System.Text;\nusing System.Xml;\n\npublic class SignVerifyEnvelope\n{\n\n    public static void Main(String[] args)\n    {\n        // Generate a signing key.\n        RSACryptoServiceProvider Key = new RSACryptoServiceProvider();\n\n        string xsl = @&quot;\n    &lt;xs:transform xmlns:xs=&#39;http://www.w3.org/1999/XSL/Transform&#39; version=&#39;1.0&#39;&gt;\n        &lt;xs:template match=&#39;/&#39;&gt;\n            &lt;xs:apply-templates/&gt;\n        &lt;/xs:template&gt;\n        &lt;xs:template match=&#39;ElementToTransform&#39;&gt; \n            &lt;transformedElement/&gt;\n        &lt;/xs:template&gt;\n    &lt;/xs:transform&gt;&quot;;\n\n        try\n        {\n            // Create an XML file to sign.\n            CreateSomeXml(&quot;Example.xml&quot;);\n            Console.WriteLine(&quot;New XML file created.&quot;);\n\n            // Sign the XML that was just created and save it in a \n            // new file.\n            SignXmlFile(&quot;Example.xml&quot;, &quot;SignedExample.xml&quot;, Key, xsl);\n            Console.WriteLine(&quot;XML file signed.&quot;);\n\n            // Verify the signature of the signed XML.\n            Console.WriteLine(&quot;Verifying signature...&quot;);\n            bool result = VerifyXmlFile(&quot;SignedExample.xml&quot;);\n\n            // Display the results of the signature verification to \\\n            // the console.\n            if (result)\n            {\n                Console.WriteLine(&quot;The XML signature is valid.&quot;);\n            }\n            else\n            {\n                Console.WriteLine(&quot;The XML signature is not valid.&quot;);\n            }\n        }\n        catch (CryptographicException e)\n        {\n            Console.WriteLine(e.Message);\n        }\n        finally\n        {\n            Key.Clear();\n        }\n\n    }\n\n    // Sign an XML file and save the signature in a new file.\n    public static void SignXmlFile(string FileName, string SignedFileName, RSA Key, string XSLString)\n    {\n        // Create a new XML document.\n        XmlDocument doc = new XmlDocument();\n\n        // Format the document to ignore white spaces.\n        doc.PreserveWhitespace = false;\n\n        // Load the passed XML file using it&#39;s name.\n        doc.Load(new XmlTextReader(FileName));\n\n        // Create a SignedXml object.\n        SignedXml signedXml = new SignedXml(doc);\n\n        // Add the key to the SignedXml document. \n        signedXml.SigningKey = Key;\n\n        // Create a reference to be signed.\n        Reference reference = new Reference();\n        reference.Uri = &quot;&quot;;\n\n        // Add an enveloped transformation to the reference.\n        XmlDsigEnvelopedSignatureTransform env = new XmlDsigEnvelopedSignatureTransform();\n        reference.AddTransform(env);\n\n        // Create an XmlDsigXPathTransform object using \n        // the helper method &#39;CreateXPathTransform&#39; defined\n        // later in this sample.\n\n        XmlDsigXsltTransform XsltTransform = CreateXsltTransform(XSLString);\n\n        // Add the transform to the reference.\n        reference.AddTransform(XsltTransform);\n\n        // Add the reference to the SignedXml object.\n        signedXml.AddReference(reference);\n\n        // Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n        KeyInfo keyInfo = new KeyInfo();\n        keyInfo.AddClause(new RSAKeyValue((RSA)Key));\n        signedXml.KeyInfo = keyInfo;\n\n        // Compute the signature.\n        signedXml.ComputeSignature();\n\n        // Get the XML representation of the signature and save\n        // it to an XmlElement object.\n        XmlElement xmlDigitalSignature = signedXml.GetXml();\n\n        // Append the element to the XML document.\n        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, true));\n\n        // Save the signed XML document to a file specified\n        // using the passed string.\n        XmlTextWriter xmltw = new XmlTextWriter(SignedFileName, new UTF8Encoding(false));\n        doc.WriteTo(xmltw);\n        xmltw.Close();\n    }\n    // Verify the signature of an XML file and return the result.\n    public static Boolean VerifyXmlFile(String Name)\n    {\n        // Create a new XML document.\n        XmlDocument xmlDocument = new XmlDocument();\n\n        // Format using white spaces.\n        xmlDocument.PreserveWhitespace = true;\n\n        // Load the passed XML file into the document. \n        xmlDocument.Load(Name);\n\n        // Create a new SignedXml object and pass it\n        // the XML document class.\n        SignedXml signedXml = new SignedXml(xmlDocument);\n\n        // Find the &quot;Signature&quot; node and create a new\n        // XmlNodeList object.\n        XmlNodeList nodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;);\n\n        // Load the signature node.\n        signedXml.LoadXml((XmlElement)nodeList[0]);\n\n        // Check the signature and return the result.\n        return signedXml.CheckSignature();\n\n    }\n\n    // Create the XML that represents the transform.\n    public static XmlDsigXsltTransform CreateXsltTransform(string xsl)\n    {\n        XmlDocument doc = new XmlDocument();\n        doc.LoadXml(xsl);\n\n        XmlDsigXsltTransform xform = new XmlDsigXsltTransform();\n        xform.LoadInnerXml(doc.ChildNodes);\n\n        return xform;\n    }\n\n    // Create example data to sign.\n    public static void CreateSomeXml(string FileName)\n    {\n        // Create a new XmlDocument object.\n        XmlDocument document = new XmlDocument();\n\n        // Create a new XmlNode object.\n        XmlNode node = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;MyXML&quot;, &quot;Don&#39;t_Sign&quot;);\n\n        // Append the node to the document.\n        document.AppendChild(node);\n\n        // Create a new XmlNode object.\n        XmlNode subnode = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;ElementToTransform&quot;, &quot;Sign&quot;);\n\n        // Add some text to the node.\n        subnode.InnerText = &quot;Here is some data to sign.&quot;;\n\n        // Append the node to the document.\n        document.DocumentElement.AppendChild(subnode);\n\n        // Save the XML document to the file name specified.\n        XmlTextWriter xmltw = new XmlTextWriter(FileName, new UTF8Encoding(false));\n        document.WriteTo(xmltw);\n        xmltw.Close();\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Cryptography.Xml.XmlDsigXsltTransform#1\">//\n// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n//\n#using &lt;System.Xml.dll&gt;\n#using &lt;System.Security.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::X509Certificates;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::Text;\nusing namespace System::Xml;\n\n// Create the XML that represents the transform.\nstatic XmlDsigXsltTransform^ CreateXsltTransform( String^ xsl )\n{\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;LoadXml( xsl );\n   XmlDsigXsltTransform^ xform = gcnew XmlDsigXsltTransform;\n   xform-&gt;LoadInnerXml( doc-&gt;ChildNodes );\n   return xform;\n}\n\n\n// Sign an XML file and save the signature in a new file.\nstatic void SignXmlFile( String^ FileName, String^ SignedFileName, RSA^ Key, String^ XSLString )\n{\n   \n   // Create a new XML document.\n   XmlDocument^ doc = gcnew XmlDocument;\n   \n   // Format the document to ignore white spaces.\n   doc-&gt;PreserveWhitespace = false;\n   \n   // Load the passed XML file using it&#39;s name.\n   doc-&gt;Load( gcnew XmlTextReader( FileName ) );\n   \n   // Create a SignedXml object.\n   SignedXml^ signedXml = gcnew SignedXml( doc );\n   \n   // Add the key to the SignedXml document. \n   signedXml-&gt;SigningKey = Key;\n   \n   // Create a reference to be signed.\n   Reference^ reference = gcnew Reference;\n   reference-&gt;Uri = L&quot;&quot;;\n   \n   // Add an enveloped transformation to the reference.\n   XmlDsigEnvelopedSignatureTransform^ env = gcnew XmlDsigEnvelopedSignatureTransform;\n   reference-&gt;AddTransform( env );\n   \n   // Create an XmlDsigXPathTransform object using \n   // the helper method &#39;CreateXPathTransform&#39; defined\n   // later in this sample.\n   XmlDsigXsltTransform^ XsltTransform = CreateXsltTransform( XSLString );\n   \n   // Add the transform to the reference.\n   reference-&gt;AddTransform( XsltTransform );\n   \n   // Add the reference to the SignedXml object.\n   signedXml-&gt;AddReference( reference );\n   \n   // Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n   KeyInfo^ keyInfo = gcnew KeyInfo;\n   keyInfo-&gt;AddClause( gcnew RSAKeyValue( dynamic_cast&lt;RSA^&gt;(Key) ) );\n   signedXml-&gt;KeyInfo = keyInfo;\n   \n   // Compute the signature.\n   signedXml-&gt;ComputeSignature();\n   \n   // Get the XML representation of the signature and save\n   // it to an XmlElement object.\n   XmlElement^ xmlDigitalSignature = signedXml-&gt;GetXml();\n   \n   // Append the element to the XML document.\n   doc-&gt;DocumentElement-&gt;AppendChild( doc-&gt;ImportNode( xmlDigitalSignature, true ) );\n   \n   // Save the signed XML document to a file specified\n   // using the passed string.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( SignedFileName,gcnew UTF8Encoding( false ) );\n   doc-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\n\n// Verify the signature of an XML file and return the result.\nstatic Boolean VerifyXmlFile( String^ Name )\n{\n   \n   // Create a new XML document.\n   XmlDocument^ xmlDocument = gcnew XmlDocument;\n   \n   // Format using white spaces.\n   xmlDocument-&gt;PreserveWhitespace = true;\n   \n   // Load the passed XML file into the document. \n   xmlDocument-&gt;Load( Name );\n   \n   // Create a new SignedXml object and pass it\n   // the XML document class.\n   SignedXml^ signedXml = gcnew SignedXml( xmlDocument );\n   \n   // Find the &quot;Signature&quot; node and create a new\n   // XmlNodeList object.\n   XmlNodeList^ nodeList = xmlDocument-&gt;GetElementsByTagName( L&quot;Signature&quot; );\n   \n   // Load the signature node.\n   signedXml-&gt;LoadXml( dynamic_cast&lt;XmlElement^&gt;(nodeList-&gt;Item( 0 )) );\n   \n   // Check the signature and return the result.\n   return signedXml-&gt;CheckSignature();\n}\n\n\n// Create example data to sign.\nstatic void CreateSomeXml( String^ FileName )\n{\n   \n   // Create a new XmlDocument object.\n   XmlDocument^ document = gcnew XmlDocument;\n   \n   // Create a new XmlNode object.\n   XmlNode^ node = document-&gt;CreateNode( XmlNodeType::Element, L&quot;&quot;, L&quot;MyXML&quot;, L&quot;Don&#39;t_Sign&quot; );\n   \n   // Append the node to the document.\n   document-&gt;AppendChild( node );\n   \n   // Create a new XmlNode object.\n   XmlNode^ subnode = document-&gt;CreateNode( XmlNodeType::Element, L&quot;&quot;, L&quot;ElementToTransform&quot;, L&quot;Sign&quot; );\n   \n   // Add some text to the node.\n   subnode-&gt;InnerText = L&quot;Here is some data to sign.&quot;;\n   \n   // Append the node to the document.\n   document-&gt;DocumentElement-&gt;AppendChild( subnode );\n   \n   // Save the XML document to the file name specified.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( FileName,gcnew UTF8Encoding( false ) );\n   document-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\nint main()\n{\n   \n   // Generate a signing key.\n   RSACryptoServiceProvider^ Key = gcnew RSACryptoServiceProvider;\n   String^ xsl = L&quot;\\r<br>    &lt;xs:transform xmlns:xs=&#39;http://www.w3.org/1999/XSL/Transform&#39; version=&#39;1.0&#39;&gt;\\r<br>        &lt;xs:template match=&#39;/&#39;&gt;\\r<br>            &lt;xs:apply-templates/&gt;\\r<br>        &lt;/xs:template&gt;\\r<br>        &lt;xs:template match=&#39;ElementToTransform&#39;&gt; \\r<br>            &lt;transformedElement/&gt;\\r<br>        &lt;/xs:template&gt;\\r<br>    &lt;/xs:transform&gt;&quot;;\n   try\n   {\n      \n      // Create an XML file to sign.\n      CreateSomeXml( L&quot;Example.xml&quot; );\n      Console::WriteLine( L&quot;New XML file created.&quot; );\n      \n      // Sign the XML that was just created and save it in a \n      // new file.\n      SignXmlFile( L&quot;Example.xml&quot;, L&quot;SignedExample.xml&quot;, Key, xsl );\n      Console::WriteLine( L&quot;XML file signed.&quot; );\n      \n      // Verify the signature of the signed XML.\n      Console::WriteLine( L&quot;Verifying signature...&quot; );\n      bool result = VerifyXmlFile( L&quot;SignedExample.xml&quot; );\n      \n      // Display the results of the signature verification to \\\n      // the console.\n      if ( result )\n      {\n         Console::WriteLine( L&quot;The XML signature is valid.&quot; );\n      }\n      else\n      {\n         Console::WriteLine( L&quot;The XML signature is not valid.&quot; );\n      }\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n   finally\n   {\n      Key-&gt;Clear();\n   }\n\n   return 1;\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_XmlDsigXsltTransform_LoadInput_System_Object_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_XmlDsigXsltTransform_LoadInput_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LoadInput(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Loads the specified input into the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void LoadInput (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The input to load into the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The type of the input object must be one of the types in the <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform#System_Security_Cryptography_Xml_XmlDsigXsltTransform_InputTypes_\" data-linktype=\"relative-path\">InputTypes</a> property. The valid input types to <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> are <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, <a class=\"xref\" href=\"system.xml.xmldocument\" data-linktype=\"relative-path\">XmlDocument</a>, and <a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to call the LoadInput method using the specified <a class=\"xref\" href=\"system.xml.xmldocument\" data-linktype=\"relative-path\">XmlDocument</a> object as the input. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.Xml.XmlDsigXsltTransform#11\">         XmlNamespaceManager^ namespaceManager;\n         namespaceManager = gcnew XmlNamespaceManager( xmlDoc-&gt;NameTable );\n         XmlNodeList^ productsNodeList;\n         productsNodeList = xmlDoc-&gt;SelectNodes( L&quot;//.&quot;, namespaceManager );\n         xmlTransform-&gt;LoadInput( productsNodeList );\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.Xml.XmlDsigXsltTransform#11\">            XmlNamespaceManager namespaceManager;\n            namespaceManager = new XmlNamespaceManager(xmlDoc.NameTable);\n\n            XmlNodeList productsNodeList;\n            productsNodeList = xmlDoc.SelectNodes(&quot;//.&quot;, namespaceManager);\n\n            xmlTransform.LoadInput(productsNodeList);\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.Xml.XmlDsigXsltTransform#11\">            dim namespaceManager as New XmlNamespaceManager(xmlDoc.NameTable)\n\n            Dim productsNodeList As XmlNodeList\n            productsNodeList = xmlDoc.SelectNodes(&quot;//.&quot;, namespaceManager)\n\n            xmlTransform.LoadInput(productsNodeList)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Security.Cryptography.Xml.XmlDsigXsltTransform.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.Cryptography.Xml.XmlDsigXsltTransform.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.XmlDsigXsltTransform\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.XmlDsigXsltTransform..ctor\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.XmlDsigXsltTransform.GetInnerXml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.XmlDsigXsltTransform.GetOutput\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.XmlDsigXsltTransform.InputTypes\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.XmlDsigXsltTransform.LoadInnerXml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.XmlDsigXsltTransform.LoadInput\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.XmlDsigXsltTransform.OutputTypes\">\r\n<meta name=\"APILocation\" content=\"System.Security.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"6e055c08-9fe1-d7d9-cd40-705063716183\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the XSLT transform for a digital signature as defined by the W3C.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Security.Cryptography.Xml/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.Cryptography.Xml.XmlDsigXsltTransform\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Security.Cryptography.Xml.XmlDsigXsltTransform.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.Cryptography.Xml.XmlDsigXsltTransform.yml","open_to_public_contributors":true,"api_name":["System.Security.Cryptography.Xml.XmlDsigXsltTransform","System.Security.Cryptography.Xml.XmlDsigXsltTransform..ctor","System.Security.Cryptography.Xml.XmlDsigXsltTransform.GetInnerXml","System.Security.Cryptography.Xml.XmlDsigXsltTransform.GetOutput","System.Security.Cryptography.Xml.XmlDsigXsltTransform.InputTypes","System.Security.Cryptography.Xml.XmlDsigXsltTransform.LoadInnerXml","System.Security.Cryptography.Xml.XmlDsigXsltTransform.LoadInput","System.Security.Cryptography.Xml.XmlDsigXsltTransform.OutputTypes"],"api_location":["System.Security.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.Cryptography.Xml.XmlDsigXsltTransform","System::Security::Cryptography::Xml::XmlDsigXsltTransform","System.Security.Cryptography.Xml.XmlDsigXsltTransform.#ctor","System::Security::Cryptography::Xml::XmlDsigXsltTransform::#ctor","System.Security.Cryptography.Xml.XmlDsigXsltTransform.GetInnerXml","System::Security::Cryptography::Xml::XmlDsigXsltTransform::GetInnerXml","System.Security.Cryptography.Xml.XmlDsigXsltTransform.GetOutput","System::Security::Cryptography::Xml::XmlDsigXsltTransform::GetOutput","System.Security.Cryptography.Xml.XmlDsigXsltTransform.InputTypes","System::Security::Cryptography::Xml::XmlDsigXsltTransform::InputTypes","System.Security.Cryptography.Xml.XmlDsigXsltTransform.LoadInnerXml","System::Security::Cryptography::Xml::XmlDsigXsltTransform::LoadInnerXml","System.Security.Cryptography.Xml.XmlDsigXsltTransform.LoadInput","System::Security::Cryptography::Xml::XmlDsigXsltTransform::LoadInput","System.Security.Cryptography.Xml.XmlDsigXsltTransform.OutputTypes","System::Security::Cryptography::Xml::XmlDsigXsltTransform::OutputTypes"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"6e055c08-9fe1-d7d9-cd40-705063716183","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Security.Cryptography.Xml/XmlDsigXsltTransform.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"XmlDsigXsltTransform class | Microsoft Docs","_op_ogTitle":"XmlDsigXsltTransform class","description":"Represents the XSLT transform for a digital signature as defined by the W3C.\n","toc_asset_id":"_splitted/System.Security.Cryptography.Xml/toc.json","toc_rel":"_splitted/System.Security.Cryptography.Xml/toc.json","source_url":"","ms.assetid":"System.Security.Cryptography.Xml.XmlDsigXsltTransform","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.cryptography.xml.xmldsigxslttransform","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.cryptography.xml.xmldsigxslttransform","fileRelativePath":"System.Security.Cryptography.Xml.XmlDsigXsltTransform.html"},"themesRelativePathToOutputRoot":"_themes/"}