{"content":"    \r\n    <h1 id=\"System_Xml_Linq_XStreamingElement\">\r\n      <span class=\"lang-csharp\">XStreamingElement</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents elements in an XML tree that supports deferred streaming output.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class XStreamingElement</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">XStreamingElement</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>This class allows you to create an XML tree that supports deferred streaming output. You use this class to create an XML tree in a very similar fashion to creating an XML tree using <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>. However, there is a fundamental difference. When you use a LINQ query to specify content when creating an XML tree using <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>, the query variable is iterated at the time of construction of the XML tree, and the results of the query are added to the XML tree. In contrast, when you create an XML tree using XStreamingElement, a reference to the query variable is stored in the XML tree without being iterated. Queries are iterated only upon serialization. This allows you to create larger XML trees while maintaining a smaller memory footprint.  </p>\n<p> If you are streaming from an input source, such as a text file, then you can read a very large text file, and generate a very large XML document while maintaining a small memory footprint.  </p>\n<p> Another scenario is that you have a large XML tree that has been loaded into memory, and you want to create a transformed version of the document. If you create a new document using <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>, then you will have two large XML trees in memory upon completion of the transformation. However, if you create the new XML tree using XStreamingElement, then your working set will be effectively cut in half.  </p>\n<p> Note that when debugging a program that uses XStreamingElement, displaying the value of an object causes its <a class=\"xref\" href=\"system.xml.linq.xstreamingelement#System_Xml_Linq_XStreamingElement_ToString_\" data-linktype=\"relative-path\">ToString</a> method to be called. This causes the XML to be serialized. If the semantics of your streaming element query are such that the streaming element can only be streamed once, this may cause undesirable behavior in your debugging experience.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XStreamingElement__ctor_System_Xml_Linq_XName_\" data-linktype=\"self-bookmark\">XStreamingElement(XName)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> class from the specified <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XStreamingElement__ctor_System_Xml_Linq_XName_System_Object_\" data-linktype=\"self-bookmark\">XStreamingElement(XName,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a> class with the specified name and content.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XStreamingElement__ctor_System_Xml_Linq_XName_System_Object___\" data-linktype=\"self-bookmark\">XStreamingElement(XName,Object[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a> class with the specified name and content.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XStreamingElement_Name\" data-linktype=\"self-bookmark\">Name</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the name of this streaming element.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XStreamingElement_Add_System_Object_\" data-linktype=\"self-bookmark\">Add(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds the specified content as children to this <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XStreamingElement_Add_System_Object___\" data-linktype=\"self-bookmark\">Add(Object[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds the specified content as children to this <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XStreamingElement_Save_System_IO_Stream_\" data-linktype=\"self-bookmark\">Save(Stream)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Outputs this <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a> to the specified <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XStreamingElement_Save_System_IO_TextWriter_\" data-linktype=\"self-bookmark\">Save(TextWriter)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Serialize this streaming element to a <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XStreamingElement_Save_System_String_\" data-linktype=\"self-bookmark\">Save(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Serialize this streaming element to a file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XStreamingElement_Save_System_Xml_XmlWriter_\" data-linktype=\"self-bookmark\">Save(XmlWriter)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Serialize this streaming element to an <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XStreamingElement_Save_System_IO_Stream_System_Xml_Linq_SaveOptions_\" data-linktype=\"self-bookmark\">Save(Stream,SaveOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Outputs this <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a> to the specified <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, optionally specifying formatting behavior.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XStreamingElement_Save_System_IO_TextWriter_System_Xml_Linq_SaveOptions_\" data-linktype=\"self-bookmark\">Save(TextWriter,SaveOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Serialize this streaming element to a <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a>, optionally disabling formatting.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XStreamingElement_Save_System_String_System_Xml_Linq_SaveOptions_\" data-linktype=\"self-bookmark\">Save(String,SaveOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Serialize this streaming element to a file, optionally disabling formatting.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XStreamingElement_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the formatted (indented) XML for this streaming element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XStreamingElement_ToString_System_Xml_Linq_SaveOptions_\" data-linktype=\"self-bookmark\">ToString(SaveOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the XML for this streaming element, optionally disabling formatting.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XStreamingElement_WriteTo_System_Xml_XmlWriter_\" data-linktype=\"self-bookmark\">WriteTo(XmlWriter)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes this streaming element to an <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XStreamingElement__ctor_System_Xml_Linq_XName_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XStreamingElement__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XStreamingElement(XName)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> class from the specified <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public XStreamingElement (System.Xml.Linq.XName name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> that contains the name of the element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor creates a streaming element with no content and no attributes.  </p>\n<p> There is an implicit conversion from string to <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>. Typical use of this constructor is to specify a string as the parameter instead of creating a new <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-c#\">\n                XElement srcTree = new XElement(&quot;Root&quot;,  \n                       new XElement(&quot;Child&quot;, 1),  \n                       new XElement(&quot;Child&quot;, 2),  \n                       new XElement(&quot;Child&quot;, 3),  \n                       new XElement(&quot;Child&quot;, 4),  \n                       new XElement(&quot;Child&quot;, 5)  \n                   );  \n\nXStreamingElement dstTree = new XStreamingElement(&quot;NewRoot&quot;,  \n                        from el in srcTree.Elements()  \n                        where (int)el &gt;= 3  \n                        select new XElement(&quot;DifferentChild&quot;, (int)el)  \n                    );  \n\nConsole.WriteLine(dstTree);  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim srcTree As XElement = _  \n        &lt;Root&gt;  \n            &lt;Child&gt;1&lt;/Child&gt;  \n            &lt;Child&gt;2&lt;/Child&gt;  \n            &lt;Child&gt;3&lt;/Child&gt;  \n            &lt;Child&gt;4&lt;/Child&gt;  \n            &lt;Child&gt;5&lt;/Child&gt;  \n        &lt;/Root&gt;  \n\nDim dstTree As XStreamingElement = New XStreamingElement(&quot;NewRoot&quot;, _  \n                From el In srcTree.Elements _  \n                Where el.Value &gt;= 3 _  \n                Select &lt;DifferentChild&gt;&lt;%= el.Value %&gt;&lt;/DifferentChild&gt; _  \n            )  \n\nConsole.WriteLine(dstTree)  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\n                &lt;NewRoot&gt;  \n  &lt;DifferentChild&gt;3&lt;/DifferentChild&gt;  \n  &lt;DifferentChild&gt;4&lt;/DifferentChild&gt;  \n  &lt;DifferentChild&gt;5&lt;/DifferentChild&gt;  \n&lt;/NewRoot&gt;  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XStreamingElement__ctor_System_Xml_Linq_XName_System_Object_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XStreamingElement__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XStreamingElement(XName,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a> class with the specified name and content.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public XStreamingElement (System.Xml.Linq.XName name, object content);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> that contains the element name.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>content</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The contents of the element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor creates a streaming element with the specified content and attributes.  </p>\n<p> There is an implicit conversion from string to <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>. Typical use of this constructor is to specify a string as the parameter instead of creating a new <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>.  </p>\n<p> Queries are not iterated until the <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a> is serialized. This is in contrast to using queries for content for an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>, where queries are iterated at the time of construction of the new <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>.  </p>\n<p> For details about the valid content that can be passed to this constructor, see <a href=\"../Topic/Valid%20Content%20of%20XElement%20and%20XDocument%20Objects1.md\" data-linktype=\"relative-path\">Valid Content of XElement and XDocument Objects</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses the following XML file, named Source.xml:  </p>\n<pre><code class=\"lang-xml\">\n                &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;   \n&lt;Root&gt;  \n  &lt;Child Key=&quot;01&quot;&gt;  \n    &lt;GrandChild&gt;aaa&lt;/GrandChild&gt;  \n  &lt;/Child&gt;  \n  &lt;Child Key=&quot;02&quot;&gt;  \n    &lt;GrandChild&gt;bbb&lt;/GrandChild&gt;  \n  &lt;/Child&gt;  \n  &lt;Child Key=&quot;03&quot;&gt;  \n    &lt;GrandChild&gt;ccc&lt;/GrandChild&gt;  \n  &lt;/Child&gt;  \n&lt;/Root&gt;  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XStreamingElement__ctor_System_Xml_Linq_XName_System_Object___\">\r\n    \r\n            <a id=\"System_Xml_Linq_XStreamingElement__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XStreamingElement(XName,Object[])</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a> class with the specified name and content.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public XStreamingElement (System.Xml.Linq.XName name, object[] content);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> that contains the element name.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>content</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The contents of the element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor creates a streaming element with the specified content and attributes.  </p>\n<p> There is an implicit conversion from string to <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>. Typical use of this constructor is to specify a string as the parameter instead of creating a new <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>.  </p>\n<p> Queries are not iterated until the <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a> is serialized. This is in contrast to using queries for content for an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>, where queries are iterated at the time of construction of the new <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>.  </p>\n<p> For details about the valid content that can be passed to this function, see <a href=\"../Topic/Valid%20Content%20of%20XElement%20and%20XDocument%20Objects1.md\" data-linktype=\"relative-path\">Valid Content of XElement and XDocument Objects</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses the following XML file, named Source.xml:  </p>\n<pre><code class=\"lang-xml\">\n                &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;   \n&lt;Root&gt;  \n  &lt;Child Key=&quot;01&quot;&gt;  \n    &lt;GrandChild&gt;aaa&lt;/GrandChild&gt;  \n  &lt;/Child&gt;  \n  &lt;Child Key=&quot;02&quot;&gt;  \n    &lt;GrandChild&gt;bbb&lt;/GrandChild&gt;  \n  &lt;/Child&gt;  \n  &lt;Child Key=&quot;03&quot;&gt;  \n    &lt;GrandChild&gt;ccc&lt;/GrandChild&gt;  \n  &lt;/Child&gt;  \n&lt;/Root&gt;  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XStreamingElement_Name\">\r\n    \r\n            <a id=\"System_Xml_Linq_XStreamingElement_Name_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Name</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the name of this streaming element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.Linq.XName Name { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> that contains the name of this streaming element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>This example creates a new streaming element, and then prints the name of the element.  </p>\n<pre><code class=\"lang-c#\">\n                XElement srcTree = new XElement(&quot;Root&quot;,  \n                       new XElement(&quot;Child&quot;, 1),  \n                       new XElement(&quot;Child&quot;, 2),  \n                       new XElement(&quot;Child&quot;, 3),  \n                       new XElement(&quot;Child&quot;, 4),  \n                       new XElement(&quot;Child&quot;, 5)  \n                   );  \n\nXStreamingElement dstTree = new XStreamingElement(&quot;NewRoot&quot;,  \n                        from el in srcTree.Elements()  \n                        where (int)el &gt;= 3  \n                        select new XElement(&quot;DifferentChild&quot;, (int)el)  \n                    );  \n\nConsole.WriteLine(dstTree.Name);  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim srcTree As XElement = _  \n        &lt;Root&gt;  \n            &lt;Child&gt;1&lt;/Child&gt;  \n            &lt;Child&gt;2&lt;/Child&gt;  \n            &lt;Child&gt;3&lt;/Child&gt;  \n            &lt;Child&gt;4&lt;/Child&gt;  \n            &lt;Child&gt;5&lt;/Child&gt;  \n        &lt;/Root&gt;  \n\nDim dstTree As XStreamingElement = New XStreamingElement(&quot;NewRoot&quot;, _  \n                From el In srcTree.Elements _  \n                Where el.Value &gt;= 3 _  \n                Select &lt;DifferentChild&gt;&lt;%= el.Value %&gt;&lt;/DifferentChild&gt; _  \n            )  \n\nConsole.WriteLine(dstTree.Name)  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\nNewRoot  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XStreamingElement_Add_System_Object_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XStreamingElement_Add_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Add(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Adds the specified content as children to this <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Add (object content);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>content</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Content to be added to the streaming element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor adds the specified content and attributes to the <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a>. While it is often possible to construct the <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a> in a single statement, it is sometimes more convenient to add content to the streaming element incrementally.  </p>\n<p> Queries are not iterated until the <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a> is serialized. This is in contrast to using queries for content for an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>, where queries are iterated at the time of construction of the new <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>.  </p>\n<p> For details about the valid content that can be passed to this function, see <a href=\"../Topic/Valid%20Content%20of%20XElement%20and%20XDocument%20Objects1.md\" data-linktype=\"relative-path\">Valid Content of XElement and XDocument Objects</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a new <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a>. It then adds two queries to the streaming element. The queries are not iterated until the streaming element is serialized.  </p>\n<pre><code class=\"lang-c#\">\n                XElement srcTree = new XElement(&quot;Root&quot;,  \n                       new XElement(&quot;Child&quot;, 1),  \n                       new XElement(&quot;Child&quot;, 2),  \n                       new XElement(&quot;Child&quot;, 3),  \n                       new XElement(&quot;Child&quot;, 4),  \n                       new XElement(&quot;Child&quot;, 5)  \n                   );  \n\nXStreamingElement dstTree = new XStreamingElement(&quot;NewRoot&quot;);  \n\ndstTree.Add(  \n    from el in srcTree.Elements()  \n    where (int)el &lt;= 1  \n    select new XElement(&quot;Child&quot;, (int)el)  \n);  \n\ndstTree.Add(  \n    from el in srcTree.Elements()  \n    where (int)el &gt;= 3  \n    select new XElement(&quot;DifferentChild&quot;, (int)el)  \n);  \n\nConsole.WriteLine(dstTree);  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim srcTree As XElement = _  \n    &lt;Root&gt;  \n        &lt;Child&gt;1&lt;/Child&gt;  \n        &lt;Child&gt;2&lt;/Child&gt;  \n        &lt;Child&gt;3&lt;/Child&gt;  \n        &lt;Child&gt;4&lt;/Child&gt;  \n        &lt;Child&gt;5&lt;/Child&gt;  \n    &lt;/Root&gt;  \n\nDim dstTree As XStreamingElement = New XStreamingElement(&quot;NewRoot&quot;)  \n\ndstTree.Add( _  \n    From el In srcTree.Elements() _  \n    Where el.Value &lt;= 1 _  \n    Select &lt;Child&gt;&lt;%= el.Value %&gt;&lt;/Child&gt; _  \n)  \n\ndstTree.Add( _  \n    From el In srcTree.Elements() _  \n    Where el.Value &gt;= 3 _  \n    Select &lt;DifferentChild&gt;&lt;%= el.Value %&gt;&lt;/DifferentChild&gt; _  \n)  \n\nConsole.WriteLine(dstTree)  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n                &lt;NewRoot&gt;  \n  &lt;Child&gt;1&lt;/Child&gt;  \n  &lt;DifferentChild&gt;3&lt;/DifferentChild&gt;  \n  &lt;DifferentChild&gt;4&lt;/DifferentChild&gt;  \n  &lt;DifferentChild&gt;5&lt;/DifferentChild&gt;  \n&lt;/NewRoot&gt;  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XStreamingElement_Add_System_Object___\">\r\n    \r\n            <a id=\"System_Xml_Linq_XStreamingElement_Add_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Add(Object[])</div>        \r\n          </div>\r\n    \r\n            <p>Adds the specified content as children to this <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Add (object[] content);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>content</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Content to be added to the streaming element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor adds the specified content and attributes to the <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a>. While it is often possible to construct the <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a> in a single statement, it is sometimes more convenient to add content to the streaming element incrementally.  </p>\n<p> Queries are not iterated until the <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a> is serialized. This is in contrast to using queries for content for an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>, where queries are iterated at the time of construction of the new <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>.  </p>\n<p> For details about the valid content that can be passed to this function, see <a href=\"../Topic/Valid%20Content%20of%20XElement%20and%20XDocument%20Objects1.md\" data-linktype=\"relative-path\">Valid Content of XElement and XDocument Objects</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a new <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a>. It then adds two queries to the streaming element. The queries are not iterated until the streaming element is serialized.  </p>\n<pre><code class=\"lang-c#\">\n                XElement srcTree = new XElement(&quot;Root&quot;,  \n                       new XElement(&quot;Child&quot;, 1),  \n                       new XElement(&quot;Child&quot;, 2),  \n                       new XElement(&quot;Child&quot;, 3),  \n                       new XElement(&quot;Child&quot;, 4),  \n                       new XElement(&quot;Child&quot;, 5)  \n                   );  \n\nXStreamingElement dstTree = new XStreamingElement(&quot;NewRoot&quot;);  \n\ndstTree.Add(  \n    from el in srcTree.Elements()  \n    where (int)el &lt;= 1  \n    select new XElement(&quot;Child&quot;, (int)el)  \n);  \n\ndstTree.Add(  \n    from el in srcTree.Elements()  \n    where (int)el &gt;= 3  \n    select new XElement(&quot;DifferentChild&quot;, (int)el)  \n);  \n\nConsole.WriteLine(dstTree);  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim srcTree As XElement = _  \n    &lt;Root&gt;  \n        &lt;Child&gt;1&lt;/Child&gt;  \n        &lt;Child&gt;2&lt;/Child&gt;  \n        &lt;Child&gt;3&lt;/Child&gt;  \n        &lt;Child&gt;4&lt;/Child&gt;  \n        &lt;Child&gt;5&lt;/Child&gt;  \n    &lt;/Root&gt;  \n\nDim dstTree As XStreamingElement = New XStreamingElement(&quot;NewRoot&quot;)  \n\ndstTree.Add( _  \n    From el In srcTree.Elements() _  \n    Where el.Value &lt;= 1 _  \n    Select &lt;Child&gt;&lt;%= el.Value %&gt;&lt;/Child&gt; _  \n)  \n\ndstTree.Add( _  \n    From el In srcTree.Elements() _  \n    Where el.Value &gt;= 3 _  \n    Select &lt;DifferentChild&gt;&lt;%= el.Value %&gt;&lt;/DifferentChild&gt; _  \n)  \n\nConsole.WriteLine(dstTree)  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n                &lt;NewRoot&gt;  \n  &lt;Child&gt;1&lt;/Child&gt;  \n  &lt;DifferentChild&gt;3&lt;/DifferentChild&gt;  \n  &lt;DifferentChild&gt;4&lt;/DifferentChild&gt;  \n  &lt;DifferentChild&gt;5&lt;/DifferentChild&gt;  \n&lt;/NewRoot&gt;  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XStreamingElement_Save_System_IO_Stream_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XStreamingElement_Save_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Save(Stream)</div>        \r\n          </div>\r\n    \r\n            <p>Outputs this <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a> to the specified <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Save (System.IO.Stream stream);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>stream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The stream to output this <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The serialized XML will be indented. All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented. The behavior of this method is that insignificant white space will not be preserved.  </p>\n<p> If you want to control white space, use the overload of <a class=\"xref\" href=\"system.xml.linq.xstreamingelement#System_Xml_Linq_XStreamingElement_Save_\" data-linktype=\"relative-path\">Save</a> that takes <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> as a parameter. Use the <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> option to save unindented XML. This will cause the writer to write all white spaces exactly as represented in the XML tree.  </p>\n<p> Use <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> option if you want to remove duplicate namespace declarations.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XStreamingElement_Save_System_IO_TextWriter_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XStreamingElement_Save_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Save(TextWriter)</div>        \r\n          </div>\r\n    \r\n            <p>Serialize this streaming element to a <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Save (System.IO.TextWriter textWriter);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>textWriter</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> that the <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a> will be written to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The serialized XML will be indented. All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented. The behavior of this method is that insignificant white space nodes in the XML tree will not be preserved.  </p>\n<p> If you want to control white space, use one of the overloads of <a class=\"xref\" href=\"system.xml.linq.xstreamingelement#System_Xml_Linq_XStreamingElement_Save_\" data-linktype=\"relative-path\">Save</a> that take <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> as a parameter. For more information, see <a href=\"../Topic/Preserving%20White%20Space%20while%20Loading%20or%20Parsing%20XML3.md\" data-linktype=\"relative-path\">Preserving White Space while Loading or Parsing XML</a> and <a href=\"../Topic/Preserving%20White%20Space%20While%20Serializing1.md\" data-linktype=\"relative-path\">Preserving White Space While Serializing</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a source XML tree, then instantiates an <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a> using a query on the source XML tree. It then writes the streaming element to a <a class=\"xref\" href=\"system.io.stringwriter\" data-linktype=\"relative-path\">StringWriter</a>.  </p>\n<pre><code class=\"lang-c#\">\n                XElement srcTree = new XElement(&quot;Root&quot;,  \n                       new XElement(&quot;Child&quot;, 1),  \n                       new XElement(&quot;Child&quot;, 2),  \n                       new XElement(&quot;Child&quot;, 3),  \n                       new XElement(&quot;Child&quot;, 4),  \n                       new XElement(&quot;Child&quot;, 5)  \n                   );  \n\nXStreamingElement dstTree = new XStreamingElement(&quot;NewRoot&quot;,  \n                        from el in srcTree.Elements()  \n                        where (int)el &gt;= 3  \n                        select new XElement(&quot;DifferentChild&quot;, (int)el)  \n                    );  \n\nStringBuilder sb = new StringBuilder();  \ndstTree.Save(new StringWriter(sb));  \nConsole.WriteLine(sb.ToString());  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim srcTree As XElement = _  \n    &lt;Root&gt;  \n        &lt;Child&gt;1&lt;/Child&gt;  \n        &lt;Child&gt;2&lt;/Child&gt;  \n        &lt;Child&gt;3&lt;/Child&gt;  \n        &lt;Child&gt;4&lt;/Child&gt;  \n        &lt;Child&gt;5&lt;/Child&gt;  \n    &lt;/Root&gt;  \n\nDim dstTree As XStreamingElement = New XStreamingElement(&quot;NewRoot&quot;, _  \n                        From el In srcTree.Elements() _  \n                        Where el.Value &gt;= 3 _  \n                        Select &lt;DifferentChild&gt;&lt;%= el.Value %&gt;&lt;/DifferentChild&gt; _  \n                    )  \n\nDim sb As StringBuilder = New StringBuilder()  \ndstTree.Save(New StringWriter(sb))  \nConsole.WriteLine(sb.ToString())  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n                &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-16&quot;?&gt;  \n&lt;NewRoot&gt;  \n  &lt;DifferentChild&gt;3&lt;/DifferentChild&gt;  \n  &lt;DifferentChild&gt;4&lt;/DifferentChild&gt;  \n  &lt;DifferentChild&gt;5&lt;/DifferentChild&gt;  \n&lt;/NewRoot&gt;  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XStreamingElement_Save_System_String_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XStreamingElement_Save_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Save(String)</div>        \r\n          </div>\r\n    \r\n            <p>Serialize this streaming element to a file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Save (string fileName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains the name of the file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The serialized XML will be indented. All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented. The behavior of this method is that insignificant white space nodes in the XML tree will not be preserved.  </p>\n<p> If you want to control white space, use one of the overloads of <a class=\"xref\" href=\"system.xml.linq.xstreamingelement#System_Xml_Linq_XStreamingElement_Save_\" data-linktype=\"relative-path\">Save</a> that take <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> as a parameter. For more information, see <a href=\"../Topic/Preserving%20White%20Space%20while%20Loading%20or%20Parsing%20XML3.md\" data-linktype=\"relative-path\">Preserving White Space while Loading or Parsing XML</a> and <a href=\"../Topic/Preserving%20White%20Space%20While%20Serializing1.md\" data-linktype=\"relative-path\">Preserving White Space While Serializing</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a streaming XML tree. It then serializes the streaming XML tree to a file.  </p>\n<pre><code class=\"lang-c#\">\n                XElement srcTree = new XElement(&quot;Root&quot;,  \n                       new XElement(&quot;Child&quot;, 1),  \n                       new XElement(&quot;Child&quot;, 2),  \n                       new XElement(&quot;Child&quot;, 3),  \n                       new XElement(&quot;Child&quot;, 4),  \n                       new XElement(&quot;Child&quot;, 5)  \n                   );  \n\nXStreamingElement dstTree = new XStreamingElement(&quot;NewRoot&quot;,  \n                        from el in srcTree.Elements()  \n                        where (int)el &gt;= 3  \n                        select new XElement(&quot;DifferentChild&quot;, (int)el)  \n                    );  \n\ndstTree.Save(&quot;Test.xml&quot;);  \nConsole.WriteLine(File.ReadAllText(&quot;Test.xml&quot;));  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim srcTree As XElement = _  \n    &lt;Root&gt;  \n        &lt;Child&gt;1&lt;/Child&gt;  \n        &lt;Child&gt;2&lt;/Child&gt;  \n        &lt;Child&gt;3&lt;/Child&gt;  \n        &lt;Child&gt;4&lt;/Child&gt;  \n        &lt;Child&gt;5&lt;/Child&gt;  \n    &lt;/Root&gt;  \n\nDim dstTree As XStreamingElement = New XStreamingElement(&quot;NewRoot&quot;, _  \n                        From el In srcTree.Elements() _  \n                        Where el.Value &gt;= 3 _  \n                        Select &lt;DifferentChild&gt;&lt;%= el.Value %&gt;&lt;/DifferentChild&gt; _  \n                    )  \n\ndstTree.Save(&quot;Test.xml&quot;)  \nConsole.WriteLine(File.ReadAllText(&quot;Test.xml&quot;))  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n                &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;  \n&lt;NewRoot&gt;  \n  &lt;DifferentChild&gt;3&lt;/DifferentChild&gt;  \n  &lt;DifferentChild&gt;4&lt;/DifferentChild&gt;  \n  &lt;DifferentChild&gt;5&lt;/DifferentChild&gt;  \n&lt;/NewRoot&gt;  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XStreamingElement_Save_System_Xml_XmlWriter_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XStreamingElement_Save_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Save(XmlWriter)</div>        \r\n          </div>\r\n    \r\n            <p>Serialize this streaming element to an <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Save (System.Xml.XmlWriter writer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>writer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> that the <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> will be written to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a> and writes it to an <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a>.  </p>\n<pre><code class=\"lang-c#\">\n                XElement srcTree = new XElement(&quot;Root&quot;,  \n                       new XElement(&quot;Child&quot;, 1),  \n                       new XElement(&quot;Child&quot;, 2),  \n                       new XElement(&quot;Child&quot;, 3),  \n                       new XElement(&quot;Child&quot;, 4),  \n                       new XElement(&quot;Child&quot;, 5)  \n                   );  \n\nStringBuilder sb = new StringBuilder();  \nXmlWriterSettings xws = new XmlWriterSettings();  \nxws.OmitXmlDeclaration = true;  \nusing (XmlWriter xw = XmlWriter.Create(sb, xws))  \n{  \n    XStreamingElement dstTree = new XStreamingElement(&quot;NewRoot&quot;,  \n                            from el in srcTree.Elements()  \n                            where (int)el == 5  \n                            select new XElement(&quot;DifferentChild&quot;, (int)el)  \n                        );  \n\n    dstTree.Save(xw);  \n}  \nConsole.WriteLine(sb.ToString());  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim srcTree As XElement = _  \n    &lt;Root&gt;  \n        &lt;Child&gt;1&lt;/Child&gt;  \n        &lt;Child&gt;2&lt;/Child&gt;  \n        &lt;Child&gt;3&lt;/Child&gt;  \n        &lt;Child&gt;4&lt;/Child&gt;  \n        &lt;Child&gt;5&lt;/Child&gt;  \n    &lt;/Root&gt;  \n\nDim sb As StringBuilder = New StringBuilder()  \nDim xws As XmlWriterSettings = New XmlWriterSettings()  \nxws.OmitXmlDeclaration = True  \nUsing xw As XmlWriter = XmlWriter.Create(sb, xws)  \n    Dim dstTree As XStreamingElement = New XStreamingElement(&quot;NewRoot&quot;, _  \n                            From el In srcTree.Elements() _  \n                            Where el.Value = 5 _  \n                            Select &lt;DifferentChild&gt;&lt;%= el.Value %&gt;&lt;/DifferentChild&gt; _  \n                        )  \n    dstTree.Save(xw)  \nEnd Using  \nConsole.WriteLine(sb.ToString())  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n&lt;NewRoot&gt;&lt;DifferentChild&gt;5&lt;/DifferentChild&gt;&lt;/NewRoot&gt;  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XStreamingElement_Save_System_IO_Stream_System_Xml_Linq_SaveOptions_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XStreamingElement_Save_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Save(Stream,SaveOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Outputs this <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a> to the specified <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, optionally specifying formatting behavior.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Save (System.IO.Stream stream, System.Xml.Linq.SaveOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>stream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The stream to output this <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> object that specifies formatting behavior.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default the <code>options</code> are set to <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a>. This option will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.  </p>\n<p> If you want to save unindented XML, specify the <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> flag for <code>options</code>. This will cause the writer to write all white spaces exactly as represented in the XML tree.  </p>\n<p> Use <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> option if you want to remove duplicate namespace declarations.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XStreamingElement_Save_System_IO_TextWriter_System_Xml_Linq_SaveOptions_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XStreamingElement_Save_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Save(TextWriter,SaveOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Serialize this streaming element to a <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a>, optionally disabling formatting.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Save (System.IO.TextWriter textWriter, System.Xml.Linq.SaveOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>textWriter</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> to output the XML to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> that specifies formatting behavior.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If you want to save unindented XML, specify the <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> flag for <code>options</code>. This will cause the writer to write all white space exactly as represented in the XML tree.  </p>\n<p> If you want to save indented XML, do not specify the <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> flag for <code>options</code>. This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented. This is the default behavior, and the behavior of the overloads of the <a class=\"xref\" href=\"system.xml.linq.xelement#System_Xml_Linq_XElement_Save_\" data-linktype=\"relative-path\">Save</a> methods that do not take <code>options</code> as a parameter.  </p>\n<p> For more information, see <a href=\"../Topic/Preserving%20White%20Space%20while%20Loading%20or%20Parsing%20XML3.md\" data-linktype=\"relative-path\">Preserving White Space while Loading or Parsing XML</a> and <a href=\"../Topic/Preserving%20White%20Space%20While%20Serializing1.md\" data-linktype=\"relative-path\">Preserving White Space While Serializing</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows two uses of this method. The first use preserves white space. The second one serializes the <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a> with formatting.  </p>\n<pre><code class=\"lang-c#\">\n                XElement srcTree = new XElement(&quot;Root&quot;,  \n                       new XElement(&quot;Child&quot;, 1),  \n                       new XElement(&quot;Child&quot;, 2),  \n                       new XElement(&quot;Child&quot;, 3),  \n                       new XElement(&quot;Child&quot;, 4),  \n                       new XElement(&quot;Child&quot;, 5)  \n                   );  \n\nXStreamingElement dstTree = new XStreamingElement(&quot;NewRoot&quot;,  \n                        from el in srcTree.Elements()  \n                        where (int)el == 3  \n                        select new XElement(&quot;DifferentChild&quot;, (int)el)  \n                    );  \n\nStringBuilder sb = new StringBuilder();  \ndstTree.Save(new StringWriter(sb), SaveOptions.DisableFormatting);  \nConsole.WriteLine(sb.ToString());  \nConsole.WriteLine(&quot;------&quot;);  \nsb = new StringBuilder();  \ndstTree.Save(new StringWriter(sb), SaveOptions.None);  \nConsole.WriteLine(sb.ToString());  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim srcTree As XElement = _  \n    &lt;Root&gt;  \n        &lt;Child&gt;1&lt;/Child&gt;  \n        &lt;Child&gt;2&lt;/Child&gt;  \n        &lt;Child&gt;3&lt;/Child&gt;  \n        &lt;Child&gt;4&lt;/Child&gt;  \n        &lt;Child&gt;5&lt;/Child&gt;  \n    &lt;/Root&gt;  \n\nDim dstTree As XStreamingElement = New XStreamingElement(&quot;NewRoot&quot;, _  \n                        From el In srcTree.Elements() _  \n                        Where el.Value = 3 _  \n                        Select &lt;DifferentChild&gt;&lt;%= el.Value %&gt;&lt;/DifferentChild&gt; _  \n                    )  \n\nDim sb As StringBuilder = New StringBuilder()  \ndstTree.Save(New StringWriter(sb), SaveOptions.DisableFormatting)  \nConsole.WriteLine(sb.ToString())  \nConsole.WriteLine(&quot;------&quot;)  \nsb = New StringBuilder()  \ndstTree.Save(New StringWriter(sb), SaveOptions.None)  \nConsole.WriteLine(sb.ToString())  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n                &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-16&quot;?&gt;&lt;NewRoot&gt;&lt;DifferentChild&gt;3&lt;/DifferentChild&gt;&lt;/NewRoot&gt;  \n------  \n&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-16&quot;?&gt;  \n&lt;NewRoot&gt;  \n  &lt;DifferentChild&gt;3&lt;/DifferentChild&gt;  \n&lt;/NewRoot&gt;  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XStreamingElement_Save_System_String_System_Xml_Linq_SaveOptions_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XStreamingElement_Save_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Save(String,SaveOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Serialize this streaming element to a file, optionally disabling formatting.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Save (string fileName, System.Xml.Linq.SaveOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains the name of the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> object that specifies formatting behavior.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If you want to save unindented XML, specify the <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> flag for <code>options</code>. This will cause the writer to write all white space exactly as represented in the XML tree.  </p>\n<p> If you want to save indented XML, do not specify the <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> flag for <code>options</code>. This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented. This is the default behavior, and the behavior of the overloads of the <a class=\"xref\" href=\"system.xml.linq.xelement#System_Xml_Linq_XElement_Save_\" data-linktype=\"relative-path\">Save</a> methods that do not take <code>options</code> as a parameter.  </p>\n<p> For more information, see <a href=\"../Topic/Preserving%20White%20Space%20while%20Loading%20or%20Parsing%20XML3.md\" data-linktype=\"relative-path\">Preserving White Space while Loading or Parsing XML</a> and <a href=\"../Topic/Preserving%20White%20Space%20While%20Serializing1.md\" data-linktype=\"relative-path\">Preserving White Space While Serializing</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows two uses of this method. The first use preserves white space. The second one serializes the <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a> with formatting.  </p>\n<pre><code class=\"lang-c#\">\n                XElement srcTree = new XElement(&quot;Root&quot;,  \n                       new XElement(&quot;Child&quot;, 1),  \n                       new XElement(&quot;Child&quot;, 2),  \n                       new XElement(&quot;Child&quot;, 3),  \n                       new XElement(&quot;Child&quot;, 4),  \n                       new XElement(&quot;Child&quot;, 5)  \n                   );  \n\nXStreamingElement dstTree = new XStreamingElement(&quot;NewRoot&quot;,  \n                        from el in srcTree.Elements()  \n                        where (int)el == 3  \n                        select new XElement(&quot;DifferentChild&quot;, (int)el)  \n                    );  \n\ndstTree.Save(&quot;Test1.xml&quot;, SaveOptions.DisableFormatting);  \ndstTree.Save(&quot;Test2.xml&quot;, SaveOptions.None);  \nConsole.WriteLine(File.ReadAllText(&quot;Test1.xml&quot;));  \nConsole.WriteLine(&quot;------&quot;);  \nConsole.WriteLine(File.ReadAllText(&quot;Test2.xml&quot;));  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim srcTree As XElement = _  \n    &lt;Root&gt;  \n        &lt;Child&gt;1&lt;/Child&gt;  \n        &lt;Child&gt;2&lt;/Child&gt;  \n        &lt;Child&gt;3&lt;/Child&gt;  \n        &lt;Child&gt;4&lt;/Child&gt;  \n        &lt;Child&gt;5&lt;/Child&gt;  \n    &lt;/Root&gt;  \n\nDim dstTree As XStreamingElement = New XStreamingElement(&quot;NewRoot&quot;, _  \n                        From el In srcTree.Elements() _  \n                        Where el.Value = 3 _  \n                        Select &lt;DifferentChild&gt;&lt;%= el.Value %&gt;&lt;/DifferentChild&gt; _  \n                    )  \n\ndstTree.Save(&quot;Test1.xml&quot;, SaveOptions.DisableFormatting)  \ndstTree.Save(&quot;Test2.xml&quot;, SaveOptions.None)  \nConsole.WriteLine(File.ReadAllText(&quot;Test1.xml&quot;))  \nConsole.WriteLine(&quot;------&quot;)  \nConsole.WriteLine(File.ReadAllText(&quot;Test2.xml&quot;))  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\n                &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;NewRoot&gt;&lt;DifferentChild&gt;3&lt;/DifferentChild&gt;&lt;/NewRoot&gt;  \n------  \n&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;  \n&lt;NewRoot&gt;  \n  &lt;DifferentChild&gt;3&lt;/DifferentChild&gt;  \n&lt;/NewRoot&gt;  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XStreamingElement_ToString\">\r\n    \r\n            <a id=\"System_Xml_Linq_XStreamingElement_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the formatted (indented) XML for this streaming element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> containing the indented XML.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Note that when debugging a program that uses <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a>, displaying the value of an object causes its <a class=\"xref\" href=\"system.xml.linq.xstreamingelement#System_Xml_Linq_XStreamingElement_ToString_\" data-linktype=\"relative-path\">ToString</a> method to be called. This causes the XML to be serialized. If the semantics of your streaming element query are such that the streaming element can only be streamed once, this may cause undesirable behavior in your debugging experience.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows two uses of <a class=\"xref\" href=\"system.xml.linq.xstreamingelement#System_Xml_Linq_XStreamingElement_ToString_\" data-linktype=\"relative-path\">ToString</a>. The first use preserves white space. The second one serializes the <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a> with formatting.  </p>\n<pre><code class=\"lang-c#\">\n                XElement srcTree = new XElement(&quot;Root&quot;,  \n                       new XElement(&quot;Child&quot;, 1),  \n                       new XElement(&quot;Child&quot;, 2),  \n                       new XElement(&quot;Child&quot;, 3),  \n                       new XElement(&quot;Child&quot;, 4),  \n                       new XElement(&quot;Child&quot;, 5)  \n                   );  \n\nXStreamingElement dstTree = new XStreamingElement(&quot;NewRoot&quot;,  \n                        from el in srcTree.Elements()  \n                        where (int)el == 3  \n                        select new XElement(&quot;DifferentChild&quot;, (int)el)  \n                    );  \n\nConsole.WriteLine(dstTree.ToString(SaveOptions.DisableFormatting));  \nConsole.WriteLine(&quot;------&quot;);  \nConsole.WriteLine(dstTree.ToString());  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim srcTree As XElement = _  \n    &lt;Root&gt;  \n        &lt;Child&gt;1&lt;/Child&gt;  \n        &lt;Child&gt;2&lt;/Child&gt;  \n        &lt;Child&gt;3&lt;/Child&gt;  \n        &lt;Child&gt;4&lt;/Child&gt;  \n        &lt;Child&gt;5&lt;/Child&gt;  \n    &lt;/Root&gt;  \n\nDim dstTree As XStreamingElement = New XStreamingElement(&quot;NewRoot&quot;, _  \n                        From el In srcTree.Elements() _  \n                        Where el.Value = 3 _  \n                        Select &lt;DifferentChild&gt;&lt;%= el.Value %&gt;&lt;/DifferentChild&gt; _  \n                    )  \n\nConsole.WriteLine(dstTree.ToString(SaveOptions.DisableFormatting))  \nConsole.WriteLine(&quot;------&quot;)  \nConsole.WriteLine(dstTree.ToString())  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\n                &lt;NewRoot&gt;&lt;DifferentChild&gt;3&lt;/DifferentChild&gt;&lt;/NewRoot&gt;  \n------  \n&lt;NewRoot&gt;  \n  &lt;DifferentChild&gt;3&lt;/DifferentChild&gt;  \n&lt;/NewRoot&gt;  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XStreamingElement_ToString_System_Xml_Linq_SaveOptions_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XStreamingElement_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(SaveOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the XML for this streaming element, optionally disabling formatting.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ToString (System.Xml.Linq.SaveOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> that specifies formatting behavior.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> containing the XML.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Note that when debugging a program that uses <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a>, displaying the value of an object causes its <a class=\"xref\" href=\"system.xml.linq.xstreamingelement#System_Xml_Linq_XStreamingElement_ToString_\" data-linktype=\"relative-path\">ToString</a> method to be called. This causes the XML to be serialized. If the semantics of your streaming element query are such that the streaming element can only be streamed once, this may cause undesirable behavior in your debugging experience.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows two uses of <a class=\"xref\" href=\"system.xml.linq.xstreamingelement#System_Xml_Linq_XStreamingElement_ToString_\" data-linktype=\"relative-path\">ToString</a>. The first use preserves white space. The second one serializes the <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a> with formatting.  </p>\n<pre><code class=\"lang-c#\">\n                XElement srcTree = new XElement(&quot;Root&quot;,  \n                       new XElement(&quot;Child&quot;, 1),  \n                       new XElement(&quot;Child&quot;, 2),  \n                       new XElement(&quot;Child&quot;, 3),  \n                       new XElement(&quot;Child&quot;, 4),  \n                       new XElement(&quot;Child&quot;, 5)  \n                   );  \n\nXStreamingElement dstTree = new XStreamingElement(&quot;NewRoot&quot;,  \n                        from el in srcTree.Elements()  \n                        where (int)el == 3  \n                        select new XElement(&quot;DifferentChild&quot;, (int)el)  \n                    );  \n\nConsole.WriteLine(dstTree.ToString(SaveOptions.DisableFormatting));  \nConsole.WriteLine(&quot;------&quot;);  \nConsole.WriteLine(dstTree.ToString());  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim srcTree As XElement = _  \n    &lt;Root&gt;  \n        &lt;Child&gt;1&lt;/Child&gt;  \n        &lt;Child&gt;2&lt;/Child&gt;  \n        &lt;Child&gt;3&lt;/Child&gt;  \n        &lt;Child&gt;4&lt;/Child&gt;  \n        &lt;Child&gt;5&lt;/Child&gt;  \n    &lt;/Root&gt;  \n\nDim dstTree As XStreamingElement = New XStreamingElement(&quot;NewRoot&quot;, _  \n                        From el In srcTree.Elements() _  \n                        Where el.Value = 3 _  \n                        Select &lt;DifferentChild&gt;&lt;%= el.Value %&gt;&lt;/DifferentChild&gt; _  \n                    )  \n\nConsole.WriteLine(dstTree.ToString(SaveOptions.DisableFormatting))  \nConsole.WriteLine(&quot;------&quot;)  \nConsole.WriteLine(dstTree.ToString())  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\n                &lt;NewRoot&gt;&lt;DifferentChild&gt;3&lt;/DifferentChild&gt;&lt;/NewRoot&gt;  \n------  \n&lt;NewRoot&gt;  \n  &lt;DifferentChild&gt;3&lt;/DifferentChild&gt;  \n&lt;/NewRoot&gt;  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XStreamingElement_WriteTo_System_Xml_XmlWriter_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XStreamingElement_WriteTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteTo(XmlWriter)</div>        \r\n          </div>\r\n    \r\n            <p>Writes this streaming element to an <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void WriteTo (System.Xml.XmlWriter writer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>writer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> into which this method will write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an XML tree using <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a>. It then writes the streaming element to an <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a>.  </p>\n<pre><code class=\"lang-c#\">\n                XElement srcTree = new XElement(&quot;Root&quot;,  \n                       new XElement(&quot;Child&quot;, 1),  \n                       new XElement(&quot;Child&quot;, 2),  \n                       new XElement(&quot;Child&quot;, 3),  \n                       new XElement(&quot;Child&quot;, 4),  \n                       new XElement(&quot;Child&quot;, 5)  \n                   );  \n\nXStreamingElement dstTree = new XStreamingElement(&quot;NewRoot&quot;,  \n                        from el in srcTree.Elements()  \n                        where (int)el == 3  \n                        select new XElement(&quot;DifferentChild&quot;, (int)el)  \n                    );  \n\nStringBuilder sb = new StringBuilder();  \nXmlWriterSettings xws = new XmlWriterSettings();  \nxws.OmitXmlDeclaration = true;  \nxws.Indent = true;  \n\nusing (XmlWriter xw = XmlWriter.Create(sb, xws))  \n{  \n    dstTree.WriteTo(xw);  \n}  \nConsole.WriteLine(sb.ToString());  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim srcTree As XElement = _  \n    &lt;Root&gt;  \n        &lt;Child&gt;1&lt;/Child&gt;  \n        &lt;Child&gt;2&lt;/Child&gt;  \n        &lt;Child&gt;3&lt;/Child&gt;  \n        &lt;Child&gt;4&lt;/Child&gt;  \n        &lt;Child&gt;5&lt;/Child&gt;  \n    &lt;/Root&gt;  \n\nDim dstTree As XStreamingElement = _   \n    New XStreamingElement(&quot;NewRoot&quot;, _  \n        From el In srcTree.Elements() _  \n        Where el.Value = 3 _  \n        Select &lt;DifferentChild&gt;&lt;%= el.Value %&gt;&lt;/DifferentChild&gt; )  \n\nDim sb As StringBuilder = New StringBuilder()  \nDim xws As XmlWriterSettings = New XmlWriterSettings()  \nxws.OmitXmlDeclaration = True  \nxws.Indent = True  \n\nUsing xw As XmlWriter = XmlWriter.Create(sb, xws)  \n    dstTree.WriteTo(xw)  \nEnd Using  \nConsole.WriteLine(sb.ToString())  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n                &lt;NewRoot&gt;  \n  &lt;DifferentChild&gt;3&lt;/DifferentChild&gt;  \n&lt;/NewRoot&gt;  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Xml.Linq.XStreamingElement.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Xml.Linq.XStreamingElement.yml\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XStreamingElement\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XStreamingElement..ctor\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XStreamingElement.Add\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XStreamingElement.Name\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XStreamingElement.Save\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XStreamingElement.ToString\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XStreamingElement.WriteTo\">\r\n<meta name=\"APILocation\" content=\"System.Xml.Linq.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"0d853885-7ddf-bc8c-ac06-5baa80bde318\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents elements in an XML tree that supports deferred streaming output.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Xml.Linq/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Xml.Linq.XStreamingElement\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Xml.Linq.XStreamingElement.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Xml.Linq.XStreamingElement.yml","open_to_public_contributors":true,"api_name":["System.Xml.Linq.XStreamingElement","System.Xml.Linq.XStreamingElement..ctor","System.Xml.Linq.XStreamingElement.Add","System.Xml.Linq.XStreamingElement.Name","System.Xml.Linq.XStreamingElement.Save","System.Xml.Linq.XStreamingElement.ToString","System.Xml.Linq.XStreamingElement.WriteTo"],"api_location":["System.Xml.Linq.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Xml.Linq.XStreamingElement","System::Xml::Linq::XStreamingElement","System.Xml.Linq.XStreamingElement.#ctor","System::Xml::Linq::XStreamingElement::#ctor","System.Xml.Linq.XStreamingElement.Add","System::Xml::Linq::XStreamingElement::Add","System.Xml.Linq.XStreamingElement.Name","System::Xml::Linq::XStreamingElement::Name","System.Xml.Linq.XStreamingElement.Save","System::Xml::Linq::XStreamingElement::Save","System.Xml.Linq.XStreamingElement.ToString","System::Xml::Linq::XStreamingElement::ToString","System.Xml.Linq.XStreamingElement.WriteTo","System::Xml::Linq::XStreamingElement::WriteTo"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"0d853885-7ddf-bc8c-ac06-5baa80bde318","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Xml.Linq/XStreamingElement.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"XStreamingElement class | Microsoft Docs","_op_ogTitle":"XStreamingElement class","description":"Represents elements in an XML tree that supports deferred streaming output.\n","toc_asset_id":"_splitted/System.Xml.Linq/toc.json","toc_rel":"_splitted/System.Xml.Linq/toc.json","source_url":"","ms.assetid":"System.Xml.Linq.XStreamingElement","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.xml.linq.xstreamingelement","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.xml.linq.xstreamingelement","fileRelativePath":"System.Xml.Linq.XStreamingElement.html"},"themesRelativePathToOutputRoot":"_themes/"}