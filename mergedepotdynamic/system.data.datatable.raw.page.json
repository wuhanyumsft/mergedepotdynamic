{"content":"    \r\n    <h1 id=\"System_Data_DataTable\">\r\n      <span class=\"lang-csharp\">DataTable</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents one table of in-memory data.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.ComponentModel.DefaultEvent(&quot;RowChanging&quot;)]\n[System.ComponentModel.DefaultProperty(&quot;TableName&quot;)]\n[System.ComponentModel.DesignTimeVisible(false)]\n[System.ComponentModel.Editor(&quot;Microsoft.VSDesigner.Data.Design.DataTableEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&quot;, &quot;System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&quot;)]\n[System.ComponentModel.ToolboxItem(false)]\n[System.Xml.Serialization.XmlSchemaProvider(&quot;GetDataTableSchema&quot;)]\npublic class DataTable : System.ComponentModel.MarshalByValueComponent, System.ComponentModel.IListSource, System.ComponentModel.ISupportInitializeNotification, System.Runtime.Serialization.ISerializable, System.Xml.Serialization.IXmlSerializable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.marshalbyvaluecomponent\" data-linktype=\"relative-path\">System.ComponentModel.MarshalByValueComponent</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">DataTable</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.marshalbyvaluecomponent#System_ComponentModel_MarshalByValueComponent_Container\" data-linktype=\"relative-path\">Container</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.marshalbyvaluecomponent#System_ComponentModel_MarshalByValueComponent_DesignMode\" data-linktype=\"relative-path\">DesignMode</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.marshalbyvaluecomponent#System_ComponentModel_MarshalByValueComponent_Dispose\" data-linktype=\"relative-path\">Dispose()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.marshalbyvaluecomponent#System_ComponentModel_MarshalByValueComponent_Dispose_System_Boolean_\" data-linktype=\"relative-path\">Dispose(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.marshalbyvaluecomponent#System_ComponentModel_MarshalByValueComponent_Disposed\" data-linktype=\"relative-path\">Disposed</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.marshalbyvaluecomponent#System_ComponentModel_MarshalByValueComponent_Events\" data-linktype=\"relative-path\">Events</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.marshalbyvaluecomponent#System_ComponentModel_MarshalByValueComponent_GetService_System_Type_\" data-linktype=\"relative-path\">GetService(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The DataTable is a central object in the ADO.NET library. Other objects that use the DataTable include the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> and the <a class=\"xref\" href=\"system.data.dataview\" data-linktype=\"relative-path\">DataView</a>.  </p>\n<p> When accessing DataTable objects, note that they are conditionally case sensitive. For example, if one DataTable is named &quot;mydatatable&quot; and another is named &quot;Mydatatable&quot;, a string used to search for one of the tables is regarded as case sensitive. However, if &quot;mydatatable&quot; exists and &quot;Mydatatable&quot; does not, the search string is regarded as case insensitive. A <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> can contain two DataTable objects that have the same <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_TableName_\" data-linktype=\"relative-path\">TableName</a> property value but different <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_Namespace_\" data-linktype=\"relative-path\">Namespace</a> property values. For more information about working with DataTable objects, see <a href=\"../Topic/Creating%20a%20DataTable.md\" data-linktype=\"relative-path\">Creating a DataTable</a>.  </p>\n<p> If you are creating a DataTable programmatically, you must first define its schema by adding <a class=\"xref\" href=\"system.data.datacolumn\" data-linktype=\"relative-path\">DataColumn</a> objects to the <a class=\"xref\" href=\"system.data.datacolumncollection\" data-linktype=\"relative-path\">DataColumnCollection</a> (accessed through the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_Columns_\" data-linktype=\"relative-path\">Columns</a> property). For more information about adding <a class=\"xref\" href=\"system.data.datacolumn\" data-linktype=\"relative-path\">DataColumn</a> objects, see <a href=\"../Topic/Adding%20Columns%20to%20a%20DataTable.md\" data-linktype=\"relative-path\">Adding Columns to a DataTable</a>.  </p>\n<p> To add rows to a DataTable, you must first use the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_NewRow_\" data-linktype=\"relative-path\">NewRow</a> method to return a new <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> object. The <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_NewRow_\" data-linktype=\"relative-path\">NewRow</a> method returns a row with the schema of the DataTable, as it is defined by the table&#39;s <a class=\"xref\" href=\"system.data.datacolumncollection\" data-linktype=\"relative-path\">DataColumnCollection</a>. The maximum number of rows that a DataTable can store is 16,777,216. For more information, see <a href=\"../Topic/Adding%20Data%20to%20a%20DataTable.md\" data-linktype=\"relative-path\">Adding Data to a DataTable</a>.  </p>\n<p> The DataTable also contains a collection of <a class=\"xref\" href=\"system.data.constraint\" data-linktype=\"relative-path\">Constraint</a> objects that can be used to ensure the integrity of the data. For more information, see <a href=\"../Topic/DataTable%20Constraints.md\" data-linktype=\"relative-path\">DataTable Constraints</a>.  </p>\n<p> There are many DataTable events that can be used to determine when changes are made to a table. These include <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_RowChanged\" data-linktype=\"relative-path\">RowChanged</a>, <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_RowChanging\" data-linktype=\"relative-path\">RowChanging</a>, <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_RowDeleting\" data-linktype=\"relative-path\">RowDeleting</a>, and <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_RowDeleted\" data-linktype=\"relative-path\">RowDeleted</a>. For more information about the events that can be used with a DataTable, see <a href=\"../Topic/Handling%20DataTable%20Events.md\" data-linktype=\"relative-path\">Handling DataTable Events</a>.  </p>\n<p> When an instance of DataTable is created, some of the read/write properties are set to initial values. For a list of these values, see the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable__ctor_\" data-linktype=\"relative-path\">DataTable</a> constructor topic.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> and DataTable objects inherit from <a class=\"xref\" href=\"system.componentmodel.marshalbyvaluecomponent\" data-linktype=\"relative-path\">MarshalByValueComponent</a>, and support the <a class=\"xref\" href=\"system.runtime.serialization.iserializable\" data-linktype=\"relative-path\">ISerializable</a> interface for .NET Framework remoting. These are the only ADO.NET objects that you can use for .NET Framework remoting.</p>\n</div>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable__ctor\" data-linktype=\"self-bookmark\">DataTable()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> class with no arguments.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable__ctor_System_String_\" data-linktype=\"self-bookmark\">DataTable(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> class with the specified table name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable__ctor_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"self-bookmark\">DataTable(SerializationInfo,StreamingContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> class with the <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> and the <a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable__ctor_System_String_System_String_\" data-linktype=\"self-bookmark\">DataTable(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> class using the specified table name and namespace.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Fields\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_fInitInProgress\" data-linktype=\"self-bookmark\">fInitInProgress</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Checks whether initialization is in progress. The initialization occurs at run time.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_CaseSensitive\" data-linktype=\"self-bookmark\">CaseSensitive</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether string comparisons within the table are case-sensitive.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_ChildRelations\" data-linktype=\"self-bookmark\">ChildRelations</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the collection of child relations for this <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_Columns\" data-linktype=\"self-bookmark\">Columns</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the collection of columns that belong to this table.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_Constraints\" data-linktype=\"self-bookmark\">Constraints</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the collection of constraints maintained by this table.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_DataSet\" data-linktype=\"self-bookmark\">DataSet</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> to which this table belongs.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_DefaultView\" data-linktype=\"self-bookmark\">DefaultView</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a customized view of the table that may include a filtered view, or a cursor position.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_DisplayExpression\" data-linktype=\"self-bookmark\">DisplayExpression</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the expression that returns a value used to represent this table in the user interface. The <code>DisplayExpression</code> property lets you display the name of this table in a user interface.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_ExtendedProperties\" data-linktype=\"self-bookmark\">ExtendedProperties</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the collection of customized user information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_HasErrors\" data-linktype=\"self-bookmark\">HasErrors</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether there are errors in any of the rows in any of the tables of the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> to which the table belongs.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_IsInitialized\" data-linktype=\"self-bookmark\">IsInitialized</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> is initialized.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_Locale\" data-linktype=\"self-bookmark\">Locale</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the locale information used to compare strings within the table.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_MinimumCapacity\" data-linktype=\"self-bookmark\">MinimumCapacity</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the initial starting size for this table.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_Namespace\" data-linktype=\"self-bookmark\">Namespace</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the namespace for the XML representation of the data stored in the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_ParentRelations\" data-linktype=\"self-bookmark\">ParentRelations</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the collection of parent relations for this <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_Prefix\" data-linktype=\"self-bookmark\">Prefix</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the namespace for the XML representation of the data stored in the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_PrimaryKey\" data-linktype=\"self-bookmark\">PrimaryKey</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets an array of columns that function as primary keys for the data table.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_RemotingFormat\" data-linktype=\"self-bookmark\">RemotingFormat</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the serialization format.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_Rows\" data-linktype=\"self-bookmark\">Rows</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the collection of rows that belong to this table.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_Site\" data-linktype=\"self-bookmark\">Site</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets an <a class=\"xref\" href=\"system.componentmodel.isite\" data-linktype=\"relative-path\">ISite</a> for the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_TableName\" data-linktype=\"self-bookmark\">TableName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the name of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_AcceptChanges\" data-linktype=\"self-bookmark\">AcceptChanges()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Commits all the changes made to this table since the last time AcceptChanges was called.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_BeginInit\" data-linktype=\"self-bookmark\">BeginInit()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Begins the initialization of a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> that is used on a form or used by another component. The initialization occurs at run time.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_BeginLoadData\" data-linktype=\"self-bookmark\">BeginLoadData()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Turns off notifications, index maintenance, and constraints while loading data.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_Clear\" data-linktype=\"self-bookmark\">Clear()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Clears the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> of all data.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_Clone\" data-linktype=\"self-bookmark\">Clone()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Clones the structure of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>, including all <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> schemas and constraints.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_Compute_System_String_System_String_\" data-linktype=\"self-bookmark\">Compute(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the given expression on the current rows that pass the filter criteria.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_Copy\" data-linktype=\"self-bookmark\">Copy()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies both the structure and data for this <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_CreateDataReader\" data-linktype=\"self-bookmark\">CreateDataReader()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> corresponding to the data within this <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_CreateInstance\" data-linktype=\"self-bookmark\">CreateInstance()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new instance of <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_EndInit\" data-linktype=\"self-bookmark\">EndInit()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Ends the initialization of a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> that is used on a form or used by another component. The initialization occurs at run time.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_EndLoadData\" data-linktype=\"self-bookmark\">EndLoadData()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Turns on notifications, index maintenance, and constraints after loading data.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_GetChanges\" data-linktype=\"self-bookmark\">GetChanges()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a copy of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> that contains all changes made to it since it was loaded or <span class=\"xref\">stem.Data.DataTable.AcceptChanges*</span> was last called.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_GetChanges_System_Data_DataRowState_\" data-linktype=\"self-bookmark\">GetChanges(DataRowState)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a copy of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> containing all changes made to it since it was last loaded, or since <span class=\"xref\">stem.Data.DataTable.AcceptChanges*</span> was called, filtered by <a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_GetDataTableSchema_System_Xml_Schema_XmlSchemaSet_\" data-linktype=\"self-bookmark\">GetDataTableSchema(XmlSchemaSet)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>This method returns an <a class=\"xref\" href=\"system.xml.schema.xmlschemaset\" data-linktype=\"relative-path\">XmlSchemaSet</a> instance containing the Web Services Description Language (WSDL) that describes the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> for Web Services.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_GetErrors\" data-linktype=\"self-bookmark\">GetErrors()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an array of <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> objects that contain errors.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"self-bookmark\">GetObjectData(SerializationInfo,StreamingContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Populates a serialization information object with the data needed to serialize the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_GetRowType\" data-linktype=\"self-bookmark\">GetRowType()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the row type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_GetSchema\" data-linktype=\"self-bookmark\">GetSchema()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.Xml.Serialization.IXmlSerializable.GetSchema*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_ImportRow_System_Data_DataRow_\" data-linktype=\"self-bookmark\">ImportRow(DataRow)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies a <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> into a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>, preserving any property settings, as well as original and current values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_Load_System_Data_IDataReader_\" data-linktype=\"self-bookmark\">Load(IDataReader)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Fills a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> with values from a data source using the supplied <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a>. If the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> already contains rows, the incoming data from the data source is merged with the existing rows.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_Load_System_Data_IDataReader_System_Data_LoadOption_\" data-linktype=\"self-bookmark\">Load(IDataReader,LoadOption)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Fills a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> with values from a data source using the supplied <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a>. If the <code>DataTable</code> already contains rows, the incoming data from the data source is merged with the existing rows according to the value of the <code>loadOption</code> parameter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_Load_System_Data_IDataReader_System_Data_LoadOption_System_Data_FillErrorEventHandler_\" data-linktype=\"self-bookmark\">Load(IDataReader,LoadOption,FillErrorEventHandler)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Fills a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> with values from a data source using the supplied <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> using an error-handling delegate.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_LoadDataRow_System_Object___System_Boolean_\" data-linktype=\"self-bookmark\">LoadDataRow(Object[],Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Finds and updates a specific row. If no matching row is found, a new row is created using the given values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_LoadDataRow_System_Object___System_Data_LoadOption_\" data-linktype=\"self-bookmark\">LoadDataRow(Object[],LoadOption)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Finds and updates a specific row. If no matching row is found, a new row is created using the given values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_Merge_System_Data_DataTable_\" data-linktype=\"self-bookmark\">Merge(DataTable)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Merge the specified <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> with the current <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_Merge_System_Data_DataTable_System_Boolean_\" data-linktype=\"self-bookmark\">Merge(DataTable,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Merge the specified <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> with the current <code>DataTable</code>, indicating whether to preserve changes in the current <code>DataTable</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_Merge_System_Data_DataTable_System_Boolean_System_Data_MissingSchemaAction_\" data-linktype=\"self-bookmark\">Merge(DataTable,Boolean,MissingSchemaAction)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Merge the specified <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> with the current <code>DataTable</code>, indicating whether to preserve changes and how to handle missing schema in the current <code>DataTable</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_NewRow\" data-linktype=\"self-bookmark\">NewRow()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> with the same schema as the table.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_NewRowArray_System_Int32_\" data-linktype=\"self-bookmark\">NewRowArray(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an array of <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_NewRowFromBuilder_System_Data_DataRowBuilder_\" data-linktype=\"self-bookmark\">NewRowFromBuilder(DataRowBuilder)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new row from an existing row.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_OnColumnChanged_System_Data_DataColumnChangeEventArgs_\" data-linktype=\"self-bookmark\">OnColumnChanged(DataColumnChangeEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_ColumnChanged\" data-linktype=\"relative-path\">ColumnChanged</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_OnColumnChanging_System_Data_DataColumnChangeEventArgs_\" data-linktype=\"self-bookmark\">OnColumnChanging(DataColumnChangeEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_ColumnChanging\" data-linktype=\"relative-path\">ColumnChanging</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_OnPropertyChanging_System_ComponentModel_PropertyChangedEventArgs_\" data-linktype=\"self-bookmark\">OnPropertyChanging(PropertyChangedEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.componentmodel.inotifypropertychanged#System_ComponentModel_INotifyPropertyChanged_PropertyChanged\" data-linktype=\"relative-path\">PropertyChanged</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_OnRemoveColumn_System_Data_DataColumn_\" data-linktype=\"self-bookmark\">OnRemoveColumn(DataColumn)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Notifies the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> that a <a class=\"xref\" href=\"system.data.datacolumn\" data-linktype=\"relative-path\">DataColumn</a> is being removed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_OnRowChanged_System_Data_DataRowChangeEventArgs_\" data-linktype=\"self-bookmark\">OnRowChanged(DataRowChangeEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_RowChanged\" data-linktype=\"relative-path\">RowChanged</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_OnRowChanging_System_Data_DataRowChangeEventArgs_\" data-linktype=\"self-bookmark\">OnRowChanging(DataRowChangeEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_RowChanging\" data-linktype=\"relative-path\">RowChanging</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_OnRowDeleted_System_Data_DataRowChangeEventArgs_\" data-linktype=\"self-bookmark\">OnRowDeleted(DataRowChangeEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_RowDeleted\" data-linktype=\"relative-path\">RowDeleted</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_OnRowDeleting_System_Data_DataRowChangeEventArgs_\" data-linktype=\"self-bookmark\">OnRowDeleting(DataRowChangeEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_RowDeleting\" data-linktype=\"relative-path\">RowDeleting</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_OnTableCleared_System_Data_DataTableClearEventArgs_\" data-linktype=\"self-bookmark\">OnTableCleared(DataTableClearEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_TableCleared\" data-linktype=\"relative-path\">TableCleared</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_OnTableClearing_System_Data_DataTableClearEventArgs_\" data-linktype=\"self-bookmark\">OnTableClearing(DataTableClearEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_TableClearing\" data-linktype=\"relative-path\">TableClearing</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_OnTableNewRow_System_Data_DataTableNewRowEventArgs_\" data-linktype=\"self-bookmark\">OnTableNewRow(DataTableNewRowEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_TableNewRow\" data-linktype=\"relative-path\">TableNewRow</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_ReadXml_System_IO_Stream_\" data-linktype=\"self-bookmark\">ReadXml(Stream)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads XML schema and data into the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> using the specified <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_ReadXml_System_IO_TextReader_\" data-linktype=\"self-bookmark\">ReadXml(TextReader)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads XML schema and data into the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> using the specified <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_ReadXml_System_String_\" data-linktype=\"self-bookmark\">ReadXml(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads XML schema and data into the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> from the specified file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_ReadXml_System_Xml_XmlReader_\" data-linktype=\"self-bookmark\">ReadXml(XmlReader)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads XML Schema and Data into the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> using the specified <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_ReadXmlSchema_System_IO_Stream_\" data-linktype=\"self-bookmark\">ReadXmlSchema(Stream)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads an XML schema into the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> using the specified stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_ReadXmlSchema_System_IO_TextReader_\" data-linktype=\"self-bookmark\">ReadXmlSchema(TextReader)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads an XML schema into the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> using the specified <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_ReadXmlSchema_System_String_\" data-linktype=\"self-bookmark\">ReadXmlSchema(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads an XML schema into the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> from the specified file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_ReadXmlSchema_System_Xml_XmlReader_\" data-linktype=\"self-bookmark\">ReadXmlSchema(XmlReader)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads an XML schema into the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> using the specified <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_ReadXmlSerializable_System_Xml_XmlReader_\" data-linktype=\"self-bookmark\">ReadXmlSerializable(XmlReader)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads from an XML stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_RejectChanges\" data-linktype=\"self-bookmark\">RejectChanges()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Rolls back all changes that have been made to the table since it was loaded, or the last time <span class=\"xref\">stem.Data.DataTable.AcceptChanges*</span> was called.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_Reset\" data-linktype=\"self-bookmark\">Reset()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Resets the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> to its original state. Reset removes all data, indexes, relations, and columns of the table. If a DataSet includes a DataTable, the table will still be part of the DataSet after the table is reset.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_Select\" data-linktype=\"self-bookmark\">Select()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an array of all <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> objects.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_Select_System_String_\" data-linktype=\"self-bookmark\">Select(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an array of all <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> objects that match the filter criteria.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_Select_System_String_System_String_\" data-linktype=\"self-bookmark\">Select(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an array of all <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> objects that match the filter criteria, in the specified sort order.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_Select_System_String_System_String_System_Data_DataViewRowState_\" data-linktype=\"self-bookmark\">Select(String,String,DataViewRowState)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an array of all <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> objects that match the filter in the order of the sort that match the specified state.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <span class=\"xref\">stem.Data.DataTable.TableName*</span> and <span class=\"xref\">stem.Data.DataTable.DisplayExpression*</span>, if there is one as a concatenated string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_WriteXml_System_IO_Stream_\" data-linktype=\"self-bookmark\">WriteXml(Stream)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the current contents of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> as XML using the specified <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_WriteXml_System_IO_TextWriter_\" data-linktype=\"self-bookmark\">WriteXml(TextWriter)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the current contents of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> as XML using the specified <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_WriteXml_System_String_\" data-linktype=\"self-bookmark\">WriteXml(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the current contents of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> as XML using the specified file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_WriteXml_System_Xml_XmlWriter_\" data-linktype=\"self-bookmark\">WriteXml(XmlWriter)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the current contents of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> as XML using the specified <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_WriteXml_System_IO_Stream_System_Boolean_\" data-linktype=\"self-bookmark\">WriteXml(Stream,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the current contents of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> as XML using the specified <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>. To save the data for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <code>true</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_WriteXml_System_IO_Stream_System_Data_XmlWriteMode_\" data-linktype=\"self-bookmark\">WriteXml(Stream,XmlWriteMode)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the current data, and optionally the schema, for the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> to the specified file using the specified <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a>. To write the schema, set the value for the <code>mode</code> parameter to <code>WriteSchema</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_WriteXml_System_IO_TextWriter_System_Boolean_\" data-linktype=\"self-bookmark\">WriteXml(TextWriter,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the current contents of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> as XML using the specified <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a>. To save the data for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <code>true</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_WriteXml_System_IO_TextWriter_System_Data_XmlWriteMode_\" data-linktype=\"self-bookmark\">WriteXml(TextWriter,XmlWriteMode)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the current data, and optionally the schema, for the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> using the specified <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> and <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a>. To write the schema, set the value for the <code>mode</code> parameter to <code>WriteSchema</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_WriteXml_System_String_System_Boolean_\" data-linktype=\"self-bookmark\">WriteXml(String,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the current contents of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> as XML using the specified file. To save the data for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <code>true</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_WriteXml_System_String_System_Data_XmlWriteMode_\" data-linktype=\"self-bookmark\">WriteXml(String,XmlWriteMode)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the current data, and optionally the schema, for the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> using the specified file and <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a>. To write the schema, set the value for the <code>mode</code> parameter to <code>WriteSchema</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_WriteXml_System_Xml_XmlWriter_System_Boolean_\" data-linktype=\"self-bookmark\">WriteXml(XmlWriter,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the current contents of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> as XML using the specified <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_WriteXml_System_Xml_XmlWriter_System_Data_XmlWriteMode_\" data-linktype=\"self-bookmark\">WriteXml(XmlWriter,XmlWriteMode)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the current data, and optionally the schema, for the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> using the specified <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> and <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a>. To write the schema, set the value for the <code>mode</code> parameter to <code>WriteSchema</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_WriteXml_System_IO_Stream_System_Data_XmlWriteMode_System_Boolean_\" data-linktype=\"self-bookmark\">WriteXml(Stream,XmlWriteMode,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the current data, and optionally the schema, for the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> to the specified file using the specified <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a>. To write the schema, set the value for the <code>mode</code> parameter to <code>WriteSchema</code>. To save the data for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <code>true</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_WriteXml_System_IO_TextWriter_System_Data_XmlWriteMode_System_Boolean_\" data-linktype=\"self-bookmark\">WriteXml(TextWriter,XmlWriteMode,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the current data, and optionally the schema, for the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> using the specified <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> and <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a>. To write the schema, set the value for the <code>mode</code> parameter to <code>WriteSchema</code>. To save the data for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <code>true</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_WriteXml_System_String_System_Data_XmlWriteMode_System_Boolean_\" data-linktype=\"self-bookmark\">WriteXml(String,XmlWriteMode,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the current data, and optionally the schema, for the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> using the specified file and <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a>. To write the schema, set the value for the <code>mode</code> parameter to <code>WriteSchema</code>. To save the data for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <code>true</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_WriteXml_System_Xml_XmlWriter_System_Data_XmlWriteMode_System_Boolean_\" data-linktype=\"self-bookmark\">WriteXml(XmlWriter,XmlWriteMode,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the current data, and optionally the schema, for the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> using the specified <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> and <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a>. To write the schema, set the value for the <code>mode</code> parameter to <code>WriteSchema</code>. To save the data for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <code>true</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_WriteXmlSchema_System_IO_Stream_\" data-linktype=\"self-bookmark\">WriteXmlSchema(Stream)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the current data structure of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> as an XML schema to the specified stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_WriteXmlSchema_System_IO_TextWriter_\" data-linktype=\"self-bookmark\">WriteXmlSchema(TextWriter)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the current data structure of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> as an XML schema using the specified <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_WriteXmlSchema_System_String_\" data-linktype=\"self-bookmark\">WriteXmlSchema(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the current data structure of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> as an XML schema to the specified file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_WriteXmlSchema_System_Xml_XmlWriter_\" data-linktype=\"self-bookmark\">WriteXmlSchema(XmlWriter)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the current data structure of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> as an XML schema using the specified <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_WriteXmlSchema_System_IO_Stream_System_Boolean_\" data-linktype=\"self-bookmark\">WriteXmlSchema(Stream,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the current data structure of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> as an XML schema to the specified stream. To save the schema for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <code>true</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_WriteXmlSchema_System_IO_TextWriter_System_Boolean_\" data-linktype=\"self-bookmark\">WriteXmlSchema(TextWriter,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the current data structure of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> as an XML schema using the specified <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a>. To save the schema for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <code>true</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_WriteXmlSchema_System_String_System_Boolean_\" data-linktype=\"self-bookmark\">WriteXmlSchema(String,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the current data structure of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> as an XML schema to the specified file. To save the schema for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <code>true</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_WriteXmlSchema_System_Xml_XmlWriter_System_Boolean_\" data-linktype=\"self-bookmark\">WriteXmlSchema(XmlWriter,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the current data structure of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> as an XML schema using the specified <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a>. To save the schema for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <code>true</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Events\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_ColumnChanged\" data-linktype=\"self-bookmark\">ColumnChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs after a value has been changed for the specified <a class=\"xref\" href=\"system.data.datacolumn\" data-linktype=\"relative-path\">DataColumn</a> in a <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_ColumnChanging\" data-linktype=\"self-bookmark\">ColumnChanging</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when a value is being changed for the specified <a class=\"xref\" href=\"system.data.datacolumn\" data-linktype=\"relative-path\">DataColumn</a> in a <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_Initialized\" data-linktype=\"self-bookmark\">Initialized</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs after the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> is initialized.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_RowChanged\" data-linktype=\"self-bookmark\">RowChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs after a <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> has been changed successfully.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_RowChanging\" data-linktype=\"self-bookmark\">RowChanging</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when a <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> is changing.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_RowDeleted\" data-linktype=\"self-bookmark\">RowDeleted</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs after a row in the table has been deleted.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_RowDeleting\" data-linktype=\"self-bookmark\">RowDeleting</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs before a row in the table is about to be deleted.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_TableCleared\" data-linktype=\"self-bookmark\">TableCleared</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs after a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> is cleared.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_TableClearing\" data-linktype=\"self-bookmark\">TableClearing</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> is cleared.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_TableNewRow\" data-linktype=\"self-bookmark\">TableNewRow</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when a new <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> is inserted.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_System_ComponentModel_IListSource_ContainsListCollection\" data-linktype=\"self-bookmark\">IListSource.ContainsListCollection</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.ComponentModel.IListSource.ContainsListCollection*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_System_ComponentModel_IListSource_GetList\" data-linktype=\"self-bookmark\">IListSource.GetList()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.ComponentModel.IListSource.GetList*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_System_Xml_Serialization_IXmlSerializable_GetSchema\" data-linktype=\"self-bookmark\">IXmlSerializable.GetSchema()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.Xml.Serialization.IXmlSerializable.GetSchema*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_System_Xml_Serialization_IXmlSerializable_ReadXml_System_Xml_XmlReader_\" data-linktype=\"self-bookmark\">IXmlSerializable.ReadXml(XmlReader)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.Xml.Serialization.IXmlSerializable.ReadXml*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTable_System_Xml_Serialization_IXmlSerializable_WriteXml_System_Xml_XmlWriter_\" data-linktype=\"self-bookmark\">IXmlSerializable.WriteXml(XmlWriter)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.Xml.Serialization.IXmlSerializable.WriteXml*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable__ctor\">\r\n    \r\n            <a id=\"System_Data_DataTable__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DataTable()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> class with no arguments.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public DataTable ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The constructor sets initial values for all properties of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> object. The following table shows the properties and their default values. When an instance of <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> is created, the following read/write properties are set to initial values.  </p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Default value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>CaseSensitive</strong></td>\n<td>Same as the parent <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>, if it belongs to one. Otherwise, <code>false</code>.</td>\n</tr>\n<tr>\n<td><strong>DisplayExpression</strong></td>\n<td>Empty string (&quot;&quot;)</td>\n</tr>\n<tr>\n<td><strong>Locale</strong></td>\n<td>Same as the parent <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> object&#39;s <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> (returned by the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_Locale_\" data-linktype=\"relative-path\">Locale</a> property); if no parent exists, the default is the current system <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>.</td>\n</tr>\n<tr>\n<td><strong>MinimumCapacity</strong></td>\n<td>50 rows.</td>\n</tr>\n</tbody>\n</table>\n<p> You can change the value for any of these properties through a separate call to the property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a new <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> with <a class=\"xref\" href=\"system.data.datacolumn\" data-linktype=\"relative-path\">DataColumn</a> and <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a>, and displays it in a <a class=\"xref\" href=\"system.windows.forms.datagridview\" data-linktype=\"relative-path\">DataGridView</a> control.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData DataTable.DataTable Example#1\"> Private Sub MakeDataTableAndDisplay()\n    &#39; Create new DataTable.\n    Dim table As New DataTable\n \n    &#39; Declare DataColumn and DataRow variables.\n    Dim column As DataColumn\n    Dim row As DataRow\n \n    &#39; Create new DataColumn, set DataType, ColumnName \n    &#39; and add to DataTable.    \n    column = New DataColumn\n    column.DataType = System.Type.GetType(&quot;System.Int32&quot;)\n    column.ColumnName = &quot;id&quot;\n    table.Columns.Add(column)\n \n    &#39; Create second column.\n    column = New DataColumn\n    column.DataType = Type.GetType(&quot;System.String&quot;)\n    column.ColumnName = &quot;item&quot;\n    table.Columns.Add(column)\n \n    &#39; Create new DataRow objects and add to DataTable.    \n    Dim i As Integer\n    For i = 0 To 10\n       row = table.NewRow\n       row(&quot;id&quot;) = i\n       row(&quot;item&quot;) = &quot;item &quot; &amp; i\n       table.Rows.Add(row)\n    Next i\n \n    &#39; Set to DataGrid.DataSource property to the table.\n    DataGrid1.DataSource = table\n End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData DataTable.DataTable Example#1\">    private void MakeDataTableAndDisplay()\n    {\n        // Create new DataTable.\n        DataTable table = new DataTable();\n    \n        // Declare DataColumn and DataRow variables.\n        DataColumn column;\n        DataRow row;\n \n        // Create new DataColumn, set DataType, ColumnName\n        // and add to DataTable.    \n        column = new DataColumn();\n        column.DataType = System.Type.GetType(&quot;System.Int32&quot;);\n        column.ColumnName = &quot;id&quot;;\n        table.Columns.Add(column);\n \n        // Create second column.\n        column = new DataColumn();\n        column.DataType = Type.GetType(&quot;System.String&quot;);\n        column.ColumnName = &quot;item&quot;;\n        table.Columns.Add(column);\n \n        // Create new DataRow objects and add to DataTable.    \n        for(int i = 0; i &lt; 10; i++)\n        {\n            row = table.NewRow();\n            row[&quot;id&quot;] = i;\n            row[&quot;item&quot;] = &quot;item &quot; + i;\n            table.Rows.Add(row);\n        }\n        // Set to DataGrid.DataSource property to the table.\n        dataGrid1.DataSource = table;\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable__ctor_System_String_\">\r\n    \r\n            <a id=\"System_Data_DataTable__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DataTable(String)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> class with the specified table name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public DataTable (string tableName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>tableName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name to give the table. If <code>tableName</code> is <code>null</code> or an empty string, a default name is given when added to the <a class=\"xref\" href=\"system.data.datatablecollection\" data-linktype=\"relative-path\">DataTableCollection</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> and displays it in a <a class=\"xref\" href=\"system.windows.forms.datagridview\" data-linktype=\"relative-path\">DataGridView</a> control.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData DataTable.DataTable1 Example#1\">    private void MakeDataTableAndDisplay()\n    {\n        // Create new DataTable.\n        DataTable table = new DataTable(&quot;table&quot;);\n    \n        // Declare DataColumn and DataRow variables.\n        DataColumn column;\n        DataRow row;\n \n        // Create new DataColumn, set DataType, \n        // ColumnName and add to DataTable.    \n        column = new DataColumn();\n        column.DataType = System.Type.GetType(&quot;System.Int32&quot;);\n        column.ColumnName = &quot;id&quot;;\n        table.Columns.Add(column);\n \n        // Create second column.\n        column = new DataColumn();\n        column.DataType = Type.GetType(&quot;System.String&quot;);\n        column.ColumnName = &quot;item&quot;;\n        table.Columns.Add(column);\n \n        // Create new DataRow objects and add to DataTable.    \n        for(int i = 0; i &lt; 10; i++)\n        {\n            row = table.NewRow();\n            row[&quot;id&quot;] = i;\n            row[&quot;item&quot;] = &quot;item &quot; + i;\n            table.Rows.Add(row);\n        }\n        // Set to DataGrid.DataSource property to the table.\n        dataGrid1.DataSource = table;\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData DataTable.DataTable1 Example#1\"> Private Sub MakeDataTableAndDisplay()\n    &#39; Create new DataTable.\n    Dim table As DataTable = New DataTable(&quot;table&quot;)\n \n    &#39; Declare DataColumn and DataRow variables.\n    Dim column As DataColumn\n    Dim row As DataRow\n \n    &#39; Create new DataColumn, set DataType, \n    &#39; ColumnName and add to DataTable.    \n    column = New DataColumn\n    column.DataType = System.Type.GetType(&quot;System.Int32&quot;)\n    column.ColumnName = &quot;id&quot;\n    table.Columns.Add(column)\n \n    &#39; Create second column.\n    column = New DataColumn\n    column.DataType = Type.GetType(&quot;System.String&quot;)\n    column.ColumnName = &quot;item&quot;\n    table.Columns.Add(column)\n \n    &#39; Create new DataRow objects and add to DataTable.    \n    Dim i As Integer\n    For i = 0 To 10\n       row = table.NewRow\n       row(&quot;id&quot;) = i\n       row(&quot;item&quot;) = &quot;item &quot; &amp; i\n       table.Rows.Add(row)\n    Next i\n \n    &#39; Set to DataGrid.DataSource property to the table.\n    DataGrid1.DataSource = table\n End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable__ctor_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\">\r\n    \r\n            <a id=\"System_Data_DataTable__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DataTable(SerializationInfo,StreamingContext)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> class with the <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> and the <a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected DataTable (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>info</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The data needed to serialize or deserialize an object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>context</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The source and destination of a given serialized stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This implementation of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> constructor is required for <a class=\"xref\" href=\"system.runtime.serialization.iserializable\" data-linktype=\"relative-path\">ISerializable</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable__ctor_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Data_DataTable__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DataTable(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> class using the specified table name and namespace.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public DataTable (string tableName, string tableNamespace);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>tableName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name to give the table. If <code>tableName</code> is <code>null</code> or an empty string, a default name is given when added to the <a class=\"xref\" href=\"system.data.datatablecollection\" data-linktype=\"relative-path\">DataTableCollection</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>tableNamespace</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The namespace for the XML representation of the data stored in the <code>DataTable</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"fields\">\r\n        <h2>Fields\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_fInitInProgress\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">fInitInProgress</div>        \r\n          </div>\r\n    \r\n            <p>Checks whether initialization is in progress. The initialization occurs at run time.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected bool fInitInProgress;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_CaseSensitive\">\r\n    \r\n            <a id=\"System_Data_DataTable_CaseSensitive_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CaseSensitive</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether string comparisons within the table are case-sensitive.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool CaseSensitive { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the comparison is case-sensitive; otherwise <code>false</code>. The default is set to the parent <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> object&#39;s <span class=\"xref\">stem.Data.DataSet.CaseSensitive*</span> property, or <code>false</code> if the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> was created independently of a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The CaseSensitive property affects string comparisons in sorting, searching, and filtering.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example calls the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_Select_\" data-linktype=\"relative-path\">Select</a> method twice on a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>. The first time, the CaseSensitive property is set to <code>false</code>, the second, to <code>true</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData DataTable.CaseSensitive Example#1\">private static void ToggleCaseSensitive()\n{\n    DataTable t;\n    DataRow[] foundRows;\n\n    t = CreateDataSet().Tables[0];\n\n    t.CaseSensitive = false;\n    foundRows = t.Select(&quot;item = &#39;abc&#39;&quot;);\n\n    // Print out DataRow values.\n    PrintRowValues(foundRows, &quot;CaseSensitive = False&quot;);\n\n    t.CaseSensitive = true;\n    foundRows = t.Select(&quot;item = &#39;abc&#39;&quot;);\n\n    PrintRowValues(foundRows, &quot;CaseSensitive = True&quot;);\n}\n\npublic static DataSet CreateDataSet()\n{\n    // Create a DataSet with one table, two columns\n    DataSet ds = new DataSet();\n    DataTable t = new DataTable(&quot;Items&quot;);\n\n    // Add table to dataset\n    ds.Tables.Add(t);\n\n    // Add two columns\n    DataColumn c;\n\n    // First column\n    c = t.Columns.Add(&quot;id&quot;, typeof(int));\n    c.AutoIncrement = true;\n\n    // Second column\n    t.Columns.Add(&quot;item&quot;, typeof(string));\n\n    // Set primary key\n    t.PrimaryKey = new DataColumn[] { t.Columns[&quot;id&quot;] };\n\n    // Add twelve rows\n    for (int i = 0; i &lt; 10; i++)\n    {\n        t.Rows.Add(new object[] { i, i.ToString() });\n    }\n    t.Rows.Add(new object[] { 11, &quot;abc&quot; });\n    t.Rows.Add(new object[] { 15, &quot;ABC&quot; });\n\n    return ds;\n}\n\nprivate static void PrintRowValues(DataRow[] rows, string label)\n{\n    Console.WriteLine();\n    Console.WriteLine(label);\n    if (rows.Length &lt;= 0)\n    {\n        Console.WriteLine(&quot;no rows found&quot;);\n        return;\n    }\n    foreach (DataRow r in rows)\n    {\n        foreach (DataColumn c in r.Table.Columns)\n        {\n            Console.Write(&quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, r[c]);\n        }\n        Console.WriteLine();\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData DataTable.CaseSensitive Example#1\">\nPrivate Sub ToggleCaseSensitive()\n    Dim t As DataTable\n    Dim foundRows() As DataRow\n\n    t = CreateDataSet().Tables(0)\n\n    t.CaseSensitive = False\n    foundRows = t.Select(&quot;item = &#39;abc&#39;&quot;)\n\n    &#39; Print out DataRow values. Row 0 contains the value we&#39;re looking for.\n    PrintRowValues(foundRows, &quot;CaseSensitive = False&quot;)\n\n    t.CaseSensitive = True\n    foundRows = t.Select(&quot;item = &#39;abc&#39;&quot;)\n\n    PrintRowValues(foundRows, &quot;CaseSensitive = True&quot;)\nEnd Sub\n\nPublic Function CreateDataSet() As DataSet\n    &#39; Create a DataSet with one table, two columns\n    Dim ds As New DataSet\n    Dim t As New DataTable(&quot;Items&quot;)\n\n    &#39; Add table to DataSet\n    ds.Tables.Add(t)\n\n    &#39; Add two columns\n    Dim c As DataColumn\n\n    &#39; First column\n    c = t.Columns.Add(&quot;id&quot;, Type.GetType(&quot;System.Int32&quot;))\n    c.AutoIncrement = True\n\n    &#39; Second column\n    t.Columns.Add(&quot;item&quot;, Type.GetType(&quot;System.String&quot;))\n\n    &#39; Set primary key\n    t.PrimaryKey = New DataColumn() {t.Columns(&quot;id&quot;)}\n\n    For i As Integer = 0 To 9\n        t.Rows.Add(New Object() {i, i.ToString()})\n    Next\n    t.Rows.Add(New Object() {11, &quot;abc&quot;})\n    t.Rows.Add(New Object() {15, &quot;ABC&quot;})\n\n    CreateDataSet = ds\nEnd Function\n\nPrivate Sub PrintRowValues(ByRef rows As DataRow(), ByVal label As String)\n    Console.WriteLine()\n    Console.WriteLine(label)\n    If rows.Length &lt;= 0 Then\n        Console.WriteLine(&quot;no rows found&quot;)\n        Return\n    End If\n\n    For Each r As DataRow In rows\n        For Each c As DataColumn In r.Table.Columns\n            Console.Write(vbTab &amp; &quot; {0}&quot;, r(c))\n        Next\n        Console.WriteLine()\n    Next\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_ChildRelations\">\r\n    \r\n            <a id=\"System_Data_DataTable_ChildRelations_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ChildRelations</div>        \r\n          </div>\r\n    \r\n            <p>Gets the collection of child relations for this <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.DataRelationCollection ChildRelations { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datarelationcollection\" data-linktype=\"relative-path\">DataRelationCollection</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.data.datarelationcollection\" data-linktype=\"relative-path\">DataRelationCollection</a> that contains the child relations for the table. An empty collection is returned if no <a class=\"xref\" href=\"system.data.datarelation\" data-linktype=\"relative-path\">DataRelation</a> objects exist.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A <a class=\"xref\" href=\"system.data.datarelation\" data-linktype=\"relative-path\">DataRelation</a> defines the relationship between two tables. Typically, two tables are linked through a single field that contains the same data. For example, a table which contains address data may have a single field containing codes that represent countries/regions. A second table that contains country/region data will have a single field that contains the code that identifies the country/region, and it is this code which is inserted into the corresponding field in the first table. A <a class=\"xref\" href=\"system.data.datarelation\" data-linktype=\"relative-path\">DataRelation</a>, then, contains at least four pieces of information: (1) the name of the first table, (2) the column name in the first table, (3) the name of the second table, and (4) the column name in the second table.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the ChildRelations property to return each child <a class=\"xref\" href=\"system.data.datarelation\" data-linktype=\"relative-path\">DataRelation</a> in a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>. Each relation is then used as an argument in the <a class=\"xref\" href=\"system.data.datarow#System_Data_DataRow_GetChildRows_\" data-linktype=\"relative-path\">GetChildRows</a> method of the <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> to return an array of rows. The value of each column in the row is then printed.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData DataTable.ChildRelations Example#1\">Public Sub GetChildRowsFromDataRelation()\n    &#39; For each row in the table, get the child rows using the\n    &#39; ChildRelations. For each item in the array, print the value\n    &#39; of each column.\n    Dim table As DataTable = CreateDataSet().Tables(&quot;Customers&quot;)\n\n    Dim childRows() As DataRow\n    Dim relation as DataRelation\n    Dim row as DataRow\n    For Each  relation In table.ChildRelations\n        For Each row In table.Rows\n            PrintRowValues(new DataRow() {row}, &quot;Parent Row&quot;)\n            childRows = row.GetChildRows(relation)\n            &#39; Print values of rows.\n            PrintRowValues(childRows, &quot;child rows&quot;)\n        Next row\n    Next relation\nEnd Sub\n\nPublic Function CreateDataSet() As DataSet\n    &#39; create a DataSet with one table, two columns\n    Dim dataSet As DataSet\n    dataSet = new DataSet()\n\n    &#39; create Customer table\n    Dim table As DataTable\n    table = new DataTable(&quot;Customers&quot;)\n\n    dataSet.Tables.Add(table)\n    table.Columns.Add(&quot;customerId&quot;, _\n        GetType(Integer)).AutoIncrement = true\n    table.Columns.Add(&quot;name&quot;, GetType(String))\n    table.PrimaryKey = new DataColumn() _\n        { table.Columns(&quot;customerId&quot;) }\n\n    &#39; create Orders table\n    table = new DataTable(&quot;Orders&quot;)\n    dataSet.Tables.Add(table)\n    table.Columns.Add(&quot;orderId&quot;, GetType(Integer)).AutoIncrement = true\n    table.Columns.Add(&quot;customerId&quot;, GetType(Integer))\n    table.Columns.Add(&quot;amount&quot;, GetType(Double))\n    table.PrimaryKey = new DataColumn() { table.Columns(&quot;orderId&quot;) }\n\n    &#39; create relation\n    dataSet.Relations.Add(dataSet.Tables(&quot;Customers&quot;).Columns(&quot;customerId&quot;), _\n        dataSet.Tables(&quot;Orders&quot;).Columns(&quot;customerId&quot;))\n\t\n    &#39; populate the tables\n    Dim orderId As Integer = 1\n    Dim customerId As Integer\n    Dim i As Integer\n    For customerId = 1 To 10\n        &#39; add customer record\n        dataSet.Tables(&quot;Customers&quot;).Rows.Add( _\n            new object() { customerId, _\n            string.Format(&quot;customer{0}&quot;, customerId) })\n\t\t\n        &#39; add 5 order records for each customer\n\n        For i = 1 To 5\n            dataSet.Tables(&quot;Orders&quot;).Rows.Add( _\n                new object() { orderId, customerId, orderId * 10 })\n\t    \n\t    orderId = orderId+1 \n\tNext\n    Next\n\n    CreateDataSet = dataSet\nEnd Function\n\nprivate sub PrintRowValues(rows() As DataRow, label As String)\n    Console.WriteLine(&quot;<br>{0}&quot;, label)\n    If rows.Length &lt;= 0\n        Console.WriteLine(&quot;no rows found&quot;)\n        Exit Sub\n    End If\n\n    Dim row As DataRow\n    Dim column As DataColumn\n\n    For Each row In rows\n        For Each column In row.Table.Columns\n            Console.Write(&quot;&nbsp;&nbsp;&nbsp;&nbsp;able {0}&quot;, row(column))\n        Next column\n        Console.WriteLine()\n    Next row\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData DataTable.ChildRelations Example#1\">    private static void GetChildRowsFromDataRelation()\n    {\n        /* For each row in the table, get the child rows using the\n        ChildRelations. For each item in the array, print the value\n        of each column. */\n        DataTable table = CreateDataSet().Tables[&quot;Customers&quot;];\n        DataRow[] childRows;\n        foreach(DataRelation relation in table.ChildRelations)\n        {\n            foreach(DataRow row in table.Rows)\n            {\n                PrintRowValues(new DataRow[] {row}, &quot;Parent Row&quot;);\n                childRows = row.GetChildRows(relation);\n                // Print values of rows.\n                PrintRowValues(childRows, &quot;child rows&quot;);\n            }\n        }\n    }\n\n    public static DataSet CreateDataSet()\n    {\n        // create a DataSet with one table, two columns\n        DataSet dataSet = new DataSet();\n\n        // create Customer table\n        DataTable table = new DataTable(&quot;Customers&quot;);\n        dataSet.Tables.Add(table);\n        table.Columns.Add(&quot;customerId&quot;, typeof(int)).AutoIncrement = true;\n        table.Columns.Add(&quot;name&quot;, typeof(string));\n        table.PrimaryKey = new DataColumn[] { table.Columns[&quot;customerId&quot;] };\n\n        // create Orders table\n        table = new DataTable(&quot;Orders&quot;);\n        dataSet.Tables.Add(table);\n        table.Columns.Add(&quot;orderId&quot;, typeof(int)).AutoIncrement = true;\n        table.Columns.Add(&quot;customerId&quot;, typeof(int));\n        table.Columns.Add(&quot;amount&quot;, typeof(double));\n        table.PrimaryKey = new DataColumn[] { table.Columns[&quot;orderId&quot;] };\n\n        // create relation\n        dataSet.Relations.Add(dataSet.Tables[&quot;Customers&quot;].Columns[&quot;customerId&quot;],\n            dataSet.Tables[&quot;Orders&quot;].Columns[&quot;customerId&quot;]);\n\t\n        // populate the tables\n        int orderId = 1;\n        for(int customerId=1; customerId&lt;=10; customerId++)\n        {\n            // add customer record\n            dataSet.Tables[&quot;Customers&quot;].Rows.Add(\n                new object[] { customerId, \n                string.Format(&quot;customer{0}&quot;, customerId) });\n\t\t\n            // add 5 order records for each customer\n            for(int i=1; i&lt;=5; i++)\n            {\n                dataSet.Tables[&quot;Orders&quot;].Rows.Add(\n                    new object[] { orderId++, customerId, orderId * 10 });\n            }\n        }\n\n        return dataSet;\n    }\n\n    private static void PrintRowValues(DataRow[] rows, string label)\n    {\n        Console.WriteLine(&quot;<br>{0}&quot;, label);\n        if(rows.Length &lt;= 0)\n        {\n            Console.WriteLine(&quot;no rows found&quot;);\n            return;\n        }\n        foreach(DataRow row in rows)\n        {\n            foreach(DataColumn column in row.Table.Columns)\n            {\n                Console.Write(&quot;&nbsp;&nbsp;&nbsp;&nbsp;able {0}&quot;, row[column]);\n            }\n            Console.WriteLine();\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_Columns\">\r\n    \r\n            <a id=\"System_Data_DataTable_Columns_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Columns</div>        \r\n          </div>\r\n    \r\n            <p>Gets the collection of columns that belong to this table.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.DataColumnCollection Columns { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datacolumncollection\" data-linktype=\"relative-path\">DataColumnCollection</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.data.datacolumncollection\" data-linktype=\"relative-path\">DataColumnCollection</a> that contains the collection of <a class=\"xref\" href=\"system.data.datacolumn\" data-linktype=\"relative-path\">DataColumn</a> objects for the table. An empty collection is returned if no <a class=\"xref\" href=\"system.data.datacolumn\" data-linktype=\"relative-path\">DataColumn</a> objects exist.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.data.datacolumncollection\" data-linktype=\"relative-path\">DataColumnCollection</a> determines the schema of a table by defining the data type of each column.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example prints each value of each row in a table using the Columns property.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData DataTable.Columns Example#1\">Private Sub PrintValues(ByVal table As DataTable)\n    Dim row As DataRow\n    Dim column As DataColumn\n    For Each row in table.Rows\n       For Each column In table.Columns\n          Console.WriteLine(row(column))\n       Next\n    Next\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData DataTable.Columns Example#1\">    private void PrintValues(DataTable table)\n    {\n        foreach(DataRow row in table.Rows)\n        {\n            foreach(DataColumn column in table.Columns)\n            {\n                Console.WriteLine(row[column]);\n            }\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_Constraints\">\r\n    \r\n            <a id=\"System_Data_DataTable_Constraints_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Constraints</div>        \r\n          </div>\r\n    \r\n            <p>Gets the collection of constraints maintained by this table.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.ConstraintCollection Constraints { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.constraintcollection\" data-linktype=\"relative-path\">ConstraintCollection</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.data.constraintcollection\" data-linktype=\"relative-path\">ConstraintCollection</a> that contains the collection of <a class=\"xref\" href=\"system.data.constraint\" data-linktype=\"relative-path\">Constraint</a> objects for the table. An empty collection is returned if no <a class=\"xref\" href=\"system.data.constraint\" data-linktype=\"relative-path\">Constraint</a> objects exist.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A <a class=\"xref\" href=\"system.data.foreignkeyconstraint\" data-linktype=\"relative-path\">ForeignKeyConstraint</a> restricts the action performed when a value in a column (or columns) is either deleted or updated. Such a constraint is intended to be used with primary key columns. In a parent/child relationship between two tables, deleting a value from the parent table can affect the child rows in one of the following ways.  </p>\n<ul>\n<li><p>The child rows can also be deleted (a cascading action).  </p>\n</li>\n<li><p>The values in the child column (or columns) can be set to null values.  </p>\n</li>\n<li><p>The values in the child column (or columns) can be set to default values.  </p>\n</li>\n<li><p>An exception can be generated.  </p>\n<p>A <a class=\"xref\" href=\"system.data.uniqueconstraint\" data-linktype=\"relative-path\">UniqueConstraint</a> becomes active when attempting to set a value in a primary key to a non-unique value.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example adds a <a class=\"xref\" href=\"system.data.foreignkeyconstraint\" data-linktype=\"relative-path\">ForeignKeyConstraint</a> to the collection of constraints.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData DataTable.Constraints Example#1\">Private Sub CreateConstraint(dataSet As DataSet, _\n    table1 As String, table2 As String, _\n    column1 As String, column2 As String)\n\n    Dim idKeyRestraint As ForeignKeyConstraint = _\n        New ForeignKeyConstraint _\n        (dataSet.Tables(table1).Columns(column1), _\n        dataSet.Tables(table2).Columns(column2))\n\n    &#39; Set null values when a value is deleted.\n    idKeyRestraint.DeleteRule = Rule.SetNull\n    idKeyRestraint.UpdateRule = Rule.Cascade\n\n    &#39; Set AcceptRejectRule to cascade changes.\n    idKeyRestraint.AcceptRejectRule = AcceptRejectRule.Cascade\n    \n    dataSet.Tables(table1).Constraints.Add(idKeyRestraint)\n    dataSet.EnforceConstraints = True\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData DataTable.Constraints Example#1\">    private void CreateConstraint(DataSet dataSet, \n        string table1, string table2, string column1, string column2)\n    {\n        ForeignKeyConstraint idKeyRestraint = new \n            ForeignKeyConstraint(dataSet.Tables[table1].Columns[column1],\n            dataSet.Tables[table2].Columns[column2]);\n\n        // Set null values when a value is deleted.\n        idKeyRestraint.DeleteRule = Rule.SetNull;\n        idKeyRestraint.UpdateRule = Rule.Cascade;\n\n        // Set AcceptRejectRule to cascade changes.\n        idKeyRestraint.AcceptRejectRule = AcceptRejectRule.Cascade;\n \n        dataSet.Tables[table1].Constraints.Add(idKeyRestraint);\n        dataSet.EnforceConstraints = true;\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_DataSet\">\r\n    \r\n            <a id=\"System_Data_DataTable_DataSet_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DataSet</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> to which this table belongs.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.DataSet DataSet { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> to which this table belongs.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If a control is data bound to a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>, and the table belongs to a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>, you can get to the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> through this property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example returns the parent <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> of a given table through the DataSet property.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData DataTable.DataSet Example#1\">Private Function GetDataSetFromTable() As DataSet\n    Dim table As DataTable\n\n    &#39; Check to see if the DataGrid&#39;s DataSource property\n    &#39; is a DataTable.\n    If TypeOf dataGrid1.DataSource Is DataTable Then\n        table = CType(DataGrid1.DataSource, DataTable)\n        GetDataSetFromTable = table.DataSet\n    Else\n        return Nothing\n    End If\nEnd Function\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData DataTable.DataSet Example#1\">    private DataSet GetDataSetFromTable()\n    {\n        DataTable table;\n \n        // Check to see if the DataGrid&#39;s DataSource\n        // is a DataTable.\n        if( dataGrid1.DataSource is DataTable)\n        {\n            table = (DataTable) dataGrid1.DataSource;\n            // Return the DataTable&#39;s DataSet\n            return table.DataSet;\n        }\n        else\n        {\n            return null;\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_DefaultView\">\r\n    \r\n            <a id=\"System_Data_DataTable_DefaultView_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefaultView</div>        \r\n          </div>\r\n    \r\n            <p>Gets a customized view of the table that may include a filtered view, or a cursor position.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.DataView DefaultView { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.dataview\" data-linktype=\"relative-path\">DataView</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.data.dataview\" data-linktype=\"relative-path\">DataView</a> associated with the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The DefaultView property returns a <a class=\"xref\" href=\"system.data.dataview\" data-linktype=\"relative-path\">DataView</a> you can use to sort, filter, and search a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example sets a property of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> object&#39;s <a class=\"xref\" href=\"system.data.dataview\" data-linktype=\"relative-path\">DataView</a> through the DefaultView property. The example also shows the binding of a <a class=\"xref\" href=\"system.windows.forms.datagridview\" data-linktype=\"relative-path\">DataGridView</a> control to a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> named &quot;Suppliers&quot; that includes a column named &quot;CompanyName.&quot;  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData DataTable.DefaultView Example#1\">    private void BindDataGrid()\n    {\n        DataTable table = new DataTable();\n    \n        // Insert code to populate a DataTable with data.\n\n        // Bind grid to DataTable.\n        dataGrid1.DataSource = table;\n    }\n \n    private void ChangeRowFilter()\n    {\n        DataTable gridTable = (DataTable) dataGrid1.DataSource;\n\n        // Set the RowFilter to display a company names that \n        // begin with A through I..\n        gridTable.DefaultView.RowFilter = &quot;CompanyName &lt; &#39;I&#39;&quot;;\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData DataTable.DefaultView Example#1\"> Private Sub BindDataGrid()\n    Dim table As New DataTable\n\n    &#39; Insert code to populate a DataTable with data.\n\n    &#39; Bind DataGrid to DataTable\n    DataGrid1.DataSource = table\n End Sub \n \n Private Sub ChangeRowFilter()\n    Dim gridTable As DataTable = _\n        CType(dataGrid1.DataSource, DataTable)\n\n    &#39; Set the RowFilter to display a company names \n    &#39; that begin with A through I.\n    gridTable.DefaultView.RowFilter = &quot;CompanyName &lt; &#39;I&#39;&quot;\n End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_DisplayExpression\">\r\n    \r\n            <a id=\"System_Data_DataTable_DisplayExpression_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DisplayExpression</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the expression that returns a value used to represent this table in the user interface. The <code>DisplayExpression</code> property lets you display the name of this table in a user interface.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string DisplayExpression { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A display string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_ExtendedProperties\">\r\n    \r\n            <a id=\"System_Data_DataTable_ExtendedProperties_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExtendedProperties</div>        \r\n          </div>\r\n    \r\n            <p>Gets the collection of customized user information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.PropertyCollection ExtendedProperties { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.propertycollection\" data-linktype=\"relative-path\">PropertyCollection</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.data.propertycollection\" data-linktype=\"relative-path\">PropertyCollection</a> that contains custom user information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the ExtendedProperties to add custom information to a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>. Add information with the <code>Add</code> method. Retrieve information with the <code>Item</code> method.  </p>\n<p> Extended properties must be of type <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>. Properties that are not of type String are not persisted when the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> is written as XML.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example adds a timestamp value to the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> through the ExtendedProperties property.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData DataTable.ExtendedProperties Example#1\"> private void GetAndSetExtendedProperties(DataTable myTable){\n    // Add an item to the collection.\n    myTable.ExtendedProperties.Add(&quot;TimeStamp&quot;, DateTime.Now);\n    // Print the item.\n    Console.WriteLine(myTable.ExtendedProperties[&quot;TimeStamp&quot;]);\n }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData DataTable.ExtendedProperties Example#1\"> Private Sub GetAndSetExtendedProperties(ByVal myTable As DataTable)\n    &#39; Add an item to the collection.\n    myTable.ExtendedProperties.Add(&quot;TimeStamp&quot;, DateTime.Now)\n    &#39; Print the item.\n    Console.WriteLine(myTable.ExtendedProperties.Item(&quot;TimeStamp&quot;))\n End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_HasErrors\">\r\n    \r\n            <a id=\"System_Data_DataTable_HasErrors_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HasErrors</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether there are errors in any of the rows in any of the tables of the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> to which the table belongs.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool HasErrors { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if errors exist; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>As users work on a set of data contained in a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>, you can mark each change with an error if the change causes some validation failure. You can mark an entire <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> with an error message using the <a class=\"xref\" href=\"system.data.datarow#System_Data_DataRow_RowError_\" data-linktype=\"relative-path\">RowError</a> property. You can also set errors on each column of the row with the <a class=\"xref\" href=\"system.data.datarow#System_Data_DataRow_SetColumnError_\" data-linktype=\"relative-path\">SetColumnError</a> method.  </p>\n<p> Before updating a data source with a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>, it&#39;s recommended that you first invoke the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_GetChanges_\" data-linktype=\"relative-path\">GetChanges</a> method on the target <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>. The method results in a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> that contains only the changes made to the original. Before sending the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> to the data source for updating, check the HasErrors property of each table to see if any errors have been attached to the rows or columns in the rows.  </p>\n<p> After reconciling each error, clear the errors with the <a class=\"xref\" href=\"system.data.datarow#System_Data_DataRow_ClearErrors_\" data-linktype=\"relative-path\">ClearErrors</a> method of the <code>DataRow</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the HasErrors property to check if a table contains errors.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData DataTable.HasErrors Example#1\">    private void CheckForErrors(DataSet dataSet) \n    {\n        // Invoke GetChanges on the DataSet to create a reduced set.\n        DataSet thisDataSet = dataSet.GetChanges();\n\n        // Check each table&#39;s HasErrors property.\n        foreach(DataTable table in thisDataSet.Tables) \n        {\n            // If HasErrors is true, reconcile errors.\n            if(table.HasErrors) \n            {\n                // Insert code to reconcile errors.\n            }\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData DataTable.HasErrors Example#1\"> Private Sub CheckForErrors(dataSet As DataSet)\n     &#39; Invoke GetChanges on the DataSet to create a reduced set.\n     Dim thisDataSet As DataSet = dataSet.GetChanges()\n\n     &#39; Check each table&#39;s HasErrors property.\n     Dim table As DataTable\n     For Each table In thisDataSet.Tables\n         &#39; If HasErrors is true, reconcile errors.\n         If table.HasErrors Then\n             &#39; Insert code to reconcile errors.\n         End If\n     Next table\n End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_IsInitialized\">\r\n    \r\n            <a id=\"System_Data_DataTable_IsInitialized_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsInitialized</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> is initialized.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsInitialized { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to indicate the component has completed initialization; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Returns the status of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> while it’s being constructed, for instance by Visual Studio. The <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_BeginInit_\" data-linktype=\"relative-path\">BeginInit</a> method sets it to <code>false</code> and <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_EndInit_\" data-linktype=\"relative-path\">EndInit</a> method sets it to <code>true</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_Locale\">\r\n    \r\n            <a id=\"System_Data_DataTable_Locale_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Locale</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the locale information used to compare strings within the table.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Globalization.CultureInfo Locale { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> that contains data about the user&#39;s machine locale. The default is the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> object&#39;s <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> (returned by the <span class=\"xref\">stem.Data.DataSet.Locale*</span> property) to which the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> belongs; if the table doesn&#39;t belong to a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>, the default is the current system <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> represents the software preferences of a particular culture or community.  </p>\n<p> When used for string comparisons, the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> affects sorting, comparisons, and filtering.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In columns that contain expressions, the <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> is used. The <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> is ignored.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example sets the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> through the Locale and prints the ISO language name.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData DataTable.Locale Example#1\">    private void ChangeCultureInfo(DataTable table)\n    {\n        // Print the LCID  of the present CultureInfo.\n        Console.WriteLine(table.Locale.LCID);\n\n        // Create a new CultureInfo for the United Kingdom.\n        CultureInfo myCultureInfo = new CultureInfo(&quot;en-gb&quot;);\n        table.Locale = myCultureInfo;\n\n        // Print the new LCID.\n        Console.WriteLine(table.Locale.LCID); \n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData DataTable.Locale Example#1\"> Private Sub ChangeCultureInfo(table As DataTable)\n    &#39; Print the LCID  of the present CultureInfo.\n    Console.WriteLine(table.Locale.LCID)\n\n    &#39; Create a new CultureInfo for the United Kingdom.\n    Dim myCultureInfo As CultureInfo = New CultureInfo(&quot;en-gb&quot;)\n    table.Locale = myCultureInfo\n\n    &#39; Print the new LCID.\n    Console.WriteLine(table.Locale.LCID) \n End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_MinimumCapacity\">\r\n    \r\n            <a id=\"System_Data_DataTable_MinimumCapacity_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MinimumCapacity</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the initial starting size for this table.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int MinimumCapacity { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The initial starting size in rows of this table. The default is 50.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The MinimumCapacity allows the system to create an appropriate set of resources before fetching data. In a situation when performance is critical, setting this property can optimize performance.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example sets the MinimumCapacity of a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData DataTable.MinimumCapacity Example#1\"> Private Sub SetMinimumCapacity(ByVal table As DataTable)\n    &#39; Change the MinimumCapacity.\n    table.MinimumCapacity = 100\n End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData DataTable.MinimumCapacity Example#1\">    private void SetMinimumCapacity(DataTable table)\n    {\n        // Change the MinimumCapacity.\n        table.MinimumCapacity = 100;\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_Namespace\">\r\n    \r\n            <a id=\"System_Data_DataTable_Namespace_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Namespace</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the namespace for the XML representation of the data stored in the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Namespace { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The namespace of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_ParentRelations\">\r\n    \r\n            <a id=\"System_Data_DataTable_ParentRelations_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ParentRelations</div>        \r\n          </div>\r\n    \r\n            <p>Gets the collection of parent relations for this <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.DataRelationCollection ParentRelations { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datarelationcollection\" data-linktype=\"relative-path\">DataRelationCollection</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.data.datarelationcollection\" data-linktype=\"relative-path\">DataRelationCollection</a> that contains the parent relations for the table. An empty collection is returned if no <a class=\"xref\" href=\"system.data.datarelation\" data-linktype=\"relative-path\">DataRelation</a> objects exist.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the ParentRelations property to return each parent <a class=\"xref\" href=\"system.data.datarelation\" data-linktype=\"relative-path\">DataRelation</a> in a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>. Each relation is then used as an argument in the <a class=\"xref\" href=\"system.data.datarow#System_Data_DataRow_GetParentRows_\" data-linktype=\"relative-path\">GetParentRows</a> method of the <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> to return an array of rows. The value of each column in the row is then printed.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData DataTable.ParentRelations Example#1\">    private void GetChildRowsFromDataRelation(DataTable table)\n    {\n        DataRow[] rowArray;\n        foreach(DataRelation relation in table.ParentRelations)\n        {\n            foreach(DataRow row in table.Rows)\n            {\n                rowArray = row.GetParentRows(relation);\n                // Print values of rows.\n                for(int i = 0; i &lt; rowArray.Length; i++)\n                {\n                    foreach(DataColumn column in table.Columns)\n                    {\n                        Console.WriteLine(rowArray[i][column]);\n                    }\n                }\n            }\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData DataTable.ParentRelations Example#1\"> Private Sub GetChildRowsFromDataRelation(table As DataTable)\n     Dim rowArray() As DataRow\n     Dim relation As DataRelation, row As DataRow\n     Dim column As DataColumn, i As Integer     \n     For Each relation In  table.ParentRelations\n         For Each row In  table.Rows\n             rowArray = row.GetParentRows(relation)\n             &#39; Print values of rows.             \n             For i = 0 To rowArray.Length - 1                 \n                 For Each column In  table.Columns\n                     Console.WriteLine(rowArray(i)(column))\n                 Next column\n             Next i\n         Next row\n     Next relation\n End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_Prefix\">\r\n    \r\n            <a id=\"System_Data_DataTable_Prefix_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Prefix</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the namespace for the XML representation of the data stored in the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Prefix { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The prefix of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_PrimaryKey\">\r\n    \r\n            <a id=\"System_Data_DataTable_PrimaryKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PrimaryKey</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets an array of columns that function as primary keys for the data table.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.DataColumn[] PrimaryKey { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datacolumn\" data-linktype=\"relative-path\">DataColumn</a>[]</div>\r\n                  </div>\r\n                  <p>An array of <a class=\"xref\" href=\"system.data.datacolumn\" data-linktype=\"relative-path\">DataColumn</a> objects.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.dataexception\" data-linktype=\"relative-path\">DataException</a></div>\r\n                  </div>\r\n                  <p>The key is a foreign key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The primary key of a table must be unique to identify the record in the table. It&#39;s also possible to have a table with a primary key made up of two or more columns. This occurs when a single column can&#39;t contain enough unique values. For example, a two column primary key might consist of a &quot;FirstName&quot; and &quot;LastName&quot; column. Because primary keys can be made up of more than one column, the PrimaryKey property consists of an array of <a class=\"xref\" href=\"system.data.datacolumn\" data-linktype=\"relative-path\">DataColumn</a> objects.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The first example shows how to return the primary key columns for a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> displayed in a <code>DataGrid</code>. The second example demonstrates how to set the primary key columns for a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData DataTable.PrimaryKey Example#1\">    private void GetPrimaryKeys(DataTable table)\n    {\n        // Create the array for the columns.\n        DataColumn[] columns;\n        columns = table.PrimaryKey;\n\n        // Get the number of elements in the array.\n        Console.WriteLine(&quot;Column Count: &quot; + columns.Length);\n        for(int i = 0; i &lt; columns.Length; i++)\n        {\n            Console.WriteLine(columns[i].ColumnName + columns[i].DataType);\n        }\n    }\n \n    private void SetPrimaryKeys()\n    {\n        // Create a new DataTable and set two DataColumn objects as primary keys.\n        DataTable table = new DataTable();\n        DataColumn[] keys = new DataColumn[2];\n        DataColumn column;\n\n        // Create column 1.\n        column = new DataColumn();\n        column.DataType = System.Type.GetType(&quot;System.String&quot;);\n        column.ColumnName= &quot;FirstName&quot;;\n\n        // Add the column to the DataTable.Columns collection.\n        table.Columns.Add(column);\n\n        // Add the column to the array.\n        keys[0] = column;\n \n        // Create column 2 and add it to the array.\n        column = new DataColumn();\n        column.DataType = System.Type.GetType(&quot;System.String&quot;);\n        column.ColumnName = &quot;LastName&quot;;\n        table.Columns.Add(column);\n\n        // Add the column to the array.\n        keys[1] = column;\n\n        // Set the PrimaryKeys property to the array.\n        table.PrimaryKey = keys;\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData DataTable.PrimaryKey Example#1\"> Private Sub GetPrimaryKeys(table As DataTable)\n    &#39; Create the array for the columns.\n    Dim columns() As DataColumn \n    columns = table.PrimaryKey\n\n    &#39; Get the number of elements in the array.\n    Console.WriteLine(&quot;Column Count: &quot; &amp; columns.Length.ToString())\n    Dim i As Integer\n    For i = 0 To columns.GetUpperBound(0)\n       Console.WriteLine(columns(i).ColumnName &amp; columns(i).DataType.ToString())\n    Next i\n End Sub\n \n Private Sub SetPrimaryKeys()\n    &#39; Create a new DataTable and set two DataColumn objects as primary keys.\n    Dim table As DataTable = new DataTable()\n    Dim keys(2) As DataColumn\n    Dim column  As DataColumn\n\n    &#39; Create column 1.\n    column = New DataColumn()\n    column.DataType = System.Type.GetType(&quot;System.String&quot;)\n    column.ColumnName= &quot;FirstName&quot;\n\n    &#39; Add the column to the DataTable.Columns collection.\n    table.Columns.Add(column)\n    &#39; Add the column to the array.\n    keys(0) = column\n \n    &#39; Create column 2 and add it to the array.\n    column = New DataColumn()\n    column.DataType = System.Type.GetType(&quot;System.String&quot;)\n    column.ColumnName = &quot;LastName&quot;\n    table.Columns.Add(column)\n\n    &#39; Add the column to the array.\n    keys(1) = column\n\n    &#39; Set the PrimaryKeys property to the array.\n    table.PrimaryKey = keys\n End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_RemotingFormat\">\r\n    \r\n            <a id=\"System_Data_DataTable_RemotingFormat_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RemotingFormat</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the serialization format.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.SerializationFormat RemotingFormat { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.serializationformat\" data-linktype=\"relative-path\">SerializationFormat</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.data.serializationformat\" data-linktype=\"relative-path\">SerializationFormat</a> enumeration specifying either <code>Binary</code> or <code>Xml</code> serialization.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_Rows\">\r\n    \r\n            <a id=\"System_Data_DataTable_Rows_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Rows</div>        \r\n          </div>\r\n    \r\n            <p>Gets the collection of rows that belong to this table.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.DataRowCollection Rows { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datarowcollection\" data-linktype=\"relative-path\">DataRowCollection</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.data.datarowcollection\" data-linktype=\"relative-path\">DataRowCollection</a> that contains <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> objects; otherwise a null value if no <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> objects exist.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To create a new <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a>, you must use the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_NewRow_\" data-linktype=\"relative-path\">NewRow</a> method to return a new object. Such an object is automatically configured according to the schema defined for the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> through its collection of <a class=\"xref\" href=\"system.data.datacolumn\" data-linktype=\"relative-path\">DataColumn</a> objects. After creating a new row and setting the values for each column in the row, add the row to the <a class=\"xref\" href=\"system.data.datarowcollection\" data-linktype=\"relative-path\">DataRowCollection</a> using the <code>Add</code> method.  </p>\n<p> Each <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> in the collection represents a row of data in the table. To commit a change to the value of a column in the row, you must invoke the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_AcceptChanges_\" data-linktype=\"relative-path\">AcceptChanges</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following shows two examples of returning and setting rows. The first example uses the Rows property and prints the value of each column for every row. The second example uses the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> object&#39;s <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_NewRow_\" data-linktype=\"relative-path\">NewRow</a> method to create a new <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> object with the schema of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>. After setting the row values, the row is added to the <a class=\"xref\" href=\"system.data.datarowcollection\" data-linktype=\"relative-path\">DataRowCollection</a> through the <code>Add</code> method.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData DataTable.Rows Example#1\">    private void PrintRows(DataSet dataSet)\n    {\n        // For each table in the DataSet, print the values of each row.\n        foreach(DataTable thisTable in dataSet.Tables)\n        {\n            // For each row, print the values of each column.\n            foreach(DataRow row in thisTable.Rows)\n            {\n                foreach(DataColumn column in thisTable.Columns)\n                {\n                    Console.WriteLine(row[column]);\n                }\n            }\n        }\n    }\n \n \n    private void AddARow(DataSet dataSet)\n    {\n        DataTable table;\n        table = dataSet.Tables[&quot;Suppliers&quot;];\n        // Use the NewRow method to create a DataRow with \n        // the table&#39;s schema.\n        DataRow newRow = table.NewRow();\n\n        // Set values in the columns:\n        newRow[&quot;CompanyID&quot;] = &quot;NewCompanyID&quot;;\n        newRow[&quot;CompanyName&quot;] = &quot;NewCompanyName&quot;;\n\n        // Add the row to the rows collection.\n        table.Rows.Add(newRow);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData DataTable.Rows Example#1\">Private Sub PrintRows(dataSet As DataSet)\n     &#39; For each table in the DataSet, print the values of each row.\n     Dim thisTable As DataTable\n     For Each thisTable In  dataSet.Tables\n         &#39; For each row, print the values of each column.\n         Dim row As DataRow\n         For Each row In  thisTable.Rows\n             Dim column As DataColumn\n             For Each column In  thisTable.Columns\n                 Console.WriteLine(row(column))\n             Next column\n         Next row\n     Next thisTable\nEnd Sub\n    \n    \nPrivate Sub AddARow(dataSet As DataSet)\n    Dim table As DataTable = dataSet.Tables(&quot;Suppliers&quot;)\n    &#39; Use the NewRow method to create a DataRow \n    &#39;with the table&#39;s schema.\n    Dim newRow As DataRow = table.NewRow()\n\n    &#39; Set values in the columns:\n    newRow(&quot;CompanyID&quot;) = &quot;NewCompanyID&quot;\n    newRow(&quot;CompanyName&quot;) = &quot;NewCompanyName&quot;\n\n    &#39; Add the row to the rows collection.\n    table.Rows.Add(newRow)\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_Site\">\r\n    \r\n            <a id=\"System_Data_DataTable_Site_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Site</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets an <a class=\"xref\" href=\"system.componentmodel.isite\" data-linktype=\"relative-path\">ISite</a> for the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.ComponentModel.ISite Site { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.isite\" data-linktype=\"relative-path\">ISite</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.componentmodel.isite\" data-linktype=\"relative-path\">ISite</a> for the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Sites bind a <a class=\"xref\" href=\"system.componentmodel.component\" data-linktype=\"relative-path\">Component</a> to a <a class=\"xref\" href=\"system.componentmodel.container\" data-linktype=\"relative-path\">Container</a> and enable communication between them, as well as provide a way for the container to manage its components.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_TableName\">\r\n    \r\n            <a id=\"System_Data_DataTable_TableName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TableName</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the name of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string TableName { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>null</code> or empty string (&quot;&quot;) is passed in and this table belongs to a collection.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.duplicatenameexception\" data-linktype=\"relative-path\">DuplicateNameException</a></div>\r\n                  </div>\r\n                  <p>The table belongs to a collection that already has a table with the same name. (Comparison is case-sensitive).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The TableName is used to return this table from the parent <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> object&#39;s <a class=\"xref\" href=\"system.data.datatablecollection\" data-linktype=\"relative-path\">DataTableCollection</a> (returned by the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_Tables_\" data-linktype=\"relative-path\">Tables</a> property).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example prints the TableName for each table in a collection of <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> objects.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData DataTable.TableName Example#1\">    private void GetTableNames(DataSet dataSet)\n    {\n        // Print each table&#39;s TableName.\n        foreach(DataTable table in dataSet.Tables)\n        {\n            Console.WriteLine(table.TableName);\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData DataTable.TableName Example#1\">Private Sub GetTableNames(dataSet As DataSet)\n     &#39; Print each table&#39;s TableName.\n     Dim table As DataTable\n     For Each table In dataSet.Tables\n         Console.WriteLine(table.TableName)\n     Next table\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_AcceptChanges\">\r\n    \r\n            <a id=\"System_Data_DataTable_AcceptChanges_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AcceptChanges()</div>        \r\n          </div>\r\n    \r\n            <p>Commits all the changes made to this table since the last time AcceptChanges was called.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AcceptChanges ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When AcceptChanges is called, any <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> object still in edit mode successfully ends its edits. The <a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a> also changes: all <code>Added</code> and <code>Modified</code> rows become <code>Unchanged</code>, and <code>Deleted</code> rows are removed.  </p>\n<p> The AcceptChanges method is generally called on a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> after you attempt to update the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> using the <a class=\"xref\" href=\"system.data.common.dbdataadapter#System_Data_Common_DbDataAdapter_Update_\" data-linktype=\"relative-path\">Update</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example tests each table for errors. If the table&#39;s errors can be reconciled (by passing it to an undefined function), AcceptChanges is called; otherwise, <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_RejectChanges_\" data-linktype=\"relative-path\">RejectChanges</a> is called.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData DataTable.AcceptChanges Example#1\">Private Sub AcceptOrReject(table As DataTable)\n    &#39; If there are errors, try to reconcile.\n        If (table.HasErrors) Then\n            If (Reconcile(table)) Then\n                &#39; Fixed all errors.\n                table.AcceptChanges()\n            Else\n                &#39; Couldn&#39;table fix all errors.\n                table.RejectChanges()\n            End If\n        Else\n            &#39; If no errors, AcceptChanges.\n            table.AcceptChanges()\n        End If\n End Sub\n \nPrivate Function Reconcile(thisTable As DataTable) As Boolean\n    Dim row As DataRow\n    For Each row in thisTable.Rows\n       &#39;Insert code to try to reconcile error.\n\n       &#39; If there are still errors return immediately\n       &#39; since the caller rejects all changes upon error.\n       If row.HasErrors Then\n           Reconcile = False\n           Exit Function\n       End If\n    Next row\n    Reconcile = True\n End Function\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData DataTable.AcceptChanges Example#1\">    private void AcceptOrReject(DataTable table)\n    {\n        // If there are errors, try to reconcile.\n        if(table.HasErrors)\n        { \n            if(Reconcile(table))\n            {\n                // Fixed all errors.\n                table.AcceptChanges();\n            }\n            else\n            {\n                // Couldn&#39;table fix all errors.\n                table.RejectChanges();\n            }\n        }\n        else\n            // If no errors, AcceptChanges.\n            table.AcceptChanges();\n    }\n \n    private bool Reconcile(DataTable thisTable)\n    {\n        foreach(DataRow row in thisTable.Rows)\n        {\n            //Insert code to try to reconcile error.\n\n            // If there are still errors return immediately\n            // since the caller rejects all changes upon error.\n            if(row.HasErrors)\n                return false;\n        }\n        return true;\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_BeginInit\">\r\n    \r\n            <a id=\"System_Data_DataTable_BeginInit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginInit()</div>        \r\n          </div>\r\n    \r\n            <p>Begins the initialization of a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> that is used on a form or used by another component. The initialization occurs at run time.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void BeginInit ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Visual Studio .NET design environment uses this method to start the initialization of a component that is used on a form or used by another component. The <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_EndInit_\" data-linktype=\"relative-path\">EndInit</a> method ends the initialization. Using the BeginInit and <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_EndInit_\" data-linktype=\"relative-path\">EndInit</a> methods prevents the control from being used before it is fully initialized.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_BeginLoadData\">\r\n    \r\n            <a id=\"System_Data_DataTable_BeginLoadData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginLoadData()</div>        \r\n          </div>\r\n    \r\n            <p>Turns off notifications, index maintenance, and constraints while loading data.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void BeginLoadData ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use BeginLoadData in conjunction with <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_LoadDataRow_\" data-linktype=\"relative-path\">LoadDataRow</a> and <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_EndLoadData_\" data-linktype=\"relative-path\">EndLoadData</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_Clear\">\r\n    \r\n            <a id=\"System_Data_DataTable_Clear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clear()</div>        \r\n          </div>\r\n    \r\n            <p>Clears the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> of all data.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Clear ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>All rows in all tables are removed. An exception is generated if the table has any enforced child relations that would cause child rows to be orphaned.  </p>\n<p> If the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> is bound to an <a class=\"xref\" href=\"system.xml.xmldatadocument\" data-linktype=\"relative-path\">XmlDataDocument</a>, calling <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_Clear_\" data-linktype=\"relative-path\">Clear</a> or Clear raises the <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a>. To avoid this situation, traverse each table, removing each row one at a time. When you use <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_NewRow_\" data-linktype=\"relative-path\">NewRow</a> to create new rows, the rows must be processed before you call Clear.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example clears the table of all data.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData DataTable.Clear Example#1\">    private void ClearTable(DataTable table)\n    {\n        try\n        {\n            table.Clear();\n        }\n        catch (DataException e)\n        {\n            // Process exception and return.\n            Console.WriteLine(&quot;Exception of type {0} occurred.&quot;, \n                e.GetType());\n        }\n    \n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData DataTable.Clear Example#1\"> Private Sub ClearTable(table As DataTable)\n     Try\n         table.Clear()\n     Catch e As DataException\n\t &#39; Process exception and return.\n          Console.WriteLine(&quot;Exception of type {0} occurred.&quot;, _\n            e.GetType().ToString())\n     End Try\n End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_Clone\">\r\n    \r\n            <a id=\"System_Data_DataTable_Clone_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clone()</div>        \r\n          </div>\r\n    \r\n            <p>Clones the structure of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>, including all <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> schemas and constraints.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Data.DataTable Clone ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a></div>\r\n                  </div>\r\n                  <p>A new <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> with the same schema as the current <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If these classes have been derived, the clone will also be of the same derived classes.  </p>\n<p> Clone creates a new <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> with the same structure as the original <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>, but does not copy any data (the new <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> will not contain any <code>DataRows</code>). To copy both the structure and data into a new <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>, use <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_Copy_\" data-linktype=\"relative-path\">Copy</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following sample demonstrates how to update the structure and constraints of the destination table after you execute DataTable.Clone. The ClonedDataTable class will return a destination table and includes all the updating events. After the clone, structure changes in the source table won’t be reflected in the destination table. Specifically, this sample will:  </p>\n<ul>\n<li><p>Update the changes of the columns in source table.  </p>\n</li>\n<li><p>Update the changes of the UniqueConstraint in source table.  </p>\n</li>\n<li><p>Update the changes of the ForeignKeyConstraint in source table.  </p>\n<p>C# and Visual Basic projects with this code sample can be found on <a href=\"http://code.msdn.microsoft.com/site/search?f%5B0%5D.Type=SearchText&amp;f%5B0%5D.Value=How%20to%20automically%20update%20the%20structure%20of%20a%20cloned%20DataTable\" data-linktype=\"external\">Developer Code Samples</a>.  </p>\n</li>\n</ul>\n<pre><code>using System;  \nusing System.Linq;  \nusing System.Data;  \nusing System.ComponentModel;  \n\nclass Program {  \n   static void Main(string[] args) {  \n      DataTable courses = NewCourseDataTable();  \n      Console.WriteLine(&quot;This is the source table:&quot;);  \n      WriteDataTable(courses);  \n\n      ClonedDataTable clonedResult = new ClonedDataTable(courses);  \n      DataTable clonedCourses = clonedResult.DestinationTable;  \n      Console.WriteLine(&quot;This is the destination table:&quot;);  \n      WriteDataTable(clonedCourses);  \n\n      // Add the events of updating column collection into the source table.  \n      clonedResult.UpdateAddedColumn();  \n      clonedResult.UpdateDeletedColumn();  \n      // Add a DataColumn in source table.  \n      DataColumn columnCreidts = new DataColumn(&quot;Credits&quot;, typeof(Int32));  \n      courses.Columns.Add(columnCreidts);  \n      Console.WriteLine(&quot;After add a column in source table, it&#39;s the result in the destination:&quot;);  \n      WriteDataTable(clonedCourses);  \n\n      // Add the event of updating UniqueConstraint into the source table.  \n      clonedResult.UpdateUniqueConstraint();  \n\n      // Add the unique constraint in source table.  \n      UniqueConstraint uniqueConstraint = new UniqueConstraint(courses.Columns[&quot;CourseId&quot;]);  \n      courses.Constraints.Add(uniqueConstraint);  \n\n      Console.WriteLine(@&quot;If we add the unique constraint in source table and then insert the duplicate   \nrows into the destination table, we will get the following error:&quot;);  \n      InsertDuplicateData(clonedCourses);  \n      Console.WriteLine();  \n\n      // Add the event of updating ForeignKeyConstraint into the source table.  \n      clonedResult.UpdateForeignKeyConstraint();  \n\n      // Add the ForeignKeyConstraint into the source table.  \n      DataTable deparments = NewDeparmentDataTable();  \n      DataSet dataset = new DataSet();  \n\n      dataset.Tables.Add(courses);  \n      dataset.Tables.Add(clonedCourses);  \n      dataset.Tables.Add(deparments);  \n\n      ForeignKeyConstraint foreignKey = new ForeignKeyConstraint(deparments.Columns[&quot;DepartmentId&quot;], courses.Columns[&quot;DepartmentId&quot;]);  \n      courses.Constraints.Add(foreignKey);  \n\n      Console.WriteLine(@&quot;If we add the foreign key constraint in source table and then insert a row   \nwithout the parent  into the destination table, we will get the following error:&quot;);  \n      InsertNoParentRow(clonedCourses);  \n      Console.WriteLine();  \n\n      Console.WriteLine(&quot;Please press any key to exit...&quot;);  \n      Console.ReadKey();  \n   }  \n\n   static private DataTable NewCourseDataTable() {  \n      DataTable newTable = new DataTable();  \n\n      DataColumn[] columns ={   \n                                      new DataColumn(&quot;CourseId&quot;, typeof(String)),  \n                                      new DataColumn(&quot;CourseName&quot;,typeof(String)),                                        \n                                      new DataColumn(&quot;DepartmentId&quot;, typeof(Int32))  \n                                  };  \n\n      newTable.Columns.AddRange(columns);  \n\n      newTable.Rows.Add(&quot;C1045&quot;, &quot;Calculus&quot;, 7);  \n      newTable.Rows.Add(&quot;C1061&quot;, &quot;Physics&quot;, 1);  \n      newTable.Rows.Add(&quot;C2021&quot;, &quot;Composition&quot;, 2);  \n      newTable.Rows.Add(&quot;C2042&quot;, &quot;Literature&quot;, 2);  \n\n      return newTable;  \n   }  \n\n   static private DataTable NewDeparmentDataTable() {  \n      DataTable newTable = new DataTable();  \n\n      DataColumn[] columns ={   \n                                      new DataColumn(&quot;DepartmentId&quot;, typeof(Int32)),  \n                                      new DataColumn(&quot;Name&quot;,typeof(String)),  \n                                  };  \n\n      newTable.Columns.AddRange(columns);  \n\n      newTable.Rows.Add(1, &quot;Engineering&quot;);  \n      newTable.Rows.Add(2, &quot;English&quot;);  \n      newTable.Rows.Add(4, &quot;Economics&quot;);  \n      newTable.Rows.Add(7, &quot;Mathematics&quot;);  \n\n      return newTable;  \n   }  \n\n   static private void WriteDataTable(DataTable table) {  \n      if (table == null)  \n         return;  \n\n      foreach (DataColumn column in table.Columns) {  \n         Console.Write(&quot;{0,-15}&quot;, column.ColumnName);  \n      }  \n      Console.WriteLine();  \n\n      foreach (DataRow row in table.Rows) {  \n         for (int i = 0; i &lt; table.Columns.Count; i++)  \n            Console.Write(&quot;{0,-15}&quot;, row[i].ToString());  \n         Console.WriteLine();  \n      }  \n\n      Console.WriteLine();  \n   }  \n\n   static private void InsertDuplicateData(DataTable table) {  \n      try {  \n         table.Rows.Add(&quot;C1045&quot;, &quot;Calculus&quot;, 7);  \n         table.Rows.Add(&quot;C1045&quot;, &quot;Calculus&quot;, 7);  \n      } catch (Exception e) {  \n         Console.WriteLine(&quot;\\&quot;&quot; + e.Message + &quot;\\&quot;&quot;);  \n      }  \n   }  \n\n   private static void InsertNoParentRow(DataTable table) {  \n      try {  \n         table.Rows.Add(&quot;C1061&quot;, &quot;Physics&quot;, 11);  \n      } catch (Exception e) {  \n         Console.WriteLine(&quot;\\&quot;&quot; + e.Message + &quot;\\&quot;&quot;);  \n      }  \n   }  \n}  \n\npublic class ClonedDataTable {  \n   private DataTable sourceTable;  \n   private DataTable destinationTable;  \n\n   public ClonedDataTable(DataTable source) {  \n      sourceTable = source;  \n      // set the cloned result  \n      destinationTable = sourceTable.Clone();  \n   }  \n\n   public void UpdateAddedColumn() {  \n      sourceTable.Columns.CollectionChanged += new CollectionChangeEventHandler(ColumnAdded);  \n   }  \n\n   public void UpdateDeletedColumn() {  \n      sourceTable.Columns.CollectionChanged += new CollectionChangeEventHandler(ColumnDeleted);  \n   }  \n\n   public void UpdateUniqueConstraint() {  \n      sourceTable.Constraints.CollectionChanged += new CollectionChangeEventHandler(UniqueConstraint_Changed);  \n   }  \n\n   public void UpdateForeignKeyConstraint() {  \n      sourceTable.Constraints.CollectionChanged += new CollectionChangeEventHandler(ForeignKeyConstraint_Changed);  \n   }  \n\n   // After the source table adds a column, the method will add the same column in the destination table.  \n   void ColumnAdded(object sender, System.ComponentModel.CollectionChangeEventArgs e) {  \n      if (e.Action == CollectionChangeAction.Add) {  \n         DataColumn column = e.Element as DataColumn;  \n\n         if (column != null) {  \n            DataColumn newColumn = new DataColumn(column.ColumnName, column.DataType, column.Expression, column.ColumnMapping);  \n\n            if (!destinationTable.Columns.Contains(newColumn.ColumnName))  \n               destinationTable.Columns.Add(newColumn);  \n         }  \n      }  \n   }  \n\n   // After the source table deletes a column, the method will delete the same column in the destination table.  \n   void ColumnDeleted(object sender, CollectionChangeEventArgs e) {  \n      if (e.Action == CollectionChangeAction.Remove) {  \n         DataColumn column = e.Element as DataColumn;  \n\n         if (column != null)  \n            if (destinationTable.Columns.Contains(column.ColumnName))  \n               destinationTable.Columns.Remove(column.ColumnName);  \n      }  \n   }  \n\n   // After the source table changes the UniqueConstraint, this method changes the same UniqueConstraint in destination table.        \n   void UniqueConstraint_Changed(object sender, CollectionChangeEventArgs e) {  \n      UniqueConstraint constraint = e.Element as UniqueConstraint;  \n\n      if (constraint == null)  \n         return;  \n\n      String constraintName = constraint.ConstraintName;  \n\n      if (e.Action == CollectionChangeAction.Add) {  \n         DataColumn[] columns = new DataColumn[constraint.Columns.Count()];  \n         Boolean isPrimaryKey = constraint.IsPrimaryKey;  \n\n         // Get the columns used in new constraint from the destiantion table.  \n         for (Int32 i = 0; i &lt; constraint.Columns.Count(); i++) {  \n            String columnName = constraint.Columns[i].ColumnName;  \n\n            if (destinationTable.Columns.Contains(columnName))  \n               columns[i] = destinationTable.Columns[columnName];  \n            else  \n               return;  \n         }  \n\n         UniqueConstraint newConstraint = new UniqueConstraint(constraintName, columns, isPrimaryKey);  \n\n         if (!destinationTable.Constraints.Contains(constraintName))  \n            destinationTable.Constraints.Add(newConstraint);  \n\n      } else if (e.Action == CollectionChangeAction.Remove)  \n         if (destinationTable.Constraints.Contains(constraintName))  \n            destinationTable.Constraints.Remove(constraintName);  \n   }  \n\n   // After the source table changes the ForeignKeyConstraint, this method changes    \n   // the same ForeignKeyConstraint in the destination table.  \n   void ForeignKeyConstraint_Changed(object sender, CollectionChangeEventArgs e) {  \n      ForeignKeyConstraint constraint = e.Element as ForeignKeyConstraint;  \n\n      if (constraint == null)  \n         return;  \n\n      // If the source and destination are not in the same DataSet, don&#39;t change the ForeignKeyConstraint.  \n      if (sourceTable.DataSet != destinationTable.DataSet)  \n         return;  \n\n      String constraintName = constraint.ConstraintName;  \n\n      if (e.Action == CollectionChangeAction.Add) {  \n         DataColumn[] columns = new DataColumn[constraint.Columns.Count()];  \n         DataColumn[] parentColumns = constraint.RelatedColumns;  \n\n         // Get the columns used in new constraint from the destination table.  \n         for (int i = 0; i &lt; constraint.Columns.Count(); i++) {  \n            String columnName = constraint.Columns[i].ColumnName;  \n\n            if (destinationTable.Columns.Contains(columnName))  \n               columns[i] = destinationTable.Columns[columnName];  \n            else  \n               return;  \n         }  \n\n         ForeignKeyConstraint newConstraint = new ForeignKeyConstraint(constraintName, parentColumns, columns);  \n         newConstraint.AcceptRejectRule = constraint.AcceptRejectRule;  \n         newConstraint.DeleteRule = constraint.DeleteRule;  \n         newConstraint.UpdateRule = constraint.UpdateRule;  \n\n         if (!destinationTable.Constraints.Contains(constraintName))  \n            destinationTable.Constraints.Add(newConstraint);  \n      } else if (e.Action == CollectionChangeAction.Remove)  \n         if (destinationTable.Constraints.Contains(constraintName))  \n            destinationTable.Constraints.Remove(constraintName);  \n   }  \n\n   // return the destination table.  \n   public DataTable DestinationTable {  \n      get { return destinationTable; }  \n   }  \n}  \n</code></pre><p> This sample shows how to modify data in a DataTable and update the data source.  </p>\n<p> First, create a database:  </p>\n<pre><code>USE [master]  \nGO  \n\nCREATE DATABASE [MySchool]   \n\nGO  \n\nUSE [MySchool]  \nGO  \n\nSET ANSI_NULLS ON  \nGO  \nSET QUOTED_IDENTIFIER ON  \nGO  \nCREATE TABLE [dbo].[Course]([CourseID] [nvarchar](10) NOT NULL,  \n[Year] [smallint] NOT NULL,  \n[Title] [nvarchar](100) NOT NULL,  \n[Credits] [int] NOT NULL,  \n[DepartmentID] [int] NOT NULL,  \n CONSTRAINT [PK_Course] PRIMARY KEY CLUSTERED   \n(  \n[CourseID] ASC,  \n[Year] ASC  \n)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  \n\nGO  \n\nSET ANSI_NULLS ON  \nGO  \nSET QUOTED_IDENTIFIER ON  \nGO  \nCREATE TABLE [dbo].[Department]([DepartmentID] [int] IDENTITY(1,1) NOT NULL,  \n[Name] [nvarchar](50) NOT NULL,  \n[Budget] [money] NOT NULL,  \n[StartDate] [datetime] NOT NULL,  \n[Administrator] [int] NULL,  \n CONSTRAINT [PK_Department] PRIMARY KEY CLUSTERED   \n(  \n[DepartmentID] ASC  \n)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  \n\nGO  \n\nINSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N&#39;C1045&#39;, 2012, N&#39;Calculus&#39;, 4, 7)  \nINSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N&#39;C1061&#39;, 2012, N&#39;Physics&#39;, 4, 1)  \nINSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N&#39;C2021&#39;, 2012, N&#39;Composition&#39;, 3, 2)  \nINSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N&#39;C2042&#39;, 2012, N&#39;Literature&#39;, 4, 2)  \n\nSET IDENTITY_INSERT [dbo].[Department] ON   \n\nINSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (1, N&#39;Engineering&#39;, 350000.0000, CAST(0x0000999C00000000 AS DateTime), 2)  \nINSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (2, N&#39;English&#39;, 120000.0000, CAST(0x0000999C00000000 AS DateTime), 6)  \nINSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (4, N&#39;Economics&#39;, 200000.0000, CAST(0x0000999C00000000 AS DateTime), 4)  \nINSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (7, N&#39;Mathematics&#39;, 250024.0000, CAST(0x0000999C00000000 AS DateTime), 3)  \nSET IDENTITY_INSERT [dbo].[Department] OFF  \n\nALTER TABLE [dbo].[Course]  WITH CHECK ADD  CONSTRAINT [FK_Course_Department] FOREIGN KEY([DepartmentID])  \nREFERENCES [dbo].[Department] ([DepartmentID])  \nGO  \nALTER TABLE [dbo].[Course] CHECK CONSTRAINT [FK_Course_Department]  \nGO  \n</code></pre><p> You can now compile and run the sample. <a href=\"http://code.msdn.microsoft.com/How-to-modify-data-in-c68d35f4\" data-linktype=\"external\">How to modify data in DataTable and update to the data source</a> has Visual Basic and C# projects of this sample.  </p>\n<pre><code>using System;  \nusing System.Data;  \nusing System.Data.SqlClient;  \n\nclass Program {  \n   static void Main(string[] args) {  \n\n   string MySchoolConnectionString = &quot;Data Source=(local);Initial Catalog=MySchool;Integrated Security=True&quot;;  \n\n      // Get Data  \n      String selectString =  \n       @&quot;Select [CourseID],[Year],[Title],[Credits],[DepartmentID] From [dbo].[Course];  \n               Select [DepartmentID],[Name],[Budget],[StartDate],[Administrator] From [dbo].[Department] &quot;;  \n\n      DataSet dataSet = new DataSet();  \n      DataTable course = dataSet.Tables.Add(&quot;Course&quot;);  \n      DataTable department = dataSet.Tables.Add(&quot;Department&quot;);  \n\n      Console.WriteLine(&quot;Get data from database:&quot;);  \n      GetDataTables(MySchoolConnectionString, selectString, dataSet, course, department);  \n      Console.WriteLine();  \n\n      // Use DataTable Edits to edit the data  \n      String updateString =  \n              @&quot;Update [dbo].[Course] Set [Credits]=@Credits Where [CourseID]=@CourseID;&quot;;  \n\n      course.ColumnChanged += OnColumnChanged;  \n\n      // Set the Credits of first row is negative value, and set the Credits of second row is plus.  \n      ChangeCredits(course, course.Rows[0], -1);  \n      ChangeCredits(course, course.Rows[1], 11);  \n\n      UpdateDataTables(MySchoolConnectionString, updateString, dataSet, &quot;Course&quot;,  \n          new SqlParameter(&quot;@CourseID&quot;, SqlDbType.NVarChar, 10, &quot;CourseID&quot;),  \n          new SqlParameter(&quot;@Credits&quot;, SqlDbType.Int, 4, &quot;Credits&quot;));  \n      Console.WriteLine(&quot;Only the Credits of second row is changed.&quot;);  \n      ShowDataTable(course);  \n      Console.WriteLine();  \n\n      // Delete and Remove from DataTable  \n      // Create the foreign key constraint, and set the DeleteRule with Cascade.  \n      ForeignKeyConstraint courseDepartFK = new ForeignKeyConstraint(&quot;CourseDepartFK&quot;, department.Columns[&quot;DepartmentID&quot;], course.Columns[&quot;DepartmentID&quot;]);  \n      courseDepartFK.DeleteRule = Rule.Cascade;  \n      courseDepartFK.UpdateRule = Rule.Cascade;  \n      courseDepartFK.AcceptRejectRule = AcceptRejectRule.None;  \n      course.Constraints.Add(courseDepartFK);  \n\n      String deleteString = @&quot;Delete From [dbo].[Course] Where [CourseID]=@CourseID;&quot;;  \n\n      department.Rows[0].Delete();  \n      Console.WriteLine(&quot;If One row in Department table is deleted, the related rows in Course table will also be deleted.&quot;);  \n      Console.WriteLine(&quot;Department DataTable:&quot;);  \n      ShowDataTable(department);  \n      Console.WriteLine();  \n      Console.WriteLine(&quot;Course DataTable:&quot;);  \n      ShowDataTable(course);  \n      Console.WriteLine();  \n      // Update the delete operation  \n      DeleteDataTables(MySchoolConnectionString, deleteString, dataSet, &quot;Course&quot;,  \n          new SqlParameter(&quot;@CourseID&quot;, SqlDbType.NVarChar, 10, &quot;CourseID&quot;));  \n      Console.WriteLine(&quot;After delete operation:&quot;);  \n      Console.WriteLine(&quot;Course DataTable:&quot;);  \n      ShowDataTable(course);  \n      Console.WriteLine();  \n\n      course.Rows.RemoveAt(0);  \n      Console.WriteLine(&quot;Now we remove one row from Course:&quot;);  \n      ShowDataTable(course);  \n      DeleteDataTables(MySchoolConnectionString, deleteString, dataSet, &quot;Course&quot;,  \n          new SqlParameter(&quot;@CourseID&quot;, SqlDbType.NVarChar, 10, &quot;CourseID&quot;));  \n   }  \n\n   // Use SqlDataAdapter to get data.  \n   private static void GetDataTables(String connectionString, String selectString,  \n       DataSet dataSet, params DataTable[] tables) {  \n      using (SqlDataAdapter adapter = new SqlDataAdapter()) {  \n         adapter.SelectCommand = new SqlCommand(selectString);  \n         adapter.SelectCommand.Connection = new SqlConnection(connectionString);  \n\n         adapter.Fill(0, 0, tables);  \n\n         foreach (DataTable table in dataSet.Tables) {  \n            Console.WriteLine(&quot;Data in {0}:&quot;, table.TableName);  \n            ShowDataTable(table);  \n            Console.WriteLine();  \n         }  \n      }  \n   }  \n\n   // Use SqlDataAdapter to update the updata operation.  \n   private static void UpdateDataTables(String connectionString, String updateString,  \n       DataSet dataSet, String tableName, params SqlParameter[] parameters) {  \n      using (SqlDataAdapter adapter = new SqlDataAdapter()) {  \n         adapter.UpdateCommand = new SqlCommand(updateString);  \n         adapter.UpdateCommand.Parameters.AddRange(parameters);  \n         adapter.UpdateCommand.Connection = new SqlConnection(connectionString);  \n\n         adapter.Update(dataSet, tableName);  \n      }  \n   }  \n\n   // Use SqlDataAdapter to update delete operation.  \n   private static void DeleteDataTables(String connectionString, String deleteString,  \n       DataSet dataSet, String tableName, params SqlParameter[] parameters) {  \n      using (SqlDataAdapter adapter = new SqlDataAdapter()) {  \n         adapter.DeleteCommand = new SqlCommand(deleteString);  \n         adapter.DeleteCommand.Parameters.AddRange(parameters);  \n         adapter.DeleteCommand.Connection = new SqlConnection(connectionString);  \n\n         adapter.Update(dataSet, tableName);  \n      }  \n   }  \n\n   // Use DataTable Edits to modify the data.  \n   private static void ChangeCredits(DataTable table, DataRow row, Int32 credits) {  \n      row.BeginEdit();  \n      Console.WriteLine(&quot;We change row {0}&quot;, table.Rows.IndexOf(row));  \n      row[&quot;Credits&quot;] = credits;  \n      row.EndEdit();  \n   }  \n\n   // The method will be invoked when the value in DataTable is changed.  \n   private static void OnColumnChanged(Object sender, DataColumnChangeEventArgs args) {  \n      Int32 credits = 0;  \n      // If Credits is changed and the value is negative, we&#39;ll cancel the edit.  \n      if ((args.Column.ColumnName == &quot;Credits&quot;) &amp;&amp;  \n          (!Int32.TryParse(args.ProposedValue.ToString(), out credits) || credits &lt; 0)) {  \n         Console.WriteLine(&quot;The value of Credits is invalid. Edit canceled.&quot;);  \n         args.Row.CancelEdit();  \n      }  \n   }  \n\n   // Display the column and value of DataTable.  \n   private static void ShowDataTable(DataTable table) {  \n      foreach (DataColumn col in table.Columns) {  \n         Console.Write(&quot;{0,-14}&quot;, col.ColumnName);  \n      }  \n      Console.WriteLine(&quot;{0,-14}&quot;, &quot;RowState&quot;);  \n\n      foreach (DataRow row in table.Rows) {  \n         if (row.RowState == DataRowState.Deleted) {  \n            foreach (DataColumn col in table.Columns) {  \n               if (col.DataType.Equals(typeof(DateTime)))  \n                  Console.Write(&quot;{0,-14:d}&quot;, row[col, DataRowVersion.Original]);  \n               else if (col.DataType.Equals(typeof(Decimal)))  \n                  Console.Write(&quot;{0,-14:C}&quot;, row[col, DataRowVersion.Original]);  \n               else  \n                  Console.Write(&quot;{0,-14}&quot;, row[col, DataRowVersion.Original]);  \n            }  \n         }  \n         else {  \n            foreach (DataColumn col in table.Columns) {  \n               if (col.DataType.Equals(typeof(DateTime)))  \n                  Console.Write(&quot;{0,-14:d}&quot;, row[col]);  \n               else if (col.DataType.Equals(typeof(Decimal)))  \n                  Console.Write(&quot;{0,-14:C}&quot;, row[col]);  \n               else  \n                  Console.Write(&quot;{0,-14}&quot;, row[col]);  \n            }  \n         }  \n         Console.WriteLine(&quot;{0,-14}&quot;, row.RowState);  \n      }  \n   }  \n}  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_Compute_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Data_DataTable_Compute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Compute(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the given expression on the current rows that pass the filter criteria.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object Compute (string expression, string filter);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The expression to compute.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>filter</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The filter to limit the rows that evaluate in the expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>, set to the result of the computation. If the expression evaluates to null, the return value will be <a class=\"xref\" href=\"system.dbnull#System_DBNull_Value\" data-linktype=\"relative-path\">Value</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>expression</code> parameter requires an aggregate function. For example, the following is a legal expression:  </p>\n<p> <code>Count(Quantity)</code>  </p>\n<p> But this expression is not:  </p>\n<p> <code>Sum (Quantity * UnitPrice)</code>  </p>\n<p> If you must perform an operation on two or more columns, you should create a <a class=\"xref\" href=\"system.data.datacolumn\" data-linktype=\"relative-path\">DataColumn</a>, set its <a class=\"xref\" href=\"system.data.datacolumn#System_Data_DataColumn_Expression_\" data-linktype=\"relative-path\">Expression</a> property to an appropriate expression, and use an aggregate expression on the resulting column. In that case, given a <a class=\"xref\" href=\"system.data.datacolumn\" data-linktype=\"relative-path\">DataColumn</a> with the name &quot;total&quot;, and the <a class=\"xref\" href=\"system.data.datacolumn#System_Data_DataColumn_Expression_\" data-linktype=\"relative-path\">Expression</a> property set to this:  </p>\n<p> <code>&quot;Quantity * UnitPrice&quot;</code>  </p>\n<p> The expression argument for the Compute method would then be this:  </p>\n<p> <code>Sum(total)</code>  </p>\n<p> The second parameter, <code>filter</code>, determines which rows are used in the expression. For example, if the table contains a date column named &quot;colDate&quot;, you could limit the rows with the following expression:  </p>\n<p> <code>colDate &gt; 1/1/99 AND colDate &lt; 17/1/99</code>  </p>\n<p> For rules on creating expressions for both parameters, see the <a class=\"xref\" href=\"system.data.datacolumn#System_Data_DataColumn_Expression_\" data-linktype=\"relative-path\">Expression</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example sums the values of a column named &quot;Total&quot;, for the salesperson whose identification number is five.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData DataTable.Compute Example#1\">    private void ComputeBySalesSalesID(DataSet dataSet)\n    {\n        // Presumes a DataTable named &quot;Orders&quot; that has a column named &quot;Total.&quot;\n        DataTable table;\n        table = dataSet.Tables[&quot;Orders&quot;];\n\n        // Declare an object variable.\n        object sumObject;\n        sumObject = table.Compute(&quot;Sum(Total)&quot;, &quot;EmpID = 5&quot;);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData DataTable.Compute Example#1\">Private Sub ComputeBySalesSalesID(ByVal dataSet As DataSet)\n    &#39; Presumes a DataTable named &quot;Orders&quot; that has a column named &quot;Total.&quot;\n    Dim table As DataTable\n    table = dataSet.Tables(&quot;Orders&quot;)\n\n    &#39; Declare an object variable.\n    Dim sumObject As Object\n    sumObject = table.Compute(&quot;Sum(Total)&quot;, &quot;EmpID = 5&quot;)\n End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_Copy\">\r\n    \r\n            <a id=\"System_Data_DataTable_Copy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Copy()</div>        \r\n          </div>\r\n    \r\n            <p>Copies both the structure and data for this <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.DataTable Copy ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a></div>\r\n                  </div>\r\n                  <p>A new <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> with the same structure (table schemas and constraints) and data as this <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.  </p>\n<p> If these classes have been derived, the copy will also be of the same derived classes.  </p>\n<p> Copy creates a new <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> with the same structure and data as the original <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>. To copy the structure to a new <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>, but not the data, use <span class=\"xref\">stem.Data.DataTable.Clone*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the Copy method to create a copy of the original <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>. The namespace name is not retained if it is inherited from a parent <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> or <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData DataTable.Copy Example#1\">private void CopyDataTable(DataTable table){\n    // Create an object variable for the copy.\n    DataTable copyDataTable;\n    copyDataTable = table.Copy();\n\n    // Insert code to work with the copy.\n }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData DataTable.Copy Example#1\">Private Sub CopyDataTable(ByVal table As DataTable )\n    &#39; Create an object variable for the copy.\n    Dim copyDataTable As DataTable\n    copyDataTable = table.Copy()\n\n    &#39; Insert code to work with the copy.\n End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_CreateDataReader\">\r\n    \r\n            <a id=\"System_Data_DataTable_CreateDataReader_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateDataReader()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> corresponding to the data within this <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.DataTableReader CreateDataReader ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> containing one result set, corresponding to the source <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following console application creates a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> instance. The example then passes the filled <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>to a procedure that calls the CreateDataReader method, which iterates through the results contained within the <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"DataWorks DataTable.CreateDataReader#1\">  Private Sub TestCreateDataReader(ByVal dt As DataTable)\n    &#39; Given a DataTable, retrieve a DataTableReader\n    &#39; allowing access to all the tables&#39;s data:\n    Using reader As DataTableReader = dt.CreateDataReader()\n      Do\n        If Not reader.HasRows Then\n          Console.WriteLine(&quot;Empty DataTableReader&quot;)\n        Else\n          PrintColumns(reader)\n        End If\n        Console.WriteLine(&quot;========================&quot;)\n      Loop While reader.NextResult()\n    End Using\n  End Sub\n\n  Private Function GetCustomers() As DataTable\n    &#39; Create sample Customers table, in order\n    &#39; to demonstrate the behavior of the DataTableReader.\n    Dim table As New DataTable\n\n     &#39; Create two columns, ID and Name.\n    Dim idColumn As DataColumn = table.Columns.Add(&quot;ID&quot;, GetType(Integer))\n    table.Columns.Add(&quot;Name&quot;, GetType(String))\n\n    &#39; Set the ID column as the primary key column.\n    table.PrimaryKey = New DataColumn() {idColumn}\n\n    table.Rows.Add(New Object() {1, &quot;Mary&quot;})\n    table.Rows.Add(New Object() {2, &quot;Andy&quot;})\n    table.Rows.Add(New Object() {3, &quot;Peter&quot;})\n    table.Rows.Add(New Object() {4, &quot;Russ&quot;})\n    Return table\n  End Function\n\n  Private Sub PrintColumns( _\n     ByVal reader As DataTableReader)\n\n    &#39; Loop through all the rows in the DataTableReader.\n    Do While reader.Read()\n      For i As Integer = 0 To reader.FieldCount - 1\n        Console.Write(reader(i).ToString() &amp; &quot; &quot;)\n      Next\n      Console.WriteLine()\n    Loop\n  End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"DataWorks DataTable.CreateDataReader#1\">    private static void TestCreateDataReader(DataTable dt)\n    {\n        // Given a DataTable, retrieve a DataTableReader\n        // allowing access to all the tables&#39; data:\n        using (DataTableReader reader = dt.CreateDataReader())\n        {\n            do\n            {\n                if (!reader.HasRows)\n                {\n                    Console.WriteLine(&quot;Empty DataTableReader&quot;);\n                }\n                else\n                {\n                    PrintColumns(reader);\n                }\n                Console.WriteLine(&quot;========================&quot;);\n            } while (reader.NextResult());\n        }\n    }\n\n    private static DataTable GetCustomers()\n    {\n        // Create sample Customers table, in order\n        // to demonstrate the behavior of the DataTableReader.\n        DataTable table = new DataTable();\n\n        // Create two columns, ID and Name.\n        DataColumn idColumn = table.Columns.Add(&quot;ID&quot;, typeof(int));\n        table.Columns.Add(&quot;Name&quot;, typeof(string));\n\n        // Set the ID column as the primary key column.\n        table.PrimaryKey = new DataColumn[] { idColumn };\n\n        table.Rows.Add(new object[] { 1, &quot;Mary&quot; });\n        table.Rows.Add(new object[] { 2, &quot;Andy&quot; });\n        table.Rows.Add(new object[] { 3, &quot;Peter&quot; });\n        table.Rows.Add(new object[] { 4, &quot;Russ&quot; });\n        return table;\n    }\n\n    private static void PrintColumns(DataTableReader reader)\n    {\n        // Loop through all the rows in the DataTableReader\n        while (reader.Read())\n        {\n            for (int i = 0; i &lt; reader.FieldCount; i++)\n            {\n                Console.Write(reader[i] + &quot; &quot;);\n            }\n            Console.WriteLine();\n        }\n    }\n</code></pre><p> The example displays the following output in the console window:  </p>\n<p> <code>1 Mary</code>  </p>\n<p> <code>2 Andy</code>  </p>\n<p> <code>3 Peter</code>  </p>\n<p> <code>4 Russ</code></p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_CreateInstance\">\r\n    \r\n            <a id=\"System_Data_DataTable_CreateInstance_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateInstance()</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new instance of <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual System.Data.DataTable CreateInstance ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a></div>\r\n                  </div>\r\n                  <p>The new expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_EndInit\">\r\n    \r\n            <a id=\"System_Data_DataTable_EndInit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EndInit()</div>        \r\n          </div>\r\n    \r\n            <p>Ends the initialization of a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> that is used on a form or used by another component. The initialization occurs at run time.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void EndInit ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Visual Studio .NET design environment uses this method to end the initialization of a component that is used on a form or used by another component. The <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_BeginInit_\" data-linktype=\"relative-path\">BeginInit</a> method starts the initialization. Using the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_BeginInit_\" data-linktype=\"relative-path\">BeginInit</a> and EndInit methods prevents the control from being used before it is fully initialized.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_EndLoadData\">\r\n    \r\n            <a id=\"System_Data_DataTable_EndLoadData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EndLoadData()</div>        \r\n          </div>\r\n    \r\n            <p>Turns on notifications, index maintenance, and constraints after loading data.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void EndLoadData ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use EndLoadData in conjunction with <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_LoadDataRow_\" data-linktype=\"relative-path\">LoadDataRow</a> and <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_BeginLoadData_\" data-linktype=\"relative-path\">BeginLoadData</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_GetChanges\">\r\n    \r\n            <a id=\"System_Data_DataTable_GetChanges_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetChanges()</div>        \r\n          </div>\r\n    \r\n            <p>Gets a copy of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> that contains all changes made to it since it was loaded or <span class=\"xref\">stem.Data.DataTable.AcceptChanges*</span> was last called.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.DataTable GetChanges ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a></div>\r\n                  </div>\r\n                  <p>A copy of the changes from this <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>, or <code>null</code> if no changes are found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Creates a new <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> containing a copy of all rows in the original <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> that have pending changes. Relationship constraints can cause additional unchanged rows to be added to the new <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> if the unchanged rows contain primary keys corresponding to foreign keys in the changed rows. The method returns <code>null</code> (<code>Nothing</code> in Visual Basic) if there are no rows in the original <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> with pending changes.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cs\" name=\"Classic WebData DataTable.GetChanges Example#1\">    private void UpdateDataTable(DataTable table, \n        OleDbDataAdapter myDataAdapter)\n    {\n        DataTable xDataTable = table.GetChanges();\n\n        // Check the DataTable for errors.\n        if (xDataTable.HasErrors)\n        {\n            // Insert code to resolve errors.\n        }\n\n        // After fixing errors, update the database with the DataAdapter \n        myDataAdapter.Update(xDataTable);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData DataTable.GetChanges Example#1\">Private Sub UpdateDataTable(table As DataTable, _\n    myDataAdapter As OleDbDataAdapter)\n\n    Dim xDataTable As DataTable = table.GetChanges()\n\n    &#39; Check the DataTable for errors.\n    If xDataTable.HasErrors Then\n        &#39; Insert code to resolve errors.\n    End If\n\n    &#39; After fixing errors, update the database with the DataAdapter \n    myDataAdapter.Update(xDataTable)\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_GetChanges_System_Data_DataRowState_\">\r\n    \r\n            <a id=\"System_Data_DataTable_GetChanges_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetChanges(DataRowState)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a copy of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> containing all changes made to it since it was last loaded, or since <span class=\"xref\">stem.Data.DataTable.AcceptChanges*</span> was called, filtered by <a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.DataTable GetChanges (System.Data.DataRowState rowStates);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rowStates</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a></div>\r\n                  </div>\r\n                  <p>A filtered copy of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> that can have actions performed on it, and later be merged back in the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> using <span class=\"xref\">stem.Data.DataSet.Merge*</span>. If no rows of the desired <a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a> are found, the method returns <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_GetChanges_\" data-linktype=\"relative-path\">GetChanges</a> method is used to produce a second <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> object that contains only the changes introduced into the original. Use the <code>rowStates</code> argument to specify the type of changes the new object should include.  </p>\n<p> Relationship constraints may cause unchanged parent rows to be included.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cs\" name=\"Classic WebData DataTable.GetChanges1 Example#1\">    private void ProcessDeletes(DataTable table, \n        OleDbDataAdapter adapter)\n    {\n        DataTable changeTable = table.GetChanges(DataRowState.Deleted);\n\n        // Check the DataTable for errors.\n        if (changeTable.HasErrors)\n        {\n            // Insert code to resolve errors.\n        }\n\n        // After fixing errors, update the database with the DataAdapter \n        adapter.Update(changeTable);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData DataTable.GetChanges1 Example#1\">Private Sub ProcessDeletes(table As DataTable, _\n    adapter As OleDbDataAdapter)\n\n   Dim changeTable As DataTable = table.GetChanges(DataRowState.Deleted)\n\n   &#39; Check the DataTable for errors.\n   If table.HasErrors Then\n      &#39; Insert code to resolve errors.\n   End If\n\n   &#39; After fixing errors, update the database with the DataAdapter \n   adapter.Update(changeTable)\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_GetDataTableSchema_System_Xml_Schema_XmlSchemaSet_\">\r\n    \r\n            <a id=\"System_Data_DataTable_GetDataTableSchema_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDataTableSchema(XmlSchemaSet)</div>        \r\n          </div>\r\n    \r\n            <p>This method returns an <a class=\"xref\" href=\"system.xml.schema.xmlschemaset\" data-linktype=\"relative-path\">XmlSchemaSet</a> instance containing the Web Services Description Language (WSDL) that describes the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> for Web Services.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Xml.Schema.XmlSchemaComplexType GetDataTableSchema (System.Xml.Schema.XmlSchemaSet schemaSet);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>schemaSet</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.schema.xmlschemaset\" data-linktype=\"relative-path\">XmlSchemaSet</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.schema.xmlschemaset\" data-linktype=\"relative-path\">XmlSchemaSet</a> instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.schema.xmlschemacomplextype\" data-linktype=\"relative-path\">XmlSchemaComplexType</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.schema.xmlschemaset\" data-linktype=\"relative-path\">XmlSchemaSet</a> instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_GetErrors\">\r\n    \r\n            <a id=\"System_Data_DataTable_GetErrors_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetErrors()</div>        \r\n          </div>\r\n    \r\n            <p>Gets an array of <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> objects that contain errors.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.DataRow[] GetErrors ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a>[]</div>\r\n                  </div>\r\n                  <p>An array of <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> objects that have errors.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Returns the list of <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> objects that have <a class=\"xref\" href=\"system.data.datarow#System_Data_DataRow_RowError_\" data-linktype=\"relative-path\">RowError</a> set. For example, errors can occur when calling <a class=\"xref\" href=\"system.data.common.dataadapter#System_Data_Common_DataAdapter_Update_\" data-linktype=\"relative-path\">Update</a> with <a class=\"xref\" href=\"system.data.common.dataadapter#System_Data_Common_DataAdapter_ContinueUpdateOnError_\" data-linktype=\"relative-path\">ContinueUpdateOnError</a> set to <strong>true</strong>. Do not invoke <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_AcceptChanges_\" data-linktype=\"relative-path\">AcceptChanges</a> on the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> until you resolve all errors and resubmit the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> for updating.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the GetErrors method to return an array of <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> objects that have errors.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData DataTable.GetErrors Example#1\">Private Sub PrintAllErrs(ByVal dataSet As DataSet)\n    Dim rowsInError() As DataRow\n    Dim table As DataTable  \n    Dim i As Integer\n    Dim column As DataColumn\n    For Each table In dataSet.Tables\n       &#39; Test if the table has errors. If not, skip it.\n       If table.HasErrors Then\n          &#39; Get an array of all rows with errors.\n          rowsInError = table.GetErrors()\n          &#39; Print the error of each column in each row.\n          For i = 0 To rowsInError.GetUpperBound(0)\n             For Each column In table.Columns\n                Console.WriteLine(column.ColumnName, _\n                rowsInError(i).GetColumnError(column))\n             Next\n             &#39; Clear the row errors\n          rowsInError(i).ClearErrors\n          Next i\n       End If\n    Next\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData DataTable.GetErrors Example#1\">    private void PrintAllErrs(DataSet dataSet)\n    {\n        DataRow[] rowsInError; \n      \n        foreach(DataTable table in dataSet.Tables)\n        {\n            // Test if the table has errors. If not, skip it.\n            if(table.HasErrors)\n            {\n                // Get an array of all rows with errors.\n                rowsInError = table.GetErrors();\n                // Print the error of each column in each row.\n                for(int i = 0; i &lt; rowsInError.Length; i++)\n                {\n                    foreach(DataColumn column in table.Columns)\n                    {\n                        Console.WriteLine(column.ColumnName + &quot; &quot; + \n                            rowsInError[i].GetColumnError(column));\n                    }\n                    // Clear the row errors\n                    rowsInError[i].ClearErrors();\n                }\n            }\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\">\r\n    \r\n            <a id=\"System_Data_DataTable_GetObjectData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetObjectData(SerializationInfo,StreamingContext)</div>        \r\n          </div>\r\n    \r\n            <p>Populates a serialization information object with the data needed to serialize the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>info</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> object that holds the serialized data associated with the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>context</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a> object that contains the source and destination of the serialized stream associated with the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>info</code> parameter is a null reference (<code>Nothing</code> in Visual Basic).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_GetRowType\">\r\n    \r\n            <a id=\"System_Data_DataTable_GetRowType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetRowType()</div>        \r\n          </div>\r\n    \r\n            <p>Gets the row type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual Type GetRowType ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>Returns the type of the <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_GetSchema\">\r\n    \r\n            <a id=\"System_Data_DataTable_GetSchema_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetSchema()</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.Xml.Serialization.IXmlSerializable.GetSchema*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual System.Xml.Schema.XmlSchema GetSchema ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.schema.xmlschema\" data-linktype=\"relative-path\">XmlSchema</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.schema.xmlschema\" data-linktype=\"relative-path\">XmlSchema</a> that describes the XML representation of the object that is produced by the <span class=\"xref\">stem.Xml.Serialization.IXmlSerializable.WriteXml*</span> method and consumed by the <span class=\"xref\">stem.Xml.Serialization.IXmlSerializable.ReadXml*</span> method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_ImportRow_System_Data_DataRow_\">\r\n    \r\n            <a id=\"System_Data_DataTable_ImportRow_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ImportRow(DataRow)</div>        \r\n          </div>\r\n    \r\n            <p>Copies a <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> into a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>, preserving any property settings, as well as original and current values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ImportRow (System.Data.DataRow row);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>row</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> to be imported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Calling <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_NewRow_\" data-linktype=\"relative-path\">NewRow</a> adds a row to the table using the existing table schema, but with default values for the row, and sets the <a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a> to <code>Detached</code>. Calling ImportRow preserves the existing <a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a> along with other values in the row. If the <code>DataRow</code> that is passed as a parameter is in a detached state, it is ignored, and no exception is thrown.  </p>\n<p> The new row will be added to the end of the data table.  </p>\n<p> If the new row violates a Constraint it won’t be added to the data table.  </p>\n<p> You can get the index of the new row with as DataTable.Rows.Find and DataTable.Rows.IndexOf. See <a class=\"xref\" href=\"system.data.datarowcollection\" data-linktype=\"relative-path\">DataRowCollection</a> and <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_Rows_\" data-linktype=\"relative-path\">Rows</a> for more information.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_Load_System_Data_IDataReader_\">\r\n    \r\n            <a id=\"System_Data_DataTable_Load_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Load(IDataReader)</div>        \r\n          </div>\r\n    \r\n            <p>Fills a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> with values from a data source using the supplied <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a>. If the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> already contains rows, the incoming data from the data source is merged with the existing rows.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Load (System.Data.IDataReader reader);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>reader</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> that provides a result set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Loadmethod consumes the first result set from the loaded <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a>, and after successful completion, sets the reader&#39;s position to the next result set, if any. When converting data, the <code>Load</code> method uses the same conversion rules as the <a class=\"xref\" href=\"system.data.common.dbdataadapter#System_Data_Common_DbDataAdapter_Fill_\" data-linktype=\"relative-path\">Fill</a> method.  </p>\n<p> The Load method must take into account three specific issues when loading the data from an <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> instance: schema, data, and event operations. When working with the schema, the Load method may encounter conditions as described in the following table. The schema operations take place for all imported result sets, even those containing no data.  </p>\n<table>\n<thead>\n<tr>\n<th>Condition</th>\n<th>Behavior</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>The <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> has no schema.</td>\n<td>The Load method infers the schema based on the result set from the imported <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a>.</td>\n</tr>\n<tr>\n<td>The <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> has a schema, but it is incompatible with the loaded schema.</td>\n<td>The Load method throws an exception corresponding to the particular error that occurs when attempting to load data into the incompatible schema.</td>\n</tr>\n<tr>\n<td>The schemas are compatible, but the loaded result set schema contains columns that do not exist in the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.</td>\n<td>The Load method adds the extra columns to <code>DataTable</code>&#39;s schema. The method throws an exception if corresponding columns in the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> and the loaded result set are not value compatible. The method also retrieves constraint information from the result set for all added columns. Except for the case of Primary Key constraint, this constraint information is used only if the current <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> does not contain any columns at the start of the load operation.</td>\n</tr>\n<tr>\n<td>The schemas are compatible, but the loaded result set schema contains fewer columns than does the <code>DataTable</code>.</td>\n<td>If a missing column has a default value defined or the column&#39;s data type is nullable, the Load method allows the rows to be added, substituting the default or <code>null</code> value for the missing column. If no default value or <code>null</code> can be used, then the <code>Load</code> method throws an exception. If no specific default value has been supplied, the <code>Load</code> method uses the <code>null</code> value as the implied default value.</td>\n</tr>\n</tbody>\n</table>\n<p> Before considering the behavior of the <code>Load</code> method in terms of data operations, consider that each row within a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> maintains both the current value and the original value for each column. These values may be equivalent, or may be different if the data in the row has been changed since filling the <code>DataTable</code>.  For more information, see <a href=\"../Topic/Row%20States%20and%20Row%20Versions.md\" data-linktype=\"relative-path\">Row States and Row Versions</a>.  </p>\n<p> This version of the <code>Load</code> method attempts to preserve the current values in each row, leaving the original value intact. (If you want finer control over the behavior of incoming data, see <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_Load_\" data-linktype=\"relative-path\">Load</a>.) If the existing row and the incoming row contain corresponding primary key values, the row is processed using its current row state value, otherwise it&#39;s treated as a new row.  </p>\n<p> In terms of event operations, the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_RowChanging\" data-linktype=\"relative-path\">RowChanging</a> event occurs before each row is changed, and the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_RowChanged\" data-linktype=\"relative-path\">RowChanged</a> event occurs after each row has been changed. In each case, the <a class=\"xref\" href=\"system.data.datarowchangeeventargs#System_Data_DataRowChangeEventArgs_Action_\" data-linktype=\"relative-path\">Action</a> property of the <a class=\"xref\" href=\"system.data.datarowchangeeventargs\" data-linktype=\"relative-path\">DataRowChangeEventArgs</a> instance passed to the event handler contains information about the particular action associated with the event. This action value depends on the state of the row before the load operation. In each case, both events occur, and the action is the same for each. The action may be applied to either the current or original version of each row, or both, depending on the current row state.  </p>\n<p> The following table displays behavior for the <code>Load</code> method. The final row (labeled &quot;(Not present)&quot;) describes the behavior for incoming rows that don&#39;t match any existing row. Each cell in this table describes the current and original value for a field within a row, along with the <a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a> for the value after the <code>Load</code> method has completed. In this case, the method doesn&#39;t allow you to indicate the load option, and uses the default, <code>PreserveChanges</code>.  </p>\n<table>\n<thead>\n<tr>\n<th>Existing DataRowState</th>\n<th>Values after <code>Load</code> method, and event action</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Added</td>\n<td>Current = &lt;Existing&gt;<br><br> Original = &lt;Incoming&gt;<br><br> State = &lt;Modified&gt;<br><br> RowAction = ChangeOriginal</td>\n</tr>\n<tr>\n<td>Modified</td>\n<td>Current = &lt;Existing&gt;<br><br> Original = &lt;Incoming&gt;<br><br> State = &lt;Modified&gt;<br><br> RowAction = ChangeOriginal</td>\n</tr>\n<tr>\n<td>Deleted</td>\n<td>Current = &lt;Not available&gt;<br><br> Original = &lt;Incoming&gt;<br><br> State = &lt;Deleted&gt;<br><br> RowAction = ChangeOriginal</td>\n</tr>\n<tr>\n<td>Unchanged</td>\n<td>Current = &lt;Incoming&gt;<br><br> Original = &lt;Incoming&gt;<br><br> State = &lt;Unchanged&gt;<br><br> RowAction = ChangeCurrentAndOriginal</td>\n</tr>\n<tr>\n<td>(Not present)</td>\n<td>Current = &lt;Incoming&gt;<br><br> Original = &lt;Incoming&gt;<br><br> State = &lt;Unchanged&gt;<br><br> RowAction = ChangeCurrentAndOriginal</td>\n</tr>\n</tbody>\n</table>\n<p> Values in a <a class=\"xref\" href=\"system.data.datacolumn\" data-linktype=\"relative-path\">DataColumn</a> can be constrained through use of properties such as <a class=\"xref\" href=\"system.data.datacolumn#System_Data_DataColumn_ReadOnly_\" data-linktype=\"relative-path\">ReadOnly</a> and <a class=\"xref\" href=\"system.data.datacolumn#System_Data_DataColumn_AutoIncrement_\" data-linktype=\"relative-path\">AutoIncrement</a>. The <code>Load</code> method handles such columns in a manner that is consistent with the behavior defined by the column&#39;s properties. The read only constraint on a <a class=\"xref\" href=\"system.data.datacolumn\" data-linktype=\"relative-path\">DataColumn</a> is applicable only for changes that occur in memory. The <code>Load</code> method&#39;s overwrites the read-only column values, if needed.  </p>\n<p> To determine which version of the primary key field to use for comparing the current row with an incoming row, the <code>Load</code> method uses the original version of the primary key value within a row, if it exists. Otherwise, the <code>Load</code> method uses the current version of the primary key field.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates several of the issues involved with calling the Load method. First, the example focuses on schema issues, including inferring a schema from the loaded <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a>, and then handling incompatible schemas, and schemas with missing or additional columns. The example then calls the <code>Load</code> method, displaying the data both before and after the load operation.  </p>\n<pre><code class=\"lang-cs\" name=\"DataWorks DataTableLoad.IDataReader#1\">    static void Main()\n    {\n        // This example examines a number of scenarios involving the \n        // DataTable.Load method.\n        Console.WriteLine(&quot;Load a DataTable and infer its schema:&quot;);\n\n        // The table has no schema. The Load method will infer the \n        // schema from the IDataReader:\n        DataTable table = new DataTable();\n\n        // Retrieve a data reader, based on the Customers data. In\n        // an application, this data might be coming from a middle-tier\n        // business object:\n        DataTableReader reader = new DataTableReader(GetCustomers());\n\n        table.Load(reader);\n        PrintColumns(table);\n\n        Console.WriteLine(&quot; ============================= &quot;);\n        Console.WriteLine(\n            &quot;Load a DataTable from an incompatible IDataReader:&quot;);\n\n        // Create a table with a single integer column. Attempt\n        // to load data from a reader with a schema that is \n        // incompatible. Note the exception, determined\n        // by the particular incompatibility:\n        table = GetIntegerTable();\n        reader = new DataTableReader(GetStringTable());\n        try \n        {\n            table.Load(reader);\n        } \n        catch (Exception ex) \n        { \n            Console.WriteLine(ex.GetType().Name + &quot;:&quot; + ex.Message);\n        }\n\n        Console.WriteLine(&quot; ============================= &quot;);\n        Console.WriteLine(\n            &quot;Load a DataTable with an IDataReader that has extra columns:&quot;);\n\n        // Note that loading a reader with extra columns adds\n        // the columns to the existing table, if possible:\n        table = GetIntegerTable();\n        reader = new DataTableReader(GetCustomers());\n        table.Load(reader);\n        PrintColumns(table);\n\n        Console.WriteLine(&quot; ============================= &quot;);\n        Console.WriteLine(\n            &quot;Load a DataTable with an IDataReader that has missing columns:&quot;);\n\n        // Note that loading a reader with missing columns causes \n        // the columns to be filled with null data, if possible:\n        table = GetCustomers();\n        reader = new DataTableReader(GetIntegerTable());\n        table.Load(reader);\n        PrintColumns(table);\n\n        // Demonstrate the various possibilites when loading data \n        // into a DataTable that already contains data.\n        Console.WriteLine(&quot; ============================= &quot;);\n        Console.WriteLine(&quot;Demonstrate data considerations:&quot;);\n        Console.WriteLine(&quot;Current value, Original value, (RowState)&quot;);\n        Console.WriteLine(&quot; ============================= &quot;);\n        Console.WriteLine(&quot;Original table:&quot;);\n\n        table = SetupModifiedRows();\n        DisplayRowState(table);\n\n        Console.WriteLine(&quot; ============================= &quot;);\n        Console.WriteLine(&quot;Data in IDataReader to be loaded:&quot;);\n        DisplayRowState(GetChangedCustomers());\n\n        // Load data into a DataTable, retrieve a DataTableReader \n        // containing different data, and call the Load method. \n        Console.WriteLine(&quot; ============================= &quot;);\n        Console.WriteLine(&quot;table.Load(reader)&quot;);\n        Console.WriteLine(&quot; ============================= &quot;);\n\n        table = SetupModifiedRows();\n        reader = new DataTableReader(GetChangedCustomers());\n        table.Load(reader);\n        DisplayRowState(table);\n\n        Console.WriteLine(&quot;Press any key to continue.&quot;);\n        Console.ReadKey();\n    }\n\n    private static void DisplayRowState(DataTable table)\n    {\n        for (int i = 0; i &lt;= table.Rows.Count - 1; i++)\n        {\n            object current = &quot;--&quot;;\n            object original = &quot;--&quot;;\n            DataRowState rowState = table.Rows[i].RowState;\n\n            // Attempt to retrieve the current value, which doesn&#39;t exist\n            // for deleted rows:\n            if (rowState != DataRowState.Deleted)\n            {\n                current = table.Rows[i][&quot;Name&quot;, DataRowVersion.Current];\n            }\n\n            // Attempt to retrieve the original value, which doesn&#39;t exist\n            // for added rows:\n            if (rowState != DataRowState.Added)\n            {\n                original = table.Rows[i][&quot;Name&quot;, DataRowVersion.Original];\n            }\n            Console.WriteLine(&quot;{0}: {1}, {2} ({3})&quot;, i, \n                current, original, rowState);\n        }\n    }\n\n    private static DataTable GetChangedCustomers()\n    {\n        // Create sample Customers table.\n        DataTable table = new DataTable();\n\n        // Create two columns, ID and Name.\n        DataColumn idColumn = table.Columns.Add(&quot;ID&quot;, \n            typeof(int));\n        table.Columns.Add(&quot;Name&quot;, typeof(string));\n\n        // Set the ID column as the primary key column.\n        table.PrimaryKey = new DataColumn[] { idColumn };\n\n        table.Rows.Add(new object[] { 1, &quot;XXX&quot; });\n        table.Rows.Add(new object[] { 2, &quot;XXX&quot; });\n        table.Rows.Add(new object[] { 3, &quot;XXX&quot; });\n        table.Rows.Add(new object[] { 4, &quot;XXX&quot; });\n        table.Rows.Add(new object[] { 5, &quot;XXX&quot; });\n        table.Rows.Add(new object[] { 6, &quot;XXX&quot; });\n        table.AcceptChanges();\n        return table;\n    }\n\n    private static DataTable GetCustomers()\n    {\n        // Create sample Customers table, in order\n        // to demonstrate the behavior of the DataTableReader.\n        DataTable table = new DataTable();\n\n        // Create two columns, ID and Name.\n        DataColumn idColumn = table.Columns.Add(&quot;ID&quot;, \n            typeof(int));\n        table.Columns.Add(&quot;Name&quot;, typeof(string));\n\n        // Set the ID column as the primary key column.\n        table.PrimaryKey = new DataColumn[] { idColumn };\n\n        table.Rows.Add(new object[] { 1, &quot;Mary&quot; });\n        table.Rows.Add(new object[] { 2, &quot;Andy&quot; });\n        table.Rows.Add(new object[] { 3, &quot;Peter&quot; });\n        table.Rows.Add(new object[] { 4, &quot;Russ&quot; });\n        table.AcceptChanges();\n        return table;\n    }\n\n    private static DataTable GetIntegerTable()\n    {\n        // Create sample Customers table, in order\n        // to demonstrate the behavior of the DataTableReader.\n        DataTable table = new DataTable();\n\n        // Create two columns, ID and Name.\n        DataColumn idColumn = table.Columns.Add(&quot;ID&quot;, \n            typeof(int));\n\n        // Set the ID column as the primary key column.\n        table.PrimaryKey = new DataColumn[] { idColumn };\n\n        table.Rows.Add(new object[] { 5 });\n        table.Rows.Add(new object[] { 6 });\n        table.Rows.Add(new object[] { 7 });\n        table.Rows.Add(new object[] { 8 });\n        table.AcceptChanges();\n        return table;\n    }\n\n    private static DataTable GetStringTable()\n    {\n        // Create sample Customers table, in order\n        // to demonstrate the behavior of the DataTableReader.\n        DataTable table = new DataTable();\n\n        // Create two columns, ID and Name.\n        DataColumn idColumn = table.Columns.Add(&quot;ID&quot;, \n            typeof(string));\n\n        // Set the ID column as the primary key column.\n        table.PrimaryKey = new DataColumn[] { idColumn };\n\n        table.Rows.Add(new object[] { &quot;Mary&quot; });\n        table.Rows.Add(new object[] { &quot;Andy&quot; });\n        table.Rows.Add(new object[] { &quot;Peter&quot; });\n        table.Rows.Add(new object[] { &quot;Russ&quot; });\n        table.AcceptChanges();\n        return table;\n    }\n\n    private static void PrintColumns(DataTable table)\n    {\n        // Loop through all the rows in the DataTableReader\n        foreach (DataRow row in table.Rows)\n        {\n            for (int i = 0; i &lt; table.Columns.Count; i++)\n            {\n                Console.Write(row[i] + &quot; &quot;);\n            }\n            Console.WriteLine();\n        }\n    }\n\n    private static DataTable SetupModifiedRows()\n    {\n        // Fill a DataTable with customer info, and \n        // then modify, delete, and add rows.\n\n        DataTable table = GetCustomers();\n        // Row 0 is unmodified.\n        // Row 1 is modified.\n        // Row 2 is deleted.\n        // Row 5 is added.\n        table.Rows[1][&quot;Name&quot;] = &quot;Sydney&quot;;\n        table.Rows[2].Delete();\n        DataRow row = table.NewRow();\n        row[&quot;ID&quot;] = 5;\n        row[&quot;Name&quot;] = &quot;Melony&quot;;\n        table.Rows.Add(row);\n\n        // Note that the code doesn&#39;t call\n        // table.AcceptChanges()\n        return table;\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"DataWorks DataTableLoad.IDataReader#1\">  Sub Main()\n    &#39; This example examines a number of scenarios involving the \n    &#39; DataTable.Load method.\n    Console.WriteLine(&quot;Load a DataTable and infer its schema:&quot;)\n\n    &#39; The table has no schema. The Load method will infer the \n    &#39; schema from the IDataReader:\n    Dim table As New DataTable()\n\n    &#39; Retrieve a data reader, based on the Customers data. In\n    &#39; an application, this data might be coming from a middle-tier\n    &#39; business object:\n    Dim reader As New DataTableReader(GetCustomers())\n\n    table.Load(reader)\n    PrintColumns(table)\n\n    Console.WriteLine(&quot; ============================= &quot;)\n    Console.WriteLine( _\n        &quot;Load a DataTable from an incompatible IDataReader:&quot;)\n\n    &#39; Create a table with a single integer column. Attempt\n    &#39; to load data from a reader with a schema that is \n    &#39; incompatible. Note the exception, determined\n    &#39; by the particular incompatibility:\n    table = GetIntegerTable()\n    reader = New DataTableReader(GetStringTable())\n    Try\n      table.Load(reader)\n    Catch ex As Exception\n      Console.WriteLine(ex.GetType.Name &amp; &quot;:&quot; &amp; ex.Message())\n    End Try\n\n    Console.WriteLine(&quot; ============================= &quot;)\n    Console.WriteLine( _\n        &quot;Load a DataTable with an IDataReader that has extra columns:&quot;)\n\n    &#39; Note that loading a reader with extra columns adds\n    &#39; the columns to the existing table, if possible:\n    table = GetIntegerTable()\n    reader = New DataTableReader(GetCustomers())\n    table.Load(reader)\n    PrintColumns(table)\n\n    Console.WriteLine(&quot; ============================= &quot;)\n        Console.WriteLine( _\n            &quot;Load a DataTable with an IDataReader that has missing columns:&quot;)\n\n    &#39; Note that loading a reader with missing columns causes \n    &#39; the columns to be filled with null data, if possible:\n    table = GetCustomers()\n    reader = New DataTableReader(GetIntegerTable())\n    table.Load(reader)\n    PrintColumns(table)\n\n    &#39; Demonstrate the various possibilites when loading data into\n    &#39; a DataTable that already contains data.\n    Console.WriteLine(&quot; ============================= &quot;)\n    Console.WriteLine(&quot;Demonstrate data considerations:&quot;)\n    Console.WriteLine(&quot;Current value, Original value, (RowState)&quot;)\n    Console.WriteLine(&quot; ============================= &quot;)\n    Console.WriteLine(&quot;Original table:&quot;)\n\n    table = SetupModifiedRows()\n    DisplayRowState(table)\n\n    Console.WriteLine(&quot; ============================= &quot;)\n    Console.WriteLine(&quot;Data in IDataReader to be loaded:&quot;)\n    DisplayRowState(GetChangedCustomers())\n\n    &#39; Load data into a DataTable, retrieve a DataTableReader \n    &#39; containing different data, and call the Load method. \n    Console.WriteLine(&quot; ============================= &quot;)\n    Console.WriteLine(&quot;table.Load(reader)&quot;)\n    Console.WriteLine(&quot; ============================= &quot;)\n\n    table = SetupModifiedRows()\n    reader = New DataTableReader(GetChangedCustomers())\n    table.Load(reader)\n    DisplayRowState(table)\n\n    Console.WriteLine(&quot;Press any key to continue.&quot;)\n    Console.ReadKey()\n  End Sub\n\n  Private Sub DisplayRowState(ByVal table As DataTable)\n    For i As Integer = 0 To table.Rows.Count - 1\n      Dim current As Object = &quot;--&quot;\n      Dim original As Object = &quot;--&quot;\n      Dim rowState As DataRowState = table.Rows(i).RowState\n\n      &#39; Attempt to retrieve the current value, which doesn&#39;t exist\n      &#39; for deleted rows:\n      If rowState &lt;&gt; DataRowState.Deleted Then\n        current = table.Rows(i)(&quot;Name&quot;, DataRowVersion.Current)\n      End If\n\n      &#39; Attempt to retrieve the original value, which doesn&#39;t exist\n      &#39; for added rows:\n      If rowState &lt;&gt; DataRowState.Added Then\n        original = table.Rows(i)(&quot;Name&quot;, DataRowVersion.Original)\n      End If\n      Console.WriteLine(&quot;{0}: {1}, {2} ({3})&quot;, i, _\n        current, original, rowState)\n    Next\n  End Sub\n\n  Private Function GetChangedCustomers() As DataTable\n    &#39; Create sample Customers table.\n    Dim table As New DataTable\n\n    &#39; Create two columns, ID and Name.\n    Dim idColumn As DataColumn = table.Columns.Add(&quot;ID&quot;, _\n        GetType(Integer))\n    table.Columns.Add(&quot;Name&quot;, GetType(String))\n\n    &#39; Set the ID column as the primary key column.\n    table.PrimaryKey = New DataColumn() {idColumn}\n\n    table.Rows.Add(New Object() {1, &quot;XXX&quot;})\n    table.Rows.Add(New Object() {2, &quot;XXX&quot;})\n    table.Rows.Add(New Object() {3, &quot;XXX&quot;})\n    table.Rows.Add(New Object() {4, &quot;XXX&quot;})\n    table.Rows.Add(New Object() {5, &quot;XXX&quot;})\n    table.Rows.Add(New Object() {6, &quot;XXX&quot;})\n    table.AcceptChanges()\n    Return table\n  End Function\n\n  Private Function GetCustomers() As DataTable\n    &#39; Create sample Customers table.\n    Dim table As New DataTable\n\n    &#39; Create two columns, ID and Name.\n    Dim idColumn As DataColumn = table.Columns.Add(&quot;ID&quot;, _\n        GetType(Integer))\n    table.Columns.Add(&quot;Name&quot;, GetType(String))\n\n    &#39; Set the ID column as the primary key column.\n    table.PrimaryKey = New DataColumn() {idColumn}\n\n    table.Rows.Add(New Object() {1, &quot;Mary&quot;})\n    table.Rows.Add(New Object() {2, &quot;Andy&quot;})\n    table.Rows.Add(New Object() {3, &quot;Peter&quot;})\n    table.Rows.Add(New Object() {4, &quot;Russ&quot;})\n    table.AcceptChanges()\n    Return table\n  End Function\n\n  Private Function GetIntegerTable() As DataTable\n    &#39; Create sample table with a single Int32 column.\n    Dim table As New DataTable\n\n    Dim idColumn As DataColumn = table.Columns.Add(&quot;ID&quot;, _\n        GetType(Integer))\n\n    &#39; Set the ID column as the primary key column.\n    table.PrimaryKey = New DataColumn() {idColumn}\n\n    table.Rows.Add(New Object() {5})\n    table.Rows.Add(New Object() {6})\n    table.Rows.Add(New Object() {7})\n    table.Rows.Add(New Object() {8})\n    table.AcceptChanges()\n    Return table\n  End Function\n\n  Private Function GetStringTable() As DataTable\n    &#39; Create sample table with a single String column.\n    Dim table As New DataTable\n\n    Dim idColumn As DataColumn = table.Columns.Add(&quot;ID&quot;, _\n        GetType(String))\n\n    &#39; Set the ID column as the primary key column.\n    table.PrimaryKey = New DataColumn() {idColumn}\n\n    table.Rows.Add(New Object() {&quot;Mary&quot;})\n    table.Rows.Add(New Object() {&quot;Andy&quot;})\n    table.Rows.Add(New Object() {&quot;Peter&quot;})\n    table.Rows.Add(New Object() {&quot;Russ&quot;})\n    table.AcceptChanges()\n    Return table\n  End Function\n\n  Private Sub PrintColumns( _\n     ByVal table As DataTable)\n\n    &#39; Loop through all the rows in the DataTableReader.\n    For Each row As DataRow In table.Rows\n      For Each col As DataColumn In table.Columns\n        Console.Write(row(col).ToString() &amp; &quot; &quot;)\n      Next\n      Console.WriteLine()\n    Next\n  End Sub\n\n  Private Function SetupModifiedRows() As DataTable\n    &#39; Fill a DataTable with customer info, and \n    &#39; then modify, delete, and add rows.\n\n    Dim table As DataTable = GetCustomers()\n    &#39; Row 0 is unmodified.\n    &#39; Row 1 is modified.\n    &#39; Row 2 is deleted.\n    &#39; Row 5 is added.\n    table.Rows(1)(&quot;Name&quot;) = &quot;Sydney&quot;\n    table.Rows(2).Delete()\n    Dim row As DataRow = table.NewRow\n    row(&quot;ID&quot;) = 5\n    row(&quot;Name&quot;) = &quot;Melony&quot;\n    table.Rows.Add(row)\n\n    &#39; Note that the code doesn&#39;t call\n    &#39; table.AcceptChanges()\n    Return table\n  End Function\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_Load_System_Data_IDataReader_System_Data_LoadOption_\">\r\n    \r\n            <a id=\"System_Data_DataTable_Load_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Load(IDataReader,LoadOption)</div>        \r\n          </div>\r\n    \r\n            <p>Fills a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> with values from a data source using the supplied <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a>. If the <code>DataTable</code> already contains rows, the incoming data from the data source is merged with the existing rows according to the value of the <code>loadOption</code> parameter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>reader</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> that provides one or more result sets.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>loadOption</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.loadoption\" data-linktype=\"relative-path\">LoadOption</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A value from the <a class=\"xref\" href=\"system.data.loadoption\" data-linktype=\"relative-path\">LoadOption</a> enumeration that indicates how rows already in the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> are combined with incoming rows that share the same primary key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>Load</code> method consumes the first result set from the loaded <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a>, and after successful completion, sets the reader&#39;s position to the next result set, if any. When converting data, the <code>Load</code> method uses the same conversion rules as the <a class=\"xref\" href=\"system.data.common.dbdataadapter#System_Data_Common_DbDataAdapter_Fill_\" data-linktype=\"relative-path\">Fill</a> method.  </p>\n<p> The <code>Load</code> method must take into account three specific issues when loading the data from an <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> instance: schema, data, and event operations. When working with the schema, the <code>Load</code> method may encounter conditions as described in the following table. The schema operations take place for all imported result sets, even those containing no data.  </p>\n<table>\n<thead>\n<tr>\n<th>Condition</th>\n<th>Behavior</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>The <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> has no schema.</td>\n<td>The <code>Load</code> method infers the schema based on the result set from the imported <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a>.</td>\n</tr>\n<tr>\n<td>The <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> has a schema, but it is incompatible with the loaded schema.</td>\n<td>The <code>Load</code> method throws an exception corresponding to the particular error that occurs when attempting to load data into the incompatible schema.</td>\n</tr>\n<tr>\n<td>The schemas are compatible, but the loaded result set schema contains columns that don&#39;t exist in the <code>DataTable</code>.</td>\n<td>The <code>Load</code> method adds the extra columns to <code>DataTable</code>’s schema. The method throws an exception if corresponding columns in the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> and the loaded result set are not value compatible. The method also retrieves constraint information from the result set for all added columns. Except for the case of Primary Key constraint, this constraint information is used only if the current <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> does not contain any columns at the start of the load operation.</td>\n</tr>\n<tr>\n<td>The schemas are compatible, but the loaded result set schema contains fewer columns than does the <code>DataTable</code>.</td>\n<td>If a missing column has a default value defined or the column&#39;s data type is nullable, the <code>Load</code> method allows the rows to be added, substituting the default or null value for the missing column. If no default value or null can be used, then the <code>Load</code> method throws an exception. If no specific default value has been supplied, the <code>Load</code> method uses the null value as the implied default value.</td>\n</tr>\n</tbody>\n</table>\n<p> Before considering the behavior of the <code>Load</code> method in terms of data operations, consider that each row within a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> maintains both the current value and the original value for each column. These values may be equivalent, or may be different if the data in the row has been changed since filling the <code>DataTable</code>. See <a href=\"../Topic/Row%20States%20and%20Row%20Versions.md\" data-linktype=\"relative-path\">Row States and Row Versions</a> for more information.  </p>\n<p> In this method call, the specified <a class=\"xref\" href=\"system.data.loadoption\" data-linktype=\"relative-path\">LoadOption</a> parameter influences the processing of the incoming data. How should the Load method handle loading rows that have the same primary key as existing rows? Should it modify current values, original values, or both? These issues, and more, are controlled by the <code>loadOption</code> parameter.  </p>\n<p> If the existing row and the incoming row contain corresponding primary key values, the row is processed using its current row state value, otherwise it&#39;s treated as a new row.  </p>\n<p> In terms of event operations, the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_RowChanging\" data-linktype=\"relative-path\">RowChanging</a> event occurs before each row is changed, and the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_RowChanged\" data-linktype=\"relative-path\">RowChanged</a> event occurs after each row has been changed. In each case, the <a class=\"xref\" href=\"system.data.datarowchangeeventargs#System_Data_DataRowChangeEventArgs_Action_\" data-linktype=\"relative-path\">Action</a> property of the <a class=\"xref\" href=\"system.data.datarowchangeeventargs\" data-linktype=\"relative-path\">DataRowChangeEventArgs</a> instance passed to the event handler contains information about the particular action associated with the event. This action value varies, depending on the state of the row before the load operation. In each case, both events occur, and the action is the same for each. The action may be applied to either the current or original version of each row, or both, depending on the current row state.  </p>\n<p> The following table displays behavior for the Load method when called with each of the <code>LoadOption</code> values, and also shows how the values interact with the row state for the row being loaded. The final row (labeled &quot;(Not present)&quot;) describes the behavior for incoming rows that don&#39;t match any existing row. Each cell in this table describes the current and original value for a field within a row, along with the <a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a> for the value after the <code>Load</code> method has completed.  </p>\n<table>\n<thead>\n<tr>\n<th>Existing DataRowState</th>\n<th>Upsert</th>\n<th>OverwriteChanges</th>\n<th>PreserveChanges (Default behavior)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Added</td>\n<td>Current = &lt;Incoming&gt;<br><br> Original = -&lt;Not available&gt;<br><br> State = &lt;Added&gt;<br><br> RowAction = Change</td>\n<td>Current = &lt;Incoming&gt;<br><br> Original = &lt;Incoming&gt;<br><br> State = &lt;Unchanged&gt;<br><br> RowAction = ChangeCurrentAndOriginal</td>\n<td>Current = &lt;Existing&gt;<br><br> Original = &lt;Incoming&gt;<br><br> State = &lt;Modified&gt;<br><br> RowAction = ChangeOriginal</td>\n</tr>\n<tr>\n<td>Modified</td>\n<td>Current = &lt;Incoming&gt;<br><br> Original = &lt;Existing&gt;<br><br> State = &lt;Modified&gt;<br><br> RowAction = Change</td>\n<td>Current = &lt;Incoming&gt;<br><br> Original = &lt;Incoming&gt;<br><br> State = &lt;Unchanged&gt;<br><br> RowAction = ChangeCurrentAndOriginal</td>\n<td>Current = &lt;Existing&gt;<br><br> Original = &lt;Incoming&gt;<br><br> State = &lt;Modified&gt;<br><br> RowAction =ChangeOriginal</td>\n</tr>\n<tr>\n<td>eleted</td>\n<td>(Load does not affect deleted rows)<br><br> Current = ---<br><br> Original = &lt;Existing&gt;<br><br> State = &lt;Deleted&gt;<br><br> (New row is added with the following characteristics)<br><br> Current = &lt;Incoming&gt;<br><br> Original = &lt;Not available&gt;<br><br> State = &lt;Added&gt;<br><br> RowAction = Add</td>\n<td>Undo delete and<br><br> Current = &lt;Incoming&gt;<br><br> Original = &lt;Incoming&gt;<br><br> State = &lt;Unchanged&gt;<br><br> RowAction = ChangeCurrentAndOriginal</td>\n<td>Current = &lt;Not available&gt;<br><br> Original = &lt;Incoming&gt;<br><br> State = &lt;Deleted&gt;<br><br> RowAction = ChangeOriginal</td>\n</tr>\n<tr>\n<td>Unchanged</td>\n<td>Current = &lt;Incoming&gt;<br><br> Original = &lt;Existing&gt;<br><br> If new value is the same as the existing value then<br><br> State = &lt;Unchanged&gt;<br><br> RowAction = Nothing<br><br> Else<br><br> State = &lt;Modified&gt;<br><br> RowAction = Change</td>\n<td>Current = &lt;Incoming&gt;<br><br> Original = &lt;Incoming&gt;<br><br> State = &lt;Unchanged&gt;<br><br> RowAction = ChangeCurrentAndOriginal</td>\n<td>Current = &lt;Incoming&gt;<br><br> Original = &lt;Incoming&gt;<br><br> State = &lt;Unchanged&gt;<br><br> RowAction = ChangeCurrentAndOriginal</td>\n</tr>\n<tr>\n<td>Not present)</td>\n<td>Current = &lt;Incoming&gt;<br><br> Original = &lt;Not available&gt;<br><br> State = &lt;Added&gt;<br><br> RowAction = Add</td>\n<td>Current = &lt;Incoming&gt;<br><br> Original = &lt;Incoming&gt;<br><br> State = &lt;Unchanged&gt;<br><br> RowAction = ChangeCurrentAndOriginal</td>\n<td>Current = &lt;Incoming&gt;<br><br> Original = &lt;Incoming&gt;<br><br> State = &lt;Unchanged&gt;<br><br> RowAction = ChangeCurrentAndOriginal</td>\n</tr>\n</tbody>\n</table>\n<p> Values in a <a class=\"xref\" href=\"system.data.datacolumn\" data-linktype=\"relative-path\">DataColumn</a> can be constrained through use of properties such as <a class=\"xref\" href=\"system.data.datacolumn#System_Data_DataColumn_ReadOnly_\" data-linktype=\"relative-path\">ReadOnly</a> and <a class=\"xref\" href=\"system.data.datacolumn#System_Data_DataColumn_AutoIncrement_\" data-linktype=\"relative-path\">AutoIncrement</a>. The <code>Load</code> method handles such columns in a manner that is consistent with the behavior defined by the column&#39;s properties. The read only constraint on a <a class=\"xref\" href=\"system.data.datacolumn\" data-linktype=\"relative-path\">DataColumn</a> is applicable only for changes that occur in memory. The <code>Load</code> method&#39;s overwrites the read-only column values, if needed.  </p>\n<p> If you specify the OverwriteChanges or PreserveChanges options when calling the <code>Load</code> method, then the assumption is made that the incoming data is coming from the <code>DataTable</code>&#39;s primary data source, and the DataTable tracks changes and can propagate the changes back to the data source. If you select the Upsert option, it is assumed that the data is coming from one of a secondary data source, such as data provided by a middle-tier component, perhaps altered by a user. In this case, the assumption is that the intent is to aggregate data from one or more data sources in the <code>DataTable</code>, and then perhaps propagate the data back to the primary data source. The <a class=\"xref\" href=\"system.data.loadoption\" data-linktype=\"relative-path\">LoadOption</a> parameter is used for determining the specific version of the row that is to be used for primary key comparison. The table below provides the details.  </p>\n<table>\n<thead>\n<tr>\n<th>Load option</th>\n<th>DataRow version used for primary key comparison</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>OverwriteChanges</code></td>\n<td>Original version, if it exists, otherwise Current version</td>\n</tr>\n<tr>\n<td><code>PreserveChanges</code></td>\n<td>Original version, if it exists, otherwise Current version</td>\n</tr>\n<tr>\n<td><code>Upsert</code></td>\n<td>Current version, if it exists, otherwise Original version</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates several of the issues involved with calling the Load method. First, the example focuses on schema issues, including inferring a schema from the loaded <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a>, and then handling incompatible schemas, and schemas with missing or additional columns. The example then focuses on data issues, including handling the various loading options.  </p>\n<pre><code class=\"lang-cs\" name=\"DataWorks DataTableLoad.LoadOption#1\">    static void Main()\n    {\n        // This example examines a number of scenarios involving the \n        // DataTable.Load method.\n        Console.WriteLine(&quot;Load a DataTable and infer its schema:&quot;);\n\n        // The table has no schema. The Load method will infer the \n        // schema from the IDataReader:\n        DataTable table = new DataTable();\n\n        // Retrieve a data reader, based on the Customers data. In\n        // an application, this data might be coming from a middle-tier\n        // business object:\n        DataTableReader reader = new DataTableReader(GetCustomers());\n\n        table.Load(reader);\n        PrintColumns(table);\n\n        Console.WriteLine(&quot; ============================= &quot;);\n        Console.WriteLine(\n            &quot;Load a DataTable from an incompatible IDataReader:&quot;);\n\n        // Create a table with a single integer column. Attempt\n        // to load data from a reader with a schema that is \n        // incompatible. Note the exception, determined\n        // by the particular incompatibility:\n        table = GetIntegerTable();\n        reader = new DataTableReader(GetStringTable());\n        try\n        {\n            table.Load(reader);\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(ex.GetType().Name + &quot;:&quot; + ex.Message);\n        }\n\n        Console.WriteLine(&quot; ============================= &quot;);\n        Console.WriteLine(\n            &quot;Load a DataTable with an IDataReader that has extra columns:&quot;);\n\n        // Note that loading a reader with extra columns adds\n        // the columns to the existing table, if possible:\n        table = GetIntegerTable();\n        reader = new DataTableReader(GetCustomers());\n        table.Load(reader);\n        PrintColumns(table);\n\n        Console.WriteLine(&quot; ============================= &quot;);\n        Console.WriteLine(\n            &quot;Load a DataTable with an IDataReader that has missing columns:&quot;);\n\n        // Note that loading a reader with missing columns causes \n        // the columns to be filled with null data, if possible:\n        table = GetCustomers();\n        reader = new DataTableReader(GetIntegerTable());\n        table.Load(reader);\n        PrintColumns(table);\n\n        // Demonstrate the various possibilites when loading data into\n        // a DataTable that already contains data.\n        Console.WriteLine(&quot; ============================= &quot;);\n        Console.WriteLine(&quot;Demonstrate data considerations:&quot;);\n        Console.WriteLine(&quot;Current value, Original value, (RowState)&quot;);\n        Console.WriteLine(&quot; ============================= &quot;);\n        Console.WriteLine(&quot;Original table:&quot;);\n\n        table = SetupModifiedRows();\n        DisplayRowState(table);\n\n        Console.WriteLine(&quot; ============================= &quot;);\n        Console.WriteLine(&quot;Data in IDataReader to be loaded:&quot;);\n        DisplayRowState(GetChangedCustomers());\n\n        PerformDemo(LoadOption.OverwriteChanges);\n        PerformDemo(LoadOption.PreserveChanges);\n        PerformDemo(LoadOption.Upsert);\n\n        Console.WriteLine(&quot;Press any key to continue.&quot;);\n        Console.ReadKey();\n    }\n\n    private static void DisplayRowState(DataTable table)\n    {\n        for (int i = 0; i &lt;= table.Rows.Count - 1; i++)\n        {\n            object current = &quot;--&quot;;\n            object original = &quot;--&quot;;\n            DataRowState rowState = table.Rows[i].RowState;\n\n            // Attempt to retrieve the current value, which doesn&#39;t exist\n            // for deleted rows:\n            if (rowState != DataRowState.Deleted)\n            {\n                current = table.Rows[i][&quot;Name&quot;, DataRowVersion.Current];\n            }\n\n            // Attempt to retrieve the original value, which doesn&#39;t exist\n            // for added rows:\n            if (rowState != DataRowState.Added)\n            {\n                original = table.Rows[i][&quot;Name&quot;, DataRowVersion.Original];\n            }\n            Console.WriteLine(&quot;{0}: {1}, {2} ({3})&quot;, i, \n                current, original, rowState);\n        }\n    }\n\n    private static DataTable GetChangedCustomers()\n    {\n        // Create sample Customers table.\n        DataTable table = new DataTable();\n\n        // Create two columns, ID and Name.\n        DataColumn idColumn = table.Columns.Add(&quot;ID&quot;, typeof(int));\n        table.Columns.Add(&quot;Name&quot;, typeof(string));\n\n        // Set the ID column as the primary key column.\n        table.PrimaryKey = new DataColumn[] { idColumn };\n\n        table.Rows.Add(new object[] { 0, &quot;XXX&quot; });\n        table.Rows.Add(new object[] { 1, &quot;XXX&quot; });\n        table.Rows.Add(new object[] { 2, &quot;XXX&quot; });\n        table.Rows.Add(new object[] { 3, &quot;XXX&quot; });\n        table.Rows.Add(new object[] { 4, &quot;XXX&quot; });\n        table.AcceptChanges();\n        return table;\n    }\n\n    private static DataTable GetCustomers()\n    {\n        // Create sample Customers table, in order\n        // to demonstrate the behavior of the DataTableReader.\n        DataTable table = new DataTable();\n\n        // Create two columns, ID and Name.\n        DataColumn idColumn = table.Columns.Add(&quot;ID&quot;, typeof(int));\n        table.Columns.Add(&quot;Name&quot;, typeof(string));\n\n        // Set the ID column as the primary key column.\n        table.PrimaryKey = new DataColumn[] { idColumn };\n\n        table.Rows.Add(new object[] { 0, &quot;Mary&quot; });\n        table.Rows.Add(new object[] { 1, &quot;Andy&quot; });\n        table.Rows.Add(new object[] { 2, &quot;Peter&quot; });\n        table.AcceptChanges();\n        return table;\n    }\n\n    private static DataTable GetIntegerTable()\n    {\n        // Create sample Customers table, in order\n        // to demonstrate the behavior of the DataTableReader.\n        DataTable table = new DataTable();\n\n        // Create two columns, ID and Name.\n        DataColumn idColumn = table.Columns.Add(&quot;ID&quot;, typeof(int));\n\n        // Set the ID column as the primary key column.\n        table.PrimaryKey = new DataColumn[] { idColumn };\n\n        table.Rows.Add(new object[] { 4 });\n        table.Rows.Add(new object[] { 5 });\n        table.AcceptChanges();\n        return table;\n    }\n\n    private static DataTable GetStringTable()\n    {\n        // Create sample Customers table, in order\n        // to demonstrate the behavior of the DataTableReader.\n        DataTable table = new DataTable();\n\n        // Create two columns, ID and Name.\n        DataColumn idColumn = table.Columns.Add(&quot;ID&quot;, typeof(string));\n\n        // Set the ID column as the primary key column.\n        table.PrimaryKey = new DataColumn[] { idColumn };\n\n        table.Rows.Add(new object[] { &quot;Mary&quot; });\n        table.Rows.Add(new object[] { &quot;Andy&quot; });\n        table.Rows.Add(new object[] { &quot;Peter&quot; });\n        table.AcceptChanges();\n        return table;\n    }\n\n    private static void PerformDemo(LoadOption optionForLoad)\n    {\n\n        // Load data into a DataTable, retrieve a DataTableReader containing\n        // different data, and call the Load method. Depending on the\n        // LoadOption value passed as a parameter, this procedure displays\n        // different results in the DataTable.\n        Console.WriteLine(&quot; ============================= &quot;);\n        Console.WriteLine(&quot;table.Load(reader, {0})&quot;, optionForLoad);\n        Console.WriteLine(&quot; ============================= &quot;);\n\n        DataTable table = SetupModifiedRows();\n        DataTableReader reader = new DataTableReader(GetChangedCustomers());\n        table.RowChanging +=new DataRowChangeEventHandler(HandleRowChanging);\n    \n        table.Load(reader, optionForLoad);\n        Console.WriteLine();\n        DisplayRowState(table);\n    }\n\n    private static void PrintColumns(DataTable table)\n    {\n        // Loop through all the rows in the DataTableReader\n        foreach (DataRow row in table.Rows)\n        {\n            for (int i = 0; i &lt; table.Columns.Count; i++)\n            {\n                Console.Write(row[i] + &quot; &quot;);\n            }\n            Console.WriteLine();\n        }\n    }\n\n    private static DataTable SetupModifiedRows()\n    {\n        // Fill a DataTable with customer info, and \n        // then modify, delete, and add rows.\n\n        DataTable table = GetCustomers();\n        // Row 0 is unmodified.\n        // Row 1 is modified.\n        // Row 2 is deleted.\n        // Row 3 is added.\n        table.Rows[1][&quot;Name&quot;] = &quot;Sydney&quot;;\n        table.Rows[2].Delete();\n        DataRow row = table.NewRow();\n        row[&quot;ID&quot;] = 3;\n        row[&quot;Name&quot;] = &quot;Melony&quot;;\n        table.Rows.Add(row);\n\n        // Note that the code doesn&#39;t call\n        // table.AcceptChanges()\n        return table;\n    }\n\n    static void HandleRowChanging(object sender, DataRowChangeEventArgs e)\n    {\n        Console.WriteLine(\n            &quot;RowChanging event: ID = {0}, action = {1}&quot;, e.Row[&quot;ID&quot;], e.Action);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"DataWorks DataTableLoad.LoadOption#1\">  Sub Main()\n    Dim table As New DataTable()\n\n    &#39; This example examines a number of scenarios involving the\n    &#39;  DataTable.Load method.\n    Console.WriteLine(&quot;Load a DataTable and infer its schema:&quot;)\n\n    &#39; Retrieve a data reader, based on the Customers data. In\n    &#39; an application, this data might be coming from a middle-tier\n    &#39; business object:\n    Dim reader As New DataTableReader(GetCustomers())\n\n    &#39; The table has no schema. The Load method will infer the \n    &#39; schema from the IDataReader:\n    table.Load(reader)\n    PrintColumns(table)\n\n    Console.WriteLine(&quot; ============================= &quot;)\n    Console.WriteLine( _\n        &quot;Load a DataTable from an incompatible IDataReader:&quot;)\n\n    &#39; Create a table with a single integer column. Attempt\n    &#39; to load data from a reader with a schema that is \n    &#39; incompatible. Note the exception, determined\n    &#39; by the particular incompatibility:\n    table = GetIntegerTable()\n    reader = New DataTableReader(GetStringTable())\n    Try\n      table.Load(reader)\n    Catch ex As Exception\n      Console.WriteLine(ex.GetType.Name &amp; &quot;:&quot; &amp; ex.Message())\n    End Try\n\n    Console.WriteLine(&quot; ============================= &quot;)\n    Console.WriteLine( _\n        &quot;Load a DataTable with an IDataReader that has extra columns:&quot;)\n\n    &#39; Note that loading a reader with extra columns adds\n    &#39; the columns to the existing table, if possible:\n    table = GetIntegerTable()\n    reader = New DataTableReader(GetCustomers())\n    table.Load(reader)\n    PrintColumns(table)\n\n    Console.WriteLine(&quot; ============================= &quot;)\n    Console.WriteLine( _\n        &quot;Load a DataTable with an IDataReader that has missing columns:&quot;)\n\n    &#39; Note that loading a reader with missing columns causes \n    &#39; the columns to be filled with null data, if possible:\n    table = GetCustomers()\n    reader = New DataTableReader(GetIntegerTable())\n    table.Load(reader)\n    PrintColumns(table)\n\n    &#39; Demonstrate the various possibilites when loading data into\n    &#39; a DataTable that already contains data.\n    Console.WriteLine(&quot; ============================= &quot;)\n    Console.WriteLine(&quot;Demonstrate data considerations:&quot;)\n    Console.WriteLine(&quot;Current value, Original value, (RowState)&quot;)\n    Console.WriteLine(&quot; ============================= &quot;)\n    Console.WriteLine(&quot;Original table:&quot;)\n\n    table = SetupModifiedRows()\n    DisplayRowState(table)\n\n    Console.WriteLine(&quot; ============================= &quot;)\n    Console.WriteLine(&quot;Data in IDataReader to be loaded:&quot;)\n    DisplayRowState(GetChangedCustomers())\n\n    PerformDemo(LoadOption.OverwriteChanges)\n    PerformDemo(LoadOption.PreserveChanges)\n    PerformDemo(LoadOption.Upsert)\n\n    Console.WriteLine(&quot;Press any key to continue.&quot;)\n    Console.ReadKey()\n  End Sub\n\n  Private Sub DisplayRowState(ByVal table As DataTable)\n    For i As Integer = 0 To table.Rows.Count - 1\n      Dim current As Object = &quot;--&quot;\n      Dim original As Object = &quot;--&quot;\n      Dim rowState As DataRowState = table.Rows(i).RowState\n\n      &#39; Attempt to retrieve the current value, which doesn&#39;t exist\n      &#39; for deleted rows:\n      If rowState &lt;&gt; DataRowState.Deleted Then\n        current = table.Rows(i)(&quot;Name&quot;, DataRowVersion.Current)\n      End If\n\n      &#39; Attempt to retrieve the original value, which doesn&#39;t exist\n      &#39; for added rows:\n      If rowState &lt;&gt; DataRowState.Added Then\n        original = table.Rows(i)(&quot;Name&quot;, DataRowVersion.Original)\n      End If\n      Console.WriteLine(&quot;{0}: {1}, {2} ({3})&quot;, i, _\n        current, original, rowState)\n    Next\n  End Sub\n\n  Private Function GetChangedCustomers() As DataTable\n    &#39; Create sample Customers table.\n    Dim table As New DataTable\n\n    &#39; Create two columns, ID and Name.\n    Dim idColumn As DataColumn = table.Columns.Add(&quot;ID&quot;, _\n        GetType(Integer))\n    table.Columns.Add(&quot;Name&quot;, GetType(String))\n\n    &#39; Set the ID column as the primary key column.\n    table.PrimaryKey = New DataColumn() {idColumn}\n\n    table.Rows.Add(New Object() {0, &quot;XXX&quot;})\n    table.Rows.Add(New Object() {1, &quot;XXX&quot;})\n    table.Rows.Add(New Object() {2, &quot;XXX&quot;})\n    table.Rows.Add(New Object() {3, &quot;XXX&quot;})\n    table.Rows.Add(New Object() {4, &quot;XXX&quot;})\n    table.AcceptChanges()\n    Return table\n  End Function\n\n  Private Function GetCustomers() As DataTable\n    &#39; Create sample Customers table.\n    Dim table As New DataTable\n\n    &#39; Create two columns, ID and Name.\n    Dim idColumn As DataColumn = table.Columns.Add(&quot;ID&quot;, _\n        GetType(Integer))\n    table.Columns.Add(&quot;Name&quot;, GetType(String))\n\n    &#39; Set the ID column as the primary key column.\n    table.PrimaryKey = New DataColumn() {idColumn}\n\n    table.Rows.Add(New Object() {0, &quot;Mary&quot;})\n    table.Rows.Add(New Object() {1, &quot;Andy&quot;})\n    table.Rows.Add(New Object() {2, &quot;Peter&quot;})\n    table.AcceptChanges()\n    Return table\n  End Function\n\n  Private Function GetIntegerTable() As DataTable\n    &#39; Create sample table with a single Int32 column.\n    Dim table As New DataTable\n\n    Dim idColumn As DataColumn = table.Columns.Add(&quot;ID&quot;, _\n        GetType(Integer))\n\n    &#39; Set the ID column as the primary key column.\n    table.PrimaryKey = New DataColumn() {idColumn}\n\n    table.Rows.Add(New Object() {4})\n    table.Rows.Add(New Object() {5})\n    table.AcceptChanges()\n    Return table\n  End Function\n\n  Private Function GetStringTable() As DataTable\n    &#39; Create sample table with a single String column.\n    Dim table As New DataTable\n\n    Dim idColumn As DataColumn = table.Columns.Add(&quot;ID&quot;, _\n        GetType(String))\n\n    &#39; Set the ID column as the primary key column.\n    table.PrimaryKey = New DataColumn() {idColumn}\n\n    table.Rows.Add(New Object() {&quot;Mary&quot;})\n    table.Rows.Add(New Object() {&quot;Andy&quot;})\n    table.Rows.Add(New Object() {&quot;Peter&quot;})\n    table.AcceptChanges()\n    Return table\n  End Function\n\n  Private Sub PerformDemo(ByVal optionForLoad As LoadOption)\n\n    &#39; Load data into a DataTable, retrieve a DataTableReader containing\n    &#39; different data, and call the Load method. Depending on the\n    &#39; LoadOption value passed as a parameter, this procedure displays\n    &#39; different results in the DataTable.\n    Console.WriteLine(&quot; ============================= &quot;)\n    Console.WriteLine(&quot;table.Load(reader, {0})&quot;, optionForLoad)\n    Console.WriteLine(&quot; ============================= &quot;)\n\n    Dim table As DataTable = SetupModifiedRows()\n    Dim reader As New DataTableReader(GetChangedCustomers())\n    AddHandler table.RowChanging, New _\n        DataRowChangeEventHandler(AddressOf HandleRowChanging)\n\n    table.Load(reader, optionForLoad)\n    Console.WriteLine()\n    DisplayRowState(table)\n  End Sub\n\n  Private Sub PrintColumns( _\n     ByVal table As DataTable)\n\n    &#39; Loop through all the rows in the DataTableReader.\n    For Each row As DataRow In table.Rows\n      For Each col As DataColumn In table.Columns\n        Console.Write(row(col).ToString() &amp; &quot; &quot;)\n      Next\n      Console.WriteLine()\n    Next\n  End Sub\n\n  Private Function SetupModifiedRows() As DataTable\n    &#39; Fill a DataTable with customer info, and \n    &#39; then modify, delete, and add rows.\n\n    Dim table As DataTable = GetCustomers()\n    &#39; Row 0 is unmodified.\n    &#39; Row 1 is modified.\n    &#39; Row 2 is deleted.\n    &#39; Row 3 is added.\n    table.Rows(1)(&quot;Name&quot;) = &quot;Sydney&quot;\n    table.Rows(2).Delete()\n    Dim row As DataRow = table.NewRow\n    row(&quot;ID&quot;) = 3\n    row(&quot;Name&quot;) = &quot;Melony&quot;\n    table.Rows.Add(row)\n\n    &#39; Note that the code doesn&#39;t call\n    &#39; table.AcceptChanges()\n    Return table\n  End Function\n\n  Private Sub HandleRowChanging(ByVal sender As Object, _\n        ByVal e As System.Data.DataRowChangeEventArgs)\n    Console.WriteLine( _\n        &quot;RowChanging event: ID = {0}, action = {1}&quot;, e.Row(&quot;ID&quot;), e.Action)\n  End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_Load_System_Data_IDataReader_System_Data_LoadOption_System_Data_FillErrorEventHandler_\">\r\n    \r\n            <a id=\"System_Data_DataTable_Load_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Load(IDataReader,LoadOption,FillErrorEventHandler)</div>        \r\n          </div>\r\n    \r\n            <p>Fills a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> with values from a data source using the supplied <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> using an error-handling delegate.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, System.Data.FillErrorEventHandler errorHandler);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>reader</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> that provides a result set.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>loadOption</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.loadoption\" data-linktype=\"relative-path\">LoadOption</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A value from the <a class=\"xref\" href=\"system.data.loadoption\" data-linktype=\"relative-path\">LoadOption</a> enumeration that indicates how rows already in the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> are combined with incoming rows that share the same primary key.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>errorHandler</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.fillerroreventhandler\" data-linktype=\"relative-path\">FillErrorEventHandler</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.data.fillerroreventhandler\" data-linktype=\"relative-path\">FillErrorEventHandler</a> delegate to call when an error occurs while loading data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>Load</code> method consumes the first result set from the loaded <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a>, and after successful completion, sets the reader&#39;s position to the next result set, if any. When converting data, the <code>Load</code> method uses the same conversion rules as the <a class=\"xref\" href=\"system.data.common.dbdataadapter#System_Data_Common_DbDataAdapter_Fill_\" data-linktype=\"relative-path\">Fill</a> method.  </p>\n<p> The <code>Load</code> method must take into account three specific issues when loading the data from an <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> instance: schema, data, and event operations. When working with the schema, the <code>Load</code> method may encounter conditions as described in the following table. The schema operations take place for all imported result sets, even those containing no data.  </p>\n<table>\n<thead>\n<tr>\n<th>Condition</th>\n<th>Behavior</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>The <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> has no schema.</td>\n<td>The <code>Load</code> method infers the schema based on the result set from the imported <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a>.</td>\n</tr>\n<tr>\n<td>The <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> has a schema, but it is incompatible with the loaded schema.</td>\n<td>The <code>Load</code> method throws an exception corresponding to the particular error that occurs when attempting to load data into the incompatible schema.</td>\n</tr>\n<tr>\n<td>The schemas are compatible, but the loaded result set schema contains columns that don&#39;t exist in the <code>DataTable</code>.</td>\n<td>The <code>Load</code> method adds the extra column(s) to <code>DataTable</code>’s schema. The method throws an exception if corresponding columns in the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> and the loaded result set are not value compatible. The method also retrieves constraint information from the result set for all added columns. Except for the case of Primary Key constraint, this constraint information is used only if the current <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> does not contain any columns at the start of the load operation.</td>\n</tr>\n<tr>\n<td>The schemas are compatible, but the loaded result set schema contains fewer columns than does the <code>DataTable</code>.</td>\n<td>If a missing column has a default value defined or the column&#39;s data type is nullable, the <code>Load</code> method allows the rows to be added, substituting the default or null value for the missing column. If no default value or null can be used, then the <code>Load</code> method throws an exception. If no specific default value has been supplied, the <code>Load</code> method uses the null value as the implied default value.</td>\n</tr>\n</tbody>\n</table>\n<p> Before considering the behavior of the <code>Load</code> method in terms of data operations, consider that each row within a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> maintains both the current value and the original value for each column. These values may be equivalent, or may be different if the data in the row has been changed since filling the <code>DataTable</code>. See <a href=\"../Topic/Row%20States%20and%20Row%20Versions.md\" data-linktype=\"relative-path\">Row States and Row Versions</a> for more information.  </p>\n<p> In this method call, the specified <a class=\"xref\" href=\"system.data.loadoption\" data-linktype=\"relative-path\">LoadOption</a> parameter influences the processing of the incoming data. How should the Load method handle loading rows that have the same primary key as existing rows? Should it modify current values, original values, or both? These issues, and more, are controlled by the <code>loadOption</code> parameter.  </p>\n<p> If the existing row and the incoming row contain corresponding primary key values, the row is processed using its current row state value, otherwise it&#39;s treated as a new row.  </p>\n<p> In terms of event operations, the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_RowChanging\" data-linktype=\"relative-path\">RowChanging</a> event occurs before each row is changed, and the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_RowChanged\" data-linktype=\"relative-path\">RowChanged</a> event occurs after each row has been changed. In each case, the <a class=\"xref\" href=\"system.data.datarowchangeeventargs#System_Data_DataRowChangeEventArgs_Action_\" data-linktype=\"relative-path\">Action</a> property of the <a class=\"xref\" href=\"system.data.datarowchangeeventargs\" data-linktype=\"relative-path\">DataRowChangeEventArgs</a> instance passed to the event handler contains information about the particular action associated with the event. This action value varies, depending on the state of the row before the load operation. In each case, both events occur, and the action is the same for each. The action may be applied to either the current or original version of each row, or both, depending on the current row state.  </p>\n<p> The following table displays behavior for the Load method when called with each of the <code>LoadOption</code> values, and also shows how the values interact with the row state for the row being loaded. The final row (labeled &quot;(Not present)&quot;) describes the behavior for incoming rows that don&#39;t match any existing row. Each cell in this table describes the current and original value for a field within a row, along with the <a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a> for the value after the <code>Load</code> method has completed.  </p>\n<table>\n<thead>\n<tr>\n<th>Existing DataRowState</th>\n<th>Upsert</th>\n<th>OverwriteChanges</th>\n<th>PreserveChanges (Default behavior)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Added</td>\n<td>Current = &lt;Incoming&gt;<br><br> Original = -&lt;Not available&gt;<br><br> State = &lt;Added&gt;<br><br> RowAction = Change</td>\n<td>Current = &lt;Incoming&gt;<br><br> Original = &lt;Incoming&gt;<br><br> State = &lt;Unchanged&gt;<br><br> RowAction = ChangeCurrentAndOriginal</td>\n<td>Current = &lt;Existing&gt;<br><br> Original = &lt;Incoming&gt;<br><br> State = &lt;Modified&gt;<br><br> RowAction = ChangeOriginal</td>\n</tr>\n<tr>\n<td>Modified</td>\n<td>Current = &lt;Incoming&gt;<br><br> Original = &lt;Existing&gt;<br><br> State = &lt;Modified&gt;<br><br> RowAction = Change</td>\n<td>Current = &lt;Incoming&gt;<br><br> Original = &lt;Incoming&gt;<br><br> State = &lt;Unchanged&gt;<br><br> RowAction = ChangeCurrentAndOriginal</td>\n<td>Current = &lt;Existing&gt;<br><br> Original = &lt;Incoming&gt;<br><br> State = &lt;Modified&gt;<br><br> RowAction =ChangeOriginal</td>\n</tr>\n<tr>\n<td>eleted</td>\n<td>(Load does not affect deleted rows)<br><br> Current = ---<br><br> Original = &lt;Existing&gt;<br><br> State = &lt;Deleted&gt;<br><br> (New row is added with the following characteristics)<br><br> Current = &lt;Incoming&gt;<br><br> Original = &lt;Not available&gt;<br><br> State = &lt;Added&gt;<br><br> RowAction = Add</td>\n<td>Undo delete and<br><br> Current = &lt;Incoming&gt;<br><br> Original = &lt;Incoming&gt;<br><br> State = &lt;Unchanged&gt;<br><br> RowAction = ChangeCurrentAndOriginal</td>\n<td>Current = &lt;Not available&gt;<br><br> Original = &lt;Incoming&gt;<br><br> State = &lt;Deleted&gt;<br><br> RowAction = ChangeOriginal</td>\n</tr>\n<tr>\n<td>Unchanged</td>\n<td>Current = &lt;Incoming&gt;<br><br> Original = &lt;Existing&gt;<br><br> If new value is the same as the existing value then<br><br> State = &lt;Unchanged&gt;<br><br> RowAction = Nothing<br><br> Else<br><br> State = &lt;Modified&gt;<br><br> RowAction = Change</td>\n<td>Current = &lt;Incoming&gt;<br><br> Original = &lt;Incoming&gt;<br><br> State = &lt;Unchanged&gt;<br><br> RowAction = ChangeCurrentAndOriginal</td>\n<td>Current = &lt;Incoming&gt;<br><br> Original = &lt;Incoming&gt;<br><br> State = &lt;Unchanged&gt;<br><br> RowAction = ChangeCurrentAndOriginal</td>\n</tr>\n<tr>\n<td>Not present)</td>\n<td>Current = &lt;Incoming&gt;<br><br> Original = &lt;Not available&gt;<br><br> State = &lt;Added&gt;<br><br> RowAction = Add</td>\n<td>Current = &lt;Incoming&gt;<br><br> Original = &lt;Incoming&gt;<br><br> State = &lt;Unchanged&gt;<br><br> RowAction = ChangeCurrentAndOriginal</td>\n<td>Current = &lt;Incoming&gt;<br><br> Original = &lt;Incoming&gt;<br><br> State = &lt;Unchanged&gt;<br><br> RowAction = ChangeCurrentAndOriginal</td>\n</tr>\n</tbody>\n</table>\n<p> Values in a <a class=\"xref\" href=\"system.data.datacolumn\" data-linktype=\"relative-path\">DataColumn</a> can be constrained through use of properties such as <a class=\"xref\" href=\"system.data.datacolumn#System_Data_DataColumn_ReadOnly_\" data-linktype=\"relative-path\">ReadOnly</a> and <a class=\"xref\" href=\"system.data.datacolumn#System_Data_DataColumn_AutoIncrement_\" data-linktype=\"relative-path\">AutoIncrement</a>. The <code>Load</code> method handles such columns in a manner that is consistent with the behavior defined by the column&#39;s properties. The read only constraint on a <a class=\"xref\" href=\"system.data.datacolumn\" data-linktype=\"relative-path\">DataColumn</a> is applicable only for changes that occur in memory. The <code>Load</code> method&#39;s overwrites the read-only column values, if needed.  </p>\n<p> If you specify the OverwriteChanges or PreserveChanges options when calling the <code>Load</code> method, then the assumption is made that the incoming data is coming from the <code>DataTable</code>&#39;s primary data source, and the DataTable tracks changes and can propagate the changes back to the data source. If you select the Upsert option, it is assumed that the data is coming from one of a secondary data source, such as data provided by a middle-tier component, perhaps altered by a user. In this case, the assumption is that the intent is to aggregate data from one or more data sources in the <code>DataTable</code>, and then perhaps propagate the data back to the primary data source. The <a class=\"xref\" href=\"system.data.loadoption\" data-linktype=\"relative-path\">LoadOption</a> parameter is used for determining the specific version of the row that is to be used for primary key comparison. The table below provides the details.  </p>\n<table>\n<thead>\n<tr>\n<th>Load option</th>\n<th>DataRow version used for primary key comparison</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>OverwriteChanges</code></td>\n<td>Original version, if it exists, otherwise Current version</td>\n</tr>\n<tr>\n<td><code>PreserveChanges</code></td>\n<td>Original version, if it exists, otherwise Current version</td>\n</tr>\n<tr>\n<td><code>Upsert</code></td>\n<td>Current version, if it exists, otherwise Original version</td>\n</tr>\n</tbody>\n</table>\n<p> The <code>errorHandler</code> parameter is a <a class=\"xref\" href=\"system.data.fillerroreventhandler\" data-linktype=\"relative-path\">FillErrorEventHandler</a> delegate that refers to a procedure that is called when an error occurs while loading data. The <a class=\"xref\" href=\"system.data.fillerroreventargs\" data-linktype=\"relative-path\">FillErrorEventArgs</a> parameter passed to the procedure provides properties that allow you to retrieve information about the error that occurred, the current row of data, and the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> being filled. Using this delegate mechanism, rather than a simpler try/catch block, allows you to determine the error, handle the situation, and continue processing if you like. The <a class=\"xref\" href=\"system.data.fillerroreventargs\" data-linktype=\"relative-path\">FillErrorEventArgs</a> parameter supplies a <a class=\"xref\" href=\"system.data.fillerroreventargs#System_Data_FillErrorEventArgs_Continue_\" data-linktype=\"relative-path\">Continue</a> property: set this property to <code>true</code> to indicate that you have handled the error and wish to continue processing. Set the property to <code>false</code> to indicate that you wish to halt processing. Be aware that setting the property to <code>false</code> causes the code that triggered the problem to throw an exception.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-vb\" name=\"DataWorks DataTableLoad.ErrorEventHandler#1\">  Sub Main()\n    Dim table As New DataTable()\n\n    &#39; Attempt to load data from a data reader in which\n    &#39; the schema is incompatible with the current schema.\n    &#39; If you use exception handling, you won&#39;t get the chance\n    &#39; to examine each row, and each individual table,\n    &#39; as the Load method progresses.\n    &#39; By taking advantage of the FillErrorEventHandler delegate,\n    &#39; you can interact with the Load process as an error occurs,\n    &#39; attempting to fix the problem, or simply continuing or quitting\n    &#39; the Load process:\n    table = GetIntegerTable()\n    Dim reader As New DataTableReader(GetStringTable())\n    table.Load(reader, LoadOption.OverwriteChanges, _\n        AddressOf FillErrorHandler)\n\n    Console.WriteLine(&quot;Press any key to continue.&quot;)\n    Console.ReadKey()\n  End Sub\n\n  Private Sub FillErrorHandler(ByVal sender As Object, _\n    ByVal e As FillErrorEventArgs)\n    &#39; You can use the e.Errors value to determine exactly what\n    &#39; went wrong.\n    If e.Errors.GetType Is GetType(System.FormatException) Then\n      Console.WriteLine(&quot;Error when attempting to update the value: {0}&quot;, _\n        e.Values(0))\n    End If\n\n    &#39; Setting e.Continue to True tells the Load\n    &#39; method to continue trying. Setting it to False\n    &#39; indicates that an error has occurred, and the \n    &#39; Load method raises the exception that got \n    &#39; you here.\n    e.Continue = True\n  End Sub\n\n  Private Function GetIntegerTable() As DataTable\n    &#39; Create sample table with a single Int32 column.\n    Dim table As New DataTable\n\n    Dim idColumn As DataColumn = table.Columns.Add(&quot;ID&quot;, GetType(Integer))\n\n    &#39; Set the ID column as the primary key column.\n    table.PrimaryKey = New DataColumn() {idColumn}\n\n    table.Rows.Add(New Object() {4})\n    table.Rows.Add(New Object() {5})\n    table.TableName = &quot;IntegerTable&quot;\n    table.AcceptChanges()\n    Return table\n  End Function\n\n  Private Function GetStringTable() As DataTable\n    &#39; Create sample table with a single String column.\n    Dim table As New DataTable\n\n    Dim idColumn As DataColumn = table.Columns.Add(&quot;ID&quot;, _\n        GetType(String))\n\n    &#39; Set the ID column as the primary key column.\n    table.PrimaryKey = New DataColumn() {idColumn}\n\n    table.Rows.Add(New Object() {&quot;Mary&quot;})\n    table.Rows.Add(New Object() {&quot;Andy&quot;})\n    table.Rows.Add(New Object() {&quot;Peter&quot;})\n    table.AcceptChanges()\n    Return table\n  End Function\n\n  Private Sub PrintColumns( _\n     ByVal table As DataTable)\n\n    &#39; Loop through all the rows in the DataTableReader.\n    For Each row As DataRow In table.Rows\n      For Each col As DataColumn In table.Columns\n        Console.Write(row(col).ToString() &amp; &quot; &quot;)\n      Next\n      Console.WriteLine()\n    Next\n  End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"DataWorks DataTableLoad.ErrorEventHandler#1\">    static void Main()\n    {\n        // Attempt to load data from a data reader in which\n        // the schema is incompatible with the current schema.\n        // If you use exception handling, you won&#39;t get the chance\n        // to examine each row, and each individual table,\n        // as the Load method progresses.\n        // By taking advantage of the FillErrorEventHandler delegate,\n        // you can interact with the Load process as an error occurs,\n        // attempting to fix the problem, or simply continuing or quitting\n        // the Load process:\n        DataTable table = GetIntegerTable();\n        DataTableReader reader = new DataTableReader(GetStringTable());\n        table.Load(reader, LoadOption.OverwriteChanges, FillErrorHandler);\n\n        Console.WriteLine(&quot;Press any key to continue.&quot;);\n        Console.ReadKey();\n    }\n\n    private static DataTable GetIntegerTable()\n    {\n        // Create sample Customers table, in order\n        // to demonstrate the behavior of the DataTableReader.\n        DataTable table = new DataTable();\n\n        // Create two columns, ID and Name.\n        DataColumn idColumn = table.Columns.Add(&quot;ID&quot;, typeof(int));\n\n        // Set the ID column as the primary key column.\n        table.PrimaryKey = new DataColumn[] { idColumn };\n\n        table.Rows.Add(new object[] { 4 });\n        table.Rows.Add(new object[] { 5 });\n        table.AcceptChanges();\n        return table;\n    }\n\n    private static DataTable GetStringTable()\n    {\n        // Create sample Customers table, in order\n        // to demonstrate the behavior of the DataTableReader.\n        DataTable table = new DataTable();\n\n        // Create two columns, ID and Name.\n        DataColumn idColumn = table.Columns.Add(&quot;ID&quot;, typeof(string));\n\n        // Set the ID column as the primary key column.\n        table.PrimaryKey = new DataColumn[] { idColumn };\n\n        table.Rows.Add(new object[] { &quot;Mary&quot; });\n        table.Rows.Add(new object[] { &quot;Andy&quot; });\n        table.Rows.Add(new object[] { &quot;Peter&quot; });\n        table.AcceptChanges();\n        return table;\n    }\n\n    static void FillErrorHandler(object sender, FillErrorEventArgs e)\n    {\n        // You can use the e.Errors value to determine exactly what\n        // went wrong.\n        if (e.Errors.GetType() == typeof(System.FormatException))\n        {\n            Console.WriteLine(&quot;Error when attempting to update the value: {0}&quot;, \n                e.Values[0]);\n        }\n\n        // Setting e.Continue to True tells the Load\n        // method to continue trying. Setting it to False\n        // indicates that an error has occurred, and the \n        // Load method raises the exception that got \n        // you here.\n        e.Continue = true;\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_LoadDataRow_System_Object___System_Boolean_\">\r\n    \r\n            <a id=\"System_Data_DataTable_LoadDataRow_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LoadDataRow(Object[],Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Finds and updates a specific row. If no matching row is found, a new row is created using the given values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.DataRow LoadDataRow (object[] values, bool fAcceptChanges);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>values</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of values used to create the new row.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>fAcceptChanges</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to accept changes; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a></div>\r\n                  </div>\r\n                  <p>The new <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The array is larger than the number of columns in the table.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>A value doesn&#39;t match its respective column type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.constraintexception\" data-linktype=\"relative-path\">ConstraintException</a></div>\r\n                  </div>\r\n                  <p>Adding the row invalidates a constraint.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.nonullallowedexception\" data-linktype=\"relative-path\">NoNullAllowedException</a></div>\r\n                  </div>\r\n                  <p>Attempting to put a null in a column where <span class=\"xref\">stem.Data.DataColumn.AllowDBNull*</span> is false.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The LoadDataRow method takes an array of values and finds the matching value(s) in the primary key column(s).  </p>\n<p> If a column has a default value, pass a null value in the array to set the default value for that column. Similarly, if a column has its <a class=\"xref\" href=\"system.data.datacolumn#System_Data_DataColumn_AutoIncrement_\" data-linktype=\"relative-path\">AutoIncrement</a> property set to true, pass a null value in the array to set the automatically generated value for the row.  </p>\n<p> If the <code>fAcceptChanges</code> parameter is <code>true</code> or not specified, the new data is added and then <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_AcceptChanges_\" data-linktype=\"relative-path\">AcceptChanges</a> is called to accept all changes in the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>; if the argument is <code>false</code>, newly added rows are marked as insertions, and changes to existing rows are marked as modifications.  </p>\n<p> Exceptions can also occur during either a <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_ColumnChanging\" data-linktype=\"relative-path\">ColumnChanging</a> or <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_RowChanging\" data-linktype=\"relative-path\">RowChanging</a> event. If an exception occurs, the row is not added to the table.  </p>\n<p> Use LoadDataRow in conjunction with <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_BeginLoadData_\" data-linktype=\"relative-path\">BeginLoadData</a> and <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_EndLoadData_\" data-linktype=\"relative-path\">EndLoadData</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the LoadDataRow method to attempt to find a row. If no such row is found, the values are used to create a new row.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData DataTable.LoadDataRow Example#1\">Imports System.Data\n\nClass MyDataSet\n   Public Shared Sub Main()\n      Dim dt As New DataTable()\n\n      Dim dc1 As New DataColumn(&quot;col1&quot;)\n      Dim dc2 As New DataColumn(&quot;col2&quot;)\n      Dim dc3 As New DataColumn(&quot;col3&quot;)\n\n      dt.Columns.Add(dc1)\n      dt.Columns.Add(dc2)\n      dt.Columns.Add(dc3)\n\n      &#39; Create an array for the values.\n      Dim newRow As Object() = New Object(2) {}\n\n      &#39; Set the values of the array.\n      newRow(0) = &quot;Hello&quot;\n      newRow(1) = &quot;World&quot;\n      newRow(2) = &quot;two&quot;\n      Dim row As DataRow\n\n      dt.BeginLoadData()\n\n      &#39; Add the new row to the rows collection.\n      row = dt.LoadDataRow(newRow, True)\n\n      For Each dr As DataRow In dt.Rows\n         Console.WriteLine([String].Format(&quot;Row: {0}, {1}, {2}&quot;, dr(&quot;col1&quot;), dr(&quot;col2&quot;), dr(&quot;col3&quot;)))\n      Next\n\n      dt.EndLoadData()\n   End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData DataTable.LoadDataRow Example#1\">using System;\nusing System.Data;\n\nclass MyDataSet {\n   public static void Main() {\n      DataTable dt = new DataTable();\n\n      DataColumn dc1 = new DataColumn(&quot;col1&quot;);\n      DataColumn dc2 = new DataColumn(&quot;col2&quot;);\n      DataColumn dc3 = new DataColumn(&quot;col3&quot;);\n\n      dt.Columns.Add(dc1);\n      dt.Columns.Add(dc2);\n      dt.Columns.Add(dc3);\n\n      // Create an array for the values.\n      object[] newRow = new object[3];\n\n      // Set the values of the array.\n      newRow[0] = &quot;Hello&quot;;\n      newRow[1] = &quot;World&quot;;\n      newRow[2] = &quot;two&quot;;\n      DataRow row;\n\n      dt.BeginLoadData();\n\n      // Add the new row to the rows collection.\n      row = dt.LoadDataRow(newRow, true);\n\n      foreach (DataRow dr in dt.Rows) {\n         Console.WriteLine(String.Format(&quot;Row: {0}, {1}, {2}&quot;, dr[&quot;col1&quot;], dr[&quot;col2&quot;], dr[&quot;col3&quot;]));\n      }\n\n      dt.EndLoadData();\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_LoadDataRow_System_Object___System_Data_LoadOption_\">\r\n    \r\n            <a id=\"System_Data_DataTable_LoadDataRow_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LoadDataRow(Object[],LoadOption)</div>        \r\n          </div>\r\n    \r\n            <p>Finds and updates a specific row. If no matching row is found, a new row is created using the given values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.DataRow LoadDataRow (object[] values, System.Data.LoadOption loadOption);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>values</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of values used to create the new row.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>loadOption</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.loadoption\" data-linktype=\"relative-path\">LoadOption</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Used to determine how the array values are applied to the corresponding values in an existing row.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a></div>\r\n                  </div>\r\n                  <p>The new <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_LoadDataRow_\" data-linktype=\"relative-path\">LoadDataRow</a> method takes an array of values and finds the matching value(s) in the primary key column(s).  </p>\n<p> If a column has a default value, pass a null value in the array to set the default value for that column. Similarly, if a column has its <a class=\"xref\" href=\"system.data.datacolumn#System_Data_DataColumn_AutoIncrement_\" data-linktype=\"relative-path\">AutoIncrement</a> property set to true, pass a null value in the array to set the automatically generated value for the row.  </p>\n<p> The value of the <code>loadOption</code> parameter is used to determine how the values in the array are applied to an existing row. For example, if <code>loadOption</code> is set to <code>OverwriteChanges</code>, the <code>Original</code> and <code>Current</code> values of each column are replaced with the values in the incoming row and the <code>RowState</code> property is set to <code>Unchanged</code>.  </p>\n<p> Exceptions can also occur during either a <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_ColumnChanging\" data-linktype=\"relative-path\">ColumnChanging</a> or <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_RowChanging\" data-linktype=\"relative-path\">RowChanging</a> event. If an exception occurs, the row is not added to the table.  </p>\n<p> Use <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_LoadDataRow_\" data-linktype=\"relative-path\">LoadDataRow</a> in conjunction with <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_BeginLoadData_\" data-linktype=\"relative-path\">BeginLoadData</a> and <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_EndLoadData_\" data-linktype=\"relative-path\">EndLoadData</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_Merge_System_Data_DataTable_\">\r\n    \r\n            <a id=\"System_Data_DataTable_Merge_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Merge(DataTable)</div>        \r\n          </div>\r\n    \r\n            <p>Merge the specified <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> with the current <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Merge (System.Data.DataTable table);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>table</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> to be merged with the current <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Merge method is used to merge two <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>. This allows the client application to have a refreshed <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> with the latest data from the data source.  </p>\n<p> The merge operation takes into account only the original table, and the table to be merged. Child tables are not affected or included. If a table has one or more child tables, defined as part of a relationship, each child table must be merged individually.  </p>\n<p> The <code>Merge</code> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.  </p>\n<p> When performing a merge, changes made to the existing data before the merge are preserved by default during the merge operation. Developers can modify this behavior by calling one of the other two overloads for this method, and specifying a false value for the <code>preserveChanges</code> parameter.  </p>\n<p> In a client application, it is usual to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle tier component. In this scenario, the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_GetChanges_\" data-linktype=\"relative-path\">GetChanges</a> method is first invoked. That method returns a second <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> optimized for validating and merging. This second <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> object contains only the <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> objects that were changed, resulting in a subset of the original <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>. This subset is generally smaller and thus more efficiently passed back to a middle tier component. The middle tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> can be merged back into the client application&#39;s original <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> with the Merge method.  </p>\n<p> When merging a new source <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> into the target, any source rows with a <a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a> value of <code>Unchanged</code>, <code>Modified</code>, or <code>Deleted</code>, is matched to target rows with the same primary key values. Source rows with a <a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a> value of <code>Added</code> are matched to new target rows with the same primary key values as the new source rows.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following console application creates a simple <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> and adds data to the table. The example then creates a copy of the table, adding rows to the copy. Finally, the example calls the Merge method to merge the data in the second table with the data in the first table.  </p>\n<pre><code class=\"lang-vb\" name=\"DataWorks DataTable.Merge#1\">  Private Sub DemonstrateMergeTable()\n    Dim table1 As New DataTable(&quot;Items&quot;)\n\n    &#39; Add columns\n    Dim column1 As New DataColumn(&quot;id&quot;, GetType(System.Int32))\n    Dim column2 As New DataColumn(&quot;item&quot;, GetType(System.Int32))\n    table1.Columns.Add(column1)\n    table1.Columns.Add(column2)\n\n    &#39; Set the primary key column.\n    table1.PrimaryKey = New DataColumn() {column1}\n\n    &#39; Add RowChanged event handler for the table.\n    AddHandler table1.RowChanged, AddressOf Row_Changed\n\n    &#39; Add some rows.\n    Dim row As DataRow\n    For i As Integer = 0 To 3\n      row = table1.NewRow()\n      row(&quot;id&quot;) = i\n      row(&quot;item&quot;) = i\n      table1.Rows.Add(row)\n    Next i\n\n    &#39; Accept changes.\n    table1.AcceptChanges()\n    PrintValues(table1, &quot;Original values&quot;)\n\n    &#39; Create a second DataTable identical to the first.\n    Dim table2 As DataTable = table1.Clone()\n\n    &#39; Add three rows. Note that the id column can&#39;t be the \n    &#39; same as existing rows in the original table.\n    row = table2.NewRow()\n    row(&quot;id&quot;) = 14\n    row(&quot;item&quot;) = 774\n    table2.Rows.Add(row)\n\n    row = table2.NewRow()\n    row(&quot;id&quot;) = 12\n    row(&quot;item&quot;) = 555\n    table2.Rows.Add(row)\n\n    row = table2.NewRow()\n    row(&quot;id&quot;) = 13\n    row(&quot;item&quot;) = 665\n    table2.Rows.Add(row)\n\n    &#39; Merge table2 into the table1.\n    Console.WriteLine(&quot;Merging&quot;)\n    table1.Merge(table2)\n    PrintValues(table1, &quot;Merged With table1&quot;)\n\n  End Sub\n\n  Private Sub Row_Changed(ByVal sender As Object, _\n    ByVal e As DataRowChangeEventArgs)\n    Console.WriteLine(&quot;Row changed {0}{1}{2}&quot;, _\n      e.Action, ControlChars.Tab, e.Row.ItemArray(0))\n  End Sub\n\n  Private Sub PrintValues(ByVal table As DataTable, _\n    ByVal label As String)\n    &#39; Display the values in the supplied DataTable:\n    Console.WriteLine(label)\n    For Each row As DataRow In table.Rows\n      For Each col As DataColumn In table.Columns\n        Console.Write(ControlChars.Tab + &quot; &quot; + row(col).ToString())\n      Next col\n      Console.WriteLine()\n    Next row\n  End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"DataWorks DataTable.Merge#1\">    private static void DemonstrateMergeTable()\n    {\n        DataTable table1 = new DataTable(&quot;Items&quot;);\n\n        // Add columns\n        DataColumn column1 = new DataColumn(&quot;id&quot;, typeof(System.Int32));\n        DataColumn column2 = new DataColumn(&quot;item&quot;, typeof(System.Int32));\n        table1.Columns.Add(column1);\n        table1.Columns.Add(column2);\n\n        // Set the primary key column.\n        table1.PrimaryKey = new DataColumn[] { column1 };\n\n        // Add RowChanged event handler for the table.\n        table1.RowChanged += \n            new System.Data.DataRowChangeEventHandler(Row_Changed);\n\n        // Add some rows.\n        DataRow row;\n        for (int i = 0; i &lt;= 3; i++)\n        {\n            row = table1.NewRow();\n            row[&quot;id&quot;] = i;\n            row[&quot;item&quot;] = i;\n            table1.Rows.Add(row);\n        }\n\n        // Accept changes.\n        table1.AcceptChanges();\n        PrintValues(table1, &quot;Original values&quot;);\n\n        // Create a second DataTable identical to the first.\n        DataTable table2 = table1.Clone();\n\n        // Add three rows. Note that the id column can&#39;t be the \n        // same as existing rows in the original table.\n        row = table2.NewRow();\n        row[&quot;id&quot;] = 14;\n        row[&quot;item&quot;] = 774;\n        table2.Rows.Add(row);\n\n        row = table2.NewRow();\n        row[&quot;id&quot;] = 12;\n        row[&quot;item&quot;] = 555;\n        table2.Rows.Add(row);\n\n        row = table2.NewRow();\n        row[&quot;id&quot;] = 13;\n        row[&quot;item&quot;] = 665;\n        table2.Rows.Add(row);\n\n        // Merge table2 into the table1.\n        Console.WriteLine(&quot;Merging&quot;);\n        table1.Merge(table2);\n        PrintValues(table1, &quot;Merged With table1&quot;);\n\n    }\n\n    private static void Row_Changed(object sender, \n        DataRowChangeEventArgs e)\n    {\n        Console.WriteLine(&quot;Row changed {0}&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, \n            e.Action, e.Row.ItemArray[0]);\n    }\n\n    private static void PrintValues(DataTable table, string label)\n    {\n        // Display the values in the supplied DataTable:\n        Console.WriteLine(label);\n        foreach (DataRow row in table.Rows)\n        {\n            foreach (DataColumn col in table.Columns)\n            {\n                Console.Write(&quot;&nbsp;&nbsp;&nbsp;&nbsp; &quot; + row[col].ToString());\n            }\n            Console.WriteLine();\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_Merge_System_Data_DataTable_System_Boolean_\">\r\n    \r\n            <a id=\"System_Data_DataTable_Merge_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Merge(DataTable,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Merge the specified <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> with the current <code>DataTable</code>, indicating whether to preserve changes in the current <code>DataTable</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Merge (System.Data.DataTable table, bool preserveChanges);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>table</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <code>DataTable</code> to be merged with the current <code>DataTable</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>preserveChanges</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code>, to preserve changes in the current <code>DataTable</code>; otherwise <code>false</code>.``</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Merge method is used to merge two <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>. This allows the client application to have a refreshed <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> with the latest data from the data source.  </p>\n<p> The merge operation takes into account only the original table, and the table to be merged. Child tables are not affected or included. If a table has one or more child tables, defined as part of a relationship, each child table must be merged individually.  </p>\n<p> The <code>Merge</code> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.  </p>\n<p> When performing a merge, changes made to the existing data before the merge are preserved during the merge operation unless the developer specifies false for the <code>preserveChanges</code> parameter. If the <code>preserveChanges</code> parameter is set to <code>true</code>, incoming values do not overwrite existing values in the Current row version of the existing row. If the <code>preserveChanges</code> parameter is set to <code>false</code>, incoming values do overwrite the existing values in the Current row version of the existing row. For more information about row versions, see <a href=\"../Topic/Row%20States%20and%20Row%20Versions.md\" data-linktype=\"relative-path\">Row States and Row Versions</a>.  </p>\n<p> In a client application, it is usual to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle tier component. In this scenario, the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_GetChanges_\" data-linktype=\"relative-path\">GetChanges</a> method is first invoked. That method returns a second <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> optimized for validating and merging. This second <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> object contains only the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> and <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> objects that were changed, resulting in a subset of the original <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>. This subset is generally smaller, and thus this subset is more efficiently passed back to a middle tier component. The middle tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> can be merged back into the client application&#39;s original <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> with the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_Merge_\" data-linktype=\"relative-path\">Merge</a> method.  </p>\n<p> When merging a new source <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> into the target, any source rows with a <a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a> value of <code>Unchanged</code>, <code>Modified</code>, or <code>Deleted</code> are matched to target rows with the same primary key values. Source rows with a <a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a> value of <code>Added</code> are matched to new target rows with the same primary key values as the new source rows.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following console application creates a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> containing rows, modifies some of the data in those rows, and attempts to merge data from a different <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>. The example demonstrates the different behaviors for the <code>preserveChanges</code> parameter.  </p>\n<pre><code class=\"lang-vb\" name=\"DataWorks DataTable.MergePreserveChanges#1\">  Private Sub DemonstrateMergeTable()\n    &#39; Demonstrate merging, within and without\n    &#39; preserving changes.\n\n    &#39; In this example, take these actions:\n    &#39; 1. Create a DataTable (table1) and fill the table with data.\n    &#39; 2. Create a copy of table1, and modify its data (modifiedTable).\n    &#39; 3. Modify data in table1.\n    &#39; 4. Make a copy of table1 (table1Copy).\n    &#39; 5. Merge the data from modifiedTable into table1 and table1Copy, \n    &#39;    showing the difference between setting the preserveChanges \n    &#39;    parameter to true and false.\n\n    &#39; Create a new DataTable.\n    Dim table1 As New DataTable(&quot;Items&quot;)\n\n    &#39; Add two columns to the table:\n    Dim column As New DataColumn(&quot;id&quot;, GetType(System.Int32))\n    column.AutoIncrement = True\n    table1.Columns.Add(column)\n\n    column = New DataColumn(&quot;item&quot;, GetType(System.String))\n    table1.Columns.Add(column)\n\n    &#39; Set primary key column.\n    table1.PrimaryKey = New DataColumn() {table1.Columns(0)}\n\n    &#39; Add some rows.\n    Dim row As DataRow\n    For i As Integer = 0 To 3\n      row = table1.NewRow()\n      row(&quot;item&quot;) = &quot;Item &quot; &amp; i\n      table1.Rows.Add(row)\n    Next i\n\n    &#39; Accept changes.\n    table1.AcceptChanges()\n    PrintValues(table1, &quot;Original values&quot;)\n\n    &#39; Using the same schema as the original table, \n    &#39; modify the data for later merge.\n    Dim modifiedTable As DataTable = table1.Copy()\n    For Each row In modifiedTable.Rows\n      row(&quot;item&quot;) = row(&quot;item&quot;).ToString() &amp; &quot; modified&quot;\n    Next\n    modifiedTable.AcceptChanges()\n\n    &#39; Change row values, and add a new row:\n    table1.Rows(0)(&quot;item&quot;) = &quot;New Item 0&quot;\n    table1.Rows(1)(&quot;item&quot;) = &quot;New Item 1&quot;\n\n    row = table1.NewRow()\n    row(&quot;id&quot;) = 4\n    row(&quot;item&quot;) = &quot;Item 4&quot;\n    table1.Rows.Add(row)\n\n    &#39; Get a copy of the modified data:\n    Dim table1Copy As DataTable = table1.Copy()\n    PrintValues(table1, &quot;Modified and New Values&quot;)\n    PrintValues(modifiedTable, &quot;Data to be merged into table1&quot;)\n\n\n    &#39; Merge new data into the modified data.\n    table1.Merge(modifiedTable, True)\n    PrintValues(table1, &quot;Merged data (preserve changes)&quot;)\n\n    table1Copy.Merge(modifiedTable, False)\n    PrintValues(modifiedTable, &quot;Merged data (don&#39;t preserve changes)&quot;)\n\n  End Sub\n\n  Private Sub PrintValues(ByVal table As DataTable, _\n    ByVal label As String)\n\n    &#39; Display the values in the supplied DataTable:\n    Console.WriteLine(label)\n    For Each row As DataRow In table.Rows\n      For Each column As DataColumn In table.Columns\n        Console.Write(&quot;{0}{1}&quot;, ControlChars.Tab, row(column, _\n            DataRowVersion.Current))\n      Next column\n      Console.WriteLine()\n    Next row\n  End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"DataWorks DataTable.MergePreserveChanges#1\">\n    private static void DemonstrateMergeTable()\n    {\n        // Demonstrate merging, within and without\n        // preserving changes.\n\n        // In this example, take these actions:\n        // 1. Create a DataTable (table1) and fill the table with data.\n        // 2. Create a copy of table1, and modify its data (modifiedTable).\n        // 3. Modify data in table1.\n        // 4. Make a copy of table1 (table1Copy).\n        // 5. Merge the data from modifiedTable into table1 and table1Copy, \n        //    showing the difference between setting the preserveChanges \n        //    parameter to true and false.\n\n        // Create a new DataTable.\n        DataTable table1 = new DataTable(&quot;Items&quot;);\n\n        // Add two columns to the table:\n        DataColumn column = new DataColumn(&quot;id&quot;, typeof(System.Int32));\n        column.AutoIncrement = true;\n        table1.Columns.Add(column);\n\n        column = new DataColumn(&quot;item&quot;, typeof(System.String));\n        table1.Columns.Add(column);\n\n        // Set primary key column.\n        table1.PrimaryKey = new DataColumn[] { table1.Columns[0] };\n\n        // Add some rows.\n        DataRow row;\n        for (int i = 0; i &lt;= 3; i++)\n        {\n            row = table1.NewRow();\n            row[&quot;item&quot;] = &quot;Item &quot; + i;\n            table1.Rows.Add(row);\n        }\n\n        // Accept changes.\n        table1.AcceptChanges();\n        PrintValues(table1, &quot;Original values&quot;);\n\n        // Using the same schema as the original table, \n        // modify the data for later merge.\n        DataTable modifiedTable = table1.Copy();\n        foreach (DataRow rowModified in modifiedTable.Rows)\n        {\n            rowModified[&quot;item&quot;] = rowModified[&quot;item&quot;].ToString() \n                + &quot; modified&quot;;\n        }\n        modifiedTable.AcceptChanges();\n\n        // Change row values, and add a new row:\n        table1.Rows[0][&quot;item&quot;] = &quot;new Item 0&quot;;\n        table1.Rows[1][&quot;item&quot;] = &quot;new Item 1&quot;;\n\n        row = table1.NewRow();\n        row[&quot;id&quot;] = 4;\n        row[&quot;item&quot;] = &quot;Item 4&quot;;\n        table1.Rows.Add(row);\n\n        // Get a copy of the modified data:\n        DataTable table1Copy = table1.Copy();\n        PrintValues(table1, &quot;Modified and new Values&quot;);\n        PrintValues(modifiedTable, &quot;Data to be merged into table1&quot;);\n\n        // Merge new data into the modified data.\n        table1.Merge(modifiedTable, true);\n        PrintValues(table1, &quot;Merged data (preserve changes)&quot;);\n\n        table1Copy.Merge(modifiedTable, false);\n        PrintValues(modifiedTable, &quot;Merged data (don&#39;t preserve changes)&quot;);\n    }\n\n\n    private static void PrintValues(DataTable table, string label)\n    {\n        // Display the values in the supplied DataTable:\n        Console.WriteLine(label);\n        foreach (DataRow row in table.Rows)\n        {\n            foreach (DataColumn column in table.Columns)\n            {\n                Console.Write(&quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, row[column, DataRowVersion.Current]);\n            }\n            Console.WriteLine();\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_Merge_System_Data_DataTable_System_Boolean_System_Data_MissingSchemaAction_\">\r\n    \r\n            <a id=\"System_Data_DataTable_Merge_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Merge(DataTable,Boolean,MissingSchemaAction)</div>        \r\n          </div>\r\n    \r\n            <p>Merge the specified <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> with the current <code>DataTable</code>, indicating whether to preserve changes and how to handle missing schema in the current <code>DataTable</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Merge (System.Data.DataTable table, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>table</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> to be merged with the current <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>preserveChanges</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code>, to preserve changes in the current <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>missingSchemaAction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.missingschemaaction\" data-linktype=\"relative-path\">MissingSchemaAction</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.data.missingschemaaction\" data-linktype=\"relative-path\">MissingSchemaAction</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>Merge</code> method is used to merge two <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>. This allows the client application to have a refreshed <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> with the latest data from the data source.  </p>\n<p> The merge operation takes into account only the original table, and the table to be merged. Child tables are not affected or included. If a table has one or more child tables, defined as part of a relationship, each child table must be merged individually.  </p>\n<p> The <code>Merge</code> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.  </p>\n<p> When performing a merge, changes made to the existing data before the merge are preserved during the merge operation unless the developer specifies false for the <code>preserveChanges</code> parameter. If the <code>preserveChanges</code> parameter is set to <code>true</code>, incoming values do not overwrite existing values in the Current row version of the existing row. If the <code>preserveChanges</code> parameter is set to <code>false</code>, incoming values do overwrite the existing values in the Current row version of the existing row. For more information about row versions, see <a href=\"../Topic/Row%20States%20and%20Row%20Versions.md\" data-linktype=\"relative-path\">Row States and Row Versions</a>.  </p>\n<p> In a client application, it is usual to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle tier component. In this scenario, the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_GetChanges_\" data-linktype=\"relative-path\">GetChanges</a> method is first invoked. That method returns a second <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> optimized for validating and merging. This second <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> object contains only the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> and <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> objects that were changed, resulting in a subset of the original <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>. This subset is generally smaller, and thus this subset is more efficiently passed back to a middle tier component. The middle tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> can be merged back into the client application&#39;s original <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> with the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_Merge_\" data-linktype=\"relative-path\">Merge</a> method.  </p>\n<p> When the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_Merge_\" data-linktype=\"relative-path\">Merge</a> method is called, the schemas of the two <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> objects are compared, because it is possible that the schemas may have been changed. For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process. If the source <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> contains schema elements (added <a class=\"xref\" href=\"system.data.datacolumn\" data-linktype=\"relative-path\">DataColumn</a> objects) that are missing in the target, the schema elements can be added to the target by setting the <code>missingSchemaAction</code> argument to <code>MissingSchemaAction.Add</code>. In that case, the merged <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> contains the added schema and data.  </p>\n<p> After merging schemas, the data is merged.  </p>\n<p> When merging a new source <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> into the target, any source rows with a <a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a> value of <code>Unchanged</code>, <code>Modified</code>, or <code>Deleted</code> are matched to target rows with the same primary key values. Source rows with a <a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a> value of <code>Added</code> are matched to new target rows with the same primary key values as the new source rows.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following console application demonstrates the behavior of the <code>missingSchemaAction</code> parameter of the Merge method. This example creates two versions of the same table, modifying the schema for the second version. The code then attempts to merge the second table into the first.  </p>\n<pre><code class=\"lang-cs\" name=\"DataWorks DataTable.MergeMissingSchemaAction#1\">    private static void DemonstrateMergeTable()\n    {\n        DataTable itemsTable = new DataTable(&quot;Items&quot;);\n\n        // Add columns\n        DataColumn idColumn = new DataColumn(&quot;id&quot;, typeof(System.Int32));\n        DataColumn itemColumn = new DataColumn(&quot;item&quot;, typeof(System.Int32));\n        itemsTable.Columns.Add(idColumn);\n        itemsTable.Columns.Add(itemColumn);\n\n        // Set the primary key column.\n        itemsTable.PrimaryKey = new DataColumn[] { idColumn };\n\n        // Add RowChanged event handler for the table.\n        itemsTable.RowChanged += \n            new System.Data.DataRowChangeEventHandler(Row_Changed);\n\n        // Add ten rows.\n        DataRow row;\n        for (int i = 0; i &lt;= 9; i++)\n        {\n            row = itemsTable.NewRow();\n            row[&quot;id&quot;] = i;\n            row[&quot;item&quot;] = i;\n            itemsTable.Rows.Add(row);\n        }\n\n        // Accept changes.\n        itemsTable.AcceptChanges();\n        PrintValues(itemsTable, &quot;Original values&quot;);\n\n        // Create a second DataTable identical to the first.\n        DataTable itemsClone = itemsTable.Clone();\n\n        // Add column to the second column, so that the \n        // schemas no longer match.\n        itemsClone.Columns.Add(&quot;newColumn&quot;, typeof(System.String));\n\n        // Add three rows. Note that the id column can&#39;t be the \n        // same as existing rows in the original table.\n        row = itemsClone.NewRow();\n        row[&quot;id&quot;] = 14;\n        row[&quot;item&quot;] = 774;\n        row[&quot;newColumn&quot;] = &quot;new column 1&quot;;\n        itemsClone.Rows.Add(row);\n\n        row = itemsClone.NewRow();\n        row[&quot;id&quot;] = 12;\n        row[&quot;item&quot;] = 555;\n        row[&quot;newColumn&quot;] = &quot;new column 2&quot;;\n        itemsClone.Rows.Add(row);\n\n        row = itemsClone.NewRow();\n        row[&quot;id&quot;] = 13;\n        row[&quot;item&quot;] = 665;\n        row[&quot;newColumn&quot;] = &quot;new column 3&quot;;\n        itemsClone.Rows.Add(row);\n\n        // Merge itemsClone into the itemsTable.\n        Console.WriteLine(&quot;Merging&quot;);\n        itemsTable.Merge(itemsClone, false, MissingSchemaAction.Add);\n        PrintValues(itemsTable, &quot;Merged With itemsTable, schema added&quot;);\n    }\n\n    private static void Row_Changed(object sender, \n        DataRowChangeEventArgs e)\n    {\n        Console.WriteLine(&quot;Row changed {0}&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, \n            e.Action, e.Row.ItemArray[0]);\n    }\n\n    private static void PrintValues(DataTable table, string label)\n    {\n        // Display the values in the supplied DataTable:\n        Console.WriteLine(label);\n        foreach (DataRow row in table.Rows)\n        {\n            foreach (DataColumn col in table.Columns)\n            {\n                Console.Write(&quot;&nbsp;&nbsp;&nbsp;&nbsp; &quot; + row[col].ToString());\n            }\n            Console.WriteLine();\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"DataWorks DataTable.MergeMissingSchemaAction#1\">  Private Sub DemonstrateMergeTable()\n    Dim itemsTable As New DataTable(&quot;Items&quot;)\n\n    &#39; Add columns\n    Dim idColumn As New DataColumn(&quot;id&quot;, GetType(System.Int32))\n    Dim itemColumn As New DataColumn(&quot;item&quot;, GetType(System.Int32))\n    itemsTable.Columns.Add(idColumn)\n    itemsTable.Columns.Add(itemColumn)\n\n    &#39; Set the primary key column.\n    itemsTable.PrimaryKey = New DataColumn() {idColumn}\n\n    &#39; Add RowChanged event handler for the table.\n    AddHandler itemsTable.RowChanged, AddressOf Row_Changed\n\n    &#39; Add some rows.\n    Dim row As DataRow\n    For i As Integer = 0 To 3\n      row = itemsTable.NewRow()\n      row(&quot;id&quot;) = i\n      row(&quot;item&quot;) = i\n      itemsTable.Rows.Add(row)\n    Next i\n\n    &#39; Accept changes.\n    itemsTable.AcceptChanges()\n    PrintValues(itemsTable, &quot;Original values&quot;)\n\n    &#39; Create a second DataTable identical to the first.\n    Dim itemsClone As DataTable = itemsTable.Clone()\n\n    &#39; Add column to the second column, so that the \n    &#39; schemas no longer match.\n    itemsClone.Columns.Add(&quot;newColumn&quot;, GetType(System.String))\n\n    &#39; Add three rows. Note that the id column can&#39;t be the \n    &#39; same as existing rows in the original table.\n    row = itemsClone.NewRow()\n    row(&quot;id&quot;) = 14\n    row(&quot;item&quot;) = 774\n    row(&quot;newColumn&quot;) = &quot;new column 1&quot;\n    itemsClone.Rows.Add(row)\n\n    row = itemsClone.NewRow()\n    row(&quot;id&quot;) = 12\n    row(&quot;item&quot;) = 555\n    row(&quot;newColumn&quot;) = &quot;new column 2&quot;\n    itemsClone.Rows.Add(row)\n\n    row = itemsClone.NewRow()\n    row(&quot;id&quot;) = 13\n    row(&quot;item&quot;) = 665\n    row(&quot;newColumn&quot;) = &quot;new column 3&quot;\n    itemsClone.Rows.Add(row)\n\n    &#39; Merge itemsClone into the itemsTable.\n    Console.WriteLine(&quot;Merging&quot;)\n    itemsTable.Merge(itemsClone, False, MissingSchemaAction.Add)\n    PrintValues(itemsTable, &quot;Merged With itemsTable, Schema added&quot;)\n  End Sub\n\n  Private Sub Row_Changed(ByVal sender As Object, _\n    ByVal e As DataRowChangeEventArgs)\n    Console.WriteLine(&quot;Row changed {0}{1}{2}&quot;, _\n      e.Action, ControlChars.Tab, e.Row.ItemArray(0))\n  End Sub\n\n  Private Sub PrintValues(ByVal table As DataTable, ByVal label As String)\n    &#39; Display the values in the supplied DataTable:\n    Console.WriteLine(label)\n    For Each row As DataRow In table.Rows\n      For Each col As DataColumn In table.Columns\n        Console.Write(ControlChars.Tab + &quot; &quot; + row(col).ToString())\n      Next col\n      Console.WriteLine()\n    Next row\n  End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_NewRow\">\r\n    \r\n            <a id=\"System_Data_DataTable_NewRow_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NewRow()</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> with the same schema as the table.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.DataRow NewRow ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> with the same schema as the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You must use the NewRow method to create new <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> objects with the same schema as the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>. After creating a <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a>, you can add it to the <a class=\"xref\" href=\"system.data.datarowcollection\" data-linktype=\"relative-path\">DataRowCollection</a>, through the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> object&#39;s <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_Rows_\" data-linktype=\"relative-path\">Rows</a> property. When you use NewRow to create new rows, the rows must be added to or deleted from the data table before you call <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_Clear_\" data-linktype=\"relative-path\">Clear</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>, adds two <a class=\"xref\" href=\"system.data.datacolumn\" data-linktype=\"relative-path\">DataColumn</a> objects that determine the table&#39;s schema, and creates several new <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> objects using the NewRow method. Those <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> objects are then added to the <a class=\"xref\" href=\"system.data.datarowcollection\" data-linktype=\"relative-path\">DataRowCollection</a> using the <a class=\"xref\" href=\"system.data.datarowcollection#System_Data_DataRowCollection_Add_\" data-linktype=\"relative-path\">Add</a> method.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData DataTable.NewRow Example#1\">Private Sub MakeDataTableAndDisplay()\n    &#39; Create new DataTable and DataSource objects.\n    Dim table As DataTable = New DataTable()\n\n    &#39; Declare DataColumn and DataRow variables.\n    Dim column As DataColumn \n    Dim row As DataRow \n    Dim view As DataView \n\n    &#39; Create new DataColumn, set DataType, ColumnName and add to DataTable.    \n    column = New DataColumn()\n    column.DataType = System.Type.GetType(&quot;System.Int32&quot;)\n    column.ColumnName = &quot;id&quot;\n    table.Columns.Add(column)\n \n    &#39; Create second column.\n    column = New DataColumn()\n    column.DataType = Type.GetType(&quot;System.String&quot;)\n    column.ColumnName = &quot;item&quot;\n    table.Columns.Add(column)\n \n    &#39; Create new DataRow objects and add to DataTable.    \n    Dim i As Integer\n    For i = 0 to 9 \n       row = table.NewRow()\n       row(&quot;id&quot;) = i\n       row(&quot;item&quot;) = &quot;item &quot; &amp; i\n       table.Rows.Add(row)\n    Next\n    &#39; Create a DataView using the DataTable.\n    view = New DataView(table)\n\n    &#39; Set a DataGrid control&#39;s DataSource to the DataView.\n    DataGrid1.DataSource = view\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData DataTable.NewRow Example#1\">    private void MakeDataTableAndDisplay()\n    {\n        // Create new DataTable and DataSource objects.\n        DataTable table = new DataTable();\n\n        // Declare DataColumn and DataRow variables.\n        DataColumn column;\n        DataRow row; \n        DataView view;\n\n        // Create new DataColumn, set DataType, ColumnName and add to DataTable.    \n        column = new DataColumn();\n        column.DataType = System.Type.GetType(&quot;System.Int32&quot;);\n        column.ColumnName = &quot;id&quot;;\n        table.Columns.Add(column);\n \n        // Create second column.\n        column = new DataColumn();\n        column.DataType = Type.GetType(&quot;System.String&quot;);\n        column.ColumnName = &quot;item&quot;;\n        table.Columns.Add(column);\n \n        // Create new DataRow objects and add to DataTable.    \n        for(int i = 0; i &lt; 10; i++)\n        {\n            row = table.NewRow();\n            row[&quot;id&quot;] = i;\n            row[&quot;item&quot;] = &quot;item &quot; + i.ToString();\n            table.Rows.Add(row);\n        }\n \n        // Create a DataView using the DataTable.\n        view = new DataView(table);\n\n        // Set a DataGrid control&#39;s DataSource to the DataView.\n        dataGrid1.DataSource = view;\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_NewRowArray_System_Int32_\">\r\n    \r\n            <a id=\"System_Data_DataTable_NewRowArray_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NewRowArray(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an array of <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected System.Data.DataRow[] NewRowArray (int size);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>size</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> value that describes the size of the array.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a>[]</div>\r\n                  </div>\r\n                  <p>The new array.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_NewRowFromBuilder_System_Data_DataRowBuilder_\">\r\n    \r\n            <a id=\"System_Data_DataTable_NewRowFromBuilder_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NewRowFromBuilder(DataRowBuilder)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new row from an existing row.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual System.Data.DataRow NewRowFromBuilder (System.Data.DataRowBuilder builder);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>builder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datarowbuilder\" data-linktype=\"relative-path\">DataRowBuilder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.data.datarowbuilder\" data-linktype=\"relative-path\">DataRowBuilder</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> derived class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_OnColumnChanged_System_Data_DataColumnChangeEventArgs_\">\r\n    \r\n            <a id=\"System_Data_DataTable_OnColumnChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnColumnChanged(DataColumnChangeEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_ColumnChanged\" data-linktype=\"relative-path\">ColumnChanged</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnColumnChanged (System.Data.DataColumnChangeEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datacolumnchangeeventargs\" data-linktype=\"relative-path\">DataColumnChangeEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.data.datacolumnchangeeventargs\" data-linktype=\"relative-path\">DataColumnChangeEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For an overview, see <a href=\"http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2\" data-linktype=\"external\">NIB: Raising an Event</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_OnColumnChanging_System_Data_DataColumnChangeEventArgs_\">\r\n    \r\n            <a id=\"System_Data_DataTable_OnColumnChanging_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnColumnChanging(DataColumnChangeEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_ColumnChanging\" data-linktype=\"relative-path\">ColumnChanging</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnColumnChanging (System.Data.DataColumnChangeEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datacolumnchangeeventargs\" data-linktype=\"relative-path\">DataColumnChangeEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.data.datacolumnchangeeventargs\" data-linktype=\"relative-path\">DataColumnChangeEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For an overview, see <a href=\"http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2\" data-linktype=\"external\">NIB: Raising an Event</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_OnPropertyChanging_System_ComponentModel_PropertyChangedEventArgs_\">\r\n    \r\n            <a id=\"System_Data_DataTable_OnPropertyChanging_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnPropertyChanging(PropertyChangedEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.componentmodel.inotifypropertychanged#System_ComponentModel_INotifyPropertyChanged_PropertyChanged\" data-linktype=\"relative-path\">PropertyChanged</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnPropertyChanging (System.ComponentModel.PropertyChangedEventArgs pcevent);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>pcevent</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.propertychangedeventargs\" data-linktype=\"relative-path\">PropertyChangedEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.componentmodel.propertychangedeventargs\" data-linktype=\"relative-path\">PropertyChangedEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For an overview, see <a href=\"http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2\" data-linktype=\"external\">NIB: Raising an Event</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_OnRemoveColumn_System_Data_DataColumn_\">\r\n    \r\n            <a id=\"System_Data_DataTable_OnRemoveColumn_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnRemoveColumn(DataColumn)</div>        \r\n          </div>\r\n    \r\n            <p>Notifies the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> that a <a class=\"xref\" href=\"system.data.datacolumn\" data-linktype=\"relative-path\">DataColumn</a> is being removed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnRemoveColumn (System.Data.DataColumn column);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>column</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datacolumn\" data-linktype=\"relative-path\">DataColumn</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.data.datacolumn\" data-linktype=\"relative-path\">DataColumn</a> being removed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2\" data-linktype=\"external\">NIB: Raising an Event</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_OnRowChanged_System_Data_DataRowChangeEventArgs_\">\r\n    \r\n            <a id=\"System_Data_DataTable_OnRowChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnRowChanged(DataRowChangeEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_RowChanged\" data-linktype=\"relative-path\">RowChanged</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnRowChanged (System.Data.DataRowChangeEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datarowchangeeventargs\" data-linktype=\"relative-path\">DataRowChangeEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.data.datarowchangeeventargs\" data-linktype=\"relative-path\">DataRowChangeEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For an overview, see <a href=\"http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2\" data-linktype=\"external\">NIB: Raising an Event</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_OnRowChanging_System_Data_DataRowChangeEventArgs_\">\r\n    \r\n            <a id=\"System_Data_DataTable_OnRowChanging_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnRowChanging(DataRowChangeEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_RowChanging\" data-linktype=\"relative-path\">RowChanging</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnRowChanging (System.Data.DataRowChangeEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datarowchangeeventargs\" data-linktype=\"relative-path\">DataRowChangeEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.data.datarowchangeeventargs\" data-linktype=\"relative-path\">DataRowChangeEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For an overview, see <a href=\"http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2\" data-linktype=\"external\">NIB: Raising an Event</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_OnRowDeleted_System_Data_DataRowChangeEventArgs_\">\r\n    \r\n            <a id=\"System_Data_DataTable_OnRowDeleted_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnRowDeleted(DataRowChangeEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_RowDeleted\" data-linktype=\"relative-path\">RowDeleted</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnRowDeleted (System.Data.DataRowChangeEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datarowchangeeventargs\" data-linktype=\"relative-path\">DataRowChangeEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.data.datarowchangeeventargs\" data-linktype=\"relative-path\">DataRowChangeEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For an overview, see <a href=\"http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2\" data-linktype=\"external\">NIB: Raising an Event</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_OnRowDeleting_System_Data_DataRowChangeEventArgs_\">\r\n    \r\n            <a id=\"System_Data_DataTable_OnRowDeleting_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnRowDeleting(DataRowChangeEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_RowDeleting\" data-linktype=\"relative-path\">RowDeleting</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnRowDeleting (System.Data.DataRowChangeEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datarowchangeeventargs\" data-linktype=\"relative-path\">DataRowChangeEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.data.datarowchangeeventargs\" data-linktype=\"relative-path\">DataRowChangeEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For an overview, see <a href=\"http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2\" data-linktype=\"external\">NIB: Raising an Event</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_OnTableCleared_System_Data_DataTableClearEventArgs_\">\r\n    \r\n            <a id=\"System_Data_DataTable_OnTableCleared_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnTableCleared(DataTableClearEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_TableCleared\" data-linktype=\"relative-path\">TableCleared</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnTableCleared (System.Data.DataTableClearEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datatablecleareventargs\" data-linktype=\"relative-path\">DataTableClearEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.data.datatablecleareventargs\" data-linktype=\"relative-path\">DataTableClearEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raises the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_TableCleared\" data-linktype=\"relative-path\">TableCleared</a> event, which is fired immediately after all rows have been successfully cleared but before the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_Clear_\" data-linktype=\"relative-path\">Clear</a> method returns control back to the caller.  </p>\n<p> Raising an event invokes the event handler through a delegate. For an overview, see <a href=\"http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2\" data-linktype=\"external\">NIB: Raising an Event</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_OnTableClearing_System_Data_DataTableClearEventArgs_\">\r\n    \r\n            <a id=\"System_Data_DataTable_OnTableClearing_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnTableClearing(DataTableClearEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_TableClearing\" data-linktype=\"relative-path\">TableClearing</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnTableClearing (System.Data.DataTableClearEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datatablecleareventargs\" data-linktype=\"relative-path\">DataTableClearEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.data.datatablecleareventargs\" data-linktype=\"relative-path\">DataTableClearEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raises the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_TableClearing\" data-linktype=\"relative-path\">TableClearing</a> event, which is fired before processing of the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_Clear_\" data-linktype=\"relative-path\">Clear</a> operation begins.  </p>\n<p> Raising an event invokes the event handler through a delegate. For an overview, see <a href=\"http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2\" data-linktype=\"external\">NIB: Raising an Event</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_OnTableNewRow_System_Data_DataTableNewRowEventArgs_\">\r\n    \r\n            <a id=\"System_Data_DataTable_OnTableNewRow_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnTableNewRow(DataTableNewRowEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_TableNewRow\" data-linktype=\"relative-path\">TableNewRow</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnTableNewRow (System.Data.DataTableNewRowEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datatablenewroweventargs\" data-linktype=\"relative-path\">DataTableNewRowEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.data.datatablenewroweventargs\" data-linktype=\"relative-path\">DataTableNewRowEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raises the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_TableNewRow\" data-linktype=\"relative-path\">TableNewRow</a> event, which fires after a new <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> has been created using <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_NewRow_\" data-linktype=\"relative-path\">NewRow</a>.  </p>\n<p> Raising an event invokes the event handler through a delegate. For an overview, see <a href=\"http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2\" data-linktype=\"external\">NIB: Raising an Event</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_ReadXml_System_IO_Stream_\">\r\n    \r\n            <a id=\"System_Data_DataTable_ReadXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadXml(Stream)</div>        \r\n          </div>\r\n    \r\n            <p>Reads XML schema and data into the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> using the specified <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.XmlReadMode ReadXml (System.IO.Stream stream);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>stream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that derives from <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.xmlreadmode\" data-linktype=\"relative-path\">XmlReadMode</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.data.xmlreadmode\" data-linktype=\"relative-path\">XmlReadMode</a> used to read the data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The current <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> and its descendents are loaded with the data from the supplied <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>. The behavior of this method is identical to that of the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> method, except that in this case, data is loaded only for the current table and its descendants.  </p>\n<p> The ReadXml method provides a way to read either data only, or both data and schema into a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> from an XML document, whereas the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_ReadXmlSchema_\" data-linktype=\"relative-path\">ReadXmlSchema</a> method reads only the schema.  </p>\n<p> Note that the same is true for the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> and <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> methods, respectively. To write XML data, or both schema and data from the <code>DataTable</code>, use the <code>WriteXml</code> method. To write just the schema, use the <code>WriteXmlSchema</code> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> An <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> will be thrown if a column type in the <code>DataRow</code> being read from or written to implements <a class=\"xref\" href=\"system.dynamic.idynamicmetaobjectprovider\" data-linktype=\"relative-path\">IDynamicMetaObjectProvider</a> and does not implement <a class=\"xref\" href=\"system.xml.serialization.ixmlserializable\" data-linktype=\"relative-path\">IXmlSerializable</a>.  </p>\n</div>\n<p> If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.  </p>\n<p> If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>DataSet</code> does not associate an XML element with its corresponding <code>DataColumn</code> or <code>DataTable</code> when legal XML characters like (&quot;_&quot;) are escaped in the serialized XML. The <code>DataSet</code> itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> containing two columns and ten rows. The example writes the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> schema and data to a memory stream, by invoking the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> method. The example creates a second <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> and calls the ReadXml method to fill it with schema and data.  </p>\n<pre><code class=\"lang-cs\" name=\"DataWorks DataTable.ReadXml#1\">    private static void DemonstrateReadWriteXMLDocumentWithStream()\n    {\n        DataTable table = CreateTestTable(&quot;XmlDemo&quot;);\n        PrintValues(table, &quot;Original table&quot;);\n\n        // Write the schema and data to XML in a memory stream.\n        System.IO.MemoryStream xmlStream = new System.IO.MemoryStream();\n        table.WriteXml(xmlStream, XmlWriteMode.WriteSchema);\n\n        // Rewind the memory stream.\n        xmlStream.Position = 0;\n\n        DataTable newTable = new DataTable();\n        newTable.ReadXml(xmlStream);\n\n        // Print out values in the table.\n        PrintValues(newTable, &quot;New table&quot;);\n    }\n\n    private static DataTable CreateTestTable(string tableName)\n    {\n        // Create a test DataTable with two columns and a few rows.\n        DataTable table = new DataTable(tableName);\n        DataColumn column = new DataColumn(&quot;id&quot;, typeof(System.Int32));\n        column.AutoIncrement = true;\n        table.Columns.Add(column);\n\n        column = new DataColumn(&quot;item&quot;, typeof(System.String));\n        table.Columns.Add(column);\n\n        // Add ten rows.\n        DataRow row;\n        for (int i = 0; i &lt;= 9; i++)\n        {\n            row = table.NewRow();\n            row[&quot;item&quot;] = &quot;item &quot; + i;\n            table.Rows.Add(row);\n        }\n\n        table.AcceptChanges();\n        return table;\n    }\n\n    private static void PrintValues(DataTable table, string label)\n    {\n        // Display the contents of the supplied DataTable:\n        Console.WriteLine(label);\n        foreach (DataRow row in table.Rows)\n        {\n            foreach (DataColumn column in table.Columns)\n            {\n                Console.Write(&quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, row[column]);\n            }\n            Console.WriteLine();\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"DataWorks DataTable.ReadXml#1\">  Private Sub DemonstrateReadWriteXMLDocumentWithStream()\n    Dim table As DataTable = CreateTestTable(&quot;XmlDemo&quot;)\n    PrintValues(table, &quot;Original table&quot;)\n\n    &#39; Write the schema and data to XML in a memory stream.\n    Dim xmlStream As New System.IO.MemoryStream()\n    table.WriteXml(xmlStream, XmlWriteMode.WriteSchema)\n\n    &#39; Rewind the memory stream.\n    xmlStream.Position = 0\n\n    Dim newTable As New DataTable\n    newTable.ReadXml(xmlStream)\n\n    &#39; Print out values in the table.\n    PrintValues(newTable, &quot;New Table&quot;)\n  End Sub\n\n  Private Function CreateTestTable(ByVal tableName As String) As DataTable\n    &#39; Create a test DataTable with two columns and a few rows.\n    Dim table As New DataTable(tableName)\n    Dim column As New DataColumn(&quot;id&quot;, GetType(System.Int32))\n    column.AutoIncrement = True\n    table.Columns.Add(column)\n\n    column = New DataColumn(&quot;item&quot;, GetType(System.String))\n    table.Columns.Add(column)\n\n    &#39; Add ten rows.\n    Dim row As DataRow\n    For i As Integer = 0 To 9\n      row = table.NewRow()\n      row(&quot;item&quot;) = &quot;item &quot; &amp; i\n      table.Rows.Add(row)\n    Next i\n\n    table.AcceptChanges()\n    Return table\n  End Function\n\n  Private Sub PrintValues(ByVal table As DataTable, ByVal label As String)\n    &#39; Display the contents of the supplied DataTable:\n    Console.WriteLine(label)\n    For Each row As DataRow In table.Rows\n      For Each column As DataColumn In table.Columns\n        Console.Write(&quot;{0}{1}&quot;, ControlChars.Tab, row(column))\n      Next column\n      Console.WriteLine()\n    Next row\n  End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_ReadXml_System_IO_TextReader_\">\r\n    \r\n            <a id=\"System_Data_DataTable_ReadXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadXml(TextReader)</div>        \r\n          </div>\r\n    \r\n            <p>Reads XML schema and data into the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> using the specified <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.XmlReadMode ReadXml (System.IO.TextReader reader);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>reader</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> that will be used to read the data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.xmlreadmode\" data-linktype=\"relative-path\">XmlReadMode</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.data.xmlreadmode\" data-linktype=\"relative-path\">XmlReadMode</a> used to read the data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The current <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> and its descendents are loaded with the data from the supplied <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>. The behavior of this method is identical to that of the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> method, except that in this case, data is loaded only for the current table and its descendants.  </p>\n<p> The ReadXml method provides a way to read either data only, or both data and schema into a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> from an XML document, whereas the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_ReadXmlSchema_\" data-linktype=\"relative-path\">ReadXmlSchema</a> method reads only the schema.  </p>\n<p> Note that the same is true for the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> and <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> methods, respectively. To write XML data, or both schema and data from the <code>DataTable</code>, use the <code>WriteXml</code> method. To write just the schema, use the <code>WriteXmlSchema</code> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> An <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> will be thrown if a column type in the <code>DataRow</code> being read from or written to implements <a class=\"xref\" href=\"system.dynamic.idynamicmetaobjectprovider\" data-linktype=\"relative-path\">IDynamicMetaObjectProvider</a> and does not implement <a class=\"xref\" href=\"system.xml.serialization.ixmlserializable\" data-linktype=\"relative-path\">IXmlSerializable</a>.  </p>\n</div>\n<p> If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.  </p>\n<p> If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>DataSet</code> does not associate an XML element with its corresponding <code>DataColumn</code> or <code>DataTable</code> when legal XML characters like (&quot;_&quot;) are escaped in the serialized XML. The <code>DataSet</code> itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> containing two columns and ten rows. The example writes the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> schema and data to a memory stream, by invoking the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> method. The example creates a second <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> and calls the ReadXml method to fill it with schema and data.  </p>\n<pre><code class=\"lang-vb\" name=\"DataWorks DataTable.ReadXmlText#1\">  Private Sub DemonstrateReadWriteXMLDocumentWithReader()\n    Dim table As DataTable = CreateTestTable(&quot;XmlDemo&quot;)\n    PrintValues(table, &quot;Original table&quot;)\n\n    &#39; Write the schema and data to XML in a memory stream.\n    Dim xmlStream As New System.IO.MemoryStream()\n    table.WriteXml(xmlStream, XmlWriteMode.WriteSchema)\n\n    &#39; Rewind the memory stream.\n    xmlStream.Position = 0\n\n    Dim reader As New System.IO.StreamReader(xmlStream)\n    Dim newTable As New DataTable\n    newTable.ReadXml(reader)\n\n    &#39; Print out values in the table.\n    PrintValues(newTable, &quot;New Table&quot;)\n  End Sub\n\n  Private Function CreateTestTable(ByVal tableName As String) _\n    As DataTable\n    &#39; Create a test DataTable with two columns and a few rows.\n    Dim table As New DataTable(tableName)\n    Dim column As New DataColumn(&quot;id&quot;, GetType(System.Int32))\n    column.AutoIncrement = True\n    table.Columns.Add(column)\n\n    column = New DataColumn(&quot;item&quot;, GetType(System.String))\n    table.Columns.Add(column)\n\n    &#39; Add ten rows.\n    Dim row As DataRow\n    For i As Integer = 0 To 9\n      row = table.NewRow()\n      row(&quot;item&quot;) = &quot;item &quot; &amp; i\n      table.Rows.Add(row)\n    Next i\n\n    table.AcceptChanges()\n    Return table\n  End Function\n\n  Private Sub PrintValues(ByVal table As DataTable, _\n    ByVal label As String)\n    Console.WriteLine(label)\n    For Each row As DataRow In table.Rows\n      For Each column As DataColumn In table.Columns\n        Console.Write(&quot;{0}{1}&quot;, ControlChars.Tab, row(column))\n      Next column\n      Console.WriteLine()\n    Next row\n  End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"DataWorks DataTable.ReadXmlText#1\">    private static void DemonstrateReadWriteXMLDocumentWithReader()\n    {\n        DataTable table = CreateTestTable(&quot;XmlDemo&quot;);\n        PrintValues(table, &quot;Original table&quot;);\n\n        // Write the schema and data to XML in a memory stream.\n        System.IO.MemoryStream xmlStream = new System.IO.MemoryStream();\n        table.WriteXml(xmlStream, XmlWriteMode.WriteSchema);\n\n        // Rewind the memory stream.\n        xmlStream.Position = 0;\n\n        System.IO.StreamReader reader = \n            new System.IO.StreamReader(xmlStream);\n        DataTable newTable = new DataTable();\n        newTable.ReadXml(reader);\n\n        // Print out values in the table.\n        PrintValues(newTable, &quot;New table&quot;);\n    }\n\n    private static DataTable CreateTestTable(string tableName)\n    {\n        // Create a test DataTable with two columns and a few rows.\n        DataTable table = new DataTable(tableName);\n        DataColumn column = new DataColumn(&quot;id&quot;, typeof(System.Int32));\n        column.AutoIncrement = true;\n        table.Columns.Add(column);\n\n        column = new DataColumn(&quot;item&quot;, typeof(System.String));\n        table.Columns.Add(column);\n\n        // Add ten rows.\n        DataRow row;\n        for (int i = 0; i &lt;= 9; i++)\n        {\n            row = table.NewRow();\n            row[&quot;item&quot;] = &quot;item &quot; + i;\n            table.Rows.Add(row);\n        }\n\n        table.AcceptChanges();\n        return table;\n    }\n\n    private static void PrintValues(DataTable table, string label)\n    {\n        Console.WriteLine(label);\n        foreach (DataRow row in table.Rows)\n        {\n            foreach (DataColumn column in table.Columns)\n            {\n                Console.Write(&quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, row[column]);\n            }\n            Console.WriteLine();\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_ReadXml_System_String_\">\r\n    \r\n            <a id=\"System_Data_DataTable_ReadXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadXml(String)</div>        \r\n          </div>\r\n    \r\n            <p>Reads XML schema and data into the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> from the specified file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.XmlReadMode ReadXml (string fileName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the file from which to read the data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.xmlreadmode\" data-linktype=\"relative-path\">XmlReadMode</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.data.xmlreadmode\" data-linktype=\"relative-path\">XmlReadMode</a> used to read the data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The current <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> and its descendents are loaded with the data from the file named in the supplied <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>. The behavior of this method is identical to that of the <a class=\"xref\" href=\"system.data.dataset#System_Data_DataSet_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> method, except that in this case, data is loaded only for the current table and its descendants.  </p>\n<p> The ReadXml method provides a way to read either data only, or both data and schema into a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> from an XML document, whereas the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_ReadXmlSchema_\" data-linktype=\"relative-path\">ReadXmlSchema</a> method reads only the schema.  </p>\n<p> Note that the same is true for the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> and <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> methods, respectively. To write XML data, or both schema and data from the <code>DataTable</code>, use the <code>WriteXml</code> method. To write just the schema, use the <code>WriteXmlSchema</code> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> An <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> will be thrown if a column type in the <code>DataRow</code> being read from or written to implements <a class=\"xref\" href=\"system.dynamic.idynamicmetaobjectprovider\" data-linktype=\"relative-path\">IDynamicMetaObjectProvider</a> and does not implement <a class=\"xref\" href=\"system.xml.serialization.ixmlserializable\" data-linktype=\"relative-path\">IXmlSerializable</a>.  </p>\n</div>\n<p> If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.  </p>\n<p> If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>DataSet</code> does not associate an XML element with its corresponding <code>DataColumn</code> or <code>DataTable</code> when legal XML characters like (&quot;_&quot;) are escaped in the serialized XML. The <code>DataSet</code> itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.  </p>\n</div>\n<pre><code>using System.Data;  \npublic class A {  \n   static void Main(string[] args) {  \n      DataTable tabl = new DataTable(&quot;mytable&quot;);  \n      tabl.Columns.Add(new DataColumn(&quot;id&quot;, typeof(int)));  \n      for (int i = 0; i &lt; 10; i++) {  \n         DataRow row = tabl.NewRow();  \n         row[&quot;id&quot;] = i;  \n         tabl.Rows.Add(row);  \n      }  \n      tabl.WriteXml(&quot;f.xml&quot;, XmlWriteMode.WriteSchema);  \n      DataTable newt = new DataTable();  \n      newt.ReadXml(&quot;f.xml&quot;);  \n   }  \n}  \n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> containing two columns and ten rows. The example writes the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> schema and data to disk. The example creates a second <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> and calls the ReadXml method to fill it with schema and data.  </p>\n<pre><code class=\"lang-cs\" name=\"DataWorks DataTable.ReadXmlString#1\">    private static void DemonstrateReadWriteXMLDocumentWithString()\n    {\n        DataTable table = CreateTestTable(&quot;XmlDemo&quot;);\n        PrintValues(table, &quot;Original table&quot;);\n\n        string fileName = &quot;C:\\&nbsp;&nbsp;&nbsp;&nbsp;estData.xml&quot;;\n        table.WriteXml(fileName, XmlWriteMode.WriteSchema);\n\n        DataTable newTable = new DataTable();\n        newTable.ReadXml(fileName);\n\n        // Print out values in the table.\n        PrintValues(newTable, &quot;New table&quot;);\n    }\n\n    private static DataTable CreateTestTable(string tableName)\n    {\n        // Create a test DataTable with two columns and a few rows.\n        DataTable table = new DataTable(tableName);\n        DataColumn column = new DataColumn(&quot;id&quot;, typeof(System.Int32));\n        column.AutoIncrement = true;\n        table.Columns.Add(column);\n\n        column = new DataColumn(&quot;item&quot;, typeof(System.String));\n        table.Columns.Add(column);\n\n        // Add ten rows.\n        DataRow row;\n        for (int i = 0; i &lt;= 9; i++)\n        {\n            row = table.NewRow();\n            row[&quot;item&quot;] = &quot;item &quot; + i;\n            table.Rows.Add(row);\n        }\n\n        table.AcceptChanges();\n        return table;\n    }\n\n    private static void PrintValues(DataTable table, string label)\n    {\n        Console.WriteLine(label);\n        foreach (DataRow row in table.Rows)\n        {\n            foreach (DataColumn column in table.Columns)\n            {\n                Console.Write(&quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, row[column]);\n            }\n            Console.WriteLine();\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"DataWorks DataTable.ReadXmlString#1\">  Private Sub DemonstrateReadWriteXMLDocumentWithString()\n    Dim table As DataTable = CreateTestTable(&quot;XmlDemo&quot;)\n    PrintValues(table, &quot;Original table&quot;)\n\n    &#39; Write the schema and data to XML in a file.\n    Dim fileName As String = &quot;C:&nbsp;&nbsp;&nbsp;&nbsp;estData.xml&quot;\n    table.WriteXml(fileName, XmlWriteMode.WriteSchema)\n\n    Dim newTable As New DataTable\n    newTable.ReadXml(fileName)\n\n    &#39; Print out values in the table.\n    PrintValues(newTable, &quot;New Table&quot;)\n  End Sub\n\n  Private Function CreateTestTable(ByVal tableName As String) _\n    As DataTable\n\n    &#39; Create a test DataTable with two columns and a few rows.\n    Dim table As New DataTable(tableName)\n    Dim column As New DataColumn(&quot;id&quot;, GetType(System.Int32))\n    column.AutoIncrement = True\n    table.Columns.Add(column)\n\n    column = New DataColumn(&quot;item&quot;, GetType(System.String))\n    table.Columns.Add(column)\n\n    &#39; Add ten rows.\n    Dim row As DataRow\n    For i As Integer = 0 To 9\n      row = table.NewRow()\n      row(&quot;item&quot;) = &quot;item &quot; &amp; i\n      table.Rows.Add(row)\n    Next i\n\n    table.AcceptChanges()\n    Return table\n  End Function\n\n  Private Sub PrintValues(ByVal table As DataTable, _\n    ByVal label As String)\n    Console.WriteLine(label)\n    For Each row As DataRow In table.Rows\n      For Each column As DataColumn In table.Columns\n        Console.Write(&quot;{0}{1}&quot;, ControlChars.Tab, row(column))\n      Next column\n      Console.WriteLine()\n    Next row\n  End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_ReadXml_System_Xml_XmlReader_\">\r\n    \r\n            <a id=\"System_Data_DataTable_ReadXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadXml(XmlReader)</div>        \r\n          </div>\r\n    \r\n            <p>Reads XML Schema and Data into the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> using the specified <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.XmlReadMode ReadXml (System.Xml.XmlReader reader);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>reader</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> that will be used to read the data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.xmlreadmode\" data-linktype=\"relative-path\">XmlReadMode</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.data.xmlreadmode\" data-linktype=\"relative-path\">XmlReadMode</a> used to read the data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The current <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> and its descendents are loaded with the data from the file named in the supplied <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>. The behavior of this method is identical to that of the ReadXml method, except that in this case, data is loaded only for the current table and its descendants.  </p>\n<p> The ReadXml method provides a way to read either data only, or both data and schema into a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> from an XML document, whereas the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_ReadXmlSchema_\" data-linktype=\"relative-path\">ReadXmlSchema</a> method reads only the schema.  </p>\n<p> Note that the same is true for the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> and <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> methods, respectively. To write XML data, or both schema and data from the <code>DataTable</code>, use the <code>WriteXml</code> method. To write just the schema, use the <code>WriteXmlSchema</code> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> An <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> will be thrown if a column type in the <code>DataRow</code> being read from or written to implements <a class=\"xref\" href=\"system.dynamic.idynamicmetaobjectprovider\" data-linktype=\"relative-path\">IDynamicMetaObjectProvider</a> and does not implement <a class=\"xref\" href=\"system.xml.serialization.ixmlserializable\" data-linktype=\"relative-path\">IXmlSerializable</a>.  </p>\n</div>\n<p> If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.  </p>\n<p> If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>DataSet</code> does not associate an XML element with its corresponding <code>DataColumn</code> or <code>DataTable</code> when legal XML characters like (&quot;_&quot;) are escaped in the serialized XML. The <code>DataSet</code> itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> containing two columns and ten rows. The example writes the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> schema and data to an <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>. The example creates a second <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> and calls the ReadXml method to fill it with schema and data from the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> instance.  </p>\n<pre><code class=\"lang-cs\" name=\"DataWorks DataTable.ReadXmlXmlReader#1\">    private static void DemonstrateReadWriteXMLDocumentWithReader()\n    {\n        DataTable table = CreateTestTable(&quot;XmlDemo&quot;);\n        PrintValues(table, &quot;Original table&quot;);\n\n        // Write the schema and data to XML in a memory stream.\n        System.IO.MemoryStream xmlStream = new System.IO.MemoryStream();\n        table.WriteXml(xmlStream, XmlWriteMode.WriteSchema);\n\n        // Rewind the memory stream.\n        xmlStream.Position = 0;\n\n        System.Xml.XmlTextReader reader = \n            new System.Xml.XmlTextReader(xmlStream);\n        DataTable newTable = new DataTable();\n        newTable.ReadXml(reader);\n\n        // Print out values in the table.\n        PrintValues(newTable, &quot;New table&quot;);\n    }\n\n    private static DataTable CreateTestTable(string tableName)\n    {\n        // Create a test DataTable with two columns and a few rows.\n        DataTable table = new DataTable(tableName);\n        DataColumn column = new DataColumn(&quot;id&quot;, typeof(System.Int32));\n        column.AutoIncrement = true;\n        table.Columns.Add(column);\n\n        column = new DataColumn(&quot;item&quot;, typeof(System.String));\n        table.Columns.Add(column);\n\n        // Add ten rows.\n        DataRow row;\n        for (int i = 0; i &lt;= 9; i++)\n        {\n            row = table.NewRow();\n            row[&quot;item&quot;] = &quot;item &quot; + i;\n            table.Rows.Add(row);\n        }\n\n        table.AcceptChanges();\n        return table;\n    }\n\n    private static void PrintValues(DataTable table, string label)\n    {\n        Console.WriteLine(label);\n        foreach (DataRow row in table.Rows)\n        {\n            foreach (DataColumn column in table.Columns)\n            {\n                Console.Write(&quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, row[column]);\n            }\n            Console.WriteLine();\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"DataWorks DataTable.ReadXmlXmlReader#1\">  Private Sub DemonstrateReadWriteXMLDocumentWithReader()\n    Dim table As DataTable = CreateTestTable(&quot;XmlDemo&quot;)\n    PrintValues(table, &quot;Original table&quot;)\n\n    &#39; Write the schema and data to XML in a memory stream.\n    Dim xmlStream As New System.IO.MemoryStream()\n    table.WriteXml(xmlStream, XmlWriteMode.WriteSchema)\n\n    &#39; Rewind the memory stream.\n    xmlStream.Position = 0\n\n    Dim reader As New System.Xml.XmlTextReader(xmlStream)\n    Dim newTable As New DataTable\n    newTable.ReadXml(reader)\n\n    &#39; Print out values in the table.\n    PrintValues(newTable, &quot;New Table&quot;)\n  End Sub\n\n  Private Function CreateTestTable(ByVal tableName As String) _\n    As DataTable\n    &#39; Create a test DataTable with two columns and a few rows.\n    Dim table As New DataTable(tableName)\n    Dim column As New DataColumn(&quot;id&quot;, GetType(System.Int32))\n    column.AutoIncrement = True\n    table.Columns.Add(column)\n\n    column = New DataColumn(&quot;item&quot;, GetType(System.String))\n    table.Columns.Add(column)\n\n    &#39; Add ten rows.\n    Dim row As DataRow\n    For i As Integer = 0 To 9\n      row = table.NewRow()\n      row(&quot;item&quot;) = &quot;item &quot; &amp; i\n      table.Rows.Add(row)\n    Next i\n\n    table.AcceptChanges()\n    Return table\n  End Function\n\n  Private Sub PrintValues(ByVal table As DataTable, _\n    ByVal label As String)\n    Console.WriteLine(label)\n    For Each row As DataRow In table.Rows\n      For Each column As DataColumn In table.Columns\n        Console.Write(&quot;{0}{1}&quot;, ControlChars.Tab, row(column))\n      Next column\n      Console.WriteLine()\n    Next row\n  End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_ReadXmlSchema_System_IO_Stream_\">\r\n    \r\n            <a id=\"System_Data_DataTable_ReadXmlSchema_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadXmlSchema(Stream)</div>        \r\n          </div>\r\n    \r\n            <p>Reads an XML schema into the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> using the specified stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ReadXmlSchema (System.IO.Stream stream);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>stream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The stream used to read the schema.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the ReadXmlSchema method to create the schema for a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>. The schema includes table, relation, and constraint definitions.  </p>\n<p> To write a schema to an XML document, use the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> method.  </p>\n<p> The XML schema is interpreted according to the XSD standard.  </p>\n<p> Data corruption can occur if the msdata:DataType and the xs:type types do not match. No exception will be thrown.  </p>\n<p> The <code>ReadXmlSchema</code> method is generally invoked before invoking the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> method which is used to fill the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.  </p>\n<p> To create a nested relation using XML schema, use implicit nested elements. You can also configure the nested relation to use explicit column names. Elements must be implicitly nested in order for the corresponding DataTables to participate in a nested relation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following console application creates a new <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>, and writes the schema for that table to a <a class=\"xref\" href=\"system.io.memorystream\" data-linktype=\"relative-path\">MemoryStream</a>. Then, the example creates a new <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> and reads its schema from the saved XML schema.  </p>\n<pre><code class=\"lang-cs\" name=\"DataWorks DataTable.ReadXmlIOStream#1\">    private static void DemonstrateReadWriteXMLSchemaWithStream()\n    {\n        DataTable table = CreateTestTable(&quot;XmlDemo&quot;);\n        PrintSchema(table, &quot;Original table&quot;);\n\n        // Write the schema to XML in a memory stream.\n        System.IO.MemoryStream xmlStream = new System.IO.MemoryStream();\n        table.WriteXmlSchema(xmlStream);\n\n        // Rewind the memory stream.\n        xmlStream.Position = 0;\n\n        DataTable newTable = new DataTable();\n        newTable.ReadXmlSchema(xmlStream);\n\n        // Print out values in the table.\n        PrintSchema(newTable, &quot;New table&quot;);\n    }\n\n    private static DataTable CreateTestTable(string tableName)\n    {\n        // Create a test DataTable with two columns and a few rows.\n        DataTable table = new DataTable(tableName);\n        DataColumn column = new DataColumn(&quot;id&quot;, typeof(System.Int32));\n        column.AutoIncrement = true;\n        table.Columns.Add(column);\n\n        column = new DataColumn(&quot;item&quot;, typeof(System.String));\n        table.Columns.Add(column);\n\n        // Add ten rows.\n        DataRow row;\n        for (int i = 0; i &lt;= 9; i++)\n        {\n            row = table.NewRow();\n            row[&quot;item&quot;] = &quot;item &quot; + i;\n            table.Rows.Add(row);\n        }\n\n        table.AcceptChanges();\n        return table;\n    }\n\n    private static void PrintSchema(DataTable table, string label)\n    {\n        // Display the schema of the supplied DataTable:\n        Console.WriteLine(label);\n        foreach (DataColumn column in table.Columns)\n        {\n            Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}: {1}&quot;, column.ColumnName, \n                column.DataType.Name);\n        }\n        Console.WriteLine();\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"DataWorks DataTable.ReadXmlIOStream#1\">  Private Sub DemonstrateReadWriteXMLSchemaWithStream()\n    Dim table As DataTable = CreateTestTable(&quot;XmlDemo&quot;)\n    PrintSchema(table, &quot;Original table&quot;)\n\n    &#39; Write the schema to XML in a memory stream.\n    Dim xmlStream As New System.IO.MemoryStream()\n    table.WriteXmlSchema(xmlStream)\n\n    &#39; Rewind the memory stream.\n    xmlStream.Position = 0\n\n    Dim newTable As New DataTable\n    newTable.ReadXmlSchema(xmlStream)\n\n    &#39; Print out values in the table.\n    PrintSchema(newTable, &quot;New Table&quot;)\n  End Sub\n\n  Private Function CreateTestTable(ByVal tableName As String) _\n    As DataTable\n\n    &#39; Create a test DataTable with two columns and a few rows.\n    Dim table As New DataTable(tableName)\n    Dim column As New DataColumn(&quot;id&quot;, GetType(System.Int32))\n    column.AutoIncrement = True\n    table.Columns.Add(column)\n\n    column = New DataColumn(&quot;item&quot;, GetType(System.String))\n    table.Columns.Add(column)\n\n    &#39; Add ten rows.\n    Dim row As DataRow\n    For i As Integer = 0 To 9\n      row = table.NewRow()\n      row(&quot;item&quot;) = &quot;item &quot; &amp; i\n      table.Rows.Add(row)\n    Next i\n\n    table.AcceptChanges()\n    Return table\n  End Function\n\n  Private Sub PrintSchema(ByVal table As DataTable, _\n    ByVal label As String)\n\n    &#39; Display the schema of the supplied DataTable:\n    Console.WriteLine(label)\n    For Each column As DataColumn In table.Columns\n      Console.WriteLine(&quot;{0}{1}: {2}&quot;, ControlChars.Tab, _\n        column.ColumnName, column.DataType.Name)\n    Next column\n  End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_ReadXmlSchema_System_IO_TextReader_\">\r\n    \r\n            <a id=\"System_Data_DataTable_ReadXmlSchema_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadXmlSchema(TextReader)</div>        \r\n          </div>\r\n    \r\n            <p>Reads an XML schema into the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> using the specified <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ReadXmlSchema (System.IO.TextReader reader);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>reader</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> used to read the schema information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the ReadXmlSchema method to create the schema for a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>. The schema includes table, relation, and constraint definitions.  </p>\n<p> To write a schema to an XML document, use the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> method.  </p>\n<p> The XML schema is interpreted according to the XSD standard.  </p>\n<p> Data corruption can occur if the msdata:DataType and the xs:type types do not match. No exception will be thrown.  </p>\n<p> The <code>ReadXmlSchema</code> method is generally invoked before invoking the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> method which is used to fill the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.  </p>\n<p> To create a nested relation using XML schema, use implicit nested elements. You can also reconfigure the nested relation to use explicit column names. Elements must be implicitly nested in order for the corresponding DataTables to participate in a nested relation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following console application creates a new <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>, and writes the schema for that table to a <a class=\"xref\" href=\"system.io.memorystream\" data-linktype=\"relative-path\">MemoryStream</a>. Then, the example creates a new <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> and reads its schema from the saved XML schema, using a <a class=\"xref\" href=\"system.io.streamreader\" data-linktype=\"relative-path\">StreamReader</a> (which inherits from <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>) as its source.  </p>\n<pre><code class=\"lang-cs\" name=\"DataWorks DataTable.ReadXmlSchema#1\">    private static void DemonstrateReadWriteXMLSchemaWithReader()\n    {\n        DataTable table = CreateTestTable(&quot;XmlDemo&quot;);\n        PrintSchema(table, &quot;Original table&quot;);\n\n        // Write the schema to XML in a memory stream.\n        System.IO.MemoryStream xmlStream = new System.IO.MemoryStream();\n        table.WriteXmlSchema(xmlStream);\n\n        // Rewind the memory stream.\n        xmlStream.Position = 0;\n\n        DataTable newTable = new DataTable();\n        System.IO.StreamReader reader = \n            new System.IO.StreamReader(xmlStream);\n        newTable.ReadXmlSchema(reader);\n\n        // Print out values in the table.\n        PrintSchema(newTable, &quot;New table&quot;);\n    }\n\n    private static DataTable CreateTestTable(string tableName)\n    {\n        // Create a test DataTable with two columns and a few rows.\n        DataTable table = new DataTable(tableName);\n        DataColumn column = new DataColumn(&quot;id&quot;, typeof(System.Int32));\n        column.AutoIncrement = true;\n        table.Columns.Add(column);\n\n        column = new DataColumn(&quot;item&quot;, typeof(System.String));\n        table.Columns.Add(column);\n\n        // Add ten rows.\n        DataRow row;\n        for (int i = 0; i &lt;= 9; i++)\n        {\n            row = table.NewRow();\n            row[&quot;item&quot;] = &quot;item &quot; + i;\n            table.Rows.Add(row);\n        }\n\n        table.AcceptChanges();\n        return table;\n    }\n\n    private static void PrintSchema(DataTable table, string label)\n    {\n        // Display the schema of the supplied DataTable:\n        Console.WriteLine(label);\n        foreach (DataColumn column in table.Columns)\n        {\n            Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}: {1}&quot;, \n                column.ColumnName, column.DataType.Name);\n        }\n        Console.WriteLine();\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"DataWorks DataTable.ReadXmlSchema#1\">  Private Sub DemonstrateReadWriteXMLSchemaWithReader()\n    Dim table As DataTable = CreateTestTable(&quot;XmlDemo&quot;)\n    PrintSchema(table, &quot;Original table&quot;)\n\n    &#39; Write the schema to XML in a memory stream.\n    Dim xmlStream As New System.IO.MemoryStream()\n    table.WriteXmlSchema(xmlStream)\n\n    &#39; Rewind the memory stream.\n    xmlStream.Position = 0\n\n    Dim newTable As New DataTable\n    Dim reader As New System.IO.StreamReader(xmlStream)\n    newTable.ReadXmlSchema(reader)\n\n    &#39; Print out values in the table.\n    PrintSchema(newTable, &quot;New Table&quot;)\n  End Sub\n\n  Private Function CreateTestTable(ByVal tableName As String) _\n    As DataTable\n\n    &#39; Create a test DataTable with two columns and a few rows.\n    Dim table As New DataTable(tableName)\n    Dim column As New DataColumn(&quot;id&quot;, GetType(System.Int32))\n    column.AutoIncrement = True\n    table.Columns.Add(column)\n\n    column = New DataColumn(&quot;item&quot;, GetType(System.String))\n    table.Columns.Add(column)\n\n    &#39; Add ten rows.\n    Dim row As DataRow\n    For i As Integer = 0 To 9\n      row = table.NewRow()\n      row(&quot;item&quot;) = &quot;item &quot; &amp; i\n      table.Rows.Add(row)\n    Next i\n\n    table.AcceptChanges()\n    Return table\n  End Function\n\n  Private Sub PrintSchema(ByVal table As DataTable, _\n    ByVal label As String)\n\n    &#39; Display the schema of the supplied DataTable:\n    Console.WriteLine(label)\n    For Each column As DataColumn In table.Columns\n      Console.WriteLine(&quot;{0}{1}: {2}&quot;, ControlChars.Tab, _\n        column.ColumnName, column.DataType.Name)\n    Next column\n  End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_ReadXmlSchema_System_String_\">\r\n    \r\n            <a id=\"System_Data_DataTable_ReadXmlSchema_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadXmlSchema(String)</div>        \r\n          </div>\r\n    \r\n            <p>Reads an XML schema into the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> from the specified file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ReadXmlSchema (string fileName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the file from which to read the schema information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the ReadXmlSchema method to create the schema for a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>. The schema includes table, relation, and constraint definitions.  </p>\n<p> To write a schema to an XML document, use the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> method.  </p>\n<p> The XML schema is interpreted according to the XSD standard.  </p>\n<p> Data corruption can occur if the msdata:DataType and the xs:type types do not match. No exception will be thrown.  </p>\n<p> The <code>ReadXmlSchema</code> method is generally invoked before invoking the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> method which is used to fill the <code>DataTable</code>.  </p>\n<p> To create a nested relation using XML schema, use implicit nested elements. You can also reconfigure the nested relation to use explicit column names. Elements must be implicitly nested in order for the corresponding DataTables to participate in a nested relation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following console application creates a new <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>, and writes the schema for that table to a file. Then, the example creates a new <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> and reads its schema from the saved XML schema, using the file as its source.  </p>\n<pre><code class=\"lang-cs\" name=\"DataWorks DataTable.ReadXmlSchemaString#1\">    private static void DemonstrateReadWriteXMLSchemaWithFile()\n    {\n        DataTable table = CreateTestTable(&quot;XmlDemo&quot;);\n        PrintSchema(table, &quot;Original table&quot;);\n\n        // Write the schema to XML in a file.\n        string xmlFile = &quot;C:\\\\SchemaDemo.xml&quot;;\n        table.WriteXmlSchema(xmlFile);\n\n        DataTable newTable = new DataTable();\n        newTable.ReadXmlSchema(xmlFile);\n\n        // Print out values in the table.\n        PrintSchema(newTable, &quot;New table&quot;);\n    }\n\n    private static DataTable CreateTestTable(string tableName)\n    {\n        // Create a test DataTable with two columns and a few rows.\n        DataTable table = new DataTable(tableName);\n        DataColumn column = new DataColumn(&quot;id&quot;, typeof(System.Int32));\n        column.AutoIncrement = true;\n        table.Columns.Add(column);\n\n        column = new DataColumn(&quot;item&quot;, typeof(System.String));\n        table.Columns.Add(column);\n\n        // Add ten rows.\n        DataRow row;\n        for (int i = 0; i &lt;= 9; i++)\n        {\n            row = table.NewRow();\n            row[&quot;item&quot;] = &quot;item &quot; + i;\n            table.Rows.Add(row);\n        }\n\n        table.AcceptChanges();\n        return table;\n    }\n\n    private static void PrintSchema(DataTable table, string label)\n    {\n        // Display the schema of the supplied DataTable:\n        Console.WriteLine(label);\n        foreach (DataColumn column in table.Columns)\n        {\n            Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}: {1}&quot;, column.ColumnName, \n                column.DataType.Name);\n        }\n        Console.WriteLine();\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"DataWorks DataTable.ReadXmlSchemaString#1\">  Private Sub DemonstrateReadWriteXMLSchemaWithFile()\n    Dim table As DataTable = CreateTestTable(&quot;XmlDemo&quot;)\n    PrintSchema(table, &quot;Original table&quot;)\n\n    Dim xmlFile As String = &quot;SchemaDemo.xml&quot;\n\n    &#39; Write the schema to XML.\n    table.WriteXmlSchema(xmlFile)\n\n    Dim newTable As New DataTable\n    newTable.ReadXmlSchema(xmlFile)\n\n    &#39; Print out values in the table.\n    PrintSchema(newTable, &quot;New Table&quot;)\n  End Sub\n\n  Private Function CreateTestTable(ByVal tableName As String) _\n        As DataTable\n    &#39; Create a test DataTable with two columns and a few rows.\n    Dim table As New DataTable(tableName)\n    Dim column As New DataColumn(&quot;id&quot;, GetType(System.Int32))\n    column.AutoIncrement = True\n    table.Columns.Add(column)\n\n    column = New DataColumn(&quot;item&quot;, GetType(System.String))\n    table.Columns.Add(column)\n\n    &#39; Add ten rows.\n    Dim row As DataRow\n    For i As Integer = 0 To 9\n      row = table.NewRow()\n      row(&quot;item&quot;) = &quot;item &quot; &amp; i\n      table.Rows.Add(row)\n    Next i\n\n    table.AcceptChanges()\n    Return table\n  End Function\n\n  Private Sub PrintSchema(ByVal table As DataTable, _\n        ByVal label As String)\n    &#39; Display the schema of the supplied DataTable:\n    Console.WriteLine(label)\n    For Each column As DataColumn In table.Columns\n      Console.WriteLine(&quot;{0}{1}: {2}&quot;, ControlChars.Tab, _\n        column.ColumnName, column.DataType.Name)\n    Next column\n  End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_ReadXmlSchema_System_Xml_XmlReader_\">\r\n    \r\n            <a id=\"System_Data_DataTable_ReadXmlSchema_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadXmlSchema(XmlReader)</div>        \r\n          </div>\r\n    \r\n            <p>Reads an XML schema into the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> using the specified <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ReadXmlSchema (System.Xml.XmlReader reader);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>reader</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> used to read the schema information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the ReadXmlSchema method to create the schema for a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>. The schema includes table, relation, and constraint definitions.  </p>\n<p> To write a schema to an XML document, use the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> method.  </p>\n<p> The XML schema is interpreted according to the XSD standard.  </p>\n<p> Data corruption can occur if the msdata:DataType and the xs:type types do not match. No exception will be thrown.  </p>\n<p> The <code>ReadXmlSchema</code> method is generally invoked before invoking the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> method which is used to fill the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The way to create a nested relation using XML schema is to have implicit nested elements. Additionally, the nested relation could be re-wired, to use explicit column names. It is mandatory for elements to be implicitly nested for the corresponding DataTables to participate in a nested relation.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following console application creates a new <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>, and writes the schema for that table to a <a class=\"xref\" href=\"system.io.memorystream\" data-linktype=\"relative-path\">MemoryStream</a>. Then, the example creates a new <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> and reads its schema from the saved XML schema, using a <a class=\"xref\" href=\"system.xml.xmltextreader\" data-linktype=\"relative-path\">XmlTextReader</a> (which inherits from <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>) as its source.  </p>\n<pre><code class=\"lang-cs\" name=\"DataWorks DataTable.ReadXmlSchemaReader#1\">    private static void DemonstrateReadWriteXMLSchemaWithReader()\n    {\n        DataTable table = CreateTestTable(&quot;XmlDemo&quot;);\n        PrintSchema(table, &quot;Original table&quot;);\n\n        // Write the schema to XML in a memory stream.\n        System.IO.MemoryStream xmlStream = \n            new System.IO.MemoryStream();\n        table.WriteXmlSchema(xmlStream);\n\n        // Rewind the memory stream.\n        xmlStream.Position = 0;\n\n        DataTable newTable = new DataTable();\n        System.Xml.XmlTextReader reader = \n            new System.Xml.XmlTextReader(xmlStream);\n        newTable.ReadXmlSchema(reader);\n\n        // Print out values in the table.\n        PrintSchema(newTable, &quot;New table&quot;);\n    }\n\n    private static DataTable CreateTestTable(string tableName)\n    {\n        // Create a test DataTable with two columns and a few rows.\n        DataTable table = new DataTable(tableName);\n        DataColumn column = new DataColumn(&quot;id&quot;, typeof(System.Int32));\n        column.AutoIncrement = true;\n        table.Columns.Add(column);\n\n        column = new DataColumn(&quot;item&quot;, typeof(System.String));\n        table.Columns.Add(column);\n\n        // Add ten rows.\n        DataRow row;\n        for (int i = 0; i &lt;= 9; i++)\n        {\n            row = table.NewRow();\n            row[&quot;item&quot;] = &quot;item &quot; + i;\n            table.Rows.Add(row);\n        }\n\n        table.AcceptChanges();\n        return table;\n    }\n\n    private static void PrintSchema(DataTable table, string label)\n    {\n        // Display the schema of the supplied DataTable:\n        Console.WriteLine(label);\n        foreach (DataColumn column in table.Columns)\n        {\n            Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}: {1}&quot;, column.ColumnName, \n                column.DataType.Name);\n        }\n        Console.WriteLine();\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"DataWorks DataTable.ReadXmlSchemaReader#1\">  Private Sub DemonstrateReadWriteXMLSchemaWithReader()\n    Dim table As DataTable = CreateTestTable(&quot;XmlDemo&quot;)\n    PrintSchema(table, &quot;Original table&quot;)\n\n    &#39; Write the schema to XML in a memory stream.\n    Dim xmlStream As New System.IO.MemoryStream()\n    table.WriteXmlSchema(xmlStream)\n\n    &#39; Rewind the memory stream.\n    xmlStream.Position = 0\n\n    Dim newTable As New DataTable\n    Dim reader As New System.Xml.XmlTextReader(xmlStream)\n    newTable.ReadXmlSchema(reader)\n\n    &#39; Print out values in the table.\n    PrintSchema(newTable, &quot;New Table&quot;)\n  End Sub\n\n  Private Function CreateTestTable(ByVal tableName As String) _\n        As DataTable\n    &#39; Create a test DataTable with two columns and a few rows.\n    Dim table As New DataTable(tableName)\n    Dim column As New DataColumn(&quot;id&quot;, GetType(System.Int32))\n    column.AutoIncrement = True\n    table.Columns.Add(column)\n\n    column = New DataColumn(&quot;item&quot;, GetType(System.String))\n    table.Columns.Add(column)\n\n    &#39; Add ten rows.\n    Dim row As DataRow\n    For i As Integer = 0 To 9\n      row = table.NewRow()\n      row(&quot;item&quot;) = &quot;item &quot; &amp; i\n      table.Rows.Add(row)\n    Next i\n\n    table.AcceptChanges()\n    Return table\n  End Function\n\n  Private Sub PrintSchema(ByVal table As DataTable, _\n        ByVal label As String)\n    &#39; Display the schema of the supplied DataTable:\n    Console.WriteLine(label)\n    For Each column As DataColumn In table.Columns\n      Console.WriteLine(&quot;{0}{1}: {2}&quot;, ControlChars.Tab, _\n        column.ColumnName, column.DataType.Name)\n    Next column\n  End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_ReadXmlSerializable_System_Xml_XmlReader_\">\r\n    \r\n            <a id=\"System_Data_DataTable_ReadXmlSerializable_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadXmlSerializable(XmlReader)</div>        \r\n          </div>\r\n    \r\n            <p>Reads from an XML stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void ReadXmlSerializable (System.Xml.XmlReader reader);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>reader</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_RejectChanges\">\r\n    \r\n            <a id=\"System_Data_DataTable_RejectChanges_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RejectChanges()</div>        \r\n          </div>\r\n    \r\n            <p>Rolls back all changes that have been made to the table since it was loaded, or the last time <span class=\"xref\">stem.Data.DataTable.AcceptChanges*</span> was called.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void RejectChanges ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When RejectChanges is called, any <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> objects that are still in edit-mode cancel their edits. New rows are removed. Rows with the <a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a> set to <code>Modified</code> or <code>Deleted</code> return back to their original state.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example makes several changes to a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>, but rejects the changes by invoking the RejectChanges method.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData DataTable.RejectChanges Example#1\">    private void ShowRejectChanges(DataTable table)\n    {\n        // Print the values of row 1, in the column named &quot;CompanyName.&quot;\n        Console.WriteLine(table.Rows[1][&quot;CompanyName&quot;]);\n\n        // Make Changes to the column named &quot;CompanyName.&quot;\n        table.Rows[1][&quot;CompanyName&quot;] = &quot;Taro&quot;;\n\n        // Reject the changes.\n        table.RejectChanges();\n\n        // Print the original values:\n        Console.WriteLine(table.Rows[1][&quot;CompanyName&quot;]);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData DataTable.RejectChanges Example#1\"> Private Sub ShowRejectChanges(table As DataTable)\n     &#39; Print the values of row 1, in the column named &quot;CompanyName.&quot;\n     Console.WriteLine(table.Rows(1)(&quot;CompanyName&quot;))\n\n     &#39; Make Changes to the column named &quot;CompanyName.&quot;\n     table.Rows(1)(&quot;CompanyName&quot;) = &quot;Taro&quot;\n\n     &#39; Reject the changes.\n     table.RejectChanges()\n\n     &#39; Print the original values:\n     Console.WriteLine(table.Rows(1)(&quot;CompanyName&quot;))\n End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_Reset\">\r\n    \r\n            <a id=\"System_Data_DataTable_Reset_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Reset()</div>        \r\n          </div>\r\n    \r\n            <p>Resets the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> to its original state. Reset removes all data, indexes, relations, and columns of the table. If a DataSet includes a DataTable, the table will still be part of the DataSet after the table is reset.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Reset ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_Select\">\r\n    \r\n            <a id=\"System_Data_DataTable_Select_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Select()</div>        \r\n          </div>\r\n    \r\n            <p>Gets an array of all <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> objects.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.DataRow[] Select ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a>[]</div>\r\n                  </div>\r\n                  <p>An array of <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> objects.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To ensure the proper sort order, specify sort criteria with <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_Select_\" data-linktype=\"relative-path\">Select</a> or <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_Select_\" data-linktype=\"relative-path\">Select</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example returns an array of <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> objects through the Select method.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData DataTable.Select Example#1\">    private void GetRows()\n    {\n        // Get the DataTable of a DataSet.\n        DataTable table = DataSet1.Tables[&quot;Suppliers&quot;];\n        DataRow[] rows = table.Select();\n\n        // Print the value one column of each DataRow.\n        for(int i = 0; i &lt; rows.Length ; i++)\n        {\n            Console.WriteLine(rows[i][&quot;CompanyName&quot;]);\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData DataTable.Select Example#1\">Private Sub GetRows()\n    &#39; Get the DataTable of a DataSet.\n    Dim table As DataTable = DataSet1.Tables(&quot;Suppliers&quot;)\n    Dim rows() As DataRow = table.Select()\n\n    Dim i As Integer\n    &#39; Print the value one column of each DataRow.\n    For i = 0 to rows.GetUpperBound(0)\n       Console.WriteLine(rows(i)(&quot;CompanyName&quot;))\n    Next i\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_Select_System_String_\">\r\n    \r\n            <a id=\"System_Data_DataTable_Select_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Select(String)</div>        \r\n          </div>\r\n    \r\n            <p>Gets an array of all <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> objects that match the filter criteria.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.DataRow[] Select (string filterExpression);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>filterExpression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The criteria to use to filter the rows. For examples on how to filter rows, see <a href=\"http://www.csharp-examples.net/dataview-rowfilter/\" data-linktype=\"external\">DataView RowFilter Syntax [C#]</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a>[]</div>\r\n                  </div>\r\n                  <p>An array of <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> objects.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To create the <code>filterExpression</code> argument, use the same rules that apply to the <a class=\"xref\" href=\"system.data.datacolumn\" data-linktype=\"relative-path\">DataColumn</a> class&#39;s <a class=\"xref\" href=\"system.data.datacolumn#System_Data_DataColumn_Expression_\" data-linktype=\"relative-path\">Expression</a> property value for creating filters.  </p>\n<p> To ensure the proper sort order, specify sort criteria with <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_Select_\" data-linktype=\"relative-path\">Select</a> or <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_Select_\" data-linktype=\"relative-path\">Select</a>.  </p>\n<p> If the column on the filter contains a null value, it will not be part of the result.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses a filter expression to return an array of <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> objects.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData DataTable.Select1 Example#1\">    private void GetRowsByFilter()\n    {\n        DataTable table = DataSet1.Tables[&quot;Orders&quot;];\n        // Presuming the DataTable has a column named Date.\n        string expression;\n        expression = &quot;Date &gt; #1/1/00#&quot;;\n        DataRow[] foundRows;\n\n        // Use the Select method to find all rows matching the filter.\n        foundRows = table.Select(expression);\n\n        // Print column 0 of each returned row.\n        for(int i = 0; i &lt; foundRows.Length; i ++)\n        {\n            Console.WriteLine(foundRows[i][0]);\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData DataTable.Select1 Example#1\">Private Sub GetRowsByFilter()\n    \n    Dim table As DataTable = DataSet1.Tables(&quot;Orders&quot;)\n\n    &#39; Presuming the DataTable has a column named Date.\n    Dim expression As String\n    expression = &quot;Date &gt; #1/1/00#&quot;\n    Dim foundRows() As DataRow\n\n    &#39; Use the Select method to find all rows matching the filter.\n    foundRows = table.Select(expression)\n\n    Dim i As Integer\n    &#39; Print column 0 of each returned row.\n    For i = 0 to foundRows.GetUpperBound(0)\n       Console.WriteLine(foundRows(i)(0))\n    Next i\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_Select_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Data_DataTable_Select_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Select(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Gets an array of all <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> objects that match the filter criteria, in the specified sort order.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.DataRow[] Select (string filterExpression, string sort);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>filterExpression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The criteria to use to filter the rows. For examples on how to filter rows, see <a href=\"http://www.csharp-examples.net/dataview-rowfilter/\" data-linktype=\"external\">DataView RowFilter Syntax [C#]</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>sort</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string specifying the column and sort direction.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a>[]</div>\r\n                  </div>\r\n                  <p>An array of <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> objects matching the filter expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To form the <code>filterExpression</code> argument, use the same rules for creating the <a class=\"xref\" href=\"system.data.datacolumn\" data-linktype=\"relative-path\">DataColumn</a> class&#39;s <a class=\"xref\" href=\"system.data.datacolumn#System_Data_DataColumn_Expression_\" data-linktype=\"relative-path\">Expression</a> property value. The <code>Sort</code> argument also uses the same rules for creating class&#39;s <a class=\"xref\" href=\"system.data.datacolumn#System_Data_DataColumn_Expression_\" data-linktype=\"relative-path\">Expression</a> strings.  </p>\n<p> If the column on the filter contains a null value, it will not be part of the result.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses a filter expression to return an array of <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> objects.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData DataTable.Select2 Example#1\">using System;\nusing System.Data;\n\npublic class A {  \n\n   public static void Main() {      \n      DataTable table = new DataTable(&quot;Orders&quot;);\n      table.Columns.Add(&quot;OrderID&quot;, typeof(Int32));\n      table.Columns.Add(&quot;OrderQuantity&quot;, typeof(Int32));\n      table.Columns.Add(&quot;CompanyName&quot;, typeof(string));      \n      table.Columns.Add(&quot;Date&quot;, typeof(DateTime));\n\n      DataRow newRow = table.NewRow();\n      newRow[&quot;OrderID&quot;] = 1;\n      newRow[&quot;OrderQuantity&quot;] = 3;\n      newRow[&quot;CompanyName&quot;] = &quot;NewCompanyName&quot;;\n      newRow[&quot;Date&quot;] = &quot;1979, 1, 31&quot;;\n\n      // Add the row to the rows collection.\n      table.Rows.Add(newRow);\n      \n      DataRow newRow2 = table.NewRow();\n      newRow2[&quot;OrderID&quot;] = 2;\n      newRow2[&quot;OrderQuantity&quot;] = 2;\n      newRow2[&quot;CompanyName&quot;] = &quot;NewCompanyName1&quot;;\n      table.Rows.Add(newRow2);\n\n      DataRow newRow3 = table.NewRow();\n      newRow3[&quot;OrderID&quot;] = 3;\n      newRow3[&quot;OrderQuantity&quot;] = 2;\n      newRow3[&quot;CompanyName&quot;] = &quot;NewCompanyName2&quot;;\n      table.Rows.Add(newRow3);\n\n      // Presuming the DataTable has a column named Date.\n      string expression = &quot;Date = &#39;1/31/1979&#39; or OrderID = 2&quot;;\n      // string expression = &quot;OrderQuantity = 2 and OrderID = 2&quot;;\n\n      // Sort descending by column named CompanyName.\n      string sortOrder = &quot;CompanyName ASC&quot;;\n      DataRow[] foundRows;\n\n      // Use the Select method to find all rows matching the filter.\n      foundRows = table.Select(expression, sortOrder);\n\n      // Print column 0 of each returned row.\n      for (int i = 0; i &lt; foundRows.Length; i++)\n         Console.WriteLine(foundRows[i][2]);\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData DataTable.Select2 Example#1\">Imports System.Data\n\nPublic Class A\n\n   Public Shared Sub Main()\n      Dim table As New DataTable(&quot;Orders&quot;)\n      table.Columns.Add(&quot;OrderID&quot;, GetType(Int32))\n      table.Columns.Add(&quot;OrderQuantity&quot;, GetType(Int32))\n      table.Columns.Add(&quot;CompanyName&quot;, GetType(String))\n      table.Columns.Add(&quot;Date&quot;, GetType(DateTime))\n\n      Dim newRow As DataRow = table.NewRow()\n      newRow(&quot;OrderID&quot;) = 1\n      newRow(&quot;OrderQuantity&quot;) = 3\n      newRow(&quot;CompanyName&quot;) = &quot;NewCompanyName&quot;\n      newRow(&quot;Date&quot;) = &quot;1979, 1, 31&quot;\n\n      &#39; Add the row to the rows collection.\n      table.Rows.Add(newRow)\n\n      Dim newRow2 As DataRow = table.NewRow()\n      newRow2(&quot;OrderID&quot;) = 2\n      newRow2(&quot;OrderQuantity&quot;) = 2\n      newRow2(&quot;CompanyName&quot;) = &quot;NewCompanyName1&quot;\n      table.Rows.Add(newRow2)\n\n      Dim newRow3 As DataRow = table.NewRow()\n      newRow3(&quot;OrderID&quot;) = 3\n      newRow3(&quot;OrderQuantity&quot;) = 2\n      newRow3(&quot;CompanyName&quot;) = &quot;NewCompanyName2&quot;\n      table.Rows.Add(newRow3)\n\n      &#39; Presuming the DataTable has a column named Date.\n      Dim expression As String = &quot;Date = &#39;1/31/1979&#39; or OrderID = 2&quot;\n      &#39; Dim expression As String = &quot;OrderQuantity = 2 and OrderID = 2&quot;\n\n      &#39; Sort descending by column named CompanyName.\n      Dim sortOrder As String = &quot;CompanyName ASC&quot;\n      Dim foundRows As DataRow()\n\n      &#39; Use the Select method to find all rows matching the filter.\n      foundRows = table.[Select](expression, sortOrder)\n\n      &#39; Print column 0 of each returned row.\n      For i As Integer = 0 To foundRows.Length - 1\n         Console.WriteLine(foundRows(i)(2))\n      Next\n   End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_Select_System_String_System_String_System_Data_DataViewRowState_\">\r\n    \r\n            <a id=\"System_Data_DataTable_Select_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Select(String,String,DataViewRowState)</div>        \r\n          </div>\r\n    \r\n            <p>Gets an array of all <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> objects that match the filter in the order of the sort that match the specified state.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.DataRow[] Select (string filterExpression, string sort, System.Data.DataViewRowState recordStates);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>filterExpression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The criteria to use to filter the rows. For examples on how to filter rows, see <a href=\"http://www.csharp-examples.net/dataview-rowfilter/\" data-linktype=\"external\">DataView RowFilter Syntax [C#]</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>sort</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string specifying the column and sort direction.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>recordStates</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.dataviewrowstate\" data-linktype=\"relative-path\">DataViewRowState</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.data.dataviewrowstate\" data-linktype=\"relative-path\">DataViewRowState</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a>[]</div>\r\n                  </div>\r\n                  <p>An array of <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> objects.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To form the <code>filterExpression</code> argument, use the same rules for creating the <a class=\"xref\" href=\"system.data.datacolumn\" data-linktype=\"relative-path\">DataColumn</a> class&#39;s <a class=\"xref\" href=\"system.data.datacolumn#System_Data_DataColumn_Expression_\" data-linktype=\"relative-path\">Expression</a> property value. The <code>Sort</code> argument also uses the same rules for creating class&#39;s <a class=\"xref\" href=\"system.data.datacolumn#System_Data_DataColumn_Expression_\" data-linktype=\"relative-path\">Expression</a> strings.  </p>\n<p> If the column on the filter contains a null value, it will not be part of the result.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses a filter expression and record state to return an array of <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> objects.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData DataTable.Select3 Example#1\">    private static void GetRowsByFilter()\n    {\n        DataTable customerTable = new DataTable(&quot;Customers&quot;);\n        // Add columns\n        customerTable.Columns.Add(&quot;id&quot;, typeof(int));\n        customerTable.Columns.Add(&quot;name&quot;, typeof(string));\n\n        // Set PrimaryKey\n        customerTable.Columns[ &quot;id&quot; ].Unique = true;\n        customerTable.PrimaryKey = new DataColumn[] \n            { customerTable.Columns[&quot;id&quot;] };\n\n        // Add ten rows\n        for(int id=1; id&lt;=10; id++)\n        {\n            customerTable.Rows.Add(\n                new object[] { id, string.Format(&quot;customer{0}&quot;, id) });\n        }\n        customerTable.AcceptChanges();\n\n        // Add another ten rows\n        for(int id=11; id&lt;=20; id++)\n        {\n            customerTable.Rows.Add(\n                new object[] { id, string.Format(&quot;customer{0}&quot;, id) });\n        }\n\n        string expression;\n        string sortOrder;\n\t\n        expression = &quot;id &gt; 5&quot;;\n        // Sort descending by column named CompanyName.\n        sortOrder = &quot;name DESC&quot;;\n        // Use the Select method to find all rows matching the filter.\n        DataRow[] foundRows = \n            customerTable.Select(expression, sortOrder, \n            DataViewRowState.Added);\n\t\n        PrintRows(foundRows, &quot;filtered rows&quot;);\n\n        foundRows = customerTable.Select();\n        PrintRows(foundRows, &quot;all rows&quot;);\n    }\n\n    private static void PrintRows(DataRow[] rows, string label)\n    {\n        Console.WriteLine(&quot;<br>{0}&quot;, label);\n        if(rows.Length &lt;= 0)\n        {\n            Console.WriteLine(&quot;no rows found&quot;);\n            return;\n        }\n        foreach(DataRow row in rows)\n        {\n            foreach(DataColumn column in row.Table.Columns)\n            {\n                Console.Write(&quot;&nbsp;&nbsp;&nbsp;&nbsp;able {0}&quot;, row[column]);\n            }\n            Console.WriteLine();\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData DataTable.Select3 Example#1\">    Private Sub GetRowsByFilter()\n\n        Dim customerTable As DataTable = New DataTable(&quot;Customers&quot;)\n\n        &#39; Add columns\n        customerTable.Columns.Add(&quot;id&quot;, GetType(Integer))\n        customerTable.Columns.Add(&quot;name&quot;, GetType(String))\n\n        &#39; Set PrimaryKey\n        customerTable.Columns(&quot;id&quot;).Unique = True\n        customerTable.PrimaryKey = New DataColumn() _\n            {customerTable.Columns(&quot;id&quot;)}\n\n        &#39; add ten rows\n        Dim id As Integer\n        For id = 1 To 10\n            customerTable.Rows.Add( _\n            New Object() {id, String.Format(&quot;customer{0}&quot;, id)})\n        Next id\n        customerTable.AcceptChanges()\n\n        &#39; add another ten rows\n        For id = 11 To 20\n            customerTable.Rows.Add( _\n            New Object() {id, String.Format(&quot;customer{0}&quot;, id)})\n        Next id\n\n        Dim expression As String\n        Dim sortOrder As String\n\n        expression = &quot;id &gt; 5&quot;\n        &#39; Sort descending by CompanyName column.\n        sortOrder = &quot;name DESC&quot;\n\n        &#39; Use the Select method to find all rows matching the filter.\n        Dim foundRows As DataRow() = _\n            customerTable.Select(expression, sortOrder, _\n            DataViewRowState.Added)\n\n        PrintRows(foundRows, &quot;filtered rows&quot;)\n\n        foundRows = customerTable.Select()\n        PrintRows(foundRows, &quot;all rows&quot;)\n    End Sub\n\n    Private Sub PrintRows(ByVal rows() As DataRow, ByVal label As String)\n        Console.WriteLine(&quot;<br>{0}&quot;, label)\n        If rows.Length &lt;= 0 Then\n            Console.WriteLine(&quot;no rows found&quot;)\n            Exit Sub\n        End If\n\n        Dim row As DataRow\n        Dim column As DataColumn\n        For Each row In rows\n            For Each column In row.Table.Columns\n                Console.Write(&quot;&nbsp;&nbsp;&nbsp;&nbsp;able {0}&quot;, row(column))\n            Next column\n            Console.WriteLine()\n        Next row\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_ToString\">\r\n    \r\n            <a id=\"System_Data_DataTable_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <span class=\"xref\">stem.Data.DataTable.TableName*</span> and <span class=\"xref\">stem.Data.DataTable.DisplayExpression*</span>, if there is one as a concatenated string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string consisting of the <span class=\"xref\">stem.Data.DataTable.TableName*</span> and the <span class=\"xref\">stem.Data.DataTable.DisplayExpression*</span> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Gets the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_TableName_\" data-linktype=\"relative-path\">TableName</a> and <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_DisplayExpression_\" data-linktype=\"relative-path\">DisplayExpression</a> for the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example returns the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_TableName_\" data-linktype=\"relative-path\">TableName</a> and <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_DisplayExpression_\" data-linktype=\"relative-path\">DisplayExpression</a> using the ToString method.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData DataTable.ToString Example#1\">    private void PrintToString(DataSet dataSet)\n    {\n        foreach(DataTable table in dataSet.Tables)\n        {\n            Console.WriteLine(table.ToString());\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData DataTable.ToString Example#1\">Private Sub PrintToString(dataSet As DataSet)\n    Dim table As DataTable\n    For Each table In dataSet.Tables\n       Console.WriteLine(table.ToString())\n    Next\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_WriteXml_System_IO_Stream_\">\r\n    \r\n            <a id=\"System_Data_DataTable_WriteXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteXml(Stream)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the current contents of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> as XML using the specified <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void WriteXml (System.IO.Stream stream);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>stream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The stream to which the data will be written.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> method provides a way to write either data only, or both data and schema from a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> into an XML document, whereas the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> method writes only the schema. To write both data and schema, use one of the overloads that includes the <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a> parameter, and set its value to <code>WriteSchema</code>.  </p>\n<p> Note that the same is true for the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> and <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_ReadXmlSchema_\" data-linktype=\"relative-path\">ReadXmlSchema</a> methods, respectively. To read XML data, or both schema and data into the <code>DataTable</code>, use the <code>ReadXml</code> method. To read just the schema, use the <code>ReadXmlSchema</code> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> An <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> will be thrown if a column type in the <code>DataRow</code> being read from or written to implements <a class=\"xref\" href=\"system.dynamic.idynamicmetaobjectprovider\" data-linktype=\"relative-path\">IDynamicMetaObjectProvider</a> and does not implement <a class=\"xref\" href=\"system.xml.serialization.ixmlserializable\" data-linktype=\"relative-path\">IXmlSerializable</a>.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_WriteXml_System_IO_TextWriter_\">\r\n    \r\n            <a id=\"System_Data_DataTable_WriteXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteXml(TextWriter)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the current contents of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> as XML using the specified <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void WriteXml (System.IO.TextWriter writer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>writer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> with which to write the content.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> method provides a way to write either data only, or both data and schema from a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> into an XML document, whereas the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> method writes only the schema. To write both data and schema, use one of the overloads that includes the <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a> parameter, and set its value to <code>WriteSchema</code>.  </p>\n<p> Note that the same is true for the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> and <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_ReadXmlSchema_\" data-linktype=\"relative-path\">ReadXmlSchema</a> methods, respectively. To read XML data, or both schema and data into the <code>DataTable</code>, use the <code>ReadXml</code> method. To read just the schema, use the <code>ReadXmlSchema</code> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> An <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> will be thrown if a column type in the <code>DataRow</code> being read from or written to implements <a class=\"xref\" href=\"system.dynamic.idynamicmetaobjectprovider\" data-linktype=\"relative-path\">IDynamicMetaObjectProvider</a> and does not implement <a class=\"xref\" href=\"system.xml.serialization.ixmlserializable\" data-linktype=\"relative-path\">IXmlSerializable</a>.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_WriteXml_System_String_\">\r\n    \r\n            <a id=\"System_Data_DataTable_WriteXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteXml(String)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the current contents of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> as XML using the specified file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void WriteXml (string fileName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file to which to write the XML data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> method provides a way to write either data only, or both data and schema from a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> into an XML document, whereas the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> method writes only the schema. To write both data and schema, use one of the overloads that includes the <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a> parameter, and set its value to <code>WriteSchema</code>.  </p>\n<p> Note that the same is true for the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> and <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_ReadXmlSchema_\" data-linktype=\"relative-path\">ReadXmlSchema</a> methods, respectively. To read XML data, or both schema and data into the <code>DataTable</code>, use the <code>ReadXml</code> method. To read just the schema, use the <code>ReadXmlSchema</code> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> An <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> will be thrown if a column type in the <code>DataRow</code> being read from or written to implements <a class=\"xref\" href=\"system.dynamic.idynamicmetaobjectprovider\" data-linktype=\"relative-path\">IDynamicMetaObjectProvider</a> and does not implement <a class=\"xref\" href=\"system.xml.serialization.ixmlserializable\" data-linktype=\"relative-path\">IXmlSerializable</a>.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_WriteXml_System_Xml_XmlWriter_\">\r\n    \r\n            <a id=\"System_Data_DataTable_WriteXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteXml(XmlWriter)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the current contents of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> as XML using the specified <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void WriteXml (System.Xml.XmlWriter writer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>writer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> with which to write the contents.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> method provides a way to write either data only, or both data and schema from a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> into an XML document, whereas the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> method writes only the schema. To write both data and schema, use one of the overloads that include the <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a> parameter, and set its value to <code>WriteSchema</code>.  </p>\n<p> Note that the same is true for the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> and <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_ReadXmlSchema_\" data-linktype=\"relative-path\">ReadXmlSchema</a> methods, respectively. To read XML data, or both schema and data into the <code>DataTable</code>, use the <code>ReadXml</code> method. To read just the schema, use the <code>ReadXmlSchema</code> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> An <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> will be thrown if a column type in the <code>DataRow</code> being read from or written to implements <a class=\"xref\" href=\"system.dynamic.idynamicmetaobjectprovider\" data-linktype=\"relative-path\">IDynamicMetaObjectProvider</a> and does not implement <a class=\"xref\" href=\"system.xml.serialization.ixmlserializable\" data-linktype=\"relative-path\">IXmlSerializable</a>.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_WriteXml_System_IO_Stream_System_Boolean_\">\r\n    \r\n            <a id=\"System_Data_DataTable_WriteXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteXml(Stream,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the current contents of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> as XML using the specified <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>. To save the data for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <code>true</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void WriteXml (System.IO.Stream stream, bool writeHierarchy);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>stream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The stream to which the data will be written.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>writeHierarchy</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>If <code>true</code>, write the contents of the current table and all its descendants. If <code>false</code> (the default value), write the data for the current table only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> method to write the schema for a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> to an XML document. The schema includes table, relation, and constraint definitions.  </p>\n<p> The XML schema is written using the XSD standard.  </p>\n<p> To write the data to an XML document, use the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> method.  </p>\n<p> Normally the <code>WriteXml</code> method writes the data only for the current table. To write the data for the current table and all of its descendant, related tables, call the method with the <code>writeHierarchy</code> parameter set to <code>true</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> An <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> will be thrown if a column type in the <code>DataRow</code> being read from or written to implements <a class=\"xref\" href=\"system.dynamic.idynamicmetaobjectprovider\" data-linktype=\"relative-path\">IDynamicMetaObjectProvider</a> and does not implement <a class=\"xref\" href=\"system.xml.serialization.ixmlserializable\" data-linktype=\"relative-path\">IXmlSerializable</a>.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_WriteXml_System_IO_Stream_System_Data_XmlWriteMode_\">\r\n    \r\n            <a id=\"System_Data_DataTable_WriteXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteXml(Stream,XmlWriteMode)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the current data, and optionally the schema, for the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> to the specified file using the specified <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a>. To write the schema, set the value for the <code>mode</code> parameter to <code>WriteSchema</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void WriteXml (System.IO.Stream stream, System.Data.XmlWriteMode mode);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>stream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The stream to which the data will be written.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>mode</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> method provides a way to write either data only, or both data and schema from a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> into an XML document, whereas the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> method writes only the schema. To write both data and schema, use one of the overloads that includes the <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a> parameter, and set its value to <code>WriteSchema</code>.  </p>\n<p> Note that the same is true for the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> and <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_ReadXmlSchema_\" data-linktype=\"relative-path\">ReadXmlSchema</a> methods, respectively. To read XML data, or both schema and data into the <code>DataTable</code>, use the <code>ReadXml</code> method. To read just the schema, use the <code>ReadXmlSchema</code> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> An <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> will be thrown if a column type in the <code>DataRow</code> being read from or written to implements <a class=\"xref\" href=\"system.dynamic.idynamicmetaobjectprovider\" data-linktype=\"relative-path\">IDynamicMetaObjectProvider</a> and does not implement <a class=\"xref\" href=\"system.xml.serialization.ixmlserializable\" data-linktype=\"relative-path\">IXmlSerializable</a>.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_WriteXml_System_IO_TextWriter_System_Boolean_\">\r\n    \r\n            <a id=\"System_Data_DataTable_WriteXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteXml(TextWriter,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the current contents of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> as XML using the specified <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a>. To save the data for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <code>true</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void WriteXml (System.IO.TextWriter writer, bool writeHierarchy);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>writer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> with which to write the content.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>writeHierarchy</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>If <code>true</code>, write the contents of the current table and all its descendants. If <code>false</code> (the default value), write the data for the current table only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> method provides a way to write either data only, or both data and schema from a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> into an XML document, whereas the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> method writes only the schema. To write both data and schema, use one of the overloads that includes the <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a> parameter, and set its value to <code>WriteSchema</code>.  </p>\n<p> Normally the <code>WriteXml</code> method writes the data only for the current table. To write the data for the current table and all its descendant, related tables, call the method with the <code>writeHierarchy</code> parameter set to <code>true</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> An <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> will be thrown if a column type in the <code>DataRow</code> being read from or written to implements <a class=\"xref\" href=\"system.dynamic.idynamicmetaobjectprovider\" data-linktype=\"relative-path\">IDynamicMetaObjectProvider</a> and does not implement <a class=\"xref\" href=\"system.xml.serialization.ixmlserializable\" data-linktype=\"relative-path\">IXmlSerializable</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following console application creates two <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> instances, adds each to a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>, creates a <a class=\"xref\" href=\"system.data.datarelation\" data-linktype=\"relative-path\">DataRelation</a> relating the two tables, and then uses the WriteXml method to write the data contained within the parent table to a <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a>. The example demonstrates the behavior when setting the <code>writeHierarchy</code> parameter to <code>true</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"DataWorks DataTable.WriteXml#1\">    static void Main()\n    {\n        DataSet ds = new DataSet();\n        DataTable customerTable = GetCustomers();\n        DataTable orderTable = GetOrders();\n\n        ds.Tables.Add(customerTable);\n        ds.Tables.Add(orderTable);\n        ds.Relations.Add(&quot;CustomerOrder&quot;,\n            new DataColumn[] { customerTable.Columns[0] },\n            new DataColumn[] { orderTable.Columns[1] }, true);\n\n        System.IO.StringWriter writer = new System.IO.StringWriter();\n        customerTable.WriteXml(writer, true);\n        PrintOutput(writer, &quot;Customer table, with hierarchy&quot;);\n\n        Console.WriteLine(&quot;Press any key to continue.&quot;);\n        Console.ReadKey();\n    }\n\n    private static DataTable GetCustomers()\n    {\n        // Create sample Customers table, in order\n        // to demonstrate the behavior of the DataTableReader.\n        DataTable table = new DataTable();\n\n        // Create two columns, ID and Name.\n        DataColumn idColumn = table.Columns.Add(&quot;ID&quot;, typeof(System.Int32));\n        table.Columns.Add(&quot;Name&quot;, typeof(System.String));\n\n        // Set the ID column as the primary key column.\n        table.PrimaryKey = new DataColumn[] { idColumn };\n\n        table.Rows.Add(new object[] { 1, &quot;Mary&quot; });\n        table.Rows.Add(new object[] { 2, &quot;Andy&quot; });\n        table.Rows.Add(new object[] { 3, &quot;Peter&quot; });\n        table.Rows.Add(new object[] { 4, &quot;Russ&quot; });\n        table.AcceptChanges();\n        return table;\n    }\n\n    private static DataTable GetOrders()\n    {\n        // Create sample Customers table, in order\n        // to demonstrate the behavior of the DataTableReader.\n        DataTable table = new DataTable();\n\n        // Create three columns; OrderID, CustomerID, and OrderDate.\n        table.Columns.Add(new DataColumn(&quot;OrderID&quot;, typeof(System.Int32)));\n        table.Columns.Add(new DataColumn(&quot;CustomerID&quot;, typeof(System.Int32)));\n        table.Columns.Add(new DataColumn(&quot;OrderDate&quot;, typeof(System.DateTime)));\n\n        // Set the OrderID column as the primary key column.\n        table.PrimaryKey = new DataColumn[] { table.Columns[0] };\n\n        table.Rows.Add(new object[] { 1, 1, &quot;12/2/2003&quot; });\n        table.Rows.Add(new object[] { 2, 1, &quot;1/3/2004&quot; });\n        table.Rows.Add(new object[] { 3, 2, &quot;11/13/2004&quot; });\n        table.Rows.Add(new object[] { 4, 3, &quot;5/16/2004&quot; });\n        table.Rows.Add(new object[] { 5, 3, &quot;5/22/2004&quot; });\n        table.Rows.Add(new object[] { 6, 4, &quot;6/15/2004&quot; });\n        table.AcceptChanges();\n        return table;\n    }\n\n    private static void PrintOutput(System.IO.TextWriter stream, \n        string caption)\n    {\n        Console.WriteLine(&quot;==============================&quot;);\n        Console.WriteLine(caption);\n        Console.WriteLine(&quot;==============================&quot;);\n        Console.WriteLine(stream.ToString());\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"DataWorks DataTable.WriteXml#1\">  Sub Main()\n    Dim ds As New DataSet\n    Dim customerTable As DataTable = GetCustomers()\n    Dim orderTable As DataTable = GetOrders()\n\n    ds.Tables.Add(customerTable)\n    ds.Tables.Add(orderTable)\n    ds.Relations.Add(&quot;CustomerOrder&quot;, _\n     New DataColumn() {customerTable.Columns(0)}, _\n     New DataColumn() {orderTable.Columns(1)}, True)\n\n    Dim writer As New System.IO.StringWriter\n    customerTable.WriteXml(writer, True)\n    PrintOutput(writer, &quot;Customer table, with hierarchy&quot;)\n\n    Console.WriteLine(&quot;Press any key to continue.&quot;)\n    Console.ReadKey()\n  End Sub\n\n  Private Function GetOrders() As DataTable\n    &#39; Create sample Customers table, in order\n    &#39; to demonstrate the behavior of the DataTableReader.\n    Dim table As New DataTable\n\n    &#39; Create three columns, OrderID, CustomerID, and OrderDate.\n    table.Columns.Add(New DataColumn(&quot;OrderID&quot;, GetType(System.Int32)))\n    table.Columns.Add(New DataColumn(&quot;CustomerID&quot;, GetType(System.Int32)))\n    table.Columns.Add(New DataColumn(&quot;OrderDate&quot;, GetType(System.DateTime)))\n\n    &#39; Set the OrderID column as the primary key column.\n    table.PrimaryKey = New DataColumn() {table.Columns(0)}\n\n    table.Rows.Add(New Object() {1, 1, #12/2/2003#})\n    table.Rows.Add(New Object() {2, 1, #1/3/2004#})\n    table.Rows.Add(New Object() {3, 2, #11/13/2004#})\n    table.Rows.Add(New Object() {4, 3, #5/16/2004#})\n    table.Rows.Add(New Object() {5, 3, #5/22/2004#})\n    table.Rows.Add(New Object() {6, 4, #6/15/2004#})\n    table.AcceptChanges()\n    Return table\n  End Function\n\n  Private Function GetCustomers() As DataTable\n    &#39; Create sample Customers table, in order\n    &#39; to demonstrate the behavior of the DataTableReader.\n    Dim table As New DataTable\n\n    &#39; Create two columns, ID and Name.\n    Dim idColumn As DataColumn = table.Columns.Add(&quot;ID&quot;, _\n        GetType(System.Int32))\n    table.Columns.Add(&quot;Name&quot;, GetType(System.String))\n\n    &#39; Set the ID column as the primary key column.\n    table.PrimaryKey = New DataColumn() {idColumn}\n\n    table.Rows.Add(New Object() {1, &quot;Mary&quot;})\n    table.Rows.Add(New Object() {2, &quot;Andy&quot;})\n    table.Rows.Add(New Object() {3, &quot;Peter&quot;})\n    table.Rows.Add(New Object() {4, &quot;Russ&quot;})\n    table.AcceptChanges()\n    Return table\n  End Function\n\n  Private Sub PrintOutput( _\n     ByVal stream As System.IO.TextWriter, ByVal caption As String)\n\n    Console.WriteLine(&quot;==============================&quot;)\n    Console.WriteLine(caption)\n    Console.WriteLine(&quot;==============================&quot;)\n    Console.WriteLine(stream.ToString())\n  End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_WriteXml_System_IO_TextWriter_System_Data_XmlWriteMode_\">\r\n    \r\n            <a id=\"System_Data_DataTable_WriteXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteXml(TextWriter,XmlWriteMode)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the current data, and optionally the schema, for the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> using the specified <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> and <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a>. To write the schema, set the value for the <code>mode</code> parameter to <code>WriteSchema</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void WriteXml (System.IO.TextWriter writer, System.Data.XmlWriteMode mode);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>writer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> used to write the document.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>mode</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> method provides a way to write either data only, or both data and schema from a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> into an XML document, whereas the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> method writes only the schema. To write both data and schema, use one of the overloads that includes the <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a> parameter, and set its value to <code>WriteSchema</code>.  </p>\n<p> Note that the same is true for the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> and <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_ReadXmlSchema_\" data-linktype=\"relative-path\">ReadXmlSchema</a> methods, respectively. To read XML data, or both schema and data into the <code>DataTable</code>, use the <code>ReadXml</code> method. To read just the schema, use the <code>ReadXmlSchema</code> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> An <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> will be thrown if a column type in the <code>DataRow</code> being read from or written to implements <a class=\"xref\" href=\"system.dynamic.idynamicmetaobjectprovider\" data-linktype=\"relative-path\">IDynamicMetaObjectProvider</a> and does not implement <a class=\"xref\" href=\"system.xml.serialization.ixmlserializable\" data-linktype=\"relative-path\">IXmlSerializable</a>.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_WriteXml_System_String_System_Boolean_\">\r\n    \r\n            <a id=\"System_Data_DataTable_WriteXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteXml(String,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the current contents of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> as XML using the specified file. To save the data for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <code>true</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void WriteXml (string fileName, bool writeHierarchy);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file to which to write the XML data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>writeHierarchy</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>If <code>true</code>, write the contents of the current table and all its descendants. If <code>false</code> (the default value), write the data for the current table only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> method provides a way to write either data only, or both data and schema from a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> into an XML document, whereas the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> method writes only the schema. To write both data and schema, use one of the overloads that includes the <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a> parameter, and set its value to <code>WriteSchema</code>.  </p>\n<p> Note that the same is true for the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> and <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_ReadXmlSchema_\" data-linktype=\"relative-path\">ReadXmlSchema</a> methods, respectively. To read XML data, or both schema and data into the <code>DataTable</code>, use the <code>ReadXml</code> method. To read just the schema, use the <code>ReadXmlSchema</code> method.  </p>\n<p> Normally the <code>WriteXml</code> method writes the data only for the current table. To write the data for the current table and all of its descendant, related tables, call the method with the <code>writeHierarchy</code> parameter set to <code>true</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> An <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> will be thrown if a column type in the <code>DataRow</code> being read from or written to implements <a class=\"xref\" href=\"system.dynamic.idynamicmetaobjectprovider\" data-linktype=\"relative-path\">IDynamicMetaObjectProvider</a> and does not implement <a class=\"xref\" href=\"system.xml.serialization.ixmlserializable\" data-linktype=\"relative-path\">IXmlSerializable</a>.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_WriteXml_System_String_System_Data_XmlWriteMode_\">\r\n    \r\n            <a id=\"System_Data_DataTable_WriteXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteXml(String,XmlWriteMode)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the current data, and optionally the schema, for the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> using the specified file and <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a>. To write the schema, set the value for the <code>mode</code> parameter to <code>WriteSchema</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void WriteXml (string fileName, System.Data.XmlWriteMode mode);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the file to which the data will be written.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>mode</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> method provides a way to write either data only, or both data and schema from a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> into an XML document, whereas the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> method writes only the schema. To write both data and schema, use one of the overloads that include the <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a> parameter, and set its value to <code>WriteSchema</code>.  </p>\n<p> Note that the same is true for the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> and <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_ReadXmlSchema_\" data-linktype=\"relative-path\">ReadXmlSchema</a> methods, respectively. To read XML data, or both schema and data into the <code>DataTable</code>, use the <code>ReadXml</code> method. To read just the schema, use the <code>ReadXmlSchema</code> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> An <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> will be thrown if a column type in the <code>DataRow</code> being read from or written to implements <a class=\"xref\" href=\"system.dynamic.idynamicmetaobjectprovider\" data-linktype=\"relative-path\">IDynamicMetaObjectProvider</a> and does not implement <a class=\"xref\" href=\"system.xml.serialization.ixmlserializable\" data-linktype=\"relative-path\">IXmlSerializable</a>.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_WriteXml_System_Xml_XmlWriter_System_Boolean_\">\r\n    \r\n            <a id=\"System_Data_DataTable_WriteXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteXml(XmlWriter,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the current contents of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> as XML using the specified <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void WriteXml (System.Xml.XmlWriter writer, bool writeHierarchy);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>writer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> with which to write the contents.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>writeHierarchy</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>If <code>true</code>, write the contents of the current table and all its descendants. If <code>false</code> (the default value), write the data for the current table only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> method provides a way to write either data only, or both data and schema from a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> into an XML document, whereas the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> method writes only the schema. To write both data and schema, use one of the overloads that include the <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a> parameter, and set its value to <code>WriteSchema</code>.  </p>\n<p> Note that the same is true for the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> and <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_ReadXmlSchema_\" data-linktype=\"relative-path\">ReadXmlSchema</a> methods, respectively. To read XML data, or both schema and data into the <code>DataTable</code>, use the <code>ReadXml</code> method. To read just the schema, use the <code>ReadXmlSchema</code> method.  </p>\n<p> Normally the <code>WriteXml</code> method writes the data only for the current table. To write the data for the current table and its entire descendant, related tables, call the method with the <code>writeHierarchy</code> parameter set to <code>true</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> An <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> will be thrown if a column type in the <code>DataRow</code> being read from or written to implements <a class=\"xref\" href=\"system.dynamic.idynamicmetaobjectprovider\" data-linktype=\"relative-path\">IDynamicMetaObjectProvider</a> and does not implement <a class=\"xref\" href=\"system.xml.serialization.ixmlserializable\" data-linktype=\"relative-path\">IXmlSerializable</a>.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_WriteXml_System_Xml_XmlWriter_System_Data_XmlWriteMode_\">\r\n    \r\n            <a id=\"System_Data_DataTable_WriteXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteXml(XmlWriter,XmlWriteMode)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the current data, and optionally the schema, for the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> using the specified <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> and <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a>. To write the schema, set the value for the <code>mode</code> parameter to <code>WriteSchema</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void WriteXml (System.Xml.XmlWriter writer, System.Data.XmlWriteMode mode);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>writer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> used to write the document.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>mode</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> method provides a way to write either data only, or both data and schema from a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> into an XML document, whereas the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> method writes only the schema. To write both data and schema, use one of the overloads that include the <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a> parameter, and set its value to <code>WriteSchema</code>.  </p>\n<p> Note that the same is true for the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> and <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_ReadXmlSchema_\" data-linktype=\"relative-path\">ReadXmlSchema</a> methods, respectively. To read XML data, or both schema and data into the <code>DataTable</code>, use the <code>ReadXml</code> method. To read just the schema, use the <code>ReadXmlSchema</code> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> An <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> will be thrown if a column type in the <code>DataRow</code> being read from or written to implements <a class=\"xref\" href=\"system.dynamic.idynamicmetaobjectprovider\" data-linktype=\"relative-path\">IDynamicMetaObjectProvider</a> and does not implement <a class=\"xref\" href=\"system.xml.serialization.ixmlserializable\" data-linktype=\"relative-path\">IXmlSerializable</a>.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_WriteXml_System_IO_Stream_System_Data_XmlWriteMode_System_Boolean_\">\r\n    \r\n            <a id=\"System_Data_DataTable_WriteXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteXml(Stream,XmlWriteMode,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the current data, and optionally the schema, for the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> to the specified file using the specified <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a>. To write the schema, set the value for the <code>mode</code> parameter to <code>WriteSchema</code>. To save the data for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <code>true</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void WriteXml (System.IO.Stream stream, System.Data.XmlWriteMode mode, bool writeHierarchy);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>stream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The stream to which the data will be written.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>mode</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a> values.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>writeHierarchy</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>If <code>true</code>, write the contents of the current table and all its descendants. If <code>false</code> (the default value), write the data for the current table only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> method provides a way to write either data only, or both data and schema from a <code>DataTable</code> into an XML document, whereas the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> method writes only the schema. To write both data and schema, use one of the overloads that includes the <code>XmlWriteMode</code> parameter, and set its value to <code>WriteSchema</code>.  </p>\n<p> Note that the same is true for the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> and <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_ReadXmlSchema_\" data-linktype=\"relative-path\">ReadXmlSchema</a> methods, respectively. To read XML data, or both schema and data into the <code>DataTable</code>, use the <code>ReadXml</code> method. To read just the schema, use the <code>ReadXmlSchema</code> method.  </p>\n<p> Normally, the <code>WriteXml</code> method saves data only for the current table. The <code>WriteXml</code> method provides a way to write either data only, or both data and schema from a <code>DataTable</code> into an XML document, whereas the <code>WriteXmlSchema</code> method writes only the schema. To write both data and schema, use one of the overloads that includes the <code>XmlWriteMode</code> parameter, and set its value to <code>WriteSchema</code>.  </p>\n<p> Note that the same is true for the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> and <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_ReadXmlSchema_\" data-linktype=\"relative-path\">ReadXmlSchema</a> methods, respectively. To read XML data, or both schema and data into the <code>DataTable</code>, use the <code>ReadXml</code> method. To read just the schema, use the <code>ReadXmlSchema</code> method.  </p>\n<p> Normally the <code>WriteXml</code> method writes the data only for the current table. To write the data for the current table and all of its descendant, related tables, call the method with the <code>writeHierarchy</code> parameter set to <code>true</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> An <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> will be thrown if a column type in the <code>DataRow</code> being read from or written to implements <a class=\"xref\" href=\"system.dynamic.idynamicmetaobjectprovider\" data-linktype=\"relative-path\">IDynamicMetaObjectProvider</a> and does not implement <a class=\"xref\" href=\"system.xml.serialization.ixmlserializable\" data-linktype=\"relative-path\">IXmlSerializable</a>.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_WriteXml_System_IO_TextWriter_System_Data_XmlWriteMode_System_Boolean_\">\r\n    \r\n            <a id=\"System_Data_DataTable_WriteXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteXml(TextWriter,XmlWriteMode,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the current data, and optionally the schema, for the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> using the specified <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> and <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a>. To write the schema, set the value for the <code>mode</code> parameter to <code>WriteSchema</code>. To save the data for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <code>true</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void WriteXml (System.IO.TextWriter writer, System.Data.XmlWriteMode mode, bool writeHierarchy);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>writer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> used to write the document.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>mode</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a> values.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>writeHierarchy</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>If <code>true</code>, write the contents of the current table and all its descendants. If <code>false</code> (the default value), write the data for the current table only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> method provides a way to write either data only, or both data and schema from a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> into an XML document, whereas the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> method writes only the schema. To write both data and schema, use one of the overloads that includes the <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a> parameter, and set its value to <code>WriteSchema</code>.  </p>\n<p> Note that the same is true for the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> and <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_ReadXmlSchema_\" data-linktype=\"relative-path\">ReadXmlSchema</a> methods, respectively. To read XML data, or both schema and data into the <code>DataTable</code>, use the <code>ReadXml</code> method. To read just the schema, use the <code>ReadXmlSchema</code> method.  </p>\n<p> Normally, the <code>WriteXml</code> method saves data only for the current table. The <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> method provides a way to write either data only, or both data and schema from a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> into an XML document, whereas the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> method writes only the schema. To write both data and schema, use one of the overloads that includes the <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a> parameter, and set its value to <code>WriteSchema</code>.  </p>\n<p> Note that the same is true for the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> and <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_ReadXmlSchema_\" data-linktype=\"relative-path\">ReadXmlSchema</a> methods, respectively. To read XML data, or both schema and data into the <code>DataTable</code>, use the <code>ReadXml</code> method. To read just the schema, use the <code>ReadXmlSchema</code> method.  </p>\n<p> Normally the <code>WriteXml</code> method writes the data only for the current table. To write the data for the current table and all of its descendant, related tables, call the method with the <code>writeHierarchy</code> parameter set to <code>true</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> An <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> will be thrown if a column type in the <code>DataRow</code> being read from or written to implements <a class=\"xref\" href=\"system.dynamic.idynamicmetaobjectprovider\" data-linktype=\"relative-path\">IDynamicMetaObjectProvider</a> and does not implement <a class=\"xref\" href=\"system.xml.serialization.ixmlserializable\" data-linktype=\"relative-path\">IXmlSerializable</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following console application creates two <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> instances, adds each to a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>, creates a <a class=\"xref\" href=\"system.data.datarelation\" data-linktype=\"relative-path\">DataRelation</a> relating the two tables, and then uses the WriteXml method to write the data contained within the parent table to a <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a>. The example demonstrates the behavior when setting the <code>writeHierarchy</code> parameter to each of its values.  </p>\n<pre><code class=\"lang-cs\" name=\"DataWorks DataTable.WriteXmlIO#1\">    static void Main()\n    {\n        DataSet ds = new DataSet();\n        DataTable customerTable = GetCustomers();\n        DataTable orderTable = GetOrders();\n\n        ds.Tables.Add(customerTable);\n        ds.Tables.Add(orderTable);\n        ds.Relations.Add(&quot;CustomerOrder&quot;,\n            new DataColumn[] { customerTable.Columns[0] },\n            new DataColumn[] { orderTable.Columns[1] }, true);\n\n        System.IO.StringWriter writer = new System.IO.StringWriter();\n        customerTable.WriteXml(writer, XmlWriteMode.WriteSchema, false);\n        PrintOutput(writer, &quot;Customer table, without hierarchy&quot;);\n\n        writer = new System.IO.StringWriter();\n        customerTable.WriteXml(writer, XmlWriteMode.WriteSchema, true);\n        PrintOutput(writer, &quot;Customer table, with hierarchy&quot;);\n\n        Console.WriteLine(&quot;Press any key to continue.&quot;);\n        Console.ReadKey();\n    }\n\n    private static DataTable GetCustomers()\n    {\n        // Create sample Customers table, in order\n        // to demonstrate the behavior of the DataTableReader.\n        DataTable table = new DataTable();\n\n        // Create two columns, ID and Name.\n        DataColumn idColumn = table.Columns.Add(&quot;ID&quot;, typeof(System.Int32));\n        table.Columns.Add(&quot;Name&quot;, typeof(System.String));\n\n        // Set the ID column as the primary key column.\n        table.PrimaryKey = new DataColumn[] { idColumn };\n\n        table.Rows.Add(new object[] { 1, &quot;Mary&quot; });\n        table.Rows.Add(new object[] { 2, &quot;Andy&quot; });\n        table.Rows.Add(new object[] { 3, &quot;Peter&quot; });\n        table.Rows.Add(new object[] { 4, &quot;Russ&quot; });\n        table.AcceptChanges();\n        return table;\n    }\n\n    private static DataTable GetOrders()\n    {\n        // Create sample Customers table, in order\n        // to demonstrate the behavior of the DataTableReader.\n        DataTable table = new DataTable();\n\n        // Create three columns; OrderID, CustomerID, and OrderDate.\n        table.Columns.Add(new DataColumn(&quot;OrderID&quot;, typeof(System.Int32)));\n        table.Columns.Add(new DataColumn(&quot;CustomerID&quot;, typeof(System.Int32)));\n        table.Columns.Add(new DataColumn(&quot;OrderDate&quot;, typeof(System.DateTime)));\n\n        // Set the OrderID column as the primary key column.\n        table.PrimaryKey = new DataColumn[] { table.Columns[0] };\n\n        table.Rows.Add(new object[] { 1, 1, &quot;12/2/2003&quot; });\n        table.Rows.Add(new object[] { 2, 1, &quot;1/3/2004&quot; });\n        table.Rows.Add(new object[] { 3, 2, &quot;11/13/2004&quot; });\n        table.Rows.Add(new object[] { 4, 3, &quot;5/16/2004&quot; });\n        table.Rows.Add(new object[] { 5, 3, &quot;5/22/2004&quot; });\n        table.Rows.Add(new object[] { 6, 4, &quot;6/15/2004&quot; });\n        table.AcceptChanges();\n        return table;\n    }\n\n    private static void PrintOutput(System.IO.TextWriter writer, \n        string caption)\n    {\n        Console.WriteLine(&quot;==============================&quot;);\n        Console.WriteLine(caption);\n        Console.WriteLine(&quot;==============================&quot;);\n        Console.WriteLine(writer.ToString());\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"DataWorks DataTable.WriteXmlIO#1\">  Sub Main()\n    Dim ds As New DataSet\n    Dim customerTable As DataTable = GetCustomers()\n    Dim orderTable As DataTable = GetOrders()\n\n    ds.Tables.Add(customerTable)\n    ds.Tables.Add(orderTable)\n    ds.Relations.Add(&quot;CustomerOrder&quot;, _\n     New DataColumn() {customerTable.Columns(0)}, _\n     New DataColumn() {orderTable.Columns(1)}, True)\n\n    Dim writer As New System.IO.StringWriter\n    customerTable.WriteXml(writer, XmlWriteMode.WriteSchema, False)\n    PrintOutput(writer, &quot;Customer table, without hierarchy&quot;)\n\n    writer = New System.IO.StringWriter\n    customerTable.WriteXml(writer, XmlWriteMode.WriteSchema, True)\n    PrintOutput(writer, &quot;Customer table, with hierarchy&quot;)\n\n    Console.WriteLine(&quot;Press any key to continue.&quot;)\n    Console.ReadKey()\n  End Sub\n\n  Private Function GetOrders() As DataTable\n    &#39; Create sample Customers table, in order\n    &#39; to demonstrate the behavior of the DataTableReader.\n    Dim table As New DataTable\n\n    &#39; Create three columns, OrderID, CustomerID, and OrderDate.\n    table.Columns.Add(New DataColumn(&quot;OrderID&quot;, GetType(System.Int32)))\n    table.Columns.Add(New DataColumn(&quot;CustomerID&quot;, GetType(System.Int32)))\n    table.Columns.Add(New DataColumn(&quot;OrderDate&quot;, GetType(System.DateTime)))\n\n    &#39; Set the OrderID column as the primary key column.\n    table.PrimaryKey = New DataColumn() {table.Columns(0)}\n\n    table.Rows.Add(New Object() {1, 1, #12/2/2003#})\n    table.Rows.Add(New Object() {2, 1, #1/3/2004#})\n    table.Rows.Add(New Object() {3, 2, #11/13/2004#})\n    table.Rows.Add(New Object() {4, 3, #5/16/2004#})\n    table.Rows.Add(New Object() {5, 3, #5/22/2004#})\n    table.Rows.Add(New Object() {6, 4, #6/15/2004#})\n    table.AcceptChanges()\n    Return table\n  End Function\n\n  Private Function GetCustomers() As DataTable\n    &#39; Create sample Customers table, in order\n    &#39; to demonstrate the behavior of the DataTableReader.\n    Dim table As New DataTable\n\n    &#39; Create two columns, ID and Name.\n    Dim idColumn As DataColumn = table.Columns.Add(&quot;ID&quot;, _\n        GetType(System.Int32))\n    table.Columns.Add(&quot;Name&quot;, GetType(System.String))\n\n    &#39; Set the ID column as the primary key column.\n    table.PrimaryKey = New DataColumn() {idColumn}\n\n    table.Rows.Add(New Object() {1, &quot;Mary&quot;})\n    table.Rows.Add(New Object() {2, &quot;Andy&quot;})\n    table.Rows.Add(New Object() {3, &quot;Peter&quot;})\n    table.Rows.Add(New Object() {4, &quot;Russ&quot;})\n    table.AcceptChanges()\n    Return table\n  End Function\n\n  Private Sub PrintOutput( _\n     ByVal writer As System.IO.TextWriter, ByVal caption As String)\n\n    Console.WriteLine(&quot;==============================&quot;)\n    Console.WriteLine(caption)\n    Console.WriteLine(&quot;==============================&quot;)\n    Console.WriteLine(writer.ToString())\n  End Sub\n</code></pre><p> The example displays the following output in the console window:  </p>\n<pre><code>==============================  \nCustomer table, without hierarchy  \n==============================  \n&lt;NewDataSet&gt;  \n  &lt;xs:schema id=&quot;NewDataSet&quot; xmlns=&quot;&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema  \n&quot; xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;&gt;  \n    &lt;xs:element name=&quot;NewDataSet&quot; msdata:IsDataSet=&quot;true&quot; msdata:MainDataTable=&quot;Table1&quot;&gt;  \n      &lt;xs:complexType&gt;  \n        &lt;xs:choice minOccurs=&quot;0&quot; maxOccurs=&quot;unbounded&quot;&gt;  \n          &lt;xs:element name=&quot;Table1&quot;&gt;  \n            &lt;xs:complexType&gt;  \n              &lt;xs:sequence&gt;  \n                &lt;xs:element name=&quot;ID&quot; type=&quot;xs:int&quot; /&gt;  \n                &lt;xs:element name=&quot;Name&quot; type=&quot;xs:string&quot; minOccurs=&quot;0&quot; /&gt;  \n              &lt;/xs:sequence&gt;  \n            &lt;/xs:complexType&gt;  \n          &lt;/xs:element&gt;  \n        &lt;/xs:choice&gt;  \n      &lt;/xs:complexType&gt;  \n      &lt;xs:unique name=&quot;Constraint1&quot; msdata:PrimaryKey=&quot;true&quot;&gt;  \n        &lt;xs:selector xpath=&quot;.//Table1&quot; /&gt;  \n        &lt;xs:field xpath=&quot;ID&quot; /&gt;  \n      &lt;/xs:unique&gt;  \n    &lt;/xs:element&gt;  \n  &lt;/xs:schema&gt;  \n  &lt;Table1&gt;  \n    &lt;ID&gt;1&lt;/ID&gt;  \n    &lt;Name&gt;Mary&lt;/Name&gt;  \n  &lt;/Table1&gt;  \n  &lt;Table1&gt;  \n    &lt;ID&gt;2&lt;/ID&gt;  \n    &lt;Name&gt;Andy&lt;/Name&gt;  \n  &lt;/Table1&gt;  \n  &lt;Table1&gt;  \n    &lt;ID&gt;3&lt;/ID&gt;  \n    &lt;Name&gt;Peter&lt;/Name&gt;  \n  &lt;/Table1&gt;  \n  &lt;Table1&gt;  \n    &lt;ID&gt;4&lt;/ID&gt;  \n    &lt;Name&gt;Russ&lt;/Name&gt;  \n  &lt;/Table1&gt;  \n&lt;/NewDataSet&gt;  \n==============================  \nCustomer table, with hierarchy  \n==============================  \n&lt;NewDataSet&gt;  \n  &lt;xs:schema id=&quot;NewDataSet&quot; xmlns=&quot;&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema  \n&quot; xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;&gt;  \n    &lt;xs:element name=&quot;NewDataSet&quot; msdata:IsDataSet=&quot;true&quot; msdata:MainDataTable=&quot;Table1&quot;&gt;  \n      &lt;xs:complexType&gt;  \n        &lt;xs:choice minOccurs=&quot;0&quot; maxOccurs=&quot;unbounded&quot;&gt;  \n          &lt;xs:element name=&quot;Table1&quot;&gt;  \n            &lt;xs:complexType&gt;  \n              &lt;xs:sequence&gt;  \n                &lt;xs:element name=&quot;ID&quot; type=&quot;xs:int&quot; /&gt;  \n                &lt;xs:element name=&quot;Name&quot; type=&quot;xs:string&quot; minOccurs=&quot;0&quot; /&gt;  \n              &lt;/xs:sequence&gt;  \n            &lt;/xs:complexType&gt;  \n          &lt;/xs:element&gt;  \n          &lt;xs:element name=&quot;Table2&quot;&gt;  \n            &lt;xs:complexType&gt;  \n              &lt;xs:sequence&gt;  \n                &lt;xs:element name=&quot;OrderID&quot; type=&quot;xs:int&quot; /&gt;  \n                &lt;xs:element name=&quot;CustomerID&quot; type=&quot;xs:int&quot; minOccurs=&quot;0&quot; /&gt;  \n                &lt;xs:element name=&quot;OrderDate&quot; type=&quot;xs:dateTime&quot; minOccurs=&quot;0&quot; /&gt;  \n\n              &lt;/xs:sequence&gt;  \n            &lt;/xs:complexType&gt;  \n          &lt;/xs:element&gt;  \n        &lt;/xs:choice&gt;  \n      &lt;/xs:complexType&gt;  \n      &lt;xs:unique name=&quot;Constraint1&quot; msdata:PrimaryKey=&quot;true&quot;&gt;  \n        &lt;xs:selector xpath=&quot;.//Table1&quot; /&gt;  \n        &lt;xs:field xpath=&quot;ID&quot; /&gt;  \n      &lt;/xs:unique&gt;  \n      &lt;xs:unique name=&quot;Table2_Constraint1&quot; msdata:ConstraintName=&quot;Constraint1&quot; m  \nsdata:PrimaryKey=&quot;true&quot;&gt;  \n        &lt;xs:selector xpath=&quot;.//Table2&quot; /&gt;  \n        &lt;xs:field xpath=&quot;OrderID&quot; /&gt;  \n      &lt;/xs:unique&gt;  \n      &lt;xs:keyref name=&quot;CustomerOrder&quot; refer=&quot;Constraint1&quot;&gt;  \n        &lt;xs:selector xpath=&quot;.//Table2&quot; /&gt;  \n        &lt;xs:field xpath=&quot;CustomerID&quot; /&gt;  \n      &lt;/xs:keyref&gt;  \n    &lt;/xs:element&gt;  \n  &lt;/xs:schema&gt;  \n  &lt;Table1&gt;  \n    &lt;ID&gt;1&lt;/ID&gt;  \n    &lt;Name&gt;Mary&lt;/Name&gt;  \n  &lt;/Table1&gt;  \n  &lt;Table1&gt;  \n    &lt;ID&gt;2&lt;/ID&gt;  \n    &lt;Name&gt;Andy&lt;/Name&gt;  \n  &lt;/Table1&gt;  \n  &lt;Table1&gt;  \n    &lt;ID&gt;3&lt;/ID&gt;  \n    &lt;Name&gt;Peter&lt;/Name&gt;  \n  &lt;/Table1&gt;  \n  &lt;Table1&gt;  \n    &lt;ID&gt;4&lt;/ID&gt;  \n    &lt;Name&gt;Russ&lt;/Name&gt;  \n  &lt;/Table1&gt;  \n  &lt;Table2&gt;  \n    &lt;OrderID&gt;1&lt;/OrderID&gt;  \n    &lt;CustomerID&gt;1&lt;/CustomerID&gt;  \n    &lt;OrderDate&gt;2003-12-02T00:00:00.0000000-08:00&lt;/OrderDate&gt;  \n  &lt;/Table2&gt;  \n  &lt;Table2&gt;  \n    &lt;OrderID&gt;2&lt;/OrderID&gt;  \n    &lt;CustomerID&gt;1&lt;/CustomerID&gt;  \n    &lt;OrderDate&gt;2004-01-03T00:00:00.0000000-08:00&lt;/OrderDate&gt;  \n  &lt;/Table2&gt;  \n  &lt;Table2&gt;  \n    &lt;OrderID&gt;3&lt;/OrderID&gt;  \n    &lt;CustomerID&gt;2&lt;/CustomerID&gt;  \n    &lt;OrderDate&gt;2004-11-13T00:00:00.0000000-08:00&lt;/OrderDate&gt;  \n  &lt;/Table2&gt;  \n  &lt;Table2&gt;  \n    &lt;OrderID&gt;4&lt;/OrderID&gt;  \n    &lt;CustomerID&gt;3&lt;/CustomerID&gt;  \n    &lt;OrderDate&gt;2004-05-16T00:00:00.0000000-07:00&lt;/OrderDate&gt;  \n  &lt;/Table2&gt;  \n  &lt;Table2&gt;  \n    &lt;OrderID&gt;5&lt;/OrderID&gt;  \n    &lt;CustomerID&gt;3&lt;/CustomerID&gt;  \n    &lt;OrderDate&gt;2004-05-22T00:00:00.0000000-07:00&lt;/OrderDate&gt;  \n  &lt;/Table2&gt;  \n  &lt;Table2&gt;  \n    &lt;OrderID&gt;6&lt;/OrderID&gt;  \n    &lt;CustomerID&gt;4&lt;/CustomerID&gt;  \n    &lt;OrderDate&gt;2004-06-15T00:00:00.0000000-07:00&lt;/OrderDate&gt;  \n  &lt;/Table2&gt;  \n&lt;/NewDataSet&gt;  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_WriteXml_System_String_System_Data_XmlWriteMode_System_Boolean_\">\r\n    \r\n            <a id=\"System_Data_DataTable_WriteXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteXml(String,XmlWriteMode,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the current data, and optionally the schema, for the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> using the specified file and <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a>. To write the schema, set the value for the <code>mode</code> parameter to <code>WriteSchema</code>. To save the data for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <code>true</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void WriteXml (string fileName, System.Data.XmlWriteMode mode, bool writeHierarchy);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the file to which the data will be written.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>mode</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a> values.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>writeHierarchy</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>If <code>true</code>, write the contents of the current table and all its descendants. If <code>false</code> (the default value), write the data for the current table only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> method provides a way to write either data only, or both data and schema from a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> into an XML document, whereas the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> method writes only the schema. To write both data and schema, use one of the overloads that include the <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a> parameter, and set its value to <code>WriteSchema</code>.  </p>\n<p> Note that the same is true for the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> and <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_ReadXmlSchema_\" data-linktype=\"relative-path\">ReadXmlSchema</a> methods, respectively. To read XML data, or both schema and data into the <code>DataTable</code>, use the <code>ReadXml</code> method. To read just the schema, use the <code>ReadXmlSchema</code> method.  </p>\n<p> Normally, the <code>WriteXml</code> method saves data only for the current table. If you want to save the data for the current table and all of schema, the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> method provides a way to write either data only, or both data and schema from a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> into an XML document, whereas the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> method writes only the schema. To write both data and schema, use one of the overloads that include the <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a> parameter, and set its value to <code>WriteSchema</code>.  </p>\n<p> Note that the same is true for the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> and <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_ReadXmlSchema_\" data-linktype=\"relative-path\">ReadXmlSchema</a> methods, respectively. To read XML data, or both schema and data into the <code>DataTable</code>, use the <code>ReadXml</code> method. To read just the schema, use the <code>ReadXmlSchema</code> method.  </p>\n<p> Normally the <code>WriteXml</code> method writes the data only for the current table. To write the data for the current table and all descendant, related tables, call the method with the <code>writeHierarchy</code> parameter set to <code>true</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> An <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> will be thrown if a column type in the <code>DataRow</code> being read from or written to implements <a class=\"xref\" href=\"system.dynamic.idynamicmetaobjectprovider\" data-linktype=\"relative-path\">IDynamicMetaObjectProvider</a> and does not implement <a class=\"xref\" href=\"system.xml.serialization.ixmlserializable\" data-linktype=\"relative-path\">IXmlSerializable</a>.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_WriteXml_System_Xml_XmlWriter_System_Data_XmlWriteMode_System_Boolean_\">\r\n    \r\n            <a id=\"System_Data_DataTable_WriteXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteXml(XmlWriter,XmlWriteMode,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the current data, and optionally the schema, for the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> using the specified <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> and <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a>. To write the schema, set the value for the <code>mode</code> parameter to <code>WriteSchema</code>. To save the data for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <code>true</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void WriteXml (System.Xml.XmlWriter writer, System.Data.XmlWriteMode mode, bool writeHierarchy);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>writer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> used to write the document.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>mode</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a> values.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>writeHierarchy</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>If <code>true</code>, write the contents of the current table and all its descendants. If <code>false</code> (the default value), write the data for the current table only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> method provides a way to write either data only, or both data and schema from a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> into an XML document, whereas the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> method writes only the schema. To write both data and schema, use one of the overloads that include the <a class=\"xref\" href=\"system.data.xmlwritemode\" data-linktype=\"relative-path\">XmlWriteMode</a> parameter, and set its value to <code>WriteSchema</code>.  </p>\n<p> Note that the same is true for the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_ReadXml_\" data-linktype=\"relative-path\">ReadXml</a> and <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_ReadXmlSchema_\" data-linktype=\"relative-path\">ReadXmlSchema</a> methods, respectively. To read XML data, or both schema and data into the <code>DataTable</code>, use the <code>ReadXml</code> method. To read just the schema, use the <code>ReadXmlSchema</code> method.  </p>\n<p> Normally the <code>WriteXml</code> method writes the data only for the current table. To write the data for the current table and its entire descendant, related tables, call the method with the <code>writeHierarchy</code> parameter set to <code>true</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> An <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> will be thrown if a column type in the <code>DataRow</code> being read from or written to implements <a class=\"xref\" href=\"system.dynamic.idynamicmetaobjectprovider\" data-linktype=\"relative-path\">IDynamicMetaObjectProvider</a> and does not implement <a class=\"xref\" href=\"system.xml.serialization.ixmlserializable\" data-linktype=\"relative-path\">IXmlSerializable</a>.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_WriteXmlSchema_System_IO_Stream_\">\r\n    \r\n            <a id=\"System_Data_DataTable_WriteXmlSchema_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteXmlSchema(Stream)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the current data structure of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> as an XML schema to the specified stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void WriteXmlSchema (System.IO.Stream stream);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>stream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The stream to which the XML schema will be written.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> method to write the schema for a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> to an XML document. The schema includes table, relation, and constraint definitions.  </p>\n<p> The XML schema is written using the XSD standard.  </p>\n<p> To write the data to an XML document, use the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_WriteXmlSchema_System_IO_TextWriter_\">\r\n    \r\n            <a id=\"System_Data_DataTable_WriteXmlSchema_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteXmlSchema(TextWriter)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the current data structure of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> as an XML schema using the specified <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void WriteXmlSchema (System.IO.TextWriter writer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>writer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> with which to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> method to write the schema for a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> to an XML document. The schema includes table, relation, and constraint definitions.  </p>\n<p> The XML schema is written using the XSD standard.  </p>\n<p> To write the data to an XML document, use the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_WriteXmlSchema_System_String_\">\r\n    \r\n            <a id=\"System_Data_DataTable_WriteXmlSchema_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteXmlSchema(String)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the current data structure of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> as an XML schema to the specified file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void WriteXmlSchema (string fileName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the file to use.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> method to write the schema for a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> to an XML document. The schema includes table, relation, and constraint definitions.  </p>\n<p> The XML schema is written using the XSD standard.  </p>\n<p> To write the data to an XML document, use the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_WriteXmlSchema_System_Xml_XmlWriter_\">\r\n    \r\n            <a id=\"System_Data_DataTable_WriteXmlSchema_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteXmlSchema(XmlWriter)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the current data structure of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> as an XML schema using the specified <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void WriteXmlSchema (System.Xml.XmlWriter writer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>writer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> to use.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> method to write the schema for a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> to an XML document. The schema includes table, relation, and constraint definitions.  </p>\n<p> The XML schema is written using the XSD standard.  </p>\n<p> To write the data to an XML document, use the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_WriteXmlSchema_System_IO_Stream_System_Boolean_\">\r\n    \r\n            <a id=\"System_Data_DataTable_WriteXmlSchema_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteXmlSchema(Stream,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the current data structure of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> as an XML schema to the specified stream. To save the schema for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <code>true</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void WriteXmlSchema (System.IO.Stream stream, bool writeHierarchy);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>stream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The stream to which the XML schema will be written.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>writeHierarchy</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>If <code>true</code>, write the schema of the current table and all its descendants. If <code>false</code> (the default value), write the schema for the current table only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> method to write the schema for a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> to an XML document. The schema includes table, relation, and constraint definitions.  </p>\n<p> The XML schema is written using the XSD standard.  </p>\n<p> To write the data to an XML document, use the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> method.  </p>\n<p> Normally the <code>WriteXmlSchema</code> method writes the schema only for the current table. To write the schema for the current table and its entire descendant, related tables, call the method with the <code>writeHierarchy</code> parameter set to <code>true</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_WriteXmlSchema_System_IO_TextWriter_System_Boolean_\">\r\n    \r\n            <a id=\"System_Data_DataTable_WriteXmlSchema_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteXmlSchema(TextWriter,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the current data structure of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> as an XML schema using the specified <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a>. To save the schema for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <code>true</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void WriteXmlSchema (System.IO.TextWriter writer, bool writeHierarchy);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>writer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> with which to write.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>writeHierarchy</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>If <code>true</code>, write the schema of the current table and all its descendants. If <code>false</code> (the default value), write the schema for the current table only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> method to write the schema for a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> to an XML document. The schema includes table, relation, and constraint definitions.  </p>\n<p> The XML schema is written using the XSD standard.  </p>\n<p> To write the data to an XML document, use the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> method.  </p>\n<p> Normally the <code>WriteXmlSchema</code> method writes the schema only for the current table. To write the schema for the current table and its entire descendant, related tables, call the method with the <code>writeHierarchy</code> parameter set to <code>true</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following console application creates two <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> instances, adds each to a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>, creates a <a class=\"xref\" href=\"system.data.datarelation\" data-linktype=\"relative-path\">DataRelation</a> relating the two tables, and then uses the WriteXmlSchema method to write the data contained within the parent table to a <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a>. The example demonstrates the behavior when setting the <code>writeHierarchy</code> parameter to each of its values.  </p>\n<pre><code class=\"lang-cs\" name=\"DataWorks DataTable.WriteXmlSchema#1\">    static void Main()\n    {\n        DataSet ds = new DataSet();\n        DataTable customerTable = GetCustomers();\n        DataTable orderTable = GetOrders();\n\n        ds.Tables.Add(customerTable);\n        ds.Tables.Add(orderTable);\n        ds.Relations.Add(&quot;CustomerOrder&quot;,\n            new DataColumn[] { customerTable.Columns[0] },\n            new DataColumn[] { orderTable.Columns[1] }, true);\n\n        System.IO.StringWriter writer = new System.IO.StringWriter();\n        customerTable.WriteXmlSchema(writer, false);\n        PrintOutput(writer, &quot;Customer table, without hierarchy&quot;);\n\n        writer = new System.IO.StringWriter();\n        customerTable.WriteXmlSchema(writer, true);\n        PrintOutput(writer, &quot;Customer table, with hierarchy&quot;);\n\n        Console.WriteLine(&quot;Press any key to continue.&quot;);\n        Console.ReadKey();\n    }\n\n    private static DataTable GetCustomers()\n    {\n        // Create sample Customers table, in order\n        // to demonstrate the behavior of the DataTableReader.\n        DataTable table = new DataTable();\n\n        // Create two columns, ID and Name.\n        DataColumn idColumn = table.Columns.Add(&quot;ID&quot;, typeof(System.Int32));\n        table.Columns.Add(&quot;Name&quot;, typeof(System.String));\n\n        // Set the ID column as the primary key column.\n        table.PrimaryKey = new DataColumn[] { idColumn };\n\n        table.Rows.Add(new object[] { 1, &quot;Mary&quot; });\n        table.Rows.Add(new object[] { 2, &quot;Andy&quot; });\n        table.Rows.Add(new object[] { 3, &quot;Peter&quot; });\n        table.Rows.Add(new object[] { 4, &quot;Russ&quot; });\n        table.AcceptChanges();\n        return table;\n    }\n\n    private static DataTable GetOrders()\n    {\n        // Create sample Customers table, in order\n        // to demonstrate the behavior of the DataTableReader.\n        DataTable table = new DataTable();\n\n        // Create three columns; OrderID, CustomerID, and OrderDate.\n        table.Columns.Add(new DataColumn(&quot;OrderID&quot;, typeof(System.Int32)));\n        table.Columns.Add(new DataColumn(&quot;CustomerID&quot;, typeof(System.Int32)));\n        table.Columns.Add(new DataColumn(&quot;OrderDate&quot;, typeof(System.DateTime)));\n\n        // Set the OrderID column as the primary key column.\n        table.PrimaryKey = new DataColumn[] { table.Columns[0] };\n\n        table.Rows.Add(new object[] { 1, 1, &quot;12/2/2003&quot; });\n        table.Rows.Add(new object[] { 2, 1, &quot;1/3/2004&quot; });\n        table.Rows.Add(new object[] { 3, 2, &quot;11/13/2004&quot; });\n        table.Rows.Add(new object[] { 4, 3, &quot;5/16/2004&quot; });\n        table.Rows.Add(new object[] { 5, 3, &quot;5/22/2004&quot; });\n        table.Rows.Add(new object[] { 6, 4, &quot;6/15/2004&quot; });\n        table.AcceptChanges();\n        return table;\n    }\n\n    private static void PrintOutput(System.IO.TextWriter writer, string caption)\n    {\n        Console.WriteLine(&quot;==============================&quot;);\n        Console.WriteLine(caption);\n        Console.WriteLine(&quot;==============================&quot;);\n        Console.WriteLine(writer.ToString());\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"DataWorks DataTable.WriteXmlSchema#1\">  Sub Main()\n    Dim ds As New DataSet\n    Dim customerTable As DataTable = GetCustomers()\n    Dim orderTable As DataTable = GetOrders()\n\n    ds.Tables.Add(customerTable)\n    ds.Tables.Add(orderTable)\n    ds.Relations.Add(&quot;CustomerOrder&quot;, _\n     New DataColumn() {customerTable.Columns(0)}, _\n     New DataColumn() {orderTable.Columns(1)}, True)\n\n    Dim writer As New System.IO.StringWriter\n    customerTable.WriteXmlSchema(writer, False)\n    PrintOutput(writer, &quot;Customer table, without hierarchy&quot;)\n\n    writer = New System.IO.StringWriter\n    customerTable.WriteXmlSchema(writer, True)\n    PrintOutput(writer, &quot;Customer table, with hierarchy&quot;)\n\n    Console.WriteLine(&quot;Press any key to continue.&quot;)\n    Console.ReadKey()\n  End Sub\n\n  Private Function GetOrders() As DataTable\n    &#39; Create sample Customers table, in order\n    &#39; to demonstrate the behavior of the DataTableReader.\n    Dim table As New DataTable\n\n    &#39; Create three columns, OrderID, CustomerID, and OrderDate.\n    table.Columns.Add(New DataColumn(&quot;OrderID&quot;, GetType(System.Int32)))\n    table.Columns.Add(New DataColumn(&quot;CustomerID&quot;, GetType(System.Int32)))\n    table.Columns.Add(New DataColumn(&quot;OrderDate&quot;, GetType(System.DateTime)))\n\n    &#39; Set the OrderID column as the primary key column.\n    table.PrimaryKey = New DataColumn() {table.Columns(0)}\n\n    table.Rows.Add(New Object() {1, 1, #12/2/2003#})\n    table.Rows.Add(New Object() {2, 1, #1/3/2004#})\n    table.Rows.Add(New Object() {3, 2, #11/13/2004#})\n    table.Rows.Add(New Object() {4, 3, #5/16/2004#})\n    table.Rows.Add(New Object() {5, 3, #5/22/2004#})\n    table.Rows.Add(New Object() {6, 4, #6/15/2004#})\n    table.AcceptChanges()\n    Return table\n  End Function\n\n  Private Function GetCustomers() As DataTable\n    &#39; Create sample Customers table, in order\n    &#39; to demonstrate the behavior of the DataTableReader.\n    Dim table As New DataTable\n\n    &#39; Create two columns, ID and Name.\n    Dim idColumn As DataColumn = table.Columns.Add(&quot;ID&quot;, _\n        GetType(System.Int32))\n    table.Columns.Add(&quot;Name&quot;, GetType(System.String))\n\n    &#39; Set the ID column as the primary key column.\n    table.PrimaryKey = New DataColumn() {idColumn}\n\n    table.Rows.Add(New Object() {1, &quot;Mary&quot;})\n    table.Rows.Add(New Object() {2, &quot;Andy&quot;})\n    table.Rows.Add(New Object() {3, &quot;Peter&quot;})\n    table.Rows.Add(New Object() {4, &quot;Russ&quot;})\n    table.AcceptChanges()\n    Return table\n  End Function\n\n  Private Sub PrintOutput( _\n     ByVal writer As System.IO.TextWriter, ByVal caption As String)\n\n    Console.WriteLine(&quot;==============================&quot;)\n    Console.WriteLine(caption)\n    Console.WriteLine(&quot;==============================&quot;)\n    Console.WriteLine(writer.ToString())\n  End Sub\n</code></pre><p> The example displays the following output in the console window:  </p>\n<pre><code>==============================  \nCustomer table, without hierarchy  \n==============================  \n&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-16&quot;?&gt;  \n&lt;xs:schema id=&quot;NewDataSet&quot; xmlns=&quot;&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;  \nxmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;&gt;  \n  &lt;xs:element name=&quot;NewDataSet&quot; msdata:IsDataSet=&quot;true&quot; msdata:MainDataTable=&quot;Ta  \nble1&quot;&gt;  \n    &lt;xs:complexType&gt;  \n      &lt;xs:choice minOccurs=&quot;0&quot; maxOccurs=&quot;unbounded&quot;&gt;  \n        &lt;xs:element name=&quot;Table1&quot;&gt;  \n          &lt;xs:complexType&gt;  \n            &lt;xs:sequence&gt;  \n              &lt;xs:element name=&quot;ID&quot; type=&quot;xs:int&quot; /&gt;  \n              &lt;xs:element name=&quot;Name&quot; type=&quot;xs:string&quot; minOccurs=&quot;0&quot; /&gt;  \n            &lt;/xs:sequence&gt;  \n          &lt;/xs:complexType&gt;  \n        &lt;/xs:element&gt;  \n      &lt;/xs:choice&gt;  \n    &lt;/xs:complexType&gt;  \n    &lt;xs:unique name=&quot;Constraint1&quot; msdata:PrimaryKey=&quot;true&quot;&gt;  \n      &lt;xs:selector xpath=&quot;.//Table1&quot; /&gt;  \n      &lt;xs:field xpath=&quot;ID&quot; /&gt;  \n    &lt;/xs:unique&gt;  \n  &lt;/xs:element&gt;  \n&lt;/xs:schema&gt;  \n==============================  \nCustomer table, with hierarchy  \n==============================  \n&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-16&quot;?&gt;  \n&lt;xs:schema id=&quot;NewDataSet&quot; xmlns=&quot;&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;  \nxmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;&gt;  \n  &lt;xs:element name=&quot;NewDataSet&quot; msdata:IsDataSet=&quot;true&quot; msdata:MainDataTable=&quot;Table1&quot;&gt;  \n    &lt;xs:complexType&gt;  \n      &lt;xs:choice minOccurs=&quot;0&quot; maxOccurs=&quot;unbounded&quot;&gt;  \n        &lt;xs:element name=&quot;Table1&quot;&gt;  \n          &lt;xs:complexType&gt;  \n            &lt;xs:sequence&gt;  \n              &lt;xs:element name=&quot;ID&quot; type=&quot;xs:int&quot; /&gt;  \n              &lt;xs:element name=&quot;Name&quot; type=&quot;xs:string&quot; minOccurs=&quot;0&quot; /&gt;  \n            &lt;/xs:sequence&gt;  \n          &lt;/xs:complexType&gt;  \n        &lt;/xs:element&gt;  \n        &lt;xs:element name=&quot;Table2&quot;&gt;  \n          &lt;xs:complexType&gt;  \n            &lt;xs:sequence&gt;  \n              &lt;xs:element name=&quot;OrderID&quot; type=&quot;xs:int&quot; /&gt;  \n              &lt;xs:element name=&quot;CustomerID&quot; type=&quot;xs:int&quot; minOccurs=&quot;0&quot; /&gt;  \n              &lt;xs:element name=&quot;OrderDate&quot; type=&quot;xs:dateTime&quot; minOccurs=&quot;0&quot; /&gt;  \n            &lt;/xs:sequence&gt;  \n          &lt;/xs:complexType&gt;  \n        &lt;/xs:element&gt;  \n      &lt;/xs:choice&gt;  \n    &lt;/xs:complexType&gt;  \n    &lt;xs:unique name=&quot;Constraint1&quot; msdata:PrimaryKey=&quot;true&quot;&gt;  \n      &lt;xs:selector xpath=&quot;.//Table1&quot; /&gt;  \n      &lt;xs:field xpath=&quot;ID&quot; /&gt;  \n    &lt;/xs:unique&gt;  \n    &lt;xs:unique name=&quot;Table2_Constraint1&quot; msdata:ConstraintName=&quot;Constraint1&quot; msdata:PrimaryKey=&quot;true&quot;&gt;  \n      &lt;xs:selector xpath=&quot;.//Table2&quot; /&gt;  \n      &lt;xs:field xpath=&quot;OrderID&quot; /&gt;  \n    &lt;/xs:unique&gt;  \n    &lt;xs:keyref name=&quot;CustomerOrder&quot; refer=&quot;Constraint1&quot;&gt;  \n      &lt;xs:selector xpath=&quot;.//Table2&quot; /&gt;  \n      &lt;xs:field xpath=&quot;CustomerID&quot; /&gt;  \n    &lt;/xs:keyref&gt;  \n  &lt;/xs:element&gt;  \n&lt;/xs:schema&gt;  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_WriteXmlSchema_System_String_System_Boolean_\">\r\n    \r\n            <a id=\"System_Data_DataTable_WriteXmlSchema_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteXmlSchema(String,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the current data structure of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> as an XML schema to the specified file. To save the schema for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <code>true</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void WriteXmlSchema (string fileName, bool writeHierarchy);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the file to use.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>writeHierarchy</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>If <code>true</code>, write the schema of the current table and all its descendants. If <code>false</code> (the default value), write the schema for the current table only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> method to write the schema for a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> to an XML document. The schema includes table, relation, and constraint definitions.  </p>\n<p> The XML schema is written using the XSD standard.  </p>\n<p> To write the data to an XML document, use the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> method.  </p>\n<p> Normally the <code>WriteXmlSchema</code> method writes the schema only for the current table. To write the schema for the current table and its entire descendant, related tables, call the method with the <code>writeHierarchy</code> parameter set to <code>true</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_WriteXmlSchema_System_Xml_XmlWriter_System_Boolean_\">\r\n    \r\n            <a id=\"System_Data_DataTable_WriteXmlSchema_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteXmlSchema(XmlWriter,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the current data structure of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> as an XML schema using the specified <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a>. To save the schema for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <code>true</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void WriteXmlSchema (System.Xml.XmlWriter writer, bool writeHierarchy);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>writer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> used to write the document.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>writeHierarchy</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>If <code>true</code>, write the schema of the current table and all its descendants. If <code>false</code> (the default value), write the schema for the current table only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXmlSchema_\" data-linktype=\"relative-path\">WriteXmlSchema</a> method to write the schema for a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> to an XML document. The schema includes table, relation, and constraint definitions.  </p>\n<p> The XML schema is written using the XSD standard.  </p>\n<p> To write the data to an XML document, use the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_WriteXml_\" data-linktype=\"relative-path\">WriteXml</a> method.  </p>\n<p> Normally the <code>WriteXmlSchema</code> method writes the schema only for the current table. To write the schema for the current table and its entire descendant, related tables, call the method with the <code>writeHierarchy</code> parameter set to <code>true</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"events\">\r\n        <h2>Events\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_ColumnChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ColumnChanged</div>        \r\n          </div>\r\n    \r\n            <p>Occurs after a value has been changed for the specified <a class=\"xref\" href=\"system.data.datacolumn\" data-linktype=\"relative-path\">DataColumn</a> in a <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Data.DataColumnChangeEventHandler ColumnChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information, see <a href=\"../Topic/Handling%20DataTable%20Events.md\" data-linktype=\"relative-path\">Handling DataTable Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-vb\" name=\"Classic WebData DataTable.ColumnChanged Example#1\">Private Shared Sub DataTableColumnChanged()\n\tDim custTable As DataTable = New DataTable(&quot;Customers&quot;)\n\t&#39; add columns\n\tcustTable.Columns.Add(&quot;id&quot;, Type.GetType(&quot;System.Int32&quot;))\n\tcustTable.Columns.Add(&quot;name&quot;, Type.GetType(&quot;System.String&quot;))\n\tcustTable.Columns.Add(&quot;address&quot;, Type.GetType(&quot;System.String&quot;))\n\n\t&#39; set PrimaryKey\n\tcustTable.Columns(&quot;id&quot;).Unique = true\n\tcustTable.PrimaryKey = New DataColumn() { custTable.Columns(&quot;id&quot;) }\n\n\t&#39; add a ColumnChanged event handler for the table.\n\tAddHandler custTable.ColumnChanged, _\n        New DataColumnChangeEventHandler(AddressOf Column_Changed )\n\n\n\t&#39; add ten rows\n\tDim id As Integer\n\tFor id = 1 To 10\n\t\tcustTable.Rows.Add( _\n\t\t\tNew Object() { id, string.Format(&quot;customer{0}&quot;, id), _\n                string.Format(&quot;address{0}&quot;, id) })\n\tNext\n\t\n\tcustTable.AcceptChanges()\n\n\t&#39; change the name column in all the rows\n\tDim row As DataRow\n\tFor Each row In custTable.Rows \n\t\trow(&quot;name&quot;) = string.Format(&quot;vip{0}&quot;, row(&quot;id&quot;))\n\tNext\n\nEnd Sub\n\nPrivate Shared Sub Column_Changed(sender As Object, _\n    e As DataColumnChangeEventArgs)\n\tConsole.WriteLine(&quot;Column_Changed Event: name={0}; Column={1}; original name={2}&quot;, _\n\t\te.Row(&quot;name&quot;), e.Column.ColumnName, e.Row(&quot;name&quot;, DataRowVersion.Original))\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData DataTable.ColumnChanged Example#1\">    private static void DataTableColumnChanged()\n    {\n        DataTable custTable = new DataTable(&quot;Customers&quot;);\n        // add columns\n        custTable.Columns.Add(&quot;id&quot;, typeof(int));\n        custTable.Columns.Add(&quot;name&quot;, typeof(string));\n        custTable.Columns.Add(&quot;address&quot;, typeof(string));\n\n        // set PrimaryKey\n        custTable.Columns[&quot;id&quot;].Unique = true;\n        custTable.PrimaryKey = new DataColumn[] { custTable.Columns[&quot;id&quot;] };\n\n        // add a ColumnChanged event handler for the table.\n        custTable.ColumnChanged += new \n            DataColumnChangeEventHandler(Column_Changed );\n\n\n        // add ten rows\n        for(int id=1; id&lt;=10; id++)\n        {\n            custTable.Rows.Add(\n                new object[] { id, string.Format(&quot;customer{0}&quot;, id), \n                string.Format(&quot;address{0}&quot;, id) });\n        }\n\t\n        custTable.AcceptChanges();\n\n        // change the name column in all the rows\n        foreach(DataRow row in custTable.Rows )\n        {\n            row[&quot;name&quot;] = string.Format(&quot;vip{0}&quot;, row[&quot;id&quot;]);\n        }\n\n    }\n\n    private static void Column_Changed(object sender, DataColumnChangeEventArgs e )\n    {\n        Console.WriteLine(&quot;Column_Changed Event: name={0}; Column={1}; original name={2}&quot;, \n            e.Row[&quot;name&quot;], e.Column.ColumnName, e.Row[&quot;name&quot;, DataRowVersion.Original]);\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_ColumnChanging\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ColumnChanging</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when a value is being changed for the specified <a class=\"xref\" href=\"system.data.datacolumn\" data-linktype=\"relative-path\">DataColumn</a> in a <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Data.DataColumnChangeEventHandler ColumnChanging;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information, see <a href=\"../Topic/Handling%20DataTable%20Events.md\" data-linktype=\"relative-path\">Handling DataTable Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cs\" name=\"Classic WebData DataTable.ColumnChanging Example#1\">    private static void DataTableColumnChanging()\n    {\n        DataTable custTable = new DataTable(&quot;Customers&quot;);\n        // add columns\n        custTable.Columns.Add(&quot;id&quot;, typeof(int));\n        custTable.Columns.Add(&quot;name&quot;, typeof(string));\n        custTable.Columns.Add(&quot;address&quot;, typeof(string));\n\n        // set PrimaryKey\n        custTable.Columns[ &quot;id&quot; ].Unique = true;\n        custTable.PrimaryKey = new DataColumn[] { custTable.Columns[&quot;id&quot;] };\n\n        // add a ColumnChanging event handler for the table.\n        custTable.ColumnChanging += new \n            DataColumnChangeEventHandler(Column_Changing );\n\n\n        // add ten rows\n        for(int id=1; id&lt;=10; id++)\n        {\n            custTable.Rows.Add(\n                new object[] { id, string.Format(\n                &quot;customer{0}&quot;, id), string.Format(&quot;address{0}&quot;, id) });\n        }\n\t\n        custTable.AcceptChanges();\n\n        // change the name column in all the rows\n        foreach(DataRow row in custTable.Rows )\n        {\n            row[&quot;name&quot;] = string.Format(&quot;vip{0}&quot;, row[&quot;id&quot;]);\n        }\n\n    }\n\n    private static void Column_Changing(object sender, \n        DataColumnChangeEventArgs e )\n    {\n        Console.WriteLine(\n            &quot;Column_Changing Event: name={0}; Column={1}; proposed name={2}&quot;, \n            e.Row[&quot;name&quot;], e.Column.ColumnName, e.ProposedValue );\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData DataTable.ColumnChanging Example#1\">Private Shared Sub DataTableColumnChanging()\n\tDim custTable As DataTable = New DataTable(&quot;Customers&quot;)\n\t&#39; add columns\n\tcustTable.Columns.Add(&quot;id&quot;, Type.GetType(&quot;System.Int32&quot;))\n\tcustTable.Columns.Add(&quot;name&quot;, Type.GetType(&quot;System.String&quot;))\n\tcustTable.Columns.Add(&quot;address&quot;, Type.GetType(&quot;System.String&quot;))\n\n\t&#39; set PrimaryKey\n\tcustTable.Columns(&quot;id&quot;).Unique = true\n\tcustTable.PrimaryKey = New DataColumn() { custTable.Columns(&quot;id&quot;) }\n\n\t&#39; add a ColumnChanging event handler for the table.\n\tAddHandler custTable.ColumnChanging, New _\n        DataColumnChangeEventHandler(AddressOf Column_Changing )\n\n\t&#39; add ten rows\n\tDim id As Integer\n\tFor id = 1 To 10\n\t\tcustTable.Rows.Add( _\n\t\t\tNew Object() { id, string.Format(&quot;customer{0}&quot;, id), _\n                string.Format(&quot;address{0}&quot;, id) })\n\tNext\n\t\n\tcustTable.AcceptChanges()\n\n\t&#39; change the name column in all the rows\n\tDim row As DataRow\n\tFor Each row In custTable.Rows \n\t\trow(&quot;name&quot;) = string.Format(&quot;vip{0}&quot;, row(&quot;id&quot;))\n\tNext\n\nEnd Sub\n\nPrivate Shared Sub Column_Changing(sender As Object, _\n    e As DataColumnChangeEventArgs)\n\tConsole.WriteLine( _\n        &quot;Column_Changing Event: name={0}; Column={1}; proposed name={2}&quot;, _\n\t\te.Row(&quot;name&quot;), e.Column.ColumnName, e.ProposedValue) \nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_Initialized\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Initialized</div>        \r\n          </div>\r\n    \r\n            <p>Occurs after the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> is initialized.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler Initialized;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information, see <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_IsInitialized_\" data-linktype=\"relative-path\">IsInitialized</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_RowChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RowChanged</div>        \r\n          </div>\r\n    \r\n            <p>Occurs after a <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> has been changed successfully.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Data.DataRowChangeEventHandler RowChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information, see <a href=\"../Topic/Handling%20DataTable%20Events.md\" data-linktype=\"relative-path\">Handling DataTable Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-vb\" name=\"Classic WebData DataTable.RowChanged Example#1\">    Private Sub DataTableRowChanged()\n        Dim custTable As DataTable = New DataTable(&quot;Customers&quot;)\n        &#39; add columns\n        custTable.Columns.Add(&quot;id&quot;, Type.GetType(&quot;System.Int32&quot;))\n        custTable.Columns.Add(&quot;name&quot;, Type.GetType(&quot;System.String&quot;))\n        custTable.Columns.Add(&quot;address&quot;, Type.GetType(&quot;System.String&quot;))\n\n        &#39; set PrimaryKey\n        custTable.Columns(&quot;id&quot;).Unique = True\n        custTable.PrimaryKey = New DataColumn() {custTable.Columns(&quot;id&quot;)}\n\n        &#39; add a RowChanged event handler for the table.\n        AddHandler custTable.RowChanged, _\n               New DataRowChangeEventHandler(AddressOf Row_Changed)\n\n\n        &#39; add ten rows\n        Dim id As Integer\n        For id = 1 To 10\n            custTable.Rows.Add( _\n   New Object() {id, String.Format(&quot;customer{0}&quot;, id), _\n            String.Format(&quot;address{0}&quot;, id)})\n        Next\n\n        custTable.AcceptChanges()\n\n        &#39; change the name column in all the rows\n        Dim row As DataRow\n        For Each row In custTable.Rows\n            row(&quot;name&quot;) = String.Format(&quot;vip{0}&quot;, row(&quot;id&quot;))\n        Next\n\n    End Sub\n\n    Private Sub Row_Changed(ByVal sender As Object, _\n    ByVal e As DataRowChangeEventArgs)\n        Console.WriteLine(&quot;Row_Changed Event: name={0}; action={1}&quot;, _\n         e.Row(&quot;name&quot;), e.Action)\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData DataTable.RowChanged Example#1\">    private static void DataTableRowChanged()\n    {\n        DataTable custTable = new DataTable(&quot;Customers&quot;);\n        // add columns\n        custTable.Columns.Add(&quot;id&quot;, typeof(int));\n        custTable.Columns.Add(&quot;name&quot;, typeof(string));\n        custTable.Columns.Add(&quot;address&quot;, typeof(string));\n\n        // set PrimaryKey\n        custTable.Columns[ &quot;id&quot; ].Unique = true;\n        custTable.PrimaryKey = new DataColumn[] { custTable.Columns[&quot;id&quot;] };\n\n        // add a RowChanged event handler for the table.\n        custTable.RowChanged += new DataRowChangeEventHandler(Row_Changed);\n\n\n        // add ten rows\n        for(int id=1; id&lt;=10; id++)\n        {\n            custTable.Rows.Add(\n                new object[] { id, string.Format(&quot;customer{0}&quot;, id), \n                string.Format(&quot;address{0}&quot;, id) });\n        }\n\t\n        custTable.AcceptChanges();\n\n        // change the name column in all the rows\n        foreach(DataRow row in custTable.Rows)\n        {\n            row[&quot;name&quot;] = string.Format(&quot;vip{0}&quot;, row[&quot;id&quot;]);\n        }\n\n    }\n\n    private static void Row_Changed(object sender, DataRowChangeEventArgs e)\n    {\n        Console.WriteLine(&quot;Row_Changed Event: name={0}; action={1}&quot;, \n            e.Row[&quot;name&quot;], e.Action);\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_RowChanging\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RowChanging</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when a <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> is changing.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Data.DataRowChangeEventHandler RowChanging;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information, see <a href=\"../Topic/Handling%20DataTable%20Events.md\" data-linktype=\"relative-path\">Handling DataTable Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cs\" name=\"Classic WebData DataTable.RowChanging Example#1\">private static void DataTableRowChanging()\n{\n\tDataTable custTable = new DataTable(&quot;Customers&quot;);\n\t// add columns\n\tcustTable.Columns.Add(&quot;id&quot;, typeof(int));\n\tcustTable.Columns.Add(&quot;name&quot;, typeof(string));\n\tcustTable.Columns.Add(&quot;address&quot;, typeof(string));\n\n\t// set PrimaryKey\n\tcustTable.Columns[ &quot;id&quot; ].Unique = true;\n\tcustTable.PrimaryKey = new DataColumn[] { custTable.Columns[&quot;id&quot;] };\n\n\t// add a RowChanging event handler for the table.\n\tcustTable.RowChanging += new DataRowChangeEventHandler(Row_Changing);\n\n\n\t// add ten rows\n\tfor(int id=1; id&lt;=10; id++)\n\t{\n\t\tcustTable.Rows.Add(\n\t\t\tnew object[] { id, string.Format(&quot;customer{0}&quot;, id), \n            string.Format(&quot;address{0}&quot;, id) });\n\t}\n\t\n\tcustTable.AcceptChanges();\n\n\t// change the name column in all the rows\n\tforeach(DataRow row in custTable.Rows)\n\t{\n\t\trow[&quot;name&quot;] = string.Format(&quot;vip{0}&quot;, row[&quot;id&quot;]);\n\t}\n\n}\n\nprivate static void Row_Changing(object sender, DataRowChangeEventArgs e)\n{\n\tConsole.WriteLine(&quot;Row_Changing Event: name={0}; action={1}&quot;, \n\t\te.Row[&quot;name&quot;], e.Action);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData DataTable.RowChanging Example#1\">    Private Sub DataTableRowChanging()\n        Dim custTable As DataTable = New DataTable(&quot;Customers&quot;)\n        &#39; add columns\n        custTable.Columns.Add(&quot;id&quot;, Type.GetType(&quot;System.Int32&quot;))\n        custTable.Columns.Add(&quot;name&quot;, Type.GetType(&quot;System.String&quot;))\n        custTable.Columns.Add(&quot;address&quot;, Type.GetType(&quot;System.String&quot;))\n\n        &#39; set PrimaryKey\n        custTable.Columns(&quot;id&quot;).Unique = True\n        custTable.PrimaryKey = New DataColumn() {custTable.Columns(&quot;id&quot;)}\n\n        &#39; add a RowChanging event handler for the table.\n        AddHandler custTable.RowChanging, _\n               New DataRowChangeEventHandler(AddressOf Row_Changing)\n\n\n        &#39; add ten rows\n        Dim id As Integer\n        For id = 1 To 10\n            custTable.Rows.Add( _\n   New Object() {id, String.Format(&quot;customer{0}&quot;, id), _\n            String.Format(&quot;address{0}&quot;, id)})\n        Next\n\n        custTable.AcceptChanges()\n\n        &#39; change the name column in all the rows\n        Dim row As DataRow\n        For Each row In custTable.Rows\n            row(&quot;name&quot;) = String.Format(&quot;vip{0}&quot;, row(&quot;id&quot;))\n        Next\n\n    End Sub\n\n    Private Sub Row_Changing(ByVal sender As Object, _\n    ByVal e As DataRowChangeEventArgs)\n        Console.WriteLine(&quot;Row_Changing Event: name={0}; action={1}&quot;, _\n         e.Row(&quot;name&quot;), e.Action)\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_RowDeleted\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RowDeleted</div>        \r\n          </div>\r\n    \r\n            <p>Occurs after a row in the table has been deleted.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Data.DataRowChangeEventHandler RowDeleted;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information, see <a href=\"../Topic/Handling%20DataTable%20Events.md\" data-linktype=\"relative-path\">Handling DataTable Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-vb\" name=\"Classic WebData DataTable.RowDeleted Example#1\">    Private Sub DataTableRowDeleted()\n        Dim customerTable As DataTable = New DataTable(&quot;Customers&quot;)\n        &#39; add columns\n        customerTable.Columns.Add(&quot;id&quot;, Type.GetType(&quot;System.Int32&quot;))\n        customerTable.Columns.Add(&quot;name&quot;, Type.GetType(&quot;System.String&quot;))\n        customerTable.Columns.Add(&quot;address&quot;, Type.GetType(&quot;System.String&quot;))\n\n        &#39; set PrimaryKey\n        customerTable.Columns(&quot;id&quot;).Unique = True\n        customerTable.PrimaryKey = New DataColumn() {customerTable.Columns(&quot;id&quot;)}\n\n        &#39; add a RowDeleted event handler for the table.\n        AddHandler customerTable.RowDeleted, New _\n               DataRowChangeEventHandler(AddressOf Row_Deleted)\n\n\n        &#39; add ten rows\n        Dim id As Integer\n        For id = 1 To 10\n            customerTable.Rows.Add( _\n                New Object() {id, String.Format(&quot;customer{0}&quot;, id), _\n            String.Format(&quot;address{0}&quot;, id)})\n        Next\n\n        customerTable.AcceptChanges()\n\n        &#39; Delete all the rows\n        Dim row As DataRow\n        For Each row In customerTable.Rows\n            row.Delete()\n        Next\n    End Sub\n\n    Private Sub Row_Deleted(ByVal sender As Object, _\n    ByVal e As DataRowChangeEventArgs)\n        Console.WriteLine(&quot;Row_Deleted Event: name={0}; action={1}&quot;, _\n         e.Row(&quot;name&quot;, DataRowVersion.Original), e.Action)\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData DataTable.RowDeleted Example#1\">    private static void DataTableRowDeleted()\n    {\n        DataTable customerTable = new DataTable(&quot;Customers&quot;);\n        // add columns\n        customerTable.Columns.Add(&quot;id&quot;, typeof(int));\n        customerTable.Columns.Add(&quot;name&quot;, typeof(string));\n        customerTable.Columns.Add(&quot;address&quot;, typeof(string));\n\n        // set PrimaryKey\n        customerTable.Columns[ &quot;id&quot; ].Unique = true;\n        customerTable.PrimaryKey = new DataColumn[] { customerTable.Columns[&quot;id&quot;] };\n\n        // add a RowDeleted event handler for the table.\n        customerTable.RowDeleted += new DataRowChangeEventHandler(Row_Deleted);\n\n\n        // add ten rows\n        for(int id=1; id&lt;=10; id++)\n        {\n            customerTable.Rows.Add(\n                new object[] { id, string.Format(&quot;customer{0}&quot;, id), \n                string.Format(&quot;address{0}&quot;, id) });\n        }\n\t\n        customerTable.AcceptChanges();\n\n        // Delete all the rows\n        foreach(DataRow row in customerTable.Rows)\n            row.Delete();\n    }\n\n    private static void Row_Deleted(object sender, DataRowChangeEventArgs e)\n    {\n        Console.WriteLine(&quot;Row_Deleted Event: name={0}; action={1}&quot;, \n            e.Row[&quot;name&quot;, DataRowVersion.Original], e.Action);\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_RowDeleting\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RowDeleting</div>        \r\n          </div>\r\n    \r\n            <p>Occurs before a row in the table is about to be deleted.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Data.DataRowChangeEventHandler RowDeleting;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information, see <a href=\"../Topic/Handling%20DataTable%20Events.md\" data-linktype=\"relative-path\">Handling DataTable Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cs\" name=\"Classic WebData DataTable.RowDeleting Example#1\">    private static void DataTableRowDeleting()\n    {\n        DataTable customerTable = new DataTable(&quot;Customers&quot;);\n        // add columns\n        customerTable.Columns.Add( &quot;id&quot;, typeof(int));\n        customerTable.Columns.Add( &quot;name&quot;, typeof(string));\n        customerTable.Columns.Add( &quot;address&quot;, typeof(string));\n\n        // set PrimaryKey\n        customerTable.Columns[ &quot;id&quot; ].Unique = true;\n        customerTable.PrimaryKey = new DataColumn[] \n            { customerTable.Columns[&quot;id&quot;] };\n\n        // add a RowDeleting event handler for the table.\n        customerTable.RowDeleting += new DataRowChangeEventHandler( Row_Deleting );\n\n\n        // add ten rows\n        for( int id=1; id&lt;=10; id++)\n        {\n            customerTable.Rows.Add( \n                new object[] { id, string.Format(&quot;customer{0}&quot;, id), \n                string.Format(&quot;address{0}&quot;, id) });\n        }\n\t\n        customerTable.AcceptChanges();\n\n        // Delete all the rows\n        foreach( DataRow row in customerTable.Rows )\n            row.Delete();\n    }\n\n    private static void Row_Deleting( object sender, \n        DataRowChangeEventArgs e )\n    {\n        Console.WriteLine( &quot;Row_Deleting Event: name={0}; action={1}&quot;, \n            e.Row[&quot;name&quot;], e.Action );\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData DataTable.RowDeleting Example#1\">Private Shared Sub DataTableRowDeleting()\n\tDim customerTable As DataTable = New DataTable(&quot;Customers&quot;)\n\t&#39; add columns\n\tcustomerTable.Columns.Add( &quot;id&quot;, Type.GetType(&quot;System.Int32&quot;))\n\tcustomerTable.Columns.Add( &quot;name&quot;, Type.GetType(&quot;System.String&quot;))\n\tcustomerTable.Columns.Add( &quot;address&quot;, Type.GetType(&quot;System.String&quot;))\n\n\t&#39; set PrimaryKey\n\tcustomerTable.Columns( &quot;id&quot;).Unique = true\n\tcustomerTable.PrimaryKey = New DataColumn() { customerTable.Columns(&quot;id&quot;) }\n\n\t&#39; add a RowDeleting event handler for the table.\n\tAddHandler customerTable.RowDeleting, New _\n        DataRowChangeEventHandler( AddressOf Row_Deleting )\n\n\n\t&#39; add ten rows\n\tDim id As Integer\n\tFor id = 1 To 10\n\t\tcustomerTable.Rows.Add( _\n\t\t\tNew Object() { id, string.Format(&quot;customer{0}&quot;, id), _\n            string.Format(&quot;address{0}&quot;, id) })\n\tNext\n\t\n\tcustomerTable.AcceptChanges()\n\n\t&#39; Delete all the rows\n\tDim row As DataRow\n\tFor Each row In customerTable.Rows \n\t\trow.Delete()\n\tNext\nEnd Sub\n\nPrivate Shared Sub Row_Deleting(sender As Object, _\n    e As DataRowChangeEventArgs)\n\tConsole.WriteLine( &quot;Row_Deleting Event: name={0}; action={1}&quot;, _\n\t\te.Row(&quot;name&quot;), e.Action) \nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_TableCleared\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TableCleared</div>        \r\n          </div>\r\n    \r\n            <p>Occurs after a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> is cleared.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Data.DataTableClearEventHandler TableCleared;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The TableCleared event is fired immediately after all rows have been successfully cleared but before the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_Clear_\" data-linktype=\"relative-path\">Clear</a> method returns control back to the caller. The TableCleared event is not fired if there are any exceptions during the clear operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_TableClearing\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TableClearing</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> is cleared.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Data.DataTableClearEventHandler TableClearing;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The TableClearing event is fired before processing of the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_Clear_\" data-linktype=\"relative-path\">Clear</a> operation begins. This event is always fired when the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_Clear_\" data-linktype=\"relative-path\">Clear</a> method is invoked, even if the table contains zero rows.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_TableNewRow\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TableNewRow</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when a new <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> is inserted.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Data.DataTableNewRowEventHandler TableNewRow;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Fires after a new <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> has been created using <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_NewRow_\" data-linktype=\"relative-path\">NewRow</a>. This event is fired before the invoked <code>NewRow</code> method returns. The new <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> instance is detached; it has not been added to the collection.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_System_ComponentModel_IListSource_ContainsListCollection\">\r\n    \r\n            <a id=\"System_Data_DataTable_System_ComponentModel_IListSource_ContainsListCollection_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IListSource.ContainsListCollection</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.ComponentModel.IListSource.ContainsListCollection*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool System.ComponentModel.IListSource.ContainsListCollection { get; }</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the collection is a collection of <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> objects; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> instance is cast to an <a class=\"xref\" href=\"system.componentmodel.ilistsource\" data-linktype=\"relative-path\">IListSource</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_System_ComponentModel_IListSource_GetList\">\r\n    \r\n            <a id=\"System_Data_DataTable_System_ComponentModel_IListSource_GetList_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IListSource.GetList()</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.ComponentModel.IListSource.GetList*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">System.Collections.IList IListSource.GetList ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> that can be bound to a data source from the object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> instance is cast to an <a class=\"xref\" href=\"system.componentmodel.ilistsource\" data-linktype=\"relative-path\">IListSource</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_System_Xml_Serialization_IXmlSerializable_GetSchema\">\r\n    \r\n            <a id=\"System_Data_DataTable_System_Xml_Serialization_IXmlSerializable_GetSchema_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IXmlSerializable.GetSchema()</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.Xml.Serialization.IXmlSerializable.GetSchema*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">System.Xml.Schema.XmlSchema IXmlSerializable.GetSchema ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.schema.xmlschema\" data-linktype=\"relative-path\">XmlSchema</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.schema.xmlschema\" data-linktype=\"relative-path\">XmlSchema</a> that describes the XML representation of the object that is produced by the <span class=\"xref\">stem.Xml.Serialization.IXmlSerializable.WriteXml*</span> method and consumed by the <span class=\"xref\">stem.Xml.Serialization.IXmlSerializable.ReadXml*</span> method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> instance is cast to an <a class=\"xref\" href=\"system.xml.serialization.ixmlserializable\" data-linktype=\"relative-path\">IXmlSerializable</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_System_Xml_Serialization_IXmlSerializable_ReadXml_System_Xml_XmlReader_\">\r\n    \r\n            <a id=\"System_Data_DataTable_System_Xml_Serialization_IXmlSerializable_ReadXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IXmlSerializable.ReadXml(XmlReader)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.Xml.Serialization.IXmlSerializable.ReadXml*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void IXmlSerializable.ReadXml (System.Xml.XmlReader reader);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>reader</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An XmlReader.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> instance is cast to an <a class=\"xref\" href=\"system.xml.serialization.ixmlserializable\" data-linktype=\"relative-path\">IXmlSerializable</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTable_System_Xml_Serialization_IXmlSerializable_WriteXml_System_Xml_XmlWriter_\">\r\n    \r\n            <a id=\"System_Data_DataTable_System_Xml_Serialization_IXmlSerializable_WriteXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IXmlSerializable.WriteXml(XmlWriter)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.Xml.Serialization.IXmlSerializable.WriteXml*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void IXmlSerializable.WriteXml (System.Xml.XmlWriter writer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>writer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An XmlWriter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> instance is cast to an <a class=\"xref\" href=\"system.xml.serialization.ixmlserializable\" data-linktype=\"relative-path\">IXmlSerializable</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Data.DataTable.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Data.DataTable.yml\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable..ctor\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.AcceptChanges\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.BeginInit\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.BeginLoadData\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.CaseSensitive\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.ChildRelations\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.Clear\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.Clone\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.ColumnChanged\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.add_ColumnChanged\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.remove_ColumnChanged\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.ColumnChanging\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.add_ColumnChanging\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.remove_ColumnChanging\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.Columns\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.Compute\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.Constraints\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.Copy\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.CreateDataReader\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.CreateInstance\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.DataSet\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.DefaultView\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.DisplayExpression\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.EndInit\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.EndLoadData\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.ExtendedProperties\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.fInitInProgress\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.GetChanges\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.GetDataTableSchema\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.GetErrors\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.GetObjectData\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.GetRowType\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.GetSchema\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.HasErrors\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.ImportRow\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.Initialized\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.add_Initialized\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.remove_Initialized\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.IsInitialized\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.Load\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.LoadDataRow\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.Locale\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.Merge\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.MinimumCapacity\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.Namespace\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.NewRow\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.NewRowArray\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.NewRowFromBuilder\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.OnColumnChanged\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.OnColumnChanging\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.OnPropertyChanging\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.OnRemoveColumn\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.OnRowChanged\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.OnRowChanging\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.OnRowDeleted\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.OnRowDeleting\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.OnTableCleared\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.OnTableClearing\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.OnTableNewRow\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.ParentRelations\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.Prefix\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.PrimaryKey\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.ReadXml\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.ReadXmlSchema\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.ReadXmlSerializable\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.RejectChanges\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.RemotingFormat\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.Reset\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.RowChanged\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.add_RowChanged\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.remove_RowChanged\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.RowChanging\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.add_RowChanging\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.remove_RowChanging\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.RowDeleted\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.add_RowDeleted\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.remove_RowDeleted\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.RowDeleting\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.add_RowDeleting\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.remove_RowDeleting\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.Rows\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.Select\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.Site\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.IListSource.ContainsListCollection\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.IListSource.GetList\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.IXmlSerializable.GetSchema\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.IXmlSerializable.ReadXml\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.IXmlSerializable.WriteXml\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.TableCleared\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.add_TableCleared\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.remove_TableCleared\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.TableClearing\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.add_TableClearing\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.remove_TableClearing\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.TableName\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.TableNewRow\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.add_TableNewRow\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.remove_TableNewRow\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.ToString\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.WriteXml\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTable.WriteXmlSchema\">\r\n<meta name=\"APILocation\" content=\"System.Data.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"a0d8121a-8216-9ad0-7187-73d70dbddbb8\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents one table of in-memory data.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Data/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Data.DataTable\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Data.DataTable.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Data.DataTable.yml","open_to_public_contributors":true,"api_name":["System.Data.DataTable","System.Data.DataTable..ctor","System.Data.DataTable.AcceptChanges","System.Data.DataTable.BeginInit","System.Data.DataTable.BeginLoadData","System.Data.DataTable.CaseSensitive","System.Data.DataTable.ChildRelations","System.Data.DataTable.Clear","System.Data.DataTable.Clone","System.Data.DataTable.ColumnChanged","System.Data.DataTable.add_ColumnChanged","System.Data.DataTable.remove_ColumnChanged","System.Data.DataTable.ColumnChanging","System.Data.DataTable.add_ColumnChanging","System.Data.DataTable.remove_ColumnChanging","System.Data.DataTable.Columns","System.Data.DataTable.Compute","System.Data.DataTable.Constraints","System.Data.DataTable.Copy","System.Data.DataTable.CreateDataReader","System.Data.DataTable.CreateInstance","System.Data.DataTable.DataSet","System.Data.DataTable.DefaultView","System.Data.DataTable.DisplayExpression","System.Data.DataTable.EndInit","System.Data.DataTable.EndLoadData","System.Data.DataTable.ExtendedProperties","System.Data.DataTable.fInitInProgress","System.Data.DataTable.GetChanges","System.Data.DataTable.GetDataTableSchema","System.Data.DataTable.GetErrors","System.Data.DataTable.GetObjectData","System.Data.DataTable.GetRowType","System.Data.DataTable.GetSchema","System.Data.DataTable.HasErrors","System.Data.DataTable.ImportRow","System.Data.DataTable.Initialized","System.Data.DataTable.add_Initialized","System.Data.DataTable.remove_Initialized","System.Data.DataTable.IsInitialized","System.Data.DataTable.Load","System.Data.DataTable.LoadDataRow","System.Data.DataTable.Locale","System.Data.DataTable.Merge","System.Data.DataTable.MinimumCapacity","System.Data.DataTable.Namespace","System.Data.DataTable.NewRow","System.Data.DataTable.NewRowArray","System.Data.DataTable.NewRowFromBuilder","System.Data.DataTable.OnColumnChanged","System.Data.DataTable.OnColumnChanging","System.Data.DataTable.OnPropertyChanging","System.Data.DataTable.OnRemoveColumn","System.Data.DataTable.OnRowChanged","System.Data.DataTable.OnRowChanging","System.Data.DataTable.OnRowDeleted","System.Data.DataTable.OnRowDeleting","System.Data.DataTable.OnTableCleared","System.Data.DataTable.OnTableClearing","System.Data.DataTable.OnTableNewRow","System.Data.DataTable.ParentRelations","System.Data.DataTable.Prefix","System.Data.DataTable.PrimaryKey","System.Data.DataTable.ReadXml","System.Data.DataTable.ReadXmlSchema","System.Data.DataTable.ReadXmlSerializable","System.Data.DataTable.RejectChanges","System.Data.DataTable.RemotingFormat","System.Data.DataTable.Reset","System.Data.DataTable.RowChanged","System.Data.DataTable.add_RowChanged","System.Data.DataTable.remove_RowChanged","System.Data.DataTable.RowChanging","System.Data.DataTable.add_RowChanging","System.Data.DataTable.remove_RowChanging","System.Data.DataTable.RowDeleted","System.Data.DataTable.add_RowDeleted","System.Data.DataTable.remove_RowDeleted","System.Data.DataTable.RowDeleting","System.Data.DataTable.add_RowDeleting","System.Data.DataTable.remove_RowDeleting","System.Data.DataTable.Rows","System.Data.DataTable.Select","System.Data.DataTable.Site","System.Data.DataTable.IListSource.ContainsListCollection","System.Data.DataTable.IListSource.GetList","System.Data.DataTable.IXmlSerializable.GetSchema","System.Data.DataTable.IXmlSerializable.ReadXml","System.Data.DataTable.IXmlSerializable.WriteXml","System.Data.DataTable.TableCleared","System.Data.DataTable.add_TableCleared","System.Data.DataTable.remove_TableCleared","System.Data.DataTable.TableClearing","System.Data.DataTable.add_TableClearing","System.Data.DataTable.remove_TableClearing","System.Data.DataTable.TableName","System.Data.DataTable.TableNewRow","System.Data.DataTable.add_TableNewRow","System.Data.DataTable.remove_TableNewRow","System.Data.DataTable.ToString","System.Data.DataTable.WriteXml","System.Data.DataTable.WriteXmlSchema"],"api_location":["System.Data.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Data.DataTable","System::Data::DataTable","System.Data.DataTable.#ctor","System::Data::DataTable::#ctor","System.Data.DataTable.AcceptChanges","System::Data::DataTable::AcceptChanges","System.Data.DataTable.BeginInit","System::Data::DataTable::BeginInit","System.Data.DataTable.BeginLoadData","System::Data::DataTable::BeginLoadData","System.Data.DataTable.CaseSensitive","System::Data::DataTable::CaseSensitive","System.Data.DataTable.ChildRelations","System::Data::DataTable::ChildRelations","System.Data.DataTable.Clear","System::Data::DataTable::Clear","System.Data.DataTable.Clone","System::Data::DataTable::Clone","System.Data.DataTable.ColumnChanged","System::Data::DataTable::ColumnChanged","System.Data.DataTable.ColumnChanging","System::Data::DataTable::ColumnChanging","System.Data.DataTable.Columns","System::Data::DataTable::Columns","System.Data.DataTable.Compute","System::Data::DataTable::Compute","System.Data.DataTable.Constraints","System::Data::DataTable::Constraints","System.Data.DataTable.Copy","System::Data::DataTable::Copy","System.Data.DataTable.CreateDataReader","System::Data::DataTable::CreateDataReader","System.Data.DataTable.CreateInstance","System::Data::DataTable::CreateInstance","System.Data.DataTable.DataSet","System::Data::DataTable::DataSet","System.Data.DataTable.DefaultView","System::Data::DataTable::DefaultView","System.Data.DataTable.DisplayExpression","System::Data::DataTable::DisplayExpression","System.Data.DataTable.EndInit","System::Data::DataTable::EndInit","System.Data.DataTable.EndLoadData","System::Data::DataTable::EndLoadData","System.Data.DataTable.ExtendedProperties","System::Data::DataTable::ExtendedProperties","System.Data.DataTable.fInitInProgress","System::Data::DataTable::fInitInProgress","System.Data.DataTable.GetChanges","System::Data::DataTable::GetChanges","System.Data.DataTable.GetDataTableSchema","System::Data::DataTable::GetDataTableSchema","System.Data.DataTable.GetErrors","System::Data::DataTable::GetErrors","System.Data.DataTable.GetObjectData","System::Data::DataTable::GetObjectData","System.Data.DataTable.GetRowType","System::Data::DataTable::GetRowType","System.Data.DataTable.GetSchema","System::Data::DataTable::GetSchema","System.Data.DataTable.HasErrors","System::Data::DataTable::HasErrors","System.Data.DataTable.ImportRow","System::Data::DataTable::ImportRow","System.Data.DataTable.Initialized","System::Data::DataTable::Initialized","System.Data.DataTable.IsInitialized","System::Data::DataTable::IsInitialized","System.Data.DataTable.Load","System::Data::DataTable::Load","System.Data.DataTable.LoadDataRow","System::Data::DataTable::LoadDataRow","System.Data.DataTable.Locale","System::Data::DataTable::Locale","System.Data.DataTable.Merge","System::Data::DataTable::Merge","System.Data.DataTable.MinimumCapacity","System::Data::DataTable::MinimumCapacity","System.Data.DataTable.Namespace","System::Data::DataTable::Namespace","System.Data.DataTable.NewRow","System::Data::DataTable::NewRow","System.Data.DataTable.NewRowArray","System::Data::DataTable::NewRowArray","System.Data.DataTable.NewRowFromBuilder","System::Data::DataTable::NewRowFromBuilder","System.Data.DataTable.OnColumnChanged","System::Data::DataTable::OnColumnChanged","System.Data.DataTable.OnColumnChanging","System::Data::DataTable::OnColumnChanging","System.Data.DataTable.OnPropertyChanging","System::Data::DataTable::OnPropertyChanging","System.Data.DataTable.OnRemoveColumn","System::Data::DataTable::OnRemoveColumn","System.Data.DataTable.OnRowChanged","System::Data::DataTable::OnRowChanged","System.Data.DataTable.OnRowChanging","System::Data::DataTable::OnRowChanging","System.Data.DataTable.OnRowDeleted","System::Data::DataTable::OnRowDeleted","System.Data.DataTable.OnRowDeleting","System::Data::DataTable::OnRowDeleting","System.Data.DataTable.OnTableCleared","System::Data::DataTable::OnTableCleared","System.Data.DataTable.OnTableClearing","System::Data::DataTable::OnTableClearing","System.Data.DataTable.OnTableNewRow","System::Data::DataTable::OnTableNewRow","System.Data.DataTable.ParentRelations","System::Data::DataTable::ParentRelations","System.Data.DataTable.Prefix","System::Data::DataTable::Prefix","System.Data.DataTable.PrimaryKey","System::Data::DataTable::PrimaryKey","System.Data.DataTable.ReadXml","System::Data::DataTable::ReadXml","System.Data.DataTable.ReadXmlSchema","System::Data::DataTable::ReadXmlSchema","System.Data.DataTable.ReadXmlSerializable","System::Data::DataTable::ReadXmlSerializable","System.Data.DataTable.RejectChanges","System::Data::DataTable::RejectChanges","System.Data.DataTable.RemotingFormat","System::Data::DataTable::RemotingFormat","System.Data.DataTable.Reset","System::Data::DataTable::Reset","System.Data.DataTable.RowChanged","System::Data::DataTable::RowChanged","System.Data.DataTable.RowChanging","System::Data::DataTable::RowChanging","System.Data.DataTable.RowDeleted","System::Data::DataTable::RowDeleted","System.Data.DataTable.RowDeleting","System::Data::DataTable::RowDeleting","System.Data.DataTable.Rows","System::Data::DataTable::Rows","System.Data.DataTable.Select","System::Data::DataTable::Select","System.Data.DataTable.Site","System::Data::DataTable::Site","System.Data.DataTable.System#ComponentModel#IListSource#ContainsListCollection","System::Data::DataTable::System#ComponentModel#IListSource#ContainsListCollection","System.Data.DataTable.System#ComponentModel#IListSource#GetList","System::Data::DataTable::System#ComponentModel#IListSource#GetList","System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#GetSchema","System::Data::DataTable::System#Xml#Serialization#IXmlSerializable#GetSchema","System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#ReadXml","System::Data::DataTable::System#Xml#Serialization#IXmlSerializable#ReadXml","System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#WriteXml","System::Data::DataTable::System#Xml#Serialization#IXmlSerializable#WriteXml","System.Data.DataTable.TableCleared","System::Data::DataTable::TableCleared","System.Data.DataTable.TableClearing","System::Data::DataTable::TableClearing","System.Data.DataTable.TableName","System::Data::DataTable::TableName","System.Data.DataTable.TableNewRow","System::Data::DataTable::TableNewRow","System.Data.DataTable.ToString","System::Data::DataTable::ToString","System.Data.DataTable.WriteXml","System::Data::DataTable::WriteXml","System.Data.DataTable.WriteXmlSchema","System::Data::DataTable::WriteXmlSchema"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"a0d8121a-8216-9ad0-7187-73d70dbddbb8","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Data/DataTable.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"DataTable class | Microsoft Docs","_op_ogTitle":"DataTable class","description":"Represents one table of in-memory data.\n","toc_asset_id":"_splitted/System.Data/toc.json","toc_rel":"_splitted/System.Data/toc.json","source_url":"","ms.assetid":"System.Data.DataTable","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.data.datatable","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.data.datatable","fileRelativePath":"System.Data.DataTable.html"},"themesRelativePathToOutputRoot":"_themes/"}