{"content":"    \r\n    <h1 id=\"System_Net_Sockets_UdpClient\">\r\n      <span class=\"lang-csharp\">UdpClient</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides User Datagram Protocol (UDP) network services.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class UdpClient : IDisposable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">UdpClient</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The UdpClient class provides simple methods for sending and receiving connectionless UDP datagrams in blocking synchronous mode. Because UDP is a connectionless transport protocol, you do not need to establish a remote host connection prior to sending and receiving data. You do, however, have the option of establishing a default remote host in one of the following two ways:  </p>\n<ul>\n<li><p>Create an instance of the UdpClient class using the remote host name and port number as parameters.  </p>\n</li>\n<li><p>Create an instance of the UdpClient class and then call the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Connect_\" data-linktype=\"relative-path\">Connect</a> method.  </p>\n<p>You can use any of the send methods provided in the UdpClient to send data to a remote device. Use the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Receive_\" data-linktype=\"relative-path\">Receive</a> method to receive data from remote hosts.  </p>\n</li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> Do not call [Send(Byte&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt; using a host name or <a class=\"xref\" href=\"system.net.ipendpoint\" data-linktype=\"relative-path\">IPEndPoint</a> if you have already specified a default remote host. If you do, UdpClient will throw an exception.  </p>\n</div>\n<p> UdpClient methods also allow you to send and receive multicast datagrams. Use the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_JoinMulticastGroup_\" data-linktype=\"relative-path\">JoinMulticastGroup</a> method to subscribe a UdpClient to a multicast group. Use the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_DropMulticastGroup_\" data-linktype=\"relative-path\">DropMulticastGroup</a> method to unsubscribe a UdpClient from a multicast group.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_UdpClient__ctor\" data-linktype=\"self-bookmark\">UdpClient()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_UdpClient__ctor_System_Int32_\" data-linktype=\"self-bookmark\">UdpClient(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> class and binds it to the local port number provided.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_UdpClient__ctor_System_Net_IPEndPoint_\" data-linktype=\"self-bookmark\">UdpClient(IPEndPoint)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> class and binds it to the specified local endpoint.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_UdpClient__ctor_System_Net_Sockets_AddressFamily_\" data-linktype=\"self-bookmark\">UdpClient(AddressFamily)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_UdpClient__ctor_System_Int32_System_Net_Sockets_AddressFamily_\" data-linktype=\"self-bookmark\">UdpClient(Int32,AddressFamily)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> class and binds it to the local port number provided.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_UdpClient__ctor_System_String_System_Int32_\" data-linktype=\"self-bookmark\">UdpClient(String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> class and establishes a default remote host.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_UdpClient_Active\" data-linktype=\"self-bookmark\">Active</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether a default remote host has been established.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_UdpClient_Available\" data-linktype=\"self-bookmark\">Available</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the amount of data received from the network that is available to read.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_UdpClient_Client\" data-linktype=\"self-bookmark\">Client</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the underlying network <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_UdpClient_DontFragment\" data-linktype=\"self-bookmark\">DontFragment</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that specifies whether the <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> allows Internet Protocol (IP) datagrams to be fragmented.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_UdpClient_EnableBroadcast\" data-linktype=\"self-bookmark\">EnableBroadcast</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that specifies whether the <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> may send or receive broadcast packets.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_UdpClient_ExclusiveAddressUse\" data-linktype=\"self-bookmark\">ExclusiveAddressUse</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that specifies whether the <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> allows only one client to use a port.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_UdpClient_MulticastLoopback\" data-linktype=\"self-bookmark\">MulticastLoopback</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that specifies whether outgoing multicast packets are delivered to the sending application.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_UdpClient_Ttl\" data-linktype=\"self-bookmark\">Ttl</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that specifies the Time to Live (TTL) value of Internet Protocol (IP) packets sent by the <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_UdpClient_AllowNatTraversal_System_Boolean_\" data-linktype=\"self-bookmark\">AllowNatTraversal(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Enables or disables Network Address Translation (NAT) traversal on a <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_UdpClient_BeginReceive_System_AsyncCallback_System_Object_\" data-linktype=\"self-bookmark\">BeginReceive(AsyncCallback,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Receives a datagram from a remote host asynchronously.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_UdpClient_BeginSend_System_Byte___System_Int32_System_AsyncCallback_System_Object_\" data-linktype=\"self-bookmark\">BeginSend(Byte[],Int32,AsyncCallback,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sends a datagram to a remote host asynchronously. The destination was specified previously by a call to <span class=\"xref\">stem.Net.Sockets.UdpClient.Connect*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_UdpClient_BeginSend_System_Byte___System_Int32_System_Net_IPEndPoint_System_AsyncCallback_System_Object_\" data-linktype=\"self-bookmark\">BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sends a datagram to a destination asynchronously. The destination is specified by a <a class=\"xref\" href=\"system.net.endpoint\" data-linktype=\"relative-path\">EndPoint</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_UdpClient_BeginSend_System_Byte___System_Int32_System_String_System_Int32_System_AsyncCallback_System_Object_\" data-linktype=\"self-bookmark\">BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sends a datagram to a destination asynchronously. The destination is specified by the host name and port number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_UdpClient_Close\" data-linktype=\"self-bookmark\">Close()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Closes the UDP connection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_UdpClient_Connect_System_Net_IPEndPoint_\" data-linktype=\"self-bookmark\">Connect(IPEndPoint)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Establishes a default remote host using the specified network endpoint.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_UdpClient_Connect_System_Net_IPAddress_System_Int32_\" data-linktype=\"self-bookmark\">Connect(IPAddress,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Establishes a default remote host using the specified IP address and port number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_UdpClient_Connect_System_String_System_Int32_\" data-linktype=\"self-bookmark\">Connect(String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Establishes a default remote host using the specified host name and port number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_UdpClient_Dispose\" data-linktype=\"self-bookmark\">Dispose()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases the managed and unmanaged resources used by the <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_UdpClient_Dispose_System_Boolean_\" data-linktype=\"self-bookmark\">Dispose(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases the unmanaged resources used by the <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> and optionally releases the managed resources.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_UdpClient_DropMulticastGroup_System_Net_IPAddress_\" data-linktype=\"self-bookmark\">DropMulticastGroup(IPAddress)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Leaves a multicast group.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_UdpClient_DropMulticastGroup_System_Net_IPAddress_System_Int32_\" data-linktype=\"self-bookmark\">DropMulticastGroup(IPAddress,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Leaves a multicast group.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_UdpClient_EndReceive_System_IAsyncResult_System_Net_IPEndPoint__\" data-linktype=\"self-bookmark\">EndReceive(IAsyncResult,IPEndPoint)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Ends a pending asynchronous receive.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_UdpClient_EndSend_System_IAsyncResult_\" data-linktype=\"self-bookmark\">EndSend(IAsyncResult)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Ends a pending asynchronous send.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_UdpClient_JoinMulticastGroup_System_Net_IPAddress_\" data-linktype=\"self-bookmark\">JoinMulticastGroup(IPAddress)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds a <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> to a multicast group.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_UdpClient_JoinMulticastGroup_System_Int32_System_Net_IPAddress_\" data-linktype=\"self-bookmark\">JoinMulticastGroup(Int32,IPAddress)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds a <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> to a multicast group.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_UdpClient_JoinMulticastGroup_System_Net_IPAddress_System_Int32_\" data-linktype=\"self-bookmark\">JoinMulticastGroup(IPAddress,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds a <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> to a multicast group with the specified Time to Live (TTL).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_UdpClient_JoinMulticastGroup_System_Net_IPAddress_System_Net_IPAddress_\" data-linktype=\"self-bookmark\">JoinMulticastGroup(IPAddress,IPAddress)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds a <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> to a multicast group.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_UdpClient_Receive_System_Net_IPEndPoint__\" data-linktype=\"self-bookmark\">Receive(IPEndPoint)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a UDP datagram that was sent by a remote host.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_UdpClient_ReceiveAsync\" data-linktype=\"self-bookmark\">ReceiveAsync()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a UDP datagram asynchronously that was sent by a remote host.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_UdpClient_Send_System_Byte___System_Int32_\" data-linktype=\"self-bookmark\">Send(Byte[],Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sends a UDP datagram to a remote host.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_UdpClient_Send_System_Byte___System_Int32_System_Net_IPEndPoint_\" data-linktype=\"self-bookmark\">Send(Byte[],Int32,IPEndPoint)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sends a UDP datagram to the host at the specified remote endpoint.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_UdpClient_Send_System_Byte___System_Int32_System_String_System_Int32_\" data-linktype=\"self-bookmark\">Send(Byte[],Int32,String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sends a UDP datagram to a specified port on a specified remote host.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_UdpClient_SendAsync_System_Byte___System_Int32_\" data-linktype=\"self-bookmark\">SendAsync(Byte[],Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sends a UDP datagram asynchronously to a remote host.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_UdpClient_SendAsync_System_Byte___System_Int32_System_Net_IPEndPoint_\" data-linktype=\"self-bookmark\">SendAsync(Byte[],Int32,IPEndPoint)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sends a UDP datagram asynchronously to a remote host.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_UdpClient_SendAsync_System_Byte___System_Int32_System_String_System_Int32_\" data-linktype=\"self-bookmark\">SendAsync(Byte[],Int32,String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sends a UDP datagram asynchronously to a remote host.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_UdpClient__ctor\">\r\n    \r\n            <a id=\"System_Net_Sockets_UdpClient__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UdpClient()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public UdpClient ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing the socket. See the Remarks section for more information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor creates a new <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> and allows the underlying service provider to assign the most appropriate local IPv4 address and port number. If this constructor is used, the <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> instance is set with an address family of IPv4 that cannot be changed or overwritten by a connect method call with an IPv6 target.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If you receive a <a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a>, use <a class=\"xref\" href=\"system.net.sockets.socketexception#System_Net_Sockets_SocketException_ErrorCode_\" data-linktype=\"relative-path\">ErrorCode</a> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  </p>\n</div>\n<p> This constructor is not suitable for joining a multicast group because it does not perform socket binding. Also, it works only with IPv4 address types.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the default constructor to create an instance of the <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic UdpClient.PublicMethodsAndPropertiesExample#4\">           //Creates an instance of the UdpClient class using the default constructor.\n           UdpClient udpClient = new UdpClient();\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic UdpClient.PublicMethodsAndPropertiesExample#4\">         //Creates an instance of the UdpClient class using the default constructor.\n         UdpClient^ udpClient = gcnew UdpClient;\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic UdpClient.PublicMethodsAndPropertiesExample#4\">                  &#39;Creates an instance of the UdpClient class using the default constructor.\n                  Dim udpClient As New UdpClient()\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_UdpClient__ctor_System_Int32_\">\r\n    \r\n            <a id=\"System_Net_Sockets_UdpClient__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UdpClient(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> class and binds it to the local port number provided.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public UdpClient (int port);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>port</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The local port number from which you intend to communicate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>port</code> parameter is greater than <a class=\"xref\" href=\"system.net.ipendpoint#System_Net_IPEndPoint_MaxPort\" data-linktype=\"relative-path\">MaxPort</a> or less than <a class=\"xref\" href=\"system.net.ipendpoint#System_Net_IPEndPoint_MinPort\" data-linktype=\"relative-path\">MinPort</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing the socket. See the Remarks section for more information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor creates an underlying <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> and binds it to the port number from which you intend to communicate. Use this constructor if you are only interested in setting the local port number. The underlying service provider will assign the local IP address. If you pass 0 to the constructor, the underlying service provider will assign a port number. If this constructor is used, the <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> instance is set with an address family of IPv4 that cannot be changed or overwritten by a connect method call with an IPv6 target.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If you receive a <a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a>, use <a class=\"xref\" href=\"system.net.sockets.socketexception#System_Net_Sockets_SocketException_ErrorCode_\" data-linktype=\"relative-path\">ErrorCode</a> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  </p>\n</div>\n<p> This constructor works only with IPv4 address types.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates using a local port number to create an instance of the <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic UdpClient.PublicMethodsAndPropertiesExample#1\">           //Creates an instance of the UdpClient class to listen on\n           // the default interface using a particular port.\n           try{\n                    UdpClient udpClient = new UdpClient(11000);\n           }  \n           catch (Exception e ) {\n                     Console.WriteLine(e.ToString());\n             }\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic UdpClient.PublicMethodsAndPropertiesExample#1\">         //Creates an instance of the UdpClient class to listen on\n         // the default interface using a particular port.\n         try\n         {\n            UdpClient^ udpClient = gcnew UdpClient( 11000 );\n         }\n         catch ( Exception^ e ) \n         {\n            Console::WriteLine( e-&gt;ToString() );\n         }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic UdpClient.PublicMethodsAndPropertiesExample#1\">         &#39;Creates an instance of the UdpClient class to listen on \n         &#39;the default interface using a particular port.\n         Try\n            Dim udpClient As New UdpClient(11000)\n         Catch e As Exception\n            Console.WriteLine(e.ToString())\n         End Try\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_UdpClient__ctor_System_Net_IPEndPoint_\">\r\n    \r\n            <a id=\"System_Net_Sockets_UdpClient__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UdpClient(IPEndPoint)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> class and binds it to the specified local endpoint.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public UdpClient (System.Net.IPEndPoint localEP);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>localEP</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.ipendpoint\" data-linktype=\"relative-path\">IPEndPoint</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.net.ipendpoint\" data-linktype=\"relative-path\">IPEndPoint</a> that respresents the local endpoint to which you bind the UDP connection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>localEP</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing the socket. See the Remarks section for more information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor creates a new <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> and binds it to the <a class=\"xref\" href=\"system.net.ipendpoint\" data-linktype=\"relative-path\">IPEndPoint</a> specified by the <code>localEP</code> parameter. Before you call this constructor, you must create an <a class=\"xref\" href=\"system.net.ipendpoint\" data-linktype=\"relative-path\">IPEndPoint</a> using the IP address and port number from which you intend to send and receive data. You do not need to specify a local IP address and port number for sending and receiving data. If you do not, the underlying service provider will assign the most appropriate local IP address and port number.  </p>\n<p> If this constructor is used, the <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> instance is set with the address family specified by the <code>localEP</code> parameter  that cannot be changed or overwritten by a connect method call with a different address family.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If you receive a <a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a>, use <a class=\"xref\" href=\"system.net.sockets.socketexception#System_Net_Sockets_SocketException_ErrorCode_\" data-linktype=\"relative-path\">ErrorCode</a> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to create an instance of the <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> class using a local endpoint.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic UdpClient.PublicMethodsAndPropertiesExample#2\">\n           //Creates an instance of the UdpClient class using a local endpoint.\n            IPAddress ipAddress = Dns.Resolve(Dns.GetHostName()).AddressList[0];\n            IPEndPoint ipLocalEndPoint = new IPEndPoint(ipAddress, 11000);\n           \n           try{\n                UdpClient udpClient = new UdpClient(ipLocalEndPoint);\n           }\n           catch (Exception e ) {\n                      Console.WriteLine(e.ToString());\n           }\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic UdpClient.PublicMethodsAndPropertiesExample#2\">         //Creates an instance of the UdpClient class using a local endpoint.\n         IPAddress^ ipAddress = Dns::Resolve( Dns::GetHostName() )-&gt;AddressList[ 0 ];\n         IPEndPoint^ ipLocalEndPoint = gcnew IPEndPoint( ipAddress,11000 );\n\n         try\n         {\n            UdpClient^ udpClient = gcnew UdpClient( ipLocalEndPoint );\n         }\n         catch ( Exception^ e ) \n         {\n            Console::WriteLine( e-&gt;ToString() );\n         }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic UdpClient.PublicMethodsAndPropertiesExample#2\">            &#39;Creates an instance of the UdpClient class using a local endpoint.\n            Dim ipAddress As IPAddress = Dns.Resolve(Dns.GetHostName()).AddressList(0)\n            Dim ipLocalEndPoint As New IPEndPoint(ipAddress, 11000)\n            \n            Try\n               Dim udpClient As New UdpClient(ipLocalEndPoint)\n            Catch e As Exception\n               Console.WriteLine(e.ToString())\n            End Try\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_UdpClient__ctor_System_Net_Sockets_AddressFamily_\">\r\n    \r\n            <a id=\"System_Net_Sockets_UdpClient__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UdpClient(AddressFamily)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public UdpClient (System.Net.Sockets.AddressFamily family);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>family</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.addressfamily\" data-linktype=\"relative-path\">AddressFamily</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.net.sockets.addressfamily\" data-linktype=\"relative-path\">AddressFamily</a> values that specifies the addressing scheme of the socket.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>family</code> is not <a class=\"xref\" href=\"system.net.sockets.addressfamily\" data-linktype=\"relative-path\">AddressFamily</a> or <a class=\"xref\" href=\"system.net.sockets.addressfamily\" data-linktype=\"relative-path\">AddressFamily</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing the socket. See the Remarks section for more information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>family</code> parameter determines whether the listener uses an IP version 4 address (IPv4) or an IP version 6 (IPv6) address. To use an IPv4 address, pass the <a class=\"xref\" href=\"system.net.sockets.addressfamily\" data-linktype=\"relative-path\">AddressFamily</a> value. To use an IPv6 address, pass the <a class=\"xref\" href=\"system.net.sockets.addressfamily\" data-linktype=\"relative-path\">AddressFamily</a> value. Passing any other value will cause the method to throw an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>.  </p>\n<p> If this constructor is used, the <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> instance is set with the address family specified by the <code>family</code> parameter  that cannot be changed or overwritten by a connect method call with a different address family.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If you receive a <a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a>, use <a class=\"xref\" href=\"system.net.sockets.socketexception#System_Net_Sockets_SocketException_ErrorCode_\" data-linktype=\"relative-path\">ErrorCode</a> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  </p>\n</div>\n<p> The UdpClient is not suitable for joining a multicast group because it does not perform socket binding.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_UdpClient__ctor_System_Int32_System_Net_Sockets_AddressFamily_\">\r\n    \r\n            <a id=\"System_Net_Sockets_UdpClient__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UdpClient(Int32,AddressFamily)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> class and binds it to the local port number provided.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public UdpClient (int port, System.Net.Sockets.AddressFamily family);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>port</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The port on which to listen for incoming connection attempts.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>family</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.addressfamily\" data-linktype=\"relative-path\">AddressFamily</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.net.sockets.addressfamily\" data-linktype=\"relative-path\">AddressFamily</a> values that specifies the addressing scheme of the socket.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>family</code> is not <a class=\"xref\" href=\"system.net.sockets.addressfamily\" data-linktype=\"relative-path\">AddressFamily</a> or <a class=\"xref\" href=\"system.net.sockets.addressfamily\" data-linktype=\"relative-path\">AddressFamily</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>port</code> is greater than <a class=\"xref\" href=\"system.net.ipendpoint#System_Net_IPEndPoint_MaxPort\" data-linktype=\"relative-path\">MaxPort</a> or less than <a class=\"xref\" href=\"system.net.ipendpoint#System_Net_IPEndPoint_MinPort\" data-linktype=\"relative-path\">MinPort</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing the socket. See the Remarks section for more information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor creates an underlying <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> and binds it to the port number from which you intend to communicate.  </p>\n<p> The <code>family</code> parameter determines whether the listener uses an IP version 4 address (IPv4) or an IP version 6 (IPv6) address. To use an IPv4 address, pass the <a class=\"xref\" href=\"system.net.sockets.addressfamily\" data-linktype=\"relative-path\">AddressFamily</a> value. To use an IPv6 address, pass the <a class=\"xref\" href=\"system.net.sockets.addressfamily\" data-linktype=\"relative-path\">AddressFamily</a> value. Passing any other value will cause the method to throw an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>.  </p>\n<p> If this constructor is used, the <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> instance is set with the address family specified by the <code>family</code> parameter  that cannot be changed or overwritten by a connect method call with a different address family.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If you receive a <a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a>, use <a class=\"xref\" href=\"system.net.sockets.socketexception#System_Net_Sockets_SocketException_ErrorCode_\" data-linktype=\"relative-path\">ErrorCode</a> to obtain the specific error code. Once you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to create a UDP client to use in a multicast group.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Net.Sockets.UdpClient.JoinMulticastGroup#3\">         // Bind and listen on port 2000. This constructor creates a socket\n         // and binds it to the port on which to receive data. The family\n         // parameter specifies that this connection uses an IPv6 address.\n         clientOriginator = gcnew UdpClient( 2000,AddressFamily::InterNetworkV6 );\n         \n         // Join or create a multicast group. The multicast address ranges\n         // to use are specified in RFC#2375. You are free to use\n         // different addresses.\n         // Transform the String* address into the internal format.\n         m_GrpAddr = IPAddress::Parse( &quot;FF01::1&quot; );\n         \n         // Display the multicast address used.\n         Console::WriteLine( &quot;Multicast Address: [ {0}]&quot;, m_GrpAddr );\n         \n         // Exercise the use of the IPv6MulticastOption.\n         Console::WriteLine( &quot;Instantiate IPv6MulticastOption(IPAddress)&quot; );\n         \n         // Instantiate IPv6MulticastOption using one of the\n         // overloaded constructors.\n         IPv6MulticastOption^ ipv6MulticastOption = gcnew IPv6MulticastOption( m_GrpAddr );\n         \n         // Store the IPAdress multicast options.\n         IPAddress^ group = ipv6MulticastOption-&gt;Group;\n         __int64 interfaceIndex = ipv6MulticastOption-&gt;InterfaceIndex;\n         \n         // Display IPv6MulticastOption properties.\n         Console::WriteLine( &quot;IPv6MulticastOption::Group: [ {0}]&quot;, group );\n         Console::WriteLine( &quot;IPv6MulticastOption::InterfaceIndex: [ {0}]&quot;, interfaceIndex );\n         \n         // Instantiate IPv6MulticastOption using another\n         // overloaded constructor.\n         IPv6MulticastOption^ ipv6MulticastOption2 = gcnew IPv6MulticastOption( group,interfaceIndex );\n         \n         // Store the IPAdress multicast options.\n         group = ipv6MulticastOption2-&gt;Group;\n         interfaceIndex = ipv6MulticastOption2-&gt;InterfaceIndex;\n         \n         // Display the IPv6MulticastOption2 properties.\n         Console::WriteLine( &quot;IPv6MulticastOption::Group: [ {0} ]&quot;, group );\n         Console::WriteLine( &quot;IPv6MulticastOption::InterfaceIndex: [ {0} ]&quot;, interfaceIndex );\n         \n         // Join the specified multicast group using one of the\n         // JoinMulticastGroup overloaded methods.\n         clientOriginator-&gt;JoinMulticastGroup( (int)interfaceIndex, group );\n         \n         // Define the endpoint data port. Note that this port number\n         // must match the ClientTarget UDP port number which is the\n         // port on which the ClientTarget is receiving data.\n         m_ClientTargetdest = gcnew IPEndPoint( m_GrpAddr,1000 );\n         \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Net.Sockets.UdpClient.JoinMulticastGroup#3\">         &#39; Bind and listen on port 2000. This constructor creates a socket \n         &#39; and binds it to the port on which to receive data. The family \n         &#39; parameter specifies that this connection uses an IPv6 address.\n         clientOriginator = New UdpClient(2000, AddressFamily.InterNetworkV6)\n         \n         &#39; Join or create a multicast group. The multicast address ranges \n         &#39; to use are specified in RFC#2375. You are free to use \n         &#39; different addresses.\n         &#39; Transform the string address into the internal format.\n         m_GrpAddr = IPAddress.Parse(&quot;FF01::1&quot;)\n         \n         &#39; Display the multicast address used.\n         Console.WriteLine((&quot;Multicast Address: [&quot; + m_GrpAddr.ToString() + &quot;]&quot;))\n         \n         &#39; Exercise the use of the IPv6MulticastOption.\n         Console.WriteLine(&quot;Instantiate IPv6MulticastOption(IPAddress)&quot;)\n         \n         &#39; Instantiate IPv6MulticastOption using one of the \n         &#39; overloaded constructors.\n         Dim ipv6MulticastOption As New IPv6MulticastOption(m_GrpAddr)\n         \n         &#39; Store the IPAdress multicast options.\n         Dim group As IPAddress = ipv6MulticastOption.Group\n         Dim interfaceIndex As Long = ipv6MulticastOption.InterfaceIndex\n         \n         &#39; Display IPv6MulticastOption properties.\n         Console.WriteLine((&quot;IPv6MulticastOption.Group: [&quot; + group.ToString() + &quot;]&quot;))\n         Console.WriteLine((&quot;IPv6MulticastOption.InterfaceIndex: [&quot; + interfaceIndex.ToString() + &quot;]&quot;))\n         \n         &#39; Instantiate IPv6MulticastOption using another \n         &#39; overloaded constructor.\n         Dim ipv6MulticastOption2 As New IPv6MulticastOption(group, interfaceIndex)\n         \n         &#39; Store the IPAdress multicast options.\n         group = ipv6MulticastOption2.Group\n         interfaceIndex = ipv6MulticastOption2.InterfaceIndex\n         \n         &#39; Display the IPv6MulticastOption2 properties.\n         Console.WriteLine((&quot;IPv6MulticastOption.Group: [&quot; + group.ToString() + &quot;]&quot;))\n         Console.WriteLine((&quot;IPv6MulticastOption.InterfaceIndex: [&quot; + interfaceIndex.ToString() + &quot;]&quot;))\n         \n         &#39; Join the specified multicast group using one of the \n         &#39; JoinMulticastGroup overloaded methods.\n         clientOriginator.JoinMulticastGroup(Fix(interfaceIndex), group)\n         \n         &#39; Define the endpoint data port. Note that this port number\n         &#39; must match the ClientTarget UDP port number which is the\n         &#39; port on which the ClientTarget is receiving data.\n         m_ClientTargetdest = New IPEndPoint(m_GrpAddr, 1000)\n         \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Net.Sockets.UdpClient.JoinMulticastGroup#3\">\n        // Bind and listen on port 2000. This constructor creates a socket \n        // and binds it to the port on which to receive data. The family \n        // parameter specifies that this connection uses an IPv6 address.\n        clientOriginator = new UdpClient(2000, AddressFamily.InterNetworkV6);\n\n        // Join or create a multicast group. The multicast address ranges \n        // to use are specified in RFC#2375. You are free to use \n        // different addresses.\n      \n        // Transform the string address into the internal format.\n        m_GrpAddr = IPAddress.Parse(&quot;FF01::1&quot;);\n\n        // Display the multicast address used.\n        Console.WriteLine(&quot;Multicast Address: [&quot; + m_GrpAddr.ToString() + &quot;]&quot;);\n\n        // Exercise the use of the IPv6MulticastOption.\n        Console.WriteLine(&quot;Instantiate IPv6MulticastOption(IPAddress)&quot;);\n    \n        // Instantiate IPv6MulticastOption using one of the \n        // overloaded constructors.\n        IPv6MulticastOption ipv6MulticastOption = new IPv6MulticastOption(m_GrpAddr);\n\n        // Store the IPAdress multicast options.\n        IPAddress group =  ipv6MulticastOption.Group;\n        long interfaceIndex = ipv6MulticastOption.InterfaceIndex;\n\n        // Display IPv6MulticastOption properties.\n        Console.WriteLine(&quot;IPv6MulticastOption.Group: [&quot; + group  + &quot;]&quot;);\n        Console.WriteLine(&quot;IPv6MulticastOption.InterfaceIndex: [&quot; + interfaceIndex + &quot;]&quot;);\n\n\n\n        // Instantiate IPv6MulticastOption using another \n        // overloaded constructor.\n        IPv6MulticastOption ipv6MulticastOption2 = new IPv6MulticastOption(group, interfaceIndex);\n\n        // Store the IPAdress multicast options.\n        group =  ipv6MulticastOption2.Group;\n        interfaceIndex = ipv6MulticastOption2.InterfaceIndex;\n\n        // Display the IPv6MulticastOption2 properties.\n        Console.WriteLine(&quot;IPv6MulticastOption.Group: [&quot; + group  + &quot;]&quot;);\n        Console.WriteLine(&quot;IPv6MulticastOption.InterfaceIndex: [&quot; + interfaceIndex + &quot;]&quot;);\n\n        // Join the specified multicast group using one of the \n        // JoinMulticastGroup overloaded methods.\n        clientOriginator.JoinMulticastGroup((int)interfaceIndex, group);\n      \n\n        // Define the endpoint data port. Note that this port number\n        // must match the ClientTarget UDP port number which is the\n        // port on which the ClientTarget is receiving data.\n        m_ClientTargetdest = new IPEndPoint(m_GrpAddr, 1000);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_UdpClient__ctor_System_String_System_Int32_\">\r\n    \r\n            <a id=\"System_Net_Sockets_UdpClient__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UdpClient(String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> class and establishes a default remote host.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public UdpClient (string hostname, int port);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>hostname</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the remote DNS host to which you intend to connect.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>port</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The remote port number to which you intend to connect.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>hostname</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>port</code> is not between <a class=\"xref\" href=\"system.net.ipendpoint#System_Net_IPEndPoint_MinPort\" data-linktype=\"relative-path\">MinPort</a> and <a class=\"xref\" href=\"system.net.ipendpoint#System_Net_IPEndPoint_MaxPort\" data-linktype=\"relative-path\">MaxPort</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing the socket. See the Remarks section for more information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor initializes a new <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> and establishes a remote host using the <code>hostname</code> and <code>port</code> parameters. Establishing a default remote host is optional. If you use this constructor, you do not have to specify a remote host in each call to the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Send_\" data-linktype=\"relative-path\">Send</a> method. Specifying a default remote host limits you to that host only. You can change the default remote host at any time by calling the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Connect_\" data-linktype=\"relative-path\">Connect</a> method. If you want to specify a remote host in your call to the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Send_\" data-linktype=\"relative-path\">Send</a> method, do not use this constructor.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If you receive a <a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a>, use <a class=\"xref\" href=\"system.net.sockets.socketexception#System_Net_Sockets_SocketException_ErrorCode_\" data-linktype=\"relative-path\">ErrorCode</a> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to create an instance of the <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> class using a host name and port number.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic UdpClient.PublicMethodsAndPropertiesExample#3\">\n           //Creates an instance of the UdpClient class with a remote host name and a port number.\n           try{\n                UdpClient udpClient = new UdpClient(&quot;www.contoso.com&quot;,11000);\n           }\n           catch (Exception e ) {\n                      Console.WriteLine(e.ToString());\n           }\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic UdpClient.PublicMethodsAndPropertiesExample#3\">         //Creates an instance of the UdpClient class with a remote host name and a port number.\n         try\n         {\n            UdpClient^ udpClient = gcnew UdpClient( &quot;www.contoso.com&quot;,11000 );\n         }\n         catch ( Exception^ e ) \n         {\n            Console::WriteLine( e-&gt;ToString() );\n         }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic UdpClient.PublicMethodsAndPropertiesExample#3\">               &#39;Creates an instance of the UdpClient class with a remote host name and a port number.\n               Try\n                  Dim udpClient As New UdpClient(&quot;www.contoso.com&quot;, 11000)\n               Catch e As Exception\n                  Console.WriteLine(e.ToString())\n               End Try\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_UdpClient_Active\">\r\n    \r\n            <a id=\"System_Net_Sockets_UdpClient_Active_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Active</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether a default remote host has been established.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected bool Active { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if a connection is active; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Classes deriving from <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> can use this property to determine if a default remote host has been established. You can establish a default remote host by using the appropriate constructor or by calling the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Connect_\" data-linktype=\"relative-path\">Connect</a> method. If you do establish a default remote host, you cannot specify a remote host in your call to <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Send_\" data-linktype=\"relative-path\">Send</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_UdpClient_Available\">\r\n    \r\n            <a id=\"System_Net_Sockets_UdpClient_Available_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Available</div>        \r\n          </div>\r\n    \r\n            <p>Gets the amount of data received from the network that is available to read.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Available { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of bytes of data received from the network.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>An error occurred while attempting to access the socket. See the Remarks section for more information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> has been closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Available property is used to determine the amount of data queued in the network buffer for reading. If data is available, call <a class=\"xref\" href=\"system.net.sockets.networkstream#System_Net_Sockets_NetworkStream_Read_\" data-linktype=\"relative-path\">Read</a> to get the data. If no data is available, the Available property returns 0.  </p>\n<p> If the remote host shuts down or closes the connection, the Available property throws a <a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If you receive a <a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a>, use <a class=\"xref\" href=\"system.net.sockets.socketexception#System_Net_Sockets_SocketException_ErrorCode_\" data-linktype=\"relative-path\">ErrorCode</a> to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at <a href=\"http://msdn.microsoft.com/library\" data-linktype=\"external\">http://msdn.microsoft.com/library</a>/ for a detailed description of the error.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows the use of the Available property.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Net.Sockets.UdpClient#1\">        public static void GetAvailable(UdpClient u)\n        {\n            // Get the number of bytes available for reading.\n            Console.WriteLine(&quot;Available value is {0}&quot;,\n                u.Available);\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Net.Sockets.UdpClient#1\">   static void GetAvailable( UdpClient^ u )\n   {\n      // Get the number of bytes available for reading.\n      Console::WriteLine(  &quot;Available value is {0}&quot;, u-&gt;Available );\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_UdpClient_Client\">\r\n    \r\n            <a id=\"System_Net_Sockets_UdpClient_Client_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Client</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the underlying network <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Net.Sockets.Socket Client { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a></div>\r\n                  </div>\r\n                  <p>The underlying Network <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> creates a <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> used to send and receive data over a network. Classes deriving from <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> can use this property to get or set this <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a>. Use the underlying <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> returned from Client if you require access beyond that which <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> provides. You can also use Client to set the underlying <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> to an existing <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a>. This is useful if you want to take advantage of the simplicity of <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> using a pre-existing <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the use of the Client property. In this example, broadcasting is enabled for the underlying <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic UdpClient.ProtectedMethodsAndPropertiesExample#1\">    public static void Main(string[] args)\n    {\n        if (args.Length &lt; 1)\n        {\n            Console.WriteLine(&quot;you must specify a port number!&quot;);\n            return;\n        }\n\n        UdpClient uClient = new UdpClient(Convert.ToInt32(args[0]));\n        Socket uSocket = uClient.Client;\n\n        // use the underlying socket to enable broadcast.\n        uSocket.SetSocketOption(SocketOptionLevel.Socket, \n                      SocketOptionName.Broadcast, 1);\n    }\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic UdpClient.ProtectedMethodsAndPropertiesExample#1\">// This derived class demonstrate the use of three protected methods belonging to the UdpClient class.\npublic ref class MyUdpClientDerivedClass: public UdpClient\n{\npublic:\n   MyUdpClientDerivedClass()\n      : UdpClient()\n   {}\n\n   void UsingProtectedMethods()\n   {\n      //Uses the protected Active property belonging to the UdpClient base class to determine if a connection is established.\n      if ( this-&gt;Active )\n      {\n         //Calls the protected Client property belonging to the UdpClient base class.\n         Socket^ s = this-&gt;Client;\n\n         //Uses the Socket returned by Client to set an option that is not available using UdpClient.\n         s-&gt;SetSocketOption( SocketOptionLevel::Socket, SocketOptionName::Broadcast, 1 );\n      }\n   }\n};\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic UdpClient.ProtectedMethodsAndPropertiesExample#1\">&#39; This derived class demonstrates the use of three protected methods belonging to the UdpClient class.\nPublic Class MyUdpClientDerivedClass\n   Inherits UdpClient\n   \n   Public Sub New()\n   End Sub &#39;New\n   \n   Public Sub UsingProtectedMethods()\n      \n      &#39;Uses the protected Active property belonging to the UdpClient base class to determine if a connection is established.\n      If Me.Active Then\n         &#39; Calls the protected Client property belonging to the UdpClient base class.\n         Dim s As Socket = Me.Client\n              &#39;Uses the Socket returned by Client to set an option that is not available using UdpClient.\n         s.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.Broadcast, 1)\n      End If\n   End Sub &#39;UsingProtectedMethods \nEnd Class &#39;MyUdpClientDerivedClass\n \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_UdpClient_DontFragment\">\r\n    \r\n            <a id=\"System_Net_Sockets_UdpClient_DontFragment_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DontFragment</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that specifies whether the <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> allows Internet Protocol (IP) datagrams to be fragmented.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool DontFragment { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> allows datagram fragmentation; otherwise, <code>false</code>. The default is <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This property can be set only for sockets that use the <a class=\"xref\" href=\"system.net.sockets.addressfamily\" data-linktype=\"relative-path\">AddressFamily</a> flag or the <a class=\"xref\" href=\"system.net.sockets.addressfamily\" data-linktype=\"relative-path\">AddressFamily</a> flag.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Datagrams require fragmentation when their size exceeds the Maximum Transfer Unit (MTU) of the transmission medium. Datagrams may be fragmented by the sending host or by an intermediate router. If a datagram must be fragmented, and the <a class=\"xref\" href=\"system.net.sockets.socket#System_Net_Sockets_Socket_DontFragment_\" data-linktype=\"relative-path\">DontFragment</a> option is set, the datagram is discarded, and an Internet Control Message Protocol (ICMP) error message is sent back to the sender of the datagram.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows the use of the <a class=\"xref\" href=\"system.net.sockets.socket#System_Net_Sockets_Socket_DontFragment_\" data-linktype=\"relative-path\">DontFragment</a> property.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Net.Sockets.UdpClient#2\">        public static void GetSetDontFragment(UdpClient u)\n        {\n            // Set the don&#39;t fragment flag for packets emanating from\n            // this client.\n            u.DontFragment = true;\n            Console.WriteLine(&quot;DontFragment value is {0}&quot;,\n                u.DontFragment);\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Net.Sockets.UdpClient#2\">   static void GetSetDontFragment( UdpClient^ u )\n   {\n      // Set the don&#39;t fragment flag for packets emanating from\n      // this client.\n      u-&gt;DontFragment = true;\n      Console::WriteLine(  &quot;DontFragment value is {0}&quot;, u-&gt;DontFragment );\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_UdpClient_EnableBroadcast\">\r\n    \r\n            <a id=\"System_Net_Sockets_UdpClient_EnableBroadcast_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EnableBroadcast</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that specifies whether the <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> may send or receive broadcast packets.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool EnableBroadcast { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> allows broadcast packets; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Broadcasting is limited to a specific subnet. You can broadcast to your local subnet by sending a packet to 255.255.255.255; or, you can use the directed broadcast address, which is the network portion of an Internet Protocol (IP) address with all bits set in the host portion. For example, if your IP address is 192.168.1.40 (a Class C address, with the network portion as the first three octets, and the host portion is the last octet), your directed broadcast address is 192.168.1.255.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows the use of the EnableBroadcast property.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Net.Sockets.UdpClient#3\">        public static void GetSetEnableBroadcast(UdpClient u)\n        {\n            // Set the Broadcast flag for this client.\n            u.EnableBroadcast = true;\n            Console.WriteLine(&quot;EnableBroadcast value is {0}&quot;,\n                u.EnableBroadcast);\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Net.Sockets.UdpClient#3\">   static void GetSetEnableBroadcast( UdpClient^ u )\n   {\n      // Set the Broadcast flag for this client.\n      u-&gt;EnableBroadcast = true;\n      Console::WriteLine(  &quot;EnableBroadcast value is {0}&quot;, u-&gt;EnableBroadcast );\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_UdpClient_ExclusiveAddressUse\">\r\n    \r\n            <a id=\"System_Net_Sockets_UdpClient_ExclusiveAddressUse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExclusiveAddressUse</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that specifies whether the <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> allows only one client to use a port.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool ExclusiveAddressUse { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> allows only one client to use a specific port; otherwise, <code>false</code>. The default is <code>true</code> for Windows Server 2003 and Windows XP Service Pack 2 and later, and <code>false</code> for all other versions.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when attempting to access the underlying socket.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The underlying <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> has been closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default, multiple clients can use a specific port; however, only one of the clients can perform operations on the network traffic sent to the port. You can use the ExclusiveAddressUse property to prevent multiple clients from using a specific port.  </p>\n<p> This property must be set before the underlying socket is bound to a client port. If you call <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient__ctor_System_Int32_\" data-linktype=\"relative-path\">System.Net.Sockets.UdpClient.UdpClient(Int32)</a>, <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient__ctor_System_Int32_System_Net_Sockets_AddressFamily_\" data-linktype=\"relative-path\">System.Net.Sockets.UdpClient.UdpClient(Int32,AddressFamily)</a>, <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient__ctor_System_Net_IPEndPoint_\" data-linktype=\"relative-path\">System.Net.Sockets.UdpClient.UdpClient(IPEndPoint)</a>, or <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient__ctor_System_String_System_Int32_\" data-linktype=\"relative-path\">System.Net.Sockets.UdpClient.UdpClient(String,Int32)</a>, the client port is bound as a side effect of the constructor, and you cannot subsequently set the ExclusiveAddressUse property</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a>, and gets and sets the ExclusiveAddressUse property.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Net.Sockets.UdpClient#4\">        public static void GetSetExclusiveAddressUse(UdpClient u)\n        {\n            // Don&#39;t allow another client to bind to this port.\n            u.ExclusiveAddressUse = true;\n            Console.WriteLine(&quot;ExclusiveAddressUse value is {0}&quot;,\n                u.ExclusiveAddressUse);\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Net.Sockets.UdpClient#4\">   static void GetSetExclusiveAddressUse( UdpClient^ u )\n   {\n      // Don&#39;t allow another client to bind to this port.\n      u-&gt;ExclusiveAddressUse = true;\n      Console::WriteLine(  &quot;ExclusiveAddressUse value is {0}&quot;, u-&gt;ExclusiveAddressUse );\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_UdpClient_MulticastLoopback\">\r\n    \r\n            <a id=\"System_Net_Sockets_UdpClient_MulticastLoopback_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MulticastLoopback</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that specifies whether outgoing multicast packets are delivered to the sending application.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool MulticastLoopback { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> receives outgoing multicast packets; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Multicast is a scalable method for many-to-many communication on the Internet. If a process subscribes to a multicast address, any packets sent by that process are received by every other process that has subscribed to the multicast address.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows the use of the MulticastLoopback property.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Net.Sockets.UdpClient#7\">        public static void GetSetMulticastLoopback(UdpClient u)\n        {\n            // Deliver multicast packets back to the sending client.\n            u.MulticastLoopback = true;\n            Console.WriteLine(&quot;MulticastLoopback value is {0}&quot;,\n                u.MulticastLoopback);\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Net.Sockets.UdpClient#7\">   static void GetSetMulticastLoopback( UdpClient^ u )\n   {\n      // Deliver multicast packets back to the sending client.\n      u-&gt;MulticastLoopback = true;\n      Console::WriteLine(  &quot;MulticastLoopback value is {0}&quot;, u-&gt;MulticastLoopback );\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_UdpClient_Ttl\">\r\n    \r\n            <a id=\"System_Net_Sockets_UdpClient_Ttl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ttl</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that specifies the Time to Live (TTL) value of Internet Protocol (IP) packets sent by the <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public short Ttl { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </div>\r\n                  <p>The TTL value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The TTL value indicates the maximum number of routers a packet can traverse before the router discards the packet and an Internet Control Message Protocol (ICMP) &quot;TTL exceeded&quot; error message is returned to the sender.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows the use of the Ttl property.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Net.Sockets.UdpClient#5\">        public static void GetSetTtl(UdpClient u)\n        {\n            // Set the Time To Live (TTL) for this client.\n            u.Ttl = 42;\n            Console.WriteLine(&quot;Ttl value is {0}&quot;,\n                u.Ttl);\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Net.Sockets.UdpClient#5\">   static void GetSetTtl( UdpClient^ u )\n   {\n      // Set the Time To Live (TTL) for this client.\n      u-&gt;Ttl = 42;\n      Console::WriteLine(  &quot;Ttl value is {0}&quot;, u-&gt;Ttl );\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_UdpClient_AllowNatTraversal_System_Boolean_\">\r\n    \r\n            <a id=\"System_Net_Sockets_UdpClient_AllowNatTraversal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AllowNatTraversal(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Enables or disables Network Address Translation (NAT) traversal on a <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AllowNatTraversal (bool allowed);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>allowed</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A Boolean value that specifies whether to enable or disable NAT traversal.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The AllowNatTraversal method is used to enable or disable NAT traversal for a <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> instance. NAT traversal may be provided using Teredo, 6to4, or an ISATAP tunnel.  </p>\n<p> When the <code>allowed</code> parameter is false, the <a class=\"xref\" href=\"system.net.sockets.socketoptionname\" data-linktype=\"relative-path\">SocketOptionName</a> option on the associated socket is set to <a class=\"xref\" href=\"system.net.sockets.ipprotectionlevel\" data-linktype=\"relative-path\">IPProtectionLevel</a>. This explicitly disables NAT traversal for a <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> instance.  </p>\n<p> When the <code>allowed</code> parameter is true, the <a class=\"xref\" href=\"system.net.sockets.socketoptionname\" data-linktype=\"relative-path\">SocketOptionName</a> option on the associated socket is set to <a class=\"xref\" href=\"system.net.sockets.ipprotectionlevel\" data-linktype=\"relative-path\">IPProtectionLevel</a>. This may allow NAT traversal for a <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> depending on firewall rules in place on the system.  </p>\n<p> A Teredo address is an IPv6 address with the prefix of 2001::/32. Teredo addresses can be returned through normal DNS name resolution or enumerated as an IPv6 address assigned to a local interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_UdpClient_BeginReceive_System_AsyncCallback_System_Object_\">\r\n    \r\n            <a id=\"System_Net_Sockets_UdpClient_BeginReceive_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginReceive(AsyncCallback,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Receives a datagram from a remote host asynchronously.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IAsyncResult BeginReceive (AsyncCallback requestCallback, object state);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>requestCallback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a> delegate that references the method to invoke when the operation is complete.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A user-defined object that contains information about the receive operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> object that references the asynchronous receive.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The asynchronous BeginReceive operation must be completed by calling the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_EndReceive_\" data-linktype=\"relative-path\">EndReceive</a> method. Typically, the method is invoked by the <code>requestCallback</code> delegate.  </p>\n<p> This method does not block until the operation is complete. To block until the operation is complete, use the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Receive_\" data-linktype=\"relative-path\">Receive</a> method.  </p>\n<p> For detailed information about using the asynchronous programming model, see <a href=\"../Topic/Calling%20Synchronous%20Methods%20Asynchronously.md\" data-linktype=\"relative-path\">Calling Synchronous Methods Asynchronously</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses BeginReceive to asynchronously receive a server response.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Net.Sockets.UdpClient1#1\">public:\n    static bool isMessageReceived;\n\n    static void ReceiveCallback(IAsyncResult^ asyncResult)\n    {\n        UdpClient^ udpClient =\n            ((UdpState)(asyncResult-&gt;AsyncState)).udpClient;\n        IPEndPoint^ ipEndPoint =\n            ((UdpState)(asyncResult-&gt;AsyncState)).ipEndPoint;\n\n        array&lt;Byte&gt;^ receiveBytes =\n            udpClient-&gt;EndReceive(asyncResult, ipEndPoint);\n        String^ receiveString =\n            Encoding::ASCII-&gt;GetString(receiveBytes);\n\n        Console::WriteLine(&quot;Received: {0}&quot;, receiveString);\n        isMessageReceived = true;\n    }\n\n    static void ReceiveMessages()\n    {\n        // Receive a message and write it to the console.\n        IPEndPoint^ ipEndPoint = gcnew IPEndPoint(IPAddress::Any, listenPort);\n        UdpClient^ udpClient = gcnew UdpClient(ipEndPoint);\n\n        UdpState^ udpState = gcnew UdpState();\n        udpState-&gt;ipEndPoint = ipEndPoint;\n        udpState-&gt;udpClient = udpClient;\n\n        Console::WriteLine(&quot;listening for messages&quot;);\n        udpClient-&gt;BeginReceive(gcnew AsyncCallback(ReceiveCallback),\n            udpState);\n\n        // Do some work while we wait for a message. For this example,\n        // we&#39;ll just sleep\n        while (!isMessageReceived)\n        {\n            Thread::Sleep(100);\n        }\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Net.Sockets.UdpClient1#1\">  public static bool messageReceived = false;\n\n  public static void ReceiveCallback(IAsyncResult ar)\n  {\n    UdpClient u = (UdpClient)((UdpState)(ar.AsyncState)).u;\n    IPEndPoint e = (IPEndPoint)((UdpState)(ar.AsyncState)).e;\n\n    Byte[] receiveBytes = u.EndReceive(ar, ref e);\n    string receiveString = Encoding.ASCII.GetString(receiveBytes);\n\n    Console.WriteLine(&quot;Received: {0}&quot;, receiveString);\n    messageReceived = true;\n  }\n\n  public static void ReceiveMessages()\n  {\n    // Receive a message and write it to the console.\n    IPEndPoint e = new IPEndPoint(IPAddress.Any, listenPort);\n    UdpClient u = new UdpClient(e);\n\n    UdpState s = new UdpState();\n    s.e = e;\n    s.u = u;\n\n    Console.WriteLine(&quot;listening for messages&quot;);\n    u.BeginReceive(new AsyncCallback(ReceiveCallback), s);\n\n    // Do some work while we wait for a message. For this example,\n    // we&#39;ll just sleep\n    while (!messageReceived)\n    {\n      Thread.Sleep(100);\n    }\n  }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_UdpClient_BeginSend_System_Byte___System_Int32_System_AsyncCallback_System_Object_\">\r\n    \r\n            <a id=\"System_Net_Sockets_UdpClient_BeginSend_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginSend(Byte[],Int32,AsyncCallback,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Sends a datagram to a remote host asynchronously. The destination was specified previously by a call to <span class=\"xref\">stem.Net.Sockets.UdpClient.Connect*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IAsyncResult BeginSend (byte[] datagram, int bytes, AsyncCallback requestCallback, object state);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>datagram</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> array that contains the data to be sent.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bytes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes to send.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>requestCallback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a> delegate that references the method to invoke when the operation is complete.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A user-defined object that contains information about the send operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> object that references the asynchronous send.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The asynchronous BeginSend operation must be completed by calling the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_EndSend_\" data-linktype=\"relative-path\">EndSend</a> method. Typically, the method is invoked by the <code>requestCallback</code> delegate.  </p>\n<p> This method does not block until the operation completes. To block until the operation is complete, use one of the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Send_\" data-linktype=\"relative-path\">Send</a> method overloads.  </p>\n<p> For detailed information about using the asynchronous programming model, see <a href=\"../Topic/Calling%20Synchronous%20Methods%20Asynchronously.md\" data-linktype=\"relative-path\">Calling Synchronous Methods Asynchronously</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses BeginSend to asynchronously send a server request.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Net.Sockets.UdpClient1#2\">public:\n    static bool isMessageSent;\n\n    static void SendCallback(IAsyncResult^ asyncResult)\n    {\n        UdpClient^ udpClient = (UdpClient^)asyncResult-&gt;AsyncState;\n\n        Console::WriteLine(&quot;number of bytes sent: {0}&quot;,\n            udpClient-&gt;EndSend(asyncResult));\n        isMessageSent = true;\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Net.Sockets.UdpClient1#2\">  public static bool messageSent = false;\n\n  public static void SendCallback(IAsyncResult ar)\n  {\n    UdpClient u = (UdpClient)ar.AsyncState;\n\n    Console.WriteLine(&quot;number of bytes sent: {0}&quot;, u.EndSend(ar));\n    messageSent = true;\n  }\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Net.Sockets.UdpClient1#3\">public:\n    static void SendMessage1(String^ server, String^ message)\n    {\n        // create the udp socket\n        UdpClient^ udpClient = gcnew UdpClient();\n\n        udpClient-&gt;Connect(server, listenPort);\n        array&lt;Byte&gt;^ sendBytes = Encoding::ASCII-&gt;GetBytes(message);\n\n        // send the message\n        // the destination is defined by the call to .Connect()\n        udpClient-&gt;BeginSend(sendBytes, sendBytes-&gt;Length,\n            gcnew AsyncCallback(SendCallback), udpClient);\n\n        // Do some work while we wait for the send to complete. For\n        // this example, we&#39;ll just sleep\n        while (!isMessageSent)\n        {\n            Thread::Sleep(100);\n        }\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Net.Sockets.UdpClient1#3\">  static void SendMessage1(string server, string message)\n  {\n    // create the udp socket\n    UdpClient u = new UdpClient();\n\n    u.Connect(server, listenPort);\n    Byte [] sendBytes = Encoding.ASCII.GetBytes(message);\n\n    // send the message\n    // the destination is defined by the call to .Connect()\n    u.BeginSend(sendBytes, sendBytes.Length, \n                new AsyncCallback(SendCallback), u);\n\n    // Do some work while we wait for the send to complete. For \n    // this example, we&#39;ll just sleep\n    while (!messageSent)\n    {\n      Thread.Sleep(100);\n    }\n  }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_UdpClient_BeginSend_System_Byte___System_Int32_System_Net_IPEndPoint_System_AsyncCallback_System_Object_\">\r\n    \r\n            <a id=\"System_Net_Sockets_UdpClient_BeginSend_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Sends a datagram to a destination asynchronously. The destination is specified by a <a class=\"xref\" href=\"system.net.endpoint\" data-linktype=\"relative-path\">EndPoint</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IAsyncResult BeginSend (byte[] datagram, int bytes, System.Net.IPEndPoint endPoint, AsyncCallback requestCallback, object state);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>datagram</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> array that contains the data to be sent.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bytes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes to send.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>endPoint</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.ipendpoint\" data-linktype=\"relative-path\">IPEndPoint</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.net.endpoint\" data-linktype=\"relative-path\">EndPoint</a> that represents the destination for the data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>requestCallback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a> delegate that references the method to invoke when the operation is complete.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A user-defined object that contains information about the send operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> object that references the asynchronous send.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The asynchronous BeginSend operation must be completed by calling the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_EndSend_\" data-linktype=\"relative-path\">EndSend</a> method. Typically, the method is invoked by the <code>requestCallback</code> delegate.  </p>\n<p> This method does not block until the operation is complete. To block until the operation is complete, use one of the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Send_\" data-linktype=\"relative-path\">Send</a> method overloads.  </p>\n<p> For detailed information about using the asynchronous programming model, see <a href=\"../Topic/Calling%20Synchronous%20Methods%20Asynchronously.md\" data-linktype=\"relative-path\">Calling Synchronous Methods Asynchronously</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_BeginSend_\" data-linktype=\"relative-path\">BeginSend</a> to asynchronously send a server request.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Net.Sockets.UdpClient1#2\">public:\n    static bool isMessageSent;\n\n    static void SendCallback(IAsyncResult^ asyncResult)\n    {\n        UdpClient^ udpClient = (UdpClient^)asyncResult-&gt;AsyncState;\n\n        Console::WriteLine(&quot;number of bytes sent: {0}&quot;,\n            udpClient-&gt;EndSend(asyncResult));\n        isMessageSent = true;\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Net.Sockets.UdpClient1#2\">  public static bool messageSent = false;\n\n  public static void SendCallback(IAsyncResult ar)\n  {\n    UdpClient u = (UdpClient)ar.AsyncState;\n\n    Console.WriteLine(&quot;number of bytes sent: {0}&quot;, u.EndSend(ar));\n    messageSent = true;\n  }\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Net.Sockets.UdpClient1#4\">public:\n    static void SendMessage2(String^ server, String^ message)\n    {\n        // create the udp socket\n        UdpClient^ udpClient = gcnew UdpClient();\n        array&lt;Byte&gt;^ sendBytes = Encoding::ASCII-&gt;GetBytes(message);\n\n        // resolve the server name\n        IPHostEntry^ resolvedServer = Dns::GetHostEntry(server);\n\n        IPEndPoint^ ipEndPoint =\n            gcnew IPEndPoint(resolvedServer-&gt;AddressList[0], listenPort);\n\n        // send the message\n        // the destination is defined by the IPEndPoint\n        udpClient-&gt;BeginSend(sendBytes, sendBytes-&gt;Length, ipEndPoint,\n            gcnew AsyncCallback(SendCallback), udpClient);\n\n        // Do some work while we wait for the send to complete. For\n        // this example, we&#39;ll just sleep\n        while (!isMessageSent)\n        {\n            Thread::Sleep(100);\n        }\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Net.Sockets.UdpClient1#4\">  static void SendMessage2(string server, string message)\n  {\n    // create the udp socket\n    UdpClient u = new UdpClient();\n    Byte [] sendBytes = Encoding.ASCII.GetBytes(message);\n\n    // resolve the server name\n    IPHostEntry heserver = Dns.GetHostEntry(server);\n\n    IPEndPoint e = new IPEndPoint(heserver.AddressList[0], listenPort);\n\n    // send the message\n    // the destination is defined by the IPEndPoint\n    u.BeginSend(sendBytes, sendBytes.Length, e,\n                new AsyncCallback(SendCallback), u);\n\n    // Do some work while we wait for the send to complete. For \n    // this example, we&#39;ll just sleep\n    while (!messageSent)\n    {\n      Thread.Sleep(100);\n    }\n  }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_UdpClient_BeginSend_System_Byte___System_Int32_System_String_System_Int32_System_AsyncCallback_System_Object_\">\r\n    \r\n            <a id=\"System_Net_Sockets_UdpClient_BeginSend_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Sends a datagram to a destination asynchronously. The destination is specified by the host name and port number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IAsyncResult BeginSend (byte[] datagram, int bytes, string hostname, int port, AsyncCallback requestCallback, object state);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>datagram</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> array that contains the data to be sent.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bytes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes to send.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>hostname</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The destination host.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>port</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The destination port number.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>requestCallback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a> delegate that references the method to invoke when the operation is complete.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A user-defined object that contains information about the send operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> object that references the asynchronous send.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The asynchronous BeginSend operation must be completed by calling the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_EndSend_\" data-linktype=\"relative-path\">EndSend</a> method. Typically, the method is invoked by the <code>requestCallback</code> delegate.  </p>\n<p> This method does not block until the operation is complete. To block until the operation is complete, use one of the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Send_\" data-linktype=\"relative-path\">Send</a> method overloads.  </p>\n<p> For detailed information about using the asynchronous programming model, see <a href=\"../Topic/Calling%20Synchronous%20Methods%20Asynchronously.md\" data-linktype=\"relative-path\">Calling Synchronous Methods Asynchronously</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_BeginSend_\" data-linktype=\"relative-path\">BeginSend</a> to asynchronously send a server request.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Net.Sockets.UdpClient1#2\">public:\n    static bool isMessageSent;\n\n    static void SendCallback(IAsyncResult^ asyncResult)\n    {\n        UdpClient^ udpClient = (UdpClient^)asyncResult-&gt;AsyncState;\n\n        Console::WriteLine(&quot;number of bytes sent: {0}&quot;,\n            udpClient-&gt;EndSend(asyncResult));\n        isMessageSent = true;\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Net.Sockets.UdpClient1#2\">  public static bool messageSent = false;\n\n  public static void SendCallback(IAsyncResult ar)\n  {\n    UdpClient u = (UdpClient)ar.AsyncState;\n\n    Console.WriteLine(&quot;number of bytes sent: {0}&quot;, u.EndSend(ar));\n    messageSent = true;\n  }\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Net.Sockets.UdpClient1#5\">public:\n    static void SendMessage3(String^ server, String^ message)\n    {\n        // create the udp socket\n        UdpClient^ udpClient = gcnew UdpClient();\n\n        array&lt;Byte&gt;^ sendBytes = Encoding::ASCII-&gt;GetBytes(message);\n\n        // send the message\n        // the destination is defined by the server name and port\n        udpClient-&gt;BeginSend(sendBytes, sendBytes-&gt;Length, server, listenPort,\n            gcnew AsyncCallback(SendCallback), udpClient);\n\n        // Do some work while we wait for the send to complete. For\n        // this example, we&#39;ll just sleep\n        while (!isMessageSent)\n        {\n            Thread::Sleep(100);\n        }\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Net.Sockets.UdpClient1#5\">  static void SendMessage3(string server, string message)\n  {\n    // create the udp socket\n    UdpClient u = new UdpClient();\n\n    Byte [] sendBytes = Encoding.ASCII.GetBytes(message);\n\n    // send the message\n    // the destination is defined by the server name and port\n    u.BeginSend(sendBytes, sendBytes.Length, server, listenPort,\n                new AsyncCallback(SendCallback), u);\n\n    // Do some work while we wait for the send to complete. For \n    // this example, we&#39;ll just sleep\n    while (!messageSent)\n    {\n      Thread.Sleep(100);\n    }\n  }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_UdpClient_Close\">\r\n    \r\n            <a id=\"System_Net_Sockets_UdpClient_Close_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Close()</div>        \r\n          </div>\r\n    \r\n            <p>Closes the UDP connection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Close ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing the socket. See the Remarks section for more information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Close disables the underlying <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> and releases all managed and unmanaged resources associated with the <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If you receive a <a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a>, use <a class=\"xref\" href=\"system.net.sockets.socketexception#System_Net_Sockets_SocketException_ErrorCode_\" data-linktype=\"relative-path\">ErrorCode</a> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates closing a <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> by calling the Close method.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic UdpClient.PublicMethodsAndPropertiesExample#15\">        // Closes the UDP client by calling the public method Close().\n        udpClient.Close();\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic UdpClient.PublicMethodsAndPropertiesExample#15\">         // Closes the UDP client by calling the public method Close().\n         udpClient-&gt;Close();\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic UdpClient.PublicMethodsAndPropertiesExample#15\">            &#39; Closes the UDP client by calling the public method Close().\n            udpClient.Close()\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_UdpClient_Connect_System_Net_IPEndPoint_\">\r\n    \r\n            <a id=\"System_Net_Sockets_UdpClient_Connect_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Connect(IPEndPoint)</div>        \r\n          </div>\r\n    \r\n            <p>Establishes a default remote host using the specified network endpoint.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Connect (System.Net.IPEndPoint endPoint);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>endPoint</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.ipendpoint\" data-linktype=\"relative-path\">IPEndPoint</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.net.ipendpoint\" data-linktype=\"relative-path\">IPEndPoint</a> that specifies the network endpoint to which you intend to send data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing the socket. See the Remarks section for more information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>endPoint</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> is closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Connect_\" data-linktype=\"relative-path\">Connect</a> method establishes a default remote host using the value specified in the <code>endPoint</code> parameter. Once established, you do not have to specify a remote host in each call to the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Send_\" data-linktype=\"relative-path\">Send</a> method.  </p>\n<p> Establishing a default remote host is optional. Specifying a default remote host limits you to that host only. If you want to send datagrams to a different remote host, you must make another call to the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Connect_\" data-linktype=\"relative-path\">Connect</a> method or create another <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> without a default remote host. If you have established a default remote host and you also provide a remote host in your call to the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Send_\" data-linktype=\"relative-path\">Send</a> method, <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Send_\" data-linktype=\"relative-path\">Send</a> will throw a <a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a>. If you receive a <a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a>, use <a class=\"xref\" href=\"system.net.sockets.socketexception#System_Net_Sockets_SocketException_ErrorCode_\" data-linktype=\"relative-path\">ErrorCode</a> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  </p>\n<p> If you call the <a class=\"xref\" href=\"system.net.sockets.socket#System_Net_Sockets_Socket_Connect_\" data-linktype=\"relative-path\">Connect</a> method, any datagrams that arrive from an address other than the specified default will be discarded. You cannot set the default remote host to a broadcast address using this method unless you inherit from <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a>, use the Client method to obtain the underlying <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a>, and set the socket option to <a class=\"xref\" href=\"system.net.sockets.socketoptionname\" data-linktype=\"relative-path\">System.Net.Sockets.SocketOptionName</a>.  </p>\n<p> You can however, broadcast data to the default broadcast address, 255.255.255.255, if you specify <a class=\"xref\" href=\"system.net.ipaddress#System_Net_IPAddress_Broadcast\" data-linktype=\"relative-path\">System.Net.IPAddress.Broadcast</a> in your call to the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Send_\" data-linktype=\"relative-path\">Send</a> method. If your application requires greater control over broadcast addresses, you can also revert to using the <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> class.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Since the UDP protocol is connectionless, the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Connect_\" data-linktype=\"relative-path\">Connect</a> method does not block. Do not call the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Connect_\" data-linktype=\"relative-path\">Connect</a> method if you intend to receive multicasted datagrams.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses an <a class=\"xref\" href=\"system.net.ipendpoint\" data-linktype=\"relative-path\">IPEndPoint</a> to establish a default remote host.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic UdpClient.PublicMethodsAndPropertiesExample#7\">   //Uses a remote endpoint to establish a socket connection.\n   UdpClient udpClient = new UdpClient();\n   IPAddress ipAddress = Dns.Resolve(&quot;www.contoso.com&quot;).AddressList[0];\n   IPEndPoint ipEndPoint = new IPEndPoint(ipAddress, 11004);\n   try{\n   \tudpClient.Connect(ipEndPoint);\n   }\n   catch (Exception e ) {\n              Console.WriteLine(e.ToString());\n          }\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic UdpClient.PublicMethodsAndPropertiesExample#7\">         //Uses a remote endpoint to establish a socket connection.\n         UdpClient^ udpClient = gcnew UdpClient;\n         IPAddress^ ipAddress = Dns::Resolve( &quot;www.contoso.com&quot; )-&gt;AddressList[ 0 ];\n         IPEndPoint^ ipEndPoint = gcnew IPEndPoint( ipAddress,11004 );\n         try\n         {\n            udpClient-&gt;Connect( ipEndPoint );\n         }\n         catch ( Exception^ e ) \n         {\n            Console::WriteLine( e-&gt;ToString() );\n         }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic UdpClient.PublicMethodsAndPropertiesExample#7\">               &#39;Uses a remote endpoint to establish a socket connection.\n               Dim udpClient As New UdpClient()\n               Dim ipAddress As IPAddress = Dns.Resolve(&quot;www.contoso.com&quot;).AddressList(0)\n               Dim ipEndPoint As New IPEndPoint(ipAddress, 11004)\n               Try\n                  udpClient.Connect(ipEndPoint)\n               Catch e As Exception\n                  Console.WriteLine(e.ToString())\n               End Try\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_UdpClient_Connect_System_Net_IPAddress_System_Int32_\">\r\n    \r\n            <a id=\"System_Net_Sockets_UdpClient_Connect_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Connect(IPAddress,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Establishes a default remote host using the specified IP address and port number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Connect (System.Net.IPAddress addr, int port);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>addr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> of the remote host to which you intend to send data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>port</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The port number to which you intend send data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p><a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> is closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>addr</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>port</code> is not between <a class=\"xref\" href=\"system.net.ipendpoint#System_Net_IPEndPoint_MinPort\" data-linktype=\"relative-path\">MinPort</a> and <a class=\"xref\" href=\"system.net.ipendpoint#System_Net_IPEndPoint_MaxPort\" data-linktype=\"relative-path\">MaxPort</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing the socket. See the Remarks section for more information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Connect_\" data-linktype=\"relative-path\">Connect</a> method establishes a default remote host using the values specified in the <code>addr</code> and <code>port</code> parameters. Once established, you do not have to specify a remote host in each call to the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Send_\" data-linktype=\"relative-path\">Send</a> method.  </p>\n<p> Establishing a default remote host is optional. Specifying a default remote host limits you to that host only. If you want to send datagrams to a different remote host, you must make another call to the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Connect_\" data-linktype=\"relative-path\">Connect</a> method or create another <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> without a default remote host. If you have established a default remote host and you also provide a remote host in your call to the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Send_\" data-linktype=\"relative-path\">Send</a> method, <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Send_\" data-linktype=\"relative-path\">Send</a> will throw a <a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a>. If you receive a <a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a>, use <a class=\"xref\" href=\"system.net.sockets.socketexception#System_Net_Sockets_SocketException_ErrorCode_\" data-linktype=\"relative-path\">ErrorCode</a> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  </p>\n<p> If you call the <a class=\"xref\" href=\"system.net.sockets.socket#System_Net_Sockets_Socket_Connect_\" data-linktype=\"relative-path\">Connect</a> method, any datagrams that arrive from an address other than the specified default will be discarded. You cannot set the default remote host to a broadcast address using this method unless you inherit from <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a>, use the client method to obtain the underlying <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a>, and set the socket option to <a class=\"xref\" href=\"system.net.sockets.socketoptionname\" data-linktype=\"relative-path\">System.Net.Sockets.SocketOptionName</a>.  </p>\n<p> You can however, broadcast data to the default broadcast address, 255.255.255.255, if you specify <a class=\"xref\" href=\"system.net.ipaddress#System_Net_IPAddress_Broadcast\" data-linktype=\"relative-path\">System.Net.IPAddress.Broadcast</a> in your call to the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Send_\" data-linktype=\"relative-path\">Send</a> method. If your application requires greater control over broadcast addresses, you can also revert to using the <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> class.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Since the UDP protocol is connectionless, the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Connect_\" data-linktype=\"relative-path\">Connect</a> method does not block. Do not call the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Connect_\" data-linktype=\"relative-path\">Connect</a> method if you intend to receive multicasted datagrams.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses an IP address and port number to connect with a remote host.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic UdpClient.PublicMethodsAndPropertiesExample#6\">      //Uses the IP address and port number to establish a socket connection.\n      UdpClient udpClient = new UdpClient();\n      IPAddress ipAddress = Dns.Resolve(&quot;www.contoso.com&quot;).AddressList[0];\n      try{\n          udpClient.Connect(ipAddress, 11003);\n      }\n      catch (Exception e ) {\n                 Console.WriteLine(e.ToString());\n      }\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic UdpClient.PublicMethodsAndPropertiesExample#6\">         //Uses the IP address and port number to establish a socket connection.\n         UdpClient^ udpClient = gcnew UdpClient;\n         IPAddress^ ipAddress = Dns::Resolve( &quot;www.contoso.com&quot; )-&gt;AddressList[ 0 ];\n         try\n         {\n            udpClient-&gt;Connect( ipAddress, 11003 );\n         }\n         catch ( Exception^ e ) \n         {\n            Console::WriteLine( e-&gt;ToString() );\n         }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic UdpClient.PublicMethodsAndPropertiesExample#6\">            &#39;Uses the IP address and port number to establish a socket connection.\n            Dim udpClient As New UdpClient()\n            Dim ipAddress As IPAddress = Dns.Resolve(&quot;www.contoso.com&quot;).AddressList(0)\n            Try\n               udpClient.Connect(ipAddress, 11003)\n            Catch e As Exception\n               Console.WriteLine(e.ToString())\n            End Try\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_UdpClient_Connect_System_String_System_Int32_\">\r\n    \r\n            <a id=\"System_Net_Sockets_UdpClient_Connect_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Connect(String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Establishes a default remote host using the specified host name and port number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Connect (string hostname, int port);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>hostname</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The DNS name of the remote host to which you intend send data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>port</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The port number on the remote host to which you intend to send data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> is closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>port</code> is not between <a class=\"xref\" href=\"system.net.ipendpoint#System_Net_IPEndPoint_MinPort\" data-linktype=\"relative-path\">MinPort</a> and <a class=\"xref\" href=\"system.net.ipendpoint#System_Net_IPEndPoint_MaxPort\" data-linktype=\"relative-path\">MaxPort</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing the socket. See the Remarks section for more information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Connect method establishes a default remote host using the values specified in the <code>port</code> and <code>hostname</code> parameters. Once established, you do not have to specify a remote host in each call to the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Send_\" data-linktype=\"relative-path\">Send</a> method.  </p>\n<p> Establishing a default remote host is optional. Specifying a default remote host limits you to that host only. If you want to send datagrams to a different remote host, you must make another call to the Connect method or create another <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> without a default remote host.  </p>\n<p> If you have established a default remote host and you also provide a remote host in your call to the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Send_\" data-linktype=\"relative-path\">Send</a> method, <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Send_\" data-linktype=\"relative-path\">Send</a> will throw a <a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a>. If you receive a <a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a>, use <a class=\"xref\" href=\"system.net.sockets.socketexception#System_Net_Sockets_SocketException_ErrorCode_\" data-linktype=\"relative-path\">ErrorCode</a> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  </p>\n<p> If you call the <a class=\"xref\" href=\"system.net.sockets.socket#System_Net_Sockets_Socket_Connect_\" data-linktype=\"relative-path\">Connect</a> method, any datagrams that arrive from an address other than the specified default will be discarded. You cannot set the default remote host to a broadcast address using this method unless you inherit from <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a>, use the client method to obtain the underlying <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a>, and set the socket option to <a class=\"xref\" href=\"system.net.sockets.socketoptionname\" data-linktype=\"relative-path\">System.Net.Sockets.SocketOptionName</a>.  </p>\n<p> You can however, broadcast data to the default broadcast address, 255.255.255.255, if you specify <a class=\"xref\" href=\"system.net.ipaddress#System_Net_IPAddress_Broadcast\" data-linktype=\"relative-path\">System.Net.IPAddress.Broadcast</a> in your call to the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Send_\" data-linktype=\"relative-path\">Send</a> method. If your application requires greater control over broadcast addresses, you can also revert to using the <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> class.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Since the UDP protocol is connectionless, the Connect method does not block. Do not call the Connect method if you intend to receive multicasted datagrams.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the host name and port number to connect to a remote host.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic UdpClient.PublicMethodsAndPropertiesExample#5\">     //Uses a host name and port number to establish a socket connection.\n    UdpClient udpClient = new UdpClient();\n    try{\n        udpClient.Connect(&quot;www.contoso.com&quot;, 11002);\n    }\n    catch (Exception e ) {\n               Console.WriteLine(e.ToString());\n           }\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic UdpClient.PublicMethodsAndPropertiesExample#5\">         //Uses a host name and port number to establish a socket connection.\n         UdpClient^ udpClient = gcnew UdpClient;\n         try\n         {\n            udpClient-&gt;Connect( &quot;www.contoso.com&quot;, 11002 );\n         }\n         catch ( Exception^ e ) \n         {\n            Console::WriteLine( e-&gt;ToString() );\n         }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic UdpClient.PublicMethodsAndPropertiesExample#5\">         &#39;Uses a host name and port number to establish a socket connection.\n         Dim udpClient As New UdpClient()\n         Try\n            udpClient.Connect(&quot;www.contoso.com&quot;, 11002)\n         Catch e As Exception\n            Console.WriteLine(e.ToString())\n         End Try\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_UdpClient_Dispose\">\r\n    \r\n            <a id=\"System_Net_Sockets_UdpClient_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dispose()</div>        \r\n          </div>\r\n    \r\n            <p>Releases the managed and unmanaged resources used by the <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Dispose ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_UdpClient_Dispose_System_Boolean_\">\r\n    \r\n            <a id=\"System_Net_Sockets_UdpClient_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dispose(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Releases the unmanaged resources used by the <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> and optionally releases the managed resources.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void Dispose (bool disposing);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>disposing</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to release both managed and unmanaged resources; <code>false</code> to release only unmanaged resources.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is called by the public <code>Dispose()</code>method and the <a class=\"xref\" href=\"system.object#System_Object_Finalize_\" data-linktype=\"relative-path\">Finalize</a> method. <code>Dispose()</code> invokes the protected <code>Dispose(Boolean)</code> method with the <code>disposing</code> parameter set to <code>true</code>. <a class=\"xref\" href=\"system.object#System_Object_Finalize_\" data-linktype=\"relative-path\">Finalize</a> invokes <code>Dispose</code> with <code>disposing</code> set to <code>false</code>.  </p>\n<p> When the <code>disposing</code> parameter is true, this method releases all resources held by any managed objects that this <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> references. This method invokes the <code>Dispose()</code> method of each referenced object.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_UdpClient_DropMulticastGroup_System_Net_IPAddress_\">\r\n    \r\n            <a id=\"System_Net_Sockets_UdpClient_DropMulticastGroup_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DropMulticastGroup(IPAddress)</div>        \r\n          </div>\r\n    \r\n            <p>Leaves a multicast group.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void DropMulticastGroup (System.Net.IPAddress multicastAddr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>multicastAddr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> of the multicast group to leave.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The underlying <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> has been closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing the socket. See the Remarks section for more information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The IP address is not compatible with the <a class=\"xref\" href=\"system.net.sockets.addressfamily\" data-linktype=\"relative-path\">AddressFamily</a> value that defines the addressing scheme of the socket.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>multicastAddr</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The DropMulticastGroup method withdraws the <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> from the multicast group identified by the specified <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a>. After calling the DropMulticastGroup method, the underlying <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> sends an Internet Group Management Protocol (IGMP) packet to the router, removing the router from the multicast group. After a <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> withdraws from the group, it will no longer be able to receive datagrams sent to that group.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If you receive a <a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a>, use <a class=\"xref\" href=\"system.net.sockets.socketexception#System_Net_Sockets_SocketException_ErrorCode_\" data-linktype=\"relative-path\">ErrorCode</a> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to drop a multicast group by providing a multicast address.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Net.Sockets.UdpClient.JoinMulticastGroup#2\">      // Send data to ClientTarget.\n      Console::WriteLine( &quot;<br>The ClientOriginator sent:<br>&quot; );\n      Send::OriginatorSendData( clientOriginator, m_ClientTargetdest );\n      \n      // Receive data from ClientTarget\n      Ret = Receive::ReceiveUntilStop( clientOriginator );\n      \n      // Stop the ClientTarget thread\n      m_t-&gt;Abort();\n      \n      // Abandon the multicast group.\n      clientOriginator-&gt;DropMulticastGroup( m_GrpAddr );\n      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Net.Sockets.UdpClient.JoinMulticastGroup#2\">      &#39; Send data to ClientTarget.\n      Console.WriteLine(ControlChars.Lf + &quot;The ClientOriginator sent:&quot; + ControlChars.Lf)\n      Send.OriginatorSendData(clientOriginator, m_ClientTargetdest)\n      \n      &#39; Receive data from ClientTarget\n      Ret = Receive.ReceiveUntilStop(clientOriginator)\n      \n      &#39; Stop the ClientTarget thread\n      m_t.Abort()\n      \n      &#39; Abandon the multicast group.\n      clientOriginator.DropMulticastGroup(m_GrpAddr)\n      \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Net.Sockets.UdpClient.JoinMulticastGroup#2\">\n      // Send data to ClientTarget.\n      Console.WriteLine(&quot;<br>The ClientOriginator sent:<br>&quot;);\n      Send.OriginatorSendData(clientOriginator, m_ClientTargetdest);\n    \n      // Receive data from ClientTarget\n      Ret = Receive.ReceiveUntilStop(clientOriginator);\n\n      // Stop the ClientTarget thread\n      m_t.Abort();\n\n      // Abandon the multicast group.\n      clientOriginator.DropMulticastGroup(m_GrpAddr);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_UdpClient_DropMulticastGroup_System_Net_IPAddress_System_Int32_\">\r\n    \r\n            <a id=\"System_Net_Sockets_UdpClient_DropMulticastGroup_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DropMulticastGroup(IPAddress,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Leaves a multicast group.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void DropMulticastGroup (System.Net.IPAddress multicastAddr, int ifindex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>multicastAddr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> of the multicast group to leave.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ifindex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The local address of the multicast group to leave.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The underlying <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> has been closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing the socket. See the Remarks section for more information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The IP address is not compatible with the <a class=\"xref\" href=\"system.net.sockets.addressfamily\" data-linktype=\"relative-path\">AddressFamily</a> value that defines the addressing scheme of the socket.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>multicastAddr</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The DropMulticastGroup method withdraws the <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> from the multicast group identified by the specified <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a>. After calling the DropMulticastGroup method, the underlying <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> sends an Internet Group Management Protocol (IGMP) packet to the router, removing the router from the multicast group. After a <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> withdraws from the group, it will no longer be able to receive datagrams sent to that group.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If you receive a <a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a>, use the <a class=\"xref\" href=\"system.net.sockets.socketexception#System_Net_Sockets_SocketException_ErrorCode_\" data-linktype=\"relative-path\">ErrorCode</a> property to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to drop a multicast group by providing a multicast address.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Net.Sockets.UdpClient.JoinMulticastGroup#2\">      // Send data to ClientTarget.\n      Console::WriteLine( &quot;<br>The ClientOriginator sent:<br>&quot; );\n      Send::OriginatorSendData( clientOriginator, m_ClientTargetdest );\n      \n      // Receive data from ClientTarget\n      Ret = Receive::ReceiveUntilStop( clientOriginator );\n      \n      // Stop the ClientTarget thread\n      m_t-&gt;Abort();\n      \n      // Abandon the multicast group.\n      clientOriginator-&gt;DropMulticastGroup( m_GrpAddr );\n      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Net.Sockets.UdpClient.JoinMulticastGroup#2\">      &#39; Send data to ClientTarget.\n      Console.WriteLine(ControlChars.Lf + &quot;The ClientOriginator sent:&quot; + ControlChars.Lf)\n      Send.OriginatorSendData(clientOriginator, m_ClientTargetdest)\n      \n      &#39; Receive data from ClientTarget\n      Ret = Receive.ReceiveUntilStop(clientOriginator)\n      \n      &#39; Stop the ClientTarget thread\n      m_t.Abort()\n      \n      &#39; Abandon the multicast group.\n      clientOriginator.DropMulticastGroup(m_GrpAddr)\n      \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Net.Sockets.UdpClient.JoinMulticastGroup#2\">\n      // Send data to ClientTarget.\n      Console.WriteLine(&quot;<br>The ClientOriginator sent:<br>&quot;);\n      Send.OriginatorSendData(clientOriginator, m_ClientTargetdest);\n    \n      // Receive data from ClientTarget\n      Ret = Receive.ReceiveUntilStop(clientOriginator);\n\n      // Stop the ClientTarget thread\n      m_t.Abort();\n\n      // Abandon the multicast group.\n      clientOriginator.DropMulticastGroup(m_GrpAddr);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_UdpClient_EndReceive_System_IAsyncResult_System_Net_IPEndPoint__\">\r\n    \r\n            <a id=\"System_Net_Sockets_UdpClient_EndReceive_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EndReceive(IAsyncResult,IPEndPoint)</div>        \r\n          </div>\r\n    \r\n            <p>Ends a pending asynchronous receive.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public byte[] EndReceive (IAsyncResult asyncResult, ref System.Net.IPEndPoint remoteEP);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncResult</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> object returned by a call to <span class=\"xref\">stem.Net.Sockets.UdpClient.BeginReceive*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>remoteEP</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.ipendpoint\" data-linktype=\"relative-path\">IPEndPoint</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The specified remote endpoint.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>If successful, the number of bytes received. If unsuccessful, this method returns 0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>asyncResult</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>asyncResult</code> was not returned by a call to the <span class=\"xref\">stem.Net.Sockets.UdpClient.BeginReceive*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>EndReceive was previously called for the asynchronous read.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when attempting to access the underlying <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a>. See the Remarks section for more information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The underlying <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> has been closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method blocks until the operation is complete.  </p>\n<p> To perform this operation synchronously, use the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Receive_\" data-linktype=\"relative-path\">Receive</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_BeginSend_\" data-linktype=\"relative-path\">BeginSend</a> to complete an asynchronous receive of a server response.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Net.Sockets.UdpClient1#1\">public:\n    static bool isMessageReceived;\n\n    static void ReceiveCallback(IAsyncResult^ asyncResult)\n    {\n        UdpClient^ udpClient =\n            ((UdpState)(asyncResult-&gt;AsyncState)).udpClient;\n        IPEndPoint^ ipEndPoint =\n            ((UdpState)(asyncResult-&gt;AsyncState)).ipEndPoint;\n\n        array&lt;Byte&gt;^ receiveBytes =\n            udpClient-&gt;EndReceive(asyncResult, ipEndPoint);\n        String^ receiveString =\n            Encoding::ASCII-&gt;GetString(receiveBytes);\n\n        Console::WriteLine(&quot;Received: {0}&quot;, receiveString);\n        isMessageReceived = true;\n    }\n\n    static void ReceiveMessages()\n    {\n        // Receive a message and write it to the console.\n        IPEndPoint^ ipEndPoint = gcnew IPEndPoint(IPAddress::Any, listenPort);\n        UdpClient^ udpClient = gcnew UdpClient(ipEndPoint);\n\n        UdpState^ udpState = gcnew UdpState();\n        udpState-&gt;ipEndPoint = ipEndPoint;\n        udpState-&gt;udpClient = udpClient;\n\n        Console::WriteLine(&quot;listening for messages&quot;);\n        udpClient-&gt;BeginReceive(gcnew AsyncCallback(ReceiveCallback),\n            udpState);\n\n        // Do some work while we wait for a message. For this example,\n        // we&#39;ll just sleep\n        while (!isMessageReceived)\n        {\n            Thread::Sleep(100);\n        }\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Net.Sockets.UdpClient1#1\">  public static bool messageReceived = false;\n\n  public static void ReceiveCallback(IAsyncResult ar)\n  {\n    UdpClient u = (UdpClient)((UdpState)(ar.AsyncState)).u;\n    IPEndPoint e = (IPEndPoint)((UdpState)(ar.AsyncState)).e;\n\n    Byte[] receiveBytes = u.EndReceive(ar, ref e);\n    string receiveString = Encoding.ASCII.GetString(receiveBytes);\n\n    Console.WriteLine(&quot;Received: {0}&quot;, receiveString);\n    messageReceived = true;\n  }\n\n  public static void ReceiveMessages()\n  {\n    // Receive a message and write it to the console.\n    IPEndPoint e = new IPEndPoint(IPAddress.Any, listenPort);\n    UdpClient u = new UdpClient(e);\n\n    UdpState s = new UdpState();\n    s.e = e;\n    s.u = u;\n\n    Console.WriteLine(&quot;listening for messages&quot;);\n    u.BeginReceive(new AsyncCallback(ReceiveCallback), s);\n\n    // Do some work while we wait for a message. For this example,\n    // we&#39;ll just sleep\n    while (!messageReceived)\n    {\n      Thread.Sleep(100);\n    }\n  }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_UdpClient_EndSend_System_IAsyncResult_\">\r\n    \r\n            <a id=\"System_Net_Sockets_UdpClient_EndSend_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EndSend(IAsyncResult)</div>        \r\n          </div>\r\n    \r\n            <p>Ends a pending asynchronous send.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int EndSend (IAsyncResult asyncResult);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncResult</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> object returned by a call to <span class=\"xref\">stem.Net.Sockets.UdpClient.BeginSend*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>If successful, the number of bytes sent to the <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>asyncResult</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>asyncResult</code> was not returned by a call to the <span class=\"xref\">stem.Net.Sockets.Socket.BeginSend*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><span class=\"xref\">stem.Net.Sockets.Socket.EndSend*</span> was previously called for the asynchronous read.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when attempting to access the underlying socket. See the Remarks section for more information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The underlying <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> has been closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method blocks until the operation is complete.  </p>\n<p> To perform this operation synchronously, use the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Send_\" data-linktype=\"relative-path\">Send</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_BeginSend_\" data-linktype=\"relative-path\">BeginSend</a> to complete an asynchronous send of a server request.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Net.Sockets.UdpClient1#2\">public:\n    static bool isMessageSent;\n\n    static void SendCallback(IAsyncResult^ asyncResult)\n    {\n        UdpClient^ udpClient = (UdpClient^)asyncResult-&gt;AsyncState;\n\n        Console::WriteLine(&quot;number of bytes sent: {0}&quot;,\n            udpClient-&gt;EndSend(asyncResult));\n        isMessageSent = true;\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Net.Sockets.UdpClient1#2\">  public static bool messageSent = false;\n\n  public static void SendCallback(IAsyncResult ar)\n  {\n    UdpClient u = (UdpClient)ar.AsyncState;\n\n    Console.WriteLine(&quot;number of bytes sent: {0}&quot;, u.EndSend(ar));\n    messageSent = true;\n  }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_UdpClient_JoinMulticastGroup_System_Net_IPAddress_\">\r\n    \r\n            <a id=\"System_Net_Sockets_UdpClient_JoinMulticastGroup_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">JoinMulticastGroup(IPAddress)</div>        \r\n          </div>\r\n    \r\n            <p>Adds a <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> to a multicast group.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void JoinMulticastGroup (System.Net.IPAddress multicastAddr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>multicastAddr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The multicast <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> of the group you want to join.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The underlying <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> has been closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing the socket. See the Remarks section for more information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The IP address is not compatible with the <a class=\"xref\" href=\"system.net.sockets.addressfamily\" data-linktype=\"relative-path\">AddressFamily</a> value that defines the addressing scheme of the socket.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The JoinMulticastGroup method subscribes the <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> to a multicast group using the specified <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a>. After calling the JoinMulticastGroup method, the underlying <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> sends an Internet Group Management Protocol (IGMP) packet to the router requesting membership to the multicast group. The multicast address range is 224.0.0.0 to 239.255.255.255. If you specify an address outside this range or if the router to which the request is made is not multicast enabled, <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> will throw a <a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a>. If you receive a <a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a>, use <a class=\"xref\" href=\"system.net.sockets.socketexception#System_Net_Sockets_SocketException_ErrorCode_\" data-linktype=\"relative-path\">ErrorCode</a> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error. Once the <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> is listed with the router as a member of the multicast group, it will be able to receive multicasted datagrams sent to the specified <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> You must create the <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> using the multicast port number; otherwise, you will not be able to receive multicasted datagrams. Do not call the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Connect_\" data-linktype=\"relative-path\">Connect</a> method prior to calling the JoinMulticastGroup method, or the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Receive_\" data-linktype=\"relative-path\">Receive</a> method will not work. You do not need to belong to a multicast group to send datagrams to a multicast IP address.  </p>\n</div>\n<p> Before joining a multicast group, make sure the socket is bound to the port or endpoint. You do that by calling one of the constructors that accept a port or an endpoint as a parameter.  </p>\n<p> To stop receiving multicasted datagrams, call the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_DropMulticastGroup_\" data-linktype=\"relative-path\">DropMulticastGroup</a> method and provide the <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> of the group from which you would like to withdraw.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In the IPv6 case, there are several multicast address ranges you can choose from. Please, refer to the IETF RFC 2375.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> You cannot call <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_JoinMulticastGroup_\" data-linktype=\"relative-path\">JoinMulticastGroup</a> on a <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> constructed without a specific local port (that is, using the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient__ctor\" data-linktype=\"relative-path\">UdpClient()</a> or <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient__ctor_System_Net_Sockets_AddressFamily_\" data-linktype=\"relative-path\">UdpClient(AddressFamily)</a> constructor).</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to join a multicast group by providing a multicast address.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Net.Sockets.UdpClient.JoinMulticastGroup#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Net;\nusing namespace System::Net::Sockets;\nusing namespace System::Text;\nusing namespace System::IO;\nusing namespace System::Threading;\n\n// The following Receive class is used by both the ClientOriginator and\n// the ClientTarget class to receive data from one another..\npublic ref class Receive\n{\npublic:\n\n   // The following static method performs the actual data\n   // exchange. In particular, it performs the following tasks:\n   // 1)Establishes a communication endpoint.\n   // 2)Receive data through this end point on behalf of the\n   // caller.\n   // 3) Returns the received data in ASCII format.\n   static String^ ReceiveUntilStop( UdpClient^ c )\n   {\n      String^ strData = &quot;&quot;;\n      String^ Ret = &quot;&quot;;\n      ASCIIEncoding^ ASCII = gcnew ASCIIEncoding;\n      \n      // Establish the communication endpoint.\n      IPEndPoint^ endpoint = gcnew IPEndPoint( IPAddress::IPv6Any,50 );\n      while (  !strData-&gt;Equals( &quot;Over&quot; ) )\n      {\n         array&lt;Byte&gt;^data = c-&gt;Receive( endpoint );\n         strData = ASCII-&gt;GetString( data );\n         Ret = String::Concat( Ret, strData, &quot;<br>&quot; );\n      }\n\n      return Ret;\n   }\n\n};\n\n\n// The following Send class is used by both the ClientOriginator and\n// ClientTarget classes to send data to one another.\npublic ref class Send\n{\nprivate:\n   static array&lt;Char&gt;^greetings = {&#39;H&#39;,&#39;e&#39;,&#39;l&#39;,&#39;l&#39;,&#39;o&#39;,&#39; &#39;,&#39;T&#39;,&#39;a&#39;,&#39;r&#39;,&#39;g&#39;,&#39;e&#39;,&#39;t&#39;,&#39;-&gt;&#39;};\n   static array&lt;Char&gt;^nice = {&#39;H&#39;,&#39;a&#39;,&#39;v&#39;,&#39;e&#39;,&#39; &#39;,&#39;a&#39;,&#39; &#39;,&#39;n&#39;,&#39;i&#39;,&#39;c&#39;,&#39;e&#39;,&#39; &#39;,&#39;d&#39;,&#39;a&#39;,&#39;y&#39;,&#39;-&gt;&#39;};\n   static array&lt;Char&gt;^eom = {&#39;O&#39;,&#39;v&#39;,&#39;e&#39;,&#39;r&#39;};\n   static array&lt;Char&gt;^tGreetings = {&#39;H&#39;,&#39;e&#39;,&#39;l&#39;,&#39;l&#39;,&#39;o&#39;,&#39; &#39;,&#39;O&#39;,&#39;r&#39;,&#39;i&#39;,&#39;g&#39;,&#39;i&#39;,&#39;n&#39;,&#39;a&#39;,&#39;t&#39;,&#39;o&#39;,&#39;r&#39;,&#39;!&#39;};\n   static array&lt;Char&gt;^tNice = {&#39;Y&#39;,&#39;o&#39;,&#39;u&#39;,&#39; &#39;,&#39;t&#39;,&#39;o&#39;,&#39;o&#39;,&#39;-&gt;&#39;};\n\npublic:\n\n   // The following static method sends data to the ClientTarget on\n   // behalf of the ClientOriginator.\n   static void OriginatorSendData( UdpClient^ c, IPEndPoint^ ep )\n   {\n      Console::WriteLine( gcnew String( greetings ) );\n      c-&gt;Send( GetByteArray( greetings ), greetings-&gt;Length, ep );\n      Thread::Sleep( 1000 );\n      Console::WriteLine( gcnew String( nice ) );\n      c-&gt;Send( GetByteArray( nice ), nice-&gt;Length, ep );\n      Thread::Sleep( 1000 );\n      Console::WriteLine( gcnew String( eom ) );\n      c-&gt;Send( GetByteArray( eom ), eom-&gt;Length, ep );\n   }\n\n\n   // The following static method sends data to the ClientOriginator on\n   // behalf of the ClientTarget.\n   static void TargetSendData( UdpClient^ c, IPEndPoint^ ep )\n   {\n      Console::WriteLine( gcnew String( tGreetings ) );\n      c-&gt;Send( GetByteArray( tGreetings ), tGreetings-&gt;Length, ep );\n      Thread::Sleep( 1000 );\n      Console::WriteLine( gcnew String( tNice ) );\n      c-&gt;Send( GetByteArray( tNice ), tNice-&gt;Length, ep );\n      Thread::Sleep( 1000 );\n      Console::WriteLine( gcnew String( eom ) );\n      c-&gt;Send( GetByteArray( eom ), eom-&gt;Length, ep );\n   }\n\n\nprivate:\n\n   // Internal utility\n   static array&lt;Byte&gt;^ GetByteArray( array&lt;Char&gt;^ChArray )\n   {\n      array&lt;Byte&gt;^Ret = gcnew array&lt;Byte&gt;(ChArray-&gt;Length);\n      for ( int i = 0; i &lt; ChArray-&gt;Length; i++ )\n         Ret[ i ] = (Byte)ChArray[ i ];\n      return Ret;\n   }\n\n};\n\n\n// The ClientTarget class is the receiver of the ClientOriginator\n// messages. The StartMulticastConversation method contains the\n// logic for exchanging data between the ClientTarget and its\n// counterpart ClientOriginator in a multicast operation.\npublic ref class ClientTarget\n{\nprivate:\n   static UdpClient^ m_ClientTarget;\n   static IPAddress^ m_GrpAddr;\n\npublic:\n\n   // The following StartMulticastConversation method connects the UDP\n   // ClientTarget with the ClientOriginator.\n   // It performs the following main tasks:\n   // 1)Creates a UDP client to receive data on a specific port and using\n   // IPv6 addresses. The port is the same one used by the ClientOriginator\n   // to define its communication endpoint.\n   // 2)Joins or creates a multicast group at the specified address.\n   // 3)Defines the endpoint port to send data to the ClientOriginator.\n   // 4)Receives data from the ClientOriginator until the end of the\n   // communication.\n   // 5)Sends data to the ClientOriginator.\n   // Note this method is the counterpart of the\n   // ClientOriginator::ConnectOriginatorAndTarget().\n   static void StartMulticastConversation()\n   {\n      String^ Ret;\n      \n      // Bind and listen on port 1000. Specify the IPv6 address family type.\n      m_ClientTarget = gcnew UdpClient( 1000,AddressFamily::InterNetworkV6 );\n      \n      // Join or create a multicast group\n      m_GrpAddr = IPAddress::Parse( &quot;FF01::1&quot; );\n      \n      // Use the overloaded JoinMulticastGroup method.\n      // Refer to the ClientOriginator method to see how to use the other\n      // methods.\n      m_ClientTarget-&gt;JoinMulticastGroup( m_GrpAddr );\n      \n      // Define the endpoint data port. Note that this port number\n      // must match the ClientOriginator UDP port number which is the\n      // port on which the ClientOriginator is receiving data.\n      IPEndPoint^ ClientOriginatordest = gcnew IPEndPoint( m_GrpAddr,2000 );\n      \n      // Receive data from the ClientOriginator.\n      Ret = Receive::ReceiveUntilStop( m_ClientTarget );\n      Console::WriteLine( &quot;<br>The ClientTarget received: <br><br> {0}<br>&quot;, Ret );\n      \n      // Done receiving, now respond to the ClientOriginator.\n      // Wait to make sure the ClientOriginator is ready to receive.\n      Thread::Sleep( 2000 );\n      Console::WriteLine( &quot;<br>The ClientTarget sent:<br>&quot; );\n      Send::TargetSendData( m_ClientTarget, ClientOriginatordest );\n      \n      // Exit the multicast conversation.\n      m_ClientTarget-&gt;DropMulticastGroup( m_GrpAddr );\n   }\n\n};\n\n\n// The following ClientOriginator class starts the multicast conversation\n// with the ClientTarget class..\n// It performs the following main tasks:\n// 1)Creates a socket and binds it to the port on which to communicate.\n// 2)Specifies that the connection must use an IPv6 address.\n// 3)Joins or create a multicast group.\n//   Note that the multicast address ranges to use are specified\n//   in the RFC#2375.\n// 4)Defines the endpoint to send the data to and starts the\n// client target (ClientTarget) thread.\npublic ref class ClientOriginator\n{\nprivate:\n   static UdpClient^ clientOriginator;\n   static IPAddress^ m_GrpAddr;\n   static IPEndPoint^ m_ClientTargetdest;\n   static Thread^ m_t;\n\npublic:\n\n   // The ConnectOriginatorAndTarget method connects the\n   // ClientOriginator with the ClientTarget.\n   // It performs the following main tasks:\n   // 1)Creates a UDP client to receive data on a specific port\n   //   using IPv6 addresses.\n   // 2)Joins or create a multicast group at the specified address.\n   // 3)Defines the endpoint port to send data to on the ClientTarget.\n   // 4)Starts the ClientTarget thread that also creates the ClientTarget Object*.\n   // Note this method is the counterpart of the\n   // ClientTarget::StartMulticastConversation().\n   static bool ConnectOriginatorAndTarget()\n   {\n      try\n      {\n         \n         // Bind and listen on port 2000. This constructor creates a socket\n         // and binds it to the port on which to receive data. The family\n         // parameter specifies that this connection uses an IPv6 address.\n         clientOriginator = gcnew UdpClient( 2000,AddressFamily::InterNetworkV6 );\n         \n         // Join or create a multicast group. The multicast address ranges\n         // to use are specified in RFC#2375. You are free to use\n         // different addresses.\n         // Transform the String* address into the internal format.\n         m_GrpAddr = IPAddress::Parse( &quot;FF01::1&quot; );\n         \n         // Display the multicast address used.\n         Console::WriteLine( &quot;Multicast Address: [ {0}]&quot;, m_GrpAddr );\n         \n         // Exercise the use of the IPv6MulticastOption.\n         Console::WriteLine( &quot;Instantiate IPv6MulticastOption(IPAddress)&quot; );\n         \n         // Instantiate IPv6MulticastOption using one of the\n         // overloaded constructors.\n         IPv6MulticastOption^ ipv6MulticastOption = gcnew IPv6MulticastOption( m_GrpAddr );\n         \n         // Store the IPAdress multicast options.\n         IPAddress^ group = ipv6MulticastOption-&gt;Group;\n         __int64 interfaceIndex = ipv6MulticastOption-&gt;InterfaceIndex;\n         \n         // Display IPv6MulticastOption properties.\n         Console::WriteLine( &quot;IPv6MulticastOption::Group: [ {0}]&quot;, group );\n         Console::WriteLine( &quot;IPv6MulticastOption::InterfaceIndex: [ {0}]&quot;, interfaceIndex );\n         \n         // Instantiate IPv6MulticastOption using another\n         // overloaded constructor.\n         IPv6MulticastOption^ ipv6MulticastOption2 = gcnew IPv6MulticastOption( group,interfaceIndex );\n         \n         // Store the IPAdress multicast options.\n         group = ipv6MulticastOption2-&gt;Group;\n         interfaceIndex = ipv6MulticastOption2-&gt;InterfaceIndex;\n         \n         // Display the IPv6MulticastOption2 properties.\n         Console::WriteLine( &quot;IPv6MulticastOption::Group: [ {0} ]&quot;, group );\n         Console::WriteLine( &quot;IPv6MulticastOption::InterfaceIndex: [ {0} ]&quot;, interfaceIndex );\n         \n         // Join the specified multicast group using one of the\n         // JoinMulticastGroup overloaded methods.\n         clientOriginator-&gt;JoinMulticastGroup( (int)interfaceIndex, group );\n         \n         // Define the endpoint data port. Note that this port number\n         // must match the ClientTarget UDP port number which is the\n         // port on which the ClientTarget is receiving data.\n         m_ClientTargetdest = gcnew IPEndPoint( m_GrpAddr,1000 );\n         \n         // Start the ClientTarget thread so it is ready to receive.\n         m_t = gcnew Thread( gcnew ThreadStart( ClientTarget::StartMulticastConversation ) );\n         m_t-&gt;Start();\n         \n         // Make sure that the thread has started.\n         Thread::Sleep( 2000 );\n         return true;\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;[ClientOriginator::ConnectClients] Exception: {0}&quot;, e );\n         return false;\n      }\n\n   }\n\n\n   // The SendAndReceive performs the data exchange\n   // between the ClientOriginator and the ClientTarget classes.\n   static String^ SendAndReceive()\n   {\n      String^ Ret = &quot;&quot;;\n      \n      // Send data to ClientTarget.\n      Console::WriteLine( &quot;<br>The ClientOriginator sent:<br>&quot; );\n      Send::OriginatorSendData( clientOriginator, m_ClientTargetdest );\n      \n      // Receive data from ClientTarget\n      Ret = Receive::ReceiveUntilStop( clientOriginator );\n      \n      // Stop the ClientTarget thread\n      m_t-&gt;Abort();\n      \n      // Abandon the multicast group.\n      clientOriginator-&gt;DropMulticastGroup( m_GrpAddr );\n      \n      return Ret;\n   }\n\n};\n\n\n//This is the console application entry point.\nint main()\n{\n   \n   // Join the multicast group.\n   if ( ClientOriginator::ConnectOriginatorAndTarget() )\n   {\n      \n      // Perform a multicast conversation with the ClientTarget.\n      String^ Ret = ClientOriginator::SendAndReceive();\n      Console::WriteLine( &quot;<br>The ClientOriginator received: <br><br> {0}&quot;, Ret );\n   }\n   else\n   {\n      Console::WriteLine( &quot;Unable to Join the multicast group&quot; );\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Net.Sockets.UdpClient.JoinMulticastGroup#1\">Imports System\nImports System.Net\nImports System.Net.Sockets\nImports System.Text\nImports System.IO\nImports System.Threading\nImports Microsoft.VisualBasic\n\n\n\n\n\n&#39; The following Receive class is used by both the ClientOriginator and \n&#39; the ClientTarget class to receive data from one another..\n\nPublic Class Receive\n   \n   &#39; The following static method performs the actual data\n   &#39; exchange. In particular, it performs the following tasks:\n   &#39; 1)Establishes a communication endpoint.\n   &#39; 2)Receive data through this end point on behalf of the\n   &#39; caller.\n   &#39; 3) Returns the received data in ASCII format.\n   Public Shared Function ReceiveUntilStop(c As UdpClient) As String\n      Dim strData As [String] = &quot;&quot;\n      Dim Ret As [String] = &quot;&quot;\n      Dim ASCII As New ASCIIEncoding()\n      \n      &#39; Establish the communication endpoint.\n      Dim endpoint As New IPEndPoint(IPAddress.IPv6Any, 50)\n      \n      While Not strData.Equals(&quot;Over&quot;)\n         Dim data As [Byte]() = c.Receive(endpoint)\n         strData = ASCII.GetString(data)\n         Ret += strData + ControlChars.Lf\n      End While\n      Return Ret\n   End Function &#39;ReceiveUntilStop\nEnd Class &#39;Receive\n\n&#39; The following Send class is used by both the ClientOriginator and \n&#39; ClientTarget classes to send data to one another.\n\nPublic Class Send\n   Private Shared greetings As Char() =  {&quot;H&quot;c, &quot;e&quot;c, &quot;l&quot;c, &quot;l&quot;c, &quot;o&quot;c, &quot; &quot;c, &quot;T&quot;c, &quot;a&quot;c, &quot;r&quot;c, &quot;g&quot;c, &quot;e&quot;c, &quot;t&quot;c, &quot;.&quot;c}\n   Private Shared nice As Char() =  {&quot;H&quot;c, &quot;a&quot;c, &quot;v&quot;c, &quot;e&quot;c, &quot; &quot;c, &quot;a&quot;c, &quot; &quot;c, &quot;n&quot;c, &quot;i&quot;c, &quot;c&quot;c, &quot;e&quot;c, &quot; &quot;c, &quot;d&quot;c, &quot;a&quot;c, &quot;y&quot;c, &quot;.&quot;c}\n   Private Shared eom As Char() =  {&quot;O&quot;c, &quot;v&quot;c, &quot;e&quot;c, &quot;r&quot;c}\n   \n   Private Shared tGreetings As Char() =  {&quot;H&quot;c, &quot;e&quot;c, &quot;l&quot;c, &quot;l&quot;c, &quot;o&quot;c, &quot; &quot;c, &quot;O&quot;c, &quot;r&quot;c, &quot;i&quot;c, &quot;g&quot;c, &quot;i&quot;c, &quot;n&quot;c, &quot;a&quot;c, &quot;t&quot;c, &quot;o&quot;c, &quot;r&quot;c, &quot;!&quot;c}\n   Private Shared tNice As Char() =  {&quot;Y&quot;c, &quot;o&quot;c, &quot;u&quot;c, &quot; &quot;c, &quot;t&quot;c, &quot;o&quot;c, &quot;o&quot;c, &quot;.&quot;c}\n   \n   \n   &#39; The following static method sends data to the ClientTarget on \n   &#39; behalf of the ClientOriginator.\n   Public Shared Sub OriginatorSendData(c As UdpClient, ep As IPEndPoint)\n      Console.WriteLine(New String(greetings))\n      c.Send(GetByteArray(greetings), greetings.Length, ep)\n      Thread.Sleep(1000)\n      \n      Console.WriteLine(New [String](nice))\n      c.Send(GetByteArray(nice), nice.Length, ep)\n      \n      Thread.Sleep(1000)\n      Console.WriteLine(New [String](eom))\n      c.Send(GetByteArray(eom), eom.Length, ep)\n   End Sub &#39;OriginatorSendData\n   \n   \n   &#39; The following static method sends data to the ClientOriginator on \n   &#39; behalf of the ClientTarget.\n   Public Shared Sub TargetSendData(c As UdpClient, ep As IPEndPoint)\n      Console.WriteLine(New String(tGreetings))\n      c.Send(GetByteArray(tGreetings), tGreetings.Length, ep)\n      Thread.Sleep(1000)\n      \n      Console.WriteLine(New [String](tNice))\n      c.Send(GetByteArray(tNice), tNice.Length, ep)\n      \n      Thread.Sleep(1000)\n      Console.WriteLine(New [String](eom))\n      c.Send(GetByteArray(eom), eom.Length, ep)\n   End Sub &#39;TargetSendData\n   \n   &#39; Internal utility \n   Public Shared Function GetByteArray(ChArray() As [Char]) As [Byte]()\n      Dim Ret(ChArray.Length) As [Byte]\n      \n      Dim i As Integer\n      For i = 0 To ChArray.Length - 1\n         Ret(i) = AscW(ChArray(i))\n      Next i \n      Return Ret\n   End Function &#39;GetByteArray\n\nEnd Class &#39;Send\n\n\n&#39; The ClientTarget class is the receiver of the ClientOriginator \n&#39; messages. The StartMulticastConversation method contains the \n&#39; logic for exchanging data between the ClientTarget and its \n&#39; counterpart ClientOriginator in a multicast operation.\n\nPublic Class ClientTarget\n   Private Shared m_ClientTarget As UdpClient\n   Private Shared m_GrpAddr As IPAddress\n   \n   \n   &#39; The following StartMulticastConversation method connects the UDP \n   &#39; ClientTarget with the ClientOriginator. \n   &#39; It performs the following main tasks:\n   &#39; 1)Creates a UDP client to receive data on a specific port and using \n   &#39; IPv6 addresses. The port is the same one used by the ClientOriginator \n   &#39; to define its communication endpoint.\n   &#39; 2)Joins or creates a multicast group at the specified address.  \n   &#39; 3)Defines the endpoint port to send data to the ClientOriginator.\n   &#39; 4)Receives data from the ClientOriginator until the end of the \n   &#39; communication.\n   &#39; 5)Sends data to the ClientOriginator.\n   &#39; Note this method is the counterpart of the \n   &#39; ClientOriginator.ConnectOriginatorAndTarget().\n   Public Shared Sub StartMulticastConversation()\n      Dim Ret As String\n      \n      &#39; Bind and listen on port 1000. Specify the IPv6 address family type.\n      m_ClientTarget = New UdpClient(1000, AddressFamily.InterNetworkV6)\n      \n      &#39; Join or create a multicast group\n      m_GrpAddr = IPAddress.Parse(&quot;FF01::1&quot;)\n      \n      &#39; Use the overloaded JoinMulticastGroup method.  \n      &#39; Refer to the ClientOriginator method to see how to use the other \n      &#39; methods.\n      m_ClientTarget.JoinMulticastGroup(m_GrpAddr)\n      \n      &#39; Define the endpoint data port. Note that this port number\n      &#39; must match the ClientOriginator UDP port number which is the\n      &#39; port on which the ClientOriginator is receiving data.\n      Dim ClientOriginatordest As New IPEndPoint(m_GrpAddr, 2000)\n      \n      &#39; Receive data from the ClientOriginator.\n      Ret = Receive.ReceiveUntilStop(m_ClientTarget)\n      Console.WriteLine((ControlChars.Lf + &quot;The ClientTarget received: &quot; + ControlChars.Lf + ControlChars.Lf + Ret + ControlChars.Lf))\n      \n      &#39; Done receiving, now respond to the ClientOriginator.\n      &#39; Wait to make sure the ClientOriginator is ready to receive.\n      Thread.Sleep(2000)\n      \n      Console.WriteLine(ControlChars.Lf + &quot;The ClientTarget sent:&quot; + ControlChars.Lf)\n      \n      Send.TargetSendData(m_ClientTarget, ClientOriginatordest)\n      \n      &#39; Exit the multicast conversation. \n      m_ClientTarget.DropMulticastGroup(m_GrpAddr)\n   End Sub &#39;StartMulticastConversation\nEnd Class &#39;ClientTarget\n\n\n&#39; The following ClientOriginator class starts the multicast conversation\n&#39; with the ClientTarget class.. \n&#39; It performs the following main tasks:\n&#39; 1)Creates a socket and binds it to the port on which to communicate.\n&#39; 2)Specifies that the connection must use an IPv6 address.\n&#39; 3)Joins or create a multicast group. \n&#39;   Note that the multicast address ranges to use are specified \n&#39;   in the RFC#2375. \n&#39; 4)Defines the endpoint to send the data to and starts the \n&#39; client target (ClientTarget) thread.\n\nPublic Class ClientOriginator\n   Private Shared clientOriginator As UdpClient\n   Private Shared m_GrpAddr As IPAddress\n   Private Shared m_ClientTargetdest As IPEndPoint\n   Private Shared m_t As Thread\n   \n   \n   &#39; The ConnectOriginatorAndTarget method connects the \n   &#39; ClientOriginator with the ClientTarget.\n   &#39; It performs the following main tasks:\n   &#39; 1)Creates a UDP client to receive data on a specific port \n   &#39;   using IPv6 addresses. \n   &#39; 2)Joins or create a multicast group at the specified address.  \n   &#39; 3)Defines the endpoint port to send data to on the ClientTarget.\n   &#39; 4)Starts the ClientTarget thread that also creates the ClientTarget object.\n   &#39; Note this method is the counterpart of the \n   &#39; ClientTarget.StartMulticastConversation().\n   Public Shared Function ConnectOriginatorAndTarget() As Boolean\n      Try\n         &#39; Bind and listen on port 2000. This constructor creates a socket \n         &#39; and binds it to the port on which to receive data. The family \n         &#39; parameter specifies that this connection uses an IPv6 address.\n         clientOriginator = New UdpClient(2000, AddressFamily.InterNetworkV6)\n         \n         &#39; Join or create a multicast group. The multicast address ranges \n         &#39; to use are specified in RFC#2375. You are free to use \n         &#39; different addresses.\n         &#39; Transform the string address into the internal format.\n         m_GrpAddr = IPAddress.Parse(&quot;FF01::1&quot;)\n         \n         &#39; Display the multicast address used.\n         Console.WriteLine((&quot;Multicast Address: [&quot; + m_GrpAddr.ToString() + &quot;]&quot;))\n         \n         &#39; Exercise the use of the IPv6MulticastOption.\n         Console.WriteLine(&quot;Instantiate IPv6MulticastOption(IPAddress)&quot;)\n         \n         &#39; Instantiate IPv6MulticastOption using one of the \n         &#39; overloaded constructors.\n         Dim ipv6MulticastOption As New IPv6MulticastOption(m_GrpAddr)\n         \n         &#39; Store the IPAdress multicast options.\n         Dim group As IPAddress = ipv6MulticastOption.Group\n         Dim interfaceIndex As Long = ipv6MulticastOption.InterfaceIndex\n         \n         &#39; Display IPv6MulticastOption properties.\n         Console.WriteLine((&quot;IPv6MulticastOption.Group: [&quot; + group.ToString() + &quot;]&quot;))\n         Console.WriteLine((&quot;IPv6MulticastOption.InterfaceIndex: [&quot; + interfaceIndex.ToString() + &quot;]&quot;))\n         \n         &#39; Instantiate IPv6MulticastOption using another \n         &#39; overloaded constructor.\n         Dim ipv6MulticastOption2 As New IPv6MulticastOption(group, interfaceIndex)\n         \n         &#39; Store the IPAdress multicast options.\n         group = ipv6MulticastOption2.Group\n         interfaceIndex = ipv6MulticastOption2.InterfaceIndex\n         \n         &#39; Display the IPv6MulticastOption2 properties.\n         Console.WriteLine((&quot;IPv6MulticastOption.Group: [&quot; + group.ToString() + &quot;]&quot;))\n         Console.WriteLine((&quot;IPv6MulticastOption.InterfaceIndex: [&quot; + interfaceIndex.ToString() + &quot;]&quot;))\n         \n         &#39; Join the specified multicast group using one of the \n         &#39; JoinMulticastGroup overloaded methods.\n         clientOriginator.JoinMulticastGroup(Fix(interfaceIndex), group)\n         \n         &#39; Define the endpoint data port. Note that this port number\n         &#39; must match the ClientTarget UDP port number which is the\n         &#39; port on which the ClientTarget is receiving data.\n         m_ClientTargetdest = New IPEndPoint(m_GrpAddr, 1000)\n         \n         &#39; Start the ClientTarget thread so it is ready to receive.\n         m_t = New Thread(New ThreadStart(AddressOf ClientTarget.StartMulticastConversation))\n         m_t.Start()\n         \n         &#39; Make sure that the thread has started.\n         Thread.Sleep(2000)\n         \n         Return True\n      Catch e As Exception\n         Console.WriteLine((&quot;[ClientOriginator.ConnectClients] Exception: &quot; + e.ToString()))\n         Return False\n      End Try\n   End Function &#39;ConnectOriginatorAndTarget\n   \n   \n   &#39; The SendAndReceive performs the data exchange  \n   &#39; between the ClientOriginator and the ClientTarget classes.\n   Public Shared Function SendAndReceive() As String\n      Dim Ret As String = &quot;&quot;\n      \n      &#39; Send data to ClientTarget.\n      Console.WriteLine(ControlChars.Lf + &quot;The ClientOriginator sent:&quot; + ControlChars.Lf)\n      Send.OriginatorSendData(clientOriginator, m_ClientTargetdest)\n      \n      &#39; Receive data from ClientTarget\n      Ret = Receive.ReceiveUntilStop(clientOriginator)\n      \n      &#39; Stop the ClientTarget thread\n      m_t.Abort()\n      \n      &#39; Abandon the multicast group.\n      clientOriginator.DropMulticastGroup(m_GrpAddr)\n      \n      Return Ret\n   End Function &#39;SendAndReceive\n   \n   \n   &#39;This is the console application entry point.\n   Public Shared Sub Main()\n      &#39; Join the multicast group.\n      If ConnectOriginatorAndTarget() Then\n         &#39; Perform a multicast conversation with the ClientTarget.\n         Dim Ret As String = SendAndReceive()\n         Console.WriteLine((ControlChars.Lf + &quot;The ClientOriginator received: &quot; + ControlChars.Lf + ControlChars.Lf + Ret))\n      Else\n         Console.WriteLine(&quot;Unable to Join the multicast group&quot;)\n      End If\n   End Sub &#39;Main\nEnd Class &#39;ClientOriginator\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Net.Sockets.UdpClient.JoinMulticastGroup#1\">\nusing System;\nusing System.Net;\nusing System.Net.Sockets;\nusing System.Text;\nusing System.IO;\nusing System.Threading;\n\n\nnamespace Mssc.TransportProtocols.Utilities\n{\n\n            \n  // The following Receive class is used by both the ClientOriginator and \n  // the ClientTarget class to receive data from one another..\n  public class Receive\n  {\n    // The following static method performs the actual data\n    // exchange. In particular, it performs the following tasks:\n    // 1)Establishes a communication endpoint.\n    // 2)Receive data through this end point on behalf of the\n    // caller.\n    // 3) Returns the received data in ASCII format.\n    public static string ReceiveUntilStop(UdpClient c)\n    {\n        String strData = &quot;&quot;;\n        String Ret = &quot;&quot;;\n        ASCIIEncoding ASCII = new ASCIIEncoding();\n\n        // Establish the communication endpoint.\n        IPEndPoint endpoint = new IPEndPoint(IPAddress.IPv6Any, 50);\n\n        while (!strData.Equals(&quot;Over&quot;)) \n        {            \n          Byte[] data = c.Receive(ref endpoint);\n          strData = ASCII.GetString(data);\n          Ret += strData  + &quot;<br>&quot;; \n        }\n        return Ret;\n    }\n  }\n\n  // The following Send class is used by both the ClientOriginator and \n  // ClientTarget classes to send data to one another.\n  public class Send\n  {\n    private static char[] greetings = { &#39;H&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;, &#39; &#39;, \n                                      &#39;T&#39;, &#39;a&#39;, &#39;r&#39;, &#39;g&#39;, &#39;e&#39;, &#39;t&#39;, &#39;.&#39; };\n    private static char[] nice      = { &#39;H&#39;, &#39;a&#39;, &#39;v&#39;, &#39;e&#39;, &#39; &#39;, &#39;a&#39;, &#39; &#39;, &#39;n&#39;, &#39;i&#39;, \n                                      &#39;c&#39;, &#39;e&#39;, &#39; &#39;, &#39;d&#39;, &#39;a&#39;, &#39;y&#39;, &#39;.&#39; };\n    private static char [] eom      = { &#39;O&#39;, &#39;v&#39;, &#39;e&#39;, &#39;r&#39;};\n\n    private static char[] tGreetings = { &#39;H&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;, &#39; &#39;, \n                                       &#39;O&#39;, &#39;r&#39;, &#39;i&#39;, &#39;g&#39;, &#39;i&#39;, &#39;n&#39;, &#39;a&#39;, &#39;t&#39;, &#39;o&#39;, &#39;r&#39;, &#39;!&#39; };\n    private static char[] tNice  = { &#39;Y&#39;, &#39;o&#39;, &#39;u&#39;, &#39; &#39;, &#39;t&#39;, &#39;o&#39;, &#39;o&#39;, &#39;.&#39;};\n\n    // The following static method sends data to the ClientTarget on \n    // behalf of the ClientOriginator.\n    public static void OriginatorSendData(UdpClient c, IPEndPoint ep)\n    {\n      Console.WriteLine(new string(greetings));\n      c.Send(GetByteArray(greetings), greetings.Length, ep);        \n      Thread.Sleep(1000);\n\n      Console.WriteLine(new String(nice));\n      c.Send(GetByteArray(nice), nice.Length, ep);        \n       \n      Thread.Sleep(1000);\n      Console.WriteLine(new String(eom));\n      c.Send(GetByteArray(eom), eom.Length, ep);      \n    }\n\n    // The following static method sends data to the ClientOriginator on \n    // behalf of the ClientTarget.\n    public static void TargetSendData(UdpClient c, IPEndPoint ep)\n    {\n      Console.WriteLine(new string(tGreetings));\n      c.Send(GetByteArray(tGreetings), tGreetings.Length, ep);        \n      Thread.Sleep(1000);\n\n      Console.WriteLine(new String(tNice));\n      c.Send(GetByteArray(tNice), tNice.Length, ep);        \n       \n      Thread.Sleep(1000);\n      Console.WriteLine(new String(eom));\n      c.Send(GetByteArray(eom), eom.Length, ep);        \n    }\n    // Internal utility \n    private static Byte[] GetByteArray(Char[] ChArray) \n    {\n      Byte[] Ret = new Byte[ChArray.Length];\n      for (int i = 0; i &lt; ChArray.Length; i++) \n        Ret[i] = (Byte) ChArray[i];\n      return Ret;\n    }\n  }\n\n\n  // The ClientTarget class is the receiver of the ClientOriginator \n  // messages. The StartMulticastConversation method contains the \n  // logic for exchanging data between the ClientTarget and its \n  // counterpart ClientOriginator in a multicast operation.\n  public class ClientTarget\n  {\n    private static UdpClient m_ClientTarget;\n    private static IPAddress m_GrpAddr;\n\n    // The following StartMulticastConversation method connects the UDP \n    // ClientTarget with the ClientOriginator. \n    // It performs the following main tasks:\n    // 1)Creates a UDP client to receive data on a specific port and using \n    // IPv6 addresses. The port is the same one used by the ClientOriginator \n    // to define its communication endpoint.\n    // 2)Joins or creates a multicast group at the specified address.  \n    // 3)Defines the endpoint port to send data to the ClientOriginator.\n    // 4)Receives data from the ClientOriginator until the end of the \n    // communication.\n    // 5)Sends data to the ClientOriginator.\n    // Note this method is the counterpart of the \n    // ClientOriginator.ConnectOriginatorAndTarget().\n    public static void StartMulticastConversation() \n    {\n      string Ret;\n\n      // Bind and listen on port 1000. Specify the IPv6 address family type.\n      m_ClientTarget = new UdpClient(1000, AddressFamily.InterNetworkV6);\n      \n      // Join or create a multicast group\n      m_GrpAddr = IPAddress.Parse(&quot;FF01::1&quot;);\n      \n      // Use the overloaded JoinMulticastGroup method.  \n      // Refer to the ClientOriginator method to see how to use the other \n      // methods.\n      m_ClientTarget.JoinMulticastGroup(m_GrpAddr);\n      \n      // Define the endpoint data port. Note that this port number\n      // must match the ClientOriginator UDP port number which is the\n      // port on which the ClientOriginator is receiving data.\n      IPEndPoint ClientOriginatordest = new IPEndPoint(m_GrpAddr, 2000);\n\n      // Receive data from the ClientOriginator.\n      Ret = Receive.ReceiveUntilStop(m_ClientTarget);\n      Console.WriteLine(&quot;<br>The ClientTarget received: &quot; + &quot;<br><br>&quot; + Ret + &quot;<br>&quot;);        \n\n      // Done receiving, now respond to the ClientOriginator.\n\n      // Wait to make sure the ClientOriginator is ready to receive.\n      Thread.Sleep(2000); \n\n      Console.WriteLine(&quot;<br>The ClientTarget sent:<br>&quot;);\n\n      Send.TargetSendData(m_ClientTarget, ClientOriginatordest);\n    \n      // Exit the multicast conversation. \n      m_ClientTarget.DropMulticastGroup(m_GrpAddr);\n    }\n  } \n\n\n  // The following ClientOriginator class starts the multicast conversation\n  // with the ClientTarget class.. \n  // It performs the following main tasks:\n  // 1)Creates a socket and binds it to the port on which to communicate.\n  // 2)Specifies that the connection must use an IPv6 address.\n  // 3)Joins or create a multicast group. \n  //   Note that the multicast address ranges to use are specified \n  //   in the RFC#2375. \n  // 4)Defines the endpoint to send the data to and starts the \n  // client target (ClientTarget) thread.\n  public class ClientOriginator\n  {\n    private static UdpClient clientOriginator;\n    private static IPAddress m_GrpAddr;\n    private static IPEndPoint m_ClientTargetdest;\n    private static Thread m_t;\n\n    // The ConnectOriginatorAndTarget method connects the \n    // ClientOriginator with the ClientTarget.\n    // It performs the following main tasks:\n    // 1)Creates a UDP client to receive data on a specific port \n    //   using IPv6 addresses. \n    // 2)Joins or create a multicast group at the specified address.  \n    // 3)Defines the endpoint port to send data to on the ClientTarget.\n    // 4)Starts the ClientTarget thread that also creates the ClientTarget object.\n    // Note this method is the counterpart of the \n    // ClientTarget.StartMulticastConversation().\n    public static bool ConnectOriginatorAndTarget()\n    {        \n      try \n      {\n\n        // Bind and listen on port 2000. This constructor creates a socket \n        // and binds it to the port on which to receive data. The family \n        // parameter specifies that this connection uses an IPv6 address.\n        clientOriginator = new UdpClient(2000, AddressFamily.InterNetworkV6);\n\n        // Join or create a multicast group. The multicast address ranges \n        // to use are specified in RFC#2375. You are free to use \n        // different addresses.\n      \n        // Transform the string address into the internal format.\n        m_GrpAddr = IPAddress.Parse(&quot;FF01::1&quot;);\n\n        // Display the multicast address used.\n        Console.WriteLine(&quot;Multicast Address: [&quot; + m_GrpAddr.ToString() + &quot;]&quot;);\n\n        // Exercise the use of the IPv6MulticastOption.\n        Console.WriteLine(&quot;Instantiate IPv6MulticastOption(IPAddress)&quot;);\n    \n        // Instantiate IPv6MulticastOption using one of the \n        // overloaded constructors.\n        IPv6MulticastOption ipv6MulticastOption = new IPv6MulticastOption(m_GrpAddr);\n\n        // Store the IPAdress multicast options.\n        IPAddress group =  ipv6MulticastOption.Group;\n        long interfaceIndex = ipv6MulticastOption.InterfaceIndex;\n\n        // Display IPv6MulticastOption properties.\n        Console.WriteLine(&quot;IPv6MulticastOption.Group: [&quot; + group  + &quot;]&quot;);\n        Console.WriteLine(&quot;IPv6MulticastOption.InterfaceIndex: [&quot; + interfaceIndex + &quot;]&quot;);\n\n\n\n        // Instantiate IPv6MulticastOption using another \n        // overloaded constructor.\n        IPv6MulticastOption ipv6MulticastOption2 = new IPv6MulticastOption(group, interfaceIndex);\n\n        // Store the IPAdress multicast options.\n        group =  ipv6MulticastOption2.Group;\n        interfaceIndex = ipv6MulticastOption2.InterfaceIndex;\n\n        // Display the IPv6MulticastOption2 properties.\n        Console.WriteLine(&quot;IPv6MulticastOption.Group: [&quot; + group  + &quot;]&quot;);\n        Console.WriteLine(&quot;IPv6MulticastOption.InterfaceIndex: [&quot; + interfaceIndex + &quot;]&quot;);\n\n        // Join the specified multicast group using one of the \n        // JoinMulticastGroup overloaded methods.\n        clientOriginator.JoinMulticastGroup((int)interfaceIndex, group);\n      \n\n        // Define the endpoint data port. Note that this port number\n        // must match the ClientTarget UDP port number which is the\n        // port on which the ClientTarget is receiving data.\n        m_ClientTargetdest = new IPEndPoint(m_GrpAddr, 1000);\n\n\n        // Start the ClientTarget thread so it is ready to receive.\n        m_t = new Thread(new ThreadStart(ClientTarget.StartMulticastConversation));\n        m_t.Start();\n        \n        // Make sure that the thread has started.\n        Thread.Sleep(2000); \n      \n        return true;\n      }\n      catch (Exception e) \n      {\n        Console.WriteLine(&quot;[ClientOriginator.ConnectClients] Exception: &quot; + e.ToString());\n        return false;\n      }\n    }\n  \n    // The SendAndReceive performs the data exchange  \n    // between the ClientOriginator and the ClientTarget classes.\n    public static string SendAndReceive()\n    {\n      string Ret = &quot;&quot;;\n\n\n      // Send data to ClientTarget.\n      Console.WriteLine(&quot;<br>The ClientOriginator sent:<br>&quot;);\n      Send.OriginatorSendData(clientOriginator, m_ClientTargetdest);\n    \n      // Receive data from ClientTarget\n      Ret = Receive.ReceiveUntilStop(clientOriginator);\n\n      // Stop the ClientTarget thread\n      m_t.Abort();\n\n      // Abandon the multicast group.\n      clientOriginator.DropMulticastGroup(m_GrpAddr);\n\n\n      return Ret;\n    }\n    \n    //This is the console application entry point.\n    public static void Main()\n    {\n      // Join the multicast group.\n      if (ConnectOriginatorAndTarget())  \n      {\n        // Perform a multicast conversation with the ClientTarget.\n        string Ret = SendAndReceive();\n        Console.WriteLine(&quot;<br>The ClientOriginator received: &quot; + &quot;<br><br>&quot; + Ret);  \n      }\n      else \n      {\n        Console.WriteLine(&quot;Unable to Join the multicast group&quot;);\n      }\n    }\n}\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_UdpClient_JoinMulticastGroup_System_Int32_System_Net_IPAddress_\">\r\n    \r\n            <a id=\"System_Net_Sockets_UdpClient_JoinMulticastGroup_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">JoinMulticastGroup(Int32,IPAddress)</div>        \r\n          </div>\r\n    \r\n            <p>Adds a <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> to a multicast group.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void JoinMulticastGroup (int ifindex, System.Net.IPAddress multicastAddr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ifindex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The interface index associated with the local IP address on which to join the multicast group.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>multicastAddr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The multicast <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> of the group you want to join.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The underlying <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> has been closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing the socket. See the Remarks section for more information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Before joining a multicast group, be sure the socket is bound to the port or endpoint. You can do this by calling one of the constructors that accepts a port or an endpoint as parameter.  </p>\n<p> The <code>infindex</code> parameter is used to identify a hardware interface on the same link.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> There are several multicast address ranges to choose from. Refer to the IETF RFC 2375.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> You cannot call <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_JoinMulticastGroup_\" data-linktype=\"relative-path\">JoinMulticastGroup</a> on a <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> constructed without a specific local port (that is, using the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient__ctor\" data-linktype=\"relative-path\">System.Net.Sockets.UdpClient.UdpClient()</a> or <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient__ctor_System_Net_Sockets_AddressFamily_\" data-linktype=\"relative-path\">System.Net.Sockets.UdpClient.UdpClient(AddressFamily)</a> constructor).</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cpp\" name=\"System.Net.Sockets.UdpClient.JoinMulticastGroup#5\">         // Instantiate IPv6MulticastOption using another\n         // overloaded constructor.\n         IPv6MulticastOption^ ipv6MulticastOption2 = gcnew IPv6MulticastOption( group,interfaceIndex );\n         \n         // Store the IPAdress multicast options.\n         group = ipv6MulticastOption2-&gt;Group;\n         interfaceIndex = ipv6MulticastOption2-&gt;InterfaceIndex;\n         \n         // Display the IPv6MulticastOption2 properties.\n         Console::WriteLine( &quot;IPv6MulticastOption::Group: [ {0} ]&quot;, group );\n         Console::WriteLine( &quot;IPv6MulticastOption::InterfaceIndex: [ {0} ]&quot;, interfaceIndex );\n         \n         // Join the specified multicast group using one of the\n         // JoinMulticastGroup overloaded methods.\n         clientOriginator-&gt;JoinMulticastGroup( (int)interfaceIndex, group );\n         \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Net.Sockets.UdpClient.JoinMulticastGroup#5\">         &#39; Instantiate IPv6MulticastOption using another \n         &#39; overloaded constructor.\n         Dim ipv6MulticastOption2 As New IPv6MulticastOption(group, interfaceIndex)\n         \n         &#39; Store the IPAdress multicast options.\n         group = ipv6MulticastOption2.Group\n         interfaceIndex = ipv6MulticastOption2.InterfaceIndex\n         \n         &#39; Display the IPv6MulticastOption2 properties.\n         Console.WriteLine((&quot;IPv6MulticastOption.Group: [&quot; + group.ToString() + &quot;]&quot;))\n         Console.WriteLine((&quot;IPv6MulticastOption.InterfaceIndex: [&quot; + interfaceIndex.ToString() + &quot;]&quot;))\n         \n         &#39; Join the specified multicast group using one of the \n         &#39; JoinMulticastGroup overloaded methods.\n         clientOriginator.JoinMulticastGroup(Fix(interfaceIndex), group)\n         \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Net.Sockets.UdpClient.JoinMulticastGroup#5\">\n        // Instantiate IPv6MulticastOption using another \n        // overloaded constructor.\n        IPv6MulticastOption ipv6MulticastOption2 = new IPv6MulticastOption(group, interfaceIndex);\n\n        // Store the IPAdress multicast options.\n        group =  ipv6MulticastOption2.Group;\n        interfaceIndex = ipv6MulticastOption2.InterfaceIndex;\n\n        // Display the IPv6MulticastOption2 properties.\n        Console.WriteLine(&quot;IPv6MulticastOption.Group: [&quot; + group  + &quot;]&quot;);\n        Console.WriteLine(&quot;IPv6MulticastOption.InterfaceIndex: [&quot; + interfaceIndex + &quot;]&quot;);\n\n        // Join the specified multicast group using one of the \n        // JoinMulticastGroup overloaded methods.\n        clientOriginator.JoinMulticastGroup((int)interfaceIndex, group);\n      \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_UdpClient_JoinMulticastGroup_System_Net_IPAddress_System_Int32_\">\r\n    \r\n            <a id=\"System_Net_Sockets_UdpClient_JoinMulticastGroup_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">JoinMulticastGroup(IPAddress,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Adds a <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> to a multicast group with the specified Time to Live (TTL).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void JoinMulticastGroup (System.Net.IPAddress multicastAddr, int timeToLive);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>multicastAddr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> of the multicast group to join.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeToLive</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Time to Live (TTL), measured in router hops.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The TTL provided is not between 0 and 255</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The underlying <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> has been closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing the socket. See the Remarks section for more information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>multicastAddr</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The IP address is not compatible with the <a class=\"xref\" href=\"system.net.sockets.addressfamily\" data-linktype=\"relative-path\">AddressFamily</a> value that defines the addressing scheme of the socket.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_JoinMulticastGroup_\" data-linktype=\"relative-path\">JoinMulticastGroup</a> method subscribes the <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> to a multicast group using the specified <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a>. After calling the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_JoinMulticastGroup_\" data-linktype=\"relative-path\">JoinMulticastGroup</a> method, the underlying <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> sends an Internet Group Management Protocol (IGMP) packet to the router requesting membership to the multicast group. The multicast address range is 224.0.0.0 to 239.255.255.255. If you specify an address outside this range or if the router to which the request is made is not multicast enabled, <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> will throw a <a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a>. If you receive a <a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a>, use <a class=\"xref\" href=\"system.net.sockets.socketexception#System_Net_Sockets_SocketException_ErrorCode_\" data-linktype=\"relative-path\">ErrorCode</a> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error. The <code>timeToLive</code> parameter specifies how many router hops will be allowed for a multicasted datagram before being discarded. Once the <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> is listed with the router as a member of the multicast group, it will be able to receive multicasted datagrams sent to the specified <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> You must create the <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> using the multicast port number otherwise you will not be able to receive multicasted datagrams. Do not call the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Connect_\" data-linktype=\"relative-path\">Connect</a> method prior to calling the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_JoinMulticastGroup_\" data-linktype=\"relative-path\">JoinMulticastGroup</a> method or the receive method will not work. You do not need to belong to a multicast group to send datagrams to a multicast IP address.  </p>\n</div>\n<p> Before joining a multicast group make sure the socket is bound to the port or endpoint. You do that by calling one of the constructors that accept as parameter a port or an endpoint.  </p>\n<p> To stop receiving multicasted datagrams, call the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_DropMulticastGroup_\" data-linktype=\"relative-path\">DropMulticastGroup</a> method and provide the <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> of the group from which you would like to withdraw.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> You cannot call <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_JoinMulticastGroup_\" data-linktype=\"relative-path\">JoinMulticastGroup</a> on a <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> constructed without a specific local port (that is, using the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient__ctor\" data-linktype=\"relative-path\">UdpClient()</a> or <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient__ctor_System_Net_Sockets_AddressFamily_\" data-linktype=\"relative-path\">UdpClient(AddressFamily)</a> constructor).</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to join a multicast group by providing two parameters, a multicast address, and a number that represents the TTL.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic UdpClient.PublicMethodsAndPropertiesExample#13\">           UdpClient udpClient = new UdpClient();\n           // Creates an IPAddress to use to join and drop the multicast group.\n           IPAddress multicastIpAddress = IPAddress.Parse(&quot;239.255.255.255&quot;);\n           \n           try{\n                // The packet dies after 50 router hops.\n                udpClient.JoinMulticastGroup(multicastIpAddress, 50);\n           }\n           catch ( Exception e ){\n               Console.WriteLine( e.ToString());\n           }\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic UdpClient.PublicMethodsAndPropertiesExample#13\">         UdpClient^ udpClient = gcnew UdpClient;\n         // Creates an IPAddress to use to join and drop the multicast group.\n         IPAddress^ multicastIpAddress = IPAddress::Parse( &quot;239.255.255.255&quot; );\n\n         try\n         {\n            // The packet dies after 50 router hops.\n            udpClient-&gt;JoinMulticastGroup( multicastIpAddress, 50 );\n         }\n         catch ( Exception^ e ) \n         {\n            Console::WriteLine( e-&gt;ToString() );\n         }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic UdpClient.PublicMethodsAndPropertiesExample#13\">            Dim udpClient As New UdpClient()\n            &#39; Creates an IP address to use to join and drop the multicast group.\n            Dim multicastIpAddress As IPAddress = IPAddress.Parse(&quot;239.255.255.255&quot;)\n            \n            Try\n               &#39; The packet dies after 50 router hops.\n               udpClient.JoinMulticastGroup(multicastIpAddress, 50)\n            Catch e As Exception\n               Console.WriteLine(e.ToString())\n            End Try\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_UdpClient_JoinMulticastGroup_System_Net_IPAddress_System_Net_IPAddress_\">\r\n    \r\n            <a id=\"System_Net_Sockets_UdpClient_JoinMulticastGroup_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">JoinMulticastGroup(IPAddress,IPAddress)</div>        \r\n          </div>\r\n    \r\n            <p>Adds a <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> to a multicast group.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void JoinMulticastGroup (System.Net.IPAddress multicastAddr, System.Net.IPAddress localAddress);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>multicastAddr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The multicast <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> of the group you want to join.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>localAddress</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The local <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The underlying <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> has been closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing the socket. See the Remarks section for more information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Before you join a multicast group, be sure that the socket is bound to the port or endpoint. You can do this by calling one of the constructors that accepts a port or an endpoint as parameter.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> There are several multicast address ranges to choose from. You can find them in the IETF RFC 2375.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> You cannot call <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_JoinMulticastGroup_\" data-linktype=\"relative-path\">JoinMulticastGroup</a> on a <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> constructed without a specific local port (that is, using the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient__ctor\" data-linktype=\"relative-path\">UdpClient()</a> or <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient__ctor_System_Net_Sockets_AddressFamily_\" data-linktype=\"relative-path\">UdpClient(AddressFamily)</a> constructor).</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows the use of the JoinMulticastGroup method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Net.Sockets.UdpClient#6\">        // Subscribe to a multicast group.\n        public static void DoJoinMulticastGroup(UdpClient u, string mcast)\n        {\n            IPAddress[] multicastAddress = Dns.GetHostAddresses(mcast);\n           \n            u.JoinMulticastGroup(multicastAddress[0]);\n            Console.WriteLine(&quot;Joined multicast Address {0}&quot;,\n                multicastAddress[0]);\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Net.Sockets.UdpClient#6\">   // Subscribe to a multicast group.\n   static void DoJoinMulticastGroup( UdpClient^ u, String^ mcast, String^ local )\n   {\n      array&lt;IPAddress^&gt;^ multicastAddress = Dns::GetHostAddresses( mcast );\n\n      u-&gt;JoinMulticastGroup( multicastAddress[0] );\n      Console::WriteLine(  &quot;Joined multicast Address {0}&quot;, multicastAddress );\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_UdpClient_Receive_System_Net_IPEndPoint__\">\r\n    \r\n            <a id=\"System_Net_Sockets_UdpClient_Receive_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Receive(IPEndPoint)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a UDP datagram that was sent by a remote host.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public byte[] Receive (ref System.Net.IPEndPoint remoteEP);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>remoteEP</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.ipendpoint\" data-linktype=\"relative-path\">IPEndPoint</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.net.ipendpoint\" data-linktype=\"relative-path\">IPEndPoint</a> that represents the remote host from which the data was sent.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>An array of type <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> that contains datagram data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The underlying <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> has been closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing the socket. See the Remarks section for more information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Receive method will block until a datagram arrives from a remote host. When data is available, the Receive method will read the first enqueued datagram and return the data portion as a byte array. This method populates the <code>remoteEP</code> parameter with the <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> and port number of the sender.  </p>\n<p> If you specify a default remote host in the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Connect_\" data-linktype=\"relative-path\">Connect</a> method, the Receive method will accept datagrams from that host only. All other datagrams will be discarded.  </p>\n<p> If you receive a <a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a>, use <a class=\"xref\" href=\"system.net.sockets.socketexception#System_Net_Sockets_SocketException_ErrorCode_\" data-linktype=\"relative-path\">ErrorCode</a> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If you intend to receive multicasted datagrams, do not call the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Connect_\" data-linktype=\"relative-path\">Connect</a> method prior to calling the Receive method. The <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> you use to receive datagrams must be created using the multicast port number.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the Receive method. The Receive method blocks execution until it receives a message. Using the <a class=\"xref\" href=\"system.net.ipendpoint\" data-linktype=\"relative-path\">IPEndPoint</a> passed to Receive, the identity of the responding host is revealed.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic UdpClient.PublicMethodsAndPropertiesExample#11\">   //Creates a UdpClient for reading incoming data.\n   UdpClient receivingUdpClient = new UdpClient(11000);\n\n   //Creates an IPEndPoint to record the IP Address and port number of the sender. \n  // The IPEndPoint will allow you to read datagrams sent from any source.\n   IPEndPoint RemoteIpEndPoint = new IPEndPoint(IPAddress.Any, 0);\n   try{\n\n       // Blocks until a message returns on this socket from a remote host.\n       Byte[] receiveBytes = receivingUdpClient.Receive(ref RemoteIpEndPoint); \n\n       string returnData = Encoding.ASCII.GetString(receiveBytes);\n   \n       Console.WriteLine(&quot;This is the message you received &quot; +\n   \t                             returnData.ToString());\n       Console.WriteLine(&quot;This message was sent from &quot; +\n                                   RemoteIpEndPoint.Address.ToString() +\n                                   &quot; on their port number &quot; +\n                                   RemoteIpEndPoint.Port.ToString());\n   }\n   catch ( Exception e ){\n       Console.WriteLine(e.ToString()); \n   }\n   \n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic UdpClient.PublicMethodsAndPropertiesExample#11\">      //Creates a UdpClient for reading incoming data.\n      UdpClient^ receivingUdpClient = gcnew UdpClient( 11000 );\n      \n      //Creates an IPEndPoint to record the IP Address and port number of the sender. \n      // The IPEndPoint will allow you to read datagrams sent from any source.\n      IPEndPoint^ RemoteIpEndPoint = gcnew IPEndPoint( IPAddress::Any,0 );\n      try\n      {\n         // Blocks until a message returns on this socket from a remote host.\n         array&lt;Byte&gt;^receiveBytes = receivingUdpClient-&gt;Receive(  RemoteIpEndPoint );\n\n         String^ returnData = Encoding::ASCII-&gt;GetString( receiveBytes );\n\n         Console::WriteLine( &quot;This is the message you received {0}&quot;, returnData );\n         Console::WriteLine( &quot;This message was sent from {0} on their port number {1}&quot;,\n            RemoteIpEndPoint-&gt;Address, RemoteIpEndPoint-&gt;Port );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( e-&gt;ToString() );\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic UdpClient.PublicMethodsAndPropertiesExample#11\">      &#39;Creates a UdpClient for reading incoming data.\n      Dim receivingUdpClient As New UdpClient(11000)\n      \n      &#39;Creates an IPEndPoint to record the IP address and port number of the sender. \n      &#39; The IPEndPoint will allow you to read datagrams sent from any source.\n      Dim RemoteIpEndPoint As New IPEndPoint(IPAddress.Any, 0)\n      Try\n         \n         &#39; Blocks until a message returns on this socket from a remote host.\n         Dim receiveBytes As [Byte]() = receivingUdpClient.Receive(RemoteIpEndPoint)\n         \n         Dim returnData As String = Encoding.ASCII.GetString(receiveBytes)\n         \n         Console.WriteLine((&quot;This is the message you received &quot; + returnData.ToString()))\n         Console.WriteLine((&quot;This message was sent from &quot; + RemoteIpEndPoint.Address.ToString() + &quot; on their port number &quot; + RemoteIpEndPoint.Port.ToString()))\n      Catch e As Exception\n         Console.WriteLine(e.ToString())\n      End Try\n   End Sub &#39;MyUdpClientCommunicator\n    \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_UdpClient_ReceiveAsync\">\r\n    \r\n            <a id=\"System_Net_Sockets_UdpClient_ReceiveAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReceiveAsync()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a UDP datagram asynchronously that was sent by a remote host.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task&lt;System.Net.Sockets.UdpReceiveResult&gt; ReceiveAsync ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<a class=\"xref\" href=\"system.net.sockets.udpreceiveresult\" data-linktype=\"relative-path\">UdpReceiveResult</a>&gt;</div>\r\n                  </div>\r\n                  <p>Returns <span class=\"xref\">stem.Threading.Tasks.Task`1</span>.  </p>\n<p> The task object representing the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The underlying <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> has been closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing the socket. See the Remarks section for more information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This operation will not block. The returned <a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a>&gt; object will complete after the UDP packet has been received.  </p>\n<p> If you specify a default remote host in the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Connect_\" data-linktype=\"relative-path\">Connect</a> method, this method will accept datagrams from that host only. All other datagrams will be discarded.  </p>\n<p> If you receive a <a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a>, use <a class=\"xref\" href=\"system.net.sockets.socketexception#System_Net_Sockets_SocketException_ErrorCode_\" data-linktype=\"relative-path\">ErrorCode</a> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  </p>\n<div class=\"WARNING\"><h5>Warning</h5><p> If you intend to receive multicasted datagrams, do not call the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Connect_\" data-linktype=\"relative-path\">Connect</a> method prior to calling this method. The <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> you use to receive datagrams must be created using the multicast port number.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_UdpClient_Send_System_Byte___System_Int32_\">\r\n    \r\n            <a id=\"System_Net_Sockets_UdpClient_Send_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Send(Byte[],Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Sends a UDP datagram to a remote host.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Send (byte[] dgram, int bytes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dgram</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of type <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> that specifies the UDP datagram that you intend to send represented as an array of bytes.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bytes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes in the datagram.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of bytes sent.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>dgram</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> has already established a default remote host.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> is closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing the socket. See the Remarks section for more information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This overload sends datagrams to the remote host established in the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Connect_\" data-linktype=\"relative-path\">Connect</a> method and returns the number of bytes sent. If you do not call <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Connect_\" data-linktype=\"relative-path\">Connect</a> before calling this overload, the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Send_\" data-linktype=\"relative-path\">Send</a> method will throw a <a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a>. If you receive a <a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a>, use <a class=\"xref\" href=\"system.net.sockets.socketexception#System_Net_Sockets_SocketException_ErrorCode_\" data-linktype=\"relative-path\">ErrorCode</a> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  </p>\n<p> If you want to send datagrams to a different remote host, you must call the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Connect_\" data-linktype=\"relative-path\">Connect</a> method and specify the desired remote host. Use either of the other <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Send_\" data-linktype=\"relative-path\">Send</a> method overloads to send datagrams to a broadcast address.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Send_\" data-linktype=\"relative-path\">Send</a> method. You must establish a default remote host prior to using this overload.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic UdpClient.PublicMethodsAndPropertiesExample#10\">       UdpClient udpClient = new UdpClient(&quot;www.contoso.com&quot;, 11000);\n       Byte[] sendBytes = Encoding.ASCII.GetBytes(&quot;Is anybody there&quot;);\n       try{\n           udpClient.Send(sendBytes, sendBytes.Length);\n       }\n       catch ( Exception e ){\n           Console.WriteLine( e.ToString());\n       }\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic UdpClient.PublicMethodsAndPropertiesExample#10\">         UdpClient^ udpClient = gcnew UdpClient( &quot;www.contoso.com&quot;,11000 );\n         array&lt;Byte&gt;^ sendBytes = Encoding::ASCII-&gt;GetBytes( &quot;Is anybody there&quot; );\n         try\n         {\n            udpClient-&gt;Send( sendBytes, sendBytes-&gt;Length );\n         }\n         catch ( Exception^ e ) \n         {\n            Console::WriteLine( e-&gt;ToString() );\n         }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic UdpClient.PublicMethodsAndPropertiesExample#10\">               Dim udpClient As New UdpClient(&quot;www.contoso.com&quot;, 11000)\n               Dim sendBytes As [Byte]() = Encoding.ASCII.GetBytes(&quot;Is anybody there&quot;)\n               Try\n                  udpClient.Send(sendBytes, sendBytes.Length)\n               Catch e As Exception\n                  Console.WriteLine(e.ToString())\n               End Try\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_UdpClient_Send_System_Byte___System_Int32_System_Net_IPEndPoint_\">\r\n    \r\n            <a id=\"System_Net_Sockets_UdpClient_Send_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Send(Byte[],Int32,IPEndPoint)</div>        \r\n          </div>\r\n    \r\n            <p>Sends a UDP datagram to the host at the specified remote endpoint.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Send (byte[] dgram, int bytes, System.Net.IPEndPoint endPoint);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dgram</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of type <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> that specifies the UDP datagram that you intend to send, represented as an array of bytes.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bytes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes in the datagram.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>endPoint</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.ipendpoint\" data-linktype=\"relative-path\">IPEndPoint</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.net.ipendpoint\" data-linktype=\"relative-path\">IPEndPoint</a> that represents the host and port to which to send the datagram.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of bytes sent.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>dgram</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> has already established a default remote host.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p><a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> is closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing the socket. See the Remarks section for more information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Send method sends datagrams to the specified endpoint and returns the number of bytes successfully sent. Before calling this overload, you must first create an <a class=\"xref\" href=\"system.net.ipendpoint\" data-linktype=\"relative-path\">IPEndPoint</a> using the IP address and port number of the remote host to which your datagrams will be delivered. You can send datagrams to the default broadcast address, 255.255.255.255, by specifying <a class=\"xref\" href=\"system.net.sockets.socketoptionname\" data-linktype=\"relative-path\">System.Net.Sockets.SocketOptionName</a> for the <a class=\"xref\" href=\"system.net.ipaddress#System_Net_IPAddress_Address_\" data-linktype=\"relative-path\">Address</a> property of the <a class=\"xref\" href=\"system.net.ipendpoint\" data-linktype=\"relative-path\">IPEndPoint</a>. After you have created this <a class=\"xref\" href=\"system.net.ipendpoint\" data-linktype=\"relative-path\">IPEndPoint</a>, pass it to the Send method as the <code>endPoint</code> parameter.  </p>\n<p> If you want to send datagrams to any other broadcast address, use the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Client_\" data-linktype=\"relative-path\">Client</a> method to obtain the underlying <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a>, and set the socket option to <a class=\"xref\" href=\"system.net.sockets.socketoptionname\" data-linktype=\"relative-path\">System.Net.Sockets.SocketOptionName</a>. You can also revert to using the <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> class.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Do not provide an <code>endPoint</code> parameter to this method if you have already established a remote host with the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Connect_\" data-linktype=\"relative-path\">Connect</a> method. If you do, the Send method will throw a <a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a>. If you receive a <a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a>, use <a class=\"xref\" href=\"system.net.sockets.socketexception#System_Net_Sockets_SocketException_ErrorCode_\" data-linktype=\"relative-path\">ErrorCode</a> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the Send method. This example uses an <a class=\"xref\" href=\"system.net.ipendpoint\" data-linktype=\"relative-path\">IPEndPoint</a> to specify the target host.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic UdpClient.PublicMethodsAndPropertiesExample#8\">       UdpClient udpClient = new UdpClient();\n       IPAddress ipAddress = Dns.Resolve(&quot;www.contoso.com&quot;).AddressList[0];\n       IPEndPoint ipEndPoint = new IPEndPoint(ipAddress, 11004);\t\n       \n       Byte[] sendBytes = Encoding.ASCII.GetBytes(&quot;Is anybody there?&quot;);\n       try{\n           udpClient.Send(sendBytes, sendBytes.Length, ipEndPoint);\n       }\n       catch ( Exception e ){\n           Console.WriteLine(e.ToString());\t\n       }\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic UdpClient.PublicMethodsAndPropertiesExample#8\">         UdpClient^ udpClient = gcnew UdpClient;\n         IPAddress^ ipAddress = Dns::Resolve( &quot;www.contoso.com&quot; )-&gt;AddressList[ 0 ];\n         IPEndPoint^ ipEndPoint = gcnew IPEndPoint( ipAddress,11004 );\n\n         array&lt;Byte&gt;^ sendBytes = Encoding::ASCII-&gt;GetBytes( &quot;Is anybody there?&quot; );\n         try\n         {\n            udpClient-&gt;Send( sendBytes, sendBytes-&gt;Length, ipEndPoint );\n         }\n         catch ( Exception^ e ) \n         {\n            Console::WriteLine( e-&gt;ToString() );\n         }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic UdpClient.PublicMethodsAndPropertiesExample#8\">         Dim udpClient As New UdpClient()\n         Dim ipAddress As IPAddress = Dns.Resolve(&quot;www.contoso.com&quot;).AddressList(0)\n         Dim ipEndPoint As New IPEndPoint(ipAddress, 11004)\n         \n         Dim sendBytes As [Byte]() = Encoding.ASCII.GetBytes(&quot;Is anybody there?&quot;)\n         Try\n            udpClient.Send(sendBytes, sendBytes.Length, ipEndPoint)\n         Catch e As Exception\n            Console.WriteLine(e.ToString())\n         End Try\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_UdpClient_Send_System_Byte___System_Int32_System_String_System_Int32_\">\r\n    \r\n            <a id=\"System_Net_Sockets_UdpClient_Send_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Send(Byte[],Int32,String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Sends a UDP datagram to a specified port on a specified remote host.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Send (byte[] dgram, int bytes, string hostname, int port);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dgram</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of type <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> that specifies the UDP datagram that you intend to send represented as an array of bytes.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bytes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes in the datagram.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>hostname</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the remote host to which you intend to send the datagram.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>port</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The remote port number with which you intend to communicate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of bytes sent.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>dgram</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> has already established a default remote host.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> is closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing the socket. See the Remarks section for more information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Send_\" data-linktype=\"relative-path\">Send</a> method sends datagrams to the values specified by the <code>hostname</code> and <code>port</code> parameters and returns the number of bytes successfully sent. You can send datagrams to the default broadcast address by specifying &quot;255.255.255.255&quot; for the <code>hostname</code> parameter value.  </p>\n<p> If you want to send datagrams to any other broadcast address, use the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Client_\" data-linktype=\"relative-path\">Client</a> method to obtain the underlying <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a>, and set the socket option to <a class=\"xref\" href=\"system.net.sockets.socketoptionname\" data-linktype=\"relative-path\">System.Net.Sockets.SocketOptionName</a>. You can also revert to using the <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> class.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Do not provide a host name or port number to this method if you have already established a remote host with the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Connect_\" data-linktype=\"relative-path\">Connect</a> method. If you do, the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Send_\" data-linktype=\"relative-path\">Send</a> method will throw a <a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a>. If you receive a <a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a>, use <a class=\"xref\" href=\"system.net.sockets.socketexception#System_Net_Sockets_SocketException_ErrorCode_\" data-linktype=\"relative-path\">ErrorCode</a> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Send_\" data-linktype=\"relative-path\">Send</a> method. This example uses a host name and a port number to identify the target host.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic UdpClient.PublicMethodsAndPropertiesExample#9\">       UdpClient udpClient = new UdpClient();\n\n       Byte[] sendBytes = Encoding.ASCII.GetBytes(&quot;Is anybody there&quot;);\n       try{\n           udpClient.Send(sendBytes, sendBytes.Length, &quot;www.contoso.com&quot;, 11000);\n       }\n       catch ( Exception e ){\n           Console.WriteLine(e.ToString());\t\n       }\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic UdpClient.PublicMethodsAndPropertiesExample#9\">         UdpClient^ udpClient = gcnew UdpClient;\n\n         array&lt;Byte&gt;^ sendBytes = Encoding::ASCII-&gt;GetBytes( &quot;Is anybody there&quot; );\n         try\n         {\n            udpClient-&gt;Send( sendBytes, sendBytes-&gt;Length, &quot;www.contoso.com&quot;, 11000 );\n         }\n         catch ( Exception^ e ) \n         {\n            Console::WriteLine( e-&gt;ToString() );\n         }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic UdpClient.PublicMethodsAndPropertiesExample#9\">            Dim udpClient As New UdpClient()\n            \n            Dim sendBytes As [Byte]() = Encoding.ASCII.GetBytes(&quot;Is anybody there&quot;)\n            Try\n               udpClient.Send(sendBytes, sendBytes.Length, &quot;www.contoso.com&quot;, 11000)\n            Catch e As Exception\n               Console.WriteLine(e.ToString())\n            End Try\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_UdpClient_SendAsync_System_Byte___System_Int32_\">\r\n    \r\n            <a id=\"System_Net_Sockets_UdpClient_SendAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SendAsync(Byte[],Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Sends a UDP datagram asynchronously to a remote host.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task&lt;int&gt; SendAsync (byte[] datagram, int bytes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>datagram</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of type <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> that specifies the UDP datagram that you intend to send represented as an array of bytes.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bytes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes in the datagram.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;</div>\r\n                  </div>\r\n                  <p>Returns <span class=\"xref\">stem.Threading.Tasks.Task`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>dgram</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> has already established a default remote host.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> is closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing the socket. See the Remarks section for more information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This overload sends datagrams to the remote host established in the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Connect_\" data-linktype=\"relative-path\">Connect</a> method. If you do not call <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Connect_\" data-linktype=\"relative-path\">Connect</a> before calling this overload, the method will throw a <a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a>. If you receive a <a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a>, use <a class=\"xref\" href=\"system.net.sockets.socketexception#System_Net_Sockets_SocketException_ErrorCode_\" data-linktype=\"relative-path\">ErrorCode</a> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  </p>\n<p> If you want to send datagrams to a different remote host, you must call the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Connect_\" data-linktype=\"relative-path\">Connect</a> method and specify the desired remote host. Use either of the other <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_SendAsync_\" data-linktype=\"relative-path\">SendAsync</a> method overloads to send datagrams to a broadcast address.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_UdpClient_SendAsync_System_Byte___System_Int32_System_Net_IPEndPoint_\">\r\n    \r\n            <a id=\"System_Net_Sockets_UdpClient_SendAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SendAsync(Byte[],Int32,IPEndPoint)</div>        \r\n          </div>\r\n    \r\n            <p>Sends a UDP datagram asynchronously to a remote host.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task&lt;int&gt; SendAsync (byte[] datagram, int bytes, System.Net.IPEndPoint endPoint);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>datagram</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of type <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> that specifies the UDP datagram that you intend to send represented as an array of bytes.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bytes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes in the datagram.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>endPoint</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.ipendpoint\" data-linktype=\"relative-path\">IPEndPoint</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.net.ipendpoint\" data-linktype=\"relative-path\">IPEndPoint</a> that represents the host and port to which to send the datagram.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;</div>\r\n                  </div>\r\n                  <p>Returns <span class=\"xref\">stem.Threading.Tasks.Task`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>dgram</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> has already established a default remote host.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p><a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> is closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing the socket. See the Remarks section for more information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method sends datagrams to the specified endpoint. Before calling this overload, you must first create an <a class=\"xref\" href=\"system.net.ipendpoint\" data-linktype=\"relative-path\">IPEndPoint</a> using the IP address and port number of the remote host to which your datagrams will be delivered. You can send datagrams to the default broadcast address, 255.255.255.255, by specifying <a class=\"xref\" href=\"system.net.sockets.socketoptionname\" data-linktype=\"relative-path\">System.Net.Sockets.SocketOptionName</a> for the <a class=\"xref\" href=\"system.net.ipaddress#System_Net_IPAddress_Address_\" data-linktype=\"relative-path\">Address</a> property of the <a class=\"xref\" href=\"system.net.ipendpoint\" data-linktype=\"relative-path\">IPEndPoint</a>. After you have created this <a class=\"xref\" href=\"system.net.ipendpoint\" data-linktype=\"relative-path\">IPEndPoint</a>, pass it to this method as the <code>endPoint</code> parameter.  </p>\n<p> If you want to send datagrams to any other broadcast address, use the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Client_\" data-linktype=\"relative-path\">Client</a> method to obtain the underlying <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a>, and set the socket option to <a class=\"xref\" href=\"system.net.sockets.socketoptionname\" data-linktype=\"relative-path\">System.Net.Sockets.SocketOptionName</a>. You can also revert to using the <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> class.  </p>\n<div class=\"WARNING\"><h5>Warning</h5><p> Do not provide an <code>endPoint</code> parameter to this method if you have already established a remote host with the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Connect_\" data-linktype=\"relative-path\">Connect</a> method. If you do, this method will throw a <a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a>. If you receive a <a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a>, use <a class=\"xref\" href=\"system.net.sockets.socketexception#System_Net_Sockets_SocketException_ErrorCode_\" data-linktype=\"relative-path\">ErrorCode</a> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_UdpClient_SendAsync_System_Byte___System_Int32_System_String_System_Int32_\">\r\n    \r\n            <a id=\"System_Net_Sockets_UdpClient_SendAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SendAsync(Byte[],Int32,String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Sends a UDP datagram asynchronously to a remote host.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task&lt;int&gt; SendAsync (byte[] datagram, int bytes, string hostname, int port);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>datagram</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of type <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> that specifies the UDP datagram that you intend to send represented as an array of bytes.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bytes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes in the datagram.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>hostname</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the remote host to which you intend to send the datagram.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>port</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The remote port number with which you intend to communicate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;</div>\r\n                  </div>\r\n                  <p>Returns <span class=\"xref\">stem.Threading.Tasks.Task`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>dgram</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> has already established a default remote host.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.net.sockets.udpclient\" data-linktype=\"relative-path\">UdpClient</a> is closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing the socket. See the Remarks section for more information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method sends datagrams to the values specified by the <code>hostname</code> and <code>port</code> parameters. You can send datagrams to the default broadcast address by specifying &quot;255.255.255.255&quot; for the <code>hostname</code> parameter value.  </p>\n<p> If you want to send datagrams to any other broadcast address, use the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Client_\" data-linktype=\"relative-path\">Client</a> method to obtain the underlying <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a>, and set the socket option to <a class=\"xref\" href=\"system.net.sockets.socketoptionname\" data-linktype=\"relative-path\">System.Net.Sockets.SocketOptionName</a>. You can also revert to using the <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> class.  </p>\n<div class=\"WARNING\"><h5>Warning</h5><p> Do not provide a host name or port number to this method if you have already established a remote host with the <a class=\"xref\" href=\"system.net.sockets.udpclient#System_Net_Sockets_UdpClient_Connect_\" data-linktype=\"relative-path\">Connect</a> method. If you do, this method will throw a <a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a>. If you receive a <a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a>, use <a class=\"xref\" href=\"system.net.sockets.socketexception#System_Net_Sockets_SocketException_ErrorCode_\" data-linktype=\"relative-path\">ErrorCode</a> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Net.Sockets.UdpClient.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Net.Sockets.UdpClient.yml\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.UdpClient\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.UdpClient..ctor\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.UdpClient.Active\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.UdpClient.AllowNatTraversal\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.UdpClient.Available\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.UdpClient.BeginReceive\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.UdpClient.BeginSend\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.UdpClient.Client\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.UdpClient.Close\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.UdpClient.Connect\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.UdpClient.Dispose\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.UdpClient.DontFragment\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.UdpClient.DropMulticastGroup\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.UdpClient.EnableBroadcast\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.UdpClient.EndReceive\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.UdpClient.EndSend\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.UdpClient.ExclusiveAddressUse\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.UdpClient.JoinMulticastGroup\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.UdpClient.MulticastLoopback\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.UdpClient.Receive\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.UdpClient.ReceiveAsync\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.UdpClient.Send\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.UdpClient.SendAsync\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.UdpClient.Ttl\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"74caf282-6437-efa7-e359-09ff0d0ee056\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides User Datagram Protocol (UDP) network services.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Net.Sockets/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Net.Sockets.UdpClient\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Net.Sockets.UdpClient.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Net.Sockets.UdpClient.yml","open_to_public_contributors":true,"api_name":["System.Net.Sockets.UdpClient","System.Net.Sockets.UdpClient..ctor","System.Net.Sockets.UdpClient.Active","System.Net.Sockets.UdpClient.AllowNatTraversal","System.Net.Sockets.UdpClient.Available","System.Net.Sockets.UdpClient.BeginReceive","System.Net.Sockets.UdpClient.BeginSend","System.Net.Sockets.UdpClient.Client","System.Net.Sockets.UdpClient.Close","System.Net.Sockets.UdpClient.Connect","System.Net.Sockets.UdpClient.Dispose","System.Net.Sockets.UdpClient.DontFragment","System.Net.Sockets.UdpClient.DropMulticastGroup","System.Net.Sockets.UdpClient.EnableBroadcast","System.Net.Sockets.UdpClient.EndReceive","System.Net.Sockets.UdpClient.EndSend","System.Net.Sockets.UdpClient.ExclusiveAddressUse","System.Net.Sockets.UdpClient.JoinMulticastGroup","System.Net.Sockets.UdpClient.MulticastLoopback","System.Net.Sockets.UdpClient.Receive","System.Net.Sockets.UdpClient.ReceiveAsync","System.Net.Sockets.UdpClient.Send","System.Net.Sockets.UdpClient.SendAsync","System.Net.Sockets.UdpClient.Ttl"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Net.Sockets.UdpClient","System::Net::Sockets::UdpClient","System.Net.Sockets.UdpClient.#ctor","System::Net::Sockets::UdpClient::#ctor","System.Net.Sockets.UdpClient.Active","System::Net::Sockets::UdpClient::Active","System.Net.Sockets.UdpClient.AllowNatTraversal","System::Net::Sockets::UdpClient::AllowNatTraversal","System.Net.Sockets.UdpClient.Available","System::Net::Sockets::UdpClient::Available","System.Net.Sockets.UdpClient.BeginReceive","System::Net::Sockets::UdpClient::BeginReceive","System.Net.Sockets.UdpClient.BeginSend","System::Net::Sockets::UdpClient::BeginSend","System.Net.Sockets.UdpClient.Client","System::Net::Sockets::UdpClient::Client","System.Net.Sockets.UdpClient.Close","System::Net::Sockets::UdpClient::Close","System.Net.Sockets.UdpClient.Connect","System::Net::Sockets::UdpClient::Connect","System.Net.Sockets.UdpClient.Dispose","System::Net::Sockets::UdpClient::Dispose","System.Net.Sockets.UdpClient.DontFragment","System::Net::Sockets::UdpClient::DontFragment","System.Net.Sockets.UdpClient.DropMulticastGroup","System::Net::Sockets::UdpClient::DropMulticastGroup","System.Net.Sockets.UdpClient.EnableBroadcast","System::Net::Sockets::UdpClient::EnableBroadcast","System.Net.Sockets.UdpClient.EndReceive","System::Net::Sockets::UdpClient::EndReceive","System.Net.Sockets.UdpClient.EndSend","System::Net::Sockets::UdpClient::EndSend","System.Net.Sockets.UdpClient.ExclusiveAddressUse","System::Net::Sockets::UdpClient::ExclusiveAddressUse","System.Net.Sockets.UdpClient.JoinMulticastGroup","System::Net::Sockets::UdpClient::JoinMulticastGroup","System.Net.Sockets.UdpClient.MulticastLoopback","System::Net::Sockets::UdpClient::MulticastLoopback","System.Net.Sockets.UdpClient.Receive","System::Net::Sockets::UdpClient::Receive","System.Net.Sockets.UdpClient.ReceiveAsync","System::Net::Sockets::UdpClient::ReceiveAsync","System.Net.Sockets.UdpClient.Send","System::Net::Sockets::UdpClient::Send","System.Net.Sockets.UdpClient.SendAsync","System::Net::Sockets::UdpClient::SendAsync","System.Net.Sockets.UdpClient.Ttl","System::Net::Sockets::UdpClient::Ttl"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"74caf282-6437-efa7-e359-09ff0d0ee056","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Net.Sockets/UdpClient.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"UdpClient class | Microsoft Docs","_op_ogTitle":"UdpClient class","description":"Provides User Datagram Protocol (UDP) network services.\n","toc_asset_id":"_splitted/System.Net.Sockets/toc.json","toc_rel":"_splitted/System.Net.Sockets/toc.json","source_url":"","ms.assetid":"System.Net.Sockets.UdpClient","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.net.sockets.udpclient","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.net.sockets.udpclient","fileRelativePath":"System.Net.Sockets.UdpClient.html"},"themesRelativePathToOutputRoot":"_themes/"}