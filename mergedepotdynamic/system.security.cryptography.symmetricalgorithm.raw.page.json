{"content":"    \r\n    <h1 id=\"System_Security_Cryptography_SymmetricAlgorithm\">\r\n      <span class=\"lang-csharp\">SymmetricAlgorithm</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents the abstract base class from which all implementations of symmetric algorithms must inherit.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic abstract class SymmetricAlgorithm : IDisposable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">SymmetricAlgorithm</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The classes that derive from the SymmetricAlgorithm class use a chaining mode called cipher block chaining (CBC), which requires a key (<a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_Key_\" data-linktype=\"relative-path\">Key</a>) and an initialization vector (<a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_IV_\" data-linktype=\"relative-path\">IV</a>) to perform cryptographic transformations on data.  To decrypt data that was encrypted using one of the SymmetricAlgorithm classes, you must set the <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_Key_\" data-linktype=\"relative-path\">Key</a> property and the <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_IV_\" data-linktype=\"relative-path\">IV</a> property to the same values that were used for encryption.  For a symmetric algorithm to be useful, the secret key must be known only to the sender and the receiver.  </p>\n<p> <a class=\"xref\" href=\"system.security.cryptography.rijndaelmanaged\" data-linktype=\"relative-path\">RijndaelManaged</a>, <a class=\"xref\" href=\"system.security.cryptography.descryptoserviceprovider\" data-linktype=\"relative-path\">DESCryptoServiceProvider</a>, <a class=\"xref\" href=\"system.security.cryptography.rc2cryptoserviceprovider\" data-linktype=\"relative-path\">RC2CryptoServiceProvider</a>, and <a class=\"xref\" href=\"system.security.cryptography.tripledescryptoserviceprovider\" data-linktype=\"relative-path\">TripleDESCryptoServiceProvider</a> are implementations of symmetric algorithms.  </p>\n<p> Note that when using derived classes, it is not enough, from a security perspective, to simply force a garbage collection after you have finished using the object. You must explicitly call the <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_Clear_\" data-linktype=\"relative-path\">Clear</a> method on the object to zero out any sensitive data within the object before it is released. Note that garbage collection does not zero out the contents of collected objects but simply marks the memory as available for reallocation. Thus the data contained within a garbage collected object may still be present in the memory heap in unallocated memory. In the case of cryptographic objects, this data could contain sensitive information such as key data or a block of plain text.  </p>\n<p> All cryptographic classes in the .NET Framework that hold sensitive data implement a <code>Clear</code> method. When called, the <code>Clear</code> method overwrites all sensitive data within the object with zeros and then releases the object so that it can be safely garbage collected. When the object has been zeroed and released, you should then call the <code>Dispose</code> method with the <code>disposing</code> parameter set to <code>True</code> to dispose of all managed and unmanaged resources associated with the object.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_SymmetricAlgorithm__ctor\" data-linktype=\"self-bookmark\">SymmetricAlgorithm()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm\" data-linktype=\"relative-path\">SymmetricAlgorithm</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Fields\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_SymmetricAlgorithm_BlockSizeValue\" data-linktype=\"self-bookmark\">BlockSizeValue</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the block size, in bits, of the cryptographic operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_SymmetricAlgorithm_FeedbackSizeValue\" data-linktype=\"self-bookmark\">FeedbackSizeValue</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the feedback size, in bits, of the cryptographic operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_SymmetricAlgorithm_IVValue\" data-linktype=\"self-bookmark\">IVValue</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the initialization vector (<span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.IV*</span>) for the symmetric algorithm.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_SymmetricAlgorithm_KeySizeValue\" data-linktype=\"self-bookmark\">KeySizeValue</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the size, in bits, of the secret key used by the symmetric algorithm.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_SymmetricAlgorithm_KeyValue\" data-linktype=\"self-bookmark\">KeyValue</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the secret key for the symmetric algorithm.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_SymmetricAlgorithm_LegalBlockSizesValue\" data-linktype=\"self-bookmark\">LegalBlockSizesValue</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Specifies the block sizes, in bits, that are supported by the symmetric algorithm.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_SymmetricAlgorithm_LegalKeySizesValue\" data-linktype=\"self-bookmark\">LegalKeySizesValue</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Specifies the key sizes, in bits, that are supported by the symmetric algorithm.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_SymmetricAlgorithm_ModeValue\" data-linktype=\"self-bookmark\">ModeValue</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the cipher mode used in the symmetric algorithm.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_SymmetricAlgorithm_PaddingValue\" data-linktype=\"self-bookmark\">PaddingValue</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the padding mode used in the symmetric algorithm.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_SymmetricAlgorithm_BlockSize\" data-linktype=\"self-bookmark\">BlockSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the block size, in bits, of the cryptographic operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_SymmetricAlgorithm_FeedbackSize\" data-linktype=\"self-bookmark\">FeedbackSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the feedback size, in bits, of the cryptographic operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_SymmetricAlgorithm_IV\" data-linktype=\"self-bookmark\">IV</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the initialization vector (IV) for the symmetric algorithm.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_SymmetricAlgorithm_Key\" data-linktype=\"self-bookmark\">Key</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the secret key for the symmetric algorithm.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_SymmetricAlgorithm_KeySize\" data-linktype=\"self-bookmark\">KeySize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the size, in bits, of the secret key used by the symmetric algorithm.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_SymmetricAlgorithm_LegalBlockSizes\" data-linktype=\"self-bookmark\">LegalBlockSizes</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the block sizes, in bits, that are supported by the symmetric algorithm.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_SymmetricAlgorithm_LegalKeySizes\" data-linktype=\"self-bookmark\">LegalKeySizes</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the key sizes, in bits, that are supported by the symmetric algorithm.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_SymmetricAlgorithm_Mode\" data-linktype=\"self-bookmark\">Mode</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the mode for operation of the symmetric algorithm.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_SymmetricAlgorithm_Padding\" data-linktype=\"self-bookmark\">Padding</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the padding mode used in the symmetric algorithm.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_SymmetricAlgorithm_Clear\" data-linktype=\"self-bookmark\">Clear()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases all resources used by the <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm\" data-linktype=\"relative-path\">SymmetricAlgorithm</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_SymmetricAlgorithm_Create\" data-linktype=\"self-bookmark\">Create()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a default cryptographic object used to perform the symmetric algorithm.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_SymmetricAlgorithm_Create_System_String_\" data-linktype=\"self-bookmark\">Create(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates the specified cryptographic object used to perform the symmetric algorithm.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_SymmetricAlgorithm_CreateDecryptor\" data-linktype=\"self-bookmark\">CreateDecryptor()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a symmetric decryptor object with the current <span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.Key*</span> property and initialization vector (<span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.IV*</span>).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_SymmetricAlgorithm_CreateDecryptor_System_Byte___System_Byte___\" data-linktype=\"self-bookmark\">CreateDecryptor(Byte[],Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, creates a symmetric decryptor object with the specified <span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.Key*</span> property and initialization vector (<span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.IV*</span>).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_SymmetricAlgorithm_CreateEncryptor\" data-linktype=\"self-bookmark\">CreateEncryptor()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a symmetric encryptor object with the current <span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.Key*</span> property and initialization vector (<span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.IV*</span>).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_SymmetricAlgorithm_CreateEncryptor_System_Byte___System_Byte___\" data-linktype=\"self-bookmark\">CreateEncryptor(Byte[],Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, creates a symmetric encryptor object with the specified <span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.Key*</span> property and initialization vector (<span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.IV*</span>).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_SymmetricAlgorithm_Dispose\" data-linktype=\"self-bookmark\">Dispose()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases all resources used by the current instance of the <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm\" data-linktype=\"relative-path\">SymmetricAlgorithm</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_SymmetricAlgorithm_Dispose_System_Boolean_\" data-linktype=\"self-bookmark\">Dispose(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases the unmanaged resources used by the <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm\" data-linktype=\"relative-path\">SymmetricAlgorithm</a> and optionally releases the managed resources.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_SymmetricAlgorithm_GenerateIV\" data-linktype=\"self-bookmark\">GenerateIV()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, generates a random initialization vector (<span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.IV*</span>) to use for the algorithm.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_SymmetricAlgorithm_GenerateKey\" data-linktype=\"self-bookmark\">GenerateKey()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, generates a random key (<span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.Key*</span>) to use for the algorithm.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_SymmetricAlgorithm_ValidKeySize_System_Int32_\" data-linktype=\"self-bookmark\">ValidKeySize(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the specified key size is valid for the current algorithm.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_SymmetricAlgorithm__ctor\">\r\n    \r\n            <a id=\"System_Security_Cryptography_SymmetricAlgorithm__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SymmetricAlgorithm()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm\" data-linktype=\"relative-path\">SymmetricAlgorithm</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected SymmetricAlgorithm ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The implementation of the class derived from the symmetric algorithm is not valid.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You cannot create an instance of an abstract class. Application code creates a new instance of a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"fields\">\r\n        <h2>Fields\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_SymmetricAlgorithm_BlockSizeValue\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BlockSizeValue</div>        \r\n          </div>\r\n    \r\n            <p>Represents the block size, in bits, of the cryptographic operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected int BlockSizeValue;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The block size is the basic unit of data that can be encrypted or decrypted in one operation. Messages longer than the block size are handled as successive blocks; messages shorter than the block size must be padded with extra bits to reach the size of a block. Valid block sizes are determined by the symmetric algorithm used.  </p>\n<p> This field is accessed through the <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_BlockSize_\" data-linktype=\"relative-path\">BlockSize</a> property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_SymmetricAlgorithm_FeedbackSizeValue\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FeedbackSizeValue</div>        \r\n          </div>\r\n    \r\n            <p>Represents the feedback size, in bits, of the cryptographic operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected int FeedbackSizeValue;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The feedback size determines the amount of data that is fed back to successive encryption or decryption operations. The feedback size cannot be greater than the block size.  </p>\n<p> This field is accessed through the <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_FeedbackSize_\" data-linktype=\"relative-path\">FeedbackSize</a> property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_SymmetricAlgorithm_IVValue\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IVValue</div>        \r\n          </div>\r\n    \r\n            <p>Represents the initialization vector (<span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.IV*</span>) for the symmetric algorithm.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected byte[] IVValue;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This field is accessed through the <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_IV_\" data-linktype=\"relative-path\">IV</a> property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_SymmetricAlgorithm_KeySizeValue\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">KeySizeValue</div>        \r\n          </div>\r\n    \r\n            <p>Represents the size, in bits, of the secret key used by the symmetric algorithm.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected int KeySizeValue;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The valid key sizes are specified by the particular symmetric algorithm implementation and are listed in the <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_LegalKeySizes_\" data-linktype=\"relative-path\">LegalKeySizes</a> property.  </p>\n<p> This field is accessed through the <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_KeySize_\" data-linktype=\"relative-path\">KeySize</a> property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_SymmetricAlgorithm_KeyValue\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">KeyValue</div>        \r\n          </div>\r\n    \r\n            <p>Represents the secret key for the symmetric algorithm.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected byte[] KeyValue;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The secret key is used both for encryption and for decryption. For a symmetric algorithm to be successful, the secret key must be known only to the sender and the receiver. The valid key sizes are specified by the particular symmetric algorithm implementation and are listed in the <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_LegalKeySizes_\" data-linktype=\"relative-path\">LegalKeySizes</a> property.  </p>\n<p> This field is accessed through the <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_Key_\" data-linktype=\"relative-path\">Key</a> property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_SymmetricAlgorithm_LegalBlockSizesValue\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LegalBlockSizesValue</div>        \r\n          </div>\r\n    \r\n            <p>Specifies the block sizes, in bits, that are supported by the symmetric algorithm.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected System.Security.Cryptography.KeySizes[] LegalBlockSizesValue;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The symmetric algorithm supports only block sizes that match an entry in this array.  </p>\n<p> This field is accessed through the <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_LegalBlockSizes_\" data-linktype=\"relative-path\">LegalBlockSizes</a> property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_SymmetricAlgorithm_LegalKeySizesValue\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LegalKeySizesValue</div>        \r\n          </div>\r\n    \r\n            <p>Specifies the key sizes, in bits, that are supported by the symmetric algorithm.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected System.Security.Cryptography.KeySizes[] LegalKeySizesValue;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The symmetric algorithm supports only key sizes that match an entry in this array.  </p>\n<p> This field is accessed through the <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_LegalKeySizes_\" data-linktype=\"relative-path\">LegalKeySizes</a> property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_SymmetricAlgorithm_ModeValue\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ModeValue</div>        \r\n          </div>\r\n    \r\n            <p>Represents the cipher mode used in the symmetric algorithm.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected System.Security.Cryptography.CipherMode ModeValue;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>See <a class=\"xref\" href=\"system.security.cryptography.ciphermode\" data-linktype=\"relative-path\">CipherMode</a> enumeration for a description of specific modes.  </p>\n<p> This field is accessed through the <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_Mode_\" data-linktype=\"relative-path\">Mode</a> property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_SymmetricAlgorithm_PaddingValue\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PaddingValue</div>        \r\n          </div>\r\n    \r\n            <p>Represents the padding mode used in the symmetric algorithm.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected System.Security.Cryptography.PaddingMode PaddingValue;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Most plain text messages do not consist of a number of bytes that completely fill blocks. Often, there are not enough bytes to fill the last block. When this happens, a padding string is added to the text. For example, if the block length is 64 bits and the last block contains only 40 bits, 24 bits of padding are added. See the <a class=\"xref\" href=\"system.security.cryptography.paddingmode\" data-linktype=\"relative-path\">PaddingMode</a> enumeration for a description of specific modes.  </p>\n<p> This field is accessed through the <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_Padding_\" data-linktype=\"relative-path\">Padding</a> property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_SymmetricAlgorithm_BlockSize\">\r\n    \r\n            <a id=\"System_Security_Cryptography_SymmetricAlgorithm_BlockSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BlockSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the block size, in bits, of the cryptographic operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int BlockSize { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The block size, in bits.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The block size is invalid.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The block size is the basic unit of data that can be encrypted or decrypted in one operation. Messages longer than the block size are handled as successive blocks; messages shorter than the block size must be padded with extra bits to reach the size of a block. Valid block sizes are determined by the symmetric algorithm used.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_SymmetricAlgorithm_FeedbackSize\">\r\n    \r\n            <a id=\"System_Security_Cryptography_SymmetricAlgorithm_FeedbackSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FeedbackSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the feedback size, in bits, of the cryptographic operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int FeedbackSize { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The feedback size in bits.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The feedback size is larger than the block size.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The feedback size determines the amount of data that is fed back to successive encryption or decryption operations. The feedback size cannot be greater than the block size.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_SymmetricAlgorithm_IV\">\r\n    \r\n            <a id=\"System_Security_Cryptography_SymmetricAlgorithm_IV_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IV</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the initialization vector (IV) for the symmetric algorithm.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual byte[] IV { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>The initialization vector.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to set the initialization vector to <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to set the initialization vector to an invalid size.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The IV property is automatically set to a new random value whenever you create a new instance of one of the <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm\" data-linktype=\"relative-path\">SymmetricAlgorithm</a> classes or when you manually call the <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_GenerateIV_\" data-linktype=\"relative-path\">GenerateIV</a> method.  The size of the IV property must be the same as the <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_BlockSize_\" data-linktype=\"relative-path\">BlockSize</a> property divided by 8.  </p>\n<p> The classes that derive from the <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm\" data-linktype=\"relative-path\">SymmetricAlgorithm</a> class use a chaining mode called cipher block chaining (CBC), which requires a key and an initialization vector to perform cryptographic transformations on data.  To decrypt data that was encrypted using one of the <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm\" data-linktype=\"relative-path\">SymmetricAlgorithm</a> classes, you must set the <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_Key_\" data-linktype=\"relative-path\">Key</a> property and IV property to the same values that were used for encryption.  </p>\n<p> For a given secret key <em>k</em>, a simple block cipher that does not use an initialization vector will encrypt the same input block of plain text into the same output block of cipher text. If you have duplicate blocks within your plain text stream, you will have duplicate blocks within your cipher text stream. If unauthorized users know anything about the structure of a block of your plain text, they can use that information to decipher the known cipher text block and possibly recover your key. To combat this problem, information from the previous block is mixed into the process of encrypting the next block. Thus, the output of two identical plain text blocks is different. Because this technique uses the previous block to encrypt the next block, an initialization vector is needed to encrypt the first block of data.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_SymmetricAlgorithm_Key\">\r\n    \r\n            <a id=\"System_Security_Cryptography_SymmetricAlgorithm_Key_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Key</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the secret key for the symmetric algorithm.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual byte[] Key { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>The secret key to use for the symmetric algorithm.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to set the key to <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The key size is invalid.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The secret key is used both for encryption and for decryption. For a symmetric algorithm to be successful, the secret key must be known only to the sender and the receiver. The valid key sizes are specified by the particular symmetric algorithm implementation and are listed in the <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_LegalKeySizes_\" data-linktype=\"relative-path\">LegalKeySizes</a> property.  </p>\n<p> If this property is <code>null</code> when it is used, the <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_GenerateKey_\" data-linktype=\"relative-path\">GenerateKey</a> method is called to create a new random value.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_SymmetricAlgorithm_KeySize\">\r\n    \r\n            <a id=\"System_Security_Cryptography_SymmetricAlgorithm_KeySize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">KeySize</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the size, in bits, of the secret key used by the symmetric algorithm.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int KeySize { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The size, in bits, of the secret key used by the symmetric algorithm.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The key size is not valid.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The valid key sizes are specified by the particular symmetric algorithm implementation and are listed in the <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_LegalKeySizes_\" data-linktype=\"relative-path\">LegalKeySizes</a> property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_SymmetricAlgorithm_LegalBlockSizes\">\r\n    \r\n            <a id=\"System_Security_Cryptography_SymmetricAlgorithm_LegalBlockSizes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LegalBlockSizes</div>        \r\n          </div>\r\n    \r\n            <p>Gets the block sizes, in bits, that are supported by the symmetric algorithm.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Security.Cryptography.KeySizes[] LegalBlockSizes { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.keysizes\" data-linktype=\"relative-path\">KeySizes</a>[]</div>\r\n                  </div>\r\n                  <p>An array that contains the block sizes supported by the algorithm.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The symmetric algorithm supports only block sizes that match an entry in this array.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows the value of LegalBlockSizes for the symmetric algorithms.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.SymmetricAlgorithm.BlockSize#1\">Imports System\nImports System.Security.Cryptography\n\n\nClass Program\n\n    Shared Sub Main(ByVal args() As String)\n        Dim aes As New AesManaged()\n        Console.WriteLine(&quot;AesManaged &quot;)\n        Dim ks As KeySizes() = aes.LegalKeySizes\n        Dim k As KeySizes\n        For Each k In ks\n            Console.WriteLine(vbTab + &quot;Legal min key size = &quot; + k.MinSize)\n            Console.WriteLine(vbTab + &quot;Legal max key size = &quot; + k.MaxSize)\n        Next k\n        ks = aes.LegalBlockSizes\n\n        For Each k In ks\n            Console.WriteLine(vbTab + &quot;Legal min block size = &quot; + k.MinSize)\n            Console.WriteLine(vbTab + &quot;Legal max block size = &quot; + k.MaxSize)\n        Next k\n\n        Dim des As New DESCryptoServiceProvider()\n        Console.WriteLine(&quot;DESCryptoServiceProvider &quot;)\n        ks = des.LegalKeySizes\n\n        For Each k In ks\n            Console.WriteLine(vbTab + &quot;Legal min key size = &quot; + k.MinSize)\n            Console.WriteLine(vbTab + &quot;Legal max key size = &quot; + k.MaxSize)\n        Next k\n        ks = des.LegalBlockSizes\n\n        For Each k In ks\n            Console.WriteLine(vbTab + &quot;Legal min block size = &quot; + k.MinSize)\n            Console.WriteLine(vbTab + &quot;Legal max block size = &quot; + k.MaxSize)\n        Next k\n\n        Dim rc2 As New RC2CryptoServiceProvider()\n        Console.WriteLine(&quot;RC2CryptoServiceProvider &quot;)\n        ks = rc2.LegalKeySizes\n\n        For Each k In ks\n            Console.WriteLine(vbTab + &quot;Legal min key size = &quot; + k.MinSize)\n            Console.WriteLine(vbTab + &quot;Legal max key size = &quot; + k.MaxSize)\n        Next k\n        ks = rc2.LegalBlockSizes\n\n        For Each k In ks\n            Console.WriteLine(vbTab + &quot;Legal min block size = &quot; + k.MinSize)\n            Console.WriteLine(vbTab + &quot;Legal max block size = &quot; + k.MaxSize)\n        Next k\n\n        Dim rij As New RijndaelManaged()\n        Console.WriteLine(&quot;RijndaelManaged &quot;)\n        ks = rij.LegalKeySizes\n\n        For Each k In ks\n            Console.WriteLine(vbTab + &quot;Legal min key size = &quot; + k.MinSize)\n            Console.WriteLine(vbTab + &quot;Legal max key size = &quot; + k.MaxSize)\n        Next k\n        ks = rij.LegalBlockSizes\n\n        For Each k In ks\n            Console.WriteLine(vbTab + &quot;Legal min block size = &quot; + k.MinSize)\n            Console.WriteLine(vbTab + &quot;Legal max block size = &quot; + k.MaxSize)\n        Next k\n\n        Dim tsp As New TripleDESCryptoServiceProvider()\n        Console.WriteLine(&quot;TripleDESCryptoServiceProvider &quot;)\n        ks = tsp.LegalKeySizes\n\n        For Each k In ks\n            Console.WriteLine(vbTab + &quot;Legal min key size = &quot; + k.MinSize)\n            Console.WriteLine(vbTab + &quot;Legal max key size = &quot; + k.MaxSize)\n        Next k\n        ks = tsp.LegalBlockSizes\n\n        For Each k In ks\n            Console.WriteLine(vbTab + &quot;Legal min block size = &quot; + k.MinSize)\n            Console.WriteLine(vbTab + &quot;Legal max block size = &quot; + k.MaxSize)\n        Next k\n\n    End Sub &#39;Main \nEnd Class &#39;Program\n&#39;This sample produces the following output:\n&#39;AesManaged\n&#39;        Legal min key size = 128\n&#39;        Legal max key size = 256\n&#39;        Legal min block size = 128\n&#39;        Legal max block size = 128\n&#39;DESCryptoServiceProvider\n&#39;        Legal min key size = 64\n&#39;        Legal max key size = 64\n&#39;        Legal min block size = 64\n&#39;        Legal max block size = 64\n&#39;RC2CryptoServiceProvider\n&#39;        Legal min key size = 40\n&#39;        Legal max key size = 128\n&#39;        Legal min block size = 64\n&#39;        Legal max block size = 64\n&#39;RijndaelManaged\n&#39;        Legal min key size = 128\n&#39;        Legal max key size = 256\n&#39;        Legal min block size = 128\n&#39;        Legal max block size = 256\n&#39;TripleDESCryptoServiceProvider\n&#39;        Legal min key size = 128\n&#39;        Legal max key size = 192\n&#39;        Legal min block size = 64\n&#39;        Legal max block size = 64\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.SymmetricAlgorithm.BlockSize#1\">using System;\nusing System.Security.Cryptography;\nnamespace SymmetricAlgo\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            AesManaged aes = new AesManaged();\n            Console.WriteLine(&quot;AesManaged &quot;);\n            KeySizes[] ks = aes.LegalKeySizes;\n            foreach (KeySizes k in ks)\n            {\n                Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Legal min key size = &quot; + k.MinSize);\n                Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Legal max key size = &quot; + k.MaxSize);\n            }\n            ks = aes.LegalBlockSizes;\n            foreach (KeySizes k in ks)\n            {\n                Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Legal min block size = &quot; + k.MinSize);\n                Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Legal max block size = &quot; + k.MaxSize);\n            }\n            DESCryptoServiceProvider des = new DESCryptoServiceProvider();\n            Console.WriteLine(&quot;DESCryptoServiceProvider &quot;);\n            ks = des.LegalKeySizes;\n            foreach (KeySizes k in ks)\n            {\n                Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Legal min key size = &quot; + k.MinSize);\n                Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Legal max key size = &quot; + k.MaxSize);\n            }\n            ks = des.LegalBlockSizes;\n            foreach (KeySizes k in ks)\n            {\n                Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Legal min block size = &quot; + k.MinSize);\n                Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Legal max block size = &quot; + k.MaxSize);\n            }\n            RC2CryptoServiceProvider rc2 = new RC2CryptoServiceProvider();\n            Console.WriteLine(&quot;RC2CryptoServiceProvider &quot;);\n            ks = rc2.LegalKeySizes;\n            foreach (KeySizes k in ks)\n            {\n                Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Legal min key size = &quot; + k.MinSize);\n                Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Legal max key size = &quot; + k.MaxSize);\n            }\n            ks = rc2.LegalBlockSizes;\n            foreach (KeySizes k in ks)\n            {\n                Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Legal min block size = &quot; + k.MinSize);\n                Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Legal max block size = &quot; + k.MaxSize);\n            }\n            RijndaelManaged rij = new RijndaelManaged();\n            Console.WriteLine(&quot;RijndaelManaged &quot;);\n            ks = rij.LegalKeySizes;\n            foreach (KeySizes k in ks)\n            {\n                Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Legal min key size = &quot; + k.MinSize);\n                Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Legal max key size = &quot; + k.MaxSize);\n            }\n            ks = rij.LegalBlockSizes;\n            foreach (KeySizes k in ks)\n            {\n                Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Legal min block size = &quot; + k.MinSize);\n                Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Legal max block size = &quot; + k.MaxSize);\n            }\n            TripleDESCryptoServiceProvider tsp = new TripleDESCryptoServiceProvider();\n            Console.WriteLine(&quot;TripleDESCryptoServiceProvider &quot;);\n            ks = tsp.LegalKeySizes;\n            foreach (KeySizes k in ks)\n            {\n                Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Legal min key size = &quot; + k.MinSize);\n                Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Legal max key size = &quot; + k.MaxSize);\n            }\n            ks = tsp.LegalBlockSizes;\n            foreach (KeySizes k in ks)\n            {\n                Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Legal min block size = &quot; + k.MinSize);\n                Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Legal max block size = &quot; + k.MaxSize);\n            }\n            \n        }\n    }\n}\n//This sample produces the following output:\n//AesManaged\n//        Legal min key size = 128\n//        Legal max key size = 256\n//        Legal min block size = 128\n//        Legal max block size = 128\n//DESCryptoServiceProvider\n//        Legal min key size = 64\n//        Legal max key size = 64\n//        Legal min block size = 64\n//        Legal max block size = 64\n//RC2CryptoServiceProvider\n//        Legal min key size = 40\n//        Legal max key size = 128\n//        Legal min block size = 64\n//        Legal max block size = 64\n//RijndaelManaged\n//        Legal min key size = 128\n//        Legal max key size = 256\n//        Legal min block size = 128\n//        Legal max block size = 256\n//TripleDESCryptoServiceProvider\n//        Legal min key size = 128\n//        Legal max key size = 192\n//        Legal min block size = 64\n//        Legal max block size = 64\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_SymmetricAlgorithm_LegalKeySizes\">\r\n    \r\n            <a id=\"System_Security_Cryptography_SymmetricAlgorithm_LegalKeySizes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LegalKeySizes</div>        \r\n          </div>\r\n    \r\n            <p>Gets the key sizes, in bits, that are supported by the symmetric algorithm.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Security.Cryptography.KeySizes[] LegalKeySizes { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.keysizes\" data-linktype=\"relative-path\">KeySizes</a>[]</div>\r\n                  </div>\r\n                  <p>An array that contains the key sizes supported by the algorithm.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The symmetric algorithm supports only key sizes that match an entry in this array.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows the value of LegalKeySizes for the symmetric algorithms.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.SymmetricAlgorithm.BlockSize#1\">Imports System\nImports System.Security.Cryptography\n\n\nClass Program\n\n    Shared Sub Main(ByVal args() As String)\n        Dim aes As New AesManaged()\n        Console.WriteLine(&quot;AesManaged &quot;)\n        Dim ks As KeySizes() = aes.LegalKeySizes\n        Dim k As KeySizes\n        For Each k In ks\n            Console.WriteLine(vbTab + &quot;Legal min key size = &quot; + k.MinSize)\n            Console.WriteLine(vbTab + &quot;Legal max key size = &quot; + k.MaxSize)\n        Next k\n        ks = aes.LegalBlockSizes\n\n        For Each k In ks\n            Console.WriteLine(vbTab + &quot;Legal min block size = &quot; + k.MinSize)\n            Console.WriteLine(vbTab + &quot;Legal max block size = &quot; + k.MaxSize)\n        Next k\n\n        Dim des As New DESCryptoServiceProvider()\n        Console.WriteLine(&quot;DESCryptoServiceProvider &quot;)\n        ks = des.LegalKeySizes\n\n        For Each k In ks\n            Console.WriteLine(vbTab + &quot;Legal min key size = &quot; + k.MinSize)\n            Console.WriteLine(vbTab + &quot;Legal max key size = &quot; + k.MaxSize)\n        Next k\n        ks = des.LegalBlockSizes\n\n        For Each k In ks\n            Console.WriteLine(vbTab + &quot;Legal min block size = &quot; + k.MinSize)\n            Console.WriteLine(vbTab + &quot;Legal max block size = &quot; + k.MaxSize)\n        Next k\n\n        Dim rc2 As New RC2CryptoServiceProvider()\n        Console.WriteLine(&quot;RC2CryptoServiceProvider &quot;)\n        ks = rc2.LegalKeySizes\n\n        For Each k In ks\n            Console.WriteLine(vbTab + &quot;Legal min key size = &quot; + k.MinSize)\n            Console.WriteLine(vbTab + &quot;Legal max key size = &quot; + k.MaxSize)\n        Next k\n        ks = rc2.LegalBlockSizes\n\n        For Each k In ks\n            Console.WriteLine(vbTab + &quot;Legal min block size = &quot; + k.MinSize)\n            Console.WriteLine(vbTab + &quot;Legal max block size = &quot; + k.MaxSize)\n        Next k\n\n        Dim rij As New RijndaelManaged()\n        Console.WriteLine(&quot;RijndaelManaged &quot;)\n        ks = rij.LegalKeySizes\n\n        For Each k In ks\n            Console.WriteLine(vbTab + &quot;Legal min key size = &quot; + k.MinSize)\n            Console.WriteLine(vbTab + &quot;Legal max key size = &quot; + k.MaxSize)\n        Next k\n        ks = rij.LegalBlockSizes\n\n        For Each k In ks\n            Console.WriteLine(vbTab + &quot;Legal min block size = &quot; + k.MinSize)\n            Console.WriteLine(vbTab + &quot;Legal max block size = &quot; + k.MaxSize)\n        Next k\n\n        Dim tsp As New TripleDESCryptoServiceProvider()\n        Console.WriteLine(&quot;TripleDESCryptoServiceProvider &quot;)\n        ks = tsp.LegalKeySizes\n\n        For Each k In ks\n            Console.WriteLine(vbTab + &quot;Legal min key size = &quot; + k.MinSize)\n            Console.WriteLine(vbTab + &quot;Legal max key size = &quot; + k.MaxSize)\n        Next k\n        ks = tsp.LegalBlockSizes\n\n        For Each k In ks\n            Console.WriteLine(vbTab + &quot;Legal min block size = &quot; + k.MinSize)\n            Console.WriteLine(vbTab + &quot;Legal max block size = &quot; + k.MaxSize)\n        Next k\n\n    End Sub &#39;Main \nEnd Class &#39;Program\n&#39;This sample produces the following output:\n&#39;AesManaged\n&#39;        Legal min key size = 128\n&#39;        Legal max key size = 256\n&#39;        Legal min block size = 128\n&#39;        Legal max block size = 128\n&#39;DESCryptoServiceProvider\n&#39;        Legal min key size = 64\n&#39;        Legal max key size = 64\n&#39;        Legal min block size = 64\n&#39;        Legal max block size = 64\n&#39;RC2CryptoServiceProvider\n&#39;        Legal min key size = 40\n&#39;        Legal max key size = 128\n&#39;        Legal min block size = 64\n&#39;        Legal max block size = 64\n&#39;RijndaelManaged\n&#39;        Legal min key size = 128\n&#39;        Legal max key size = 256\n&#39;        Legal min block size = 128\n&#39;        Legal max block size = 256\n&#39;TripleDESCryptoServiceProvider\n&#39;        Legal min key size = 128\n&#39;        Legal max key size = 192\n&#39;        Legal min block size = 64\n&#39;        Legal max block size = 64\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.SymmetricAlgorithm.BlockSize#1\">using System;\nusing System.Security.Cryptography;\nnamespace SymmetricAlgo\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            AesManaged aes = new AesManaged();\n            Console.WriteLine(&quot;AesManaged &quot;);\n            KeySizes[] ks = aes.LegalKeySizes;\n            foreach (KeySizes k in ks)\n            {\n                Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Legal min key size = &quot; + k.MinSize);\n                Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Legal max key size = &quot; + k.MaxSize);\n            }\n            ks = aes.LegalBlockSizes;\n            foreach (KeySizes k in ks)\n            {\n                Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Legal min block size = &quot; + k.MinSize);\n                Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Legal max block size = &quot; + k.MaxSize);\n            }\n            DESCryptoServiceProvider des = new DESCryptoServiceProvider();\n            Console.WriteLine(&quot;DESCryptoServiceProvider &quot;);\n            ks = des.LegalKeySizes;\n            foreach (KeySizes k in ks)\n            {\n                Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Legal min key size = &quot; + k.MinSize);\n                Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Legal max key size = &quot; + k.MaxSize);\n            }\n            ks = des.LegalBlockSizes;\n            foreach (KeySizes k in ks)\n            {\n                Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Legal min block size = &quot; + k.MinSize);\n                Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Legal max block size = &quot; + k.MaxSize);\n            }\n            RC2CryptoServiceProvider rc2 = new RC2CryptoServiceProvider();\n            Console.WriteLine(&quot;RC2CryptoServiceProvider &quot;);\n            ks = rc2.LegalKeySizes;\n            foreach (KeySizes k in ks)\n            {\n                Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Legal min key size = &quot; + k.MinSize);\n                Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Legal max key size = &quot; + k.MaxSize);\n            }\n            ks = rc2.LegalBlockSizes;\n            foreach (KeySizes k in ks)\n            {\n                Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Legal min block size = &quot; + k.MinSize);\n                Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Legal max block size = &quot; + k.MaxSize);\n            }\n            RijndaelManaged rij = new RijndaelManaged();\n            Console.WriteLine(&quot;RijndaelManaged &quot;);\n            ks = rij.LegalKeySizes;\n            foreach (KeySizes k in ks)\n            {\n                Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Legal min key size = &quot; + k.MinSize);\n                Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Legal max key size = &quot; + k.MaxSize);\n            }\n            ks = rij.LegalBlockSizes;\n            foreach (KeySizes k in ks)\n            {\n                Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Legal min block size = &quot; + k.MinSize);\n                Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Legal max block size = &quot; + k.MaxSize);\n            }\n            TripleDESCryptoServiceProvider tsp = new TripleDESCryptoServiceProvider();\n            Console.WriteLine(&quot;TripleDESCryptoServiceProvider &quot;);\n            ks = tsp.LegalKeySizes;\n            foreach (KeySizes k in ks)\n            {\n                Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Legal min key size = &quot; + k.MinSize);\n                Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Legal max key size = &quot; + k.MaxSize);\n            }\n            ks = tsp.LegalBlockSizes;\n            foreach (KeySizes k in ks)\n            {\n                Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Legal min block size = &quot; + k.MinSize);\n                Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Legal max block size = &quot; + k.MaxSize);\n            }\n            \n        }\n    }\n}\n//This sample produces the following output:\n//AesManaged\n//        Legal min key size = 128\n//        Legal max key size = 256\n//        Legal min block size = 128\n//        Legal max block size = 128\n//DESCryptoServiceProvider\n//        Legal min key size = 64\n//        Legal max key size = 64\n//        Legal min block size = 64\n//        Legal max block size = 64\n//RC2CryptoServiceProvider\n//        Legal min key size = 40\n//        Legal max key size = 128\n//        Legal min block size = 64\n//        Legal max block size = 64\n//RijndaelManaged\n//        Legal min key size = 128\n//        Legal max key size = 256\n//        Legal min block size = 128\n//        Legal max block size = 256\n//TripleDESCryptoServiceProvider\n//        Legal min key size = 128\n//        Legal max key size = 192\n//        Legal min block size = 64\n//        Legal max block size = 64\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_SymmetricAlgorithm_Mode\">\r\n    \r\n            <a id=\"System_Security_Cryptography_SymmetricAlgorithm_Mode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Mode</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the mode for operation of the symmetric algorithm.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Security.Cryptography.CipherMode Mode { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.ciphermode\" data-linktype=\"relative-path\">CipherMode</a></div>\r\n                  </div>\r\n                  <p>The mode for operation of the symmetric algorithm. The default is <a class=\"xref\" href=\"system.security.cryptography.ciphermode\" data-linktype=\"relative-path\">CipherMode</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The cipher mode is not one of the <a class=\"xref\" href=\"system.security.cryptography.ciphermode\" data-linktype=\"relative-path\">CipherMode</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>See <a class=\"xref\" href=\"system.security.cryptography.ciphermode\" data-linktype=\"relative-path\">CipherMode</a> enumeration for a description of specific modes.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_SymmetricAlgorithm_Padding\">\r\n    \r\n            <a id=\"System_Security_Cryptography_SymmetricAlgorithm_Padding_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Padding</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the padding mode used in the symmetric algorithm.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Security.Cryptography.PaddingMode Padding { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.paddingmode\" data-linktype=\"relative-path\">PaddingMode</a></div>\r\n                  </div>\r\n                  <p>The padding mode used in the symmetric algorithm. The default is <a class=\"xref\" href=\"system.security.cryptography.paddingmode\" data-linktype=\"relative-path\">PaddingMode</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The padding mode is not one of the <a class=\"xref\" href=\"system.security.cryptography.paddingmode\" data-linktype=\"relative-path\">PaddingMode</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Most plain text messages do not consist of a number of bytes that completely fill blocks. Often, there are not enough bytes to fill the last block. When this happens, a padding string is added to the text. For example, if the block length is 64 bits and the last block contains only 40 bits, 24 bits of padding are added. See the <a class=\"xref\" href=\"system.security.cryptography.paddingmode\" data-linktype=\"relative-path\">PaddingMode</a> enumeration for a description of specific modes.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_SymmetricAlgorithm_Clear\">\r\n    \r\n            <a id=\"System_Security_Cryptography_SymmetricAlgorithm_Clear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clear()</div>        \r\n          </div>\r\n    \r\n            <p>Releases all resources used by the <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm\" data-linktype=\"relative-path\">SymmetricAlgorithm</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Clear ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Note that when using derived classes, it is not enough, from a security perspective, to simply force a garbage collection after you have finished using the object. You must explicitly call the Clear method on the object to zero out any sensitive data within the object before it is released. Note that garbage collection does not zero out the contents of collected objects but simply marks the memory as available for reallocation. Thus the data contained within a garbage collected object may still be present in the memory heap in unallocated memory. In the case of cryptographic objects, this data could contain sensitive information such as key data or a block of plain text.  </p>\n<p> All cryptographic classes in the .NET Framework that hold sensitive data implement a <code>Clear</code> method. When called, the <code>Clear</code> method overwrites all sensitive data within the object with zeros and then releases the object so that it can be safely garbage collected. When the object has been zeroed and released, you should then call the <code>Dispose</code> method with the <code>disposing</code> parameter set to <code>True</code> to dispose of all managed and unmanaged resources associated with the object.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_SymmetricAlgorithm_Create\">\r\n    \r\n            <a id=\"System_Security_Cryptography_SymmetricAlgorithm_Create_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Create()</div>        \r\n          </div>\r\n    \r\n            <p>Creates a default cryptographic object used to perform the symmetric algorithm.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Security.Cryptography.SymmetricAlgorithm Create ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm\" data-linktype=\"relative-path\">SymmetricAlgorithm</a></div>\r\n                  </div>\r\n                  <p>A default cryptographic object used to perform the symmetric algorithm.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the <a class=\"xref\" href=\"system.security.cryptography.rijndaelmanaged\" data-linktype=\"relative-path\">RijndaelManaged</a> class with the specified <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_Key_\" data-linktype=\"relative-path\">Key</a> property and initialization vector (<a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_IV_\" data-linktype=\"relative-path\">IV</a>) to encrypt a file specified by <code>inName</code>, and outputs the encrypted result to the file specified by <code>outName</code>. The <code>desKey</code> and <code>desIV</code> parameters to the method are 8-byte arrays. You must have the high encryption pack installed to run this example.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic CryptoStream Example#1\">void EncryptData( String^ inName, String^ outName, array&lt;Byte&gt;^rijnKey, array&lt;Byte&gt;^rijnIV )\n{\n   \n   //Create the file streams to handle the input and output files.\n   FileStream^ fin = gcnew FileStream( inName,FileMode::Open,FileAccess::Read );\n   FileStream^ fout = gcnew FileStream( outName,FileMode::OpenOrCreate,FileAccess::Write );\n   fout-&gt;SetLength( 0 );\n   \n   //Create variables to help with read and write.\n   array&lt;Byte&gt;^bin = gcnew array&lt;Byte&gt;(100);\n   long rdlen = 0; //This is the total number of bytes written.\n\n   long totlen = (long)fin-&gt;Length; //This is the total length of the input file.\n\n   int len; //This is the number of bytes to be written at a time.\n\n   SymmetricAlgorithm^ rijn = SymmetricAlgorithm::Create(); //Creates the default implementation, which is RijndaelManaged.         \n\n   CryptoStream^ encStream = gcnew CryptoStream( fout,rijn-&gt;CreateEncryptor( rijnKey, rijnIV ),CryptoStreamMode::Write );\n   Console::WriteLine( &quot;Encrypting...&quot; );\n   \n   //Read from the input file, then encrypt and write to the output file.\n   while ( rdlen &lt; totlen )\n   {\n      len = fin-&gt;Read( bin, 0, 100 );\n      encStream-&gt;Write( bin, 0, len );\n      rdlen = rdlen + len;\n      Console::WriteLine( &quot;{0} bytes processed&quot;, rdlen );\n   }\n\n   encStream-&gt;Close();\n   fout-&gt;Close();\n   fin-&gt;Close();\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic CryptoStream Example#1\">private static void EncryptData(String inName, String outName, byte[] rijnKey, byte[] rijnIV)\n {    \n     //Create the file streams to handle the input and output files.\n     FileStream fin = new FileStream(inName, FileMode.Open, FileAccess.Read);\n     FileStream fout = new FileStream(outName, FileMode.OpenOrCreate, FileAccess.Write);\n     fout.SetLength(0);\n       \n     //Create variables to help with read and write.\n     byte[] bin = new byte[100]; //This is intermediate storage for the encryption.\n     long rdlen = 0;              //This is the total number of bytes written.\n     long totlen = fin.Length;    //This is the total length of the input file.\n     int len;                     //This is the number of bytes to be written at a time.\n \n     SymmetricAlgorithm rijn = SymmetricAlgorithm.Create(); //Creates the default implementation, which is RijndaelManaged.         \n     CryptoStream encStream = new CryptoStream(fout, rijn.CreateEncryptor(rijnKey, rijnIV), CryptoStreamMode.Write);\n                \n     Console.WriteLine(&quot;Encrypting...&quot;);\n \n     //Read from the input file, then encrypt and write to the output file.\n     while(rdlen &lt; totlen)\n     {\n         len = fin.Read(bin, 0, 100);\n         encStream.Write(bin, 0, len);\n         rdlen = rdlen + len;\n         Console.WriteLine(&quot;{0} bytes processed&quot;, rdlen);\n     }\n \n     encStream.Close();  \n     fout.Close();\n     fin.Close();                   \n }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic CryptoStream Example#1\">    Private Shared Sub EncryptData(inName As String, outName As String, _\n    rijnKey() As Byte, rijnIV() As Byte)\n    \n        &#39;Create the file streams to handle the input and output files.\n        Dim fin As New FileStream(inName, FileMode.Open, FileAccess.Read)\n        Dim fout As New FileStream(outName, FileMode.OpenOrCreate, _\n           FileAccess.Write)\n        fout.SetLength(0)\n        \n        &#39;Create variables to help with read and write.\n        Dim bin(100) As Byte &#39;This is intermediate storage for the encryption.\n        Dim rdlen As Long = 0 &#39;This is the total number of bytes written.\n        Dim totlen As Long = fin.Length &#39;Total length of the input file.\n        Dim len As Integer &#39;This is the number of bytes to be written at a time.\n        &#39;Creates the default implementation, which is RijndaelManaged.\n        Dim rijn As SymmetricAlgorithm = SymmetricAlgorithm.Create()\n        Dim encStream As New CryptoStream(fout, _\n           rijn.CreateEncryptor(rijnKey, rijnIV), CryptoStreamMode.Write)\n        \n        Console.WriteLine(&quot;Encrypting...&quot;)\n        \n        &#39;Read from the input file, then encrypt and write to the output file.\n        While rdlen &lt; totlen\n            len = fin.Read(bin, 0, 100)\n            encStream.Write(bin, 0, len)\n            rdlen = Convert.ToInt32(rdlen + len)\n            Console.WriteLine(&quot;{0} bytes processed&quot;, rdlen)\n        End While\n        \n        encStream.Close()\n\tfout.Close()\n\tfin.Close()\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_SymmetricAlgorithm_Create_System_String_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_SymmetricAlgorithm_Create_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Create(String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates the specified cryptographic object used to perform the symmetric algorithm.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Security.Cryptography.SymmetricAlgorithm Create (string algName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>algName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the specific implementation of the <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm\" data-linktype=\"relative-path\">SymmetricAlgorithm</a> class to use.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm\" data-linktype=\"relative-path\">SymmetricAlgorithm</a></div>\r\n                  </div>\r\n                  <p>A cryptographic object used to perform the symmetric algorithm.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_SymmetricAlgorithm_CreateDecryptor\">\r\n    \r\n            <a id=\"System_Security_Cryptography_SymmetricAlgorithm_CreateDecryptor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateDecryptor()</div>        \r\n          </div>\r\n    \r\n            <p>Creates a symmetric decryptor object with the current <span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.Key*</span> property and initialization vector (<span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.IV*</span>).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Security.Cryptography.ICryptoTransform CreateDecryptor ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.icryptotransform\" data-linktype=\"relative-path\">ICryptoTransform</a></div>\r\n                  </div>\r\n                  <p>A symmetric decryptor object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method decrypts an encrypted message created using the <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_CreateEncryptor_\" data-linktype=\"relative-path\">CreateEncryptor</a> overload with the same signature.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_SymmetricAlgorithm_CreateDecryptor_System_Byte___System_Byte___\">\r\n    \r\n            <a id=\"System_Security_Cryptography_SymmetricAlgorithm_CreateDecryptor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateDecryptor(Byte[],Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, creates a symmetric decryptor object with the specified <span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.Key*</span> property and initialization vector (<span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.IV*</span>).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract System.Security.Cryptography.ICryptoTransform CreateDecryptor (byte[] rgbKey, byte[] rgbIV);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgbKey</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The secret key to use for the symmetric algorithm.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgbIV</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The initialization vector to use for the symmetric algorithm.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.icryptotransform\" data-linktype=\"relative-path\">ICryptoTransform</a></div>\r\n                  </div>\r\n                  <p>A symmetric decryptor object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method decrypts an encrypted message created using the <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_CreateEncryptor_\" data-linktype=\"relative-path\">CreateEncryptor</a> overload with the same parameters.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_SymmetricAlgorithm_CreateEncryptor\">\r\n    \r\n            <a id=\"System_Security_Cryptography_SymmetricAlgorithm_CreateEncryptor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateEncryptor()</div>        \r\n          </div>\r\n    \r\n            <p>Creates a symmetric encryptor object with the current <span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.Key*</span> property and initialization vector (<span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.IV*</span>).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Security.Cryptography.ICryptoTransform CreateEncryptor ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.icryptotransform\" data-linktype=\"relative-path\">ICryptoTransform</a></div>\r\n                  </div>\r\n                  <p>A symmetric encryptor object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the current <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_Key_\" data-linktype=\"relative-path\">Key</a> property is <code>null</code>, the <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_GenerateKey_\" data-linktype=\"relative-path\">GenerateKey</a> method is called to create a new random <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_Key_\" data-linktype=\"relative-path\">Key</a>. If the current <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_IV_\" data-linktype=\"relative-path\">IV</a> property is <code>null</code>, the <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_GenerateIV_\" data-linktype=\"relative-path\">GenerateIV</a> method is called to create a new random <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_IV_\" data-linktype=\"relative-path\">IV</a>.  </p>\n<p> Use the <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_CreateDecryptor_\" data-linktype=\"relative-path\">CreateDecryptor</a> overload with the same signature to decrypt the result of this method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example encrypts a string using the transform object returned from the CreateEncryptor method.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.SymmetricAlgorithm#1\">using namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Text;\n\nclass EncryptorExample\n{\npublic:\n     static void Main()\n     {\n         TripleDESCryptoServiceProvider^ tdesCSP = gcnew TripleDESCryptoServiceProvider();\n\n         tdesCSP-&gt;GenerateKey();\n         tdesCSP-&gt;GenerateIV();\n         String^ quote =\n             &quot;Things may come to those who wait, but only the &quot; +\n             &quot;things left by those who hustle. -- Abraham Lincoln&quot;;\n         array&lt;Byte&gt;^ encQuote = EncryptString(tdesCSP, quote);\n\n         Console::WriteLine(&quot;Encrypted Quote:<br>&quot;);\n         Console::WriteLine(Convert::ToBase64String(encQuote));\n\n         Console::WriteLine(&quot;<br>Decrypted Quote:<br>&quot;);\n         Console::WriteLine(DecryptBytes(tdesCSP, encQuote));\n     }\n\npublic:\n     static array&lt;Byte&gt;^ EncryptString(SymmetricAlgorithm^ symAlg, String^ inString)\n     {\n         array&lt;Byte&gt;^ inBlock = UnicodeEncoding::Unicode-&gt;GetBytes(inString);\n         ICryptoTransform^ xfrm = symAlg-&gt;CreateEncryptor();\n         array&lt;Byte&gt;^ outBlock = xfrm-&gt;TransformFinalBlock(inBlock, 0, inBlock-&gt;Length);\n\n         return outBlock;\n     }\n\n     static String^ DecryptBytes(SymmetricAlgorithm^ symAlg, array&lt;Byte&gt;^ inBytes)\n     {\n         ICryptoTransform^ xfrm = symAlg-&gt;CreateDecryptor();\n         array&lt;Byte&gt;^ outBlock = xfrm-&gt;TransformFinalBlock(inBytes, 0, inBytes-&gt;Length);\n\n         return UnicodeEncoding::Unicode-&gt;GetString(outBlock);\n     }\n};\n\nint main()\n{\n    EncryptorExample::Main();\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.SymmetricAlgorithm#1\">using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\nclass EncryptorExample\n{\n     private static string quote =\n         &quot;Things may come to those who wait, but only the &quot; +\n         &quot;things left by those who hustle. -- Abraham Lincoln&quot;;\n\n     public static void Main()\n     {\n         AesCryptoServiceProvider aesCSP = new AesCryptoServiceProvider();\n\n         aesCSP.GenerateKey();\n         aesCSP.GenerateIV();\n         byte[] encQuote = EncryptString(aesCSP, quote);\n\n         Console.WriteLine(&quot;Encrypted Quote:<br>&quot;);\n         Console.WriteLine(Convert.ToBase64String(encQuote));\n\n         Console.WriteLine(&quot;<br>Decrypted Quote:<br>&quot;);\n         Console.WriteLine(DecryptBytes(aesCSP, encQuote));\n     }\n\n     public static byte[] EncryptString(SymmetricAlgorithm symAlg, string inString)\n     {\n         byte[] inBlock = UnicodeEncoding.Unicode.GetBytes(inString);\n         ICryptoTransform xfrm = symAlg.CreateEncryptor();\n         byte[] outBlock = xfrm.TransformFinalBlock(inBlock, 0, inBlock.Length);\n\n         return outBlock;\n     }\n\n     public static string DecryptBytes(SymmetricAlgorithm symAlg, byte[] inBytes)\n     {\n         ICryptoTransform xfrm = symAlg.CreateDecryptor();\n         byte[] outBlock = xfrm.TransformFinalBlock(inBytes, 0, inBytes.Length);\n\n         return UnicodeEncoding.Unicode.GetString(outBlock);\n     }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.SymmetricAlgorithm#1\">Imports System\nImports System.Security.Cryptography\nImports System.Text\n\nClass EncryptorExample\n     Private Shared quote As String = _\n         &quot;Things may come to those who wait, but only the &quot; + _\n         &quot;things left by those who hustle. -- Abraham Lincoln&quot;\n\n     Public Shared Sub Main()\n         Dim aesCSP As New AesCryptoServiceProvider()\n\n         aesCSP.GenerateKey()\n         aesCSP.GenerateIV()\n         Dim encQuote() As Byte = EncryptString(aesCSP, quote)\n\n         Console.WriteLine(&quot;Encrypted Quote:&quot; + vbNewLine)\n         Console.WriteLine(Convert.ToBase64String(encQuote))\n\n         Console.WriteLine(vbNewLine + &quot;Decrypted Quote:&quot; + vbNewLine)\n         Console.WriteLine(DecryptBytes(aesCSP, encQuote))\n     End Sub\n\n     Public Shared Function EncryptString(symAlg As SymmetricAlgorithm, inString As String) As Byte()\n         Dim inBlock() As Byte = UnicodeEncoding.Unicode.GetBytes(inString)\n         Dim xfrm As ICryptoTransform = symAlg.CreateEncryptor()\n         Dim outBlock() As Byte = xfrm.TransformFinalBlock(inBlock, 0, inBlock.Length)\n\n         Return outBlock\n     End Function\n\n     Public Shared Function DecryptBytes(symAlg As SymmetricAlgorithm, inBytes() As Byte) As String\n         Dim xfrm As ICryptoTransform = symAlg.CreateDecryptor()\n         Dim outBlock() As Byte = xfrm.TransformFinalBlock(inBytes, 0, inBytes.Length)\n\n         return UnicodeEncoding.Unicode.GetString(outBlock)\n     End Function\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_SymmetricAlgorithm_CreateEncryptor_System_Byte___System_Byte___\">\r\n    \r\n            <a id=\"System_Security_Cryptography_SymmetricAlgorithm_CreateEncryptor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateEncryptor(Byte[],Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, creates a symmetric encryptor object with the specified <span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.Key*</span> property and initialization vector (<span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.IV*</span>).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract System.Security.Cryptography.ICryptoTransform CreateEncryptor (byte[] rgbKey, byte[] rgbIV);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgbKey</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The secret key to use for the symmetric algorithm.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgbIV</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The initialization vector to use for the symmetric algorithm.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.icryptotransform\" data-linktype=\"relative-path\">ICryptoTransform</a></div>\r\n                  </div>\r\n                  <p>A symmetric encryptor object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_CreateDecryptor_\" data-linktype=\"relative-path\">CreateDecryptor</a> overload with the same parameters to decrypt the result of this method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_SymmetricAlgorithm_Dispose\">\r\n    \r\n            <a id=\"System_Security_Cryptography_SymmetricAlgorithm_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dispose()</div>        \r\n          </div>\r\n    \r\n            <p>Releases all resources used by the current instance of the <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm\" data-linktype=\"relative-path\">SymmetricAlgorithm</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Dispose ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Call <code>Dispose</code> when you are finished using the <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm\" data-linktype=\"relative-path\">SymmetricAlgorithm</a>. The <code>Dispose</code> method leaves the <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm\" data-linktype=\"relative-path\">SymmetricAlgorithm</a> in an unusable state. After calling <code>Dispose</code>, you must release all references to the <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm\" data-linktype=\"relative-path\">SymmetricAlgorithm</a> so the garbage collector can reclaim the memory that the <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm\" data-linktype=\"relative-path\">SymmetricAlgorithm</a> was occupying.  </p>\n<p> For more information, see <a href=\"../Topic/Cleaning%20Up%20Unmanaged%20Resources.md\" data-linktype=\"relative-path\">Cleaning Up Unmanaged Resources</a> and <a href=\"../Topic/Implementing%20a%20Dispose%20Method.md\" data-linktype=\"relative-path\">Implementing a Dispose Method</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Always call <code>Dispose</code> before you release your last reference to the <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm\" data-linktype=\"relative-path\">SymmetricAlgorithm</a>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm\" data-linktype=\"relative-path\">SymmetricAlgorithm</a> object&#39;s <code>Finalize</code> method.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_SymmetricAlgorithm_Dispose_System_Boolean_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_SymmetricAlgorithm_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dispose(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Releases the unmanaged resources used by the <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm\" data-linktype=\"relative-path\">SymmetricAlgorithm</a> and optionally releases the managed resources.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void Dispose (bool disposing);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>disposing</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to release both managed and unmanaged resources; <code>false</code> to release only unmanaged resources.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is called by the public <code>Dispose()</code> method and the <code>Finalize</code> method. <code>Dispose()</code> invokes the protected <code>Dispose(Boolean)</code> method with the <code>disposing</code> parameter set to <code>true</code>. <code>Finalize</code> invokes <code>Dispose</code> with <code>disposing</code> set to <code>false</code>.  </p>\n<p> When the <code>disposing</code> parameter is <code>true</code>, this method releases all resources held by any managed objects that this <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm\" data-linktype=\"relative-path\">SymmetricAlgorithm</a> references. This method invokes the <code>Dispose()</code> method of each referenced object.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_SymmetricAlgorithm_GenerateIV\">\r\n    \r\n            <a id=\"System_Security_Cryptography_SymmetricAlgorithm_GenerateIV_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GenerateIV()</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, generates a random initialization vector (<span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.IV*</span>) to use for the algorithm.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract void GenerateIV ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In general, there is no reason to use this method, because <code>CreateEncryptor()</code> or <code>CreateEncryptor(null, null)</code> automatically generates both an initialization vector and a key. However, you may want to use the GenerateIV method to reuse a symmetric algorithm instance with a different initialization vector.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_SymmetricAlgorithm_GenerateKey\">\r\n    \r\n            <a id=\"System_Security_Cryptography_SymmetricAlgorithm_GenerateKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GenerateKey()</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, generates a random key (<span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.Key*</span>) to use for the algorithm.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract void GenerateKey ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In general, there is no reason to use this method, because <code>CreateEncryptor()</code> or <code>CreateEncryptor(null, null)</code> automatically generates both an initialization vector and a key. However, you may want to use the GenerateKey method to reuse a symmetric algorithm instance with a different key.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_SymmetricAlgorithm_ValidKeySize_System_Int32_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_SymmetricAlgorithm_ValidKeySize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ValidKeySize(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the specified key size is valid for the current algorithm.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool ValidKeySize (int bitLength);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bitLength</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The length, in bits, to check for a valid key size.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the specified key size is valid for the current algorithm; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Security.Cryptography.SymmetricAlgorithm.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.Cryptography.SymmetricAlgorithm.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.SymmetricAlgorithm\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.SymmetricAlgorithm..ctor\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.SymmetricAlgorithm.BlockSize\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.SymmetricAlgorithm.Clear\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.SymmetricAlgorithm.Create\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.SymmetricAlgorithm.Dispose\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.SymmetricAlgorithm.GenerateIV\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.SymmetricAlgorithm.GenerateKey\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.SymmetricAlgorithm.IV\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.SymmetricAlgorithm.IVValue\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.SymmetricAlgorithm.Key\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.SymmetricAlgorithm.KeySize\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.SymmetricAlgorithm.KeyValue\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.SymmetricAlgorithm.Mode\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.SymmetricAlgorithm.ModeValue\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.SymmetricAlgorithm.Padding\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.SymmetricAlgorithm.PaddingValue\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"2116880f-ed7a-9568-9fd7-6331fcf5e538\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Security.Cryptography\\SymmetricAlgorithm.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the abstract base class from which all implementations of symmetric algorithms must inherit.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Security.Cryptography/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.Cryptography.SymmetricAlgorithm\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Security.Cryptography.SymmetricAlgorithm.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.Cryptography.SymmetricAlgorithm.yml","open_to_public_contributors":true,"api_name":["System.Security.Cryptography.SymmetricAlgorithm","System.Security.Cryptography.SymmetricAlgorithm..ctor","System.Security.Cryptography.SymmetricAlgorithm.BlockSize","System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue","System.Security.Cryptography.SymmetricAlgorithm.Clear","System.Security.Cryptography.SymmetricAlgorithm.Create","System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor","System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor","System.Security.Cryptography.SymmetricAlgorithm.Dispose","System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize","System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue","System.Security.Cryptography.SymmetricAlgorithm.GenerateIV","System.Security.Cryptography.SymmetricAlgorithm.GenerateKey","System.Security.Cryptography.SymmetricAlgorithm.IV","System.Security.Cryptography.SymmetricAlgorithm.IVValue","System.Security.Cryptography.SymmetricAlgorithm.Key","System.Security.Cryptography.SymmetricAlgorithm.KeySize","System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue","System.Security.Cryptography.SymmetricAlgorithm.KeyValue","System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes","System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue","System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes","System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue","System.Security.Cryptography.SymmetricAlgorithm.Mode","System.Security.Cryptography.SymmetricAlgorithm.ModeValue","System.Security.Cryptography.SymmetricAlgorithm.Padding","System.Security.Cryptography.SymmetricAlgorithm.PaddingValue","System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.Cryptography.SymmetricAlgorithm","System::Security::Cryptography::SymmetricAlgorithm","System.Security.Cryptography.SymmetricAlgorithm.#ctor","System::Security::Cryptography::SymmetricAlgorithm::#ctor","System.Security.Cryptography.SymmetricAlgorithm.BlockSize","System::Security::Cryptography::SymmetricAlgorithm::BlockSize","System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue","System::Security::Cryptography::SymmetricAlgorithm::BlockSizeValue","System.Security.Cryptography.SymmetricAlgorithm.Clear","System::Security::Cryptography::SymmetricAlgorithm::Clear","System.Security.Cryptography.SymmetricAlgorithm.Create","System::Security::Cryptography::SymmetricAlgorithm::Create","System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor","System::Security::Cryptography::SymmetricAlgorithm::CreateDecryptor","System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor","System::Security::Cryptography::SymmetricAlgorithm::CreateEncryptor","System.Security.Cryptography.SymmetricAlgorithm.Dispose","System::Security::Cryptography::SymmetricAlgorithm::Dispose","System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize","System::Security::Cryptography::SymmetricAlgorithm::FeedbackSize","System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue","System::Security::Cryptography::SymmetricAlgorithm::FeedbackSizeValue","System.Security.Cryptography.SymmetricAlgorithm.GenerateIV","System::Security::Cryptography::SymmetricAlgorithm::GenerateIV","System.Security.Cryptography.SymmetricAlgorithm.GenerateKey","System::Security::Cryptography::SymmetricAlgorithm::GenerateKey","System.Security.Cryptography.SymmetricAlgorithm.IV","System::Security::Cryptography::SymmetricAlgorithm::IV","System.Security.Cryptography.SymmetricAlgorithm.IVValue","System::Security::Cryptography::SymmetricAlgorithm::IVValue","System.Security.Cryptography.SymmetricAlgorithm.Key","System::Security::Cryptography::SymmetricAlgorithm::Key","System.Security.Cryptography.SymmetricAlgorithm.KeySize","System::Security::Cryptography::SymmetricAlgorithm::KeySize","System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue","System::Security::Cryptography::SymmetricAlgorithm::KeySizeValue","System.Security.Cryptography.SymmetricAlgorithm.KeyValue","System::Security::Cryptography::SymmetricAlgorithm::KeyValue","System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes","System::Security::Cryptography::SymmetricAlgorithm::LegalBlockSizes","System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue","System::Security::Cryptography::SymmetricAlgorithm::LegalBlockSizesValue","System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes","System::Security::Cryptography::SymmetricAlgorithm::LegalKeySizes","System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue","System::Security::Cryptography::SymmetricAlgorithm::LegalKeySizesValue","System.Security.Cryptography.SymmetricAlgorithm.Mode","System::Security::Cryptography::SymmetricAlgorithm::Mode","System.Security.Cryptography.SymmetricAlgorithm.ModeValue","System::Security::Cryptography::SymmetricAlgorithm::ModeValue","System.Security.Cryptography.SymmetricAlgorithm.Padding","System::Security::Cryptography::SymmetricAlgorithm::Padding","System.Security.Cryptography.SymmetricAlgorithm.PaddingValue","System::Security::Cryptography::SymmetricAlgorithm::PaddingValue","System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize","System::Security::Cryptography::SymmetricAlgorithm::ValidKeySize"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"2116880f-ed7a-9568-9fd7-6331fcf5e538","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Security.Cryptography\\SymmetricAlgorithm.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Security.Cryptography/SymmetricAlgorithm.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"SymmetricAlgorithm class | Microsoft Docs","_op_ogTitle":"SymmetricAlgorithm class","description":"Represents the abstract base class from which all implementations of symmetric algorithms must inherit.\n","toc_asset_id":"_splitted/System.Security.Cryptography/toc.json","toc_rel":"_splitted/System.Security.Cryptography/toc.json","source_url":"","ms.assetid":"System.Security.Cryptography.SymmetricAlgorithm","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.cryptography.symmetricalgorithm","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.cryptography.symmetricalgorithm","fileRelativePath":"System.Security.Cryptography.SymmetricAlgorithm.html"},"themesRelativePathToOutputRoot":"_themes/"}