{"content":"    \r\n    <h1 id=\"System_Tuple_3\">\r\n      <span class=\"lang-csharp\">Tuple&lt;T1,T2,T3&gt;</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a 3-tuple, or triple.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class Tuple&lt;T1,T2,T3&gt; : IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable</code></pre>\r\n    \r\n    \r\n    \t<h2>Type Parameters</h2>\r\n    \r\n    \t<table class=\"nameValue\">\r\n    \t\t<tr>\r\n    \t\t<td>\r\n    \t\tT1\r\n    \t\t</td>\r\n    \t\t<td>\r\n    \t\t<p>The type of the tuple&#39;s first component.</p>\n\r\n    \t\t</td>\r\n    \t\t</tr>\r\n    \t\t<tr>\r\n    \t\t<td>\r\n    \t\tT2\r\n    \t\t</td>\r\n    \t\t<td>\r\n    \t\t<p>The type of the tuple&#39;s second component.</p>\n\r\n    \t\t</td>\r\n    \t\t</tr>\r\n    \t\t<tr>\r\n    \t\t<td>\r\n    \t\tT3\r\n    \t\t</td>\r\n    \t\t<td>\r\n    \t\t<p>The type of the tuple&#39;s third component.</p>\n\r\n    \t\t</td>\r\n    \t\t</tr>\r\n    \t</table>\r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Tuple&lt;T1,T2,T3&gt;</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>A tuple is a data structure that has a specific number and sequence of values. The Tuple(T1, class represents a 3-tuple, or triple, which is a tuple that has three components.  </p>\n<p> You can instantiate a Tuple(T1, object by calling either the <a class=\"xref\" href=\"system.tuple-3#System_Tuple_3__ctor_\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3&gt;</a> constructor or the static <a class=\"xref\" href=\"system.tuple#System_Tuple_Create__3___0___1___2_\" data-linktype=\"relative-path\">System.Tuple.Create&lt;T1,T2,T3&gt;(T1,T2,T3)</a> method. You can retrieve the values of the tuple&#39;s components by using the read-only <a class=\"xref\" href=\"system.tuple-3#System_Tuple_3_Item1_\" data-linktype=\"relative-path\">Item1</a>, <a class=\"xref\" href=\"system.tuple-3#System_Tuple_3_Item2_\" data-linktype=\"relative-path\">Item2</a>, and <a class=\"xref\" href=\"system.tuple-3#System_Tuple_3_Item3_\" data-linktype=\"relative-path\">Item3</a> instance properties.  </p>\n<p> Tuples are commonly used in four different ways:  </p>\n<ul>\n<li><p>To represent a single set of data. For example, a tuple can represent a database record, and its components can represent individual fields of the record.  </p>\n</li>\n<li><p>To provide easy access to, and manipulation of, a data set. The following example defines an array of Tuple(T1, objects that contain the names of students, their average test scores, and the number of tests taken. The array is passed to the <code>ComputeStatistics</code> method, which calculates the mean and standard deviation of the test scores.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Tuple`3.Class#1\">Module Example\n   Public Sub Main()\n      Dim scores() = \n                      { Tuple.Create(&quot;Jack&quot;, 78.8, 8),\n                        Tuple.Create(&quot;Abbey&quot;, 92.1, 9), \n                        Tuple.Create(&quot;Dave&quot;, 88.3, 9),\n                        Tuple.Create(&quot;Sam&quot;, 91.7, 8), \n                        Tuple.Create(&quot;Ed&quot;, 71.2, 5),\n                        Tuple.Create(&quot;Penelope&quot;, 82.9, 8),\n                        Tuple.Create(&quot;Linda&quot;, 99.0, 9),\n                        Tuple.Create(&quot;Judith&quot;, 84.3, 9) }\n      Dim result = ComputeStatistics(scores)\n      Console.WriteLine(&quot;Mean score: {0:N2} (SD={1:N2}) (n={2})&quot;, \n                        result.Item2, result.Item3, result.Item1)\n   End Sub\n   \n   Private Function ComputeStatistics(scores() As Tuple(Of String, Double, Integer)) _ \n                                As Tuple(Of Integer, Double, Double)\n      Dim n As Integer = 0      \n      Dim sum As Double = 0\n      \n      &#39; Compute the mean.\n      For Each score In scores\n         n+= score.Item3 \n         sum += score.Item2 * score.Item3\n      Next     \n      Dim mean As Double = sum / n\n\n      &#39; Compute the standard deviation.\n      Dim ss As Double = 0\n      For Each score In scores\n         ss = Math.Pow(score.Item2 - mean, 2)\n      Next\n      Dim sd As Double = Math.Sqrt(ss/scores.Length)\n      Return Tuple.Create(scores.Length, mean, sd)\n   End Function\nEnd Module\n&#39; The example displays the following output:\n&#39;       Mean score: 87.02 (SD=0.96) (n=8)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Tuple`3.Class#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Tuple&lt;string, double, int&gt;[] scores = \n                    { Tuple.Create(&quot;Jack&quot;, 78.8, 8),\n                      Tuple.Create(&quot;Abbey&quot;, 92.1, 9), \n                      Tuple.Create(&quot;Dave&quot;, 88.3, 9),\n                      Tuple.Create(&quot;Sam&quot;, 91.7, 8), \n                      Tuple.Create(&quot;Ed&quot;, 71.2, 5),\n                      Tuple.Create(&quot;Penelope&quot;, 82.9, 8),\n                      Tuple.Create(&quot;Linda&quot;, 99.0, 9),\n                      Tuple.Create(&quot;Judith&quot;, 84.3, 9) };\n      var result = ComputeStatistics(scores);\n      Console.WriteLine(&quot;Mean score: {0:N2} (SD={1:N2}) (n={2})&quot;, \n                        result.Item2, result.Item3, result.Item1);\n   }\n\n   private static Tuple&lt;int, double, double&gt; ComputeStatistics(Tuple&lt;string, double, int&gt;[] scores) \n   {\n      int n = 0;\n      double sum = 0;\n\n      // Compute the mean.\n      foreach (var score in scores)\n      {\n         n += score.Item3;\n         sum += score.Item2 * score.Item3;\n      }\n      double mean = sum / n;\n      \n      // Compute the standard deviation.\n      double ss = 0;\n      foreach (var score in scores)\n      {\n         ss = Math.Pow(score.Item2 - mean, 2);\n      }\n      double sd = Math.Sqrt(ss/scores.Length);\n      return Tuple.Create(scores.Length, mean, sd);\n   }\n}\n// The example displays the following output:\n//       Mean score: 87.02 (SD=0.96) (n=8)\n</code></pre></li>\n<li><p>To return multiple values from a method without the use of <code>out</code> parameters (in C#) or <code>ByRef</code> parameters (in Visual Basic). For example, the previous example returns its summary test score statistics in a Tuple(T1, object.  </p>\n</li>\n<li><p>To pass multiple values to a method through a single parameter. For example, the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_Start_System_Object_\" data-linktype=\"relative-path\">System.Threading.Thread.Start(Object)</a> method has a single parameter that lets you supply one value to the method that the thread executes at startup. If you supply a Tuple(T1, object as the method argument, you can supply the threadâ€™s startup routine with three items of data.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_3__ctor__0__1__2_\" data-linktype=\"self-bookmark\">Tuple&lt;T1,T2,T3&gt;(T1,T2,T3)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Tuple`3</span> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_3_Item1\" data-linktype=\"self-bookmark\">Item1</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the current <span class=\"xref\">stem.Tuple`3</span> object&#39;s first component.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_3_Item2\" data-linktype=\"self-bookmark\">Item2</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the current <span class=\"xref\">stem.Tuple`3</span> object&#39;s second component.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_3_Item3\" data-linktype=\"self-bookmark\">Item3</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the current <span class=\"xref\">stem.Tuple`3</span> object&#39;s third component.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_3_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value that indicates whether the current <span class=\"xref\">stem.Tuple`3</span> object is equal to a specified object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_3_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the hash code for the current <span class=\"xref\">stem.Tuple`3</span> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_3_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string that represents the value of this <span class=\"xref\">stem.Tuple`3</span> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_3_System_Collections_IStructuralComparable_CompareTo_System_Object_System_Collections_IComparer_\" data-linktype=\"self-bookmark\">IStructuralComparable.CompareTo(Object,IComparer)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares the current <span class=\"xref\">stem.Tuple`3</span> object to a specified object by using a specified comparer, and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_3_System_Collections_IStructuralEquatable_Equals_System_Object_System_Collections_IEqualityComparer_\" data-linktype=\"self-bookmark\">IStructuralEquatable.Equals(Object,IEqualityComparer)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value that indicates whether the current <span class=\"xref\">stem.Tuple`3</span> object is equal to a specified object based on a specified comparison method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_3_System_Collections_IStructuralEquatable_GetHashCode_System_Collections_IEqualityComparer_\" data-linktype=\"self-bookmark\">IStructuralEquatable.GetHashCode(IEqualityComparer)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calculates the hash code for the current <span class=\"xref\">stem.Tuple`3</span> object by using a specified computation method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Tuple_3_System_IComparable_CompareTo_System_Object_\" data-linktype=\"self-bookmark\">IComparable.CompareTo(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares the current <span class=\"xref\">stem.Tuple`3</span> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_3__ctor__0__1__2_\">\r\n    \r\n            <a id=\"System_Tuple_3__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Tuple&lt;T1,T2,T3&gt;(T1,T2,T3)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Tuple`3</span> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Tuple (T1 item1, T2 item2, T3 item3);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>item1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T1</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value of the tuple&#39;s first component.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>item2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T2</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value of the tuple&#39;s second component.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>item3</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T3</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value of the tuple&#39;s third component.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can also use the static <a class=\"xref\" href=\"system.tuple#System_Tuple_Create__3___0___1___2_\" data-linktype=\"relative-path\">System.Tuple.Create&lt;T1,T2,T3&gt;(T1,T2,T3)</a> method to instantiate a 3-tuple object without having to explicitly specify the types of its components. The following example uses the <a class=\"xref\" href=\"system.tuple#System_Tuple_Create__3___0___1___2_\" data-linktype=\"relative-path\">System.Tuple.Create&lt;T1,T2,T3&gt;(T1,T2,T3)</a> method to instantiate a 3-tuple whose components are of type <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>, and <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple.Create#5\">            var tuple3 = Tuple.Create(&quot;New York&quot;, 32.68, 51.87);\n            Console.WriteLine(&quot;{0}: lo {1}, hi {2}&quot;, \n                              tuple3.Item1, tuple3.Item2, tuple3.Item3);\n            // Displays New York: lo 32.68, hi 51.87\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple.Create#5\">        Dim tuple3 = Tuple.Create(&quot;New York&quot;, 32.68, 51.87)\n        Console.WriteLine(&quot;{0}: lo {1}, hi {2}&quot;, \n                          tuple3.Item1, tuple3.Item2, tuple3.Item3)\n        &#39; Displays New York: lo 32.68, hi 51.87\n</code></pre><p> This is equivalent to the following call to the Tuple(T1, class constructor.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple.Create#6\">            var tuple3 = new Tuple&lt;string, double, double&gt;\n                                  (&quot;New York&quot;, 32.68, 51.87);\n            Console.WriteLine(&quot;{0}: lo {1}, hi {2}&quot;, \n                              tuple3.Item1, tuple3.Item2, tuple3.Item3);\n            // Displays New York: lo 32.68, hi 51.87\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple.Create#6\">        Dim tuple3 = New Tuple(Of String, Double, Double)(&quot;New York&quot;, 32.68, 51.87)\n        Console.WriteLine(&quot;{0}: lo {1}, hi {2}&quot;, \n                          tuple3.Item1, tuple3.Item2, tuple3.Item3)\n        &#39; Displays New York: lo 32.68, hi 51.87\n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_3_Item1\">\r\n    \r\n            <a id=\"System_Tuple_3_Item1_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Item1</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the current <span class=\"xref\">stem.Tuple`3</span> object&#39;s first component.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public T1 Item1 { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">T1</span></div>\r\n                  </div>\r\n                  <p>The value of the current <span class=\"xref\">stem.Tuple`3</span> object&#39;s first component.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can dynamically determine the type of the Item1 component in one of two ways:  </p>\n<ul>\n<li><p>By calling the <code>GetType</code> method on the value that is returned by the Item1 property.  </p>\n</li>\n<li><p>By retrieving the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the <a class=\"xref\" href=\"system.tuple-3\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3&gt;</a> object, and retrieving the first element from the array that is returned by its <a class=\"xref\" href=\"system.type#System_Type_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines an array of <a class=\"xref\" href=\"system.tuple-3\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3&gt;</a> objects that contain the names of students, their average test scores, and the number of tests taken. The array is passed to the <code>ComputeStatistics</code> method, which calculates the mean score, standard deviation, and number of cases from which the statistics are calculated. These values are stored in the <a class=\"xref\" href=\"system.tuple-3\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3&gt;</a> object that is returned by the <code>ComputeStatistics</code> method. The Item1 property contains the number of cases.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Tuple`3.Class#1\">Module Example\n   Public Sub Main()\n      Dim scores() = \n                      { Tuple.Create(&quot;Jack&quot;, 78.8, 8),\n                        Tuple.Create(&quot;Abbey&quot;, 92.1, 9), \n                        Tuple.Create(&quot;Dave&quot;, 88.3, 9),\n                        Tuple.Create(&quot;Sam&quot;, 91.7, 8), \n                        Tuple.Create(&quot;Ed&quot;, 71.2, 5),\n                        Tuple.Create(&quot;Penelope&quot;, 82.9, 8),\n                        Tuple.Create(&quot;Linda&quot;, 99.0, 9),\n                        Tuple.Create(&quot;Judith&quot;, 84.3, 9) }\n      Dim result = ComputeStatistics(scores)\n      Console.WriteLine(&quot;Mean score: {0:N2} (SD={1:N2}) (n={2})&quot;, \n                        result.Item2, result.Item3, result.Item1)\n   End Sub\n   \n   Private Function ComputeStatistics(scores() As Tuple(Of String, Double, Integer)) _ \n                                As Tuple(Of Integer, Double, Double)\n      Dim n As Integer = 0      \n      Dim sum As Double = 0\n      \n      &#39; Compute the mean.\n      For Each score In scores\n         n+= score.Item3 \n         sum += score.Item2 * score.Item3\n      Next     \n      Dim mean As Double = sum / n\n\n      &#39; Compute the standard deviation.\n      Dim ss As Double = 0\n      For Each score In scores\n         ss = Math.Pow(score.Item2 - mean, 2)\n      Next\n      Dim sd As Double = Math.Sqrt(ss/scores.Length)\n      Return Tuple.Create(scores.Length, mean, sd)\n   End Function\nEnd Module\n&#39; The example displays the following output:\n&#39;       Mean score: 87.02 (SD=0.96) (n=8)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Tuple`3.Class#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Tuple&lt;string, double, int&gt;[] scores = \n                    { Tuple.Create(&quot;Jack&quot;, 78.8, 8),\n                      Tuple.Create(&quot;Abbey&quot;, 92.1, 9), \n                      Tuple.Create(&quot;Dave&quot;, 88.3, 9),\n                      Tuple.Create(&quot;Sam&quot;, 91.7, 8), \n                      Tuple.Create(&quot;Ed&quot;, 71.2, 5),\n                      Tuple.Create(&quot;Penelope&quot;, 82.9, 8),\n                      Tuple.Create(&quot;Linda&quot;, 99.0, 9),\n                      Tuple.Create(&quot;Judith&quot;, 84.3, 9) };\n      var result = ComputeStatistics(scores);\n      Console.WriteLine(&quot;Mean score: {0:N2} (SD={1:N2}) (n={2})&quot;, \n                        result.Item2, result.Item3, result.Item1);\n   }\n\n   private static Tuple&lt;int, double, double&gt; ComputeStatistics(Tuple&lt;string, double, int&gt;[] scores) \n   {\n      int n = 0;\n      double sum = 0;\n\n      // Compute the mean.\n      foreach (var score in scores)\n      {\n         n += score.Item3;\n         sum += score.Item2 * score.Item3;\n      }\n      double mean = sum / n;\n      \n      // Compute the standard deviation.\n      double ss = 0;\n      foreach (var score in scores)\n      {\n         ss = Math.Pow(score.Item2 - mean, 2);\n      }\n      double sd = Math.Sqrt(ss/scores.Length);\n      return Tuple.Create(scores.Length, mean, sd);\n   }\n}\n// The example displays the following output:\n//       Mean score: 87.02 (SD=0.96) (n=8)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_3_Item2\">\r\n    \r\n            <a id=\"System_Tuple_3_Item2_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Item2</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the current <span class=\"xref\">stem.Tuple`3</span> object&#39;s second component.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public T2 Item2 { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">T2</span></div>\r\n                  </div>\r\n                  <p>The value of the current <span class=\"xref\">stem.Tuple`3</span> object&#39;s second component.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can dynamically determine the type of the Item2 component in one of two ways:  </p>\n<ul>\n<li><p>By calling the <code>GetType</code> method on the value that is returned by the Item2 property.  </p>\n</li>\n<li><p>By retrieving the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the <a class=\"xref\" href=\"system.tuple-3\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3&gt;</a> object, and retrieving the second element from the array that is returned by its <a class=\"xref\" href=\"system.type#System_Type_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines an array of <a class=\"xref\" href=\"system.tuple-3\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3&gt;</a> objects that contain the names of students, their average test scores, and the number of tests taken. The array is passed to the <code>ComputeStatistics</code> method, which calculates the mean score, standard deviation, and number of cases from which the statistics are calculated. These values are stored in the <a class=\"xref\" href=\"system.tuple-3\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3&gt;</a> object that is returned by the <code>ComputeStatistics</code> method. The Item2 property contains the mean test score.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Tuple`3.Class#1\">Module Example\n   Public Sub Main()\n      Dim scores() = \n                      { Tuple.Create(&quot;Jack&quot;, 78.8, 8),\n                        Tuple.Create(&quot;Abbey&quot;, 92.1, 9), \n                        Tuple.Create(&quot;Dave&quot;, 88.3, 9),\n                        Tuple.Create(&quot;Sam&quot;, 91.7, 8), \n                        Tuple.Create(&quot;Ed&quot;, 71.2, 5),\n                        Tuple.Create(&quot;Penelope&quot;, 82.9, 8),\n                        Tuple.Create(&quot;Linda&quot;, 99.0, 9),\n                        Tuple.Create(&quot;Judith&quot;, 84.3, 9) }\n      Dim result = ComputeStatistics(scores)\n      Console.WriteLine(&quot;Mean score: {0:N2} (SD={1:N2}) (n={2})&quot;, \n                        result.Item2, result.Item3, result.Item1)\n   End Sub\n   \n   Private Function ComputeStatistics(scores() As Tuple(Of String, Double, Integer)) _ \n                                As Tuple(Of Integer, Double, Double)\n      Dim n As Integer = 0      \n      Dim sum As Double = 0\n      \n      &#39; Compute the mean.\n      For Each score In scores\n         n+= score.Item3 \n         sum += score.Item2 * score.Item3\n      Next     \n      Dim mean As Double = sum / n\n\n      &#39; Compute the standard deviation.\n      Dim ss As Double = 0\n      For Each score In scores\n         ss = Math.Pow(score.Item2 - mean, 2)\n      Next\n      Dim sd As Double = Math.Sqrt(ss/scores.Length)\n      Return Tuple.Create(scores.Length, mean, sd)\n   End Function\nEnd Module\n&#39; The example displays the following output:\n&#39;       Mean score: 87.02 (SD=0.96) (n=8)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Tuple`3.Class#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Tuple&lt;string, double, int&gt;[] scores = \n                    { Tuple.Create(&quot;Jack&quot;, 78.8, 8),\n                      Tuple.Create(&quot;Abbey&quot;, 92.1, 9), \n                      Tuple.Create(&quot;Dave&quot;, 88.3, 9),\n                      Tuple.Create(&quot;Sam&quot;, 91.7, 8), \n                      Tuple.Create(&quot;Ed&quot;, 71.2, 5),\n                      Tuple.Create(&quot;Penelope&quot;, 82.9, 8),\n                      Tuple.Create(&quot;Linda&quot;, 99.0, 9),\n                      Tuple.Create(&quot;Judith&quot;, 84.3, 9) };\n      var result = ComputeStatistics(scores);\n      Console.WriteLine(&quot;Mean score: {0:N2} (SD={1:N2}) (n={2})&quot;, \n                        result.Item2, result.Item3, result.Item1);\n   }\n\n   private static Tuple&lt;int, double, double&gt; ComputeStatistics(Tuple&lt;string, double, int&gt;[] scores) \n   {\n      int n = 0;\n      double sum = 0;\n\n      // Compute the mean.\n      foreach (var score in scores)\n      {\n         n += score.Item3;\n         sum += score.Item2 * score.Item3;\n      }\n      double mean = sum / n;\n      \n      // Compute the standard deviation.\n      double ss = 0;\n      foreach (var score in scores)\n      {\n         ss = Math.Pow(score.Item2 - mean, 2);\n      }\n      double sd = Math.Sqrt(ss/scores.Length);\n      return Tuple.Create(scores.Length, mean, sd);\n   }\n}\n// The example displays the following output:\n//       Mean score: 87.02 (SD=0.96) (n=8)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_3_Item3\">\r\n    \r\n            <a id=\"System_Tuple_3_Item3_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Item3</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the current <span class=\"xref\">stem.Tuple`3</span> object&#39;s third component.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public T3 Item3 { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">T3</span></div>\r\n                  </div>\r\n                  <p>The value of the current <span class=\"xref\">stem.Tuple`3</span> object&#39;s third component.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can dynamically determine the type of the Item3 component in one of two ways:  </p>\n<ul>\n<li><p>By calling the <code>GetType</code> method on the value returned by the Item3 property.  </p>\n</li>\n<li><p>By retrieving the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the <a class=\"xref\" href=\"system.tuple-3\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3&gt;</a> object, and retrieving the third element from the array that is returned by its <a class=\"xref\" href=\"system.type#System_Type_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines an array of <a class=\"xref\" href=\"system.tuple-3\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3&gt;</a> objects that contain the names of students, their average test scores, and the number of tests taken. The array is passed to the <code>ComputeStatistics</code> method, which calculates the mean score, standard deviation, and number of cases from which the statistics are calculated. These values are stored in the <a class=\"xref\" href=\"system.tuple-3\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3&gt;</a> object that is returned by the <code>ComputeStatistics</code> method. The Item3 property contains the standard deviation.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Tuple`3.Class#1\">Module Example\n   Public Sub Main()\n      Dim scores() = \n                      { Tuple.Create(&quot;Jack&quot;, 78.8, 8),\n                        Tuple.Create(&quot;Abbey&quot;, 92.1, 9), \n                        Tuple.Create(&quot;Dave&quot;, 88.3, 9),\n                        Tuple.Create(&quot;Sam&quot;, 91.7, 8), \n                        Tuple.Create(&quot;Ed&quot;, 71.2, 5),\n                        Tuple.Create(&quot;Penelope&quot;, 82.9, 8),\n                        Tuple.Create(&quot;Linda&quot;, 99.0, 9),\n                        Tuple.Create(&quot;Judith&quot;, 84.3, 9) }\n      Dim result = ComputeStatistics(scores)\n      Console.WriteLine(&quot;Mean score: {0:N2} (SD={1:N2}) (n={2})&quot;, \n                        result.Item2, result.Item3, result.Item1)\n   End Sub\n   \n   Private Function ComputeStatistics(scores() As Tuple(Of String, Double, Integer)) _ \n                                As Tuple(Of Integer, Double, Double)\n      Dim n As Integer = 0      \n      Dim sum As Double = 0\n      \n      &#39; Compute the mean.\n      For Each score In scores\n         n+= score.Item3 \n         sum += score.Item2 * score.Item3\n      Next     \n      Dim mean As Double = sum / n\n\n      &#39; Compute the standard deviation.\n      Dim ss As Double = 0\n      For Each score In scores\n         ss = Math.Pow(score.Item2 - mean, 2)\n      Next\n      Dim sd As Double = Math.Sqrt(ss/scores.Length)\n      Return Tuple.Create(scores.Length, mean, sd)\n   End Function\nEnd Module\n&#39; The example displays the following output:\n&#39;       Mean score: 87.02 (SD=0.96) (n=8)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Tuple`3.Class#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Tuple&lt;string, double, int&gt;[] scores = \n                    { Tuple.Create(&quot;Jack&quot;, 78.8, 8),\n                      Tuple.Create(&quot;Abbey&quot;, 92.1, 9), \n                      Tuple.Create(&quot;Dave&quot;, 88.3, 9),\n                      Tuple.Create(&quot;Sam&quot;, 91.7, 8), \n                      Tuple.Create(&quot;Ed&quot;, 71.2, 5),\n                      Tuple.Create(&quot;Penelope&quot;, 82.9, 8),\n                      Tuple.Create(&quot;Linda&quot;, 99.0, 9),\n                      Tuple.Create(&quot;Judith&quot;, 84.3, 9) };\n      var result = ComputeStatistics(scores);\n      Console.WriteLine(&quot;Mean score: {0:N2} (SD={1:N2}) (n={2})&quot;, \n                        result.Item2, result.Item3, result.Item1);\n   }\n\n   private static Tuple&lt;int, double, double&gt; ComputeStatistics(Tuple&lt;string, double, int&gt;[] scores) \n   {\n      int n = 0;\n      double sum = 0;\n\n      // Compute the mean.\n      foreach (var score in scores)\n      {\n         n += score.Item3;\n         sum += score.Item2 * score.Item3;\n      }\n      double mean = sum / n;\n      \n      // Compute the standard deviation.\n      double ss = 0;\n      foreach (var score in scores)\n      {\n         ss = Math.Pow(score.Item2 - mean, 2);\n      }\n      double sd = Math.Sqrt(ss/scores.Length);\n      return Tuple.Create(scores.Length, mean, sd);\n   }\n}\n// The example displays the following output:\n//       Mean score: 87.02 (SD=0.96) (n=8)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_3_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_Tuple_3_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value that indicates whether the current <span class=\"xref\">stem.Tuple`3</span> object is equal to a specified object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to compare with this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current instance is equal to the specified object; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>obj</code> parameter is considered to be equal to the current instance under the following conditions:  </p>\n<ul>\n<li><p>It is a <a class=\"xref\" href=\"system.tuple-3\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3&gt;</a> object.  </p>\n</li>\n<li><p>Its three components are of the same types as the current instance.  </p>\n</li>\n<li><p>Its three components are equal to those of the current instance. Equality is determined by the default object equality comparer for each component.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example calls the Equals method to determine whether any of the objects in an array of <a class=\"xref\" href=\"system.tuple-3\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3&gt;</a> objects are equal to one another. The output reflects the fact that the Equals method returns <code>true</code> when comparing <a class=\"xref\" href=\"system.tuple-3\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3&gt;</a> objects whose components have equal values.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Tuple`3.Equals#1\">Module Example\n   Public Sub Main()\n      Dim scores() = \n              { Tuple.Create(&quot;Ed&quot;, 78.8, 8),\n                Tuple.Create(&quot;Abbey&quot;, 92.1, 9), \n                Tuple.Create(&quot;Ed&quot;, 71.2, 9),\n                Tuple.Create(&quot;Sam&quot;, 91.7, 8), \n                Tuple.Create(&quot;Ed&quot;, 71.2, 5),\n                Tuple.Create(&quot;Penelope&quot;, 82.9, 8),\n                Tuple.Create(&quot;Ed&quot;, 71.2, 9),\n                Tuple.Create(&quot;Judith&quot;, 84.3, 9) }\n\n      &#39; Test each tuple object for equality with every other tuple.\n      For ctr As Integer = 0 To scores.Length - 1\n         Dim currentTuple = scores(ctr)\n         For ctr2 As Integer = ctr + 1 To scores.Length - 1\n            Console.WriteLine(&quot;{0} = {1}: {2}&quot;, currentTuple, scores(ctr2), \n                                                currentTuple.Equals(scores(ctr2)))      \n         Next\n         Console.WriteLine()\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output;\n&#39;    (Ed, 78.8, 8) = (Abbey, 92.1, 9): False\n&#39;    (Ed, 78.8, 8) = (Ed, 71.2, 9): False\n&#39;    (Ed, 78.8, 8) = (Sam, 91.7, 8): False\n&#39;    (Ed, 78.8, 8) = (Ed, 71.2, 5): False\n&#39;    (Ed, 78.8, 8) = (Penelope, 82.9, 8): False\n&#39;    (Ed, 78.8, 8) = (Ed, 71.2, 9): False\n&#39;    (Ed, 78.8, 8) = (Judith, 84.3, 9): False\n&#39;    \n&#39;    (Abbey, 92.1, 9) = (Ed, 71.2, 9): False\n&#39;    (Abbey, 92.1, 9) = (Sam, 91.7, 8): False\n&#39;    (Abbey, 92.1, 9) = (Ed, 71.2, 5): False\n&#39;    (Abbey, 92.1, 9) = (Penelope, 82.9, 8): False\n&#39;    (Abbey, 92.1, 9) = (Ed, 71.2, 9): False\n&#39;    (Abbey, 92.1, 9) = (Judith, 84.3, 9): False\n&#39;    \n&#39;    (Ed, 71.2, 9) = (Sam, 91.7, 8): False\n&#39;    (Ed, 71.2, 9) = (Ed, 71.2, 5): False\n&#39;    (Ed, 71.2, 9) = (Penelope, 82.9, 8): False\n&#39;    (Ed, 71.2, 9) = (Ed, 71.2, 9): True\n&#39;    (Ed, 71.2, 9) = (Judith, 84.3, 9): False\n&#39;    \n&#39;    (Sam, 91.7, 8) = (Ed, 71.2, 5): False\n&#39;    (Sam, 91.7, 8) = (Penelope, 82.9, 8): False\n&#39;    (Sam, 91.7, 8) = (Ed, 71.2, 9): False\n&#39;    (Sam, 91.7, 8) = (Judith, 84.3, 9): False\n&#39;    \n&#39;    (Ed, 71.2, 5) = (Penelope, 82.9, 8): False\n&#39;    (Ed, 71.2, 5) = (Ed, 71.2, 9): False\n&#39;    (Ed, 71.2, 5) = (Judith, 84.3, 9): False\n&#39;    \n&#39;    (Penelope, 82.9, 8) = (Ed, 71.2, 9): False\n&#39;    (Penelope, 82.9, 8) = (Judith, 84.3, 9): False\n&#39;    \n&#39;    (Ed, 71.2, 9) = (Judith, 84.3, 9): False\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Tuple`3.Equals#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Tuple&lt;string, double, int&gt;[] scores = \n                      { Tuple.Create(&quot;Ed&quot;, 78.8, 8),\n                        Tuple.Create(&quot;Abbey&quot;, 92.1, 9), \n                        Tuple.Create(&quot;Ed&quot;, 71.2, 9),\n                        Tuple.Create(&quot;Sam&quot;, 91.7, 8), \n                        Tuple.Create(&quot;Ed&quot;, 71.2, 5),\n                        Tuple.Create(&quot;Penelope&quot;, 82.9, 8),\n                        Tuple.Create(&quot;Ed&quot;, 71.2, 9),\n                        Tuple.Create(&quot;Judith&quot;, 84.3, 9) };\n\n      // Test each tuple object for equality with every other tuple.\n      for (int ctr = 0; ctr &lt; scores.Length; ctr++)\n      {\n         var currentTuple = scores[ctr];\n         for (int ctr2 = ctr + 1; ctr2 &lt; scores.Length; ctr2++)\n            Console.WriteLine(&quot;{0} = {1}: {2}&quot;, currentTuple, scores[ctr2], \n                                                currentTuple.Equals(scores[ctr2]));      \n\n         Console.WriteLine();\n      }   \n   }\n}\n// The example displays the following output;\n//    (Ed, 78.8, 8) = (Abbey, 92.1, 9): False\n//    (Ed, 78.8, 8) = (Ed, 71.2, 9): False\n//    (Ed, 78.8, 8) = (Sam, 91.7, 8): False\n//    (Ed, 78.8, 8) = (Ed, 71.2, 5): False\n//    (Ed, 78.8, 8) = (Penelope, 82.9, 8): False\n//    (Ed, 78.8, 8) = (Ed, 71.2, 9): False\n//    (Ed, 78.8, 8) = (Judith, 84.3, 9): False\n//    \n//    (Abbey, 92.1, 9) = (Ed, 71.2, 9): False\n//    (Abbey, 92.1, 9) = (Sam, 91.7, 8): False\n//    (Abbey, 92.1, 9) = (Ed, 71.2, 5): False\n//    (Abbey, 92.1, 9) = (Penelope, 82.9, 8): False\n//    (Abbey, 92.1, 9) = (Ed, 71.2, 9): False\n//    (Abbey, 92.1, 9) = (Judith, 84.3, 9): False\n//    \n//    (Ed, 71.2, 9) = (Sam, 91.7, 8): False\n//    (Ed, 71.2, 9) = (Ed, 71.2, 5): False\n//    (Ed, 71.2, 9) = (Penelope, 82.9, 8): False\n//    (Ed, 71.2, 9) = (Ed, 71.2, 9): True\n//    (Ed, 71.2, 9) = (Judith, 84.3, 9): False\n//    \n//    (Sam, 91.7, 8) = (Ed, 71.2, 5): False\n//    (Sam, 91.7, 8) = (Penelope, 82.9, 8): False\n//    (Sam, 91.7, 8) = (Ed, 71.2, 9): False\n//    (Sam, 91.7, 8) = (Judith, 84.3, 9): False\n//    \n//    (Ed, 71.2, 5) = (Penelope, 82.9, 8): False\n//    (Ed, 71.2, 5) = (Ed, 71.2, 9): False\n//    (Ed, 71.2, 5) = (Judith, 84.3, 9): False\n//    \n//    (Penelope, 82.9, 8) = (Ed, 71.2, 9): False\n//    (Penelope, 82.9, 8) = (Judith, 84.3, 9): False\n//    \n//    (Ed, 71.2, 9) = (Judith, 84.3, 9): False\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_3_GetHashCode\">\r\n    \r\n            <a id=\"System_Tuple_3_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the hash code for the current <span class=\"xref\">stem.Tuple`3</span> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer hash code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_3_ToString\">\r\n    \r\n            <a id=\"System_Tuple_3_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string that represents the value of this <span class=\"xref\">stem.Tuple`3</span> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of this <span class=\"xref\">stem.Tuple`3</span> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The string returned by this method takes the form (<em>Item1</em>, <em>Item2</em>, <em>Item3</em>), where <em>Item1</em>, <em>Item2</em>, and <em>Item3</em> represent the values of the <a class=\"xref\" href=\"system.tuple-3#System_Tuple_3_Item1_\" data-linktype=\"relative-path\">Item1</a>, <a class=\"xref\" href=\"system.tuple-3#System_Tuple_3_Item2_\" data-linktype=\"relative-path\">Item2</a>, and <a class=\"xref\" href=\"system.tuple-3#System_Tuple_3_Item3_\" data-linktype=\"relative-path\">Item3</a> properties, respectively. If any of the property values is <code>null</code>, it is represented as <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the ToString method.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Tuple`3.ToString#1\">Module Example\n   Public Sub Main()\n      Dim scores() = \n                { Tuple.Create(&quot;Jack&quot;, 78.8, 8),\n                  Tuple.Create(&quot;Abbey&quot;, 92.1, 9), \n                  Tuple.Create(&quot;Dave&quot;, 88.3, 9),\n                  Tuple.Create(&quot;Sam&quot;, 91.7, 8), \n                  Tuple.Create(&quot;Ed&quot;, 71.2, 5),\n                  Tuple.Create(&quot;Penelope&quot;, 82.9, 8),\n                  Tuple.Create(&quot;Linda&quot;, 99.0, 9),\n                  Tuple.Create(&quot;Judith&quot;, 84.3, 9) }\n      Array.Sort(scores)\n      For Each score In scores\n         Console.WriteLine(score.ToString())\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output;\n&#39;    (Abbey, 92.1, 9)\n&#39;    (Dave, 88.3, 9)\n&#39;    (Ed, 71.2, 5)\n&#39;    (Jack, 78.8, 8)\n&#39;    (Judith, 84.3, 9)\n&#39;    (Linda, 99, 9)\n&#39;    (Penelope, 82.9, 8)\n&#39;    (Sam, 91.7, 8)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Tuple`3.ToString#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Tuple&lt;string, double, int&gt;[] scores = \n                    { Tuple.Create(&quot;Jack&quot;, 78.8, 8),\n                      Tuple.Create(&quot;Abbey&quot;, 92.1, 9), \n                      Tuple.Create(&quot;Dave&quot;, 88.3, 9),\n                      Tuple.Create(&quot;Sam&quot;, 91.7, 8), \n                      Tuple.Create(&quot;Ed&quot;, 71.2, 5),\n                      Tuple.Create(&quot;Penelope&quot;, 82.9, 8),\n                      Tuple.Create(&quot;Linda&quot;, 99.0, 9),\n                      Tuple.Create(&quot;Judith&quot;, 84.3, 9) };\n      Array.Sort(scores);\n      foreach (var score in scores)\n         Console.WriteLine(score.ToString());\n   }\n}\n// The example displays the following output;\n//    (Abbey, 92.1, 9)\n//    (Dave, 88.3, 9)\n//    (Ed, 71.2, 5)\n//    (Jack, 78.8, 8)\n//    (Judith, 84.3, 9)\n//    (Linda, 99, 9)\n//    (Penelope, 82.9, 8)\n//    (Sam, 91.7, 8)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_3_System_Collections_IStructuralComparable_CompareTo_System_Object_System_Collections_IComparer_\">\r\n    \r\n            <a id=\"System_Tuple_3_System_Collections_IStructuralComparable_CompareTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IStructuralComparable.CompareTo(Object,IComparer)</div>        \r\n          </div>\r\n    \r\n            <p>Compares the current <span class=\"xref\">stem.Tuple`3</span> object to a specified object by using a specified comparer, and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">int IStructuralComparable.CompareTo (object other, System.Collections.IComparer comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>other</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to compare with the current instance.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that provides custom rules for comparison.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A signed integer that indicates the relative position of this instance and <code>other</code> in the sort order, as shown in the following table.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Description<br>\n </th></tr></thead><tbody><tr><td> A negative integer<br>\n </td><td> This instance precedes <code>other</code>.<br>\n </td></tr><tr><td> Zero<br>\n </td><td> This instance and <code>other</code> have the same position in the sort order.<br>\n </td></tr><tr><td> A positive integer<br>\n </td><td> This instance follows <code>other</code>.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>other</code> is not a <span class=\"xref\">stem.Tuple`3</span> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.tuple-3\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3&gt;</a> instance is cast to an <a class=\"xref\" href=\"system.collections.istructuralcomparable\" data-linktype=\"relative-path\">IStructuralComparable</a> interface.  </p>\n<p> Although this method can be called directly, it is most commonly called by collection sorting methods that include <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> parameters to order the members of a collection. For example, it is called by the <a class=\"xref\" href=\"system.array#System_Array_Sort_System_Array_System_Collections_IComparer_\" data-linktype=\"relative-path\">System.Array.Sort(Array,IComparer)</a> method and the <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_Add_\" data-linktype=\"relative-path\">Add</a> method of a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object that is instantiated by using the <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList__ctor_System_Collections_IComparer_\" data-linktype=\"relative-path\">System.Collections.SortedList.SortedList(IComparer)</a> constructor.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> The IStructuralComparable.CompareTo method is intended for use in sorting operations. It should not be used when the primary purpose of a comparison is to determine whether two objects are equal. To determine whether two objects are equal, call the <a class=\"xref\" href=\"system.tuple-3#System_Tuple_3_System_Collections_IStructuralEquatable_Equals_\" data-linktype=\"relative-path\">System.Collections.IStructuralEquatable.Equals</a> method.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an array of <a class=\"xref\" href=\"system.tuple-3\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3&gt;</a> objects that consist of a student&#39;s name, mean test score, and number of tests. It displays the component of each tuple in the array in unsorted order, sorts the array, and then calls <a class=\"xref\" href=\"system.tuple-3#System_Tuple_3_ToString_\" data-linktype=\"relative-path\">ToString</a> to display the value of each tuple in sorted order. To sort the array, the example defines a generic <code>ScoreComparer</code> class that implements the <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> interface and sorts the <a class=\"xref\" href=\"system.tuple-3\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3&gt;</a> objects in ascending order by the value of their second component rather than their first component. Note that the example does not directly call the IStructuralComparable.CompareTo method. This method is called implicitly by the <a class=\"xref\" href=\"system.array#System_Array_Sort_System_Array_System_Collections_IComparer_\" data-linktype=\"relative-path\">System.Array.Sort(Array,IComparer)</a> method for each element in the array.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple`3.CompareTo#2\">using System;\nusing System.Collections;\nusing System.Collections.Generic;\n\npublic class ScoreComparer&lt;T1, T2, T3&gt; : IComparer\n{\n   public int Compare(object x, object y)\n   {\n      Tuple&lt;T1, T2, T3&gt; tX = x as Tuple&lt;T1,T2, T3&gt;;\n      if (tX == null)\n      { \n         return 0;\n      }   \n      else\n      {\n         Tuple&lt;T1, T2, T3&gt; tY = y as Tuple&lt;T1, T2, T3&gt;;\n         return Comparer&lt;T2&gt;.Default.Compare(tX.Item2, tY.Item2);             \n      }\n   }\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      Tuple&lt;string, double, int&gt;[] scores = \n                { Tuple.Create(&quot;Jack&quot;, 78.8, 8),\n                  Tuple.Create(&quot;Abbey&quot;, 92.1, 9), \n                  Tuple.Create(&quot;Dave&quot;, 88.3, 9),\n                  Tuple.Create(&quot;Sam&quot;, 91.7, 8), \n                  Tuple.Create(&quot;Ed&quot;, 71.2, 5),\n                  Tuple.Create(&quot;Penelope&quot;, 82.9, 8),\n                  Tuple.Create(&quot;Linda&quot;, 99.0, 9),\n                  Tuple.Create(&quot;Judith&quot;, 84.3, 9) };\n\n      Console.WriteLine(&quot;The values in unsorted order:&quot;);\n      foreach (var score in scores)\n         Console.WriteLine(score.ToString());\n\n      Console.WriteLine();\n\n      Array.Sort(scores, new ScoreComparer&lt;string, double, int&gt;());\n\n      Console.WriteLine(&quot;The values in sorted order:&quot;);\n      foreach (var score in scores)\n         Console.WriteLine(score.ToString());\n   }\n}\n// The example displays the following output;\n//       The values in unsorted order:\n//       (Jack, 78.8, 8)\n//       (Abbey, 92.1, 9)\n//       (Dave, 88.3, 9)\n//       (Sam, 91.7, 8)\n//       (Ed, 71.2, 5)\n//       (Penelope, 82.9, 8)\n//       (Linda, 99, 9)\n//       (Judith, 84.3, 9)\n//       \n//       The values in sorted order:\n//       (Ed, 71.2, 5)\n//       (Jack, 78.8, 8)\n//       (Penelope, 82.9, 8)\n//       (Judith, 84.3, 9)\n//       (Dave, 88.3, 9)\n//       (Sam, 91.7, 8)\n//       (Abbey, 92.1, 9)\n//       (Linda, 99, 9)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple`3.CompareTo#2\">Imports System.Collections\nImports System.Collections.Generic\n\nPublic Class ScoreComparer(Of T1, T2, T3) : Implements IComparer\n   Public Function Compare(x As Object, y As Object) As Integer _\n                   Implements IComparer.Compare\n      Dim tX As Tuple(Of T1, T2, T3) = TryCast(x, Tuple(Of T1, T2, T3))\n      If tX Is Nothing Then\n         Return 0\n      Else\n         Dim tY As Tuple(Of T1, T2, T3) = DirectCast(y, Tuple(Of T1, T2, T3))\n         Return Comparer(Of T2).Default.Compare(tx.Item2, tY.Item2)             \n      End If\n   End Function\nEnd Class\n\nModule Example\n   Public Sub Main()\n      Dim scores() = \n                 { Tuple.Create(&quot;Jack&quot;, 78.8, 8),\n                   Tuple.Create(&quot;Abbey&quot;, 92.1, 9), \n                   Tuple.Create(&quot;Dave&quot;, 88.3, 9),\n                   Tuple.Create(&quot;Sam&quot;, 91.7, 8), \n                   Tuple.Create(&quot;Ed&quot;, 71.2, 5),\n                   Tuple.Create(&quot;Penelope&quot;, 82.9, 8),\n                   Tuple.Create(&quot;Linda&quot;, 99.0, 9),\n                   Tuple.Create(&quot;Judith&quot;, 84.3, 9) }\n\n      Console.WriteLine(&quot;The values in unsorted order:&quot;)\n      For Each score In scores\n         Console.WriteLine(score.ToString())\n      Next\n      Console.WriteLine()\n\n      Array.Sort(scores, New ScoreComparer(Of String, Double, Integer)())\n\n      Console.WriteLine(&quot;The values in sorted order:&quot;)\n      For Each score In scores\n         Console.WriteLine(score.ToString())\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output;\n&#39;       The values in unsorted order:\n&#39;       (Jack, 78.8, 8)\n&#39;       (Abbey, 92.1, 9)\n&#39;       (Dave, 88.3, 9)\n&#39;       (Sam, 91.7, 8)\n&#39;       (Ed, 71.2, 5)\n&#39;       (Penelope, 82.9, 8)\n&#39;       (Linda, 99, 9)\n&#39;       (Judith, 84.3, 9)\n&#39;       \n&#39;       The values in sorted order:\n&#39;       (Ed, 71.2, 5)\n&#39;       (Jack, 78.8, 8)\n&#39;       (Penelope, 82.9, 8)\n&#39;       (Judith, 84.3, 9)\n&#39;       (Dave, 88.3, 9)\n&#39;       (Sam, 91.7, 8)\n&#39;       (Abbey, 92.1, 9)\n&#39;       (Linda, 99, 9)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_3_System_Collections_IStructuralEquatable_Equals_System_Object_System_Collections_IEqualityComparer_\">\r\n    \r\n            <a id=\"System_Tuple_3_System_Collections_IStructuralEquatable_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IStructuralEquatable.Equals(Object,IEqualityComparer)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value that indicates whether the current <span class=\"xref\">stem.Tuple`3</span> object is equal to a specified object based on a specified comparison method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool IStructuralEquatable.Equals (object other, System.Collections.IEqualityComparer comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>other</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to compare with this instance.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that defines the method to use to evaluate whether the two objects are equal.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current instance is equal to the specified object; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.tuple-3\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3&gt;</a> instance is cast to an <a class=\"xref\" href=\"system.collections.istructuralequatable\" data-linktype=\"relative-path\">IStructuralEquatable</a> interface.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.iequalitycomparer#System_Collections_IEqualityComparer_Equals_\" data-linktype=\"relative-path\">Equals</a> implementation is called only if <code>other</code> is not <code>null</code>, and if it can be successfully cast (in C#) or converted (in Visual Basic) to a <a class=\"xref\" href=\"system.tuple-3\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3&gt;</a> object whose components are of the same types as the current instance. The IStructuralEquatable.Equals method first passes the <a class=\"xref\" href=\"system.tuple-3#System_Tuple_3_Item1_\" data-linktype=\"relative-path\">Item1</a> values of the <a class=\"xref\" href=\"system.tuple-3\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3&gt;</a> objects to be compared to the <a class=\"xref\" href=\"system.collections.iequalitycomparer#System_Collections_IEqualityComparer_Equals_\" data-linktype=\"relative-path\">Equals</a> implementation. If this method call returns <code>true</code>, the method is called again and passed the <a class=\"xref\" href=\"system.tuple-3#System_Tuple_3_Item2_\" data-linktype=\"relative-path\">Item2</a> values of the two <a class=\"xref\" href=\"system.tuple-3\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3&gt;</a> objects. If this method call returns <code>true</code> again, the method is called a third time and passed the <a class=\"xref\" href=\"system.tuple-3#System_Tuple_3_Item3_\" data-linktype=\"relative-path\">Item3</a> values of the two <a class=\"xref\" href=\"system.tuple-3\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3&gt;</a> objects.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines an <code>Item2Comparer</code> class that implements the <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a> interface and changes the way in which <a class=\"xref\" href=\"system.tuple-3\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3&gt;</a> objects are evaluated for equality. The method always returns <code>true</code> when it is passed the <a class=\"xref\" href=\"system.tuple-3#System_Tuple_3_Item1_\" data-linktype=\"relative-path\">Item1</a> property values of two <a class=\"xref\" href=\"system.tuple-3\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3&gt;</a> objects, and it calls the IStructuralEquatable.Equals method to evaluate their <a class=\"xref\" href=\"system.tuple-3#System_Tuple_3_Item2_\" data-linktype=\"relative-path\">Item2</a> property values. If this method call returns <code>true</code>, their <a class=\"xref\" href=\"system.tuple-3#System_Tuple_3_Item3_\" data-linktype=\"relative-path\">Item3</a> property values are passed to the method, which always returns <code>true</code>. As a result, the method tests for equality based only on the value of the <a class=\"xref\" href=\"system.tuple-3#System_Tuple_3_Item2_\" data-linktype=\"relative-path\">Item2</a> property. The output illustrates the result for a data set of <a class=\"xref\" href=\"system.tuple-3\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3&gt;</a> objects that record the names, mean test score, and number of tests of students in a class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple`3.Equals#2\">using System;\nusing System.Collections;\n\npublic class Item2Comparer&lt;T1, T2, T3&gt; : IEqualityComparer\n{\n   new public bool Equals(object x, object y)\n   {\n      // Return true for all values of Item1.\n      if (x is T1)\n         return true;\n      else if (x is T2)\n         return x.Equals(y);\n      else\n         return true;\t\n   }\n   \n   public int GetHashCode(object obj)\n   {\n      if (obj is T1)\n         return ((T1) obj).GetHashCode();\n      else if (obj is T2)\n         return ((T2) obj).GetHashCode();\n      else\n         return ((T3) obj).GetHashCode();\n   }                \n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      Tuple&lt;string, double, int&gt;[] scores = \n           { Tuple.Create(&quot;Ed&quot;, 78.8, 8),\n             Tuple.Create(&quot;Abbey&quot;, 92.1, 9), \n             Tuple.Create(&quot;Jim&quot;, 71.2, 9),\n             Tuple.Create(&quot;Sam&quot;, 91.7, 8), \n             Tuple.Create(&quot;Sandy&quot;, 71.2, 5),\n             Tuple.Create(&quot;Penelope&quot;, 82.9, 8),\n             Tuple.Create(&quot;Serena&quot;, 71.2, 9),\n             Tuple.Create(&quot;Judith&quot;, 84.3, 9) };\n\n      for (int ctr = 0; ctr &lt; scores.Length; ctr++)\n      {\n         IStructuralEquatable score = scores[ctr];\n         for (int ctr2 = ctr + 1; ctr2 &lt; scores.Length; ctr2++)\n         {\n            Console.WriteLine(&quot;{0} = {1}: {2}&quot;, score, \n                              scores[ctr2], \n                              score.Equals(scores[ctr2], \n                                           new Item2Comparer&lt;string, double, int&gt;()));\n         }\n         Console.WriteLine();\n      }   \n   }\n}\n// The example displays the following output:\n//      (Ed, 78.8, 8) = (Abbey, 92.1, 9): False\n//      (Ed, 78.8, 8) = (Jim, 71.2, 9): False\n//      (Ed, 78.8, 8) = (Sam, 91.7, 8): False\n//      (Ed, 78.8, 8) = (Sandy, 71.2, 5): False\n//      (Ed, 78.8, 8) = (Penelope, 82.9, 8): False\n//      (Ed, 78.8, 8) = (Serena, 71.2, 9): False\n//      (Ed, 78.8, 8) = (Judith, 84.3, 9): False\n//\n//      (Abbey, 92.1, 9) = (Jim, 71.2, 9): False\n//      (Abbey, 92.1, 9) = (Sam, 91.7, 8): False\n//      (Abbey, 92.1, 9) = (Sandy, 71.2, 5): False\n//      (Abbey, 92.1, 9) = (Penelope, 82.9, 8): False\n//      (Abbey, 92.1, 9) = (Serena, 71.2, 9): False\n//      (Abbey, 92.1, 9) = (Judith, 84.3, 9): False\n//      \n//      (Jim, 71.2, 9) = (Sam, 91.7, 8): False\n//      (Jim, 71.2, 9) = (Sandy, 71.2, 5): True\n//      (Jim, 71.2, 9) = (Penelope, 82.9, 8): False\n//      (Jim, 71.2, 9) = (Serena, 71.2, 9): True\n//      (Jim, 71.2, 9) = (Judith, 84.3, 9): False\n//\n//      (Sam, 91.7, 8) = (Sandy, 71.2, 5): False\n//      (Sam, 91.7, 8) = (Penelope, 82.9, 8): False\n//      (Sam, 91.7, 8) = (Serena, 71.2, 9): False\n//      (Sam, 91.7, 8) = (Judith, 84.3, 9): False\n//\n//      (Sandy, 71.2, 5) = (Penelope, 82.9, 8): False\n//      (Sandy, 71.2, 5) = (Serena, 71.2, 9): True\n//      (Sandy, 71.2, 5) = (Judith, 84.3, 9): False\n//\n//      (Penelope, 82.9, 8) = (Serena, 71.2, 9): False\n//      (Penelope, 82.9, 8) = (Judith, 84.3, 9): False\n//\n//      (Serena, 71.2, 9) = (Judith, 84.3, 9): False\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple`3.Equals#2\">Imports System.Collections\n\nPublic Class Item2Comparer(Of T1, T2, T3) : Implements IEqualityComparer\n   \n   Public Overloads Function Equals(x As Object, y As Object) As Boolean _\n                   Implements IEqualityComparer.Equals\n      &#39; Return true for all values of Item1.\n      If TypeOf x Is T1 Then\n         Return True\n      ElseIf TypeOf x Is T2 Then\n         Return x.Equals(y)\n      Else\n         Return True\n      End If\n   End Function\n   \n   Public Overloads Function GetHashCode(obj As Object) As Integer _\n                    Implements IEqualityComparer.GetHashCode\n      If TypeOf obj Is T1 Then\n         Return CType(obj, T1).GetHashCode()\n      ElseIf TypeOf obj Is T2 Then\n         Return CType(obj, T2).GetHashCode()\n      Else\t\n         Return CType(obj, T3).GetHashCode()\n      End If   \n   End Function                \nEnd Class\n\nModule Example\n   Public Sub Main()\n      Dim scores() = \n                { Tuple.Create(&quot;Ed&quot;, 78.8, 8),\n                  Tuple.Create(&quot;Abbey&quot;, 92.1, 9), \n                  Tuple.Create(&quot;Jim&quot;, 71.2, 9),\n                  Tuple.Create(&quot;Sam&quot;, 91.7, 8), \n                  Tuple.Create(&quot;Sandy&quot;, 71.2, 5),\n                  Tuple.Create(&quot;Penelope&quot;, 82.9, 8),\n                  Tuple.Create(&quot;Serena&quot;, 71.2, 9),\n                  Tuple.Create(&quot;Judith&quot;, 84.3, 9) }\n\n      For ctr As Integer = 0 To scores.Length - 1\n         Dim score As IStructuralEquatable = scores(ctr)\n         For ctr2 As Integer = ctr + 1 To scores.Length - 1\n            Console.WriteLine(&quot;{0} = {1}: {2}&quot;, score, \n                              scores(ctr2), \n                              score.Equals(scores(ctr2), \n                                           new Item2Comparer(Of String, Double, Integer)))\n         Next\n         Console.WriteLine()\n      Next                     \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;      (Ed, 78.8, 8) = (Abbey, 92.1, 9): False\n&#39;      (Ed, 78.8, 8) = (Jim, 71.2, 9): False\n&#39;      (Ed, 78.8, 8) = (Sam, 91.7, 8): False\n&#39;      (Ed, 78.8, 8) = (Sandy, 71.2, 5): False\n&#39;      (Ed, 78.8, 8) = (Penelope, 82.9, 8): False\n&#39;      (Ed, 78.8, 8) = (Serena, 71.2, 9): False\n&#39;      (Ed, 78.8, 8) = (Judith, 84.3, 9): False\n&#39;      \n&#39;      (Abbey, 92.1, 9) = (Jim, 71.2, 9): False\n&#39;      (Abbey, 92.1, 9) = (Sam, 91.7, 8): False\n&#39;      (Abbey, 92.1, 9) = (Sandy, 71.2, 5): False\n&#39;      (Abbey, 92.1, 9) = (Penelope, 82.9, 8): False\n&#39;      (Abbey, 92.1, 9) = (Serena, 71.2, 9): False\n&#39;      (Abbey, 92.1, 9) = (Judith, 84.3, 9): False\n&#39;\n&#39;      (Jim, 71.2, 9) = (Sam, 91.7, 8): False\n&#39;      (Jim, 71.2, 9) = (Sandy, 71.2, 5): True\n&#39;      (Jim, 71.2, 9) = (Penelope, 82.9, 8): False\n&#39;      (Jim, 71.2, 9) = (Serena, 71.2, 9): True\n&#39;      (Jim, 71.2, 9) = (Judith, 84.3, 9): False\n&#39;\n&#39;      (Sam, 91.7, 8) = (Sandy, 71.2, 5): False\n&#39;      (Sam, 91.7, 8) = (Penelope, 82.9, 8): False\n&#39;      (Sam, 91.7, 8) = (Serena, 71.2, 9): False\n&#39;      (Sam, 91.7, 8) = (Judith, 84.3, 9): False\n&#39;\n&#39;      (Sandy, 71.2, 5) = (Penelope, 82.9, 8): False\n&#39;      (Sandy, 71.2, 5) = (Serena, 71.2, 9): True\n&#39;      (Sandy, 71.2, 5) = (Judith, 84.3, 9): False\n&#39;\n&#39;      (Penelope, 82.9, 8) = (Serena, 71.2, 9): False\n&#39;      (Penelope, 82.9, 8) = (Judith, 84.3, 9): False\n&#39;\n&#39;      (Serena, 71.2, 9) = (Judith, 84.3, 9): False\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_3_System_Collections_IStructuralEquatable_GetHashCode_System_Collections_IEqualityComparer_\">\r\n    \r\n            <a id=\"System_Tuple_3_System_Collections_IStructuralEquatable_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IStructuralEquatable.GetHashCode(IEqualityComparer)</div>        \r\n          </div>\r\n    \r\n            <p>Calculates the hash code for the current <span class=\"xref\">stem.Tuple`3</span> object by using a specified computation method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">int IStructuralEquatable.GetHashCode (System.Collections.IEqualityComparer comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object whose <span class=\"xref\">stem.Collections.IEqualityComparer.GetHashCode*</span> method calculates the hash code of the current <span class=\"xref\">stem.Tuple`3</span> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer hash code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.tuple-3\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3&gt;</a> instance is cast to an <a class=\"xref\" href=\"system.collections.istructuralequatable\" data-linktype=\"relative-path\">IStructuralEquatable</a> interface.  </p>\n<p> The method simply wraps a call to the <code>comparer</code> object&#39;s <a class=\"xref\" href=\"system.collections.iequalitycomparer#System_Collections_IEqualityComparer_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a> implementation.  </p>\n<p> The algorithm used to compute the hash code should return the same hash code for two <a class=\"xref\" href=\"system.tuple-3\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3&gt;</a> objects that are considered to be equal.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Tuple_3_System_IComparable_CompareTo_System_Object_\">\r\n    \r\n            <a id=\"System_Tuple_3_System_IComparable_CompareTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IComparable.CompareTo(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Compares the current <span class=\"xref\">stem.Tuple`3</span> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">int IComparable.CompareTo (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to compare with the current instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A signed integer that indicates the relative position of this instance and <code>obj</code> in the sort order, as shown in the following table.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Description<br>\n </th></tr></thead><tbody><tr><td> A negative integer<br>\n </td><td> This instance precedes <code>obj</code>.<br>\n </td></tr><tr><td> Zero<br>\n </td><td> This instance and <code>obj</code> have the same position in the sort order.<br>\n </td></tr><tr><td> A positive integer<br>\n </td><td> This instance follows <code>obj</code>.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>obj</code> is not a <span class=\"xref\">stem.Tuple`3</span> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.tuple-3\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3&gt;</a> instance is cast to an <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface.  </p>\n<p> This method provides the <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> implementation for the <a class=\"xref\" href=\"system.tuple-3\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3&gt;</a> class. Although the method can be called directly, it is most commonly called by the default overloads of collection sorting methods, such as <a class=\"xref\" href=\"system.array#System_Array_Sort_System_Array_\" data-linktype=\"relative-path\">System.Array.Sort(Array)</a> and <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_Add_\" data-linktype=\"relative-path\">Add</a>, to order the members of a collection.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> The IComparable.CompareTo method is intended for use in sorting operations. It should not be used when the primary purpose of a comparison is to determine whether two objects are equal. To determine whether two objects are equal, call the <a class=\"xref\" href=\"system.tuple-3#System_Tuple_3_Equals_\" data-linktype=\"relative-path\">Equals</a> method.  </p>\n</div>\n<p> The IComparable.CompareTo method uses the default object comparer to compare each component.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an array of <a class=\"xref\" href=\"system.tuple-3\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3&gt;</a> objects whose components consist of a student&#39;s name, mean test score, and number of tests. It displays the components of each tuple in the array in unsorted order, sorts the array, and then calls <a class=\"xref\" href=\"system.tuple-3#System_Tuple_3_ToString_\" data-linktype=\"relative-path\">ToString</a> to display each tuple in sorted order. The output shows that the array has been sorted by its first component. Note that the example does not directly call the IComparable.CompareTo method. This method is called implicitly by the <a class=\"xref\" href=\"system.array#System_Array_Sort_System_Array_\" data-linktype=\"relative-path\">Sort(Array)</a> method for each element in the array.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Tuple`3.CompareTo#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Tuple&lt;string, double, int&gt;[] scores = \n                    { Tuple.Create(&quot;Jack&quot;, 78.8, 8),\n                      Tuple.Create(&quot;Abbey&quot;, 92.1, 9), \n                      Tuple.Create(&quot;Dave&quot;, 88.3, 9),\n                      Tuple.Create(&quot;Sam&quot;, 91.7, 8), \n                      Tuple.Create(&quot;Ed&quot;, 71.2, 5),\n                      Tuple.Create(&quot;Penelope&quot;, 82.9, 8),\n                      Tuple.Create(&quot;Linda&quot;, 99.0, 9),\n                      Tuple.Create(&quot;Judith&quot;, 84.3, 9) };\n\n      Console.WriteLine(&quot;The values in unsorted order:&quot;);\n      foreach (var score in scores)\n         Console.WriteLine(score.ToString());\n\n      Console.WriteLine();\n\n      Array.Sort(scores);\n\n      Console.WriteLine(&quot;The values in sorted order:&quot;);\n      foreach (var score in scores)\n         Console.WriteLine(score.ToString());\n   }\n}\n// The example displays the following output;\n//    The values in unsorted order:\n//    (Jack, 78.8, 8)\n//    (Abbey, 92.1, 9)\n//    (Dave, 88.3, 9)\n//    (Sam, 91.7, 8)\n//    (Ed, 71.2, 5)\n//    (Penelope, 82.9, 8)\n//    (Linda, 99, 9)\n//    (Judith, 84.3, 9)\n//    \n//    The values in sorted order:\n//    (Abbey, 92.1, 9)\n//    (Dave, 88.3, 9)\n//    (Ed, 71.2, 5)\n//    (Jack, 78.8, 8)\n//    (Judith, 84.3, 9)\n//    (Linda, 99, 9)\n//    (Penelope, 82.9, 8)\n//    (Sam, 91.7, 8)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Tuple`3.CompareTo#1\">Module Example\n   Public Sub Main()\n      Dim scores() = \n                 { Tuple.Create(&quot;Jack&quot;, 78.8, 8),\n                   Tuple.Create(&quot;Abbey&quot;, 92.1, 9), \n                   Tuple.Create(&quot;Dave&quot;, 88.3, 9),\n                   Tuple.Create(&quot;Sam&quot;, 91.7, 8), \n                   Tuple.Create(&quot;Ed&quot;, 71.2, 5),\n                   Tuple.Create(&quot;Penelope&quot;, 82.9, 8),\n                   Tuple.Create(&quot;Linda&quot;, 99.0, 9),\n                   Tuple.Create(&quot;Judith&quot;, 84.3, 9) }\n\n      Console.WriteLine(&quot;The values in unsorted order:&quot;)\n      For Each score In scores\n         Console.WriteLine(score.ToString())\n      Next\n      Console.WriteLine()\n\n      Array.Sort(scores)\n\n      Console.WriteLine(&quot;The values in sorted order:&quot;)\n      For Each score In scores\n         Console.WriteLine(score.ToString())\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output;\n&#39;    The values in unsorted order:\n&#39;    (Jack, 78.8, 8)\n&#39;    (Abbey, 92.1, 9)\n&#39;    (Dave, 88.3, 9)\n&#39;    (Sam, 91.7, 8)\n&#39;    (Ed, 71.2, 5)\n&#39;    (Penelope, 82.9, 8)\n&#39;    (Linda, 99, 9)\n&#39;    (Judith, 84.3, 9)\n&#39;    \n&#39;    The values in sorted order:\n&#39;    (Abbey, 92.1, 9)\n&#39;    (Dave, 88.3, 9)\n&#39;    (Ed, 71.2, 5)\n&#39;    (Jack, 78.8, 8)\n&#39;    (Judith, 84.3, 9)\n&#39;    (Linda, 99, 9)\n&#39;    (Penelope, 82.9, 8)\n&#39;    (Sam, 91.7, 8)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Tuple-3.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Tuple-3.yml\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3&gt;\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3&gt;..ctor\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3&gt;.Equals\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3&gt;.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3&gt;.Item1\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3&gt;.Item2\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3&gt;.Item3\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3&gt;.IStructuralComparable.CompareTo\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3&gt;.IStructuralEquatable.Equals\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3&gt;.IStructuralEquatable.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3&gt;.IComparable.CompareTo\">\r\n<meta name=\"APIName\" content=\"System.Tuple&lt;T1,T2,T3&gt;.ToString\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"0944aac3-b1e2-e02a-4db3-cf29a9d13a48\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a 3-tuple, or triple.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Tuple`3\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Tuple-3.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Tuple-3.yml","open_to_public_contributors":true,"api_name":["System.Tuple<T1,T2,T3>","System.Tuple<T1,T2,T3>..ctor","System.Tuple<T1,T2,T3>.Equals","System.Tuple<T1,T2,T3>.GetHashCode","System.Tuple<T1,T2,T3>.Item1","System.Tuple<T1,T2,T3>.Item2","System.Tuple<T1,T2,T3>.Item3","System.Tuple<T1,T2,T3>.IStructuralComparable.CompareTo","System.Tuple<T1,T2,T3>.IStructuralEquatable.Equals","System.Tuple<T1,T2,T3>.IStructuralEquatable.GetHashCode","System.Tuple<T1,T2,T3>.IComparable.CompareTo","System.Tuple<T1,T2,T3>.ToString"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Tuple`3","System::Tuple`3","System.Tuple`3.#ctor","System::Tuple`3::#ctor","System.Tuple`3.Equals","System::Tuple`3::Equals","System.Tuple`3.GetHashCode","System::Tuple`3::GetHashCode","System.Tuple`3.Item1","System::Tuple`3::Item1","System.Tuple`3.Item2","System::Tuple`3::Item2","System.Tuple`3.Item3","System::Tuple`3::Item3","System.Tuple`3.System#Collections#IStructuralComparable#CompareTo","System::Tuple`3::System#Collections#IStructuralComparable#CompareTo","System.Tuple`3.System#Collections#IStructuralEquatable#Equals","System::Tuple`3::System#Collections#IStructuralEquatable#Equals","System.Tuple`3.System#Collections#IStructuralEquatable#GetHashCode","System::Tuple`3::System#Collections#IStructuralEquatable#GetHashCode","System.Tuple`3.System#IComparable#CompareTo","System::Tuple`3::System#IComparable#CompareTo","System.Tuple`3.ToString","System::Tuple`3::ToString"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"0944aac3-b1e2-e02a-4db3-cf29a9d13a48","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/Tuple`3.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Tuple<T1,T2,T3> class | Microsoft Docs","_op_ogTitle":"Tuple<T1,T2,T3> class","description":"Represents a 3-tuple, or triple.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.Tuple`3","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.tuple-3","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.tuple-3","fileRelativePath":"System.Tuple-3.html"},"themesRelativePathToOutputRoot":"_themes/"}