{"content":"    \r\n    <h1 id=\"System_Collections_Generic_LinkedListNode_1\">\r\n      <span class=\"lang-csharp\">LinkedListNode&lt;T&gt;</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a node in a <span class=\"xref\">stem.Collections.Generic.LinkedList`1</span>. This class cannot be inherited.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(false)]\npublic sealed class LinkedListNode&lt;T&gt;</code></pre>\r\n    \r\n    \r\n    \t<h2>Type Parameters</h2>\r\n    \r\n    \t<table class=\"nameValue\">\r\n    \t\t<tr>\r\n    \t\t<td>\r\n    \t\tT\r\n    \t\t</td>\r\n    \t\t<td>\r\n    \t\t<p>Specifies the element type of the linked list.</p>\n\r\n    \t\t</td>\r\n    \t\t</tr>\r\n    \t</table>\r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">LinkedListNode&lt;T&gt;</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Each element of the <a class=\"xref\" href=\"system.collections.generic.linkedlist-1\" data-linktype=\"relative-path\">LinkedList&lt;T&gt;</a> collection is a LinkedListNode(T).  The LinkedListNode(T) contains a value, a reference to the <a class=\"xref\" href=\"system.collections.generic.linkedlist-1\" data-linktype=\"relative-path\">LinkedList&lt;T&gt;</a> that it belongs to, a reference to the next node, and a reference to the previous node.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_LinkedListNode_1__ctor__0_\" data-linktype=\"self-bookmark\">LinkedListNode&lt;T&gt;(T)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Collections.Generic.LinkedListNode`1</span> class, containing the specified value.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_LinkedListNode_1_List\" data-linktype=\"self-bookmark\">List</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <span class=\"xref\">stem.Collections.Generic.LinkedList`1</span> that the <span class=\"xref\">stem.Collections.Generic.LinkedListNode`1</span> belongs to.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_LinkedListNode_1_Next\" data-linktype=\"self-bookmark\">Next</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the next node in the <span class=\"xref\">stem.Collections.Generic.LinkedList`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_LinkedListNode_1_Previous\" data-linktype=\"self-bookmark\">Previous</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the previous node in the <span class=\"xref\">stem.Collections.Generic.LinkedList`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_LinkedListNode_1_Value\" data-linktype=\"self-bookmark\">Value</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value contained in the node.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_LinkedListNode_1__ctor__0_\">\r\n    \r\n            <a id=\"System_Collections_Generic_LinkedListNode_1__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LinkedListNode&lt;T&gt;(T)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Collections.Generic.LinkedListNode`1</span> class, containing the specified value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public LinkedListNode (T value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to contain in the <span class=\"xref\">stem.Collections.Generic.LinkedListNode`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.collections.generic.linkedlistnode-1#System_Collections_Generic_LinkedListNode_1_List_\" data-linktype=\"relative-path\">List</a>, <a class=\"xref\" href=\"system.collections.generic.linkedlistnode-1#System_Collections_Generic_LinkedListNode_1_Next_\" data-linktype=\"relative-path\">Next</a>, and <a class=\"xref\" href=\"system.collections.generic.linkedlistnode-1#System_Collections_Generic_LinkedListNode_1_Previous_\" data-linktype=\"relative-path\">Previous</a> properties are set to <code>null</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a <a class=\"xref\" href=\"system.collections.generic.linkedlistnode-1\" data-linktype=\"relative-path\">LinkedListNode&lt;T&gt;</a>, adds it to a <a class=\"xref\" href=\"system.collections.generic.linkedlist-1\" data-linktype=\"relative-path\">LinkedList&lt;T&gt;</a>, and tracks the values of its properties as the <a class=\"xref\" href=\"system.collections.generic.linkedlist-1\" data-linktype=\"relative-path\">LinkedList&lt;T&gt;</a> changes.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Collections.Generic.LinkedListNode#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class GenericCollection\n\n    Public Shared Sub Main()\n\n        &#39; Create a new LinkedListNode of type String and displays its properties.\n        Dim lln As New LinkedListNode(Of String)(&quot;orange&quot;)\n        Console.WriteLine(&quot;After creating the node ....&quot;)\n        DisplayProperties(lln)\n\n        &#39; Create a new LinkedList.\n        Dim ll As New LinkedList(Of String)\n\n        &#39; Add the &quot;orange&quot; node and display its properties.\n        ll.AddLast(lln)\n        Console.WriteLine(&quot;After adding the node to the empty LinkedList ....&quot;)\n        DisplayProperties(lln)\n\n        &#39; Add nodes before and after the &quot;orange&quot; node and display the &quot;orange&quot; node&#39;s properties.\n        ll.AddFirst(&quot;red&quot;)\n        ll.AddLast(&quot;yellow&quot;)\n        Console.WriteLine(&quot;After adding red and yellow ....&quot;)\n        DisplayProperties(lln)\n\n    End Sub &#39;Main\n\n    Public Shared Sub DisplayProperties(lln As LinkedListNode(Of String))\n\n        If lln.List Is Nothing Then\n            Console.WriteLine(&quot;   Node is not linked.&quot;)\n        Else\n            Console.WriteLine(&quot;   Node belongs to a linked list with {0} elements.&quot;, lln.List.Count)\n        End If \n\n        If lln.Previous Is Nothing Then\n            Console.WriteLine(&quot;   Previous node is null.&quot;)\n        Else\n            Console.WriteLine(&quot;   Value of previous node: {0}&quot;, lln.Previous.Value)\n        End If \n\n        Console.WriteLine(&quot;   Value of current node:  {0}&quot;, lln.Value)\n        \n        If lln.Next Is Nothing Then\n            Console.WriteLine(&quot;   Next node is null.&quot;)\n        Else\n            Console.WriteLine(&quot;   Value of next node:     {0}&quot;, lln.Next.Value)\n        End If \n\n        Console.WriteLine()\n\n    End Sub &#39;DisplayProperties \n\nEnd Class &#39;GenericCollection\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;After creating the node ....\n&#39;   Node is not linked.\n&#39;   Previous node is null.\n&#39;   Value of current node:  orange\n&#39;   Next node is null.\n&#39;\n&#39;After adding the node to the empty LinkedList ....\n&#39;   Node belongs to a linked list with 1 elements.\n&#39;   Previous node is null.\n&#39;   Value of current node:  orange\n&#39;   Next node is null.\n&#39;\n&#39;After adding red and yellow ....\n&#39;   Node belongs to a linked list with 3 elements.\n&#39;   Value of previous node: red\n&#39;   Value of current node:  orange\n&#39;   Value of next node:     yellow\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.Generic.LinkedListNode#1\">using System;\nusing System.Collections.Generic;\n\npublic class GenericCollection  {\n\n   public static void Main()  {\n\n      // Create a new LinkedListNode of type String and displays its properties.\n      LinkedListNode&lt;String&gt; lln = new LinkedListNode&lt;String&gt;( &quot;orange&quot; );\n      Console.WriteLine( &quot;After creating the node ....&quot; );\n      DisplayProperties( lln );\n\n      // Create a new LinkedList.\n      LinkedList&lt;String&gt; ll = new LinkedList&lt;String&gt;();\n\n      // Add the &quot;orange&quot; node and display its properties.\n      ll.AddLast( lln );\n      Console.WriteLine( &quot;After adding the node to the empty LinkedList ....&quot; );\n      DisplayProperties( lln );\n\n      // Add nodes before and after the &quot;orange&quot; node and display the &quot;orange&quot; node&#39;s properties.\n      ll.AddFirst( &quot;red&quot; );\n      ll.AddLast( &quot;yellow&quot; );\n      Console.WriteLine( &quot;After adding red and yellow ....&quot; );\n      DisplayProperties( lln );\n\n   }\n\n   public static void DisplayProperties( LinkedListNode&lt;String&gt; lln )  {\n      if ( lln.List == null )\n         Console.WriteLine( &quot;   Node is not linked.&quot; );\n      else\n         Console.WriteLine( &quot;   Node belongs to a linked list with {0} elements.&quot;, lln.List.Count );\n\n      if ( lln.Previous == null )\n         Console.WriteLine( &quot;   Previous node is null.&quot; );\n      else\n         Console.WriteLine( &quot;   Value of previous node: {0}&quot;, lln.Previous.Value );\n\n      Console.WriteLine( &quot;   Value of current node:  {0}&quot;, lln.Value );\n\n      if ( lln.Next == null )\n         Console.WriteLine( &quot;   Next node is null.&quot; );\n      else\n         Console.WriteLine( &quot;   Value of next node:     {0}&quot;, lln.Next.Value );\n\n      Console.WriteLine();\n   }\n\n}\n\n\n/*\n\nThis code produces the following output.\n\nAfter creating the node ....\n   Node is not linked.\n   Previous node is null.\n   Value of current node:  orange\n   Next node is null.\n\nAfter adding the node to the empty LinkedList ....\n   Node belongs to a linked list with 1 elements.\n   Previous node is null.\n   Value of current node:  orange\n   Next node is null.\n\nAfter adding red and yellow ....\n   Node belongs to a linked list with 3 elements.\n   Value of previous node: red\n   Value of current node:  orange\n   Value of next node:     yellow\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Collections.Generic.LinkedListNode#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections::Generic;\n\npublic ref class GenericCollection  {\n\npublic:\n   static void Main()  {\n\n      // Create a new LinkedListNode of type String and displays its properties.\n      LinkedListNode&lt;String^&gt;^ lln = gcnew LinkedListNode&lt;String^&gt;( &quot;orange&quot; );\n      Console::WriteLine( &quot;After creating the node ....&quot; );\n      DisplayProperties( lln );\n\n      // Create a new LinkedList.\n      LinkedList&lt;String^&gt;^ ll = gcnew LinkedList&lt;String^&gt;();\n\n      // Add the &quot;orange&quot; node and display its properties.\n      ll-&gt;AddLast( lln );\n      Console::WriteLine( &quot;After adding the node to the empty LinkedList ....&quot; );\n      DisplayProperties( lln );\n\n      // Add nodes before and after the &quot;orange&quot; node and display the &quot;orange&quot; node&#39;s properties.\n      ll-&gt;AddFirst( &quot;red&quot; );\n      ll-&gt;AddLast( &quot;yellow&quot; );\n      Console::WriteLine( &quot;After adding red and yellow ....&quot; );\n      DisplayProperties( lln );\n\n   }\n\n   static void DisplayProperties( LinkedListNode&lt;String^&gt;^ lln )  {\n      if ( lln-&gt;List == nullptr )\n         Console::WriteLine( &quot;   Node is not linked.&quot; );\n      else\n         Console::WriteLine( &quot;   Node belongs to a linked list with {0} elements.&quot;, lln-&gt;List-&gt;Count );\n\n      if ( lln-&gt;Previous == nullptr )\n         Console::WriteLine( &quot;   Previous node is null.&quot; );\n      else\n         Console::WriteLine( &quot;   Value of previous node: {0}&quot;, lln-&gt;Previous-&gt;Value );\n\n      Console::WriteLine( &quot;   Value of current node:  {0}&quot;, lln-&gt;Value );\n\n      if ( lln-&gt;Next == nullptr )\n         Console::WriteLine( &quot;   Next node is null.&quot; );\n      else\n         Console::WriteLine( &quot;   Value of next node:     {0}&quot;, lln-&gt;Next-&gt;Value );\n\n      Console::WriteLine();\n   }\n\n};\n\nint main()\n{\n    GenericCollection::Main();\n}\n\n/*\n\nThis code produces the following output.\n\nAfter creating the node ....\n   Node is not linked.\n   Previous node is null.\n   Value of current node:  orange\n   Next node is null.\n\nAfter adding the node to the empty LinkedList ....\n   Node belongs to a linked list with 1 elements.\n   Previous node is null.\n   Value of current node:  orange\n   Next node is null.\n\nAfter adding red and yellow ....\n   Node belongs to a linked list with 3 elements.\n   Value of previous node: red\n   Value of current node:  orange\n   Value of next node:     yellow\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_LinkedListNode_1_List\">\r\n    \r\n            <a id=\"System_Collections_Generic_LinkedListNode_1_List_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">List</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <span class=\"xref\">stem.Collections.Generic.LinkedList`1</span> that the <span class=\"xref\">stem.Collections.Generic.LinkedListNode`1</span> belongs to.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Generic.LinkedList&lt;T&gt; List { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.linkedlist-1\" data-linktype=\"relative-path\">LinkedList<t></t></a></div>\r\n                  </div>\r\n                  <p>A reference to the <span class=\"xref\">stem.Collections.Generic.LinkedList`1</span> that the <span class=\"xref\">stem.Collections.Generic.LinkedListNode`1</span> belongs to, or <code>null</code> if the <span class=\"xref\">stem.Collections.Generic.LinkedListNode`1</span> is not linked.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a <a class=\"xref\" href=\"system.collections.generic.linkedlistnode-1\" data-linktype=\"relative-path\">LinkedListNode&lt;T&gt;</a>, adds it to a <a class=\"xref\" href=\"system.collections.generic.linkedlist-1\" data-linktype=\"relative-path\">LinkedList&lt;T&gt;</a>, and tracks the values of its properties as the <a class=\"xref\" href=\"system.collections.generic.linkedlist-1\" data-linktype=\"relative-path\">LinkedList&lt;T&gt;</a> changes.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Collections.Generic.LinkedListNode#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class GenericCollection\n\n    Public Shared Sub Main()\n\n        &#39; Create a new LinkedListNode of type String and displays its properties.\n        Dim lln As New LinkedListNode(Of String)(&quot;orange&quot;)\n        Console.WriteLine(&quot;After creating the node ....&quot;)\n        DisplayProperties(lln)\n\n        &#39; Create a new LinkedList.\n        Dim ll As New LinkedList(Of String)\n\n        &#39; Add the &quot;orange&quot; node and display its properties.\n        ll.AddLast(lln)\n        Console.WriteLine(&quot;After adding the node to the empty LinkedList ....&quot;)\n        DisplayProperties(lln)\n\n        &#39; Add nodes before and after the &quot;orange&quot; node and display the &quot;orange&quot; node&#39;s properties.\n        ll.AddFirst(&quot;red&quot;)\n        ll.AddLast(&quot;yellow&quot;)\n        Console.WriteLine(&quot;After adding red and yellow ....&quot;)\n        DisplayProperties(lln)\n\n    End Sub &#39;Main\n\n    Public Shared Sub DisplayProperties(lln As LinkedListNode(Of String))\n\n        If lln.List Is Nothing Then\n            Console.WriteLine(&quot;   Node is not linked.&quot;)\n        Else\n            Console.WriteLine(&quot;   Node belongs to a linked list with {0} elements.&quot;, lln.List.Count)\n        End If \n\n        If lln.Previous Is Nothing Then\n            Console.WriteLine(&quot;   Previous node is null.&quot;)\n        Else\n            Console.WriteLine(&quot;   Value of previous node: {0}&quot;, lln.Previous.Value)\n        End If \n\n        Console.WriteLine(&quot;   Value of current node:  {0}&quot;, lln.Value)\n        \n        If lln.Next Is Nothing Then\n            Console.WriteLine(&quot;   Next node is null.&quot;)\n        Else\n            Console.WriteLine(&quot;   Value of next node:     {0}&quot;, lln.Next.Value)\n        End If \n\n        Console.WriteLine()\n\n    End Sub &#39;DisplayProperties \n\nEnd Class &#39;GenericCollection\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;After creating the node ....\n&#39;   Node is not linked.\n&#39;   Previous node is null.\n&#39;   Value of current node:  orange\n&#39;   Next node is null.\n&#39;\n&#39;After adding the node to the empty LinkedList ....\n&#39;   Node belongs to a linked list with 1 elements.\n&#39;   Previous node is null.\n&#39;   Value of current node:  orange\n&#39;   Next node is null.\n&#39;\n&#39;After adding red and yellow ....\n&#39;   Node belongs to a linked list with 3 elements.\n&#39;   Value of previous node: red\n&#39;   Value of current node:  orange\n&#39;   Value of next node:     yellow\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.Generic.LinkedListNode#1\">using System;\nusing System.Collections.Generic;\n\npublic class GenericCollection  {\n\n   public static void Main()  {\n\n      // Create a new LinkedListNode of type String and displays its properties.\n      LinkedListNode&lt;String&gt; lln = new LinkedListNode&lt;String&gt;( &quot;orange&quot; );\n      Console.WriteLine( &quot;After creating the node ....&quot; );\n      DisplayProperties( lln );\n\n      // Create a new LinkedList.\n      LinkedList&lt;String&gt; ll = new LinkedList&lt;String&gt;();\n\n      // Add the &quot;orange&quot; node and display its properties.\n      ll.AddLast( lln );\n      Console.WriteLine( &quot;After adding the node to the empty LinkedList ....&quot; );\n      DisplayProperties( lln );\n\n      // Add nodes before and after the &quot;orange&quot; node and display the &quot;orange&quot; node&#39;s properties.\n      ll.AddFirst( &quot;red&quot; );\n      ll.AddLast( &quot;yellow&quot; );\n      Console.WriteLine( &quot;After adding red and yellow ....&quot; );\n      DisplayProperties( lln );\n\n   }\n\n   public static void DisplayProperties( LinkedListNode&lt;String&gt; lln )  {\n      if ( lln.List == null )\n         Console.WriteLine( &quot;   Node is not linked.&quot; );\n      else\n         Console.WriteLine( &quot;   Node belongs to a linked list with {0} elements.&quot;, lln.List.Count );\n\n      if ( lln.Previous == null )\n         Console.WriteLine( &quot;   Previous node is null.&quot; );\n      else\n         Console.WriteLine( &quot;   Value of previous node: {0}&quot;, lln.Previous.Value );\n\n      Console.WriteLine( &quot;   Value of current node:  {0}&quot;, lln.Value );\n\n      if ( lln.Next == null )\n         Console.WriteLine( &quot;   Next node is null.&quot; );\n      else\n         Console.WriteLine( &quot;   Value of next node:     {0}&quot;, lln.Next.Value );\n\n      Console.WriteLine();\n   }\n\n}\n\n\n/*\n\nThis code produces the following output.\n\nAfter creating the node ....\n   Node is not linked.\n   Previous node is null.\n   Value of current node:  orange\n   Next node is null.\n\nAfter adding the node to the empty LinkedList ....\n   Node belongs to a linked list with 1 elements.\n   Previous node is null.\n   Value of current node:  orange\n   Next node is null.\n\nAfter adding red and yellow ....\n   Node belongs to a linked list with 3 elements.\n   Value of previous node: red\n   Value of current node:  orange\n   Value of next node:     yellow\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Collections.Generic.LinkedListNode#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections::Generic;\n\npublic ref class GenericCollection  {\n\npublic:\n   static void Main()  {\n\n      // Create a new LinkedListNode of type String and displays its properties.\n      LinkedListNode&lt;String^&gt;^ lln = gcnew LinkedListNode&lt;String^&gt;( &quot;orange&quot; );\n      Console::WriteLine( &quot;After creating the node ....&quot; );\n      DisplayProperties( lln );\n\n      // Create a new LinkedList.\n      LinkedList&lt;String^&gt;^ ll = gcnew LinkedList&lt;String^&gt;();\n\n      // Add the &quot;orange&quot; node and display its properties.\n      ll-&gt;AddLast( lln );\n      Console::WriteLine( &quot;After adding the node to the empty LinkedList ....&quot; );\n      DisplayProperties( lln );\n\n      // Add nodes before and after the &quot;orange&quot; node and display the &quot;orange&quot; node&#39;s properties.\n      ll-&gt;AddFirst( &quot;red&quot; );\n      ll-&gt;AddLast( &quot;yellow&quot; );\n      Console::WriteLine( &quot;After adding red and yellow ....&quot; );\n      DisplayProperties( lln );\n\n   }\n\n   static void DisplayProperties( LinkedListNode&lt;String^&gt;^ lln )  {\n      if ( lln-&gt;List == nullptr )\n         Console::WriteLine( &quot;   Node is not linked.&quot; );\n      else\n         Console::WriteLine( &quot;   Node belongs to a linked list with {0} elements.&quot;, lln-&gt;List-&gt;Count );\n\n      if ( lln-&gt;Previous == nullptr )\n         Console::WriteLine( &quot;   Previous node is null.&quot; );\n      else\n         Console::WriteLine( &quot;   Value of previous node: {0}&quot;, lln-&gt;Previous-&gt;Value );\n\n      Console::WriteLine( &quot;   Value of current node:  {0}&quot;, lln-&gt;Value );\n\n      if ( lln-&gt;Next == nullptr )\n         Console::WriteLine( &quot;   Next node is null.&quot; );\n      else\n         Console::WriteLine( &quot;   Value of next node:     {0}&quot;, lln-&gt;Next-&gt;Value );\n\n      Console::WriteLine();\n   }\n\n};\n\nint main()\n{\n    GenericCollection::Main();\n}\n\n/*\n\nThis code produces the following output.\n\nAfter creating the node ....\n   Node is not linked.\n   Previous node is null.\n   Value of current node:  orange\n   Next node is null.\n\nAfter adding the node to the empty LinkedList ....\n   Node belongs to a linked list with 1 elements.\n   Previous node is null.\n   Value of current node:  orange\n   Next node is null.\n\nAfter adding red and yellow ....\n   Node belongs to a linked list with 3 elements.\n   Value of previous node: red\n   Value of current node:  orange\n   Value of next node:     yellow\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_LinkedListNode_1_Next\">\r\n    \r\n            <a id=\"System_Collections_Generic_LinkedListNode_1_Next_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Next</div>        \r\n          </div>\r\n    \r\n            <p>Gets the next node in the <span class=\"xref\">stem.Collections.Generic.LinkedList`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Generic.LinkedListNode&lt;T&gt; Next { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.linkedlistnode-1\" data-linktype=\"relative-path\">LinkedListNode<t></t></a></div>\r\n                  </div>\r\n                  <p>A reference to the next node in the <span class=\"xref\">stem.Collections.Generic.LinkedList`1</span>, or <code>null</code> if the current node is the last element (<span class=\"xref\">stem.Collections.Generic.LinkedList`1.Last*</span>) of the <span class=\"xref\">stem.Collections.Generic.LinkedList`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a <a class=\"xref\" href=\"system.collections.generic.linkedlistnode-1\" data-linktype=\"relative-path\">LinkedListNode&lt;T&gt;</a>, adds it to a <a class=\"xref\" href=\"system.collections.generic.linkedlist-1\" data-linktype=\"relative-path\">LinkedList&lt;T&gt;</a>, and tracks the values of its properties as the <a class=\"xref\" href=\"system.collections.generic.linkedlist-1\" data-linktype=\"relative-path\">LinkedList&lt;T&gt;</a> changes.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Collections.Generic.LinkedListNode#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class GenericCollection\n\n    Public Shared Sub Main()\n\n        &#39; Create a new LinkedListNode of type String and displays its properties.\n        Dim lln As New LinkedListNode(Of String)(&quot;orange&quot;)\n        Console.WriteLine(&quot;After creating the node ....&quot;)\n        DisplayProperties(lln)\n\n        &#39; Create a new LinkedList.\n        Dim ll As New LinkedList(Of String)\n\n        &#39; Add the &quot;orange&quot; node and display its properties.\n        ll.AddLast(lln)\n        Console.WriteLine(&quot;After adding the node to the empty LinkedList ....&quot;)\n        DisplayProperties(lln)\n\n        &#39; Add nodes before and after the &quot;orange&quot; node and display the &quot;orange&quot; node&#39;s properties.\n        ll.AddFirst(&quot;red&quot;)\n        ll.AddLast(&quot;yellow&quot;)\n        Console.WriteLine(&quot;After adding red and yellow ....&quot;)\n        DisplayProperties(lln)\n\n    End Sub &#39;Main\n\n    Public Shared Sub DisplayProperties(lln As LinkedListNode(Of String))\n\n        If lln.List Is Nothing Then\n            Console.WriteLine(&quot;   Node is not linked.&quot;)\n        Else\n            Console.WriteLine(&quot;   Node belongs to a linked list with {0} elements.&quot;, lln.List.Count)\n        End If \n\n        If lln.Previous Is Nothing Then\n            Console.WriteLine(&quot;   Previous node is null.&quot;)\n        Else\n            Console.WriteLine(&quot;   Value of previous node: {0}&quot;, lln.Previous.Value)\n        End If \n\n        Console.WriteLine(&quot;   Value of current node:  {0}&quot;, lln.Value)\n        \n        If lln.Next Is Nothing Then\n            Console.WriteLine(&quot;   Next node is null.&quot;)\n        Else\n            Console.WriteLine(&quot;   Value of next node:     {0}&quot;, lln.Next.Value)\n        End If \n\n        Console.WriteLine()\n\n    End Sub &#39;DisplayProperties \n\nEnd Class &#39;GenericCollection\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;After creating the node ....\n&#39;   Node is not linked.\n&#39;   Previous node is null.\n&#39;   Value of current node:  orange\n&#39;   Next node is null.\n&#39;\n&#39;After adding the node to the empty LinkedList ....\n&#39;   Node belongs to a linked list with 1 elements.\n&#39;   Previous node is null.\n&#39;   Value of current node:  orange\n&#39;   Next node is null.\n&#39;\n&#39;After adding red and yellow ....\n&#39;   Node belongs to a linked list with 3 elements.\n&#39;   Value of previous node: red\n&#39;   Value of current node:  orange\n&#39;   Value of next node:     yellow\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.Generic.LinkedListNode#1\">using System;\nusing System.Collections.Generic;\n\npublic class GenericCollection  {\n\n   public static void Main()  {\n\n      // Create a new LinkedListNode of type String and displays its properties.\n      LinkedListNode&lt;String&gt; lln = new LinkedListNode&lt;String&gt;( &quot;orange&quot; );\n      Console.WriteLine( &quot;After creating the node ....&quot; );\n      DisplayProperties( lln );\n\n      // Create a new LinkedList.\n      LinkedList&lt;String&gt; ll = new LinkedList&lt;String&gt;();\n\n      // Add the &quot;orange&quot; node and display its properties.\n      ll.AddLast( lln );\n      Console.WriteLine( &quot;After adding the node to the empty LinkedList ....&quot; );\n      DisplayProperties( lln );\n\n      // Add nodes before and after the &quot;orange&quot; node and display the &quot;orange&quot; node&#39;s properties.\n      ll.AddFirst( &quot;red&quot; );\n      ll.AddLast( &quot;yellow&quot; );\n      Console.WriteLine( &quot;After adding red and yellow ....&quot; );\n      DisplayProperties( lln );\n\n   }\n\n   public static void DisplayProperties( LinkedListNode&lt;String&gt; lln )  {\n      if ( lln.List == null )\n         Console.WriteLine( &quot;   Node is not linked.&quot; );\n      else\n         Console.WriteLine( &quot;   Node belongs to a linked list with {0} elements.&quot;, lln.List.Count );\n\n      if ( lln.Previous == null )\n         Console.WriteLine( &quot;   Previous node is null.&quot; );\n      else\n         Console.WriteLine( &quot;   Value of previous node: {0}&quot;, lln.Previous.Value );\n\n      Console.WriteLine( &quot;   Value of current node:  {0}&quot;, lln.Value );\n\n      if ( lln.Next == null )\n         Console.WriteLine( &quot;   Next node is null.&quot; );\n      else\n         Console.WriteLine( &quot;   Value of next node:     {0}&quot;, lln.Next.Value );\n\n      Console.WriteLine();\n   }\n\n}\n\n\n/*\n\nThis code produces the following output.\n\nAfter creating the node ....\n   Node is not linked.\n   Previous node is null.\n   Value of current node:  orange\n   Next node is null.\n\nAfter adding the node to the empty LinkedList ....\n   Node belongs to a linked list with 1 elements.\n   Previous node is null.\n   Value of current node:  orange\n   Next node is null.\n\nAfter adding red and yellow ....\n   Node belongs to a linked list with 3 elements.\n   Value of previous node: red\n   Value of current node:  orange\n   Value of next node:     yellow\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Collections.Generic.LinkedListNode#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections::Generic;\n\npublic ref class GenericCollection  {\n\npublic:\n   static void Main()  {\n\n      // Create a new LinkedListNode of type String and displays its properties.\n      LinkedListNode&lt;String^&gt;^ lln = gcnew LinkedListNode&lt;String^&gt;( &quot;orange&quot; );\n      Console::WriteLine( &quot;After creating the node ....&quot; );\n      DisplayProperties( lln );\n\n      // Create a new LinkedList.\n      LinkedList&lt;String^&gt;^ ll = gcnew LinkedList&lt;String^&gt;();\n\n      // Add the &quot;orange&quot; node and display its properties.\n      ll-&gt;AddLast( lln );\n      Console::WriteLine( &quot;After adding the node to the empty LinkedList ....&quot; );\n      DisplayProperties( lln );\n\n      // Add nodes before and after the &quot;orange&quot; node and display the &quot;orange&quot; node&#39;s properties.\n      ll-&gt;AddFirst( &quot;red&quot; );\n      ll-&gt;AddLast( &quot;yellow&quot; );\n      Console::WriteLine( &quot;After adding red and yellow ....&quot; );\n      DisplayProperties( lln );\n\n   }\n\n   static void DisplayProperties( LinkedListNode&lt;String^&gt;^ lln )  {\n      if ( lln-&gt;List == nullptr )\n         Console::WriteLine( &quot;   Node is not linked.&quot; );\n      else\n         Console::WriteLine( &quot;   Node belongs to a linked list with {0} elements.&quot;, lln-&gt;List-&gt;Count );\n\n      if ( lln-&gt;Previous == nullptr )\n         Console::WriteLine( &quot;   Previous node is null.&quot; );\n      else\n         Console::WriteLine( &quot;   Value of previous node: {0}&quot;, lln-&gt;Previous-&gt;Value );\n\n      Console::WriteLine( &quot;   Value of current node:  {0}&quot;, lln-&gt;Value );\n\n      if ( lln-&gt;Next == nullptr )\n         Console::WriteLine( &quot;   Next node is null.&quot; );\n      else\n         Console::WriteLine( &quot;   Value of next node:     {0}&quot;, lln-&gt;Next-&gt;Value );\n\n      Console::WriteLine();\n   }\n\n};\n\nint main()\n{\n    GenericCollection::Main();\n}\n\n/*\n\nThis code produces the following output.\n\nAfter creating the node ....\n   Node is not linked.\n   Previous node is null.\n   Value of current node:  orange\n   Next node is null.\n\nAfter adding the node to the empty LinkedList ....\n   Node belongs to a linked list with 1 elements.\n   Previous node is null.\n   Value of current node:  orange\n   Next node is null.\n\nAfter adding red and yellow ....\n   Node belongs to a linked list with 3 elements.\n   Value of previous node: red\n   Value of current node:  orange\n   Value of next node:     yellow\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_LinkedListNode_1_Previous\">\r\n    \r\n            <a id=\"System_Collections_Generic_LinkedListNode_1_Previous_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Previous</div>        \r\n          </div>\r\n    \r\n            <p>Gets the previous node in the <span class=\"xref\">stem.Collections.Generic.LinkedList`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Generic.LinkedListNode&lt;T&gt; Previous { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.linkedlistnode-1\" data-linktype=\"relative-path\">LinkedListNode<t></t></a></div>\r\n                  </div>\r\n                  <p>A reference to the previous node in the <span class=\"xref\">stem.Collections.Generic.LinkedList`1</span>, or <code>null</code> if the current node is the first element (<span class=\"xref\">stem.Collections.Generic.LinkedList`1.First*</span>) of the <span class=\"xref\">stem.Collections.Generic.LinkedList`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a <a class=\"xref\" href=\"system.collections.generic.linkedlistnode-1\" data-linktype=\"relative-path\">LinkedListNode&lt;T&gt;</a>, adds it to a <a class=\"xref\" href=\"system.collections.generic.linkedlist-1\" data-linktype=\"relative-path\">LinkedList&lt;T&gt;</a>, and tracks the values of its properties as the <a class=\"xref\" href=\"system.collections.generic.linkedlist-1\" data-linktype=\"relative-path\">LinkedList&lt;T&gt;</a> changes.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Collections.Generic.LinkedListNode#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class GenericCollection\n\n    Public Shared Sub Main()\n\n        &#39; Create a new LinkedListNode of type String and displays its properties.\n        Dim lln As New LinkedListNode(Of String)(&quot;orange&quot;)\n        Console.WriteLine(&quot;After creating the node ....&quot;)\n        DisplayProperties(lln)\n\n        &#39; Create a new LinkedList.\n        Dim ll As New LinkedList(Of String)\n\n        &#39; Add the &quot;orange&quot; node and display its properties.\n        ll.AddLast(lln)\n        Console.WriteLine(&quot;After adding the node to the empty LinkedList ....&quot;)\n        DisplayProperties(lln)\n\n        &#39; Add nodes before and after the &quot;orange&quot; node and display the &quot;orange&quot; node&#39;s properties.\n        ll.AddFirst(&quot;red&quot;)\n        ll.AddLast(&quot;yellow&quot;)\n        Console.WriteLine(&quot;After adding red and yellow ....&quot;)\n        DisplayProperties(lln)\n\n    End Sub &#39;Main\n\n    Public Shared Sub DisplayProperties(lln As LinkedListNode(Of String))\n\n        If lln.List Is Nothing Then\n            Console.WriteLine(&quot;   Node is not linked.&quot;)\n        Else\n            Console.WriteLine(&quot;   Node belongs to a linked list with {0} elements.&quot;, lln.List.Count)\n        End If \n\n        If lln.Previous Is Nothing Then\n            Console.WriteLine(&quot;   Previous node is null.&quot;)\n        Else\n            Console.WriteLine(&quot;   Value of previous node: {0}&quot;, lln.Previous.Value)\n        End If \n\n        Console.WriteLine(&quot;   Value of current node:  {0}&quot;, lln.Value)\n        \n        If lln.Next Is Nothing Then\n            Console.WriteLine(&quot;   Next node is null.&quot;)\n        Else\n            Console.WriteLine(&quot;   Value of next node:     {0}&quot;, lln.Next.Value)\n        End If \n\n        Console.WriteLine()\n\n    End Sub &#39;DisplayProperties \n\nEnd Class &#39;GenericCollection\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;After creating the node ....\n&#39;   Node is not linked.\n&#39;   Previous node is null.\n&#39;   Value of current node:  orange\n&#39;   Next node is null.\n&#39;\n&#39;After adding the node to the empty LinkedList ....\n&#39;   Node belongs to a linked list with 1 elements.\n&#39;   Previous node is null.\n&#39;   Value of current node:  orange\n&#39;   Next node is null.\n&#39;\n&#39;After adding red and yellow ....\n&#39;   Node belongs to a linked list with 3 elements.\n&#39;   Value of previous node: red\n&#39;   Value of current node:  orange\n&#39;   Value of next node:     yellow\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.Generic.LinkedListNode#1\">using System;\nusing System.Collections.Generic;\n\npublic class GenericCollection  {\n\n   public static void Main()  {\n\n      // Create a new LinkedListNode of type String and displays its properties.\n      LinkedListNode&lt;String&gt; lln = new LinkedListNode&lt;String&gt;( &quot;orange&quot; );\n      Console.WriteLine( &quot;After creating the node ....&quot; );\n      DisplayProperties( lln );\n\n      // Create a new LinkedList.\n      LinkedList&lt;String&gt; ll = new LinkedList&lt;String&gt;();\n\n      // Add the &quot;orange&quot; node and display its properties.\n      ll.AddLast( lln );\n      Console.WriteLine( &quot;After adding the node to the empty LinkedList ....&quot; );\n      DisplayProperties( lln );\n\n      // Add nodes before and after the &quot;orange&quot; node and display the &quot;orange&quot; node&#39;s properties.\n      ll.AddFirst( &quot;red&quot; );\n      ll.AddLast( &quot;yellow&quot; );\n      Console.WriteLine( &quot;After adding red and yellow ....&quot; );\n      DisplayProperties( lln );\n\n   }\n\n   public static void DisplayProperties( LinkedListNode&lt;String&gt; lln )  {\n      if ( lln.List == null )\n         Console.WriteLine( &quot;   Node is not linked.&quot; );\n      else\n         Console.WriteLine( &quot;   Node belongs to a linked list with {0} elements.&quot;, lln.List.Count );\n\n      if ( lln.Previous == null )\n         Console.WriteLine( &quot;   Previous node is null.&quot; );\n      else\n         Console.WriteLine( &quot;   Value of previous node: {0}&quot;, lln.Previous.Value );\n\n      Console.WriteLine( &quot;   Value of current node:  {0}&quot;, lln.Value );\n\n      if ( lln.Next == null )\n         Console.WriteLine( &quot;   Next node is null.&quot; );\n      else\n         Console.WriteLine( &quot;   Value of next node:     {0}&quot;, lln.Next.Value );\n\n      Console.WriteLine();\n   }\n\n}\n\n\n/*\n\nThis code produces the following output.\n\nAfter creating the node ....\n   Node is not linked.\n   Previous node is null.\n   Value of current node:  orange\n   Next node is null.\n\nAfter adding the node to the empty LinkedList ....\n   Node belongs to a linked list with 1 elements.\n   Previous node is null.\n   Value of current node:  orange\n   Next node is null.\n\nAfter adding red and yellow ....\n   Node belongs to a linked list with 3 elements.\n   Value of previous node: red\n   Value of current node:  orange\n   Value of next node:     yellow\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Collections.Generic.LinkedListNode#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections::Generic;\n\npublic ref class GenericCollection  {\n\npublic:\n   static void Main()  {\n\n      // Create a new LinkedListNode of type String and displays its properties.\n      LinkedListNode&lt;String^&gt;^ lln = gcnew LinkedListNode&lt;String^&gt;( &quot;orange&quot; );\n      Console::WriteLine( &quot;After creating the node ....&quot; );\n      DisplayProperties( lln );\n\n      // Create a new LinkedList.\n      LinkedList&lt;String^&gt;^ ll = gcnew LinkedList&lt;String^&gt;();\n\n      // Add the &quot;orange&quot; node and display its properties.\n      ll-&gt;AddLast( lln );\n      Console::WriteLine( &quot;After adding the node to the empty LinkedList ....&quot; );\n      DisplayProperties( lln );\n\n      // Add nodes before and after the &quot;orange&quot; node and display the &quot;orange&quot; node&#39;s properties.\n      ll-&gt;AddFirst( &quot;red&quot; );\n      ll-&gt;AddLast( &quot;yellow&quot; );\n      Console::WriteLine( &quot;After adding red and yellow ....&quot; );\n      DisplayProperties( lln );\n\n   }\n\n   static void DisplayProperties( LinkedListNode&lt;String^&gt;^ lln )  {\n      if ( lln-&gt;List == nullptr )\n         Console::WriteLine( &quot;   Node is not linked.&quot; );\n      else\n         Console::WriteLine( &quot;   Node belongs to a linked list with {0} elements.&quot;, lln-&gt;List-&gt;Count );\n\n      if ( lln-&gt;Previous == nullptr )\n         Console::WriteLine( &quot;   Previous node is null.&quot; );\n      else\n         Console::WriteLine( &quot;   Value of previous node: {0}&quot;, lln-&gt;Previous-&gt;Value );\n\n      Console::WriteLine( &quot;   Value of current node:  {0}&quot;, lln-&gt;Value );\n\n      if ( lln-&gt;Next == nullptr )\n         Console::WriteLine( &quot;   Next node is null.&quot; );\n      else\n         Console::WriteLine( &quot;   Value of next node:     {0}&quot;, lln-&gt;Next-&gt;Value );\n\n      Console::WriteLine();\n   }\n\n};\n\nint main()\n{\n    GenericCollection::Main();\n}\n\n/*\n\nThis code produces the following output.\n\nAfter creating the node ....\n   Node is not linked.\n   Previous node is null.\n   Value of current node:  orange\n   Next node is null.\n\nAfter adding the node to the empty LinkedList ....\n   Node belongs to a linked list with 1 elements.\n   Previous node is null.\n   Value of current node:  orange\n   Next node is null.\n\nAfter adding red and yellow ....\n   Node belongs to a linked list with 3 elements.\n   Value of previous node: red\n   Value of current node:  orange\n   Value of next node:     yellow\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_LinkedListNode_1_Value\">\r\n    \r\n            <a id=\"System_Collections_Generic_LinkedListNode_1_Value_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Value</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value contained in the node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public T Value { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </div>\r\n                  <p>The value contained in the node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property is set in the <a class=\"xref\" href=\"system.collections.generic.linkedlistnode-1#System_Collections_Generic_LinkedListNode_1__ctor_\" data-linktype=\"relative-path\">LinkedListNode&lt;T&gt;</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a <a class=\"xref\" href=\"system.collections.generic.linkedlistnode-1\" data-linktype=\"relative-path\">LinkedListNode&lt;T&gt;</a>, adds it to a <a class=\"xref\" href=\"system.collections.generic.linkedlist-1\" data-linktype=\"relative-path\">LinkedList&lt;T&gt;</a>, and tracks the values of its properties as the <a class=\"xref\" href=\"system.collections.generic.linkedlist-1\" data-linktype=\"relative-path\">LinkedList&lt;T&gt;</a> changes.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Collections.Generic.LinkedListNode#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class GenericCollection\n\n    Public Shared Sub Main()\n\n        &#39; Create a new LinkedListNode of type String and displays its properties.\n        Dim lln As New LinkedListNode(Of String)(&quot;orange&quot;)\n        Console.WriteLine(&quot;After creating the node ....&quot;)\n        DisplayProperties(lln)\n\n        &#39; Create a new LinkedList.\n        Dim ll As New LinkedList(Of String)\n\n        &#39; Add the &quot;orange&quot; node and display its properties.\n        ll.AddLast(lln)\n        Console.WriteLine(&quot;After adding the node to the empty LinkedList ....&quot;)\n        DisplayProperties(lln)\n\n        &#39; Add nodes before and after the &quot;orange&quot; node and display the &quot;orange&quot; node&#39;s properties.\n        ll.AddFirst(&quot;red&quot;)\n        ll.AddLast(&quot;yellow&quot;)\n        Console.WriteLine(&quot;After adding red and yellow ....&quot;)\n        DisplayProperties(lln)\n\n    End Sub &#39;Main\n\n    Public Shared Sub DisplayProperties(lln As LinkedListNode(Of String))\n\n        If lln.List Is Nothing Then\n            Console.WriteLine(&quot;   Node is not linked.&quot;)\n        Else\n            Console.WriteLine(&quot;   Node belongs to a linked list with {0} elements.&quot;, lln.List.Count)\n        End If \n\n        If lln.Previous Is Nothing Then\n            Console.WriteLine(&quot;   Previous node is null.&quot;)\n        Else\n            Console.WriteLine(&quot;   Value of previous node: {0}&quot;, lln.Previous.Value)\n        End If \n\n        Console.WriteLine(&quot;   Value of current node:  {0}&quot;, lln.Value)\n        \n        If lln.Next Is Nothing Then\n            Console.WriteLine(&quot;   Next node is null.&quot;)\n        Else\n            Console.WriteLine(&quot;   Value of next node:     {0}&quot;, lln.Next.Value)\n        End If \n\n        Console.WriteLine()\n\n    End Sub &#39;DisplayProperties \n\nEnd Class &#39;GenericCollection\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;After creating the node ....\n&#39;   Node is not linked.\n&#39;   Previous node is null.\n&#39;   Value of current node:  orange\n&#39;   Next node is null.\n&#39;\n&#39;After adding the node to the empty LinkedList ....\n&#39;   Node belongs to a linked list with 1 elements.\n&#39;   Previous node is null.\n&#39;   Value of current node:  orange\n&#39;   Next node is null.\n&#39;\n&#39;After adding red and yellow ....\n&#39;   Node belongs to a linked list with 3 elements.\n&#39;   Value of previous node: red\n&#39;   Value of current node:  orange\n&#39;   Value of next node:     yellow\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.Generic.LinkedListNode#1\">using System;\nusing System.Collections.Generic;\n\npublic class GenericCollection  {\n\n   public static void Main()  {\n\n      // Create a new LinkedListNode of type String and displays its properties.\n      LinkedListNode&lt;String&gt; lln = new LinkedListNode&lt;String&gt;( &quot;orange&quot; );\n      Console.WriteLine( &quot;After creating the node ....&quot; );\n      DisplayProperties( lln );\n\n      // Create a new LinkedList.\n      LinkedList&lt;String&gt; ll = new LinkedList&lt;String&gt;();\n\n      // Add the &quot;orange&quot; node and display its properties.\n      ll.AddLast( lln );\n      Console.WriteLine( &quot;After adding the node to the empty LinkedList ....&quot; );\n      DisplayProperties( lln );\n\n      // Add nodes before and after the &quot;orange&quot; node and display the &quot;orange&quot; node&#39;s properties.\n      ll.AddFirst( &quot;red&quot; );\n      ll.AddLast( &quot;yellow&quot; );\n      Console.WriteLine( &quot;After adding red and yellow ....&quot; );\n      DisplayProperties( lln );\n\n   }\n\n   public static void DisplayProperties( LinkedListNode&lt;String&gt; lln )  {\n      if ( lln.List == null )\n         Console.WriteLine( &quot;   Node is not linked.&quot; );\n      else\n         Console.WriteLine( &quot;   Node belongs to a linked list with {0} elements.&quot;, lln.List.Count );\n\n      if ( lln.Previous == null )\n         Console.WriteLine( &quot;   Previous node is null.&quot; );\n      else\n         Console.WriteLine( &quot;   Value of previous node: {0}&quot;, lln.Previous.Value );\n\n      Console.WriteLine( &quot;   Value of current node:  {0}&quot;, lln.Value );\n\n      if ( lln.Next == null )\n         Console.WriteLine( &quot;   Next node is null.&quot; );\n      else\n         Console.WriteLine( &quot;   Value of next node:     {0}&quot;, lln.Next.Value );\n\n      Console.WriteLine();\n   }\n\n}\n\n\n/*\n\nThis code produces the following output.\n\nAfter creating the node ....\n   Node is not linked.\n   Previous node is null.\n   Value of current node:  orange\n   Next node is null.\n\nAfter adding the node to the empty LinkedList ....\n   Node belongs to a linked list with 1 elements.\n   Previous node is null.\n   Value of current node:  orange\n   Next node is null.\n\nAfter adding red and yellow ....\n   Node belongs to a linked list with 3 elements.\n   Value of previous node: red\n   Value of current node:  orange\n   Value of next node:     yellow\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Collections.Generic.LinkedListNode#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections::Generic;\n\npublic ref class GenericCollection  {\n\npublic:\n   static void Main()  {\n\n      // Create a new LinkedListNode of type String and displays its properties.\n      LinkedListNode&lt;String^&gt;^ lln = gcnew LinkedListNode&lt;String^&gt;( &quot;orange&quot; );\n      Console::WriteLine( &quot;After creating the node ....&quot; );\n      DisplayProperties( lln );\n\n      // Create a new LinkedList.\n      LinkedList&lt;String^&gt;^ ll = gcnew LinkedList&lt;String^&gt;();\n\n      // Add the &quot;orange&quot; node and display its properties.\n      ll-&gt;AddLast( lln );\n      Console::WriteLine( &quot;After adding the node to the empty LinkedList ....&quot; );\n      DisplayProperties( lln );\n\n      // Add nodes before and after the &quot;orange&quot; node and display the &quot;orange&quot; node&#39;s properties.\n      ll-&gt;AddFirst( &quot;red&quot; );\n      ll-&gt;AddLast( &quot;yellow&quot; );\n      Console::WriteLine( &quot;After adding red and yellow ....&quot; );\n      DisplayProperties( lln );\n\n   }\n\n   static void DisplayProperties( LinkedListNode&lt;String^&gt;^ lln )  {\n      if ( lln-&gt;List == nullptr )\n         Console::WriteLine( &quot;   Node is not linked.&quot; );\n      else\n         Console::WriteLine( &quot;   Node belongs to a linked list with {0} elements.&quot;, lln-&gt;List-&gt;Count );\n\n      if ( lln-&gt;Previous == nullptr )\n         Console::WriteLine( &quot;   Previous node is null.&quot; );\n      else\n         Console::WriteLine( &quot;   Value of previous node: {0}&quot;, lln-&gt;Previous-&gt;Value );\n\n      Console::WriteLine( &quot;   Value of current node:  {0}&quot;, lln-&gt;Value );\n\n      if ( lln-&gt;Next == nullptr )\n         Console::WriteLine( &quot;   Next node is null.&quot; );\n      else\n         Console::WriteLine( &quot;   Value of next node:     {0}&quot;, lln-&gt;Next-&gt;Value );\n\n      Console::WriteLine();\n   }\n\n};\n\nint main()\n{\n    GenericCollection::Main();\n}\n\n/*\n\nThis code produces the following output.\n\nAfter creating the node ....\n   Node is not linked.\n   Previous node is null.\n   Value of current node:  orange\n   Next node is null.\n\nAfter adding the node to the empty LinkedList ....\n   Node belongs to a linked list with 1 elements.\n   Previous node is null.\n   Value of current node:  orange\n   Next node is null.\n\nAfter adding red and yellow ....\n   Node belongs to a linked list with 3 elements.\n   Value of previous node: red\n   Value of current node:  orange\n   Value of next node:     yellow\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Collections.Generic.LinkedListNode-1.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Collections.Generic.LinkedListNode-1.yml\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.LinkedListNode&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.LinkedListNode&lt;T&gt;..ctor\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.LinkedListNode&lt;T&gt;.List\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.LinkedListNode&lt;T&gt;.Next\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.LinkedListNode&lt;T&gt;.Previous\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.LinkedListNode&lt;T&gt;.Value\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"ccbcd8b4-c247-d3af-9cc0-a2e974341f43\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a node in a . This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Collections.Generic/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Collections.Generic.LinkedListNode`1\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Collections.Generic.LinkedListNode-1.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Collections.Generic.LinkedListNode-1.yml","open_to_public_contributors":true,"api_name":["System.Collections.Generic.LinkedListNode<T>","System.Collections.Generic.LinkedListNode<T>..ctor","System.Collections.Generic.LinkedListNode<T>.List","System.Collections.Generic.LinkedListNode<T>.Next","System.Collections.Generic.LinkedListNode<T>.Previous","System.Collections.Generic.LinkedListNode<T>.Value"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Collections.Generic.LinkedListNode`1","System::Collections::Generic::LinkedListNode`1","System.Collections.Generic.LinkedListNode`1.#ctor","System::Collections::Generic::LinkedListNode`1::#ctor","System.Collections.Generic.LinkedListNode`1.List","System::Collections::Generic::LinkedListNode`1::List","System.Collections.Generic.LinkedListNode`1.Next","System::Collections::Generic::LinkedListNode`1::Next","System.Collections.Generic.LinkedListNode`1.Previous","System::Collections::Generic::LinkedListNode`1::Previous","System.Collections.Generic.LinkedListNode`1.Value","System::Collections::Generic::LinkedListNode`1::Value"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"ccbcd8b4-c247-d3af-9cc0-a2e974341f43","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Collections.Generic/LinkedListNode`1.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"LinkedListNode<T> class | Microsoft Docs","_op_ogTitle":"LinkedListNode<T> class","description":"Represents a node in a . This class cannot be inherited.\n","toc_asset_id":"_splitted/System.Collections.Generic/toc.json","toc_rel":"_splitted/System.Collections.Generic/toc.json","source_url":"","ms.assetid":"System.Collections.Generic.LinkedListNode`1","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.collections.generic.linkedlistnode-1","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.collections.generic.linkedlistnode-1","fileRelativePath":"System.Collections.Generic.LinkedListNode-1.html"},"themesRelativePathToOutputRoot":"_themes/"}