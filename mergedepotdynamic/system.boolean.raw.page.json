{"content":"\r\n<div style=\"display:none\">\r\n\t\r\n</div>\r\n\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">Boolean</span>\r\n      Struct\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents a Boolean (<code>true</code> or <code>false</code>) value.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic struct Boolean : IComparable, IComparable&lt;bool&gt;, IConvertible, IEquatable&lt;bool&gt;</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div>\r\n  \t\t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">System.ValueType</a></span></div>\r\n  \t\t\t<span class=\"lang-csharp\">Boolean</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>A Boolean instance can have either of two values: <code>true</code>, or <code>false</code>.  </p>\n<p> The Boolean structure provides methods that support the following tasks:  </p>\n<ul>\n<li><p>Converting Boolean values to strings: <a class=\"xref\" href=\"system.boolean#System_Boolean_ToString_\" data-linktype=\"relative-path\">ToString</a>  </p>\n</li>\n<li><p>Parsing strings to convert them to Boolean values: <a class=\"xref\" href=\"system.boolean#System_Boolean_Parse_\" data-linktype=\"relative-path\">Parse</a> and <a class=\"xref\" href=\"system.boolean#System_Boolean_TryParse_\" data-linktype=\"relative-path\">TryParse</a>  </p>\n</li>\n<li><p>Comparing values: <a class=\"xref\" href=\"system.boolean#System_Boolean_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> and <a class=\"xref\" href=\"system.boolean#System_Boolean_Equals_\" data-linktype=\"relative-path\">Equals</a>  </p>\n<p>The following sections explain these tasks and other usage details:  </p>\n<p><a href=\"#Formatting\" data-linktype=\"self-bookmark\">Formatting Boolean values</a><br><a href=\"#Converting\" data-linktype=\"self-bookmark\">Converting to and from Boolean values</a><br><a href=\"#Parsing\" data-linktype=\"self-bookmark\">Parsing Boolean values</a><br><a href=\"#Comparing\" data-linktype=\"self-bookmark\">Comparing Boolean values</a><br><a href=\"#Binary\" data-linktype=\"self-bookmark\">Working with Booleans as binary values</a><br><a href=\"#Operations\" data-linktype=\"self-bookmark\">Performing operations with Boolean values</a><br><a href=\"#Interop\" data-linktype=\"self-bookmark\">Booleans and Interop</a>  </p>\n</li>\n</ul>\n<p><a name=\"Formatting\"></a>   </p>\n<h2 id=\"formatting-boolean-values\">Formatting Boolean values</h2>\n<p> The string representation of a Boolean is either &quot;True&quot; for a <code>true</code> value or &quot;False&quot; for a <code>false</code> value. The string representation of a Boolean value is defined by the read-only <a class=\"xref\" href=\"system.boolean#System_Boolean_TrueString\" data-linktype=\"relative-path\">TrueString</a> and <a class=\"xref\" href=\"system.boolean#System_Boolean_FalseString\" data-linktype=\"relative-path\">FalseString</a> fields.  </p>\n<p> You use the <a class=\"xref\" href=\"system.boolean#System_Boolean_ToString_\" data-linktype=\"relative-path\">ToString</a> method to convert Boolean values to strings. The Boolean structure includes two <a class=\"xref\" href=\"system.boolean#System_Boolean_ToString_\" data-linktype=\"relative-path\">ToString</a> overloads: the parameterless <a class=\"xref\" href=\"system.boolean#System_Boolean_ToString\" data-linktype=\"relative-path\">ToString()</a> method and the <a class=\"xref\" href=\"system.boolean#System_Boolean_ToString_System_IFormatProvider_\" data-linktype=\"relative-path\">ToString(IFormatProvider)</a> method, which includes a parameter that controls formatting. However, because this parameter is ignored, the two overloads produce identical strings. The <a class=\"xref\" href=\"system.boolean#System_Boolean_ToString_System_IFormatProvider_\" data-linktype=\"relative-path\">ToString(IFormatProvider)</a> method does not support culture-sensitive formatting.  </p>\n<p> The following example illustrates formatting with the <a class=\"xref\" href=\"system.boolean#System_Boolean_ToString_\" data-linktype=\"relative-path\">ToString</a> method. Note that the example uses the <a href=\"../Topic/Composite%20Formatting.md\" data-linktype=\"relative-path\">composite formatting</a> feature, so the <a class=\"xref\" href=\"system.boolean#System_Boolean_ToString_\" data-linktype=\"relative-path\">ToString</a> method is called implicitly.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Boolean.Structure#3\">Module Example\n   Public Sub Main()\n      Dim raining As Boolean = False\n      Dim busLate As Boolean = True\n\n      Console.WriteLine(&quot;It is raining: {0}&quot;, raining)\n      Console.WriteLine(&quot;The bus is late: {0}&quot;, busLate)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       It is raining: False\n&#39;       The bus is late: True\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Boolean.Structure#3\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      bool raining = false;\n      bool busLate = true;\n\n      Console.WriteLine(&quot;It is raining: {0}&quot;, raining);\n      Console.WriteLine(&quot;The bus is late: {0}&quot;, busLate);\n   }\n}\n// The example displays the following output:\n//       It is raining: False\n//       The bus is late: True\n</code></pre><p> Because the Boolean structure can have only two values, it is easy to add custom formatting. For simple custom formatting in which other string literals are substituted for &quot;True&quot; and &quot;False&quot;, you can use any conditional evaluation feature supported by your language, such as the <a href=\"../Topic/?:%20Operator%20(C%23%20Reference).md\" data-linktype=\"relative-path\">conditional operator</a> in C# or the <a href=\"../Topic/If%20Operator%20(Visual%20Basic).md\" data-linktype=\"relative-path\">If operator</a> in Visual Basic. The following example uses this technique to format Boolean values as &quot;Yes&quot; and &quot;No&quot; rather than &quot;True&quot; and &quot;False&quot;.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Boolean.Structure#4\">Module Example\n   Public Sub Main()\n      Dim raining As Boolean = False\n      Dim busLate As Boolean = True\n\n      Console.WriteLine(&quot;It is raining: {0}&quot;, \n                        If(raining, &quot;Yes&quot;, &quot;No&quot;))\n      Console.WriteLine(&quot;The bus is late: {0}&quot;, \n                        If(busLate, &quot;Yes&quot;, &quot;No&quot;))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       It is raining: No\n&#39;       The bus is late: Yes\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Boolean.Structure#4\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      bool raining = false;\n      bool busLate = true;\n\n      Console.WriteLine(&quot;It is raining: {0}&quot;, \n                        raining ? &quot;Yes&quot; : &quot;No&quot;);\n      Console.WriteLine(&quot;The bus is late: {0}&quot;, \n                        busLate ? &quot;Yes&quot; : &quot;No&quot; );\n   }\n}\n// The example displays the following output:\n//       It is raining: No\n//       The bus is late: Yes\n</code></pre><p> For more complex custom formatting operations, including culture-sensitive formatting, you can call the [String.Format(IFormatProvider, String, Object&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName&gt; method and provide an <a class=\"xref\" href=\"system.icustomformatter\" data-linktype=\"relative-path\">ICustomFormatter</a> implementation. The following example implements the <a class=\"xref\" href=\"system.icustomformatter\" data-linktype=\"relative-path\">ICustomFormatter</a> and <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> interfaces to provide culture-sensitive Boolean strings for the English (United States), French (France), and Russian (Russia) cultures.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Boolean.Structure#5\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String[] cultureNames = { &quot;&quot;, &quot;en-US&quot;, &quot;fr-FR&quot;, &quot;ru-RU&quot; };\n      foreach (var cultureName in cultureNames) {\n         bool value = true;\n         CultureInfo culture = CultureInfo.CreateSpecificCulture(cultureName);\n         BooleanFormatter formatter = new BooleanFormatter(culture);\n         \n         String result = String.Format(formatter, &quot;Value for &#39;{0}&#39;: {1}&quot;, culture.Name, value);\n         Console.WriteLine(result);\n      }\n   }\n}\n\npublic class BooleanFormatter : ICustomFormatter, IFormatProvider\n{   \n   private CultureInfo culture;\n   \n   public BooleanFormatter() : this(CultureInfo.CurrentCulture)\n   { }\n   \n   public BooleanFormatter(CultureInfo culture)\n   {\n      this.culture = culture; \n   }\n   \n   public Object GetFormat(Type formatType)\n   { \n      if (formatType == typeof(ICustomFormatter))\n         return this;\n      else\n         return null;\n   }\n   \n   public String Format(String fmt, Object arg, IFormatProvider formatProvider)\n   { \n      // Exit if another format provider is used.\n      if (! formatProvider.Equals(this)) return null;\n      \n      // Exit if the type to be formatted is not a Boolean\n      if (! (arg is Boolean)) return null;\n      \n      bool value = (bool) arg;\n      switch (culture.Name) {\n         case &quot;en-US&quot;:\n            return value.ToString();\n         case &quot;fr-FR&quot;:\n            if (value) \n               return &quot;vrai&quot;;\n            else\n               return &quot;faux&quot;;\n         case &quot;ru-RU&quot;:\n            if (value)\n               return &quot;верно&quot;;\n            else\n               return &quot;неверно&quot;;\n         default:\n            return value.ToString();  \n      }\n   }\n}\n// The example displays the following output:\n//       Value for &#39;&#39;: True\n//       Value for &#39;en-US&#39;: True\n//       Value for &#39;fr-FR&#39;: vrai\n//       Value for &#39;ru-RU&#39;: верно\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Boolean.Structure#5\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim cultureNames() As String = { &quot;&quot;, &quot;en-US&quot;, &quot;fr-FR&quot;, &quot;ru-RU&quot; }\n      For Each cultureName In cultureNames\n         Dim value As Boolean = True\n         Dim culture As CultureInfo = CultureInfo.CreateSpecificCulture(cultureName)\n         Dim formatter As New BooleanFormatter(culture)\n         \n         Dim result As String = String.Format(formatter, &quot;Value for &#39;{0}&#39;: {1}&quot;, culture.Name, value)\n         Console.WriteLine(result)\n      Next\n   End Sub\nEnd Module\n\nPublic Class BooleanFormatter \n   Implements ICustomFormatter, IFormatProvider\n   \n   Private culture As CultureInfo\n   \n   Public Sub New()\n      Me.New(CultureInfo.CurrentCulture)\n   End Sub\n   \n   Public Sub New(culture As CultureInfo)\n      Me.culture = culture \n   End Sub\n   \n   Public Function GetFormat(formatType As Type) As Object _\n                   Implements IFormatProvider.GetFormat\n      If formatType Is GetType(ICustomFormatter) Then\n         Return Me\n      Else\n         Return Nothing\n      End If                \n   End Function\n   \n   Public Function Format(fmt As String, arg As Object, \n                          formatProvider As IFormatProvider) As String _\n                   Implements ICustomFormatter.Format\n      &#39; Exit if another format provider is used.\n      If Not formatProvider.Equals(Me) Then Return Nothing\n      \n      &#39; Exit if the type to be formatted is not a Boolean\n      If Not TypeOf arg Is Boolean Then Return Nothing\n      \n      Dim value As Boolean = CBool(arg)\n      Select culture.Name\n         Case &quot;en-US&quot;\n            Return value.ToString()\n         Case &quot;fr-FR&quot;\n            If value Then\n               Return &quot;vrai&quot;\n            Else\n               Return &quot;faux&quot;\n            End If      \n         Case &quot;ru-RU&quot;\n            If value Then\n               Return &quot;верно&quot;\n            Else\n               Return &quot;неверно&quot;\n            End If   \n         Case Else\n            Return value.ToString()  \n      End Select\n   End Function\nEnd Class\n&#39; The example displays the following output:\n&#39;          Value for &#39;&#39;: True\n&#39;          Value for &#39;en-US&#39;: True\n&#39;          Value for &#39;fr-FR&#39;: vrai\n&#39;          Value for &#39;ru-RU&#39;: верно\n</code></pre><p> Optionally, you can use <a href=\"../Topic/Resources%20in%20Desktop%20Apps.md\" data-linktype=\"relative-path\">resource files</a> to define culture-specific Boolean strings.  </p>\n<p><a name=\"Converting\"></a>   </p>\n<h2 id=\"converting-to-and-from-boolean-values\">Converting to and from Boolean values</h2>\n<p> The Boolean structure implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.  As a result, you can use the <a class=\"xref\" href=\"system.convert\" data-linktype=\"relative-path\">Convert</a> class to perform conversions between a Boolean value and any other primitive type in the .NET Framework, or you can call the Boolean structure&#39;s explicit implementations. However, conversions between a Boolean and the following types are not supported, so the corresponding conversion methods throw an <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a> exception:  </p>\n<ul>\n<li><p>Conversion between Boolean and <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> (the <a class=\"xref\" href=\"system.convert#System_Convert_ToBoolean_System_Char_\" data-linktype=\"relative-path\">System.Convert.ToBoolean(Char)</a> and <a class=\"xref\" href=\"system.convert#System_Convert_ToChar_System_Boolean_\" data-linktype=\"relative-path\">System.Convert.ToChar(Boolean)</a> methods)  </p>\n</li>\n<li><p>Conversion between Boolean and <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> (the <a class=\"xref\" href=\"system.convert#System_Convert_ToBoolean_System_DateTime_\" data-linktype=\"relative-path\">System.Convert.ToBoolean(DateTime)</a> and <a class=\"xref\" href=\"system.convert#System_Convert_ToDateTime_System_Boolean_\" data-linktype=\"relative-path\">System.Convert.ToDateTime(Boolean)</a> methods)  </p>\n<p>All conversions from integral or floating-point numbers to Boolean values convert non-zero values to <code>true</code> and zero values to <code>false</code>.  The following example illustrates this by calling selected overloads of the <a class=\"xref\" href=\"system.convert#System_Convert_ToBoolean_\" data-linktype=\"relative-path\">ToBoolean</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Boolean.Structure#6\">Module Example\n   Public Sub Main()\n      Dim byteValue As Byte = 12\n      Console.WriteLine(Convert.ToBoolean(byteValue))\n      Dim byteValue2 As Byte = 0\n      Console.WriteLine(Convert.ToBoolean(byteValue2))\n      Dim intValue As Integer = -16345\n      Console.WriteLine(Convert.ToBoolean(intValue))\n      Dim longValue As Long = 945\n      Console.WriteLine(Convert.ToBoolean(longValue))\n      Dim sbyteValue As SByte = -12\n      Console.WriteLine(Convert.ToBoolean(sbyteValue))\n      Dim dblValue As Double = 0\n      Console.WriteLine(Convert.ToBoolean(dblValue))\n      Dim sngValue As Single = .0001\n      Console.WriteLine(Convert.ToBoolean(sngValue))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       True\n&#39;       False\n&#39;       True\n&#39;       True\n&#39;       True\n&#39;       False\n&#39;       True\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Boolean.Structure#6\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Byte byteValue = 12;\n      Console.WriteLine(Convert.ToBoolean(byteValue));\n      Byte byteValue2 = 0;\n      Console.WriteLine(Convert.ToBoolean(byteValue2));\n      int intValue = -16345;\n      Console.WriteLine(Convert.ToBoolean(intValue));\n      long longValue = 945;\n      Console.WriteLine(Convert.ToBoolean(longValue));\n      SByte sbyteValue = -12;\n      Console.WriteLine(Convert.ToBoolean(sbyteValue));\n      double dblValue = 0;\n      Console.WriteLine(Convert.ToBoolean(dblValue));\n      float sngValue = .0001f;\n      Console.WriteLine(Convert.ToBoolean(sngValue));\n   }\n}\n// The example displays the following output:\n//       True\n//       False\n//       True\n//       True\n//       True\n//       False\n//       True\n</code></pre><p>When converting from floating-point values to Boolean values, the conversion methods perform an exact comparison with zero. If the floating-point value has lost precision, the result can be unexpected. This is illustrated in the following example, in which a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> variable whose value should be zero is converted to a Boolean value. As the example shows, the result is <code>true</code> because repeated additions of 0.2 have resulted in a loss of precision.  </p>\n<p>When converting from Boolean to numeric values, the conversion methods of the <a class=\"xref\" href=\"system.convert\" data-linktype=\"relative-path\">Convert</a> class convert <code>true</code> to 1 and <code>false</code> to 0. However, Visual Basic conversion functions convert <code>true</code> to either 255 (for conversions to <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> values) or -1 (for all other numeric conversions). The following example converts <code>true</code> to numeric values by using a <a class=\"xref\" href=\"system.convert\" data-linktype=\"relative-path\">Convert</a> method, and, in the case of the Visual Basic example, by using the Visual Basic language&#39;s own conversion operator.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Boolean.Structure#8\">Module Example\n   Public Sub Main()\n      Dim flag As Boolean = true\n      \n      Dim byteValue As Byte   \n      byteValue = Convert.ToByte(flag)\n      Console.WriteLine(&quot;{0} -&gt; {1} ({2})&quot;, flag, byteValue, \n                                            byteValue.GetType().Name)         \n      byteValue = CByte(flag)\n      Console.WriteLine(&quot;{0} -&gt; {1} ({2})&quot;, flag, byteValue, \n                                            byteValue.GetType().Name)         \n      \n      Dim sbyteValue As SByte\n      sbyteValue = Convert.ToSByte(flag)\n      Console.WriteLine(&quot;{0} -&gt; {1} ({2})&quot;, flag, sbyteValue, \n                                            sbyteValue.GetType().Name)         \n      sbyteValue = CSByte(flag)\n      Console.WriteLine(&quot;{0} -&gt; {1} ({2})&quot;, flag, sbyteValue, \n                                            sbyteValue.GetType().Name)         \n\n      Dim dblValue As Double\n      dblValue = Convert.ToDouble(flag)\n      Console.WriteLine(&quot;{0} -&gt; {1} ({2})&quot;, flag, dblValue, \n                                            dblValue.GetType().Name)         \n      dblValue = CDbl(flag)\n      Console.WriteLine(&quot;{0} -&gt; {1} ({2})&quot;, flag, dblValue, \n                                            dblValue.GetType().Name)         \n\n      Dim intValue As Integer\n      intValue = Convert.ToInt32(flag)\n      Console.WriteLine(&quot;{0} -&gt; {1} ({2})&quot;, flag, intValue, \n                                            intValue.GetType().Name)         \n      intValue = CInt(flag)\n      Console.WriteLine(&quot;{0} -&gt; {1} ({2})&quot;, flag, intValue, \n                                            intValue.GetType().Name)         \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       True -&gt; 1 (Byte)\n&#39;       True -&gt; 255 (Byte)\n&#39;       True -&gt; 1 (SByte)\n&#39;       True -&gt; -1 (SByte)\n&#39;       True -&gt; 1 (Double)\n&#39;       True -&gt; -1 (Double)\n&#39;       True -&gt; 1 (Int32)\n&#39;       True -&gt; -1 (Int32)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Boolean.Structure#8\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      bool flag = true;\n      \n      byte byteValue;   \n      byteValue = Convert.ToByte(flag);\n      Console.WriteLine(&quot;{0} -&gt; {1}&quot;, flag, byteValue);         \n      \n      sbyte sbyteValue;\n      sbyteValue = Convert.ToSByte(flag);\n      Console.WriteLine(&quot;{0} -&gt; {1}&quot;, flag, sbyteValue);         \n\n      double dblValue;\n      dblValue = Convert.ToDouble(flag);\n      Console.WriteLine(&quot;{0} -&gt; {1}&quot;, flag, dblValue);         \n\n      int intValue;\n      intValue = Convert.ToInt32(flag);\n      Console.WriteLine(&quot;{0} -&gt; {1}&quot;, flag, intValue);         \n   }\n}\n// The example displays the following output:\n//       True -&gt; 1\n//       True -&gt; 1\n//       True -&gt; 1\n//       True -&gt; 1\n</code></pre><p>For conversions from Boolean to string values, see the <a href=\"#Formatting\" data-linktype=\"self-bookmark\">Formatting Boolean Values</a> section. For conversions from strings to Boolean values, see the <a href=\"#Parsing\" data-linktype=\"self-bookmark\">Parsing Boolean Values</a> section.  </p>\n</li>\n</ul>\n<p><a name=\"Parsing\"></a>   </p>\n<h2 id=\"parsing-boolean-values\">Parsing Boolean values</h2>\n<p> The Boolean structure includes two static parsing methods, <a class=\"xref\" href=\"system.boolean#System_Boolean_Parse_\" data-linktype=\"relative-path\">Parse</a> and <a class=\"xref\" href=\"system.boolean#System_Boolean_TryParse_\" data-linktype=\"relative-path\">TryParse</a>, that convert a string to a Boolean value. The string representation of a Boolean value is defined by the case-insensitive equivalents of the values of the <a class=\"xref\" href=\"system.boolean#System_Boolean_TrueString\" data-linktype=\"relative-path\">TrueString</a> and <a class=\"xref\" href=\"system.boolean#System_Boolean_FalseString\" data-linktype=\"relative-path\">FalseString</a> fields, which are &quot;True&quot; and &quot;False&quot;, respectively. In other words, the only strings that parse successfully are &quot;True&quot;, &quot;False&quot;, &quot;true&quot;, &quot;false&quot;, or some mixed-case equivalent. You cannot successfully parse numeric strings such as &quot;0&quot; or &quot;1&quot;. Leading or trailing white-space characters are not considered when performing the string comparison.  </p>\n<p> The following example uses the <a class=\"xref\" href=\"system.boolean#System_Boolean_Parse_\" data-linktype=\"relative-path\">Parse</a> and <a class=\"xref\" href=\"system.boolean#System_Boolean_TryParse_\" data-linktype=\"relative-path\">TryParse</a> methods to parse a number of strings. Note that only the case-insensitive equivalents of &quot;True&quot; and &quot;False&quot; can be successfully parsed.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Boolean.Structure#2\">Module Example\n   Public Sub Main()\n      Dim values() As String = { Nothing, String.Empty, &quot;True&quot;, &quot;False&quot;, \n                                 &quot;true&quot;, &quot;false&quot;, &quot;    true    &quot;, \n                                 &quot;TrUe&quot;, &quot;fAlSe&quot;, &quot;fa lse&quot;, &quot;0&quot;, \n                                 &quot;1&quot;, &quot;-1&quot;, &quot;string&quot; }\n      &#39; Parse strings using the Boolean.Parse method.                    \n      For Each value In values\n         Try\n            Dim flag As Boolean = Boolean.Parse(value)\n            Console.WriteLine(&quot;&#39;{0}&#39; --&gt; {1}&quot;, value, flag)\n         Catch e As ArgumentException\n            Console.WriteLine(&quot;Cannot parse a null string.&quot;)\n         Catch e As FormatException\n            Console.WriteLine(&quot;Cannot parse &#39;{0}&#39;.&quot;, value)\n         End Try         \n      Next  \n      Console.WriteLine()\n      &#39; Parse strings using the Boolean.TryParse method.                    \n      For Each value In values\n         Dim flag As Boolean = False\n         If Boolean.TryParse(value, flag)\n            Console.WriteLine(&quot;&#39;{0}&#39; --&gt; {1}&quot;, value, flag)\n         Else\n            Console.WriteLine(&quot;Cannot parse &#39;{0}&#39;.&quot;, value)\n         End If         \n      Next  \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Cannot parse a null string.\n&#39;       Cannot parse &#39;&#39;.\n&#39;       &#39;True&#39; --&gt; True\n&#39;       &#39;False&#39; --&gt; False\n&#39;       &#39;true&#39; --&gt; True\n&#39;       &#39;false&#39; --&gt; False\n&#39;       &#39;    true    &#39; --&gt; True\n&#39;       &#39;TrUe&#39; --&gt; True\n&#39;       &#39;fAlSe&#39; --&gt; False\n&#39;       Cannot parse &#39;fa lse&#39;.\n&#39;       Cannot parse &#39;0&#39;.\n&#39;       Cannot parse &#39;1&#39;.\n&#39;       Cannot parse &#39;-1&#39;.\n&#39;       Cannot parse &#39;string&#39;.\n&#39;       \n&#39;       Unable to parse &#39;&#39;\n&#39;       Unable to parse &#39;&#39;\n&#39;       &#39;True&#39; --&gt; True\n&#39;       &#39;False&#39; --&gt; False\n&#39;       &#39;true&#39; --&gt; True\n&#39;       &#39;false&#39; --&gt; False\n&#39;       &#39;    true    &#39; --&gt; True\n&#39;       &#39;TrUe&#39; --&gt; True\n&#39;       &#39;fAlSe&#39; --&gt; False\n&#39;       Cannot parse &#39;fa lse&#39;.\n&#39;       Unable to parse &#39;0&#39;\n&#39;       Unable to parse &#39;1&#39;\n&#39;       Unable to parse &#39;-1&#39;\n&#39;       Unable to parse &#39;string&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Boolean.Structure#2\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string[] values = { null, String.Empty, &quot;True&quot;, &quot;False&quot;, \n                          &quot;true&quot;, &quot;false&quot;, &quot;    true    &quot;, \n                           &quot;TrUe&quot;, &quot;fAlSe&quot;, &quot;fa lse&quot;, &quot;0&quot;,  \n                          &quot;1&quot;, &quot;-1&quot;, &quot;string&quot; };\n      // Parse strings using the Boolean.Parse method.                    \n      foreach (var value in values) {\n         try {\n            bool flag = Boolean.Parse(value);\n            Console.WriteLine(&quot;&#39;{0}&#39; --&gt; {1}&quot;, value, flag);\n         }\n         catch (ArgumentException) {\n            Console.WriteLine(&quot;Cannot parse a null string.&quot;);\n         }   \n         catch (FormatException) {\n            Console.WriteLine(&quot;Cannot parse &#39;{0}&#39;.&quot;, value);\n         }         \n      }\n      Console.WriteLine();\n      // Parse strings using the Boolean.TryParse method.                    \n      foreach (var value in values) {\n         bool flag = false;\n         if (Boolean.TryParse(value, out flag))\n            Console.WriteLine(&quot;&#39;{0}&#39; --&gt; {1}&quot;, value, flag);\n         else\n            Console.WriteLine(&quot;Unable to parse &#39;{0}&#39;&quot;, value);\n      }                                     \n   }\n}\n// The example displays the following output:\n//       Cannot parse a null string.\n//       Cannot parse &#39;&#39;.\n//       &#39;True&#39; --&gt; True\n//       &#39;False&#39; --&gt; False\n//       &#39;true&#39; --&gt; True\n//       &#39;false&#39; --&gt; False\n//       &#39;    true    &#39; --&gt; True\n//       &#39;TrUe&#39; --&gt; True\n//       &#39;fAlSe&#39; --&gt; False\n//       Cannot parse &#39;fa lse&#39;.\n//       Cannot parse &#39;0&#39;.\n//       Cannot parse &#39;1&#39;.\n//       Cannot parse &#39;-1&#39;.\n//       Cannot parse &#39;string&#39;.\n//       \n//       Unable to parse &#39;&#39;\n//       Unable to parse &#39;&#39;\n//       &#39;True&#39; --&gt; True\n//       &#39;False&#39; --&gt; False\n//       &#39;true&#39; --&gt; True\n//       &#39;false&#39; --&gt; False\n//       &#39;    true    &#39; --&gt; True\n//       &#39;TrUe&#39; --&gt; True\n//       &#39;fAlSe&#39; --&gt; False\n//       Cannot parse &#39;fa lse&#39;.\n//       Unable to parse &#39;0&#39;\n//       Unable to parse &#39;1&#39;\n//       Unable to parse &#39;-1&#39;\n//       Unable to parse &#39;string&#39;\n</code></pre><p> If you are programming in Visual Basic, you can use the <code>CBool</code> function to convert the string representation of a number to a Boolean value. &quot;0&quot; is converted to <code>false</code>, and the string representation of any non-zero value is converted to <code>true</code>. If you are not programming in Visual Basic, you must convert your numeric string to a number before converting it to a Boolean. The following example illustrates this by converting an array of integers to Boolean values.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Boolean.Structure#9\">Module Example\n   Public Sub Main()\n      Dim values() As String = { &quot;09&quot;, &quot;12.6&quot;, &quot;0&quot;, &quot;-13 &quot; }\n      For Each value In values\n         Dim success, result As Boolean\n         Dim number As Integer \n         success = Int32.TryParse(value, number)\n         If success Then\n            &#39; The method throws no exceptions.\n            result = Convert.ToBoolean(number)\n            Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}&quot;, value, result)\n         Else\n            Console.WriteLine(&quot;Unable to convert &#39;{0}&#39;&quot;, value)\n         End If         \n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Converted &#39;09&#39; to True\n&#39;       Unable to convert &#39;12.6&#39;\n&#39;       Converted &#39;0&#39; to False\n&#39;       Converted &#39;-13 &#39; to True\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Boolean.Structure#9\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String[] values = { &quot;09&quot;, &quot;12.6&quot;, &quot;0&quot;, &quot;-13 &quot; };\n      foreach (var value in values) {\n         bool success, result;\n         int number; \n         success = Int32.TryParse(value, out number);\n         if (success) {\n            // The method throws no exceptions.\n            result = Convert.ToBoolean(number);\n            Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}&quot;, value, result);\n         }\n         else {\n            Console.WriteLine(&quot;Unable to convert &#39;{0}&#39;&quot;, value); \n         }         \n      }\n   }\n}\n// The example displays the following output:\n//       Converted &#39;09&#39; to True\n//       Unable to convert &#39;12.6&#39;\n//       Converted &#39;0&#39; to False\n//       Converted &#39;-13 &#39; to True\n</code></pre><p><a name=\"Comparing\"></a>   </p>\n<h2 id=\"comparing-boolean-values\">Comparing Boolean values</h2>\n<p> Because Boolean values are either <code>true</code> or <code>false</code>, there is little reason to explicitly call the <a class=\"xref\" href=\"system.boolean#System_Boolean_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> method, which indicates whether an instance is greater than, less than, or equal to a specified value. Typically, to compare two Boolean variables, you call the <a class=\"xref\" href=\"system.boolean#System_Boolean_Equals_\" data-linktype=\"relative-path\">Equals</a> method or use your language&#39;s equality operator.  </p>\n<p> However, when you want to compare a Boolean variable with the literal Boolean value <code>true</code> or <code>false</code>, it is not necessary to do an explicit comparison, because the result of evaluating a Boolean value is that Boolean value. For example, the expressions  </p>\n<pre><code class=\"lang-vb\" name=\"System.Boolean.Structure#12\">      If booleanValue Then\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Boolean.Structure#12\">      if (booleanValue) {\n</code></pre><p> and  </p>\n<pre><code class=\"lang-vb\" name=\"System.Boolean.Structure#13\">Module Example\n   Public Sub Main()\n      Dim hasServiceCharges() As Boolean = { True, False }\n      Dim subtotal As Decimal = 120.62d\n      Dim shippingCharge As Decimal = 2.50d\n      Dim serviceCharge As Decimal = 5.00d\n      \n      For Each hasServiceCharge In hasServiceCharges\n         Dim total As Decimal = subtotal + shippingCharge + \n                                If(hasServiceCharge, serviceCharge, 0)\n         Console.WriteLine(&quot;hasServiceCharge = {1}: The total is {0:C2}.&quot;, \n                           total, hasServiceCharge)                       \n      Next\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;       hasServiceCharge = True: The total is $128.12.\n&#39;       hasServiceCharge = False: The total is $123.12.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Boolean.Structure#13\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      bool[] hasServiceCharges = { true, false };\n      Decimal subtotal = 120.62m;\n      Decimal shippingCharge = 2.50m;\n      Decimal serviceCharge = 5.00m;\n      \n      foreach (var hasServiceCharge in hasServiceCharges) {\n         Decimal total = subtotal + shippingCharge + \n                                (hasServiceCharge ? serviceCharge : 0);\n         Console.WriteLine(&quot;hasServiceCharge = {1}: The total is {0:C2}.&quot;, \n                           total, hasServiceCharge);                       \n      }\n   }\n}\n// The example displays output like the following:\n//       hasServiceCharge = True: The total is $128.12.\n//       hasServiceCharge = False: The total is $123.12.\n</code></pre><p> are equivalent, but the second is more compact. However, both techniques offer comparable performance.  </p>\n<p><a name=\"Binary\"></a>   </p>\n<h2 id=\"working-with-booleans-as-binary-values\">Working with Booleans as binary values</h2>\n<p> A Boolean value occupies one byte of memory, as the following C# example shows. The example must be compiled with the <code>/unsafe</code> switch.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Boolean.Structure#14\">using System;\n\npublic struct BoolStruct\n{\n   public bool flag1;\n   public bool flag2;\n   public bool flag3;\n   public bool flag4;\n   public bool flag5;\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      unsafe {\n         BoolStruct b = new BoolStruct();\n         bool* addr = (bool*) &amp;b;\n         Console.WriteLine(&quot;Size of BoolStruct: {0}&quot;, sizeof(BoolStruct));\n         Console.WriteLine(&quot;Field offsets:&quot;);\n         Console.WriteLine(&quot;   flag1: {0}&quot;, (bool*) &amp;b.flag1 - addr);\n         Console.WriteLine(&quot;   flag1: {0}&quot;, (bool*) &amp;b.flag2 - addr);\n         Console.WriteLine(&quot;   flag1: {0}&quot;, (bool*) &amp;b.flag3 - addr);\n         Console.WriteLine(&quot;   flag1: {0}&quot;, (bool*) &amp;b.flag4 - addr);\n         Console.WriteLine(&quot;   flag1: {0}&quot;, (bool*) &amp;b.flag5 - addr);\n      }\n   }\n}\n// The example displays the following output:\n//       Size of BoolStruct: 5\n//       Field offsets:\n//          flag1: 0\n//          flag1: 1\n//          flag1: 2\n//          flag1: 3\n//          flag1: 4\n</code></pre><p> The byte&#39;s low-order bit is used to represent its value. A value of 1 represents <code>true</code>; a value of 0 represents <code>false</code>.  </p>\n<div class=\"WARNING\"><h5>Warning</h5><p> You can use the <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">System.Collections.Specialized.BitVector32</a> structure to work with sets of Boolean values.  </p>\n</div>\n<p> You can convert a Boolean value to its binary representation by calling the <a class=\"xref\" href=\"system.bitconverter#System_BitConverter_GetBytes_System_Boolean_\" data-linktype=\"relative-path\">System.BitConverter.GetBytes(Boolean)</a> method. The method returns a byte array with a single element. To restore a Boolean value from its binary representation, you can call the [BitConverter.ToBoolean(Byte&lt;xref:System.BitConverter.ToBoolean%28System.Byte%5B%5D%2CSystem.Int32%29?displayProperty=fullName&gt; method.  </p>\n<p> The following example calls the <a class=\"xref\" href=\"system.bitconverter#System_BitConverter_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method to convert a Boolean value to its binary representation and displays the individual bits of the value, and then calls the <a class=\"xref\" href=\"system.bitconverter#System_BitConverter_ToBoolean_\" data-linktype=\"relative-path\">ToBoolean</a> method to restore the value from its binary representation.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Boolean.Structure#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      bool[] flags = { true, false };\n      foreach (var flag in flags) {\n         // Get binary representation of flag.\n         Byte value = BitConverter.GetBytes(flag)[0];\n         Console.WriteLine(&quot;Original value: {0}&quot;, flag);\n         Console.WriteLine(&quot;Binary value:   {0} ({1})&quot;, value, \n                           GetBinaryString(value));\n         // Restore the flag from its binary representation.\n         bool newFlag = BitConverter.ToBoolean( new Byte[] { value }, 0);\n         Console.WriteLine(&quot;Restored value: {0}\\n&quot;, flag);\n      }\n   }\n   \n   private static string GetBinaryString(Byte value)\n   {\n      String retVal = Convert.ToString(value, 2);\n      return new String(&#39;0&#39;, 8 - retVal.Length) + retVal;\n   }\n}\n// The example displays the following output:\n//       Original value: True\n//       Binary value:   1 (00000001)\n//       Restored value: True\n//       \n//       Original value: False\n//       Binary value:   0 (00000000)\n//       Restored value: False\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Boolean.Structure#1\">Module Example\n   Public Sub Main()\n      Dim flags() As Boolean = { True, False }\n      For Each flag In flags\n         &#39; Get binary representation of flag.\n         Dim value As Byte = BitConverter.GetBytes(flag)(0)\n         Console.WriteLine(&quot;Original value: {0}&quot;, flag)\n         Console.WriteLine(&quot;Binary value:   {0} ({1})&quot;, value, \n                           GetBinaryString(value))\n         &#39; Restore the flag from its binary representation.\n         Dim newFlag As Boolean = BitConverter.ToBoolean( { value }, 0)\n         Console.WriteLine(&quot;Restored value: {0}&quot;, flag)\n         Console.WriteLine()\n      Next\n   End Sub\n   \n   Private Function GetBinaryString(value As Byte) As String\n      Dim retVal As String = Convert.ToString(value, 2)\n      Return New String(&quot;0&quot;c, 8 - retVal.Length) + retVal\n   End Function\nEnd Module\n&#39; The example displays the following output:\n&#39;       Original value: True\n&#39;       Binary value:   1 (00000001)\n&#39;       Restored value: True\n&#39;       \n&#39;       Original value: False\n&#39;       Binary value:   0 (00000000)\n&#39;       Restored value: False\n</code></pre><p><a name=\"Operations\"></a>   </p>\n<h2 id=\"performing-operations-with-boolean-values\">Performing operations with Boolean values</h2>\n<p> This section illustrates how Boolean values are used in apps. The first section discusses its use as a flag. The second illustrates its use for arithmetic operations.  </p>\n<h3 id=\"boolean-values-as-flags\">Boolean values as flags</h3>\n<p> Boolean variables are most commonly used as flags, to signal the presence or absence of some condition. For example, in the <a class=\"xref\" href=\"system.string#System_String_Compare_System_String_System_String_System_Boolean_\" data-linktype=\"relative-path\">System.String.Compare(String,String,Boolean)</a> method, the final parameter, <code>ignoreCase</code>, is a flag that indicates whether the comparison of two strings is case-insensitive (<code>ignoreCase</code> is <code>true</code>) or case-sensitive (<code>ignoreCase</code> is <code>false</code>). The value of the flag can then be evaluated in a conditional statement.  </p>\n<p> The following example uses a simple console app to illustrate the use of Boolean variables as flags. The app accepts command-line parameters that enable output to be redirected to a specified file (the <code>/f</code> switch), and that enable output to be sent both to a specified file and to the console (the <code>/b</code> switch). The app defines a flag named <code>isRedirected</code> to indicate whether output is to be sent to a file, and a flag named <code>isBoth</code> to indicate that output should be sent to the console.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Boolean.Structure#10\">Imports System.IO\nImports System.Threading\n\nModule Example\n   Public Sub Main()\n      &#39; Initialize flag variables.\n      Dim isRedirected, isBoth As Boolean \n      Dim fileName As String = &quot;&quot;\n      Dim sw As StreamWriter = Nothing\n      \n      &#39; Get any command line arguments.\n      Dim args() As String = Environment.GetCommandLineArgs()\n      &#39; Handle any arguments.\n      If args.Length &gt; 1 Then\n         For ctr = 1 To args.Length - 1\n            Dim arg As String = args(ctr)\n            If arg.StartsWith(&quot;/&quot;) OrElse arg.StartsWith(&quot;-&quot;) Then\n               Select Case arg.Substring(1).ToLower()\n                  Case &quot;f&quot;\n                     isRedirected = True\n                     If args.Length &lt; ctr + 2 Then\n                        ShowSyntax(&quot;The /f switch must be followed by a filename.&quot;)\n                        Exit Sub\n                     End If\n                     fileName = args(ctr + 1)\n                     ctr += 1\n                  Case &quot;b&quot;\n                     isBoth = True\n                  Case Else\n                     ShowSyntax(String.Format(&quot;The {0} switch is not supported&quot;, \n                                              args(ctr)))\n                     Exit Sub\n               End Select\n            End If   \n         Next\n      End If\n\n      &#39; If isBoth is True, isRedirected must be True.\n      If isBoth And Not isRedirected Then \n         ShowSyntax(&quot;The /f switch must be used if /b is used.&quot;)\n         Exit Sub\n      End If\n\n      &#39; Handle output.\n      If isRedirected Then\n         sw = New StreamWriter(fileName) \n         If Not IsBoth Then\n            Console.SetOut(sw) \n         End If\n      End If     \n      Dim msg As String = String.Format(&quot;Application began at {0}&quot;, Date.Now)\n      Console.WriteLine(msg)\n      If isBoth Then sw.WriteLine(msg)\n      Thread.Sleep(5000)\n      msg = String.Format(&quot;Application ended normally at {0}&quot;, Date.Now)\n      Console.WriteLine(msg)\n      If isBoth Then sw.WriteLine(msg)\n      If isRedirected Then sw.Close()\n   End Sub\n   \n   Private Sub ShowSyntax(errMsg As String)\n      Console.WriteLine(errMsg)\n      Console.WriteLine()\n      Console.WriteLine(&quot;Syntax: Example [[/f &lt;filename&gt; [/b]]&quot;)\n      Console.WriteLine()\n   End Sub\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Boolean.Structure#10\">using System;\nusing System.IO;\nusing System.Threading;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Initialize flag variables.\n      bool isRedirected = false;\n      bool isBoth = false; \n      String fileName = &quot;&quot;;\n      StreamWriter sw = null;\n      \n      // Get any command line arguments.\n      String[] args = Environment.GetCommandLineArgs();\n      // Handle any arguments.\n      if (args.Length &gt; 1) { \n         for (int ctr = 1; ctr &lt; args.Length; ctr++) {\n            String arg = args[ctr];\n            if (arg.StartsWith(&quot;/&quot;) || arg.StartsWith(&quot;-&quot;)) {\n               switch (arg.Substring(1).ToLower())\n               {\n                  case &quot;f&quot;:\n                     isRedirected = true;\n                     if (args.Length &lt; ctr + 2) {\n                        ShowSyntax(&quot;The /f switch must be followed by a filename.&quot;);\n                        return;\n                     }\n                     fileName = args[ctr + 1];\n                     ctr++;\n                     break;\n                  case &quot;b&quot;:\n                     isBoth = true;\n                     break;\n                  default:\n                     ShowSyntax(String.Format(&quot;The {0} switch is not supported&quot;, \n                                              args[ctr]));\n                     return;\n               }\n            }   \n         }\n      }\n\n      // If isBoth is True, isRedirected must be True.\n      if (isBoth &amp;&amp;  ! isRedirected) { \n         ShowSyntax(&quot;The /f switch must be used if /b is used.&quot;);\n         return;\n      }\n\n      // Handle output.\n      if (isRedirected) {\n         sw = new StreamWriter(fileName); \n         if (!isBoth)\n            Console.SetOut(sw); \n      }     \n      String msg = String.Format(&quot;Application began at {0}&quot;, DateTime.Now);\n      Console.WriteLine(msg);\n      if (isBoth) sw.WriteLine(msg);\n      Thread.Sleep(5000);\n      msg = String.Format(&quot;Application ended normally at {0}&quot;, DateTime.Now);\n      Console.WriteLine(msg);\n      if (isBoth) sw.WriteLine(msg);\n      if (isRedirected) sw.Close();\n   }\n   \n   private static void ShowSyntax(String errMsg)\n   {\n      Console.WriteLine(errMsg);\n      Console.WriteLine(&quot;\\nSyntax: Example [[/f &lt;filename&gt; [/b]]\\n&quot;);\n   }\n}\n</code></pre><h3 id=\"booleans-and-arithmetic-operations\">Booleans and arithmetic operations</h3>\n<p> A Boolean value is sometimes used to indicate the presence of a condition that triggers a mathematical calculation. For example, a <code>hasShippingCharge</code> variable might serve as a flag to indicate whether to add shipping charges to an invoice amount.  </p>\n<p> Because an operation with a <code>false</code> value has no effect on the result of an operation, it is not necessary to convert the Boolean to an integral value to use in the mathematical operation. Instead, you can use conditional logic.  </p>\n<p> The following example computes an amount that consists of a subtotal, a shipping charge, and an optional service charge. The <code>hasServiceCharge</code> variable determines whether the service charge is applied. Instead of converting <code>hasServiceCharge</code> to a numeric value and multiplying it by the amount of the service charge, the example uses conditional logic to add the service charge amount if it is applicable.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Boolean.Structure#13\">Module Example\n   Public Sub Main()\n      Dim hasServiceCharges() As Boolean = { True, False }\n      Dim subtotal As Decimal = 120.62d\n      Dim shippingCharge As Decimal = 2.50d\n      Dim serviceCharge As Decimal = 5.00d\n      \n      For Each hasServiceCharge In hasServiceCharges\n         Dim total As Decimal = subtotal + shippingCharge + \n                                If(hasServiceCharge, serviceCharge, 0)\n         Console.WriteLine(&quot;hasServiceCharge = {1}: The total is {0:C2}.&quot;, \n                           total, hasServiceCharge)                       \n      Next\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;       hasServiceCharge = True: The total is $128.12.\n&#39;       hasServiceCharge = False: The total is $123.12.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Boolean.Structure#13\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      bool[] hasServiceCharges = { true, false };\n      Decimal subtotal = 120.62m;\n      Decimal shippingCharge = 2.50m;\n      Decimal serviceCharge = 5.00m;\n      \n      foreach (var hasServiceCharge in hasServiceCharges) {\n         Decimal total = subtotal + shippingCharge + \n                                (hasServiceCharge ? serviceCharge : 0);\n         Console.WriteLine(&quot;hasServiceCharge = {1}: The total is {0:C2}.&quot;, \n                           total, hasServiceCharge);                       \n      }\n   }\n}\n// The example displays output like the following:\n//       hasServiceCharge = True: The total is $128.12.\n//       hasServiceCharge = False: The total is $123.12.\n</code></pre><p><a name=\"Interop\"></a>   </p>\n<h3 id=\"booleans-and-interop\">Booleans and interop</h3>\n<p> While marshaling base data types to COM is generally straightforward, the Boolean data type is an exception. You can apply the <a class=\"xref\" href=\"system.runtime.interopservices.marshalasattribute\" data-linktype=\"relative-path\">MarshalAsAttribute</a> attribute to marshal the Boolean type to any of the following representations:  </p>\n<table>\n<thead>\n<tr>\n<th>Enumeration type</th>\n<th>Unmanaged format</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.runtime.interopservices.unmanagedtype\" data-linktype=\"relative-path\">System.Runtime.InteropServices.UnmanagedType</a></td>\n<td>A 4-byte integer value, where any nonzero value represents <code>true</code> and 0 represents <code>false</code>. This is the default format of a Boolean field in a structure and of a Boolean parameter in platform invoke calls.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.runtime.interopservices.unmanagedtype\" data-linktype=\"relative-path\">System.Runtime.InteropServices.UnmanagedType</a></td>\n<td>A 1-byte integer value, where the 1 represents <code>true</code> and 0 represents <code>false</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.runtime.interopservices.unmanagedtype\" data-linktype=\"relative-path\">System.Runtime.InteropServices.UnmanagedType</a></td>\n<td>A 2-byte integer value, where -1 represents <code>true</code> and 0 represents <code>false</code>. This is the default format of a Boolean parameter in COM interop calls.</td>\n</tr>\n</tbody>\n</table>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Fields\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Boolean_FalseString\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FalseString</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Represents the Boolean value <code>false</code> as a string. This field is read-only.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly string FalseString;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This field is equal to the string &quot;False&quot;.  </p>\n<p> The FalseString property defines the string representation of a <code>False</code><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value in formatting and parsing operations.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Boolean_TrueString\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TrueString</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Represents the Boolean value <code>true</code> as a string. This field is read-only.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly string TrueString;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This field is equal to the string &quot;True&quot;.  </p>\n<p> The TrueString property defines the string representation of a <code>True</code><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value in formatting and parsing operations.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Boolean_CompareTo_System_Boolean_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CompareTo(Boolean)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Compares this instance to a specified <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> object and returns an integer that indicates their relationship to one another.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int CompareTo (bool value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> object to compare to this instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A signed integer that indicates the relative values of this instance and <code>value</code>.  </p>\n <table><thead><tr><th> Return Value<br>\n </th><th> Condition<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td> This instance is <code>false</code> and <code>value</code> is <code>true</code>.<br>\n </td></tr><tr><td> Zero<br>\n </td><td> This instance and <code>value</code> are equal (either both are <code>true</code> or both are <code>false</code>).<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td> This instance is <code>true</code> and <code>value</code> is <code>false</code>.<br>\n </td></tr></tbody></table>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method implements the <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">System.IComparable&lt;T&gt;</a> interface and performs slightly better than the <a class=\"xref\" href=\"system.boolean#System_Boolean_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> method because it does not have to convert the <code>value</code> parameter to an object.  </p>\n<p> If <code>value</code> has fewer bits (is narrower) than the instance type, some programming languages perform an implicit widening conversion that transforms the value of the parameter into a value with more bits.  </p>\n<p> For example, suppose the instance type is <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> and the parameter type is <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>. The Microsoft C# compiler generates instructions to represent the value of the parameter as an <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> object, then generates a <a class=\"xref\" href=\"system.int32#System_Int32_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> method to compare the <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> instance and parameter representation.  </p>\n<p> Consult your programming language&#39;s documentation to determine whether its compiler performs implicit widening conversions on numeric types.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Boolean_CompareTo_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CompareTo(Object)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Compares this instance to a specified object and returns an integer that indicates their relationship to one another.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int CompareTo (object obj);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>obj</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object to compare to this instance, or <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A signed integer that indicates the relative order of this instance and <code>obj</code>.  </p>\n <table><thead><tr><th> Return Value<br>\n </th><th> Condition<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td> This instance is <code>false</code> and <code>obj</code> is <code>true</code>.<br>\n </td></tr><tr><td> Zero<br>\n </td><td> This instance and <code>obj</code> are equal (either both are <code>true</code> or both are <code>false</code>).<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td> This instance is <code>true</code> and <code>obj</code> is <code>false</code>.<br>\n -or-<br>\n <code>obj</code> is <code>null</code>.<br>\n </td></tr></tbody></table>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>obj</code> is not a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><code>obj</code> must be <code>null</code> or an instance of <code>Boolean</code>; otherwise, an exception is thrown.  </p>\n<p> This method implements the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Boolean_Equals_System_Boolean_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Equals(Boolean)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value indicating whether this instance is equal to a specified <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool Equals (bool obj);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>obj</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value to compare to this instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>obj</code> has the same value as this instance; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method implements the <a class=\"xref\" href=\"system.iequatable-1\" data-linktype=\"relative-path\">System.IEquatable&lt;T&gt;</a> interface, and performs slightly better than <a class=\"xref\" href=\"system.boolean#System_Boolean_Equals_\" data-linktype=\"relative-path\">Equals</a> because it does not have to convert the <code>obj</code> parameter to an object.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Boolean_Equals_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Equals(Object)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value indicating whether this instance is equal to a specified object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override bool Equals (object obj);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>obj</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object to compare to this instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>obj</code> is a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> and has the same value as this instance; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method overrides <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Boolean_GetHashCode\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetHashCode()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the hash code for this instance.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override int GetHashCode ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A hash code for the current <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> class implements <code>true</code> as the integer, one, and <code>false</code> as the integer, zero. However, a particular programming language might represent <code>true</code> and <code>false</code> with other values.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Boolean_GetTypeCode\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetTypeCode()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the type code for the <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value type.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public TypeCode GetTypeCode ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.typecode\" data-linktype=\"relative-path\">TypeCode</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The enumerated constant <a class=\"xref\" href=\"system.typecode\" data-linktype=\"relative-path\">TypeCode</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Boolean_Parse_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Parse(String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Converts the specified string representation of a logical value to its <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> equivalent.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool Parse (string value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A string containing the value to convert.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>value</code> is equivalent to <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>; <code>false</code> if <code>value</code> is equivalent to <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>value</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>value</code> is not equivalent to <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> or <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>value</code> parameter, optionally preceded or trailed by white space, must contain either <a class=\"xref\" href=\"system.boolean#System_Boolean_TrueString\" data-linktype=\"relative-path\">TrueString</a> or <a class=\"xref\" href=\"system.boolean#System_Boolean_FalseString\" data-linktype=\"relative-path\">FalseString</a>; otherwise, an exception is thrown. The comparison is case-insensitive.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Boolean_ToString\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ToString()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Converts the value of this instance to its equivalent string representation (either &quot;True&quot; or &quot;False&quot;).</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override string ToString ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>&quot;True&quot; (the value of the <a class=\"xref\" href=\"system.boolean#System_Boolean_TrueString\" data-linktype=\"relative-path\">TrueString</a> property) if the value of this instance is <code>true</code>, or &quot;False&quot; (the value of the <a class=\"xref\" href=\"system.boolean#System_Boolean_FalseString\" data-linktype=\"relative-path\">FalseString</a> property) if the value of this instance is <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method returns the constants &quot;True&quot; or &quot;False&quot;.  </p>\n<p> Note that XML is case-sensitive, and that the XML specification recognizes &quot;true&quot; and &quot;false&quot; as the valid set of Boolean values. If the string returned by the ToString method is to be written to an XML file, its <a class=\"xref\" href=\"system.string#System_String_ToLowerInvariant_\" data-linktype=\"relative-path\">ToLowerInvariant</a> method should be called first to convert it to lowercase.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Boolean_ToString_System_IFormatProvider_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ToString(IFormatProvider)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Converts the value of this instance to its equivalent string representation (either &quot;True&quot; or &quot;False&quot;).</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string ToString (IFormatProvider provider);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>provider</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>(Reserved) An <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><a class=\"xref\" href=\"system.boolean#System_Boolean_TrueString\" data-linktype=\"relative-path\">TrueString</a> if the value of this instance is <code>true</code>, or <a class=\"xref\" href=\"system.boolean#System_Boolean_FalseString\" data-linktype=\"relative-path\">FalseString</a> if the value of this instance is <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>provider</code> parameter is reserved. It does not participate in the execution of this method. This means that the ToString method, unlike most methods with a <code>provider</code> parameter, does not reflect culture-specific settings.  </p>\n<p> This method returns the constants &quot;True&quot; or &quot;False&quot;. Note that XML is case-sensitive, and that the XML specification recognizes &quot;true&quot; and &quot;false&quot; as the valid set of Boolean values. If the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object returned by the ToString method is to be written to an XML file, its <a class=\"xref\" href=\"system.string#System_String_ToLowerInvariant_\" data-linktype=\"relative-path\">ToLowerInvariant</a> method should be called first to convert it to lowercase.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Boolean_TryParse_System_String_System_Boolean__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TryParse(String,Boolean)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Tries to convert the specified string representation of a logical value to its <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> equivalent. A return value indicates whether the conversion succeeded or failed.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool TryParse (string value, out bool result);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A string containing the value to convert.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>result</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>When this method returns, if the conversion succeeded, contains <code>true</code> if <code>value</code> is equal to <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> or <code>false</code> if <code>value</code> is equal to <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>. If the conversion failed, contains <code>false</code>. The conversion fails if <code>value</code> is <code>null</code> or is not equal to the value of either the <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> or <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> field.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>value</code> was converted successfully; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The TryParse method is like the <a class=\"xref\" href=\"system.boolean#System_Boolean_Parse_\" data-linktype=\"relative-path\">Parse</a> method, except the TryParse method does not throw an exception if the conversion fails.  </p>\n<p> The <code>value</code> parameter can be preceded or followed by white space. The comparison is ordinal and case-insensitive.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Explicit Interface Implementations\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Boolean_System_IConvertible_ToBoolean_System_IFormatProvider_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IConvertible.ToBoolean(IFormatProvider)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToBoolean*</span>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">bool IConvertible.ToBoolean (IFormatProvider provider);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>provider</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>This parameter is ignored.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> or <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Boolean_System_IConvertible_ToByte_System_IFormatProvider_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IConvertible.ToByte(IFormatProvider)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToByte*</span>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">byte IConvertible.ToByte (IFormatProvider provider);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>provider</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>This parameter is ignored.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>1 if the value of this instance is <code>true</code>; otherwise, 0.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToByte_\" data-linktype=\"relative-path\">ToByte</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Boolean_System_IConvertible_ToChar_System_IFormatProvider_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IConvertible.ToChar(IFormatProvider)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>This conversion is not supported. Attempting to use this method throws an <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">char IConvertible.ToChar (IFormatProvider provider);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>provider</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>This parameter is ignored.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>This conversion is not supported. No value is returned.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>You attempt to convert a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value to a <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> value. This conversion is not supported.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Boolean_System_IConvertible_ToDateTime_System_IFormatProvider_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IConvertible.ToDateTime(IFormatProvider)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>This conversion is not supported. Attempting to use this method throws an <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">DateTime IConvertible.ToDateTime (IFormatProvider provider);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>provider</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>This parameter is ignored.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>This conversion is not supported. No value is returned.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>You attempt to convert a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value to a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> value. This conversion is not supported.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Boolean_System_IConvertible_ToDecimal_System_IFormatProvider_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IConvertible.ToDecimal(IFormatProvider)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToDecimal*</span>..</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">decimal IConvertible.ToDecimal (IFormatProvider provider);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>provider</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>This parameter is ignored.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>1 if this instance is <code>true</code>; otherwise, 0.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToDecimal_\" data-linktype=\"relative-path\">ToDecimal</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Boolean_System_IConvertible_ToDouble_System_IFormatProvider_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IConvertible.ToDouble(IFormatProvider)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToDouble*</span>..</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">double IConvertible.ToDouble (IFormatProvider provider);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>provider</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>This parameter is ignored.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>1 if this instance is <code>true</code>; otherwise, 0.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToDouble_\" data-linktype=\"relative-path\">ToDouble</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Boolean_System_IConvertible_ToInt16_System_IFormatProvider_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IConvertible.ToInt16(IFormatProvider)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToInt16*</span>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">short IConvertible.ToInt16 (IFormatProvider provider);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>provider</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>This parameter is ignored.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>1 if this instance is <code>true</code>; otherwise, 0.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToInt16_\" data-linktype=\"relative-path\">ToInt16</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Boolean_System_IConvertible_ToInt32_System_IFormatProvider_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IConvertible.ToInt32(IFormatProvider)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToInt32*</span>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">int IConvertible.ToInt32 (IFormatProvider provider);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>provider</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>This parameter is ignored.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>1 if this instance is <code>true</code>; otherwise, 0.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToInt32_\" data-linktype=\"relative-path\">ToInt32</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Boolean_System_IConvertible_ToInt64_System_IFormatProvider_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IConvertible.ToInt64(IFormatProvider)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToInt64*</span>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">long IConvertible.ToInt64 (IFormatProvider provider);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>provider</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>This parameter is ignored.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>1 if this instance is <code>true</code>; otherwise, 0.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToInt64_System_Boolean_\" data-linktype=\"relative-path\">System.Convert.ToInt64(Boolean)</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Boolean_System_IConvertible_ToSByte_System_IFormatProvider_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IConvertible.ToSByte(IFormatProvider)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToSByte*</span>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">sbyte IConvertible.ToSByte (IFormatProvider provider);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>provider</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>This parameter is ignored.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>1 if this instance is <code>true</code>; otherwise, 0.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToSByte_System_Boolean_\" data-linktype=\"relative-path\">System.Convert.ToSByte(Boolean)</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Boolean_System_IConvertible_ToSingle_System_IFormatProvider_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IConvertible.ToSingle(IFormatProvider)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToSingle*</span>..</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">float IConvertible.ToSingle (IFormatProvider provider);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>provider</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>This parameter is ignored.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>1 if this instance is <code>true</code>; otherwise, 0.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToSingle_System_Boolean_\" data-linktype=\"relative-path\">System.Convert.ToSingle(Boolean)</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Boolean_System_IConvertible_ToType_System_Type_System_IFormatProvider_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IConvertible.ToType(Type,IFormatProvider)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToType*</span>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">object IConvertible.ToType (Type type, IFormatProvider provider);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>type</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The desired type.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>provider</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation that supplies culture-specific information about the format of the returned value.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object of the specified type, with a value that is equivalent to the value of this <code>Boolean</code> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>type</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The requested type conversion is not supported.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ChangeType_\" data-linktype=\"relative-path\">ChangeType</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Boolean_System_IConvertible_ToUInt16_System_IFormatProvider_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IConvertible.ToUInt16(IFormatProvider)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToUInt16*</span>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">ushort IConvertible.ToUInt16 (IFormatProvider provider);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>provider</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>This parameter is ignored.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>1 if this instance is <code>true</code>; otherwise, 0.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToUInt16_System_Boolean_\" data-linktype=\"relative-path\">System.Convert.ToUInt16(Boolean)</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Boolean_System_IConvertible_ToUInt32_System_IFormatProvider_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IConvertible.ToUInt32(IFormatProvider)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToUInt32*</span>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">uint IConvertible.ToUInt32 (IFormatProvider provider);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>provider</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>This parameter is ignored.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>1 if this instance is <code>true</code>; otherwise, 0.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToUInt32_System_Boolean_\" data-linktype=\"relative-path\">System.Convert.ToUInt32(Boolean)</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Boolean_System_IConvertible_ToUInt64_System_IFormatProvider_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IConvertible.ToUInt64(IFormatProvider)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToUInt64*</span>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">ulong IConvertible.ToUInt64 (IFormatProvider provider);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>provider</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>This parameter is ignored.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>1 if this instance is <code>true</code>; otherwise, 0.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToUInt64_System_Boolean_\" data-linktype=\"relative-path\">System.Convert.ToUInt64(Boolean)</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Boolean.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Boolean.yml\">\r\n<meta name=\"APIName\" content=\"System.Boolean\">\r\n<meta name=\"APIName\" content=\"System.Boolean.CompareTo\">\r\n<meta name=\"APIName\" content=\"System.Boolean.Equals\">\r\n<meta name=\"APIName\" content=\"System.Boolean.FalseString\">\r\n<meta name=\"APIName\" content=\"System.Boolean.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Boolean.GetTypeCode\">\r\n<meta name=\"APIName\" content=\"System.Boolean.Parse\">\r\n<meta name=\"APIName\" content=\"System.Boolean.IConvertible.ToBoolean\">\r\n<meta name=\"APIName\" content=\"System.Boolean.IConvertible.ToByte\">\r\n<meta name=\"APIName\" content=\"System.Boolean.IConvertible.ToChar\">\r\n<meta name=\"APIName\" content=\"System.Boolean.IConvertible.ToDateTime\">\r\n<meta name=\"APIName\" content=\"System.Boolean.IConvertible.ToDecimal\">\r\n<meta name=\"APIName\" content=\"System.Boolean.IConvertible.ToDouble\">\r\n<meta name=\"APIName\" content=\"System.Boolean.IConvertible.ToInt16\">\r\n<meta name=\"APIName\" content=\"System.Boolean.IConvertible.ToInt32\">\r\n<meta name=\"APIName\" content=\"System.Boolean.IConvertible.ToInt64\">\r\n<meta name=\"APIName\" content=\"System.Boolean.IConvertible.ToSByte\">\r\n<meta name=\"APIName\" content=\"System.Boolean.IConvertible.ToSingle\">\r\n<meta name=\"APIName\" content=\"System.Boolean.IConvertible.ToType\">\r\n<meta name=\"APIName\" content=\"System.Boolean.IConvertible.ToUInt16\">\r\n<meta name=\"APIName\" content=\"System.Boolean.IConvertible.ToUInt32\">\r\n<meta name=\"APIName\" content=\"System.Boolean.IConvertible.ToUInt64\">\r\n<meta name=\"APIName\" content=\"System.Boolean.ToString\">\r\n<meta name=\"APIName\" content=\"System.Boolean.TrueString\">\r\n<meta name=\"APIName\" content=\"System.Boolean.TryParse\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"d50c4467-d621-75a0-a58b-b860ee864a33\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a Boolean (true or false) value.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Boolean\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Boolean.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Boolean.yml","open_to_public_contributors":true,"api_name":["System.Boolean","System.Boolean.CompareTo","System.Boolean.Equals","System.Boolean.FalseString","System.Boolean.GetHashCode","System.Boolean.GetTypeCode","System.Boolean.Parse","System.Boolean.IConvertible.ToBoolean","System.Boolean.IConvertible.ToByte","System.Boolean.IConvertible.ToChar","System.Boolean.IConvertible.ToDateTime","System.Boolean.IConvertible.ToDecimal","System.Boolean.IConvertible.ToDouble","System.Boolean.IConvertible.ToInt16","System.Boolean.IConvertible.ToInt32","System.Boolean.IConvertible.ToInt64","System.Boolean.IConvertible.ToSByte","System.Boolean.IConvertible.ToSingle","System.Boolean.IConvertible.ToType","System.Boolean.IConvertible.ToUInt16","System.Boolean.IConvertible.ToUInt32","System.Boolean.IConvertible.ToUInt64","System.Boolean.ToString","System.Boolean.TrueString","System.Boolean.TryParse"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Boolean","System::Boolean","System.Boolean.CompareTo","System::Boolean::CompareTo","System.Boolean.Equals","System::Boolean::Equals","System.Boolean.FalseString","System::Boolean::FalseString","System.Boolean.GetHashCode","System::Boolean::GetHashCode","System.Boolean.GetTypeCode","System::Boolean::GetTypeCode","System.Boolean.Parse","System::Boolean::Parse","System.Boolean.System#IConvertible#ToBoolean","System::Boolean::System#IConvertible#ToBoolean","System.Boolean.System#IConvertible#ToByte","System::Boolean::System#IConvertible#ToByte","System.Boolean.System#IConvertible#ToChar","System::Boolean::System#IConvertible#ToChar","System.Boolean.System#IConvertible#ToDateTime","System::Boolean::System#IConvertible#ToDateTime","System.Boolean.System#IConvertible#ToDecimal","System::Boolean::System#IConvertible#ToDecimal","System.Boolean.System#IConvertible#ToDouble","System::Boolean::System#IConvertible#ToDouble","System.Boolean.System#IConvertible#ToInt16","System::Boolean::System#IConvertible#ToInt16","System.Boolean.System#IConvertible#ToInt32","System::Boolean::System#IConvertible#ToInt32","System.Boolean.System#IConvertible#ToInt64","System::Boolean::System#IConvertible#ToInt64","System.Boolean.System#IConvertible#ToSByte","System::Boolean::System#IConvertible#ToSByte","System.Boolean.System#IConvertible#ToSingle","System::Boolean::System#IConvertible#ToSingle","System.Boolean.System#IConvertible#ToType","System::Boolean::System#IConvertible#ToType","System.Boolean.System#IConvertible#ToUInt16","System::Boolean::System#IConvertible#ToUInt16","System.Boolean.System#IConvertible#ToUInt32","System::Boolean::System#IConvertible#ToUInt32","System.Boolean.System#IConvertible#ToUInt64","System::Boolean::System#IConvertible#ToUInt64","System.Boolean.ToString","System::Boolean::ToString","System.Boolean.TrueString","System::Boolean::TrueString","System.Boolean.TryParse","System::Boolean::TryParse"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"d50c4467-d621-75a0-a58b-b860ee864a33","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/Boolean.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Boolean struct | Microsoft Docs","_op_ogTitle":"Boolean struct","description":"Represents a Boolean (true or false) value.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.Boolean","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.boolean","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.boolean","fileRelativePath":"System.Boolean.html"},"themesRelativePathToOutputRoot":"_themes/"}