{"content":"    \r\n    <h1 id=\"System_Single\">\r\n      <span class=\"lang-csharp\">Single</span>\r\n        Struct\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a single-precision floating-point number.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic struct Single : IComparable, IComparable&lt;float&gt;, IConvertible, IEquatable&lt;float&gt;, IFormattable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">System.ValueType</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Single</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The Single value type represents a single-precision 32-bit number with values ranging from negative 3.402823e38 to positive 3.402823e38, as well as positive or negative zero, <a class=\"xref\" href=\"system.single#System_Single_PositiveInfinity\" data-linktype=\"relative-path\">PositiveInfinity</a>, <a class=\"xref\" href=\"system.single#System_Single_NegativeInfinity\" data-linktype=\"relative-path\">NegativeInfinity</a>, and not a number (<a class=\"xref\" href=\"system.single#System_Single_NaN\" data-linktype=\"relative-path\">NaN</a>). It is intended to represent values that are extremely large (such as distances between planets or galaxies) or extremely small (such as the molecular mass of a substance in kilograms) and that often are imprecise (such as the distance from earth to another solar system). The Single type complies with the IEC 60559:1989 (IEEE 754) standard for binary floating-point arithmetic.  </p>\n<p> This topic consists of the following sections:  </p>\n<ul>\n<li><p><a href=\"#Precision\" data-linktype=\"self-bookmark\">Floating-point representation and precision</a>  </p>\n</li>\n<li><p><a href=\"#Equality\" data-linktype=\"self-bookmark\">Testing for equality</a>  </p>\n</li>\n<li><p><a href=\"#Exceptions\" data-linktype=\"self-bookmark\">Floating-point values and exceptions</a>  </p>\n</li>\n<li><p><a href=\"#Conversion\" data-linktype=\"self-bookmark\">Type conversion and the Single structure</a>  </p>\n</li>\n<li><p><a href=\"#Functionality\" data-linktype=\"self-bookmark\">Floating-point functionality</a>  </p>\n<p>Single provides methods to compare instances of this type, to convert the value of an instance to its string representation, and to convert the string representation of a number to an instance of this type. For information about how format specification codes control the string representation of value types, see <a href=\"../Topic/Formatting%20Types%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Formatting Types</a>, <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Numeric Format Strings</a>, and <a href=\"../Topic/Custom%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Numeric Format Strings</a>.  </p>\n</li>\n</ul>\n<p><a name=\"Precision\"></a>   </p>\n<h2 id=\"floating-point-representation-and-precision\">Floating-point representation and precision</h2>\n<p> The Single data type stores single-precision floating-point values in a 32-bit binary format, as shown in the following table:  </p>\n<table>\n<thead>\n<tr>\n<th>Part</th>\n<th>Bits</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Significand or mantissa</td>\n<td>0-22</td>\n</tr>\n<tr>\n<td>Exponent</td>\n<td>23-30</td>\n</tr>\n<tr>\n<td>Sign (0 = positive, 1 = negative)</td>\n<td>31</td>\n</tr>\n</tbody>\n</table>\n<p> Just as decimal fractions are unable to precisely represent some fractional values (such as 1/3 or <a class=\"xref\" href=\"system.math#System_Math_PI\" data-linktype=\"relative-path\">System.Math.PI</a>), binary fractions are unable to represent some fractional values. For example, 2/10, which is represented precisely by .2 as a decimal fraction, is represented by .0011111001001100 as a binary fraction, with the pattern &quot;1100&quot; repeating to infinity. In this case, the floating-point value provides an imprecise representation of the number that it represents. Performing additional mathematical operations on the original floating-point value often increases its lack of precision. For example, if you compare the results of multiplying .3 by 10 and adding .3 to .3 nine times, you will see that addition produces the less precise result, because it involves eight more operations than multiplication. Note that this disparity is apparent only if you display the two Single values by using the &quot;R&quot; <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">standard numeric format string</a>, which, if necessary, displays all 9 digits of precision supported by the Single type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Single.Structure#3\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Single value = .2f;\n      Single result1 = value * 10f;\n      Single result2 = 0f;\n      for (int ctr = 1; ctr &lt;= 10; ctr++)\n         result2 += value;\n\n      Console.WriteLine(&quot;.2 * 10:           {0:R}&quot;, result1);\n      Console.WriteLine(&quot;.2 Added 10 times: {0:R}&quot;, result2);\n   }\n}\n// The example displays the following output:\n//       .2 * 10:           2\n//       .2 Added 10 times: 2.00000024\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Single.Structure#3\">Module Example\n   Public Sub Main()\n      Dim value As Single = .2\n      Dim result1 As Single = value * 10\n      Dim result2 As Single\n      For ctr As Integer = 1 To 10\n         result2 += value\n      Next\n      Console.WriteLine(&quot;.2 * 10:           {0:R}&quot;, result1)\n      Console.WriteLine(&quot;.2 Added 10 times: {0:R}&quot;, result2)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       .2 * 10:           2\n&#39;       .2 Added 10 times: 2.00000024\n</code></pre><p> Because some numbers cannot be represented exactly as fractional binary values, floating-point numbers can only approximate real numbers.  </p>\n<p> All floating-point numbers have a limited number of significant digits, which also determines how accurately a floating-point value approximates a real number. A Single value has up to 7 decimal digits of precision, although a maximum of 9 digits is maintained internally. This means that some floating-point operations may lack the precision to change a floating-point value. The following example defines a large single-precision floating-point value, and then adds the product of <a class=\"xref\" href=\"system.single#System_Single_Epsilon\" data-linktype=\"relative-path\">System.Single.Epsilon</a> and one quadrillion to it. However, the product is too small to modify the original floating-point value. Its least significant digit is thousandths, whereas the most significant digit in the product is 1<sup>-312</sup>.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Single.Structure#4\">Module Example\n   Public Sub Main()\n      Dim value As Single = 123456789e4\n      Dim additional As Single = Single.Epsilon * 1e12\n      Console.WriteLine(&quot;{0} + {1} = {2}&quot;, value, additional, \n                                           value + additional)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;   1.234568E+12 + 1.401298E-33 = 1.234568E+12\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Single.Structure#4\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Single value = 123456789e4f;\n      Single additional = Single.Epsilon * 1e12f;\n      Console.WriteLine(&quot;{0} + {1} = {2}&quot;, value, additional, \n                                           value + additional);\n   }\n}\n// The example displays the following output:\n//    1.234568E+12 + 1.401298E-33 = 1.234568E+12\n</code></pre><p> The limited precision of a floating-point number has several consequences:  </p>\n<ul>\n<li><p>Two floating-point numbers that appear equal for a particular precision might not compare equal because their least significant digits are different. In the following example, a series of numbers are added together, and their total is compared with their expected total. Although the two values appear to be the same, a call to the <code>Equals</code> method indicates that they are not.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Single.Structure#6\">Module Example\n   Public Sub Main()\n      Dim values() As Single = { 10.01, 2.88, 2.88, 2.88, 9.0 }\n      Dim result As Single = 27.65\n      Dim total As Single\n      For Each value In values\n         total += value\n      Next\n      If total.Equals(result) Then\n         Console.WriteLine(&quot;The sum of the values equals the total.&quot;)\n      Else\n         Console.WriteLine(&quot;The sum of the values ({0}) does not equal the total ({1}).&quot;,\n                           total, result) \n      End If     \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;      The sum of the values (27.65) does not equal the total (27.65).   \n&#39;\n&#39; If the index items in the Console.WriteLine statement are changed to {0:R},\n&#39; the example displays the following output:\n&#39;       The sum of the values (27.639999999999997) does not equal the total (27.64).   \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Single.Structure#6\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Single[] values = { 10.01f, 2.88f, 2.88f, 2.88f, 9.0f };\n      Single result = 27.65f;\n      Single total = 0f;\n      foreach (var value in values)\n         total += value;\n\n      if (total.Equals(result))\n         Console.WriteLine(&quot;The sum of the values equals the total.&quot;);\n      else\n         Console.WriteLine(&quot;The sum of the values ({0:R}) does not equal the total ({1:R}).&quot;,\n                           total, result); \n   }\n}\n// The example displays the following output:\n//      The sum of the values (27.65) does not equal the total (27.65).   \n//\n// If the index items in the Console.WriteLine statement are changed to {0:R},\n// the example displays the following output:\n//       The sum of the values (27.6500015) does not equal the total (27.65).   \n</code></pre><p> If you change the format items in the <a class=\"xref\" href=\"system.console#System_Console_WriteLine_System_String_System_Object_System_Object_\" data-linktype=\"relative-path\">System.Console.WriteLine(String,Object,Object)</a> statement from <code>{0}</code> and <code>{1}</code> to <code>{0:R}</code> and <code>{1:R}</code> to display all significant digits of the two Single values, it is clear that the two values are unequal because of a loss of precision during the addition operations. In this case, the issue can be resolved by calling the <a class=\"xref\" href=\"system.math#System_Math_Round_System_Double_System_Int32_\" data-linktype=\"relative-path\">System.Math.Round(Double,Int32)</a> method to round the Single values to the desired precision before performing the comparison.  </p>\n</li>\n<li><p>A mathematical or comparison operation that uses a floating-point number might not yield the same result if a decimal number is used, because the binary floating-point number might not equal the decimal number. A previous example illustrated this by displaying the result of multiplying .3 by 10 and adding .3 to .3 nine times.  </p>\n<p> When accuracy in numeric operations with fractional values is important, use the <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> type instead of the Single type. When accuracy in numeric operations with integral values beyond the range of the <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> or <a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a> types is important, use the <a class=\"xref\" href=\"system.numerics.biginteger\" data-linktype=\"relative-path\">BigInteger</a> type.  </p>\n</li>\n<li><p>A value might not round-trip if a floating-point number is involved. A value is said to round-trip if an operation converts an original floating-point number to another form, an inverse operation transforms the converted form back to a floating-point number, and the final floating-point number is equal to the original floating-point number. The round trip might fail because one or more least significant digits are lost or changed in a conversion. In the following example, three Single values are converted to strings and saved in a file. As the output shows, although the values appear to be identical, the restored values are not equal to the original values.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Single.Structure#17\">Imports System.IO\n\nModule Example\n   Public Sub Main()\n      Dim sw As New StreamWriter(&quot;.\\Singles.dat&quot;)\n      Dim values() As Single = { 3.2/1.11, 1.0/3, CSng(Math.PI)  }\n      For ctr As Integer = 0 To values.Length - 1\n         sw.Write(values(ctr).ToString())\n         If ctr &lt;&gt; values.Length - 1 Then sw.Write(&quot;|&quot;)\n      Next      \n      sw.Close()\n      \n      Dim restoredValues(values.Length - 1) As Single\n      Dim sr As New StreamReader(&quot;.\\Singles.dat&quot;)\n      Dim temp As String = sr.ReadToEnd()\n      Dim tempStrings() As String = temp.Split(&quot;|&quot;c)\n      For ctr As Integer = 0 To tempStrings.Length - 1\n         restoredValues(ctr) = Single.Parse(tempStrings(ctr))   \n      Next \n\n      For ctr As Integer = 0 To values.Length - 1\n         Console.WriteLine(&quot;{0} {2} {1}&quot;, values(ctr), \n                           restoredValues(ctr),\n                           If(values(ctr).Equals(restoredValues(ctr)), &quot;=&quot;, &quot;&lt;&gt;&quot;))\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;        2.882883 &lt;&gt; 2.882883\n&#39;        0.3333333 &lt;&gt; 0.3333333\n&#39;        3.141593 &lt;&gt; 3.141593\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Single.Structure#17\">using System;\nusing System.IO;\n\npublic class Example\n{\n   public static void Main()\n   {\n      StreamWriter sw = new StreamWriter(@&quot;.\\Singles.dat&quot;);\n      Single[] values = { 3.2f/1.11f, 1.0f/3f, (float) Math.PI };\n      for (int ctr = 0; ctr &lt; values.Length; ctr++) {\n         sw.Write(values[ctr].ToString());\n         if (ctr != values.Length - 1)\n            sw.Write(&quot;|&quot;);\n      }      \n      sw.Close();\n      \n      Single[] restoredValues = new Single[values.Length];\n      StreamReader sr = new StreamReader(@&quot;.\\Singles.dat&quot;);\n      string temp = sr.ReadToEnd();\n      string[] tempStrings = temp.Split(&#39;|&#39;);\n      for (int ctr = 0; ctr &lt; tempStrings.Length; ctr++)\n         restoredValues[ctr] = Single.Parse(tempStrings[ctr]);   \n\n\n      for (int ctr = 0; ctr &lt; values.Length; ctr++)\n         Console.WriteLine(&quot;{0} {2} {1}&quot;, values[ctr], \n                           restoredValues[ctr],\n                           values[ctr].Equals(restoredValues[ctr]) ? &quot;=&quot; : &quot;&lt;&gt;&quot;);\n   }\n}\n// The example displays the following output:\n//       2.882883 &lt;&gt; 2.882883\n//       0.3333333 &lt;&gt; 0.3333333\n//       3.141593 &lt;&gt; 3.141593\n</code></pre><p> In this case, the values can be successfully round-tripped by using the &quot;R&quot; <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">standard numeric format string</a> to preserve the full precision of Single values, as the following example shows.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Single.Structure#18\">using System;\nusing System.IO;\n\npublic class Example\n{\n   public static void Main()\n   {\n      StreamWriter sw = new StreamWriter(@&quot;.\\Singles.dat&quot;);\n      Single[] values = { 3.2f/1.11f, 1.0f/3f, (float) Math.PI };\n      for (int ctr = 0; ctr &lt; values.Length; ctr++) \n         sw.Write(&quot;{0:R}{1}&quot;, values[ctr], ctr &lt; values.Length - 1 ? &quot;|&quot; : &quot;&quot; );\n      \n      sw.Close();\n      \n      Single[] restoredValues = new Single[values.Length];\n      StreamReader sr = new StreamReader(@&quot;.\\Singles.dat&quot;);\n      string temp = sr.ReadToEnd();\n      string[] tempStrings = temp.Split(&#39;|&#39;);\n      for (int ctr = 0; ctr &lt; tempStrings.Length; ctr++)\n         restoredValues[ctr] = Single.Parse(tempStrings[ctr]);   \n\n\n      for (int ctr = 0; ctr &lt; values.Length; ctr++)\n         Console.WriteLine(&quot;{0} {2} {1}&quot;, values[ctr], \n                           restoredValues[ctr],\n                           values[ctr].Equals(restoredValues[ctr]) ? &quot;=&quot; : &quot;&lt;&gt;&quot;);\n   }\n}\n// The example displays the following output:\n//       2.882883 = 2.882883\n//       0.3333333 = 0.3333333\n//       3.141593 = 3.141593\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Single.Structure#18\">Imports System.IO\n\nModule Example\n   Public Sub Main()\n      Dim sw As New StreamWriter(&quot;.\\Singles.dat&quot;)\n      Dim values() As Single = { 3.2/1.11, 1.0/3, CSng(Math.PI)  }\n      For ctr As Integer = 0 To values.Length - 1\n         sw.Write(&quot;{0:R}{1}&quot;, values(ctr), \n                  If(ctr &lt; values.Length - 1, &quot;|&quot;, &quot;&quot;))\n      Next      \n      sw.Close()\n      \n      Dim restoredValues(values.Length - 1) As Single\n      Dim sr As New StreamReader(&quot;.\\Singles.dat&quot;)\n      Dim temp As String = sr.ReadToEnd()\n      Dim tempStrings() As String = temp.Split(&quot;|&quot;c)\n      For ctr As Integer = 0 To tempStrings.Length - 1\n         restoredValues(ctr) = Single.Parse(tempStrings(ctr))   \n      Next \n\n      For ctr As Integer = 0 To values.Length - 1\n         Console.WriteLine(&quot;{0} {2} {1}&quot;, values(ctr), \n                           restoredValues(ctr),\n                           If(values(ctr).Equals(restoredValues(ctr)), &quot;=&quot;, &quot;&lt;&gt;&quot;))\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       2.882883 = 2.882883\n&#39;       0.3333333 = 0.3333333\n&#39;       3.141593 = 3.141593\n</code></pre></li>\n<li><p>Single values have less precision than <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values. A Single value that is converted to a seemingly equivalent <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> often does not equal the <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> value because of differences in precision. In the following example, the result of identical division operations is assigned to a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> value and a Single value. After the Single value is cast to a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>, a comparison of the two values shows that they are unequal.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Double.Structure#5\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Double value1 = 1/3.0;\n      Single sValue2 = 1/3.0f;\n      Double value2 = (Double) sValue2;\n      Console.WriteLine(&quot;{0:R} = {1:R}: {2}&quot;, value1, value2, \n                                          value1.Equals(value2));\n   }\n}\n// The example displays the following output:\n//        0.33333333333333331 = 0.3333333432674408: False\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Double.Structure#5\">Module Example\n   Public Sub Main()\n      Dim value1 As Double = 1/3\n      Dim sValue2 As Single = 1/3\n      Dim value2 As Double = CDbl(sValue2)\n      Console.WriteLine(&quot;{0} = {1}: {2}&quot;, value1, value2, value1.Equals(value2))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       0.33333333333333331 = 0.3333333432674408: False\n</code></pre><p> To avoid this problem, either use the <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> data type in place of the Single data type, or use the <a class=\"xref\" href=\"system.math#System_Math_Round_\" data-linktype=\"relative-path\">Round</a> method so that both values have the same precision.  </p>\n</li>\n</ul>\n<p><a name=\"Equality\"></a>   </p>\n<h2 id=\"testing-for-equality\">Testing for equality</h2>\n<p> To be considered equal, two Single values must represent identical values. However, because of differences in precision between values, or because of a loss of precision by one or both values, floating-point values that are expected to be identical often turn out to be unequal due to differences in their least significant digits. As a result, calls to the <a class=\"xref\" href=\"system.single#System_Single_Equals_\" data-linktype=\"relative-path\">Equals</a> method to determine whether two values are equal, or calls to the <a class=\"xref\" href=\"system.single#System_Single_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> method to determine the relationship between two Single values, often yield unexpected results. This is evident in the following example, where two apparently equal Single values turn out to be unequal, because the first value has 7 digits of precision, whereas the second value has 9.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Single.Structure#9\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      float value1 = .3333333f;\n      float value2 = 1.0f/3;\n      Console.WriteLine(&quot;{0:R} = {1:R}: {2}&quot;, value1, value2, value1.Equals(value2));\n   }\n}\n// The example displays the following output:\n//        0.3333333 = 0.333333343: False\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Single.Structure#9\">Module Example\n   Public Sub Main()\n      Dim value1 As Single = .3333333\n      Dim value2 As Single = 1/3\n      Console.WriteLine(&quot;{0:R} = {1:R}: {2}&quot;, value1, value2, value1.Equals(value2))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       0.3333333 = 0.333333343: False\n</code></pre><p> Calculated values that follow different code paths and that are manipulated in different ways often prove to be unequal. In the following example, one Single value is squared, and then the square root is calculated to restore the original value. A second Single is multiplied by 3.51 and squared before the square root of the result is divided by 3.51 to restore the original value. Although the two values appear to be identical, a call to the <a class=\"xref\" href=\"system.single#System_Single_Equals_System_Single_\" data-linktype=\"relative-path\">Equals(Single)</a> method indicates that they are not equal. Using the &quot;R&quot; standard format string to return a result string that displays all the significant digits of each Single value shows that the second value is .0000000000001 less than the first.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Single.Structure#10\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      float value1 = 10.201438f;\n      value1 = (float) Math.Sqrt((float) Math.Pow(value1, 2));\n      float value2 = (float) Math.Pow((float) value1 * 3.51f, 2);\n      value2 = ((float) Math.Sqrt(value2)) / 3.51f;\n      Console.WriteLine(&quot;{0} = {1}: {2}\\n&quot;, \n                        value1, value2, value1.Equals(value2)); \n      Console.WriteLine(&quot;{0:R} = {1:R}&quot;, value1, value2); \n   }\n}\n// The example displays the following output:\n//       10.20144 = 10.20144: False\n//       \n//       10.201438 = 10.2014389\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Single.Structure#10\">Module Example\n   Public Sub Main()\n      Dim value1 As Single = 10.201438\n      value1 = CSng(Math.Sqrt(CSng(Math.Pow(value1, 2))))\n      Dim value2 As Single = CSng(Math.Pow(value1 * CSng(3.51), 2))\n      value2 = CSng(Math.Sqrt(value2) / CSng(3.51))\n      Console.WriteLine(&quot;{0} = {1}: {2}&quot;, \n                        value1, value2, value1.Equals(value2)) \n      Console.WriteLine()\n      Console.WriteLine(&quot;{0:R} = {1:R}&quot;, value1, value2) \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       10.20144 = 10.20144: False\n&#39;       \n&#39;       10.201438 = 10.2014389\n</code></pre><p> In cases where a loss of precision is likely to affect the result of a comparison, you can use the following techniques instead of calling the <a class=\"xref\" href=\"system.single#System_Single_Equals_\" data-linktype=\"relative-path\">Equals</a> or <a class=\"xref\" href=\"system.single#System_Single_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> method:  </p>\n<ul>\n<li><p>Call the <a class=\"xref\" href=\"system.math#System_Math_Round_\" data-linktype=\"relative-path\">Round</a> method to ensure that both values have the same precision. The following example modifies a previous example to use this approach so that two fractional values are equivalent.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Single.Structure#11\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      float value1 = .3333333f;\n      float value2 = 1.0f/3;\n      int precision = 7;\n      value1 = (float) Math.Round(value1, precision);\n      value2 = (float) Math.Round(value2, precision);\n      Console.WriteLine(&quot;{0:R} = {1:R}: {2}&quot;, value1, value2, value1.Equals(value2));\n   }\n}\n// The example displays the following output:\n//        0.3333333 = 0.3333333: True\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Single.Structure#11\">Module Example\n   Public Sub Main()\n      Dim value1 As Single = .3333333\n      Dim value2 As Single = 1/3\n      Dim precision As Integer = 7\n      value1 = CSng(Math.Round(value1, precision))\n      value2 = CSng(Math.Round(value2, precision))\n      Console.WriteLine(&quot;{0:R} = {1:R}: {2}&quot;, value1, value2, value1.Equals(value2))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       0.3333333 = 0.3333333: True\n</code></pre><p> Note that the problem of precision still applies to rounding of midpoint values. For more information, see the <a class=\"xref\" href=\"system.math#System_Math_Round_System_Double_System_Int32_System_MidpointRounding_\" data-linktype=\"relative-path\">System.Math.Round(Double,Int32,MidpointRounding)</a> method.  </p>\n</li>\n<li><p>Test for approximate equality instead of equality. This technique requires that you define either an absolute amount by which the two values can differ but still be equal, or that you define a relative amount by which the smaller value can diverge from the larger value.  </p>\n<div class=\"WARNING\"><h5>Warning</h5><p> <a class=\"xref\" href=\"system.single#System_Single_Epsilon\" data-linktype=\"relative-path\">System.Single.Epsilon</a> is sometimes used as an absolute measure of the distance between two Single values when testing for equality.  However, <a class=\"xref\" href=\"system.single#System_Single_Epsilon\" data-linktype=\"relative-path\">System.Single.Epsilon</a> measures the smallest possible value that can be added to, or subtracted from, a Single whose value is zero. For most positive and negative Single values, the value of <a class=\"xref\" href=\"system.single#System_Single_Epsilon\" data-linktype=\"relative-path\">System.Single.Epsilon</a> is too small to be detected. Therefore, except for values that are zero, we do not recommend its use in tests for equality.  </p>\n</div>\n<p> The following example uses the latter approach to define an <code>IsApproximatelyEqual</code> method that tests the relative difference between two values. It also contrasts the result of calls to the <code>IsApproximatelyEqual</code> method and the <a class=\"xref\" href=\"system.single#System_Single_Equals_System_Single_\" data-linktype=\"relative-path\">Equals(Single)</a> method.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Single.Structure#12\">Module Example\n   Public Sub Main()\n      Dim one1 As Single = .1 * 10\n      Dim one2 As Single = 0\n      For ctr As Integer = 1 To 10\n         one2 += CSng(.1)\n      Next\n      Console.WriteLine(&quot;{0:R} = {1:R}: {2}&quot;, one1, one2, one1.Equals(one2))\n      Console.WriteLine(&quot;{0:R} is approximately equal to {1:R}: {2}&quot;, \n                        one1, one2, \n                        IsApproximatelyEqual(one1, one2, .000001))   \n   End Sub\n\n   Function IsApproximatelyEqual(value1 As Single, value2 As Single, \n                                 epsilon As Single) As Boolean\n      &#39; If they are equal anyway, just return True.\n      If value1.Equals(value2) Then Return True\n      \n      &#39; Handle NaN, Infinity.\n      If Single.IsInfinity(value1) Or Single.IsNaN(value1) Then\n         Return value1.Equals(value2)\n      Else If Single.IsInfinity(value2) Or Single.IsNaN(value2)\n         Return value1.Equals(value2)\n      End If\n      \n      &#39; Handle zero to avoid division by zero\n      Dim divisor As Single = Math.Max(value1, value2)\n      If divisor.Equals(0) Then\n         divisor = Math.Min(value1, value2)\n      End If \n      \n      Return Math.Abs(value1 - value2)/divisor &lt;= epsilon           \n   End Function\nEnd Module\n&#39; The example displays the following output:\n&#39;       1 = 1.00000012: False\n&#39;       1 is approximately equal to 1.00000012: True\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Single.Structure#12\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      float one1 = .1f * 10;\n      float one2 = 0f;\n      for (int ctr = 1; ctr &lt;= 10; ctr++)\n         one2 += .1f;\n\n      Console.WriteLine(&quot;{0:R} = {1:R}: {2}&quot;, one1, one2, one1.Equals(one2));\n      Console.WriteLine(&quot;{0:R} is approximately equal to {1:R}: {2}&quot;, \n                        one1, one2, \n                        IsApproximatelyEqual(one1, one2, .000001f));   \n   }\n\n   static bool IsApproximatelyEqual(float value1, float value2, float epsilon)\n   {\n      // If they are equal anyway, just return True.\n      if (value1.Equals(value2))\n         return true;\n\n      // Handle NaN, Infinity.\n      if (Double.IsInfinity(value1) | Double.IsNaN(value1))\n         return value1.Equals(value2);\n      else if (Double.IsInfinity(value2) | Double.IsNaN(value2))\n         return value1.Equals(value2);\n\n      // Handle zero to avoid division by zero\n      double divisor = Math.Max(value1, value2);\n      if (divisor.Equals(0)) \n         divisor = Math.Min(value1, value2);\n      \n      return Math.Abs(value1 - value2)/divisor &lt;= epsilon;           \n   } \n}\n// The example displays the following output:\n//       1 = 1.00000012: False\n//       1 is approximately equal to 1.00000012: True\n</code></pre></li>\n</ul>\n<p><a name=\"Exceptions\"></a>   </p>\n<h2 id=\"floating-point-values-and-exceptions\">Floating-point values and exceptions</h2>\n<p> Operations with floating-point values do not throw exceptions, unlike operations with integral types, which throw exceptions in cases of illegal operations such as division by zero or overflow.  Instead, in these situations, the result of a floating-point operation is zero, positive infinity, negative infinity, or not a number (NaN):  </p>\n<ul>\n<li><p>If the result of a floating-point operation is too small for the destination format, the result is zero. This can occur when two very small floating-point numbers are multiplied, as the following example shows.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Single.Structure#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      float value1 = 1.163287e-36f;\n      float value2 = 9.164234e-25f;\n      float result = value1 * value2;\n      Console.WriteLine(&quot;{0} * {1} = {2}&quot;, value1, value2, result);\n      Console.WriteLine(&quot;{0} = 0: {1}&quot;, result, result.Equals(0.0f));\n   }\n}\n// The example displays the following output:\n//       1.163287E-36 * 9.164234E-25 = 0\n//       0 = 0: True\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Single.Structure#1\">Module Example\n   Public Sub Main()\n      Dim value1 As Single = 1.163287e-36\n      Dim value2 As Single = 9.164234e-25\n      Dim result As Single = value1 * value2\n      Console.WriteLine(&quot;{0} * {1} = {2:R}&quot;, value1, value2, result)\n      Console.WriteLine(&quot;{0} = 0: {1}&quot;, result, result.Equals(0))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       1.163287E-36 * 9.164234E-25 = 0\n&#39;       0 = 0: True\n</code></pre></li>\n<li><p>If the magnitude of the result of a floating-point operation exceeds the range of the destination format, the result of the operation is <a class=\"xref\" href=\"system.single#System_Single_PositiveInfinity\" data-linktype=\"relative-path\">PositiveInfinity</a> or <a class=\"xref\" href=\"system.single#System_Single_NegativeInfinity\" data-linktype=\"relative-path\">NegativeInfinity</a>, as appropriate for the sign of the result. The result of an operation that overflows <a class=\"xref\" href=\"system.single#System_Single_MaxValue\" data-linktype=\"relative-path\">System.Single.MaxValue</a> is <a class=\"xref\" href=\"system.single#System_Single_PositiveInfinity\" data-linktype=\"relative-path\">PositiveInfinity</a>, and the result of an operation that overflows <a class=\"xref\" href=\"system.single#System_Single_MinValue\" data-linktype=\"relative-path\">System.Single.MinValue</a> is <a class=\"xref\" href=\"system.single#System_Single_NegativeInfinity\" data-linktype=\"relative-path\">NegativeInfinity</a>, as the following example shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Single.Structure#2\">Module Example\n   Public Sub Main()\n      Dim value1 As Single = 3.065e35\n      Dim value2 As Single = 6.9375e32\n      Dim result As Single = value1 * value2\n      Console.WriteLine(&quot;PositiveInfinity: {0}&quot;, \n                         Single.IsPositiveInfinity(result))\n      Console.WriteLine(&quot;NegativeInfinity: {0}&quot;, \n                        Single.IsNegativeInfinity(result))\n      Console.WriteLine()                  \n      value1 = -value1\n      result = value1 * value2\n      Console.WriteLine(&quot;PositiveInfinity: {0}&quot;, \n                         Single.IsPositiveInfinity(result))\n      Console.WriteLine(&quot;NegativeInfinity: {0}&quot;, \n                        Single.IsNegativeInfinity(result))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       PositiveInfinity: True\n&#39;       NegativeInfinity: False\n&#39;       \n&#39;       PositiveInfinity: False\n&#39;       NegativeInfinity: True\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Single.Structure#2\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      float value1 = 3.065e35f;\n      float value2 = 6.9375e32f;\n      float result = value1 * value2;\n      Console.WriteLine(&quot;PositiveInfinity: {0}&quot;, \n                         Single.IsPositiveInfinity(result));\n      Console.WriteLine(&quot;NegativeInfinity: {0}\\n&quot;, \n                        Single.IsNegativeInfinity(result));\n\n      value1 = -value1;\n      result = value1 * value2;\n      Console.WriteLine(&quot;PositiveInfinity: {0}&quot;, \n                         Single.IsPositiveInfinity(result));\n      Console.WriteLine(&quot;NegativeInfinity: {0}&quot;, \n                        Single.IsNegativeInfinity(result));\n   }\n}                                                                 \n\n// The example displays the following output:\n//       PositiveInfinity: True\n//       NegativeInfinity: False\n//       \n//       PositiveInfinity: False\n//       NegativeInfinity: True\n</code></pre><p> <a class=\"xref\" href=\"system.single#System_Single_PositiveInfinity\" data-linktype=\"relative-path\">PositiveInfinity</a> also results from a division by zero with a positive dividend, and <a class=\"xref\" href=\"system.single#System_Single_NegativeInfinity\" data-linktype=\"relative-path\">NegativeInfinity</a> results from a division by zero with a negative dividend.  </p>\n</li>\n<li><p>If a floating-point operation is invalid, the result of the operation is <a class=\"xref\" href=\"system.single#System_Single_NaN\" data-linktype=\"relative-path\">NaN</a>. For example, <a class=\"xref\" href=\"system.single#System_Single_NaN\" data-linktype=\"relative-path\">NaN</a> results from the following operations:  </p>\n<ul>\n<li><p>Division by zero with a dividend of zero. Note that other cases of division by zero result in either <a class=\"xref\" href=\"system.single#System_Single_PositiveInfinity\" data-linktype=\"relative-path\">PositiveInfinity</a> or <a class=\"xref\" href=\"system.single#System_Single_NegativeInfinity\" data-linktype=\"relative-path\">NegativeInfinity</a>.  </p>\n</li>\n<li><p>Any floating-point operation with invalid input. For example, attempting to find the square root of a negative value returns <a class=\"xref\" href=\"system.single#System_Single_NaN\" data-linktype=\"relative-path\">NaN</a>.  </p>\n</li>\n<li><p>Any operation with an argument whose value is <a class=\"xref\" href=\"system.single#System_Single_NaN\" data-linktype=\"relative-path\">System.Single.NaN</a>.  </p>\n</li>\n</ul>\n</li>\n</ul>\n<p><a name=\"Conversion\"></a>   </p>\n<h2 id=\"type-conversions-and-the-single-structure\">Type conversions and the Single structure</h2>\n<p> The Single structure does not define any explicit or implicit conversion operators; instead, conversions are implemented by the compiler.  </p>\n<p> The following table lists the possible conversions of a value of the other primitive numeric types to a Single value, It also indicates whether the conversion is widening or narrowing and whether the resulting Single may have less precision than the original value.  </p>\n<table>\n<thead>\n<tr>\n<th>Conversion from</th>\n<th>Widening/narrowing</th>\n<th>Possible loss of precision</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></td>\n<td>Widening</td>\n<td>No</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></td>\n<td>Widening<br><br> Note that C# requires a cast operator.</td>\n<td>Yes. <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> supports 29 decimal digits of precision; Single supports 9.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></td>\n<td>Narrowing; out-of-range values are converted to <a class=\"xref\" href=\"system.double#System_Double_NegativeInfinity\" data-linktype=\"relative-path\">System.Double.NegativeInfinity</a> or <a class=\"xref\" href=\"system.double#System_Double_PositiveInfinity\" data-linktype=\"relative-path\">System.Double.PositiveInfinity</a>.</td>\n<td>Yes. <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> supports 17 decimal digits of precision; Single supports 9.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></td>\n<td>Widening</td>\n<td>No</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></td>\n<td>Widening</td>\n<td>Yes. <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> supports 10 decimal digits of precision; Single supports 9.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></td>\n<td>Widening</td>\n<td>Yes. <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> supports 19 decimal digits of precision; Single supports 9.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></td>\n<td>Widening</td>\n<td>No</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></td>\n<td>Widening</td>\n<td>No</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></td>\n<td>Widening</td>\n<td>Yes. <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a> supports 10 decimal digits of precision; Single supports 9.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></td>\n<td>Widening</td>\n<td>Yes. <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> supports 20 decimal digits of precision; Single supports 9.</td>\n</tr>\n</tbody>\n</table>\n<p> The following example converts the minimum or maximum value of other primitive numeric types to a Single value.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Single.Structure#20\">Module Example\n   Public Sub Main()\n      Dim values() As Object = { Byte.MinValue, Byte.MaxValue, Decimal.MinValue,\n                                 Decimal.MaxValue, Double.MinValue, Double.MaxValue,\n                                 Int16.MinValue, Int16.MaxValue, Int32.MinValue,\n                                 Int32.MaxValue, Int64.MinValue, Int64.MaxValue,\n                                 SByte.MinValue, SByte.MaxValue, UInt16.MinValue,\n                                 UInt16.MaxValue, UInt32.MinValue, UInt32.MaxValue,\n                                 UInt64.MinValue, UInt64.MaxValue }\n      Dim sngValue As Single\n      For Each value In values\n         If value.GetType() = GetType(Double) Then\n            sngValue = CSng(value)\n         Else\n            sngValue = value\n         End If\n         Console.WriteLine(&quot;{0} ({1}) --&gt; {2:R} ({3})&quot;,\n                           value, value.GetType().Name,\n                           sngValue, sngValue.GetType().Name)\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       0 (Byte) --&gt; 0 (Single)\n&#39;       255 (Byte) --&gt; 255 (Single)\n&#39;       -79228162514264337593543950335 (Decimal) --&gt; -7.92281625E+28 (Single)\n&#39;       79228162514264337593543950335 (Decimal) --&gt; 7.92281625E+28 (Single)\n&#39;       -1.79769313486232E+308 (Double) --&gt; -Infinity (Single)\n&#39;       1.79769313486232E+308 (Double) --&gt; Infinity (Single)\n&#39;       -32768 (Int16) --&gt; -32768 (Single)\n&#39;       32767 (Int16) --&gt; 32767 (Single)\n&#39;       -2147483648 (Int32) --&gt; -2.14748365E+09 (Single)\n&#39;       2147483647 (Int32) --&gt; 2.14748365E+09 (Single)\n&#39;       -9223372036854775808 (Int64) --&gt; -9.223372E+18 (Single)\n&#39;       9223372036854775807 (Int64) --&gt; 9.223372E+18 (Single)\n&#39;       -128 (SByte) --&gt; -128 (Single)\n&#39;       127 (SByte) --&gt; 127 (Single)\n&#39;       0 (UInt16) --&gt; 0 (Single)\n&#39;       65535 (UInt16) --&gt; 65535 (Single)\n&#39;       0 (UInt32) --&gt; 0 (Single)\n&#39;       4294967295 (UInt32) --&gt; 4.2949673E+09 (Single)\n&#39;       0 (UInt64) --&gt; 0 (Single)\n&#39;       18446744073709551615 (UInt64) --&gt; 1.84467441E+19 (Single)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Single.Structure#20\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      dynamic[] values = { Byte.MinValue, Byte.MaxValue, Decimal.MinValue,\n                           Decimal.MaxValue, Double.MinValue, Double.MaxValue,\n                           Int16.MinValue, Int16.MaxValue, Int32.MinValue,\n                           Int32.MaxValue, Int64.MinValue, Int64.MaxValue,\n                           SByte.MinValue, SByte.MaxValue, UInt16.MinValue,\n                           UInt16.MaxValue, UInt32.MinValue, UInt32.MaxValue,\n                           UInt64.MinValue, UInt64.MaxValue };\n      float sngValue;\n      foreach (var value in values) {\n         if (value.GetType() == typeof(Decimal) ||\n             value.GetType() == typeof(Double))\n            sngValue = (float) value;\n         else\n            sngValue = value;\n         Console.WriteLine(&quot;{0} ({1}) --&gt; {2:R} ({3})&quot;,\n                           value, value.GetType().Name,\n                           sngValue, sngValue.GetType().Name);\n      }\n   }\n}\n// The example displays the following output:\n//       0 (Byte) --&gt; 0 (Single)\n//       255 (Byte) --&gt; 255 (Single)\n//       -79228162514264337593543950335 (Decimal) --&gt; -7.92281625E+28 (Single)\n//       79228162514264337593543950335 (Decimal) --&gt; 7.92281625E+28 (Single)\n//       -1.79769313486232E+308 (Double) --&gt; -Infinity (Single)\n//       1.79769313486232E+308 (Double) --&gt; Infinity (Single)\n//       -32768 (Int16) --&gt; -32768 (Single)\n//       32767 (Int16) --&gt; 32767 (Single)\n//       -2147483648 (Int32) --&gt; -2.14748365E+09 (Single)\n//       2147483647 (Int32) --&gt; 2.14748365E+09 (Single)\n//       -9223372036854775808 (Int64) --&gt; -9.223372E+18 (Single)\n//       9223372036854775807 (Int64) --&gt; 9.223372E+18 (Single)\n//       -128 (SByte) --&gt; -128 (Single)\n//       127 (SByte) --&gt; 127 (Single)\n//       0 (UInt16) --&gt; 0 (Single)\n//       65535 (UInt16) --&gt; 65535 (Single)\n//       0 (UInt32) --&gt; 0 (Single)\n//       4294967295 (UInt32) --&gt; 4.2949673E+09 (Single)\n//       0 (UInt64) --&gt; 0 (Single)\n//       18446744073709551615 (UInt64) --&gt; 1.84467441E+19 (Single)\n</code></pre><p> In addition, the <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values <a class=\"xref\" href=\"system.double#System_Double_NaN\" data-linktype=\"relative-path\">System.Double.NaN</a>, <a class=\"xref\" href=\"system.double#System_Double_PositiveInfinity\" data-linktype=\"relative-path\">System.Double.PositiveInfinity</a>, and <a class=\"xref\" href=\"system.double#System_Double_NegativeInfinity\" data-linktype=\"relative-path\">System.Double.NegativeInfinity</a> covert to <a class=\"xref\" href=\"system.single#System_Single_NaN\" data-linktype=\"relative-path\">System.Single.NaN</a>, <a class=\"xref\" href=\"system.single#System_Single_PositiveInfinity\" data-linktype=\"relative-path\">System.Single.PositiveInfinity</a>, and <a class=\"xref\" href=\"system.single#System_Single_NegativeInfinity\" data-linktype=\"relative-path\">System.Single.NegativeInfinity</a>, respectively.  </p>\n<p> Note that the conversion of the value of some numeric types to a Single value can involve a loss of precision. As the example illustrates, a loss of precision is possible when converting <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>, <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>, <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>, <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>, <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a>, and <a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a> values to Single values.  </p>\n<p> The conversion of a Single value to a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> is a widening conversion. The conversion may result in a loss of precision if the <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> type does not have a precise representation for the Single value.  </p>\n<p> The conversion of a Single value to a value of any primitive numeric data type other than a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> is a narrowing conversion and requires a cast operator (in C#) or a conversion method (in Visual Basic). Values that are outside the range of the target data type, which are defined by the target type&#39;s <code>MinValue</code> and <code>MaxValue</code> properties, behave as shown in the following table.  </p>\n<table>\n<thead>\n<tr>\n<th>Target type</th>\n<th>Result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Any integral type</td>\n<td>An <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> exception if the conversion occurs in a checked context.<br><br> If the conversion occurs in an unchecked context (the default in C#), the conversion operation succeeds but the value overflows.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></td>\n<td>An <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> exception,</td>\n</tr>\n</tbody>\n</table>\n<p> In addition, <a class=\"xref\" href=\"system.single#System_Single_NaN\" data-linktype=\"relative-path\">System.Single.NaN</a>, <a class=\"xref\" href=\"system.single#System_Single_PositiveInfinity\" data-linktype=\"relative-path\">System.Single.PositiveInfinity</a>, and <a class=\"xref\" href=\"system.single#System_Single_NegativeInfinity\" data-linktype=\"relative-path\">System.Single.NegativeInfinity</a> throw an <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> for conversions to integers in a checked context, but these values overflow when converted to integers in an unchecked context. For conversions to <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>, they always throw an <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a>. For conversions to <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>, they convert to <a class=\"xref\" href=\"system.double#System_Double_NaN\" data-linktype=\"relative-path\">System.Double.NaN</a>, <a class=\"xref\" href=\"system.double#System_Double_PositiveInfinity\" data-linktype=\"relative-path\">System.Double.PositiveInfinity</a>, and <a class=\"xref\" href=\"system.double#System_Double_NegativeInfinity\" data-linktype=\"relative-path\">System.Double.NegativeInfinity</a>, respectively.  </p>\n<p> Note that a loss of precision may result from converting a Single value to another numeric type. In the case of converting non-integral <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values, as the output from the example shows, the fractional component is lost when the Single value is either rounded (as in Visual Basic) or truncated (as in C#). For conversions to <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> and Single values, the <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> value may not have a precise representation in the target data type.  </p>\n<p> The following example converts a number of Single values to several other numeric types. The conversions occur in a checked context in Visual Basic (the default) and in C# (because of the <a href=\"../Topic/checked%20(C%23%20Reference).md\" data-linktype=\"relative-path\">checked</a> keyword). The output from the example shows the result for conversions in both a checked an unchecked context. You can perform conversions in an unchecked context in Visual Basic by compiling with the <code>/removeintchecks+</code> compiler switch and in C# by commenting out the <code>checked</code> statement.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Single.Structure#21\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      float[] values = { Single.MinValue, -67890.1234f, -12345.6789f,\n                         12345.6789f, 67890.1234f, Single.MaxValue,\n                         Single.NaN, Single.PositiveInfinity,\n                         Single.NegativeInfinity };\n      checked {\n         foreach (var value in values) {\n            try {\n                Int64 lValue = (long) value;\n                Console.WriteLine(&quot;{0} ({1}) --&gt; {2} (0x{2:X16}) ({3})&quot;,\n                                  value, value.GetType().Name,\n                                  lValue, lValue.GetType().Name);\n            }\n            catch (OverflowException) {\n               Console.WriteLine(&quot;Unable to convert {0} to Int64.&quot;, value);\n            }\n            try {\n                UInt64 ulValue = (ulong) value;\n                Console.WriteLine(&quot;{0} ({1}) --&gt; {2} (0x{2:X16}) ({3})&quot;,\n                                  value, value.GetType().Name,\n                                  ulValue, ulValue.GetType().Name);\n            }\n            catch (OverflowException) {\n               Console.WriteLine(&quot;Unable to convert {0} to UInt64.&quot;, value);\n            }\n            try {\n                Decimal dValue = (decimal) value;\n                Console.WriteLine(&quot;{0} ({1}) --&gt; {2} ({3})&quot;,\n                                  value, value.GetType().Name,\n                                  dValue, dValue.GetType().Name);\n            }\n            catch (OverflowException) {\n               Console.WriteLine(&quot;Unable to convert {0} to Decimal.&quot;, value);\n            }\n\n            Double dblValue = value;\n            Console.WriteLine(&quot;{0} ({1}) --&gt; {2} ({3})&quot;,\n                              value, value.GetType().Name,\n                              dblValue, dblValue.GetType().Name);\n            Console.WriteLine();\n         }\n      }\n   }\n}\n// The example displays the following output for conversions performed\n// in a checked context:\n//       Unable to convert -3.402823E+38 to Int64.\n//       Unable to convert -3.402823E+38 to UInt64.\n//       Unable to convert -3.402823E+38 to Decimal.\n//       -3.402823E+38 (Single) --&gt; -3.40282346638529E+38 (Double)\n//\n//       -67890.13 (Single) --&gt; -67890 (0xFFFFFFFFFFFEF6CE) (Int64)\n//       Unable to convert -67890.13 to UInt64.\n//       -67890.13 (Single) --&gt; -67890.12 (Decimal)\n//       -67890.13 (Single) --&gt; -67890.125 (Double)\n//\n//       -12345.68 (Single) --&gt; -12345 (0xFFFFFFFFFFFFCFC7) (Int64)\n//       Unable to convert -12345.68 to UInt64.\n//       -12345.68 (Single) --&gt; -12345.68 (Decimal)\n//       -12345.68 (Single) --&gt; -12345.6787109375 (Double)\n//\n//       12345.68 (Single) --&gt; 12345 (0x0000000000003039) (Int64)\n//       12345.68 (Single) --&gt; 12345 (0x0000000000003039) (UInt64)\n//       12345.68 (Single) --&gt; 12345.68 (Decimal)\n//       12345.68 (Single) --&gt; 12345.6787109375 (Double)\n//\n//       67890.13 (Single) --&gt; 67890 (0x0000000000010932) (Int64)\n//       67890.13 (Single) --&gt; 67890 (0x0000000000010932) (UInt64)\n//       67890.13 (Single) --&gt; 67890.12 (Decimal)\n//       67890.13 (Single) --&gt; 67890.125 (Double)\n//\n//       Unable to convert 3.402823E+38 to Int64.\n//       Unable to convert 3.402823E+38 to UInt64.\n//       Unable to convert 3.402823E+38 to Decimal.\n//       3.402823E+38 (Single) --&gt; 3.40282346638529E+38 (Double)\n//\n//       Unable to convert NaN to Int64.\n//       Unable to convert NaN to UInt64.\n//       Unable to convert NaN to Decimal.\n//       NaN (Single) --&gt; NaN (Double)\n//\n//       Unable to convert Infinity to Int64.\n//       Unable to convert Infinity to UInt64.\n//       Unable to convert Infinity to Decimal.\n//       Infinity (Single) --&gt; Infinity (Double)\n//\n//       Unable to convert -Infinity to Int64.\n//       Unable to convert -Infinity to UInt64.\n//       Unable to convert -Infinity to Decimal.\n//       -Infinity (Single) --&gt; -Infinity (Double)\n// The example displays the following output for conversions performed\n// in an unchecked context:\n//       -3.402823E+38 (Single) --&gt; -9223372036854775808 (0x8000000000000000) (Int64)\n//       -3.402823E+38 (Single) --&gt; 9223372036854775808 (0x8000000000000000) (UInt64)\n//       Unable to convert -3.402823E+38 to Decimal.\n//       -3.402823E+38 (Single) --&gt; -3.40282346638529E+38 (Double)\n//\n//       -67890.13 (Single) --&gt; -67890 (0xFFFFFFFFFFFEF6CE) (Int64)\n//       -67890.13 (Single) --&gt; 18446744073709483726 (0xFFFFFFFFFFFEF6CE) (UInt64)\n//       -67890.13 (Single) --&gt; -67890.12 (Decimal)\n//       -67890.13 (Single) --&gt; -67890.125 (Double)\n//\n//       -12345.68 (Single) --&gt; -12345 (0xFFFFFFFFFFFFCFC7) (Int64)\n//       -12345.68 (Single) --&gt; 18446744073709539271 (0xFFFFFFFFFFFFCFC7) (UInt64)\n//       -12345.68 (Single) --&gt; -12345.68 (Decimal)\n//       -12345.68 (Single) --&gt; -12345.6787109375 (Double)\n//\n//       12345.68 (Single) --&gt; 12345 (0x0000000000003039) (Int64)\n//       12345.68 (Single) --&gt; 12345 (0x0000000000003039) (UInt64)\n//       12345.68 (Single) --&gt; 12345.68 (Decimal)\n//       12345.68 (Single) --&gt; 12345.6787109375 (Double)\n//\n//       67890.13 (Single) --&gt; 67890 (0x0000000000010932) (Int64)\n//       67890.13 (Single) --&gt; 67890 (0x0000000000010932) (UInt64)\n//       67890.13 (Single) --&gt; 67890.12 (Decimal)\n//       67890.13 (Single) --&gt; 67890.125 (Double)\n//\n//       3.402823E+38 (Single) --&gt; -9223372036854775808 (0x8000000000000000) (Int64)\n//       3.402823E+38 (Single) --&gt; 0 (0x0000000000000000) (UInt64)\n//       Unable to convert 3.402823E+38 to Decimal.\n//       3.402823E+38 (Single) --&gt; 3.40282346638529E+38 (Double)\n//\n//       NaN (Single) --&gt; -9223372036854775808 (0x8000000000000000) (Int64)\n//       NaN (Single) --&gt; 0 (0x0000000000000000) (UInt64)\n//       Unable to convert NaN to Decimal.\n//       NaN (Single) --&gt; NaN (Double)\n//\n//       Infinity (Single) --&gt; -9223372036854775808 (0x8000000000000000) (Int64)\n//       Infinity (Single) --&gt; 0 (0x0000000000000000) (UInt64)\n//       Unable to convert Infinity to Decimal.\n//       Infinity (Single) --&gt; Infinity (Double)\n//\n//       -Infinity (Single) --&gt; -9223372036854775808 (0x8000000000000000) (Int64)\n//       -Infinity (Single) --&gt; 9223372036854775808 (0x8000000000000000) (UInt64)\n//       Unable to convert -Infinity to Decimal.\n//       -Infinity (Single) --&gt; -Infinity (Double)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Single.Structure#21\">Module Example\n   Public Sub Main()\n      Dim values() As Single = { Single.MinValue, -67890.1234, -12345.6789,\n                                 12345.6789, 67890.1234, Single.MaxValue,\n                                 Single.NaN, Single.PositiveInfinity,\n                                 Single.NegativeInfinity }\n      For Each value In values\n         Try\n             Dim lValue As Long = CLng(value)\n             Console.WriteLine(&quot;{0} ({1}) --&gt; {2} (0x{2:X16}) ({3})&quot;,\n                               value, value.GetType().Name,\n                               lValue, lValue.GetType().Name)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;Unable to convert {0} to Int64.&quot;, value)\n         End Try\n         Try\n             Dim ulValue As UInt64 = CULng(value)\n             Console.WriteLine(&quot;{0} ({1}) --&gt; {2} (0x{2:X16}) ({3})&quot;,\n                               value, value.GetType().Name,\n                               ulValue, ulValue.GetType().Name)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;Unable to convert {0} to UInt64.&quot;, value)\n         End Try\n         Try\n             Dim dValue As Decimal = CDec(value)\n             Console.WriteLine(&quot;{0} ({1}) --&gt; {2} ({3})&quot;,\n                               value, value.GetType().Name,\n                               dValue, dValue.GetType().Name)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;Unable to convert {0} to Decimal.&quot;, value)\n         End Try\n\n         Dim dblValue As Double = value\n         Console.WriteLine(&quot;{0} ({1}) --&gt; {2} ({3})&quot;,\n                           value, value.GetType().Name,\n                           dblValue, dblValue.GetType().Name)\n         Console.WriteLine()\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output for conversions performed\n&#39; in a checked context:\n&#39;       Unable to convert -3.402823E+38 to Int64.\n&#39;       Unable to convert -3.402823E+38 to UInt64.\n&#39;       Unable to convert -3.402823E+38 to Decimal.\n&#39;       -3.402823E+38 (Single) --&gt; -3.40282346638529E+38 (Double)\n&#39;\n&#39;       -67890.13 (Single) --&gt; -67890 (0xFFFFFFFFFFFEF6CE) (Int64)\n&#39;       Unable to convert -67890.13 to UInt64.\n&#39;       -67890.13 (Single) --&gt; -67890.12 (Decimal)\n&#39;       -67890.13 (Single) --&gt; -67890.125 (Double)\n&#39;\n&#39;       -12345.68 (Single) --&gt; -12346 (0xFFFFFFFFFFFFCFC6) (Int64)\n&#39;       Unable to convert -12345.68 to UInt64.\n&#39;       -12345.68 (Single) --&gt; -12345.68 (Decimal)\n&#39;       -12345.68 (Single) --&gt; -12345.6787109375 (Double)\n&#39;\n&#39;       12345.68 (Single) --&gt; 12346 (0x000000000000303A) (Int64)\n&#39;       12345.68 (Single) --&gt; 12346 (0x000000000000303A) (UInt64)\n&#39;       12345.68 (Single) --&gt; 12345.68 (Decimal)\n&#39;       12345.68 (Single) --&gt; 12345.6787109375 (Double)\n&#39;\n&#39;       67890.13 (Single) --&gt; 67890 (0x0000000000010932) (Int64)\n&#39;       67890.13 (Single) --&gt; 67890 (0x0000000000010932) (UInt64)\n&#39;       67890.13 (Single) --&gt; 67890.12 (Decimal)\n&#39;       67890.13 (Single) --&gt; 67890.125 (Double)\n&#39;\n&#39;       Unable to convert 3.402823E+38 to Int64.\n&#39;       Unable to convert 3.402823E+38 to UInt64.\n&#39;       Unable to convert 3.402823E+38 to Decimal.\n&#39;       3.402823E+38 (Single) --&gt; 3.40282346638529E+38 (Double)\n&#39;\n&#39;       Unable to convert NaN to Int64.\n&#39;       Unable to convert NaN to UInt64.\n&#39;       Unable to convert NaN to Decimal.\n&#39;       NaN (Single) --&gt; NaN (Double)\n&#39;\n&#39;       Unable to convert Infinity to Int64.\n&#39;       Unable to convert Infinity to UInt64.\n&#39;       Unable to convert Infinity to Decimal.\n&#39;       Infinity (Single) --&gt; Infinity (Double)\n&#39;\n&#39;       Unable to convert -Infinity to Int64.\n&#39;       Unable to convert -Infinity to UInt64.\n&#39;       Unable to convert -Infinity to Decimal.\n&#39;       -Infinity (Single) --&gt; -Infinity (Double)\n&#39; The example displays the following output for conversions performed\n&#39; in an unchecked context:\n&#39;       -3.402823E+38 (Single) --&gt; -9223372036854775808 (0x8000000000000000) (Int64)\n&#39;       -3.402823E+38 (Single) --&gt; 9223372036854775808 (0x8000000000000000) (UInt64)\n&#39;       Unable to convert -3.402823E+38 to Decimal.\n&#39;       -3.402823E+38 (Single) --&gt; -3.40282346638529E+38 (Double)\n&#39;\n&#39;       -67890.13 (Single) --&gt; -67890 (0xFFFFFFFFFFFEF6CE) (Int64)\n&#39;       -67890.13 (Single) --&gt; 18446744073709483726 (0xFFFFFFFFFFFEF6CE) (UInt64)\n&#39;       -67890.13 (Single) --&gt; -67890.12 (Decimal)\n&#39;       -67890.13 (Single) --&gt; -67890.125 (Double)\n&#39;\n&#39;       -12345.68 (Single) --&gt; -12346 (0xFFFFFFFFFFFFCFC6) (Int64)\n&#39;       -12345.68 (Single) --&gt; 18446744073709539270 (0xFFFFFFFFFFFFCFC6) (UInt64)\n&#39;       -12345.68 (Single) --&gt; -12345.68 (Decimal)\n&#39;       -12345.68 (Single) --&gt; -12345.6787109375 (Double)\n&#39;\n&#39;       12345.68 (Single) --&gt; 12346 (0x000000000000303A) (Int64)\n&#39;       12345.68 (Single) --&gt; 12346 (0x000000000000303A) (UInt64)\n&#39;       12345.68 (Single) --&gt; 12345.68 (Decimal)\n&#39;       12345.68 (Single) --&gt; 12345.6787109375 (Double)\n&#39;\n&#39;       67890.13 (Single) --&gt; 67890 (0x0000000000010932) (Int64)\n&#39;       67890.13 (Single) --&gt; 67890 (0x0000000000010932) (UInt64)\n&#39;       67890.13 (Single) --&gt; 67890.12 (Decimal)\n&#39;       67890.13 (Single) --&gt; 67890.125 (Double)\n&#39;\n&#39;       3.402823E+38 (Single) --&gt; -9223372036854775808 (0x8000000000000000) (Int64)\n&#39;       3.402823E+38 (Single) --&gt; 0 (0x0000000000000000) (UInt64)\n&#39;       Unable to convert 3.402823E+38 to Decimal.\n&#39;       3.402823E+38 (Single) --&gt; 3.40282346638529E+38 (Double)\n&#39;\n&#39;       NaN (Single) --&gt; -9223372036854775808 (0x8000000000000000) (Int64)\n&#39;       NaN (Single) --&gt; 0 (0x0000000000000000) (UInt64)\n&#39;       Unable to convert NaN to Decimal.\n&#39;       NaN (Single) --&gt; NaN (Double)\n&#39;\n&#39;       Infinity (Single) --&gt; -9223372036854775808 (0x8000000000000000) (Int64)\n&#39;       Infinity (Single) --&gt; 0 (0x0000000000000000) (UInt64)\n&#39;       Unable to convert Infinity to Decimal.\n&#39;       Infinity (Single) --&gt; Infinity (Double)\n&#39;\n&#39;       -Infinity (Single) --&gt; -9223372036854775808 (0x8000000000000000) (Int64)\n&#39;       -Infinity (Single) --&gt; 9223372036854775808 (0x8000000000000000) (UInt64)\n&#39;       Unable to convert -Infinity to Decimal.\n&#39;       -Infinity (Single) --&gt; -Infinity (Double)\n</code></pre><p> For more information on the conversion of numeric types, see <a href=\"../Topic/Type%20Conversion%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Type Conversion in the .NET Framework</a> and <a href=\"../Topic/Type%20Conversion%20Tables%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Type Conversion Tables</a>.  </p>\n<p><a name=\"Functionality\"></a>   </p>\n<h2 id=\"floating-point-functionality\">Floating-point functionality</h2>\n<p> The Single structure and related types provide methods to perform the following categories of operations:  </p>\n<ul>\n<li><p><strong>Comparison of values</strong>. You can call the <a class=\"xref\" href=\"system.single#System_Single_Equals_\" data-linktype=\"relative-path\">Equals</a> method to determine whether two Single values are equal, or the <a class=\"xref\" href=\"system.single#System_Single_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> method to determine the relationship between two values.  </p>\n<p> The Single structure also supports a complete set of comparison operators. For example, you can test for equality or inequality, or determine whether one value is greater than or equal to another value. If one of the operands is a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>, the Single value is converted to a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> before performing the comparison. If one of the operands is an integral type, it is converted to a Single before performing the comparison. Although these are widening conversions, they may involve a loss of precision.  </p>\n<div class=\"WARNING\"><h5>Warning</h5><p> Because of differences in precision, two Single values that you expect to be equal may turn out to be unequal, which affects the result of the comparison. See the <a href=\"#Equality\" data-linktype=\"self-bookmark\">Testing for equality</a> section for more information about comparing two Single values.  </p>\n</div>\n<p> You can also call the <a class=\"xref\" href=\"system.single#System_Single_IsNaN_\" data-linktype=\"relative-path\">IsNaN</a>, <a class=\"xref\" href=\"system.single#System_Single_IsInfinity_\" data-linktype=\"relative-path\">IsInfinity</a>, <a class=\"xref\" href=\"system.single#System_Single_IsPositiveInfinity_\" data-linktype=\"relative-path\">IsPositiveInfinity</a>, and <a class=\"xref\" href=\"system.single#System_Single_IsNegativeInfinity_\" data-linktype=\"relative-path\">IsNegativeInfinity</a> methods to test for these special values.  </p>\n</li>\n<li><p><strong>Mathematical operations</strong>. Common arithmetic operations such as addition, subtraction, multiplication, and division are implemented by language compilers and Common Intermediate Language (CIL) instructions rather than by Single methods. If the other operand in a mathematical operation is a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>, the Single is converted to a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> before performing the operation, and the result of the operation is also a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> value. If the other operand is an integral type, it is converted to a Single before performing the operation, and the result of the operation is also a Single value.  </p>\n<p> You can perform other mathematical operations by calling <code>static</code> (<code>Shared</code> in Visual Basic) methods in the <a class=\"xref\" href=\"system.math\" data-linktype=\"relative-path\">System.Math</a> class. These include additional methods commonly used for arithmetic (such as <a class=\"xref\" href=\"system.math#System_Math_Abs_\" data-linktype=\"relative-path\">Abs</a>, <a class=\"xref\" href=\"system.math#System_Math_Sign_\" data-linktype=\"relative-path\">Sign</a>, and <a class=\"xref\" href=\"system.math#System_Math_Sqrt_\" data-linktype=\"relative-path\">Sqrt</a>), geometry (such as <a class=\"xref\" href=\"system.math#System_Math_Cos_\" data-linktype=\"relative-path\">Cos</a> and <a class=\"xref\" href=\"system.math#System_Math_Sin_\" data-linktype=\"relative-path\">Sin</a>), and calculus (such as <a class=\"xref\" href=\"system.math#System_Math_Log_\" data-linktype=\"relative-path\">Log</a>).  In all cases, the Single value is converted to a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>.  </p>\n<p> You can also manipulate the individual bits in a Single value. The <a class=\"xref\" href=\"system.bitconverter#System_BitConverter_GetBytes_System_Single_\" data-linktype=\"relative-path\">System.BitConverter.GetBytes(Single)</a> method returns its bit pattern in a byte array.  By passing that byte array to the <a class=\"xref\" href=\"system.bitconverter#System_BitConverter_ToInt32_\" data-linktype=\"relative-path\">ToInt32</a> method, you can also preserve the Single value&#39;s bit pattern in a 32-bit integer.  </p>\n</li>\n<li><p><strong>Rounding</strong>. Rounding is often used as a technique for reducing the impact of differences between values caused by problems of floating-point representation and precision. You can round a Single value by calling the <a class=\"xref\" href=\"system.math#System_Math_Round_\" data-linktype=\"relative-path\">Round</a> method. However, note  that the Single value is converted to a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> before the method is called, and the conversion can involve a loss of precision.  </p>\n</li>\n<li><p><strong>Formatting</strong>. You can convert a Single value to its string representation by calling the <a class=\"xref\" href=\"system.single#System_Single_ToString_\" data-linktype=\"relative-path\">ToString</a> method or by using the <a href=\"../Topic/Composite%20Formatting.md\" data-linktype=\"relative-path\">composite formatting</a> feature. For information about how format strings control the string representation of floating-point values, see the <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Numeric Format Strings</a> and <a href=\"../Topic/Custom%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Numeric Format Strings</a> topics.  </p>\n</li>\n<li><p><strong>Parsing strings</strong>. You can convert the string representation of a floating-point value to a Single value by calling the <a class=\"xref\" href=\"system.single#System_Single_Parse_\" data-linktype=\"relative-path\">Parse</a> or <a class=\"xref\" href=\"system.single#System_Single_TryParse_\" data-linktype=\"relative-path\">TryParse</a> method. If the parse operation fails, the <a class=\"xref\" href=\"system.single#System_Single_Parse_\" data-linktype=\"relative-path\">Parse</a> method throws an exception, whereas the <a class=\"xref\" href=\"system.single#System_Single_TryParse_\" data-linktype=\"relative-path\">TryParse</a> method returns <code>false</code>.  </p>\n</li>\n<li><p><strong>Type conversion</strong>. The Single structure provides an explicit interface implementation for the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface, which supports conversion between any two standard .NET Framework data types. Language compilers also support the implicit conversion of values for all other standard numeric types except for the conversion of <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> to Single values. Conversion of a value of any standard numeric type other than a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> to a Single is a widening conversion and does not require the use of a casting operator or conversion method.  </p>\n<p> However, conversion of 32-bit and 64-bit integer values can involve a loss of precision. The following table lists the differences in precision for 32-bit, 64-bit, and <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> types:  </p>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>Maximum precision (in decimal digits)</th>\n<th>Internal precision (in decimal digits)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></td>\n<td>15</td>\n<td>17</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> and <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> and <a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></td>\n<td>19</td>\n<td>19</td>\n</tr>\n<tr>\n<td>Single</td>\n<td>7</td>\n<td>9</td>\n</tr>\n</tbody>\n</table>\n<p> The problem of precision most frequently affects Single values that are converted to <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values. In the following example, two values produced by identical division operations are unequal, because one of the values is a single-precision floating point value that is converted to a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Single.Structure#5\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Double value1 = 1/3.0;\n      Single sValue2 = 1/3.0f;\n      Double value2 = (Double) sValue2;\n      Console.WriteLine(&quot;{0:R} = {1:R}: {2}&quot;, value1, value2, \n                                          value1.Equals(value2));\n   }\n}\n// The example displays the following output:\n//        0.33333333333333331 = 0.3333333432674408: False\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Single.Structure#5\">Module Example\n   Public Sub Main()\n      Dim value1 As Double = 1/3\n      Dim sValue2 As Single = 1/3\n      Dim value2 As Double = CDbl(sValue2)\n      Console.WriteLine(&quot;{0} = {1}: {2}&quot;, value1, value2, value1.Equals(value2))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       0.33333333333333331 = 0.3333333432674408: False\n</code></pre></li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Fields\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Single_Epsilon\" data-linktype=\"self-bookmark\">Epsilon</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the smallest positive <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value that is greater than zero. This field is constant.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Single_MaxValue\" data-linktype=\"self-bookmark\">MaxValue</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the largest possible value of <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>. This field is constant.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Single_MinValue\" data-linktype=\"self-bookmark\">MinValue</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the smallest possible value of <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>. This field is constant.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Single_NaN\" data-linktype=\"self-bookmark\">NaN</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents not a number (<code>NaN</code>). This field is constant.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Single_NegativeInfinity\" data-linktype=\"self-bookmark\">NegativeInfinity</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents negative infinity. This field is constant.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Single_PositiveInfinity\" data-linktype=\"self-bookmark\">PositiveInfinity</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents positive infinity. This field is constant.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Single_CompareTo_System_Object_\" data-linktype=\"self-bookmark\">CompareTo(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Single_CompareTo_System_Single_\" data-linktype=\"self-bookmark\">CompareTo(Single)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares this instance to a specified single-precision floating-point number and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified single-precision floating-point number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Single_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value indicating whether this instance is equal to a specified object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Single_Equals_System_Single_\" data-linktype=\"self-bookmark\">Equals(Single)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value indicating whether this instance and a specified <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> object represent the same value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Single_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the hash code for this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Single_GetTypeCode\" data-linktype=\"self-bookmark\">GetTypeCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the <a class=\"xref\" href=\"system.typecode\" data-linktype=\"relative-path\">TypeCode</a> for value type <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Single_IsInfinity_System_Single_\" data-linktype=\"self-bookmark\">IsInfinity(Single)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value indicating whether the specified number evaluates to negative or positive infinity.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Single_IsNaN_System_Single_\" data-linktype=\"self-bookmark\">IsNaN(Single)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value that indicates whether the specified value is not a number (<a class=\"xref\" href=\"system.single#System_Single_NaN\" data-linktype=\"relative-path\">NaN</a>).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Single_IsNegativeInfinity_System_Single_\" data-linktype=\"self-bookmark\">IsNegativeInfinity(Single)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value indicating whether the specified number evaluates to negative infinity.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Single_IsPositiveInfinity_System_Single_\" data-linktype=\"self-bookmark\">IsPositiveInfinity(Single)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value indicating whether the specified number evaluates to positive infinity.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Single_Parse_System_String_\" data-linktype=\"self-bookmark\">Parse(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the string representation of a number to its single-precision floating-point number equivalent.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Single_Parse_System_String_System_Globalization_NumberStyles_\" data-linktype=\"self-bookmark\">Parse(String,NumberStyles)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the string representation of a number in a specified style to its single-precision floating-point number equivalent.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Single_Parse_System_String_System_IFormatProvider_\" data-linktype=\"self-bookmark\">Parse(String,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the string representation of a number in a specified culture-specific format to its single-precision floating-point number equivalent.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Single_Parse_System_String_System_Globalization_NumberStyles_System_IFormatProvider_\" data-linktype=\"self-bookmark\">Parse(String,NumberStyles,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the string representation of a number in a specified style and culture-specific format to its single-precision floating-point number equivalent.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Single_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the numeric value of this instance to its equivalent string representation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Single_ToString_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToString(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Single_ToString_System_String_\" data-linktype=\"self-bookmark\">ToString(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Single_ToString_System_String_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToString(String,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Single_TryParse_System_String_System_Single__\" data-linktype=\"self-bookmark\">TryParse(String,Single)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the string representation of a number to its single-precision floating-point number equivalent. A return value indicates whether the conversion succeeded or failed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Single_TryParse_System_String_System_Globalization_NumberStyles_System_IFormatProvider_System_Single__\" data-linktype=\"self-bookmark\">TryParse(String,NumberStyles,IFormatProvider,Single)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the string representation of a number in a specified style and culture-specific format to its single-precision floating-point number equivalent. A return value indicates whether the conversion succeeded or failed.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Operators\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Single_op_Equality_System_Single_System_Single_\" data-linktype=\"self-bookmark\">op_Equality(Single,Single)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value that indicates whether two specified <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values are equal.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Single_op_GreaterThan_System_Single_System_Single_\" data-linktype=\"self-bookmark\">op_GreaterThan(Single,Single)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value that indicates whether a specified <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value is greater than another specified <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Single_op_GreaterThanOrEqual_System_Single_System_Single_\" data-linktype=\"self-bookmark\">op_GreaterThanOrEqual(Single,Single)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value that indicates whether a specified <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value is greater than or equal to another specified <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Single_op_Inequality_System_Single_System_Single_\" data-linktype=\"self-bookmark\">op_Inequality(Single,Single)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value that indicates whether two specified <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values are not equal.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Single_op_LessThan_System_Single_System_Single_\" data-linktype=\"self-bookmark\">op_LessThan(Single,Single)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value that indicates whether a specified <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value is less than another specified <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Single_op_LessThanOrEqual_System_Single_System_Single_\" data-linktype=\"self-bookmark\">op_LessThanOrEqual(Single,Single)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value that indicates whether a specified <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value is less than or equal to another specified <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Single_System_IConvertible_ToBoolean_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToBoolean(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToBoolean*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Single_System_IConvertible_ToByte_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToByte(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToByte*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Single_System_IConvertible_ToChar_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToChar(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>This conversion is not supported. Attempting to use this method throws an <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Single_System_IConvertible_ToDateTime_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToDateTime(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>This conversion is not supported. Attempting to use this method throws an <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Single_System_IConvertible_ToDecimal_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToDecimal(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToDecimal*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Single_System_IConvertible_ToDouble_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToDouble(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToDouble*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Single_System_IConvertible_ToInt16_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToInt16(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToInt16*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Single_System_IConvertible_ToInt32_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToInt32(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToInt32*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Single_System_IConvertible_ToInt64_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToInt64(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToInt64*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Single_System_IConvertible_ToSByte_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToSByte(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToSByte*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Single_System_IConvertible_ToSingle_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToSingle(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToSingle*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Single_System_IConvertible_ToType_System_Type_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToType(Type,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToType*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Single_System_IConvertible_ToUInt16_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToUInt16(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToUInt16*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Single_System_IConvertible_ToUInt32_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToUInt32(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToUInt32*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Single_System_IConvertible_ToUInt64_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToUInt64(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToUInt64*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"fields\">\r\n        <h2>Fields\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Single_Epsilon\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Epsilon</div>        \r\n          </div>\r\n    \r\n            <p>Represents the smallest positive <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value that is greater than zero. This field is constant.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const float Epsilon = 1.401298E-45;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of the Epsilon property reflects the smallest positive <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value that is significant in numeric operations or comparisons when the value of the <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> instance is zero. For example, the following code shows that zero and Epsilon are considered to be unequal values, whereas zero and half the value of Epsilon are considered to be equal.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Single.Epsilon#5\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      float[] values = { 0f, Single.Epsilon, Single.Epsilon * .5f };\n      \n      for (int ctr = 0; ctr &lt;= values.Length - 2; ctr++)\n      {\n         for (int ctr2 = ctr + 1; ctr2 &lt;= values.Length - 1; ctr2++)\n         {\n            Console.WriteLine(&quot;{0:r} = {1:r}: {2}&quot;, \n                              values[ctr], values[ctr2],  \n                              values[ctr].Equals(values[ctr2]));\n         }\n         Console.WriteLine();\n      }      \n   }\n}\n// The example displays the following output:\n//       0 = 1.401298E-45: False\n//       0 = 0: True\n//       \n//       1.401298E-45 = 0: False\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Single.Epsilon#5\">Module Example\n   Public Sub Main()\n      Dim values() As Single = { 0, Single.Epsilon, Single.Epsilon * .5 }\n      \n      For ctr As Integer = 0 To values.Length - 2\n         For ctr2 As Integer = ctr + 1 To values.Length - 1\n            Console.WriteLine(&quot;{0:r} = {1:r}: {2}&quot;, _\n                              values(ctr), values(ctr2), _ \n                              values(ctr).Equals(values(ctr2)))\n         Next\n         Console.WriteLine()\n      Next      \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       0 = 1.401298E-45: False\n&#39;       0 = 0: True\n&#39;       \n&#39;       1.401298E-45 = 0: False\n</code></pre><p> More precisely, the single-precision floating-point format consists of a sign, a 23-bit mantissa or significand, and an 8-bit exponent. As the following example shows, zero has an exponent of -126 and a mantissa of 0. Epsilon has an exponent of -126 and a mantissa of 1. This means that Epsilon is the smallest positive <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value that is greater than zero and represents the smallest possible value and the smallest possible increment for a <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> whose exponent is -126.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Single.Epsilon#6\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      float[] values = { 0.0f, Single.Epsilon };\n      foreach (var value in values) {\n         Console.WriteLine(GetComponentParts(value));\n         Console.WriteLine();\n      }   \n   }\n\n   private static string GetComponentParts(float value)\n   {\n      string result = String.Format(&quot;{0:R}: &quot;, value);\n      int indent = result.Length;\n\n      // Convert the single to a 4-byte array.\n      byte[] bytes = BitConverter.GetBytes(value);\n      int formattedSingle = BitConverter.ToInt32(bytes, 0);\n      \n      // Get the sign bit (byte 3, bit 7).\n      result += String.Format(&quot;Sign: {0}\\n&quot;, \n                              (formattedSingle &gt;&gt; 31) != 0 ? &quot;1 (-)&quot; : &quot;0 (+)&quot;);\n\n      // Get the exponent (byte 2 bit 7 to byte 3, bits 6)\n      int exponent =  (formattedSingle &gt;&gt; 23) &amp; 0x000000FF;\n      int adjustment = (exponent != 0) ? 127 : 126;\n      result += String.Format(&quot;{0}Exponent: 0x{1:X4} ({1})\\n&quot;, new String(&#39; &#39;, indent), exponent - adjustment);\n\n      // Get the significand (bits 0-22)\n      long significand = exponent != 0 ? \n                         ((formattedSingle &amp; 0x007FFFFF) | 0x800000) : \n                         (formattedSingle &amp; 0x007FFFFF); \n      result += String.Format(&quot;{0}Mantissa: 0x{1:X13}\\n&quot;, new String(&#39; &#39;, indent), significand);    \n      return result;   \n   }\n}\n//       // The example displays the following output:\n//       0: Sign: 0 (+)\n//          Exponent: 0xFFFFFF82 (-126)\n//          Mantissa: 0x0000000000000\n//       \n//       \n//       1.401298E-45: Sign: 0 (+)\n//                     Exponent: 0xFFFFFF82 (-126)\n//                     Mantissa: 0x0000000000001\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Single.Epsilon#6\">Module Example\n   Public Sub Main()\n      Dim values() As Single = { 0.0, Single.Epsilon }\n      For Each value In values\n         Console.WriteLine(GetComponentParts(value))\n         Console.WriteLine()\n      Next   \n   End Sub\n\n   Private Function GetComponentParts(value As Single) As String\n      Dim result As String =  String.Format(&quot;{0:R}: &quot;, value)\n      Dim indent As Integer =  result.Length\n\n      &#39; Convert the single to an 8-byte array.\n      Dim bytes() As Byte = BitConverter.GetBytes(value)\n      Dim formattedSingle As Integer = BitConverter.ToInt32(bytes, 0)\n\n      &#39; Get the sign bit (byte 3, bit 7).\n      result += String.Format(&quot;Sign: {0}{1}&quot;, \n                              If(formattedSingle &gt;&gt; 31 &lt;&gt; 0, &quot;1 (-)&quot;, &quot;0 (+)&quot;),\n                              vbCrLf)\n\n      &#39; Get the exponent (byte 2 bit 7 to byte 3, bits 6)\n      Dim exponent As Integer =  (formattedSingle &gt;&gt; 23) And &amp;h000000FF\n      Dim adjustment As Integer = If(exponent &lt;&gt; 0, 127, 126)\n      result += String.Format(&quot;{0}Exponent: 0x{1:X4} ({1}){2}&quot;, \n                              New String(&quot; &quot;c, indent), exponent - adjustment,\n                              vbCrLf)\n\n      &#39; Get the significand (bits 0-22)\n      Dim significand As Long =  If(exponent &lt;&gt; 0, \n                         (formattedSingle And &amp;h007FFFFF) Or &amp;h800000, \n                         formattedSingle And &amp;h007FFFFF) \n      result += String.Format(&quot;{0}Mantissa: 0x{1:X13}{2}&quot;, \n                              New String(&quot; &quot;c, indent), significand, vbCrLf)    \n\n      Return result   \n   End Function\nEnd Module\n&#39; The example displays the following output:\n&#39;       0: Sign: 0 (+)\n&#39;          Exponent: 0xFFFFFF82 (-126)\n&#39;          Mantissa: 0x0000000000000\n&#39;       \n&#39;       \n&#39;       1.401298E-45: Sign: 0 (+)\n&#39;                     Exponent: 0xFFFFFF82 (-126)\n&#39;                     Mantissa: 0x0000000000001\n</code></pre><p> However, the Epsilon property is not a general measure of precision of the <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> type; it applies only to <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> instances that have a value of zero.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The value of the Epsilon property is not equivalent to machine epsilon, which represents the upper bound of the relative error due to rounding in floating-point arithmetic.  </p>\n</div>\n<p> The value of this constant is 1.4e-45.  </p>\n<p> Two apparently equivalent floating-point numbers might not compare equal because of differences in their least significant digits. For example, the C# expression, <code>(float)1/3 == (float)0.33333</code>, does not compare equal because the division operation on the left side has maximum precision while the constant on the right side is precise only to the specified digits. If you create a custom algorithm that determines whether two floating-point numbers can be considered equal, you must use a value that is greater than the Epsilon constant to establish the acceptable absolute margin of difference for the two values to be considered equal. (Typically, that margin of difference is many times greater than Epsilon.)  </p>\n<h2 id=\"platform-notes\">Platform Notes</h2>\n<p> On ARM systems, the value of the Epsilon constant is too small to be detected, so it equates to zero. You can define an alternative epsilon value that equals 1.175494351E-38 instead.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Single_MaxValue\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MaxValue</div>        \r\n          </div>\r\n    \r\n            <p>Represents the largest possible value of <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>. This field is constant.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const float MaxValue = 3.402823E+38;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of this constant is positive 3.40282347E+38.  </p>\n<p> The result of an operation that exceeds MaxValue is <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">System.Single</a>. In the following example, <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">System.Single</a> results from addition, multiplication, and exponentiation operations when the result exceeds MaxValue.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Single.MaxValue#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      float result1 = 1.867e38f + 2.385e38f;\n      Console.WriteLine(&quot;{0} (Positive Infinity: {1})&quot;, \n                        result1, Single.IsPositiveInfinity(result1));\n      \n      float result2 = 1.5935e25f * 7.948e20f;\n      Console.WriteLine(&quot;{0} (Positive Infinity: {1})&quot;, \n                        result2, Single.IsPositiveInfinity(result2));\n   }\n}\n// The example displays the following output:\n//    Infinity (Positive Infinity: True)\n//    Infinity (Positive Infinity: True)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Single.MaxValue#1\">Module Example\n   Public Sub Main()\n      Dim result1 As Single = 1.867e38 + 2.385e38\n      Console.WriteLine(&quot;{0} (Positive Infinity: {1})&quot;, \n                        result1, Single.IsPositiveInfinity(result1))\n      \n      Dim result2 As Single = 1.5935e25 * 7.948e20\n      Console.WriteLine(&quot;{0} (Positive Infinity: {1})&quot;, \n                        result2, Single.IsPositiveInfinity(result2))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    Infinity (Positive Infinity: True)\n&#39;    Infinity (Positive Infinity: True)\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the MaxValue constant.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Single#4\">      if ( s &gt; Single::MaxValue )\n      {\n         Console::WriteLine( &quot;Your number is larger than a Single.&quot; );\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Single#4\">            If S &gt; Single.MaxValue Then\n                Console.WriteLine(&quot;Your number is larger than a Single.&quot;)\n            End If\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Single#4\">            if (s &gt; Single.MaxValue)\n            {\n                Console.WriteLine(&quot;Your number is larger than a Single.&quot;);\n            }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Single_MinValue\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MinValue</div>        \r\n          </div>\r\n    \r\n            <p>Represents the smallest possible value of <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>. This field is constant.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const float MinValue = -3.402823E+38;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of this constant is negative 3.402823e38.  </p>\n<p> The result of an operation that is less than MinValue is <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">System.Single</a>. In the following example, <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">System.Single</a> results from subtraction and multiplication operations when the result is less than MinValue.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Single.MinValue#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      float result1 = -8.997e37f + -2.985e38f;       \n      Console.WriteLine(&quot;{0} (Negative Infinity: {1})&quot;, \n                        result1, Single.IsNegativeInfinity(result1));\n      \n      float result2 = -1.5935e25f * 7.948e32f;\n      Console.WriteLine(&quot;{0} (Negative Infinity: {1})&quot;, \n                        result2, Single.IsNegativeInfinity(result2));\n   }\n}\n// The example displays the following output:\n//    -Infinity (Negative Infinity: True)\n//    -Infinity (Negative Infinity: True)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Single.MinValue#1\">Module Example\n   Public Sub Main()\n      Dim result1 As Single = -8.997e37 + -2.985e38\n      Console.WriteLine(&quot;{0} (Negative Infinity: {1})&quot;, \n                        result1, Single.IsNegativeInfinity(result1))\n      \n      Dim result2 As Single = -1.5935e250 * 7.948e110\n      Console.WriteLine(&quot;{0} (Negative Infinity: {1})&quot;, \n                        result2, Single.IsNegativeInfinity(result2))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    -Infinity (Negative Infinity: True)\n&#39;    -Infinity (Negative Infinity: True)\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the MinValue constant.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Single#5\">      if ( s &lt; Single::MinValue )\n      {\n         Console::WriteLine( &quot;Your number is smaller than a Single.&quot; );\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Single#5\">            If S &lt; Single.MinValue Then\n                Console.WriteLine(&quot;Your number is smaller than a Single.&quot;)\n            End If\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Single#5\">            if (s &lt; Single.MinValue)\n            {\n                Console.WriteLine(&quot;Your number is smaller than a Single.&quot;);\n            }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Single_NaN\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NaN</div>        \r\n          </div>\r\n    \r\n            <p>Represents not a number (<code>NaN</code>). This field is constant.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const float NaN = NaN;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A method or operator returns NaN when the result of an operation is undefined. For example, the result of dividing zero by zero is NaN, as the following example shows. (But note that dividing a non-zero number by zero returns either <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> or <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>, depending on the sign of the divisor.)  </p>\n<pre><code class=\"lang-cs\" name=\"System.Single.NaN#1\">      float zero = 0.0f;\n      Console.WriteLine(&quot;{0} / {1} = {2}&quot;, zero, zero, zero/zero);\n      // The example displays the following output:\n      //         0 / 0 = NaN      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Single.NaN#1\">      Dim zero As Single = 0\n      Console.WriteLine(&quot;{0} / {1} = {2}&quot;, zero, zero, zero/zero)\n      &#39; The example displays the following output:\n      &#39;         0 / 0 = NaN      \n</code></pre><p> In addition, a method call with a NaN value or an operation on a NaN value returns NaN, as the following example shows.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Single.NaN#2\">      float nan1 = Single.NaN;\n      \n      Console.WriteLine(&quot;{0} + {1} = {2}&quot;, 3, nan1, 3 + nan1);\n      Console.WriteLine(&quot;Abs({0}) = {1}&quot;, nan1, Math.Abs(nan1));\n      // The example displays the following output:\n      //       3 + NaN = NaN\n      //       Abs(NaN) = NaN\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Single.NaN#2\">      Dim nan1 As Single = Single.NaN\n      \n      Console.WriteLine(&quot;{0} + {1} = {2}&quot;, 3, nan1, 3 + nan1)\n      Console.WriteLine(&quot;Abs({0}) = {1}&quot;, nan1, Math.Abs(nan1))\n      &#39; The example displays the following output:\n      &#39;       3 + NaN = NaN\n      &#39;       Abs(NaN) = NaN\n</code></pre><p> Use the <a class=\"xref\" href=\"system.single#System_Single_IsNaN_\" data-linktype=\"relative-path\">IsNaN</a> method to determine whether a value is not a number. In general, <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> operators cannot be used to compare NaN with other <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values, although comparison methods (such as <a class=\"xref\" href=\"system.single#System_Single_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.single#System_Single_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a>) can. The following example illustrates the difference in behavior between <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> comparison operators and methods.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Single.NaN#4\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Console.WriteLine(&quot;NaN == NaN: {0}&quot;, Single.NaN == Single.NaN); \n      Console.WriteLine(&quot;NaN != NaN: {0}&quot;, Single.NaN != Single.NaN); \n      Console.WriteLine(&quot;NaN.Equals(NaN): {0}&quot;, Single.NaN.Equals(Single.NaN)); \n      Console.WriteLine(&quot;! NaN.Equals(NaN): {0}&quot;, ! Single.NaN.Equals(Single.NaN)); \n      Console.WriteLine(&quot;IsNaN: {0}&quot;, Double.IsNaN(Double.NaN));\n      \n      Console.WriteLine(&quot;\\nNaN &gt; NaN: {0}&quot;, Single.NaN &gt; Single.NaN); \n      Console.WriteLine(&quot;NaN &gt;= NaN: {0}&quot;, Single.NaN &gt;= Single.NaN); \n      Console.WriteLine(&quot;NaN &lt; NaN: {0}&quot;, Single.NaN &lt; Single.NaN);\n      Console.WriteLine(&quot;NaN &lt; 100.0: {0}&quot;, Single.NaN &lt; 100.0f); \n      Console.WriteLine(&quot;NaN &lt;= 100.0: {0}&quot;, Single.NaN &lt;= 100.0f); \n      Console.WriteLine(&quot;NaN &gt;= 100.0: {0}&quot;, Single.NaN &gt; 100.0f);\n      Console.WriteLine(&quot;NaN.CompareTo(NaN): {0}&quot;, Single.NaN.CompareTo(Single.NaN)); \n      Console.WriteLine(&quot;NaN.CompareTo(100.0): {0}&quot;, Single.NaN.CompareTo(100.0f)); \n      Console.WriteLine(&quot;(100.0).CompareTo(Single.NaN): {0}&quot;, (100.0f).CompareTo(Single.NaN)); \n   }\n}\n// The example displays the following output:\n//       NaN == NaN: False\n//       NaN != NaN: True\n//       NaN.Equals(NaN): True\n//       ! NaN.Equals(NaN): False\n//       IsNaN: True\n//\n//       NaN &gt; NaN: False\n//       NaN &gt;= NaN: False\n//       NaN &lt; NaN: False\n//       NaN &lt; 100.0: False\n//       NaN &lt;= 100.0: False\n//       NaN &gt;= 100.0: False\n//       NaN.CompareTo(NaN): 0\n//       NaN.CompareTo(100.0): -1\n//       (100.0).CompareTo(Single.NaN): 1\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Single.NaN#4\">Module Example\n   Public Sub Main()\n      Console.WriteLine(&quot;NaN = NaN: {0}&quot;, Single.NaN = Single.NaN) \n      Console.WriteLine(&quot;NaN &lt;&gt; NaN: {0}&quot;, Single.NaN &lt;&gt; Single.NaN) \n      Console.WriteLine(&quot;NaN.Equals(NaN): {0}&quot;, Single.NaN.Equals(Single.NaN)) \n      Console.WriteLine(&quot;Not NaN.Equals(NaN): {0}&quot;, Not Single.NaN.Equals(Single.NaN)) \n      Console.WriteLine(&quot;IsNaN: {0}&quot;, Double.IsNaN(Double.NaN))\n      Console.WriteLine()\n      Console.WriteLine(&quot;NaN &gt; NaN: {0}&quot;, Single.NaN &gt; 100.0f) \n      Console.WriteLine(&quot;NaN &gt;= NaN: {0}&quot;, Single.NaN &gt;= 100.0f) \n      Console.WriteLine(&quot;NaN &lt; NaN: {0}&quot;, Single.NaN &lt; Single.NaN)\n      Console.WriteLine(&quot;NaN &lt; 100.0: {0}&quot;, Single.NaN &lt; 100.0f) \n      Console.WriteLine(&quot;NaN &lt;= 100.0: {0}&quot;, Single.NaN &lt;= 100.0f) \n      Console.WriteLine(&quot;NaN &gt;= 100.0: {0}&quot;, Single.NaN &gt; 100.0f)\n      Console.WriteLine(&quot;NaN.CompareTo(NaN): {0}&quot;, Single.NaN.CompareTo(Single.Nan)) \n      Console.WriteLine(&quot;NaN.CompareTo(100.0): {0}&quot;, Single.NaN.CompareTo(100.0f)) \n      Console.WriteLine(&quot;(100.0).CompareTo(Single.NaN): {0}&quot;, (100.0f).CompareTo(Single.NaN)) \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       NaN == NaN: False\n&#39;       NaN != NaN: True\n&#39;       NaN.Equals(NaN): True\n&#39;       ! NaN.Equals(NaN): False\n&#39;       IsNaN: True\n&#39;\n&#39;       NaN &gt; NaN: False\n&#39;       NaN &gt;= NaN: False\n&#39;       NaN &lt; NaN: False\n&#39;       NaN &lt; 100.0: False\n&#39;       NaN &lt;= 100.0: False\n&#39;       NaN &gt;= 100.0: False\n&#39;       NaN.CompareTo(NaN): 0\n&#39;       NaN.CompareTo(100.0): -1\n&#39;       (100.0).CompareTo(Single.NaN): 1\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the NaN constant.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Single#7\">      Single zero = 0;\n      \n      // This condition will return false.\n      if ( (0 / zero) == Single::NaN )\n      {\n         Console::WriteLine( &quot;0 / 0 can be tested with Single::NaN.&quot; );\n      }\n      else\n      {\n         Console::WriteLine( &quot;0 / 0 cannot be tested with Single::NaN; use Single::IsNan() instead.&quot; );\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Single#7\">            Dim zero As Single = 0\n\n            &#39; This condition will return false.\n            If (0 / zero) = Single.NaN Then\n                Console.WriteLine(&quot;0 / 0 can be tested with Single.NaN.&quot;)\n            Else\n                Console.WriteLine(&quot;0 / 0 cannot be tested with Single.NaN; use Single.IsNan() instead.&quot;)\n            End If\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Single#7\">            Single zero = 0;\n\n            // This condition will return false.\n            if ((0 / zero) == Single.NaN)\n            {\n                Console.WriteLine(&quot;0 / 0 can be tested with Single.NaN.&quot;);\n            }\n            else\n            {\n                Console.WriteLine(&quot;0 / 0 cannot be tested with Single.NaN; use Single.IsNan() instead.&quot;);\n            }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Single_NegativeInfinity\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NegativeInfinity</div>        \r\n          </div>\r\n    \r\n            <p>Represents negative infinity. This field is constant.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const float NegativeInfinity = -Infinity;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of this constant is the result of dividing a negative number by zero.  </p>\n<p> This constant is returned when the result of an operation is less than <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>.  </p>\n<p> Use <a class=\"xref\" href=\"system.single#System_Single_IsNegativeInfinity_\" data-linktype=\"relative-path\">IsNegativeInfinity</a> to determine whether a value evaluates to negative infinity.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the NegativeInfinity constant.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Single#9\">      // This will equal Infinity.\n      Console::WriteLine( &quot;10.0 minus NegativeInfinity equals {0}.&quot;, (10.0 - Single::NegativeInfinity) );\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Single#9\">            &#39; This will equal Infinity.\n            Console.WriteLine(&quot;10.0 minus NegativeInfinity equals &quot; + (10 - Single.NegativeInfinity).ToString() + &quot;.&quot;)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Single#9\">            // This will equal Infinity.\n            Console.WriteLine(&quot;10.0 minus NegativeInfinity equals {0}.&quot;, (10.0 - Single.NegativeInfinity).ToString());\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Single_PositiveInfinity\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PositiveInfinity</div>        \r\n          </div>\r\n    \r\n            <p>Represents positive infinity. This field is constant.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const float PositiveInfinity = Infinity;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of this constant is the result of dividing a positive number by zero.  </p>\n<p> This constant is returned when the result of an operation is greater than <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>.  </p>\n<p> Use <a class=\"xref\" href=\"system.single#System_Single_IsPositiveInfinity_\" data-linktype=\"relative-path\">IsPositiveInfinity</a> to determine whether a value evaluates to positive infinity.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the PositiveInfinity constant.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Single#10\">      // This will equal Infinity.\n      Console::WriteLine( &quot;PositiveInfinity plus 10.0 equals {0}.&quot;, (Single::PositiveInfinity + 10.0) );\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Single#10\">            &#39; This will equal Infinity.\n            Console.WriteLine(&quot;PositiveInfinity plus 10.0 equals &quot; + (Single.PositiveInfinity + 10).ToString() + &quot;.&quot;)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Single#10\">            // This will equal Infinity.\n            Console.WriteLine(&quot;PositiveInfinity plus 10.0 equals {0}.&quot;, (Single.PositiveInfinity + 10.0).ToString());\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Single_CompareTo_System_Object_\">\r\n    \r\n            <a id=\"System_Single_CompareTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CompareTo(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int CompareTo (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to compare, or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A signed number indicating the relative values of this instance and <code>value</code>.  </p>\n <table><thead><tr><th> Return Value<br>\n </th><th> Description<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td> This instance is less than <code>value</code>.<br>\n -or-<br>\n This instance is not a number (<a class=\"xref\" href=\"system.single#System_Single_NaN\" data-linktype=\"relative-path\">NaN</a>) and <code>value</code> is a number.<br>\n </td></tr><tr><td> Zero<br>\n </td><td> This instance is equal to <code>value</code>.<br>\n -or-<br>\n This instance and value are both not a number (<a class=\"xref\" href=\"system.single#System_Single_NaN\" data-linktype=\"relative-path\">NaN</a>), <a class=\"xref\" href=\"system.single#System_Single_PositiveInfinity\" data-linktype=\"relative-path\">PositiveInfinity</a>, or <a class=\"xref\" href=\"system.single#System_Single_NegativeInfinity\" data-linktype=\"relative-path\">NegativeInfinity</a>.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td> This instance is greater than <code>value</code>.<br>\n -or-<br>\n This instance is a number and <code>value</code> is not a number (<a class=\"xref\" href=\"system.single#System_Single_NaN\" data-linktype=\"relative-path\">NaN</a>).<br>\n -or-<br>\n <code>value</code> is <code>null</code>.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is not a <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>value</code> parameter must be <code>null</code> or an instance of <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>; otherwise, an exception is thrown. Any instance of <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>, regardless of its value, is considered greater than <code>null</code>.  </p>\n<p> Values must be identical to be considered equal. Particularly when floating-point values depend on multiple mathematical operations, it is common for them to lose precision and for their values to be nearly identical except for their least significant digits. Because of this, the return value of the CompareTo method may seem surprising at times. For example, multiplication by a particular value followed by division by the same value should produce the original value, but in the following example, the computed value turns out to be greater than the original value. Showing all significant digits of the two values by using the &quot;R&quot; <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">standard numeric format string</a> indicates that the computed value differs from the original value in its least significant digits. For information about handling such comparisons, see the Remarks section of the <a class=\"xref\" href=\"system.single#System_Single_Equals_System_Single_\" data-linktype=\"relative-path\">Equals(Single)</a> method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Single.CompareTo#2\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n       float value1 = 16.5457f;\n       float operand = 3.8899982f;\n       object value2 = value1 * operand / operand;\n       Console.WriteLine(&quot;Comparing {0} and {1}: {2}\\n&quot;,\n                         value1, value2, value1.CompareTo(value2));\n       Console.WriteLine(&quot;Comparing {0:R} and {1:R}: {2}&quot;,\n                         value1, value2, value1.CompareTo(value2));\n   }\n}\n// The example displays the following output:\n//       Comparing 16.5457 and 16.5457: -1\n//       \n//       Comparing 16.5457 and 16.545702: -1\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Single.CompareTo#2\">Module Example\n   Public Sub Main()\n       Dim value1 As Single = 16.5457\n       Dim value2 As Object = value1 * CSng(3.8899982) / CSng(3.8899982)\n       Console.WriteLine(&quot;Comparing {0} and {1}: {2}&quot;,\n                         value1, value2, value1.CompareTo(value2))\n       Console.WriteLine()\n       Console.WriteLine(&quot;Comparing {0:R} and {1:R}: {2}&quot;,\n                         value1, value2, value1.CompareTo(value2))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Comparing 16.5457 and 16.5457: -1\n&#39;       \n&#39;       Comparing 16.5457 and 16.545702: -1\n</code></pre><p> This method is implemented to support the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface. Note that, although a <a class=\"xref\" href=\"system.single#System_Single_NaN\" data-linktype=\"relative-path\">NaN</a> is not considered to be equal to another <a class=\"xref\" href=\"system.single#System_Single_NaN\" data-linktype=\"relative-path\">NaN</a> (even itself), the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface requires that <code>A.CompareTo(A)</code> return zero.  </p>\n<h2 id=\"precision-in-comparisons\">Precision in Comparisons</h2>\n<p> The precision of floating-point numbers beyond the documented precision is specific to the implementation and version of the .NET Framework. Consequently, a comparison of two particular numbers might change between versions of the .NET Framework because the precision of the numbers&#39; internal representation might change.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the CompareTo method.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Single#16\">      obj1 = (Single)450;\n\n      if ( a.CompareTo( obj1 ) &lt; 0 )\n      {\n         Console::WriteLine( &quot; {0} is less than {1}.&quot;, a, obj1 );\n      }\n\n      if ( a.CompareTo( obj1 ) &gt; 0 )\n      {\n         Console::WriteLine( &quot; {0} is greater than {1}.&quot;, a, obj1 );\n      }\n\n      if ( a.CompareTo( obj1 ) == 0 )\n      {\n         Console::WriteLine( &quot; {0} equals {1}.&quot;, a, obj1 );\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Single#16\">            Obj1 = CType(450, Single)\n\n            If A.CompareTo(Obj1) &lt; 0 Then\n                Console.WriteLine(A.ToString() + &quot; is less than &quot; + Obj1.ToString() + &quot;.&quot;)\n            End If\n\n            If (A.CompareTo(Obj1) &gt; 0) Then\n                Console.WriteLine(A.ToString() + &quot; is greater than &quot; + Obj1.ToString() + &quot;.&quot;)\n            End If\n\n            If (A.CompareTo(Obj1) = 0) Then\n                Console.WriteLine(A.ToString() + &quot; equals &quot; + Obj1.ToString() + &quot;.&quot;)\n            End If\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Single#16\">            obj1 = (Single)450;\n\n            if (a.CompareTo(obj1) &lt; 0)\n            {\n                Console.WriteLine(&quot;{0} is less than {1}.&quot;, a.ToString(), obj1.ToString());\n            }\n\n            if (a.CompareTo(obj1) &gt; 0)\n            {\n                Console.WriteLine(&quot;{0} is greater than {1}.&quot;, a.ToString(), obj1.ToString());\n            }\n\n            if (a.CompareTo(obj1) == 0)\n            {\n                Console.WriteLine(&quot;{0} equals {1}.&quot;, a.ToString(), obj1.ToString());\n            }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Single_CompareTo_System_Single_\">\r\n    \r\n            <a id=\"System_Single_CompareTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CompareTo(Single)</div>        \r\n          </div>\r\n    \r\n            <p>Compares this instance to a specified single-precision floating-point number and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified single-precision floating-point number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int CompareTo (float value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A single-precision floating-point number to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A signed number indicating the relative values of this instance and <code>value</code>.  </p>\n <table><thead><tr><th> Return Value<br>\n </th><th> Description<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td> This instance is less than <code>value</code>.<br>\n -or-<br>\n This instance is not a number (<a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>) and <code>value</code> is a number.<br>\n </td></tr><tr><td> Zero<br>\n </td><td> This instance is equal to <code>value</code>.<br>\n -or-<br>\n Both this instance and <code>value</code> are not a number (<a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>), <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>, or <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td> This instance is greater than <code>value</code>.<br>\n -or-<br>\n This instance is a number and <code>value</code> is not a number (<a class=\"xref\" href=\"system.single#System_Single_NaN\" data-linktype=\"relative-path\">NaN</a>).<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Values must be identical to be considered equal. It is common for floating-point values to lose precision and to become nearly identical except for their least significant digits, especially when the values depend on multiple mathematical operations. Because of this, the return value of the CompareTo method at times may seem surprising. For example, multiplication by any value followed by division by the same value should produce the original value. However, in the following example, the computed value turns out to be greater than the original value. Showing all significant digits of the two values by using the &quot;R&quot; <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">standard numeric format string</a> indicates that the computed value differs from the original value in its least significant digits. For information about handling such comparisons, see the Remarks section of the <a class=\"xref\" href=\"system.single#System_Single_Equals_System_Single_\" data-linktype=\"relative-path\">Equals(Single)</a> method.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Single.CompareTo#1\">Module Example\n   Public Sub Main()\n       Dim value1 As Single = 16.5457\n       Dim value2 As Single = value1 * CSng(3.8899982) / CSng(3.8899982)\n       Console.WriteLine(&quot;Comparing {0} and {1}: {2}&quot;,\n                         value1, value2, value1.CompareTo(value2))\n       Console.WriteLine()\n       Console.WriteLine(&quot;Comparing {0:R} and {1:R}: {2}&quot;,\n                         value1, value2, value1.CompareTo(value2))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Comparing 16.5457 and 16.5457: -1\n&#39;       \n&#39;       Comparing 16.5457 and 16.545702: -1\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Single.CompareTo#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n       float value1 = 16.5457f;\n       float operand = 3.8899982f;\n       float value2 = value1 * operand / operand;\n       Console.WriteLine(&quot;Comparing {0} and {1}: {2}\\n&quot;,\n                         value1, value2, value1.CompareTo(value2));\n       Console.WriteLine(&quot;Comparing {0:R} and {1:R}: {2}&quot;,\n                         value1, value2, value1.CompareTo(value2));\n   }\n}\n// The example displays the following output:\n//       Comparing 16.5457 and 16.5457: -1\n//       \n//       Comparing 16.5457 and 16.545702: -1\n</code></pre><p> This method implements the <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">System.IComparable&lt;T&gt;</a> interface and performs slightly better than the <a class=\"xref\" href=\"system.single#System_Single_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> method because it does not have to convert the <code>value</code> parameter to an object.  </p>\n<p> Note that, although an object whose value is <a class=\"xref\" href=\"system.single#System_Single_NaN\" data-linktype=\"relative-path\">NaN</a> is not considered equal to another object whose value is <a class=\"xref\" href=\"system.single#System_Single_NaN\" data-linktype=\"relative-path\">NaN</a> (even itself), the <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> interface requires that <code>A.CompareTo(A)</code> return zero.  </p>\n<h2 id=\"widening-conversions\">Widening Conversions</h2>\n<p> Depending on your programming language, it might be possible to code a <a class=\"xref\" href=\"system.single#System_Single_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> method where the parameter type has fewer bits (is narrower) than the instance type. This is possible because some programming languages perform an implicit widening conversion that represents the parameter as a type with as many bits as the instance.  </p>\n<p> For example, suppose the instance type is <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> and the parameter type is <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>. The Microsoft C# compiler generates instructions to represent the value of the parameter as a <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> object, then generates a CompareTo method that compares the values of the instance and the widened representation of the parameter.  </p>\n<p> Consult your programming language&#39;s documentation to determine if its compiler performs implicit widening conversions of numeric types. For more information, see the <a href=\"../Topic/Type%20Conversion%20Tables%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Type Conversion Tables</a> topic.  </p>\n<h2 id=\"precision-in-comparisons\">Precision in Comparisons</h2>\n<p> The precision of floating-point numbers beyond the documented precision is specific to the implementation and version of the .NET Framework. Consequently, a comparison of two particular numbers might change between versions of the .NET Framework because the precision of the numbers&#39; internal representation might change.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates generic and nongeneric versions of the <a class=\"xref\" href=\"system.single#System_Single_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> method for several value and reference types.  </p>\n<pre><code class=\"lang-vb\" name=\"T.CompareTo#1\">&#39; This example demonstrates the generic and non-generic versions of the \n&#39; CompareTo method for several base types.\n&#39; The non-generic version takes a parameter of type Object, while the generic\n&#39; version takes a type-specific parameter, such as Boolean, Int32, or Double.\n\nImports System\n\nClass Sample\n   Public Shared Sub Main()\n      Dim nl As String = Environment.NewLine\n      Dim msg As String = _\n          &quot;{0}The following is the result of using the generic and non-generic{0}&quot; &amp; _\n          &quot;versions of the CompareTo method for several base types:{0}&quot;\n      \n      Dim now As DateTime = DateTime.Now\n      &#39; Time span = 11 days, 22 hours, 33 minutes, 44 seconds\n      Dim tsX As New TimeSpan(11, 22, 33, 44)\n      &#39; Version = 1.2.333.4\n      Dim versX As New Version(&quot;1.2.333.4&quot;)\n      &#39; Guid = CA761232-ED42-11CE-BACD-00AA0057B223\n      Dim guidX As New Guid(&quot;{CA761232-ED42-11CE-BACD-00AA0057B223}&quot;)\n      \n      Dim a1 As [Boolean] = True,    a2 As [Boolean] = True\n      Dim b1 As [Byte] = 1,          b2 As [Byte] = 1\n      Dim c1 As Int16 = -2,          c2 As Int16 = 2\n      Dim d1 As Int32 = 3,           d2 As Int32 = 3\n      Dim e1 As Int64 = 4,           e2 As Int64 = -4\n      Dim f1 As [Decimal] = -5.5D,   f2 As [Decimal] = 5.5D\n      Dim g1 As [Single] = 6.6F,     g2 As [Single] = 6.6F\n      Dim h1 As [Double] = 7.7,      h2 As [Double] = -7.7\n      Dim i1 As [Char] = &quot;A&quot;c,       i2 As [Char] = &quot;A&quot;c\n      Dim j1 As String = &quot;abc&quot;,      j2 As String = &quot;abc&quot;\n      Dim k1 As DateTime = now,      k2 As DateTime = now\n      Dim l1 As TimeSpan = tsX,      l2 As TimeSpan = tsX\n      Dim m1 As Version = versX,     m2 As New Version(&quot;2.0&quot;)\n      Dim n1 As Guid = guidX,        n2 As Guid = guidX\n      \n      &#39; The following types are not CLS-compliant.\n      &#39; SByte, UInt16, UInt32, UInt64\n\n      Console.WriteLine(msg, nl)\n      Try\n         &#39; The second and third Show method call parameters are automatically boxed because\n         &#39; the second and third Show method declaration arguments expect type Object.\n\n         Show(&quot;Boolean:  &quot;, a1, a2, a1.CompareTo(a2), a1.CompareTo(CObj(a2)))\n         Show(&quot;Byte:     &quot;, b1, b2, b1.CompareTo(b2), b1.CompareTo(CObj(b2)))\n         Show(&quot;Int16:    &quot;, c1, c2, c1.CompareTo(c2), c1.CompareTo(CObj(c2)))\n         Show(&quot;Int32:    &quot;, d1, d2, d1.CompareTo(d2), d1.CompareTo(CObj(d2)))\n         Show(&quot;Int64:    &quot;, e1, e2, e1.CompareTo(e2), e1.CompareTo(CObj(e2)))\n         Show(&quot;Decimal:  &quot;, f1, f2, f1.CompareTo(f2), f1.CompareTo(CObj(f2)))\n         Show(&quot;Single:   &quot;, g1, g2, g1.CompareTo(g2), g1.CompareTo(CObj(g2)))\n         Show(&quot;Double:   &quot;, h1, h2, h1.CompareTo(h2), h1.CompareTo(CObj(h2)))\n         Show(&quot;Char:     &quot;, i1, i2, i1.CompareTo(i2), i1.CompareTo(CObj(i2)))\n         Show(&quot;String:   &quot;, j1, j2, j1.CompareTo(j2), j1.CompareTo(CObj(j2)))\n         Show(&quot;DateTime: &quot;, k1, k2, k1.CompareTo(k2), k1.CompareTo(CObj(k2)))\n         Show(&quot;TimeSpan: &quot;, l1, l2, l1.CompareTo(l2), l1.CompareTo(CObj(l2)))\n         Show(&quot;Version:  &quot;, m1, m2, m1.CompareTo(m2), m1.CompareTo(CObj(m2)))\n         Show(&quot;Guid:     &quot;, n1, n2, n1.CompareTo(n2), n1.CompareTo(CObj(n2)))\n         &#39;\n         Console.WriteLine(&quot;{0}The following types are not CLS-compliant:&quot;, nl)\n         Console.WriteLine(&quot;SByte, UInt16, UInt32, UInt64&quot;)\n\n      Catch e As Exception\n         Console.WriteLine(e)\n      End Try\n   End Sub &#39;Main\n   \n   Public Shared Sub Show(caption As String, var1 As [Object], var2 As [Object], _\n                          resultGeneric As Integer, resultNonGeneric As Integer)\n      Dim relation As String\n      \n      Console.Write(caption)\n      If resultGeneric = resultNonGeneric Then\n         If resultGeneric &lt; 0 Then\n            relation = &quot;less than&quot;\n         ElseIf resultGeneric &gt; 0 Then\n            relation = &quot;greater than&quot;\n         Else\n            relation = &quot;equal to&quot;\n         End If\n         Console.WriteLine(&quot;{0} is {1} {2}&quot;, var1, relation, var2)\n      \n      &#39; The following condition will never occur because the generic and non-generic\n      &#39; CompareTo methods are equivalent.\n\n      Else\n         Console.WriteLine(&quot;Generic CompareTo = {0}; non-generic CompareTo = {1}&quot;, _\n                            resultGeneric, resultNonGeneric)\n      End If\n   End Sub &#39;Show\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;The following is the result of using the generic and non-generic versions of the\n&#39;CompareTo method for several base types:\n&#39;\n&#39;Boolean:  True is equal to True\n&#39;Byte:     1 is equal to 1\n&#39;Int16:    -2 is less than 2\n&#39;Int32:    3 is equal to 3\n&#39;Int64:    4 is greater than -4\n&#39;Decimal:  -5.5 is less than 5.5\n&#39;Single:   6.6 is equal to 6.6\n&#39;Double:   7.7 is greater than -7.7\n&#39;Char:     A is equal to A\n&#39;String:   abc is equal to abc\n&#39;DateTime: 12/1/2003 5:37:46 PM is equal to 12/1/2003 5:37:46 PM\n&#39;TimeSpan: 11.22:33:44 is equal to 11.22:33:44\n&#39;Version:  1.2.333.4 is less than 2.0\n&#39;Guid:     ca761232-ed42-11ce-bacd-00aa0057b223 is equal to ca761232-ed42-11ce-bacd-00\n&#39;aa0057b223\n&#39;\n&#39;The following types are not CLS-compliant:\n&#39;SByte, UInt16, UInt32, UInt64\n&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"T.CompareTo#1\">// This example demonstrates the two versions of the \n// CompareTo method for several base types.\n// The general version takes a parameter of type Object, while the specific\n// version takes a type-specific parameter, such as Boolean, Int32, or Double.\nusing namespace System;\n\nvoid Show( String^ caption, Object^ var1, Object^ var2, int resultGeneric, int resultNonGeneric )\n{\n   String^ relation;\n   Console::Write( caption );\n   if ( resultGeneric == resultNonGeneric )\n   {\n      if ( resultGeneric &lt; 0 )\n            relation = &quot;less than&quot;;\n      else\n      if ( resultGeneric &gt; 0 )\n            relation = &quot;greater than&quot;;\n      else\n            relation = &quot;equal to&quot;;\n      Console::WriteLine( &quot;{0} is {1} {2}&quot;, var1, relation, var2 );\n   }\n   // The following condition will never occur because the generic and non-generic\n   // CompareTo methods are equivalent.\n   else\n   {\n      Console::WriteLine( &quot;Generic CompareTo = {0}; non-generic CompareTo = {1}&quot;, resultGeneric, resultNonGeneric );\n   }\n}\n\nint main()\n{\n   String^ nl = Environment::NewLine;\n   String^ msg = &quot;{0}The following is the result of using the generic and non-generic{0}&quot;\n   &quot;versions of the CompareTo method for several base types:{0}&quot;;\n   Object^ obj; // An Object used to insure CompareTo(Object) is called.\n\n   DateTime now = DateTime::Now;\n   \n   // Time span = 11 days, 22 hours, 33 minutes, 44 seconds\n   TimeSpan tsX = TimeSpan(11,22,33,44);\n   \n   // Version = 1.2.333.4\n   Version^ versX = gcnew Version(  &quot;1.2.333.4&quot; );\n   \n   // Guid = CA761232-ED42-11CE-BACD-00AA0057B223\n   Guid guidX = Guid( &quot;{CA761232-ED42-11CE-BACD-00AA0057B223}&quot;);\n   Boolean a1 = true,a2 = true;\n   Byte b1 = 1,b2 = 1;\n   Int16 c1 = -2,c2 = 2;\n   Int32 d1 = 3,d2 = 3;\n   Int64 e1 = 4,e2 = -4;\n   Decimal f1 = Decimal(-5.5), f2 = Decimal(5.5);\n   Single g1 = 6.6f,g2 = 6.6f;\n   Double h1 = 7.7,h2 = -7.7;\n   Char i1 = &#39;A&#39;,i2 = &#39;A&#39;;\n   String^ j1 = &quot;abc&quot;, ^j2 = &quot;abc&quot;;\n   DateTime k1 = now,k2 = now;\n   TimeSpan l1 = tsX,l2 = tsX;\n   Version^ m1 = versX, ^m2 = gcnew Version(  &quot;2.0&quot; );\n   Guid n1 = guidX,n2 = guidX;\n   \n   // The following types are not CLS-compliant.\n   SByte w1 = 8,w2 = 8;\n   UInt16 x1 = 9,x2 = 9;\n   UInt32 y1 = 10,y2 = 10;\n   UInt64 z1 = 11,z2 = 11;\n   \n   //\n   Console::WriteLine( msg, nl );\n   try\n   {\n      Show( &quot;Boolean: &quot;, a1, a2, a1.CompareTo( a2 ), a1.CompareTo( a2 ) );\n      Show( &quot;Byte:    &quot;, b1, b2, b1.CompareTo( b2 ), b1.CompareTo( b2 ) );\n      Show( &quot;Int16:   &quot;, c1, c2, c1.CompareTo( c2 ), c1.CompareTo( c2 ) );\n      Show( &quot;Int32:   &quot;, d1, d2, d1.CompareTo( d2 ), d1.CompareTo( d2 ) );\n      Show( &quot;Int64:   &quot;, e1, e2, e1.CompareTo( e2 ), e1.CompareTo( e2 ) );\n      Show( &quot;Decimal: &quot;, f1, f2, f1.CompareTo( f2 ), f1.CompareTo( f2 ) );\n      Show( &quot;Single:  &quot;, g1, g2, g1.CompareTo( g2 ), g1.CompareTo( g2 ) );\n      Show( &quot;Double:  &quot;, h1, h2, h1.CompareTo( h2 ), h1.CompareTo( h2 ) );\n      Show( &quot;Char:    &quot;, i1, i2, i1.CompareTo( i2 ), i1.CompareTo( i2 ) );\n      \n      // Use an anonymous object to hide the String object.\n      obj = j2;\n      Show( &quot;String:  &quot;, j1, j2, j1-&gt;CompareTo( j2 ), j1-&gt;CompareTo( obj ) );\n      Show( &quot;DateTime:&quot;, k1, k2, k1.CompareTo( k2 ), k1.CompareTo( k2 ) );\n      Show(  &quot;TimeSpan: &quot;, l1, l2, l1.CompareTo( l2 ), l1.CompareTo( l2 ) );\n      \n      // Use an anonymous object to hide the Version object.\n      obj = m2;\n      Show(  &quot;Version:  &quot;, m1, m2, m1-&gt;CompareTo( m2 ), m1-&gt;CompareTo( obj ) );\n      Show(  &quot;Guid:     &quot;, n1, n2, n1.CompareTo( n2 ), n1.CompareTo( n2 ) );\n      \n      //\n      Console::WriteLine( &quot;{0}The following types are not CLS-compliant:&quot;, nl );\n      Show( &quot;SByte:   &quot;, w1, w2, w1.CompareTo( w2 ), w1.CompareTo( w2 ) );\n      Show( &quot;UInt16:  &quot;, x1, x2, x1.CompareTo( x2 ), x1.CompareTo( x2 ) );\n      Show( &quot;UInt32:  &quot;, y1, y2, y1.CompareTo( y2 ), y1.CompareTo( y2 ) );\n      Show( &quot;UInt64:  &quot;, z1, z2, z1.CompareTo( z2 ), z1.CompareTo( z2 ) );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n}\n//     This example displays the following output:\n//     \n//     The following is the result of using the generic and non-generic versions of the\n//     CompareTo method for several base types:\n//     \n//     Boolean:  True is equal to True\n//     Byte:     1 is equal to 1\n//     Int16:    -2 is less than 2\n//     Int32:    3 is equal to 3\n//     Int64:    4 is greater than -4\n//     Decimal:  -5.5 is less than 5.5\n//     Single:   6.6 is equal to 6.6\n//     Double:   7.7 is greater than -7.7\n//     Char:     A is equal to A\n//     String:   abc is equal to abc\n//     DateTime: 12/1/2003 5:37:46 PM is equal to 12/1/2003 5:37:46 PM\n//     TimeSpan: 11.22:33:44 is equal to 11.22:33:44\n//     Version:  1.2.333.4 is less than 2.0\n//     Guid:     ca761232-ed42-11ce-bacd-00aa0057b223 is equal to ca761232-ed42-11ce-bacd-00\n//     aa0057b223\n//     \n//     The following types are not CLS-compliant:\n//     SByte:    8 is equal to 8\n//     UInt16:   9 is equal to 9\n//     UInt32:   10 is equal to 10\n//     UInt64:   11 is equal to 11\n</code></pre><pre><code class=\"lang-cs\" name=\"T.CompareTo#1\">// This example demonstrates the generic and non-generic versions of the \n// CompareTo method for several base types.\n// The non-generic version takes a parameter of type Object, while the generic\n// version takes a type-specific parameter, such as Boolean, Int32, or Double.\n\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n    string    nl = Environment.NewLine;\n    string    msg = &quot;{0}The following is the result of using the generic and non-generic{0}&quot; +\n                    &quot;versions of the CompareTo method for several base types:{0}&quot;;\n\n    DateTime  now = DateTime.Now;\n// Time span = 11 days, 22 hours, 33 minutes, 44 seconds\n    TimeSpan  tsX = new TimeSpan(11, 22, 33, 44); \n// Version = 1.2.333.4\n    Version   versX = new Version(&quot;1.2.333.4&quot;);  \n// Guid = CA761232-ED42-11CE-BACD-00AA0057B223\n    Guid      guidX = new Guid(&quot;{CA761232-ED42-11CE-BACD-00AA0057B223}&quot;);\n\n    Boolean  a1 = true,  a2 = true;\n    Byte     b1 = 1,     b2 = 1;\n    Int16    c1 = -2,    c2 = 2;\n    Int32    d1 = 3,     d2 = 3;\n    Int64    e1 = 4,     e2 = -4;\n    Decimal  f1 = -5.5m, f2 = 5.5m;\n    Single   g1 = 6.6f,  g2 = 6.6f;\n    Double   h1 = 7.7d,  h2 = -7.7d;\n    Char     i1 = &#39;A&#39;,   i2 = &#39;A&#39;;\n    String   j1 = &quot;abc&quot;, j2 = &quot;abc&quot;;\n    DateTime k1 = now,   k2 = now;\n    TimeSpan l1 = tsX,   l2 = tsX;\n    Version  m1 = versX, m2 = new Version(&quot;2.0&quot;);\n    Guid     n1 = guidX, n2 = guidX;\n\n// The following types are not CLS-compliant.\n    SByte    w1 = 8,     w2 = 8;\n    UInt16   x1 = 9,     x2 = 9;\n    UInt32   y1 = 10,    y2 = 10;\n    UInt64   z1 = 11,    z2 = 11;\n//\n    Console.WriteLine(msg, nl);\n    try \n        {\n// The second and third Show method call parameters are automatically boxed because\n// the second and third Show method declaration arguments expect type Object.\n\n        Show(&quot;Boolean:  &quot;, a1, a2, a1.CompareTo(a2), a1.CompareTo((Object)a2));\n        Show(&quot;Byte:     &quot;, b1, b2, b1.CompareTo(b2), b1.CompareTo((Object)b2));\n        Show(&quot;Int16:    &quot;, c1, c2, c1.CompareTo(c2), c1.CompareTo((Object)c2));\n        Show(&quot;Int32:    &quot;, d1, d2, d1.CompareTo(d2), d1.CompareTo((Object)d2));\n        Show(&quot;Int64:    &quot;, e1, e2, e1.CompareTo(e2), e1.CompareTo((Object)e2));\n        Show(&quot;Decimal:  &quot;, f1, f2, f1.CompareTo(f2), f1.CompareTo((Object)f2));\n        Show(&quot;Single:   &quot;, g1, g2, g1.CompareTo(g2), g1.CompareTo((Object)g2));\n        Show(&quot;Double:   &quot;, h1, h2, h1.CompareTo(h2), h1.CompareTo((Object)h2));\n        Show(&quot;Char:     &quot;, i1, i2, i1.CompareTo(i2), i1.CompareTo((Object)i2));\n        Show(&quot;String:   &quot;, j1, j2, j1.CompareTo(j2), j1.CompareTo((Object)j2));\n        Show(&quot;DateTime: &quot;, k1, k2, k1.CompareTo(k2), k1.CompareTo((Object)k2));\n        Show(&quot;TimeSpan: &quot;, l1, l2, l1.CompareTo(l2), l1.CompareTo((Object)l2));\n        Show(&quot;Version:  &quot;, m1, m2, m1.CompareTo(m2), m1.CompareTo((Object)m2));\n        Show(&quot;Guid:     &quot;, n1, n2, n1.CompareTo(n2), n1.CompareTo((Object)n2));\n//\n        Console.WriteLine(&quot;{0}The following types are not CLS-compliant:&quot;, nl);\n        Show(&quot;SByte:    &quot;, w1, w2, w1.CompareTo(w2), w1.CompareTo((Object)w2));\n        Show(&quot;UInt16:   &quot;, x1, x2, x1.CompareTo(x2), x1.CompareTo((Object)x2));\n        Show(&quot;UInt32:   &quot;, y1, y2, y1.CompareTo(y2), y1.CompareTo((Object)y2));\n        Show(&quot;UInt64:   &quot;, z1, z2, z1.CompareTo(z2), z1.CompareTo((Object)z2));\n        }\n    catch (Exception e)\n        {\n        Console.WriteLine(e);\n        }\n    }\n\n    public static void Show(string caption, Object var1, Object var2, \n                            int resultGeneric, int resultNonGeneric)\n    {\n    string relation;\n\n    Console.Write(caption);\n    if (resultGeneric == resultNonGeneric) \n        {\n        if      (resultGeneric &lt; 0) relation = &quot;less than&quot;;\n        else if (resultGeneric &gt; 0) relation = &quot;greater than&quot;;\n        else                        relation = &quot;equal to&quot;;\n        Console.WriteLine(&quot;{0} is {1} {2}&quot;, var1, relation, var2);\n        }\n\n// The following condition will never occur because the generic and non-generic\n// CompareTo methods are equivalent.\n\n    else\n        {\n        Console.WriteLine(&quot;Generic CompareTo = {0}; non-generic CompareTo = {1}&quot;, \n                           resultGeneric, resultNonGeneric);\n        }\n   }\n}\n/*\nThis example produces the following results:\n\nThe following is the result of using the generic and non-generic versions of the\nCompareTo method for several base types:\n\nBoolean:  True is equal to True\nByte:     1 is equal to 1\nInt16:    -2 is less than 2\nInt32:    3 is equal to 3\nInt64:    4 is greater than -4\nDecimal:  -5.5 is less than 5.5\nSingle:   6.6 is equal to 6.6\nDouble:   7.7 is greater than -7.7\nChar:     A is equal to A\nString:   abc is equal to abc\nDateTime: 12/1/2003 5:37:46 PM is equal to 12/1/2003 5:37:46 PM\nTimeSpan: 11.22:33:44 is equal to 11.22:33:44\nVersion:  1.2.333.4 is less than 2.0\nGuid:     ca761232-ed42-11ce-bacd-00aa0057b223 is equal to ca761232-ed42-11ce-bacd-00\naa0057b223\n\nThe following types are not CLS-compliant:\nSByte:    8 is equal to 8\nUInt16:   9 is equal to 9\nUInt32:   10 is equal to 10\nUInt64:   11 is equal to 11\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Single_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_Single_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value indicating whether this instance is equal to a specified object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to compare with this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>obj</code> is an instance of <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> and equals the value of this instance; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The<a class=\"xref\" href=\"system.single#System_Single_Equals_\" data-linktype=\"relative-path\">Equals</a> method should be used with caution, because two apparently equivalent values can be unequal due to the differing precision of the two values. The following example reports that the <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value .3333 and the <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> returned by dividing 1 by 3 are unequal.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Single.Epsilon#3\">      // Initialize two floats with apparently identical values\n      float float1 = .33333f;\n      object float2 = 1/3;\n      // Compare them for equality\n      Console.WriteLine(float1.Equals(float2));    // displays false\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Single.Epsilon#3\">      &#39; Initialize two singles with apparently identical values\n      Dim single1 As Single = .33333\n      Dim single2 As Object = 1/3\n      &#39; Compare them for equality\n      Console.WriteLine(single1.Equals(single2))    &#39; displays False\n</code></pre><p> Rather than comparing for equality, one recommended technique involves defining an acceptable margin of difference between two values (such as .01% of one of the values). If the absolute value of the difference between the two values is less than or equal to that margin, the difference is likely to be due to differences in precision and, therefore, the values are likely to be equal. The following example uses this technique to compare .33333 and 1/3, the two <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values that the previous code example found to be unequal.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Single.Epsilon#4\">      // Initialize two floats with apparently identical values\n      float float1 = .33333f;\n      object float2 = (float) 1/3;\n      // Define the tolerance for variation in their values\n      float difference = Math.Abs(float1 * .0001f);\n\n      // Compare the values\n      // The output to the console indicates that the two values are equal\n      if (Math.Abs(float1 - (float) float2) &lt;= difference)\n         Console.WriteLine(&quot;float1 and float2 are equal.&quot;);\n      else\n         Console.WriteLine(&quot;float1 and float2 are unequal.&quot;);\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Single.Epsilon#4\">      &#39; Initialize two singles with apparently identical values\n      Dim single1 As Single = .33333\n      Dim single2 As Object = 1/3\n      &#39; Define the tolerance for variation in their values\n      Dim difference As Single = Math.Abs(single1 * .0001f)\n      \n      &#39; Compare the values\n      &#39; The output to the console indicates that the two values are equal\n      If Math.Abs(single1 - CSng(single2)) &lt;= difference Then\n         Console.WriteLine(&quot;single1 and single2 are equal.&quot;)\n      Else\n         Console.WriteLine(&quot;single1 and single2 are unequal.&quot;)\n      End If\n</code></pre><p> In this case, the values are equal.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Because <a class=\"xref\" href=\"system.single#System_Single_Epsilon\" data-linktype=\"relative-path\">Epsilon</a> defines the minimum expression of a positive value whose range is near zero, the margin of difference must be greater than <a class=\"xref\" href=\"system.single#System_Single_Epsilon\" data-linktype=\"relative-path\">Epsilon</a>. Typically, it is many times greater than <a class=\"xref\" href=\"system.single#System_Single_Epsilon\" data-linktype=\"relative-path\">Epsilon</a>.  </p>\n</div>\n<p> The precision of floating-point numbers beyond the documented precision is specific to the implementation and version of the .NET Framework. Consequently, a comparison of two particular numbers might change between versions of the .NET Framework because the precision of the numbers&#39; internal representation might change.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the Equals method.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Single#17\">      obj1 = (Single)500;\n\n      if ( a.Equals( obj1 ) )\n      {\n         Console::WriteLine( &quot;The value type and reference type values are equal.&quot; );\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Single#17\">            Obj1 = CType(500, Single)\n\n            If A.Equals(Obj1) Then\n                Console.WriteLine(&quot;The value type and reference type values are equal.&quot;)\n            End If\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Single#17\">            obj1 = (Single)500;\n            if (a.Equals(obj1)) {\n                Console.WriteLine(&quot;The value type and reference type values are equal.&quot;);\n            }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Single_Equals_System_Single_\">\r\n    \r\n            <a id=\"System_Single_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Single)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value indicating whether this instance and a specified <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> object represent the same value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Equals (float obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to compare with this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>obj</code> is equal to this instance; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method implements the <a class=\"xref\" href=\"system.iequatable-1\" data-linktype=\"relative-path\">System.IEquatable&lt;T&gt;</a> interface, and performs slightly better than <a class=\"xref\" href=\"system.single#System_Single_Equals_\" data-linktype=\"relative-path\">Equals</a> because it does not have to convert the <code>obj</code> parameter to an object.  </p>\n<h2 id=\"widening-conversions\">Widening Conversions</h2>\n<p> Depending on your programming language, it might be possible to code an Equals method where the parameter type has fewer bits (is narrower) than the instance type. This is possible because some programming languages perform an implicit widening conversion that represents the parameter as a type with as many bits as the instance.  </p>\n<p> For example, suppose the instance type is <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> and the parameter type is <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>. The Microsoft C# compiler generates instructions to represent the value of the parameter as a <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> object, and then generates a Equals method that compares the values of the instance and the widened representation of the parameter.  </p>\n<p> Consult your programming language&#39;s documentation to determine if its compiler performs implicit widening conversions of numeric types. For more information, see the <a href=\"../Topic/Type%20Conversion%20Tables%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Type Conversion Tables</a> topic.  </p>\n<h2 id=\"precision-in-comparisons\">Precision in Comparisons</h2>\n<p> TheEquals method should be used with caution, because two apparently equivalent values can be unequal because of the differing precision of the two values. The following example reports that the <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value .3333 and the <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> returned by dividing 1 by 3 are unequal.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Single.Epsilon#1\">      // Initialize two floats with apparently identical values\n      float float1 = .33333f;\n      float float2 = 1/3;\n      // Compare them for equality\n      Console.WriteLine(float1.Equals(float2));    // displays false\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Single.Epsilon#1\">      &#39; Initialize two singles with apparently identical values\n      Dim single1 As Single = .33333\n      Dim single2 As Single = 1/3\n      &#39; Compare them for equality\n      Console.WriteLine(single1.Equals(single2))    &#39; displays False\n</code></pre><p> One comparison technique that avoids the problems associated with comparing for equality involves defining an acceptable margin of difference between two values (such as .01% of one of the values). If the absolute value of the difference between the two values is less than or equal to that margin, the difference is likely to be an outcome of differences in precision and, therefore, the values are likely to be equal. The following example uses this technique to compare .33333 and 1/3, which are the two <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values that the previous code example found to be unequal.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Single.Epsilon#2\">      // Initialize two floats with apparently identical values\n      float float1 = .33333f;\n      float float2 = (float) 1/3;\n      // Define the tolerance for variation in their values\n      float difference = Math.Abs(float1 * .0001f);\n\n      // Compare the values\n      // The output to the console indicates that the two values are equal\n      if (Math.Abs(float1 - float2) &lt;= difference)\n         Console.WriteLine(&quot;float1 and float2 are equal.&quot;);\n      else\n         Console.WriteLine(&quot;float1 and float2 are unequal.&quot;);\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Single.Epsilon#2\">      &#39; Initialize two singles with apparently identical values\n      Dim single1 As Single = .33333\n      Dim single2 As Single = 1/3\n      &#39; Define the tolerance for variation in their values\n      Dim difference As Single = Math.Abs(single1 * .0001f)\n      \n      &#39; Compare the values\n      &#39; The output to the console indicates that the two values are equal\n      If Math.Abs(single1 - single2) &lt;= difference Then\n         Console.WriteLine(&quot;single1 and single2 are equal.&quot;)\n      Else\n         Console.WriteLine(&quot;single1 and single2 are unequal.&quot;)\n      End If\n</code></pre><p> In this case, the values are equal.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Because <a class=\"xref\" href=\"system.single#System_Single_Epsilon\" data-linktype=\"relative-path\">Epsilon</a> defines the minimum expression of a positive value whose range is near zero, the margin of difference must be greater than <a class=\"xref\" href=\"system.single#System_Single_Epsilon\" data-linktype=\"relative-path\">Epsilon</a>. Typically, it is many times greater than <a class=\"xref\" href=\"system.single#System_Single_Epsilon\" data-linktype=\"relative-path\">Epsilon</a>. Because of this, we recommend that you do not use <a class=\"xref\" href=\"system.double#System_Double_Epsilon\" data-linktype=\"relative-path\">Epsilon</a> when comparing <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values for equality.  </p>\n</div>\n<p> A second technique that avoids the problems associated with comparing for equality involves comparing the difference between two floating-point numbers with some absolute value. If the difference is less than or equal to that absolute value, the numbers are equal. If it is greater, the numbers are not equal. One way to do this is to arbitrarily select an absolute value. However, this is problematic, because an acceptable margin of difference depends on the magnitude of the <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values. A second way takes advantage of a design feature of the floating-point format: The difference between the mantissa components in the integer representations of two floating-point values indicates the number of possible floating-point values that separates the two values. For example, the difference between 0.0 and <a class=\"xref\" href=\"system.single#System_Single_Epsilon\" data-linktype=\"relative-path\">Epsilon</a> is 1, because <a class=\"xref\" href=\"system.single#System_Single_Epsilon\" data-linktype=\"relative-path\">Epsilon</a> is the smallest representable value when working with a <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> whose value is zero. The following example uses this technique to compare .33333 and 1/3, which are the two <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values that the previous code example with the Equals method found to be unequal. Note that the example uses the <a class=\"xref\" href=\"system.bitconverter#System_BitConverter_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> and <a class=\"xref\" href=\"system.bitconverter#System_BitConverter_ToInt32_\" data-linktype=\"relative-path\">ToInt32</a> methods to convert a single-precision floating-point value to its integer representation.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Single.Equals#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      float value1 = .1f * 10f;\n      float value2 = 0f;\n      for (int ctr = 0; ctr &lt; 10; ctr++)\n         value2 += .1f;\n         \n      Console.WriteLine(&quot;{0:R} = {1:R}: {2}&quot;, value1, value2,\n                        HasMinimalDifference(value1, value2, 1));\n   }\n\n   public static bool HasMinimalDifference(float value1, float value2, int units)\n   {\n      byte[] bytes = BitConverter.GetBytes(value1);\n      int iValue1 = BitConverter.ToInt32(bytes, 0);\n      \n      bytes = BitConverter.GetBytes(value2);\n      int iValue2 = BitConverter.ToInt32(bytes, 0);\n      \n      // If the signs are different, return false except for +0 and -0.\n      if ((iValue1 &gt;&gt; 31) != (iValue2 &gt;&gt; 31))\n      {\n         if (value1 == value2)\n            return true;\n          \n         return false;\n      }\n\n      int diff = Math.Abs(iValue1 - iValue2);\n\n      if (diff &lt;= units)\n         return true;\n\n      return false;\n   }\n}\n// The example displays the following output:\n//        1 = 1.00000012: True\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Single.Equals#1\">Module Example\n   Public Sub Main()\n      Dim value1 As Single = .1 * 10\n      Dim value2 As Single = 0\n      For ctr As Integer =  0 To 9\n         value2 += CSng(.1)\n      Next\n               \n      Console.WriteLine(&quot;{0:R} = {1:R}: {2}&quot;, value1, value2,\n                        HasMinimalDifference(value1, value2, 1))\n   End Sub\n\n   Public Function HasMinimalDifference(value1 As Single, value2 As Single, units As Integer) As Boolean\n      Dim bytes() As Byte = BitConverter.GetBytes(value1)\n      Dim iValue1 As Integer =  BitConverter.ToInt32(bytes, 0)\n      \n      bytes = BitConverter.GetBytes(value2)\n      Dim iValue2 As Integer =  BitConverter.ToInt32(bytes, 0)\n      \n      &#39; If the signs are different, Return False except for +0 and -0.\n      If ((iValue1 &gt;&gt; 31) &lt;&gt; (iValue2 &gt;&gt; 31)) Then\n         If value1 = value2 Then\n            Return True\n         End If           \n         Return False\n      End If\n\n      Dim diff As Integer =  Math.Abs(iValue1 - iValue2)\n\n      If diff &lt;= units Then\n         Return True\n      End If\n\n      Return False\n   End Function\nEnd Module\n&#39; The example displays the following output:\n&#39;       1 = 1.00000012: True\n</code></pre><p> The precision of floating-point numbers beyond the documented precision is specific to the implementation and version of the .NET Framework. Consequently, a comparison of two numbers might produce different results depending on the version of the .NET Framework, because the precision of the numbers&#39; internal representation might change.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Single_GetHashCode\">\r\n    \r\n            <a id=\"System_Single_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the hash code for this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer hash code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Single_GetTypeCode\">\r\n    \r\n            <a id=\"System_Single_GetTypeCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetTypeCode()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the <a class=\"xref\" href=\"system.typecode\" data-linktype=\"relative-path\">TypeCode</a> for value type <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TypeCode GetTypeCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typecode\" data-linktype=\"relative-path\">TypeCode</a></div>\r\n                  </div>\r\n                  <p>The enumerated constant, <a class=\"xref\" href=\"system.typecode\" data-linktype=\"relative-path\">TypeCode</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Single_IsInfinity_System_Single_\">\r\n    \r\n            <a id=\"System_Single_IsInfinity_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsInfinity(Single)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value indicating whether the specified number evaluates to negative or positive infinity.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsInfinity (float f);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>f</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A single-precision floating-point number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>f</code> evaluates to <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> or <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Floating-point operations return <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> or <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> to signal an overflow condition.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the IsInfinity method.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Single#11\">      // This will return S&quot;true&quot;.\n      Console::WriteLine( &quot;IsInfinity(3.0F / 0) == {0}.&quot;, Single::IsInfinity( 3.0F / zero ) ? (String^)&quot;true&quot; : &quot;false&quot; );\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Single#11\">            &#39; This will return &quot;True&quot;.\n            Console.Write(&quot;IsInfinity(3.0 / 0) = &quot;)\n            If Single.IsPositiveInfinity(3 / 0) Then\n                Console.WriteLine(&quot;True.&quot;)\n            Else\n                Console.WriteLine(&quot;False.&quot;)\n            End If\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Single#11\">            // This will return &quot;true&quot;.\n            Console.WriteLine(&quot;IsInfinity(3.0F / 0) == {0}.&quot;, Single.IsInfinity(3.0F / 0) ? &quot;true&quot; : &quot;false&quot;);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Single_IsNaN_System_Single_\">\r\n    \r\n            <a id=\"System_Single_IsNaN_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsNaN(Single)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value that indicates whether the specified value is not a number (<a class=\"xref\" href=\"system.single#System_Single_NaN\" data-linktype=\"relative-path\">NaN</a>).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsNaN (float f);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>f</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A single-precision floating-point number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>f</code> evaluates to not a number (<a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>); otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Floating-point operations return <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> to signal that that result of the operation is undefined. For example, dividing 0.0 by 0.0 results in <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> IsNaN returns <code>false</code> if a <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value is either <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> or <a class=\"xref\" href=\"system.single#System_Single_NegativeInfinity\" data-linktype=\"relative-path\">NegativeInfinity</a>. To test for these values, use the <a class=\"xref\" href=\"system.single#System_Single_IsInfinity_\" data-linktype=\"relative-path\">IsInfinity</a>, <a class=\"xref\" href=\"system.single#System_Single_IsPositiveInfinity_\" data-linktype=\"relative-path\">IsPositiveInfinity</a>, and <a class=\"xref\" href=\"system.single#System_Single_IsNegativeInfinity_\" data-linktype=\"relative-path\">IsNegativeInfinity</a> methods.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the IsNaN method.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Single#8\">      // This will return true.\n      if ( Single::IsNaN( 0 / zero ) )\n      {\n         Console::WriteLine( &quot;Single::IsNan() can determine whether a value is not-a-number.&quot; );\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Single#8\">            &#39; This will return true.\n            If Single.IsNaN(0 / zero) Then\n                Console.WriteLine(&quot;Single.IsNan() can determine whether a value is not-a-number.&quot;)\n            End If\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Single#8\">            // This will return true.\n            if (Single.IsNaN(0 / zero))\n            {\n                Console.WriteLine(&quot;Single.IsNan() can determine whether a value is not-a-number.&quot;);\n            }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Single_IsNegativeInfinity_System_Single_\">\r\n    \r\n            <a id=\"System_Single_IsNegativeInfinity_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsNegativeInfinity(Single)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value indicating whether the specified number evaluates to negative infinity.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsNegativeInfinity (float f);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>f</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A single-precision floating-point number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>f</code> evaluates to <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Floating-point operations return <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> to signal an overflow condition.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the IsNegativeInfinity method.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Single#13\">      // This will return true.\n      Console::WriteLine( &quot;IsNegativeInfinity(-5.0F / 0) == {0}.&quot;, Single::IsNegativeInfinity(  -5.0F / zero ) ? (String^)&quot;true&quot; : &quot;false&quot; );\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Single#13\">            &#39; This will return True.\n            Console.Write(&quot;IsNegativeInfinity(-5.0 / 0) = &quot;)\n            If Single.IsNegativeInfinity(-5 / 0) Then\n                Console.WriteLine(&quot;True.&quot;)\n            Else\n                Console.WriteLine(&quot;False.&quot;)\n            End If\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Single#13\">            // This will return true.\n            Console.WriteLine(&quot;IsNegativeInfinity(-5.0F / 0) == {0}.&quot;, Single.IsNegativeInfinity(-5.0F / 0) ? &quot;true&quot; : &quot;false&quot;);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Single_IsPositiveInfinity_System_Single_\">\r\n    \r\n            <a id=\"System_Single_IsPositiveInfinity_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsPositiveInfinity(Single)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value indicating whether the specified number evaluates to positive infinity.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsPositiveInfinity (float f);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>f</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A single-precision floating-point number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>f</code> evaluates to <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Floating-point operations return <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> to signal an overflow condition.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the IsPositiveInfinity method.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Single#12\">      // This will return true.\n      Console::WriteLine( &quot;IsPositiveInfinity(4.0F / 0) == {0}.&quot;, Single::IsPositiveInfinity( 4.0F / zero ) ? (String^)&quot;true&quot; : &quot;false&quot; );\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Single#12\">            &#39; This will return True.\n            Console.Write(&quot;IsPositiveInfinity(4.0 / 0) = &quot;)\n            If Single.IsPositiveInfinity(4 / 0) Then\n                Console.WriteLine(&quot;True.&quot;)\n            Else\n                Console.WriteLine(&quot;False.&quot;)\n            End If\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Single#12\">            // This will return true.\n            Console.WriteLine(&quot;IsPositiveInfinity(4.0F / 0) == {0}.&quot;, Single.IsPositiveInfinity(4.0F / 0) ? &quot;true&quot; : &quot;false&quot;);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Single_Parse_System_String_\">\r\n    \r\n            <a id=\"System_Single_Parse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Parse(String)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the string representation of a number to its single-precision floating-point number equivalent.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static float Parse (string s);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains a number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p>A single-precision floating-point number equivalent to the numeric value or symbol specified in <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> does not represent a number in a valid format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> represents a number less than <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> or greater than <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>s</code> parameter can contain the current culture&#39;s <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_PositiveInfinitySymbol_\" data-linktype=\"relative-path\">PositiveInfinitySymbol</a>, <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_NegativeInfinitySymbol_\" data-linktype=\"relative-path\">NegativeInfinitySymbol</a>, <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_NaNSymbol_\" data-linktype=\"relative-path\">NaNSymbol</a>, or a string of the form:  </p>\n<p> [<em>ws</em>][<em>sign</em>] [<em>integral-digits</em>[<em>,</em>]]<em>integral-digits</em>[<em>.</em>[<em>fractional-digits</em>]][e[<em>sign</em>]<em>exponential-digits</em>][<em>ws</em>]  </p>\n<p> Elements in square brackets ([ and ]) are optional. The following table describes each element.  </p>\n<table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>ws</em></td>\n<td>A series of white space characters.</td>\n</tr>\n<tr>\n<td><em>sign</em></td>\n<td>A negative sign symbol or a positive sign symbol. Valid sign characters are determined by the <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_NegativeSign_\" data-linktype=\"relative-path\">NegativeSign</a> and <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_PositiveSign_\" data-linktype=\"relative-path\">PositiveSign</a> properties of the current culture. Only a leading sign can be used.</td>\n</tr>\n<tr>\n<td><em>integral-digits</em></td>\n<td>A series of digits ranging from 0 to 9 that specify the integral part of the number. Runs of <em>integral-digits</em> can be partitioned by a group-separator symbol. For example, in some cultures a comma (,) separates groups of thousands. The <em>integral-digits</em> element can be absent if the string contains the <em>fractional-digits</em> element.</td>\n</tr>\n<tr>\n<td><em>,</em></td>\n<td>A culture-specific thousands separator symbol.</td>\n</tr>\n<tr>\n<td><em>.</em></td>\n<td>A culture-specific decimal point symbol.</td>\n</tr>\n<tr>\n<td><em>fractional-digits</em></td>\n<td>A series of digits ranging from 0 to 9 that specify the fractional part of the number.</td>\n</tr>\n<tr>\n<td>E</td>\n<td>The &quot;e&quot; or &quot;E&quot; character, which indicates that the value is represented in exponential (scientific) notation.</td>\n</tr>\n<tr>\n<td><em>exponential-digits</em></td>\n<td>A series of digits ranging from 0 to 9 that specify an exponent.</td>\n</tr>\n</tbody>\n</table>\n<p> The <code>s</code> parameter is interpreted using a combination of the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> and <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flags. This means that white space and thousands separators are allowed but currency symbols are not. To explicitly define the elements (such as currency symbols, thousands separators, and white space) that can be present in <code>s</code>, use the <a class=\"xref\" href=\"system.single#System_Single_Parse_System_String_System_Globalization_NumberStyles_\" data-linktype=\"relative-path\">Parse(String,NumberStyles)</a> method overload.  </p>\n<p> The <code>s</code> parameter is parsed by using the formatting information in a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that is initialized for the current system culture. For more information, see <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrentInfo_\" data-linktype=\"relative-path\">CurrentInfo</a>. To parse a string by using the formatting information of a specific culture, use the <a class=\"xref\" href=\"system.single#System_Single_Parse_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">Parse(String,IFormatProvider)</a> or <a class=\"xref\" href=\"system.single#System_Single_Parse_System_String_System_Globalization_NumberStyles_System_IFormatProvider_\" data-linktype=\"relative-path\">Parse(String,NumberStyles,IFormatProvider)</a> method.  </p>\n<p> Ordinarily, if you pass the <a class=\"xref\" href=\"system.single#System_Single_Parse_\" data-linktype=\"relative-path\">Parse</a> method a string that is created by calling the <a class=\"xref\" href=\"system.single#System_Single_ToString_\" data-linktype=\"relative-path\">ToString</a> method, the original <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value is returned. However, because of a loss of precision, the values may not be equal.  </p>\n<p> If a separator is encountered in the <code>s</code> parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator. For more information about separators, see <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrencyDecimalSeparator_\" data-linktype=\"relative-path\">CurrencyDecimalSeparator</a>, <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_NumberDecimalSeparator_\" data-linktype=\"relative-path\">NumberDecimalSeparator</a>, <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrencyGroupSeparator_\" data-linktype=\"relative-path\">CurrencyGroupSeparator</a>, and <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_NumberGroupSeparator_\" data-linktype=\"relative-path\">NumberGroupSeparator</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the Parse method to convert an array of strings to equivalent <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Single.Parse#2\">Module Example\n   Public Sub Main()\n      Dim values() As String = { &quot;100&quot;, &quot;(100)&quot;, &quot;-123,456,789&quot;, &quot;123.45e+6&quot;, _\n                                 &quot;+500&quot;, &quot;5e2&quot;, &quot;3.1416&quot;, &quot;600.&quot;, &quot;-.123&quot;, _\n                                 &quot;-Infinity&quot;, &quot;-1E-16&quot;, Double.MaxValue.ToString(), _\n                                 Single.MinValue.ToString(), String.Empty }\n      For Each value As String In values\n         Try   \n            Dim number As Single = Single.Parse(value)\n            Console.WriteLine(&quot;{0} -&gt; {1}&quot;, value, number)\n         Catch e As FormatException\n            Console.WriteLine(&quot;&#39;{0}&#39; is not in a valid format.&quot;, value)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;{0} is outside the range of a Single.&quot;, value)\n         End Try\n      Next                                  \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       100 -&gt; 100\n&#39;       &#39;(100)&#39; is not in a valid format.\n&#39;       -123,456,789 -&gt; -1.234568E+08\n&#39;       123.45e+6 -&gt; 1.2345E+08\n&#39;       +500 -&gt; 500\n&#39;       5e2 -&gt; 500\n&#39;       3.1416 -&gt; 3.1416\n&#39;       600. -&gt; 600\n&#39;       -.123 -&gt; -0.123\n&#39;       -Infinity -&gt; -Infinity\n&#39;       -1E-16 -&gt; -1E-16\n&#39;       1.79769313486232E+308 is outside the range of a Single.\n&#39;       -3.402823E+38 -&gt; -3.402823E+38\n&#39;       &#39;&#39; is not in a valid format.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Single.Parse#2\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string[] values = { &quot;100&quot;, &quot;(100)&quot;, &quot;-123,456,789&quot;, &quot;123.45e+6&quot;, \n                          &quot;+500&quot;, &quot;5e2&quot;, &quot;3.1416&quot;, &quot;600.&quot;, &quot;-.123&quot;, \n                          &quot;-Infinity&quot;, &quot;-1E-16&quot;, Double.MaxValue.ToString(), \n                          Single.MinValue.ToString(), String.Empty };\n      foreach (string value in values)\n      {\n         try {   \n            float number = Single.Parse(value);\n            Console.WriteLine(&quot;{0} -&gt; {1}&quot;, value, number);\n         }\n         catch (FormatException) {\n            Console.WriteLine(&quot;&#39;{0}&#39; is not in a valid format.&quot;, value);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;{0} is outside the range of a Single.&quot;, value);\n         }\n      }                                  \n   }\n}\n// The example displays the following output:\n//       100 -&gt; 100\n//       &#39;(100)&#39; is not in a valid format.\n//       -123,456,789 -&gt; -1.234568E+08\n//       123.45e+6 -&gt; 1.2345E+08\n//       +500 -&gt; 500\n//       5e2 -&gt; 500\n//       3.1416 -&gt; 3.1416\n//       600. -&gt; 600\n//       -.123 -&gt; -0.123\n//       -Infinity -&gt; -Infinity\n//       -1E-16 -&gt; -1E-16\n//       1.79769313486232E+308 is outside the range of a Single.\n//       -3.402823E+38 -&gt; -3.402823E+38\n//       &#39;&#39; is not in a valid format.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Single_Parse_System_String_System_Globalization_NumberStyles_\">\r\n    \r\n            <a id=\"System_Single_Parse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Parse(String,NumberStyles)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the string representation of a number in a specified style to its single-precision floating-point number equivalent.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static float Parse (string s, System.Globalization.NumberStyles style);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains a number to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>style</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitwise combination of enumeration values that indicates the style elements that can be present in <code>s</code>. A typical value to specify is <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> combined with <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p>A single-precision floating-point number that is equivalent to the numeric value or symbol specified in <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is not a number in a valid format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> represents a number that is less than <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> or greater than <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>style</code> is not a <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> value.  </p>\n<p> -or-  </p>\n<p> <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>style</code> parameter defines the style elements (such as white space, thousands separators, and currency symbols) that are allowed in the <code>s</code> parameter for the parse operation to succeed. It must be a combination of bit flags from the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> enumeration. The following <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> members are not supported:  </p>\n<ul>\n<li><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a>  \n</li>\n<li><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a>  \n\n<p>The <code>s</code> parameter can contain the current culture&#39;s <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_PositiveInfinitySymbol_\" data-linktype=\"relative-path\">PositiveInfinitySymbol</a>, <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_NegativeInfinitySymbol_\" data-linktype=\"relative-path\">NegativeInfinitySymbol</a>, <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_NaNSymbol_\" data-linktype=\"relative-path\">NaNSymbol</a>. Depending on the value of <code>style</code>, it can also take the form:  </p>\n<p>[<em>ws</em>][<em>$</em>][<em>sign</em>][<em>integral-digits</em>[<em>,</em>]]<em>integral-digits</em>[<em>.</em>[<em>fractional-digits</em>]][E[<em>sign</em>]<em>exponential-digits</em>][<em>ws</em>]  </p>\n<p>Elements in square brackets ([ and ]) are optional. The following table describes each element.  </p>\n<p><em>ws</em><br>A series of white-space characters. White space can appear at the beginning of <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag, and it can appear at the end of <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.  </p>\n<p>$<br>A culture-specific currency symbol. Its position in the string is defined by the <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrencyNegativePattern_\" data-linktype=\"relative-path\">CurrencyNegativePattern</a> and <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrencyPositivePattern_\" data-linktype=\"relative-path\">CurrencyPositivePattern</a> properties of the current culture. The current culture&#39;s currency symbol can appear in <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.  </p>\n<p><em>sign</em><br>A negative sign symbol (-) or a positive sign symbol (+). The sign can appear at the beginning of <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag, and it can appear at the end of <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag. Parentheses can be used in <code>s</code> to indicate a negative value if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.  </p>\n<p><em>integral-digits</em><br>A series of digits ranging from 0 to 9 that specify the integral part of the number. The <em>integral-digits</em> element can be absent if the string contains the <em>fractional-digits</em> element.  </p>\n<p>,<br>A culture-specific group separator. The current culture&#39;s group separator symbol can appear in <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag  </p>\n<p>.<br>A culture-specific decimal point symbol. The current culture&#39;s decimal point symbol can appear in <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.  </p>\n<p><em>fractional-digits</em><br>A series of digits ranging from 0 to 9 that specify the fractional part of the number. Fractional digits can appear in <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.  </p>\n<p>E<br>The &quot;e&quot; or &quot;E&quot; character, which indicates that the value is represented in exponential (scientific) notation. The <code>value</code> parameter can represent a number in exponential notation if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.  </p>\n<p><em>exponential-digits</em><br>A series of digits ranging from 0 to 9 that specify an exponent.  </p>\n<p>A string with digits only (which corresponds to the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> style) always parses successfully. The remaining <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> members control elements that may be present, but are not required to be present, in the input string. The following table indicates how individual <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> flags affect the elements that may be present in <code>s</code>.  </p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>NumberStyles value</th>\n<th>Elements permitted in <code>s</code> in addition to digits</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>integral-digits</em> element only.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The decimal point (<em>.</em>) and <em>fractional-digits</em> elements.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The &quot;e&quot; or &quot;E&quot; character, which indicates exponential notation. This flag by itself supports values in the form <em>digits</em>E<em>digits</em>; additional flags are needed to successfully parse strings with such elements as positive or negative signs and decimal point symbols.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>ws</em> element at the beginning of <code>s</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>ws</em> element at the end of <code>s</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>sign</em> element at the beginning of <code>s</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>sign</em> element at the end of <code>s</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>sign</em> element in the form of parentheses enclosing the numeric value.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The thousands separator (,) element.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The currency ($) element.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>All elements. However, <code>s</code> cannot represent a hexadecimal number or a number in exponential notation.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>ws</em> element at the beginning or end of <code>s</code>, <em>sign</em> at the beginning of <code>s</code>, and the decimal point (.) symbol. The <code>s</code> parameter can also use exponential notation.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <code>ws</code>, <code>sign</code>, thousands separator (,) and decimal point (.) elements.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>All elements. However, <code>s</code> cannot represent a hexadecimal number.</td>\n</tr>\n</tbody>\n</table>\n<p> Some examples of <code>s</code> are &quot;100&quot;, &quot;-123,456,789&quot;, &quot;123.45e+6&quot;, &quot;+500&quot;, &quot;5e2&quot;, &quot;3.1416&quot;, &quot;600.&quot;, &quot;-.123&quot;, and &quot;-Infinity&quot;.  </p>\n<p> The <code>s</code> parameter is parsed using the formatting information in a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that is initialized for the current system culture. To specify the culture whose formatting information is used for the parse operation, call the <a class=\"xref\" href=\"system.single#System_Single_Parse_System_String_System_Globalization_NumberStyles_System_IFormatProvider_\" data-linktype=\"relative-path\">Parse(String,NumberStyles,IFormatProvider)</a> overload.  </p>\n<p> Ordinarily, if you pass the <a class=\"xref\" href=\"system.single#System_Single_Parse_\" data-linktype=\"relative-path\">Parse</a> method a string that is created by calling the <a class=\"xref\" href=\"system.single#System_Single_ToString_\" data-linktype=\"relative-path\">ToString</a> method, the original <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value is returned. However, because of a loss of precision, the values may not be equal.  </p>\n<p> If a separator is encountered in the <code>s</code> parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator. For more information about separators, see <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrencyDecimalSeparator_\" data-linktype=\"relative-path\">CurrencyDecimalSeparator</a>, <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_NumberDecimalSeparator_\" data-linktype=\"relative-path\">NumberDecimalSeparator</a>, <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrencyGroupSeparator_\" data-linktype=\"relative-path\">CurrencyGroupSeparator</a>, and <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_NumberGroupSeparator_\" data-linktype=\"relative-path\">NumberGroupSeparator</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the Parse method to parse the string representations of <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values. The example uses formatting information for the en-US culture.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Single.Parse#3\">Imports System.Globalization\nImports System.Threading\n\nModule ParseStrings\n   Public Sub Main()\n      &#39; Set current thread culture to en-US.\n      Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(&quot;en-US&quot;)\n            \n      Dim value As String\n      Dim styles As NumberStyles\n      \n      &#39; Parse a string in exponential notation with only the AllowExponent flag. \n      value = &quot;-1.063E-02&quot;\n      styles = NumberStyles.AllowExponent\n      ShowNumericValue(value, styles) \n      \n      &#39; Parse a string in exponential notation\n      &#39; with the AllowExponent and Number flags.\n      styles = NumberStyles.AllowExponent Or NumberStyles.Number\n      ShowNumericValue(value, styles)\n\n      &#39; Parse a currency value with leading and trailing white space, and\n      &#39; white space after the U.S. currency symbol.\n      value = &quot; $ 6,164.3299  &quot;\n      styles = NumberStyles.Number Or NumberStyles.AllowCurrencySymbol\n      ShowNumericValue(value, styles)\n      \n      &#39; Parse negative value with thousands separator and decimal.\n      value = &quot;(4,320.64)&quot;\n      styles = NumberStyles.AllowParentheses Or NumberStyles.AllowTrailingSign _\n               Or NumberStyles.Float \n      ShowNumericValue(value, styles)\n      \n      styles = NumberStyles.AllowParentheses Or NumberStyles.AllowTrailingSign _\n               Or NumberStyles.Float Or NumberStyles.AllowThousands\n      ShowNumericValue(value, styles)\n   End Sub\n   \n   Private Sub ShowNumericValue(value As String, styles As NumberStyles)\n      Dim number As Single\n      Try\n         number = Single.Parse(value, styles)\n         Console.WriteLine(&quot;Converted &#39;{0}&#39; using {1} to {2}.&quot;, _\n                           value, styles.ToString(), number)\n      Catch e As FormatException\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39; with styles {1}.&quot;, _\n                           value, styles.ToString())\n      End Try\n      Console.WriteLine()                           \n   End Sub\nEnd Module\n&#39; The example displays the following output to the console:\n&#39;    Unable to parse &#39;-1.063E-02&#39; with styles AllowExponent.\n&#39;    \n&#39;    Converted &#39;-1.063E-02&#39; using AllowTrailingSign, AllowThousands, Float to -0.01063.\n&#39;    \n&#39;    Converted &#39; $ 6,164.3299  &#39; using Number, AllowCurrencySymbol to 6164.3299.\n&#39;    \n&#39;    Unable to parse &#39;(4,320.64)&#39; with styles AllowTrailingSign, AllowParentheses, Float.\n&#39;    \n&#39;    Converted &#39;(4,320.64)&#39; using AllowTrailingSign, AllowParentheses, AllowThousands, Float to -4320.64.   \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Single.Parse#3\">using System;\nusing System.Globalization;\nusing System.Threading;\n\npublic class ParseString\n{\n   public static void Main()\n   {\n      // Set current thread culture to en-US.\n      Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(&quot;en-US&quot;);\n      \n      string value;\n      NumberStyles styles;\n      \n      // Parse a string in exponential notation with only the AllowExponent flag. \n      value = &quot;-1.063E-02&quot;;\n      styles = NumberStyles.AllowExponent;\n      ShowNumericValue(value, styles);\n      \n      // Parse a string in exponential notation\n      // with the AllowExponent and Number flags.\n      styles = NumberStyles.AllowExponent | NumberStyles.Number;\n      ShowNumericValue(value, styles);\n\n      // Parse a currency value with leading and trailing white space, and\n      // white space after the U.S. currency symbol.\n      value = &quot; $ 6,164.3299  &quot;;\n      styles = NumberStyles.Number | NumberStyles.AllowCurrencySymbol;\n      ShowNumericValue(value, styles);\n      \n      // Parse negative value with thousands separator and decimal.\n      value = &quot;(4,320.64)&quot;;\n      styles = NumberStyles.AllowParentheses | NumberStyles.AllowTrailingSign |\n               NumberStyles.Float; \n      ShowNumericValue(value, styles);\n      \n      styles = NumberStyles.AllowParentheses | NumberStyles.AllowTrailingSign |\n               NumberStyles.Float | NumberStyles.AllowThousands;\n      ShowNumericValue(value, styles);\n   }\n\n   private static void ShowNumericValue(string value, NumberStyles styles)\n   {\n      Single number;\n      try\n      {\n         number = Single.Parse(value, styles);\n         Console.WriteLine(&quot;Converted &#39;{0}&#39; using {1} to {2}.&quot;, \n                           value, styles.ToString(), number);\n      }\n      catch (FormatException)\n      {\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39; with styles {1}.&quot;, \n                           value, styles.ToString());\n      }\n      Console.WriteLine();                           \n   }   \n}\n// The example displays the following output to the console:\n//    Unable to parse &#39;-1.063E-02&#39; with styles AllowExponent.\n//    \n//    Converted &#39;-1.063E-02&#39; using AllowTrailingSign, AllowThousands, Float to -0.01063.\n//    \n//    Converted &#39; $ 6,164.3299  &#39; using Number, AllowCurrencySymbol to 6164.3299.\n//    \n//    Unable to parse &#39;(4,320.64)&#39; with styles AllowTrailingSign, AllowParentheses, Float.\n//    \n//    Converted &#39;(4,320.64)&#39; using AllowTrailingSign, AllowParentheses, AllowThousands, Float to -4320.64.   \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Single_Parse_System_String_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Single_Parse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Parse(String,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the string representation of a number in a specified culture-specific format to its single-precision floating-point number equivalent.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static float Parse (string s, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains a number to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information about <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p>A single-precision floating-point number equivalent to the numeric value or symbol specified in <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> does not represent a number in a valid format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> represents a number less than <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> or greater than <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This overload is typically used to convert text that can be formatted in a variety of ways to a <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value. For example, it can be used to convert the text entered by a user into an HTML text box to a numeric value.  </p>\n<p> The <code>s</code> parameter is interpreted using a combination of the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> and <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flags. The <code>s</code> parameter can contain <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_PositiveInfinitySymbol_\" data-linktype=\"relative-path\">PositiveInfinitySymbol</a>, <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_NegativeInfinitySymbol_\" data-linktype=\"relative-path\">NegativeInfinitySymbol</a>, or <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_NaNSymbol_\" data-linktype=\"relative-path\">NaNSymbol</a> for the culture specified by <code>provider</code>, or it can contain a string of the form:  </p>\n<p> [<em>ws</em>][<em>sign</em>]<em>integral-digits</em>[<em>.</em>[<em>fractional-digits</em>]][E[<em>sign</em>]<em>exponential-digits</em>][<em>ws</em>]  </p>\n<p> Optional elements are framed in square brackets ([ and ]). Elements that contain the term &quot;digits&quot; consist of a series of numeric characters ranging from 0 to 9.  </p>\n<table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>ws</em></td>\n<td>A series of white-space characters.</td>\n</tr>\n<tr>\n<td><em>sign</em></td>\n<td>A negative sign symbol (-) or a positive sign symbol (+).</td>\n</tr>\n<tr>\n<td><em>integral-digits</em></td>\n<td>A series of digits ranging from 0 to 9 that specify the integral part of the number. Runs of <em>integral-digits</em> can be partitioned by a group-separator symbol. For example, in some cultures a comma (,) separates groups of thousands. The <em>integral-digits</em> element can be absent if the string contains the <em>fractional-digits</em> element.</td>\n</tr>\n<tr>\n<td>.</td>\n<td>A culture-specific decimal point symbol.</td>\n</tr>\n<tr>\n<td><em>fractional-digits</em></td>\n<td>A series of digits ranging from 0 to 9 that specify the fractional part of the number.</td>\n</tr>\n<tr>\n<td>E</td>\n<td>The &quot;e&quot; or &quot;E&quot; character, which indicates that the value is represented in exponential (scientific) notation.</td>\n</tr>\n<tr>\n<td><em>exponential-digits</em></td>\n<td>A series of digits ranging from 0 to 9 that specify an exponent.</td>\n</tr>\n</tbody>\n</table>\n<p> For more information about numeric formats, see the <a href=\"../Topic/Formatting%20Types%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Formatting Types</a> topic.  </p>\n<p> The <code>provider</code> parameter is an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation whose <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method returns a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that provides culture-specific formatting information. When the Parse method is invoked, it calls the <code>provider</code> parameter&#39;s <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method and passes it a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> type. The <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method then returns the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that provides information about the format of the <code>s</code> parameter. There are three ways to use the <code>provider</code> parameter to supply custom formatting information to the parse operation:  </p>\n<ul>\n<li><p>You can pass a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents the culture that supplies formatting information. Its <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method returns the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that provides numeric formatting information for that culture.  </p>\n</li>\n<li><p>You can pass the actual <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that provides numeric formatting information. (Its implementation of <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> just returns itself.)  </p>\n</li>\n<li><p>You can pass a custom object that implements <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a>. Its <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method instantiates and returns the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that provides formatting information.  </p>\n<p>If <code>provider</code> is <code>null</code> or a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> cannot be obtained, the formatting information for the current system culture is used.  </p>\n<p>If a separator is encountered in the <code>s</code> parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator. For more information about separators, see <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrencyDecimalSeparator_\" data-linktype=\"relative-path\">CurrencyDecimalSeparator</a>, <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_NumberDecimalSeparator_\" data-linktype=\"relative-path\">NumberDecimalSeparator</a>, <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrencyGroupSeparator_\" data-linktype=\"relative-path\">CurrencyGroupSeparator</a>, and <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_NumberGroupSeparator_\" data-linktype=\"relative-path\">NumberGroupSeparator</a>.  </p>\n<p>Some examples of <code>s</code> are &quot;100&quot;, &quot;-123,456,789&quot;, &quot;123.45e+6&quot;, &quot;+500&quot;, &quot;5e2&quot;, &quot;3.1416&quot;, &quot;600.&quot;, &quot;-.123&quot;, and &quot;-Infinity&quot;.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example is the button click event handler of a Web form. It uses the array returned by the <a class=\"xref\" href=\"system.web.httprequest#System_Web_HttpRequest_UserLanguages_\" data-linktype=\"relative-path\">UserLanguages</a> property to determine the user&#39;s locale. It then instantiates a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that corresponds to that locale. The <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that belongs to that <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object is then passed to the Parse method to convert the user&#39;s input to a <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value.  </p>\n<pre><code class=\"lang-cs\" name=\"ParseMethod#1\">protected void OkToSingle_Click(object sender, EventArgs e)\n{\n   string locale;\n   float number;\n   CultureInfo culture; \n\n   // Return if string is empty\n   if (String.IsNullOrEmpty(this.inputNumber.Text))\n      return;\n\n   // Get locale of web request to determine possible format of number\n   if (Request.UserLanguages.Length == 0)\n      return;\n   locale = Request.UserLanguages[0];\n   if (String.IsNullOrEmpty(locale))\n      return; \n\n   // Instantiate CultureInfo object for the user&#39;s locale\n   culture = new CultureInfo(locale);\n   \n   // Convert user input from a string to a number\n   try\n   {\n      number = Single.Parse(this.inputNumber.Text, culture.NumberFormat);\n   }\n   catch (FormatException)\n   {\n      return;\n   }\n   catch (Exception)\n   {\n      return;\n   }\n   // Output number to label on web form\n   this.outputNumber.Text = &quot;Number is &quot; + number.ToString();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"ParseMethod#1\">Protected Sub OkToSingle_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles OkToSingle.Click\n   Dim locale As String\n   Dim culture As CultureInfo\n   Dim number As Single\n\n   &#39; Return if string is empty\n   If String.IsNullOrEmpty(Me.inputNumber.Text) Then Exit Sub\n\n   &#39; Get locale of web request to determine possible format of number\n   If Request.UserLanguages.Length = 0 Then Exit Sub\n   locale = Request.UserLanguages(0)\n   If String.IsNullOrEmpty(locale) Then Exit Sub\n\n   &#39; Instantiate CultureInfo object for the user&#39;s locale\n   culture = New CultureInfo(locale)\n\n   &#39; Convert user input from a string to a number\n   Try\n      number = Single.Parse(Me.inputNumber.Text, culture.NumberFormat)\n   Catch ex As FormatException\n      Exit Sub\n   Catch ex As OverflowException\n      Exit Sub\n   End Try\n\n   &#39; Output number to label on web form\n   Me.outputNumber.Text = &quot;Number is &quot; &amp; number.ToString()\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Single_Parse_System_String_System_Globalization_NumberStyles_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Single_Parse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Parse(String,NumberStyles,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the string representation of a number in a specified style and culture-specific format to its single-precision floating-point number equivalent.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static float Parse (string s, System.Globalization.NumberStyles style, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains a number to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>style</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitwise combination of enumeration values that indicates the style elements that can be present in <code>s</code>. A typical value to specify is <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> combined with <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information about <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p>A single-precision floating-point number equivalent to the numeric value or symbol specified in <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> does not represent a numeric value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>style</code> is not a <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> value.  </p>\n<p> -or-  </p>\n<p> <code>style</code> is the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> represents a number that is less than <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> or greater than <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>style</code> parameter defines the style elements (such as white space, thousands separators, and currency symbols) that are allowed in the <code>s</code> parameter for the parse operation to succeed. It must be a combination of bit flags from the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> enumeration. The following <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> members are not supported:  </p>\n<ul>\n<li><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a>  \n</li>\n<li><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a>  \n\n<p>The <code>s</code> parameter can contain <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_PositiveInfinitySymbol_\" data-linktype=\"relative-path\">PositiveInfinitySymbol</a>, <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_NegativeInfinitySymbol_\" data-linktype=\"relative-path\">NegativeInfinitySymbol</a>, or <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_NaNSymbol_\" data-linktype=\"relative-path\">NaNSymbol</a> for the culture specified by <code>provider</code>. Depending on the value of <code>style</code>, it can also take the form:  </p>\n<p>[<em>ws</em>] [<em>$</em>] [<em>sign</em>][<em>integral-digits</em>,]<em>integral-digits</em>[.[<em>fractional-digits</em>]][E[<em>sign</em>]<em>exponential-digits</em>][<em>ws</em>]  </p>\n<p>Elements framed in square brackets ([ and ]) are optional. The following table describes each element.  </p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>ws</em></td>\n<td>A series of white-space characters. White space can appear at the beginning of <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag, and it can appear at the end of <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td>$</td>\n<td>A culture-specific currency symbol. Its position in the string is defined by the <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrencyNegativePattern_\" data-linktype=\"relative-path\">CurrencyNegativePattern</a> and <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrencyPositivePattern_\" data-linktype=\"relative-path\">CurrencyPositivePattern</a> properties of the current culture. The current culture&#39;s currency symbol can appear in <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>sign</em></td>\n<td>A negative sign symbol (-) or a positive sign symbol (+). The sign can appear at the beginning of <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag, and it can appear at the end of <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag. Parentheses can be used in <code>s</code> to indicate a negative value if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>integral-digits</em></td>\n<td>A series of digits ranging from 0 to 9 that specify the integral part of the number. The <em>integral-digits</em> element can be absent if the string contains the <em>fractional-digits</em> element.</td>\n</tr>\n<tr>\n<td>,</td>\n<td>A culture-specific group separator. The current culture&#39;s group separator symbol can appear in <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag</td>\n</tr>\n<tr>\n<td>.</td>\n<td>A culture-specific decimal point symbol. The current culture&#39;s decimal point symbol can appear in <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>fractional-digits</em></td>\n<td>A series of digits ranging from 0 to 9 that specify the fractional part of the number. Fractional digits can appear in <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td>E</td>\n<td>The &quot;e&quot; or &quot;E&quot; character, which indicates that the value is represented in exponential (scientific) notation. The <code>s</code> parameter can represent a number in exponential notation if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>exponential-digits</em></td>\n<td>A series of digits ranging from 0 to 9 that specify an exponent.</td>\n</tr>\n</tbody>\n</table>\n<p> A string with digits only (which corresponds to the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> style) always parses successfully. The remaining <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> members control elements that may be present, but are not required to be present, in the input string. The following table indicates how individual <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> flags affect the elements that may be present in <code>s</code>.  </p>\n<table>\n<thead>\n<tr>\n<th>NumberStyles value</th>\n<th>Elements permitted in <code>s</code> in addition to digits</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>integral-digits</em> element only.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The decimal point (<em>.</em>) and <em>fractional-digits</em> elements.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The &quot;e&quot; or &quot;E&quot; character, which indicates exponential notation. This flag by itself supports values in the form <em>digits</em>E<em>digits</em>; additional flags are needed to successfully parse strings with such elements as positive or negative signs and decimal point symbols.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>ws</em> element at the beginning of <code>s</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>ws</em> element at the end of <code>s</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>sign</em> element at the beginning of <code>s</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>sign</em> element at the end of <code>s</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>sign</em> element in the form of parentheses enclosing the numeric value.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The thousands separator (,) element.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The currency ($) element.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>All elements. However, <code>s</code> cannot represent a hexadecimal number or a number in exponential notation.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>ws</em> element at the beginning or end of <code>s</code>, <em>sign</em> at the beginning of <code>s</code>, and the decimal point (.) symbol. The <code>s</code> parameter can also use exponential notation.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <code>ws</code>, <code>sign</code>, thousands separator (,) and decimal point (.) elements.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>All elements. However, <code>s</code> cannot represent a hexadecimal number.</td>\n</tr>\n</tbody>\n</table>\n<p> The <code>provider</code> parameter is an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation. Its <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method returns a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that provides culture-specific information about the format of <code>value</code>. Typically, <code>provider</code> can be any one of the following:  </p>\n<ul>\n<li><p>A <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents the culture that provides numeric formatting information. Its <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method returns the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that provides numeric formatting information.  </p>\n</li>\n<li><p>A <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that provides formatting information. (Its implementation of <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> just returns itself.)  </p>\n</li>\n<li><p>A custom object that implements <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> and uses the <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method to instantiate and return the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that provides formatting information.  </p>\n<p>If <code>provider</code> is <code>null</code>, the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object for the current culture is used.  </p>\n<p>If a separator is encountered in the <code>s</code> parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator. For more information about separators, see <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrencyDecimalSeparator_\" data-linktype=\"relative-path\">CurrencyDecimalSeparator</a>, <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_NumberDecimalSeparator_\" data-linktype=\"relative-path\">NumberDecimalSeparator</a>, <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrencyGroupSeparator_\" data-linktype=\"relative-path\">CurrencyGroupSeparator</a>, and <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_NumberGroupSeparator_\" data-linktype=\"relative-path\">NumberGroupSeparator</a>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the Parse method to parse the string representations of <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values. Each string in an array is parsed using the formatting conventions of the en-US, nl-NL, and a custom culture. The custom culture defines its group separator symbol as the underscore (&quot;_&quot;) and its group size as two.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Single.Parse#4\">Imports System.Globalization\n\nModule Example\n    Public Sub Main()\n      &#39; Define an array of string values.\n      Dim values() As String = { &quot; 987.654E-2&quot;, &quot; 987,654E-2&quot;, _\n                                 &quot;(98765,43210)&quot;, &quot;9,876,543.210&quot;,  _\n                                 &quot;9.876.543,210&quot;,  &quot;98_76_54_32,19&quot; }\n      &#39; Create a custom culture based on the invariant culture.\n      Dim ci As New CultureInfo(&quot;&quot;)\n      ci.NumberFormat.NumberGroupSizes = New Integer() { 2 }\n      ci.NumberFormat.NumberGroupSeparator = &quot;_&quot;\n      \n      &#39; Define an array of format providers.\n      Dim providers() As CultureInfo = { New CultureInfo(&quot;en-US&quot;), _\n                                             New CultureInfo(&quot;nl-NL&quot;), ci }       \n      \n      &#39; Define an array of styles.\n      Dim styles() As NumberStyles = { NumberStyles.Currency, NumberStyles.Float }\n      \n      &#39; Iterate the array of format providers.\n      For Each provider As CultureInfo In providers\n         Console.WriteLine(&quot;Parsing using the {0} culture:&quot;, _\n                           If(provider.Name = String.Empty, &quot;Invariant&quot;, provider.Name))\n         &#39; Parse each element in the array of string values.\n         For Each value As String In values\n            For Each style As NumberStyles In styles\n               Try\n                  Dim number As Single = Single.Parse(value, style, provider)            \n                  Console.WriteLine(&quot;   {0} ({1}) -&gt; {2}&quot;, _\n                                    value, style, number)\n               Catch e As FormatException\n                  Console.WriteLine(&quot;   &#39;{0}&#39; is invalid using {1}.&quot;, value, style)            \n               Catch e As OverflowException\n                  Console.WriteLine(&quot;   &#39;{0}&#39; is out of the range of a Single.&quot;, value)\n               End Try \n            Next            \n         Next         \n         Console.WriteLine()\n      Next\n   End Sub   \nEnd Module \n&#39; The example displays the following output:\n&#39;       Parsing using the en-US culture:\n&#39;          &#39; 987.654E-2&#39; is invalid using Currency.\n&#39;           987.654E-2 (Float) -&gt; 9.87654\n&#39;          &#39; 987,654E-2&#39; is invalid using Currency.\n&#39;          &#39; 987,654E-2&#39; is invalid using Float.\n&#39;          (98765,43210) (Currency) -&gt; -9.876543E+09\n&#39;          &#39;(98765,43210)&#39; is invalid using Float.\n&#39;          9,876,543.210 (Currency) -&gt; 9876543\n&#39;          &#39;9,876,543.210&#39; is invalid using Float.\n&#39;          &#39;9.876.543,210&#39; is invalid using Currency.\n&#39;          &#39;9.876.543,210&#39; is invalid using Float.\n&#39;          &#39;98_76_54_32,19&#39; is invalid using Currency.\n&#39;          &#39;98_76_54_32,19&#39; is invalid using Float.\n&#39;       \n&#39;       Parsing using the nl-NL culture:\n&#39;          &#39; 987.654E-2&#39; is invalid using Currency.\n&#39;          &#39; 987.654E-2&#39; is invalid using Float.\n&#39;          &#39; 987,654E-2&#39; is invalid using Currency.\n&#39;           987,654E-2 (Float) -&gt; 9.87654\n&#39;          (98765,43210) (Currency) -&gt; -98765.43\n&#39;          &#39;(98765,43210)&#39; is invalid using Float.\n&#39;          &#39;9,876,543.210&#39; is invalid using Currency.\n&#39;          &#39;9,876,543.210&#39; is invalid using Float.\n&#39;          9.876.543,210 (Currency) -&gt; 9876543\n&#39;          &#39;9.876.543,210&#39; is invalid using Float.\n&#39;          &#39;98_76_54_32,19&#39; is invalid using Currency.\n&#39;          &#39;98_76_54_32,19&#39; is invalid using Float.\n&#39;       \n&#39;       Parsing using the Invariant culture:\n&#39;          &#39; 987.654E-2&#39; is invalid using Currency.\n&#39;           987.654E-2 (Float) -&gt; 9.87654\n&#39;          &#39; 987,654E-2&#39; is invalid using Currency.\n&#39;          &#39; 987,654E-2&#39; is invalid using Float.\n&#39;          (98765,43210) (Currency) -&gt; -9.876543E+09\n&#39;          &#39;(98765,43210)&#39; is invalid using Float.\n&#39;          9,876,543.210 (Currency) -&gt; 9876543\n&#39;          &#39;9,876,543.210&#39; is invalid using Float.\n&#39;          &#39;9.876.543,210&#39; is invalid using Currency.\n&#39;          &#39;9.876.543,210&#39; is invalid using Float.\n&#39;          98_76_54_32,19 (Currency) -&gt; 9.876543E+09\n&#39;          &#39;98_76_54_32,19&#39; is invalid using Float.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Single.Parse#4\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n    public static void Main()\n    {\n      // Define an array of string values.\n      string[] values = { &quot; 987.654E-2&quot;, &quot; 987,654E-2&quot;,  &quot;(98765,43210)&quot;, \n                          &quot;9,876,543.210&quot;, &quot;9.876.543,210&quot;,  &quot;98_76_54_32,19&quot; };\n      // Create a custom culture based on the invariant culture.\n      CultureInfo ci = new CultureInfo(&quot;&quot;);\n      ci.NumberFormat.NumberGroupSizes = new int[] { 2 };\n      ci.NumberFormat.NumberGroupSeparator = &quot;_&quot;;\n      \n      // Define an array of format providers.\n      CultureInfo[] providers = { new CultureInfo(&quot;en-US&quot;),\n                                  new CultureInfo(&quot;nl-NL&quot;), ci };       \n      \n      // Define an array of styles.\n      NumberStyles[] styles = { NumberStyles.Currency, NumberStyles.Float };\n      \n      // Iterate the array of format providers.\n      foreach (CultureInfo provider in providers)\n      {\n         Console.WriteLine(&quot;Parsing using the {0} culture:&quot;, \n                           provider.Name == String.Empty ? &quot;Invariant&quot; : provider.Name);\n         // Parse each element in the array of string values.\n         foreach (string value in values)\n         {\n            foreach (NumberStyles style in styles)\n            {\n               try {\n                  float number = Single.Parse(value, style, provider);            \n                  Console.WriteLine(&quot;   {0} ({1}) -&gt; {2}&quot;, \n                                    value, style, number);\n               }\n               catch (FormatException) {\n                  Console.WriteLine(&quot;   &#39;{0}&#39; is invalid using {1}.&quot;, value, style);\n               }\n               catch (OverflowException) {\n                  Console.WriteLine(&quot;   &#39;{0}&#39; is out of the range of a Single.&quot;, value);\n               } \n            }            \n         }         \n         Console.WriteLine();\n      }\n   }   \n} \n// The example displays the following output:\n//       Parsing using the en-US culture:\n//       The format of // 987.654E-2// is invalid.\n//       The format of // 987,654E-2// is invalid.\n//       (98765,43210) (Currency) -&gt; -9.876543E+09\n//       9,876,543.210 (Currency) -&gt; 9876543\n//       The format of &#39;9.876.543,210// is invalid.\n//       The format of &#39;98_76_54_32,19// is invalid.\n//       \n//       Parsing using the nl-NL culture:\n//       The format of // 987.654E-2// is invalid.\n//       The format of // 987,654E-2// is invalid.\n//       (98765,43210) (Currency) -&gt; -98765.43\n//       The format of &#39;9,876,543.210// is invalid.\n//       9.876.543,210 (Currency) -&gt; 9876543\n//       The format of &#39;98_76_54_32,19// is invalid.\n//       \n//       Parsing using the Invariant culture:\n//       The format of // 987.654E-2// is invalid.\n//       The format of // 987,654E-2// is invalid.\n//       (98765,43210) (Currency) -&gt; -9.876543E+09\n//       9,876,543.210 (Currency) -&gt; 9876543\n//       The format of &#39;9.876.543,210// is invalid.\n//       98_76_54_32,19 (Currency) -&gt; 9.876543E+09\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Single_ToString\">\r\n    \r\n            <a id=\"System_Single_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Converts the numeric value of this instance to its equivalent string representation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of the value of this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ToString method formats a <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value in the default (&quot;G&quot;, or general) format of the current culture. If you want to specify a different format or culture, use the other overloads of the <a class=\"xref\" href=\"system.single#System_Single_ToString_\" data-linktype=\"relative-path\">ToString</a> method, as follows:  </p>\n<table>\n<thead>\n<tr>\n<th>To use format</th>\n<th>For culture</th>\n<th>Use the overload</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default (&quot;G&quot;) format</td>\n<td>A specific culture</td>\n<td><a class=\"xref\" href=\"system.single#System_Single_ToString_System_IFormatProvider_\" data-linktype=\"relative-path\">ToString(IFormatProvider)</a></td>\n</tr>\n<tr>\n<td>A specific format</td>\n<td>Default (current) culture</td>\n<td><a class=\"xref\" href=\"system.single#System_Single_ToString_System_String_\" data-linktype=\"relative-path\">ToString(String)</a></td>\n</tr>\n<tr>\n<td>A specific format</td>\n<td>A specific culture</td>\n<td><a class=\"xref\" href=\"system.single#System_Single_ToString_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">ToString(String,IFormatProvider)</a></td>\n</tr>\n</tbody>\n</table>\n<p> The return value can be <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_PositiveInfinitySymbol_\" data-linktype=\"relative-path\">PositiveInfinitySymbol</a>, <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_NegativeInfinitySymbol_\" data-linktype=\"relative-path\">NegativeInfinitySymbol</a>, <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_NaNSymbol_\" data-linktype=\"relative-path\">NaNSymbol</a>, or a string of the form:  </p>\n<p> [sign]integral-digits[.[fractional-digits]][e[sign]exponential-digits]  </p>\n<p> Optional elements are framed in square brackets ([ and ]). Elements that contain the term &quot;digits&quot; consist of a series of numeric characters ranging from 0 to 9. The following table lists each element:  </p>\n<table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>sign</em></td>\n<td>A negative sign or positive sign symbol.</td>\n</tr>\n<tr>\n<td><em>integral-digits</em></td>\n<td>A series of digits specifying the integral part of the number. Integral-digits can be absent if there are fractional-digits.</td>\n</tr>\n<tr>\n<td>&#39;.&#39;</td>\n<td>A culture-specific decimal point symbol.</td>\n</tr>\n<tr>\n<td><em>fractional-digits</em></td>\n<td>A series of digits specifying the fractional part of the number.</td>\n</tr>\n<tr>\n<td>&#39;e&#39;</td>\n<td>A lowercase character &#39;e&#39;, indicating exponential (scientific) notation.</td>\n</tr>\n<tr>\n<td><em>exponential-digits</em></td>\n<td>A series of digits specifying an exponent.</td>\n</tr>\n</tbody>\n</table>\n<p> Some examples of the return value are &quot;100&quot;, &quot;-123,456,789&quot;, &quot;123.45e+6&quot;, &quot;500&quot;, &quot;3.1416&quot;, &quot;600&quot;, &quot;-0.123&quot;, and &quot;-Infinity&quot;.  </p>\n<p> The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:  </p>\n<ul>\n<li><p>For more information about numeric format specifiers, see <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Numeric Format Strings</a> and <a href=\"../Topic/Custom%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Numeric Format Strings</a>.  </p>\n</li>\n<li><p>For more information about formatting, see <a href=\"../Topic/Formatting%20Types%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Formatting Types</a>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the default ToString method to display the string representations of a number of <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Single.ToString#1\">      float number;\n      \n      number = 1.6E20F;\n      // Displays 1.6E+20.\n      Console.WriteLine(number.ToString());\n\n      number = 1.6E2F;\n      // Displays 160.\n      Console.WriteLine(number.ToString());\n      \n      number = -3.541F;\n      // Displays -3.541.\n      Console.WriteLine(number.ToString());\n\n      number = -1502345222199E-07F;\n      // Displays -150234.5222199.\n      Console.WriteLine(number.ToString());\n      \n      number = -15023452221990199574E-09F;\n      // Displays -15023452221.9902.\n      Console.WriteLine(number.ToString());\n      \n      number = .60344F;\n      // Displays 0.60344.\n      Console.WriteLine(number.ToString());\n      \n      number = .000000001F;\n      // Displays 1E-09.\n      Console.WriteLine(number.ToString());\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Single.ToString#1\">      Dim number As Single\n      \n      number = 1.6E20\n      &#39; Displays 1.6E+20.      \n      Console.WriteLine(number.ToString())\n\n      number = 1.6E2\n      &#39; Displays 160.\n      Console.WriteLine(number.ToString())\n\n      number = -3.541\n      &#39; Displays -3.541.\n      Console.WriteLine(number.ToString())\n\n      number = -1502345222199E-07\n      &#39; Displays -150234.5222199.\n      Console.WriteLine(number.ToString())\n      \n      number = -15023452221990199574E-09\n      &#39; Displays -15023452221.9902.\n      Console.WriteLine(number.ToString())\n      \n      number = .60344\n      &#39; Displays 0.60344.\n      Console.WriteLine(number.ToString())\n      \n      number = .000000001\n      &#39; Displays 1E-09.\n      Console.WriteLine(number.ToString())\n</code></pre><p> The following code example illustrates the use of the <a class=\"xref\" href=\"system.single#System_Single_Parse_System_String_\" data-linktype=\"relative-path\">Parse(String)</a> method along with the ToString method.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Single#3\">      bool done = false;\n      String^ inp;\n      do\n      {\n         Console::Write( &quot;Enter a real number: &quot; );\n         inp = Console::ReadLine();\n         try\n         {\n            s = Single::Parse( inp );\n            Console::WriteLine( &quot;You entered {0}.&quot;, s );\n            done = true;\n         }\n         catch ( FormatException^ ) \n         {\n            Console::WriteLine( &quot;You did not enter a number.&quot; );\n         }\n         catch ( Exception^ e ) \n         {\n            Console::WriteLine( &quot;An exception occurred while parsing your response: {0}&quot;, e );\n         }\n      }\n      while (  !done );\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Single#3\">            Dim Done As Boolean = False\n            Dim Inp As String\n            Do\n\n                Console.Write(&quot;Enter a real number: &quot;)\n                Inp = Console.ReadLine()\n                Try\n                    S = Single.Parse(Inp)\n                    Console.WriteLine(&quot;You entered &quot; + S.ToString() + &quot;.&quot;)\n                    Done = True\n                Catch E As FormatException\n                    Console.WriteLine(&quot;You did not enter a number.&quot;)\n                Catch E As Exception\n                    Console.WriteLine(&quot;An exception occurred while parsing your response: &quot; + E.ToString())\n                End Try\n            Loop While Not Done\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Single#3\">            bool done = false;\n            string inp;\n            do\n            {\n                Console.Write(&quot;Enter a real number: &quot;);\n                inp = Console.ReadLine();\n                try\n                {\n                    s = Single.Parse(inp);\n                    Console.WriteLine(&quot;You entered {0}.&quot;, s.ToString());\n                    done = true;\n                }\n                catch (FormatException)\n                {\n                    Console.WriteLine(&quot;You did not enter a number.&quot;);\n                }\n                catch (Exception e)\n                {\n                    Console.WriteLine(&quot;An exception occurred while parsing your response: {0}&quot;, e.ToString());\n                }\n            } while (!done);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Single_ToString_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Single_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ToString (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of the value of this instance as specified by <code>provider</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ToString method formats a <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value in the default (&quot;G&quot;, or general) format of a specified culture. If you want to specify a different format or the current culture, use the other overloads of the <a class=\"xref\" href=\"system.single#System_Single_ToString_\" data-linktype=\"relative-path\">ToString</a> method, as follows:  </p>\n<table>\n<thead>\n<tr>\n<th>To use format</th>\n<th>For culture</th>\n<th>Use the overload</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default (&quot;G&quot;) format</td>\n<td>Default (current) culture</td>\n<td><a class=\"xref\" href=\"system.single#System_Single_ToString\" data-linktype=\"relative-path\">ToString()</a></td>\n</tr>\n<tr>\n<td>A specific format</td>\n<td>Default (current) culture</td>\n<td><a class=\"xref\" href=\"system.single#System_Single_ToString_System_String_\" data-linktype=\"relative-path\">ToString(String)</a></td>\n</tr>\n<tr>\n<td>A specific format</td>\n<td>A specific culture</td>\n<td><a class=\"xref\" href=\"system.single#System_Single_ToString_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">ToString(String,IFormatProvider)</a></td>\n</tr>\n</tbody>\n</table>\n<p> The return value can be <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_PositiveInfinitySymbol_\" data-linktype=\"relative-path\">PositiveInfinitySymbol</a>, <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_NegativeInfinitySymbol_\" data-linktype=\"relative-path\">NegativeInfinitySymbol</a>, <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_NaNSymbol_\" data-linktype=\"relative-path\">NaNSymbol</a>, or a string of the form:  </p>\n<p> [sign]integral-digits[.[fractional-digits]][e[sign]exponential-digits]  </p>\n<p> Optional elements are framed in square brackets ([ and ]). Elements containing the term &quot;digits&quot; consist of a series of numeric characters ranging from 0 to 9. The following table lists each element.  </p>\n<table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>sign</td>\n<td>A negative sign or positive sign symbol.</td>\n</tr>\n<tr>\n<td>integral-digits</td>\n<td>A series of digits specifying the integral part of the number. Integral-digits can be absent if there are fractional-digits.</td>\n</tr>\n<tr>\n<td>&#39;.&#39;</td>\n<td>A culture-specific decimal point symbol.</td>\n</tr>\n<tr>\n<td>fractional-digits</td>\n<td>A series of digits specifying the fractional part of the number.</td>\n</tr>\n<tr>\n<td>&#39;e&#39;</td>\n<td>A lowercase character &#39;e&#39;, indicating exponential (scientific) notation.</td>\n</tr>\n<tr>\n<td>exponential-digits</td>\n<td>A series of digits specifying an exponent.</td>\n</tr>\n</tbody>\n</table>\n<p> Some examples of the return value are &quot;100&quot;, &quot;-123,456,789&quot;, &quot;123.45e+6&quot;, &quot;500&quot;, &quot;3.1416&quot;, &quot;600&quot;, &quot;-0.123&quot;, and &quot;-Infinity&quot;.  </p>\n<p> The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:  </p>\n<ul>\n<li><p>For more information about numeric format specifiers, see <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Numeric Format Strings</a> and <a href=\"../Topic/Custom%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Numeric Format Strings</a>.  </p>\n</li>\n<li><p>For more information about formatting, see <a href=\"../Topic/Formatting%20Types%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Formatting Types</a>.  </p>\n<p>The <code>provider</code> parameter is an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation whose <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method returns a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object. Typically, <code>provider</code> is a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object or a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object. The <code>provider</code> parameter supplies culture-specific information used in formatting. If <code>provider</code> is <code>null</code>, the return value is formatted using the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> data for the current culture.  </p>\n<p>To convert a <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value to its string representation using a specified culture and a specific format string, call the <a class=\"xref\" href=\"system.single#System_Single_ToString_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Single.ToString(String,IFormatProvider)</a> method.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the string representation of two <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values using <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> objects that represent several different cultures.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Single.ToString#2\">      float value;\n      \n      value = -16325.62015F;\n      // Display value using the invariant culture.\n      Console.WriteLine(value.ToString(CultureInfo.InvariantCulture));\n      // Display value using the en-GB culture.\n      Console.WriteLine(value.ToString(CultureInfo.CreateSpecificCulture(&quot;en-GB&quot;)));\n      // Display value using the de-DE culture.\n      Console.WriteLine(value.ToString(CultureInfo.CreateSpecificCulture(&quot;de-DE&quot;)));\n\n      value = 16034.125E21F;\n      // Display value using the invariant culture.\n      Console.WriteLine(value.ToString(CultureInfo.InvariantCulture));\n      // Display value using the en-GB culture.\n      Console.WriteLine(value.ToString(CultureInfo.CreateSpecificCulture(&quot;en-GB&quot;)));\n      // Display value using the de-DE culture.\n      Console.WriteLine(value.ToString(CultureInfo.CreateSpecificCulture(&quot;de-DE&quot;)));\n      // This example displays the following output to the console:\n      //       -16325.62015\n      //       -16325.62015\n      //       -16325,62015\n      //       1.6034125E+25\n      //       1.6034125E+25\n      //       1,6034125E+25\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Single.ToString#2\">      Dim value As Single \n      \n      value = -16325.62015\n      &#39; Display value using the invariant culture.\n      Console.WriteLine(value.ToString(CultureInfo.InvariantCulture))\n      &#39; Display value using the en-GB culture.\n      Console.WriteLine(value.ToString(CultureInfo.CreateSpecificCulture(&quot;en-GB&quot;)))\n      &#39; Display value using the de-DE culture.\n      Console.WriteLine(value.ToString(CultureInfo.CreateSpecificCulture(&quot;de-DE&quot;)))\n\n      value = 16034.125E21\n      &#39; Display value using the invariant culture.\n      Console.WriteLine(value.ToString(CultureInfo.InvariantCulture))\n      &#39; Display value using the en-GB culture.\n      Console.WriteLine(value.ToString(CultureInfo.CreateSpecificCulture(&quot;en-GB&quot;)))\n      &#39; Display value using the de-DE culture.\n      Console.WriteLine(value.ToString(CultureInfo.CreateSpecificCulture(&quot;de-DE&quot;)))\n      &#39; This example displays the following output to the console:\n      &#39;       -16325.62015\n      &#39;       -16325.62015\n      &#39;       -16325,62015\n      &#39;       1.6034125E+25\n      &#39;       1.6034125E+25\n      &#39;       1,6034125E+25\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Single_ToString_System_String_\">\r\n    \r\n            <a id=\"System_Single_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(String)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ToString (string format);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A numeric format string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of the value of this instance as specified by <code>format</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> is invalid.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ToString method formats a <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value in a specified format by using the conventions of the current culture. If you want to use the default (&quot;G&quot;, or general) format or specify a different culture, use the other overloads of the ToString method, as follows:  </p>\n<table>\n<thead>\n<tr>\n<th>To use format</th>\n<th>For culture</th>\n<th>Use the overload</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default (&quot;G&quot;) format</td>\n<td>Default (current) culture</td>\n<td><a class=\"xref\" href=\"system.single#System_Single_ToString\" data-linktype=\"relative-path\">ToString()</a></td>\n</tr>\n<tr>\n<td>Default (&quot;G&quot;) format</td>\n<td>A specific culture</td>\n<td><a class=\"xref\" href=\"system.single#System_Single_ToString_System_IFormatProvider_\" data-linktype=\"relative-path\">ToString(IFormatProvider)</a></td>\n</tr>\n<tr>\n<td>A specific format</td>\n<td>A specific culture</td>\n<td><a class=\"xref\" href=\"system.single#System_Single_ToString_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">ToString(String,IFormatProvider)</a></td>\n</tr>\n</tbody>\n</table>\n<p> The return value can be <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_PositiveInfinitySymbol_\" data-linktype=\"relative-path\">PositiveInfinitySymbol</a>, <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_NegativeInfinitySymbol_\" data-linktype=\"relative-path\">NegativeInfinitySymbol</a>, <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_NaNSymbol_\" data-linktype=\"relative-path\">NaNSymbol</a>, or the string representation of the value of the current instance, as specified by <code>format</code>.  </p>\n<p> The <code>format</code> parameter can be any valid standard numeric format specifier except for D and X, as well as any combination of custom numeric format specifiers. If format is <code>null</code> or an empty string, the return value is formatted with the general numeric format specifier (&quot;G&quot;).  </p>\n<p> The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:  </p>\n<ul>\n<li><p>For more information about numeric format specifiers, see <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Numeric Format Strings</a> and <a href=\"../Topic/Custom%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Numeric Format Strings</a>.  </p>\n</li>\n<li><p>For more information about formatting, see <a href=\"../Topic/Formatting%20Types%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Formatting Types</a>.  </p>\n<p>By default, the return value only contains 7 digits of precision although a maximum of 9 digits is maintained internally. If the value of this instance has greater than 7 digits, ToString returns <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_PositiveInfinitySymbol_\" data-linktype=\"relative-path\">PositiveInfinitySymbol</a> or <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_NegativeInfinitySymbol_\" data-linktype=\"relative-path\">NegativeInfinitySymbol</a> instead of the expected number. If you require more precision, specify <code>format</code> with the &quot;G9&quot; format specification, which always returns 9 digits of precision, or &quot;R&quot;, which returns 7 digits if the number can be represented with that precision or 9 digits if the number can only be represented with maximum precision.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a numeric value and formats it as a currency value by using the &quot;C&quot; standard numeric format string and as a numeric value to three decimal places by using the &quot;N&quot; standard numeric format string. The result strings are formatted by using the conventions of the en-US culture. For more information on numeric format strings, see <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Numeric Format Strings</a> and <a href=\"../Topic/Custom%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Numeric Format Strings</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Single.ToString#7\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Double number = 1764.3789;\n      \n      // Format as a currency value.\n      Console.WriteLine(number.ToString(&quot;C&quot;));\n      \n      // Format as a numeric value with 3 decimal places.\n      Console.WriteLine(number.ToString(&quot;N3&quot;));\n   }\n}\n// The example displays the following output:\n//       $1,764.38\n//       1,764.379\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Single.ToString#7\">Module Example\n   Public Sub Main()\n      Dim number As Single = 1764.3789\n      \n      &#39; Format as a currency value.\n      Console.WriteLine(number.ToString(&quot;C&quot;))\n      \n      &#39; Format as a numeric value with 3 decimal places.\n      Console.WriteLine(number.ToString(&quot;N3&quot;))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       $1,764.38\n&#39;       1,764.379\n</code></pre><p> The following example displays several <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values using each of the supported standard numeric format specifiers together with two custom numeric format strings. One of those custom format strings illustrates how to pad a <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value with leading zeros. In converting the numeric values to strings, the example uses the formatting conventions of the en-US culture.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Single.ToString#3\">      float[] numbers= { 1054.32179F, -195489100.8377F, 1.0437E21F, \n                         -1.0573e-05F };\n      string[] specifiers = { &quot;C&quot;, &quot;E&quot;, &quot;e&quot;, &quot;F&quot;, &quot;G&quot;, &quot;N&quot;, &quot;P&quot;, \n                              &quot;R&quot;, &quot;#,000.000&quot;, &quot;0.###E-000&quot;,\n                              &quot;000,000,000,000.00###&quot; };\n\n      foreach (float number in numbers)\n      {\n         Console.WriteLine(&quot;Formatting of {0}:&quot;, number);\n         foreach (string specifier in specifiers)\n            Console.WriteLine(&quot;   {0,5}: {1}&quot;, \n                              specifier, number.ToString(specifier));\n\n         Console.WriteLine();\n      }\n      // The example displays the following output to the console:\n      //       Formatting of 1054.32179:\n      //              C: $1,054.32\n      //              E: 1.054322E+003\n      //              e: 1.054322e+003\n      //              F: 1054.32\n      //              G: 1054.32179\n      //              N: 1,054.32\n      //              P: 105,432.18 %\n      //              R: 1054.32179\n      //          #,000.000: 1,054.322\n      //          0.###E-000: 1.054E003\n      //          000,000,000,000.00###: 000,000,001,054.322\n      //       \n      //       Formatting of -195489100.8377:\n      //              C: ($195,489,100.84)\n      //              E: -1.954891E+008\n      //              e: -1.954891e+008\n      //              F: -195489100.84\n      //              G: -195489100.8377\n      //              N: -195,489,100.84\n      //              P: -19,548,910,083.77 %\n      //              R: -195489100.8377\n      //          #,000.000: -195,489,100.838\n      //          0.###E-000: -1.955E008\n      //          000,000,000,000.00###: -000,195,489,100.00\n      //       \n      //       Formatting of 1.0437E+21:\n      //              C: $1,043,700,000,000,000,000,000.00\n      //              E: 1.043700E+021\n      //              e: 1.043700e+021\n      //              F: 1043700000000000000000.00\n      //              G: 1.0437E+21\n      //              N: 1,043,700,000,000,000,000,000.00\n      //              P: 104,370,000,000,000,000,000,000.00 %\n      //              R: 1.0437E+21\n      //          #,000.000: 1,043,700,000,000,000,000,000.000\n      //          0.###E-000: 1.044E021\n      //          000,000,000,000.00###: 1,043,700,000,000,000,000,000.00\n      //       \n      //       Formatting of -1.0573E-05:\n      //              C: $0.00\n      //              E: -1.057300E-005\n      //              e: -1.057300e-005\n      //              F: 0.00\n      //              G: -1.0573E-05\n      //              N: 0.00\n      //              P: 0.00 %\n      //              R: -1.0573E-05\n      //          #,000.000: 000.000\n      //          0.###E-000: -1.057E-005\n      //          000,000,000,000.00###: -000,000,000,000.00001 \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Single.ToString#3\">      Dim numbers() As Single = {1054.32179, -195489100.8377, 1.0437E21, _\n                                 -1.0573e-05}\n      Dim specifiers() As String = { &quot;C&quot;, &quot;E&quot;, &quot;e&quot;, &quot;F&quot;, &quot;G&quot;, &quot;N&quot;, &quot;P&quot;, _\n                                     &quot;R&quot;, &quot;#,000.000&quot;, &quot;0.###E-000&quot;, _\n                                     &quot;000,000,000,000.00###&quot;}\n      For Each number As Single In numbers\n         Console.WriteLine(&quot;Formatting of {0}:&quot;, number)\n         For Each specifier As String In specifiers\n            Console.WriteLine(&quot;   {0,5}: {1}&quot;, _\n                              specifier, number.ToString(specifier))\n         Next\n         Console.WriteLine()\n      Next\n      &#39; The example displays the following output to the console:\n      &#39;       Formatting of 1054.32179:\n      &#39;              C: $1,054.32\n      &#39;              E: 1.054322E+003\n      &#39;              e: 1.054322e+003\n      &#39;              F: 1054.32\n      &#39;              G: 1054.32179\n      &#39;              N: 1,054.32\n      &#39;              P: 105,432.18 %\n      &#39;              R: 1054.32179\n      &#39;          #,000.000: 1,054.322\n      &#39;          0.###E-000: 1.054E003\n      &#39;          000,000,000,000.00###: 000,000,001,054.322      \n      &#39;       \n      &#39;       Formatting of -195489100.8377:\n      &#39;              C: ($195,489,100.84)\n      &#39;              E: -1.954891E+008\n      &#39;              e: -1.954891e+008\n      &#39;              F: -195489100.84\n      &#39;              G: -195489100.8377\n      &#39;              N: -195,489,100.84\n      &#39;              P: -19,548,910,083.77 %\n      &#39;              R: -195489100.8377\n      &#39;          #,000.000: -195,489,100.838\n      &#39;          0.###E-000: -1.955E008\n      &#39;          000,000,000,000.00###: -000,195,489,100.00\n      &#39;       \n      &#39;       Formatting of 1.0437E+21:\n      &#39;              C: $1,043,700,000,000,000,000,000.00\n      &#39;              E: 1.043700E+021\n      &#39;              e: 1.043700e+021\n      &#39;              F: 1043700000000000000000.00\n      &#39;              G: 1.0437E+21\n      &#39;              N: 1,043,700,000,000,000,000,000.00\n      &#39;              P: 104,370,000,000,000,000,000,000.00 %\n      &#39;              R: 1.0437E+21\n      &#39;          #,000.000: 1,043,700,000,000,000,000,000.000\n      &#39;          0.###E-000: 1.044E021\n      &#39;          000,000,000,000.00###: 1,043,700,000,000,000,000,000.00\n      &#39;       \n      &#39;       Formatting of -1.0573E-05:\n      &#39;              C: $0.00\n      &#39;              E: -1.057300E-005\n      &#39;              e: -1.057300e-005\n      &#39;              F: 0.00\n      &#39;              G: -1.0573E-05\n      &#39;              N: 0.00\n      &#39;              P: 0.00 %\n      &#39;              R: -1.0573E-05\n      &#39;          #,000.000: 000.000\n      &#39;          0.###E-000: -1.057E-005\n      &#39;          000,000,000,000.00###: -000,000,000,000.00001\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Single_ToString_System_String_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Single_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(String,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ToString (string format, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A numeric format string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of the value of this instance as specified by <code>format</code> and <code>provider</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ToString method formats a <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value in a specified format of a specified culture. If you want to use default format or culture settings, use the other overloads of the <a class=\"xref\" href=\"system.single#System_Single_ToString_\" data-linktype=\"relative-path\">ToString</a> method, as follows:  </p>\n<table>\n<thead>\n<tr>\n<th>To use format</th>\n<th>For culture</th>\n<th>Use the overload</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default (&quot;G&quot;) format</td>\n<td>Default (current) culture</td>\n<td><a class=\"xref\" href=\"system.single#System_Single_ToString\" data-linktype=\"relative-path\">ToString()</a></td>\n</tr>\n<tr>\n<td>Default (&quot;G&quot;) format</td>\n<td>A specific culture</td>\n<td><a class=\"xref\" href=\"system.single#System_Single_ToString_System_IFormatProvider_\" data-linktype=\"relative-path\">ToString(IFormatProvider)</a></td>\n</tr>\n<tr>\n<td>A specific format</td>\n<td>Default (current) culture</td>\n<td><a class=\"xref\" href=\"system.single#System_Single_ToString_System_String_\" data-linktype=\"relative-path\">ToString(String)</a></td>\n</tr>\n</tbody>\n</table>\n<p> The return value can be <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_PositiveInfinitySymbol_\" data-linktype=\"relative-path\">PositiveInfinitySymbol</a>, <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_NegativeInfinitySymbol_\" data-linktype=\"relative-path\">NegativeInfinitySymbol</a>, <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_NaNSymbol_\" data-linktype=\"relative-path\">NaNSymbol</a>, or the string representation of the value of the current instance, as specified by <code>format</code>.  </p>\n<p> The <code>format</code> parameter can be any valid standard numeric format specifier except for D and X, as well as any combination of custom numeric format specifiers. If <code>format</code> is <code>null</code> or an empty string, the return value for this instance is formatted with the general numeric format specifier (&quot;G&quot;).  </p>\n<p> The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:  </p>\n<ul>\n<li><p>For more information about numeric format specifiers, see <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Numeric Format Strings</a> and <a href=\"../Topic/Custom%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Numeric Format Strings</a>.  </p>\n</li>\n<li><p>For more information about formatting, see <a href=\"../Topic/Formatting%20Types%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Formatting Types</a>.  </p>\n<p>The <code>provider</code> parameter is an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation whose <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method returns a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object. Typically, <code>provider</code> is a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object or a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object. The <code>provider</code> parameter supplies culture-specific information used in formatting. If <code>provider</code> is <code>null</code>, the return value is formatted with the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object for the current culture.  </p>\n<p>By default, the return value only contains 7 digits of precision although a maximum of 9 digits is maintained internally. If the value of this instance has greater than 7 digits, <a class=\"xref\" href=\"system.single#System_Single_ToString_\" data-linktype=\"relative-path\">ToString</a> returns <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_PositiveInfinitySymbol_\" data-linktype=\"relative-path\">PositiveInfinitySymbol</a> or <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_NegativeInfinitySymbol_\" data-linktype=\"relative-path\">NegativeInfinitySymbol</a> instead of the expected number. If you require more precision, specify <code>format</code> with the &quot;G9&quot; format specification, which always returns 9 digits of precision, or &quot;R&quot;, which returns 7 digits if the number can be represented with that precision or 9 digits if the number can only be represented with maximum precision.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays a <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value using each of the supported standard numeric format specifiers for several different cultures.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Single.ToString#4\">      float value = 16325.62901F;\n      string specifier;\n      CultureInfo culture;\n\n      // Use standard numeric format specifiers.\n      specifier = &quot;G&quot;;\n      culture = CultureInfo.CreateSpecificCulture(&quot;eu-ES&quot;);\n      Console.WriteLine(value.ToString(specifier, culture));\n      // Displays:    16325,62901\n      Console.WriteLine(value.ToString(specifier, CultureInfo.InvariantCulture));\n      // Displays:    16325.62901\n      \n      specifier = &quot;C&quot;;\n      culture = CultureInfo.CreateSpecificCulture(&quot;en-US&quot;);\n      Console.WriteLine(value.ToString(specifier, culture));\n      // Displays:    $16,325.63\n      culture = CultureInfo.CreateSpecificCulture(&quot;en-GB&quot;);\n      Console.WriteLine(value.ToString(specifier, culture));\n      // Displays:    �16,325.63\n      \n      specifier = &quot;E04&quot;;\n      culture = CultureInfo.CreateSpecificCulture(&quot;sv-SE&quot;);\n      Console.WriteLine(value.ToString(specifier, culture));\n      // Displays: 1,6326E+004   \n       culture = CultureInfo.CreateSpecificCulture(&quot;en-NZ&quot;);\n       Console.WriteLine(value.ToString(specifier, culture));\n      // Displays:    1.6326E+004   \n      \n      specifier = &quot;F&quot;;\n      culture = CultureInfo.CreateSpecificCulture(&quot;fr-FR&quot;);\n      Console.WriteLine(value.ToString(specifier, culture));\n      // Displays:    16325,63\n      culture = CultureInfo.CreateSpecificCulture(&quot;en-CA&quot;);\n      Console.WriteLine(value.ToString(specifier, culture));\n      // Displays:    16325.63\n      \n      specifier = &quot;N&quot;;\n      culture = CultureInfo.CreateSpecificCulture(&quot;es-ES&quot;);\n      Console.WriteLine(value.ToString(specifier, culture));\n      // Displays:    16.325,63\n      culture = CultureInfo.CreateSpecificCulture(&quot;fr-CA&quot;);\n      Console.WriteLine(value.ToString(specifier, culture));\n      // Displays:    16 325,63\n      \n      specifier = &quot;P&quot;;\n      culture = CultureInfo.InvariantCulture;\n      Console.WriteLine((value/10000).ToString(specifier, culture));\n      // Displays:    163.26 %\n      culture = CultureInfo.CreateSpecificCulture(&quot;ar-EG&quot;);\n      Console.WriteLine((value/10000).ToString(specifier, culture));\n      // Displays:    163.256 %\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Single.ToString#4\">      Dim value As Single = 16325.62901\n      Dim specifier As String\n      Dim culture As CultureInfo\n\n      &#39; Use standard numeric format specifiers.\n      specifier = &quot;G&quot;\n      culture = CultureInfo.CreateSpecificCulture(&quot;eu-ES&quot;)\n      Console.WriteLine(value.ToString(specifier, culture))\n      &#39; Displays:    16325,62901\n      Console.WriteLine(value.ToString(specifier, CultureInfo.InvariantCulture))\n      &#39; Displays:    16325.62901\n      \n      specifier = &quot;C&quot;\n      culture = CultureInfo.CreateSpecificCulture(&quot;en-US&quot;)\n      Console.WriteLine(value.ToString(specifier, culture))\n      &#39; Displays:    $16,325.63\n      culture = CultureInfo.CreateSpecificCulture(&quot;en-GB&quot;)\n      Console.WriteLine(value.ToString(specifier, culture))\n      &#39; Displays:    �16,325.63\n      \n      specifier = &quot;E04&quot;\n      culture = CultureInfo.CreateSpecificCulture(&quot;sv-SE&quot;)\n      Console.WriteLine(value.ToString(specifier, culture))\n      &#39; Displays: 1,6326E+004   \n       culture = CultureInfo.CreateSpecificCulture(&quot;en-NZ&quot;)\n       Console.WriteLine(value.ToString(specifier, culture))\n      &#39; Displays:    1.6326E+004   \n      \n      specifier = &quot;F&quot;\n      culture = CultureInfo.CreateSpecificCulture(&quot;fr-FR&quot;)\n      Console.WriteLine(value.ToString(specifier, culture))\n      &#39; Displays:    16325,63\n      culture = CultureInfo.CreateSpecificCulture(&quot;en-CA&quot;)\n      Console.WriteLine(value.ToString(specifier, culture))\n      &#39; Displays:    16325.63\n      \n      specifier = &quot;N&quot;\n      culture = CultureInfo.CreateSpecificCulture(&quot;es-ES&quot;)\n      Console.WriteLine(value.ToString(specifier, culture))\n      &#39; Displays:    16.325,63\n      culture = CultureInfo.CreateSpecificCulture(&quot;fr-CA&quot;)\n      Console.WriteLine(value.ToString(specifier, culture))\n      &#39; Displays:    16 325,63\n      \n      specifier = &quot;P&quot;\n      culture = CultureInfo.InvariantCulture\n      Console.WriteLine((value/10000).ToString(specifier, culture))\n      &#39; Displays:    163.26 %\n      culture = CultureInfo.CreateSpecificCulture(&quot;ar-EG&quot;)\n      Console.WriteLine((value/10000).ToString(specifier, culture))\n      &#39; Displays:    163.256 %\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Single_TryParse_System_String_System_Single__\">\r\n    \r\n            <a id=\"System_Single_TryParse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryParse(String,Single)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the string representation of a number to its single-precision floating-point number equivalent. A return value indicates whether the conversion succeeded or failed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool TryParse (string s, out float result);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string representing a number to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>result</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>When this method returns, contains single-precision floating-point number equivalent to the numeric value or symbol contained in <code>s</code>, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <code>s</code> parameter is <code>null</code> or <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, is not a number in a valid format, or represents a number less than <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> or greater than <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>. This parameter is passed uninitialized; any value originally supplied in <code>result</code> will be overwritten.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>s</code> was converted successfully; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This overload differs from the <a class=\"xref\" href=\"system.single#System_Single_Parse_System_String_\" data-linktype=\"relative-path\">System.Single.Parse(String)</a> method by returning a Boolean value that indicates whether the parse operation succeeded instead of returning the parsed numeric value. It eliminates the need to use exception handling to test for a <a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a> in the event that <code>s</code> is invalid and cannot be successfully parsed.  </p>\n<p> The <code>s</code> parameter can contain <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_PositiveInfinitySymbol_\" data-linktype=\"relative-path\">PositiveInfinitySymbol</a>, <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_NegativeInfinitySymbol_\" data-linktype=\"relative-path\">NegativeInfinitySymbol</a>, <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_NaNSymbol_\" data-linktype=\"relative-path\">NaNSymbol</a> (the string comparison is case-sensitive), or a string of the form:  </p>\n<p> [ws][sign][integral-digits,]integral-digits[.[fractional-digits]][e[sign]exponential-digits][ws]  </p>\n<p> Elements in square brackets are optional. The following table describes each element.  </p>\n<table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>ws</em></td>\n<td>A series of white-space characters.</td>\n</tr>\n<tr>\n<td><em>sign</em></td>\n<td>A negative sign or positive sign symbol.</td>\n</tr>\n<tr>\n<td><em>integral-digits</em></td>\n<td>A series of numeric characters ranging from 0 to 9 that specify the integral part of the number. Integral-digits can be absent if there are fractional-digits.</td>\n</tr>\n<tr>\n<td><em>,</em></td>\n<td>A culture-specific group separator symbol.</td>\n</tr>\n<tr>\n<td><em>.</em></td>\n<td>A culture-specific decimal point symbol.</td>\n</tr>\n<tr>\n<td><em>fractional-digits</em></td>\n<td>A series of numeric characters ranging from 0 to 9 that specify the fractional part of the number.</td>\n</tr>\n<tr>\n<td><em>E</em></td>\n<td>An uppercase or lowercase character &#39;e&#39;, that indicates exponential (scientific) notation.</td>\n</tr>\n<tr>\n<td><em>exponential-digits</em></td>\n<td>A series of numeric characters ranging from 0 to 9 that specify an exponent.</td>\n</tr>\n</tbody>\n</table>\n<p> The <code>s</code> parameter is interpreted using a combination of the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> and <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flags. This means that white space and thousands separators are allowed but currency symbols are not. To explicitly define the elements (such as currency symbols, thousands separators, and white space) that can be present in <code>s</code>, use the <a class=\"xref\" href=\"system.single#System_Single_TryParse_System_String_System_Globalization_NumberStyles_System_IFormatProvider_System_Single__\" data-linktype=\"relative-path\">TryParse(String,NumberStyles,IFormatProvider,Single)</a> method overload.  </p>\n<p> The <code>s</code> parameter is parsed using the formatting information in a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that is initialized for the current system culture. For more information, see <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrentInfo_\" data-linktype=\"relative-path\">CurrentInfo</a>. To parse a string using the formatting information of some other specified culture, use the <a class=\"xref\" href=\"system.single#System_Single_TryParse_System_String_System_Globalization_NumberStyles_System_IFormatProvider_System_Single__\" data-linktype=\"relative-path\">TryParse(String,NumberStyles,IFormatProvider,Single)</a> method overload.  </p>\n<p> Ordinarily, if you pass the <a class=\"xref\" href=\"system.single#System_Single_TryParse_\" data-linktype=\"relative-path\">TryParse</a> method a string that is created by calling the <a class=\"xref\" href=\"system.single#System_Single_ToString_\" data-linktype=\"relative-path\">ToString</a> method, the original <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value is returned. However, because of a loss of precision, the values may not be equal.  </p>\n<p> If a separator is encountered in the <code>s</code> parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator. For more information about separators, see <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrencyDecimalSeparator_\" data-linktype=\"relative-path\">CurrencyDecimalSeparator</a>, <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_NumberDecimalSeparator_\" data-linktype=\"relative-path\">NumberDecimalSeparator</a>, <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrencyGroupSeparator_\" data-linktype=\"relative-path\">CurrencyGroupSeparator</a>, and <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_NumberGroupSeparator_\" data-linktype=\"relative-path\">NumberGroupSeparator</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the TryParse method to convert the string representations of numeric values to <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values. It assumes that en-US is the current culture.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Single.TryParse#1\">      Dim value As String\n      Dim number As Single\n      \n      &#39; Parse a floating-point value with a thousands separator.\n      value = &quot;1,643.57&quot;\n      If Single.TryParse(value, number) Then\n         Console.WriteLine(number)\n      Else\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39;.&quot;, value)      \n      End If   \n      \n      &#39; Parse a floating-point value with a currency symbol and a \n      &#39; thousands separator.\n      value = &quot;$1,643.57&quot;\n      If Single.TryParse(value, number) Then\n         Console.WriteLine(number)  \n      Else\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39;.&quot;, value)   \n      End If\n      \n      &#39; Parse value in exponential notation.\n      value = &quot;-1.643e6&quot;\n      If Single.TryParse(value, number)\n         Console.WriteLine(number)\n      Else\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39;.&quot;, value)   \n      End If\n      \n      &#39; Parse a negative integer number.\n      value = &quot;-168934617882109132&quot;\n      If Single.TryParse(value, number)\n         Console.WriteLine(number)\n      Else\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39;.&quot;, value)   \n      End If\n      &#39; The example displays the following output:\n      &#39;       1643.57\n      &#39;       Unable to parse &#39;$1,643.57&#39;.\n      &#39;       -1643000\n      &#39;       -1.68934617882109E+17\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Single.TryParse#1\">      string value;\n      float number;\n      \n      // Parse a floating-point value with a thousands separator.\n      value = &quot;1,643.57&quot;;\n      if (Single.TryParse(value, out number))\n         Console.WriteLine(number);\n      else\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39;.&quot;, value);      \n      \n      // Parse a floating-point value with a currency symbol and a \n      // thousands separator.\n      value = &quot;$1,643.57&quot;;\n      if (Single.TryParse(value, out number))\n         Console.WriteLine(number);\n      else\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39;.&quot;, value);   \n      \n      // Parse value in exponential notation.\n      value = &quot;-1.643e6&quot;;\n      if (Single.TryParse(value, out number))\n         Console.WriteLine(number);\n      else\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39;.&quot;, value);   \n      \n      // Parse a negative integer value.\n      value = &quot;-168934617882109132&quot;;\n      if (Single.TryParse(value, out number))\n         Console.WriteLine(number);\n      else\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39;.&quot;, value);   \n      // The example displays the following output:\n      //       1643.57\n      //       Unable to parse &#39;$1,643.57&#39;.\n      //       -164300\n      //       -1.68934617882109E+17\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Single_TryParse_System_String_System_Globalization_NumberStyles_System_IFormatProvider_System_Single__\">\r\n    \r\n            <a id=\"System_Single_TryParse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryParse(String,NumberStyles,IFormatProvider,Single)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the string representation of a number in a specified style and culture-specific format to its single-precision floating-point number equivalent. A return value indicates whether the conversion succeeded or failed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool TryParse (string s, System.Globalization.NumberStyles style, IFormatProvider provider, out float result);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string representing a number to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>style</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitwise combination of enumeration values that indicates the permitted format of <code>s</code>. A typical value to specify is <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> combined with <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information about <code>s</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>result</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>When this method returns, contains the single-precision floating-point number equivalent to the numeric value or symbol contained in <code>s</code>, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <code>s</code> parameter is <code>null</code> or <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>, is not in a format compliant with <code>style</code>, represents a number less than <a class=\"xref\" href=\"system.single#System_Single_MinValue\" data-linktype=\"relative-path\">MinValue</a> or greater than <a class=\"xref\" href=\"system.single#System_Single_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>, or if <code>style</code> is not a valid combination of <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> enumerated constants. This parameter is passed uninitialized; any value originally supplied in <code>result</code> will be overwritten.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>s</code> was converted successfully; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>style</code> is not a <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> value.  </p>\n<p> -or-  </p>\n<p> <code>style</code> is the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This overload differs from the <a class=\"xref\" href=\"system.single#System_Single_Parse_System_String_System_Globalization_NumberStyles_System_IFormatProvider_\" data-linktype=\"relative-path\">Parse(String,NumberStyles,IFormatProvider)</a> method by returning a Boolean value that indicates whether the parse operation succeeded instead of returning the parsed numeric value. It eliminates the need to use exception handling to test for a <a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a> in the event that <code>s</code> is invalid and cannot be successfully parsed.  </p>\n<p> The <code>style</code> parameter defines the allowable format of the <code>s</code> parameter for the parse operation to succeed. It must be a combination of bit flags from the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> enumeration. The following <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> members are not supported:  </p>\n<ul>\n<li><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a>  \n</li>\n<li><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a>  \n\n<p>The <code>s</code> parameter can contain <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_PositiveInfinitySymbol_\" data-linktype=\"relative-path\">PositiveInfinitySymbol</a>, <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_NegativeInfinitySymbol_\" data-linktype=\"relative-path\">NegativeInfinitySymbol</a>, <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_NaNSymbol_\" data-linktype=\"relative-path\">NaNSymbol</a> for the culture indicated by <code>provider</code>. In addition, depending on the value of <code>style</code>, the <code>s</code> parameter may include the following elements:  </p>\n<p>[ws] [$] [sign][integral-digits,]integral-digits[.fractional-digits][e[sign]exponential-digits][ws]  </p>\n<p>Elements in square brackets ([ and ]) are optional. The following table describes each element.  </p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>ws</em></td>\n<td>Optional white space. White space can appear at the beginning of <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag. It can appear at the end of <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>$</em></td>\n<td>A culture-specific currency symbol. Its position in the string is defined by the <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrencyNegativePattern_\" data-linktype=\"relative-path\">CurrencyNegativePattern</a> or <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrencyPositivePattern_\" data-linktype=\"relative-path\">CurrencyPositivePattern</a> properties of the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object returned by the <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method of the <code>provider</code> parameter. The currency symbol can appear in <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>sign</em></td>\n<td>An optional sign. The sign can appear at the beginning of <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag, and it can appear at the end of <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag. Parentheses can be used in <code>s</code> to indicate a negative value if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>integral-digits</em></td>\n<td>A series of digits ranging from 0 to 9 that specify the integral part of the number. Integral-digits can be absent if there are fractional-digits.</td>\n</tr>\n<tr>\n<td><em>,</em></td>\n<td>A culture-specific thousands separator symbol. The current culture&#39;s thousands separator symbol can appear in <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>.</em></td>\n<td>A culture-specific decimal point symbol. The current culture&#39;s decimal point symbol can appear in <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>fractional-digits</em></td>\n<td>A series of digits ranging from 0 to 9 that specify the fractional part of the number. Fractional digits can appear in <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>e</em></td>\n<td>The e or E character, which indicates that <code>s</code> can represent a number using exponential notation. The <code>s</code> parameter can represent a number in exponential notation if style includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>exponential-digits</em></td>\n<td>A series of digits ranging from 0 to 9 that specify an exponent.</td>\n</tr>\n</tbody>\n</table>\n<p> A string with digits only (which corresponds to the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> style) always parses successfully. The remaining <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> members control elements that may be but are not required to be present in the input string. The following table indicates how individual <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> flags affect the elements that may be present in <code>s</code>.  </p>\n<table>\n<thead>\n<tr>\n<th>NumberStyles value</th>\n<th>Elements permitted in s in addition to digits</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>integral-digits</em> element only.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>.</em> and <em>fractional-digits</em> elements.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <code>s</code> parameter can also use exponential notation. This flag by itself supports values in the form <em>integral-digits</em>E<em>exponential-digits</em>; additional flags are needed to successfully parse strings in exponential notation with such elements as positive or negative signs and decimal point symbols.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>ws</em> element at the beginning of <code>s</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>ws</em> element at the end of <code>s</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>sign</em> element at the beginning of <code>s</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>sign</em> element at the end of <code>s</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>sign</em> element in the form of parentheses enclosing the numeric value.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>,</em> element.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>$</em> element.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>All. The <code>s</code> parameter cannot represent a hexadecimal number or a number in exponential notation.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>ws</em> element at the beginning or end of <code>s</code>, <em>sign</em> at the beginning of <code>s</code>, and the <em>.</em> symbol. The <code>s</code> parameter can also use exponential notation.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <code>ws</code>, <code>sign</code>, thousands separator (<em>,),</em> and decimal point (<em>.</em>) elements.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>All styles, except <code>s</code> cannot represent a hexadecimal number.</td>\n</tr>\n</tbody>\n</table>\n<p> The <code>provider</code> parameter is an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation whose <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method returns a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that provides culture-specific formatting information. When the TryParse method is invoked, it calls the <code>provider</code> parameter&#39;s <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method and passes it a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> type. The <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method then returns the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that provides information about the format of the <code>s</code> parameter. There are three ways to use the <code>provider</code> parameter to supply custom formatting information to the parse operation:  </p>\n<ul>\n<li><p>You can pass a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents the culture that supplies formatting information. Its <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method returns the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that provides numeric formatting information for that culture.  </p>\n</li>\n<li><p>You can pass the actual <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that provides numeric formatting information. (Its implementation of <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> just returns itself.)  </p>\n</li>\n<li><p>You can pass a custom object that implements <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a>. Its <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method instantiates and returns the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that provides formatting information.  </p>\n<p>If <code>provider</code> is <code>null</code>, the formatting of <code>s</code> is interpreted based on the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object of the current culture.  </p>\n<p>If a separator is encountered in the <code>s</code> parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator. For more information about separators, see <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrencyDecimalSeparator_\" data-linktype=\"relative-path\">CurrencyDecimalSeparator</a>, <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_NumberDecimalSeparator_\" data-linktype=\"relative-path\">NumberDecimalSeparator</a>, <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrencyGroupSeparator_\" data-linktype=\"relative-path\">CurrencyGroupSeparator</a>, and <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_NumberGroupSeparator_\" data-linktype=\"relative-path\">NumberGroupSeparator</a>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the use of the TryParse method to parse the string representation of numbers that have a particular style and are formatted using the conventions of a particular culture.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Single.TryParse#2\">      Dim value As String\n      Dim style As System.Globalization.NumberStyles\n      Dim culture As System.Globalization.CultureInfo\n      Dim number As Single\n      \n      &#39; Parse currency value using en-GB culture.\n      value = &quot;�1,097.63&quot;\n      style = System.Globalization.NumberStyles.Number Or _\n              System.Globalization.NumberStyles.AllowCurrencySymbol\n      culture = System.Globalization.CultureInfo.CreateSpecificCulture(&quot;en-GB&quot;)\n      If Single.TryParse(value, style, culture, number) Then\n         Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, value, number)\n      Else\n         Console.WriteLine(&quot;Unable to convert &#39;{0}&#39;.&quot;, value)\n      End If    \n      \n      value = &quot;1345,978&quot;\n      style = System.Globalization.NumberStyles.AllowDecimalPoint\n      culture = System.Globalization.CultureInfo.CreateSpecificCulture(&quot;fr-FR&quot;)\n      If Single.TryParse(value, style, culture, number) Then\n         Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, value, number)\n      Else\n         Console.WriteLine(&quot;Unable to convert &#39;{0}&#39;.&quot;, value)\n      End If    \n      \n      value = &quot;1.345,978&quot;\n      style = System.Globalization.NumberStyles.AllowDecimalPoint Or _\n              System.Globalization.NumberStyles.AllowThousands\n      culture = System.Globalization.CultureInfo.CreateSpecificCulture(&quot;es-ES&quot;)\n      If Single.TryParse(value, style, culture, number) Then\n         Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, value, number)\n      Else\n         Console.WriteLine(&quot;Unable to convert &#39;{0}&#39;.&quot;, value)\n      End If    \n      \n      value = &quot;1 345,978&quot;\n      If Single.TryParse(value, style, culture, number) Then\n         Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, value, number)\n      Else\n         Console.WriteLine(&quot;Unable to convert &#39;{0}&#39;.&quot;, value)\n      End If    \n      &#39; The example displays the following output:\n      &#39;       Converted &#39;�1,097.63&#39; to 1097.63.\n      &#39;       Converted &#39;1345,978&#39; to 1345.978.\n      &#39;       Converted &#39;1.345,978&#39; to 1345.978.\n      &#39;       Unable to convert &#39;1 345,978&#39;.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Single.TryParse#2\">      string value;\n      System.Globalization.NumberStyles style;\n      System.Globalization.CultureInfo culture;\n      float number;\n      \n      // Parse currency value using en-GB culture.\n      value = &quot;�1,097.63&quot;;\n      style = System.Globalization.NumberStyles.Number | \n              System.Globalization.NumberStyles.AllowCurrencySymbol;\n      culture = System.Globalization.CultureInfo.CreateSpecificCulture(&quot;en-GB&quot;);\n      if (Single.TryParse(value, style, culture, out number))\n         Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, value, number);\n      else\n         Console.WriteLine(&quot;Unable to convert &#39;{0}&#39;.&quot;, value);\n      \n      value = &quot;1345,978&quot;;\n      style = System.Globalization.NumberStyles.AllowDecimalPoint;\n      culture = System.Globalization.CultureInfo.CreateSpecificCulture(&quot;fr-FR&quot;);\n      if (Single.TryParse(value, style, culture, out number))\n         Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, value, number);\n      else\n         Console.WriteLine(&quot;Unable to convert &#39;{0}&#39;.&quot;, value);\n      \n      value = &quot;1.345,978&quot;;\n      style = System.Globalization.NumberStyles.AllowDecimalPoint | \n              System.Globalization.NumberStyles.AllowThousands;\n      culture = System.Globalization.CultureInfo.CreateSpecificCulture(&quot;es-ES&quot;);\n      if (Single.TryParse(value, style, culture, out number))\n         Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, value, number);\n      else\n         Console.WriteLine(&quot;Unable to convert &#39;{0}&#39;.&quot;, value);\n      \n      value = &quot;1 345,978&quot;;\n      if (Single.TryParse(value, style, culture, out number))\n         Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, value, number);\n      else\n         Console.WriteLine(&quot;Unable to convert &#39;{0}&#39;.&quot;, value);\n      // The example displays the following output:\n      //       Converted &#39;�1,097.63&#39; to 1097.63.\n      //       Converted &#39;1345,978&#39; to 1345.978.\n      //       Converted &#39;1.345,978&#39; to 1345.978.\n      //       Unable to convert &#39;1 345,978&#39;.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"operators\">\r\n        <h2>Operators\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Single_op_Equality_System_Single_System_Single_\">\r\n    \r\n            <a id=\"System_Single_op_Equality_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Equality(Single,Single)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value that indicates whether two specified <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values are equal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_Equality (float left, float right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first value to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second value to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>left</code> and <code>right</code> are equal; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Equality method defines the equality operator for <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Single_op_GreaterThan_System_Single_System_Single_\">\r\n    \r\n            <a id=\"System_Single_op_GreaterThan_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_GreaterThan(Single,Single)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value that indicates whether a specified <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value is greater than another specified <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_GreaterThan (float left, float right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first value to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second value to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>left</code> is greater than <code>right</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The GreaterThan method defines the operation of the greater-than operator for <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Single_op_GreaterThanOrEqual_System_Single_System_Single_\">\r\n    \r\n            <a id=\"System_Single_op_GreaterThanOrEqual_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_GreaterThanOrEqual(Single,Single)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value that indicates whether a specified <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value is greater than or equal to another specified <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_GreaterThanOrEqual (float left, float right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first value to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second value to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>left</code> is greater than or equal to <code>right</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The GreaterThanOrEqual method defines the operation of the greater-than-or-equal operator for <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Single_op_Inequality_System_Single_System_Single_\">\r\n    \r\n            <a id=\"System_Single_op_Inequality_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Inequality(Single,Single)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value that indicates whether two specified <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values are not equal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_Inequality (float left, float right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first value to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second value to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>left</code> and <code>right</code> are not equal; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Inequality method defines the inequality operator for <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Single_op_LessThan_System_Single_System_Single_\">\r\n    \r\n            <a id=\"System_Single_op_LessThan_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_LessThan(Single,Single)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value that indicates whether a specified <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value is less than another specified <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_LessThan (float left, float right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first value to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second value to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>left</code> is less than <code>right</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The LessThan method defines the operation of the less-than operator for <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Single_op_LessThanOrEqual_System_Single_System_Single_\">\r\n    \r\n            <a id=\"System_Single_op_LessThanOrEqual_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_LessThanOrEqual(Single,Single)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value that indicates whether a specified <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value is less than or equal to another specified <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_LessThanOrEqual (float left, float right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first value to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second value to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>left</code> is less than or equal to <code>right</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The LessThanOrEqual method defines the operation of the less-than-or-equal operator for <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Single_System_IConvertible_ToBoolean_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Single_System_IConvertible_ToBoolean_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToBoolean(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToBoolean*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool IConvertible.ToBoolean (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the value of the current instance is not zero; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToBoolean_System_Single_\" data-linktype=\"relative-path\">System.Convert.ToBoolean(Single)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Single_System_IConvertible_ToByte_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Single_System_IConvertible_ToByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToByte(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToByte*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">byte IConvertible.ToByte (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </div>\r\n                  <p>The value of the current instance, converted to a <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToByte_System_Single_\" data-linktype=\"relative-path\">System.Convert.ToByte(Single)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Single_System_IConvertible_ToChar_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Single_System_IConvertible_ToChar_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToChar(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>This conversion is not supported. Attempting to use this method throws an <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">char IConvertible.ToChar (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported. No value is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>In all cases.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Single_System_IConvertible_ToDateTime_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Single_System_IConvertible_ToDateTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToDateTime(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>This conversion is not supported. Attempting to use this method throws an <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">DateTime IConvertible.ToDateTime (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported. No value is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>In all cases.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Single_System_IConvertible_ToDecimal_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Single_System_IConvertible_ToDecimal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToDecimal(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToDecimal*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">decimal IConvertible.ToDecimal (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>The value of the current instance, converted to a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToDecimal_System_Single_\" data-linktype=\"relative-path\">System.Convert.ToDecimal(Single)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Single_System_IConvertible_ToDouble_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Single_System_IConvertible_ToDouble_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToDouble(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToDouble*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">double IConvertible.ToDouble (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The value of the current instance, converted to a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToDouble_System_Single_\" data-linktype=\"relative-path\">System.Convert.ToDouble(Single)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Single_System_IConvertible_ToInt16_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Single_System_IConvertible_ToInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToInt16(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToInt16*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">short IConvertible.ToInt16 (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </div>\r\n                  <p>The value of the current instance, converted to an <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToInt16_System_Single_\" data-linktype=\"relative-path\">System.Convert.ToInt16(Single)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Single_System_IConvertible_ToInt32_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Single_System_IConvertible_ToInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToInt32(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToInt32*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">int IConvertible.ToInt32 (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The value of the current instance, converted to an <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToInt32_System_Single_\" data-linktype=\"relative-path\">System.Convert.ToInt32(Single)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Single_System_IConvertible_ToInt64_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Single_System_IConvertible_ToInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToInt64(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToInt64*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">long IConvertible.ToInt64 (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The value of the current instance, converted to an <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToInt64_System_Single_\" data-linktype=\"relative-path\">System.Convert.ToInt64(Single)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Single_System_IConvertible_ToSByte_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Single_System_IConvertible_ToSByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToSByte(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToSByte*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">sbyte IConvertible.ToSByte (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </div>\r\n                  <p>The value of the current instance, converted to an <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToSByte_System_Single_\" data-linktype=\"relative-path\">System.Convert.ToSByte(Single)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Single_System_IConvertible_ToSingle_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Single_System_IConvertible_ToSingle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToSingle(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToSingle*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">float IConvertible.ToSingle (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p>The value of the current instance, unchanged.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Single_System_IConvertible_ToType_System_Type_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Single_System_IConvertible_ToType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToType(Type,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToType*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">object IConvertible.ToType (Type type, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type to which to convert this <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies information about the format of the returned value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>The value of the current instance, converted to <code>type</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <code>static</code> (<code>Shared</code> in Visual Basic) <a class=\"xref\" href=\"system.convert#System_Convert_ChangeType_\" data-linktype=\"relative-path\">ChangeType</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Single_System_IConvertible_ToUInt16_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Single_System_IConvertible_ToUInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToUInt16(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToUInt16*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">ushort IConvertible.ToUInt16 (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </div>\r\n                  <p>The value of the current instance, converted to a <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToUInt16_System_Single_\" data-linktype=\"relative-path\">System.Convert.ToUInt16(Single)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Single_System_IConvertible_ToUInt32_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Single_System_IConvertible_ToUInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToUInt32(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToUInt32*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">uint IConvertible.ToUInt32 (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </div>\r\n                  <p>The value of the current instance, converted to a <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToUInt32_System_Single_\" data-linktype=\"relative-path\">System.Convert.ToUInt32(Single)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Single_System_IConvertible_ToUInt64_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Single_System_IConvertible_ToUInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToUInt64(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToUInt64*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">ulong IConvertible.ToUInt64 (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </div>\r\n                  <p>The value of the current instance, converted to a <a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToUInt64_System_Single_\" data-linktype=\"relative-path\">System.Convert.ToUInt64(Single)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Single.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Single.yml\">\r\n<meta name=\"APIName\" content=\"System.Single\">\r\n<meta name=\"APIName\" content=\"System.Single.CompareTo\">\r\n<meta name=\"APIName\" content=\"System.Single.Epsilon\">\r\n<meta name=\"APIName\" content=\"System.Single.Equals\">\r\n<meta name=\"APIName\" content=\"System.Single.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Single.GetTypeCode\">\r\n<meta name=\"APIName\" content=\"System.Single.IsInfinity\">\r\n<meta name=\"APIName\" content=\"System.Single.IsNaN\">\r\n<meta name=\"APIName\" content=\"System.Single.IsNegativeInfinity\">\r\n<meta name=\"APIName\" content=\"System.Single.IsPositiveInfinity\">\r\n<meta name=\"APIName\" content=\"System.Single.MaxValue\">\r\n<meta name=\"APIName\" content=\"System.Single.MinValue\">\r\n<meta name=\"APIName\" content=\"System.Single.NaN\">\r\n<meta name=\"APIName\" content=\"System.Single.NegativeInfinity\">\r\n<meta name=\"APIName\" content=\"System.Single.op_Equality\">\r\n<meta name=\"APIName\" content=\"System.Single.op_op_Equality\">\r\n<meta name=\"APIName\" content=\"System.Single.op_GreaterThan\">\r\n<meta name=\"APIName\" content=\"System.Single.op_op_GreaterThan\">\r\n<meta name=\"APIName\" content=\"System.Single.op_GreaterThanOrEqual\">\r\n<meta name=\"APIName\" content=\"System.Single.op_op_GreaterThanOrEqual\">\r\n<meta name=\"APIName\" content=\"System.Single.op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.Single.op_op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.Single.op_LessThan\">\r\n<meta name=\"APIName\" content=\"System.Single.op_op_LessThan\">\r\n<meta name=\"APIName\" content=\"System.Single.op_LessThanOrEqual\">\r\n<meta name=\"APIName\" content=\"System.Single.op_op_LessThanOrEqual\">\r\n<meta name=\"APIName\" content=\"System.Single.Parse\">\r\n<meta name=\"APIName\" content=\"System.Single.PositiveInfinity\">\r\n<meta name=\"APIName\" content=\"System.Single.IConvertible.ToBoolean\">\r\n<meta name=\"APIName\" content=\"System.Single.IConvertible.ToByte\">\r\n<meta name=\"APIName\" content=\"System.Single.IConvertible.ToChar\">\r\n<meta name=\"APIName\" content=\"System.Single.IConvertible.ToDateTime\">\r\n<meta name=\"APIName\" content=\"System.Single.IConvertible.ToDecimal\">\r\n<meta name=\"APIName\" content=\"System.Single.IConvertible.ToDouble\">\r\n<meta name=\"APIName\" content=\"System.Single.IConvertible.ToInt16\">\r\n<meta name=\"APIName\" content=\"System.Single.IConvertible.ToInt32\">\r\n<meta name=\"APIName\" content=\"System.Single.IConvertible.ToInt64\">\r\n<meta name=\"APIName\" content=\"System.Single.IConvertible.ToSByte\">\r\n<meta name=\"APIName\" content=\"System.Single.IConvertible.ToSingle\">\r\n<meta name=\"APIName\" content=\"System.Single.IConvertible.ToType\">\r\n<meta name=\"APIName\" content=\"System.Single.IConvertible.ToUInt16\">\r\n<meta name=\"APIName\" content=\"System.Single.IConvertible.ToUInt32\">\r\n<meta name=\"APIName\" content=\"System.Single.IConvertible.ToUInt64\">\r\n<meta name=\"APIName\" content=\"System.Single.ToString\">\r\n<meta name=\"APIName\" content=\"System.Single.TryParse\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"77c2d9a4-7871-ac3a-8022-db9b5108ef1c\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a single-precision floating-point number.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Single\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Single.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Single.yml","open_to_public_contributors":true,"api_name":["System.Single","System.Single.CompareTo","System.Single.Epsilon","System.Single.Equals","System.Single.GetHashCode","System.Single.GetTypeCode","System.Single.IsInfinity","System.Single.IsNaN","System.Single.IsNegativeInfinity","System.Single.IsPositiveInfinity","System.Single.MaxValue","System.Single.MinValue","System.Single.NaN","System.Single.NegativeInfinity","System.Single.op_Equality","System.Single.op_op_Equality","System.Single.op_GreaterThan","System.Single.op_op_GreaterThan","System.Single.op_GreaterThanOrEqual","System.Single.op_op_GreaterThanOrEqual","System.Single.op_Inequality","System.Single.op_op_Inequality","System.Single.op_LessThan","System.Single.op_op_LessThan","System.Single.op_LessThanOrEqual","System.Single.op_op_LessThanOrEqual","System.Single.Parse","System.Single.PositiveInfinity","System.Single.IConvertible.ToBoolean","System.Single.IConvertible.ToByte","System.Single.IConvertible.ToChar","System.Single.IConvertible.ToDateTime","System.Single.IConvertible.ToDecimal","System.Single.IConvertible.ToDouble","System.Single.IConvertible.ToInt16","System.Single.IConvertible.ToInt32","System.Single.IConvertible.ToInt64","System.Single.IConvertible.ToSByte","System.Single.IConvertible.ToSingle","System.Single.IConvertible.ToType","System.Single.IConvertible.ToUInt16","System.Single.IConvertible.ToUInt32","System.Single.IConvertible.ToUInt64","System.Single.ToString","System.Single.TryParse"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Single","System::Single","System.Single.CompareTo","System::Single::CompareTo","System.Single.Epsilon","System::Single::Epsilon","System.Single.Equals","System::Single::Equals","System.Single.GetHashCode","System::Single::GetHashCode","System.Single.GetTypeCode","System::Single::GetTypeCode","System.Single.IsInfinity","System::Single::IsInfinity","System.Single.IsNaN","System::Single::IsNaN","System.Single.IsNegativeInfinity","System::Single::IsNegativeInfinity","System.Single.IsPositiveInfinity","System::Single::IsPositiveInfinity","System.Single.MaxValue","System::Single::MaxValue","System.Single.MinValue","System::Single::MinValue","System.Single.NaN","System::Single::NaN","System.Single.NegativeInfinity","System::Single::NegativeInfinity","System.Single.op_Equality","System::Single::op_Equality","System.Single.op_GreaterThan","System::Single::op_GreaterThan","System.Single.op_GreaterThanOrEqual","System::Single::op_GreaterThanOrEqual","System.Single.op_Inequality","System::Single::op_Inequality","System.Single.op_LessThan","System::Single::op_LessThan","System.Single.op_LessThanOrEqual","System::Single::op_LessThanOrEqual","System.Single.Parse","System::Single::Parse","System.Single.PositiveInfinity","System::Single::PositiveInfinity","System.Single.System#IConvertible#ToBoolean","System::Single::System#IConvertible#ToBoolean","System.Single.System#IConvertible#ToByte","System::Single::System#IConvertible#ToByte","System.Single.System#IConvertible#ToChar","System::Single::System#IConvertible#ToChar","System.Single.System#IConvertible#ToDateTime","System::Single::System#IConvertible#ToDateTime","System.Single.System#IConvertible#ToDecimal","System::Single::System#IConvertible#ToDecimal","System.Single.System#IConvertible#ToDouble","System::Single::System#IConvertible#ToDouble","System.Single.System#IConvertible#ToInt16","System::Single::System#IConvertible#ToInt16","System.Single.System#IConvertible#ToInt32","System::Single::System#IConvertible#ToInt32","System.Single.System#IConvertible#ToInt64","System::Single::System#IConvertible#ToInt64","System.Single.System#IConvertible#ToSByte","System::Single::System#IConvertible#ToSByte","System.Single.System#IConvertible#ToSingle","System::Single::System#IConvertible#ToSingle","System.Single.System#IConvertible#ToType","System::Single::System#IConvertible#ToType","System.Single.System#IConvertible#ToUInt16","System::Single::System#IConvertible#ToUInt16","System.Single.System#IConvertible#ToUInt32","System::Single::System#IConvertible#ToUInt32","System.Single.System#IConvertible#ToUInt64","System::Single::System#IConvertible#ToUInt64","System.Single.ToString","System::Single::ToString","System.Single.TryParse","System::Single::TryParse"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"77c2d9a4-7871-ac3a-8022-db9b5108ef1c","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/Single.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Single struct | Microsoft Docs","_op_ogTitle":"Single struct","description":"Represents a single-precision floating-point number.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.Single","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.single","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.single","fileRelativePath":"System.Single.html"},"themesRelativePathToOutputRoot":"_themes/"}