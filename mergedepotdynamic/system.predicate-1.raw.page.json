{"content":"\r\n<div style=\"display:none\">\r\n\t\r\n</div>\r\n\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">Predicate&lt;T&gt;</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the method that defines a set of criteria and determines whether the specified object meets those criteria.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public delegate bool Predicate&lt;in T&gt;(T obj);</code></pre>\r\n  \r\n  \r\n  \r\n  \t\t<h3 class=\"accented\">Type Parameters</h3>\r\n  \t\t<table class=\"nameValue\">\r\n  \t\t\t<tr>\r\n  \t\t\t<td>T</td>\r\n  \t\t\t<td><p>The type of the object to compare.</p>\n</td>\r\n  \t\t\t</tr>\r\n  \t\t</table>\r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div>\r\n  \t\t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">System.Delegate</a></span></div>\r\n  \t\t\t<span class=\"lang-csharp\">Predicate&lt;T&gt;</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>This delegate is used by several methods of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> and <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> classes to search for elements in the collection.  </p>\n<p> Typically, the Predicate(T) delegate is represented by a lambda expression. Because locally scoped variables are available to the lambda expression, it is easy to test for a condition that is not precisely known at compile time. This is simulated in the following example, which defines a <code>HockeyTeam</code> class that contains information about a National Hockey League team and the year in which it was founded. The example defines an array of integer values that represent years, and randomly assigns one element of the array to <code>foundedBeforeYear</code>, which is a variable that is locally scoped to the example&#39;s <code>Main</code> method. Because locally scoped variables are available to a lambda expression, the lambda expression passed to the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_FindAll_\" data-linktype=\"relative-path\">FindAll</a> method is able to return a <code>HockeyTeam</code> object for each team founded on or before that year.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Predicate`1#3\">using System;\nusing System.Collections.Generic;\n\npublic class HockeyTeam\n{\n   private string _name;\n   private int _founded;\n   \n   public HockeyTeam(string name, int year)\n   {\n      _name = name;\n      _founded = year;\n   }\n\n   public string Name {\n      get { return _name; }\n   }\n\n   public int Founded {\n      get { return _founded; }\n   }\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      Random rnd = new Random();\n      List&lt;HockeyTeam&gt; teams = new List&lt;HockeyTeam&gt;();\n      teams.AddRange( new HockeyTeam[] { new HockeyTeam(&quot;Detroit Red Wings&quot;, 1926), \n                                         new HockeyTeam(&quot;Chicago Blackhawks&quot;, 1926),\n                                         new HockeyTeam(&quot;San Jose Sharks&quot;, 1991),\n                                         new HockeyTeam(&quot;Montreal Canadiens&quot;, 1909),\n                                         new HockeyTeam(&quot;St. Louis Blues&quot;, 1967) } );\n      int[] years = { 1920, 1930, 1980, 2000 };\n      int foundedBeforeYear = years[rnd.Next(0, years.Length)];\n      Console.WriteLine(&quot;Teams founded before {0}:&quot;, foundedBeforeYear);\n      foreach (var team in teams.FindAll( x =&gt; x.Founded &lt;= foundedBeforeYear))\n         Console.WriteLine(&quot;{0}: {1}&quot;, team.Name, team.Founded);\n   }\n}\n// The example displays output similar to the following:\n//       Teams founded before 1930:\n//       Detroit Red Wings: 1926\n//       Chicago Blackhawks: 1926\n//       Montreal Canadiens: 1909\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Predicate`1#3\">Imports System.Collections.Generic\n\nPublic Class HockeyTeam\n   Private _name As String\n   Private _founded As Integer\n   \n   Public Sub New(name As String, year As Integer)\n      _name = name\n      _founded = year\n   End Sub\n\n   Public ReadOnly Property Name As String\n      Get\n         Return _name\n      End Get\n   End Property\n\n   Public ReadOnly Property Founded As Integer\n      Get \n         Return _founded\n      End Get   \n   End Property\nEnd Class\n\nModule Example\n   Public Sub Main()\n      Dim rnd As New Random()\n      Dim teams As New List(Of HockeyTeam)()\n      teams.AddRange( { new HockeyTeam(&quot;Detroit Red Wings&quot;, 1926), \n                        new HockeyTeam(&quot;Chicago Blackhawks&quot;, 1926),\n                        new HockeyTeam(&quot;San Jose Sharks&quot;, 1991),\n                        new HockeyTeam(&quot;Montreal Canadiens&quot;, 1909),\n                        new HockeyTeam(&quot;St. Louis Blues&quot;, 1967) } )\n      Dim years() As Integer = { 1920, 1930, 1980, 2000 }\n      Dim foundedBeforeYear As Integer = years(rnd.Next(0, years.Length))\n      Console.WriteLine(&quot;Teams founded before {0}:&quot;, foundedBeforeYear)\n      For Each team in teams.FindAll( Function(x) x.Founded &lt;= foundedBeforeYear )\n         Console.WriteLine(&quot;{0}: {1}&quot;, team.Name, team.Founded)\n      Next   \n   End Sub\nEnd Module\n&#39; The example displays output similar to the following:\n&#39;       Teams founded before 1930:\n&#39;       Detroit Red Wings: 1926\n&#39;       Chicago Blackhawks: 1926\n&#39;       Montreal Canadiens: 1909\n</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Predicate-1.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Predicate-1.yml\">\r\n<meta name=\"APIName\" content=\"System.Predicate&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.Predicate&lt;T&gt;..ctor\">\r\n<meta name=\"APIName\" content=\"System.Predicate&lt;T&gt;.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Predicate&lt;T&gt;.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Predicate&lt;T&gt;.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"463e8cef-5c1d-ac53-f4f4-2bd86e896d18\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the method that defines a set of criteria and determines whether the specified object meets those criteria.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Predicate`1\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Predicate-1.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Predicate-1.yml","open_to_public_contributors":true,"api_name":["System.Predicate<T>","System.Predicate<T>..ctor","System.Predicate<T>.Invoke","System.Predicate<T>.BeginInvoke","System.Predicate<T>.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Predicate`1","System::Predicate`1"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"463e8cef-5c1d-ac53-f4f4-2bd86e896d18","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/Predicate`1.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Predicate<T> delegate | Microsoft Docs","_op_ogTitle":"Predicate<T> delegate","description":"Represents the method that defines a set of criteria and determines whether the specified object meets those criteria.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.Predicate`1","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.predicate-1","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.predicate-1","fileRelativePath":"System.Predicate-1.html"},"themesRelativePathToOutputRoot":"_themes/"}