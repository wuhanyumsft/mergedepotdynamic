{"content":"    \r\n    <h1 id=\"System_ComponentModel_AsyncOperation\">\r\n      <span class=\"lang-csharp\">AsyncOperation</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Tracks the lifetime of an asynchronous operation.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public sealed class AsyncOperation</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">AsyncOperation</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>When you implement a class according to the <a href=\"../Topic/Event-based%20Asynchronous%20Pattern%20Overview.md\" data-linktype=\"relative-path\">Event-based Asynchronous Pattern Overview</a>, you may need to track the lifetime of each asynchronous operation invoked on an instance of your class. The AsyncOperation class provides ways to track and report the progress of an asynchronous task.  </p>\n<p> The following list identifies ways to use an AsyncOperation object:  </p>\n<ul>\n<li><p>To report progress and interim results to the client, call <a class=\"xref\" href=\"system.componentmodel.asyncoperation#System_ComponentModel_AsyncOperation_Post_\" data-linktype=\"relative-path\">Post</a> from your asynchronous worker code.  </p>\n</li>\n<li><p>To indicate that an asynchronous task has completed, or to cancel a pending asynchronous task, call <a class=\"xref\" href=\"system.componentmodel.asyncoperation#System_ComponentModel_AsyncOperation_PostOperationCompleted_\" data-linktype=\"relative-path\">PostOperationCompleted</a>.  </p>\n<p>Your class should get an AsyncOperation object for each asynchronous task by calling <a class=\"xref\" href=\"system.componentmodel.asyncoperationmanager#System_ComponentModel_AsyncOperationManager_CreateOperation_\" data-linktype=\"relative-path\">CreateOperation</a> when each task starts. To allow the client to distinguish separate asynchronous tasks, <a class=\"xref\" href=\"system.componentmodel.asyncoperationmanager#System_ComponentModel_AsyncOperationManager_CreateOperation_\" data-linktype=\"relative-path\">CreateOperation</a> takes a parameter for a unique client-provided token, which becomes the <a class=\"xref\" href=\"system.componentmodel.asyncoperation#System_ComponentModel_AsyncOperation_UserSuppliedState_\" data-linktype=\"relative-path\">UserSuppliedState</a> property. It can then be used by client code to identify the particular asynchronous task that is raising progress or completion events.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ComponentModel_AsyncOperation_SynchronizationContext\" data-linktype=\"self-bookmark\">SynchronizationContext</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.threading.synchronizationcontext\" data-linktype=\"relative-path\">SynchronizationContext</a> object that was passed to the constructor.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ComponentModel_AsyncOperation_UserSuppliedState\" data-linktype=\"self-bookmark\">UserSuppliedState</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets an object used to uniquely identify an asynchronous operation.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ComponentModel_AsyncOperation_Finalize\" data-linktype=\"self-bookmark\">Finalize()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Finalizes the asynchronous operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ComponentModel_AsyncOperation_OperationCompleted\" data-linktype=\"self-bookmark\">OperationCompleted()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Ends the lifetime of an asynchronous operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ComponentModel_AsyncOperation_Post_System_Threading_SendOrPostCallback_System_Object_\" data-linktype=\"self-bookmark\">Post(SendOrPostCallback,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes a delegate on the thread or context appropriate for the application model.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ComponentModel_AsyncOperation_PostOperationCompleted_System_Threading_SendOrPostCallback_System_Object_\" data-linktype=\"self-bookmark\">PostOperationCompleted(SendOrPostCallback,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Ends the lifetime of an asynchronous operation.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_ComponentModel_AsyncOperation_SynchronizationContext\">\r\n    \r\n            <a id=\"System_ComponentModel_AsyncOperation_SynchronizationContext_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SynchronizationContext</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.threading.synchronizationcontext\" data-linktype=\"relative-path\">SynchronizationContext</a> object that was passed to the constructor.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.SynchronizationContext SynchronizationContext { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.synchronizationcontext\" data-linktype=\"relative-path\">SynchronizationContext</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.synchronizationcontext\" data-linktype=\"relative-path\">SynchronizationContext</a> object that was passed to the constructor.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ComponentModel_AsyncOperation_UserSuppliedState\">\r\n    \r\n            <a id=\"System_ComponentModel_AsyncOperation_UserSuppliedState_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UserSuppliedState</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets an object used to uniquely identify an asynchronous operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object UserSuppliedState { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The state object passed to the asynchronous method invocation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If your class supports multiple asynchronous methods or multiple invocations of a single asynchronous method, clients will need a way to determine which asynchronous task is raising events. Your <code>MethodNameAsync</code> method should take a parameter of type <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> that will act as a task ID. You will use this task ID when you call the <a class=\"xref\" href=\"system.componentmodel.asyncoperationmanager#System_ComponentModel_AsyncOperationManager_CreateOperation_\" data-linktype=\"relative-path\">CreateOperation</a>, method and this will associate the client&#39;s task ID with a particular invocation of your asynchronous operation. This task ID is made available to your implementation through the UserSuppliedState property.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Client code must be careful to provide a unique value for the UserSuppliedState property. Non-unique task IDs may cause your implementation to report progress and other events incorrectly. Your code should check for a non-unique task ID and raise an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a> if one is detected.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates using UserSuppliedState to track the lifetime of asynchronous operations. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.componentmodel.asyncoperationmanager\" data-linktype=\"relative-path\">System.ComponentModel.AsyncOperationManager</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"System.ComponentModel.AsyncOperationManager#4\">    &#39; This method cancels a pending asynchronous operation.\n    Public Sub CancelAsync(ByVal taskId As Object)\n\n        Dim obj As Object = userStateToLifetime(taskId)\n        If (obj IsNot Nothing) Then\n\n            SyncLock userStateToLifetime.SyncRoot\n\n                userStateToLifetime.Remove(taskId)\n\n            End SyncLock\n\n        End If\n\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.ComponentModel.AsyncOperationManager#4\">        // This method cancels a pending asynchronous operation.\n        public void CancelAsync(object taskId)\n        {\n            AsyncOperation asyncOp = userStateToLifetime[taskId] as AsyncOperation;\n            if (asyncOp != null)\n            {   \n                lock (userStateToLifetime.SyncRoot)\n                {\n                    userStateToLifetime.Remove(taskId);\n                }\n            }\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_ComponentModel_AsyncOperation_Finalize\">\r\n    \r\n            <a id=\"System_ComponentModel_AsyncOperation_Finalize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Finalize()</div>        \r\n          </div>\r\n    \r\n            <p>Finalizes the asynchronous operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">~AsyncOperation ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ComponentModel_AsyncOperation_OperationCompleted\">\r\n    \r\n            <a id=\"System_ComponentModel_AsyncOperation_OperationCompleted_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OperationCompleted()</div>        \r\n          </div>\r\n    \r\n            <p>Ends the lifetime of an asynchronous operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void OperationCompleted ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>OperationCompleted has been called previously for this task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Call the OperationCompleted method to end the lifetime of an asynchronous operation. After this method is called for a particular task, calls to its corresponding <a class=\"xref\" href=\"system.componentmodel.asyncoperation\" data-linktype=\"relative-path\">AsyncOperation</a> will raise an exception.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ComponentModel_AsyncOperation_Post_System_Threading_SendOrPostCallback_System_Object_\">\r\n    \r\n            <a id=\"System_ComponentModel_AsyncOperation_Post_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Post(SendOrPostCallback,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Invokes a delegate on the thread or context appropriate for the application model.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Post (System.Threading.SendOrPostCallback d, object arg);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>d</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.sendorpostcallback\" data-linktype=\"relative-path\">SendOrPostCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.threading.sendorpostcallback\" data-linktype=\"relative-path\">SendOrPostCallback</a> object that wraps the delegate to be called when the operation ends.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An argument for the delegate contained in the <code>d</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.ComponentModel.AsyncOperation.PostOperationCompleted*</span> method has been called previously for this task.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>d</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Post method invokes the delegate specified by the <code>arg</code> parameter without ending the lifetime of the asynchronous operation.  </p>\n<p> You can call the Post method as often as you like while the lifetime of the asynchronous operation has not been ended by a call to <a class=\"xref\" href=\"system.componentmodel.asyncoperation#System_ComponentModel_AsyncOperation_PostOperationCompleted_\" data-linktype=\"relative-path\">PostOperationCompleted</a>. You can use the method to report progress or interim results back to clients.  </p>\n<p> The <code>d</code> parameter wraps the delegate you want called when you want to post an update about the status of the asynchronous task. The <a class=\"xref\" href=\"system.componentmodel.asyncoperation\" data-linktype=\"relative-path\">AsyncOperation</a> object will ensure that your delegate is invoked on the thread or context appropriate for the application model. Your method can optionally raise an event that notifies clients of a status change, progress update, or newly available incremental results.  </p>\n<p> The <code>arg</code> parameter should be used to pass state to the delegate wrapped by the <code>d</code> parameter. It might be a reference to an <a class=\"xref\" href=\"system.componentmodel.asyncoperation\" data-linktype=\"relative-path\">AsyncOperation</a>, or it might be a <a class=\"xref\" href=\"system.componentmodel.progresschangedeventargs\" data-linktype=\"relative-path\">System.ComponentModel.ProgressChangedEventArgs</a> object. It may be desirable to derive your own class from <a class=\"xref\" href=\"system.componentmodel.progresschangedeventargs\" data-linktype=\"relative-path\">System.ComponentModel.ProgressChangedEventArgs</a> to provide additional state storage.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates using the Post method for reporting progress and incremental results of an asynchronous operation. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.componentmodel.asyncoperationmanager\" data-linktype=\"relative-path\">System.ComponentModel.AsyncOperationManager</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"System.ComponentModel.AsyncOperationManager#5\">    &#39; This method computes the list of prime numbers used by the\n    &#39; IsPrime method.\n    Private Function BuildPrimeNumberList( _\n        ByVal numberToTest As Integer, _\n        ByVal asyncOp As AsyncOperation) As ArrayList\n\n        Dim e As ProgressChangedEventArgs = Nothing\n        Dim primes As New ArrayList\n        Dim firstDivisor As Integer\n        Dim n As Integer = 5\n\n        &#39; Add the first prime numbers.\n        primes.Add(2)\n        primes.Add(3)\n\n        &#39; Do the work.\n        While n &lt; numberToTest And _\n            Not Me.TaskCanceled(asyncOp.UserSuppliedState)\n\n            If IsPrime(primes, n, firstDivisor) Then\n                &#39; Report to the client that you found a prime.\n                e = New CalculatePrimeProgressChangedEventArgs( _\n                    n, _\n                    CSng(n) / CSng(numberToTest) * 100, _\n                    asyncOp.UserSuppliedState)\n\n                asyncOp.Post(Me.onProgressReportDelegate, e)\n\n                primes.Add(n)\n\n                &#39; Yield the rest of this time slice.\n                Thread.Sleep(0)\n            End If\n\n            &#39; Skip even numbers.\n            n += 2\n\n        End While\n\n        Return primes\n\n    End Function\n</code></pre><pre><code class=\"lang-cs\" name=\"System.ComponentModel.AsyncOperationManager#5\">        // This method computes the list of prime numbers used by the\n        // IsPrime method.\n        private ArrayList BuildPrimeNumberList(\n            int numberToTest,\n            AsyncOperation asyncOp)\n        {\n            ProgressChangedEventArgs e = null;\n            ArrayList primes = new ArrayList();\n            int firstDivisor;\n            int n = 5;\n\n            // Add the first prime numbers.\n            primes.Add(2);\n            primes.Add(3);\n\n            // Do the work.\n            while (n &lt; numberToTest &amp;&amp; \n                   !TaskCanceled( asyncOp.UserSuppliedState ) )\n            {\n                if (IsPrime(primes, n, out firstDivisor))\n                {\n                    // Report to the client that a prime was found.\n                    e = new CalculatePrimeProgressChangedEventArgs(\n                        n,\n                        (int)((float)n / (float)numberToTest * 100),\n                        asyncOp.UserSuppliedState);\n\n                    asyncOp.Post(this.onProgressReportDelegate, e);\n\n                    primes.Add(n);\n\n                    // Yield the rest of this time slice.\n                    Thread.Sleep(0);\n                }\n\n                // Skip even numbers.\n                n += 2;\n            }\n\n            return primes;\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ComponentModel_AsyncOperation_PostOperationCompleted_System_Threading_SendOrPostCallback_System_Object_\">\r\n    \r\n            <a id=\"System_ComponentModel_AsyncOperation_PostOperationCompleted_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PostOperationCompleted(SendOrPostCallback,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Ends the lifetime of an asynchronous operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void PostOperationCompleted (System.Threading.SendOrPostCallback d, object arg);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>d</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.sendorpostcallback\" data-linktype=\"relative-path\">SendOrPostCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.threading.sendorpostcallback\" data-linktype=\"relative-path\">SendOrPostCallback</a> object that wraps the delegate to be called when the operation ends.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An argument for the delegate contained in the <code>d</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><span class=\"xref\">stem.ComponentModel.AsyncOperation.OperationCompleted*</span> has been called previously for this task.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>d</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Call the PostOperationCompleted method to end the lifetime of an asynchronous operation. After this method is called for a particular task, calls to its corresponding <a class=\"xref\" href=\"system.componentmodel.asyncoperation\" data-linktype=\"relative-path\">AsyncOperation</a> object will raise an exception.  </p>\n<p> The <code>d</code> parameter wraps the delegate you want your class to call when the task&#39;s lifetime ends due to completion, cancellation, or failure of the task. The <a class=\"xref\" href=\"system.componentmodel.asyncoperation\" data-linktype=\"relative-path\">AsyncOperation</a> object will ensure that your delegate is invoked on the thread or context appropriate for the application model. Your delegate can optionally raise an event that notifies clients that the asynchronous task&#39;s lifetime has ended.  </p>\n<p> The <code>arg</code> parameter is used to pass state information to the completion delegate <code>d</code>. You can use an <a class=\"xref\" href=\"system.componentmodel.asyncoperation\" data-linktype=\"relative-path\">AsyncOperation</a> object, or an <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs\" data-linktype=\"relative-path\">System.ComponentModel.AsyncCompletedEventArgs</a> object as the parameter value. Alternatively, if you want to provide additional state storage, you can use an instance of a class you derive from the <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs\" data-linktype=\"relative-path\">System.ComponentModel.AsyncCompletedEventArgs</a> class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates using the PostOperationCompleted method to end the lifetime of an asynchronous operation. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.componentmodel.asyncoperationmanager\" data-linktype=\"relative-path\">System.ComponentModel.AsyncOperationManager</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"System.ComponentModel.AsyncOperationManager#4\">    &#39; This method cancels a pending asynchronous operation.\n    Public Sub CancelAsync(ByVal taskId As Object)\n\n        Dim obj As Object = userStateToLifetime(taskId)\n        If (obj IsNot Nothing) Then\n\n            SyncLock userStateToLifetime.SyncRoot\n\n                userStateToLifetime.Remove(taskId)\n\n            End SyncLock\n\n        End If\n\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.ComponentModel.AsyncOperationManager#4\">        // This method cancels a pending asynchronous operation.\n        public void CancelAsync(object taskId)\n        {\n            AsyncOperation asyncOp = userStateToLifetime[taskId] as AsyncOperation;\n            if (asyncOp != null)\n            {   \n                lock (userStateToLifetime.SyncRoot)\n                {\n                    userStateToLifetime.Remove(taskId);\n                }\n            }\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.ComponentModel.AsyncOperation.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.ComponentModel.AsyncOperation.yml\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.AsyncOperation\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.AsyncOperation.Finalize\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.AsyncOperation.OperationCompleted\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.AsyncOperation.Post\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.AsyncOperation.PostOperationCompleted\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.AsyncOperation.SynchronizationContext\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.AsyncOperation.UserSuppliedState\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"70ca3347-6947-7806-559f-2d292c981c35\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Tracks the lifetime of an asynchronous operation.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.ComponentModel/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.ComponentModel.AsyncOperation\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.ComponentModel.AsyncOperation.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.ComponentModel.AsyncOperation.yml","open_to_public_contributors":true,"api_name":["System.ComponentModel.AsyncOperation","System.ComponentModel.AsyncOperation.Finalize","System.ComponentModel.AsyncOperation.OperationCompleted","System.ComponentModel.AsyncOperation.Post","System.ComponentModel.AsyncOperation.PostOperationCompleted","System.ComponentModel.AsyncOperation.SynchronizationContext","System.ComponentModel.AsyncOperation.UserSuppliedState"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.ComponentModel.AsyncOperation","System::ComponentModel::AsyncOperation","System.ComponentModel.AsyncOperation.Finalize","System::ComponentModel::AsyncOperation::Finalize","System.ComponentModel.AsyncOperation.OperationCompleted","System::ComponentModel::AsyncOperation::OperationCompleted","System.ComponentModel.AsyncOperation.Post","System::ComponentModel::AsyncOperation::Post","System.ComponentModel.AsyncOperation.PostOperationCompleted","System::ComponentModel::AsyncOperation::PostOperationCompleted","System.ComponentModel.AsyncOperation.SynchronizationContext","System::ComponentModel::AsyncOperation::SynchronizationContext","System.ComponentModel.AsyncOperation.UserSuppliedState","System::ComponentModel::AsyncOperation::UserSuppliedState"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"70ca3347-6947-7806-559f-2d292c981c35","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.ComponentModel/AsyncOperation.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"AsyncOperation class | Microsoft Docs","_op_ogTitle":"AsyncOperation class","description":"Tracks the lifetime of an asynchronous operation.\n","toc_asset_id":"_splitted/System.ComponentModel/toc.json","toc_rel":"_splitted/System.ComponentModel/toc.json","source_url":"","ms.assetid":"System.ComponentModel.AsyncOperation","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.componentmodel.asyncoperation","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.componentmodel.asyncoperation","fileRelativePath":"System.ComponentModel.AsyncOperation.html"},"themesRelativePathToOutputRoot":"_themes/"}