{"content":"\r\n<div style=\"display:none\">\r\n\t\r\n</div>\r\n\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">Timer</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Generates an event after a set interval, with an option to generate recurring events.  </p>\n<p> To browse the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#System/services/timers/system/timers/Timer.cs#897683f27faba082\" data-linktype=\"external\">Reference Source</a>.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.ComponentModel.DefaultEvent(&quot;Elapsed&quot;)]\n[System.ComponentModel.DefaultProperty(&quot;Interval&quot;)]\npublic class Timer : System.ComponentModel.Component, System.ComponentModel.ISupportInitialize</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div>\r\n  \t\t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a></span></div>\r\n  \t\t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.component\" data-linktype=\"relative-path\">System.ComponentModel.Component</a></span></div>\r\n  \t\t\t<span class=\"lang-csharp\">Timer</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_CanRaiseEvents\" data-linktype=\"relative-path\">CanRaiseEvents</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Container\" data-linktype=\"relative-path\">Container</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_DesignMode\" data-linktype=\"relative-path\">DesignMode</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Dispose\" data-linktype=\"relative-path\">Dispose()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Disposed\" data-linktype=\"relative-path\">Disposed</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Events\" data-linktype=\"relative-path\">Events</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_GetService_System_Type_\" data-linktype=\"relative-path\">GetService(Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_CreateObjRef_System_Type_\" data-linktype=\"relative-path\">CreateObjRef(Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_GetLifetimeService\" data-linktype=\"relative-path\">GetLifetimeService()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_InitializeLifetimeService\" data-linktype=\"relative-path\">InitializeLifetimeService()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_MemberwiseClone_System_Boolean_\" data-linktype=\"relative-path\">MemberwiseClone(Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<div class=\"NOTE\"><h5>Note</h5><p> To view the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#System/services/timers/system/timers/Timer.cs#897683f27faba082\" data-linktype=\"external\">Reference Source</a>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <a href=\"http://referencesource.microsoft.com/\" data-linktype=\"external\">instructions</a>.  </p>\n</div>\n<p> The Timer component is a server-based timer that raises an <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">Elapsed</a> event in your application after the number of milliseconds in the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Interval_\" data-linktype=\"relative-path\">Interval</a> property has elapsed. You can configure the Timer object to raise the event just once or repeatedly using the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_AutoReset_\" data-linktype=\"relative-path\">AutoReset</a> property. Typically, a Timer object is declared at the class level so that it stays in scope as long as it is needed. You can then handle its <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">Elapsed</a> event to provide regular processing. For example, suppose you have a critical server that must be kept running 24 hours a day, 7 days a week. You could create a service that uses a Timer object to periodically check the server and ensure that the system is up and running. If the system is not responding, the service could attempt to restart the server or notify an administrator.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> The Timer class is available in the .NET Framework only. It is not included in the .NET Standard Library and is not available on other platforms, such as .NET Core or the Universal Windows Platform. On these platforms, as well as for portability across all .NET platforms, you should use the <a class=\"xref\" href=\"system.threading.timer\" data-linktype=\"relative-path\">System.Threading.Timer</a> class instead.  </p>\n</div>\n<p> This type implements the <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <a class=\"xref\" href=\"system.idisposable#System_IDisposable_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method in a <code>try</code>/<code>catch</code> block. To dispose of it indirectly, use a language construct such as <code>using</code> (in C#) or <code>Using</code> (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface topic.  </p>\n<p> The server-based Timer class is designed for use with worker threads in a multithreaded environment. Server timers can move among threads to handle the raised <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">Elapsed</a> event, resulting in more accuracy than Windows timers in raising the event on time.  </p>\n<p> The Timer component raises the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">Elapsed</a> event, based on the value (in milliseconds) of the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Interval_\" data-linktype=\"relative-path\">Interval</a> property. You can handle this event to perform the processing you need. For example, suppose that you have an online sales application that continuously posts sales orders to a database. The service that compiles the instructions for shipping operates on a batch of orders rather than processing each order individually. You could use a Timer to start the batch processing every 30 minutes.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> The System.Timers.Timer class has the same resolution as the system clock. This means that the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">Elapsed</a> event will fire at an interval defined by the resolution of the system clock if the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Interval_\" data-linktype=\"relative-path\">Interval</a> property is less than the resolution of the system clock. For more information, see the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Interval_\" data-linktype=\"relative-path\">Interval</a> property.  </p>\n</div>\n<p> When <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_AutoReset_\" data-linktype=\"relative-path\">AutoReset</a> is set to <code>false</code>, a Timer object raises the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">Elapsed</a> event only once, after the first <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Interval_\" data-linktype=\"relative-path\">Interval</a> has elapsed. To keep raising the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">Elapsed</a> event regularly at the interval defined by the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Interval_\" data-linktype=\"relative-path\">Interval</a>, set <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_AutoReset_\" data-linktype=\"relative-path\">AutoReset</a> to <code>true</code>, which is the default value.  </p>\n<p> The Timer component catches and suppresses all exceptions thrown by event handlers for the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">Elapsed</a> event. This behavior is subject to change in future releases of the .NET Framework. Note, however, that this is not true of event handlers that execute asynchronously and include the <code>await</code> operator (in C#)  or the <code>Await</code> operator (in Visual Basic). Exceptions thrown in these event handlers are propagated back to the calling thread, as the following example illustrates. For more information on exceptions thrown in asynchronous methods, see   <a href=\"../Topic/Exception%20Handling%20(Task%20Parallel%20Library).md\" data-linktype=\"relative-path\">Exception Handling</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Timers.Timer#3\">using System;\nusing System.Threading.Tasks;\nusing System.Timers;\n\nclass Example\n{\n   static void Main()\n   {\n      Timer timer = new Timer(1000);\n      timer.Elapsed += async ( sender, e ) =&gt; await HandleTimer();\n      timer.Start();\n      Console.Write(&quot;Press any key to exit... &quot;);\n      Console.ReadKey();\n   }\n\n   private static Task HandleTimer()\n   {\n     Console.WriteLine(&quot;\\nHandler not implemented...&quot; );\n     throw new NotImplementedException();\n   }\n}\n// The example displays output like the following:\n//   Press any key to exit...\n//   Handler not implemented...\n//   \n//   Unhandled Exception: System.NotImplementedException: The method or operation is not implemented.\n//      at Example.HandleTimer()\n//      at Example.&lt;&lt;Main&gt;b__0&gt;d__2.MoveNext()\n//   --- End of stack trace from previous location where exception was thrown ---\n//      at System.Runtime.CompilerServices.AsyncMethodBuilderCore.&lt;&gt;c__DisplayClass2.&lt;ThrowAsync&gt;b__5(Object state)\n//      at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\n//      at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\n//      at System.Threading.QueueUserWorkItemCallback.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()\n//      at System.Threading.ThreadPoolWorkQueue.Dispatch()\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Timers.Timer#3\">Imports System.Threading.Tasks\nImports System.Timers\n\nPublic Module Example\n   Public Sub Main()\n      Dim timer As New Timer(1000)  \n      AddHandler timer.Elapsed, AddressOf Example.HandleTimer     \n      &#39;timer.Elapsed = Async ( sender, e ) =&gt; await HandleTimer()\n      timer.Start()\n      Console.Write(&quot;Press any key to exit... &quot;)\n      Console.ReadKey()\n   End Sub\n\n   Private Async Sub HandleTimer(sender As Object, e As EventArgs)\n      Await Task.Run(Sub()\n                        Console.WriteLine()\n                        Console.WriteLine(&quot;Handler not implemented...&quot; )\n                        Throw New NotImplementedException()\n                     End Sub)   \n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;   Press any key to exit...\n&#39;   Handler not implemented...\n&#39;   \n&#39;   Unhandled Exception: System.NotImplementedException: The method or operation is not implemented.\n&#39;      at Example._Lambda$__1()\n&#39;      at System.Threading.Tasks.Task.Execute()\n&#39;   --- End of stack trace from previous location where exception was thrown ---\n&#39;      at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n&#39;      at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n&#39;      at Example.VB$StateMachine_0_HandleTimer.MoveNext()\n&#39;   --- End of stack trace from previous location where exception was thrown ---\n&#39;      at System.Runtime.CompilerServices.AsyncMethodBuilderCore.&lt;&gt;c__DisplayClass2.&lt;ThrowAsync&gt;b__5(Object state)\n&#39;      at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\n&#39;      at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\n&#39;      at System.Threading.QueueUserWorkItemCallback.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()\n&#39;      at System.Threading.ThreadPoolWorkQueue.Dispatch()\n</code></pre><p> If the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_SynchronizingObject_\" data-linktype=\"relative-path\">SynchronizingObject</a> property is <code>null</code>, the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">Elapsed</a> event is raised on a <a class=\"xref\" href=\"system.threading.threadpool\" data-linktype=\"relative-path\">ThreadPool</a> thread. If processing of the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">Elapsed</a> event lasts longer than <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Interval_\" data-linktype=\"relative-path\">Interval</a>, the event might be raised again on another <a class=\"xref\" href=\"system.threading.threadpool\" data-linktype=\"relative-path\">ThreadPool</a> thread. In this situation, the event handler should be reentrant.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The event-handling method might run on one thread at the same time that another thread calls the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Stop_\" data-linktype=\"relative-path\">Stop</a> method or sets the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Enabled_\" data-linktype=\"relative-path\">Enabled</a> property to <code>false</code>. This might result in the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">Elapsed</a> event being raised after the timer is stopped. The example code for the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Stop_\" data-linktype=\"relative-path\">Stop</a> method shows one way to avoid this race condition.  </p>\n</div>\n<p> Even if <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_SynchronizingObject_\" data-linktype=\"relative-path\">SynchronizingObject</a> is not <code>null</code>, <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">Elapsed</a> events can occur after the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Dispose_\" data-linktype=\"relative-path\">Dispose</a> or <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Stop_\" data-linktype=\"relative-path\">Stop</a> method has been called or after the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Enabled_\" data-linktype=\"relative-path\">Enabled</a> property has been set to <code>false</code>, because the signal to raise the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">Elapsed</a> event is always queued for execution on a thread pool thread. One way to resolve this race condition is to set a flag that tells the event handler for the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">Elapsed</a> event to ignore subsequent events.  </p>\n<p> If you use the Timer class with a user interface element, such as a form or control, without placing the timer on that user interface element, assign the form or control that contains the Timer to the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_SynchronizingObject_\" data-linktype=\"relative-path\">SynchronizingObject</a> property, so that the event is marshaled to the user interface thread.  </p>\n<p> For a list of default property values for an instance of Timer, see the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer__ctor_\" data-linktype=\"relative-path\">Timer</a> constructor.  </p>\n<div class=\"TIP\"><h5>Tip</h5><p> Be aware that the .NET Framework Class Library includes four classes named <code>Timer</code>, each of which offers different functionality:  </p>\n<ul>\n<li>Timer (this topic): fires an event at regular intervals. The class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.  <ul>\n<li><a class=\"xref\" href=\"system.threading.timer\" data-linktype=\"relative-path\">System.Threading.Timer</a>: executes a single callback method on a thread pool thread at regular intervals. The callback method is defined when the timer is instantiated and cannot be changed. Like the Timer class, this class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.  </li>\n<li><a class=\"xref\" href=\"system.windows.forms.timer\" data-linktype=\"relative-path\">System.Windows.Forms.Timer</a>: a Windows Forms component that fires an event at regular intervals. The component has no user interface and is designed for use in a single-threaded environment.  </li>\n<li><a class=\"xref\" href=\"system.web.ui.timer\" data-linktype=\"relative-path\">System.Web.UI.Timer</a>: an ASP.NET component that performs asynchronous or synchronous web page postbacks at a regular interval.</li>\n</ul>\n</li>\n</ul>\n</div>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Timers_Timer__ctor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Timer()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.timers.timer\" data-linktype=\"relative-path\">Timer</a> class, and sets all the properties to their initial values.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public Timer ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The following table shows initial property values for an instance of <a class=\"xref\" href=\"system.timers.timer\" data-linktype=\"relative-path\">Timer</a>.  </p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Initial value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_AutoReset_\" data-linktype=\"relative-path\">AutoReset</a></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Enabled_\" data-linktype=\"relative-path\">Enabled</a></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Interval_\" data-linktype=\"relative-path\">Interval</a></td>\n<td>100 milliseconds</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_SynchronizingObject_\" data-linktype=\"relative-path\">SynchronizingObject</a></td>\n<td>A null reference (<code>Nothing</code> in Visual Basic).</td>\n</tr>\n</tbody>\n</table>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Timers_Timer__ctor_System_Double_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Timer(Double)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.timers.timer\" data-linktype=\"relative-path\">Timer</a> class, and sets the <span class=\"xref\">stem.Timers.Timer.Interval*</span> property to the specified number of milliseconds.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public Timer (double interval);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>interval</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The time, in milliseconds, between events. The value must be greater than zero and less than or equal to <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The value of the <code>interval</code> parameter is less than or equal to zero, or greater than <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This constructor sets the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Interval_\" data-linktype=\"relative-path\">Interval</a> property of the new timer instance, but does not enable the timer.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Timers_Timer_AutoReset\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AutoReset</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets a Boolean indicating whether the <a class=\"xref\" href=\"system.timers.timer\" data-linktype=\"relative-path\">Timer</a> should raise the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">Elapsed</a> event only once (<code>false</code>) or repeatedly (<code>true</code>).</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool AutoReset { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the <a class=\"xref\" href=\"system.timers.timer\" data-linktype=\"relative-path\">Timer</a> should raise the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">Elapsed</a> event each time the interval elapses; <code>false</code> if it should raise the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">Elapsed</a> event only once, after the first time the interval elapses. The default is <code>true</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If the <a class=\"xref\" href=\"system.timers.timer\" data-linktype=\"relative-path\">Timer</a> is already enabled when the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Start_\" data-linktype=\"relative-path\">Start</a> method is called, the interval is reset. If AutoReset is <code>false</code>, the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Start_\" data-linktype=\"relative-path\">Start</a> method must be called in order to start the count again.  </p>\n<p> Resetting the interval affects when the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">Elapsed</a> event is raised. For example, if you set the interval to 5 seconds and then set the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Enabled_\" data-linktype=\"relative-path\">Enabled</a> property to <code>true</code>, the count starts at the time <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Enabled_\" data-linktype=\"relative-path\">Enabled</a> is set. If you reset the interval to 10 seconds when the count is 3 seconds, the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">Elapsed</a> event is raised for the first time 13 seconds after the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Enabled_\" data-linktype=\"relative-path\">Enabled</a> property was set to <code>true</code>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Timers_Timer_Enabled\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Enabled</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets a value indicating whether the <a class=\"xref\" href=\"system.timers.timer\" data-linktype=\"relative-path\">Timer</a> should raise the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">Elapsed</a> event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool Enabled { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the <a class=\"xref\" href=\"system.timers.timer\" data-linktype=\"relative-path\">Timer</a> should raise the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">Elapsed</a> event; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>This property cannot be set because the timer has been disposed.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <span class=\"xref\">stem.Timers.Timer.Interval*</span> property was set to a value greater than <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a> before the timer was enabled.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Setting Enabled to <code>true</code> is the same as calling <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Start_\" data-linktype=\"relative-path\">Start</a>, while setting Enabled to <code>false</code> is the same as calling <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Stop_\" data-linktype=\"relative-path\">Stop</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The signal to raise the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">Elapsed</a> event is always queued for execution on a <a class=\"xref\" href=\"system.threading.threadpool\" data-linktype=\"relative-path\">ThreadPool</a> thread. This might result in the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">Elapsed</a> event being raised after the Enabled property is set to <code>false</code>. The code example for the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Stop_\" data-linktype=\"relative-path\">Stop</a> method shows one way to work around this race condition.  </p>\n</div>\n<p> If Enabled is set to <code>true</code> and <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_AutoReset_\" data-linktype=\"relative-path\">AutoReset</a> is set to <code>false</code>, the <a class=\"xref\" href=\"system.timers.timer\" data-linktype=\"relative-path\">Timer</a> raises the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">Elapsed</a> event only once, the first time the interval elapses.  </p>\n<p> If the interval is set after the <a class=\"xref\" href=\"system.timers.timer\" data-linktype=\"relative-path\">Timer</a> has started, the count is reset. For example, if you set the interval to 5 seconds and then set the Enabled property to <code>true</code>, the count starts at the time Enabled is set. If you reset the interval to 10 seconds when count is 3 seconds, the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">Elapsed</a> event is raised for the first time 13 seconds after Enabled was set to <code>true</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Some visual designers, such as those in Microsoft Visual Studio, set the Enabled property to <code>true</code> when inserting a new <a class=\"xref\" href=\"system.timers.timer\" data-linktype=\"relative-path\">Timer</a>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Timers_Timer_Interval\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Interval</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the interval, expressed in milliseconds, at which to raise the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">Elapsed</a> event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public double Interval { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The time, in milliseconds, between <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">Elapsed</a> events. The value must be greater than zero, and less than or equal to <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>. The default is 100 milliseconds.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The interval is less than or equal to zero.  </p>\n<p> -or-  </p>\n<p> The interval is greater than <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>, and the timer is currently enabled. (If the timer is not currently enabled, no exception is thrown until it becomes enabled.)</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>You use the Interval property to determine the frequency at which the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">Elapsed</a> event is fired. Because the <a class=\"xref\" href=\"system.timers.timer\" data-linktype=\"relative-path\">Timer</a> class depends on the system clock, it has the same resolution as the system clock. This means that the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">Elapsed</a> event will fire at an interval defined by the resolution of the system clock if the Interval property is less than the resolution of the system clock. The following example sets the Interval property to 5 milliseconds. When run on a Windows 7 system whose system clock has a resolution of approximately 15 milliseconds, the event fires approximately every 15 milliseconds rather than every 5 milliseconds.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Timers.Timer.Interval#1\">using System;\nusing System.IO;\nusing System.Collections.Generic;\nusing System.Timers;\n\npublic class Example\n{\n   private static Timer aTimer;\n   private static List&lt;String&gt; eventlog;\n   private static int nEventsFired = 0;\n   private static DateTime previousTime;\n       \n   public static void Main()\n   {\n        eventlog = new List&lt;String&gt;();\n        \n        StreamWriter sr = new StreamWriter(@&quot;.\\Interval.txt&quot;);\n        // Create a timer with a five millisecond interval.\n        aTimer = new Timer(5);\n        aTimer.Elapsed += OnTimedEvent;\n        // Hook up the Elapsed event for the timer. \n        aTimer.AutoReset = true;\n        sr.WriteLine(&quot;The timer should fire every {0} milliseconds.&quot;, \n                     aTimer.Interval);\n        aTimer.Enabled = true;\n\n        \n        Console.WriteLine(&quot;Press the Enter key to exit the program... &quot;);\n        Console.ReadLine();\n        foreach (var item in eventlog)\n           sr.WriteLine(item);\n        sr.Close();\n        Console.WriteLine(&quot;Terminating the application...&quot;);\n   }\n\n    private static void OnTimedEvent(Object source, ElapsedEventArgs e)\n    {\n        eventlog.Add(String.Format(&quot;Elapsed event at {0:HH&#39;:&#39;mm&#39;:&#39;ss.ffffff} ({1})&quot;, \n                                   e.SignalTime, \n                                   nEventsFired++ == 0 ? \n                                      0.0 : (e.SignalTime - previousTime).TotalMilliseconds));\n        previousTime = e.SignalTime;\n        if (nEventsFired == 20) {\n           Console.WriteLine(&quot;No more events will fire...&quot;);\n           aTimer.Enabled = false;\n        }\n    }\n}\n// The example writes output like the following to a file:\n//       The timer should fire every 5 milliseconds.\n//       Elapsed event at 08:42:49.370344 (0)\n//       Elapsed event at 08:42:49.385345 (15.0015)\n//       Elapsed event at 08:42:49.400347 (15.0015)\n//       Elapsed event at 08:42:49.415348 (15.0015)\n//       Elapsed event at 08:42:49.430350 (15.0015)\n//       Elapsed event at 08:42:49.445351 (15.0015)\n//       Elapsed event at 08:42:49.465353 (20.002)\n//       Elapsed event at 08:42:49.480355 (15.0015)\n//       Elapsed event at 08:42:49.495356 (15.0015)\n//       Elapsed event at 08:42:49.510358 (15.0015)\n//       Elapsed event at 08:42:49.525359 (15.0015)\n//       Elapsed event at 08:42:49.540361 (15.0015)\n//       Elapsed event at 08:42:49.555362 (15.0015)\n//       Elapsed event at 08:42:49.570364 (15.0015)\n//       Elapsed event at 08:42:49.585365 (15.0015)\n//       Elapsed event at 08:42:49.605367 (20.002)\n//       Elapsed event at 08:42:49.620369 (15.0015)\n//       Elapsed event at 08:42:49.635370 (15.0015)\n//       Elapsed event at 08:42:49.650372 (15.0015)\n//       Elapsed event at 08:42:49.665373 (15.0015)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Timers.Timer.Interval#1\">Imports System.Collections.Generic\nImports System.IO\nImports System.Timers\n\nModule Example\n   Private WithEvents aTimer As Timer\n   Private eventlog As List(Of String)\n   Private nEventsFired As Integer = 0\n   Private previousTime As Date\n\n   Public Sub Main()\n        eventlog = New List(Of String)()\n        \n        Dim sr As New StreamWriter(&quot;.\\Interval.txt&quot;)\n        &#39; Create a timer with a five millisecond interval.\n        aTimer = New Timer(5)\n        aTimer.AutoReset = True\n        sr.WriteLine(&quot;The timer should fire every {0} milliseconds.&quot;, \n                     aTimer.Interval)\n        aTimer.Enabled = True\n\n        \n        Console.WriteLine(&quot;Press the Enter key to exit the program... &quot;)\n        Console.ReadLine()\n        For Each item In eventlog\n           sr.WriteLine(item)\n        Next\n        sr.Close()\n        Console.WriteLine(&quot;Terminating the application...&quot;)\n   End Sub\n\n    Private Sub OnTimedEvent(source As Object, e As ElapsedEventArgs) _\n                             Handles aTimer.Elapsed\n        eventlog.Add(String.Format(&quot;Elapsed event at {0:HH&#39;:&#39;mm&#39;:&#39;ss.ffffff} ({1})&quot;, \n                                   e.SignalTime, \n                                   If(nEventsFired = 0, \n                                      0.0, (e.SignalTime - previousTime).TotalMilliseconds)))\n        nEventsFired += 1\n        previousTime = e.SignalTime\n        if nEventsFired = 20 Then\n           Console.WriteLine(&quot;No more events will fire...&quot;)\n           aTimer.Enabled = False\n        End If\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       The timer should fire every 5 milliseconds.\n&#39;       Elapsed event at 08:42:49.370344 (0)\n&#39;       Elapsed event at 08:42:49.385345 (15.0015)\n&#39;       Elapsed event at 08:42:49.400347 (15.0015)\n&#39;       Elapsed event at 08:42:49.415348 (15.0015)\n&#39;       Elapsed event at 08:42:49.430350 (15.0015)\n&#39;       Elapsed event at 08:42:49.445351 (15.0015)\n&#39;       Elapsed event at 08:42:49.465353 (20.002)\n&#39;       Elapsed event at 08:42:49.480355 (15.0015)\n&#39;       Elapsed event at 08:42:49.495356 (15.0015)\n&#39;       Elapsed event at 08:42:49.510358 (15.0015)\n&#39;       Elapsed event at 08:42:49.525359 (15.0015)\n&#39;       Elapsed event at 08:42:49.540361 (15.0015)\n&#39;       Elapsed event at 08:42:49.555362 (15.0015)\n&#39;       Elapsed event at 08:42:49.570364 (15.0015)\n&#39;       Elapsed event at 08:42:49.585365 (15.0015)\n&#39;       Elapsed event at 08:42:49.605367 (20.002)\n&#39;       Elapsed event at 08:42:49.620369 (15.0015)\n&#39;       Elapsed event at 08:42:49.635370 (15.0015)\n&#39;       Elapsed event at 08:42:49.650372 (15.0015)\n&#39;       Elapsed event at 08:42:49.665373 (15.0015)\n</code></pre><p> You can use the following code to determine the resolution of the system clock on the current system:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Timers.Timer.Interval#2\">using System;\nusing System.Runtime.InteropServices;\n\npublic class Example\n{\n   [DllImport(&quot;kernel32.dll&quot;, SetLastError=true)]\n   static extern bool GetSystemTimeAdjustment(out long lpTimeAdjustment,\n                                              out long lpTimeIncrement,\n                                              out bool lpTimeAdjustmentDisabled);\n   \n   public static void Main()\n   {\n      long timeAdjustment, timeIncrement = 0;\n      bool timeAdjustmentDisabled;\n      \n      if (GetSystemTimeAdjustment(out timeAdjustment, out timeIncrement, \n                                  out timeAdjustmentDisabled)) {\n         if (! timeAdjustmentDisabled)\n            Console.WriteLine(&quot;System clock resolution: {0:N3} milliseconds&quot;, \n                              timeIncrement/10000.0);\n         else\n            Console.WriteLine(&quot;Unable to determine system clock resolution.&quot;);                     \n      }\n   }      \n}\n// The example displays output like the following:\n//        System clock resolution: 15.600 milliseconds\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Timers.Timer.Interval#2\">Module Example\n   Private Declare Function GetSystemTimeAdjustment Lib &quot;Kernel32&quot; (\n                   ByRef lpTimeAdjustment As Long, ByRef lpTimeIncrement As Long,\n                   ByRef lpTimeAdjustmentDisabled As Boolean) As Boolean\n\n   Public Sub Main()\n      Dim timeAdjustment, timeIncrement As Long\n      Dim timeAdjustmentDisabled As Boolean\n      \n      If GetSystemTimeAdjustment(timeAdjustment, timeIncrement, \n                                  timeAdjustmentDisabled) Then\n         If Not timeAdjustmentDisabled Then\n            Console.WriteLine(&quot;System clock resolution: {0:N3} milliseconds&quot;, \n                              timeIncrement/10000.0)\n         Else\n            Console.WriteLine(&quot;Unable to determine system clock resolution.&quot;)                     \n         End If\n      End If\n   End Sub\nEnd Module\n&#39; The example displays output similar to the following:\n&#39;       System clock resolution: 15.625 milliseconds\n</code></pre><p> If your app requires greater resolution than that offered by the <a class=\"xref\" href=\"system.timers.timer\" data-linktype=\"relative-path\">Timer</a> class or the system clock, use the high-resolution multimedia timers; see <a href=\"http://msdn.microsoft.com/library/aa964692.aspx\" data-linktype=\"external\">How to: Use the High-Resolution Timer</a>.  </p>\n<p> If the interval is set after the <a class=\"xref\" href=\"system.timers.timer\" data-linktype=\"relative-path\">Timer</a> has started, the count is reset. For example, if you set the interval to 5 seconds and then set the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Enabled_\" data-linktype=\"relative-path\">Enabled</a> property to <code>true</code>, the count starts at the time <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Enabled_\" data-linktype=\"relative-path\">Enabled</a> is set. If you reset the interval to 10 seconds when count is 3 seconds, the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">Elapsed</a> event is raised for the first time 13 seconds after <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Enabled_\" data-linktype=\"relative-path\">Enabled</a> was set to <code>true</code>.  </p>\n<p> If <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Enabled_\" data-linktype=\"relative-path\">Enabled</a> is set to <code>true</code> and <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_AutoReset_\" data-linktype=\"relative-path\">AutoReset</a> is set to <code>false</code>, the <a class=\"xref\" href=\"system.timers.timer\" data-linktype=\"relative-path\">Timer</a> raises the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">Elapsed</a> event only once, the first time the interval elapses. <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Enabled_\" data-linktype=\"relative-path\">Enabled</a> is then set to <code>false</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Enabled_\" data-linktype=\"relative-path\">Enabled</a> and <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_AutoReset_\" data-linktype=\"relative-path\">AutoReset</a> are both set to <code>false</code>, and the timer has previously been enabled, setting the Interval property causes the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">Elapsed</a> event to be raised once, as if the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Enabled_\" data-linktype=\"relative-path\">Enabled</a> property had been set to <code>true</code>. To set the interval without raising the event, you can temporarily set the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Enabled_\" data-linktype=\"relative-path\">Enabled</a> property to <code>true</code>, set the Interval property to the desired time interval, and then immediately set the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Enabled_\" data-linktype=\"relative-path\">Enabled</a> property back to <code>false</code>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Timers_Timer_Site\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Site</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the site that binds the <a class=\"xref\" href=\"system.timers.timer\" data-linktype=\"relative-path\">Timer</a> to its container in design mode.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override System.ComponentModel.ISite Site { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.isite\" data-linktype=\"relative-path\">ISite</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.componentmodel.isite\" data-linktype=\"relative-path\">ISite</a> interface representing the site that binds the <a class=\"xref\" href=\"system.timers.timer\" data-linktype=\"relative-path\">Timer</a> object to its container.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Sites bind a <a class=\"xref\" href=\"system.componentmodel.component\" data-linktype=\"relative-path\">Component</a> to a <a class=\"xref\" href=\"system.componentmodel.container\" data-linktype=\"relative-path\">Container</a> and enable communication between them, as well as providing a way for the container to manage its components.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Timers_Timer_SynchronizingObject\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">SynchronizingObject</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the object used to marshal event-handler calls that are issued when an interval has elapsed.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.isynchronizeinvoke\" data-linktype=\"relative-path\">ISynchronizeInvoke</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.componentmodel.isynchronizeinvoke\" data-linktype=\"relative-path\">ISynchronizeInvoke</a> representing the object used to marshal the event-handler calls that are issued when an interval has elapsed. The default is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>When SynchronizingObject is <code>null</code>, the method that handles the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">Elapsed</a> event is called on a thread from the system-thread pool. For more information on system-thread pools, see <a class=\"xref\" href=\"system.threading.threadpool\" data-linktype=\"relative-path\">ThreadPool</a>.  </p>\n<p> When the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">Elapsed</a> event is handled by a visual Windows Forms component, such as a button, accessing the component through the system-thread pool might result in an exception or just might not work. Avoid this effect by setting SynchronizingObject to a Windows Forms component, which causes the method that handles the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">Elapsed</a> event to be called on the same thread that the component was created on.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Even if the SynchronizingObject property is not <code>null</code>, <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">Elapsed</a> events can occur after the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Dispose_\" data-linktype=\"relative-path\">Dispose</a> or <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Stop_\" data-linktype=\"relative-path\">Stop</a> method has been called or after the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Enabled_\" data-linktype=\"relative-path\">Enabled</a> property has been set to <code>false</code>, because the signal to raise the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">Elapsed</a> event is always queued for execution on a thread pool thread. One way to resolve this race condition is to set a flag that tells the event handler for the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">Elapsed</a> event to ignore subsequent events.  </p>\n</div>\n<p> If the <a class=\"xref\" href=\"system.timers.timer\" data-linktype=\"relative-path\">Timer</a> is used inside Visual Studio in a Windows Forms designer, SynchronizingObject is automatically set to the control that contains the <a class=\"xref\" href=\"system.timers.timer\" data-linktype=\"relative-path\">Timer</a>. For example, if you place a <a class=\"xref\" href=\"system.timers.timer\" data-linktype=\"relative-path\">Timer</a> on a designer for <code>Form1</code> (which inherits from <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a>), the SynchronizingObject property of <a class=\"xref\" href=\"system.timers.timer\" data-linktype=\"relative-path\">Timer</a> is set to the instance of <code>Form1</code>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Timers_Timer_BeginInit\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">BeginInit()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Begins the run-time initialization of a <a class=\"xref\" href=\"system.timers.timer\" data-linktype=\"relative-path\">Timer</a> that is used on a form or by another component.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void BeginInit ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Visual Studio 2005 design environment uses this method to start the initialization of a component that is used on a form or by another component. The <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_EndInit_\" data-linktype=\"relative-path\">EndInit</a> method ends the initialization. Using the BeginInit and <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_EndInit_\" data-linktype=\"relative-path\">EndInit</a> methods prevents the control from being used before it is fully initialized.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Timers_Timer_Close\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Close()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Releases the resources used by the <a class=\"xref\" href=\"system.timers.timer\" data-linktype=\"relative-path\">Timer</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Close ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Close method in turn calls the <code>Dispose</code> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Timers_Timer_Dispose_System_Boolean_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Dispose(Boolean)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Releases all resources used by the current <a class=\"xref\" href=\"system.timers.timer\" data-linktype=\"relative-path\">Timer</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected override void Dispose (bool disposing);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>disposing</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> to release both managed and unmanaged resources; <code>false</code> to release only unmanaged resources.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Timers_Timer_EndInit\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">EndInit()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Ends the run-time initialization of a <a class=\"xref\" href=\"system.timers.timer\" data-linktype=\"relative-path\">Timer</a> that is used on a form or by another component.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void EndInit ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Visual Studio 2005 design environment uses this method to end the initialization of a component that is used on a form or by another component. The <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_BeginInit_\" data-linktype=\"relative-path\">BeginInit</a> method starts the initialization. Using the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_BeginInit_\" data-linktype=\"relative-path\">BeginInit</a> and EndInit methods prevents the control from being used before it is fully initialized.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Timers_Timer_Start\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Start()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Starts raising the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">Elapsed</a> event by setting <span class=\"xref\">stem.Timers.Timer.Enabled*</span> to <code>true</code>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Start ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.timers.timer\" data-linktype=\"relative-path\">Timer</a> is created with an interval equal to or greater than <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a> + 1, or set to an interval less than zero.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If Start is called and <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_AutoReset_\" data-linktype=\"relative-path\">AutoReset</a> is set to <code>false</code>, the <a class=\"xref\" href=\"system.timers.timer\" data-linktype=\"relative-path\">Timer</a> raises the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">Elapsed</a> event only once, the first time the interval elapses. If Start is called and <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_AutoReset_\" data-linktype=\"relative-path\">AutoReset</a> is <code>true</code>, the <a class=\"xref\" href=\"system.timers.timer\" data-linktype=\"relative-path\">Timer</a> raises the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">Elapsed</a> event the first time the interval elapses and continues to raise the event on the specified interval.  </p>\n<p> You can also start timing by setting <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Enabled_\" data-linktype=\"relative-path\">Enabled</a> to <code>true</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_AutoReset_\" data-linktype=\"relative-path\">AutoReset</a> is <code>false</code>, the Start method must be called in order to start the count again.  </p>\n</div>\n<p> A call to the Start method when the timer is enabled has no effect.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Timers_Timer_Stop\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Stop()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Stops raising the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">Elapsed</a> event by setting <span class=\"xref\">stem.Timers.Timer.Enabled*</span> to <code>false</code>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Stop ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>You can also stop timing by setting <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Enabled_\" data-linktype=\"relative-path\">Enabled</a> to <code>false</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The signal to raise the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">Elapsed</a> event is always queued for execution on a <a class=\"xref\" href=\"system.threading.threadpool\" data-linktype=\"relative-path\">ThreadPool</a> thread, so the event-handling method might run on one thread at the same time that a call to the Stop method runs on another thread. This might result in the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">Elapsed</a> event being raised after the Stop method is called. The code example in the next section shows one way to work around this race condition.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Events\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Timers_Timer_Elapsed\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Elapsed</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the interval elapses.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Timers.ElapsedEventHandler Elapsed;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Elapsed event is raised if the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Enabled_\" data-linktype=\"relative-path\">Enabled</a> property is <code>true</code> and the time interval (in milliseconds) defined by the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Interval_\" data-linktype=\"relative-path\">Interval</a> property elapses. If the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_AutoReset_\" data-linktype=\"relative-path\">AutoReset</a> property is <code>true</code>, the event is raised repeatedly at an interval defined by the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Interval_\" data-linktype=\"relative-path\">Interval</a> property; otherwise, the event is raised only once, the first time the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Interval_\" data-linktype=\"relative-path\">Interval</a> value elapses.  </p>\n<p> If <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Interval_\" data-linktype=\"relative-path\">Interval</a> is set after the <a class=\"xref\" href=\"system.timers.timer\" data-linktype=\"relative-path\">Timer</a> has started, the count is reset. For example, if you set the interval to 5 seconds and then set <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Enabled_\" data-linktype=\"relative-path\">Enabled</a> to <code>true</code>, the count starts at the time <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Enabled_\" data-linktype=\"relative-path\">Enabled</a> is set. If you reset the interval to 10 seconds when count is 3 seconds, the Elapsed event is raised for the first time 13 seconds after <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Enabled_\" data-linktype=\"relative-path\">Enabled</a> was set to <code>true</code>.  </p>\n<p> If the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_SynchronizingObject_\" data-linktype=\"relative-path\">SynchronizingObject</a> property is <code>null</code>,the Elapsed event is raised on a <a class=\"xref\" href=\"system.threading.threadpool\" data-linktype=\"relative-path\">ThreadPool</a> thread. If the processing of the Elapsed event lasts longer than <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Interval_\" data-linktype=\"relative-path\">Interval</a>, the event might be raised again on another <a class=\"xref\" href=\"system.threading.threadpool\" data-linktype=\"relative-path\">ThreadPool</a> thread. In this situation, the event handler should be reentrant.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The event-handling method might run on one thread at the same time that another thread calls the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Stop_\" data-linktype=\"relative-path\">Stop</a> method or sets the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Enabled_\" data-linktype=\"relative-path\">Enabled</a> property to <code>false</code>. This might result in the Elapsed event being raised after the timer is stopped. The example code for the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Stop_\" data-linktype=\"relative-path\">Stop</a> method shows one way to avoid this race condition.  </p>\n</div>\n<p> Even if <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_SynchronizingObject_\" data-linktype=\"relative-path\">SynchronizingObject</a> is not <code>null</code>, Elapsed events can occur after the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Dispose_\" data-linktype=\"relative-path\">Dispose</a> or <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Stop_\" data-linktype=\"relative-path\">Stop</a> method has been called or after the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Enabled_\" data-linktype=\"relative-path\">Enabled</a> property has been set to <code>false</code>, because the signal to raise the Elapsed event is always queued for execution on a thread pool thread. One way to resolve this race condition is to set a flag that tells the event handler for the Elapsed event to ignore subsequent events.  </p>\n<p> The <a class=\"xref\" href=\"system.timers.timer\" data-linktype=\"relative-path\">Timer</a> component catches and suppresses all exceptions thrown by event handlers for the Elapsed event. This behavior is subject to change in future releases of the .NET Framework.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Timers.Timer.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Timers.Timer.yml\">\r\n<meta name=\"APIName\" content=\"System.Timers.Timer\">\r\n<meta name=\"APIName\" content=\"System.Timers.Timer..ctor\">\r\n<meta name=\"APIName\" content=\"System.Timers.Timer.AutoReset\">\r\n<meta name=\"APIName\" content=\"System.Timers.Timer.BeginInit\">\r\n<meta name=\"APIName\" content=\"System.Timers.Timer.Close\">\r\n<meta name=\"APIName\" content=\"System.Timers.Timer.Dispose\">\r\n<meta name=\"APIName\" content=\"System.Timers.Timer.Elapsed\">\r\n<meta name=\"APIName\" content=\"System.Timers.Timer.add_Elapsed\">\r\n<meta name=\"APIName\" content=\"System.Timers.Timer.remove_Elapsed\">\r\n<meta name=\"APIName\" content=\"System.Timers.Timer.Enabled\">\r\n<meta name=\"APIName\" content=\"System.Timers.Timer.EndInit\">\r\n<meta name=\"APIName\" content=\"System.Timers.Timer.Interval\">\r\n<meta name=\"APIName\" content=\"System.Timers.Timer.Site\">\r\n<meta name=\"APIName\" content=\"System.Timers.Timer.Start\">\r\n<meta name=\"APIName\" content=\"System.Timers.Timer.Stop\">\r\n<meta name=\"APIName\" content=\"System.Timers.Timer.SynchronizingObject\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"2df403c6-da3a-8e4f-37d7-87e1011da3f9\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Generates an event after a set interval, with an option to generate recurring events.  \n To browse the .NET Framework source code for this type, see the Reference Source.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Timers/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Timers.Timer\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Timers.Timer.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Timers.Timer.yml","open_to_public_contributors":true,"api_name":["System.Timers.Timer","System.Timers.Timer..ctor","System.Timers.Timer.AutoReset","System.Timers.Timer.BeginInit","System.Timers.Timer.Close","System.Timers.Timer.Dispose","System.Timers.Timer.Elapsed","System.Timers.Timer.add_Elapsed","System.Timers.Timer.remove_Elapsed","System.Timers.Timer.Enabled","System.Timers.Timer.EndInit","System.Timers.Timer.Interval","System.Timers.Timer.Site","System.Timers.Timer.Start","System.Timers.Timer.Stop","System.Timers.Timer.SynchronizingObject"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Timers.Timer","System::Timers::Timer","System.Timers.Timer.#ctor","System::Timers::Timer::#ctor","System.Timers.Timer.AutoReset","System::Timers::Timer::AutoReset","System.Timers.Timer.BeginInit","System::Timers::Timer::BeginInit","System.Timers.Timer.Close","System::Timers::Timer::Close","System.Timers.Timer.Dispose","System::Timers::Timer::Dispose","System.Timers.Timer.Elapsed","System::Timers::Timer::Elapsed","System.Timers.Timer.Enabled","System::Timers::Timer::Enabled","System.Timers.Timer.EndInit","System::Timers::Timer::EndInit","System.Timers.Timer.Interval","System::Timers::Timer::Interval","System.Timers.Timer.Site","System::Timers::Timer::Site","System.Timers.Timer.Start","System::Timers::Timer::Start","System.Timers.Timer.Stop","System::Timers::Timer::Stop","System.Timers.Timer.SynchronizingObject","System::Timers::Timer::SynchronizingObject"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"2df403c6-da3a-8e4f-37d7-87e1011da3f9","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Timers/Timer.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Timer class | Microsoft Docs","_op_ogTitle":"Timer class","description":"Generates an event after a set interval, with an option to generate recurring events.  \n To browse the .NET Framework source code for this type, see the Reference Source.\n","toc_asset_id":"_splitted/System.Timers/toc.json","toc_rel":"_splitted/System.Timers/toc.json","source_url":"","ms.assetid":"System.Timers.Timer","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.timers.timer","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.timers.timer","fileRelativePath":"System.Timers.Timer.html"},"themesRelativePathToOutputRoot":"_themes/"}