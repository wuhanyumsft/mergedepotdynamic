{"content":"    \r\n    <h1 id=\"System_Lazy_1\">\r\n      <span class=\"lang-csharp\">Lazy&lt;T&gt;</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides support for lazy initialization.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Diagnostics.DebuggerDisplay(&quot;ThreadSafetyMode={Mode}, IsValueCreated={IsValueCreated}, IsValueFaulted={IsValueFaulted}, Value={ValueForDebugDisplay}&quot;)]\n[System.Diagnostics.DebuggerTypeProxy(typeof(System.System_LazyDebugView`1))]\n[System.Runtime.InteropServices.ComVisible(false)]\npublic class Lazy&lt;T&gt;</code></pre>\r\n    \r\n    \r\n    \t<h2>Type Parameters</h2>\r\n    \r\n    \t<table class=\"nameValue\">\r\n    \t\t<tr>\r\n    \t\t<td>\r\n    \t\tT\r\n    \t\t</td>\r\n    \t\t<td>\r\n    \t\t<p>The type of object that is being lazily initialized.</p>\n\r\n    \t\t</td>\r\n    \t\t</tr>\r\n    \t</table>\r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Lazy&lt;T&gt;</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Use lazy initialization to defer the creation of a large or resource-intensive object, or the execution of a resource-intensive task, particularly when such creation or execution might not occur during the lifetime of the program.  </p>\n<p> To prepare for lazy initialization, you create an instance of Lazy(T). The type argument of the Lazy(T) object that you create specifies the type of the object that you want to initialize lazily. The constructor that you use to create the Lazy(T) object determines the characteristics of the initialization. Lazy initialization occurs the first time the <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1_Value_\" data-linktype=\"relative-path\">Value</a> property is accessed.  </p>\n<p> In most cases, choosing a constructor depends on your answers to two questions:  </p>\n<ul>\n<li><p>Will the lazily initialized object be accessed from more than one thread? If so, the Lazy(T) object might create it on any thread. You can use one of the simple constructors whose default behavior is to create a thread-safe Lazy(T) object, so that only one instance of the lazily instantiated object is created no matter how many threads try to access it. To create a Lazy(T) object that is not thread safe, you must use a constructor that enables you to specify no thread safety.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Making the Lazy(T) object thread safe does not protect the lazily initialized object. If multiple threads can access the lazily initialized object, you must make its properties and methods safe for multithreaded access.  </p>\n</div>\n</li>\n<li><p>Does lazy initialization require a lot of code, or does the lazily initialized object have a default constructor that does everything you need and doesn&#39;t throw exceptions? If you need to write initialization code or if exceptions need to be handled, use one of the constructors that takes a factory method. Write your initialization code in the factory method.  </p>\n<p>The following table shows which constructor to choose, based on these two factors:  </p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Object will be accessed by</th>\n<th>If no initialization code is required (default constructor), use</th>\n<th>If initialization code is required, use</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Multiple threads</td>\n<td><a class=\"xref\" href=\"system.lazy-1#System_Lazy_1__ctor\" data-linktype=\"relative-path\">Lazy&lt;T&gt;()</a></td>\n<td><a class=\"xref\" href=\"system.lazy-1#System_Lazy_1__ctor_System_Func__0__\" data-linktype=\"relative-path\">Lazy&lt;T&gt;(Func&lt;T&gt;)</a></td>\n</tr>\n<tr>\n<td>One thread</td>\n<td><a class=\"xref\" href=\"system.lazy-1#System_Lazy_1__ctor_System_Boolean_\" data-linktype=\"relative-path\">Lazy&lt;T&gt;(Boolean)</a> with <code>isThreadSafe</code> set to <code>false</code>.</td>\n<td><a class=\"xref\" href=\"system.lazy-1#System_Lazy_1__ctor_System_Func__0__System_Boolean_\" data-linktype=\"relative-path\">Lazy&lt;T&gt;(Func&lt;T&gt;,Boolean)</a> with <code>isThreadSafe</code> set to <code>false</code>.</td>\n</tr>\n</tbody>\n</table>\n<p> You can use a lambda expression to specify the factory method. This keeps all the initialization code in one place. The lambda expression captures the context, including any arguments you pass to the lazily initialized object&#39;s constructor.  </p>\n<p> <strong>Exception caching</strong> When you use factory methods, exceptions are cached. That is, if the factory method throws an exception the first time a thread tries to access the <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1_Value_\" data-linktype=\"relative-path\">Value</a> property of the Lazy(T) object, the same exception is thrown on every subsequent attempt. This ensures that every call to the <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1_Value_\" data-linktype=\"relative-path\">Value</a> property produces the same result and avoids subtle errors that might arise if different threads get different results. The Lazy(T) stands in for an actual <code>T</code> that otherwise would have been initialized at some earlier point, usually during startup. A failure at that earlier point is usually fatal. If there is a potential for a recoverable failure, we recommend that you build the retry logic into the initialization routine (in this case, the factory method), just as you would if you werenâ€™t using lazy initialization.  </p>\n<p> <strong>Alternative to locking</strong> In certain situations, you might want to avoid the overhead of the Lazy(T) object&#39;s default locking behavior. In rare situations, there might be a potential for deadlocks. In such cases, you can use the <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1__ctor_System_Threading_LazyThreadSafetyMode_\" data-linktype=\"relative-path\">Lazy&lt;T&gt;(LazyThreadSafetyMode)</a> or <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1__ctor_System_Func__0__System_Threading_LazyThreadSafetyMode_\" data-linktype=\"relative-path\">Lazy&lt;T&gt;(Func&lt;T&gt;,LazyThreadSafetyMode)</a> constructor, and specify <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">System.Threading.LazyThreadSafetyMode</a>. This enables the Lazy(T) object to create a copy of the lazily initialized object on each of several threads if the threads call the <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1_Value_\" data-linktype=\"relative-path\">Value</a> property simultaneously. The Lazy(T) object ensures that all threads use the same instance of the lazily initialized object and discards the instances that are not used. Thus, the cost of reducing the locking overhead is that your program might sometimes create and discard extra copies of an expensive object. In most cases, this is unlikely. The examples for the <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1__ctor_System_Threading_LazyThreadSafetyMode_\" data-linktype=\"relative-path\">Lazy&lt;T&gt;(LazyThreadSafetyMode)</a> and <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1__ctor_System_Func__0__System_Threading_LazyThreadSafetyMode_\" data-linktype=\"relative-path\">Lazy&lt;T&gt;(Func&lt;T&gt;,LazyThreadSafetyMode)</a> constructors demonstrate this behavior.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> When you specify <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">LazyThreadSafetyMode</a>, exceptions are never cached, even if you specify a factory method.  </p>\n</div>\n<p> <strong>Equivalent constructors</strong> In addition to enabling the use of <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">LazyThreadSafetyMode</a>, the <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1__ctor_System_Threading_LazyThreadSafetyMode_\" data-linktype=\"relative-path\">Lazy&lt;T&gt;(LazyThreadSafetyMode)</a> and <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1__ctor_System_Func__0__System_Threading_LazyThreadSafetyMode_\" data-linktype=\"relative-path\">Lazy&lt;T&gt;(Func&lt;T&gt;,LazyThreadSafetyMode)</a> constructors can duplicate the functionality of the other constructors. The following table shows the parameter values that produce equivalent behavior.  </p>\n<table>\n<thead>\n<tr>\n<th>To create a Lazy(T) object that is</th>\n<th>For constructors that have a <code>LazyThreadSafetyMode</code> <code>mode</code> parameter, set <code>mode</code> to</th>\n<th>For constructors that have a Boolean <code>isThreadSafe</code> parameter, set <code>isThreadSafe</code> to</th>\n<th>For constructors with no thread safety parameters</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Fully thread safe; uses locking to ensure that only one thread initializes the value.</td>\n<td><a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">LazyThreadSafetyMode</a></td>\n<td><code>true</code></td>\n<td>All such constructors are fully thread safe.</td>\n</tr>\n<tr>\n<td>Not thread safe.</td>\n<td><a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">LazyThreadSafetyMode</a></td>\n<td><code>false</code></td>\n<td>Not applicable.</td>\n</tr>\n<tr>\n<td>Fully thread safe; threads race to initialize the value.</td>\n<td><a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">LazyThreadSafetyMode</a></td>\n<td>Not applicable.</td>\n<td>Not applicable.</td>\n</tr>\n</tbody>\n</table>\n<p> <strong>Other capabilities</strong> For information about the use of Lazy(T) with thread-static fields, or as the backing store for properties, see <a href=\"../Topic/Lazy%20Initialization.md\" data-linktype=\"relative-path\">Lazy Initialization</a>.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Lazy_1__ctor\" data-linktype=\"self-bookmark\">Lazy&lt;T&gt;()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Lazy`1</span> class. When lazy initialization occurs, the default constructor of the target type is used.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Lazy_1__ctor_System_Boolean_\" data-linktype=\"self-bookmark\">Lazy&lt;T&gt;(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Lazy`1</span> class. When lazy initialization occurs, the default constructor of the target type and the specified initialization mode are used.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Lazy_1__ctor_System_Func__0__\" data-linktype=\"self-bookmark\">Lazy&lt;T&gt;(Func&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Lazy`1</span> class. When lazy initialization occurs, the specified initialization function is used.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Lazy_1__ctor_System_Threading_LazyThreadSafetyMode_\" data-linktype=\"self-bookmark\">Lazy&lt;T&gt;(LazyThreadSafetyMode)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Lazy`1</span> class that uses the default constructor of <code>T</code> and the specified thread-safety mode.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Lazy_1__ctor_System_Func__0__System_Boolean_\" data-linktype=\"self-bookmark\">Lazy&lt;T&gt;(Func&lt;T&gt;,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Lazy`1</span> class. When lazy initialization occurs, the specified initialization function and initialization mode are used.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Lazy_1__ctor_System_Func__0__System_Threading_LazyThreadSafetyMode_\" data-linktype=\"self-bookmark\">Lazy&lt;T&gt;(Func&lt;T&gt;,LazyThreadSafetyMode)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Lazy`1</span> class that uses the specified initialization function and thread-safety mode.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Lazy_1_IsValueCreated\" data-linktype=\"self-bookmark\">IsValueCreated</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether a value has been created for this <span class=\"xref\">stem.Lazy`1</span> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Lazy_1_Value\" data-linktype=\"self-bookmark\">Value</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the lazily initialized value of the current <span class=\"xref\">stem.Lazy`1</span> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Lazy_1_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates and returns a string representation of the <span class=\"xref\">stem.Lazy`1.Value*</span> property for this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Lazy_1__ctor\">\r\n    \r\n            <a id=\"System_Lazy_1__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Lazy&lt;T&gt;()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Lazy`1</span> class. When lazy initialization occurs, the default constructor of the target type is used.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Lazy ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An instance that is created with this constructor may be used concurrently from multiple threads.  </p>\n<p> The thread safety mode of a <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> instance that is initialized with this constructor is <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">System.Threading.LazyThreadSafetyMode</a>. The thread safety mode describes the behavior when multiple threads try to initialize the <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> instance.  </p>\n<p> A <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> instance that is created with this constructor does not cache exceptions. For more information, see the <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a>class or the <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">System.Threading.LazyThreadSafetyMode</a> enumeration.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the use of this constructor. It also illustrates the use of the <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1__ctor_System_Boolean_\" data-linktype=\"relative-path\">Lazy&lt;T&gt;(Boolean)</a> constructor (specifying <code>true</code> for <code>isThreadSafe</code>) and the <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1__ctor_System_Threading_LazyThreadSafetyMode_\" data-linktype=\"relative-path\">Lazy&lt;T&gt;(LazyThreadSafetyMode)</a> constructor (specifying <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">System.Threading.LazyThreadSafetyMode</a> for <code>mode</code>). To switch to a different constructor, just change which constructors are commented out.  </p>\n<p> The example defines a <code>LargeObject</code> class that will be initialized lazily by one of several threads. The two key lines of code in this example are the creation of the initializer and the actual initialization. At the beginning of the <code>Main</code> method, the example creates the thread-safe lazy initializer for <code>LargeObject</code>:  </p>\n<pre><code class=\"lang-vb\" name=\"System.Lazy`1.ctor#NewLazy\">        lazyLargeObject = New Lazy(Of LargeObject)()\n\n        &#39; The following lines show how to use other constructors to achieve exactly the\n        &#39; same result as the previous line: \n        &#39;lazyLargeObject = New Lazy(Of LargeObject)(True)\n        &#39;lazyLargeObject = New Lazy(Of LargeObject)(LazyThreadSafetyMode.ExecutionAndPublication)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Lazy`1.ctor#NewLazy\">        lazyLargeObject = new Lazy&lt;LargeObject&gt;();\n\n        // The following lines show how to use other constructors to achieve exactly the\n        // same result as the previous line: \n        //lazyLargeObject = new Lazy&lt;LargeObject&gt;(true);\n        //lazyLargeObject = new Lazy&lt;LargeObject&gt;(LazyThreadSafetyMode.ExecutionAndPublication);\n</code></pre><p> The example creates and starts three threads that block on a <a class=\"xref\" href=\"system.threading.manualresetevent\" data-linktype=\"relative-path\">ManualResetEvent</a> object, so that the example can release the threads all at once. The <code>ThreadProc</code> method that&#39;s used by all three threads calls the <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1_Value_\" data-linktype=\"relative-path\">Value</a> property to get the <code>LargeObject</code> instance:  </p>\n<pre><code class=\"lang-vb\" name=\"System.Lazy`1.ctor#ValueProp\">        Dim large As LargeObject = lazyLargeObject.Value\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Lazy`1.ctor#ValueProp\">        LargeObject large = lazyLargeObject.Value;\n</code></pre><p> The <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> class provides locking, so that only one thread is allowed to create the <code>LargeObject</code> instance. The example demonstrates that the other threads all get the same instance.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For simplicity, this example uses a global instance of <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a>, and all the methods are <code>static</code> (<code>Shared</code> in Visual Basic). These are not requirements for the use of lazy initialization.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"System.Lazy`1.ctor#All\">Imports System\nImports System.Threading\n\nClass Program\n    Private Shared lazyLargeObject As Lazy(Of LargeObject) = Nothing\n\n    Shared Sub Main()\n        &#39; The lazy initializer is created here. LargeObject is not created until the \n        &#39; ThreadProc method executes.\n        lazyLargeObject = New Lazy(Of LargeObject)()\n\n        &#39; The following lines show how to use other constructors to achieve exactly the\n        &#39; same result as the previous line: \n        &#39;lazyLargeObject = New Lazy(Of LargeObject)(True)\n        &#39;lazyLargeObject = New Lazy(Of LargeObject)(LazyThreadSafetyMode.ExecutionAndPublication)\n\n\n        Console.WriteLine( _\n            vbCrLf &amp; &quot;LargeObject is not created until you access the Value property of the lazy&quot; _\n            &amp; vbCrLf &amp; &quot;initializer. Press Enter to create LargeObject.&quot;)\n        Console.ReadLine()\n\n        &#39; Create and start 3 threads, passing the same blocking event to all of them.\n        Dim startingGate As New ManualResetEvent(False)\n        Dim threads() As Thread = { New Thread(AddressOf ThreadProc), \n            New Thread(AddressOf ThreadProc), New Thread(AddressOf ThreadProc) }\n        For Each t As Thread In threads\n            t.Start(startingGate)\n        Next t\n\n        &#39; Give all 3 threads time to start and wait, then release them all at once.\n        Thread.Sleep(100)\n        startingGate.Set()\n\n        &#39; Wait for all 3 threads to finish. (The order doesn&#39;t matter.)\n        For Each t As Thread In threads\n            t.Join()\n        Next t\n\n        Console.WriteLine(vbCrLf &amp; &quot;Press Enter to end the program&quot;)\n        Console.ReadLine()\n    End Sub\n\n\n    Private Shared Sub ThreadProc(ByVal state As Object)\n        &#39; Wait for the signal.\n        Dim waitForStart As ManualResetEvent = CType(state, ManualResetEvent)\n        waitForStart.WaitOne()\n\n        Dim large As LargeObject = lazyLargeObject.Value\n\n        &#39; The following line introduces an artificial delay, to exaggerate the race \n        &#39; condition.\n        Thread.Sleep(5)\n\n        &#39; IMPORTANT: Lazy initialization is thread-safe, but it doesn&#39;t protect the  \n        &#39;            object after creation. You must lock the object before accessing it,\n        &#39;            unless the type is thread safe. (LargeObject is not thread safe.)\n        SyncLock large\n            large.Data(0) = Thread.CurrentThread.ManagedThreadId\n            Console.WriteLine(&quot;Initialized by thread {0}; last used by thread {1}.&quot;, _\n                large.InitializedBy, large.Data(0))\n        End SyncLock\n    End Sub\nEnd Class\n\nClass LargeObject\n    Private initBy As Integer = 0\n    Public ReadOnly Property InitializedBy() As Integer\n        Get\n            Return initBy\n        End Get\n    End Property\n\n    Public Sub New()\n        initBy = Thread.CurrentThread.ManagedThreadId\n        Console.WriteLine(&quot;LargeObject was created on thread id {0}.&quot;, initBy)\n    End Sub\n    Public Data(100000000) As Long\nEnd Class\n\n&#39; This example produces output similar to the following:\n&#39;\n&#39;LargeObject is not created until you access the Value property of the lazy\n&#39;initializer. Press Enter to create LargeObject.\n&#39;\n&#39;LargeObject was created on thread id 3.\n&#39;Initialized by thread 3; last used by thread 5.\n&#39;Initialized by thread 3; last used by thread 4.\n&#39;Initialized by thread 3; last used by thread 3.\n&#39;\n&#39;Press Enter to end the program\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Lazy`1.ctor#All\">using System;\nusing System.Threading;\n\nclass Program\n{\n    static Lazy&lt;LargeObject&gt; lazyLargeObject = null;\n\n    static void Main()\n    {\n        // The lazy initializer is created here. LargeObject is not created until the \n        // ThreadProc method executes.\n        lazyLargeObject = new Lazy&lt;LargeObject&gt;();\n\n        // The following lines show how to use other constructors to achieve exactly the\n        // same result as the previous line: \n        //lazyLargeObject = new Lazy&lt;LargeObject&gt;(true);\n        //lazyLargeObject = new Lazy&lt;LargeObject&gt;(LazyThreadSafetyMode.ExecutionAndPublication);\n\n\n        Console.WriteLine(\n            &quot;\\r<br>LargeObject is not created until you access the Value property of the lazy&quot; +\n            &quot;\\r<br>initializer. Press Enter to create LargeObject.&quot;);\n        Console.ReadLine();\n\n        // Create and start 3 threads, passing the same blocking event to all of them.\n        ManualResetEvent startingGate = new ManualResetEvent(false);\n        Thread[] threads = { new Thread(ThreadProc), new Thread(ThreadProc), new Thread(ThreadProc) };\n        foreach (Thread t in threads)\n        {\n            t.Start(startingGate);\n        }\n\n        // Give all 3 threads time to start and wait, then release them all at once.\n        Thread.Sleep(100);\n        startingGate.Set();\n\n        // Wait for all 3 threads to finish. (The order doesn&#39;t matter.)\n        foreach (Thread t in threads)\n        {\n            t.Join();\n        }\n\n        Console.WriteLine(&quot;\\r<br>Press Enter to end the program&quot;);\n        Console.ReadLine();\n    }\n\n\n    static void ThreadProc(object state)\n    {\n        // Wait for the signal.\n        ManualResetEvent waitForStart = (ManualResetEvent) state;\n        waitForStart.WaitOne();\n\n        LargeObject large = lazyLargeObject.Value;\n\n        // The following line introduces an artificial delay, to exaggerate the race \n        // condition.\n        Thread.Sleep(5); \n\n        // IMPORTANT: Lazy initialization is thread-safe, but it doesn&#39;t protect the  \n        //            object after creation. You must lock the object before accessing it,\n        //            unless the type is thread safe. (LargeObject is not thread safe.)\n        lock(large)\n        {\n            large.Data[0] = Thread.CurrentThread.ManagedThreadId;\n            Console.WriteLine(&quot;Initialized by thread {0}; last used by thread {1}.&quot;, \n                large.InitializedBy, large.Data[0]);\n        }\n    }\n}\n\nclass LargeObject\n{\n    int initBy = 0;\n    public int InitializedBy { get { return initBy; } }\n\n    public LargeObject()\n    {\n        initBy = Thread.CurrentThread.ManagedThreadId;\n        Console.WriteLine(&quot;LargeObject was created on thread id {0}.&quot;, initBy);\n    }\n    public long[] Data = new long[100000000];\n}\n\n/* This example produces output similar to the following:\n\nLargeObject is not created until you access the Value property of the lazy\ninitializer. Press Enter to create LargeObject.\n\nLargeObject was created on thread id 4.\nInitialized by thread 4; last used by thread 3.\nInitialized by thread 4; last used by thread 4.\nInitialized by thread 4; last used by thread 5.\n\nPress Enter to end the program\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Lazy_1__ctor_System_Boolean_\">\r\n    \r\n            <a id=\"System_Lazy_1__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Lazy&lt;T&gt;(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Lazy`1</span> class. When lazy initialization occurs, the default constructor of the target type and the specified initialization mode are used.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Lazy (bool isThreadSafe);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>isThreadSafe</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to make this instance usable concurrently by multiple threads; <code>false</code> to make the instance usable by only one thread at a time.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The thread safety mode of a <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> instance that is initialized with this constructor is <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">System.Threading.LazyThreadSafetyMode</a> if <code>isThreadSafe</code> is <code>true</code>; otherwise, the mode is <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">System.Threading.LazyThreadSafetyMode</a>. The thread safety mode describes the behavior when multiple threads try to initialize the <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> instance. To specify the <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">System.Threading.LazyThreadSafetyMode</a> mode, use the <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1__ctor_System_Func__0__System_Threading_LazyThreadSafetyMode_\" data-linktype=\"relative-path\">Lazy&lt;T&gt;(Func&lt;T&gt;,LazyThreadSafetyMode)</a> or <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1__ctor_System_Threading_LazyThreadSafetyMode_\" data-linktype=\"relative-path\">Lazy&lt;T&gt;(LazyThreadSafetyMode)</a> constructor.  </p>\n<p> A <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> instance that is created with this constructor does not cache exceptions. For more information, see the<a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> class or the <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">System.Threading.LazyThreadSafetyMode</a> enumeration.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the use of this constructor to create a lazy initializer that is not thread safe, for scenarios where all access to the lazily initialized object occurs on the same thread. It also demonstrates the use of the <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1__ctor_System_Threading_LazyThreadSafetyMode_\" data-linktype=\"relative-path\">Lazy&lt;T&gt;(LazyThreadSafetyMode)</a> constructor (specifying <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">System.Threading.LazyThreadSafetyMode</a> for <code>mode</code>. To switch to a different constructor, just change which constructor is commented out.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For code that demonstrates how to use this constructor in multithreaded scenarios (specifying <code>true</code> for <code>isThreadSafe</code>), see the example for the <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1__ctor\" data-linktype=\"relative-path\">Lazy&lt;T&gt;()</a> constructor.  </p>\n</div>\n<p> The example defines a <code>LargeObject</code> class that will be initialized lazily. In the <code>Main</code> method, the example creates a <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> instance and then pauses. When you press the <strong>Enter</strong> key, the example accesses the <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1_Value_\" data-linktype=\"relative-path\">Value</a> property of the <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> instance, which causes initialization to occur. The constructor of the <code>LargeObject</code> class displays a console message.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For simplicity, this example uses a global instance of <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a>, and all the methods are <code>static</code> (<code>Shared</code> in Visual Basic). These are not requirements for the use of lazy initialization.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"System.Lazy`1.ctorBool#All\">using System;\nusing System.Threading;\n\nclass Program\n{\n    static Lazy&lt;LargeObject&gt; lazyLargeObject = null;\n\n    static void Main()\n    {\n        // The lazy initializer is created here. LargeObject is not created until the \n        // ThreadProc method executes.\n        lazyLargeObject = new Lazy&lt;LargeObject&gt;(false);\n\n        // The following lines show how to use other constructors to achieve exactly the\n        // same result as the previous line: \n        //lazyLargeObject = new Lazy&lt;LargeObject&gt;(LazyThreadSafetyMode.None);\n\n\n        Console.WriteLine(\n            &quot;\\r<br>LargeObject is not created until you access the Value property of the lazy&quot; +\n            &quot;\\r<br>initializer. Press Enter to create LargeObject.&quot;);\n        Console.ReadLine();\n\n        LargeObject large = lazyLargeObject.Value;\n\n        large.Data[11] = 89;\n\n        Console.WriteLine(&quot;\\r<br>Press Enter to end the program&quot;);\n        Console.ReadLine();\n    }\n}\n\nclass LargeObject\n{\n    public LargeObject()\n    {\n        Console.WriteLine(&quot;LargeObject was created on thread id {0}.&quot;, \n            Thread.CurrentThread.ManagedThreadId);\n    }\n    public long[] Data = new long[100000000];\n}\n\n/* This example produces output similar to the following:\n\nLargeObject is not created until you access the Value property of the lazy\ninitializer. Press Enter to create LargeObject.\n\nLargeObject was created on thread id 1.\n\nPress Enter to end the program\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Lazy`1.ctorBool#All\">Imports System\nImports System.Threading\n\nFriend Class Program\n    Private Shared lazyLargeObject As Lazy(Of LargeObject) = Nothing\n\n    Shared Sub Main()\n        &#39; The lazy initializer is created here. LargeObject is not created until the \n        &#39; ThreadProc method executes.\n        lazyLargeObject = New Lazy(Of LargeObject)(False)\n\n        &#39; The following lines show how to use other constructors to achieve exactly the\n        &#39; same result as the previous line: \n        &#39;lazyLargeObject = new Lazy&lt;LargeObject&gt;(LazyThreadSafetyMode.None);\n\n\n        Console.WriteLine( _\n            vbCrLf &amp; &quot;LargeObject is not created until you access the Value property of the lazy&quot; _\n            &amp; vbCrLf &amp; &quot;initializer. Press Enter to create LargeObject.&quot;)\n        Console.ReadLine()\n\n        Dim large As LargeObject = lazyLargeObject.Value\n\n        large.Data(11) = 89\n\n        Console.WriteLine(vbCrLf &amp; &quot;Press Enter to end the program&quot;)\n        Console.ReadLine()\n    End Sub\nEnd Class\n\nFriend Class LargeObject\n    Public Sub New()\n        Console.WriteLine(&quot;LargeObject was created on thread id {0}.&quot;, _\n            Thread.CurrentThread.ManagedThreadId)\n    End Sub\n    Public Data(100000000) As Long\nEnd Class\n\n&#39; This example produces output similar to the following:\n&#39;\n&#39;LargeObject is not created until you access the Value property of the lazy\n&#39;initializer. Press Enter to create LargeObject.\n&#39;\n&#39;LargeObject was created on thread id 1.\n&#39;\n&#39;Press Enter to end the program\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Lazy_1__ctor_System_Func__0__\">\r\n    \r\n            <a id=\"System_Lazy_1__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Lazy&lt;T&gt;(Func&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Lazy`1</span> class. When lazy initialization occurs, the specified initialization function is used.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Lazy (Func&lt;T&gt; valueFactory);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>valueFactory</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-1\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">T</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that is invoked to produce the lazily initialized value when it is needed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>valueFactory</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An instance that is created with this constructor may be used concurrently from multiple threads.  </p>\n<p> The thread safety mode of a <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> instance that is initialized with this constructor is <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">System.Threading.LazyThreadSafetyMode</a>. The thread safety mode describes the behavior when multiple threads try to initialize the <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> instance.  </p>\n<p> Exceptions that are thrown by <code>valueFactory</code> are cached. For more information, see the <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> class or the <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">System.Threading.LazyThreadSafetyMode</a> enumeration.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the use of this constructor to provide lazy initialization with exception caching. It also demonstrates the use of the <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1__ctor_System_Func__0__System_Boolean_\" data-linktype=\"relative-path\">Lazy&lt;T&gt;(Func&lt;T&gt;,Boolean)</a> constructor (specifying <code>true</code> for <code>isThreadSafe</code>) and the <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1__ctor_System_Func__0__System_Threading_LazyThreadSafetyMode_\" data-linktype=\"relative-path\">Lazy&lt;T&gt;(Func&lt;T&gt;,LazyThreadSafetyMode)</a> constructor (specifying <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">System.Threading.LazyThreadSafetyMode</a> for <code>mode</code>). To switch to a different constructor, just change which constructors are commented out.  </p>\n<p> The example defines a <code>LargeObject</code> class that will be initialized lazily by one of several threads. The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor of the <code>LargeObject</code> class, which demonstrates exception caching. At the beginning of the <code>Main</code> method, the example creates the thread-safe lazy initializer for <code>LargeObject</code>:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Lazy`1.ctorFunc#NewLazy\">        lazyLargeObject = new Lazy&lt;LargeObject&gt;(InitLargeObject);\n\n        // The following lines show how to use other constructors to achieve exactly the\n        // same result as the previous line: \n        //lazyLargeObject = new Lazy&lt;LargeObject&gt;(InitLargeObject, true);\n        //lazyLargeObject = new Lazy&lt;LargeObject&gt;(InitLargeObject, LazyThreadSafetyMode.ExecutionAndPublication);\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Lazy`1.ctorFunc#NewLazy\">        lazyLargeObject = New Lazy(Of LargeObject)(AddressOf InitLargeObject)\n\n        &#39; The following lines show how to use other constructors to achieve exactly the\n        &#39; same result as the previous line: \n        &#39;lazyLargeObject = New Lazy(Of LargeObject)(AddressOf InitLargeObject, True)\n        &#39;lazyLargeObject = New Lazy(Of LargeObject)(AddressOf InitLargeObject, LazyThreadSafetyMode.ExecutionAndPublication)\n</code></pre><p> The example creates and starts three threads. The <code>ThreadProc</code> method that&#39;s used by all three threads calls the <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1_Value_\" data-linktype=\"relative-path\">Value</a> property to get the <code>LargeObject</code> instance:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Lazy`1.ctorFunc#ValueProp\">        try\n        {\n            LargeObject large = lazyLargeObject.Value;\n\n            // IMPORTANT: Lazy initialization is thread-safe, but it doesn&#39;t protect the  \n            //            object after creation. You must lock the object before accessing it,\n            //            unless the type is thread safe. (LargeObject is not thread safe.)\n            lock(large)\n            {\n                large.Data[0] = Thread.CurrentThread.ManagedThreadId;\n                Console.WriteLine(&quot;Initialized by thread {0}; last used by thread {1}.&quot;, \n                    large.InitializedBy, large.Data[0]);\n            }\n        }\n        catch (ApplicationException aex)\n        {\n            Console.WriteLine(&quot;Exception: {0}&quot;, aex.Message);\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Lazy`1.ctorFunc#ValueProp\">        Try\n            Dim large As LargeObject = lazyLargeObject.Value\n\n            &#39; IMPORTANT: Lazy initialization is thread-safe, but it doesn&#39;t protect the  \n            &#39;            object after creation. You must lock the object before accessing it,\n            &#39;            unless the type is thread safe. (LargeObject is not thread safe.)\n            SyncLock large\n                large.Data(0) = Thread.CurrentThread.ManagedThreadId\n                Console.WriteLine(&quot;Initialized by thread {0}; last used by thread {1}.&quot;, _\n                    large.InitializedBy, large.Data(0))\n            End SyncLock\n        Catch aex As ApplicationException\n            Console.WriteLine(&quot;Exception: {0}&quot;, aex.Message)\n        End Try\n</code></pre><p> In the constructor of the <code>LargeObject</code> class, the third key section of code throws an exception the first time a <code>LargeObject</code> instance is created, but thereafter allows instance creation to occur:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Lazy`1.ctorFunc#LargeCtor\">    static int instanceCount = 0;\n    public LargeObject()\n    {\n        if (1 == Interlocked.Increment(ref instanceCount))\n        {\n            throw new ApplicationException(&quot;Throw only ONCE.&quot;);\n        }\n\n        initBy = Thread.CurrentThread.ManagedThreadId;\n        Console.WriteLine(&quot;LargeObject was created on thread id {0}.&quot;, initBy);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Lazy`1.ctorFunc#LargeCtor\">    Private Shared instanceCount As Integer = 0\n    Public Sub New()\n        If 1 = Interlocked.Increment(instanceCount) Then\n            Throw New ApplicationException(&quot;Throw only ONCE.&quot;)\n        End If\n\n        initBy = Thread.CurrentThread.ManagedThreadId\n        Console.WriteLine(&quot;LargeObject was created on thread id {0}.&quot;, initBy)\n    End Sub\n</code></pre><p> When the example is run, the first thread that tries to create an instance of <code>LargeObject</code> fails, and the exception is caught. You might expect that the next thread would successfully create an instance, but the <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> object has cached the exception. Because of this, all three threads throw the exception.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For simplicity, this example uses a global instance of <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a>, and all the methods are <code>static</code> (<code>Shared</code> in Visual Basic). These are not requirements for the use of lazy initialization.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"System.Lazy`1.ctorFunc#All\">using System;\nusing System.Threading;\n\nclass Program\n{\n    static Lazy&lt;LargeObject&gt; lazyLargeObject = null;\n\n    static LargeObject InitLargeObject()\n    {\n        return new LargeObject();\n    }\n\n\n    static void Main()\n    {\n        // The lazy initializer is created here. LargeObject is not created until the \n        // ThreadProc method executes.\n        lazyLargeObject = new Lazy&lt;LargeObject&gt;(InitLargeObject);\n\n        // The following lines show how to use other constructors to achieve exactly the\n        // same result as the previous line: \n        //lazyLargeObject = new Lazy&lt;LargeObject&gt;(InitLargeObject, true);\n        //lazyLargeObject = new Lazy&lt;LargeObject&gt;(InitLargeObject, LazyThreadSafetyMode.ExecutionAndPublication);\n\n\n        Console.WriteLine(\n            &quot;\\r<br>LargeObject is not created until you access the Value property of the lazy&quot; +\n            &quot;\\r<br>initializer. Press Enter to create LargeObject.&quot;);\n        Console.ReadLine();\n\n        // Create and start 3 threads, each of which tries to use LargeObject.\n        Thread[] threads = { new Thread(ThreadProc), new Thread(ThreadProc), new Thread(ThreadProc) };\n        foreach (Thread t in threads)\n        {\n            t.Start();\n        }\n\n        // Wait for all 3 threads to finish. (The order doesn&#39;t matter.)\n        foreach (Thread t in threads)\n        {\n            t.Join();\n        }\n\n        Console.WriteLine(&quot;\\r<br>Press Enter to end the program&quot;);\n        Console.ReadLine();\n    }\n\n\n    static void ThreadProc(object state)\n    {\n        try\n        {\n            LargeObject large = lazyLargeObject.Value;\n\n            // IMPORTANT: Lazy initialization is thread-safe, but it doesn&#39;t protect the  \n            //            object after creation. You must lock the object before accessing it,\n            //            unless the type is thread safe. (LargeObject is not thread safe.)\n            lock(large)\n            {\n                large.Data[0] = Thread.CurrentThread.ManagedThreadId;\n                Console.WriteLine(&quot;Initialized by thread {0}; last used by thread {1}.&quot;, \n                    large.InitializedBy, large.Data[0]);\n            }\n        }\n        catch (ApplicationException aex)\n        {\n            Console.WriteLine(&quot;Exception: {0}&quot;, aex.Message);\n        }\n    }\n}\n\nclass LargeObject\n{\n    int initBy = 0;\n    public int InitializedBy { get { return initBy; } }\n\n    static int instanceCount = 0;\n    public LargeObject()\n    {\n        if (1 == Interlocked.Increment(ref instanceCount))\n        {\n            throw new ApplicationException(&quot;Throw only ONCE.&quot;);\n        }\n\n        initBy = Thread.CurrentThread.ManagedThreadId;\n        Console.WriteLine(&quot;LargeObject was created on thread id {0}.&quot;, initBy);\n    }\n    public long[] Data = new long[100000000];\n}\n\n/* This example produces output similar to the following:\n\nLargeObject is not created until you access the Value property of the lazy\ninitializer. Press Enter to create LargeObject.\n\nException: Throw only ONCE.\nException: Throw only ONCE.\nException: Throw only ONCE.\n\nPress Enter to end the program\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Lazy`1.ctorFunc#All\">Imports System\nImports System.Threading\n\nFriend Class Program\n    Private Shared lazyLargeObject As Lazy(Of LargeObject) = Nothing\n\n    Private Shared Function InitLargeObject() As LargeObject\n        Return New LargeObject()\n    End Function\n\n\n    Shared Sub Main()\n        &#39; The lazy initializer is created here. LargeObject is not created until the \n        &#39; ThreadProc method executes.\n        lazyLargeObject = New Lazy(Of LargeObject)(AddressOf InitLargeObject)\n\n        &#39; The following lines show how to use other constructors to achieve exactly the\n        &#39; same result as the previous line: \n        &#39;lazyLargeObject = New Lazy(Of LargeObject)(AddressOf InitLargeObject, True)\n        &#39;lazyLargeObject = New Lazy(Of LargeObject)(AddressOf InitLargeObject, LazyThreadSafetyMode.ExecutionAndPublication)\n\n\n        Console.WriteLine(vbCrLf _\n            &amp; &quot;LargeObject is not created until you access the Value property of the lazy&quot; _\n            &amp; vbCrLf &amp; &quot;initializer. Press Enter to create LargeObject.&quot;)\n        Console.ReadLine()\n\n        &#39; Create and start 3 threads, each of which tries to use LargeObject.\n        Dim threads() As Thread = { New Thread(AddressOf ThreadProc), _\n            New Thread(AddressOf ThreadProc), New Thread(AddressOf ThreadProc) }\n        For Each t As Thread In threads\n            t.Start()\n        Next t\n\n        &#39; Wait for all 3 threads to finish. (The order doesn&#39;t matter.)\n        For Each t As Thread In threads\n            t.Join()\n        Next t\n\n        Console.WriteLine(vbCrLf &amp; &quot;Press Enter to end the program&quot;)\n        Console.ReadLine()\n    End Sub\n\n\n    Private Shared Sub ThreadProc(ByVal state As Object)\n        Try\n            Dim large As LargeObject = lazyLargeObject.Value\n\n            &#39; IMPORTANT: Lazy initialization is thread-safe, but it doesn&#39;t protect the  \n            &#39;            object after creation. You must lock the object before accessing it,\n            &#39;            unless the type is thread safe. (LargeObject is not thread safe.)\n            SyncLock large\n                large.Data(0) = Thread.CurrentThread.ManagedThreadId\n                Console.WriteLine(&quot;Initialized by thread {0}; last used by thread {1}.&quot;, _\n                    large.InitializedBy, large.Data(0))\n            End SyncLock\n        Catch aex As ApplicationException\n            Console.WriteLine(&quot;Exception: {0}&quot;, aex.Message)\n        End Try\n    End Sub\nEnd Class\n\nFriend Class LargeObject\n    Private initBy As Integer = 0\n    Public ReadOnly Property InitializedBy() As Integer\n        Get\n            Return initBy\n        End Get\n    End Property\n\n    Private Shared instanceCount As Integer = 0\n    Public Sub New()\n        If 1 = Interlocked.Increment(instanceCount) Then\n            Throw New ApplicationException(&quot;Throw only ONCE.&quot;)\n        End If\n\n        initBy = Thread.CurrentThread.ManagedThreadId\n        Console.WriteLine(&quot;LargeObject was created on thread id {0}.&quot;, initBy)\n    End Sub\n    Public Data(99999999) As Long\nEnd Class\n\n&#39; This example produces output similar to the following:\n&#39;\n&#39;LargeObject is not created until you access the Value property of the lazy\n&#39;initializer. Press Enter to create LargeObject.\n&#39;\n&#39;Exception: Throw only ONCE.\n&#39;Exception: Throw only ONCE.\n&#39;Exception: Throw only ONCE.\n&#39;\n&#39;Press Enter to end the program\n&#39; \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Lazy_1__ctor_System_Threading_LazyThreadSafetyMode_\">\r\n    \r\n            <a id=\"System_Lazy_1__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Lazy&lt;T&gt;(LazyThreadSafetyMode)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Lazy`1</span> class that uses the default constructor of <code>T</code> and the specified thread-safety mode.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Lazy (System.Threading.LazyThreadSafetyMode mode);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>mode</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">LazyThreadSafetyMode</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the enumeration values that specifies the thread safety mode.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>mode</code> contains an invalid value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The thread safety mode of a <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> instance describes the behavior when multiple threads try to initialize the <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> instance.  </p>\n<p> A <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> instance that is created with this constructor does not cache exceptions. For more information, see the <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> class or the <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">System.Threading.LazyThreadSafetyMode</a> enumeration.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the use of this constructor to create a lazy initializer that enables multiple threads to race to create an object lazily. Multiple threads might succeed in creating instances, but all threads use the instance that was created first.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For an example that demonstrates how to use this constructor in single-threaded scenarios (specifying <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">System.Threading.LazyThreadSafetyMode</a> for <code>mode</code>), see the <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1__ctor_System_Boolean_\" data-linktype=\"relative-path\">Lazy&lt;T&gt;(Boolean)</a> constructor. For an example that demonstrates how to use this constructor to provide locking instead of race conditions in multithreaded scenarios (specifying <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">System.Threading.LazyThreadSafetyMode</a> for <code>mode</code>), see the <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1__ctor\" data-linktype=\"relative-path\">Lazy&lt;T&gt;()</a> constructor.  </p>\n</div>\n<p> The example defines a <code>LargeObject</code> class that will be initialized lazily by any of several threads. The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor and finalizer of the <code>LargeObject</code> class. At the beginning of the <code>Main</code> method, the example creates the <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> object that performs lazy initialization of the <code>LargeObject</code>:  </p>\n<pre><code class=\"lang-vb\" name=\"System.Lazy`1.ctorLTSM#NewLazy\">        lazyLargeObject = New Lazy(Of LargeObject)(LazyThreadSafetyMode.PublicationOnly)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Lazy`1.ctorLTSM#NewLazy\">        lazyLargeObject = new Lazy&lt;LargeObject&gt;(LazyThreadSafetyMode.PublicationOnly);\n</code></pre><p> The example creates and starts three threads that block on a <a class=\"xref\" href=\"system.threading.manualresetevent\" data-linktype=\"relative-path\">ManualResetEvent</a> object, so that the example can release the threads all at once. In the <code>ThreadProc</code> method that&#39;s used by all three threads, calling the <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1_Value_\" data-linktype=\"relative-path\">Value</a> property creates the <code>LargeObject</code> instance:  </p>\n<pre><code class=\"lang-vb\" name=\"System.Lazy`1.ctorLTSM#ValueProp\">        Dim large As LargeObject = lazyLargeObject.Value\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Lazy`1.ctorLTSM#ValueProp\">        LargeObject large = lazyLargeObject.Value;\n</code></pre><p> Because the constructor for the <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> instance specified <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">System.Threading.LazyThreadSafetyMode</a>, all three threads are allowed to create <code>LargeObject</code> instances. The example demonstrates this by displaying console messages in the constructor and in the finalizer of the <code>LargeObject</code> class:  </p>\n<pre><code class=\"lang-vb\" name=\"System.Lazy`1.ctorLTSM#CtorFinalizer\">    Public Sub New()\n        initBy = Thread.CurrentThread.ManagedThreadId\n        Console.WriteLine(&quot;Constructor: Instance initializing on thread {0}&quot;, initBy)\n    End Sub\n\n    Protected Overrides Sub Finalize()\n        Console.WriteLine(&quot;Finalizer: Instance was initialized on {0}&quot;, initBy)\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Lazy`1.ctorLTSM#CtorFinalizer\">    public LargeObject() \n    { \n        initBy = Thread.CurrentThread.ManagedThreadId;\n        Console.WriteLine(&quot;Constructor: Instance initializing on thread {0}&quot;, initBy);\n    }\n\n    ~LargeObject()\n    {\n        Console.WriteLine(&quot;Finalizer: Instance was initialized on {0}&quot;, initBy);\n    }\n</code></pre><p> However, the <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> object ensures that only one instance is used by all threads. The output from the example shows that all three threads use the same instance, and also shows that the other two instances can be reclaimed by garbage collection.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For simplicity, this example uses a global instance of <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a>, and all the methods are <code>static</code> (<code>Shared</code> in Visual Basic). These are not requirements for the use of lazy initialization.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"System.Lazy`1.ctorLTSM#All\">Imports System\nImports System.Threading\n\nFriend Class Program\n    Private Shared lazyLargeObject As Lazy(Of LargeObject) = Nothing\n\n    Shared Sub Main()\n        &#39; The lazy initializer is created here. LargeObject is not created until the \n        &#39; ThreadProc method executes.\n        lazyLargeObject = New Lazy(Of LargeObject)(LazyThreadSafetyMode.PublicationOnly)\n\n\n        &#39; Create and start 3 threads, passing the same blocking event to all of them.\n        Dim startingGate As New ManualResetEvent(False)\n        Dim threads() As Thread = { _\n            New Thread(AddressOf ThreadProc), _\n            New Thread(AddressOf ThreadProc), _\n            New Thread(AddressOf ThreadProc) _\n        }\n        For Each t As Thread In threads\n            t.Start(startingGate)\n        Next t\n\n        &#39; Give all 3 threads time to start and wait, then release them all at once.\n        Thread.Sleep(50)\n        startingGate.Set()\n\n        &#39; Wait for all 3 threads to finish. (The order doesn&#39;t matter.)\n        For Each t As Thread In threads\n            t.Join()\n        Next t\n\n        Console.WriteLine(vbCrLf &amp; _\n            &quot;Threads are complete. Running GC.Collect() to reclaim the extra instances.&quot;)\n\n        GC.Collect()\n\n        &#39; Allow time for garbage collection, which happens asynchronously.\n        Thread.Sleep(100)\n\n        Console.WriteLine(vbCrLf &amp; _\n            &quot;Note that all three threads used the instance that was not collected.&quot;)\n        Console.WriteLine(&quot;Press Enter to end the program&quot;)\n        Console.ReadLine()\n\n    End Sub\n\n\n    Private Shared Sub ThreadProc(ByVal state As Object)\n        &#39; Wait for the signal.\n        Dim waitForStart As ManualResetEvent = CType(state, ManualResetEvent)\n        waitForStart.WaitOne()\n\n        Dim large As LargeObject = lazyLargeObject.Value\n\n        &#39; The following line introduces an artificial delay, to exaggerate the race \n        &#39; condition.\n        Thread.Sleep(5)\n\n        &#39; IMPORTANT: Lazy initialization is thread-safe, but it doesn&#39;t protect the  \n        &#39;            object after creation. You must lock the object before accessing it,\n        &#39;            unless the type is thread safe. (LargeObject is not thread safe.)\n        SyncLock large\n            large.Data(0) = Thread.CurrentThread.ManagedThreadId\n            Console.WriteLine( _\n                &quot;LargeObject was initialized by thread {0}; last used by thread {1}.&quot;, _\n                large.InitializedBy, large.Data(0))\n        End SyncLock\n    End Sub\nEnd Class\n\nFriend Class LargeObject\n    Private initBy As Integer = -1\n    Public ReadOnly Property InitializedBy() As Integer\n        Get\n            Return initBy\n        End Get\n    End Property\n\n    Public Sub New()\n        initBy = Thread.CurrentThread.ManagedThreadId\n        Console.WriteLine(&quot;Constructor: Instance initializing on thread {0}&quot;, initBy)\n    End Sub\n\n    Protected Overrides Sub Finalize()\n        Console.WriteLine(&quot;Finalizer: Instance was initialized on {0}&quot;, initBy)\n    End Sub\n\n    Public Data(100000000) As Long\nEnd Class\n\n&#39; This example produces output similar to the following:\n&#39;\n&#39;Constructor: Instance initializing on thread 3\n&#39;Constructor: Instance initializing on thread 5\n&#39;Constructor: Instance initializing on thread 4\n&#39;LargeObject was initialized by thread 3; last used by thread 4.\n&#39;LargeObject was initialized by thread 3; last used by thread 3.\n&#39;LargeObject was initialized by thread 3; last used by thread 5.\n&#39;\n&#39;Threads are complete. Running GC.Collect() to reclaim the extra instances.\n&#39;Finalizer: Instance was initialized on 5\n&#39;Finalizer: Instance was initialized on 4\n&#39;\n&#39;Note that all three threads used the instance that was not collected.\n&#39;Press Enter to end the program\n&#39;\n&#39;Finalizer: Instance was initialized on 3\n&#39; \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Lazy`1.ctorLTSM#All\">using System;\nusing System.Threading;\n\nclass Program\n{\n    static Lazy&lt;LargeObject&gt; lazyLargeObject = null;\n\n    static void Main()\n    {\n        // The lazy initializer is created here. LargeObject is not created until the \n        // ThreadProc method executes.\n        lazyLargeObject = new Lazy&lt;LargeObject&gt;(LazyThreadSafetyMode.PublicationOnly);\n\n\n        // Create and start 3 threads, passing the same blocking event to all of them.\n        ManualResetEvent startingGate = new ManualResetEvent(false);\n        Thread[] threads = { new Thread(ThreadProc), new Thread(ThreadProc), new Thread(ThreadProc) };\n        foreach (Thread t in threads)\n        {\n            t.Start(startingGate);\n        }\n\n        // Give all 3 threads time to start and wait, then release them all at once.\n        Thread.Sleep(50);\n        startingGate.Set();\n\n        // Wait for all 3 threads to finish. (The order doesn&#39;t matter.)\n        foreach (Thread t in threads)\n        {\n            t.Join();\n        }\n\n        Console.WriteLine(\n            &quot;\\r<br>Threads are complete. Running GC.Collect() to reclaim the extra instances.&quot;);\n\n        GC.Collect();\n\n        // Allow time for garbage collection, which happens asynchronously.\n        Thread.Sleep(100);\n\n        Console.WriteLine( \n            &quot;\\r<br>Note that all three threads used the instance that was not collected.&quot;);\n        Console.WriteLine(&quot;Press Enter to end the program&quot;);\n        Console.ReadLine();\n    }\n\n\n    static void ThreadProc(object state)\n    {\n        // Wait for the signal.\n        ManualResetEvent waitForStart = (ManualResetEvent) state;\n        waitForStart.WaitOne();\n\n        LargeObject large = lazyLargeObject.Value;\n\n        // The following line introduces an artificial delay, to exaggerate the race \n        // condition.\n        Thread.Sleep(5); \n\n        // IMPORTANT: Lazy initialization is thread-safe, but it doesn&#39;t protect the  \n        //            object after creation. You must lock the object before accessing it,\n        //            unless the type is thread safe. (LargeObject is not thread safe.)\n        lock(large)\n        {\n            large.Data[0] = Thread.CurrentThread.ManagedThreadId;\n            Console.WriteLine(&quot;LargeObject was initialized by thread {0}; last used by thread {1}.&quot;, \n                large.InitializedBy, large.Data[0]);\n        }\n    }\n}\n\nclass LargeObject\n{\n    int initBy = -1;\n    public int InitializedBy { get { return initBy; } }\n\n    public LargeObject() \n    { \n        initBy = Thread.CurrentThread.ManagedThreadId;\n        Console.WriteLine(&quot;Constructor: Instance initializing on thread {0}&quot;, initBy);\n    }\n\n    ~LargeObject()\n    {\n        Console.WriteLine(&quot;Finalizer: Instance was initialized on {0}&quot;, initBy);\n    }\n    \n    public long[] Data = new long[100000000];\n}\n\n/* This example produces output similar to the following:\n\nConstructor: Instance initializing on thread 4\nConstructor: Instance initializing on thread 3\nConstructor: Instance initializing on thread 5\nLargeObject was initialized by thread 4; last used by thread 4.\nLargeObject was initialized by thread 4; last used by thread 5.\nLargeObject was initialized by thread 4; last used by thread 3.\n\nThreads are complete. Running GC.Collect() to reclaim the extra instances.\nFinalizer: Instance was initialized on 3\nFinalizer: Instance was initialized on 5\n\nNote that all three threads used the instance that was not collected.\nPress Enter to end the program\n\nInstance finalizing; initialized on 4\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Lazy_1__ctor_System_Func__0__System_Boolean_\">\r\n    \r\n            <a id=\"System_Lazy_1__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Lazy&lt;T&gt;(Func&lt;T&gt;,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Lazy`1</span> class. When lazy initialization occurs, the specified initialization function and initialization mode are used.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Lazy (Func&lt;T&gt; valueFactory, bool isThreadSafe);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>valueFactory</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-1\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">T</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that is invoked to produce the lazily initialized value when it is needed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>isThreadSafe</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to make this instance usable concurrently by multiple threads; <code>false</code> to make this instance usable by only one thread at a time.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>valueFactory</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The thread safety mode of a <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> instance that is initialized with this constructor is <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">System.Threading.LazyThreadSafetyMode</a> if <code>isThreadSafe</code> is <code>true</code>; otherwise, the mode is <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">System.Threading.LazyThreadSafetyMode</a>. The thread safety mode describes the behavior when multiple threads try to initialize the <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> instance.  </p>\n<p> To specify the <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">System.Threading.LazyThreadSafetyMode</a> mode, use the <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1__ctor_System_Func__0__System_Threading_LazyThreadSafetyMode_\" data-linktype=\"relative-path\">Lazy&lt;T&gt;(Func&lt;T&gt;,LazyThreadSafetyMode)</a> or <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1__ctor_System_Threading_LazyThreadSafetyMode_\" data-linktype=\"relative-path\">Lazy&lt;T&gt;(LazyThreadSafetyMode)</a> constructor.  </p>\n<p> Exceptions that are thrown by <code>valueFactory</code> are cached. For more information, see the <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> class or the <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">System.Threading.LazyThreadSafetyMode</a> enumeration.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the use of this constructor to provide lazy initialization with exception caching, in a scenario with a single thread. It also demonstrates the use of the  <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1__ctor_\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a>constructor (specifying <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">System.Threading.LazyThreadSafetyMode</a> for <code>mode</code>). To switch to that constructor, just change which constructor is commented out.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For code that demonstrates how to use this constructor in multithreaded scenarios (specifying <code>true</code> for <code>isThreadSafe</code>), see the example for the <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1__ctor_System_Func__0__\" data-linktype=\"relative-path\">Lazy&lt;T&gt;(Func&lt;T&gt;)</a> constructor.  </p>\n</div>\n<p> The example defines a <code>LargeObject</code> class that will be initialized lazily by one of several threads. The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor of the <code>LargeObject</code> class, which demonstrates exception caching. At the beginning of the <code>Main</code> method, the example creates the thread-safe lazy initializer for <code>LargeObject</code>:  </p>\n<pre><code class=\"lang-vb\" name=\"System.Lazy`1.ctorFuncBool#NewLazy\">        lazyLargeObject = New Lazy(Of LargeObject)(AddressOf InitLargeObject, False)\n\n        &#39; The following lines show how to use other constructors to achieve exactly the\n        &#39; same result as the previous line: \n        &#39;lazyLargeObject = New Lazy(Of LargeObject)(AddressOf InitLargeObject, LazyThreadSafetyMode.None)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Lazy`1.ctorFuncBool#NewLazy\">        lazyLargeObject = new Lazy&lt;LargeObject&gt;(InitLargeObject, false);\n\n        // The following lines show how to use other constructors to achieve exactly the\n        // same result as the previous line: \n        //lazyLargeObject = new Lazy&lt;LargeObject&gt;(InitLargeObject, LazyThreadSafetyMode.None);\n</code></pre><p> In the call to the constructor, the <code>isThreadSafe</code> parameter is <code>false</code>, so the <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> is not thread safe. Because it&#39;s not thread safe, the example calls the <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1_Value_\" data-linktype=\"relative-path\">Value</a> property three times on the same thread:  </p>\n<pre><code class=\"lang-vb\" name=\"System.Lazy`1.ctorFuncBool#ValueProp\">        For i As Integer = 0 To 2\n            Try\n                Dim large As LargeObject = lazyLargeObject.Value\n                large.Data(11) = 89\n            Catch aex As ApplicationException\n                Console.WriteLine(&quot;Exception: {0}&quot;, aex.Message)\n            End Try\n        Next i\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Lazy`1.ctorFuncBool#ValueProp\">        for (int i = 0; i &lt; 3; i++)\n        {\n            try\n            {\n                LargeObject large = lazyLargeObject.Value;\n                large.Data[11] = 89;\n            }\n            catch (ApplicationException aex)\n            {\n                Console.WriteLine(&quot;Exception: {0}&quot;, aex.Message);\n            }\n        }\n</code></pre><p> In the constructor of the <code>LargeObject</code> class, the third key section of code throws an exception the first time a <code>LargeObject</code> instance is created, but thereafter allows instance creation to occur:  </p>\n<pre><code class=\"lang-vb\" name=\"System.Lazy`1.ctorFuncBool#LargeCtor\">    Private Shared pleaseThrow As Boolean = True\n    Public Sub New()\n        If pleaseThrow Then\n            pleaseThrow = False\n            Throw New ApplicationException(&quot;Throw only ONCE.&quot;)\n        End If\n\n        Console.WriteLine(&quot;LargeObject was created on thread id {0}.&quot;, _\n            Thread.CurrentThread.ManagedThreadId)\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Lazy`1.ctorFuncBool#LargeCtor\">    static bool pleaseThrow = true;\n    public LargeObject()\n    {\n        if (pleaseThrow)\n        {\n            pleaseThrow = false;\n            throw new ApplicationException(&quot;Throw only ONCE.&quot;);\n        }\n\n        Console.WriteLine(&quot;LargeObject was created on thread id {0}.&quot;, \n            Thread.CurrentThread.ManagedThreadId);\n    }\n</code></pre><p> When the example is run, the first attempt to create an instance of <code>LargeObject</code> fails, and the exception is caught. You might expect that the next attempt would succeed, but the <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> object has cached the exception. Because of this, all three attempts throw the exception.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For simplicity, this example uses a global instance of <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a>, and all the methods are <code>static</code> (<code>Shared</code> in Visual Basic). These are not requirements for the use of lazy initialization.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"System.Lazy`1.ctorFuncBool#All\">Imports System\nImports System.Threading\n\nFriend Class Program\n    Private Shared lazyLargeObject As Lazy(Of LargeObject) = Nothing\n\n    Private Shared Function InitLargeObject() As LargeObject\n        Return New LargeObject()\n    End Function\n\n\n    Shared Sub Main()\n        &#39; The lazy initializer is created here. LargeObject is not created until the \n        &#39; ThreadProc method executes.\n        lazyLargeObject = New Lazy(Of LargeObject)(AddressOf InitLargeObject, False)\n\n        &#39; The following lines show how to use other constructors to achieve exactly the\n        &#39; same result as the previous line: \n        &#39;lazyLargeObject = New Lazy(Of LargeObject)(AddressOf InitLargeObject, LazyThreadSafetyMode.None)\n\n\n        Console.WriteLine(vbCrLf _\n            &amp; &quot;LargeObject is not created until you access the Value property of the lazy&quot; _\n            &amp; vbCrLf &amp; &quot;initializer. Press Enter to create LargeObject (three tries).&quot;)\n        Console.ReadLine()\n\n        For i As Integer = 0 To 2\n            Try\n                Dim large As LargeObject = lazyLargeObject.Value\n                large.Data(11) = 89\n            Catch aex As ApplicationException\n                Console.WriteLine(&quot;Exception: {0}&quot;, aex.Message)\n            End Try\n        Next i\n\n        Console.WriteLine(vbCrLf &amp; &quot;Press Enter to end the program&quot;)\n        Console.ReadLine()\n    End Sub\nEnd Class\n\nFriend Class LargeObject\n    Private Shared pleaseThrow As Boolean = True\n    Public Sub New()\n        If pleaseThrow Then\n            pleaseThrow = False\n            Throw New ApplicationException(&quot;Throw only ONCE.&quot;)\n        End If\n\n        Console.WriteLine(&quot;LargeObject was created on thread id {0}.&quot;, _\n            Thread.CurrentThread.ManagedThreadId)\n    End Sub\n    Public Data(100000000) As Long\nEnd Class\n\n&#39; This example produces output similar to the following:\n&#39;\n&#39;LargeObject is not created until you access the Value property of the lazy\n&#39;initializer. Press Enter to create LargeObject (three tries).\n&#39;\n&#39;Exception: Throw only ONCE.\n&#39;Exception: Throw only ONCE.\n&#39;Exception: Throw only ONCE.\n&#39;\n&#39;Press Enter to end the program\n&#39; \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Lazy`1.ctorFuncBool#All\">using System;\nusing System.Threading;\n\nclass Program\n{\n    static Lazy&lt;LargeObject&gt; lazyLargeObject = null;\n\n    static LargeObject InitLargeObject()\n    {\n        return new LargeObject();\n    }\n\n\n    static void Main()\n    {\n        // The lazy initializer is created here. LargeObject is not created until the \n        // ThreadProc method executes.\n        lazyLargeObject = new Lazy&lt;LargeObject&gt;(InitLargeObject, false);\n\n        // The following lines show how to use other constructors to achieve exactly the\n        // same result as the previous line: \n        //lazyLargeObject = new Lazy&lt;LargeObject&gt;(InitLargeObject, LazyThreadSafetyMode.None);\n\n\n        Console.WriteLine(\n            &quot;\\r<br>LargeObject is not created until you access the Value property of the lazy&quot; +\n            &quot;\\r<br>initializer. Press Enter to create LargeObject (three tries).&quot;);\n        Console.ReadLine();\n\n        for (int i = 0; i &lt; 3; i++)\n        {\n            try\n            {\n                LargeObject large = lazyLargeObject.Value;\n                large.Data[11] = 89;\n            }\n            catch (ApplicationException aex)\n            {\n                Console.WriteLine(&quot;Exception: {0}&quot;, aex.Message);\n            }\n        }\n\n        Console.WriteLine(&quot;\\r<br>Press Enter to end the program&quot;);\n        Console.ReadLine();\n    }\n}\n\nclass LargeObject\n{\n    static bool pleaseThrow = true;\n    public LargeObject()\n    {\n        if (pleaseThrow)\n        {\n            pleaseThrow = false;\n            throw new ApplicationException(&quot;Throw only ONCE.&quot;);\n        }\n\n        Console.WriteLine(&quot;LargeObject was created on thread id {0}.&quot;, \n            Thread.CurrentThread.ManagedThreadId);\n    }\n    public long[] Data = new long[100000000];\n}\n\n/* This example produces output similar to the following:\n\nLargeObject is not created until you access the Value property of the lazy\ninitializer. Press Enter to create LargeObject (three tries).\n\nException: Throw only ONCE.\nException: Throw only ONCE.\nException: Throw only ONCE.\n\nPress Enter to end the program\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Lazy_1__ctor_System_Func__0__System_Threading_LazyThreadSafetyMode_\">\r\n    \r\n            <a id=\"System_Lazy_1__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Lazy&lt;T&gt;(Func&lt;T&gt;,LazyThreadSafetyMode)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Lazy`1</span> class that uses the specified initialization function and thread-safety mode.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Lazy (Func&lt;T&gt; valueFactory, System.Threading.LazyThreadSafetyMode mode);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>valueFactory</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-1\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">T</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that is invoked to produce the lazily initialized value when it is needed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>mode</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">LazyThreadSafetyMode</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the enumeration values that specifies the thread safety mode.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>mode</code> contains an invalid value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>valueFactory</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The thread safety mode of a <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> instance describes the behavior when multiple threads try to initialize the <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> instance.  </p>\n<p> Exceptions that are thrown by <code>valueFactory</code> are cached, unless <code>mode</code> is <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">LazyThreadSafetyMode</a>. For more information, see the <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> class or the <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">System.Threading.LazyThreadSafetyMode</a> enumeration.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the use of this constructor to create a lazy initializer that enables multiple threads to race to create an object lazily. Multiple threads might succeed in creating instances, but all threads use the instance that was created first. In addition, the example demonstrates that exceptions are never cached when you specify <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">LazyThreadSafetyMode</a>, even if initialization is performed by a function instead of by the default constructor of the lazily created type.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For an example that demonstrates how to use this constructor in single-threaded scenarios (specifying <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">System.Threading.LazyThreadSafetyMode</a> for <code>mode</code>), see the <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1__ctor_System_Boolean_\" data-linktype=\"relative-path\">Lazy&lt;T&gt;(Boolean)</a> constructor. For an example that demonstrates how to use this constructor to provide locking instead of race conditions in multithreaded scenarios (specifying <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">System.Threading.LazyThreadSafetyMode</a> for <code>mode</code>), see the <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1__ctor\" data-linktype=\"relative-path\">Lazy&lt;T&gt;()</a> constructor.  </p>\n</div>\n<p> The example defines a <code>LargeObject</code> class that will be initialized lazily by any of several threads. The four key sections of code illustrate the creation of the initializer, the actual initialization, the initialization function, and the constructor and finalizer of the <code>LargeObject</code> class. At the beginning of the <code>Main</code> method, the example creates the <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> object that performs lazy initialization of the <code>LargeObject</code>:  </p>\n<pre><code class=\"lang-vb\" name=\"System.Lazy`1.ctorFuncLTSM#NewLazy\">        lazyLargeObject = New Lazy(Of LargeObject)(AddressOf InitLargeObject, _\n             LazyThreadSafetyMode.PublicationOnly)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Lazy`1.ctorFuncLTSM#NewLazy\">        lazyLargeObject = new Lazy&lt;LargeObject&gt;(InitLargeObject, \n                                     LazyThreadSafetyMode.PublicationOnly);\n</code></pre><p> The lazy initializer uses a function to perform the initialization. In this case, a function is required because there is no default constructor for the <code>LargeObject</code> class.  </p>\n<p> The example creates and starts three threads that block on a <a class=\"xref\" href=\"system.threading.manualresetevent\" data-linktype=\"relative-path\">ManualResetEvent</a> object, so that the example can release the threads all at once. In the <code>ThreadProc</code> method that&#39;s used by all three threads, calling the <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1_Value_\" data-linktype=\"relative-path\">Value</a> property creates the <code>LargeObject</code> instance:  </p>\n<pre><code class=\"lang-vb\" name=\"System.Lazy`1.ctorFuncLTSM#ValueProp\">        Dim large As LargeObject = Nothing\n        Try\n            large = lazyLargeObject.Value\n\n            &#39; The following line introduces an artificial delay, to exaggerate the race \n            &#39; condition.\n            Thread.Sleep(5)\n\n            &#39; IMPORTANT: Lazy initialization is thread-safe, but it doesn&#39;t protect the  \n            &#39;            object after creation. You must lock the object before accessing it,\n            &#39;            unless the type is thread safe. (LargeObject is not thread safe.)\n            SyncLock large\n                large.Data(0) = Thread.CurrentThread.ManagedThreadId\n                Console.WriteLine( _\n                    &quot;LargeObject was initialized by thread {0}; last used by thread {1}.&quot;, _\n                    large.InitializedBy, large.Data(0))\n            End SyncLock\n        Catch ex As ApplicationException\n            Console.WriteLine(&quot;ApplicationException: {0}&quot;, ex.Message)\n        End Try\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Lazy`1.ctorFuncLTSM#ValueProp\">        LargeObject large = null;\n        try\n        {\n            large = lazyLargeObject.Value;\n\n            // The following line introduces an artificial delay, to exaggerate the race \n            // condition.\n            Thread.Sleep(5); \n\n            // IMPORTANT: Lazy initialization is thread-safe, but it doesn&#39;t protect the  \n            //            object after creation. You must lock the object before accessing it,\n            //            unless the type is thread safe. (LargeObject is not thread safe.)\n            lock(large)\n            {\n                large.Data[0] = Thread.CurrentThread.ManagedThreadId;\n                Console.WriteLine(&quot;LargeObject was initialized by thread {0}; last used by thread {1}.&quot;, \n                    large.InitializedBy, large.Data[0]);\n            }\n        }\n        catch (ApplicationException ex)\n        {\n            Console.WriteLine(&quot;ApplicationException: {0}&quot;, ex.Message);\n        }\n</code></pre><p> In the third key section of code, the lazy initialization function is called to create the <code>LargeObject</code> instance. The function throws an exception the first time it&#39;s called:  </p>\n<pre><code class=\"lang-vb\" name=\"System.Lazy`1.ctorFuncLTSM#FactoryFunc\">    Private Shared instanceCount As Integer = 0\n    Private Shared Function InitLargeObject() As LargeObject\n        If 1 = Interlocked.Increment(instanceCount) Then\n            Throw New ApplicationException( _\n                &quot;Lazy initialization function failed on thread &quot; &amp; _\n                Thread.CurrentThread.ManagedThreadId &amp; &quot;.&quot;)\n        End If\n        Return New LargeObject(Thread.CurrentThread.ManagedThreadId)\n    End Function\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Lazy`1.ctorFuncLTSM#FactoryFunc\">    static int instanceCount = 0;\n    static LargeObject InitLargeObject()\n    {\n        if (1 == Interlocked.Increment(ref instanceCount))\n        {\n            throw new ApplicationException(\n                String.Format(&quot;Lazy initialization function failed on thread {0}.&quot;,\n                Thread.CurrentThread.ManagedThreadId));\n        }\n        return new LargeObject(Thread.CurrentThread.ManagedThreadId);\n    }\n</code></pre><p> With any other <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">LazyThreadSafetyMode</a> setting, an unhandled exception in the initialization function would be cached. However, <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">LazyThreadSafetyMode</a> suppresses exception caching. The output from the example demonstrates that a subsequent attempt to initialize the object succeeds.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The exception message usually appears after messages indicating that other threads have successfully initialized the object. This is because of the delay introduced by throwing and catching the exception.  </p>\n</div>\n<p> Because the constructor for the <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> instance specified <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">System.Threading.LazyThreadSafetyMode</a>, all three threads are allowed to create <code>LargeObject</code> instances. The example demonstrates this by displaying console messages in the constructor and in the finalizer of the <code>LargeObject</code> class:  </p>\n<pre><code class=\"lang-vb\" name=\"System.Lazy`1.ctorFuncLTSM#CtorFinalizer\">    Public Sub New(ByVal initializedBy As Integer)\n        initBy = initializedBy\n        Console.WriteLine(&quot;Constructor: Instance initializing on thread {0}&quot;, initBy)\n    End Sub\n\n    Protected Overrides Sub Finalize()\n        Console.WriteLine(&quot;Finalizer: Instance was initialized on {0}&quot;, initBy)\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Lazy`1.ctorFuncLTSM#CtorFinalizer\">    public LargeObject(int initializedBy) \n    { \n        initBy = initializedBy;\n        Console.WriteLine(&quot;Constructor: Instance initializing on thread {0}&quot;, initBy);\n    }\n\n    ~LargeObject()\n    {\n        Console.WriteLine(&quot;Finalizer: Instance was initialized on {0}&quot;, initBy);\n    }\n</code></pre><p> The <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> object ensures that only one instance is used by all threads (except the thread where the initialization function throws an exception). The output from the example shows this.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For simplicity, this example uses a global instance of <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a>, and all the methods are <code>static</code> (<code>Shared</code> in Visual Basic). These are not requirements for the use of lazy initialization.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"System.Lazy`1.ctorFuncLTSM#All\">Imports System\nImports System.Threading\n\nFriend Class Program\n    Private Shared lazyLargeObject As Lazy(Of LargeObject) = Nothing\n\n    &#39; Factory function for lazy initialization.\n    Private Shared instanceCount As Integer = 0\n    Private Shared Function InitLargeObject() As LargeObject\n        If 1 = Interlocked.Increment(instanceCount) Then\n            Throw New ApplicationException( _\n                &quot;Lazy initialization function failed on thread &quot; &amp; _\n                Thread.CurrentThread.ManagedThreadId &amp; &quot;.&quot;)\n        End If\n        Return New LargeObject(Thread.CurrentThread.ManagedThreadId)\n    End Function\n\n    Shared Sub Main()\n        &#39; The lazy initializer is created here. LargeObject is not created until the \n        &#39; ThreadProc method executes.\n        lazyLargeObject = New Lazy(Of LargeObject)(AddressOf InitLargeObject, _\n             LazyThreadSafetyMode.PublicationOnly)\n\n\n        &#39; Create and start 3 threads, passing the same blocking event to all of them.\n        Dim startingGate As New ManualResetEvent(False)\n        Dim threads() As Thread = { _\n            New Thread(AddressOf ThreadProc), _\n            New Thread(AddressOf ThreadProc), _\n            New Thread(AddressOf ThreadProc) _\n        }\n        For Each t As Thread In threads\n            t.Start(startingGate)\n        Next t\n\n        &#39; Give all 3 threads time to start and wait, then release them all at once.\n        Thread.Sleep(50)\n        startingGate.Set()\n\n        &#39; Wait for all 3 threads to finish. (The order doesn&#39;t matter.)\n        For Each t As Thread In threads\n            t.Join()\n        Next t\n\n        Console.WriteLine(vbCrLf &amp; _\n            &quot;Threads are complete. Running GC.Collect() to reclaim extra instances.&quot;)\n\n        GC.Collect()\n\n        &#39; Allow time for garbage collection, which happens asynchronously.\n        Thread.Sleep(100)\n\n        Console.WriteLine(vbCrLf &amp; &quot;Note that only one instance of LargeObject was used.&quot;)\n        Console.WriteLine(&quot;Press Enter to end the program&quot;)\n        Console.ReadLine()\n    End Sub\n\n\n    Private Shared Sub ThreadProc(ByVal state As Object)\n        &#39; Wait for the signal.\n        Dim waitForStart As ManualResetEvent = CType(state, ManualResetEvent)\n        waitForStart.WaitOne()\n\n        Dim large As LargeObject = Nothing\n        Try\n            large = lazyLargeObject.Value\n\n            &#39; The following line introduces an artificial delay, to exaggerate the race \n            &#39; condition.\n            Thread.Sleep(5)\n\n            &#39; IMPORTANT: Lazy initialization is thread-safe, but it doesn&#39;t protect the  \n            &#39;            object after creation. You must lock the object before accessing it,\n            &#39;            unless the type is thread safe. (LargeObject is not thread safe.)\n            SyncLock large\n                large.Data(0) = Thread.CurrentThread.ManagedThreadId\n                Console.WriteLine( _\n                    &quot;LargeObject was initialized by thread {0}; last used by thread {1}.&quot;, _\n                    large.InitializedBy, large.Data(0))\n            End SyncLock\n        Catch ex As ApplicationException\n            Console.WriteLine(&quot;ApplicationException: {0}&quot;, ex.Message)\n        End Try\n    End Sub\nEnd Class\n\nFriend Class LargeObject\n    Private initBy As Integer = -1\n    Public ReadOnly Property InitializedBy() As Integer\n        Get\n            Return initBy\n        End Get\n    End Property\n\n    Public Sub New(ByVal initializedBy As Integer)\n        initBy = initializedBy\n        Console.WriteLine(&quot;Constructor: Instance initializing on thread {0}&quot;, initBy)\n    End Sub\n\n    Protected Overrides Sub Finalize()\n        Console.WriteLine(&quot;Finalizer: Instance was initialized on {0}&quot;, initBy)\n    End Sub\n\n    Public Data(99999999) As Long\nEnd Class\n\n&#39; This example produces output similar to the following:\n&#39;\n&#39;Constructor: Instance initializing on thread 4\n&#39;ApplicationException: Lazy initialization function failed on thread 3.\n&#39;Constructor: Instance initializing on thread 5\n&#39;LargeObject was initialized by thread 4; last used by thread 4.\n&#39;LargeObject was initialized by thread 4; last used by thread 5.\n&#39;\n&#39;Threads are complete. Running GC.Collect() to reclaim extra instances.\n&#39;Finalizer: Instance was initialized on 5\n&#39;\n&#39;Note that only one instance of LargeObject was used.\n&#39;Press Enter to end the program\n&#39;\n&#39;Finalizer: Instance was initialized on 4\n&#39; \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Lazy`1.ctorFuncLTSM#All\">using System;\nusing System.Threading;\n\nclass Program\n{\n    static Lazy&lt;LargeObject&gt; lazyLargeObject = null;\n\n    // Factory function for lazy initialization.\n    static int instanceCount = 0;\n    static LargeObject InitLargeObject()\n    {\n        if (1 == Interlocked.Increment(ref instanceCount))\n        {\n            throw new ApplicationException(\n                String.Format(&quot;Lazy initialization function failed on thread {0}.&quot;,\n                Thread.CurrentThread.ManagedThreadId));\n        }\n        return new LargeObject(Thread.CurrentThread.ManagedThreadId);\n    }\n\n    static void Main()\n    {\n        // The lazy initializer is created here. LargeObject is not created until the \n        // ThreadProc method executes.\n        lazyLargeObject = new Lazy&lt;LargeObject&gt;(InitLargeObject, \n                                     LazyThreadSafetyMode.PublicationOnly);\n\n\n        // Create and start 3 threads, passing the same blocking event to all of them.\n        ManualResetEvent startingGate = new ManualResetEvent(false);\n        Thread[] threads = { new Thread(ThreadProc), new Thread(ThreadProc), new Thread(ThreadProc) };\n        foreach (Thread t in threads)\n        {\n            t.Start(startingGate);\n        }\n\n        // Give all 3 threads time to start and wait, then release them all at once.\n        Thread.Sleep(50);\n        startingGate.Set();\n\n        // Wait for all 3 threads to finish. (The order doesn&#39;t matter.)\n        foreach (Thread t in threads)\n        {\n            t.Join();\n        }\n\n        Console.WriteLine(\n            &quot;\\r<br>Threads are complete. Running GC.Collect() to reclaim extra instances.&quot;);\n\n        GC.Collect();\n\n        // Allow time for garbage collection, which happens asynchronously.\n        Thread.Sleep(100);\n\n        Console.WriteLine(&quot;\\r<br>Note that only one instance of LargeObject was used.&quot;);\n        Console.WriteLine(&quot;Press Enter to end the program&quot;);\n        Console.ReadLine();\n    }\n\n\n    static void ThreadProc(object state)\n    {\n        // Wait for the signal.\n        ManualResetEvent waitForStart = (ManualResetEvent) state;\n        waitForStart.WaitOne();\n\n        LargeObject large = null;\n        try\n        {\n            large = lazyLargeObject.Value;\n\n            // The following line introduces an artificial delay, to exaggerate the race \n            // condition.\n            Thread.Sleep(5); \n\n            // IMPORTANT: Lazy initialization is thread-safe, but it doesn&#39;t protect the  \n            //            object after creation. You must lock the object before accessing it,\n            //            unless the type is thread safe. (LargeObject is not thread safe.)\n            lock(large)\n            {\n                large.Data[0] = Thread.CurrentThread.ManagedThreadId;\n                Console.WriteLine(&quot;LargeObject was initialized by thread {0}; last used by thread {1}.&quot;, \n                    large.InitializedBy, large.Data[0]);\n            }\n        }\n        catch (ApplicationException ex)\n        {\n            Console.WriteLine(&quot;ApplicationException: {0}&quot;, ex.Message);\n        }\n    }\n}\n\nclass LargeObject\n{\n    int initBy = -1;\n    public int InitializedBy { get { return initBy; } }\n\n    public LargeObject(int initializedBy) \n    { \n        initBy = initializedBy;\n        Console.WriteLine(&quot;Constructor: Instance initializing on thread {0}&quot;, initBy);\n    }\n\n    ~LargeObject()\n    {\n        Console.WriteLine(&quot;Finalizer: Instance was initialized on {0}&quot;, initBy);\n    }\n    \n    public long[] Data = new long[100000000];\n}\n\n/* This example produces output similar to the following:\n\nConstructor: Instance initializing on thread 5\nConstructor: Instance initializing on thread 4\nApplicationException: Lazy initialization function failed on thread 3.\nLargeObject was initialized by thread 5; last used by thread 5.\nLargeObject was initialized by thread 5; last used by thread 4.\n\nThreads are complete. Running GC.Collect() to reclaim extra instances.\nFinalizer: Instance was initialized on 4\n\nNote that only one instance of LargeObject was used.\nPress Enter to end the program\n\nFinalizer: Instance was initialized on 5\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Lazy_1_IsValueCreated\">\r\n    \r\n            <a id=\"System_Lazy_1_IsValueCreated_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsValueCreated</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether a value has been created for this <span class=\"xref\">stem.Lazy`1</span> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsValueCreated { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if a value has been created for this <span class=\"xref\">stem.Lazy`1</span> instance; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When lazy initialization occurs for a <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> instance, it may result in either a value being created or an exception being thrown. If an exception is thrown, subsequent behavior of the <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> instance depends on whether exception caching is in effect. If the <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> instance was created by using a constructor that does not specify an initialization function, then exception caching is not in effect. A subsequent attempt to initialize the <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> might succeed, and after successful initialization the IsValueCreated property returns <code>true</code>. If the <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> instance was created with an initialization function (specified by the <code>valueFactory</code> parameter of the <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> constructor), then exception caching is controlled by the thread safety mode.  </p>\n<ul>\n<li><p>If the mode is <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">System.Threading.LazyThreadSafetyMode</a> or <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">System.Threading.LazyThreadSafetyMode</a>, there is no second chance to initialize the <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> instance. If an exception occurs and is unhandled in the initialization function, that exception is cached and rethrown on subsequent accesses of the <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1_Value_\" data-linktype=\"relative-path\">Value</a>property. No value is created if an exception is thrown, so in such cases IsValueCreated returns <code>false</code>.  </p>\n</li>\n<li><p>If the mode is <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">System.Threading.LazyThreadSafetyMode</a>, the first thread that succeeds in running the initialization function (or the default constructor) creates the value for the <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> instance. If the initialization function throws an exception on one thread, other threads can still try to initialize the <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> instance. Until the value is created, the IsValueCreated property returns <code>false</code>.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Lazy_1_Value\">\r\n    \r\n            <a id=\"System_Lazy_1_Value_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Value</div>        \r\n          </div>\r\n    \r\n            <p>Gets the lazily initialized value of the current <span class=\"xref\">stem.Lazy`1</span> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public T Value { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </div>\r\n                  <p>The lazily initialized value of the current <span class=\"xref\">stem.Lazy`1</span> instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.memberaccessexception\" data-linktype=\"relative-path\">MemberAccessException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Lazy`1</span> instance is initialized to use the default constructor of the type that is being lazily initialized, and permissions to access the constructor are missing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.missingmemberexception\" data-linktype=\"relative-path\">MissingMemberException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Lazy`1</span> instance is initialized to use the default constructor of the type that is being lazily initialized, and that type does not have a public, parameterless constructor.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The initialization function tries to access Value on this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1_IsValueCreated_\" data-linktype=\"relative-path\">IsValueCreated</a> property is <code>false</code>, accessing the Value property forces initialization.  </p>\n<p> In addition to the exceptions that are listed, the Value property can throw any unhandled exception that is thrown by the factory method that was passed to the <code>valueFactory</code> parameter of the <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1__ctor_System_Func__0__\" data-linktype=\"relative-path\">Lazy&lt;T&gt;(Func&lt;T&gt;)</a>, <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1__ctor_System_Func__0__System_Threading_LazyThreadSafetyMode_\" data-linktype=\"relative-path\">Lazy&lt;T&gt;(Func&lt;T&gt;,LazyThreadSafetyMode)</a>, or <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1__ctor_System_Func__0__System_Boolean_\" data-linktype=\"relative-path\">Lazy&lt;T&gt;(Func&lt;T&gt;,Boolean)</a> constructor.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Lazy_1_ToString\">\r\n    \r\n            <a id=\"System_Lazy_1_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Creates and returns a string representation of the <span class=\"xref\">stem.Lazy`1.Value*</span> property for this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The result of calling the <span class=\"xref\">stem.Object.ToString*</span> method on the <span class=\"xref\">stem.Lazy`1.Value*</span> property for this instance, if the value has been created (that is, if the <span class=\"xref\">stem.Lazy`1.IsValueCreated*</span> property returns <code>true</code>). Otherwise, a string indicating that the value has not been created.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Lazy`1.Value*</span> property is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Calling this method does not cause initialization.  </p>\n<p> The <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1_Value_\" data-linktype=\"relative-path\">Value</a> property can be <code>null</code> after lazy initialization if the factory method that was specified for the <code>valueFactory</code> parameter of the <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1__ctor_System_Func__0__\" data-linktype=\"relative-path\">Lazy&lt;T&gt;(Func&lt;T&gt;)</a>, <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1__ctor_System_Func__0__System_Threading_LazyThreadSafetyMode_\" data-linktype=\"relative-path\">Lazy&lt;T&gt;(Func&lt;T&gt;,LazyThreadSafetyMode)</a>, or <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1__ctor_System_Func__0__System_Boolean_\" data-linktype=\"relative-path\">Lazy&lt;T&gt;(Func&lt;T&gt;,Boolean)</a> constructor returns <code>null</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Lazy-1.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Lazy-1.yml\">\r\n<meta name=\"APIName\" content=\"System.Lazy&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.Lazy&lt;T&gt;..ctor\">\r\n<meta name=\"APIName\" content=\"System.Lazy&lt;T&gt;.IsValueCreated\">\r\n<meta name=\"APIName\" content=\"System.Lazy&lt;T&gt;.ToString\">\r\n<meta name=\"APIName\" content=\"System.Lazy&lt;T&gt;.Value\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"70e21d01-ef67-159d-0847-b5a9fe182ff4\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides support for lazy initialization.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Lazy`1\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Lazy-1.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Lazy-1.yml","open_to_public_contributors":true,"api_name":["System.Lazy<T>","System.Lazy<T>..ctor","System.Lazy<T>.IsValueCreated","System.Lazy<T>.ToString","System.Lazy<T>.Value"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Lazy`1","System::Lazy`1","System.Lazy`1.#ctor","System::Lazy`1::#ctor","System.Lazy`1.IsValueCreated","System::Lazy`1::IsValueCreated","System.Lazy`1.ToString","System::Lazy`1::ToString","System.Lazy`1.Value","System::Lazy`1::Value"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"70e21d01-ef67-159d-0847-b5a9fe182ff4","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/Lazy`1.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Lazy<T> class | Microsoft Docs","_op_ogTitle":"Lazy<T> class","description":"Provides support for lazy initialization.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.Lazy`1","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.lazy-1","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.lazy-1","fileRelativePath":"System.Lazy-1.html"},"themesRelativePathToOutputRoot":"_themes/"}