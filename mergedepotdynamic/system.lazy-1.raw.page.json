{"content":"\r\n<div style=\"display:none\">\r\n\t\r\n</div>\r\n\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">Lazy&lt;T&gt;</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Provides support for lazy initialization.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Diagnostics.DebuggerDisplay(&quot;ThreadSafetyMode={Mode}, IsValueCreated={IsValueCreated}, IsValueFaulted={IsValueFaulted}, Value={ValueForDebugDisplay}&quot;)]\n[System.Diagnostics.DebuggerTypeProxy(typeof(System.System_LazyDebugView`1))]\n[System.Runtime.InteropServices.ComVisible(false)]\npublic class Lazy&lt;T&gt;</code></pre>\r\n  \r\n  \r\n  \r\n  \t\t<h3 class=\"accented\">Type Parameters</h3>\r\n  \t\t<table class=\"nameValue\">\r\n  \t\t\t<tr>\r\n  \t\t\t<td>T</td>\r\n  \t\t\t<td><p>The type of object that is being lazily initialized.</p>\n</td>\r\n  \t\t\t</tr>\r\n  \t\t</table>\r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span></div>\r\n  \t\t\t<span class=\"lang-csharp\">Lazy&lt;T&gt;</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>Use lazy initialization to defer the creation of a large or resource-intensive object, or the execution of a resource-intensive task, particularly when such creation or execution might not occur during the lifetime of the program.  </p>\n<p> To prepare for lazy initialization, you create an instance of Lazy(T). The type argument of the Lazy(T) object that you create specifies the type of the object that you want to initialize lazily. The constructor that you use to create the Lazy(T) object determines the characteristics of the initialization. Lazy initialization occurs the first time the <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1_Value_\" data-linktype=\"relative-path\">Value</a> property is accessed.  </p>\n<p> In most cases, choosing a constructor depends on your answers to two questions:  </p>\n<ul>\n<li><p>Will the lazily initialized object be accessed from more than one thread? If so, the Lazy(T) object might create it on any thread. You can use one of the simple constructors whose default behavior is to create a thread-safe Lazy(T) object, so that only one instance of the lazily instantiated object is created no matter how many threads try to access it. To create a Lazy(T) object that is not thread safe, you must use a constructor that enables you to specify no thread safety.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Making the Lazy(T) object thread safe does not protect the lazily initialized object. If multiple threads can access the lazily initialized object, you must make its properties and methods safe for multithreaded access.  </p>\n</div>\n</li>\n<li><p>Does lazy initialization require a lot of code, or does the lazily initialized object have a default constructor that does everything you need and doesn&#39;t throw exceptions? If you need to write initialization code or if exceptions need to be handled, use one of the constructors that takes a factory method. Write your initialization code in the factory method.  </p>\n<p>The following table shows which constructor to choose, based on these two factors:  </p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Object will be accessed by</th>\n<th>If no initialization code is required (default constructor), use</th>\n<th>If initialization code is required, use</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Multiple threads</td>\n<td><a class=\"xref\" href=\"system.lazy-1#System_Lazy_1__ctor\" data-linktype=\"relative-path\">Lazy&lt;T&gt;()</a></td>\n<td><a class=\"xref\" href=\"system.lazy-1#System_Lazy_1__ctor_System_Func__0__\" data-linktype=\"relative-path\">Lazy&lt;T&gt;(Func&lt;T&gt;)</a></td>\n</tr>\n<tr>\n<td>One thread</td>\n<td><a class=\"xref\" href=\"system.lazy-1#System_Lazy_1__ctor_System_Boolean_\" data-linktype=\"relative-path\">Lazy&lt;T&gt;(Boolean)</a> with <code>isThreadSafe</code> set to <code>false</code>.</td>\n<td><a class=\"xref\" href=\"system.lazy-1#System_Lazy_1__ctor_System_Func__0__System_Boolean_\" data-linktype=\"relative-path\">Lazy&lt;T&gt;(Func&lt;T&gt;,Boolean)</a> with <code>isThreadSafe</code> set to <code>false</code>.</td>\n</tr>\n</tbody>\n</table>\n<p> You can use a lambda expression to specify the factory method. This keeps all the initialization code in one place. The lambda expression captures the context, including any arguments you pass to the lazily initialized object&#39;s constructor.  </p>\n<p> <strong>Exception caching</strong> When you use factory methods, exceptions are cached. That is, if the factory method throws an exception the first time a thread tries to access the <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1_Value_\" data-linktype=\"relative-path\">Value</a> property of the Lazy(T) object, the same exception is thrown on every subsequent attempt. This ensures that every call to the <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1_Value_\" data-linktype=\"relative-path\">Value</a> property produces the same result and avoids subtle errors that might arise if different threads get different results. The Lazy(T) stands in for an actual <code>T</code> that otherwise would have been initialized at some earlier point, usually during startup. A failure at that earlier point is usually fatal. If there is a potential for a recoverable failure, we recommend that you build the retry logic into the initialization routine (in this case, the factory method), just as you would if you werenâ€™t using lazy initialization.  </p>\n<p> <strong>Alternative to locking</strong> In certain situations, you might want to avoid the overhead of the Lazy(T) object&#39;s default locking behavior. In rare situations, there might be a potential for deadlocks. In such cases, you can use the <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1__ctor_System_Threading_LazyThreadSafetyMode_\" data-linktype=\"relative-path\">Lazy&lt;T&gt;(LazyThreadSafetyMode)</a> or <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1__ctor_System_Func__0__System_Threading_LazyThreadSafetyMode_\" data-linktype=\"relative-path\">Lazy&lt;T&gt;(Func&lt;T&gt;,LazyThreadSafetyMode)</a> constructor, and specify <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">System.Threading.LazyThreadSafetyMode</a>. This enables the Lazy(T) object to create a copy of the lazily initialized object on each of several threads if the threads call the <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1_Value_\" data-linktype=\"relative-path\">Value</a> property simultaneously. The Lazy(T) object ensures that all threads use the same instance of the lazily initialized object and discards the instances that are not used. Thus, the cost of reducing the locking overhead is that your program might sometimes create and discard extra copies of an expensive object. In most cases, this is unlikely. The examples for the <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1__ctor_System_Threading_LazyThreadSafetyMode_\" data-linktype=\"relative-path\">Lazy&lt;T&gt;(LazyThreadSafetyMode)</a> and <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1__ctor_System_Func__0__System_Threading_LazyThreadSafetyMode_\" data-linktype=\"relative-path\">Lazy&lt;T&gt;(Func&lt;T&gt;,LazyThreadSafetyMode)</a> constructors demonstrate this behavior.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> When you specify <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">LazyThreadSafetyMode</a>, exceptions are never cached, even if you specify a factory method.  </p>\n</div>\n<p> <strong>Equivalent constructors</strong> In addition to enabling the use of <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">LazyThreadSafetyMode</a>, the <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1__ctor_System_Threading_LazyThreadSafetyMode_\" data-linktype=\"relative-path\">Lazy&lt;T&gt;(LazyThreadSafetyMode)</a> and <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1__ctor_System_Func__0__System_Threading_LazyThreadSafetyMode_\" data-linktype=\"relative-path\">Lazy&lt;T&gt;(Func&lt;T&gt;,LazyThreadSafetyMode)</a> constructors can duplicate the functionality of the other constructors. The following table shows the parameter values that produce equivalent behavior.  </p>\n<table>\n<thead>\n<tr>\n<th>To create a Lazy(T) object that is</th>\n<th>For constructors that have a <code>LazyThreadSafetyMode</code> <code>mode</code> parameter, set <code>mode</code> to</th>\n<th>For constructors that have a Boolean <code>isThreadSafe</code> parameter, set <code>isThreadSafe</code> to</th>\n<th>For constructors with no thread safety parameters</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Fully thread safe; uses locking to ensure that only one thread initializes the value.</td>\n<td><a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">LazyThreadSafetyMode</a></td>\n<td><code>true</code></td>\n<td>All such constructors are fully thread safe.</td>\n</tr>\n<tr>\n<td>Not thread safe.</td>\n<td><a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">LazyThreadSafetyMode</a></td>\n<td><code>false</code></td>\n<td>Not applicable.</td>\n</tr>\n<tr>\n<td>Fully thread safe; threads race to initialize the value.</td>\n<td><a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">LazyThreadSafetyMode</a></td>\n<td>Not applicable.</td>\n<td>Not applicable.</td>\n</tr>\n</tbody>\n</table>\n<p> <strong>Other capabilities</strong> For information about the use of Lazy(T) with thread-static fields, or as the backing store for properties, see <a href=\"../Topic/Lazy%20Initialization.md\" data-linktype=\"relative-path\">Lazy Initialization</a>.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Lazy_1__ctor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Lazy&lt;T&gt;()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <span class=\"xref\">stem.Lazy`1</span> class. When lazy initialization occurs, the default constructor of the target type is used.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public Lazy ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>An instance that is created with this constructor may be used concurrently from multiple threads.  </p>\n<p> The thread safety mode of a <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> instance that is initialized with this constructor is <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">System.Threading.LazyThreadSafetyMode</a>. The thread safety mode describes the behavior when multiple threads try to initialize the <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> instance.  </p>\n<p> A <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> instance that is created with this constructor does not cache exceptions. For more information, see the <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a>class or the <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">System.Threading.LazyThreadSafetyMode</a> enumeration.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Lazy_1__ctor_System_Boolean_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Lazy&lt;T&gt;(Boolean)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <span class=\"xref\">stem.Lazy`1</span> class. When lazy initialization occurs, the default constructor of the target type and the specified initialization mode are used.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public Lazy (bool isThreadSafe);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>isThreadSafe</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> to make this instance usable concurrently by multiple threads; <code>false</code> to make the instance usable by only one thread at a time.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The thread safety mode of a <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> instance that is initialized with this constructor is <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">System.Threading.LazyThreadSafetyMode</a> if <code>isThreadSafe</code> is <code>true</code>; otherwise, the mode is <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">System.Threading.LazyThreadSafetyMode</a>. The thread safety mode describes the behavior when multiple threads try to initialize the <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> instance. To specify the <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">System.Threading.LazyThreadSafetyMode</a> mode, use the <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1__ctor_System_Func__0__System_Threading_LazyThreadSafetyMode_\" data-linktype=\"relative-path\">Lazy&lt;T&gt;(Func&lt;T&gt;,LazyThreadSafetyMode)</a> or <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1__ctor_System_Threading_LazyThreadSafetyMode_\" data-linktype=\"relative-path\">Lazy&lt;T&gt;(LazyThreadSafetyMode)</a> constructor.  </p>\n<p> A <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> instance that is created with this constructor does not cache exceptions. For more information, see the<a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> class or the <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">System.Threading.LazyThreadSafetyMode</a> enumeration.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Lazy_1__ctor_System_Func__0__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Lazy&lt;T&gt;(Func&lt;T&gt;)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <span class=\"xref\">stem.Lazy`1</span> class. When lazy initialization occurs, the specified initialization function is used.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public Lazy (Func&lt;T&gt; valueFactory);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>valueFactory</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-1\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">T</span>&gt;</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The delegate that is invoked to produce the lazily initialized value when it is needed.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>valueFactory</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>An instance that is created with this constructor may be used concurrently from multiple threads.  </p>\n<p> The thread safety mode of a <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> instance that is initialized with this constructor is <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">System.Threading.LazyThreadSafetyMode</a>. The thread safety mode describes the behavior when multiple threads try to initialize the <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> instance.  </p>\n<p> Exceptions that are thrown by <code>valueFactory</code> are cached. For more information, see the <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> class or the <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">System.Threading.LazyThreadSafetyMode</a> enumeration.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Lazy_1__ctor_System_Threading_LazyThreadSafetyMode_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Lazy&lt;T&gt;(LazyThreadSafetyMode)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <span class=\"xref\">stem.Lazy`1</span> class that uses the default constructor of <code>T</code> and the specified thread-safety mode.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public Lazy (System.Threading.LazyThreadSafetyMode mode);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>mode</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">LazyThreadSafetyMode</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>One of the enumeration values that specifies the thread safety mode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>mode</code> contains an invalid value.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The thread safety mode of a <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> instance describes the behavior when multiple threads try to initialize the <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> instance.  </p>\n<p> A <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> instance that is created with this constructor does not cache exceptions. For more information, see the <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> class or the <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">System.Threading.LazyThreadSafetyMode</a> enumeration.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Lazy_1__ctor_System_Func__0__System_Boolean_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Lazy&lt;T&gt;(Func&lt;T&gt;,Boolean)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <span class=\"xref\">stem.Lazy`1</span> class. When lazy initialization occurs, the specified initialization function and initialization mode are used.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public Lazy (Func&lt;T&gt; valueFactory, bool isThreadSafe);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>valueFactory</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-1\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">T</span>&gt;</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The delegate that is invoked to produce the lazily initialized value when it is needed.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>isThreadSafe</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> to make this instance usable concurrently by multiple threads; <code>false</code> to make this instance usable by only one thread at a time.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>valueFactory</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The thread safety mode of a <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> instance that is initialized with this constructor is <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">System.Threading.LazyThreadSafetyMode</a> if <code>isThreadSafe</code> is <code>true</code>; otherwise, the mode is <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">System.Threading.LazyThreadSafetyMode</a>. The thread safety mode describes the behavior when multiple threads try to initialize the <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> instance.  </p>\n<p> To specify the <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">System.Threading.LazyThreadSafetyMode</a> mode, use the <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1__ctor_System_Func__0__System_Threading_LazyThreadSafetyMode_\" data-linktype=\"relative-path\">Lazy&lt;T&gt;(Func&lt;T&gt;,LazyThreadSafetyMode)</a> or <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1__ctor_System_Threading_LazyThreadSafetyMode_\" data-linktype=\"relative-path\">Lazy&lt;T&gt;(LazyThreadSafetyMode)</a> constructor.  </p>\n<p> Exceptions that are thrown by <code>valueFactory</code> are cached. For more information, see the <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> class or the <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">System.Threading.LazyThreadSafetyMode</a> enumeration.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Lazy_1__ctor_System_Func__0__System_Threading_LazyThreadSafetyMode_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Lazy&lt;T&gt;(Func&lt;T&gt;,LazyThreadSafetyMode)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <span class=\"xref\">stem.Lazy`1</span> class that uses the specified initialization function and thread-safety mode.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public Lazy (Func&lt;T&gt; valueFactory, System.Threading.LazyThreadSafetyMode mode);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>valueFactory</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-1\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">T</span>&gt;</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The delegate that is invoked to produce the lazily initialized value when it is needed.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>mode</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">LazyThreadSafetyMode</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>One of the enumeration values that specifies the thread safety mode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>mode</code> contains an invalid value.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>valueFactory</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The thread safety mode of a <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> instance describes the behavior when multiple threads try to initialize the <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> instance.  </p>\n<p> Exceptions that are thrown by <code>valueFactory</code> are cached, unless <code>mode</code> is <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">LazyThreadSafetyMode</a>. For more information, see the <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> class or the <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">System.Threading.LazyThreadSafetyMode</a> enumeration.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Lazy_1_IsValueCreated\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsValueCreated</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that indicates whether a value has been created for this <span class=\"xref\">stem.Lazy`1</span> instance.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsValueCreated { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if a value has been created for this <span class=\"xref\">stem.Lazy`1</span> instance; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>When lazy initialization occurs for a <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> instance, it may result in either a value being created or an exception being thrown. If an exception is thrown, subsequent behavior of the <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> instance depends on whether exception caching is in effect. If the <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> instance was created by using a constructor that does not specify an initialization function, then exception caching is not in effect. A subsequent attempt to initialize the <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> might succeed, and after successful initialization the IsValueCreated property returns <code>true</code>. If the <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> instance was created with an initialization function (specified by the <code>valueFactory</code> parameter of the <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> constructor), then exception caching is controlled by the thread safety mode.  </p>\n<ul>\n<li><p>If the mode is <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">System.Threading.LazyThreadSafetyMode</a> or <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">System.Threading.LazyThreadSafetyMode</a>, there is no second chance to initialize the <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> instance. If an exception occurs and is unhandled in the initialization function, that exception is cached and rethrown on subsequent accesses of the <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1_Value_\" data-linktype=\"relative-path\">Value</a>property. No value is created if an exception is thrown, so in such cases IsValueCreated returns <code>false</code>.  </p>\n</li>\n<li><p>If the mode is <a class=\"xref\" href=\"system.threading.lazythreadsafetymode\" data-linktype=\"relative-path\">System.Threading.LazyThreadSafetyMode</a>, the first thread that succeeds in running the initialization function (or the default constructor) creates the value for the <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> instance. If the initialization function throws an exception on one thread, other threads can still try to initialize the <a class=\"xref\" href=\"system.lazy-1\" data-linktype=\"relative-path\">Lazy&lt;T&gt;</a> instance. Until the value is created, the IsValueCreated property returns <code>false</code>.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Lazy_1_Value\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Value</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the lazily initialized value of the current <span class=\"xref\">stem.Lazy`1</span> instance.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public T Value { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><span class=\"xref\">T</span></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The lazily initialized value of the current <span class=\"xref\">stem.Lazy`1</span> instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.memberaccessexception\" data-linktype=\"relative-path\">MemberAccessException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <span class=\"xref\">stem.Lazy`1</span> instance is initialized to use the default constructor of the type that is being lazily initialized, and permissions to access the constructor are missing.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.missingmemberexception\" data-linktype=\"relative-path\">MissingMemberException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <span class=\"xref\">stem.Lazy`1</span> instance is initialized to use the default constructor of the type that is being lazily initialized, and that type does not have a public, parameterless constructor.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The initialization function tries to access Value on this instance.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If the <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1_IsValueCreated_\" data-linktype=\"relative-path\">IsValueCreated</a> property is <code>false</code>, accessing the Value property forces initialization.  </p>\n<p> In addition to the exceptions that are listed, the Value property can throw any unhandled exception that is thrown by the factory method that was passed to the <code>valueFactory</code> parameter of the <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1__ctor_System_Func__0__\" data-linktype=\"relative-path\">Lazy&lt;T&gt;(Func&lt;T&gt;)</a>, <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1__ctor_System_Func__0__System_Threading_LazyThreadSafetyMode_\" data-linktype=\"relative-path\">Lazy&lt;T&gt;(Func&lt;T&gt;,LazyThreadSafetyMode)</a>, or <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1__ctor_System_Func__0__System_Boolean_\" data-linktype=\"relative-path\">Lazy&lt;T&gt;(Func&lt;T&gt;,Boolean)</a> constructor.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Lazy_1_ToString\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ToString()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Creates and returns a string representation of the <span class=\"xref\">stem.Lazy`1.Value*</span> property for this instance.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override string ToString ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The result of calling the <span class=\"xref\">stem.Object.ToString*</span> method on the <span class=\"xref\">stem.Lazy`1.Value*</span> property for this instance, if the value has been created (that is, if the <span class=\"xref\">stem.Lazy`1.IsValueCreated*</span> property returns <code>true</code>). Otherwise, a string indicating that the value has not been created.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <span class=\"xref\">stem.Lazy`1.Value*</span> property is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Calling this method does not cause initialization.  </p>\n<p> The <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1_Value_\" data-linktype=\"relative-path\">Value</a> property can be <code>null</code> after lazy initialization if the factory method that was specified for the <code>valueFactory</code> parameter of the <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1__ctor_System_Func__0__\" data-linktype=\"relative-path\">Lazy&lt;T&gt;(Func&lt;T&gt;)</a>, <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1__ctor_System_Func__0__System_Threading_LazyThreadSafetyMode_\" data-linktype=\"relative-path\">Lazy&lt;T&gt;(Func&lt;T&gt;,LazyThreadSafetyMode)</a>, or <a class=\"xref\" href=\"system.lazy-1#System_Lazy_1__ctor_System_Func__0__System_Boolean_\" data-linktype=\"relative-path\">Lazy&lt;T&gt;(Func&lt;T&gt;,Boolean)</a> constructor returns <code>null</code>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Lazy-1.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Lazy-1.yml\">\r\n<meta name=\"APIName\" content=\"System.Lazy&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.Lazy&lt;T&gt;..ctor\">\r\n<meta name=\"APIName\" content=\"System.Lazy&lt;T&gt;.IsValueCreated\">\r\n<meta name=\"APIName\" content=\"System.Lazy&lt;T&gt;.ToString\">\r\n<meta name=\"APIName\" content=\"System.Lazy&lt;T&gt;.Value\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"70e21d01-ef67-159d-0847-b5a9fe182ff4\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides support for lazy initialization.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Lazy`1\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Lazy-1.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Lazy-1.yml","open_to_public_contributors":true,"api_name":["System.Lazy<T>","System.Lazy<T>..ctor","System.Lazy<T>.IsValueCreated","System.Lazy<T>.ToString","System.Lazy<T>.Value"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Lazy`1","System::Lazy`1","System.Lazy`1.#ctor","System::Lazy`1::#ctor","System.Lazy`1.IsValueCreated","System::Lazy`1::IsValueCreated","System.Lazy`1.ToString","System::Lazy`1::ToString","System.Lazy`1.Value","System::Lazy`1::Value"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"70e21d01-ef67-159d-0847-b5a9fe182ff4","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/Lazy`1.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Lazy<T> class | Microsoft Docs","_op_ogTitle":"Lazy<T> class","description":"Provides support for lazy initialization.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.Lazy`1","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.lazy-1","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.lazy-1","fileRelativePath":"System.Lazy-1.html"},"themesRelativePathToOutputRoot":"_themes/"}