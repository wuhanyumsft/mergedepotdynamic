{"content":"    \r\n    <h1 id=\"System_Net_DnsPermission\">\r\n      <span class=\"lang-csharp\">DnsPermission</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Controls rights to access Domain Name System (DNS) servers on the network.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public sealed class DnsPermission : System.Security.CodeAccessPermission, System.Security.Permissions.IUnrestrictedPermission</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.codeaccesspermission\" data-linktype=\"relative-path\">System.Security.CodeAccessPermission</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">DnsPermission</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_Assert\" data-linktype=\"relative-path\">Assert()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_Demand\" data-linktype=\"relative-path\">Demand()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_Deny\" data-linktype=\"relative-path\">Deny()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_PermitOnly\" data-linktype=\"relative-path\">PermitOnly()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_RevertAll\" data-linktype=\"relative-path\">RevertAll()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_RevertAssert\" data-linktype=\"relative-path\">RevertAssert()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_RevertDeny\" data-linktype=\"relative-path\">RevertDeny()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_RevertPermitOnly\" data-linktype=\"relative-path\">RevertPermitOnly()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The default permissions allow all local and Intranet zone applications to access DNS services, and no DNS permission for Internet zone applications.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_DnsPermission__ctor_System_Security_Permissions_PermissionState_\" data-linktype=\"self-bookmark\">DnsPermission(PermissionState)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new instance of the <a class=\"xref\" href=\"system.net.dnspermission\" data-linktype=\"relative-path\">DnsPermission</a> class that either allows unrestricted DNS access or disallows DNS access.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_DnsPermission_Copy\" data-linktype=\"self-bookmark\">Copy()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an identical copy of the current permission instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_DnsPermission_FromXml_System_Security_SecurityElement_\" data-linktype=\"self-bookmark\">FromXml(SecurityElement)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reconstructs a <a class=\"xref\" href=\"system.net.dnspermission\" data-linktype=\"relative-path\">DnsPermission</a> instance from an XML encoding.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_DnsPermission_Intersect_System_Security_IPermission_\" data-linktype=\"self-bookmark\">Intersect(IPermission)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a permission instance that is the intersection of the current permission instance and the specified permission instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_DnsPermission_IsSubsetOf_System_Security_IPermission_\" data-linktype=\"self-bookmark\">IsSubsetOf(IPermission)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the current permission instance is a subset of the specified permission instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_DnsPermission_IsUnrestricted\" data-linktype=\"self-bookmark\">IsUnrestricted()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Checks the overall permission state of the object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_DnsPermission_ToXml\" data-linktype=\"self-bookmark\">ToXml()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an XML encoding of a <a class=\"xref\" href=\"system.net.dnspermission\" data-linktype=\"relative-path\">DnsPermission</a> instance and its current state.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_DnsPermission_Union_System_Security_IPermission_\" data-linktype=\"self-bookmark\">Union(IPermission)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a permission instance that is the union of the current permission instance and the specified permission instance.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_DnsPermission__ctor_System_Security_Permissions_PermissionState_\">\r\n    \r\n            <a id=\"System_Net_DnsPermission__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DnsPermission(PermissionState)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new instance of the <a class=\"xref\" href=\"system.net.dnspermission\" data-linktype=\"relative-path\">DnsPermission</a> class that either allows unrestricted DNS access or disallows DNS access.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public DnsPermission (System.Security.Permissions.PermissionState state);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.permissions.permissionstate\" data-linktype=\"relative-path\">PermissionState</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.security.permissions.permissionstate\" data-linktype=\"relative-path\">PermissionState</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>state</code> is not a valid <a class=\"xref\" href=\"system.security.permissions.permissionstate\" data-linktype=\"relative-path\">PermissionState</a> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>state</code> is <a class=\"xref\" href=\"system.security.permissions.permissionstate\" data-linktype=\"relative-path\">PermissionState</a>, the <a class=\"xref\" href=\"system.net.dnspermission\" data-linktype=\"relative-path\">DnsPermission</a> instance passes all demands. If <code>state</code> contains any other value, the <a class=\"xref\" href=\"system.net.dnspermission\" data-linktype=\"relative-path\">DnsPermission</a> instance fails all demands.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an instance of the <a class=\"xref\" href=\"system.net.dnspermission\" data-linktype=\"relative-path\">DnsPermission</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"DnsPermission_Constructor#1\">public:\n   void useDns()\n   {\n      // Create a DnsPermission instance.\n      DnsPermission^ permission = gcnew DnsPermission( PermissionState::Unrestricted );\n      \n      // Check for permission.\n      permission-&gt;Demand();\n      // Create a SecurityElement Object* to hold XML encoding of the DnsPermission instance.\n      SecurityElement^ securityElementObj = permission-&gt;ToXml();\n      Console::WriteLine( &quot;Tag, Attributes and Values of &#39;DnsPermission&#39; instance :&quot; );\n      Console::WriteLine( &quot;<br>&nbsp;&nbsp;&nbsp;&nbsp;Tag : {0}&quot;, securityElementObj-&gt;Tag );\n      // Print the attributes and values.\n      PrintKeysAndValues( securityElementObj-&gt;Attributes );\n   }\n\nprivate:\n   void PrintKeysAndValues( Hashtable^ myList )\n   {\n      // Get the enumerator that can iterate through the hash table.\n      IDictionaryEnumerator^ myEnumerator = myList-&gt;GetEnumerator();\n      Console::WriteLine( &quot;<br>&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot; );\n      while ( myEnumerator-&gt;MoveNext() )\n      {\n         Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}:&nbsp;&nbsp;&nbsp;&nbsp; {1}&quot;, myEnumerator-&gt;Key, myEnumerator-&gt;Value );\n      }\n      Console::WriteLine();\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"DnsPermission_Constructor#1\">   public void useDns() {\n\n      // Create a DnsPermission instance.\n      DnsPermission permission = new DnsPermission(PermissionState.Unrestricted);\n\n      // Check for permission.\n      permission.Demand();\n      // Create a SecurityElement object to hold XML encoding of the DnsPermission instance.\n      SecurityElement securityElementObj = permission.ToXml();    \n      Console.WriteLine(&quot;Tag, Attributes and Values of &#39;DnsPermission&#39; instance :&quot;);\n      Console.WriteLine(&quot;<br>&nbsp;&nbsp;&nbsp;&nbsp;Tag :&quot; + securityElementObj.Tag);\n      // Print the attributes and values.\n      PrintKeysAndValues(securityElementObj.Attributes);\n   }\n\n   private void PrintKeysAndValues(Hashtable myList) {\n      // Get the enumerator that can iterate through the hash table.\n      IDictionaryEnumerator myEnumerator = myList.GetEnumerator();\n      Console.WriteLine(&quot;<br>&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot;);\n      while (myEnumerator.MoveNext())\n         Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}:&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myEnumerator.Key, myEnumerator.Value);\n      Console.WriteLine();\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"DnsPermission_Constructor#1\">    Public Sub useDns()\n        &#39; Create a DnsPermission instance.\n        Dim permission As New DnsPermission(PermissionState.Unrestricted)\n        \n        &#39; Check for permission.\n        permission.Demand()\n        &#39; Create a SecurityElement object to hold XML encoding of the DnsPermission instance.\n        Dim securityElementObj As SecurityElement = permission.ToXml()\n        Console.WriteLine(&quot;Tag, Attributes and Values of &#39;DnsPermission&#39; instance :&quot;)\n        Console.WriteLine((ControlChars.Cr + ControlChars.Tab + &quot;Tag :&quot; + securityElementObj.Tag))\n        &#39; Print the attributes and values.\n        PrintKeysAndValues(securityElementObj.Attributes)\n    End Sub &#39;useDns\n    \n    Private Sub PrintKeysAndValues(myList As Hashtable)\n        &#39; Get the enumerator that can iterate through the hash table.\n        Dim myEnumerator As IDictionaryEnumerator = myList.GetEnumerator()\n        Console.WriteLine(ControlChars.Cr + ControlChars.Tab + &quot;-KEY-&quot; + ControlChars.Tab + &quot;-VALUE-&quot;)\n        While myEnumerator.MoveNext()\n            Console.WriteLine(ControlChars.Tab + &quot;{0}:&quot; + ControlChars.Tab + &quot;{1}&quot;, myEnumerator.Key, myEnumerator.Value)\n        End While\n        Console.WriteLine()\n    End Sub &#39;PrintKeysAndValues\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_DnsPermission_Copy\">\r\n    \r\n            <a id=\"System_Net_DnsPermission_Copy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Copy()</div>        \r\n          </div>\r\n    \r\n            <p>Creates an identical copy of the current permission instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Security.IPermission Copy ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.ipermission\" data-linktype=\"relative-path\">IPermission</a></div>\r\n                  </div>\r\n                  <p>A new instance of the <a class=\"xref\" href=\"system.net.dnspermission\" data-linktype=\"relative-path\">DnsPermission</a> class that is an identical copy of the current instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A copy of a <a class=\"xref\" href=\"system.net.dnspermission\" data-linktype=\"relative-path\">DnsPermission</a> instance provides the same access to DNS servers as the original permission instance.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an identical copy of an existing <a class=\"xref\" href=\"system.net.dnspermission\" data-linktype=\"relative-path\">DnsPermission</a> instance.  </p>\n<pre><code class=\"lang-cs\" name=\"DnsPermission_Copy#1\">   public void UseDns() {\n      // Create a DnsPermission instance.\n      DnsPermission myPermission = new DnsPermission(PermissionState.Unrestricted);\n      // Check for permission.\n      myPermission.Demand();\n      // Create an identical copy of the above &#39;DnsPermission&#39; object.\n      DnsPermission myPermissionCopy = (DnsPermission)myPermission.Copy();\n      Console.WriteLine(&quot;Attributes and Values of &#39;DnsPermission&#39; instance :&quot;);\n      // Print the attributes and values.\n      PrintKeysAndValues(myPermission.ToXml().Attributes);\n      Console.WriteLine(&quot;Attribute and values of copied instance :&quot;);\n      PrintKeysAndValues(myPermissionCopy.ToXml().Attributes);\n   }\n\n   private void PrintKeysAndValues(Hashtable myHashtable) {\n      // Get the enumerator that can iterate through the hash table.\n      IDictionaryEnumerator myEnumerator = myHashtable.GetEnumerator();\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot;);\n      while (myEnumerator.MoveNext())\n         Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}:&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myEnumerator.Key, myEnumerator.Value);\n      Console.WriteLine();\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"DnsPermission_Copy#1\">    Public Sub UseDns()\n        &#39; Create a DnsPermission instance.\n        Dim myPermission As New DnsPermission(PermissionState.Unrestricted)\n        &#39; Check for permission.\n        myPermission.Demand()\n        &#39; Create an identical copy of the above DnsPermission object.\n        Dim myPermissionCopy As DnsPermission = CType(myPermission.Copy(), DnsPermission)\n        Console.WriteLine(&quot;Attributes and Values of &#39;DnsPermission&#39; instance :&quot;)\n        &#39; Print the attributes and values.\n        PrintKeysAndValues(myPermission.ToXml().Attributes)\n        Console.WriteLine(&quot;Attribute and values of copied instance :&quot;)\n        PrintKeysAndValues(myPermissionCopy.ToXml().Attributes)\n    End Sub &#39;UseDns\n    \n    \n    Private Sub PrintKeysAndValues(myHashtable As Hashtable)\n        &#39; Get the enumerator that can iterate through he hash table.\n        Dim myEnumerator As IDictionaryEnumerator = myHashtable.GetEnumerator()\n        Console.WriteLine(ControlChars.Tab + &quot;-KEY-&quot; + ControlChars.Tab + &quot;-VALUE-&quot;)\n        While myEnumerator.MoveNext()\n            Console.WriteLine(ControlChars.Tab + &quot;{0}:&quot; + ControlChars.Tab + &quot;{1}&quot;, myEnumerator.Key, myEnumerator.Value)\n        End While\n        Console.WriteLine()\n    End Sub &#39;PrintKeysAndValues\n</code></pre><pre><code class=\"lang-cpp\" name=\"DnsPermission_Copy#1\">public:\n   void UseDns()\n   {\n      // Create a DnsPermission instance.\n      DnsPermission^ myPermission = gcnew DnsPermission( PermissionState::Unrestricted );\n      // Check for permission.\n      myPermission-&gt;Demand();\n      // Create an identical copy of the above &#39;DnsPermission&#39; Object*.\n      DnsPermission^ myPermissionCopy = dynamic_cast&lt;DnsPermission^&gt;(myPermission-&gt;Copy());\n      Console::WriteLine( &quot;Attributes and Values of &#39;DnsPermission&#39; instance :&quot; );\n      // Print the attributes and values.\n      PrintKeysAndValues( myPermission-&gt;ToXml()-&gt;Attributes );\n      Console::WriteLine( &quot;Attribute and values of copied instance :&quot; );\n      PrintKeysAndValues( myPermissionCopy-&gt;ToXml()-&gt;Attributes );\n   }\n\nprivate:\n   void PrintKeysAndValues( Hashtable^ myHashtable )\n   {\n      // Get the enumerator that can iterate through the hash table.\n      IDictionaryEnumerator^ myEnumerator = myHashtable-&gt;GetEnumerator();\n      Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot; );\n      while ( myEnumerator-&gt;MoveNext() )\n      {\n         Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}:&nbsp;&nbsp;&nbsp;&nbsp; {1}&quot;, myEnumerator-&gt;Key, myEnumerator-&gt;Value );\n      }\n      Console::WriteLine();\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_DnsPermission_FromXml_System_Security_SecurityElement_\">\r\n    \r\n            <a id=\"System_Net_DnsPermission_FromXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FromXml(SecurityElement)</div>        \r\n          </div>\r\n    \r\n            <p>Reconstructs a <a class=\"xref\" href=\"system.net.dnspermission\" data-linktype=\"relative-path\">DnsPermission</a> instance from an XML encoding.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void FromXml (System.Security.SecurityElement securityElement);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>securityElement</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The XML encoding to use to reconstruct the <a class=\"xref\" href=\"system.net.dnspermission\" data-linktype=\"relative-path\">DnsPermission</a> instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>securityElement</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>securityElement</code> is not a <a class=\"xref\" href=\"system.net.dnspermission\" data-linktype=\"relative-path\">DnsPermission</a> element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The FromXml method reconstructs a <a class=\"xref\" href=\"system.net.dnspermission\" data-linktype=\"relative-path\">DnsPermission</a> instance from an XML encoding defined by the <a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a> class.  </p>\n<p> Use the <a class=\"xref\" href=\"system.net.dnspermission#System_Net_DnsPermission_ToXml_\" data-linktype=\"relative-path\">ToXml</a> method to XML-encode the <a class=\"xref\" href=\"system.net.dnspermission\" data-linktype=\"relative-path\">DnsPermission</a> instance, including state information.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example reconstructs a <a class=\"xref\" href=\"system.net.dnspermission\" data-linktype=\"relative-path\">DnsPermission</a> instance from an XML encoding.  </p>\n<pre><code class=\"lang-cs\" name=\"DnsPermission_FromXml#1\">   public void ConstructDnsPermission() {\n     try \n     {\n       // Create a DnsPermission instance.\n       DnsPermission permission = new DnsPermission(PermissionState.None);\n       // Create a SecurityElement instance by calling the ToXml method on the \n       // DnsPermission instance.\n       // Print its attributes, which hold the  XML encoding of the DnsPermission\n       // instance.\n       Console.WriteLine(&quot;Attributes and Values of &#39;DnsPermission&#39; instance :&quot;);\n       PrintKeysAndValues(permission.ToXml().Attributes);\n\n       // Create a SecurityElement instance.\n       SecurityElement securityElementObj = new SecurityElement(&quot;IPermission&quot;);\n       // Add attributes and values of the SecurityElement instance corresponding to\n       // the permission instance. \n       securityElementObj.AddAttribute(&quot;version&quot;, &quot;1&quot;);\n       securityElementObj.AddAttribute(&quot;Unrestricted&quot;, &quot;true&quot;);\n       securityElementObj.AddAttribute(&quot;class&quot;,&quot;System.Net.DnsPermission&quot;);\n                        \n       // Reconstruct a DnsPermission instance from an XML encoding.\n         DnsPermission permission1 = new DnsPermission(PermissionState.None);\n       permission1.FromXml(securityElementObj);\n\n       // Print the attributes and values of the constructed DnsPermission object.\n       Console.WriteLine(&quot;After reconstruction Attributes and Values of new DnsPermission instance :&quot;);\n       PrintKeysAndValues(permission1.ToXml().Attributes);\n     }\n     catch(NullReferenceException e) \n     {\n       Console.WriteLine(&quot;NullReferenceException caught!!!&quot;);\n       Console.WriteLine(&quot;Source : &quot; + e.Source);\n       Console.WriteLine(&quot;Message : &quot; + e.Message);\n     }\n     catch(SecurityException e) \n     {\n       Console.WriteLine(&quot;SecurityException caught!!!&quot;);\n       Console.WriteLine(&quot;Source : &quot; + e.Source);\n       Console.WriteLine(&quot;Message : &quot; + e.Message);\n     }\n     catch(ArgumentNullException e) \n     {\n       Console.WriteLine(&quot;ArgumentNullException caught!!!&quot;);\n       Console.WriteLine(&quot;Source : &quot; + e.Source);\n       Console.WriteLine(&quot;Message : &quot; + e.Message);\n     }\n     catch(Exception e)\n     {\n       Console.WriteLine(&quot;Exception caught!!!&quot;);\n       Console.WriteLine(&quot;Source : &quot; + e.Source);\n       Console.WriteLine(&quot;Message : &quot; + e.Message);\n     }\n   }\n\n   private void PrintKeysAndValues(Hashtable myList) {\n      // Get the enumerator that can iterate through the hash table.\n      IDictionaryEnumerator myEnumerator = myList.GetEnumerator();\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot;);\n      while (myEnumerator.MoveNext())\n         Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}:&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myEnumerator.Key, myEnumerator.Value);\n         Console.WriteLine();\n   }\n</code></pre><pre><code class=\"lang-cpp\" name=\"DnsPermission_FromXml#1\">public:\n   void ConstructDnsPermission()\n   {\n      try\n      {\n         // Create a DnsPermission instance.\n         DnsPermission^ permission = gcnew DnsPermission( PermissionState::None );\n         // Create a SecurityElement instance by calling the ToXml method on the\n         // DnsPermission instance.\n         // Print its attributes, which hold the  XML encoding of the DnsPermission\n         // instance.\n         Console::WriteLine( &quot;Attributes and Values of &#39;DnsPermission&#39; instance :&quot; );\n         PrintKeysAndValues( permission-&gt;ToXml()-&gt;Attributes );\n         \n         // Create a SecurityElement instance.\n         SecurityElement^ securityElementObj = gcnew SecurityElement( &quot;IPermission&quot; );\n         // Add attributes and values of the SecurityElement instance corresponding to\n         // the permission instance.\n         securityElementObj-&gt;AddAttribute( &quot;version&quot;, &quot;1&quot; );\n         securityElementObj-&gt;AddAttribute( &quot;Unrestricted&quot;, &quot;true&quot; );\n         securityElementObj-&gt;AddAttribute( &quot;class&quot;, &quot;System.Net.DnsPermission&quot; );\n         \n         // Reconstruct a DnsPermission instance from an XML encoding.\n         DnsPermission^ permission1 = gcnew DnsPermission( PermissionState::None );\n         permission1-&gt;FromXml( securityElementObj );\n         \n         // Print the attributes and values of the constructed DnsPermission Object*.\n         Console::WriteLine( &quot;After reconstruction Attributes and Values of new DnsPermission instance :&quot; );\n         PrintKeysAndValues( permission1-&gt;ToXml()-&gt;Attributes );\n      }\n      catch ( NullReferenceException^ e ) \n      {\n         Console::WriteLine( &quot;NullReferenceException caught!!!&quot; );\n         Console::WriteLine( &quot;Source : {0}&quot;, e-&gt;Source );\n         Console::WriteLine( &quot;Message : {0}&quot;, e-&gt;Message );\n      }\n      catch ( SecurityException^ e ) \n      {\n         Console::WriteLine( &quot;SecurityException caught!!!&quot; );\n         Console::WriteLine( &quot;Source : {0}&quot;, e-&gt;Source );\n         Console::WriteLine( &quot;Message : {0}&quot;, e-&gt;Message );\n      }\n      catch ( ArgumentNullException^ e ) \n      {\n         Console::WriteLine( &quot;ArgumentNullException caught!!!&quot; );\n         Console::WriteLine( &quot;Source : {0}&quot;, e-&gt;Source );\n         Console::WriteLine( &quot;Message : {0}&quot;, e-&gt;Message );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Exception caught!!!&quot; );\n         Console::WriteLine( &quot;Source : {0}&quot;, e-&gt;Source );\n         Console::WriteLine( &quot;Message : {0}&quot;, e-&gt;Message );\n      }\n   }\n\nprivate:\n   void PrintKeysAndValues( Hashtable^ myList )\n   {\n      // Get the enumerator that can iterate through the hash table.\n      IDictionaryEnumerator^ myEnumerator = myList-&gt;GetEnumerator();\n      Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot; );\n      while ( myEnumerator-&gt;MoveNext() )\n      {\n         Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}:&nbsp;&nbsp;&nbsp;&nbsp; {1}&quot;, myEnumerator-&gt;Key, myEnumerator-&gt;Value );\n      }\n      Console::WriteLine();\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"DnsPermission_FromXml#1\">    Public Sub ConstructDnsPermission()\n        Try\n            &#39; Create a DnsPermission instance.\n            Dim permission As New DnsPermission(PermissionState.None)\n            &#39; Create a SecurityElement instance by calling the ToXml method on the\n            &#39; DnsPermission instance and print its attributes, \n            &#39; which hold the  XML encoding of the DnsPermission instance.\n            Console.WriteLine(&quot;Attributes and Values of &#39;DnsPermission&#39; instance :&quot;)\n            PrintKeysAndValues(permission.ToXml().Attributes)\n            \n            &#39; Create a SecurityElement instacnce .\n            Dim securityElementObj As New SecurityElement(&quot;IPermission&quot;)\n            &#39; Add attributes and values of the SecurityElement instance corresponding to\n            &#39; teh permission instance.\n            securityElementObj.AddAttribute(&quot;version&quot;, &quot;1&quot;)\n            securityElementObj.AddAttribute(&quot;Unrestricted&quot;, &quot;true&quot;)\n            securityElementObj.AddAttribute(&quot;class&quot;, &quot;System.Net.DnsPermission&quot;)\n            \n            &#39; Reconstruct a DnsPermission instance from an XML encoding.\n            Dim permission1 As New DnsPermission(PermissionState.None)\n            permission1.FromXml(securityElementObj)\n            \n            &#39; Print the attributes and values of the constructed DnsPermission object.\n            Console.WriteLine(&quot;After reconstruction Attributes and Values of new DnsPermission instance :&quot;)\n            PrintKeysAndValues(permission1.ToXml().Attributes)\n        Catch e As NullReferenceException\n            Console.WriteLine(&quot;NullReferenceException caught!!!&quot;)\n            Console.WriteLine((&quot;Source : &quot; + e.Source))\n            Console.WriteLine((&quot;Message : &quot; + e.Message))\n        Catch e As SecurityException\n            Console.WriteLine(&quot;SecurityException caught!!!&quot;)\n            Console.WriteLine((&quot;Source : &quot; + e.Source))\n            Console.WriteLine((&quot;Message : &quot; + e.Message))\n        Catch e As ArgumentNullException\n            Console.WriteLine(&quot;ArgumentNullException caught!!!&quot;)\n            Console.WriteLine((&quot;Source : &quot; + e.Source))\n            Console.WriteLine((&quot;Message : &quot; + e.Message))\n        Catch e As Exception\n            Console.WriteLine(&quot;Exception caught!!!&quot;)\n            Console.WriteLine((&quot;Source : &quot; + e.Source))\n            Console.WriteLine((&quot;Message : &quot; + e.Message))\n        End Try\n    End Sub &#39;ConstructDnsPermission\n    \n    \n    Private Sub PrintKeysAndValues(myList As Hashtable)\n        &#39; Get the enumerator that can iterate through the hash table.\n        Dim myEnumerator As IDictionaryEnumerator = myList.GetEnumerator()\n        Console.WriteLine(ControlChars.Tab + &quot;-KEY-&quot; + ControlChars.Tab + &quot;-VALUE-&quot;)\n        While myEnumerator.MoveNext()\n            Console.WriteLine(ControlChars.Tab + &quot;{0}:&quot; + ControlChars.Tab + &quot;{1}&quot;, myEnumerator.Key, myEnumerator.Value)\n        End While\n        Console.WriteLine()\n    End Sub &#39;PrintKeysAndValues\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_DnsPermission_Intersect_System_Security_IPermission_\">\r\n    \r\n            <a id=\"System_Net_DnsPermission_Intersect_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Intersect(IPermission)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a permission instance that is the intersection of the current permission instance and the specified permission instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Security.IPermission Intersect (System.Security.IPermission target);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.ipermission\" data-linktype=\"relative-path\">IPermission</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.net.dnspermission\" data-linktype=\"relative-path\">DnsPermission</a> instance to intersect with the current instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.ipermission\" data-linktype=\"relative-path\">IPermission</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.net.dnspermission\" data-linktype=\"relative-path\">DnsPermission</a> instance that represents the intersection of the current <a class=\"xref\" href=\"system.net.dnspermission\" data-linktype=\"relative-path\">DnsPermission</a> instance with the specified <a class=\"xref\" href=\"system.net.dnspermission\" data-linktype=\"relative-path\">DnsPermission</a> instance, or <code>null</code> if the intersection is empty. If both the current instance and <code>target</code> are unrestricted, this method returns a new <a class=\"xref\" href=\"system.net.dnspermission\" data-linktype=\"relative-path\">DnsPermission</a> instance that is unrestricted; otherwise, it returns <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>target</code> is neither a <a class=\"xref\" href=\"system.net.dnspermission\" data-linktype=\"relative-path\">DnsPermission</a> nor <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Intersect method returns a <a class=\"xref\" href=\"system.net.dnspermission\" data-linktype=\"relative-path\">DnsPermission</a> instance that allows the access defined by both the current <a class=\"xref\" href=\"system.net.dnspermission\" data-linktype=\"relative-path\">DnsPermission</a> instance and the specified <a class=\"xref\" href=\"system.net.dnspermission\" data-linktype=\"relative-path\">DnsPermission</a> instance. Any demand must pass both permissions to pass their intersection.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a permission instance that is the intersection of the current permission instance and the specified permission instance.  </p>\n<pre><code class=\"lang-cs\" name=\"dnspermission_union_intersect#2\">   public void useDns() {\n      // Create a DnsPermission instance.\n      dnsPermission1 = new DnsPermission(PermissionState.Unrestricted);\n      dnsPermission2 = new DnsPermission(PermissionState.None);\n      // Check for permission.\n      dnsPermission1.Demand();\n      dnsPermission2.Demand();\n      Console.WriteLine(&quot;Attributes and Values of first DnsPermission instance :&quot;);\n      PrintKeysAndValues(dnsPermission1.ToXml().Attributes);\n      Console.WriteLine(&quot;Attributes and Values of second DnsPermission instance :&quot;);\n      PrintKeysAndValues(dnsPermission2.ToXml().Attributes);\n      Console.WriteLine(&quot;Union of both instances : &quot;);\n      MyUnion();\n      Console.WriteLine(&quot;Intersection of both instances : &quot;);\n      MyIntersection();\n   }\n\n   private void PrintKeysAndValues(Hashtable myList) {\n      // Get the enumerator that can iterate through the hash tabble.\n      IDictionaryEnumerator myEnumerator = myList.GetEnumerator();\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot;);\n      while (myEnumerator.MoveNext())\n         Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}:&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myEnumerator.Key, myEnumerator.Value);\n      Console.WriteLine();\n   }\n      // Create a DnsPermission instance that is the intersection of current\n      // DnsPermission instance and the specified DnsPermission instance.\n   private void MyIntersection()\n   {\n      DnsPermission permission = (DnsPermission)dnsPermission1.Intersect(dnsPermission2);\n      // Print the attributes and the values of the intersection instance of\n      // DnsPermission.\n      PrintKeysAndValues(permission.ToXml().Attributes);\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"dnspermission_union_intersect#2\">    Public Sub useDns()\n        &#39; Create a DnsPermission instance.\n        dnsPermission1 = New DnsPermission(PermissionState.Unrestricted)\n        dnsPermission2 = New DnsPermission(PermissionState.None)\n        &#39; Check for permission.\n        dnsPermission1.Demand()\n        dnsPermission2.Demand()\n        Console.WriteLine(&quot;Attributes and Values of first DnsPermission instance :&quot;)\n        PrintKeysAndValues(dnsPermission1.ToXml().Attributes)\n        Console.WriteLine(&quot;Attributes and Values of second DnsPermission instance :&quot;)\n        PrintKeysAndValues(dnsPermission2.ToXml().Attributes)\n        Console.WriteLine(&quot;Union of both instances : &quot;)\n        MyUnion()\n        Console.WriteLine(&quot;Intersection of both instances : &quot;)\n        MyIntersection()\n    End Sub &#39;useDns\n\n    Private Sub PrintKeysAndValues(myList As Hashtable)\n        &#39; Get the enumerator that can iterate through the hash table.\n        Dim myEnumerator As IDictionaryEnumerator = myList.GetEnumerator()\n        Console.WriteLine(ControlChars.Tab + &quot;-KEY-&quot; + ControlChars.Tab + &quot;-VALUE-&quot;)\n        While myEnumerator.MoveNext()\n            Console.WriteLine(ControlChars.Tab + &quot;{0}:&quot; + ControlChars.Tab + &quot;{1}&quot;, myEnumerator.Key, myEnumerator.Value)\n        End While\n        Console.WriteLine()\n    End Sub &#39;PrintKeysAndValues\n\n    Private Sub MyIntersection()\n        &#39; Create a DnsPermission instance that is the intersection of the current\n        &#39; DnsPermission instance and the specified DnsPermission instance.\n        Dim permission As DnsPermission = CType(dnsPermission1.Intersect(dnsPermission2), DnsPermission)\n        &#39; Print the attributes and values of the intersection instance of DnsPermission.\n        PrintKeysAndValues(permission.ToXml().Attributes)\n    End Sub &#39;MyIntersection\n</code></pre><pre><code class=\"lang-cpp\" name=\"dnspermission_union_intersect#2\">public:\n   void useDns()\n   {\n      // Create a DnsPermission instance.\n      dnsPermission1 = gcnew DnsPermission( PermissionState::Unrestricted );\n      dnsPermission2 = gcnew DnsPermission( PermissionState::None );\n      // Check for permission.\n      dnsPermission1-&gt;Demand();\n      dnsPermission2-&gt;Demand();\n      Console::WriteLine( &quot;Attributes and Values of first DnsPermission instance :&quot; );\n      PrintKeysAndValues( dnsPermission1-&gt;ToXml()-&gt;Attributes );\n      Console::WriteLine( &quot;Attributes and Values of second DnsPermission instance :&quot; );\n      PrintKeysAndValues( dnsPermission2-&gt;ToXml()-&gt;Attributes );\n      Console::WriteLine( &quot;Union of both instances : &quot; );\n      MyUnion();\n      Console::WriteLine( &quot;Intersection of both instances : &quot; );\n      MyIntersection();\n   }\n\nprivate:\n   void PrintKeysAndValues( Hashtable^ myList )\n   {\n      // Get the enumerator that can iterate through the hash tabble.\n      IDictionaryEnumerator^ myEnumerator = myList-&gt;GetEnumerator();\n      Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot; );\n      while ( myEnumerator-&gt;MoveNext() )\n      {\n         Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}:&nbsp;&nbsp;&nbsp;&nbsp; {1}&quot;, myEnumerator-&gt;Key, myEnumerator-&gt;Value );\n      }\n      Console::WriteLine();\n   }\n\n   // Create a DnsPermission instance that is the intersection of current\n   // DnsPermission instance and the specified DnsPermission instance.\n   void MyIntersection()\n   {\n      DnsPermission^ permission = dynamic_cast&lt;DnsPermission^&gt;(dnsPermission1-&gt;Intersect( dnsPermission2 ));\n      // Print the attributes and the values of the intersection instance of\n      // DnsPermission.\n      PrintKeysAndValues( permission-&gt;ToXml()-&gt;Attributes );\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_DnsPermission_IsSubsetOf_System_Security_IPermission_\">\r\n    \r\n            <a id=\"System_Net_DnsPermission_IsSubsetOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsSubsetOf(IPermission)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the current permission instance is a subset of the specified permission instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsSubsetOf (System.Security.IPermission target);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.ipermission\" data-linktype=\"relative-path\">IPermission</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second <a class=\"xref\" href=\"system.net.dnspermission\" data-linktype=\"relative-path\">DnsPermission</a> instance to be tested for the subset relationship.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>false</code> if the current instance is unrestricted and <code>target</code> is either <code>null</code> or unrestricted; otherwise, <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>target</code> is neither a <a class=\"xref\" href=\"system.net.dnspermission\" data-linktype=\"relative-path\">DnsPermission</a> nor <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The current <a class=\"xref\" href=\"system.net.dnspermission\" data-linktype=\"relative-path\">DnsPermission</a> instance is a subset of the specified <a class=\"xref\" href=\"system.net.dnspermission\" data-linktype=\"relative-path\">DnsPermission</a> instance if the current <a class=\"xref\" href=\"system.net.dnspermission\" data-linktype=\"relative-path\">DnsPermission</a> instance specifies a set of operations that is wholly contained by the specified <a class=\"xref\" href=\"system.net.dnspermission\" data-linktype=\"relative-path\">DnsPermission</a> instance.  </p>\n<p> If the IsSubsetOf method returns <code>true</code>, the current <a class=\"xref\" href=\"system.net.dnspermission\" data-linktype=\"relative-path\">DnsPermission</a> instance allows no more access to DNS servers than does the specified <a class=\"xref\" href=\"system.net.dnspermission\" data-linktype=\"relative-path\">DnsPermission</a> instance.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the IsSubsetOf method to determine whether the current permission instance is a subset of the specified permission instance.  </p>\n<pre><code class=\"lang-cs\" name=\"DnsPermission_IsSubsetOf#1\">   public void useDns() {\n      // Create a DnsPermission instance.\n      permission = new DnsPermission(PermissionState.Unrestricted);\n      DnsPermission dnsPermission1 = new DnsPermission(PermissionState.None);\n      // Check for permission.\n      permission.Demand();\n      dnsPermission1.Demand();\n      // Print the attributes and values.\n      Console.WriteLine(&quot;Attributes and Values of &#39;DnsPermission&#39; instance :&quot;);\n      PrintKeysAndValues(permission.ToXml().Attributes);\n      Console.WriteLine(&quot;Attributes and Values of specified &#39;DnsPermission&#39; instance :&quot;);\n      PrintKeysAndValues(dnsPermission1.ToXml().Attributes);\n      Subset(dnsPermission1);\n   }\n\n   private void Subset(DnsPermission Permission1)\n   {\n      if(permission.IsSubsetOf(Permission1))\n         Console.WriteLine(&quot;Current &#39;DnsPermission&#39; instance is a subset of specified &#39;DnsPermission&#39; instance.&quot;);\n      else\n         Console.WriteLine(&quot;Current &#39;DnsPermission&#39; instance is not a subset of specified &#39;DnsPermission&#39; instance.&quot;);\n   }\n\n   private void PrintKeysAndValues(Hashtable myList) {\n      // Get the enumerator that can iterate through the hash table.\n      IDictionaryEnumerator myEnumerator = myList.GetEnumerator();\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot;);\n      while (myEnumerator.MoveNext())\n         Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}:&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myEnumerator.Key, myEnumerator.Value);\n      Console.WriteLine();\n   }\n</code></pre><pre><code class=\"lang-cpp\" name=\"DnsPermission_IsSubsetOf#1\">public:\n   void useDns()\n   {\n      // Create a DnsPermission instance.\n      permission = gcnew DnsPermission( PermissionState::Unrestricted );\n      DnsPermission^ dnsPermission1 = gcnew DnsPermission( PermissionState::None );\n      // Check for permission.\n      permission-&gt;Demand();\n      dnsPermission1-&gt;Demand();\n      // Print the attributes and values.\n      Console::WriteLine( &quot;Attributes and Values of &#39;DnsPermission&#39; instance :&quot; );\n      PrintKeysAndValues( permission-&gt;ToXml()-&gt;Attributes );\n      Console::WriteLine( &quot;Attributes and Values of specified &#39;DnsPermission&#39; instance :&quot; );\n      PrintKeysAndValues( dnsPermission1-&gt;ToXml()-&gt;Attributes );\n      Subset( dnsPermission1 );\n   }\n\nprivate:\n   void Subset( DnsPermission^ Permission1 )\n   {\n      if ( permission-&gt;IsSubsetOf( Permission1 ) )\n      {\n         Console::WriteLine( &quot;Current &#39;DnsPermission&#39; instance is a subset of specified &#39;DnsPermission&#39; instance.&quot; );\n      }\n      else\n      {\n         Console::WriteLine( &quot;Current &#39;DnsPermission&#39; instance is not a subset of specified &#39;DnsPermission&#39; instance.&quot; );\n      }\n   }\n\n   void PrintKeysAndValues( Hashtable^ myList )\n   {\n      // Get the enumerator that can iterate through the hash table.\n      IDictionaryEnumerator^ myEnumerator = myList-&gt;GetEnumerator();\n      Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot; );\n      while ( myEnumerator-&gt;MoveNext() )\n      {\n         Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}:&nbsp;&nbsp;&nbsp;&nbsp; {1}&quot;, myEnumerator-&gt;Key, myEnumerator-&gt;Value );\n      }\n      Console::WriteLine();\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"DnsPermission_IsSubsetOf#1\">    Public Sub useDns()\n        &#39; Create a DnsPermission instance.\n        permission = New DnsPermission(PermissionState.Unrestricted)\n        Dim dnsPermission1 As New DnsPermission(PermissionState.None)\n        &#39; Check  for permission.\n        permission.Demand()\n        dnsPermission1.Demand()\n        &#39; Print the attributes and values.\n        Console.WriteLine(&quot;Attributes and Values of &#39;DnsPermission&#39; instance :&quot;)\n        PrintKeysAndValues(permission.ToXml().Attributes)\n        Console.WriteLine(&quot;Attributes and Values of specified &#39;DnsPermission&#39; instance :&quot;)\n        PrintKeysAndValues(dnsPermission1.ToXml().Attributes)\n        Subset(dnsPermission1)\n    End Sub &#39;useDns\n    \n    \n    Private Sub Subset(Permission1 As DnsPermission)\n        If permission.IsSubsetOf(Permission1) Then\n            Console.WriteLine(&quot;Current &#39;DnsPermission&#39; instance is a subset of specified &#39;DnsPermission&#39; instance.&quot;)\n        Else\n            Console.WriteLine(&quot;Current &#39;DnsPermission&#39; instance is not a subset of specified &#39;DnsPermission&#39; instance.&quot;)\n        End If\n    End Sub &#39;Subset\n     \n    Private Sub PrintKeysAndValues(myList As Hashtable)\n        &#39; Get the enumerator that can iterate through the hash table.\n        Dim myEnumerator As IDictionaryEnumerator = myList.GetEnumerator()\n        Console.WriteLine(ControlChars.Tab + &quot;-KEY-&quot; + ControlChars.Tab + &quot;-VALUE-&quot;)\n        While myEnumerator.MoveNext()\n            Console.WriteLine(ControlChars.Tab + &quot;{0}:&quot; + ControlChars.Tab + &quot;{1}&quot;, myEnumerator.Key, myEnumerator.Value)\n        End While\n        Console.WriteLine()\n    End Sub &#39;PrintKeysAndValues\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_DnsPermission_IsUnrestricted\">\r\n    \r\n            <a id=\"System_Net_DnsPermission_IsUnrestricted_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsUnrestricted()</div>        \r\n          </div>\r\n    \r\n            <p>Checks the overall permission state of the object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsUnrestricted ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.net.dnspermission\" data-linktype=\"relative-path\">DnsPermission</a> instance was created with <a class=\"xref\" href=\"system.security.permissions.permissionstate\" data-linktype=\"relative-path\">PermissionState</a>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the IsUnrestricted method to check the overall permission state of the object.  </p>\n<pre><code class=\"lang-cpp\" name=\"DnsPermission_IsUnrestricted#1\">public:\n   void useDns()\n   {\n      // Create a DnsPermission instance.\n      DnsPermission^ permission = gcnew DnsPermission( PermissionState::Unrestricted );\n      // Check for permission.\n      permission-&gt;Demand();\n      Console::WriteLine( &quot;Attributes and Values of DnsPermission instance :&quot; );\n      // Print the attributes and values.\n      PrintKeysAndValues( permission-&gt;ToXml()-&gt;Attributes );\n      // Check the permission state.\n      if ( permission-&gt;IsUnrestricted() )\n      {\n         Console::WriteLine( &quot;Overall permissions : Unrestricted&quot; );\n      }\n      else\n      {\n         Console::WriteLine( &quot;Overall permissions : Restricted&quot; );\n      }\n   }\n\nprivate:\n   void PrintKeysAndValues( Hashtable^ myList )\n   {\n      // Get the enumerator that can iterate through the hash table.\n      IDictionaryEnumerator^ myEnumerator = myList-&gt;GetEnumerator();\n      Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot; );\n      while ( myEnumerator-&gt;MoveNext() )\n      {\n         Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}:&nbsp;&nbsp;&nbsp;&nbsp; {1}&quot;, myEnumerator-&gt;Key, myEnumerator-&gt;Value );\n      }\n      Console::WriteLine();\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"DnsPermission_IsUnrestricted#1\">    Public Sub useDns()\n        &#39; Create a DnsPermission instance.\n        Dim permission As New DnsPermission(PermissionState.Unrestricted)\n        &#39; Check for permission.\n        permission.Demand()\n        Console.WriteLine(&quot;Attributes and Values of DnsPermission instance :&quot;)\n        &#39; Print the attributes and values.\n        PrintKeysAndValues(permission.ToXml().Attributes)\n        &#39; Check the permission state.\n        If permission.IsUnrestricted() Then\n            Console.WriteLine(&quot;Overall permissions : Unrestricted&quot;)\n        Else\n            Console.WriteLine(&quot;Overall permissions : Restricted&quot;)\n        End If\n    End Sub &#39;useDns\n     \n    Private Sub PrintKeysAndValues(myList As Hashtable)\n        &#39; Get the enumerator that can iterate through the hash table.\n        Dim myEnumerator As IDictionaryEnumerator = myList.GetEnumerator()\n        Console.WriteLine(ControlChars.Tab + &quot;-KEY-&quot; + ControlChars.Tab + &quot;-VALUE-&quot;)\n        While myEnumerator.MoveNext()\n            Console.WriteLine(ControlChars.Tab + &quot;{0}:&quot; + ControlChars.Tab + &quot;{1}&quot;, myEnumerator.Key, myEnumerator.Value)\n        End While\n        Console.WriteLine()\n    End Sub &#39;PrintKeysAndValues\n</code></pre><pre><code class=\"lang-cs\" name=\"DnsPermission_IsUnrestricted#1\">   public void useDns() {\n      // Create a DnsPermission instance.\n      DnsPermission permission = new DnsPermission(PermissionState.Unrestricted);\n      // Check for permission.\n      permission.Demand();\n      Console.WriteLine(&quot;Attributes and Values of DnsPermission instance :&quot;);\n      // Print the attributes and values.\n      PrintKeysAndValues(permission.ToXml().Attributes);\n      // Check the permission state.\n      if (permission.IsUnrestricted())\n         Console.WriteLine(&quot;Overall permissions : Unrestricted&quot;);\n      else\n         Console.WriteLine(&quot;Overall permissions : Restricted&quot;);\n   }\n\n   private void PrintKeysAndValues(Hashtable myList) {\n      // Get the enumerator that can iterate through the hash table.\n      IDictionaryEnumerator myEnumerator = myList.GetEnumerator();\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot;);\n      while (myEnumerator.MoveNext())\n         Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}:&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myEnumerator.Key, myEnumerator.Value);\n      Console.WriteLine();\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_DnsPermission_ToXml\">\r\n    \r\n            <a id=\"System_Net_DnsPermission_ToXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToXml()</div>        \r\n          </div>\r\n    \r\n            <p>Creates an XML encoding of a <a class=\"xref\" href=\"system.net.dnspermission\" data-linktype=\"relative-path\">DnsPermission</a> instance and its current state.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Security.SecurityElement ToXml ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a> instance that contains an XML-encoded representation of the security object, including state information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ToXml method creates a <a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a> instance to XML-encode a representation of the <a class=\"xref\" href=\"system.net.dnspermission\" data-linktype=\"relative-path\">DnsPermission</a> instance, including state information.  </p>\n<p> Use the <a class=\"xref\" href=\"system.net.dnspermission#System_Net_DnsPermission_FromXml_\" data-linktype=\"relative-path\">FromXml</a> method to restore the state information from a <a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a> instance.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an XML encoding of a <a class=\"xref\" href=\"system.net.dnspermission\" data-linktype=\"relative-path\">DnsPermission</a> instance.  </p>\n<pre><code class=\"lang-cpp\" name=\"DnsPermission_Constructor#1\">public:\n   void useDns()\n   {\n      // Create a DnsPermission instance.\n      DnsPermission^ permission = gcnew DnsPermission( PermissionState::Unrestricted );\n      \n      // Check for permission.\n      permission-&gt;Demand();\n      // Create a SecurityElement Object* to hold XML encoding of the DnsPermission instance.\n      SecurityElement^ securityElementObj = permission-&gt;ToXml();\n      Console::WriteLine( &quot;Tag, Attributes and Values of &#39;DnsPermission&#39; instance :&quot; );\n      Console::WriteLine( &quot;<br>&nbsp;&nbsp;&nbsp;&nbsp;Tag : {0}&quot;, securityElementObj-&gt;Tag );\n      // Print the attributes and values.\n      PrintKeysAndValues( securityElementObj-&gt;Attributes );\n   }\n\nprivate:\n   void PrintKeysAndValues( Hashtable^ myList )\n   {\n      // Get the enumerator that can iterate through the hash table.\n      IDictionaryEnumerator^ myEnumerator = myList-&gt;GetEnumerator();\n      Console::WriteLine( &quot;<br>&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot; );\n      while ( myEnumerator-&gt;MoveNext() )\n      {\n         Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}:&nbsp;&nbsp;&nbsp;&nbsp; {1}&quot;, myEnumerator-&gt;Key, myEnumerator-&gt;Value );\n      }\n      Console::WriteLine();\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"DnsPermission_Constructor#1\">   public void useDns() {\n\n      // Create a DnsPermission instance.\n      DnsPermission permission = new DnsPermission(PermissionState.Unrestricted);\n\n      // Check for permission.\n      permission.Demand();\n      // Create a SecurityElement object to hold XML encoding of the DnsPermission instance.\n      SecurityElement securityElementObj = permission.ToXml();    \n      Console.WriteLine(&quot;Tag, Attributes and Values of &#39;DnsPermission&#39; instance :&quot;);\n      Console.WriteLine(&quot;<br>&nbsp;&nbsp;&nbsp;&nbsp;Tag :&quot; + securityElementObj.Tag);\n      // Print the attributes and values.\n      PrintKeysAndValues(securityElementObj.Attributes);\n   }\n\n   private void PrintKeysAndValues(Hashtable myList) {\n      // Get the enumerator that can iterate through the hash table.\n      IDictionaryEnumerator myEnumerator = myList.GetEnumerator();\n      Console.WriteLine(&quot;<br>&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot;);\n      while (myEnumerator.MoveNext())\n         Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}:&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myEnumerator.Key, myEnumerator.Value);\n      Console.WriteLine();\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"DnsPermission_Constructor#1\">    Public Sub useDns()\n        &#39; Create a DnsPermission instance.\n        Dim permission As New DnsPermission(PermissionState.Unrestricted)\n        \n        &#39; Check for permission.\n        permission.Demand()\n        &#39; Create a SecurityElement object to hold XML encoding of the DnsPermission instance.\n        Dim securityElementObj As SecurityElement = permission.ToXml()\n        Console.WriteLine(&quot;Tag, Attributes and Values of &#39;DnsPermission&#39; instance :&quot;)\n        Console.WriteLine((ControlChars.Cr + ControlChars.Tab + &quot;Tag :&quot; + securityElementObj.Tag))\n        &#39; Print the attributes and values.\n        PrintKeysAndValues(securityElementObj.Attributes)\n    End Sub &#39;useDns\n    \n    Private Sub PrintKeysAndValues(myList As Hashtable)\n        &#39; Get the enumerator that can iterate through the hash table.\n        Dim myEnumerator As IDictionaryEnumerator = myList.GetEnumerator()\n        Console.WriteLine(ControlChars.Cr + ControlChars.Tab + &quot;-KEY-&quot; + ControlChars.Tab + &quot;-VALUE-&quot;)\n        While myEnumerator.MoveNext()\n            Console.WriteLine(ControlChars.Tab + &quot;{0}:&quot; + ControlChars.Tab + &quot;{1}&quot;, myEnumerator.Key, myEnumerator.Value)\n        End While\n        Console.WriteLine()\n    End Sub &#39;PrintKeysAndValues\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_DnsPermission_Union_System_Security_IPermission_\">\r\n    \r\n            <a id=\"System_Net_DnsPermission_Union_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Union(IPermission)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a permission instance that is the union of the current permission instance and the specified permission instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Security.IPermission Union (System.Security.IPermission target);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.ipermission\" data-linktype=\"relative-path\">IPermission</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.net.dnspermission\" data-linktype=\"relative-path\">DnsPermission</a> instance to combine with the current instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.ipermission\" data-linktype=\"relative-path\">IPermission</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.net.dnspermission\" data-linktype=\"relative-path\">DnsPermission</a> instance that represents the union of the current <a class=\"xref\" href=\"system.net.dnspermission\" data-linktype=\"relative-path\">DnsPermission</a> instance with the specified <a class=\"xref\" href=\"system.net.dnspermission\" data-linktype=\"relative-path\">DnsPermission</a> instance. If <code>target</code> is <code>null</code>, this method returns a copy of the current instance. If the current instance or <code>target</code> is unrestricted, this method returns a <a class=\"xref\" href=\"system.net.dnspermission\" data-linktype=\"relative-path\">DnsPermission</a> instance that is unrestricted; otherwise, it returns a <a class=\"xref\" href=\"system.net.dnspermission\" data-linktype=\"relative-path\">DnsPermission</a> instance that is restricted.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>target</code> is neither a <a class=\"xref\" href=\"system.net.dnspermission\" data-linktype=\"relative-path\">DnsPermission</a> nor <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Union method returns a <a class=\"xref\" href=\"system.net.dnspermission\" data-linktype=\"relative-path\">DnsPermission</a> instance that allows the access defined by either the current <a class=\"xref\" href=\"system.net.dnspermission\" data-linktype=\"relative-path\">DnsPermission</a> instance or the specified <a class=\"xref\" href=\"system.net.dnspermission\" data-linktype=\"relative-path\">DnsPermission</a> instance. Any demand that passes either permission passes their union.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a permission instance that is the union of the current permission instance and the specified permission instance.  </p>\n<pre><code class=\"lang-cs\" name=\"dnspermission_union_intersect#1\">   private void MyUnion()\n   {\n      // Create a DnsPermission instance that is the union of the current DnsPermission\n      // instance and the specified DnsPermission instance.     \n      DnsPermission permission = (DnsPermission)dnsPermission1.Union(dnsPermission2);\n      // Print the attributes and the values of the union instance of DnsPermission.\n      PrintKeysAndValues(permission.ToXml().Attributes);\n   }\n   public void useDns() {\n      // Create a DnsPermission instance.\n      dnsPermission1 = new DnsPermission(PermissionState.Unrestricted);\n      dnsPermission2 = new DnsPermission(PermissionState.None);\n      // Check for permission.\n      dnsPermission1.Demand();\n      dnsPermission2.Demand();\n      Console.WriteLine(&quot;Attributes and Values of first DnsPermission instance :&quot;);\n      PrintKeysAndValues(dnsPermission1.ToXml().Attributes);\n      Console.WriteLine(&quot;Attributes and Values of second DnsPermission instance :&quot;);\n      PrintKeysAndValues(dnsPermission2.ToXml().Attributes);\n      Console.WriteLine(&quot;Union of both instances : &quot;);\n      MyUnion();\n      Console.WriteLine(&quot;Intersection of both instances : &quot;);\n      MyIntersection();\n   }\n\n   private void PrintKeysAndValues(Hashtable myList) {\n      // Get the enumerator that can iterate through the hash tabble.\n      IDictionaryEnumerator myEnumerator = myList.GetEnumerator();\n      Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot;);\n      while (myEnumerator.MoveNext())\n         Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}:&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myEnumerator.Key, myEnumerator.Value);\n      Console.WriteLine();\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"dnspermission_union_intersect#1\">    Private Sub MyUnion()\n        &#39; Create a DnsPermission instance which is the union of the current DnsPermission instance and the specified DnsPermission instance.\n        Dim permission As DnsPermission = CType(dnsPermission1.Union(dnsPermission2), DnsPermission)\n        &#39; Print the attributes and values of the union instance of DnsPermission.\n        PrintKeysAndValues(permission.ToXml().Attributes)\n    End Sub &#39;MyUnion\n    Public Sub useDns()\n        &#39; Create a DnsPermission instance.\n        dnsPermission1 = New DnsPermission(PermissionState.Unrestricted)\n        dnsPermission2 = New DnsPermission(PermissionState.None)\n        &#39; Check for permission.\n        dnsPermission1.Demand()\n        dnsPermission2.Demand()\n        Console.WriteLine(&quot;Attributes and Values of first DnsPermission instance :&quot;)\n        PrintKeysAndValues(dnsPermission1.ToXml().Attributes)\n        Console.WriteLine(&quot;Attributes and Values of second DnsPermission instance :&quot;)\n        PrintKeysAndValues(dnsPermission2.ToXml().Attributes)\n        Console.WriteLine(&quot;Union of both instances : &quot;)\n        MyUnion()\n        Console.WriteLine(&quot;Intersection of both instances : &quot;)\n        MyIntersection()\n    End Sub &#39;useDns\n\n    Private Sub PrintKeysAndValues(myList As Hashtable)\n        &#39; Get the enumerator that can iterate through the hash table.\n        Dim myEnumerator As IDictionaryEnumerator = myList.GetEnumerator()\n        Console.WriteLine(ControlChars.Tab + &quot;-KEY-&quot; + ControlChars.Tab + &quot;-VALUE-&quot;)\n        While myEnumerator.MoveNext()\n            Console.WriteLine(ControlChars.Tab + &quot;{0}:&quot; + ControlChars.Tab + &quot;{1}&quot;, myEnumerator.Key, myEnumerator.Value)\n        End While\n        Console.WriteLine()\n    End Sub &#39;PrintKeysAndValues\n</code></pre><pre><code class=\"lang-cpp\" name=\"dnspermission_union_intersect#1\">private:\n   void MyUnion()\n   {\n      // Create a DnsPermission instance that is the union of the current DnsPermission\n      // instance and the specified DnsPermission instance.\n      DnsPermission^ permission = dynamic_cast&lt;DnsPermission^&gt;(dnsPermission1-&gt;Union( dnsPermission2 ));\n      // Print the attributes and the values of the union instance of DnsPermission.\n      PrintKeysAndValues( permission-&gt;ToXml()-&gt;Attributes );\n   }\n\npublic:\n   void useDns()\n   {\n      // Create a DnsPermission instance.\n      dnsPermission1 = gcnew DnsPermission( PermissionState::Unrestricted );\n      dnsPermission2 = gcnew DnsPermission( PermissionState::None );\n      // Check for permission.\n      dnsPermission1-&gt;Demand();\n      dnsPermission2-&gt;Demand();\n      Console::WriteLine( &quot;Attributes and Values of first DnsPermission instance :&quot; );\n      PrintKeysAndValues( dnsPermission1-&gt;ToXml()-&gt;Attributes );\n      Console::WriteLine( &quot;Attributes and Values of second DnsPermission instance :&quot; );\n      PrintKeysAndValues( dnsPermission2-&gt;ToXml()-&gt;Attributes );\n      Console::WriteLine( &quot;Union of both instances : &quot; );\n      MyUnion();\n      Console::WriteLine( &quot;Intersection of both instances : &quot; );\n      MyIntersection();\n   }\n\nprivate:\n   void PrintKeysAndValues( Hashtable^ myList )\n   {\n      // Get the enumerator that can iterate through the hash tabble.\n      IDictionaryEnumerator^ myEnumerator = myList-&gt;GetEnumerator();\n      Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot; );\n      while ( myEnumerator-&gt;MoveNext() )\n      {\n         Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}:&nbsp;&nbsp;&nbsp;&nbsp; {1}&quot;, myEnumerator-&gt;Key, myEnumerator-&gt;Value );\n      }\n      Console::WriteLine();\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Net.DnsPermission.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Net.DnsPermission.yml\">\r\n<meta name=\"APIName\" content=\"System.Net.DnsPermission\">\r\n<meta name=\"APIName\" content=\"System.Net.DnsPermission..ctor\">\r\n<meta name=\"APIName\" content=\"System.Net.DnsPermission.Copy\">\r\n<meta name=\"APIName\" content=\"System.Net.DnsPermission.FromXml\">\r\n<meta name=\"APIName\" content=\"System.Net.DnsPermission.Intersect\">\r\n<meta name=\"APIName\" content=\"System.Net.DnsPermission.IsSubsetOf\">\r\n<meta name=\"APIName\" content=\"System.Net.DnsPermission.IsUnrestricted\">\r\n<meta name=\"APIName\" content=\"System.Net.DnsPermission.ToXml\">\r\n<meta name=\"APIName\" content=\"System.Net.DnsPermission.Union\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"721d75b2-350b-d1f7-dc5d-1ff66019366e\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Net\\DnsPermission.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Controls rights to access Domain Name System (DNS) servers on the network.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Net/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Net.DnsPermission\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Net.DnsPermission.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Net.DnsPermission.yml","open_to_public_contributors":true,"api_name":["System.Net.DnsPermission","System.Net.DnsPermission..ctor","System.Net.DnsPermission.Copy","System.Net.DnsPermission.FromXml","System.Net.DnsPermission.Intersect","System.Net.DnsPermission.IsSubsetOf","System.Net.DnsPermission.IsUnrestricted","System.Net.DnsPermission.ToXml","System.Net.DnsPermission.Union"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Net.DnsPermission","System::Net::DnsPermission","System.Net.DnsPermission.#ctor","System::Net::DnsPermission::#ctor","System.Net.DnsPermission.Copy","System::Net::DnsPermission::Copy","System.Net.DnsPermission.FromXml","System::Net::DnsPermission::FromXml","System.Net.DnsPermission.Intersect","System::Net::DnsPermission::Intersect","System.Net.DnsPermission.IsSubsetOf","System::Net::DnsPermission::IsSubsetOf","System.Net.DnsPermission.IsUnrestricted","System::Net::DnsPermission::IsUnrestricted","System.Net.DnsPermission.ToXml","System::Net::DnsPermission::ToXml","System.Net.DnsPermission.Union","System::Net::DnsPermission::Union"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"721d75b2-350b-d1f7-dc5d-1ff66019366e","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Net\\DnsPermission.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Net/DnsPermission.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"DnsPermission class | Microsoft Docs","_op_ogTitle":"DnsPermission class","description":"Controls rights to access Domain Name System (DNS) servers on the network.\n","toc_asset_id":"_splitted/System.Net/toc.json","toc_rel":"_splitted/System.Net/toc.json","source_url":"","ms.assetid":"System.Net.DnsPermission","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.net.dnspermission","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.net.dnspermission","fileRelativePath":"System.Net.DnsPermission.html"},"themesRelativePathToOutputRoot":"_themes/"}