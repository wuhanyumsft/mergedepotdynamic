{"content":"    <!-- NAMESPACE -->\r\n    <h1 id=\"Microsoft_VisualC_StlClr_Generic\">\r\n      <span class=\"lang-csharp\">Microsoft.VisualC.StlClr.Generic</span>\r\n        Namespace\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Contains the classes, interfaces, and iterators that are used to implement the generic interface to the . By using this generic interface, other .NET languages, such as C# and Visual Basic, can call code that is written using STL/CLR.</p>\n\r\n    </div>\r\n    <header class=\"header enable-platform-filter\" id=\"classes\">\r\n      <h2>Classes\r\n    </h2>\r\n    </header>\r\n    \r\n    <table class=\"nameValue  enable-platform-filter\">\r\n      <tr id=\"Microsoft_VisualC_StlClr_Generic_ConstContainerBidirectionalIterator_1\" class=\"enable-platform-filter\">\r\n      <td>\r\n          <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.visualc.stlclr.generic.constcontainerbidirectionaliterator-1\" data-linktype=\"relative-path\">ConstContainerBidirectionalIterator<tvalue></tvalue></a></div>\r\n      </td>\r\n      <td>\r\n        <p>Defines an iterator that can access elements in a container in the forward direction by using the increment operator and in the backward direction by using the decrement operator. The element that the iterator points to cannot be modified. Bidirectional iterators can be used anywhere that a constant input or constant output iterator is required.</p>\n\r\n      </td>\r\n      </tr>\r\n      <tr id=\"Microsoft_VisualC_StlClr_Generic_ConstContainerRandomAccessIterator_1\" class=\"enable-platform-filter\">\r\n      <td>\r\n          <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.visualc.stlclr.generic.constcontainerrandomaccessiterator-1\" data-linktype=\"relative-path\">ConstContainerRandomAccessIterator<tvalue></tvalue></a></div>\r\n      </td>\r\n      <td>\r\n        <p>Provides an iterator that supports the following operations: moving forward one position by calling <code>operator++</code>, moving backward one position by calling <code>operator--</code>, accessing an element by using <code>operator[]</code>, and accessing an element by using pointer arithmetic. The element pointed to by the iterator cannot be modified.</p>\n\r\n      </td>\r\n      </tr>\r\n      <tr id=\"Microsoft_VisualC_StlClr_Generic_ConstReverseBidirectionalIterator_1\" class=\"enable-platform-filter\">\r\n      <td>\r\n          <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.visualc.stlclr.generic.constreversebidirectionaliterator-1\" data-linktype=\"relative-path\">ConstReverseBidirectionalIterator<tvalue></tvalue></a></div>\r\n      </td>\r\n      <td>\r\n        <p>Defines an iterator that accesses elements in a container in the reverse direction. Elements can be accessed in the forward direction by using the decrement operator and in the backward direction by using the increment operator. The element that the iterator points to cannot be modified. Constant reverse bidirectional iterators can be used anywhere that a constant reverse input or constant reverse output iterator is required.</p>\n\r\n      </td>\r\n      </tr>\r\n      <tr id=\"Microsoft_VisualC_StlClr_Generic_ConstReverseRandomAccessIterator_1\" class=\"enable-platform-filter\">\r\n      <td>\r\n          <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.visualc.stlclr.generic.constreverserandomaccessiterator-1\" data-linktype=\"relative-path\">ConstReverseRandomAccessIterator<tvalue></tvalue></a></div>\r\n      </td>\r\n      <td>\r\n        <p>Provides an iterator that supports the following operations: moving forward one position by calling <code>operator--</code>, moving backward one position by calling <code>operator++</code>, accessing an element by using <code>operator[]</code>, and accessing an element by using pointer arithmetic. The element accessed by the iterator cannot be modified.</p>\n\r\n      </td>\r\n      </tr>\r\n      <tr id=\"Microsoft_VisualC_StlClr_Generic_ContainerBidirectionalIterator_1\" class=\"enable-platform-filter\">\r\n      <td>\r\n          <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.visualc.stlclr.generic.containerbidirectionaliterator-1\" data-linktype=\"relative-path\">ContainerBidirectionalIterator<tvalue></tvalue></a></div>\r\n      </td>\r\n      <td>\r\n        <p>Defines an iterator that can access elements in a container in the forward direction by using the increment operator and in the backward direction by using the decrement operator. The element that the iterator points to can be both written to and read from any number of times. Bidirectional iterators can be used anywhere that an input or output iterator is required.</p>\n\r\n      </td>\r\n      </tr>\r\n      <tr id=\"Microsoft_VisualC_StlClr_Generic_ContainerRandomAccessIterator_1\" class=\"enable-platform-filter\">\r\n      <td>\r\n          <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.visualc.stlclr.generic.containerrandomaccessiterator-1\" data-linktype=\"relative-path\">ContainerRandomAccessIterator<tvalue></tvalue></a></div>\r\n      </td>\r\n      <td>\r\n        <p>Provides an iterator that supports the following operations: moving forward one position by calling <code>operator++</code>, moving backward one position by calling <code>operator--</code>, accessing an element by using <code>operator[]</code>, and accessing an element by using pointer arithmetic.</p>\n\r\n      </td>\r\n      </tr>\r\n      <tr id=\"Microsoft_VisualC_StlClr_Generic_ReverseBidirectionalIterator_1\" class=\"enable-platform-filter\">\r\n      <td>\r\n          <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.visualc.stlclr.generic.reversebidirectionaliterator-1\" data-linktype=\"relative-path\">ReverseBidirectionalIterator<tvalue></tvalue></a></div>\r\n      </td>\r\n      <td>\r\n        <p>Defines an iterator that accesses elements in a container in the reverse direction. Elements can be accessed in the forward direction by using the decrement operator and in the backward direction by using the increment operator. The element that the iterator points to can be both written to and read from any number of times. Reverse bidirectional iterators can be used anywhere that a reverse input or reverse output iterator is required.</p>\n\r\n      </td>\r\n      </tr>\r\n      <tr id=\"Microsoft_VisualC_StlClr_Generic_ReverseRandomAccessIterator_1\" class=\"enable-platform-filter\">\r\n      <td>\r\n          <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.visualc.stlclr.generic.reverserandomaccessiterator-1\" data-linktype=\"relative-path\">ReverseRandomAccessIterator<tvalue></tvalue></a></div>\r\n      </td>\r\n      <td>\r\n        <p>Provides an iterator that supports the following operations: moving forward one position by calling <code>operator--</code>, moving backward one position by calling <code>operator++</code>, accessing an element by using <code>operator[]</code>, and accessing an element by using pointer arithmetic.</p>\n\r\n      </td>\r\n      </tr>\r\n    </table>\r\n    \r\n    <header class=\"header enable-platform-filter\" id=\"interfaces\">\r\n      <h2>Interfaces\r\n    </h2>\r\n    </header>\r\n    \r\n    <table class=\"nameValue  enable-platform-filter\">\r\n      <tr id=\"Microsoft_VisualC_StlClr_Generic_IBaseIterator_1\" class=\"enable-platform-filter\">\r\n      <td>\r\n          <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.visualc.stlclr.generic.ibaseiterator-1\" data-linktype=\"relative-path\">IBaseIterator<tvalue></tvalue></a></div>\r\n      </td>\r\n      <td>\r\n        <p>Defines the base interface for all STL/CLR iterators.</p>\n\r\n      </td>\r\n      </tr>\r\n      <tr id=\"Microsoft_VisualC_StlClr_Generic_IBidirectionalContainer_1\" class=\"enable-platform-filter\">\r\n      <td>\r\n          <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.visualc.stlclr.generic.ibidirectionalcontainer-1\" data-linktype=\"relative-path\">IBidirectionalContainer<tvalue></tvalue></a></div>\r\n      </td>\r\n      <td>\r\n        <p>Interface for a container that supports both forward and backward iteration. Containers that implement bidirectional iteration support the following operations: moving forward one position by calling <code>operator++</code>, and moving backward one position by calling <code>operator--</code>.</p>\n\r\n      </td>\r\n      </tr>\r\n      <tr id=\"Microsoft_VisualC_StlClr_Generic_IBidirectionalIterator_1\" class=\"enable-platform-filter\">\r\n      <td>\r\n          <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.visualc.stlclr.generic.ibidirectionaliterator-1\" data-linktype=\"relative-path\">IBidirectionalIterator<tvalue></tvalue></a></div>\r\n      </td>\r\n      <td>\r\n        <p>Interface for an iterator that can access elements in a container in the forward direction by using the increment operator and in the backward direction by using the decrement operator. The element that the iterator points to can be both written to and read from any number of times. Bidirectional iterators can be used anywhere an input or output iterator is required.</p>\n\r\n      </td>\r\n      </tr>\r\n      <tr id=\"Microsoft_VisualC_StlClr_Generic_IForwardIterator_1\" class=\"enable-platform-filter\">\r\n      <td>\r\n          <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.visualc.stlclr.generic.iforwarditerator-1\" data-linktype=\"relative-path\">IForwardIterator<tvalue></tvalue></a></div>\r\n      </td>\r\n      <td>\r\n        <p>Interface for an iterator that can access elements in a container only in the forward direction by using the increment operator. The element that the iterator points to can be both written to and read from any number of times. Forward iterators can be used anywhere an input or output iterator is required.</p>\n\r\n      </td>\r\n      </tr>\r\n      <tr id=\"Microsoft_VisualC_StlClr_Generic_IInputIterator_1\" class=\"enable-platform-filter\">\r\n      <td>\r\n          <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.visualc.stlclr.generic.iinputiterator-1\" data-linktype=\"relative-path\">IInputIterator<tvalue></tvalue></a></div>\r\n      </td>\r\n      <td>\r\n        <p>Interface for an iterator that is used to read a sequence from a container only in the forward direction. The element that the iterator points to can be read only one time, and it cannot be modified.</p>\n\r\n      </td>\r\n      </tr>\r\n      <tr id=\"Microsoft_VisualC_StlClr_Generic_INode_1\" class=\"enable-platform-filter\">\r\n      <td>\r\n          <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.visualc.stlclr.generic.inode-1\" data-linktype=\"relative-path\">INode<tvalue></tvalue></a></div>\r\n      </td>\r\n      <td>\r\n        <p>Interface for the node data structure. Containers that support bidirectional iteration contain nodes. A node consists of a value for the element at that position in the container and pointers to the next and previous elements in the container.</p>\n\r\n      </td>\r\n      </tr>\r\n      <tr id=\"Microsoft_VisualC_StlClr_Generic_IOutputIterator_1\" class=\"enable-platform-filter\">\r\n      <td>\r\n          <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.visualc.stlclr.generic.ioutputiterator-1\" data-linktype=\"relative-path\">IOutputIterator<tvalue></tvalue></a></div>\r\n      </td>\r\n      <td>\r\n        <p>Interface for an iterator that is used to write a sequence to a container only in the forward direction. The element that the iterator points to can be written to only one time.</p>\n\r\n      </td>\r\n      </tr>\r\n      <tr id=\"Microsoft_VisualC_StlClr_Generic_IRandomAccessContainer_1\" class=\"enable-platform-filter\">\r\n      <td>\r\n          <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.visualc.stlclr.generic.irandomaccesscontainer-1\" data-linktype=\"relative-path\">IRandomAccessContainer<tvalue></tvalue></a></div>\r\n      </td>\r\n      <td>\r\n        <p>Interface for a container that supports random access iteration. Containers that implement random access iteration support the following operations: moving forward one position by calling <code>operator++</code>, moving backward one position by calling <code>operator--</code>, accessing an element by using <code>operator[]</code>, and accessing an element by using pointer arithmetic.</p>\n\r\n      </td>\r\n      </tr>\r\n      <tr id=\"Microsoft_VisualC_StlClr_Generic_IRandomAccessIterator_1\" class=\"enable-platform-filter\">\r\n      <td>\r\n          <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.visualc.stlclr.generic.irandomaccessiterator-1\" data-linktype=\"relative-path\">IRandomAccessIterator<tvalue></tvalue></a></div>\r\n      </td>\r\n      <td>\r\n        <p>Defines the interface for a random access iterator. Random access iterators support the following operations: moving forward one position by calling <code>operator++</code>, moving backward one position by calling <code>operator--</code>, accessing an element by using <code>operator[]</code>, and accessing an element by using pointer arithmetic.</p>\n\r\n      </td>\r\n      </tr>\r\n    </table>\r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/Microsoft.VisualC.StlClr.Generic.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/Microsoft.VisualC.StlClr.Generic.yml\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"e71f232d-4b82-4b31-faa7-d2e142e0e2b6\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Contains the classes, interfaces, and iterators that are used to implement the generic interface to the . By using this generic interface, other .NET languages, such as C# and Visual Basic, can call…\">\r\n<meta name=\"toc_rel\" content=\"_splitted/Microsoft.VisualC.StlClr.Generic/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"Microsoft.VisualC.StlClr.Generic\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/Microsoft.VisualC.StlClr.Generic.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/Microsoft.VisualC.StlClr.Generic.yml","open_to_public_contributors":true,"f1_keywords":["Microsoft.VisualC.StlClr.Generic","Microsoft::VisualC::StlClr::Generic"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"e71f232d-4b82-4b31-faa7-d2e142e0e2b6","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/ns-Microsoft.VisualC.StlClr.Generic.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Microsoft.VisualC.StlClr.Generic namespace | Microsoft Docs","_op_ogTitle":"Microsoft.VisualC.StlClr.Generic namespace","description":"Contains the classes, interfaces, and iterators that are used to implement the generic interface to the . By using this generic interface, other .NET languages, such as C# and Visual Basic, can call…","toc_asset_id":"_splitted/Microsoft.VisualC.StlClr.Generic/toc.json","toc_rel":"_splitted/Microsoft.VisualC.StlClr.Generic/toc.json","source_url":"","ms.assetid":"Microsoft.VisualC.StlClr.Generic","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/microsoft.visualc.stlclr.generic","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/microsoft.visualc.stlclr.generic","fileRelativePath":"Microsoft.VisualC.StlClr.Generic.html"},"themesRelativePathToOutputRoot":"_themes/"}