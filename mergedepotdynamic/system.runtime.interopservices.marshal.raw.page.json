{"content":"    \r\n    <h1 id=\"System_Runtime_InteropServices_Marshal\">\r\n      <span class=\"lang-csharp\">Marshal</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides a collection of methods for allocating unmanaged memory, copying unmanaged memory blocks, and converting managed to unmanaged types, as well as other miscellaneous methods used when interacting with unmanaged code.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static class Marshal</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Marshal</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The <code>static</code> methods defined on the Marshal class are essential to working with unmanaged code. Most methods defined in this class are typically used by developers who want to provide a bridge between the managed and unmanaged programming models. For example, the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_StringToHGlobalAnsi_\" data-linktype=\"relative-path\">StringToHGlobalAnsi</a> method copies ANSI characters from a specified string (in the managed heap) to a buffer in the unmanaged heap. It also allocates the target heap of the right size.  </p>\n<p> The common language runtime provides specific marshaling capabilities. For details on marshaling behavior, see <a href=\"../Topic/Interop%20Marshaling.md\" data-linktype=\"relative-path\">Interop Marshaling</a>.  </p>\n<p> The <code>Read</code> and <code>Write</code> methods in the Marshal class support both aligned and unaligned access.</p>\n\r\n    \r\n    \r\n    <h2>Fields\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_SystemDefaultCharSize\" data-linktype=\"self-bookmark\">SystemDefaultCharSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the default character size on the system; the default is 2 for Unicode systems and 1 for ANSI systems. This field is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_SystemMaxDBCSCharSize\" data-linktype=\"self-bookmark\">SystemMaxDBCSCharSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the maximum size of a double byte character set (DBCS) size, in bytes, for the current operating system. This field is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_AddRef_System_IntPtr_\" data-linktype=\"self-bookmark\">AddRef(IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Increments the reference count on the specified interface.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_AllocCoTaskMem_System_Int32_\" data-linktype=\"self-bookmark\">AllocCoTaskMem(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Allocates a block of memory of specified size from the COM task memory allocator.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_AllocHGlobal_System_Int32_\" data-linktype=\"self-bookmark\">AllocHGlobal(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Allocates memory from the unmanaged memory of the process by using the specified number of bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_AllocHGlobal_System_IntPtr_\" data-linktype=\"self-bookmark\">AllocHGlobal(IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Allocates memory from the unmanaged memory of the process by using the pointer to the specified number of bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_AreComObjectsAvailableForCleanup\" data-linktype=\"self-bookmark\">AreComObjectsAvailableForCleanup()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether runtime callable wrappers (RCWs) from any context are available for cleanup.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_BindToMoniker_System_String_\" data-linktype=\"self-bookmark\">BindToMoniker(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an interface pointer identified by the specified moniker.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_ChangeWrapperHandleStrength_System_Object_System_Boolean_\" data-linktype=\"self-bookmark\">ChangeWrapperHandleStrength(Object,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Changes the strength of an object&#39;s <a href=\"../Topic/COM%20Callable%20Wrapper.md\" data-linktype=\"relative-path\">COM Callable Wrapper</a> (CCW) handle.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_CleanupUnusedObjectsInCurrentContext\" data-linktype=\"self-bookmark\">CleanupUnusedObjectsInCurrentContext()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Notifies the runtime to clean up all <a href=\"../Topic/Runtime%20Callable%20Wrapper.md\" data-linktype=\"relative-path\">Runtime Callable Wrappers</a> (RCWs) allocated in the current context.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_Copy_System_Byte___System_Int32_System_IntPtr_System_Int32_\" data-linktype=\"self-bookmark\">Copy(Byte[],Int32,IntPtr,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies data from a one-dimensional, managed 8-bit unsigned integer array to an unmanaged memory pointer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_Copy_System_Char___System_Int32_System_IntPtr_System_Int32_\" data-linktype=\"self-bookmark\">Copy(Char[],Int32,IntPtr,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies data from a one-dimensional, managed character array to an unmanaged memory pointer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_Copy_System_Double___System_Int32_System_IntPtr_System_Int32_\" data-linktype=\"self-bookmark\">Copy(Double[],Int32,IntPtr,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies data from a one-dimensional, managed double-precision floating-point number array to an unmanaged memory pointer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_Copy_System_Int16___System_Int32_System_IntPtr_System_Int32_\" data-linktype=\"self-bookmark\">Copy(Int16[],Int32,IntPtr,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies data from a one-dimensional, managed 16-bit signed integer array to an unmanaged memory pointer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_Copy_System_Int32___System_Int32_System_IntPtr_System_Int32_\" data-linktype=\"self-bookmark\">Copy(Int32[],Int32,IntPtr,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies data from a one-dimensional, managed 32-bit signed integer array to an unmanaged memory pointer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_Copy_System_Int64___System_Int32_System_IntPtr_System_Int32_\" data-linktype=\"self-bookmark\">Copy(Int64[],Int32,IntPtr,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies data from a one-dimensional, managed 64-bit signed integer array to an unmanaged memory pointer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_Copy_System_IntPtr_System_Byte___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">Copy(IntPtr,Byte[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies data from an unmanaged memory pointer to a managed 8-bit unsigned integer array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_Copy_System_IntPtr_System_Char___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">Copy(IntPtr,Char[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies data from an unmanaged memory pointer to a managed character array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_Copy_System_IntPtr_System_Double___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">Copy(IntPtr,Double[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies data from an unmanaged memory pointer to a managed double-precision floating-point number array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_Copy_System_IntPtr_System_Int16___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">Copy(IntPtr,Int16[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies data from an unmanaged memory pointer to a managed 16-bit signed integer array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_Copy_System_IntPtr_System_Int32___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">Copy(IntPtr,Int32[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies data from an unmanaged memory pointer to a managed 32-bit signed integer array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_Copy_System_IntPtr_System_Int64___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">Copy(IntPtr,Int64[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies data from an unmanaged memory pointer to a managed 64-bit signed integer array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_Copy_System_IntPtr_System_IntPtr___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">Copy(IntPtr,IntPtr[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies data from an unmanaged memory pointer to a managed <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a> array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_Copy_System_IntPtr_System_Single___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">Copy(IntPtr,Single[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies data from an unmanaged memory pointer to a managed single-precision floating-point number array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_Copy_System_IntPtr___System_Int32_System_IntPtr_System_Int32_\" data-linktype=\"self-bookmark\">Copy(IntPtr[],Int32,IntPtr,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies data from a one-dimensional, managed <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a> array to an unmanaged memory pointer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_Copy_System_Single___System_Int32_System_IntPtr_System_Int32_\" data-linktype=\"self-bookmark\">Copy(Single[],Int32,IntPtr,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies data from a one-dimensional, managed single-precision floating-point number array to an unmanaged memory pointer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_CreateAggregatedObject_System_IntPtr_System_Object_\" data-linktype=\"self-bookmark\">CreateAggregatedObject(IntPtr,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Aggregates a managed object with the specified COM object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_CreateAggregatedObject__1_System_IntPtr___0_\" data-linktype=\"self-bookmark\">CreateAggregatedObject&lt;T&gt;(IntPtr,T)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>[Supported in the .NET Framework 4.5.1 and later versions]  </p>\n<p> Aggregates a managed object of the specified type with the specified COM object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_CreateWrapperOfType_System_Object_System_Type_\" data-linktype=\"self-bookmark\">CreateWrapperOfType(Object,Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Wraps the specified COM object in an object of the specified type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_CreateWrapperOfType__2___0_\" data-linktype=\"self-bookmark\">CreateWrapperOfType&lt;T,TWrapper&gt;(T)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>[Supported in the .NET Framework 4.5.1 and later versions]  </p>\n<p> Wraps the specified COM object in an object of the specified type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_DestroyStructure_System_IntPtr_System_Type_\" data-linktype=\"self-bookmark\">DestroyStructure(IntPtr,Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Frees all substructures that the specified unmanaged memory block points to.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_DestroyStructure__1_System_IntPtr_\" data-linktype=\"self-bookmark\">DestroyStructure&lt;T&gt;(IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>[Supported in the .NET Framework 4.5.1 and later versions]  </p>\n<p> Frees all substructures of a specified type that the specified unmanaged memory block points to.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_FinalReleaseComObject_System_Object_\" data-linktype=\"self-bookmark\">FinalReleaseComObject(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases all references to a <a href=\"../Topic/Runtime%20Callable%20Wrapper.md\" data-linktype=\"relative-path\">Runtime Callable Wrapper</a> (RCW) by setting its reference count to 0.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_FreeBSTR_System_IntPtr_\" data-linktype=\"self-bookmark\">FreeBSTR(IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Frees a <code>BSTR</code> using the COM <a href=\"http://go.microsoft.com/fwlink/?LinkID=148633\" data-linktype=\"external\">SysFreeString</a> function.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_FreeCoTaskMem_System_IntPtr_\" data-linktype=\"self-bookmark\">FreeCoTaskMem(IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Frees a block of memory allocated by the unmanaged COM task memory allocator.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_FreeHGlobal_System_IntPtr_\" data-linktype=\"self-bookmark\">FreeHGlobal(IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Frees memory previously allocated from the unmanaged memory of the process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_GenerateGuidForType_System_Type_\" data-linktype=\"self-bookmark\">GenerateGuidForType(Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the globally unique identifier (GUID) for the specified type, or generates a GUID using the algorithm used by the Type Library Exporter (Tlbexp.exe).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_GenerateProgIdForType_System_Type_\" data-linktype=\"self-bookmark\">GenerateProgIdForType(Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a programmatic identifier (ProgID) for the specified type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_GetActiveObject_System_String_\" data-linktype=\"self-bookmark\">GetActiveObject(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Obtains a running instance of the specified object from the running object table (ROT).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_GetComInterfaceForObject_System_Object_System_Type_\" data-linktype=\"self-bookmark\">GetComInterfaceForObject(Object,Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a pointer to an <a href=\"http://go.microsoft.com/fwlink/?LinkId=148003\" data-linktype=\"external\">IUnknown</a> interface that represents the specified interface on the specified object. Custom query interface access is enabled by default.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_GetComInterfaceForObject_System_Object_System_Type_System_Runtime_InteropServices_CustomQueryInterfaceMode_\" data-linktype=\"self-bookmark\">GetComInterfaceForObject(Object,Type,CustomQueryInterfaceMode)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a pointer to an <a href=\"http://go.microsoft.com/fwlink/?LinkId=148003\" data-linktype=\"external\">IUnknown</a> interface that represents the specified interface on the specified object. Custom query interface access is controlled by the specified customization mode.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_GetComInterfaceForObject__2___0_\" data-linktype=\"self-bookmark\">GetComInterfaceForObject&lt;T,TInterface&gt;(T)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>[Supported in the .NET Framework 4.5.1 and later versions]  </p>\n<p> Returns a pointer to an <a href=\"http://go.microsoft.com/fwlink/?LinkId=148003\" data-linktype=\"external\">IUnknown</a> interface that represents the specified interface on an object of the specified type. Custom query interface access is enabled by default.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_GetComInterfaceForObjectInContext_System_Object_System_Type_\" data-linktype=\"self-bookmark\">GetComInterfaceForObjectInContext(Object,Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an interface pointer that represents the specified interface for an object, if the caller is in the same context as that object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_GetComObjectData_System_Object_System_Object_\" data-linktype=\"self-bookmark\">GetComObjectData(Object,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves data that is referenced by the specified key from the specified COM object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_GetComSlotForMethodInfo_System_Reflection_MemberInfo_\" data-linktype=\"self-bookmark\">GetComSlotForMethodInfo(MemberInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the virtual function table (v-table or VTBL) slot for a specified <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> type when that type is exposed to COM.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_GetDelegateForFunctionPointer_System_IntPtr_System_Type_\" data-linktype=\"self-bookmark\">GetDelegateForFunctionPointer(IntPtr,Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts an unmanaged function pointer to a delegate.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_GetDelegateForFunctionPointer__1_System_IntPtr_\" data-linktype=\"self-bookmark\">GetDelegateForFunctionPointer&lt;TDelegate&gt;(IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>[Supported in the .NET Framework 4.5.1 and later versions]  </p>\n<p> Converts an unmanaged function pointer to a delegate of a specified type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_GetEndComSlot_System_Type_\" data-linktype=\"self-bookmark\">GetEndComSlot(Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the last slot in the virtual function table (v-table or VTBL) of a type when exposed to COM.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_GetExceptionCode\" data-linktype=\"self-bookmark\">GetExceptionCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves a code that identifies the type of the exception that occurred.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_GetExceptionForHR_System_Int32_\" data-linktype=\"self-bookmark\">GetExceptionForHR(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified HRESULT error code to a corresponding <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_GetExceptionForHR_System_Int32_System_IntPtr_\" data-linktype=\"self-bookmark\">GetExceptionForHR(Int32,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified HRESULT error code to a corresponding <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> object, with additional error information passed in an <a href=\"http://msdn.microsoft.com/en-us/4dda6909-2d9a-4727-ae0c-b5f90dcfa447\" data-linktype=\"external\">IErrorInfo</a> interface for the exception object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_GetExceptionPointers\" data-linktype=\"self-bookmark\">GetExceptionPointers()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves a computer-independent description of an exception, and information about the state that existed for the thread when the exception occurred.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_GetFunctionPointerForDelegate_System_Delegate_\" data-linktype=\"self-bookmark\">GetFunctionPointerForDelegate(Delegate)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts a delegate into a function pointer that is callable from unmanaged code.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_GetFunctionPointerForDelegate__1___0_\" data-linktype=\"self-bookmark\">GetFunctionPointerForDelegate&lt;TDelegate&gt;(TDelegate)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>[Supported in the .NET Framework 4.5.1 and later versions]  </p>\n<p> Converts a delegate of a specified type to a function pointer that is callable from unmanaged code.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_GetHINSTANCE_System_Reflection_Module_\" data-linktype=\"self-bookmark\">GetHINSTANCE(Module)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the instance handle (HINSTANCE) for the specified module.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_GetHRForException_System_Exception_\" data-linktype=\"self-bookmark\">GetHRForException(Exception)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified exception to an HRESULT.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_GetHRForLastWin32Error\" data-linktype=\"self-bookmark\">GetHRForLastWin32Error()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the HRESULT corresponding to the last error incurred by Win32 code executed using <a class=\"xref\" href=\"system.runtime.interopservices.marshal\" data-linktype=\"relative-path\">Marshal</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_GetIDispatchForObject_System_Object_\" data-linktype=\"self-bookmark\">GetIDispatchForObject(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an <a href=\"http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5\" data-linktype=\"external\">IDispatch</a> interface from a managed object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_GetIDispatchForObjectInContext_System_Object_\" data-linktype=\"self-bookmark\">GetIDispatchForObjectInContext(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an <a href=\"http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5\" data-linktype=\"external\">IDispatch</a> interface pointer from a managed object, if the caller is in the same context as that object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_GetITypeInfoForType_System_Type_\" data-linktype=\"self-bookmark\">GetITypeInfoForType(Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <a class=\"xref\" href=\"system.runtime.interopservices.comtypes.itypeinfo\" data-linktype=\"relative-path\">ITypeInfo</a> interface from a managed type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_GetIUnknownForObject_System_Object_\" data-linktype=\"self-bookmark\">GetIUnknownForObject(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an <a href=\"http://go.microsoft.com/fwlink/?LinkId=148003\" data-linktype=\"external\">IUnknown</a> interface from a managed object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_GetIUnknownForObjectInContext_System_Object_\" data-linktype=\"self-bookmark\">GetIUnknownForObjectInContext(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an <a href=\"http://go.microsoft.com/fwlink/?LinkId=148003\" data-linktype=\"external\">IUnknown</a> interface from a managed object, if the caller is in the same context as that object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_GetLastWin32Error\" data-linktype=\"self-bookmark\">GetLastWin32Error()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the error code returned by the last unmanaged function that was called using platform invoke that has the <a class=\"xref\" href=\"system.runtime.interopservices.dllimportattribute#System_Runtime_InteropServices_DllImportAttribute_SetLastError\" data-linktype=\"relative-path\">SetLastError</a> flag set.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_GetManagedThunkForUnmanagedMethodPtr_System_IntPtr_System_IntPtr_System_Int32_\" data-linktype=\"self-bookmark\">GetManagedThunkForUnmanagedMethodPtr(IntPtr,IntPtr,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a pointer to a runtime-generated function that marshals a call from managed to unmanaged code.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_GetMethodInfoForComSlot_System_Type_System_Int32_System_Runtime_InteropServices_ComMemberType__\" data-linktype=\"self-bookmark\">GetMethodInfoForComSlot(Type,Int32,ComMemberType)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves a <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> object for the specified virtual function table (v-table or VTBL) slot.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_GetNativeVariantForObject_System_Object_System_IntPtr_\" data-linktype=\"self-bookmark\">GetNativeVariantForObject(Object,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts an object to a COM VARIANT.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_GetNativeVariantForObject__1___0_System_IntPtr_\" data-linktype=\"self-bookmark\">GetNativeVariantForObject&lt;T&gt;(T,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>[Supported in the .NET Framework 4.5.1 and later versions]  </p>\n<p> Converts an object of a specified type to a COM VARIANT.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_GetObjectForIUnknown_System_IntPtr_\" data-linktype=\"self-bookmark\">GetObjectForIUnknown(IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an instance of a type that represents a COM object by a pointer to its <a href=\"http://go.microsoft.com/fwlink/?LinkId=148003\" data-linktype=\"external\">IUnknown</a> interface.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_GetObjectForNativeVariant_System_IntPtr_\" data-linktype=\"self-bookmark\">GetObjectForNativeVariant(IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts a COM VARIANT to an object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_GetObjectForNativeVariant__1_System_IntPtr_\" data-linktype=\"self-bookmark\">GetObjectForNativeVariant&lt;T&gt;(IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>[Supported in the .NET Framework 4.5.1 and later versions]  </p>\n<p> Converts a COM VARIANT to an object of a specified type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_GetObjectsForNativeVariants_System_IntPtr_System_Int32_\" data-linktype=\"self-bookmark\">GetObjectsForNativeVariants(IntPtr,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts an array of COM <a href=\"http://go.microsoft.com/fwlink/?LinkId=148670\" data-linktype=\"external\">VARIANTs</a> to an array of objects.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_GetObjectsForNativeVariants__1_System_IntPtr_System_Int32_\" data-linktype=\"self-bookmark\">GetObjectsForNativeVariants&lt;T&gt;(IntPtr,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>[Supported in the .NET Framework 4.5.1 and later versions]  </p>\n<p> Converts an array of COM VARIANTs to an array of a specified type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_GetStartComSlot_System_Type_\" data-linktype=\"self-bookmark\">GetStartComSlot(Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the first slot in the virtual function table (v-table or VTBL) that contains user-defined methods.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_GetThreadFromFiberCookie_System_Int32_\" data-linktype=\"self-bookmark\">GetThreadFromFiberCookie(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts a fiber cookie into the corresponding <a class=\"xref\" href=\"system.threading.thread\" data-linktype=\"relative-path\">Thread</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_GetTypedObjectForIUnknown_System_IntPtr_System_Type_\" data-linktype=\"self-bookmark\">GetTypedObjectForIUnknown(IntPtr,Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a managed object of a specified type that represents a COM object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_GetTypeForITypeInfo_System_IntPtr_\" data-linktype=\"self-bookmark\">GetTypeForITypeInfo(IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts an unmanaged <a href=\"http://msdn.microsoft.com/en-us/f3356463-3373-4279-bae1-953378aa2680\" data-linktype=\"external\">ITypeInfo</a> object into a managed <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_GetTypeFromCLSID_System_Guid_\" data-linktype=\"self-bookmark\">GetTypeFromCLSID(Guid)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the type associated with the specified class identifier (CLSID).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_GetTypeInfoName_System_Runtime_InteropServices_ComTypes_ITypeInfo_\" data-linktype=\"self-bookmark\">GetTypeInfoName(ITypeInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the name of the type represented by an <a href=\"http://msdn.microsoft.com/en-us/f3356463-3373-4279-bae1-953378aa2680\" data-linktype=\"external\">ITypeInfo</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_GetTypeInfoName_System_Runtime_InteropServices_UCOMITypeInfo_\" data-linktype=\"self-bookmark\">GetTypeInfoName(UCOMITypeInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the name of the type represented by an <a href=\"http://msdn.microsoft.com/en-us/f3356463-3373-4279-bae1-953378aa2680\" data-linktype=\"external\">ITypeInfo</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_GetTypeLibGuid_System_Runtime_InteropServices_ComTypes_ITypeLib_\" data-linktype=\"self-bookmark\">GetTypeLibGuid(ITypeLib)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the library identifier (LIBID) of a type library.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_GetTypeLibGuid_System_Runtime_InteropServices_UCOMITypeLib_\" data-linktype=\"self-bookmark\">GetTypeLibGuid(UCOMITypeLib)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the library identifier (LIBID) of a type library.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_GetTypeLibGuidForAssembly_System_Reflection_Assembly_\" data-linktype=\"self-bookmark\">GetTypeLibGuidForAssembly(Assembly)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the library identifier (LIBID) that is assigned to a type library when it was exported from the specified assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_GetTypeLibLcid_System_Runtime_InteropServices_ComTypes_ITypeLib_\" data-linktype=\"self-bookmark\">GetTypeLibLcid(ITypeLib)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the LCID of a type library.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_GetTypeLibLcid_System_Runtime_InteropServices_UCOMITypeLib_\" data-linktype=\"self-bookmark\">GetTypeLibLcid(UCOMITypeLib)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the LCID of a type library.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_GetTypeLibName_System_Runtime_InteropServices_ComTypes_ITypeLib_\" data-linktype=\"self-bookmark\">GetTypeLibName(ITypeLib)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the name of a type library.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_GetTypeLibName_System_Runtime_InteropServices_UCOMITypeLib_\" data-linktype=\"self-bookmark\">GetTypeLibName(UCOMITypeLib)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the name of a type library.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_GetTypeLibVersionForAssembly_System_Reflection_Assembly_System_Int32__System_Int32__\" data-linktype=\"self-bookmark\">GetTypeLibVersionForAssembly(Assembly,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the version number of a type library that will be exported from the specified assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_GetUniqueObjectForIUnknown_System_IntPtr_\" data-linktype=\"self-bookmark\">GetUniqueObjectForIUnknown(IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a unique <a href=\"../Topic/Runtime%20Callable%20Wrapper.md\" data-linktype=\"relative-path\">Runtime Callable Wrapper</a> (RCW) object for a given <a href=\"http://go.microsoft.com/fwlink/?LinkId=148003\" data-linktype=\"external\">IUnknown</a> interface.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_GetUnmanagedThunkForManagedMethodPtr_System_IntPtr_System_IntPtr_System_Int32_\" data-linktype=\"self-bookmark\">GetUnmanagedThunkForManagedMethodPtr(IntPtr,IntPtr,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a pointer to a runtime-generated function that marshals a call from unmanaged to managed code.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_IsComObject_System_Object_\" data-linktype=\"self-bookmark\">IsComObject(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether a specified object represents a COM object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_IsTypeVisibleFromCom_System_Type_\" data-linktype=\"self-bookmark\">IsTypeVisibleFromCom(Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether a type is visible to COM clients.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_NumParamBytes_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">NumParamBytes(MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calculates the number of bytes in unmanaged memory that are required to hold the parameters for the specified method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_OffsetOf_System_Type_System_String_\" data-linktype=\"self-bookmark\">OffsetOf(Type,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the field offset of the unmanaged form of the managed class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_OffsetOf__1_System_String_\" data-linktype=\"self-bookmark\">OffsetOf&lt;T&gt;(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>[Supported in the .NET Framework 4.5.1 and later versions]  </p>\n<p> Returns the field offset of the unmanaged form of a specified managed class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_Prelink_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">Prelink(MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes one-time method setup tasks without calling the method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_PrelinkAll_System_Type_\" data-linktype=\"self-bookmark\">PrelinkAll(Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Performs a pre-link check for all methods on a class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_PtrToStringAnsi_System_IntPtr_\" data-linktype=\"self-bookmark\">PtrToStringAnsi(IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies all characters up to the first null character from an unmanaged ANSI string to a managed <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, and widens each ANSI character to Unicode.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_PtrToStringAnsi_System_IntPtr_System_Int32_\" data-linktype=\"self-bookmark\">PtrToStringAnsi(IntPtr,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Allocates a managed <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, copies a specified number of characters from an unmanaged ANSI string into it, and widens each ANSI character to Unicode.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_PtrToStringAuto_System_IntPtr_\" data-linktype=\"self-bookmark\">PtrToStringAuto(IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Allocates a managed <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> and copies all characters up to the first null character from a string stored in unmanaged memory into it.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_PtrToStringAuto_System_IntPtr_System_Int32_\" data-linktype=\"self-bookmark\">PtrToStringAuto(IntPtr,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Allocates a managed <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> and copies the specified number of characters from a string stored in unmanaged memory into it.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_PtrToStringBSTR_System_IntPtr_\" data-linktype=\"self-bookmark\">PtrToStringBSTR(IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Allocates a managed <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> and copies a <a href=\"https://msdn.microsoft.com/library/ms221069(v=vs.85).aspx\" data-linktype=\"external\">binary string (BSTR)</a> stored in unmanaged memory into it.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_PtrToStringUni_System_IntPtr_\" data-linktype=\"self-bookmark\">PtrToStringUni(IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Allocates a managed <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> and copies all characters up to the first null character from an unmanaged Unicode string into it.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_PtrToStringUni_System_IntPtr_System_Int32_\" data-linktype=\"self-bookmark\">PtrToStringUni(IntPtr,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Allocates a managed <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> and copies a specified number of characters from an unmanaged Unicode string into it.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_PtrToStructure_System_IntPtr_System_Object_\" data-linktype=\"self-bookmark\">PtrToStructure(IntPtr,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Marshals data from an unmanaged block of memory to a managed object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_PtrToStructure_System_IntPtr_System_Type_\" data-linktype=\"self-bookmark\">PtrToStructure(IntPtr,Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Marshals data from an unmanaged block of memory to a newly allocated managed object of the specified type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_PtrToStructure__1_System_IntPtr_\" data-linktype=\"self-bookmark\">PtrToStructure&lt;T&gt;(IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>[Supported in the .NET Framework 4.5.1 and later versions]  </p>\n<p> Marshals data from an unmanaged block of memory to a newly allocated managed object of the type specified by a generic type parameter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_PtrToStructure__1_System_IntPtr___0_\" data-linktype=\"self-bookmark\">PtrToStructure&lt;T&gt;(IntPtr,T)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>[Supported in the .NET Framework 4.5.1 and later versions]  </p>\n<p> Marshals data from an unmanaged block of memory to a managed object of the specified type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_QueryInterface_System_IntPtr_System_Guid__System_IntPtr__\" data-linktype=\"self-bookmark\">QueryInterface(IntPtr,Guid,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Requests a pointer to a specified interface from a COM object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_ReadByte_System_IntPtr_\" data-linktype=\"self-bookmark\">ReadByte(IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads a single byte from unmanaged memory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_ReadByte_System_IntPtr_System_Int32_\" data-linktype=\"self-bookmark\">ReadByte(IntPtr,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads a single byte at a given offset (or index) from unmanaged memory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_ReadByte_System_Object_System_Int32_\" data-linktype=\"self-bookmark\">ReadByte(Object,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads a single byte at a given offset (or index) from unmanaged memory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_ReadInt16_System_IntPtr_\" data-linktype=\"self-bookmark\">ReadInt16(IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads a 16-bit signed integer from unmanaged memory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_ReadInt16_System_IntPtr_System_Int32_\" data-linktype=\"self-bookmark\">ReadInt16(IntPtr,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads a 16-bit signed integer at a given offset from unmanaged memory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_ReadInt16_System_Object_System_Int32_\" data-linktype=\"self-bookmark\">ReadInt16(Object,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads a 16-bit signed integer at a given offset from unmanaged memory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_ReadInt32_System_IntPtr_\" data-linktype=\"self-bookmark\">ReadInt32(IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads a 32-bit signed integer from unmanaged memory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_ReadInt32_System_IntPtr_System_Int32_\" data-linktype=\"self-bookmark\">ReadInt32(IntPtr,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads a 32-bit signed integer at a given offset from unmanaged memory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_ReadInt32_System_Object_System_Int32_\" data-linktype=\"self-bookmark\">ReadInt32(Object,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads a 32-bit signed integer at a given offset from unmanaged memory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_ReadInt64_System_IntPtr_\" data-linktype=\"self-bookmark\">ReadInt64(IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads a 64-bit signed integer from unmanaged memory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_ReadInt64_System_IntPtr_System_Int32_\" data-linktype=\"self-bookmark\">ReadInt64(IntPtr,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads a 64-bit signed integer at a given offset from unmanaged memory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_ReadInt64_System_Object_System_Int32_\" data-linktype=\"self-bookmark\">ReadInt64(Object,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads a 64-bit signed integer at a given offset from unmanaged memory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_ReadIntPtr_System_IntPtr_\" data-linktype=\"self-bookmark\">ReadIntPtr(IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads a processor native-sized integer from unmanaged memory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_ReadIntPtr_System_IntPtr_System_Int32_\" data-linktype=\"self-bookmark\">ReadIntPtr(IntPtr,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads a processor native sized integer at a given offset from unmanaged memory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_ReadIntPtr_System_Object_System_Int32_\" data-linktype=\"self-bookmark\">ReadIntPtr(Object,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads a processor native sized integer from unmanaged memory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_ReAllocCoTaskMem_System_IntPtr_System_Int32_\" data-linktype=\"self-bookmark\">ReAllocCoTaskMem(IntPtr,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Resizes a block of memory previously allocated with <span class=\"xref\">stem.Runtime.InteropServices.Marshal.AllocCoTaskMem*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_ReAllocHGlobal_System_IntPtr_System_IntPtr_\" data-linktype=\"self-bookmark\">ReAllocHGlobal(IntPtr,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Resizes a block of memory previously allocated with <span class=\"xref\">stem.Runtime.InteropServices.Marshal.AllocHGlobal*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_Release_System_IntPtr_\" data-linktype=\"self-bookmark\">Release(IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Decrements the reference count on the specified interface.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_ReleaseComObject_System_Object_\" data-linktype=\"self-bookmark\">ReleaseComObject(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Decrements the reference count of the <a href=\"../Topic/Runtime%20Callable%20Wrapper.md\" data-linktype=\"relative-path\">Runtime Callable Wrapper</a> (RCW) associated with the specified COM object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_ReleaseThreadCache\" data-linktype=\"self-bookmark\">ReleaseThreadCache()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases the thread cache.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_SecureStringToBSTR_System_Security_SecureString_\" data-linktype=\"self-bookmark\">SecureStringToBSTR(SecureString)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Allocates an unmanaged <a href=\"https://msdn.microsoft.com/library/ms221069(v=vs.85).aspx\" data-linktype=\"external\">binary string (BSTR)</a> and copies the contents of a managed <a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a> object into it.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_SecureStringToCoTaskMemAnsi_System_Security_SecureString_\" data-linktype=\"self-bookmark\">SecureStringToCoTaskMemAnsi(SecureString)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies the contents of a managed <a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a> object to a block of memory allocated from the unmanaged COM task allocator.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_SecureStringToCoTaskMemUnicode_System_Security_SecureString_\" data-linktype=\"self-bookmark\">SecureStringToCoTaskMemUnicode(SecureString)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies the contents of a managed <a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a> object to a block of memory allocated from the unmanaged COM task allocator.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_SecureStringToGlobalAllocAnsi_System_Security_SecureString_\" data-linktype=\"self-bookmark\">SecureStringToGlobalAllocAnsi(SecureString)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies the contents of a managed <a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a> into unmanaged memory, converting into ANSI format as it copies.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_SecureStringToGlobalAllocUnicode_System_Security_SecureString_\" data-linktype=\"self-bookmark\">SecureStringToGlobalAllocUnicode(SecureString)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies the contents of a managed <a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a> object into unmanaged memory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_SetComObjectData_System_Object_System_Object_System_Object_\" data-linktype=\"self-bookmark\">SetComObjectData(Object,Object,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets data referenced by the specified key in the specified COM object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_SizeOf_System_Object_\" data-linktype=\"self-bookmark\">SizeOf(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the unmanaged size of an object in bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_SizeOf_System_Type_\" data-linktype=\"self-bookmark\">SizeOf(Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the size of an unmanaged type in bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_SizeOf__1\" data-linktype=\"self-bookmark\">SizeOf&lt;T&gt;()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>[Supported in the .NET Framework 4.5.1 and later versions]  </p>\n<p> Returns the size of an unmanaged type in bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_SizeOf__1___0_\" data-linktype=\"self-bookmark\">SizeOf&lt;T&gt;(T)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>[Supported in the .NET Framework 4.5.1 and later versions]  </p>\n<p> Returns the unmanaged size of an object of a specified type in bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_StringToBSTR_System_String_\" data-linktype=\"self-bookmark\">StringToBSTR(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Allocates a <a href=\"https://msdn.microsoft.com/library/ms221069.aspx\" data-linktype=\"external\">BSTR</a> and copies the contents of a managed <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> into it.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_StringToCoTaskMemAnsi_System_String_\" data-linktype=\"self-bookmark\">StringToCoTaskMemAnsi(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies the contents of a managed <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> to a block of memory allocated from the unmanaged COM task allocator.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_StringToCoTaskMemAuto_System_String_\" data-linktype=\"self-bookmark\">StringToCoTaskMemAuto(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies the contents of a managed <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> to a block of memory allocated from the unmanaged COM task allocator.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_StringToCoTaskMemUni_System_String_\" data-linktype=\"self-bookmark\">StringToCoTaskMemUni(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies the contents of a managed <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> to a block of memory allocated from the unmanaged COM task allocator.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_StringToHGlobalAnsi_System_String_\" data-linktype=\"self-bookmark\">StringToHGlobalAnsi(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies the contents of a managed <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> into unmanaged memory, converting into ANSI format as it copies.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_StringToHGlobalAuto_System_String_\" data-linktype=\"self-bookmark\">StringToHGlobalAuto(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies the contents of a managed <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> into unmanaged memory, converting into ANSI format if required.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_StringToHGlobalUni_System_String_\" data-linktype=\"self-bookmark\">StringToHGlobalUni(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies the contents of a managed <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> into unmanaged memory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_StructureToPtr_System_Object_System_IntPtr_System_Boolean_\" data-linktype=\"self-bookmark\">StructureToPtr(Object,IntPtr,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Marshals data from a managed object to an unmanaged block of memory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_StructureToPtr__1___0_System_IntPtr_System_Boolean_\" data-linktype=\"self-bookmark\">StructureToPtr&lt;T&gt;(T,IntPtr,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>[Supported in the .NET Framework 4.5.1 and later versions]  </p>\n<p> Marshals data from a managed object of a specified type to an unmanaged block of memory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_ThrowExceptionForHR_System_Int32_\" data-linktype=\"self-bookmark\">ThrowExceptionForHR(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Throws an exception with a specific failure HRESULT value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_ThrowExceptionForHR_System_Int32_System_IntPtr_\" data-linktype=\"self-bookmark\">ThrowExceptionForHR(Int32,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Throws an exception with a specific failure HRESULT, based on the specified <a href=\"https://msdn.microsoft.com/library/ms221233(v=vs.85).aspx\" data-linktype=\"external\">IErrorInfo</a> interface.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_UnsafeAddrOfPinnedArrayElement_System_Array_System_Int32_\" data-linktype=\"self-bookmark\">UnsafeAddrOfPinnedArrayElement(Array,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the address of the element at the specified index inside the specified array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_UnsafeAddrOfPinnedArrayElement__1___0___System_Int32_\" data-linktype=\"self-bookmark\">UnsafeAddrOfPinnedArrayElement&lt;T&gt;(T[],Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>[Supported in the .NET Framework 4.5.1 and later versions]  </p>\n<p> Gets the address of the element at the specified index in an array of a specified type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_WriteByte_System_IntPtr_System_Byte_\" data-linktype=\"self-bookmark\">WriteByte(IntPtr,Byte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a single byte value to unmanaged memory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_WriteByte_System_IntPtr_System_Int32_System_Byte_\" data-linktype=\"self-bookmark\">WriteByte(IntPtr,Int32,Byte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a single byte value to unmanaged memory at a specified offset.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_WriteByte_System_Object_System_Int32_System_Byte_\" data-linktype=\"self-bookmark\">WriteByte(Object,Int32,Byte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a single byte value to unmanaged memory at a specified offset.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_WriteInt16_System_IntPtr_System_Char_\" data-linktype=\"self-bookmark\">WriteInt16(IntPtr,Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a character as a 16-bit integer value to unmanaged memory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_WriteInt16_System_IntPtr_System_Int16_\" data-linktype=\"self-bookmark\">WriteInt16(IntPtr,Int16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a 16-bit integer value to unmanaged memory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_WriteInt16_System_IntPtr_System_Int32_System_Char_\" data-linktype=\"self-bookmark\">WriteInt16(IntPtr,Int32,Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a 16-bit signed integer value to unmanaged memory at a specified offset.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_WriteInt16_System_IntPtr_System_Int32_System_Int16_\" data-linktype=\"self-bookmark\">WriteInt16(IntPtr,Int32,Int16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a 16-bit signed integer value into unmanaged memory at a specified offset.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_WriteInt16_System_Object_System_Int32_System_Char_\" data-linktype=\"self-bookmark\">WriteInt16(Object,Int32,Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a 16-bit signed integer value to unmanaged memory at a specified offset.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_WriteInt16_System_Object_System_Int32_System_Int16_\" data-linktype=\"self-bookmark\">WriteInt16(Object,Int32,Int16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a 16-bit signed integer value to unmanaged memory at a specified offset.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_WriteInt32_System_IntPtr_System_Int32_\" data-linktype=\"self-bookmark\">WriteInt32(IntPtr,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a 32-bit signed integer value to unmanaged memory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_WriteInt32_System_IntPtr_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">WriteInt32(IntPtr,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a 32-bit signed integer value into unmanaged memory at a specified offset.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_WriteInt32_System_Object_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">WriteInt32(Object,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a 32-bit signed integer value to unmanaged memory at a specified offset.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_WriteInt64_System_IntPtr_System_Int64_\" data-linktype=\"self-bookmark\">WriteInt64(IntPtr,Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a 64-bit signed integer value to unmanaged memory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_WriteInt64_System_IntPtr_System_Int32_System_Int64_\" data-linktype=\"self-bookmark\">WriteInt64(IntPtr,Int32,Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a 64-bit signed integer value to unmanaged memory at a specified offset.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_WriteInt64_System_Object_System_Int32_System_Int64_\" data-linktype=\"self-bookmark\">WriteInt64(Object,Int32,Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a 64-bit signed integer value to unmanaged memory at a specified offset.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_WriteIntPtr_System_IntPtr_System_IntPtr_\" data-linktype=\"self-bookmark\">WriteIntPtr(IntPtr,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a processor native sized integer value into unmanaged memory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_WriteIntPtr_System_IntPtr_System_Int32_System_IntPtr_\" data-linktype=\"self-bookmark\">WriteIntPtr(IntPtr,Int32,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a processor native-sized integer value to unmanaged memory at a specified offset.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_WriteIntPtr_System_Object_System_Int32_System_IntPtr_\" data-linktype=\"self-bookmark\">WriteIntPtr(Object,Int32,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a processor native sized integer value to unmanaged memory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_ZeroFreeBSTR_System_IntPtr_\" data-linktype=\"self-bookmark\">ZeroFreeBSTR(IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Frees a <a href=\"https://msdn.microsoft.com/library/ms221069.aspx\" data-linktype=\"external\">BSTR</a> pointer that was allocated using the <span class=\"xref\">stem.Runtime.InteropServices.Marshal.SecureStringToBSTR*</span> method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_ZeroFreeCoTaskMemAnsi_System_IntPtr_\" data-linktype=\"self-bookmark\">ZeroFreeCoTaskMemAnsi(IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Frees an unmanaged string pointer that was allocated using the <span class=\"xref\">stem.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi*</span> method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_ZeroFreeCoTaskMemUnicode_System_IntPtr_\" data-linktype=\"self-bookmark\">ZeroFreeCoTaskMemUnicode(IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Frees an unmanaged string pointer that was allocated using the <span class=\"xref\">stem.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode*</span> method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_ZeroFreeGlobalAllocAnsi_System_IntPtr_\" data-linktype=\"self-bookmark\">ZeroFreeGlobalAllocAnsi(IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Frees an unmanaged string pointer that was allocated using the <span class=\"xref\">stem.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi*</span> method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_Marshal_ZeroFreeGlobalAllocUnicode_System_IntPtr_\" data-linktype=\"self-bookmark\">ZeroFreeGlobalAllocUnicode(IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Frees an unmanaged string pointer that was allocated using the <span class=\"xref\">stem.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode*</span> method.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"fields\">\r\n        <h2>Fields\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_SystemDefaultCharSize\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SystemDefaultCharSize</div>        \r\n          </div>\r\n    \r\n            <p>Represents the default character size on the system; the default is 2 for Unicode systems and 1 for ANSI systems. This field is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly int SystemDefaultCharSize;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the SystemDefaultCharSize field. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.runtime.interopservices.marshal\" data-linktype=\"relative-path\">Marshal</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Marshal#2\">    // Demonstrate the use of public static fields of the Marshal\n    // class.\n    Console::WriteLine(\n        &quot;SystemDefaultCharSize={0},SystemMaxDBCSCharSize={1}&quot;,\n        Marshal::SystemDefaultCharSize,\n        Marshal::SystemMaxDBCSCharSize);\n</code></pre><pre><code class=\"lang-cs\" name=\"Marshal#2\">        // Demonstrate the use of public static fields of the Marshal class.\n        Console.WriteLine(&quot;SystemDefaultCharSize={0}, SystemMaxDBCSCharSize={1}&quot;,\n            Marshal.SystemDefaultCharSize, Marshal.SystemMaxDBCSCharSize);\n</code></pre><pre><code class=\"lang-vb\" name=\"Marshal#2\">        &#39; Demonstrate the use of public static fields of the Marshal class.\n        Console.WriteLine(&quot;SystemDefaultCharSize={0}, SystemMaxDBCSCharSize={1}&quot;, Marshal.SystemDefaultCharSize, Marshal.SystemMaxDBCSCharSize)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_SystemMaxDBCSCharSize\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SystemMaxDBCSCharSize</div>        \r\n          </div>\r\n    \r\n            <p>Represents the maximum size of a double byte character set (DBCS) size, in bytes, for the current operating system. This field is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly int SystemMaxDBCSCharSize;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_SystemDefaultCharSize\" data-linktype=\"relative-path\">SystemDefaultCharSize</a> field. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.runtime.interopservices.marshal\" data-linktype=\"relative-path\">Marshal</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Marshal#2\">    // Demonstrate the use of public static fields of the Marshal\n    // class.\n    Console::WriteLine(\n        &quot;SystemDefaultCharSize={0},SystemMaxDBCSCharSize={1}&quot;,\n        Marshal::SystemDefaultCharSize,\n        Marshal::SystemMaxDBCSCharSize);\n</code></pre><pre><code class=\"lang-cs\" name=\"Marshal#2\">        // Demonstrate the use of public static fields of the Marshal class.\n        Console.WriteLine(&quot;SystemDefaultCharSize={0}, SystemMaxDBCSCharSize={1}&quot;,\n            Marshal.SystemDefaultCharSize, Marshal.SystemMaxDBCSCharSize);\n</code></pre><pre><code class=\"lang-vb\" name=\"Marshal#2\">        &#39; Demonstrate the use of public static fields of the Marshal class.\n        Console.WriteLine(&quot;SystemDefaultCharSize={0}, SystemMaxDBCSCharSize={1}&quot;, Marshal.SystemDefaultCharSize, Marshal.SystemMaxDBCSCharSize)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_AddRef_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_AddRef_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddRef(IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Increments the reference count on the specified interface.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int AddRef (IntPtr pUnk);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>pUnk</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The interface reference count to increment.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The new value of the reference count on the <code>pUnk</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The common language runtime manages the reference count of a COM object for you, making it unnecessary to use this method directly. In rare cases, such as testing a custom marshaler, you might find it necessary to manipulate an object&#39;s lifetime manually. After calling AddRef, you must decrement the reference count by using a method such as <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_Release_\" data-linktype=\"relative-path\">Release</a>. Do not rely on the return value of AddRef, as it can sometimes be unstable.  </p>\n<p> You can call <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_GetComInterfaceForObject_\" data-linktype=\"relative-path\">GetComInterfaceForObject</a>, <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_GetIUnknownForObject_\" data-linktype=\"relative-path\">GetIUnknownForObject</a>, or <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_GetIDispatchForObject_\" data-linktype=\"relative-path\">GetIDispatchForObject</a> to obtain an <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a> value that represents an <a href=\"http://go.microsoft.com/fwlink/?LinkId=148003\" data-linktype=\"external\">IUnknown</a> interface pointer. You can also use these methods and the AddRef method on managed objects to obtain the COM interfaces represented by the managed object&#39;s COM callable wrapper. If you are not familiar with the details of this wrapper type, see <a href=\"../Topic/COM%20Callable%20Wrapper.md\" data-linktype=\"relative-path\">COM Callable Wrapper</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_AllocCoTaskMem_System_Int32_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_AllocCoTaskMem_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AllocCoTaskMem(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Allocates a block of memory of specified size from the COM task memory allocator.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static IntPtr AllocCoTaskMem (int cb);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>cb</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The size of the block of memory to be allocated.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>An integer representing the address of the block of memory allocated. This memory must be released with <span class=\"xref\">stem.Runtime.InteropServices.Marshal.FreeCoTaskMem*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a></div>\r\n                  </div>\r\n                  <p>There is insufficient memory to satisfy the request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>AllocCoTaskMem is one of two memory allocation API methods in the <a class=\"xref\" href=\"system.runtime.interopservices.marshal\" data-linktype=\"relative-path\">Marshal</a> class. (<a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_AllocHGlobal_\" data-linktype=\"relative-path\">AllocHGlobal</a> is the other.) The initial memory content returned is undefined, and the allocated memory can be larger than the requested number of bytes. This method exposes the COM <a href=\"http://go.microsoft.com/fwlink/?LinkId=148626\" data-linktype=\"external\">CoTaskMemAlloc</a> function, which is referred to as the COM task memory allocator.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_AllocHGlobal_System_Int32_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_AllocHGlobal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AllocHGlobal(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Allocates memory from the unmanaged memory of the process by using the specified number of bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static IntPtr AllocHGlobal (int cb);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>cb</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The required number of bytes in memory.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>A pointer to the newly allocated memory. This memory must be released using the <span class=\"xref\">stem.Runtime.InteropServices.Marshal.FreeHGlobal*</span> method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a></div>\r\n                  </div>\r\n                  <p>There is insufficient memory to satisfy the request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_AllocHGlobal_\" data-linktype=\"relative-path\">AllocHGlobal</a> is one of two memory allocation methods in the <a class=\"xref\" href=\"system.runtime.interopservices.marshal\" data-linktype=\"relative-path\">Marshal</a> class. (<a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_AllocCoTaskMem_\" data-linktype=\"relative-path\">AllocCoTaskMem</a> is the other.) This method exposes the Win32 <a href=\"http://go.microsoft.com/fwlink/?LinkId=148628\" data-linktype=\"external\">LocalAlloc</a> function from Kernel32.dll.  </p>\n<p> When AllocHGlobal calls <code>LocalAlloc</code>, it passes a <code>LMEM_FIXED</code> flag, which causes the allocated memory to be locked in place. Also, the allocated memory is not zero-filled.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates calling the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_AllocHGlobal_\" data-linktype=\"relative-path\">AllocHGlobal</a>method. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.runtime.interopservices.marshal\" data-linktype=\"relative-path\">Marshal</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Marshal#4\">    // Demonstrate how to call GlobalAlloc and \n    // GlobalFree using the Marshal class.\n    IntPtr hglobal = Marshal::AllocHGlobal(100);\n    Marshal::FreeHGlobal(hglobal);\n</code></pre><pre><code class=\"lang-cs\" name=\"Marshal#4\">        // Demonstrate how to call GlobalAlloc and \n        // GlobalFree using the Marshal class.\n        IntPtr hglobal = Marshal.AllocHGlobal(100);\n        Marshal.FreeHGlobal(hglobal);\n</code></pre><pre><code class=\"lang-vb\" name=\"Marshal#4\">        &#39; Demonstrate how to call GlobalAlloc and \n        &#39; GlobalFree using the Marshal class.\n        Dim hglobal As IntPtr = Marshal.AllocHGlobal(100)\n        Marshal.FreeHGlobal(hglobal)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_AllocHGlobal_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_AllocHGlobal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AllocHGlobal(IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Allocates memory from the unmanaged memory of the process by using the pointer to the specified number of bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static IntPtr AllocHGlobal (IntPtr cb);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>cb</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The required number of bytes in memory.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>A pointer to the newly allocated memory. This memory must be released using the <span class=\"xref\">stem.Runtime.InteropServices.Marshal.FreeHGlobal*</span> method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a></div>\r\n                  </div>\r\n                  <p>There is insufficient memory to satisfy the request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>AllocHGlobal is one of two memory allocation methods in the <a class=\"xref\" href=\"system.runtime.interopservices.marshal\" data-linktype=\"relative-path\">Marshal</a> class. (<a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_AllocCoTaskMem_\" data-linktype=\"relative-path\">AllocCoTaskMem</a> is the other.) This method exposes the Win32 <a href=\"http://go.microsoft.com/fwlink/?LinkID=148628\" data-linktype=\"external\">LocalAlloc</a> function from Kernel32.dll.  </p>\n<p> When <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_AllocHGlobal_\" data-linktype=\"relative-path\">AllocHGlobal</a> calls <code>LocalAlloc</code>, it passes a <code>LMEM_FIXED</code> flag, which causes the allocated memory to be locked in place. Also, the allocated memory is not zero-filled.  </p>\n<p> For example code, see <a class=\"xref\" href=\"system.runtime.interopservices.marshal\" data-linktype=\"relative-path\">Marshal</a> and <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_AllocHGlobal_\" data-linktype=\"relative-path\">AllocHGlobal</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_AreComObjectsAvailableForCleanup\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_AreComObjectsAvailableForCleanup_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AreComObjectsAvailableForCleanup()</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether runtime callable wrappers (RCWs) from any context are available for cleanup.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool AreComObjectsAvailableForCleanup ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if there are any RCWs available for cleanup; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If there are a lot of references between managed and native code with deep dependency graphs it can take a long time for all the objects to clean up. Each time a GC runs it will free up some number of RCWs, which will in turn release the underlying COM objects. Those COM objects will then release their managed references and make more objects available for cleanup the next time a GC runs, which starts the process over again.  </p>\n<p> The AreComObjectsAvailableForCleanup method provides a way for the application to determine how many cycles of GC.Collect and GC.WaitForPendingFinalizers need to happen in order to clean everything up.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_BindToMoniker_System_String_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_BindToMoniker_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BindToMoniker(String)</div>        \r\n          </div>\r\n    \r\n            <p>Gets an interface pointer identified by the specified moniker.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static object BindToMoniker (string monikerName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>monikerName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The moniker corresponding to the desired interface pointer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>An object containing a reference to the interface pointer identified by the <code>monikerName</code> parameter. A moniker is a name, and in this case, the moniker is defined by an interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.comexception\" data-linktype=\"relative-path\">COMException</a></div>\r\n                  </div>\r\n                  <p>An unrecognized HRESULT was returned by the unmanaged <code>BindToMoniker</code> method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>BindToMoniker exposes the COM <code>BindToMoniker</code> method, which produces an object that you can cast to any COM interface you require. This method provides the same functionality as the <code>GetObject</code> method in Visual Basic 6.0 and Visual Basic 2005.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_ChangeWrapperHandleStrength_System_Object_System_Boolean_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_ChangeWrapperHandleStrength_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ChangeWrapperHandleStrength(Object,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Changes the strength of an object&#39;s <a href=\"../Topic/COM%20Callable%20Wrapper.md\" data-linktype=\"relative-path\">COM Callable Wrapper</a> (CCW) handle.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void ChangeWrapperHandleStrength (object otp, bool fIsWeak);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>otp</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object whose CCW holds a reference counted handle. The handle is strong if the reference count on the CCW is greater than zero; otherwise, it is weak.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>fIsWeak</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to change the strength of the handle on the <code>otp</code> parameter to weak, regardless of its reference count; <code>false</code> to reset the handle strength on <code>otp</code> to be reference counted.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>ChangeWrapperHandleStrength is used for object pooling functionality and should never be called by user code directly.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_CleanupUnusedObjectsInCurrentContext\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_CleanupUnusedObjectsInCurrentContext_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CleanupUnusedObjectsInCurrentContext()</div>        \r\n          </div>\r\n    \r\n            <p>Notifies the runtime to clean up all <a href=\"../Topic/Runtime%20Callable%20Wrapper.md\" data-linktype=\"relative-path\">Runtime Callable Wrappers</a> (RCWs) allocated in the current context.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void CleanupUnusedObjectsInCurrentContext ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The interop system pumps messages while it attempts to clean up RCWs. This ensures that cleanup for single-threaded apartment (STA) RCWs happens in all applications, including applications that do not pump often enough. However, some applications that do pump appropriately are very sensitive to where pumping occurs. When the interop system pumps messages in these applications, in places that are unexpected, , the application can encounter reentrancy issues that are difficult to diagnose. Therefore, applications need to be able to control their own pumping for a particular STA and to control the clean-up of RCWs.  </p>\n<p> However, developers often only control a subset of the threads in their application and thus cannot ensure that all threads are pumping appropriately.  </p>\n<p> To solve this problem:  </p>\n<ol>\n<li><p>Use the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_DisableComObjectEagerCleanup_\" data-linktype=\"relative-path\">DisableComObjectEagerCleanup</a> method to turn off automatic cleanup of RCWs, and the message pumping that occurs, on a per-thread basis. This allows developers to opt out of automatic clean-up, and the corresponding message pumping.  </p>\n</li>\n<li><p>Use the CleanupUnusedObjectsInCurrentContext method to notify the runtime to clean up all RCWs that are allocated in the current context. This companion method allows developers to precisely control when the runtime performs cleanup in the current context.</p>\n</li>\n</ol>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_Copy_System_Byte___System_Int32_System_IntPtr_System_Int32_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_Copy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Copy(Byte[],Int32,IntPtr,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Copies data from a one-dimensional, managed 8-bit unsigned integer array to an unmanaged memory pointer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Copy (byte[] source, int startIndex, IntPtr destination, int length);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional array to copy from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index in the source array where copying should start.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>destination</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The memory pointer to copy to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of array elements to copy.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> and <code>length</code> are not valid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code>, <code>startIndex</code>, <code>destination</code>, or <code>length</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can use this method to copy a subset of a one-dimensional managed array to an unmanaged C-style array.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example copies an array to unmanaged memory by using the Copy overload, and then copies the unmanaged array back to managed memory by using the [Copy(IntPtr, Byte&lt;xref:System.Runtime.InteropServices.Marshal.Copy%28System.IntPtr%2CSystem.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;overload.  </p>\n<pre><code class=\"lang-cs\" name=\"Runtime.InteropServices.Marshal.Copy-byte#1\">using System;\nusing System.Runtime.InteropServices;\n\nclass Example\n{\n\n    static void Main()\n    {\n        // Create a managed array.\n        byte[] managedArray = { 1, 2, 3, 4 };\n\n        // Initialize unmanaged memory to hold the array.\n        int size = Marshal.SizeOf(managedArray[0]) * managedArray.Length;\n\n        IntPtr pnt = Marshal.AllocHGlobal(size);\n\n        try\n        {\n            // Copy the array to unmanaged memory.\n            Marshal.Copy(managedArray, 0, pnt, managedArray.Length);\n\n            // Copy the unmanaged array back to another managed array.\n\n            byte[] managedArray2 = new byte[managedArray.Length];\n\n            Marshal.Copy(pnt, managedArray2, 0, managedArray.Length);\n\n            Console.WriteLine(&quot;The array was copied to unmanaged memory and back.&quot;);\n\n        }\n        finally\n        {\n            // Free the unmanaged memory.\n            Marshal.FreeHGlobal(pnt);\n        }\n        \n\n\n    }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Runtime.InteropServices.Marshal.Copy-byte#1\">Imports System\nImports System.Runtime.InteropServices\n\n\n\nModule Example\n\n\n    Sub Main()\n        &#39; Create a managed array.\n        Dim managedArray As Byte() = {1, 2, 3, 4}\n\n        &#39; Initialize unmanaged memory to hold the array.\n        Dim size As Integer = Marshal.SizeOf(managedArray(0)) * managedArray.Length\n\n        Dim pnt As IntPtr = Marshal.AllocHGlobal(size)\n\n        Try\n            &#39; Copy the array to unmanaged memory.\n            Marshal.Copy(managedArray, 0, pnt, managedArray.Length)\n\n            &#39; Copy the unmanaged array back to another managed array.\n            Dim managedArray2(managedArray.Length) As Byte\n\n            Marshal.Copy(pnt, managedArray2, 0, managedArray.Length)\n\n            Console.WriteLine(&quot;The array was copied to unmanaged memory and back.&quot;)\n\n        Finally\n            &#39; Free the unmanaged memory.\n            Marshal.FreeHGlobal(pnt)\n        End Try\n\n    End Sub\nEnd Module\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_Copy_System_Char___System_Int32_System_IntPtr_System_Int32_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_Copy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Copy(Char[],Int32,IntPtr,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Copies data from a one-dimensional, managed character array to an unmanaged memory pointer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Copy (char[] source, int startIndex, IntPtr destination, int length);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional array to copy from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index in the source array where copying should start.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>destination</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The memory pointer to copy to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of array elements to copy.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> and <code>length</code> are not valid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code>, <code>destination</code>, or <code>length</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can use this method to copy a subset of a one-dimensional managed array to an unmanaged C-style array.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example copies an array to unmanaged memory and then copies the unmanaged array back to managed memory.  </p>\n<pre><code class=\"lang-cs\" name=\"Runtime.InteropServices.Marshal.Copy-char#1\">// Remember that the actual size of System.Char in unmanaged memory is 2.\nusing System;\nusing System.Runtime.InteropServices;\n\nclass Example\n{\n\n    static void Main()\n    {\n        // Create a managed array.\n        char[] managedArray = new char[1000];\n        managedArray[0] = &#39;a&#39;;\n        managedArray[1] = &#39;b&#39;;\n        managedArray[2] = &#39;c&#39;;\n        managedArray[3] = &#39;d&#39;;\n        managedArray[999] = &#39;Z&#39;;\n\n        // Initialize unmanaged memory to hold the array.\n        // int size = Marshal.SizeOf(managedArray[0]) * managedArray.Length;  // Incorrect\n        int size = Marshal.SystemDefaultCharSize * managedArray.Length;       // Correct\n\n\n        IntPtr pnt = Marshal.AllocHGlobal(size);\n\n        try\n        {\n            // Copy the array to unmanaged memory.\n            Marshal.Copy(managedArray, 0, pnt, managedArray.Length);\n\n            // Copy the unmanaged array back to another managed array.\n\n            char[] managedArray2 = new char[managedArray.Length];\n\n            Marshal.Copy(pnt, managedArray2, 0, managedArray.Length);\n            Console.WriteLine(&quot;Here is the roundtripped array: {0} {1} {2} {3} {4}&quot;,\n                               managedArray2[0], managedArray2[1], managedArray2[2], managedArray2[3],\n                               managedArray2[999]);\n\n            Console.WriteLine(&quot;The array was copied to unmanaged memory and back.&quot;);\n\n        }\n        finally\n        {\n            // Free the unmanaged memory.\n            Marshal.FreeHGlobal(pnt);\n        }\n\n\n\n    }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Runtime.InteropServices.Marshal.Copy-char#1\">&#39; Remember that the actual size of System.Char in unmanaged memory is 2.\n\nImports System\nImports System.Runtime.InteropServices\n\n\n\nModule Module1\n\n    Sub Main()\n        &#39; Create a managed array.\n        Dim managedArray As Char() = New Char(999) {}\n        managedArray(0) = &quot;a&quot;c\n        managedArray(1) = &quot;b&quot;c\n        managedArray(2) = &quot;c&quot;c\n        managedArray(3) = &quot;d&quot;c\n        managedArray(999) = &quot;Z&quot;c\n\n        &#39; Initialize unmanaged memory to hold the array.\n        &#39; Dim size As Integer = Marshal.SizeOf(managedArray[0]) * managedArray.Length;  &#39; Incorrect\n        Dim size As Integer = Marshal.SystemDefaultCharSize * managedArray.Length       &#39; Correct\n\n        Dim pnt As IntPtr = Marshal.AllocHGlobal(size)\n\n        Try\n            &#39; Copy the array to unmanaged memory.\n            Marshal.Copy(managedArray, 0, pnt, managedArray.Length)\n\n            &#39; Copy the unmanaged array back to another managed array.\n\n            Dim managedArray2 As Char() = New Char(managedArray.Length - 1) {}\n\n            Marshal.Copy(pnt, managedArray2, 0, managedArray.Length)\n            Console.WriteLine(&quot;Here is the roundtripped array: {0} {1} {2} {3} {4}&quot;, managedArray2(0), managedArray2(1), managedArray2(2), managedArray2(3), managedArray2(999))\n\n\n            Console.WriteLine(&quot;The array was copied to unmanaged memory and back.&quot;)\n        Finally\n            &#39; Free the unmanaged memory.\n            Marshal.FreeHGlobal(pnt)\n\n        End Try\n    End Sub\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_Copy_System_Double___System_Int32_System_IntPtr_System_Int32_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_Copy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Copy(Double[],Int32,IntPtr,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Copies data from a one-dimensional, managed double-precision floating-point number array to an unmanaged memory pointer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Copy (double[] source, int startIndex, IntPtr destination, int length);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional array to copy from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index in the source array where copying should start.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>destination</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The memory pointer to copy to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of array elements to copy.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> and <code>length</code> are not valid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code>, <code>startIndex</code>, <code>destination</code>, or <code>length</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can use this method to copy a subset of a one-dimensional managed array to an unmanaged C-style array.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example copies an array to unmanaged memory and then copies the unmanaged array back to managed memory.  </p>\n<pre><code class=\"lang-cs\" name=\"Runtime.InteropServices.Marshal.Copy-double#1\">using System;\nusing System.Runtime.InteropServices;\n\nclass Example\n{\n\n    static void Main()\n    {\n        // Create a managed array.\n        double[] managedArray = { 0.1, 0.2, 0.3, 0.4 };\n\n        // Initialize unmanaged memory to hold the array.\n        int size = Marshal.SizeOf(managedArray[0]) * managedArray.Length;\n\n        IntPtr pnt = Marshal.AllocHGlobal(size);\n\n        try\n        {\n            // Copy the array to unmanaged memory.\n            Marshal.Copy(managedArray, 0, pnt, managedArray.Length);\n\n            // Copy the unmanaged array back to another managed array.\n\n            double[] managedArray2 = new double[managedArray.Length];\n\n            Marshal.Copy(pnt, managedArray2, 0, managedArray.Length);\n\n            Console.WriteLine(&quot;The array was copied to unmanaged memory and back.&quot;);\n\n        }\n        finally\n        {\n            // Free the unmanaged memory.\n            Marshal.FreeHGlobal(pnt);\n        }\n        \n\n\n    }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Runtime.InteropServices.Marshal.Copy-double#1\">Imports System\nImports System.Runtime.InteropServices\n\n\n\nModule Example\n\n\n    Sub Main()\n        &#39; Create a managed array.\n        Dim managedArray As Double() = {0.1, 0.2, 0.3, 0.4}\n\n        &#39; Initialize unmanaged memory to hold the array.\n        Dim size As Integer = Marshal.SizeOf(managedArray(0)) * managedArray.Length\n\n        Dim pnt As IntPtr = Marshal.AllocHGlobal(size)\n\n        Try\n            &#39; Copy the array to unmanaged memory.\n            Marshal.Copy(managedArray, 0, pnt, managedArray.Length)\n\n            &#39; Copy the unmanaged array back to another managed array.\n            Dim managedArray2(managedArray.Length) As Double\n\n            Marshal.Copy(pnt, managedArray2, 0, managedArray.Length)\n\n            Console.WriteLine(&quot;The array was copied to unmanaged memory and back.&quot;)\n\n        Finally\n            &#39; Free the unmanaged memory.\n            Marshal.FreeHGlobal(pnt)\n        End Try\n\n    End Sub\nEnd Module\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_Copy_System_Int16___System_Int32_System_IntPtr_System_Int32_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_Copy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Copy(Int16[],Int32,IntPtr,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Copies data from a one-dimensional, managed 16-bit signed integer array to an unmanaged memory pointer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Copy (short[] source, int startIndex, IntPtr destination, int length);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional array to copy from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index in the source array where copying should start.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>destination</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The memory pointer to copy to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of array elements to copy.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> and <code>length</code> are not valid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code>, <code>startIndex</code>, <code>destination</code>, or <code>length</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can use this method to copy a subset of a one-dimensional managed array to an unmanaged C-style array.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example copies an array to unmanaged memory and then copies the unmanaged array back to managed memory.  </p>\n<pre><code class=\"lang-vb\" name=\"Runtime.InteropServices.Marshal.Copy-int16#1\">Imports System\nImports System.Runtime.InteropServices\n\n\n\nModule Example\n\n\n    Sub Main()\n        &#39; Create a managed array.\n        Dim managedArray As Short() = {1, 2, 3, 4}\n\n        &#39; Initialize unmanaged memory to hold the array.\n        Dim size As Integer = Marshal.SizeOf(managedArray(0)) * managedArray.Length\n\n        Dim pnt As IntPtr = Marshal.AllocHGlobal(size)\n\n        Try\n            &#39; Copy the array to unmanaged memory.\n            Marshal.Copy(managedArray, 0, pnt, managedArray.Length)\n\n            &#39; Copy the unmanaged array back to another managed array.\n            Dim managedArray2(managedArray.Length) As Short\n\n            Marshal.Copy(pnt, managedArray2, 0, managedArray.Length)\n\n            Console.WriteLine(&quot;The array was copied to unmanaged memory and back.&quot;)\n\n        Finally\n            &#39; Free the unmanaged memory.\n            Marshal.FreeHGlobal(pnt)\n        End Try\n\n    End Sub\nEnd Module\n\n</code></pre><pre><code class=\"lang-cs\" name=\"Runtime.InteropServices.Marshal.Copy-int16#1\">using System;\nusing System.Runtime.InteropServices;\n\nclass Example\n{\n\n    static void Main()\n    {\n        // Create a managed array.\n        short[] managedArray = { 1, 2, 3, 4 };\n\n        // Initialize unmanaged memory to hold the array.\n        int size = Marshal.SizeOf(managedArray[0]) * managedArray.Length;\n\n        IntPtr pnt = Marshal.AllocHGlobal(size);\n\n        try\n        {\n            // Copy the array to unmanaged memory.\n            Marshal.Copy(managedArray, 0, pnt, managedArray.Length);\n\n            // Copy the unmanaged array back to another managed array.\n\n            short[] managedArray2 = new short[managedArray.Length];\n\n            Marshal.Copy(pnt, managedArray2, 0, managedArray.Length);\n\n            Console.WriteLine(&quot;The array was copied to unmanaged memory and back.&quot;);\n\n        }\n        finally\n        {\n            // Free the unmanaged memory.\n            Marshal.FreeHGlobal(pnt);\n        }\n        \n\n\n    }\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_Copy_System_Int32___System_Int32_System_IntPtr_System_Int32_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_Copy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Copy(Int32[],Int32,IntPtr,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Copies data from a one-dimensional, managed 32-bit signed integer array to an unmanaged memory pointer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Copy (int[] source, int startIndex, IntPtr destination, int length);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional array to copy from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index in the source array where copying should start.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>destination</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The memory pointer to copy to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of array elements to copy.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> and <code>length</code> are not valid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> or <code>length</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can use this method to copy a subset of a one-dimensional managed array to an unmanaged C-style array.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example copies an array to unmanaged memory and then copies the unmanaged array back to managed memory.  </p>\n<pre><code class=\"lang-vb\" name=\"Runtime.InteropServices.Marshal.Copy-int#1\">Imports System\nImports System.Runtime.InteropServices\n\n\n\nModule Example\n\n\n    Sub Main()\n        &#39; Create a managed array.\n        Dim managedArray As Integer() = {1, 2, 3, 4}\n\n        &#39; Initialize unmanaged memory to hold the array.\n        Dim size As Integer = Marshal.SizeOf(managedArray(0)) * managedArray.Length\n\n        Dim pnt As IntPtr = Marshal.AllocHGlobal(size)\n\n        Try\n            &#39; Copy the array to unmanaged memory.\n            Marshal.Copy(managedArray, 0, pnt, managedArray.Length)\n\n            &#39; Copy the unmanaged array back to another managed array.\n            Dim managedArray2(managedArray.Length) As Integer\n\n            Marshal.Copy(pnt, managedArray2, 0, managedArray.Length)\n\n            Console.WriteLine(&quot;The array was copied to unmanaged memory and back.&quot;)\n\n        Finally\n            &#39; Free the unmanaged memory.\n            Marshal.FreeHGlobal(pnt)\n        End Try\n\n    End Sub\nEnd Module\n\n</code></pre><pre><code class=\"lang-cs\" name=\"Runtime.InteropServices.Marshal.Copy-int#1\">using System;\nusing System.Runtime.InteropServices;\n\nclass Example\n{\n\n    static void Main()\n    {\n        // Create a managed array.\n        int[] managedArray = { 1, 2, 3, 4 };\n\n        // Initialize unmanaged memory to hold the array.\n        int size = Marshal.SizeOf(managedArray[0]) * managedArray.Length;\n\n        IntPtr pnt = Marshal.AllocHGlobal(size);\n\n        try\n        {\n            // Copy the array to unmanaged memory.\n            Marshal.Copy(managedArray, 0, pnt, managedArray.Length);\n\n            // Copy the unmanaged array back to another managed array.\n\n            int[] managedArray2 = new int[managedArray.Length];\n\n            Marshal.Copy(pnt, managedArray2, 0, managedArray.Length);\n\n            Console.WriteLine(&quot;The array was copied to unmanaged memory and back.&quot;);\n\n        }\n        finally\n        {\n            // Free the unmanaged memory.\n            Marshal.FreeHGlobal(pnt);\n        }\n        \n\n\n    }\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_Copy_System_Int64___System_Int32_System_IntPtr_System_Int32_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_Copy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Copy(Int64[],Int32,IntPtr,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Copies data from a one-dimensional, managed 64-bit signed integer array to an unmanaged memory pointer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Copy (long[] source, int startIndex, IntPtr destination, int length);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional array to copy from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index in the source array where copying should start.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>destination</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The memory pointer to copy to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of array elements to copy.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> and <code>length</code> are not valid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code>, <code>startIndex</code>, <code>destination</code>, or <code>length</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can use this method to copy a subset of a one-dimensional managed array to an unmanaged C-style array.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example copies an array to unmanaged memory and then copies the unmanaged array back to managed memory.  </p>\n<pre><code class=\"lang-cs\" name=\"Runtime.InteropServices.Marshal.Copy-int64#1\">using System;\nusing System.Runtime.InteropServices;\n\nclass Example\n{\n\n    static void Main()\n    {\n        // Create a managed array.\n        Int64[] managedArray = { 1, 2, 3, 4 };\n\n        // Initialize unmanaged memory to hold the array.\n        int size = Marshal.SizeOf(managedArray[0]) * managedArray.Length;\n\n        IntPtr pnt = Marshal.AllocHGlobal(size);\n\n        try\n        {\n            // Copy the array to unmanaged memory.\n            Marshal.Copy(managedArray, 0, pnt, managedArray.Length);\n\n            // Copy the unmanaged array back to another managed array.\n\n            Int64[] managedArray2 = new Int64[managedArray.Length];\n\n            Marshal.Copy(pnt, managedArray2, 0, managedArray.Length);\n\n            Console.WriteLine(&quot;The array was copied to unmanaged memory and back.&quot;);\n\n        }\n        finally\n        {\n            // Free the unmanaged memory.\n            Marshal.FreeHGlobal(pnt);\n        }\n        \n\n\n    }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Runtime.InteropServices.Marshal.Copy-int64#1\">Imports System\nImports System.Runtime.InteropServices\n\n\n\nModule Example\n\n\n    Sub Main()\n        &#39; Create a managed array.\n        Dim managedArray As Int64() = {1, 2, 3, 4}\n\n        &#39; Initialize unmanaged memory to hold the array.\n        Dim size As Integer = Marshal.SizeOf(managedArray(0)) * managedArray.Length\n\n        Dim pnt As IntPtr = Marshal.AllocHGlobal(size)\n\n        Try\n            &#39; Copy the array to unmanaged memory.\n            Marshal.Copy(managedArray, 0, pnt, managedArray.Length)\n\n            &#39; Copy the unmanaged array back to another managed array.\n            Dim managedArray2(managedArray.Length) As Int64\n\n            Marshal.Copy(pnt, managedArray2, 0, managedArray.Length)\n\n            Console.WriteLine(&quot;The array was copied to unmanaged memory and back.&quot;)\n\n        Finally\n            &#39; Free the unmanaged memory.\n            Marshal.FreeHGlobal(pnt)\n        End Try\n\n    End Sub\nEnd Module\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_Copy_System_IntPtr_System_Byte___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_Copy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Copy(IntPtr,Byte[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Copies data from an unmanaged memory pointer to a managed 8-bit unsigned integer array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Copy (IntPtr source, byte[] destination, int startIndex, int length);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The memory pointer to copy from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>destination</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The array to copy to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index in the destination array where copying should start.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of array elements to copy.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code>, <code>destination</code>, <code>startIndex</code>, or <code>length</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Unmanaged, C-style arrays do not contain bounds information, which prevents the <code>startIndex</code> and <code>length</code> parameters from being validated. Thus, the unmanaged data corresponding to the <code>source</code> parameter populates the managed array regardless of its usefulness. You must initialize the managed array with the appropriate size before calling this method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example copies an array to unmanaged memory and then copies the unmanaged array back to managed memory.  </p>\n<pre><code class=\"lang-cs\" name=\"Runtime.InteropServices.Marshal.Copy-byte#1\">using System;\nusing System.Runtime.InteropServices;\n\nclass Example\n{\n\n    static void Main()\n    {\n        // Create a managed array.\n        byte[] managedArray = { 1, 2, 3, 4 };\n\n        // Initialize unmanaged memory to hold the array.\n        int size = Marshal.SizeOf(managedArray[0]) * managedArray.Length;\n\n        IntPtr pnt = Marshal.AllocHGlobal(size);\n\n        try\n        {\n            // Copy the array to unmanaged memory.\n            Marshal.Copy(managedArray, 0, pnt, managedArray.Length);\n\n            // Copy the unmanaged array back to another managed array.\n\n            byte[] managedArray2 = new byte[managedArray.Length];\n\n            Marshal.Copy(pnt, managedArray2, 0, managedArray.Length);\n\n            Console.WriteLine(&quot;The array was copied to unmanaged memory and back.&quot;);\n\n        }\n        finally\n        {\n            // Free the unmanaged memory.\n            Marshal.FreeHGlobal(pnt);\n        }\n        \n\n\n    }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Runtime.InteropServices.Marshal.Copy-byte#1\">Imports System\nImports System.Runtime.InteropServices\n\n\n\nModule Example\n\n\n    Sub Main()\n        &#39; Create a managed array.\n        Dim managedArray As Byte() = {1, 2, 3, 4}\n\n        &#39; Initialize unmanaged memory to hold the array.\n        Dim size As Integer = Marshal.SizeOf(managedArray(0)) * managedArray.Length\n\n        Dim pnt As IntPtr = Marshal.AllocHGlobal(size)\n\n        Try\n            &#39; Copy the array to unmanaged memory.\n            Marshal.Copy(managedArray, 0, pnt, managedArray.Length)\n\n            &#39; Copy the unmanaged array back to another managed array.\n            Dim managedArray2(managedArray.Length) As Byte\n\n            Marshal.Copy(pnt, managedArray2, 0, managedArray.Length)\n\n            Console.WriteLine(&quot;The array was copied to unmanaged memory and back.&quot;)\n\n        Finally\n            &#39; Free the unmanaged memory.\n            Marshal.FreeHGlobal(pnt)\n        End Try\n\n    End Sub\nEnd Module\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_Copy_System_IntPtr_System_Char___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_Copy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Copy(IntPtr,Char[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Copies data from an unmanaged memory pointer to a managed character array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Copy (IntPtr source, char[] destination, int startIndex, int length);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The memory pointer to copy from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>destination</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The array to copy to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index in the destination array where copying should start.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of array elements to copy.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code>, <code>destination</code>, <code>startIndex</code>, or <code>length</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Unmanaged, C-style arrays do not contain bounds information, which prevents the <code>startIndex</code> and <code>length</code> parameters from being validated. Thus, the unmanaged data corresponding to the <code>source</code> parameter populates the managed array regardless of its usefulness. You must initialize the managed array with the appropriate size before calling this method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example copies an array to unmanaged memory and then copies the unmanaged array back to managed memory.  </p>\n<pre><code class=\"lang-cs\" name=\"Runtime.InteropServices.Marshal.Copy-char#1\">// Remember that the actual size of System.Char in unmanaged memory is 2.\nusing System;\nusing System.Runtime.InteropServices;\n\nclass Example\n{\n\n    static void Main()\n    {\n        // Create a managed array.\n        char[] managedArray = new char[1000];\n        managedArray[0] = &#39;a&#39;;\n        managedArray[1] = &#39;b&#39;;\n        managedArray[2] = &#39;c&#39;;\n        managedArray[3] = &#39;d&#39;;\n        managedArray[999] = &#39;Z&#39;;\n\n        // Initialize unmanaged memory to hold the array.\n        // int size = Marshal.SizeOf(managedArray[0]) * managedArray.Length;  // Incorrect\n        int size = Marshal.SystemDefaultCharSize * managedArray.Length;       // Correct\n\n\n        IntPtr pnt = Marshal.AllocHGlobal(size);\n\n        try\n        {\n            // Copy the array to unmanaged memory.\n            Marshal.Copy(managedArray, 0, pnt, managedArray.Length);\n\n            // Copy the unmanaged array back to another managed array.\n\n            char[] managedArray2 = new char[managedArray.Length];\n\n            Marshal.Copy(pnt, managedArray2, 0, managedArray.Length);\n            Console.WriteLine(&quot;Here is the roundtripped array: {0} {1} {2} {3} {4}&quot;,\n                               managedArray2[0], managedArray2[1], managedArray2[2], managedArray2[3],\n                               managedArray2[999]);\n\n            Console.WriteLine(&quot;The array was copied to unmanaged memory and back.&quot;);\n\n        }\n        finally\n        {\n            // Free the unmanaged memory.\n            Marshal.FreeHGlobal(pnt);\n        }\n\n\n\n    }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Runtime.InteropServices.Marshal.Copy-char#1\">&#39; Remember that the actual size of System.Char in unmanaged memory is 2.\n\nImports System\nImports System.Runtime.InteropServices\n\n\n\nModule Module1\n\n    Sub Main()\n        &#39; Create a managed array.\n        Dim managedArray As Char() = New Char(999) {}\n        managedArray(0) = &quot;a&quot;c\n        managedArray(1) = &quot;b&quot;c\n        managedArray(2) = &quot;c&quot;c\n        managedArray(3) = &quot;d&quot;c\n        managedArray(999) = &quot;Z&quot;c\n\n        &#39; Initialize unmanaged memory to hold the array.\n        &#39; Dim size As Integer = Marshal.SizeOf(managedArray[0]) * managedArray.Length;  &#39; Incorrect\n        Dim size As Integer = Marshal.SystemDefaultCharSize * managedArray.Length       &#39; Correct\n\n        Dim pnt As IntPtr = Marshal.AllocHGlobal(size)\n\n        Try\n            &#39; Copy the array to unmanaged memory.\n            Marshal.Copy(managedArray, 0, pnt, managedArray.Length)\n\n            &#39; Copy the unmanaged array back to another managed array.\n\n            Dim managedArray2 As Char() = New Char(managedArray.Length - 1) {}\n\n            Marshal.Copy(pnt, managedArray2, 0, managedArray.Length)\n            Console.WriteLine(&quot;Here is the roundtripped array: {0} {1} {2} {3} {4}&quot;, managedArray2(0), managedArray2(1), managedArray2(2), managedArray2(3), managedArray2(999))\n\n\n            Console.WriteLine(&quot;The array was copied to unmanaged memory and back.&quot;)\n        Finally\n            &#39; Free the unmanaged memory.\n            Marshal.FreeHGlobal(pnt)\n\n        End Try\n    End Sub\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_Copy_System_IntPtr_System_Double___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_Copy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Copy(IntPtr,Double[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Copies data from an unmanaged memory pointer to a managed double-precision floating-point number array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Copy (IntPtr source, double[] destination, int startIndex, int length);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The memory pointer to copy from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>destination</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The array to copy to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index in the destination array where copying should start.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of array elements to copy.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code>, <code>destination</code>, <code>startIndex</code>, or <code>length</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Unmanaged, C-style arrays do not contain bounds information, which prevents the <code>startIndex</code> and <code>length</code> parameters from being validated. Thus, the unmanaged data corresponding to the <code>source</code> parameter populates the managed array regardless of its usefulness. You must initialize the managed array with the appropriate size before calling this method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example copies an array to unmanaged memory and then copies the unmanaged array back to managed memory.  </p>\n<pre><code class=\"lang-cs\" name=\"Runtime.InteropServices.Marshal.Copy-double#1\">using System;\nusing System.Runtime.InteropServices;\n\nclass Example\n{\n\n    static void Main()\n    {\n        // Create a managed array.\n        double[] managedArray = { 0.1, 0.2, 0.3, 0.4 };\n\n        // Initialize unmanaged memory to hold the array.\n        int size = Marshal.SizeOf(managedArray[0]) * managedArray.Length;\n\n        IntPtr pnt = Marshal.AllocHGlobal(size);\n\n        try\n        {\n            // Copy the array to unmanaged memory.\n            Marshal.Copy(managedArray, 0, pnt, managedArray.Length);\n\n            // Copy the unmanaged array back to another managed array.\n\n            double[] managedArray2 = new double[managedArray.Length];\n\n            Marshal.Copy(pnt, managedArray2, 0, managedArray.Length);\n\n            Console.WriteLine(&quot;The array was copied to unmanaged memory and back.&quot;);\n\n        }\n        finally\n        {\n            // Free the unmanaged memory.\n            Marshal.FreeHGlobal(pnt);\n        }\n        \n\n\n    }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Runtime.InteropServices.Marshal.Copy-double#1\">Imports System\nImports System.Runtime.InteropServices\n\n\n\nModule Example\n\n\n    Sub Main()\n        &#39; Create a managed array.\n        Dim managedArray As Double() = {0.1, 0.2, 0.3, 0.4}\n\n        &#39; Initialize unmanaged memory to hold the array.\n        Dim size As Integer = Marshal.SizeOf(managedArray(0)) * managedArray.Length\n\n        Dim pnt As IntPtr = Marshal.AllocHGlobal(size)\n\n        Try\n            &#39; Copy the array to unmanaged memory.\n            Marshal.Copy(managedArray, 0, pnt, managedArray.Length)\n\n            &#39; Copy the unmanaged array back to another managed array.\n            Dim managedArray2(managedArray.Length) As Double\n\n            Marshal.Copy(pnt, managedArray2, 0, managedArray.Length)\n\n            Console.WriteLine(&quot;The array was copied to unmanaged memory and back.&quot;)\n\n        Finally\n            &#39; Free the unmanaged memory.\n            Marshal.FreeHGlobal(pnt)\n        End Try\n\n    End Sub\nEnd Module\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_Copy_System_IntPtr_System_Int16___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_Copy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Copy(IntPtr,Int16[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Copies data from an unmanaged memory pointer to a managed 16-bit signed integer array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Copy (IntPtr source, short[] destination, int startIndex, int length);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The memory pointer to copy from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>destination</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The array to copy to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index in the destination array where copying should start.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of array elements to copy.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code>, <code>destination</code>, <code>startIndex</code>, or <code>length</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Unmanaged, C-style arrays do not contain bounds information, which prevents the <code>startIndex</code> and <code>length</code> parameters from being validated. Thus, the unmanaged data corresponding to the <code>source</code> parameter populates the managed array regardless of its usefulness. You must initialize the managed array with the appropriate size before calling this method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example copies an array to unmanaged memory and then copies the unmanaged array back to managed memory.  </p>\n<pre><code class=\"lang-vb\" name=\"Runtime.InteropServices.Marshal.Copy-int16#1\">Imports System\nImports System.Runtime.InteropServices\n\n\n\nModule Example\n\n\n    Sub Main()\n        &#39; Create a managed array.\n        Dim managedArray As Short() = {1, 2, 3, 4}\n\n        &#39; Initialize unmanaged memory to hold the array.\n        Dim size As Integer = Marshal.SizeOf(managedArray(0)) * managedArray.Length\n\n        Dim pnt As IntPtr = Marshal.AllocHGlobal(size)\n\n        Try\n            &#39; Copy the array to unmanaged memory.\n            Marshal.Copy(managedArray, 0, pnt, managedArray.Length)\n\n            &#39; Copy the unmanaged array back to another managed array.\n            Dim managedArray2(managedArray.Length) As Short\n\n            Marshal.Copy(pnt, managedArray2, 0, managedArray.Length)\n\n            Console.WriteLine(&quot;The array was copied to unmanaged memory and back.&quot;)\n\n        Finally\n            &#39; Free the unmanaged memory.\n            Marshal.FreeHGlobal(pnt)\n        End Try\n\n    End Sub\nEnd Module\n\n</code></pre><pre><code class=\"lang-cs\" name=\"Runtime.InteropServices.Marshal.Copy-int16#1\">using System;\nusing System.Runtime.InteropServices;\n\nclass Example\n{\n\n    static void Main()\n    {\n        // Create a managed array.\n        short[] managedArray = { 1, 2, 3, 4 };\n\n        // Initialize unmanaged memory to hold the array.\n        int size = Marshal.SizeOf(managedArray[0]) * managedArray.Length;\n\n        IntPtr pnt = Marshal.AllocHGlobal(size);\n\n        try\n        {\n            // Copy the array to unmanaged memory.\n            Marshal.Copy(managedArray, 0, pnt, managedArray.Length);\n\n            // Copy the unmanaged array back to another managed array.\n\n            short[] managedArray2 = new short[managedArray.Length];\n\n            Marshal.Copy(pnt, managedArray2, 0, managedArray.Length);\n\n            Console.WriteLine(&quot;The array was copied to unmanaged memory and back.&quot;);\n\n        }\n        finally\n        {\n            // Free the unmanaged memory.\n            Marshal.FreeHGlobal(pnt);\n        }\n        \n\n\n    }\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_Copy_System_IntPtr_System_Int32___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_Copy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Copy(IntPtr,Int32[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Copies data from an unmanaged memory pointer to a managed 32-bit signed integer array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Copy (IntPtr source, int[] destination, int startIndex, int length);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The memory pointer to copy from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>destination</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The array to copy to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index in the destination array where copying should start.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of array elements to copy.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code>, <code>destination</code>, <code>startIndex</code>, or <code>length</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Unmanaged, C-style arrays do not contain bounds information, which prevents the <code>startIndex</code> and <code>length</code> parameters from being validated. Thus, the unmanaged data corresponding to the <code>source</code> parameter populates the managed array regardless of its usefulness. You must initialize the managed array with the appropriate size before calling this method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example copies an array to unmanaged memory and then copies the unmanaged array back to managed memory.  </p>\n<pre><code class=\"lang-vb\" name=\"Runtime.InteropServices.Marshal.Copy-int#1\">Imports System\nImports System.Runtime.InteropServices\n\n\n\nModule Example\n\n\n    Sub Main()\n        &#39; Create a managed array.\n        Dim managedArray As Integer() = {1, 2, 3, 4}\n\n        &#39; Initialize unmanaged memory to hold the array.\n        Dim size As Integer = Marshal.SizeOf(managedArray(0)) * managedArray.Length\n\n        Dim pnt As IntPtr = Marshal.AllocHGlobal(size)\n\n        Try\n            &#39; Copy the array to unmanaged memory.\n            Marshal.Copy(managedArray, 0, pnt, managedArray.Length)\n\n            &#39; Copy the unmanaged array back to another managed array.\n            Dim managedArray2(managedArray.Length) As Integer\n\n            Marshal.Copy(pnt, managedArray2, 0, managedArray.Length)\n\n            Console.WriteLine(&quot;The array was copied to unmanaged memory and back.&quot;)\n\n        Finally\n            &#39; Free the unmanaged memory.\n            Marshal.FreeHGlobal(pnt)\n        End Try\n\n    End Sub\nEnd Module\n\n</code></pre><pre><code class=\"lang-cs\" name=\"Runtime.InteropServices.Marshal.Copy-int#1\">using System;\nusing System.Runtime.InteropServices;\n\nclass Example\n{\n\n    static void Main()\n    {\n        // Create a managed array.\n        int[] managedArray = { 1, 2, 3, 4 };\n\n        // Initialize unmanaged memory to hold the array.\n        int size = Marshal.SizeOf(managedArray[0]) * managedArray.Length;\n\n        IntPtr pnt = Marshal.AllocHGlobal(size);\n\n        try\n        {\n            // Copy the array to unmanaged memory.\n            Marshal.Copy(managedArray, 0, pnt, managedArray.Length);\n\n            // Copy the unmanaged array back to another managed array.\n\n            int[] managedArray2 = new int[managedArray.Length];\n\n            Marshal.Copy(pnt, managedArray2, 0, managedArray.Length);\n\n            Console.WriteLine(&quot;The array was copied to unmanaged memory and back.&quot;);\n\n        }\n        finally\n        {\n            // Free the unmanaged memory.\n            Marshal.FreeHGlobal(pnt);\n        }\n        \n\n\n    }\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_Copy_System_IntPtr_System_Int64___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_Copy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Copy(IntPtr,Int64[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Copies data from an unmanaged memory pointer to a managed 64-bit signed integer array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Copy (IntPtr source, long[] destination, int startIndex, int length);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The memory pointer to copy from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>destination</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The array to copy to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index in the destination array where copying should start.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of array elements to copy.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code>, <code>destination</code>, <code>startIndex</code>, or <code>length</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Unmanaged, C-style arrays do not contain bounds information, which prevents the <code>startIndex</code> and <code>length</code> parameters from being validated. Thus, the unmanaged data corresponding to the<code>source</code> parameter populates the managed array regardless of its usefulness. You must initialize the managed array with the appropriate size before calling this method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example copies an array to unmanaged memory and then copies the unmanaged array back to managed memory.  </p>\n<pre><code class=\"lang-cs\" name=\"Runtime.InteropServices.Marshal.Copy-int64#1\">using System;\nusing System.Runtime.InteropServices;\n\nclass Example\n{\n\n    static void Main()\n    {\n        // Create a managed array.\n        Int64[] managedArray = { 1, 2, 3, 4 };\n\n        // Initialize unmanaged memory to hold the array.\n        int size = Marshal.SizeOf(managedArray[0]) * managedArray.Length;\n\n        IntPtr pnt = Marshal.AllocHGlobal(size);\n\n        try\n        {\n            // Copy the array to unmanaged memory.\n            Marshal.Copy(managedArray, 0, pnt, managedArray.Length);\n\n            // Copy the unmanaged array back to another managed array.\n\n            Int64[] managedArray2 = new Int64[managedArray.Length];\n\n            Marshal.Copy(pnt, managedArray2, 0, managedArray.Length);\n\n            Console.WriteLine(&quot;The array was copied to unmanaged memory and back.&quot;);\n\n        }\n        finally\n        {\n            // Free the unmanaged memory.\n            Marshal.FreeHGlobal(pnt);\n        }\n        \n\n\n    }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Runtime.InteropServices.Marshal.Copy-int64#1\">Imports System\nImports System.Runtime.InteropServices\n\n\n\nModule Example\n\n\n    Sub Main()\n        &#39; Create a managed array.\n        Dim managedArray As Int64() = {1, 2, 3, 4}\n\n        &#39; Initialize unmanaged memory to hold the array.\n        Dim size As Integer = Marshal.SizeOf(managedArray(0)) * managedArray.Length\n\n        Dim pnt As IntPtr = Marshal.AllocHGlobal(size)\n\n        Try\n            &#39; Copy the array to unmanaged memory.\n            Marshal.Copy(managedArray, 0, pnt, managedArray.Length)\n\n            &#39; Copy the unmanaged array back to another managed array.\n            Dim managedArray2(managedArray.Length) As Int64\n\n            Marshal.Copy(pnt, managedArray2, 0, managedArray.Length)\n\n            Console.WriteLine(&quot;The array was copied to unmanaged memory and back.&quot;)\n\n        Finally\n            &#39; Free the unmanaged memory.\n            Marshal.FreeHGlobal(pnt)\n        End Try\n\n    End Sub\nEnd Module\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_Copy_System_IntPtr_System_IntPtr___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_Copy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Copy(IntPtr,IntPtr[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Copies data from an unmanaged memory pointer to a managed <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a> array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Copy (IntPtr source, IntPtr[] destination, int startIndex, int length);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The memory pointer to copy from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>destination</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The array to copy to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index in the destination array where copying should start.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of array elements to copy.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code>, <code>destination</code>, <code>startIndex</code>, or <code>length</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Unmanaged, C-style arrays do not contain bounds information, which prevents the <code>startIndex</code> and <code>length</code> parameters from being validated. Therefore, the unmanaged data that corresponds to the <code>source</code> parameter populates the managed array regardless of its usefulness. You must initialize the managed array with the appropriate size before calling the Copy method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_Copy_System_IntPtr_System_Single___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_Copy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Copy(IntPtr,Single[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Copies data from an unmanaged memory pointer to a managed single-precision floating-point number array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Copy (IntPtr source, float[] destination, int startIndex, int length);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The memory pointer to copy from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>destination</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The array to copy to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index in the destination array where copying should start.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of array elements to copy.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code>, <code>destination</code>, <code>startIndex</code>, or <code>length</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Unmanaged, C-style arrays do not contain bounds information, which prevents the <code>startIndex</code> and <code>length</code> parameters from being validated. Thus, the unmanaged data corresponding to the <code>source</code> parameter populates the managed array regardless of its usefulness. You must initialize the managed array with the appropriate size before calling this method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_Copy_System_IntPtr___System_Int32_System_IntPtr_System_Int32_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_Copy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Copy(IntPtr[],Int32,IntPtr,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Copies data from a one-dimensional, managed <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a> array to an unmanaged memory pointer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Copy (IntPtr[] source, int startIndex, IntPtr destination, int length);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional array to copy from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index in the source array where copying should start.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>destination</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The memory pointer to copy to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of array elements to copy.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code>, <code>destination</code>, <code>startIndex</code>, or <code>length</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can use this method to copy a subset of a one-dimensional managed <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a> array to an unmanaged C-style array.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_Copy_System_Single___System_Int32_System_IntPtr_System_Int32_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_Copy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Copy(Single[],Int32,IntPtr,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Copies data from a one-dimensional, managed single-precision floating-point number array to an unmanaged memory pointer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Copy (float[] source, int startIndex, IntPtr destination, int length);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional array to copy from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index in the source array where copying should start.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>destination</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The memory pointer to copy to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of array elements to copy.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> and <code>length</code> are not valid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>source</code>, <code>startIndex</code>, <code>destination</code>, or <code>length</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can use this method to copy a subset of a one-dimensional managed array to an unmanaged C-style array.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_CreateAggregatedObject_System_IntPtr_System_Object_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_CreateAggregatedObject_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateAggregatedObject(IntPtr,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Aggregates a managed object with the specified COM object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static IntPtr CreateAggregatedObject (IntPtr pOuter, object o);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>pOuter</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The outer <code>IUnknown</code> pointer.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>o</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to aggregate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>The inner <code>IUnknown</code> pointer of the managed object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>o</code> is a Windows Runtime object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The CreateAggregatedObject method aggregates the inner managed pointer of a managed object with the specified outer pointer, and then returns an inner <a href=\"http://go.microsoft.com/fwlink/?LinkId=148003\" data-linktype=\"external\">IUnknown</a> pointer of the managed object.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_CreateAggregatedObject__1_System_IntPtr___0_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_CreateAggregatedObject_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateAggregatedObject&lt;T&gt;(IntPtr,T)</div>        \r\n          </div>\r\n    \r\n            <p>[Supported in the .NET Framework 4.5.1 and later versions]  </p>\n<p> Aggregates a managed object of the specified type with the specified COM object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static IntPtr CreateAggregatedObject&lt;T&gt; (IntPtr pOuter, T o);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>pOuter</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The outer <a href=\"http://go.microsoft.com/fwlink/?LinkId=148003\" data-linktype=\"external\">IUnknown</a> pointer.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>o</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The managed object to aggregate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>The inner <a href=\"http://go.microsoft.com/fwlink/?LinkId=148003\" data-linktype=\"external\">IUnknown</a> pointer of the managed object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>o</code> is a Windows Runtime object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>TheCreateAggregatedObject(T) method aggregates the inner managed pointer of a managed object of a specified type with the specified outer pointer, and returns an inner <a href=\"http://go.microsoft.com/fwlink/?LinkId=148003\" data-linktype=\"external\">IUnknown</a> pointer of the managed object.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_CreateWrapperOfType_System_Object_System_Type_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_CreateWrapperOfType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateWrapperOfType(Object,Type)</div>        \r\n          </div>\r\n    \r\n            <p>Wraps the specified COM object in an object of the specified type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static object CreateWrapperOfType (object o, Type t);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>o</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to be wrapped.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>t</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of wrapper to create.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The newly wrapped object that is an instance of the desired type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>t</code> must derive from <code>__ComObject</code>.  </p>\n<p> -or-  </p>\n<p> <code>t</code> is a Windows Runtime type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>t</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p><code>o</code> cannot be converted to the destination type because it does not support all required interfaces.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>CreateWrapperOfType converts one COM class type, typically the generic <code>__ComObject</code> type, to another COM class type. The input COM object, represented by parameter <code>o</code>, is a <a href=\"../Topic/Runtime%20Callable%20Wrapper.md\" data-linktype=\"relative-path\">Runtime Callable Wrapper</a> (RCW).  </p>\n<p> Both the <code>t</code> and <code>o</code> parameters must be classes whose signatures are attributed with <a class=\"xref\" href=\"system.runtime.interopservices.comimportattribute\" data-linktype=\"relative-path\">System.Runtime.InteropServices.ComImportAttribute</a>. The <a href=\"../Topic/Tlbimp.exe%20(Type%20Library%20Importer).md\" data-linktype=\"relative-path\">Tlbimp.exe (Type Library Importer)</a> tool applies this attribute for you when it imports a type library. If you create the RCW manually in source code, you should apply this attribute to the managed signature that represents the original coclass to signify its COM origins.  </p>\n<p> Tlbimp.exe imports a COM <a href=\"http://msdn.microsoft.com/en-us/333d0904-ffa2-4d25-878d-7422bcd40582\" data-linktype=\"external\">coclass</a> as a managed class and an interface. The coclass interface has the same name as the original coclass, and the managed class has the original coclass name appended with &quot;Class&quot;. For example, a coclass called <code>MyCoclass</code> becomes a coclass interface called <code>MyCoclass</code> and a managed class called <code>MyCoclassClass</code>. Since <code>t</code> must be a class, not an interface, be sure to specify the managed class (<code>MyCoclassClass</code>) and not the coclass interface.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> You lose the identity of the input COM object because a new RCW instance wraps the <a href=\"http://go.microsoft.com/fwlink/?LinkId=148003\" data-linktype=\"external\">IUnknown</a> pointer exposed by the original RCW.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_CreateWrapperOfType__2___0_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_CreateWrapperOfType_T_TWrapper__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateWrapperOfType&lt;T,TWrapper&gt;(T)</div>        \r\n          </div>\r\n    \r\n            <p>[Supported in the .NET Framework 4.5.1 and later versions]  </p>\n<p> Wraps the specified COM object in an object of the specified type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TWrapper CreateWrapperOfType&lt;T,TWrapper&gt; (T o);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>o</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to be wrapped.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TWrapper</span></div>\r\n                  </div>\r\n                  <p>The newly wrapped object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>T</code> must derive from <code>__ComObject</code>.  </p>\n<p> -or-  </p>\n<p> <code>T</code> is a Windows Runtime type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p><code>o</code> cannot be converted to the <code>TWrapper</code> because it does not support all required interfaces.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>CreateWrapperOfType(T, converts a COM object of type <code>T</code> to the <code>TWrapper</code> COM class type. The input COM object, represented by parameter <code>o</code>, is a <a href=\"../Topic/Runtime%20Callable%20Wrapper.md\" data-linktype=\"relative-path\">Runtime Callable Wrapper</a> (RCW).  </p>\n<p> Both the <code>T</code>generic type parameter and the <code>o</code> parameter must be classes whose signatures are attributed with the <a class=\"xref\" href=\"system.runtime.interopservices.comimportattribute\" data-linktype=\"relative-path\">System.Runtime.InteropServices.ComImportAttribute</a> attribute. The <a href=\"../Topic/Tlbimp.exe%20(Type%20Library%20Importer).md\" data-linktype=\"relative-path\">Tlbimp.exe (Type Library Importer)</a> tool applies this attribute for you when it imports a type library. If you create the RCW manually in source code, you should apply this attribute to the managed signature that represents the original coclass to signify its COM origins.  </p>\n<p> Tlbimp.exe imports a COM <a href=\"http://msdn.microsoft.com/en-us/333d0904-ffa2-4d25-878d-7422bcd40582\" data-linktype=\"external\">coclass</a> as a managed class and an interface. The coclass interface has the same name as the original coclass, and the managed class has the original coclass name appended with &quot;Class&quot;. For example, a coclass called <code>MyCoclass</code> becomes a coclass interface called <code>MyCoclass</code> and a managed class called <code>MyCoclassClass</code>. Because<code>T</code> must be a class, not an interface, be sure to specify the managed class (<code>MyCoclassClass</code>) and not the <code>coclass</code> interface.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> You lose the identity of the input COM object, because a new RCW instance wraps the <a href=\"http://go.microsoft.com/fwlink/?LinkId=148003\" data-linktype=\"external\">IUnknown</a> pointer exposed by the original RCW.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_DestroyStructure_System_IntPtr_System_Type_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_DestroyStructure_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DestroyStructure(IntPtr,Type)</div>        \r\n          </div>\r\n    \r\n            <p>Frees all substructures that the specified unmanaged memory block points to.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void DestroyStructure (IntPtr ptr, Type structuretype);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ptr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to an unmanaged block of memory.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>structuretype</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Type of a formatted class. This provides the layout information necessary to delete the buffer in the <code>ptr</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>structureType</code> has an automatic layout. Use sequential or explicit instead.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can use this method to free reference-type fields, such as strings, of an unmanaged structure. Unlike its fields, a structure can be a value type or a reference type. Value-type structures that contain value-type fields (all blittable) have no references whose memory must be freed. The <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_StructureToPtr_\" data-linktype=\"relative-path\">StructureToPtr</a> method uses this method to prevent memory leaks when reusing memory occupied by a structure.  </p>\n<p> DestroyStructure calls the COM <a href=\"http://go.microsoft.com/fwlink/?LinkId=148633\" data-linktype=\"external\">SysFreeString</a> function, which, in turn, frees an allocated string.  </p>\n<p> In addition to DestroyStructure, the <a class=\"xref\" href=\"system.runtime.interopservices.marshal\" data-linktype=\"relative-path\">Marshal</a> class provides two other memory-deallocation methods: <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_FreeCoTaskMem_\" data-linktype=\"relative-path\">FreeCoTaskMem</a> and <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_FreeHGlobal_\" data-linktype=\"relative-path\">FreeHGlobal</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_DestroyStructure__1_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_DestroyStructure_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DestroyStructure&lt;T&gt;(IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>[Supported in the .NET Framework 4.5.1 and later versions]  </p>\n<p> Frees all substructures of a specified type that the specified unmanaged memory block points to.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void DestroyStructure&lt;T&gt; (IntPtr ptr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ptr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to an unmanaged block of memory.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>T</code> has an automatic layout. Use sequential or explicit instead.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can use this method to free reference type fields, such as strings, of an unmanaged structure. Unlike its fields, a structure can be a value type or a reference type. Value type structures that contain value type fields (all blittable) have no references whose memory must be freed. The <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_StructureToPtr_\" data-linktype=\"relative-path\">StructureToPtr</a> method uses this method to prevent memory leaks when reusing memory occupied by a structure.  </p>\n<p> <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_DestroyStructure_\" data-linktype=\"relative-path\">DestroyStructure</a> calls the COM <a href=\"http://go.microsoft.com/fwlink/?LinkId=148633\" data-linktype=\"external\">SysFreeString</a> function, which, in turn, frees an allocated string.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_FinalReleaseComObject_System_Object_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_FinalReleaseComObject_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FinalReleaseComObject(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Releases all references to a <a href=\"../Topic/Runtime%20Callable%20Wrapper.md\" data-linktype=\"relative-path\">Runtime Callable Wrapper</a> (RCW) by setting its reference count to 0.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int FinalReleaseComObject (object o);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>o</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The RCW to be released.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The new value of the reference count of the RCW associated with the <code>o</code>parameter, which is 0 (zero) if the release is successful.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>o</code> is not a valid COM object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>o</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The FinalReleaseComObject method releases the managed reference to a COM object. Calling this method is equivalent to calling the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_ReleaseComObject_\" data-linktype=\"relative-path\">ReleaseComObject</a> method in a loop until it returns 0 (zero).  </p>\n<p> When the reference count on the COM object becomes 0, the COM object is usually freed, although this depends on the COM object&#39;s implementation and is beyond the control of the runtime. However, the RCW can still exist, waiting to be garbage-collected.  </p>\n<p> The COM object cannot be used after it has been separated from its underlying RCW. If you try to call a method on the RCW after its reference count becomes 0, a <a class=\"xref\" href=\"system.runtime.interopservices.invalidcomobjectexception\" data-linktype=\"relative-path\">InvalidComObjectException</a> will be thrown.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_FreeBSTR_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_FreeBSTR_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FreeBSTR(IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Frees a <code>BSTR</code> using the COM <a href=\"http://go.microsoft.com/fwlink/?LinkID=148633\" data-linktype=\"external\">SysFreeString</a> function.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void FreeBSTR (IntPtr ptr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ptr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The address of the BSTR to be freed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Like <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_FreeCoTaskMem_\" data-linktype=\"relative-path\">FreeCoTaskMem</a> and <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_FreeHGlobal_\" data-linktype=\"relative-path\">FreeHGlobal</a>, you can use this method to deallocate memory. FreeBSTR calls the COM <a href=\"http://go.microsoft.com/fwlink/?LinkID=148633\" data-linktype=\"external\">SysFreeString</a> function, which frees memory allocated by any of the following unmanaged methods: <code>SysAllocString</code>, <code>SysAllocStringByteLen</code>, <code>SysAllocStringLen</code>, <code>SysReAllocString</code>, <code>SysReAllocStringLen</code>. You can call unmanaged methods such as these with platform invoke. For details, see <a href=\"../Topic/Consuming%20Unmanaged%20DLL%20Functions.md\" data-linktype=\"relative-path\">Consuming Unmanaged DLL Functions</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_FreeCoTaskMem_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_FreeCoTaskMem_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FreeCoTaskMem(IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Frees a block of memory allocated by the unmanaged COM task memory allocator.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void FreeCoTaskMem (IntPtr ptr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ptr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The address of the memory to be freed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can use FreeCoTaskMem to free any memory allocated by <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_AllocCoTaskMem_\" data-linktype=\"relative-path\">AllocCoTaskMem</a>, <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_ReAllocCoTaskMem_\" data-linktype=\"relative-path\">ReAllocCoTaskMem</a>, or any equivalent unmanaged method. If the <code>ptr</code> parameter is <code>null</code>, the method does nothing.  </p>\n<p> FreeCoTaskMem exposes the COM <a href=\"http://go.microsoft.com/fwlink/?LinkId=148638\" data-linktype=\"external\">CoTaskMemFree</a> function, which frees all bytes so that you can no longer use the memory that the <code>ptr</code> parameter points to.  </p>\n<p> In addition to FreeCoTaskMem, the <a class=\"xref\" href=\"system.runtime.interopservices.marshal\" data-linktype=\"relative-path\">Marshal</a> class provides two other memory-deallocation methods: <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_DestroyStructure_\" data-linktype=\"relative-path\">DestroyStructure</a> and <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_FreeHGlobal_\" data-linktype=\"relative-path\">FreeHGlobal</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_FreeHGlobal_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_FreeHGlobal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FreeHGlobal(IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Frees memory previously allocated from the unmanaged memory of the process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void FreeHGlobal (IntPtr hglobal);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>hglobal</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The handle returned by the original matching call to <span class=\"xref\">stem.Runtime.InteropServices.Marshal.AllocHGlobal*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can use FreeHGlobal to free any memory from the global heap allocated by <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_AllocHGlobal_\" data-linktype=\"relative-path\">AllocHGlobal</a>, <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_ReAllocHGlobal_\" data-linktype=\"relative-path\">ReAllocHGlobal</a>, or any equivalent unmanaged API method. If the <code>hglobal</code> parameter is <a class=\"xref\" href=\"system.intptr#System_IntPtr_Zero\" data-linktype=\"relative-path\">System.IntPtr.Zero</a> the method does nothing.  </p>\n<p> FreeHGlobal exposes the <a href=\"http://go.microsoft.com/fwlink/?LinkId=148640\" data-linktype=\"external\">LocalFree</a> function from Kernel32.DLL, which frees all bytes so that you can no longer use the memory pointed to by <code>hglobal</code>.  </p>\n<p> In addition to FreeHGlobal, the <a class=\"xref\" href=\"system.runtime.interopservices.marshal\" data-linktype=\"relative-path\">Marshal</a> class provides two other memory-deallocation API methods: <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_DestroyStructure_\" data-linktype=\"relative-path\">DestroyStructure</a> and <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_FreeCoTaskMem_\" data-linktype=\"relative-path\">FreeCoTaskMem</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates calling the FreeHGlobal method. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.runtime.interopservices.marshal\" data-linktype=\"relative-path\">Marshal</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Marshal#4\">    // Demonstrate how to call GlobalAlloc and \n    // GlobalFree using the Marshal class.\n    IntPtr hglobal = Marshal::AllocHGlobal(100);\n    Marshal::FreeHGlobal(hglobal);\n</code></pre><pre><code class=\"lang-cs\" name=\"Marshal#4\">        // Demonstrate how to call GlobalAlloc and \n        // GlobalFree using the Marshal class.\n        IntPtr hglobal = Marshal.AllocHGlobal(100);\n        Marshal.FreeHGlobal(hglobal);\n</code></pre><pre><code class=\"lang-vb\" name=\"Marshal#4\">        &#39; Demonstrate how to call GlobalAlloc and \n        &#39; GlobalFree using the Marshal class.\n        Dim hglobal As IntPtr = Marshal.AllocHGlobal(100)\n        Marshal.FreeHGlobal(hglobal)\n</code></pre><p> The following example demonstrates how to convert the contents of a managed <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> class to unmanaged memory and then dispose of the unmanaged memory when done.  </p>\n<pre><code class=\"lang-cpp\" name=\"Runtime.InteropServices.Marshal.StringToHGlobalAnsi#1\">using namespace System;\nusing namespace System::Runtime::InteropServices;\n\n#include &lt;iostream&gt;                                                 // for printf\n\n\nint main()\n{\n    // Create a managed string.\n    String^ managedString = &quot;Hello unmanaged world (from the managed world).&quot;;\n\n    // Marshal the managed string to unmanaged memory.\n    char* stringPointer = (char*) Marshal::StringToHGlobalAnsi(managedString ).ToPointer();\n\n    printf(&quot;stringPointer = %s<br>&quot;, stringPointer);\n\n    // Always free the unmanaged string.\n    Marshal::FreeHGlobal(IntPtr(stringPointer));\n\n    return 0;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Runtime.InteropServices.Marshal.StringToHGlobalAnsi#1\">using System;\nusing System.Runtime.InteropServices;\n\nclass MainFunction\n{\n    static void Main()\n    {\n    Console.WriteLine(&quot;<br>StringToGlobalAnsi<br>&quot;);\n\n    // Create a managed string.\n    String  managedString = &quot;I am a managed String&quot;;\n    Console.WriteLine(&quot;1) managedString = &quot; + managedString );\n\n    // Marshal the managed string to unmanaged memory.\n    IntPtr stringPointer = (IntPtr)Marshal.StringToHGlobalAnsi(managedString);\n    Console.WriteLine(&quot;2) stringPointer = {0}&quot;, stringPointer );\n\n    // Get the string back from unmanaged memory\n    String RetrievedString = Marshal.PtrToStringAnsi( stringPointer);\n    Console.WriteLine(&quot;3) Retrieved from unmanaged memory = &quot; + RetrievedString );\n\n    // Always free the unmanaged string.\n    Marshal.FreeHGlobal(stringPointer);\n\n    // IntPtr handle value is still the same:\n    Console.WriteLine(&quot;4) stringPointer = &quot; + stringPointer );\n\n    // However, it contains no data after being freed:\n    String RetrievedString2 = Marshal.PtrToStringAnsi( stringPointer);\n    Console.WriteLine(&quot;5) RetrievedString2 = &quot; + RetrievedString2 );\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_GenerateGuidForType_System_Type_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_GenerateGuidForType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GenerateGuidForType(Type)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the globally unique identifier (GUID) for the specified type, or generates a GUID using the algorithm used by the Type Library Exporter (Tlbexp.exe).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Guid GenerateGuidForType (Type type);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type to generate a GUID for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </div>\r\n                  <p>An identifier for the specified type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the type has a GUID in the metadata, it is returned. Otherwise, a GUID is automatically generated. You can use this method to programmatically determine the COM GUID for any managed type, including COM-invisible types. Class interfaces are the only exception because they do not correspond to a managed type. GenerateGuidForType provides the same functionality as the <a class=\"xref\" href=\"system.type#System_Type_GUID_\" data-linktype=\"relative-path\">GUID</a> property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_GenerateProgIdForType_System_Type_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_GenerateProgIdForType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GenerateProgIdForType(Type)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a programmatic identifier (ProgID) for the specified type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string GenerateProgIdForType (Type type);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type to get a ProgID for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The ProgID of the specified type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>type</code> parameter is not a class that can be create by COM. The class must be public, have a public default constructor, and be COM visible.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>type</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the type has a ProgID in the metadata, that ProgID is returned. Otherwise, a ProgID is generated based on the fully qualified name of the type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_GetActiveObject_System_String_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_GetActiveObject_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetActiveObject(String)</div>        \r\n          </div>\r\n    \r\n            <p>Obtains a running instance of the specified object from the running object table (ROT).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static object GetActiveObject (string progID);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>progID</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The programmatic identifier (ProgID) of the object that was requested.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The object that was requested; otherwise <code>null</code>. You can cast this object to any COM interface that it supports.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.comexception\" data-linktype=\"relative-path\">COMException</a></div>\r\n                  </div>\r\n                  <p>The object was not found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>GetActiveObject exposes the COM <a href=\"https://msdn.microsoft.com/library/ms221467(v=vs.85).aspx\" data-linktype=\"external\">GetActiveObject</a> function from OLEAUT32.DLL; however, the latter expects a class identifier (CLSID) instead of the programmatic identifier (<code>ProgID</code>) expected by this method. To obtain a running instance of a COM object without a registered <code>ProgID</code>, use platform invoke to define the COM <a href=\"https://msdn.microsoft.com/library/ms221467(v=vs.85).aspx\" data-linktype=\"external\">GetActiveObject</a> function. For a description of platform invoke, see <a href=\"../Topic/Consuming%20Unmanaged%20DLL%20Functions.md\" data-linktype=\"relative-path\">Consuming Unmanaged DLL Functions</a>.  </p>\n<h2 id=\"progid-and-clsid\">ProgID and CLSID</h2>\n<p> Keys in the HKEY_CLASSES_ROOT subtree of the registry contain a variety of subkey types. Most of the subkeys are ProgIDs, which map a user-friendly string to a CLSID. Applications often use these human-readable strings instead of the numeric CLSIDs. Often, a component has a version-independent ProgID that is mapped to the latest version of the component that is installed on the system.  </p>\n<p> Applications and components primarily use ProgIDs to retrieve their corresponding CLSIDs.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example was run on a computer that was configured with a running instance of Microsoft Word. There were no instances of Microsoft Excel running.  </p>\n<p> The example calls GetActiveObject twice. The first call tries to retrieve a reference to an instance of Microsoft Word (an instance of the <code>Word.Application</code> object). The second call tries to retrieve a reference to an instance of Microsoft Excel (an instance of an <code>Excel.Application</code> object).  </p>\n<p> The code retrieves a reference to an instance of Microsoft Word successfully. However, because Microsoft Excel is not running, the attempt to retrieve the second object raises a <a class=\"xref\" href=\"system.runtime.interopservices.comexception\" data-linktype=\"relative-path\">COMException</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Runtime.InteropServices.Marshal.GetActiveObject#1\">\nImports System\nImports System.Runtime.InteropServices\n\nModule Module1\n\n    Sub Main()\n        Console.WriteLine(vbcrlf + &quot;Sample: VB System.Runtime.InteropServices.Marshal.GetActiveObject.vb&quot; + vbcrlf) \n        GetObj(1, &quot;Word.Application&quot;)\n        GetObj(2, &quot;Excel.Application&quot;)\n    End Sub\n\n\n    Sub GetObj(ByVal i As Integer, ByVal progID As [String])\n        Dim obj As [Object] = Nothing\n        \n        Console.WriteLine((vbLf &amp; i &amp; &quot;) Object obj = GetActiveObject(&quot;&quot;&quot;) + progID &amp; &quot;&quot;&quot;)&quot;)\n        Try\n            obj = Marshal.GetActiveObject(progID)\n        Catch e As Exception\n            Write2Console((vbLf &amp; &quot;   Failure: obj did not get initialized&quot; &amp; vbLf &amp; &quot;   Exception = &quot;) + e.ToString().Substring(0, 43), 0)\n        End Try\n        \n        If obj IsNot Nothing Then\n            Write2Console(vbLf &amp; &quot;   Success: obj = &quot; &amp; obj.ToString(), 1)\n        End If\n    End Sub\n\n    Sub Write2Console(ByVal s As [String], ByVal color As Integer)\n        Console.ForegroundColor = If(color = 1, ConsoleColor.Green, ConsoleColor.Red)\n        Console.WriteLine(s)\n        Console.ForegroundColor = ConsoleColor.Gray\n    End Sub\n\nEnd Module\n\n&#39;Expected Output:\n&#39;\n&#39;Sample: VB System.Runtime.InteropServices.Marshal.GetActiveObject.vb\n&#39;\n&#39;1) Object obj = GetActiveObject(&quot;Word.Application&quot;)\n&#39;\n&#39;   Success: obj = System.__ComObject\n&#39;\n&#39;2) Object obj = GetActiveObject(&quot;Excel.Application&quot;)\n&#39;\n&#39;   Failure: obj did not get initialized\n&#39;   Exception = System.Runtime.InteropServices.COMException\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Runtime.InteropServices.Marshal.GetActiveObject#1\">\nusing System;\nusing System.Runtime.InteropServices;\n\nclass MainFunction\n{\n    static void Main()\n        {\n        Console.WriteLine(&quot;<br>Sample: C# System.Runtime.InteropServices.Marshal.GetActiveObject.cs<br>&quot;); \n\n        GetObj(1, &quot;Word.Application&quot;);\n        GetObj(2, &quot;Excel.Application&quot;);\n        }\n\n    static void GetObj(int i, String progID)\n\t{\n        Object obj = null;\n\n        Console.WriteLine(&quot;<br>&quot; +i+&quot;) Object obj = GetActiveObject(\\&quot;&quot; + progID + &quot;\\&quot;)&quot;);\n        try\n           { obj = Marshal.GetActiveObject(progID); }\n        catch (Exception e)\n           {\n           Write2Console(&quot;<br>   Failure: obj did not get initialized<br>&quot; + \n                         &quot;   Exception = &quot; +e.ToString().Substring(0,43), 0); \n           }\n \n        if (obj != null)\n           { Write2Console(&quot;<br>   Success: obj = &quot; + obj.ToString(), 1 ); }\n\t}\n\n         \n    static void Write2Console(String s, int color)\n        {\n        Console.ForegroundColor = color == 1? ConsoleColor.Green : ConsoleColor.Red;\n        Console.WriteLine(s); \n        Console.ForegroundColor = ConsoleColor.Gray;\n\t}\n}\n\n/*\nExpected Output:\n\nSample: C# System.Runtime.InteropServices.Marshal.GetActiveObject.cs\n\n1) Object obj = GetActiveObject(&quot;Word.Application&quot;)\n\n   Success: obj = System.__ComObject\n\n2) Object obj = GetActiveObject(&quot;Excel.Application&quot;)\n\n   Failure: obj did not get initialized\n   Exception = System.Runtime.InteropServices.COMException\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_GetComInterfaceForObject_System_Object_System_Type_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_GetComInterfaceForObject_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetComInterfaceForObject(Object,Type)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a pointer to an <a href=\"http://go.microsoft.com/fwlink/?LinkId=148003\" data-linktype=\"external\">IUnknown</a> interface that represents the specified interface on the specified object. Custom query interface access is enabled by default.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static IntPtr GetComInterfaceForObject (object o, Type T);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>o</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object that provides the interface.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>T</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of interface that is requested.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>The interface pointer that represents the specified interface for the object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>T</code> parameter is not an interface.  </p>\n<p> -or-  </p>\n<p> The type is not visible to COM.  </p>\n<p> -or-  </p>\n<p> The <code>T</code> parameter is a generic type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>The <code>o</code> parameter does not support the requested interface.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>o</code> parameter is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>T</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method returns an interface pointer that represents the requested interface on the specified object. It is particularly useful if you have an unmanaged method that expects to be passed an interface pointer. Calling an object with this method causes the reference count to increment on the interface pointer before the pointer is returned. Always use <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_Release_\" data-linktype=\"relative-path\">Release</a> to decrement the reference count once you have finished with the pointer. You must adhere to the rules defined by COM when using raw COM interface pointers.  </p>\n<p> GetComInterfaceForObject is useful when calling a method that exposes a COM object parameter as an <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a> type, or with custom marshaling. Although less common, you can use this method on a managed object to obtain a pointer to the object&#39;s COM callable wrapper. For example, you can use GetComInterfaceForObject on a managed object that is exported to COM to obtain an interface pointer for <a class=\"xref\" href=\"system.runtime.interopservices.ucomiconnectionpointcontainer\" data-linktype=\"relative-path\">System.Runtime.InteropServices.UCOMIConnectionPointContainer</a>. You cannot obtain a pointer to a class interface since a class interface lacks the corresponding type to pass to the second parameter (<code>t</code>). Instead, use <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_GetIDispatchForObject_\" data-linktype=\"relative-path\">GetIDispatchForObject</a> to invoke the members on the default interface of the COM callable wrapper, which is usually an auto-dispatch class interface.  </p>\n<p> The GetComInterfaceForObject method overload allows query interface customization by default. To specify whether to apply query interface customization, use the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_GetComInterfaceForObject_System_Object_System_Type_System_Runtime_InteropServices_CustomQueryInterfaceMode_\" data-linktype=\"relative-path\">GetComInterfaceForObject(Object,Type,CustomQueryInterfaceMode)</a> method overload.  </p>\n<p> For additional information, see the <a href=\"../Topic/COM%20Callable%20Wrapper.md\" data-linktype=\"relative-path\">COM Callable Wrapper</a>, <a href=\"../Topic/Runtime%20Callable%20Wrapper.md\" data-linktype=\"relative-path\">Runtime Callable Wrapper</a>, and <a href=\"http://msdn.microsoft.com/en-us/733c0dd2-12e5-46e6-8de1-39d5b25df024\" data-linktype=\"external\">Introducing the Class Interface</a> topics.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_GetComInterfaceForObject_System_Object_System_Type_System_Runtime_InteropServices_CustomQueryInterfaceMode_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_GetComInterfaceForObject_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetComInterfaceForObject(Object,Type,CustomQueryInterfaceMode)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a pointer to an <a href=\"http://go.microsoft.com/fwlink/?LinkId=148003\" data-linktype=\"external\">IUnknown</a> interface that represents the specified interface on the specified object. Custom query interface access is controlled by the specified customization mode.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static IntPtr GetComInterfaceForObject (object o, Type T, System.Runtime.InteropServices.CustomQueryInterfaceMode mode);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>o</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object that provides the interface.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>T</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of interface that is requested.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>mode</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.customqueryinterfacemode\" data-linktype=\"relative-path\">CustomQueryInterfaceMode</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the enumeration values that indicates whether to apply an <code>IUnknown::QueryInterface</code> customization that is supplied by an <a class=\"xref\" href=\"system.runtime.interopservices.icustomqueryinterface\" data-linktype=\"relative-path\">ICustomQueryInterface</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>The interface pointer that represents the interface for the object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>T</code> parameter is not an interface.  </p>\n<p> -or-  </p>\n<p> The type is not visible to COM.  </p>\n<p> -or-  </p>\n<p> The <code>T</code> parameter is a generic type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>The object <code>o</code> does not support the requested interface.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>o</code> parameter is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>T</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>GetComInterfaceForObjectlets you specify whether to apply query interface customization. Use the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_GetComInterfaceForObject_System_Object_System_Type_\" data-linktype=\"relative-path\">GetComInterfaceForObject(Object,Type)</a> overload to apply query interface customization by default.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_GetComInterfaceForObject__2___0_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_GetComInterfaceForObject_T_TInterface__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetComInterfaceForObject&lt;T,TInterface&gt;(T)</div>        \r\n          </div>\r\n    \r\n            <p>[Supported in the .NET Framework 4.5.1 and later versions]  </p>\n<p> Returns a pointer to an <a href=\"http://go.microsoft.com/fwlink/?LinkId=148003\" data-linktype=\"external\">IUnknown</a> interface that represents the specified interface on an object of the specified type. Custom query interface access is enabled by default.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static IntPtr GetComInterfaceForObject&lt;T,TInterface&gt; (T o);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>o</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object that provides the interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>The interface pointer that represents the <code>TInterface</code> interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>TInterface</code> parameter is not an interface.  </p>\n<p> -or-  </p>\n<p> The type is not visible to COM.  </p>\n<p> -or-  </p>\n<p> The <code>T</code> parameter is an open generic type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>The <code>o</code> parameter does not support the <code>TInterface</code> interface.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>o</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method returns an interface pointer that represents the <code>TInterface</code> interface on the specified object. It is particularly useful if you have an unmanaged method that expects to be passed an interface pointer. Calling an object with this method causes the reference count to increment on the interface pointer before the pointer is returned. Always use the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_Release_\" data-linktype=\"relative-path\">Release</a>method to decrement the reference count when you have finished with the pointer. You must adhere to the rules defined by COM when using raw COM interface pointers.  </p>\n<p> GetComInterfaceForObject(T, is useful when calling a method that exposes a COM object parameter as an <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a> type, or with custom marshaling. You can also use this method on a managed object to obtain a pointer to the object&#39;s COM callable wrapper, although this is less common. For example, you can useGetComInterfaceForObject(T, on a managed object that is exported to COM to obtain an interface pointer for <a class=\"xref\" href=\"system.runtime.interopservices.ucomiconnectionpointcontainer\" data-linktype=\"relative-path\">System.Runtime.InteropServices.UCOMIConnectionPointContainer</a>.  </p>\n<p> TheGetComInterfaceForObject(T, method overload allows query interface customization by default. To specify whether to apply query interface customization, use the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_GetComInterfaceForObject_System_Object_System_Type_System_Runtime_InteropServices_CustomQueryInterfaceMode_\" data-linktype=\"relative-path\">GetComInterfaceForObject(Object,Type,CustomQueryInterfaceMode)</a> method overload.  </p>\n<p> For additional information, see the <a href=\"../Topic/COM%20Callable%20Wrapper.md\" data-linktype=\"relative-path\">COM Callable Wrapper</a>, <a href=\"../Topic/Runtime%20Callable%20Wrapper.md\" data-linktype=\"relative-path\">Runtime Callable Wrapper</a>, and <a href=\"http://msdn.microsoft.com/en-us/733c0dd2-12e5-46e6-8de1-39d5b25df024\" data-linktype=\"external\">Introducing the Class Interface</a> topics.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_GetComInterfaceForObjectInContext_System_Object_System_Type_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_GetComInterfaceForObjectInContext_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetComInterfaceForObjectInContext(Object,Type)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an interface pointer that represents the specified interface for an object, if the caller is in the same context as that object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static IntPtr GetComInterfaceForObjectInContext (object o, Type t);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>o</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object that provides the interface.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>t</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of interface that is requested.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>The interface pointer specified by <code>t</code> that represents the interface for the specified object, or <code>null</code> if the caller is not in the same context as the object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>t</code> is not an interface.  </p>\n<p> -or-  </p>\n<p> The type is not visible to COM.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p><code>o</code> does not support the requested interface.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>o</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>t</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is the same as <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_GetComInterfaceForObject_\" data-linktype=\"relative-path\">GetComInterfaceForObject</a> except that it returns <code>null</code> if the caller is not in the same context as the object. It is particularly useful if you have an unmanaged method that expects to be passed an interface pointer.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_GetComObjectData_System_Object_System_Object_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_GetComObjectData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetComObjectData(Object,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves data that is referenced by the specified key from the specified COM object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static object GetComObjectData (object obj, object key);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The COM object that contains the data that you want.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key in the internal hash table of <code>obj</code> to retrieve the data from.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The data represented by the <code>key</code> parameter in the internal hash table of the <code>obj</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>obj</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>key</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>obj</code> is not a COM object.  </p>\n<p> -or-  </p>\n<p> <code>obj</code> is a Windows Runtime object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>All COM objects wrapped in a <a href=\"../Topic/Runtime%20Callable%20Wrapper.md\" data-linktype=\"relative-path\">Runtime Callable Wrapper</a> have an associated hash table, which GetComObjectData retrieves. <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_SetComObjectData_\" data-linktype=\"relative-path\">SetComObjectData</a> adds data to the hash table. You should never have to call either method from your code.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_GetComSlotForMethodInfo_System_Reflection_MemberInfo_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_GetComSlotForMethodInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetComSlotForMethodInfo(MemberInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the virtual function table (v-table or VTBL) slot for a specified <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> type when that type is exposed to COM.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int GetComSlotForMethodInfo (System.Reflection.MemberInfo m);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>m</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that represents an interface method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The VTBL slot <code>m</code> identifier when it is exposed to COM.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>m</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>m</code> parameter is not a <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> object.  </p>\n<p> -or-  </p>\n<p> The <code>m</code> parameter is not an interface method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The zero-based slot number returned by this method accounts for three <a href=\"http://go.microsoft.com/fwlink/?LinkId=148003\" data-linktype=\"external\">IUnknown</a> and possibly four <a href=\"http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5\" data-linktype=\"external\">IDispatch</a> methods, making the value of the first available slot either 3 or 7. GetComSlotForMethodInfo provides the opposite functionality of <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_GetMethodInfoForComSlot_\" data-linktype=\"relative-path\">GetMethodInfoForComSlot</a>.  </p>\n<p> You can use this method to retrieve slot numbers for members of interfaces that are not visible from COM and for members of private interfaces. The slot numbers returned correspond to the v-table numbers that would be reserved if the type was exposed to COM. COM-invisible members actually occupy a slot in an exposed v-table, even though the COM client cannot use the slot. You cannot use GetComSlotForMethodInfo on a class interface by passing <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> from a class. For additional information, see <a href=\"http://msdn.microsoft.com/en-us/733c0dd2-12e5-46e6-8de1-39d5b25df024\" data-linktype=\"external\">Introducing the Class Interface</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_GetDelegateForFunctionPointer_System_IntPtr_System_Type_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_GetDelegateForFunctionPointer_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDelegateForFunctionPointer(IntPtr,Type)</div>        \r\n          </div>\r\n    \r\n            <p>Converts an unmanaged function pointer to a delegate.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Delegate GetDelegateForFunctionPointer (IntPtr ptr, Type t);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ptr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The unmanaged function pointer to be converted.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>t</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the delegate to be returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></div>\r\n                  </div>\r\n                  <p>A delegate instance that can be cast to the appropriate delegate type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>t</code> parameter is not a delegate or is generic.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>ptr</code> parameter is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>t</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In versions 1.0 and 1.1 of the .NET Framework, it was possible to pass a delegate representing a managed method to unmanaged code as a function pointer, allowing the unmanaged code to call the managed method through the function pointer. It was also possible for the unmanaged code to pass that function pointer back to the managed code, and the pointer was resolved properly to the underlying managed method.  </p>\n<p> In the .NET Framework 2.0 and later versions, you can use the GetDelegateForFunctionPointer and <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_GetFunctionPointerForDelegate_\" data-linktype=\"relative-path\">GetFunctionPointerForDelegate</a> methods to marshal delegates in both directions. With GetDelegateForFunctionPointer, <code>ptr</code> is imported as a <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">System.IntPtr</a>. A <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">System.IntPtr</a> can be obtained for a managed delegate by calling <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_GetFunctionPointerForDelegate_\" data-linktype=\"relative-path\">GetFunctionPointerForDelegate</a> and passed as a parameter; it can then be called from inside the unmanaged method. Note that the parameter marshaler can also marshal function pointers to delegates in the .NET Framework 2.0 and later versions.  </p>\n<p> The GetDelegateForFunctionPointer method has the following restrictions:  </p>\n<ul>\n<li><p>Generics are not supported in interop scenarios.  </p>\n</li>\n<li><p>You cannot pass an invalid function pointer to this method.  </p>\n</li>\n<li><p>You can use this method only for pure unmanaged function pointers.  </p>\n</li>\n<li><p>You cannot use this method with function pointers obtained through C++ or from the <a class=\"xref\" href=\"system.runtimemethodhandle#System_RuntimeMethodHandle_GetFunctionPointer_\" data-linktype=\"relative-path\">GetFunctionPointer</a> method.  </p>\n</li>\n<li><p>You cannot use this method to create a delegate from a function pointer to another managed delegate.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_GetDelegateForFunctionPointer__1_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_GetDelegateForFunctionPointer_TDelegate__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDelegateForFunctionPointer&lt;TDelegate&gt;(IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>[Supported in the .NET Framework 4.5.1 and later versions]  </p>\n<p> Converts an unmanaged function pointer to a delegate of a specified type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TDelegate GetDelegateForFunctionPointer&lt;TDelegate&gt; (IntPtr ptr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ptr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The unmanaged function pointer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TDelegate</span></div>\r\n                  </div>\r\n                  <p>A instance of the specified delegate type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>TDelegate</code> generic parameter is not a delegate, or it is an open generic type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>ptr</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can use theGetDelegateForFunctionPointer(TDelegate) and<a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_GetFunctionPointerForDelegate__1___0_\" data-linktype=\"relative-path\">GetFunctionPointerForDelegate&lt;TDelegate&gt;(TDelegate)</a>methods to marshal delegates in both directions.  </p>\n<p> TheGetDelegateForFunctionPointer(TDelegate) method has the following restrictions:  </p>\n<ul>\n<li><p>You cannot pass an invalid function pointer to this method.  </p>\n</li>\n<li><p>You can use this method only for pure unmanaged function pointers.  </p>\n</li>\n<li><p>You cannot use this method with function pointers obtained through C++ or from the <a class=\"xref\" href=\"system.runtimemethodhandle#System_RuntimeMethodHandle_GetFunctionPointer_\" data-linktype=\"relative-path\">GetFunctionPointer</a> method.  </p>\n</li>\n<li><p>You cannot use this method to create a delegate from a function pointer to another managed delegate.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_GetEndComSlot_System_Type_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_GetEndComSlot_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEndComSlot(Type)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the last slot in the virtual function table (v-table or VTBL) of a type when exposed to COM.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int GetEndComSlot (Type t);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>t</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A type that represents an interface or class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The last VTBL slot of the interface when exposed to COM. If the <code>t</code> parameter is a class, the returned VTBL slot is the last slot in the interface that is generated from the class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method returns the zero-based, v-table number for an interface or a class. When used on a class, the slot number returned refers to the class interface for the class. If the class interface is auto-dual, this method always returns -1 to indicate that the dispatch-only interface does not expose a v-table to managed clients. You can use GetEndComSlot and <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_GetStartComSlot_\" data-linktype=\"relative-path\">GetStartComSlot</a> in conjunction with <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_GetMethodInfoForComSlot_\" data-linktype=\"relative-path\">GetMethodInfoForComSlot</a> to pass slots within a specified range. For additional information, see <a href=\"http://msdn.microsoft.com/en-us/733c0dd2-12e5-46e6-8de1-39d5b25df024\" data-linktype=\"external\">Introducing the Class Interface</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_GetExceptionCode\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_GetExceptionCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetExceptionCode()</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves a code that identifies the type of the exception that occurred.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int GetExceptionCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The type of the exception.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>GetExceptionCode is exposed for compiler support of structured exception handling (SEH) only. If this method is called before an exception is thrown, it returns 0x0.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_GetExceptionForHR_System_Int32_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_GetExceptionForHR_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetExceptionForHR(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified HRESULT error code to a corresponding <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Exception GetExceptionForHR (int errorCode);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>errorCode</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The HRESULT to be converted.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a></div>\r\n                  </div>\r\n                  <p>An object that represents the converted HRESULT.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_GetExceptionForHR_\" data-linktype=\"relative-path\">GetExceptionForHR</a> method to get an <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> based on an HRESULT without having to call the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_ThrowExceptionForHR_\" data-linktype=\"relative-path\">ThrowExceptionForHR</a> method and catch the exception.  </p>\n<p> The current <a href=\"http://msdn.microsoft.com/en-us/4dda6909-2d9a-4727-ae0c-b5f90dcfa447\" data-linktype=\"external\">IErrorInfo</a> interface is used to construct the exception.  </p>\n<p> For the mapping from each HRESULT to its comparable exception class in the .NET Framework, see <a href=\"../Topic/How%20to:%20Map%20HRESULTs%20and%20Exceptions.md\" data-linktype=\"relative-path\">How to: Map HRESULTs and Exceptions</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_GetExceptionForHR_System_Int32_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_GetExceptionForHR_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetExceptionForHR(Int32,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified HRESULT error code to a corresponding <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> object, with additional error information passed in an <a href=\"http://msdn.microsoft.com/en-us/4dda6909-2d9a-4727-ae0c-b5f90dcfa447\" data-linktype=\"external\">IErrorInfo</a> interface for the exception object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Exception GetExceptionForHR (int errorCode, IntPtr errorInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>errorCode</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The HRESULT to be converted.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>errorInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to the <code>IErrorInfo</code> interface that provides more information about the error. You can specify <code>IntPtr(0)</code> to use the current <code>IErrorInfo</code> interface, or <code>IntPtr(-1)</code> to ignore the current <code>IErrorInfo</code> interface and construct the exception just from the error code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a></div>\r\n                  </div>\r\n                  <p>An object that represents the converted HRESULT and information obtained from <code>errorInfo</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_GetExceptionForHR_\" data-linktype=\"relative-path\">GetExceptionForHR</a> method to get an <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> based on an HRESULT without having to call the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_ThrowExceptionForHR_\" data-linktype=\"relative-path\">ThrowExceptionForHR</a> method and catch the exception (thus avoiding the corresponding performance overhead). The <code>errorInfo</code> parameter supplies additional information about the error, such as its textual description and the globally unique identifier (GUID) for the interface that defined the error.  </p>\n<p> Use this method overload if you have custom error information that you have to supply in the conversion.  </p>\n<p> For the mapping from each HRESULT to its comparable exception class in the .NET Framework, see <a href=\"../Topic/How%20to:%20Map%20HRESULTs%20and%20Exceptions.md\" data-linktype=\"relative-path\">How to: Map HRESULTs and Exceptions</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_GetExceptionPointers\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_GetExceptionPointers_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetExceptionPointers()</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves a computer-independent description of an exception, and information about the state that existed for the thread when the exception occurred.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static IntPtr GetExceptionPointers ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>A pointer to an <a href=\"http://go.microsoft.com/fwlink/?LinkId=148648\" data-linktype=\"external\">EXCEPTION_POINTERS</a> structure.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>GetExceptionPointers is exposed for compiler support of structured exception handling (SEH) only.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_GetFunctionPointerForDelegate_System_Delegate_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_GetFunctionPointerForDelegate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetFunctionPointerForDelegate(Delegate)</div>        \r\n          </div>\r\n    \r\n            <p>Converts a delegate into a function pointer that is callable from unmanaged code.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static IntPtr GetFunctionPointerForDelegate (Delegate d);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>d</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate to be passed to unmanaged code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>A value that can be passed to unmanaged code, which, in turn, can use it to call the underlying managed delegate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>d</code> parameter is a generic type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>d</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The delegate <code>d</code> is converted to a function pointer that can be passed to unmanaged code using the <a href=\"../Topic/__stdcall.md\" data-linktype=\"relative-path\">__stdcall</a> calling convention.  </p>\n<p> You must manually keep the delegate from being collected by the garbage collector from managed code. The garbage collector does not track references to unmanaged code.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_GetFunctionPointerForDelegate__1___0_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_GetFunctionPointerForDelegate_TDelegate__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetFunctionPointerForDelegate&lt;TDelegate&gt;(TDelegate)</div>        \r\n          </div>\r\n    \r\n            <p>[Supported in the .NET Framework 4.5.1 and later versions]  </p>\n<p> Converts a delegate of a specified type to a function pointer that is callable from unmanaged code.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static IntPtr GetFunctionPointerForDelegate&lt;TDelegate&gt; (TDelegate d);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>d</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">TDelegate</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate to be passed to unmanaged code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>A value that can be passed to unmanaged code, which, in turn, can use it to call the underlying managed delegate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>d</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The delegate <code>d</code> is converted to a function pointer that can be passed to unmanaged code by using the <a href=\"../Topic/__stdcall.md\" data-linktype=\"relative-path\">__stdcall</a> calling convention.  </p>\n<p> You must manually keep the delegate from being collected by the garbage collector from managed code. The garbage collector does not track references to unmanaged code.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_GetHINSTANCE_System_Reflection_Module_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_GetHINSTANCE_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHINSTANCE(Module)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the instance handle (HINSTANCE) for the specified module.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static IntPtr GetHINSTANCE (System.Reflection.Module m);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>m</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The module whose HINSTANCE is desired.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>The HINSTANCE for <code>m</code>; or -1 if the module does not have an HINSTANCE.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>m</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When dynamic or in-memory, modules do not have an HINSTANCE.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_GetHRForException_System_Exception_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_GetHRForException_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHRForException(Exception)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified exception to an HRESULT.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int GetHRForException (Exception e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The exception to convert to an HRESULT.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The HRESULT mapped to the supplied exception.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>GetHRForException also sets up an <a href=\"https://msdn.microsoft.com/library/ms221233(v=vs.85).aspx\" data-linktype=\"external\">IErrorInfo</a> interface for the exception that can be obtained by calling the COM GetErrorInfoNEEDGUID function. You can use this function to return an HRESULT value on a managed class implementation of a COM interface where you apply the <a class=\"xref\" href=\"system.runtime.interopservices.preservesigattribute\" data-linktype=\"relative-path\">PreserveSigAttribute</a> attribute. Have the attributed method catch all exceptions and use the GetHRForException method to return the appropriate HRESULT value. Allowing an exception to propagate outside the method produces incorrect behavior. (In fact, the common language runtime fails to pass an exception to a COM client that calls such a method through a v-table.)  </p>\n<p> Note that the GetHRForException method sets the <a href=\"https://msdn.microsoft.com/library/ms221233(v=vs.85).aspx\" data-linktype=\"external\">IErrorInfo</a> interface of the current thread. This can cause unexpected results for methods like the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_ThrowExceptionForHR_\" data-linktype=\"relative-path\">ThrowExceptionForHR</a> methods that default to using the <a href=\"https://msdn.microsoft.com/library/ms221233(v=vs.85).aspx\" data-linktype=\"external\">IErrorInfo</a> of the current thread if it is set.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_GetHRForLastWin32Error\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_GetHRForLastWin32Error_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHRForLastWin32Error()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the HRESULT corresponding to the last error incurred by Win32 code executed using <a class=\"xref\" href=\"system.runtime.interopservices.marshal\" data-linktype=\"relative-path\">Marshal</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int GetHRForLastWin32Error ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The HRESULT corresponding to the last Win32 error code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The target function must have had the <code>setLastError</code> metadata flag set. For example, the <code>SetLastError</code> field of the <a class=\"xref\" href=\"system.runtime.interopservices.dllimportattribute\" data-linktype=\"relative-path\">System.Runtime.InteropServices.DllImportAttribute</a> must be <code>true</code>. The process for setting this flag depends on the source language used: C# and C++ are <code>false</code> by default, but the <code>Declare</code> statement in Visual Basic is <code>true</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to retrieve an HRESULT corresponding to a Win32 error code using the GetHRForLastWin32Error method.  </p>\n<pre><code class=\"lang-cs\" name=\"Runtime.InteropServices.Marshal.GetHRForLastWin32Error#1\">using System;\nusing System.Runtime.InteropServices;\n\ninternal class Win32\n{\n    // Use DllImportAttribute to inport the Win32 MessageBox\n    // function.  Set the SetLastError flag to true to allow\n    // the function to set the Win32 error.\n    [DllImportAttribute(&quot;user32.dll&quot;, SetLastError = true, CharSet = CharSet.Unicode)]\n    public static extern int MessageBox(IntPtr hwnd, String text, String caption, uint type);\n\n}\n\nclass Program\n{\n\n    static void Run()\n    {\n\n        // Call the MessageBox with an invalid window handle to\n        // produce a Win32 error.\n\n        Console.WriteLine(&quot;Calling Win32 MessageBox with error...&quot;);\n\n        Win32.MessageBox(new IntPtr(123132), &quot;Press OK...&quot;, &quot;Press OK Dialog&quot;, 0);\n\n        // Get the last error and display it.\n\n        int HRESULT = Marshal.GetHRForLastWin32Error();\n\n        Console.WriteLine(&quot;The last Win32 Error was: &quot; + HRESULT);\n    }\n\n    static void Main(string[] args)\n    {\n        Run();\n    }\n}\n// This code example displays the following to the console: \n//\n// Calling Win32 MessageBox with error...\n// The last Win32 Error was: -2147023496\n</code></pre><pre><code class=\"lang-vb\" name=\"Runtime.InteropServices.Marshal.GetHRForLastWin32Error#1\">Imports System.Runtime.InteropServices\n\nModule Win32\n    &#39; Use DllImportAttribute to inport the Win32 MessageBox\n    &#39; function.  Set the SetLastError flag to true to allow\n    &#39; the function to set the Win32 error.\n    &lt;DllImportAttribute(&quot;user32.dll&quot;, SetLastError:=True, CharSet:=CharSet.Unicode)&gt; _\n    Function MessageBox(ByVal hwnd As IntPtr, ByVal text As String, ByVal caption As String, ByVal type As UInt32) As Integer\n    End Function\n\nEnd Module\n\nModule Program\n\n\n    Sub Run()\n\n\n\n        &#39; Call the MessageBox with an invalid window handle to\n        &#39; produce a Win32 error.\n\n        Console.WriteLine(&quot;Calling Win32 MessageBox with error...&quot;)\n\n        Win32.MessageBox(New IntPtr(123132), &quot;Press OK...&quot;, &quot;Press OK Dialog&quot;, 0)\n\n        &#39; Get the last error and display it.\n        Dim HRESULT As Integer\n\n        HRESULT = Marshal.GetHRForLastWin32Error()\n\n        Console.WriteLine(&quot;The last Win32 Error was: &quot; + HRESULT)\n\n    End Sub\n\n    Sub Main(ByVal args() As String)\n\n        Run()\n\n    End Sub\n\nEnd Module\n\n&#39; This code example displays the following to the console: \n&#39;\n&#39; Calling Win32 MessageBox with error...\n&#39; The last Win32 Error was: -2147023496\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_GetIDispatchForObject_System_Object_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_GetIDispatchForObject_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetIDispatchForObject(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an <a href=\"http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5\" data-linktype=\"external\">IDispatch</a> interface from a managed object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static IntPtr GetIDispatchForObject (object o);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>o</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object whose <code>IDispatch</code> interface is requested.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>The <code>IDispatch</code> pointer for the <code>o</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p><code>o</code> does not support the requested interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In managed code, you seldom work directly with the <code>IDispatch</code> interface. However, GetIDispatchForObject is useful when calling a method that exposes a COM object parameter as an <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a> type, or with custom marshaling. Calling an object with this method causes the reference count to increment on the interface pointer before the pointer is returned. Always use <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_Release_\" data-linktype=\"relative-path\">Release</a> to decrement the reference count once you have finished with the pointer.  </p>\n<p> You can also use this method on a managed object to obtain an interface pointer to the COM callable wrapper for the object. For additional information, see <a href=\"../Topic/COM%20Callable%20Wrapper.md\" data-linktype=\"relative-path\">COM Callable Wrapper</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_GetIDispatchForObjectInContext_System_Object_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_GetIDispatchForObjectInContext_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetIDispatchForObjectInContext(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an <a href=\"http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5\" data-linktype=\"external\">IDispatch</a> interface pointer from a managed object, if the caller is in the same context as that object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static IntPtr GetIDispatchForObjectInContext (object o);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>o</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object whose <code>IDispatch</code> interface is requested.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>The <code>IDispatch</code> interface pointer for the specified object, or <code>null</code> if the caller is not in the same context as the specified object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p><code>o</code> does not support the requested interface.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>o</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is the same as <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_GetIDispatchForObject_\" data-linktype=\"relative-path\">GetIDispatchForObject</a> except that it returns <code>null</code> if the caller is not in the same context as the object.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_GetITypeInfoForType_System_Type_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_GetITypeInfoForType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetITypeInfoForType(Type)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <a class=\"xref\" href=\"system.runtime.interopservices.comtypes.itypeinfo\" data-linktype=\"relative-path\">ITypeInfo</a> interface from a managed type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static IntPtr GetITypeInfoForType (Type t);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>t</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type whose <code>ITypeInfo</code> interface is being requested.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>A pointer to the <code>ITypeInfo</code> interface for the <code>t</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>t</code> is not a visible type to COM.  </p>\n<p> -or-  </p>\n<p> <code>t</code> is a Windows Runtime type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.comexception\" data-linktype=\"relative-path\">COMException</a></div>\r\n                  </div>\r\n                  <p>A type library is registered for the assembly that contains the type, but the type definition cannot be found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method returns a pointer to an <code>ITypeInfo</code> implementation that is based on the original type. Calling an object with GetITypeInfoForType causes the reference count to increment on the interface pointer before the pointer is returned. Always use <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_Release_\" data-linktype=\"relative-path\">Release</a> to decrement the reference count once you have finished with the pointer. You can apply the <a class=\"xref\" href=\"system.runtime.interopservices.marshalasattribute\" data-linktype=\"relative-path\">System.Runtime.InteropServices.MarshalAsAttribute</a> to replace standard interop marshaling behavior with this custom marshaler.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to retrieve a pointer to the <code>ITypeInfo</code> interface for a type using the GetITypeInfoForType method.  </p>\n<pre><code class=\"lang-cs\" name=\"Runtime.InteropServices.Marshal.GetITypeInfoForType#1\">using System;\nusing System.Runtime.InteropServices;\n\nclass Program\n{\n\n    static void Run()\n    {\n        Console.WriteLine(&quot;Calling Marshal.GetITypeInfoForType...&quot;);\n\n        // Get the ITypeInfo pointer for an Object type\n        IntPtr pointer = Marshal.GetITypeInfoForType(typeof(object));\n\n        Console.WriteLine(&quot;Calling Marshal.Release...&quot;);\n\n        // Always call Marshal.Release to decrement the reference count.\n        Marshal.Release(pointer);\n    }\n\n    static void Main(string[] args)\n    {\n        Run();\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Runtime.InteropServices.Marshal.GetITypeInfoForType#1\">Imports System.Runtime.InteropServices\n\nModule Program\n\n\n    Sub Run()\n\n        &#39; Dim a pointer\n        Dim pointer As IntPtr\n\n        Console.WriteLine(&quot;Calling Marshal.GetIUnknownForObjectInContext...&quot;)\n\n        &#39; Get the ITypeInfo pointer for an Object type\n        pointer = Marshal.GetITypeInfoForType(Type.GetType(&quot;System.Object&quot;))\n\n        Console.WriteLine(&quot;Calling Marshal.Release...&quot;)\n\n        &#39; Always call Marshal.Release to decrement the reference count.\n        Marshal.Release(pointer)\n\n\n\n    End Sub\n\n    Sub Main(ByVal args() As String)\n\n        Run()\n\n    End Sub\n\nEnd Module\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_GetIUnknownForObject_System_Object_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_GetIUnknownForObject_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetIUnknownForObject(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an <a href=\"http://go.microsoft.com/fwlink/?LinkId=148003\" data-linktype=\"external\">IUnknown</a> interface from a managed object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static IntPtr GetIUnknownForObject (object o);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>o</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object whose <code>IUnknown</code> interface is requested.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>The <code>IUnknown</code> pointer for the <code>o</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In managed code, you seldom work directly with the <code>IUnknown</code> interface. However, GetIUnknownForObject is useful when calling a method that exposes a COM object parameter as an <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a> type, or with custom marshaling. Calling an object with this method causes the reference count to increment on the interface pointer before the pointer is returned. Always use <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_Release_\" data-linktype=\"relative-path\">Release</a> to decrement the reference count once you have finished with the pointer. This method provides the opposite functionality of the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_GetObjectForIUnknown_\" data-linktype=\"relative-path\">GetObjectForIUnknown</a> method.  </p>\n<p> You can also use this method on a managed object to obtain an interface pointer to the <a href=\"../Topic/COM%20Callable%20Wrapper.md\" data-linktype=\"relative-path\">COM Callable Wrapper</a> for the object.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to retrieve an <a href=\"http://go.microsoft.com/fwlink/?LinkId=148003\" data-linktype=\"external\">IUnknown</a> interface for a managed object using the GetIUnknownForObject method.  </p>\n<pre><code class=\"lang-cs\" name=\"Runtime.InteropServices.Marshal.GetIUnknownForObject-release#1\">using System;\nusing System.Runtime.InteropServices;\n\nclass Program\n{\n\n    static void Run()\n    {\n\n        // Create an int object\n        int obj = 1;\n\n        Console.WriteLine(&quot;Calling Marshal.GetIUnknownForObject...&quot;);\n\n        // Get the IUnKnown pointer for the Integer object\n        IntPtr pointer = Marshal.GetIUnknownForObject(obj);\n\n        Console.WriteLine(&quot;Calling Marshal.Release...&quot;);\n\n        // Always call Marshal.Release to decrement the reference count.\n        Marshal.Release(pointer);\n    }\n\n    static void Main(string[] args)\n    {\n        Run();\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Runtime.InteropServices.Marshal.GetIUnknownForObject-release#1\">Imports System.Runtime.InteropServices\n\nModule Program\n\n\n    Sub Run()\n\n        &#39; Dim an Integer object\n        Dim IntegerObject As Integer = 1\n\n        &#39; Dim a pointer\n        Dim pointer As IntPtr\n\n        Console.WriteLine(&quot;Calling Marshal.GetIUnknownForObject...&quot;)\n\n        &#39; Get the IUnKnown pointer for the Integer object\n        pointer = Marshal.GetIUnknownForObject(IntegerObject)\n\n        Console.WriteLine(&quot;Calling Marshal.Release...&quot;)\n\n        &#39; Always call Marshal.Release to decrement the reference count.\n        Marshal.Release(pointer)\n\n\n\n    End Sub\n\n    Sub Main(ByVal args() As String)\n\n        Run()\n\n    End Sub\n\nEnd Module\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_GetIUnknownForObjectInContext_System_Object_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_GetIUnknownForObjectInContext_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetIUnknownForObjectInContext(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an <a href=\"http://go.microsoft.com/fwlink/?LinkId=148003\" data-linktype=\"external\">IUnknown</a> interface from a managed object, if the caller is in the same context as that object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static IntPtr GetIUnknownForObjectInContext (object o);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>o</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object whose <code>IUnknown</code> interface is requested.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>The <code>IUnknown</code> pointer for the specified object, or <code>null</code> if the caller is not in the same context as the specified object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is the same as <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_GetIUnknownForObject_\" data-linktype=\"relative-path\">GetIUnknownForObject</a> except that it returns <code>null</code> if the caller is not in the same context as the object.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to retrieve an <code>IUnknown</code> interface for a managed object using the GetIUnknownForObjectInContext method.  </p>\n<pre><code class=\"lang-cs\" name=\"Runtime.InteropServices.Marshal.GetIUnknownForObjectInContext-release#1\">using System;\nusing System.Runtime.InteropServices;\n\nclass Program\n{\n\n    static void Run()\n    {\n\n        // Create an int object\n        int obj = 1;\n\n        Console.WriteLine(&quot;Calling Marshal.GetIUnknownForObjectInContext...&quot;);\n\n        // Get the IUnKnown pointer for the Integer object\n        IntPtr pointer = Marshal.GetIUnknownForObjectInContext(obj);\n\n        Console.WriteLine(&quot;Calling Marshal.Release...&quot;);\n\n        // Always call Marshal.Release to decrement the reference count.\n        Marshal.Release(pointer);\n    }\n\n    static void Main(string[] args)\n    {\n        Run();\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Runtime.InteropServices.Marshal.GetIUnknownForObjectInContext-release#1\">Imports System.Runtime.InteropServices\n\nModule Program\n\n\n    Sub Run()\n\n        &#39; Dim an Integer object\n        Dim IntegerObject As Integer = 1\n\n        &#39; Dim a pointer\n        Dim pointer As IntPtr\n\n        Console.WriteLine(&quot;Calling Marshal.GetIUnknownForObjectInContext...&quot;)\n\n        &#39; Get the IUnKnown pointer for the Integer object\n        pointer = Marshal.GetIUnknownForObjectInContext(IntegerObject)\n\n        Console.WriteLine(&quot;Calling Marshal.Release...&quot;)\n\n        &#39; Always call Marshal.Release to decrement the reference count.\n        Marshal.Release(pointer)\n\n\n\n    End Sub\n\n    Sub Main(ByVal args() As String)\n\n        Run()\n\n    End Sub\n\nEnd Module\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_GetLastWin32Error\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_GetLastWin32Error_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetLastWin32Error()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the error code returned by the last unmanaged function that was called using platform invoke that has the <a class=\"xref\" href=\"system.runtime.interopservices.dllimportattribute#System_Runtime_InteropServices_DllImportAttribute_SetLastError\" data-linktype=\"relative-path\">SetLastError</a> flag set.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int GetLastWin32Error ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The last error code set by a call to the Win32 <a href=\"http://go.microsoft.com/fwlink/?LinkId=148656\" data-linktype=\"external\">SetLastError</a> function.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>GetLastWin32Error exposes the Win32 <a href=\"http://go.microsoft.com/fwlink/?LinkId=148657\" data-linktype=\"external\">GetLastError</a> function from Kernel32.DLL. This method exists because it is not safe to make a direct platform invoke call to <code>GetLastError</code> to obtain this information. If you want to access this error code, you must call GetLastWin32Error instead of writing your own platform invoke definition for <code>GetLastError</code> and calling it. The common language runtime can make internal calls to APIs that overwrite the <code>GetLastError</code> maintained by the operating system.  </p>\n<p> You can use this method to obtain error codes only if you apply the <a class=\"xref\" href=\"system.runtime.interopservices.dllimportattribute\" data-linktype=\"relative-path\">System.Runtime.InteropServices.DllImportAttribute</a> to the method signature and set the <a class=\"xref\" href=\"system.runtime.interopservices.dllimportattribute#System_Runtime_InteropServices_DllImportAttribute_SetLastError\" data-linktype=\"relative-path\">SetLastError</a> field to<code>true</code>. The process for this varies depending upon the source language used: C# and C++ are <code>false</code> by default, but the <code>Declare</code> statement in Visual Basic is <code>true</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates calling the GetLastWin32Errormethod. The example first demonstrates calling the method with no error present and then demonstrates calling the method with an error present.  </p>\n<pre><code class=\"lang-cs\" name=\"Runtime.InteropServices.Marshal.GetLastWin32Error#1\">using System;\nusing System.Runtime.InteropServices;\n\ninternal class Win32\n{\n    // Use DllImportAttribute to inport the Win32 MessageBox\n    // function.  Set the SetLastError flag to true to allow\n    // the function to set the Win32 error.\n    [DllImportAttribute(&quot;user32.dll&quot;, SetLastError = true, CharSet = CharSet.Unicode)]\n    public static extern int MessageBox(IntPtr hwnd, String text, String caption, uint type);\n\n}\n\nclass Program\n{\n\n    static void Run()\n    {\n        // Call the MessageBox with normal parameters.\n\n        Console.WriteLine(&quot;Calling Win32 MessageBox without error...&quot;);\n\n        Win32.MessageBox(new IntPtr(0), &quot;Press OK...&quot;, &quot;Press OK Dialog&quot;, 0);\n\n        // Get the last error and display it.\n        int error = Marshal.GetLastWin32Error();\n\n        Console.WriteLine(&quot;The last Win32 Error was: &quot; + error);\n\n        // Call the MessageBox with an invalid window handle to\n        // produce a Win32 error.\n\n        Console.WriteLine(&quot;Calling Win32 MessageBox with error...&quot;);\n\n        Win32.MessageBox(new IntPtr(123132), &quot;Press OK...&quot;, &quot;Press OK Dialog&quot;, 0);\n\n        // Get the last error and display it.\n\n        error = Marshal.GetLastWin32Error();\n\n        Console.WriteLine(&quot;The last Win32 Error was: &quot; + error);\n    }\n\n    static void Main(string[] args)\n    {\n        Run();\n    }\n}\n// This code example displays the following to the console: \n//\n// Calling Win32 MessageBox without error...\n// The last Win32 Error was: 0\n// Calling Win32 MessageBox with error...\n// The last Win32 Error was: 1400\n</code></pre><pre><code class=\"lang-vb\" name=\"Runtime.InteropServices.Marshal.GetLastWin32Error#1\">Imports System.Runtime.InteropServices\n\nModule Win32\n    &#39; Use DllImportAttribute to inport the Win32 MessageBox\n    &#39; function.  Set the SetLastError flag to true to allow\n    &#39; the function to set the Win32 error.\n    &lt;DllImportAttribute(&quot;user32.dll&quot;, SetLastError:=True, CharSet:=CharSet.Unicode)&gt; _\n    Function MessageBox(ByVal hwnd As IntPtr, ByVal text As String, ByVal caption As String, ByVal type As UInt32) As Integer\n    End Function\n\nEnd Module\n\nModule Program\n\n\n    Sub Run()\n\n\n        &#39; Call the MessageBox with normal parameters.\n\n        Console.WriteLine(&quot;Calling Win32 MessageBox without error...&quot;)\n\n        Win32.MessageBox(New IntPtr(0), &quot;Press OK...&quot;, &quot;Press OK Dialog&quot;, 0)\n\n        &#39; Get the last error and display it.\n        Dim errorVal As Integer\n\n        errorVal = Marshal.GetLastWin32Error()\n\n        Console.WriteLine(&quot;The last Win32 Error was: &quot; + errorVal)\n\n        &#39; Call the MessageBox with an invalid window handle to\n        &#39; produce a Win32 error.\n\n        Console.WriteLine(&quot;Calling Win32 MessageBox with error...&quot;)\n\n        Win32.MessageBox(New IntPtr(123132), &quot;Press OK...&quot;, &quot;Press OK Dialog&quot;, 0)\n\n        &#39; Get the last error and display it.\n\n        errorVal = Marshal.GetLastWin32Error()\n\n        Console.WriteLine(&quot;The last Win32 Error was: &quot; + errorVal)\n\n    End Sub\n\n    Sub Main(ByVal args() As String)\n\n        Run()\n\n    End Sub\n\nEnd Module\n\n&#39; This code example displays the following to the console: \n&#39;\n&#39; Calling Win32 MessageBox without error...\n&#39; The last Win32 Error was: 0\n&#39; Calling Win32 MessageBox with error...\n&#39; The last Win32 Error was: 1400\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_GetManagedThunkForUnmanagedMethodPtr_System_IntPtr_System_IntPtr_System_Int32_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_GetManagedThunkForUnmanagedMethodPtr_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetManagedThunkForUnmanagedMethodPtr(IntPtr,IntPtr,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a pointer to a runtime-generated function that marshals a call from managed to unmanaged code.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static IntPtr GetManagedThunkForUnmanagedMethodPtr (IntPtr pfnMethodToWrap, IntPtr pbSignature, int cbSignature);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>pfnMethodToWrap</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to the method to marshal.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pbSignature</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to the method signature.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cbSignature</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes in <code>pbSignature</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>A pointer to the function that will marshal a call from the <code>pfnMethodToWrap</code> parameter to unmanaged code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>GetManagedThunkForUnmanagedMethodPtr is exposed for compiler support only.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_GetMethodInfoForComSlot_System_Type_System_Int32_System_Runtime_InteropServices_ComMemberType__\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_GetMethodInfoForComSlot_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMethodInfoForComSlot(Type,Int32,ComMemberType)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves a <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> object for the specified virtual function table (v-table or VTBL) slot.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Reflection.MemberInfo GetMethodInfoForComSlot (Type t, int slot, ref System.Runtime.InteropServices.ComMemberType memberType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>t</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type for which the <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> is to be retrieved.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>slot</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The VTBL slot.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>memberType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.commembertype\" data-linktype=\"relative-path\">ComMemberType</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>On successful return, one of the enumeration values that specifies the type of the member.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a></div>\r\n                  </div>\r\n                  <p>The object that represents the member at the specified VTBL slot.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>t</code> is not visible from COM.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The return value may be a <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a>, <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a>, or <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a> object. The return value depends on the type of managed member that exists in the given COM slot (hence the generalized return type <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> from which all three derive).  </p>\n<p> The zero-based slot number that is returned by this method accounts for three <a href=\"http://go.microsoft.com/fwlink/?LinkId=148003\" data-linktype=\"external\">IUnknown</a> and possibly four <a href=\"http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5\" data-linktype=\"external\">IDispatch</a> methods, making the value of the first available slot either 3 or 7. GetMethodInfoForComSlot provides the opposite functionality of <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_GetComSlotForMethodInfo_\" data-linktype=\"relative-path\">GetComSlotForMethodInfo</a>. You can use <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_GetEndComSlot_\" data-linktype=\"relative-path\">GetEndComSlot</a> and <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_GetStartComSlot_\" data-linktype=\"relative-path\">GetStartComSlot</a> in conjunction with GetMethodInfoForComSlot to pass slots within a specified range.  </p>\n<p> The <code>memberType</code> parameter is important only on return. It contains the type of the COM member (a regular method or a property accessor) that corresponds to the returned <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> object.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_GetNativeVariantForObject_System_Object_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_GetNativeVariantForObject_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetNativeVariantForObject(Object,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Converts an object to a COM VARIANT.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void GetNativeVariantForObject (object obj, IntPtr pDstNativeVariant);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object for which to get a COM VARIANT.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pDstNativeVariant</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to receive the VARIANT that corresponds to the <code>obj</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>obj</code> parameter is a generic type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>pDstNativeVariant</code> parameter must point to sufficient memory to store the resulting VARIANT. Also, the implementation of this method calls the <a href=\"https://msdn.microsoft.com/library/ms221402(v=vs.85).aspx\" data-linktype=\"external\">VariantInit</a> function on the raw memory that the <code>pDstNativeVariant</code> parameter points to.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_GetNativeVariantForObject__1___0_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_GetNativeVariantForObject_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetNativeVariantForObject&lt;T&gt;(T,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>[Supported in the .NET Framework 4.5.1 and later versions]  </p>\n<p> Converts an object of a specified type to a COM VARIANT.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void GetNativeVariantForObject&lt;T&gt; (T obj, IntPtr pDstNativeVariant);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object for which to get a COM VARIANT.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pDstNativeVariant</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to receive the VARIANT that corresponds to the <code>obj</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>pDstNativeVariant</code> parameter must point to sufficient memory to store the resulting VARIANT. Also, the implementation of this method calls <a href=\"https://msdn.microsoft.com/library/ms221402(v=vs.85).aspx\" data-linktype=\"external\">VariantInit</a> function on the raw memory that the <code>pDstNativeVariant</code> parameter points to.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_GetObjectForIUnknown_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_GetObjectForIUnknown_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetObjectForIUnknown(IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an instance of a type that represents a COM object by a pointer to its <a href=\"http://go.microsoft.com/fwlink/?LinkId=148003\" data-linktype=\"external\">IUnknown</a> interface.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static object GetObjectForIUnknown (IntPtr pUnk);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>pUnk</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to the <code>IUnknown</code> interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>An object that represents the specified unmanaged COM object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method wraps <code>IUnknown</code> in a managed object. This has the effect of incrementing the reference count of the COM component. The reference count will be decremented when the runtime performs garbage collection on the managed object that represents the COM object.  </p>\n<p> The <code>pUnk</code> parameter represents an <code>IUnknown</code> interface pointer; however, because all COM interfaces derive directly or indirectly from <code>IUnknown</code>, you can pass any COM interface to this method. The object returned by GetObjectForIUnknown is a <a href=\"../Topic/Runtime%20Callable%20Wrapper.md\" data-linktype=\"relative-path\">Runtime Callable Wrapper</a>, which the common language runtime manages as it does any other managed object. The type of this wrapper is often a generic <code>System.__ComObject</code> type, which is a hidden type used when the wrapper type is ambiguous. You can still make late-bound calls to such a generic type as long as the COM object implements the <a href=\"http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5\" data-linktype=\"external\">IDispatch</a> interface. Likewise, you can cast the returned object to an appropriate COM interface.  </p>\n<p> For an object to be wrapped with a specific managed class type (and not a generic wrapper type), you must adhere to the following requirements:  </p>\n<ul>\n<li><p>Implement the <a href=\"http://go.microsoft.com/fwlink/?LinkID=148012\" data-linktype=\"external\">IProvideClassInfo</a> interface for the COM object.  </p>\n</li>\n<li><p>Register the containing assembly with the <a href=\"../Topic/Regasm.exe%20(Assembly%20Registration%20Tool).md\" data-linktype=\"relative-path\">Regasm.exe (Assembly Registration Tool)</a>.  </p>\n<p>Alternatively, you can avoid these requirements and still get an object that is wrapped with a specific managed class type by using the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_GetTypedObjectForIUnknown_\" data-linktype=\"relative-path\">GetTypedObjectForIUnknown</a> method.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_GetObjectForNativeVariant_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_GetObjectForNativeVariant_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetObjectForNativeVariant(IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Converts a COM VARIANT to an object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static object GetObjectForNativeVariant (IntPtr pSrcNativeVariant);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>pSrcNativeVariant</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to a COM VARIANT.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>An object that corresponds to the <code>pSrcNativeVariant</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.invalidolevarianttypeexception\" data-linktype=\"relative-path\">InvalidOleVariantTypeException</a></div>\r\n                  </div>\r\n                  <p><code>pSrcNativeVariant</code> is not a valid VARIANT type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>pSrcNativeVariant</code> has an unsupported type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>GetObjectForNativeVariant returns a managed object that corresponds to a raw pointer to an unmanaged VARIANT type. The interopmarshaler performs the identical transformation when exposing a VARIANT type to managed code.  </p>\n<p> GetObjectForNativeVariant provides the opposite functionality of <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_GetNativeVariantForObject_\" data-linktype=\"relative-path\">GetNativeVariantForObject</a>.  </p>\n<p> When the VARIANT type is VT_ERROR, GetObjectForNativeVariant returns an object of type <code>Int32</code> instead of <code>UInt32</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_GetObjectForNativeVariant__1_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_GetObjectForNativeVariant_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetObjectForNativeVariant&lt;T&gt;(IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>[Supported in the .NET Framework 4.5.1 and later versions]  </p>\n<p> Converts a COM VARIANT to an object of a specified type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static T GetObjectForNativeVariant&lt;T&gt; (IntPtr pSrcNativeVariant);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>pSrcNativeVariant</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to a COM VARIANT.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </div>\r\n                  <p>An object of the specified type that corresponds to the <code>pSrcNativeVariant</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.invalidolevarianttypeexception\" data-linktype=\"relative-path\">InvalidOleVariantTypeException</a></div>\r\n                  </div>\r\n                  <p><code>pSrcNativeVariant</code> is not a valid VARIANT type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>pSrcNativeVariant</code> has an unsupported type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>GetObjectForNativeVariant(T) returns a managed object of type <code>T</code> that corresponds to a raw pointer to an unmanaged VARIANT type. The interopmarshaler performs the identical transformation when exposing a VARIANT type to managed code.  </p>\n<p> GetObjectForNativeVariant(T) provides the opposite functionality of<a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_GetNativeVariantForObject__1___0_System_IntPtr_\" data-linktype=\"relative-path\">GetNativeVariantForObject&lt;T&gt;(T,IntPtr)</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_GetObjectsForNativeVariants_System_IntPtr_System_Int32_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_GetObjectsForNativeVariants_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetObjectsForNativeVariants(IntPtr,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts an array of COM <a href=\"http://go.microsoft.com/fwlink/?LinkId=148670\" data-linktype=\"external\">VARIANTs</a> to an array of objects.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static object[] GetObjectsForNativeVariants (IntPtr aSrcNativeVariant, int cVars);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>aSrcNativeVariant</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to the first element of an array of COM VARIANTs.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cVars</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The count of COM VARIANTs in <code>aSrcNativeVariant</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </div>\r\n                  <p>An object array that corresponds to <code>aSrcNativeVariant</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>cVars</code> is a negative number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>GetObjectsForNativeVariants returns an array of managed objects that corresponds to a raw pointer to a C-style array of unmanaged VARIANT types. The interopmarshaler performs the identical transformation when exposing a VARIANT type to managed code. The method returns an empty array when the <code>cVars</code> parameter is 0.  </p>\n<p> The object array (the return value) gets garbage collected as usual. The unmanaged input array or individual VARIANTs in the input array are not freed. Therefore it is your responsibility to free them as appropriate.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_GetObjectsForNativeVariants__1_System_IntPtr_System_Int32_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_GetObjectsForNativeVariants_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetObjectsForNativeVariants&lt;T&gt;(IntPtr,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>[Supported in the .NET Framework 4.5.1 and later versions]  </p>\n<p> Converts an array of COM VARIANTs to an array of a specified type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static T[] GetObjectsForNativeVariants&lt;T&gt; (IntPtr aSrcNativeVariant, int cVars);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>aSrcNativeVariant</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to the first element of an array of COM VARIANTs.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cVars</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The count of COM VARIANTs in <code>aSrcNativeVariant</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">T[]</span>[]</div>\r\n                  </div>\r\n                  <p>An array of <code>T</code> objects that corresponds to <code>aSrcNativeVariant</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>cVars</code> is a negative number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>GetObjectsForNativeVariants(T) returns an array of <code>T</code> that corresponds to a raw pointer to a C-style array of unmanaged VARIANT types. The interopmarshaler performs the identical transformation when exposing a VARIANT type to managed code. The method returns an empty array when the <code>cVars</code> parameter is 0.  </p>\n<p> The returned array is garbage-collected as usual. The unmanaged input array or individual VARIANTs in the input array are not freed. Therefore, it is your responsibility to free them as appropriate.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_GetStartComSlot_System_Type_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_GetStartComSlot_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetStartComSlot(Type)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the first slot in the virtual function table (v-table or VTBL) that contains user-defined methods.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int GetStartComSlot (Type t);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>t</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A type that represents an interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The first VTBL slot that contains user-defined methods. The first slot is 3 if the interface is based on <a href=\"http://go.microsoft.com/fwlink/?LinkId=148003\" data-linktype=\"external\">IUnknown</a>, and 7 if the interface is based on <a href=\"http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5\" data-linktype=\"external\">IDispatch</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>t</code> is not visible from COM.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method returns the zero-based v-table number for an interface or a class. When used on a class, the slot number that is returned refers to the class interface for the class. If the class interface is auto-dispatch, this method always returns -1 to indicate that the dispatch-only interface does not expose a v-table to managed clients. You can use GetStartComSlot and <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_GetEndComSlot_\" data-linktype=\"relative-path\">GetEndComSlot</a> in conjunction with <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_GetMethodInfoForComSlot_\" data-linktype=\"relative-path\">GetMethodInfoForComSlot</a> to pass slots within a specified range. For additional information, see <a href=\"http://msdn.microsoft.com/en-us/733c0dd2-12e5-46e6-8de1-39d5b25df024\" data-linktype=\"external\">Introducing the Class Interface</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_GetThreadFromFiberCookie_System_Int32_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_GetThreadFromFiberCookie_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetThreadFromFiberCookie(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts a fiber cookie into the corresponding <a class=\"xref\" href=\"system.threading.thread\" data-linktype=\"relative-path\">Thread</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Thread GetThreadFromFiberCookie (int cookie);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>cookie</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents a fiber cookie.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.thread\" data-linktype=\"relative-path\">Thread</a></div>\r\n                  </div>\r\n                  <p>A thread that corresponds to the <code>cookie</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>cookie</code> parameter is 0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Fiber cookies are opaque tokens that are used by the host when alerting the common language runtime to its fiber-scheduling decisions. They consist of a stack and register context.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_GetTypedObjectForIUnknown_System_IntPtr_System_Type_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_GetTypedObjectForIUnknown_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetTypedObjectForIUnknown(IntPtr,Type)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a managed object of a specified type that represents a COM object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static object GetTypedObjectForIUnknown (IntPtr pUnk, Type t);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>pUnk</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to the <code>IUnknown</code> interface of the unmanaged object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>t</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the requested managed class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>An instance of the class corresponding to the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the requested unmanaged COM object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>t</code> is not attributed with <a class=\"xref\" href=\"system.runtime.interopservices.comimportattribute\" data-linktype=\"relative-path\">ComImportAttribute</a>.  </p>\n<p> -or-  </p>\n<p> <code>t</code> is a Windows Runtime type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>t</code> parameter must be either a COM-imported type or a subtype of a COM-imported type. In addition, <code>t</code> must be a type whose metadata was imported by the <a href=\"../Topic/Tlbimp.exe%20(Type%20Library%20Importer).md\" data-linktype=\"relative-path\">Tlbimp.exe (Type Library Importer)</a> tool. This type must be a class and not an associated coclass interface, which carries the name of the COM class. For example, if Tlbimp.exe imports <code>Myclass</code> as a class called <code>MyclassClass</code> and as a coclass interface called <code>Myclass</code>, you must use <code>MyclassClass</code> (not <code>Myclass</code>) with this method. For additional information about imported classes and coclass interfaces, see <a href=\"http://msdn.microsoft.com/en-us/cb1ee67d-8ef0-4e40-b2a5-13714b9f33c3\" data-linktype=\"external\">Imported Type Conversion</a>.  </p>\n<p> If an object has already been obtained for the <code>pUnk</code> parameter, <code>t</code> is ignored and the existing object is returned. <code>pUnk</code> represents an<a href=\"http://go.microsoft.com/fwlink/?LinkId=148003\" data-linktype=\"external\">IUnknown</a> interface pointer; however, because all COM interfaces derive directly or indirectly from <code>IUnknown</code>, you can pass any COM interface to this method. The object returned by GetTypedObjectForIUnknown is a <a href=\"../Topic/Runtime%20Callable%20Wrapper.md\" data-linktype=\"relative-path\">Runtime Callable Wrapper</a> (RCW), which the common language runtime manages as it does any other managed object.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_GetTypeForITypeInfo_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_GetTypeForITypeInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetTypeForITypeInfo(IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Converts an unmanaged <a href=\"http://msdn.microsoft.com/en-us/f3356463-3373-4279-bae1-953378aa2680\" data-linktype=\"external\">ITypeInfo</a> object into a managed <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Type GetTypeForITypeInfo (IntPtr piTypeInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>piTypeInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <code>ITypeInfo</code> interface to marshal.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>A managed type that represents the unmanaged <code>ITypeInfo</code> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>GetTypeForITypeInfo returns a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">System.Type</a> instance that is based on the original type. You can apply the <a class=\"xref\" href=\"system.runtime.interopservices.marshalasattribute\" data-linktype=\"relative-path\">System.Runtime.InteropServices.MarshalAsAttribute</a> to replace standard interop marshaling behavior with this custom marshaler. The <a href=\"../Topic/Tlbimp.exe%20(Type%20Library%20Importer).md\" data-linktype=\"relative-path\">Tlbimp.exe (Type Library Importer)</a> tool uses the custom marshaler to translate <code>ITypeInfo</code> parameters to <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">System.Type</a> parameters. However, if you obtain an <code>ITypeInfo</code> interface by some means other than Tlbimp.exe, you can use GetTypeForITypeInfo to manually perform the same translation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_GetTypeFromCLSID_System_Guid_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_GetTypeFromCLSID_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetTypeFromCLSID(Guid)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the type associated with the specified class identifier (CLSID).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Type GetTypeFromCLSID (Guid clsid);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>clsid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The CLSID of the type to return.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p><code>System.__ComObject</code> regardless of whether the CLSID is valid.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_GetTypeInfoName_System_Runtime_InteropServices_ComTypes_ITypeInfo_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_GetTypeInfoName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetTypeInfoName(ITypeInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the name of the type represented by an <a href=\"http://msdn.microsoft.com/en-us/f3356463-3373-4279-bae1-953378aa2680\" data-linktype=\"external\">ITypeInfo</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string GetTypeInfoName (System.Runtime.InteropServices.ComTypes.ITypeInfo typeInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>typeInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.comtypes.itypeinfo\" data-linktype=\"relative-path\">ITypeInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that represents an <code>ITypeInfo</code> pointer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the type that the <code>typeInfo</code> parameter points to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>typeInfo</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can also retrieve the name of the type represented by an <code>ITypeInfo</code> by calling the <a class=\"xref\" href=\"system.runtime.interopservices.ucomitypeinfo#System_Runtime_InteropServices_UCOMITypeInfo_GetDocumentation_\" data-linktype=\"relative-path\">GetDocumentation</a> method and passing -1 for its first parameter.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_GetTypeInfoName_System_Runtime_InteropServices_UCOMITypeInfo_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_GetTypeInfoName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetTypeInfoName(UCOMITypeInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the name of the type represented by an <a href=\"http://msdn.microsoft.com/en-us/f3356463-3373-4279-bae1-953378aa2680\" data-linktype=\"external\">ITypeInfo</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string GetTypeInfoName (System.Runtime.InteropServices.UCOMITypeInfo pTI);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>pTI</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.ucomitypeinfo\" data-linktype=\"relative-path\">UCOMITypeInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that represents an <code>ITypeInfo</code> pointer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the type that the <code>pTI</code> parameter points to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can also retrieve the name of the type represented by an <code>ITypeInfo</code> object by calling the <a class=\"xref\" href=\"system.runtime.interopservices.ucomitypeinfo#System_Runtime_InteropServices_UCOMITypeInfo_GetDocumentation_\" data-linktype=\"relative-path\">GetDocumentation</a> method and passing -1 for its first parameter.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_GetTypeLibGuid_System_Runtime_InteropServices_ComTypes_ITypeLib_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_GetTypeLibGuid_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetTypeLibGuid(ITypeLib)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the library identifier (LIBID) of a type library.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Guid GetTypeLibGuid (System.Runtime.InteropServices.ComTypes.ITypeLib typelib);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>typelib</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.comtypes.itypelib\" data-linktype=\"relative-path\">ITypeLib</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type library whose LIBID is to be retrieved.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </div>\r\n                  <p>The LIBID of the specified type library.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_GetTypeLibGuid_\" data-linktype=\"relative-path\">GetTypeLibGuid</a> extracts the LIBID directly from an existing type library. This action differs from that of the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_GetTypeLibGuidForAssembly_\" data-linktype=\"relative-path\">GetTypeLibGuidForAssembly</a> method, which calculates what the LIBID should be based on the current assembly.  </p>\n<p> For more information about library identifiers, see <a href=\"http://msdn.microsoft.com/en-us/3fffd8db-240f-4fde-a558-a5bcc01e1a86\" data-linktype=\"external\">Exported Assembly Conversion</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_GetTypeLibGuid_System_Runtime_InteropServices_UCOMITypeLib_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_GetTypeLibGuid_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetTypeLibGuid(UCOMITypeLib)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the library identifier (LIBID) of a type library.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Guid GetTypeLibGuid (System.Runtime.InteropServices.UCOMITypeLib pTLB);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>pTLB</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.ucomitypelib\" data-linktype=\"relative-path\">UCOMITypeLib</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type library whose LIBID is to be retrieved.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </div>\r\n                  <p>The LIBID of the type library that the <code>pTLB</code> parameter points to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>GetTypeLibGuid extracts the LIBID directly from an existing type library. This action differs from that of the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_GetTypeLibGuidForAssembly_\" data-linktype=\"relative-path\">GetTypeLibGuidForAssembly</a> method, which calculates what the LIBID should be based on the current assembly.  </p>\n<p> For more information about library identifiers, see <a href=\"http://msdn.microsoft.com/en-us/3fffd8db-240f-4fde-a558-a5bcc01e1a86\" data-linktype=\"external\">Exported Assembly Conversion</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_GetTypeLibGuidForAssembly_System_Reflection_Assembly_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_GetTypeLibGuidForAssembly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetTypeLibGuidForAssembly(Assembly)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the library identifier (LIBID) that is assigned to a type library when it was exported from the specified assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Guid GetTypeLibGuidForAssembly (System.Reflection.Assembly asm);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>asm</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The assembly from which the type library was exported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </div>\r\n                  <p>The LIBID that is assigned to a type library when it is exported from the specified assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>asm</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When assemblies are exported to type libraries, the type library is assigned a LIBID. You can set the LIBID explicitly by applying the <a class=\"xref\" href=\"system.runtime.interopservices.guidattribute\" data-linktype=\"relative-path\">System.Runtime.InteropServices.GuidAttribute</a> at the assembly level, or it can be generated automatically. The <a href=\"../Topic/Tlbimp.exe%20(Type%20Library%20Importer).md\" data-linktype=\"relative-path\">Tlbimp.exe (Type Library Importer)</a> tool calculates a LIBID value based on the identity of the assembly. <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_GetTypeLibGuid_\" data-linktype=\"relative-path\">GetTypeLibGuid</a> returns the LIBID that is associated with the <a class=\"xref\" href=\"system.runtime.interopservices.guidattribute\" data-linktype=\"relative-path\">GuidAttribute</a>, if the attribute is applied. Otherwise, GetTypeLibGuidForAssembly returns the calculated value. Alternatively, you can use the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_GetTypeLibGuid_\" data-linktype=\"relative-path\">GetTypeLibGuid</a> method to extract the actual LIBID from an existing type library.  </p>\n<p> See the <a href=\"http://msdn.microsoft.com/en-us/3fffd8db-240f-4fde-a558-a5bcc01e1a86\" data-linktype=\"external\">Exported Assembly Conversion</a> topic for more information about library identifiers.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_GetTypeLibLcid_System_Runtime_InteropServices_ComTypes_ITypeLib_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_GetTypeLibLcid_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetTypeLibLcid(ITypeLib)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the LCID of a type library.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int GetTypeLibLcid (System.Runtime.InteropServices.ComTypes.ITypeLib typelib);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>typelib</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.comtypes.itypelib\" data-linktype=\"relative-path\">ITypeLib</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type library whose LCID is to be retrieved.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The LCID of the type library that the <code>typelib</code> parameter points to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_GetTypeLibLcid_System_Runtime_InteropServices_UCOMITypeLib_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_GetTypeLibLcid_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetTypeLibLcid(UCOMITypeLib)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the LCID of a type library.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int GetTypeLibLcid (System.Runtime.InteropServices.UCOMITypeLib pTLB);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>pTLB</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.ucomitypelib\" data-linktype=\"relative-path\">UCOMITypeLib</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type library whose LCID is to be retrieved.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The LCID of the type library that the <code>pTLB</code> parameter points to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_GetTypeLibName_System_Runtime_InteropServices_ComTypes_ITypeLib_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_GetTypeLibName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetTypeLibName(ITypeLib)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the name of a type library.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string GetTypeLibName (System.Runtime.InteropServices.ComTypes.ITypeLib typelib);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>typelib</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.comtypes.itypelib\" data-linktype=\"relative-path\">ITypeLib</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type library whose name is to be retrieved.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the type library that the <code>typelib</code> parameter points to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>typelib</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The name returned by this method is the identifier used with the library statement, such as ADODB for the Microsoft ADO type library. The name is not a file name.  </p>\n<p> You can also retrieve the type library name by calling the <a class=\"xref\" href=\"system.runtime.interopservices.ucomitypeinfo#System_Runtime_InteropServices_UCOMITypeInfo_GetDocumentation_\" data-linktype=\"relative-path\">GetDocumentation</a> method and passing -1 for its first parameter.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_GetTypeLibName_System_Runtime_InteropServices_UCOMITypeLib_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_GetTypeLibName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetTypeLibName(UCOMITypeLib)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the name of a type library.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string GetTypeLibName (System.Runtime.InteropServices.UCOMITypeLib pTLB);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>pTLB</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.ucomitypelib\" data-linktype=\"relative-path\">UCOMITypeLib</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type library whose name is to be retrieved.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the type library that the <code>pTLB</code> parameter points to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The name returned by this method is the identifier used with the library statement, such as ADODB for the Microsoft ADO type library. The name is not a file name.  </p>\n<p> You can also retrieve the type library name by calling the<a class=\"xref\" href=\"system.runtime.interopservices.ucomitypeinfo#System_Runtime_InteropServices_UCOMITypeInfo_GetDocumentation_\" data-linktype=\"relative-path\">GetDocumentation</a> method and passing -1 for its first parameter.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_GetTypeLibVersionForAssembly_System_Reflection_Assembly_System_Int32__System_Int32__\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_GetTypeLibVersionForAssembly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetTypeLibVersionForAssembly(Assembly,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the version number of a type library that will be exported from the specified assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void GetTypeLibVersionForAssembly (System.Reflection.Assembly inputAssembly, out int majorVersion, out int minorVersion);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>inputAssembly</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A managed assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>majorVersion</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The major version number.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>minorVersion</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The minor version number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>inputAssembly</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Before exporting an assembly by using <a class=\"xref\" href=\"system.runtime.interopservices.typelibexporterflags\" data-linktype=\"relative-path\">TypeLibExporterFlags</a> with the <code>CallerResolvedReferences</code> value, you can use this method to retrieve the type library version from the assembly.  </p>\n<p> If you do not apply the <a class=\"xref\" href=\"system.runtime.interopservices.typelibversionattribute\" data-linktype=\"relative-path\">TypeLibVersionAttribute</a> attribute to an exported assembly to explicitly control the version number of the generated type library, the type library will have the same version number as the assembly.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_GetUniqueObjectForIUnknown_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_GetUniqueObjectForIUnknown_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetUniqueObjectForIUnknown(IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a unique <a href=\"../Topic/Runtime%20Callable%20Wrapper.md\" data-linktype=\"relative-path\">Runtime Callable Wrapper</a> (RCW) object for a given <a href=\"http://go.microsoft.com/fwlink/?LinkId=148003\" data-linktype=\"external\">IUnknown</a> interface.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static object GetUniqueObjectForIUnknown (IntPtr unknown);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>unknown</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A managed pointer to an <code>IUnknown</code> interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>A unique RCW for the specified <code>IUnknown</code> interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The GetUniqueObjectForIUnknown method ensures that you receive a unique RCW, because it does not match an <code>IUnknown</code> pointer to an existing object. Use this method when you have to create a unique RCW that is not impacted by other code that calls the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_ReleaseComObject_\" data-linktype=\"relative-path\">ReleaseComObject</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_GetUnmanagedThunkForManagedMethodPtr_System_IntPtr_System_IntPtr_System_Int32_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_GetUnmanagedThunkForManagedMethodPtr_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetUnmanagedThunkForManagedMethodPtr(IntPtr,IntPtr,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a pointer to a runtime-generated function that marshals a call from unmanaged to managed code.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static IntPtr GetUnmanagedThunkForManagedMethodPtr (IntPtr pfnMethodToWrap, IntPtr pbSignature, int cbSignature);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>pfnMethodToWrap</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to the method to marshal.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pbSignature</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to the method signature.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cbSignature</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes in <code>pbSignature</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>A pointer to a function that will marshal a call from <code>pfnMethodToWrap</code> to managed code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>GetUnmanagedThunkForManagedMethodPtr is exposed for compiler support only.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_IsComObject_System_Object_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_IsComObject_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsComObject(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether a specified object represents a COM object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsComObject (object o);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>o</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to check.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <code>o</code> parameter is a COM type; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>o</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>IsComObject returns <code>true</code> if the class type of the instance is attributed with <a class=\"xref\" href=\"system.runtime.interopservices.comimportattribute\" data-linktype=\"relative-path\">System.Runtime.InteropServices.ComImportAttribute</a> or if it derives directly or indirectly from a class attributed with <a class=\"xref\" href=\"system.runtime.interopservices.comimportattribute\" data-linktype=\"relative-path\">ComImportAttribute</a>. The <a href=\"../Topic/Tlbimp.exe%20(Type%20Library%20Importer).md\" data-linktype=\"relative-path\">Tlbimp.exe (Type Library Importer)</a> tool applies this attribute for you when it imports a type library.  </p>\n<p> Two other methods also determine whether a specified object represents a COM object, but the requirements for returning <code>true</code> differ from this method&#39;s requirements. <a class=\"xref\" href=\"system.type#System_Type_IsImport_\" data-linktype=\"relative-path\">IsImport</a> returns <code>true</code> if the class (or interface) is attributed with <a class=\"xref\" href=\"system.runtime.interopservices.comimportattribute\" data-linktype=\"relative-path\">ComImportAttribute</a> directly; it does not return <code>true</code> for derived types. <a class=\"xref\" href=\"system.runtime.interopservices.registrationservices#System_Runtime_InteropServices_RegistrationServices_TypeRepresentsComType_\" data-linktype=\"relative-path\">TypeRepresentsComType</a> returns <code>true</code> if the type is attributed with <a class=\"xref\" href=\"system.runtime.interopservices.comimportattribute\" data-linktype=\"relative-path\">ComImportAttribute</a> or derives from a type with the same GUID.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_IsTypeVisibleFromCom_System_Type_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_IsTypeVisibleFromCom_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsTypeVisibleFromCom(Type)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether a type is visible to COM clients.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsTypeVisibleFromCom (Type t);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>t</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type to check for COM visibility.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the type is visible to COM; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>IsTypeVisibleFromCom enables you to check for COM visibility in one step. Types that are not visible cannot be used from COM. A type is visible if it is <code>public</code> and not hidden with the <a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" data-linktype=\"relative-path\">System.Runtime.InteropServices.ComVisibleAttribute</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_NumParamBytes_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_NumParamBytes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NumParamBytes(MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Calculates the number of bytes in unmanaged memory that are required to hold the parameters for the specified method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int NumParamBytes (System.Reflection.MethodInfo m);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>m</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The method to be checked.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of bytes required to represent the method parameters in unmanaged memory.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>m</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>m</code> parameter is not a <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The NumParamBytes method returns the stack size (in bytes) needed to represent the parameters of a method signature in unmanaged memory.  </p>\n<p> Note that the return value of this method is platform-dependent. For example, a signature with a single integer parameter returns a value of 4 on 32-bit platforms and a value of 8 on 64-bit platforms.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_OffsetOf_System_Type_System_String_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_OffsetOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OffsetOf(Type,String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the field offset of the unmanaged form of the managed class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static IntPtr OffsetOf (Type t, string fieldName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>t</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A value type or formatted reference type that specifies the managed class. You must apply the <a class=\"xref\" href=\"system.runtime.interopservices.structlayoutattribute\" data-linktype=\"relative-path\">StructLayoutAttribute</a> to the class.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>fieldName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The field within the <code>t</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>The offset, in bytes, for the <code>fieldName</code> parameter within the specified class that is declared by platform invoke.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The class cannot be exported as a structure or the field is nonpublic. Beginning with the .NET Framework version 2.0, the field may be private.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>t</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>OffsetOf provides the offset in terms of the unmanaged structure layout, which does not necessarily correspond to the offset of the managed structure layout. Marshaling the structure can transform the layout and alter the offset. The <code>t</code> parameter can be a value type or a formatted reference type (with either a sequential or explicit layout). You can obtain the size of the entire layout by using the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_SizeOf_\" data-linktype=\"relative-path\">SizeOf</a> method. For additional information, see <a href=\"http://msdn.microsoft.com/en-us/4d9a876c-e05a-40ba-bd85-bd22877f984a\" data-linktype=\"external\">Default Marshaling for Value Types</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Beginning with the .NET Framework version 2.0, OffsetOf may expose private fields.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_OffsetOf__1_System_String_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_OffsetOf_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OffsetOf&lt;T&gt;(String)</div>        \r\n          </div>\r\n    \r\n            <p>[Supported in the .NET Framework 4.5.1 and later versions]  </p>\n<p> Returns the field offset of the unmanaged form of a specified managed class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static IntPtr OffsetOf&lt;T&gt; (string fieldName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fieldName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the field in the <code>T</code> type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>The offset, in bytes, for the <code>fieldName</code> parameter within the specified class that is declared by platform invoke.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>OffsetOf(T) provides the offset in terms of the unmanaged structure layout, which does not necessarily correspond to the offset of the managed structure layout. Marshaling the structure can transform the layout and alter the offset. The <code>T</code> generic type parameter can be a value type or a formatted reference type (with either a sequential or explicit layout). You can obtain the size of the entire layout by using the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_SizeOf__1___0_\" data-linktype=\"relative-path\">SizeOf&lt;T&gt;(T)</a> method. For additional information, see <a href=\"http://msdn.microsoft.com/en-us/4d9a876c-e05a-40ba-bd85-bd22877f984a\" data-linktype=\"external\">Default Marshaling for Value Types</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Beginning with the .NET Framework version 2.0, <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_OffsetOf_\" data-linktype=\"relative-path\">OffsetOf</a> may expose private fields.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_Prelink_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_Prelink_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Prelink(MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Executes one-time method setup tasks without calling the method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Prelink (System.Reflection.MethodInfo m);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>m</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The method to be checked.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>m</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>m</code> parameter is not a <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Setup tasks provide early initialization and are performed automatically when the target method is invoked. First-time tasks include the following:  </p>\n<ul>\n<li><p>Verifying that the platform invoke metadata is correctly formatted.  </p>\n</li>\n<li><p>Verifying that all the managed types are valid parameters of platform invoke functions.  </p>\n</li>\n<li><p>Locating and loading the unmanaged DLL into the process.  </p>\n</li>\n<li><p>Locating the entry point in the process.  </p>\n<p>Calling Prelink on a method outside of platform invoke has no effect. To execute setup tasks on all platform invoke methods in a type, use <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_PrelinkAll_\" data-linktype=\"relative-path\">PrelinkAll</a>.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_PrelinkAll_System_Type_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_PrelinkAll_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PrelinkAll(Type)</div>        \r\n          </div>\r\n    \r\n            <p>Performs a pre-link check for all methods on a class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void PrelinkAll (Type c);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>c</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The class whose methods are to be checked.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>c</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The PrelinkAll method invokes <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_Prelink_\" data-linktype=\"relative-path\">Prelink</a> on every method for a given type. <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_Prelink_\" data-linktype=\"relative-path\">Prelink</a> executes one-time method setup tasks without calling each method. You can use PrelinkAll only for platform invoke calls.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_PtrToStringAnsi_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_PtrToStringAnsi_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PtrToStringAnsi(IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Copies all characters up to the first null character from an unmanaged ANSI string to a managed <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, and widens each ANSI character to Unicode.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string PtrToStringAnsi (IntPtr ptr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ptr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The address of the first character of the unmanaged string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A managed string that holds a copy of the unmanaged ANSI string. If <code>ptr</code> is <code>null</code>, the method returns a null string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>PtrToStringAnsi is useful for custom marshaling or when mixing managed and unmanaged code. Because this method creates a copy of the unmanaged string&#39;s contents, you must free the original string as appropriate. This method provides the opposite functionality of the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_StringToCoTaskMemAnsi_\" data-linktype=\"relative-path\">StringToCoTaskMemAnsi</a> and <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_StringToHGlobalAnsi_\" data-linktype=\"relative-path\">StringToHGlobalAnsi</a> methods.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the PtrToStringAnsi method to create a managed string from an unmanaged <code>char</code> array.  </p>\n<pre><code class=\"lang-cpp\" name=\"Runtime.InteropServices.Marshal.PtrToStringAnsi-IntPtr#1\">using namespace System;\nusing namespace System::Runtime::InteropServices;\n\nvoid main()\n{\n\t// Create an unmanaged c string.\n\tconst char * myString = &quot;Hello managed world (from the unmanaged world)!&quot;;\n\t\n\t// Convert the c string to a managed String.\n\tString ^ myManagedString = Marshal::PtrToStringAnsi((IntPtr) (char *) myString);\n\t\n\t// Display the string to the console.\n\tConsole::WriteLine(myManagedString);\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_PtrToStringAnsi_System_IntPtr_System_Int32_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_PtrToStringAnsi_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PtrToStringAnsi(IntPtr,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Allocates a managed <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, copies a specified number of characters from an unmanaged ANSI string into it, and widens each ANSI character to Unicode.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string PtrToStringAnsi (IntPtr ptr, int len);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ptr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The address of the first character of the unmanaged string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>len</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The byte count of the input string to copy.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A managed string that holds a copy of the native ANSI string if the value of the <code>ptr</code> parameter is not <code>null</code>; otherwise, this method returns <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>len</code> is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_PtrToStringAnsi_\" data-linktype=\"relative-path\">PtrToStringAnsi</a> is useful for custom marshaling or when mixing managed and unmanaged code. Because this method creates a copy of the unmanaged string&#39;s contents, you must free the original string as appropriate. This method provides the opposite functionality of the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_StringToCoTaskMemAnsi_\" data-linktype=\"relative-path\">StringToCoTaskMemAnsi</a> and <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_StringToHGlobalAnsi_\" data-linktype=\"relative-path\">StringToHGlobalAnsi</a> methods.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the PtrToStringAnsi method to create a managed string from an unmanaged<code>char</code> array.  </p>\n<pre><code class=\"lang-cpp\" name=\"Runtime.InteropServices.Marshal.PtrToStringAnsi-IntPtr-int#1\">using namespace System;\nusing namespace System::Runtime::InteropServices;\n\n\n\nvoid main()\n{\n\t// Create an unmanaged c string.\n\tconst char * myString = &quot;Hello managed world (from the unmanaged world)!&quot;;\n\n\t// Convert the c string to a managed String.\n\tString ^ myManagedString = Marshal::PtrToStringAnsi((IntPtr) (char *) myString);\n\n\t// Display the string to the console.\n\tConsole::WriteLine(myManagedString);\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_PtrToStringAuto_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_PtrToStringAuto_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PtrToStringAuto(IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Allocates a managed <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> and copies all characters up to the first null character from a string stored in unmanaged memory into it.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string PtrToStringAuto (IntPtr ptr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ptr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>For Unicode platforms, the address of the first Unicode character.  </p>\n<p> -or-  </p>\n<p> For ANSI plaforms, the address of the first ANSI character.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A managed string that holds a copy of the unmanaged string if the value of the <code>ptr</code> parameter is not <code>null</code>; otherwise, this method returns <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the current platform is Unicode, each ANSI character is widened to a Unicode character and this method calls <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_PtrToStringUni_\" data-linktype=\"relative-path\">PtrToStringUni</a>. Otherwise, this method calls <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_PtrToStringAnsi_\" data-linktype=\"relative-path\">PtrToStringAnsi</a>.  </p>\n<p> <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_PtrToStringAuto_\" data-linktype=\"relative-path\">PtrToStringAuto</a> is useful for custom marshaling or when mixing managed and unmanaged code. Because this method creates a copy of the unmanaged string&#39;s contents, you must free the original string as appropriate. PtrToStringAuto provides the opposite functionality of the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_StringToCoTaskMemAuto_\" data-linktype=\"relative-path\">StringToCoTaskMemAuto</a> and <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_StringToHGlobalAuto_\" data-linktype=\"relative-path\">StringToHGlobalAuto</a> methods.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_PtrToStringAuto_System_IntPtr_System_Int32_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_PtrToStringAuto_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PtrToStringAuto(IntPtr,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Allocates a managed <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> and copies the specified number of characters from a string stored in unmanaged memory into it.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string PtrToStringAuto (IntPtr ptr, int len);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ptr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>For Unicode platforms, the address of the first Unicode character.  </p>\n<p> -or-  </p>\n<p> For ANSI plaforms, the address of the first ANSI character.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>len</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of characters to copy.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A managed string that holds a copy of the native string if the value of the <code>ptr</code> parameter is not <code>null</code>; otherwise, this method returns <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>len</code> is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>On Unicode platforms, this method calls <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_PtrToStringUni_\" data-linktype=\"relative-path\">PtrToStringUni</a>; on ANSI platforms, it calls <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_PtrToStringAnsi_\" data-linktype=\"relative-path\">PtrToStringAnsi</a>. No transformations are done before these methods are called.  </p>\n<p> PtrToStringAuto is useful for custom marshaling or when mixing managed and unmanaged code. Because this method creates a copy of the unmanaged string&#39;s contents, you must free the original string as appropriate. <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_PtrToStringAuto_\" data-linktype=\"relative-path\">PtrToStringAuto</a> provides the opposite functionality of <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_StringToCoTaskMemAuto_\" data-linktype=\"relative-path\">StringToCoTaskMemAuto</a> and <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_StringToHGlobalAuto_\" data-linktype=\"relative-path\">StringToHGlobalAuto</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_PtrToStringBSTR_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_PtrToStringBSTR_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PtrToStringBSTR(IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Allocates a managed <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> and copies a <a href=\"https://msdn.microsoft.com/library/ms221069(v=vs.85).aspx\" data-linktype=\"external\">binary string (BSTR)</a> stored in unmanaged memory into it.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string PtrToStringBSTR (IntPtr ptr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ptr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The address of the first character of the unmanaged string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A managed string that holds a copy of the unmanaged string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>ptr</code> equals <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Call this method only on strings that were allocated with the unmanaged <a href=\"https://msdn.microsoft.com/library/ms221458(v=vs.85).aspx\" data-linktype=\"external\">SysAllocString</a> and <a href=\"https://msdn.microsoft.com/library/ms221639(v=vs.85).aspx\" data-linktype=\"external\">SysAllocStringLen</a> functions.  </p>\n<p> PtrToStringBSTR is useful for custom marshaling or when mixing managed and unmanaged code. Because this method creates a copy of the unmanaged string&#39;s contents, you must free the original string as appropriate. This method provides the opposite functionality of the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_StringToBSTR_\" data-linktype=\"relative-path\">StringToBSTR</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_PtrToStringUni_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_PtrToStringUni_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PtrToStringUni(IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Allocates a managed <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> and copies all characters up to the first null character from an unmanaged Unicode string into it.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string PtrToStringUni (IntPtr ptr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ptr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The address of the first character of the unmanaged string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A managed string that holds a copy of the unmanaged string if the value of the <code>ptr</code> parameter is not <code>null</code>; otherwise, this method returns <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_PtrToStringUni_\" data-linktype=\"relative-path\">PtrToStringUni</a> is useful for custom marshaling or for use when mixing managed and unmanaged code. Because this method creates a copy of the unmanaged string&#39;s contents, you must free the original string as appropriate. This method provides the opposite functionality of the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_StringToCoTaskMemUni_\" data-linktype=\"relative-path\">StringToCoTaskMemUni</a> and <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_StringToHGlobalUni_\" data-linktype=\"relative-path\">StringToHGlobalUni</a> methods.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_PtrToStringUni_System_IntPtr_System_Int32_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_PtrToStringUni_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PtrToStringUni(IntPtr,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Allocates a managed <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> and copies a specified number of characters from an unmanaged Unicode string into it.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string PtrToStringUni (IntPtr ptr, int len);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ptr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The address of the first character of the unmanaged string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>len</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of Unicode characters to copy.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A managed string that holds a copy of the unmanaged string if the value of the <code>ptr</code> parameter is not <code>null</code>; otherwise, this method returns <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>PtrToStringUni is useful for custom marshaling or when mixing managed and unmanaged code. Because this method creates a copy of the unmanaged string&#39;s contents, you must free the original string as appropriate. This method provides the opposite functionality of the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_StringToCoTaskMemUni_\" data-linktype=\"relative-path\">StringToCoTaskMemUni</a> and <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_StringToHGlobalUni_\" data-linktype=\"relative-path\">StringToHGlobalUni</a> methods.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_PtrToStructure_System_IntPtr_System_Object_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_PtrToStructure_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PtrToStructure(IntPtr,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Marshals data from an unmanaged block of memory to a managed object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void PtrToStructure (IntPtr ptr, object structure);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ptr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to an unmanaged block of memory.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>structure</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to which the data is to be copied. This must be an instance of a formatted class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Structure layout is not sequential or explicit.  </p>\n<p> -or-  </p>\n<p> Structure is a boxed value type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>PtrToStructure is often necessary in COM interop and platform invoke when structure parameters are represented as an <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">System.IntPtr</a> value. You cannot use this overload method with value types.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_PtrToStructure_System_IntPtr_System_Type_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_PtrToStructure_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PtrToStructure(IntPtr,Type)</div>        \r\n          </div>\r\n    \r\n            <p>Marshals data from an unmanaged block of memory to a newly allocated managed object of the specified type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static object PtrToStructure (IntPtr ptr, Type structureType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ptr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to an unmanaged block of memory.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>structureType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of object to be created. This object must represent a formatted class or a structure.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>A managed object containing the data pointed to by the <code>ptr</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>structureType</code> parameter layout is not sequential or explicit.  </p>\n<p> -or-  </p>\n<p> The <code>structureType</code> parameter is a generic type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>structureType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a></div>\r\n                  </div>\r\n                  <p>The class specified by <code>structureType</code> does not have an accessible default constructor.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_PtrToStructure_\" data-linktype=\"relative-path\">PtrToStructure</a> is often necessary in COM interop and platform invoke when structure parameters are represented as an <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">System.IntPtr</a> value. You can pass a value type to this overload method. In this case, the returned object is a boxed instance.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a managed structure, transfers it to unmanaged memory, and then transfers it back to managed memory using the PtrToStructure method.  </p>\n<pre><code class=\"lang-cs\" name=\"Runtime.InteropServices.Marshal.PtrToStructure-SizeOf#1\">using System;\nusing System.Runtime.InteropServices;\n\npublic struct Point\n{\n    public int x;\n    public int y;\n}\n\nclass Example\n{\n\n    static void Main()\n    {\n\n        // Create a point struct.\n        Point p;\n        p.x = 1;\n        p.y = 1;\n\n        Console.WriteLine(&quot;The value of first point is &quot; + p.x + &quot; and &quot; + p.y + &quot;.&quot;);\n\n        // Initialize unmanged memory to hold the struct.\n        IntPtr pnt = Marshal.AllocHGlobal(Marshal.SizeOf(p));\n\n        try\n        {\n\n            // Copy the struct to unmanaged memory.\n            Marshal.StructureToPtr(p, pnt, false);\n\n            // Create another point.\n            Point anotherP;\n\n            // Set this Point to the value of the \n            // Point in unmanaged memory. \n            anotherP = (Point)Marshal.PtrToStructure(pnt, typeof(Point));\n\n            Console.WriteLine(&quot;The value of new point is &quot; + anotherP.x + &quot; and &quot; + anotherP.y + &quot;.&quot;);\n\n        }\n        finally\n        {\n            // Free the unmanaged memory.\n            Marshal.FreeHGlobal(pnt);\n        }\n        \n\n\n    }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Runtime.InteropServices.Marshal.PtrToStructure-SizeOf#1\">Imports System\nImports System.Runtime.InteropServices\n\n\n\nPublic Structure Point\n    Public x As Integer\n    Public y As Integer\nEnd Structure\n\n\nModule Example\n\n\n    Sub Main()\n\n        &#39; Create a point struct.\n        Dim p As Point\n        p.x = 1\n        p.y = 1\n\n        Console.WriteLine(&quot;The value of first point is &quot; + p.x.ToString + &quot; and &quot; + p.y.ToString + &quot;.&quot;)\n\n        &#39; Initialize unmanged memory to hold the struct.\n        Dim pnt As IntPtr = Marshal.AllocHGlobal(Marshal.SizeOf(p))\n\n        Try\n\n            &#39; Copy the struct to unmanaged memory.\n            Marshal.StructureToPtr(p, pnt, False)\n\n            &#39; Create another point.\n            Dim anotherP As Point\n\n            &#39; Set this Point to the value of the \n            &#39; Point in unmanaged memory. \n            anotherP = CType(Marshal.PtrToStructure(pnt, GetType(Point)), Point)\n\n            Console.WriteLine(&quot;The value of new point is &quot; + anotherP.x.ToString + &quot; and &quot; + anotherP.y.ToString + &quot;.&quot;)\n\n        Finally\n            &#39; Free the unmanaged memory.\n            Marshal.FreeHGlobal(pnt)\n        End Try\n\n    End Sub\nEnd Module\n\n</code></pre><p> The following example demonstrates how to marshal an unmanaged block of memory to a managed structure using the PtrToStructure method.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> This code assumes 32-bit compilation. Before using a 64-bit compiler, replace <a class=\"xref\" href=\"system.intptr#System_IntPtr_ToInt32_\" data-linktype=\"relative-path\">ToInt32</a> with <a class=\"xref\" href=\"system.intptr#System_IntPtr_ToInt64_\" data-linktype=\"relative-path\">ToInt64</a>.  </p>\n</div>\n<pre><code class=\"lang-cpp\" name=\"PtrToStructure#1\">        [StructLayout(LayoutKind::Sequential)]\n        ref class INNER\n        {\n        public:\n            [MarshalAs(UnmanagedType::ByValTStr,SizeConst=10)]\n            String^ field;\n\n            INNER()\n            {\n                field = &quot;Test&quot;;\n            }\n        };\n\n        [StructLayout(LayoutKind::Sequential)]\n        value struct OUTER\n        {\n        public:\n            [MarshalAs(UnmanagedType::ByValTStr,SizeConst=10)]\n            String^ field;\n\n            [MarshalAs(UnmanagedType::ByValArray,SizeConst=100)]\n            array&lt;Byte&gt;^ inner;\n        };\n\n        [DllImport(&quot;SomeTestDLL.dll&quot;)]\n        static void CallTest(OUTER^ outerStructurePointer);\n\n        void static Work()\n        {\n            OUTER outerStructure;\n            array&lt;INNER^&gt;^ innerArray = gcnew array&lt;INNER^&gt;(10);\n            INNER^ innerStructure = gcnew INNER;\n            int structSize = Marshal::SizeOf(innerStructure);\n            int size = innerArray-&gt;Length * structSize;\n            outerStructure.inner = gcnew array&lt;Byte&gt;(size);\n\n            try\n            {\n                CallTest(outerStructure);\n            }\n            catch (SystemException^ ex) \n            {\n                Console::WriteLine(ex-&gt;Message);\n            }\n\n            IntPtr buffer = Marshal::AllocCoTaskMem(structSize * 10);\n            Marshal::Copy(outerStructure.inner, 0, buffer, structSize * 10);\n            int currentOffset = 0;\n            for (int i = 0; i &lt; 10; i++)\n            {\n                innerArray[i] = safe_cast&lt;INNER^&gt;(Marshal::PtrToStructure(\n                    IntPtr(buffer.ToInt32() + currentOffset),\n                    INNER::typeid));\n                currentOffset += structSize;\n            }\n            Console::WriteLine(outerStructure.field);\n            Marshal::FreeCoTaskMem(buffer);\n        }\n</code></pre><pre><code class=\"lang-cs\" name=\"PtrToStructure#1\">\n\t\t[StructLayout(LayoutKind.Sequential)]\n\n\t\tpublic class  INNER\n\n\t\t{\n\n\t\t\t[MarshalAs(UnmanagedType.ByValTStr, SizeConst =  10)]\n\n\t\t\tpublic string field1 = &quot;Test&quot;;\n\n\t \n\n\t\t}\t\n\n\t\t[StructLayout(LayoutKind.Sequential)]\n\n\t\tpublic struct OUTER\n\n\t\t{\n\n\t\t\t[MarshalAs(UnmanagedType.ByValTStr, SizeConst =  10)]\n\n\t\t\tpublic string field1;\n\n\t\t\t[MarshalAs(UnmanagedType.ByValArray, SizeConst =  100)]\n\n\t\t\tpublic byte[] inner;\n\n\t\t}\n\n\n\n\n\n\t\t[DllImport(@&quot;SomeTestDLL.dll&quot;)]\n\n\t\tpublic static extern void CallTest( ref OUTER po);\n\n\n\n\t\tstatic void Main(string[] args)\n\n\t\t{\n\n\t\t\tOUTER ed = new OUTER();\n\n\t\t\tINNER[] inn=new INNER[10];\n\n\t\t\tINNER test = new INNER();\n\n\t\t\tint iStructSize = Marshal.SizeOf(test);\n\n\n\n\t\t\tint sz =inn.Length * iStructSize;\n\n\t\t\ted.inner = new byte[sz];\n\n\n\n\t\t\ttry\n\n\t\t\t{\n\n\t\t\t\tCallTest( ref ed);\n\n\t\t\t}\n\n\t\t\tcatch(Exception e)\n\n\t\t\t{\n\n\t\t\t\tConsole.WriteLine(e.Message);\n\n\t\t\t}\n\n\t\t\tIntPtr buffer = Marshal.AllocCoTaskMem(iStructSize*10);\n\n\t\t\tMarshal.Copy(ed.inner,0,buffer,iStructSize*10);\n\n\t\t\t\n\n\t\t\tint iCurOffset = 0;\n\n\t\t\tfor(int i=0;i&lt;10;i++)\n\n\t\t\t{\n\n\t\t\t\t\n\n\t\t\t\tinn[i] = (INNER)Marshal.PtrToStructure(new\nIntPtr(buffer.ToInt32()+iCurOffset),typeof(INNER) );\n\n\t\t\t\tiCurOffset += iStructSize;\n\n\t\t\t}\n\n\t\t\tConsole.WriteLine(ed.field1);\n\n\t\t\tMarshal.FreeCoTaskMem(buffer);\n\n\t\t}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_PtrToStructure__1_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_PtrToStructure_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PtrToStructure&lt;T&gt;(IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>[Supported in the .NET Framework 4.5.1 and later versions]  </p>\n<p> Marshals data from an unmanaged block of memory to a newly allocated managed object of the type specified by a generic type parameter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static T PtrToStructure&lt;T&gt; (IntPtr ptr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ptr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to an unmanaged block of memory.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </div>\r\n                  <p>A managed object that contains the data that the <code>ptr</code> parameter points to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The layout of <code>T</code> is not sequential or explicit.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a></div>\r\n                  </div>\r\n                  <p>The class specified by <code>T</code> does not have an accessible default constructor.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>PtrToStructure(T) is often necessary in COM interop and platform invoke when structure parameters are represented as <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">System.IntPtr</a> values. You can pass a value type to this method overload.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_PtrToStructure__1_System_IntPtr___0_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_PtrToStructure_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PtrToStructure&lt;T&gt;(IntPtr,T)</div>        \r\n          </div>\r\n    \r\n            <p>[Supported in the .NET Framework 4.5.1 and later versions]  </p>\n<p> Marshals data from an unmanaged block of memory to a managed object of the specified type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void PtrToStructure&lt;T&gt; (IntPtr ptr, T structure);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ptr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to an unmanaged block of memory.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>structure</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to which the data is to be copied.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Structure layout is not sequential or explicit.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>PtrToStructure(T) is often necessary in COM interop and platform invoke when structure parameters are represented as <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a> values. You cannot use this method overload with value types.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_QueryInterface_System_IntPtr_System_Guid__System_IntPtr__\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_QueryInterface_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">QueryInterface(IntPtr,Guid,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Requests a pointer to a specified interface from a COM object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int QueryInterface (IntPtr pUnk, ref Guid iid, out IntPtr ppv);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>pUnk</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The interface to be queried.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>iid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The interface identifier (IID) of the requested interface.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ppv</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>When this method returns, contains a reference to the returned interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An HRESULT that indicates the success or failure of the call.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The QueryInterface method exposes the <a href=\"http://go.microsoft.com/fwlink/?LinkID=144867\" data-linktype=\"external\">IUnknown::QueryInterface</a> method of a COM object, which attempts to obtain a specific interface pointer. Using <code>QueryInterface</code> on a COM object is the same as performing a cast operation in managed code. Calling an object with this method causes the reference count to increment on the interface pointer before the pointer is returned. Always use <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_Release_\" data-linktype=\"relative-path\">Release</a> to decrement the reference count once you have finished with the pointer. To obtain an <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a> value that represents a <a href=\"http://go.microsoft.com/fwlink/?LinkId=148003\" data-linktype=\"external\">IUnknown</a> interface pointer, you can call <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_GetComInterfaceForObject_\" data-linktype=\"relative-path\">GetComInterfaceForObject</a>, <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_GetIUnknownForObject_\" data-linktype=\"relative-path\">GetIUnknownForObject</a>, or <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_GetIDispatchForObject_\" data-linktype=\"relative-path\">GetIDispatchForObject</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_ReadByte_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_ReadByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadByte(IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Reads a single byte from unmanaged memory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static byte ReadByte (IntPtr ptr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ptr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The address in unmanaged memory from which to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </div>\r\n                  <p>The byte read from unmanaged memory.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.accessviolationexception\" data-linktype=\"relative-path\">AccessViolationException</a></div>\r\n                  </div>\r\n                  <p><code>ptr</code> is not a recognized format.  </p>\n<p> -or-  </p>\n<p> <code>ptr</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>ptr</code> is invalid.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_ReadByte_\" data-linktype=\"relative-path\">ReadByte</a> has an implied offset of 0. This method enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_Copy_\" data-linktype=\"relative-path\">Copy</a>) to a separate managed array before reading its element values.  </p>\n<p> Reading from unaligned memory locations is supported.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a block of unmanaged memory, writes a byte to the unmanaged memory, reads the byte back from unmanaged memory, and then disposes the unmanaged memory.  </p>\n<pre><code class=\"lang-cs\" name=\"Runtime.InteropServices.Marshal.ReadByte - WriteByte#1\">using System;\nusing System.Runtime.InteropServices;\n\n class Example\n {\n     static void Main(string[] args)\n     {\n          // Allocate 1 byte of unmanaged memory.\n          IntPtr hGlobal = Marshal.AllocHGlobal(1);\n\n          // Create a new byte.\n          byte b = 1;\n          Console.WriteLine(&quot;Byte written to unmanaged memory: &quot; + b);\n\n          // Write the byte to unmanaged memory.\n          Marshal.WriteByte(hGlobal, b);\n\n          // Read byte from unmanaged memory.\n          byte c = Marshal.ReadByte(hGlobal);\n          Console.WriteLine(&quot;Byte read from unmanaged memory: &quot; + c);\n\n          // Free the unmanaged memory.\n          Marshal.FreeHGlobal(hGlobal);\n          Console.WriteLine(&quot;Unmanaged memory was disposed.&quot;);\n     }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Runtime.InteropServices.Marshal.ReadByte - WriteByte#1\">Imports System\nImports System.Runtime.InteropServices\n\nModule Example\n    Sub Main()\n         &#39; Allocate 1 byte of unmanaged memory.\n         Dim hGlobal As IntPtr = Marshal.AllocHGlobal(1)\n         \n         &#39; Create a new byte.\n         Dim b As Byte = 1\n         \n         Console.WriteLine(&quot;Byte written to unmanaged memory: {0}&quot;, b)\n         \n         &#39; Write the byte to unmanaged memory.\n         Marshal.WriteByte(hGlobal, b)\n         \n         &#39; Read byte from unmanaged memory.\n         Dim c As Byte = Marshal.ReadByte(hGlobal)\n         Console.WriteLine(&quot;Byte read from unmanaged memory: {0}&quot;, c)\n         \n         &#39; Free the unmanaged memory.\n         Marshal.FreeHGlobal(hGlobal)\n         Console.WriteLine(&quot;Unmanaged memory was disposed.&quot;)\n    End Sub\nEnd Module\n</code></pre><p> The following example demonstrates how to use the ReadByte method to read the value of an unmanaged character.  </p>\n<pre><code class=\"lang-cpp\" name=\"Runtime.InteropServices.Marshal.ReadByte#1\">\nusing namespace System;\nusing namespace System::Runtime::InteropServices;\n\n\n\nvoid main()\n{\n\t// Create an unmanaged byte.\n\tconst char * myString = &quot;b&quot;;\n\n\t// Read the c string as a managed byte.\n        Byte ^ myManagedByte = Marshal::ReadByte((IntPtr) (char *) myString);\n\n\t// Display the byte to the console.\n\tConsole::WriteLine(myManagedByte);\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_ReadByte_System_IntPtr_System_Int32_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_ReadByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadByte(IntPtr,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Reads a single byte at a given offset (or index) from unmanaged memory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static byte ReadByte (IntPtr ptr, int ofs);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ptr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The base address in unmanaged memory from which to read.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ofs</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An additional byte offset, which is added to the <code>ptr</code> parameter before reading.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </div>\r\n                  <p>The byte read from unmanaged memory at the given offset.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.accessviolationexception\" data-linktype=\"relative-path\">AccessViolationException</a></div>\r\n                  </div>\r\n                  <p>Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_ReadByte_\" data-linktype=\"relative-path\">ReadByte</a> enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_Copy_\" data-linktype=\"relative-path\">Copy</a>) to a separate managed array before reading its element values.  </p>\n<p> Reading from unaligned memory locations is supported.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to read and write to an unmanaged array using the ReadByte and <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_WriteByte_\" data-linktype=\"relative-path\">WriteByte</a> methods.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Runtime.interopServices.Marshal.Read-Write val#3\">    Sub ReadWriteByte()\n        &#39; Allocate unmanaged memory. \n        Dim elementSize As Integer = 1\n        Dim unmanagedArray As IntPtr = Marshal.AllocHGlobal(10 * elementSize)\n\n        &#39; Set the 10 elements of the C-style unmanagedArray\n        For i As Integer = 0 To 9\n            Marshal.WriteByte(unmanagedArray, i * elementSize, CType(i + 1, Byte))\n        Next i\n        Console.WriteLine(&quot;Unmanaged memory written.&quot;)\n\n        Console.WriteLine(&quot;Reading unmanaged memory:&quot;)\n        &#39; Print the 10 elements of the C-style unmanagedArray\n        For i As Integer = 0 To 9\n            Console.WriteLine(Marshal.ReadByte(unmanagedArray, i * elementSize))\n        Next i\n\n        Marshal.FreeHGlobal(unmanagedArray)\n\n        Console.WriteLine(&quot;Done. Press Enter to continue.&quot;)\n        Console.ReadLine()\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Runtime.interopServices.Marshal.Read-Write val#3\">    static void ReadWriteByte()\n    {\n        // Allocate unmanaged memory. \n        int elementSize = 1;\n        IntPtr unmanagedArray = Marshal.AllocHGlobal(10 * elementSize);\n\n        // Set the 10 elements of the C-style unmanagedArray\n        for (int i = 0; i &lt; 10; i++)\n        {\n            Marshal.WriteByte(unmanagedArray, i * elementSize, ((Byte)(i + 1)));\n        }\n        Console.WriteLine(&quot;Unmanaged memory written.&quot;);\n\n        Console.WriteLine(&quot;Reading unmanaged memory:&quot;);\n        // Print the 10 elements of the C-style unmanagedArray\n        for (int i = 0; i &lt; 10; i++)\n        {\n            Console.WriteLine(Marshal.ReadByte(unmanagedArray, i * elementSize));\n        }\n\n        Marshal.FreeHGlobal(unmanagedArray);\n\n        Console.WriteLine(&quot;Done. Press Enter to continue.&quot;);\n        Console.ReadLine();\n    }\n</code></pre><p> The following example demonstrates how to use the ReadByte method to read the value of an unmanaged character.  </p>\n<pre><code class=\"lang-cpp\" name=\"Runtime.InteropServices.Marshal.ReadByte-IntPtr-int#1\">\nusing namespace System;\nusing namespace System::Runtime::InteropServices;\n\n\n\nvoid main()\n{\n\t// Create an unmanaged byte.\n\tconst char * myString = &quot;bB&quot;;\n\n\t// Read the second character of the c string as a managed byte.\n        Byte ^ myManagedByte = Marshal::ReadByte((IntPtr) (char *) myString, 1);\n\n\t// Display the byte to the console.\n\tConsole::WriteLine(myManagedByte);\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_ReadByte_System_Object_System_Int32_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_ReadByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadByte(Object,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Reads a single byte at a given offset (or index) from unmanaged memory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static byte ReadByte (object ptr, int ofs);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ptr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The base address in unmanaged memory of the source object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ofs</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An additional byte offset, which is added to the <code>ptr</code> parameter before reading.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </div>\r\n                  <p>The byte read from unmanaged memory at the given offset.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.accessviolationexception\" data-linktype=\"relative-path\">AccessViolationException</a></div>\r\n                  </div>\r\n                  <p>Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>ptr</code> is an <a class=\"xref\" href=\"system.runtime.interopservices.arraywithoffset\" data-linktype=\"relative-path\">ArrayWithOffset</a> object. This method does not accept <a class=\"xref\" href=\"system.runtime.interopservices.arraywithoffset\" data-linktype=\"relative-path\">ArrayWithOffset</a> parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>ReadByte enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_Copy_\" data-linktype=\"relative-path\">Copy</a>) to a separate managed array before reading its element values.  </p>\n<p> Reading from unaligned memory locations is supported.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_ReadInt16_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_ReadInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadInt16(IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Reads a 16-bit signed integer from unmanaged memory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static short ReadInt16 (IntPtr ptr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ptr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The address in unmanaged memory from which to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </div>\r\n                  <p>The 16-bit signed integer read from unmanaged memory.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.accessviolationexception\" data-linktype=\"relative-path\">AccessViolationException</a></div>\r\n                  </div>\r\n                  <p><code>ptr</code> is not a recognized format.  </p>\n<p> -or-  </p>\n<p> <code>ptr</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>ptr</code> is invalid.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_ReadInt16_\" data-linktype=\"relative-path\">ReadInt16</a> has an implied offset of 0. This method enables direct interaction with an unmanaged C-style <code>Int16</code> array, eliminating the expense of copying an entire unmanaged array (using <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_Copy_\" data-linktype=\"relative-path\">Copy</a>) to a separate managed array before reading its element values.  </p>\n<p> Reading from unaligned memory locations is supported.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to read and write to an unmanaged array using the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_ReadInt16_\" data-linktype=\"relative-path\">ReadInt16</a> and <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_WriteInt16_\" data-linktype=\"relative-path\">WriteInt16</a> methods.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Runtime.interopServices.Marshal.Read-Write val#4\">    Sub ReadWriteInt16()\n        &#39; Allocate unmanaged memory. \n        Dim elementSize As Integer = 2\n        Dim unmanagedArray As IntPtr = Marshal.AllocHGlobal(10 * elementSize)\n\n        &#39; Set the 10 elements of the C-style unmanagedArray\n        For i As Integer = 0 To 9\n            Marshal.WriteInt16(unmanagedArray, i * elementSize, CType(i + 1, Int16))\n        Next i\n        Console.WriteLine(&quot;Unmanaged memory written.&quot;)\n\n        Console.WriteLine(&quot;Reading unmanaged memory:&quot;)\n        &#39; Print the 10 elements of the C-style unmanagedArray\n        For i As Integer = 0 To 9\n            Console.WriteLine(Marshal.ReadInt16(unmanagedArray, i * elementSize))\n        Next i\n\n        Marshal.FreeHGlobal(unmanagedArray)\n\n        Console.WriteLine(&quot;Done. Press Enter to continue.&quot;)\n        Console.ReadLine()\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Runtime.interopServices.Marshal.Read-Write val#4\">    static void ReadWriteInt16()\n    {\n        // Allocate unmanaged memory. \n        int elementSize = 2;\n        IntPtr unmanagedArray = Marshal.AllocHGlobal(10 * elementSize);\n\n        // Set the 10 elements of the C-style unmanagedArray\n        for (int i = 0; i &lt; 10; i++)\n        {\n            Marshal.WriteInt16(unmanagedArray, i * elementSize, ((Int16)(i + 1)));\n        }\n        Console.WriteLine(&quot;Unmanaged memory written.&quot;);\n\n        Console.WriteLine(&quot;Reading unmanaged memory:&quot;);\n        // Print the 10 elements of the C-style unmanagedArray\n        for (int i = 0; i &lt; 10; i++)\n        {\n            Console.WriteLine(Marshal.ReadInt16(unmanagedArray, i * elementSize));\n        }\n\n        Marshal.FreeHGlobal(unmanagedArray);\n\n        Console.WriteLine(&quot;Done. Press Enter to continue.&quot;);\n        Console.ReadLine();\n    }\n</code></pre><p> The following example demonstrates how to use the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_ReadInt16_\" data-linktype=\"relative-path\">ReadInt16</a> method to read the value of an unmanaged <code>short</code> variable.  </p>\n<pre><code class=\"lang-cpp\" name=\"Runtime.InteropServices.Marshal.ReadInt16#1\">\nusing namespace System;\nusing namespace System::Runtime::InteropServices;\n\n\n\nvoid main()\n{\n\t// Create an unmanaged short.\n\tshort myShort = 42;\n\n\t// Read the short as a managed Int16.\n        Int16 ^ myManagedVal = Marshal::ReadInt16((IntPtr) &amp;myShort);\n\n\t// Display the value to the console.\n\tConsole::WriteLine(myManagedVal);\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_ReadInt16_System_IntPtr_System_Int32_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_ReadInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadInt16(IntPtr,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Reads a 16-bit signed integer at a given offset from unmanaged memory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static short ReadInt16 (IntPtr ptr, int ofs);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ptr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The base address in unmanaged memory from which to read.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ofs</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An additional byte offset, which is added to the <code>ptr</code> parameter before reading.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </div>\r\n                  <p>The 16-bit signed integer read from unmanaged memory at the given offset.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.accessviolationexception\" data-linktype=\"relative-path\">AccessViolationException</a></div>\r\n                  </div>\r\n                  <p>Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>ReadInt16 enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_Copy_\" data-linktype=\"relative-path\">Copy</a>) to a separate managed array before reading its element values.  </p>\n<p> Reading from unaligned memory locations is supported.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to read and write to an unmanaged array using the ReadInt16 and <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_WriteInt16_\" data-linktype=\"relative-path\">WriteInt16</a> methods.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Runtime.interopServices.Marshal.Read-Write val#4\">    Sub ReadWriteInt16()\n        &#39; Allocate unmanaged memory. \n        Dim elementSize As Integer = 2\n        Dim unmanagedArray As IntPtr = Marshal.AllocHGlobal(10 * elementSize)\n\n        &#39; Set the 10 elements of the C-style unmanagedArray\n        For i As Integer = 0 To 9\n            Marshal.WriteInt16(unmanagedArray, i * elementSize, CType(i + 1, Int16))\n        Next i\n        Console.WriteLine(&quot;Unmanaged memory written.&quot;)\n\n        Console.WriteLine(&quot;Reading unmanaged memory:&quot;)\n        &#39; Print the 10 elements of the C-style unmanagedArray\n        For i As Integer = 0 To 9\n            Console.WriteLine(Marshal.ReadInt16(unmanagedArray, i * elementSize))\n        Next i\n\n        Marshal.FreeHGlobal(unmanagedArray)\n\n        Console.WriteLine(&quot;Done. Press Enter to continue.&quot;)\n        Console.ReadLine()\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Runtime.interopServices.Marshal.Read-Write val#4\">    static void ReadWriteInt16()\n    {\n        // Allocate unmanaged memory. \n        int elementSize = 2;\n        IntPtr unmanagedArray = Marshal.AllocHGlobal(10 * elementSize);\n\n        // Set the 10 elements of the C-style unmanagedArray\n        for (int i = 0; i &lt; 10; i++)\n        {\n            Marshal.WriteInt16(unmanagedArray, i * elementSize, ((Int16)(i + 1)));\n        }\n        Console.WriteLine(&quot;Unmanaged memory written.&quot;);\n\n        Console.WriteLine(&quot;Reading unmanaged memory:&quot;);\n        // Print the 10 elements of the C-style unmanagedArray\n        for (int i = 0; i &lt; 10; i++)\n        {\n            Console.WriteLine(Marshal.ReadInt16(unmanagedArray, i * elementSize));\n        }\n\n        Marshal.FreeHGlobal(unmanagedArray);\n\n        Console.WriteLine(&quot;Done. Press Enter to continue.&quot;);\n        Console.ReadLine();\n    }\n</code></pre><p> The following example demonstrates how to use the ReadInt16 method to read the value of an unmanaged <code>short</code> variable.  </p>\n<pre><code class=\"lang-cpp\" name=\"Runtime.InteropServices.Marshal.ReadInt16-IntPtr-Int#1\">\nusing namespace System;\nusing namespace System::Runtime::InteropServices;\n\nvoid main()\n{\n    // Create an unmanaged short pointer.\n    short * myShort;\n    short tmp = 42;\n    // Initialize it to another value.\n    myShort = &amp;tmp;\n\n    // Read value as a managed Int16.\n    Int16 ^ myManagedVal = Marshal::ReadInt16((IntPtr) myShort, 0);\n\n    // Display the value to the console.\n    Console::WriteLine(myManagedVal);\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_ReadInt16_System_Object_System_Int32_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_ReadInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadInt16(Object,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Reads a 16-bit signed integer at a given offset from unmanaged memory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static short ReadInt16 (object ptr, int ofs);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ptr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The base address in unmanaged memory of the source object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ofs</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An additional byte offset, which is added to the <code>ptr</code> parameter before reading.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </div>\r\n                  <p>The 16-bit signed integer read from unmanaged memory at the given offset.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.accessviolationexception\" data-linktype=\"relative-path\">AccessViolationException</a></div>\r\n                  </div>\r\n                  <p>Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>ptr</code> is an <a class=\"xref\" href=\"system.runtime.interopservices.arraywithoffset\" data-linktype=\"relative-path\">ArrayWithOffset</a> object. This method does not accept <a class=\"xref\" href=\"system.runtime.interopservices.arraywithoffset\" data-linktype=\"relative-path\">ArrayWithOffset</a> parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>ReadInt16 enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_Copy_\" data-linktype=\"relative-path\">Copy</a>) to a separate managed array before reading its element values.  </p>\n<p> Reading from unaligned memory locations is supported.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_ReadInt32_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_ReadInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadInt32(IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Reads a 32-bit signed integer from unmanaged memory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int ReadInt32 (IntPtr ptr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ptr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The address in unmanaged memory from which to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The 32-bit signed integer read from unmanaged memory.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.accessviolationexception\" data-linktype=\"relative-path\">AccessViolationException</a></div>\r\n                  </div>\r\n                  <p><code>ptr</code> is not a recognized format.  </p>\n<p> -or-  </p>\n<p> <code>ptr</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>ptr</code> is invalid.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_ReadInt32_\" data-linktype=\"relative-path\">ReadInt32</a> has an implied offset of 0. This method enables direct interaction with an unmanaged C-style <code>Int32</code> array, eliminating the expense of copying an entire unmanaged array (using <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_Copy_\" data-linktype=\"relative-path\">Copy</a>) to a separate managed array before reading its element values.  </p>\n<p> Reading from unaligned memory locations is supported.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to read and write to an unmanaged array using the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_ReadInt32_\" data-linktype=\"relative-path\">ReadInt32</a> and <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_WriteInt32_\" data-linktype=\"relative-path\">WriteInt32</a> methods.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Runtime.interopServices.Marshal.Read-Write val#5\">    Sub ReadWriteInt32()\n        &#39; Allocate unmanaged memory. \n        Dim elementSize As Integer = 4\n        Dim unmanagedArray As IntPtr = Marshal.AllocHGlobal(10 * elementSize)\n\n        &#39; Set the 10 elements of the C-style unmanagedArray\n        For i As Integer = 0 To 9\n            Marshal.WriteInt32(unmanagedArray, i * elementSize, CType(i + 1, Int32))\n        Next i\n        Console.WriteLine(&quot;Unmanaged memory written.&quot;)\n\n        Console.WriteLine(&quot;Reading unmanaged memory:&quot;)\n        &#39; Print the 10 elements of the C-style unmanagedArray\n        For i As Integer = 0 To 9\n            Console.WriteLine(Marshal.ReadInt32(unmanagedArray, i * elementSize))\n        Next i\n\n        Marshal.FreeHGlobal(unmanagedArray)\n\n        Console.WriteLine(&quot;Done. Press Enter to continue.&quot;)\n        Console.ReadLine()\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Runtime.interopServices.Marshal.Read-Write val#5\">    static void ReadWriteInt32()\n    {\n        // Allocate unmanaged memory. \n        int elementSize = 4;\n        IntPtr unmanagedArray = Marshal.AllocHGlobal(10 * elementSize);\n\n        // Set the 10 elements of the C-style unmanagedArray\n        for (int i = 0; i &lt; 10; i++)\n        {\n            Marshal.WriteInt32(unmanagedArray, i * elementSize, ((Int32)(i + 1)));\n        }\n        Console.WriteLine(&quot;Unmanaged memory written.&quot;);\n\n        Console.WriteLine(&quot;Reading unmanaged memory:&quot;);\n        // Print the 10 elements of the C-style unmanagedArray\n        for (int i = 0; i &lt; 10; i++)\n        {\n            Console.WriteLine(Marshal.ReadInt32(unmanagedArray, i * elementSize));\n        }\n\n        Marshal.FreeHGlobal(unmanagedArray);\n\n        Console.WriteLine(&quot;Done. Press Enter to continue.&quot;);\n        Console.ReadLine();\n    }\n</code></pre><p> The following example demonstrates how to use the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_ReadInt32_\" data-linktype=\"relative-path\">ReadInt32</a> method to read the value of an unmanaged <code>int</code> variable.  </p>\n<pre><code class=\"lang-cpp\" name=\"Runtime.InteropServices.Marshal.ReadInt32#1\">using namespace System;\nusing namespace System::Runtime::InteropServices;\n\n\n\nvoid main()\n{\n\t// Create an unmanaged integer.\n\tint myVal = 42;\n\n\t// Read the int as a managed Int32.\n        Int32 ^ myManagedVal = Marshal::ReadInt32((IntPtr) &amp;myVal);\n\n\t// Display the value to the console.\n\tConsole::WriteLine(myManagedVal);\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_ReadInt32_System_IntPtr_System_Int32_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_ReadInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadInt32(IntPtr,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Reads a 32-bit signed integer at a given offset from unmanaged memory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int ReadInt32 (IntPtr ptr, int ofs);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ptr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The base address in unmanaged memory from which to read.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ofs</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An additional byte offset, which is added to the <code>ptr</code> parameter before reading.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The 32-bit signed integer read from unmanaged memory.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.accessviolationexception\" data-linktype=\"relative-path\">AccessViolationException</a></div>\r\n                  </div>\r\n                  <p>Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_ReadInt32_\" data-linktype=\"relative-path\">ReadInt32</a> enables direct interaction with an unmanaged 32-bit signed array, eliminating the expense of copying an entire unmanaged array (using <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_Copy_\" data-linktype=\"relative-path\">Copy</a>) to a separate managed array before reading its element values.  </p>\n<p> Reading from unaligned memory locations is supported.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to read and write to an unmanaged array using the ReadInt32 and <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_WriteInt32_\" data-linktype=\"relative-path\">WriteInt32</a>methods.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Runtime.interopServices.Marshal.Read-Write val#5\">    Sub ReadWriteInt32()\n        &#39; Allocate unmanaged memory. \n        Dim elementSize As Integer = 4\n        Dim unmanagedArray As IntPtr = Marshal.AllocHGlobal(10 * elementSize)\n\n        &#39; Set the 10 elements of the C-style unmanagedArray\n        For i As Integer = 0 To 9\n            Marshal.WriteInt32(unmanagedArray, i * elementSize, CType(i + 1, Int32))\n        Next i\n        Console.WriteLine(&quot;Unmanaged memory written.&quot;)\n\n        Console.WriteLine(&quot;Reading unmanaged memory:&quot;)\n        &#39; Print the 10 elements of the C-style unmanagedArray\n        For i As Integer = 0 To 9\n            Console.WriteLine(Marshal.ReadInt32(unmanagedArray, i * elementSize))\n        Next i\n\n        Marshal.FreeHGlobal(unmanagedArray)\n\n        Console.WriteLine(&quot;Done. Press Enter to continue.&quot;)\n        Console.ReadLine()\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Runtime.interopServices.Marshal.Read-Write val#5\">    static void ReadWriteInt32()\n    {\n        // Allocate unmanaged memory. \n        int elementSize = 4;\n        IntPtr unmanagedArray = Marshal.AllocHGlobal(10 * elementSize);\n\n        // Set the 10 elements of the C-style unmanagedArray\n        for (int i = 0; i &lt; 10; i++)\n        {\n            Marshal.WriteInt32(unmanagedArray, i * elementSize, ((Int32)(i + 1)));\n        }\n        Console.WriteLine(&quot;Unmanaged memory written.&quot;);\n\n        Console.WriteLine(&quot;Reading unmanaged memory:&quot;);\n        // Print the 10 elements of the C-style unmanagedArray\n        for (int i = 0; i &lt; 10; i++)\n        {\n            Console.WriteLine(Marshal.ReadInt32(unmanagedArray, i * elementSize));\n        }\n\n        Marshal.FreeHGlobal(unmanagedArray);\n\n        Console.WriteLine(&quot;Done. Press Enter to continue.&quot;);\n        Console.ReadLine();\n    }\n</code></pre><p> The following example demonstrates how to use the ReadInt32 method to read the value of an unmanaged <code>int</code> variable.  </p>\n<pre><code class=\"lang-cpp\" name=\"Runtime.InteropServices.Marshal.ReadInt32-IntPtr-Int#1\">using namespace System;\nusing namespace System::Runtime::InteropServices;\n\n\n\nvoid main()\n{\n    // Create an unmanaged int pointer.\n    int * myVal;\n    int tmp = 42;\n    // Initialize it to another value.\n    myVal = &amp;tmp;\n\n    // Read value as a managed Int32.\n    Int32 ^ myManagedVal = Marshal::ReadInt32((IntPtr) myVal, 0);\n\n    // Display the value to the console.\n    Console::WriteLine(myManagedVal);\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_ReadInt32_System_Object_System_Int32_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_ReadInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadInt32(Object,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Reads a 32-bit signed integer at a given offset from unmanaged memory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int ReadInt32 (object ptr, int ofs);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ptr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The base address in unmanaged memory of the source object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ofs</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An additional byte offset, which is added to the <code>ptr</code> parameter before reading.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The 32-bit signed integer read from unmanaged memory at the given offset.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.accessviolationexception\" data-linktype=\"relative-path\">AccessViolationException</a></div>\r\n                  </div>\r\n                  <p>Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>ptr</code> is an <a class=\"xref\" href=\"system.runtime.interopservices.arraywithoffset\" data-linktype=\"relative-path\">ArrayWithOffset</a> object. This method does not accept <a class=\"xref\" href=\"system.runtime.interopservices.arraywithoffset\" data-linktype=\"relative-path\">ArrayWithOffset</a> parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>ReadInt32 enables direct interaction with an unmanaged 32-bit signed array, eliminating the expense of copying an entire unmanaged array (using <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_Copy_\" data-linktype=\"relative-path\">Copy</a>) to a separate managed array before reading its element values.  </p>\n<p> Reading from unaligned memory locations is supported.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_ReadInt64_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_ReadInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadInt64(IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Reads a 64-bit signed integer from unmanaged memory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static long ReadInt64 (IntPtr ptr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ptr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The address in unmanaged memory from which to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The 64-bit signed integer read from unmanaged memory.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.accessviolationexception\" data-linktype=\"relative-path\">AccessViolationException</a></div>\r\n                  </div>\r\n                  <p><code>ptr</code> is not a recognized format.  </p>\n<p> -or-  </p>\n<p> <code>ptr</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>ptr</code> is invalid.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>ReadInt64 has an implied offset of 0. This method enables direct interaction with an unmanaged C-style <code>Int64</code> array, eliminating the expense of copying an entire unmanaged array (using <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_Copy_\" data-linktype=\"relative-path\">Copy</a>) to a separate managed array before reading its element values.  </p>\n<p> Reading from unaligned memory locations is supported.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to read and write to an unmanaged array using the ReadInt64 and <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_WriteInt64_\" data-linktype=\"relative-path\">WriteInt64</a> methods.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Runtime.interopServices.Marshal.Read-Write val#6\">    Sub ReadWriteInt64()\n        &#39; Allocate unmanaged memory. \n        Dim elementSize As Integer = 8\n        Dim unmanagedArray As IntPtr = Marshal.AllocHGlobal(10 * elementSize)\n\n        &#39; Set the 10 elements of the C-style unmanagedArray\n        For i As Integer = 0 To 9\n            Marshal.WriteInt64(unmanagedArray, i * elementSize, CType(i + 1, Int64))\n        Next i\n        Console.WriteLine(&quot;Unmanaged memory written.&quot;)\n\n        Console.WriteLine(&quot;Reading unmanaged memory:&quot;)\n        &#39; Print the 10 elements of the C-style unmanagedArray\n        For i As Integer = 0 To 9\n            Console.WriteLine(Marshal.ReadInt64(unmanagedArray, i * elementSize))\n        Next i\n\n        Marshal.FreeHGlobal(unmanagedArray)\n\n        Console.WriteLine(&quot;Done. Press Enter to continue.&quot;)\n        Console.ReadLine()\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Runtime.interopServices.Marshal.Read-Write val#6\">    static void ReadWriteInt64()\n    {\n        // Allocate unmanaged memory. \n        int elementSize = 8;\n        IntPtr unmanagedArray = Marshal.AllocHGlobal(10 * elementSize);\n\n        // Set the 10 elements of the C-style unmanagedArray\n        for (int i = 0; i &lt; 10; i++)\n        {\n            Marshal.WriteInt64(unmanagedArray, i * elementSize, ((Int64)(i + 1)));\n        }\n        Console.WriteLine(&quot;Unmanaged memory written.&quot;);\n\n        Console.WriteLine(&quot;Reading unmanaged memory:&quot;);\n        // Print the 10 elements of the C-style unmanagedArray\n        for (int i = 0; i &lt; 10; i++)\n        {\n            Console.WriteLine(Marshal.ReadInt64(unmanagedArray, i * elementSize));\n        }\n\n        Marshal.FreeHGlobal(unmanagedArray);\n\n        Console.WriteLine(&quot;Done. Press Enter to continue.&quot;);\n        Console.ReadLine();\n    }\n</code></pre><p> The following example demonstrates how to use the ReadInt64 method to read the value of an unmanaged <code>__int64</code> variable.  </p>\n<pre><code class=\"lang-cpp\" name=\"Runtime.InteropServices.Marshal.ReadInt64#1\">using namespace System;\nusing namespace System::Runtime::InteropServices;\n\n\n\nvoid main()\n{\n\t// Create an unmanaged __int64.\n\t__int64 myVal = 42;\n\n\t// Read the value as a managed Int64.\n    Int64 ^ myManagedVal = Marshal::ReadInt64((IntPtr) &amp;myVal);\n\n\t// Display the value to the console.\n\tConsole::WriteLine(myManagedVal);\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_ReadInt64_System_IntPtr_System_Int32_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_ReadInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadInt64(IntPtr,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Reads a 64-bit signed integer at a given offset from unmanaged memory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static long ReadInt64 (IntPtr ptr, int ofs);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ptr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The base address in unmanaged memory from which to read.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ofs</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An additional byte offset, which is added to the <code>ptr</code> parameter before reading.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The 64-bit signed integer read from unmanaged memory at the given offset.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.accessviolationexception\" data-linktype=\"relative-path\">AccessViolationException</a></div>\r\n                  </div>\r\n                  <p>Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_ReadInt64_\" data-linktype=\"relative-path\">ReadInt64</a> enables direct interaction with an unmanaged 64-bit signed array, eliminating the expense of copying an entire unmanaged array (using <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_Copy_\" data-linktype=\"relative-path\">Copy</a>) to a separate managed array before reading its element values.  </p>\n<p> Reading from unaligned memory locations is supported.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to read and write to an unmanaged array using the ReadInt64 and <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_WriteInt64_\" data-linktype=\"relative-path\">WriteInt64</a> methods.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Runtime.interopServices.Marshal.Read-Write val#6\">    Sub ReadWriteInt64()\n        &#39; Allocate unmanaged memory. \n        Dim elementSize As Integer = 8\n        Dim unmanagedArray As IntPtr = Marshal.AllocHGlobal(10 * elementSize)\n\n        &#39; Set the 10 elements of the C-style unmanagedArray\n        For i As Integer = 0 To 9\n            Marshal.WriteInt64(unmanagedArray, i * elementSize, CType(i + 1, Int64))\n        Next i\n        Console.WriteLine(&quot;Unmanaged memory written.&quot;)\n\n        Console.WriteLine(&quot;Reading unmanaged memory:&quot;)\n        &#39; Print the 10 elements of the C-style unmanagedArray\n        For i As Integer = 0 To 9\n            Console.WriteLine(Marshal.ReadInt64(unmanagedArray, i * elementSize))\n        Next i\n\n        Marshal.FreeHGlobal(unmanagedArray)\n\n        Console.WriteLine(&quot;Done. Press Enter to continue.&quot;)\n        Console.ReadLine()\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Runtime.interopServices.Marshal.Read-Write val#6\">    static void ReadWriteInt64()\n    {\n        // Allocate unmanaged memory. \n        int elementSize = 8;\n        IntPtr unmanagedArray = Marshal.AllocHGlobal(10 * elementSize);\n\n        // Set the 10 elements of the C-style unmanagedArray\n        for (int i = 0; i &lt; 10; i++)\n        {\n            Marshal.WriteInt64(unmanagedArray, i * elementSize, ((Int64)(i + 1)));\n        }\n        Console.WriteLine(&quot;Unmanaged memory written.&quot;);\n\n        Console.WriteLine(&quot;Reading unmanaged memory:&quot;);\n        // Print the 10 elements of the C-style unmanagedArray\n        for (int i = 0; i &lt; 10; i++)\n        {\n            Console.WriteLine(Marshal.ReadInt64(unmanagedArray, i * elementSize));\n        }\n\n        Marshal.FreeHGlobal(unmanagedArray);\n\n        Console.WriteLine(&quot;Done. Press Enter to continue.&quot;);\n        Console.ReadLine();\n    }\n</code></pre><p> The following example demonstrates how to use the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_ReadInt64_\" data-linktype=\"relative-path\">ReadInt64</a> method to read the value of an unmanaged <code>__int64</code> variable.  </p>\n<pre><code class=\"lang-cpp\" name=\"Runtime.InteropServices.Marshal.ReadInt64-IntPtr-Int#1\">\nusing namespace System;\nusing namespace System::Runtime::InteropServices;\n\n\n\nvoid main()\n{\n    // Create an unmanaged __int64 pointer.\n    __int64 * myVal;\n    __int64 tmp = 42;\n    // Initialize it to another value.\n    myVal = &amp;tmp;\n\n    // Read value as a managed Int64.\n    Int64 ^ myManagedVal = Marshal::ReadInt64((IntPtr) myVal, 0);\n\n    // Display the value to the console.\n    Console::WriteLine(myManagedVal);\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_ReadInt64_System_Object_System_Int32_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_ReadInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadInt64(Object,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Reads a 64-bit signed integer at a given offset from unmanaged memory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static long ReadInt64 (object ptr, int ofs);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ptr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The base address in unmanaged memory of the source object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ofs</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An additional byte offset, which is added to the <code>ptr</code> parameter before reading.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The 64-bit signed integer read from unmanaged memory at the given offset.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.accessviolationexception\" data-linktype=\"relative-path\">AccessViolationException</a></div>\r\n                  </div>\r\n                  <p>Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>ptr</code> is an <a class=\"xref\" href=\"system.runtime.interopservices.arraywithoffset\" data-linktype=\"relative-path\">ArrayWithOffset</a> object. This method does not accept <a class=\"xref\" href=\"system.runtime.interopservices.arraywithoffset\" data-linktype=\"relative-path\">ArrayWithOffset</a> parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>ReadInt64 enables direct interaction with an unmanaged 64-bit signed array, eliminating the expense of copying an entire unmanaged array (using <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_Copy_\" data-linktype=\"relative-path\">Copy</a>) to a separate managed array before reading its element values.  </p>\n<p> Reading from unaligned memory locations is supported.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_ReadIntPtr_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_ReadIntPtr_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadIntPtr(IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Reads a processor native-sized integer from unmanaged memory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static IntPtr ReadIntPtr (IntPtr ptr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ptr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The address in unmanaged memory from which to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>The integer read from unmanaged memory. A 32 bit integer is returned on 32 bit machines and a 64 bit integer is returned on 64 bit machines.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.accessviolationexception\" data-linktype=\"relative-path\">AccessViolationException</a></div>\r\n                  </div>\r\n                  <p><code>ptr</code> is not a recognized format.  </p>\n<p> -or-  </p>\n<p> <code>ptr</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>ptr</code> is invalid.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_ReadIntPtr_\" data-linktype=\"relative-path\">ReadIntPtr</a> has an implied offset of 0. This method enables direct interaction with an unmanaged C-style <code>IntPtr</code> array, eliminating the expense of copying an entire unmanaged array (using <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_Copy_\" data-linktype=\"relative-path\">Copy</a>) to a separate managed array before reading its element values.  </p>\n<p> Reading from unaligned memory locations is supported.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to read and write to an unmanaged array using the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_ReadIntPtr_\" data-linktype=\"relative-path\">ReadIntPtr</a> and <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_WriteIntPtr_\" data-linktype=\"relative-path\">WriteIntPtr</a> methods.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Runtime.interopServices.Marshal.Read-Write val#2\">    Sub ReadWriteIntPtr()\n        &#39; Allocate unmanaged memory.\n        Dim elementSize As Integer = Marshal.SizeOf(GetType(IntPtr))\n        Dim unmanagedArray As IntPtr = Marshal.AllocHGlobal(10 * elementSize)\n\n        &#39; Set the 10 elements of the C-style unmanagedArray\n        For i As Integer = 0 To 9\n            Marshal.WriteIntPtr(unmanagedArray, i * elementSize, CType(i + 1, IntPtr))\n        Next i\n        Console.WriteLine(&quot;Unmanaged memory written.&quot;)\n\n        Console.WriteLine(&quot;Reading unmanaged memory:&quot;)\n        &#39; Print the 10 elements of the C-style unmanagedArray\n        For i As Integer = 0 To 9\n            Console.WriteLine(Marshal.ReadIntPtr(unmanagedArray, i * elementSize))\n        Next i\n\n        Marshal.FreeHGlobal(unmanagedArray)\n\n        Console.WriteLine(&quot;Done. Press Enter to continue.&quot;)\n        Console.ReadLine()\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Runtime.interopServices.Marshal.Read-Write val#2\">    static void ReadWriteIntPtr()\n    {\n        // Allocate unmanaged memory. \n        int elementSize = Marshal.SizeOf(typeof(IntPtr));\n        IntPtr unmanagedArray = Marshal.AllocHGlobal(10 * elementSize);\n\n        // Set the 10 elements of the C-style unmanagedArray\n        for (int i = 0; i &lt; 10; i++)\n        {\n            Marshal.WriteIntPtr(unmanagedArray, i * elementSize, ((IntPtr)(i + 1)));\n        }\n        Console.WriteLine(&quot;Unmanaged memory written.&quot;);\n\n        Console.WriteLine(&quot;Reading unmanaged memory:&quot;);\n        // Print the 10 elements of the C-style unmanagedArray\n        for (int i = 0; i &lt; 10; i++)\n        {\n            Console.WriteLine(Marshal.ReadIntPtr(unmanagedArray, i * elementSize));\n        }\n\n        Marshal.FreeHGlobal(unmanagedArray);\n\n        Console.WriteLine(&quot;Done. Press Enter to continue.&quot;);\n        Console.ReadLine();\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_ReadIntPtr_System_IntPtr_System_Int32_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_ReadIntPtr_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadIntPtr(IntPtr,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Reads a processor native sized integer at a given offset from unmanaged memory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static IntPtr ReadIntPtr (IntPtr ptr, int ofs);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ptr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The base address in unmanaged memory from which to read.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ofs</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An additional byte offset, which is added to the <code>ptr</code> parameter before reading.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>The integer read from unmanaged memory at the given offset.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.accessviolationexception\" data-linktype=\"relative-path\">AccessViolationException</a></div>\r\n                  </div>\r\n                  <p>Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_ReadIntPtr_\" data-linktype=\"relative-path\">ReadIntPtr</a> enables direct interaction with an unmanaged C-style <code>IntPtr</code> array, eliminating the expense of copying an entire unmanaged array (using <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_Copy_\" data-linktype=\"relative-path\">Copy</a>) to a separate managed array before reading its element values.  </p>\n<p> Reading from unaligned memory locations is supported.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to read and write to an unmanaged array using the ReadIntPtr and <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_WriteIntPtr_\" data-linktype=\"relative-path\">WriteIntPtr</a> methods.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Runtime.interopServices.Marshal.Read-Write val#2\">    Sub ReadWriteIntPtr()\n        &#39; Allocate unmanaged memory.\n        Dim elementSize As Integer = Marshal.SizeOf(GetType(IntPtr))\n        Dim unmanagedArray As IntPtr = Marshal.AllocHGlobal(10 * elementSize)\n\n        &#39; Set the 10 elements of the C-style unmanagedArray\n        For i As Integer = 0 To 9\n            Marshal.WriteIntPtr(unmanagedArray, i * elementSize, CType(i + 1, IntPtr))\n        Next i\n        Console.WriteLine(&quot;Unmanaged memory written.&quot;)\n\n        Console.WriteLine(&quot;Reading unmanaged memory:&quot;)\n        &#39; Print the 10 elements of the C-style unmanagedArray\n        For i As Integer = 0 To 9\n            Console.WriteLine(Marshal.ReadIntPtr(unmanagedArray, i * elementSize))\n        Next i\n\n        Marshal.FreeHGlobal(unmanagedArray)\n\n        Console.WriteLine(&quot;Done. Press Enter to continue.&quot;)\n        Console.ReadLine()\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Runtime.interopServices.Marshal.Read-Write val#2\">    static void ReadWriteIntPtr()\n    {\n        // Allocate unmanaged memory. \n        int elementSize = Marshal.SizeOf(typeof(IntPtr));\n        IntPtr unmanagedArray = Marshal.AllocHGlobal(10 * elementSize);\n\n        // Set the 10 elements of the C-style unmanagedArray\n        for (int i = 0; i &lt; 10; i++)\n        {\n            Marshal.WriteIntPtr(unmanagedArray, i * elementSize, ((IntPtr)(i + 1)));\n        }\n        Console.WriteLine(&quot;Unmanaged memory written.&quot;);\n\n        Console.WriteLine(&quot;Reading unmanaged memory:&quot;);\n        // Print the 10 elements of the C-style unmanagedArray\n        for (int i = 0; i &lt; 10; i++)\n        {\n            Console.WriteLine(Marshal.ReadIntPtr(unmanagedArray, i * elementSize));\n        }\n\n        Marshal.FreeHGlobal(unmanagedArray);\n\n        Console.WriteLine(&quot;Done. Press Enter to continue.&quot;);\n        Console.ReadLine();\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_ReadIntPtr_System_Object_System_Int32_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_ReadIntPtr_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadIntPtr(Object,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Reads a processor native sized integer from unmanaged memory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static IntPtr ReadIntPtr (object ptr, int ofs);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ptr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The base address in unmanaged memory of the source object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ofs</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An additional byte offset, which is added to the <code>ptr</code> parameter before reading.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>The integer read from unmanaged memory at the given offset.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.accessviolationexception\" data-linktype=\"relative-path\">AccessViolationException</a></div>\r\n                  </div>\r\n                  <p>Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>ptr</code> is an <a class=\"xref\" href=\"system.runtime.interopservices.arraywithoffset\" data-linktype=\"relative-path\">ArrayWithOffset</a> object. This method does not accept <a class=\"xref\" href=\"system.runtime.interopservices.arraywithoffset\" data-linktype=\"relative-path\">ArrayWithOffset</a> parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>ReadIntPtr enables direct interaction with an unmanaged C-style <code>IntPtr</code> array, eliminating the expense of copying an entire unmanaged array (using <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_Copy_\" data-linktype=\"relative-path\">Copy</a>) to a separate managed array before reading its element values.  </p>\n<p> Reading from unaligned memory locations is supported.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_ReAllocCoTaskMem_System_IntPtr_System_Int32_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_ReAllocCoTaskMem_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReAllocCoTaskMem(IntPtr,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Resizes a block of memory previously allocated with <span class=\"xref\">stem.Runtime.InteropServices.Marshal.AllocCoTaskMem*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static IntPtr ReAllocCoTaskMem (IntPtr pv, int cb);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>pv</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to memory allocated with <span class=\"xref\">stem.Runtime.InteropServices.Marshal.AllocCoTaskMem*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cb</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The new size of the allocated block.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>An integer representing the address of the reallocated block of memory. This memory must be released with <span class=\"xref\">stem.Runtime.InteropServices.Marshal.FreeCoTaskMem*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a></div>\r\n                  </div>\r\n                  <p>There is insufficient memory to satisfy the request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>ReAllocCoTaskMem is one of two memory reallocation methods in the <a class=\"xref\" href=\"system.runtime.interopservices.marshal\" data-linktype=\"relative-path\">Marshal</a> class. (<a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_ReAllocHGlobal_\" data-linktype=\"relative-path\">ReAllocHGlobal</a> is the other.) The beginning of the reallocated memory content is the same as the original content; however, the entire memory block can be in a different location. This method exposes the COM <a href=\"http://go.microsoft.com/fwlink/?LinkId=148778\" data-linktype=\"external\">CoTaskMemRealloc</a> function, which is referred to as the COM task memory allocator.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_ReAllocHGlobal_System_IntPtr_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_ReAllocHGlobal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReAllocHGlobal(IntPtr,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Resizes a block of memory previously allocated with <span class=\"xref\">stem.Runtime.InteropServices.Marshal.AllocHGlobal*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static IntPtr ReAllocHGlobal (IntPtr pv, IntPtr cb);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>pv</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to memory allocated with <span class=\"xref\">stem.Runtime.InteropServices.Marshal.AllocHGlobal*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cb</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The new size of the allocated block. This is not a pointer; it is the byte count you are requesting, cast to type <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a>. If you pass a pointer, it is treated as a size.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>A pointer to the reallocated memory. This memory must be released using <span class=\"xref\">stem.Runtime.InteropServices.Marshal.FreeHGlobal*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a></div>\r\n                  </div>\r\n                  <p>There is insufficient memory to satisfy the request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>ReAllocHGlobal is one of two memory reallocation API methods in the <a class=\"xref\" href=\"system.runtime.interopservices.marshal\" data-linktype=\"relative-path\">Marshal</a> class. (<a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_ReAllocCoTaskMem_\" data-linktype=\"relative-path\">ReAllocCoTaskMem</a> is the other.)  </p>\n<p> This method exposes the Win32 <a href=\"http://go.microsoft.com/fwlink/?LinkId=148780\" data-linktype=\"external\">GlobalReAlloc</a> function from Kernel32.dll. The returned pointer can differ from the original. If it is different, the contents of the original memory block have been copied to the new block, and the original memory block has been freed.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_Release_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_Release_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Release(IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Decrements the reference count on the specified interface.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int Release (IntPtr pUnk);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>pUnk</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The interface to release.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The new value of the reference count on the interface specified by the <code>pUnk</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The common language runtime manages the reference count of a COM object for you, making it unnecessary to use this method directly. Use this value only for testing purposes. In rare cases, such as testing a custom marshaler, you might find it necessary to manipulate an object&#39;s lifetime manually. Only programs that call <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_AddRef_\" data-linktype=\"relative-path\">AddRef</a> should call Release. Calling Release after the reference count has reached zero causes undefined behavior.  </p>\n<p> You can call <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_GetComInterfaceForObject_\" data-linktype=\"relative-path\">GetComInterfaceForObject</a>, <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_GetIUnknownForObject_\" data-linktype=\"relative-path\">GetIUnknownForObject</a>, or <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_GetIDispatchForObject_\" data-linktype=\"relative-path\">GetIDispatchForObject</a> to obtain an <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a> value that represents a <a href=\"http://go.microsoft.com/fwlink/?LinkId=148003\" data-linktype=\"external\">IUnknown</a> interface pointer to release. You can also use these methods and the Release method on managed objects to release the COM interfaces represented by the managed object&#39;s <a href=\"../Topic/COM%20Callable%20Wrapper.md\" data-linktype=\"relative-path\">COM Callable Wrapper</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to retrieve an <code>IUnknown</code> interface for a managed object using the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_GetIUnknownForObject_\" data-linktype=\"relative-path\">GetIUnknownForObject</a> method. The example then releases the interface pointer by calling the Release method.  </p>\n<pre><code class=\"lang-cs\" name=\"Runtime.InteropServices.Marshal.GetIUnknownForObject-release#1\">using System;\nusing System.Runtime.InteropServices;\n\nclass Program\n{\n\n    static void Run()\n    {\n\n        // Create an int object\n        int obj = 1;\n\n        Console.WriteLine(&quot;Calling Marshal.GetIUnknownForObject...&quot;);\n\n        // Get the IUnKnown pointer for the Integer object\n        IntPtr pointer = Marshal.GetIUnknownForObject(obj);\n\n        Console.WriteLine(&quot;Calling Marshal.Release...&quot;);\n\n        // Always call Marshal.Release to decrement the reference count.\n        Marshal.Release(pointer);\n    }\n\n    static void Main(string[] args)\n    {\n        Run();\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Runtime.InteropServices.Marshal.GetIUnknownForObject-release#1\">Imports System.Runtime.InteropServices\n\nModule Program\n\n\n    Sub Run()\n\n        &#39; Dim an Integer object\n        Dim IntegerObject As Integer = 1\n\n        &#39; Dim a pointer\n        Dim pointer As IntPtr\n\n        Console.WriteLine(&quot;Calling Marshal.GetIUnknownForObject...&quot;)\n\n        &#39; Get the IUnKnown pointer for the Integer object\n        pointer = Marshal.GetIUnknownForObject(IntegerObject)\n\n        Console.WriteLine(&quot;Calling Marshal.Release...&quot;)\n\n        &#39; Always call Marshal.Release to decrement the reference count.\n        Marshal.Release(pointer)\n\n\n\n    End Sub\n\n    Sub Main(ByVal args() As String)\n\n        Run()\n\n    End Sub\n\nEnd Module\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_ReleaseComObject_System_Object_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_ReleaseComObject_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReleaseComObject(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Decrements the reference count of the <a href=\"../Topic/Runtime%20Callable%20Wrapper.md\" data-linktype=\"relative-path\">Runtime Callable Wrapper</a> (RCW) associated with the specified COM object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int ReleaseComObject (object o);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>o</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The COM object to release.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The new value of the reference count of the RCW associated with <code>o</code>. This value is typically zero since the RCW keeps just one reference to the wrapped COM object regardless of the number of managed clients calling it.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>o</code> is not a valid COM object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a></div>\r\n                  </div>\r\n                  <p><code>o</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is used to explicitly control the lifetime of a COM object used from managed code. You should use this method to free the underlying COM object that holds references to resources in a timely manner or when objects must be freed in a specific order.  </p>\n<p> Every time a COM interface pointer enters the common language runtime (CLR), it is wrapped in an RCW.  </p>\n<p> The RCW has a reference count that is incremented every time a COM interface pointer is mapped to it. The ReleaseComObject method decrements the reference count of an RCW. When the reference count reaches zero, the runtime releases all its references on the unmanaged COM object, and throws a <a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">System.NullReferenceException</a> if you attempt to use the object further. If the same COM interface is passed more than one time from unmanaged to managed code, the reference count on the wrapper is incremented every time, and calling ReleaseComObject returns the number of remaining references.  </p>\n<p> This method enables you to force an RCW reference count release so that it occurs precisely when you want it to. However, improper use of ReleaseComObject may cause your application to fail, or may cause an access violation.  </p>\n<p> Consider a scenario in which managed code in an application domain is holding onto an RCW that represents a COM component. If you call the ReleaseComObject method on the RCW, the managed code will be unable to access the RCW and will raise an <a class=\"xref\" href=\"system.runtime.interopservices.invalidcomobjectexception\" data-linktype=\"relative-path\">InvalidComObjectException</a> exception.  </p>\n<p> A more serious error may occur if a call to the RCW is executing when the RCW is released. In this case, there is a good chance that the thread making the call will cause an access violation. However, process memory may become corrupted, and the process may continue to run until it fails for reasons that are very difficult to debug.  </p>\n<p> This risk is compounded when the COM component that is being used is a singleton, for the following reason: The CLR activates COM components by calling the COM <a href=\"http://go.microsoft.com/fwlink/?LinkID=142894\" data-linktype=\"external\">CoCreateInstance</a> function, which returns the same interface pointer every time it is called for singleton COM components. Thus, separate and independent pieces of managed code in an application domain can be using the same RCW for a singleton COM component, and if either one calls the ReleaseComObject method on the COM component, the other will be broken.  </p>\n<p> Therefore, use the ReleaseComObject only if it is absolutely required. If you want to call this method to ensure that a COM component is released at a determined time, consider using the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_FinalReleaseComObject_\" data-linktype=\"relative-path\">FinalReleaseComObject</a> method instead. <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_FinalReleaseComObject_\" data-linktype=\"relative-path\">FinalReleaseComObject</a> will release the underlying COM component regardless of how many times it has re-entered the CLR. The internal reference count of the RCW is incremented by one every time the COM component re-enters the CLR. Therefore, you could call the ReleaseComObject method in a loop until the value returned is zero. This achieves the same result as the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_FinalReleaseComObject_\" data-linktype=\"relative-path\">FinalReleaseComObject</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_ReleaseThreadCache\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_ReleaseThreadCache_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReleaseThreadCache()</div>        \r\n          </div>\r\n    \r\n            <p>Releases the thread cache.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void ReleaseThreadCache ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_SecureStringToBSTR_System_Security_SecureString_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_SecureStringToBSTR_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SecureStringToBSTR(SecureString)</div>        \r\n          </div>\r\n    \r\n            <p>Allocates an unmanaged <a href=\"https://msdn.microsoft.com/library/ms221069(v=vs.85).aspx\" data-linktype=\"external\">binary string (BSTR)</a> and copies the contents of a managed <a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a> object into it.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static IntPtr SecureStringToBSTR (System.Security.SecureString s);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The managed object to copy.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>The address, in unmanaged memory, where the <code>s</code> parameter was copied to, or 0 if a null object was supplied.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>s</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The current computer is not running Windows 2000 Service Pack 3 or later.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a></div>\r\n                  </div>\r\n                  <p>There is insufficient memory available.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The SecureStringToBSTR method is useful for custom marshaling or when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the <code>BSTR</code> when finished by calling the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_ZeroFreeBSTR_\" data-linktype=\"relative-path\">ZeroFreeBSTR</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_SecureStringToCoTaskMemAnsi_System_Security_SecureString_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_SecureStringToCoTaskMemAnsi_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SecureStringToCoTaskMemAnsi(SecureString)</div>        \r\n          </div>\r\n    \r\n            <p>Copies the contents of a managed <a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a> object to a block of memory allocated from the unmanaged COM task allocator.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static IntPtr SecureStringToCoTaskMemAnsi (System.Security.SecureString s);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The managed object to copy.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>The address, in unmanaged memory, where the <code>s</code> parameter was copied to, or 0 if a null object was supplied.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>s</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The current computer is not running Windows 2000 Service Pack 3 or later.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a></div>\r\n                  </div>\r\n                  <p>There is insufficient memory available.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The SecureStringToCoTaskMemAnsi method is useful for custom marshaling or when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_ZeroFreeCoTaskMemAnsi_\" data-linktype=\"relative-path\">ZeroFreeCoTaskMemAnsi</a>. The characters of the string are copied as ANSI characters.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the SecureStringToCoTaskMemAnsi method to marshal and decrypt the contents of a <a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a> object to a block of unmanaged memory. It then uses the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_ZeroFreeCoTaskMemAnsi_\" data-linktype=\"relative-path\">ZeroFreeCoTaskMemAnsi</a> method to zero out and dispose the unmanaged block.  </p>\n<pre><code class=\"lang-cs\" name=\"Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi#1\">using System;\nusing System.Runtime.InteropServices;\nusing System.Security;\n\nclass MarshalExample\n{\n     static void Main()\n     {\n         IntPtr unmanagedRef = IntPtr.Zero;\n\n          // Ask the user for a password.\n          Console.Write(&quot;Please enter your password: &quot;);\n\n          SecureString passWord = GetPassword();\n\n          Console.WriteLine(&quot;Copying and decrypting the string to unmanaged memory...&quot;);\n\n          // Copy the Secure string to unmanaged memory (and decrypt it).\n          unmanagedRef = Marshal.SecureStringToCoTaskMemAnsi(passWord);\n\n          if (unmanagedRef != IntPtr.Zero)\n          {\n              Console.WriteLine(&quot;Zeroing out unmanaged memory...&quot;);\n\n              Marshal.ZeroFreeCoTaskMemAnsi(unmanagedRef);\n          }\n          passWord.Dispose();\n          \n         Console.WriteLine(&quot;Done.&quot;);\n     }\n\n     public static SecureString GetPassword()\n     {\n         SecureString password = new SecureString();\n\n         // get the first character of the password\n         ConsoleKeyInfo nextKey = Console.ReadKey(true);\n\n         while (nextKey.Key != ConsoleKey.Enter)\n         {\n             if (nextKey.Key == ConsoleKey.Backspace)\n             {\n                 if (password.Length &gt; 0)\n                 {\n                     password.RemoveAt(password.Length - 1);\n\n                     // erase the last * as well\n                     Console.Write(nextKey.KeyChar);\n                     Console.Write(&quot; &quot;);\n                     Console.Write(nextKey.KeyChar);\n                 }\n             }\n             else\n             {\n                 password.AppendChar(nextKey.KeyChar);\n                 Console.Write(&quot;*&quot;);\n             }\n\n             nextKey = Console.ReadKey(true);\n         }\n\n         Console.WriteLine();\n\n         // lock the password down\n         password.MakeReadOnly();\n         return password;\n     }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi#1\">Imports System.Runtime.InteropServices\nImports System.Security\n\nModule Example\n    Sub Main()\n        Dim unmanagedRef As IntPtr\n\n         &#39; Ask the user for a password.\n         Console.Write(&quot;Please enter your password: &quot;)\n         Dim passWord As SecureString = GetPassword()\n\n         Console.WriteLine(&quot;Copying and decrypting the string to unmanaged memory...&quot;)\n\n         &#39; Copy the Secure string to unmanaged memory (and decrypt it).\n         unmanagedRef = Marshal.SecureStringToCoTaskMemAnsi(passWord)\n\n         If unmanagedRef &lt;&gt; IntPtr.Size Then\n             Console.WriteLine(&quot;Zeroing out unmanaged memory...&quot;)\n             Marshal.ZeroFreeCoTaskMemAnsi(unmanagedRef)\n         End If\n         passWord.Dispose()\n\n        Console.WriteLine(&quot;Done.&quot;)\n    End Sub\n\n\n\n    Function GetPassword() As SecureString\n        Dim password As New SecureString()\n\n        &#39; get the first character of the password\n        Dim nextKey As ConsoleKeyInfo = Console.ReadKey(True)\n\n        While nextKey.Key &lt;&gt; ConsoleKey.Enter\n            If nextKey.Key = ConsoleKey.BackSpace Then\n                If password.Length &gt; 0 Then\n                    password.RemoveAt(password.Length - 1)\n\n                    &#39; erase the last * as well\n                    Console.Write(nextKey.KeyChar)\n                    Console.Write(&quot; &quot;)\n                    Console.Write(nextKey.KeyChar)\n                End If\n            Else\n                password.AppendChar(nextKey.KeyChar)\n                Console.Write(&quot;*&quot;)\n            End If\n\n            nextKey = Console.ReadKey(True)\n        End While\n\n        Console.WriteLine()\n\n        &#39; lock the password down\n        password.MakeReadOnly()\n        Return password\n\n    End Function\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_SecureStringToCoTaskMemUnicode_System_Security_SecureString_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_SecureStringToCoTaskMemUnicode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SecureStringToCoTaskMemUnicode(SecureString)</div>        \r\n          </div>\r\n    \r\n            <p>Copies the contents of a managed <a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a> object to a block of memory allocated from the unmanaged COM task allocator.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static IntPtr SecureStringToCoTaskMemUnicode (System.Security.SecureString s);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The managed object to copy.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>The address, in unmanaged memory, where the <code>s</code> parameter was copied to, or 0 if a null object was supplied.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>s</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The current computer is not running Windows 2000 Service Pack 3 or later.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a></div>\r\n                  </div>\r\n                  <p>There is insufficient memory available.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The SecureStringToCoTaskMemUnicode method is useful for custom marshaling or when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_ZeroFreeCoTaskMemUnicode_\" data-linktype=\"relative-path\">ZeroFreeCoTaskMemUnicode</a> method. The characters of the string are copied as Unicode characters.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the SecureStringToCoTaskMemUnicode method to marshal and decrypt the contents of a <a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a> object to a block of unmanaged memory. It then uses the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_ZeroFreeCoTaskMemUnicode_\" data-linktype=\"relative-path\">ZeroFreeCoTaskMemUnicode</a> method to zero out and dispose the unmanaged block.  </p>\n<pre><code class=\"lang-cs\" name=\"Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode#1\">using System;\nusing System.Runtime.InteropServices;\nusing System.Security;\n\nclass Example\n{\n    static void Main()\n    {\n        IntPtr unmanagedRef = IntPtr.Zero;\n        // Ask the user for a password.\n        Console.Write(&quot;Please enter your password: &quot;);\n        SecureString passWord = GetPassword();\n\n        Console.WriteLine(&quot;Copying and decrypting the string to unmanaged memory...&quot;);\n        // Copy the Secure string to unmanaged memory (and decrypt it).\n        unmanagedRef = Marshal.SecureStringToCoTaskMemUnicode(passWord);\n        passWord.Dispose();\n        \n        if (unmanagedRef != IntPtr.Zero) {\n            Console.WriteLine(&quot;Zeroing out unmanaged memory...&quot;);\n            Marshal.ZeroFreeCoTaskMemUnicode(unmanagedRef);\n        }\n        Console.WriteLine(&quot;Done.&quot;);\n    }\n\n    public static SecureString GetPassword()\n    {\n        SecureString password = new SecureString();\n\n        // get the first character of the password\n        ConsoleKeyInfo nextKey = Console.ReadKey(true);\n        while (nextKey.Key != ConsoleKey.Enter) {\n            if (nextKey.Key == ConsoleKey.Backspace) {\n                if (password.Length &gt; 0) {\n                    password.RemoveAt(password.Length - 1);\n\n                    // erase the last * as well\n                    Console.Write(nextKey.KeyChar);\n                    Console.Write(&quot; &quot;);\n                    Console.Write(nextKey.KeyChar);\n                }\n            }\n            else {\n                password.AppendChar(nextKey.KeyChar);\n                Console.Write(&quot;*&quot;);\n            }\n\n            nextKey = Console.ReadKey(true);\n        }\n\n         Console.WriteLine();\n\n         // Lock the password down.\n         password.MakeReadOnly();\n         return password;\n     }\n }\n// The example displays output like the following:\n//       Please enter your password: **********\n//       Copying and decrypting the string to unmanaged memory...\n//       Zeroing out unmanaged memory...\n//       Done.\n</code></pre><pre><code class=\"lang-vb\" name=\"Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode#1\">Imports System.Runtime.InteropServices\nImports System.Security\n\nModule Example\n    Public Sub Main()\n        Dim unmanagedRef As IntPtr\n        &#39; Ask the user for a password.\n        Console.Write(&quot;Please enter your password: &quot;)\n        Dim passWord As SecureString = GetPassword()\n\n        Console.WriteLine(&quot;Copying and decrypting the string to unmanaged memory...&quot;)\n        &#39; Copy the Secure string to unmanaged memory (and decrypt it).\n        unmanagedRef = Marshal.SecureStringToCoTaskMemUnicode(passWord)\n        passWord.Dispose()\n\n        If unmanagedRef &lt;&gt; IntPtr.Size Then\n            Console.WriteLine(&quot;Zeroing out unmanaged memory...&quot;)\n            Marshal.ZeroFreeCoTaskMemUnicode(unmanagedRef)\n        End If\n        Console.WriteLine(&quot;Done.&quot;)\n    End Sub\n\n    Function GetPassword() As SecureString\n        Dim password As New SecureString()\n\n        &#39; Get the first character of the password.\n        Dim nextKey As ConsoleKeyInfo = Console.ReadKey(True)\n        While nextKey.Key &lt;&gt; ConsoleKey.Enter\n            If nextKey.Key = ConsoleKey.BackSpace Then\n                If password.Length &gt; 0 Then\n                    password.RemoveAt(password.Length - 1)\n\n                    &#39; Erase the last * as well.\n                    Console.Write(nextKey.KeyChar)\n                    Console.Write(&quot; &quot;)\n                    Console.Write(nextKey.KeyChar)\n                End If\n            Else\n                password.AppendChar(nextKey.KeyChar)\n                Console.Write(&quot;*&quot;)\n            End If\n\n            nextKey = Console.ReadKey(True)\n        End While\n        Console.WriteLine()\n\n        &#39; lock the password down\n        password.MakeReadOnly()\n        Return password\n    End Function\nEnd Module\n&#39; The example displays output like the following:\n&#39;       Please enter your password: **********\n&#39;       Copying and decrypting the string to unmanaged memory...\n&#39;       Zeroing out unmanaged memory...\n&#39;       Done.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_SecureStringToGlobalAllocAnsi_System_Security_SecureString_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_SecureStringToGlobalAllocAnsi_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SecureStringToGlobalAllocAnsi(SecureString)</div>        \r\n          </div>\r\n    \r\n            <p>Copies the contents of a managed <a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a> into unmanaged memory, converting into ANSI format as it copies.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static IntPtr SecureStringToGlobalAllocAnsi (System.Security.SecureString s);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The managed object to copy.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>The address, in unmanaged memory, to where the <code>s</code> parameter was copied, or 0 if a null object was supplied.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>s</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The current computer is not running Windows 2000 Service Pack 3 or later.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a></div>\r\n                  </div>\r\n                  <p>There is insufficient memory available.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The SecureStringToGlobalAllocAnsi method is useful for custom marshaling or when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_ZeroFreeGlobalAllocAnsi_\" data-linktype=\"relative-path\">ZeroFreeGlobalAllocAnsi</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the SecureStringToGlobalAllocAnsi method to marshal and decrypt the contents of a <a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a> object to a block of unmanaged memory. It then uses the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_ZeroFreeGlobalAllocAnsi_\" data-linktype=\"relative-path\">ZeroFreeGlobalAllocAnsi</a> method to zero out and dispose the unmanaged block.  </p>\n<pre><code class=\"lang-cs\" name=\"Runtime.InteropServices.Marshal.SecureStringToHGlobalAnsi#1\">using System;\nusing System.Runtime.InteropServices;\nusing System.Security;\n\nclass Example\n{\n    static void Main()\n    {\n        IntPtr unmanagedRef = IntPtr.Zero;\n\n        // Ask the user for a password.\n        Console.Write(&quot;Please enter your password: &quot;);\n        SecureString passWord = GetPassword();\n\n        Console.WriteLine(&quot;Copying and decrypting the string to unmanaged memory...&quot;);\n        // Copy the Secure string to unmanaged memory (and decrypt it).\n        unmanagedRef = Marshal.SecureStringToGlobalAllocAnsi(passWord);\n        passWord.Dispose();\n        \n        if (unmanagedRef != IntPtr.Zero) {\n            Console.WriteLine(&quot;Zeroing out unmanaged memory...&quot;);\n            Marshal.ZeroFreeGlobalAllocAnsi(unmanagedRef);\n        }\n        Console.WriteLine(&quot;Done.&quot;);\n    }\n\n    public static SecureString GetPassword()\n    {\n        SecureString password = new SecureString();\n\n        // get the first character of the password\n        ConsoleKeyInfo nextKey = Console.ReadKey(true);\n\n        while (nextKey.Key != ConsoleKey.Enter) {\n            if (nextKey.Key == ConsoleKey.Backspace) {\n                if (password.Length &gt; 0) {\n                    password.RemoveAt(password.Length - 1);\n\n                    // erase the last * as well\n                    Console.Write(nextKey.KeyChar);\n                    Console.Write(&quot; &quot;);\n                    Console.Write(nextKey.KeyChar);\n                }\n            }\n            else {\n                password.AppendChar(nextKey.KeyChar);\n                Console.Write(&quot;*&quot;);\n            }\n\n            nextKey = Console.ReadKey(true);\n        }\n        Console.WriteLine();\n\n        // lock the password down\n        password.MakeReadOnly();\n        return password;\n    }\n}\n// The example displays output like the following:\n//       Please enter your password: ********\n//       Copying and decrypting the string to unmanaged memory...\n//       Zeroing out unmanaged memory...\n//       Done.\n</code></pre><pre><code class=\"lang-vb\" name=\"Runtime.InteropServices.Marshal.SecureStringToHGlobalAnsi#1\">Imports System\nImports System.Runtime.InteropServices\nImports System.Security\n\nModule Example\n    Sub Main()\n        Dim unmanagedRef As IntPtr\n\n        &#39; Ask the user for a password.\n        Console.Write(&quot;Please enter your password: &quot;)\n        Dim passWord As SecureString = GetPassword()\n\n        Console.WriteLine(&quot;Copying and decrypting the string to unmanaged memory...&quot;)\n        &#39; Copy the Secure string to unmanaged memory (and decrypt it).\n        unmanagedRef = Marshal.SecureStringToGlobalAllocAnsi(passWord)\n        passWord.Dispose()\n\n        If unmanagedRef &lt;&gt; IntPtr.Zero Then\n            Console.WriteLine(&quot;Zeroing out unmanaged memory...&quot;)\n            Marshal.ZeroFreeGlobalAllocAnsi(unmanagedRef)\n        End If\n        Console.WriteLine(&quot;Done.&quot;)\n    End Sub\n\n    Function GetPassword() As SecureString\n        Dim password As New SecureString()\n\n        &#39; get the first character of the password\n        Dim nextKey As ConsoleKeyInfo = Console.ReadKey(True)\n\n        While nextKey.Key &lt;&gt; ConsoleKey.Enter\n            If nextKey.Key = ConsoleKey.BackSpace Then\n                If password.Length &gt; 0 Then\n                    password.RemoveAt(password.Length - 1)\n\n                    &#39; Erase the last * as well.\n                    Console.Write(nextKey.KeyChar)\n                    Console.Write(&quot; &quot;)\n                    Console.Write(nextKey.KeyChar)\n                End If\n            Else\n                password.AppendChar(nextKey.KeyChar)\n                Console.Write(&quot;*&quot;)\n            End If\n\n            nextKey = Console.ReadKey(True)\n        End While\n        Console.WriteLine()\n\n        &#39; lock the password down\n        password.MakeReadOnly()\n        Return password\n    End Function\nEnd Module\n&#39; The example displays output like the following:\n&#39;       Please enter your password: ********\n&#39;       Copying and decrypting the string to unmanaged memory...\n&#39;       Zeroing out unmanaged memory...\n&#39;       Done.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_SecureStringToGlobalAllocUnicode_System_Security_SecureString_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_SecureStringToGlobalAllocUnicode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SecureStringToGlobalAllocUnicode(SecureString)</div>        \r\n          </div>\r\n    \r\n            <p>Copies the contents of a managed <a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a> object into unmanaged memory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static IntPtr SecureStringToGlobalAllocUnicode (System.Security.SecureString s);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The managed object to copy.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>The address, in unmanaged memory, where <code>s</code> was copied, or 0 if <code>s</code> is a <a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a> object whose length is 0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>s</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The current computer is not running Windows 2000 Service Pack 3 or later.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a></div>\r\n                  </div>\r\n                  <p>There is insufficient memory available.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The SecureStringToGlobalAllocUnicode method is useful for custom marshaling or for use when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_ZeroFreeGlobalAllocUnicode_\" data-linktype=\"relative-path\">ZeroFreeGlobalAllocUnicode</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the SecureStringToGlobalAllocUnicode method with the unmanaged <code>LogonUser</code> function to perform impersonation with the <a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a> class. The example then uses the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_ZeroFreeGlobalAllocUnicode_\" data-linktype=\"relative-path\">ZeroFreeGlobalAllocUnicode</a> method to zero out and free the unmanaged string reference.  </p>\n<pre><code class=\"lang-vb\" name=\"Runtime.InteropServices.Marshal.SecureStringToHGlobalUni#1\">Imports System\nImports System.ComponentModel\nImports System.Runtime.InteropServices\nImports System.Security\nImports System.Security.Principal\n\nModule Example\n    &#39; PInvoke into the Win32 API to provide access to the\n    &#39; LogonUser and CloseHandle functions.\n    &lt;DllImport(&quot;advapi32.dll&quot;, SetLastError:=True, CharSet:=CharSet.Unicode)&gt; _\n    Function LogonUser(ByVal username As String, ByVal domain As String, _\n                       ByVal password As IntPtr, ByVal logonType As Integer, _\n                       ByVal logonProvider As Integer, ByRef token As IntPtr) _\n                       As Boolean\n    End Function\n\n    &lt;DllImport(&quot;kernel32.dll&quot;, CharSet:=CharSet.Auto)&gt; _\n    Function CloseHandle(ByVal handle As IntPtr) As Boolean\n    End Function\n\n    &#39; Define the required LogonUser enumerations.\n    Const LOGON32_PROVIDER_DEFAULT As Integer = 0\n    Const LOGON32_LOGON_INTERACTIVE As Integer = 2\n\n    Sub Main(ByVal args() As String)\n        &#39; Display the current user before impersonation.\n        Console.WriteLine(&quot;Before impersonation: {0}&quot;,\n                          WindowsIdentity.GetCurrent().Name)\n\n        &#39; Ask the user for a network domain.\n        Console.Write(&quot;Please enter your domain:&quot;)\n        Dim domain As String = Console.ReadLine()\n\n        &#39; Ask the user for a user name.\n        Console.Write(&quot;Please enter your user name:&quot;)\n        Dim username As String = Console.ReadLine()\n\n        &#39; Ask the user for a password.\n        Console.Write(&quot;Please enter your password:&quot;)\n        Dim passWord As SecureString = GetPassword()\n\n        &#39; Impersonate the account provided by the user.\n        Try\n            Dim userContext As WindowsImpersonationContext =\n                            ImpersonateUser(passWord, username, domain)\n            &#39; Display the current user after impersonation.\n            Console.WriteLine(&quot;After impersonation: {0}&quot;,\n                              WindowsIdentity.GetCurrent().Name)\n         Catch e As ArgumentException\n            Console.WriteLine(e.Message)\n             Console.WriteLine(&quot;{0}: {1}&quot;, e.GetType().Name, e.Message)\n         Catch e As Win32Exception\n             Console.WriteLine(&quot;{0}: {1}&quot;, e.GetType().Name, e.Message)\n         Finally\n              passWord.Dispose()\n         End Try\n    End Sub\n\n    Function GetPassword() As SecureString\n        Dim password As New SecureString()\n\n        &#39; get the first character of the password\n        Dim nextKey As ConsoleKeyInfo = Console.ReadKey(True)\n\n        While nextKey.Key &lt;&gt; ConsoleKey.Enter\n            If nextKey.Key = ConsoleKey.BackSpace Then\n                If password.Length &gt; 0 Then\n                    password.RemoveAt(password.Length - 1)\n\n                    &#39; erase the last * as well\n                    Console.Write(nextKey.KeyChar)\n                    Console.Write(&quot; &quot;)\n                    Console.Write(nextKey.KeyChar)\n                End If\n            Else\n                password.AppendChar(nextKey.KeyChar)\n                Console.Write(&quot;*&quot;)\n            End If\n\n            nextKey = Console.ReadKey(True)\n        End While\n\n        Console.WriteLine()\n\n        &#39; lock the password down\n        password.MakeReadOnly()\n        Return password\n    End Function\n\n    Function ImpersonateUser(ByVal password As SecureString,\n                             ByVal userName As String,\n                             ByVal domainName As String) As WindowsImpersonationContext\n        Dim tokenHandle As IntPtr = IntPtr.Zero\n        Dim passwordPtr As IntPtr = IntPtr.Zero\n        Dim returnValue As Boolean = False\n        Dim err As Integer = 0\n        \n        &#39; Marshal the SecureString to unmanaged memory.\n        passwordPtr = Marshal.SecureStringToGlobalAllocUnicode(password)\n\n        &#39; Pass LogonUser the unmanaged (and decrypted) copy of the password.\n        returnValue = LogonUser(userName, domainName, passwordPtr,\n                                LOGON32_LOGON_INTERACTIVE, LOGON32_PROVIDER_DEFAULT,\n                                tokenHandle)\n        If Not returnValue AndAlso tokenHandle = IntPtr.Zero Then\n            err = Marshal.GetLastWin32Error()\n        End If\n        \n        &#39; Perform cleanup whether or not the call succeeded.\n        &#39; Zero-out and free the unmanaged string reference.\n        Marshal.ZeroFreeGlobalAllocUnicode(passwordPtr)\n        &#39; Close the token handle.\n        CloseHandle(tokenHandle)\n\n        &#39; Throw an exception if an error occurred.\n        If err &lt;&gt; 0 Then\n            Throw New System.ComponentModel.Win32Exception(err)\n        End If\n        &#39; The token that is passed to the following constructor must \n        &#39; be a primary token in order to use it for impersonation.\n        Dim newId As New WindowsIdentity(tokenHandle)\n\n        Return newId.Impersonate()\n    End Function\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"Runtime.InteropServices.Marshal.SecureStringToHGlobalUni#1\">using System;\nusing System.ComponentModel;\nusing System.Runtime.InteropServices;\nusing System.Security;\nusing System.Security.Principal;\n\nclass Example\n{\n     // Define the Windows LogonUser and CloseHandle functions.\n     [DllImport(&quot;advapi32.dll&quot;, SetLastError = true, CharSet = CharSet.Unicode)]\n     internal static extern bool LogonUser(String username, String domain, IntPtr password,\n             int logonType, int logonProvider, ref IntPtr token);\n\n     [DllImport(&quot;kernel32.dll&quot;, CharSet = CharSet.Auto)]\n     public extern static bool CloseHandle(IntPtr handle);\n\n     // Define the required LogonUser enumerations.\n     const int LOGON32_PROVIDER_DEFAULT = 0;\n     const int LOGON32_LOGON_INTERACTIVE = 2;\n\n     static void Main()\n     {\n          // Display the current user before impersonation.\n          Console.WriteLine(&quot;Before impersonation: {0}&quot;,\n                            WindowsIdentity.GetCurrent().Name);\n\n          // Ask the user for a network domain.\n          Console.Write(&quot;Please enter your domain: &quot;);\n          string domain = Console.ReadLine();\n\n          // Ask the user for a user name.\n          Console.Write(&quot;Please enter your user name: &quot;);\n          string username = Console.ReadLine();\n\n          // Ask the user for a password.\n          Console.Write(&quot;Please enter your password: &quot;);\n          SecureString passWord = GetPassword();\n\n          // Impersonate the account provided by the user.\n          try {\n             WindowsImpersonationContext userContext =\n                           ImpersonateUser(passWord, username, domain);\n             // Display the current user after impersonation.\n             Console.WriteLine(&quot;After impersonation: {0}&quot;,\n                               WindowsIdentity.GetCurrent().Name);\n          }\n          catch (ArgumentException e) {\n             Console.WriteLine(&quot;{0}: {1}&quot;, e.GetType().Name, e.Message);\n          }\n          catch (Win32Exception e) {\n             Console.WriteLine(&quot;{0}: {1}&quot;, e.GetType().Name, e.Message);\n          }\n          finally {\n             passWord.Dispose();\n          }\n     }\n\n     public static SecureString GetPassword()\n     {\n         SecureString password = new SecureString();\n\n         // get the first character of the password\n         ConsoleKeyInfo nextKey = Console.ReadKey(true);\n\n         while (nextKey.Key != ConsoleKey.Enter) {\n             if (nextKey.Key == ConsoleKey.Backspace) {\n                 if (password.Length &gt; 0) {\n                     password.RemoveAt(password.Length - 1);\n\n                     // erase the last * as well\n                     Console.Write(nextKey.KeyChar);\n                     Console.Write(&quot; &quot;);\n                     Console.Write(nextKey.KeyChar);\n                 }\n             }\n             else {\n                 password.AppendChar(nextKey.KeyChar);\n                 Console.Write(&quot;*&quot;);\n             }\n\n             nextKey = Console.ReadKey(true);\n         }\n\n         Console.WriteLine();\n\n         // lock the password down\n         password.MakeReadOnly();\n         return password;\n     }\n\n     public static WindowsImpersonationContext ImpersonateUser(SecureString password, string userName, string domainName)\n     {\n         IntPtr tokenHandle = IntPtr.Zero;\n         IntPtr passwordPtr = IntPtr.Zero;\n         bool returnValue = false;\n         int error = 0;\n         \n         // Marshal the SecureString to unmanaged memory.\n         passwordPtr = Marshal.SecureStringToGlobalAllocUnicode(password);\n\n         // Pass LogonUser the unmanaged (and decrypted) copy of the password.\n         returnValue = LogonUser(userName, domainName, passwordPtr,\n                                 LOGON32_LOGON_INTERACTIVE, LOGON32_PROVIDER_DEFAULT,\n                                 ref tokenHandle);\n         if (!returnValue &amp;&amp; tokenHandle == IntPtr.Zero)\n            error = Marshal.GetLastWin32Error();\n\n         // Perform cleanup whether or not the call succeeded.\n         // Zero-out and free the unmanaged string reference.\n         Marshal.ZeroFreeGlobalAllocUnicode(passwordPtr);\n         // Close the token handle.\n         CloseHandle(tokenHandle);\n\n         // Throw an exception if an error occurred.\n         if (error != 0) {\n             throw new System.ComponentModel.Win32Exception(error);\n         }\n         // The token that is passed to the following constructor must \n         // be a primary token in order to use it for impersonation.\n         WindowsIdentity newId = new WindowsIdentity(tokenHandle);\n\n         return newId.Impersonate();\n     }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_SetComObjectData_System_Object_System_Object_System_Object_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_SetComObjectData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetComObjectData(Object,Object,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Sets data referenced by the specified key in the specified COM object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool SetComObjectData (object obj, object key, object data);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The COM object in which to store the data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key in the internal hash table of the COM object in which to store the data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>data</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The data to set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the data was set successfully; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>obj</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>key</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>obj</code> is not a COM object.  </p>\n<p> -or-  </p>\n<p> <code>obj</code> is a Windows Runtime object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>All COM objects wrapped in a <a href=\"../Topic/Runtime%20Callable%20Wrapper.md\" data-linktype=\"relative-path\">Runtime Callable Wrapper</a> (RCW) have an associated hash table, to which SetComObjectData adds data. <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_GetComObjectData_\" data-linktype=\"relative-path\">GetComObjectData</a> retrieves data from the hash table. You should never have to call either method from your code.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_SizeOf_System_Object_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_SizeOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SizeOf(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the unmanaged size of an object in bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int SizeOf (object structure);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>structure</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object whose size is to be returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The size of the specified object in unmanaged code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>structure</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method accepts an instance of a structure, which can be a reference type or a boxed value type. The layout must be sequential or explicit.  </p>\n<p> The size returned is the size of the unmanaged object. The unmanaged and managed sizes of an object can differ. For character types, the size is affected by the <a class=\"xref\" href=\"system.runtime.interopservices.charset\" data-linktype=\"relative-path\">CharSet</a> value applied to that class.  </p>\n<p> You can use the SizeOf method to determine how much unmanaged memory to allocate using the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_AllocHGlobal_\" data-linktype=\"relative-path\">AllocHGlobal</a> and <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_AllocCoTaskMem_\" data-linktype=\"relative-path\">AllocCoTaskMem</a> methods.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a managed structure, transfers it to unmanaged memory, and then transfers it back to managed memory. This example uses the SizeOf method to determine how much unmanaged memory to allocate.  </p>\n<pre><code class=\"lang-cs\" name=\"Runtime.InteropServices.Marshal.PtrToStructure-SizeOf#1\">using System;\nusing System.Runtime.InteropServices;\n\npublic struct Point\n{\n    public int x;\n    public int y;\n}\n\nclass Example\n{\n\n    static void Main()\n    {\n\n        // Create a point struct.\n        Point p;\n        p.x = 1;\n        p.y = 1;\n\n        Console.WriteLine(&quot;The value of first point is &quot; + p.x + &quot; and &quot; + p.y + &quot;.&quot;);\n\n        // Initialize unmanged memory to hold the struct.\n        IntPtr pnt = Marshal.AllocHGlobal(Marshal.SizeOf(p));\n\n        try\n        {\n\n            // Copy the struct to unmanaged memory.\n            Marshal.StructureToPtr(p, pnt, false);\n\n            // Create another point.\n            Point anotherP;\n\n            // Set this Point to the value of the \n            // Point in unmanaged memory. \n            anotherP = (Point)Marshal.PtrToStructure(pnt, typeof(Point));\n\n            Console.WriteLine(&quot;The value of new point is &quot; + anotherP.x + &quot; and &quot; + anotherP.y + &quot;.&quot;);\n\n        }\n        finally\n        {\n            // Free the unmanaged memory.\n            Marshal.FreeHGlobal(pnt);\n        }\n        \n\n\n    }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Runtime.InteropServices.Marshal.PtrToStructure-SizeOf#1\">Imports System\nImports System.Runtime.InteropServices\n\n\n\nPublic Structure Point\n    Public x As Integer\n    Public y As Integer\nEnd Structure\n\n\nModule Example\n\n\n    Sub Main()\n\n        &#39; Create a point struct.\n        Dim p As Point\n        p.x = 1\n        p.y = 1\n\n        Console.WriteLine(&quot;The value of first point is &quot; + p.x.ToString + &quot; and &quot; + p.y.ToString + &quot;.&quot;)\n\n        &#39; Initialize unmanged memory to hold the struct.\n        Dim pnt As IntPtr = Marshal.AllocHGlobal(Marshal.SizeOf(p))\n\n        Try\n\n            &#39; Copy the struct to unmanaged memory.\n            Marshal.StructureToPtr(p, pnt, False)\n\n            &#39; Create another point.\n            Dim anotherP As Point\n\n            &#39; Set this Point to the value of the \n            &#39; Point in unmanaged memory. \n            anotherP = CType(Marshal.PtrToStructure(pnt, GetType(Point)), Point)\n\n            Console.WriteLine(&quot;The value of new point is &quot; + anotherP.x.ToString + &quot; and &quot; + anotherP.y.ToString + &quot;.&quot;)\n\n        Finally\n            &#39; Free the unmanaged memory.\n            Marshal.FreeHGlobal(pnt)\n        End Try\n\n    End Sub\nEnd Module\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_SizeOf_System_Type_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_SizeOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SizeOf(Type)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the size of an unmanaged type in bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int SizeOf (Type t);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>t</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type whose size is to be returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The size of the specified type in unmanaged code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>t</code> parameter is a generic type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>t</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can use this method when you do not have a structure. The layout must be sequential or explicit.  </p>\n<p> The size returned is the size of the unmanaged type. The unmanaged and managed sizes of an object can differ. For character types, the size is affected by the <a class=\"xref\" href=\"system.runtime.interopservices.charset\" data-linktype=\"relative-path\">CharSet</a> value applied to that class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates calling the SizeOf method. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.runtime.interopservices.marshal\" data-linktype=\"relative-path\">Marshal</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Marshal#3\">    // Demonstrate the use of the SizeOf method of the Marshal\n    // class.\n    Console::WriteLine(&quot;Number of bytes needed by a Point object: {0}&quot;,\n        Marshal::SizeOf(Point::typeid));\n    Point point;\n    Console::WriteLine(&quot;Number of bytes needed by a Point object: {0}&quot;,\n        Marshal::SizeOf(point));\n</code></pre><pre><code class=\"lang-cs\" name=\"Marshal#3\">        // Demonstrate the use of the SizeOf method of the Marshal class.\n        Console.WriteLine(&quot;Number of bytes needed by a Point object: {0}&quot;, \n            Marshal.SizeOf(typeof(Point)));\n        Point p = new Point();\n        Console.WriteLine(&quot;Number of bytes needed by a Point object: {0}&quot;,\n            Marshal.SizeOf(p));\n</code></pre><pre><code class=\"lang-vb\" name=\"Marshal#3\">        &#39; Demonstrate the use of the SizeOf method of the Marshal class.\n        Console.WriteLine(&quot;Number of bytes needed by a Point object: {0}&quot;, Marshal.SizeOf(GetType(Point)))\n        Dim p As New Point()\n        Console.WriteLine(&quot;Number of bytes needed by a Point object: {0}&quot;, Marshal.SizeOf(p))\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_SizeOf__1\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_SizeOf_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SizeOf&lt;T&gt;()</div>        \r\n          </div>\r\n    \r\n            <p>[Supported in the .NET Framework 4.5.1 and later versions]  </p>\n<p> Returns the size of an unmanaged type in bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int SizeOf&lt;T&gt; ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The size, in bytes, of the type that is specified by the <code>T</code> generic type parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can use this method when you do not have a structure. The layout must be sequential or explicit.  </p>\n<p> The size returned is the size of the unmanaged type. The unmanaged and managed sizes of an object can differ. For character types, the size is affected by the <a class=\"xref\" href=\"system.runtime.interopservices.charset\" data-linktype=\"relative-path\">CharSet</a> value applied to that class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_SizeOf__1___0_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_SizeOf_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SizeOf&lt;T&gt;(T)</div>        \r\n          </div>\r\n    \r\n            <p>[Supported in the .NET Framework 4.5.1 and later versions]  </p>\n<p> Returns the unmanaged size of an object of a specified type in bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int SizeOf&lt;T&gt; (T structure);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>structure</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object whose size is to be returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The size, in bytes, of the specified object in unmanaged code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>structure</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method accepts an instance of a structure, which can be a reference type or a boxed value type. The layout must be sequential or explicit.  </p>\n<p> The size returned is the size of the unmanaged object. The unmanaged and managed sizes of an object can differ. For character types, the size is affected by the <a class=\"xref\" href=\"system.runtime.interopservices.charset\" data-linktype=\"relative-path\">CharSet</a> value applied to that class.  </p>\n<p> You can use the SizeOf(T) method to determine how much unmanaged memory to allocate by using the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_AllocHGlobal_\" data-linktype=\"relative-path\">AllocHGlobal</a> and <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_AllocCoTaskMem_\" data-linktype=\"relative-path\">AllocCoTaskMem</a> methods.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_StringToBSTR_System_String_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_StringToBSTR_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StringToBSTR(String)</div>        \r\n          </div>\r\n    \r\n            <p>Allocates a <a href=\"https://msdn.microsoft.com/library/ms221069.aspx\" data-linktype=\"external\">BSTR</a> and copies the contents of a managed <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> into it.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static IntPtr StringToBSTR (string s);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The managed string to be copied.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>An unmanaged pointer to the <code>BSTR</code>, or 0 if <code>s</code> is null.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a></div>\r\n                  </div>\r\n                  <p>There is insufficient memory available.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The length for <code>s</code> is out of range.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>StringToBSTR is useful for custom marshaling or when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the <code>BSTR</code> when finished by calling <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_FreeBSTR_\" data-linktype=\"relative-path\">FreeBSTR</a>. This method provides the opposite functionality of <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_PtrToStringBSTR_\" data-linktype=\"relative-path\">PtrToStringBSTR</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_StringToCoTaskMemAnsi_System_String_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_StringToCoTaskMemAnsi_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StringToCoTaskMemAnsi(String)</div>        \r\n          </div>\r\n    \r\n            <p>Copies the contents of a managed <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> to a block of memory allocated from the unmanaged COM task allocator.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static IntPtr StringToCoTaskMemAnsi (string s);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A managed string to be copied.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>An integer representing a pointer to the block of memory allocated for the string, or 0 if <code>s</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a></div>\r\n                  </div>\r\n                  <p>There is insufficient memory available.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>s</code> parameter exceeds the maximum length allowed by the operating system.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>StringToCoTaskMemAnsi is useful for custom marshaling or when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_FreeCoTaskMem_\" data-linktype=\"relative-path\">FreeCoTaskMem</a>. This method provides the opposite functionality of <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_PtrToStringAnsi_\" data-linktype=\"relative-path\">PtrToStringAnsi</a>. The characters of the string are copied as ANSI characters.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_StringToCoTaskMemAuto_System_String_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_StringToCoTaskMemAuto_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StringToCoTaskMemAuto(String)</div>        \r\n          </div>\r\n    \r\n            <p>Copies the contents of a managed <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> to a block of memory allocated from the unmanaged COM task allocator.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static IntPtr StringToCoTaskMemAuto (string s);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A managed string to be copied.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>The allocated memory block, or 0 if <code>s</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a></div>\r\n                  </div>\r\n                  <p>There is insufficient memory available.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The length for <code>s</code> is out of range.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>StringToCoTaskMemAuto is useful for custom marshaling or for use when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_FreeCoTaskMem_\" data-linktype=\"relative-path\">FreeCoTaskMem</a>. This method provides the opposite functionality of <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_PtrToStringAuto_\" data-linktype=\"relative-path\">PtrToStringAuto</a>.  </p>\n<p> The characters of the string are copied as either ANSI or Unicode characters, depending on the operating system where the code is executing. On Windows 98, the characters are copied as ANSI characters. On Windows NT 4.0, Windows 2000, Windows XP, and the Windows Server 2003 family, the characters are copied as Unicode characters.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_StringToCoTaskMemUni_System_String_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_StringToCoTaskMemUni_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StringToCoTaskMemUni(String)</div>        \r\n          </div>\r\n    \r\n            <p>Copies the contents of a managed <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> to a block of memory allocated from the unmanaged COM task allocator.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static IntPtr StringToCoTaskMemUni (string s);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A managed string to be copied.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>An integer representing a pointer to the block of memory allocated for the string, or 0 if s is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>s</code> parameter exceeds the maximum length allowed by the operating system.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a></div>\r\n                  </div>\r\n                  <p>There is insufficient memory available.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>StringToCoTaskMemUni is useful for custom marshaling or for use when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_FreeCoTaskMem_\" data-linktype=\"relative-path\">FreeCoTaskMem</a>. This method provides the opposite functionality of <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_PtrToStringUni_\" data-linktype=\"relative-path\">PtrToStringUni</a>. The characters of the string are copied as Unicode characters.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_StringToHGlobalAnsi_System_String_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_StringToHGlobalAnsi_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StringToHGlobalAnsi(String)</div>        \r\n          </div>\r\n    \r\n            <p>Copies the contents of a managed <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> into unmanaged memory, converting into ANSI format as it copies.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static IntPtr StringToHGlobalAnsi (string s);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A managed string to be copied.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>The address, in unmanaged memory, to where <code>s</code> was copied, or 0 if <code>s</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a></div>\r\n                  </div>\r\n                  <p>There is insufficient memory available.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>s</code> parameter exceeds the maximum length allowed by the operating system.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>StringToHGlobalAnsi is useful for custom marshaling or when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_FreeHGlobal_\" data-linktype=\"relative-path\">FreeHGlobal</a>. StringToHGlobalAnsi provides the opposite functionality of <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_PtrToStringAnsi_\" data-linktype=\"relative-path\">PtrToStringAnsi</a>.  </p>\n<p> This method copies embedded null characters, and includes a terminating null character.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to convert the contents of a managed <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> class to unmanaged memory and then dispose of the unmanaged memory when done.  </p>\n<pre><code class=\"lang-cpp\" name=\"Runtime.InteropServices.Marshal.StringToHGlobalAnsi#1\">using namespace System;\nusing namespace System::Runtime::InteropServices;\n\n#include &lt;iostream&gt;                                                 // for printf\n\n\nint main()\n{\n    // Create a managed string.\n    String^ managedString = &quot;Hello unmanaged world (from the managed world).&quot;;\n\n    // Marshal the managed string to unmanaged memory.\n    char* stringPointer = (char*) Marshal::StringToHGlobalAnsi(managedString ).ToPointer();\n\n    printf(&quot;stringPointer = %s<br>&quot;, stringPointer);\n\n    // Always free the unmanaged string.\n    Marshal::FreeHGlobal(IntPtr(stringPointer));\n\n    return 0;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Runtime.InteropServices.Marshal.StringToHGlobalAnsi#1\">using System;\nusing System.Runtime.InteropServices;\n\nclass MainFunction\n{\n    static void Main()\n    {\n    Console.WriteLine(&quot;<br>StringToGlobalAnsi<br>&quot;);\n\n    // Create a managed string.\n    String  managedString = &quot;I am a managed String&quot;;\n    Console.WriteLine(&quot;1) managedString = &quot; + managedString );\n\n    // Marshal the managed string to unmanaged memory.\n    IntPtr stringPointer = (IntPtr)Marshal.StringToHGlobalAnsi(managedString);\n    Console.WriteLine(&quot;2) stringPointer = {0}&quot;, stringPointer );\n\n    // Get the string back from unmanaged memory\n    String RetrievedString = Marshal.PtrToStringAnsi( stringPointer);\n    Console.WriteLine(&quot;3) Retrieved from unmanaged memory = &quot; + RetrievedString );\n\n    // Always free the unmanaged string.\n    Marshal.FreeHGlobal(stringPointer);\n\n    // IntPtr handle value is still the same:\n    Console.WriteLine(&quot;4) stringPointer = &quot; + stringPointer );\n\n    // However, it contains no data after being freed:\n    String RetrievedString2 = Marshal.PtrToStringAnsi( stringPointer);\n    Console.WriteLine(&quot;5) RetrievedString2 = &quot; + RetrievedString2 );\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_StringToHGlobalAuto_System_String_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_StringToHGlobalAuto_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StringToHGlobalAuto(String)</div>        \r\n          </div>\r\n    \r\n            <p>Copies the contents of a managed <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> into unmanaged memory, converting into ANSI format if required.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static IntPtr StringToHGlobalAuto (string s);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A managed string to be copied.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>The address, in unmanaged memory, to where the string was copied, or 0 if <code>s</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a></div>\r\n                  </div>\r\n                  <p>There is insufficient memory available.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>StringToHGlobalAuto is useful for custom marshaling or for use when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_FreeHGlobal_\" data-linktype=\"relative-path\">FreeHGlobal</a>. This method provides the opposite functionality of <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_PtrToStringAuto_\" data-linktype=\"relative-path\">PtrToStringAuto</a>.  </p>\n<p> This method copies embedded null characters, and includes a terminating null character.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to convert the contents of a managed <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> class to unmanaged memory and then dispose of the unmanaged memory when done.  </p>\n<pre><code class=\"lang-cpp\" name=\"Runtime.InteropServices.Marshal.StringToHGlobalAuto#1\">using namespace System;\nusing namespace System::Runtime::InteropServices;\n\nint main()\n{\n    // Create a managed string.\n    String^ managedString = &quot;Hello unmanaged world (from the managed world).&quot;;\n\n    // Marshal the managed string to unmanaged memory.\n    char*  stringPointer = (char*) Marshal::StringToHGlobalAuto(managedString).ToPointer();\n\n    // Pass the string to an unmanaged API.\n\n    // Always free the unmanaged string.\n    Marshal::FreeHGlobal(IntPtr(stringPointer));\n\n    return 0;\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_StringToHGlobalUni_System_String_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_StringToHGlobalUni_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StringToHGlobalUni(String)</div>        \r\n          </div>\r\n    \r\n            <p>Copies the contents of a managed <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> into unmanaged memory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static IntPtr StringToHGlobalUni (string s);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A managed string to be copied.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>The address, in unmanaged memory, to where the <code>s</code> was copied, or 0 if <code>s</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a></div>\r\n                  </div>\r\n                  <p>The method could not allocate enough native heap memory.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>s</code> parameter exceeds the maximum length allowed by the operating system.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>StringToHGlobalUni is useful for custom marshaling or for use when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_FreeHGlobal_\" data-linktype=\"relative-path\">FreeHGlobal</a>. This method provides the opposite functionality of <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_PtrToStringUni_\" data-linktype=\"relative-path\">PtrToStringUni</a>.  </p>\n<p> This method copies embedded null characters, and includes a terminating null character.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_StructureToPtr_System_Object_System_IntPtr_System_Boolean_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_StructureToPtr_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StructureToPtr(Object,IntPtr,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Marshals data from a managed object to an unmanaged block of memory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void StructureToPtr (object structure, IntPtr ptr, bool fDeleteOld);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>structure</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A managed object that holds the data to be marshaled. This object must be a structure or an instance of a formatted class.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ptr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to an unmanaged block of memory, which must be allocated before this method is called.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>fDeleteOld</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to call the <span class=\"xref\">stem.Runtime.InteropServices.Marshal.DestroyStructure*</span> method on the <code>ptr</code> parameter before this method copies the data. The block must contain valid data. Note that passing <code>false</code> when the memory block already contains data can lead to a memory leak.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>structure</code> is a reference type that is not a formatted class.  </p>\n<p> -or-  </p>\n<p> <code>structure</code> is a generic type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>structure</code> is a value type, it can be boxed or unboxed. If it is boxed, it is unboxed before copying.  </p>\n<p> A formatted class is a reference type whose layout is specified by the <a class=\"xref\" href=\"system.runtime.interopservices.structlayoutattribute\" data-linktype=\"relative-path\">StructLayoutAttribute</a> attribute, as either <a class=\"xref\" href=\"system.runtime.interopservices.layoutkind\" data-linktype=\"relative-path\">System.Runtime.InteropServices.LayoutKind</a> or <a class=\"xref\" href=\"system.runtime.interopservices.layoutkind\" data-linktype=\"relative-path\">System.Runtime.InteropServices.LayoutKind</a>.  </p>\n<p> StructureToPtr copies the contents of <code>structure</code> to the pre-allocated block of memory that the <code>ptr</code> parameter points to. If <code>structure</code> contains reference types that marshal to COM interface pointers (interfaces, classes without layout, and <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>), the managed objects are kept alive with reference counts. All other reference types (for example, strings and arrays) are marshaled to copies. To release these managed or unmanaged objects, you must call the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_DestroyStructure_\" data-linktype=\"relative-path\">DestroyStructure</a>method before you free the memory block.  </p>\n<p> If you use the StructureToPtr method to copy a different instance to the memory block at a later time, specify <code>true</code> for <code>fDeleteOld</code> to remove reference counts for reference types in the previous instance. Otherwise, the managed reference typesand unmanaged copies are effectively leaked.  </p>\n<p> The overall pattern for using StructureToPtr is as follows:  </p>\n<ol>\n<li><p>On the first call to the StructureToPtrmethod after a memory block has been allocated, <code>fDeleteOld</code>must be<code>false</code>, because there are no contents to clear.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Specify <code>true</code> for <code>fDeleteOld</code> only if the block contains valid data.  </p>\n</div>\n</li>\n<li><p>If you copy a different instance to the memory block, and the object contains reference types, <code>fDeleteOld</code> must be <code>true</code> to free reference types in the old contents.  </p>\n</li>\n<li><p>If the object contains reference types, you must call the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_DestroyStructure_\" data-linktype=\"relative-path\">DestroyStructure</a> method before you free the memory block.  </p>\n</li>\n</ol>\n<div class=\"NOTE\"><h5>Note</h5><p> To pin an existing structure instead of copying it, use the <a class=\"xref\" href=\"system.runtime.interopservices.gchandle\" data-linktype=\"relative-path\">System.Runtime.InteropServices.GCHandle</a> type to create a pinned handle for the structure. For details on how to pin, see <a href=\"../Topic/Copying%20and%20Pinning.md\" data-linktype=\"relative-path\">Copying and Pinning</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a managed structure, transfers it to unmanaged memory using the StructureToPtr method, and then transfers it back to managed memory using the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_PtrToStructure_\" data-linktype=\"relative-path\">PtrToStructure</a> method.  </p>\n<pre><code class=\"lang-cs\" name=\"Runtime.InteropServices.Marshal.PtrToStructure-SizeOf#1\">using System;\nusing System.Runtime.InteropServices;\n\npublic struct Point\n{\n    public int x;\n    public int y;\n}\n\nclass Example\n{\n\n    static void Main()\n    {\n\n        // Create a point struct.\n        Point p;\n        p.x = 1;\n        p.y = 1;\n\n        Console.WriteLine(&quot;The value of first point is &quot; + p.x + &quot; and &quot; + p.y + &quot;.&quot;);\n\n        // Initialize unmanged memory to hold the struct.\n        IntPtr pnt = Marshal.AllocHGlobal(Marshal.SizeOf(p));\n\n        try\n        {\n\n            // Copy the struct to unmanaged memory.\n            Marshal.StructureToPtr(p, pnt, false);\n\n            // Create another point.\n            Point anotherP;\n\n            // Set this Point to the value of the \n            // Point in unmanaged memory. \n            anotherP = (Point)Marshal.PtrToStructure(pnt, typeof(Point));\n\n            Console.WriteLine(&quot;The value of new point is &quot; + anotherP.x + &quot; and &quot; + anotherP.y + &quot;.&quot;);\n\n        }\n        finally\n        {\n            // Free the unmanaged memory.\n            Marshal.FreeHGlobal(pnt);\n        }\n        \n\n\n    }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Runtime.InteropServices.Marshal.PtrToStructure-SizeOf#1\">Imports System\nImports System.Runtime.InteropServices\n\n\n\nPublic Structure Point\n    Public x As Integer\n    Public y As Integer\nEnd Structure\n\n\nModule Example\n\n\n    Sub Main()\n\n        &#39; Create a point struct.\n        Dim p As Point\n        p.x = 1\n        p.y = 1\n\n        Console.WriteLine(&quot;The value of first point is &quot; + p.x.ToString + &quot; and &quot; + p.y.ToString + &quot;.&quot;)\n\n        &#39; Initialize unmanged memory to hold the struct.\n        Dim pnt As IntPtr = Marshal.AllocHGlobal(Marshal.SizeOf(p))\n\n        Try\n\n            &#39; Copy the struct to unmanaged memory.\n            Marshal.StructureToPtr(p, pnt, False)\n\n            &#39; Create another point.\n            Dim anotherP As Point\n\n            &#39; Set this Point to the value of the \n            &#39; Point in unmanaged memory. \n            anotherP = CType(Marshal.PtrToStructure(pnt, GetType(Point)), Point)\n\n            Console.WriteLine(&quot;The value of new point is &quot; + anotherP.x.ToString + &quot; and &quot; + anotherP.y.ToString + &quot;.&quot;)\n\n        Finally\n            &#39; Free the unmanaged memory.\n            Marshal.FreeHGlobal(pnt)\n        End Try\n\n    End Sub\nEnd Module\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_StructureToPtr__1___0_System_IntPtr_System_Boolean_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_StructureToPtr_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StructureToPtr&lt;T&gt;(T,IntPtr,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>[Supported in the .NET Framework 4.5.1 and later versions]  </p>\n<p> Marshals data from a managed object of a specified type to an unmanaged block of memory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void StructureToPtr&lt;T&gt; (T structure, IntPtr ptr, bool fDeleteOld);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>structure</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A managed object that holds the data to be marshaled. The object must be a structure or an instance of a formatted class.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ptr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to an unmanaged block of memory, which must be allocated before this method is called.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>fDeleteOld</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to call the <span class=\"xref\">stem.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)</span> method on the <code>ptr</code> parameter before this method copies the data. The block must contain valid data. Note that passing <code>false</code> when the memory block already contains data can lead to a memory leak.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>structure</code> is a reference type that is not a formatted class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A formatted class is a reference type whose layout is specified by the <a class=\"xref\" href=\"system.runtime.interopservices.structlayoutattribute\" data-linktype=\"relative-path\">StructLayoutAttribute</a> attribute, as either <a class=\"xref\" href=\"system.runtime.interopservices.layoutkind\" data-linktype=\"relative-path\">System.Runtime.InteropServices.LayoutKind</a> or <a class=\"xref\" href=\"system.runtime.interopservices.layoutkind\" data-linktype=\"relative-path\">System.Runtime.InteropServices.LayoutKind</a>.  </p>\n<p> StructureToPtr(T) copies the contents of <code>structure</code> to the pre-allocated block of memory that the <code>ptr</code> parameter points to. If <code>structure</code> contains reference types that marshal to COM interface pointers (interfaces, classes without layout, and <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>), the managed objects are kept alive with reference counts. All other reference types (for example, strings and arrays) are marshaled to copies. To release these managed or unmanaged objects, you must call the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_DestroyStructure__1_System_IntPtr_\" data-linktype=\"relative-path\">DestroyStructure&lt;T&gt;(IntPtr)</a> method before you free the memory block.  </p>\n<p> If you use theStructureToPtr(T) method to copy a different instance to the memory block at a later time, specify <code>true</code> for <code>fDeleteOld</code> to remove reference counts for reference types in the previous instance. Otherwise, the managed reference types and unmanaged copies are effectively leaked.  </p>\n<p> The overall pattern for usingStructureToPtr(T) is as follows:  </p>\n<ol>\n<li><p>On the first call to theStructureToPtr(T) method after a memory block has been allocated, <code>fDeleteOld</code> must be <code>false</code>, because there are no contents to clear.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Specify <code>true</code> for <code>fDeleteOld</code> only if the block contains valid data.  </p>\n</div>\n</li>\n<li><p>If you copy a different instance to the memory block, and the object contains reference types, <code>fDeleteOld</code> must be <code>true</code> to free reference types in the old contents.  </p>\n</li>\n<li><p>If the object contains reference types, you must call the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_DestroyStructure_\" data-linktype=\"relative-path\">DestroyStructure</a> method before you free the memory block.  </p>\n</li>\n</ol>\n<div class=\"NOTE\"><h5>Note</h5><p> To pin an existing structure instead of copying it, use the <a class=\"xref\" href=\"system.runtime.interopservices.gchandle\" data-linktype=\"relative-path\">System.Runtime.InteropServices.GCHandle</a> type to create a pinned handle for the structure. For details on how to pin, see <a href=\"../Topic/Copying%20and%20Pinning.md\" data-linktype=\"relative-path\">Copying and Pinning</a>.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_ThrowExceptionForHR_System_Int32_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_ThrowExceptionForHR_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ThrowExceptionForHR(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Throws an exception with a specific failure HRESULT value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void ThrowExceptionForHR (int errorCode);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>errorCode</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The HRESULT corresponding to the desired exception.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method creates an exception object for the specified failure HRESULT. If the HRESULT is 0 or positive (a success code), the method returns without creating or throwing an exception.  </p>\n<p> Note that the ThrowExceptionForHR method returns an exception based on the <a href=\"https://msdn.microsoft.com/library/ms221233(v=vs.85).aspx\" data-linktype=\"external\">IErrorInfo</a> interface of the current thread if one is set. When this happens, the <code>errorCode</code> parameter is ignored.  </p>\n<p> Some failure HRESULTs map to defined exceptions, whereas others do not. If the HRESULT maps to a defined exception, ThrowExceptionForHR creates an instance of the exception and throws it. Otherwise, it creates an instance of <a class=\"xref\" href=\"system.runtime.interopservices.comexception\" data-linktype=\"relative-path\">COMException</a>, initializes the error code field with the HRESULT, and throws that exception. When ThrowExceptionForHR is invoked, it attempts to retrieve extra information regarding the error by using the unmanaged <a href=\"https://msdn.microsoft.com/library/ms221032(v=vs.85).aspx\" data-linktype=\"external\">GetErrorInfo</a> function.  </p>\n<p> For the mapping from each HRESULT to its comparable exception class in the .NET Framework, see <a href=\"../Topic/How%20to:%20Map%20HRESULTs%20and%20Exceptions.md\" data-linktype=\"relative-path\">How to: Map HRESULTs and Exceptions</a>.  </p>\n<p> Occasionally, ThrowExceptionForHR might return an exception from a previous COM call. In this case, you can use the following workaround and pass <code>IntPtr(-1)</code> as the second parameter (<code>errorInfo</code>):  </p>\n<pre><code>[SecurityPermissionAttribute(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]  \npublic static void ThrowExceptionForHR(interrorCode,IntPtrerrorInfo)  \n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_ThrowExceptionForHR_System_Int32_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_ThrowExceptionForHR_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ThrowExceptionForHR(Int32,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Throws an exception with a specific failure HRESULT, based on the specified <a href=\"https://msdn.microsoft.com/library/ms221233(v=vs.85).aspx\" data-linktype=\"external\">IErrorInfo</a> interface.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void ThrowExceptionForHR (int errorCode, IntPtr errorInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>errorCode</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The HRESULT corresponding to the desired exception.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>errorInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to the <a href=\"https://msdn.microsoft.com/library/ms221233(v=vs.85).aspx\" data-linktype=\"external\">IErrorInfo</a> interface that provides more information about the error. You can specify <code>IntPtr(0)</code> to use the current <a href=\"https://msdn.microsoft.com/library/ms221233(v=vs.85).aspx\" data-linktype=\"external\">IErrorInfo</a> interface, or <code>IntPtr(-1)</code> to ignore the current <a href=\"https://msdn.microsoft.com/library/ms221233(v=vs.85).aspx\" data-linktype=\"external\">IErrorInfo</a> interface and construct the exception just from the error code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method creates an exception object for the specified failure HRESULT. If the HRESULT is 0 or positive (a success code), the method returns without creating or throwing an exception.  </p>\n<p> The ThrowExceptionForHR method releases the <code>errorInfo</code> parameter, decreasing the COM reference count of the <a href=\"https://msdn.microsoft.com/library/ms221233(v=vs.85).aspx\" data-linktype=\"external\">IErrorInfo</a> interface.  </p>\n<p> Note that the ThrowExceptionForHR method returns an exception based on the <a href=\"https://msdn.microsoft.com/library/ms221233(v=vs.85).aspx\" data-linktype=\"external\">IErrorInfo</a> interface of the current thread if one is set. When this happens, the <code>errorCode</code> parameter is ignored.  </p>\n<p> Some failure HRESULTs map to defined exceptions, whereas others do not. If the HRESULT maps to a defined exception, <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_ThrowExceptionForHR_\" data-linktype=\"relative-path\">ThrowExceptionForHR</a> creates an instance of the exception and throws it. Otherwise, it creates an instance of <a class=\"xref\" href=\"system.runtime.interopservices.comexception\" data-linktype=\"relative-path\">System.Runtime.InteropServices.COMException</a>, initializes the error code field with the HRESULT, and throws that exception. The <code>errorInfo</code> parameter is used to retrieve extra information regarding the error.  </p>\n<p> For the mapping from each HRESULT to its comparable exception class in the .NET Framework, see <a href=\"../Topic/How%20to:%20Map%20HRESULTs%20and%20Exceptions.md\" data-linktype=\"relative-path\">How to: Map HRESULTs and Exceptions</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_UnsafeAddrOfPinnedArrayElement_System_Array_System_Int32_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_UnsafeAddrOfPinnedArrayElement_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UnsafeAddrOfPinnedArrayElement(Array,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the address of the element at the specified index inside the specified array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static IntPtr UnsafeAddrOfPinnedArrayElement (Array arr, int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>arr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The array that contains the desired element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index in the <code>arr</code> parameter of the desired element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>The address of <code>index</code> inside <code>arr</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The array must be pinned using a <a class=\"xref\" href=\"system.runtime.interopservices.gchandle\" data-linktype=\"relative-path\">GCHandle</a> before it is passed to this method. For maximum performance, this method does not validate the array passed to it; this can result in unexpected behavior.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_UnsafeAddrOfPinnedArrayElement__1___0___System_Int32_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_UnsafeAddrOfPinnedArrayElement_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UnsafeAddrOfPinnedArrayElement&lt;T&gt;(T[],Int32)</div>        \r\n          </div>\r\n    \r\n            <p>[Supported in the .NET Framework 4.5.1 and later versions]  </p>\n<p> Gets the address of the element at the specified index in an array of a specified type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static IntPtr UnsafeAddrOfPinnedArrayElement&lt;T&gt; (T[] arr, int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>arr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T[]</span>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The array that contains the desired element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the desired element in the <code>arr</code> array.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>The address of <code>index</code> in <code>arr</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The array must be pinned by using a <a class=\"xref\" href=\"system.runtime.interopservices.gchandle\" data-linktype=\"relative-path\">GCHandle</a> before it is passed to this method. For maximum performance, this method does not validate the array passed to it; this can result in unexpected behavior.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_WriteByte_System_IntPtr_System_Byte_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_WriteByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteByte(IntPtr,Byte)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a single byte value to unmanaged memory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteByte (IntPtr ptr, byte val);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ptr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The address in unmanaged memory to write to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>val</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.accessviolationexception\" data-linktype=\"relative-path\">AccessViolationException</a></div>\r\n                  </div>\r\n                  <p><code>ptr</code> is not a recognized format.  </p>\n<p> -or-  </p>\n<p> <code>ptr</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>ptr</code> is invalid.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_WriteByte_\" data-linktype=\"relative-path\">WriteByte</a> enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_Copy_\" data-linktype=\"relative-path\">Copy</a>) to a separate managed array before setting its element values.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a block of unmanaged memory, writes a byte to the unmanaged memory, reads the byte back from unmanaged memory, and then disposes the unmanaged memory.  </p>\n<pre><code class=\"lang-cs\" name=\"Runtime.InteropServices.Marshal.ReadByte - WriteByte#1\">using System;\nusing System.Runtime.InteropServices;\n\n class Example\n {\n     static void Main(string[] args)\n     {\n          // Allocate 1 byte of unmanaged memory.\n          IntPtr hGlobal = Marshal.AllocHGlobal(1);\n\n          // Create a new byte.\n          byte b = 1;\n          Console.WriteLine(&quot;Byte written to unmanaged memory: &quot; + b);\n\n          // Write the byte to unmanaged memory.\n          Marshal.WriteByte(hGlobal, b);\n\n          // Read byte from unmanaged memory.\n          byte c = Marshal.ReadByte(hGlobal);\n          Console.WriteLine(&quot;Byte read from unmanaged memory: &quot; + c);\n\n          // Free the unmanaged memory.\n          Marshal.FreeHGlobal(hGlobal);\n          Console.WriteLine(&quot;Unmanaged memory was disposed.&quot;);\n     }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Runtime.InteropServices.Marshal.ReadByte - WriteByte#1\">Imports System\nImports System.Runtime.InteropServices\n\nModule Example\n    Sub Main()\n         &#39; Allocate 1 byte of unmanaged memory.\n         Dim hGlobal As IntPtr = Marshal.AllocHGlobal(1)\n         \n         &#39; Create a new byte.\n         Dim b As Byte = 1\n         \n         Console.WriteLine(&quot;Byte written to unmanaged memory: {0}&quot;, b)\n         \n         &#39; Write the byte to unmanaged memory.\n         Marshal.WriteByte(hGlobal, b)\n         \n         &#39; Read byte from unmanaged memory.\n         Dim c As Byte = Marshal.ReadByte(hGlobal)\n         Console.WriteLine(&quot;Byte read from unmanaged memory: {0}&quot;, c)\n         \n         &#39; Free the unmanaged memory.\n         Marshal.FreeHGlobal(hGlobal)\n         Console.WriteLine(&quot;Unmanaged memory was disposed.&quot;)\n    End Sub\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_WriteByte_System_IntPtr_System_Int32_System_Byte_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_WriteByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteByte(IntPtr,Int32,Byte)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a single byte value to unmanaged memory at a specified offset.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteByte (IntPtr ptr, int ofs, byte val);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ptr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The base address in unmanaged memory to write to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ofs</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An additional byte offset, which is added to the <code>ptr</code> parameter before writing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>val</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.accessviolationexception\" data-linktype=\"relative-path\">AccessViolationException</a></div>\r\n                  </div>\r\n                  <p>Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>WriteByte enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_Copy_\" data-linktype=\"relative-path\">Copy</a>) to a separate managed array before setting its element values.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to read and write to an unmanaged array using the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_ReadByte_\" data-linktype=\"relative-path\">ReadByte</a> and WriteByte methods.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Runtime.interopServices.Marshal.Read-Write val#3\">    Sub ReadWriteByte()\n        &#39; Allocate unmanaged memory. \n        Dim elementSize As Integer = 1\n        Dim unmanagedArray As IntPtr = Marshal.AllocHGlobal(10 * elementSize)\n\n        &#39; Set the 10 elements of the C-style unmanagedArray\n        For i As Integer = 0 To 9\n            Marshal.WriteByte(unmanagedArray, i * elementSize, CType(i + 1, Byte))\n        Next i\n        Console.WriteLine(&quot;Unmanaged memory written.&quot;)\n\n        Console.WriteLine(&quot;Reading unmanaged memory:&quot;)\n        &#39; Print the 10 elements of the C-style unmanagedArray\n        For i As Integer = 0 To 9\n            Console.WriteLine(Marshal.ReadByte(unmanagedArray, i * elementSize))\n        Next i\n\n        Marshal.FreeHGlobal(unmanagedArray)\n\n        Console.WriteLine(&quot;Done. Press Enter to continue.&quot;)\n        Console.ReadLine()\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Runtime.interopServices.Marshal.Read-Write val#3\">    static void ReadWriteByte()\n    {\n        // Allocate unmanaged memory. \n        int elementSize = 1;\n        IntPtr unmanagedArray = Marshal.AllocHGlobal(10 * elementSize);\n\n        // Set the 10 elements of the C-style unmanagedArray\n        for (int i = 0; i &lt; 10; i++)\n        {\n            Marshal.WriteByte(unmanagedArray, i * elementSize, ((Byte)(i + 1)));\n        }\n        Console.WriteLine(&quot;Unmanaged memory written.&quot;);\n\n        Console.WriteLine(&quot;Reading unmanaged memory:&quot;);\n        // Print the 10 elements of the C-style unmanagedArray\n        for (int i = 0; i &lt; 10; i++)\n        {\n            Console.WriteLine(Marshal.ReadByte(unmanagedArray, i * elementSize));\n        }\n\n        Marshal.FreeHGlobal(unmanagedArray);\n\n        Console.WriteLine(&quot;Done. Press Enter to continue.&quot;);\n        Console.ReadLine();\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_WriteByte_System_Object_System_Int32_System_Byte_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_WriteByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteByte(Object,Int32,Byte)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a single byte value to unmanaged memory at a specified offset.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteByte (object ptr, int ofs, byte val);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ptr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The base address in unmanaged memory of the target object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ofs</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An additional byte offset, which is added to the <code>ptr</code> parameter before writing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>val</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.accessviolationexception\" data-linktype=\"relative-path\">AccessViolationException</a></div>\r\n                  </div>\r\n                  <p>Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>ptr</code> is an <a class=\"xref\" href=\"system.runtime.interopservices.arraywithoffset\" data-linktype=\"relative-path\">ArrayWithOffset</a> object. This method does not accept <a class=\"xref\" href=\"system.runtime.interopservices.arraywithoffset\" data-linktype=\"relative-path\">ArrayWithOffset</a> parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_WriteByte_\" data-linktype=\"relative-path\">WriteByte</a> enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_Copy_\" data-linktype=\"relative-path\">Copy</a>) to a separate managed array before setting its element values.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_WriteInt16_System_IntPtr_System_Char_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_WriteInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteInt16(IntPtr,Char)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a character as a 16-bit integer value to unmanaged memory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteInt16 (IntPtr ptr, char val);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ptr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The address in unmanaged memory to write to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>val</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.accessviolationexception\" data-linktype=\"relative-path\">AccessViolationException</a></div>\r\n                  </div>\r\n                  <p><code>ptr</code> is not a recognized format.  </p>\n<p> -or-  </p>\n<p> <code>ptr</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>ptr</code> is invalid.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_WriteInt16_\" data-linktype=\"relative-path\">WriteInt16</a> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_Copy_\" data-linktype=\"relative-path\">Copy</a>) to a separate managed array before setting its element values.  </p>\n<p> Writing to unaligned memory locations is supported.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to read and write to an unmanaged array using the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_ReadInt16_\" data-linktype=\"relative-path\">ReadInt16</a> and <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_WriteInt16_\" data-linktype=\"relative-path\">WriteInt16</a> methods.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Runtime.interopServices.Marshal.Read-Write val#4\">    Sub ReadWriteInt16()\n        &#39; Allocate unmanaged memory. \n        Dim elementSize As Integer = 2\n        Dim unmanagedArray As IntPtr = Marshal.AllocHGlobal(10 * elementSize)\n\n        &#39; Set the 10 elements of the C-style unmanagedArray\n        For i As Integer = 0 To 9\n            Marshal.WriteInt16(unmanagedArray, i * elementSize, CType(i + 1, Int16))\n        Next i\n        Console.WriteLine(&quot;Unmanaged memory written.&quot;)\n\n        Console.WriteLine(&quot;Reading unmanaged memory:&quot;)\n        &#39; Print the 10 elements of the C-style unmanagedArray\n        For i As Integer = 0 To 9\n            Console.WriteLine(Marshal.ReadInt16(unmanagedArray, i * elementSize))\n        Next i\n\n        Marshal.FreeHGlobal(unmanagedArray)\n\n        Console.WriteLine(&quot;Done. Press Enter to continue.&quot;)\n        Console.ReadLine()\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Runtime.interopServices.Marshal.Read-Write val#4\">    static void ReadWriteInt16()\n    {\n        // Allocate unmanaged memory. \n        int elementSize = 2;\n        IntPtr unmanagedArray = Marshal.AllocHGlobal(10 * elementSize);\n\n        // Set the 10 elements of the C-style unmanagedArray\n        for (int i = 0; i &lt; 10; i++)\n        {\n            Marshal.WriteInt16(unmanagedArray, i * elementSize, ((Int16)(i + 1)));\n        }\n        Console.WriteLine(&quot;Unmanaged memory written.&quot;);\n\n        Console.WriteLine(&quot;Reading unmanaged memory:&quot;);\n        // Print the 10 elements of the C-style unmanagedArray\n        for (int i = 0; i &lt; 10; i++)\n        {\n            Console.WriteLine(Marshal.ReadInt16(unmanagedArray, i * elementSize));\n        }\n\n        Marshal.FreeHGlobal(unmanagedArray);\n\n        Console.WriteLine(&quot;Done. Press Enter to continue.&quot;);\n        Console.ReadLine();\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_WriteInt16_System_IntPtr_System_Int16_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_WriteInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteInt16(IntPtr,Int16)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a 16-bit integer value to unmanaged memory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteInt16 (IntPtr ptr, short val);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ptr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The address in unmanaged memory to write to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>val</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.accessviolationexception\" data-linktype=\"relative-path\">AccessViolationException</a></div>\r\n                  </div>\r\n                  <p><code>ptr</code> is not a recognized format.  </p>\n<p> -or-  </p>\n<p> <code>ptr</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>ptr</code> is invalid.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_WriteInt16_\" data-linktype=\"relative-path\">WriteInt16</a> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_Copy_\" data-linktype=\"relative-path\">Copy</a>) to a separate managed array before setting its element values.  </p>\n<p> Writing to unaligned memory locations is supported.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to read and write to an unmanaged array using the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_ReadInt16_\" data-linktype=\"relative-path\">ReadInt16</a> and <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_WriteInt16_\" data-linktype=\"relative-path\">WriteInt16</a>methods.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Runtime.interopServices.Marshal.Read-Write val#4\">    Sub ReadWriteInt16()\n        &#39; Allocate unmanaged memory. \n        Dim elementSize As Integer = 2\n        Dim unmanagedArray As IntPtr = Marshal.AllocHGlobal(10 * elementSize)\n\n        &#39; Set the 10 elements of the C-style unmanagedArray\n        For i As Integer = 0 To 9\n            Marshal.WriteInt16(unmanagedArray, i * elementSize, CType(i + 1, Int16))\n        Next i\n        Console.WriteLine(&quot;Unmanaged memory written.&quot;)\n\n        Console.WriteLine(&quot;Reading unmanaged memory:&quot;)\n        &#39; Print the 10 elements of the C-style unmanagedArray\n        For i As Integer = 0 To 9\n            Console.WriteLine(Marshal.ReadInt16(unmanagedArray, i * elementSize))\n        Next i\n\n        Marshal.FreeHGlobal(unmanagedArray)\n\n        Console.WriteLine(&quot;Done. Press Enter to continue.&quot;)\n        Console.ReadLine()\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Runtime.interopServices.Marshal.Read-Write val#4\">    static void ReadWriteInt16()\n    {\n        // Allocate unmanaged memory. \n        int elementSize = 2;\n        IntPtr unmanagedArray = Marshal.AllocHGlobal(10 * elementSize);\n\n        // Set the 10 elements of the C-style unmanagedArray\n        for (int i = 0; i &lt; 10; i++)\n        {\n            Marshal.WriteInt16(unmanagedArray, i * elementSize, ((Int16)(i + 1)));\n        }\n        Console.WriteLine(&quot;Unmanaged memory written.&quot;);\n\n        Console.WriteLine(&quot;Reading unmanaged memory:&quot;);\n        // Print the 10 elements of the C-style unmanagedArray\n        for (int i = 0; i &lt; 10; i++)\n        {\n            Console.WriteLine(Marshal.ReadInt16(unmanagedArray, i * elementSize));\n        }\n\n        Marshal.FreeHGlobal(unmanagedArray);\n\n        Console.WriteLine(&quot;Done. Press Enter to continue.&quot;);\n        Console.ReadLine();\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_WriteInt16_System_IntPtr_System_Int32_System_Char_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_WriteInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteInt16(IntPtr,Int32,Char)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a 16-bit signed integer value to unmanaged memory at a specified offset.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteInt16 (IntPtr ptr, int ofs, char val);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ptr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The base address in the native heap to write to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ofs</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An additional byte offset, which is added to the <code>ptr</code> parameter before writing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>val</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.accessviolationexception\" data-linktype=\"relative-path\">AccessViolationException</a></div>\r\n                  </div>\r\n                  <p>Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_WriteInt16_\" data-linktype=\"relative-path\">WriteInt16</a> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_Copy_\" data-linktype=\"relative-path\">Copy</a>) to a separate managed array before setting its element values.  </p>\n<p> Writing to unaligned memory locations is supported.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to read and write to an unmanaged array using the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_ReadInt16_\" data-linktype=\"relative-path\">ReadInt16</a> and <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_WriteInt16_\" data-linktype=\"relative-path\">WriteInt16</a> methods.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Runtime.interopServices.Marshal.Read-Write val#4\">    Sub ReadWriteInt16()\n        &#39; Allocate unmanaged memory. \n        Dim elementSize As Integer = 2\n        Dim unmanagedArray As IntPtr = Marshal.AllocHGlobal(10 * elementSize)\n\n        &#39; Set the 10 elements of the C-style unmanagedArray\n        For i As Integer = 0 To 9\n            Marshal.WriteInt16(unmanagedArray, i * elementSize, CType(i + 1, Int16))\n        Next i\n        Console.WriteLine(&quot;Unmanaged memory written.&quot;)\n\n        Console.WriteLine(&quot;Reading unmanaged memory:&quot;)\n        &#39; Print the 10 elements of the C-style unmanagedArray\n        For i As Integer = 0 To 9\n            Console.WriteLine(Marshal.ReadInt16(unmanagedArray, i * elementSize))\n        Next i\n\n        Marshal.FreeHGlobal(unmanagedArray)\n\n        Console.WriteLine(&quot;Done. Press Enter to continue.&quot;)\n        Console.ReadLine()\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Runtime.interopServices.Marshal.Read-Write val#4\">    static void ReadWriteInt16()\n    {\n        // Allocate unmanaged memory. \n        int elementSize = 2;\n        IntPtr unmanagedArray = Marshal.AllocHGlobal(10 * elementSize);\n\n        // Set the 10 elements of the C-style unmanagedArray\n        for (int i = 0; i &lt; 10; i++)\n        {\n            Marshal.WriteInt16(unmanagedArray, i * elementSize, ((Int16)(i + 1)));\n        }\n        Console.WriteLine(&quot;Unmanaged memory written.&quot;);\n\n        Console.WriteLine(&quot;Reading unmanaged memory:&quot;);\n        // Print the 10 elements of the C-style unmanagedArray\n        for (int i = 0; i &lt; 10; i++)\n        {\n            Console.WriteLine(Marshal.ReadInt16(unmanagedArray, i * elementSize));\n        }\n\n        Marshal.FreeHGlobal(unmanagedArray);\n\n        Console.WriteLine(&quot;Done. Press Enter to continue.&quot;);\n        Console.ReadLine();\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_WriteInt16_System_IntPtr_System_Int32_System_Int16_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_WriteInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteInt16(IntPtr,Int32,Int16)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a 16-bit signed integer value into unmanaged memory at a specified offset.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteInt16 (IntPtr ptr, int ofs, short val);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ptr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The base address in unmanaged memory to write to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ofs</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An additional byte offset, which is added to the <code>ptr</code> parameter before writing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>val</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.accessviolationexception\" data-linktype=\"relative-path\">AccessViolationException</a></div>\r\n                  </div>\r\n                  <p>Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>WriteInt16 enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_Copy_\" data-linktype=\"relative-path\">Copy</a>) to a separate managed array before setting its element values.  </p>\n<p> Writing to unaligned memory locations is supported.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to read and write to an unmanaged array using the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_ReadInt16_\" data-linktype=\"relative-path\">ReadInt16</a> and WriteInt16 methods.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Runtime.interopServices.Marshal.Read-Write val#4\">    Sub ReadWriteInt16()\n        &#39; Allocate unmanaged memory. \n        Dim elementSize As Integer = 2\n        Dim unmanagedArray As IntPtr = Marshal.AllocHGlobal(10 * elementSize)\n\n        &#39; Set the 10 elements of the C-style unmanagedArray\n        For i As Integer = 0 To 9\n            Marshal.WriteInt16(unmanagedArray, i * elementSize, CType(i + 1, Int16))\n        Next i\n        Console.WriteLine(&quot;Unmanaged memory written.&quot;)\n\n        Console.WriteLine(&quot;Reading unmanaged memory:&quot;)\n        &#39; Print the 10 elements of the C-style unmanagedArray\n        For i As Integer = 0 To 9\n            Console.WriteLine(Marshal.ReadInt16(unmanagedArray, i * elementSize))\n        Next i\n\n        Marshal.FreeHGlobal(unmanagedArray)\n\n        Console.WriteLine(&quot;Done. Press Enter to continue.&quot;)\n        Console.ReadLine()\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Runtime.interopServices.Marshal.Read-Write val#4\">    static void ReadWriteInt16()\n    {\n        // Allocate unmanaged memory. \n        int elementSize = 2;\n        IntPtr unmanagedArray = Marshal.AllocHGlobal(10 * elementSize);\n\n        // Set the 10 elements of the C-style unmanagedArray\n        for (int i = 0; i &lt; 10; i++)\n        {\n            Marshal.WriteInt16(unmanagedArray, i * elementSize, ((Int16)(i + 1)));\n        }\n        Console.WriteLine(&quot;Unmanaged memory written.&quot;);\n\n        Console.WriteLine(&quot;Reading unmanaged memory:&quot;);\n        // Print the 10 elements of the C-style unmanagedArray\n        for (int i = 0; i &lt; 10; i++)\n        {\n            Console.WriteLine(Marshal.ReadInt16(unmanagedArray, i * elementSize));\n        }\n\n        Marshal.FreeHGlobal(unmanagedArray);\n\n        Console.WriteLine(&quot;Done. Press Enter to continue.&quot;);\n        Console.ReadLine();\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_WriteInt16_System_Object_System_Int32_System_Char_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_WriteInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteInt16(Object,Int32,Char)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a 16-bit signed integer value to unmanaged memory at a specified offset.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteInt16 (object ptr, int ofs, char val);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ptr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The base address in unmanaged memory of the target object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ofs</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An additional byte offset, which is added to the <code>ptr</code> parameter before writing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>val</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.accessviolationexception\" data-linktype=\"relative-path\">AccessViolationException</a></div>\r\n                  </div>\r\n                  <p>Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>ptr</code> is an <a class=\"xref\" href=\"system.runtime.interopservices.arraywithoffset\" data-linktype=\"relative-path\">ArrayWithOffset</a> object. This method does not accept <a class=\"xref\" href=\"system.runtime.interopservices.arraywithoffset\" data-linktype=\"relative-path\">ArrayWithOffset</a> parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_WriteInt16_\" data-linktype=\"relative-path\">WriteInt16</a> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_Copy_\" data-linktype=\"relative-path\">Copy</a>) to a separate managed array before setting its element values.  </p>\n<p> Writing to unaligned memory locations is supported.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_WriteInt16_System_Object_System_Int32_System_Int16_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_WriteInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteInt16(Object,Int32,Int16)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a 16-bit signed integer value to unmanaged memory at a specified offset.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteInt16 (object ptr, int ofs, short val);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ptr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The base address in unmanaged memory of the target object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ofs</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An additional byte offset, which is added to the <code>ptr</code> parameter before writing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>val</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.accessviolationexception\" data-linktype=\"relative-path\">AccessViolationException</a></div>\r\n                  </div>\r\n                  <p>Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>ptr</code> is an <a class=\"xref\" href=\"system.runtime.interopservices.arraywithoffset\" data-linktype=\"relative-path\">ArrayWithOffset</a> object. This method does not accept <a class=\"xref\" href=\"system.runtime.interopservices.arraywithoffset\" data-linktype=\"relative-path\">ArrayWithOffset</a> parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_WriteInt16_\" data-linktype=\"relative-path\">WriteInt16</a> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_Copy_\" data-linktype=\"relative-path\">Copy</a>) to a separate managed array before setting its element values.  </p>\n<p> Writing to unaligned memory locations is supported.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_WriteInt32_System_IntPtr_System_Int32_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_WriteInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteInt32(IntPtr,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a 32-bit signed integer value to unmanaged memory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteInt32 (IntPtr ptr, int val);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ptr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The address in unmanaged memory to write to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>val</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.accessviolationexception\" data-linktype=\"relative-path\">AccessViolationException</a></div>\r\n                  </div>\r\n                  <p><code>ptr</code> is not a recognized format.  </p>\n<p> -or-  </p>\n<p> <code>ptr</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>ptr</code> is invalid.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_WriteInt32_\" data-linktype=\"relative-path\">WriteInt32</a> enables direct interaction with an unmanaged 32-bit signed array, eliminating the expense of copying an entire unmanaged array (using <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_Copy_\" data-linktype=\"relative-path\">Copy</a>) to a separate managed array before setting its element values.  </p>\n<p> Writing to unaligned memory locations is supported.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to read and write to an unmanaged array using the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_ReadInt32_\" data-linktype=\"relative-path\">ReadInt32</a> and <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_WriteInt32_\" data-linktype=\"relative-path\">WriteInt32</a> methods.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Runtime.interopServices.Marshal.Read-Write val#5\">    Sub ReadWriteInt32()\n        &#39; Allocate unmanaged memory. \n        Dim elementSize As Integer = 4\n        Dim unmanagedArray As IntPtr = Marshal.AllocHGlobal(10 * elementSize)\n\n        &#39; Set the 10 elements of the C-style unmanagedArray\n        For i As Integer = 0 To 9\n            Marshal.WriteInt32(unmanagedArray, i * elementSize, CType(i + 1, Int32))\n        Next i\n        Console.WriteLine(&quot;Unmanaged memory written.&quot;)\n\n        Console.WriteLine(&quot;Reading unmanaged memory:&quot;)\n        &#39; Print the 10 elements of the C-style unmanagedArray\n        For i As Integer = 0 To 9\n            Console.WriteLine(Marshal.ReadInt32(unmanagedArray, i * elementSize))\n        Next i\n\n        Marshal.FreeHGlobal(unmanagedArray)\n\n        Console.WriteLine(&quot;Done. Press Enter to continue.&quot;)\n        Console.ReadLine()\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Runtime.interopServices.Marshal.Read-Write val#5\">    static void ReadWriteInt32()\n    {\n        // Allocate unmanaged memory. \n        int elementSize = 4;\n        IntPtr unmanagedArray = Marshal.AllocHGlobal(10 * elementSize);\n\n        // Set the 10 elements of the C-style unmanagedArray\n        for (int i = 0; i &lt; 10; i++)\n        {\n            Marshal.WriteInt32(unmanagedArray, i * elementSize, ((Int32)(i + 1)));\n        }\n        Console.WriteLine(&quot;Unmanaged memory written.&quot;);\n\n        Console.WriteLine(&quot;Reading unmanaged memory:&quot;);\n        // Print the 10 elements of the C-style unmanagedArray\n        for (int i = 0; i &lt; 10; i++)\n        {\n            Console.WriteLine(Marshal.ReadInt32(unmanagedArray, i * elementSize));\n        }\n\n        Marshal.FreeHGlobal(unmanagedArray);\n\n        Console.WriteLine(&quot;Done. Press Enter to continue.&quot;);\n        Console.ReadLine();\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_WriteInt32_System_IntPtr_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_WriteInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteInt32(IntPtr,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a 32-bit signed integer value into unmanaged memory at a specified offset.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteInt32 (IntPtr ptr, int ofs, int val);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ptr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The base address in unmanaged memory to write to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ofs</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An additional byte offset, which is added to the <code>ptr</code> parameter before writing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>val</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.accessviolationexception\" data-linktype=\"relative-path\">AccessViolationException</a></div>\r\n                  </div>\r\n                  <p>Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>WriteInt32 enables direct interaction with an unmanaged 32-bit signed array, eliminating the expense of copying an entire unmanaged array (using <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_Copy_\" data-linktype=\"relative-path\">Copy</a>) to a separate managed array before setting its element values.  </p>\n<p> Writing to unaligned memory locations is supported.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to read and write to an unmanaged array using the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_ReadInt32_\" data-linktype=\"relative-path\">ReadInt32</a> and WriteInt32 methods.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Runtime.interopServices.Marshal.Read-Write val#5\">    Sub ReadWriteInt32()\n        &#39; Allocate unmanaged memory. \n        Dim elementSize As Integer = 4\n        Dim unmanagedArray As IntPtr = Marshal.AllocHGlobal(10 * elementSize)\n\n        &#39; Set the 10 elements of the C-style unmanagedArray\n        For i As Integer = 0 To 9\n            Marshal.WriteInt32(unmanagedArray, i * elementSize, CType(i + 1, Int32))\n        Next i\n        Console.WriteLine(&quot;Unmanaged memory written.&quot;)\n\n        Console.WriteLine(&quot;Reading unmanaged memory:&quot;)\n        &#39; Print the 10 elements of the C-style unmanagedArray\n        For i As Integer = 0 To 9\n            Console.WriteLine(Marshal.ReadInt32(unmanagedArray, i * elementSize))\n        Next i\n\n        Marshal.FreeHGlobal(unmanagedArray)\n\n        Console.WriteLine(&quot;Done. Press Enter to continue.&quot;)\n        Console.ReadLine()\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Runtime.interopServices.Marshal.Read-Write val#5\">    static void ReadWriteInt32()\n    {\n        // Allocate unmanaged memory. \n        int elementSize = 4;\n        IntPtr unmanagedArray = Marshal.AllocHGlobal(10 * elementSize);\n\n        // Set the 10 elements of the C-style unmanagedArray\n        for (int i = 0; i &lt; 10; i++)\n        {\n            Marshal.WriteInt32(unmanagedArray, i * elementSize, ((Int32)(i + 1)));\n        }\n        Console.WriteLine(&quot;Unmanaged memory written.&quot;);\n\n        Console.WriteLine(&quot;Reading unmanaged memory:&quot;);\n        // Print the 10 elements of the C-style unmanagedArray\n        for (int i = 0; i &lt; 10; i++)\n        {\n            Console.WriteLine(Marshal.ReadInt32(unmanagedArray, i * elementSize));\n        }\n\n        Marshal.FreeHGlobal(unmanagedArray);\n\n        Console.WriteLine(&quot;Done. Press Enter to continue.&quot;);\n        Console.ReadLine();\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_WriteInt32_System_Object_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_WriteInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteInt32(Object,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a 32-bit signed integer value to unmanaged memory at a specified offset.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteInt32 (object ptr, int ofs, int val);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ptr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The base address in unmanaged memory of the target object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ofs</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An additional byte offset, which is added to the <code>ptr</code> parameter before writing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>val</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.accessviolationexception\" data-linktype=\"relative-path\">AccessViolationException</a></div>\r\n                  </div>\r\n                  <p>Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>ptr</code> is an <a class=\"xref\" href=\"system.runtime.interopservices.arraywithoffset\" data-linktype=\"relative-path\">ArrayWithOffset</a> object. This method does not accept <a class=\"xref\" href=\"system.runtime.interopservices.arraywithoffset\" data-linktype=\"relative-path\">ArrayWithOffset</a> parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_WriteInt32_\" data-linktype=\"relative-path\">WriteInt32</a> enables direct interaction with an unmanaged 32-bit signed array, eliminating the expense of copying an entire unmanaged array (using <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_Copy_\" data-linktype=\"relative-path\">Copy</a>) to a separate managed array before setting its element values.  </p>\n<p> Writing to unaligned memory locations is supported.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_WriteInt64_System_IntPtr_System_Int64_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_WriteInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteInt64(IntPtr,Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a 64-bit signed integer value to unmanaged memory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteInt64 (IntPtr ptr, long val);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ptr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The address in unmanaged memory to write to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>val</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.accessviolationexception\" data-linktype=\"relative-path\">AccessViolationException</a></div>\r\n                  </div>\r\n                  <p><code>ptr</code> is not a recognized format.  </p>\n<p> -or-  </p>\n<p> <code>ptr</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>ptr</code> is invalid.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_WriteInt64_\" data-linktype=\"relative-path\">WriteInt64</a> enables direct interaction with an unmanaged 64-bit signed array, eliminating the expense of copying an entire unmanaged array (using <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_Copy_\" data-linktype=\"relative-path\">Copy</a>) to a separate managed array before setting its element values.  </p>\n<p> Writing to unaligned memory locations is supported.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to read and write to an unmanaged array using the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_ReadInt64_\" data-linktype=\"relative-path\">ReadInt64</a> and <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_WriteInt64_\" data-linktype=\"relative-path\">WriteInt64</a> methods.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Runtime.interopServices.Marshal.Read-Write val#6\">    Sub ReadWriteInt64()\n        &#39; Allocate unmanaged memory. \n        Dim elementSize As Integer = 8\n        Dim unmanagedArray As IntPtr = Marshal.AllocHGlobal(10 * elementSize)\n\n        &#39; Set the 10 elements of the C-style unmanagedArray\n        For i As Integer = 0 To 9\n            Marshal.WriteInt64(unmanagedArray, i * elementSize, CType(i + 1, Int64))\n        Next i\n        Console.WriteLine(&quot;Unmanaged memory written.&quot;)\n\n        Console.WriteLine(&quot;Reading unmanaged memory:&quot;)\n        &#39; Print the 10 elements of the C-style unmanagedArray\n        For i As Integer = 0 To 9\n            Console.WriteLine(Marshal.ReadInt64(unmanagedArray, i * elementSize))\n        Next i\n\n        Marshal.FreeHGlobal(unmanagedArray)\n\n        Console.WriteLine(&quot;Done. Press Enter to continue.&quot;)\n        Console.ReadLine()\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Runtime.interopServices.Marshal.Read-Write val#6\">    static void ReadWriteInt64()\n    {\n        // Allocate unmanaged memory. \n        int elementSize = 8;\n        IntPtr unmanagedArray = Marshal.AllocHGlobal(10 * elementSize);\n\n        // Set the 10 elements of the C-style unmanagedArray\n        for (int i = 0; i &lt; 10; i++)\n        {\n            Marshal.WriteInt64(unmanagedArray, i * elementSize, ((Int64)(i + 1)));\n        }\n        Console.WriteLine(&quot;Unmanaged memory written.&quot;);\n\n        Console.WriteLine(&quot;Reading unmanaged memory:&quot;);\n        // Print the 10 elements of the C-style unmanagedArray\n        for (int i = 0; i &lt; 10; i++)\n        {\n            Console.WriteLine(Marshal.ReadInt64(unmanagedArray, i * elementSize));\n        }\n\n        Marshal.FreeHGlobal(unmanagedArray);\n\n        Console.WriteLine(&quot;Done. Press Enter to continue.&quot;);\n        Console.ReadLine();\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_WriteInt64_System_IntPtr_System_Int32_System_Int64_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_WriteInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteInt64(IntPtr,Int32,Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a 64-bit signed integer value to unmanaged memory at a specified offset.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteInt64 (IntPtr ptr, int ofs, long val);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ptr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The base address in unmanaged memory to write.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ofs</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An additional byte offset, which is added to the <code>ptr</code> parameter before writing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>val</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.accessviolationexception\" data-linktype=\"relative-path\">AccessViolationException</a></div>\r\n                  </div>\r\n                  <p>Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>WriteInt64 enables direct interaction with an unmanaged 64-bit signed array, eliminating the expense of copying an entire unmanaged array (using <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_Copy_\" data-linktype=\"relative-path\">Copy</a>) to a separate managed array before setting its element values.  </p>\n<p> Writing to unaligned memory locations is supported.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to read and write to an unmanaged array using the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_ReadInt64_\" data-linktype=\"relative-path\">ReadInt64</a> and WriteInt64 methods.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Runtime.interopServices.Marshal.Read-Write val#6\">    Sub ReadWriteInt64()\n        &#39; Allocate unmanaged memory. \n        Dim elementSize As Integer = 8\n        Dim unmanagedArray As IntPtr = Marshal.AllocHGlobal(10 * elementSize)\n\n        &#39; Set the 10 elements of the C-style unmanagedArray\n        For i As Integer = 0 To 9\n            Marshal.WriteInt64(unmanagedArray, i * elementSize, CType(i + 1, Int64))\n        Next i\n        Console.WriteLine(&quot;Unmanaged memory written.&quot;)\n\n        Console.WriteLine(&quot;Reading unmanaged memory:&quot;)\n        &#39; Print the 10 elements of the C-style unmanagedArray\n        For i As Integer = 0 To 9\n            Console.WriteLine(Marshal.ReadInt64(unmanagedArray, i * elementSize))\n        Next i\n\n        Marshal.FreeHGlobal(unmanagedArray)\n\n        Console.WriteLine(&quot;Done. Press Enter to continue.&quot;)\n        Console.ReadLine()\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Runtime.interopServices.Marshal.Read-Write val#6\">    static void ReadWriteInt64()\n    {\n        // Allocate unmanaged memory. \n        int elementSize = 8;\n        IntPtr unmanagedArray = Marshal.AllocHGlobal(10 * elementSize);\n\n        // Set the 10 elements of the C-style unmanagedArray\n        for (int i = 0; i &lt; 10; i++)\n        {\n            Marshal.WriteInt64(unmanagedArray, i * elementSize, ((Int64)(i + 1)));\n        }\n        Console.WriteLine(&quot;Unmanaged memory written.&quot;);\n\n        Console.WriteLine(&quot;Reading unmanaged memory:&quot;);\n        // Print the 10 elements of the C-style unmanagedArray\n        for (int i = 0; i &lt; 10; i++)\n        {\n            Console.WriteLine(Marshal.ReadInt64(unmanagedArray, i * elementSize));\n        }\n\n        Marshal.FreeHGlobal(unmanagedArray);\n\n        Console.WriteLine(&quot;Done. Press Enter to continue.&quot;);\n        Console.ReadLine();\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_WriteInt64_System_Object_System_Int32_System_Int64_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_WriteInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteInt64(Object,Int32,Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a 64-bit signed integer value to unmanaged memory at a specified offset.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteInt64 (object ptr, int ofs, long val);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ptr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The base address in unmanaged memory of the target object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ofs</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An additional byte offset, which is added to the <code>ptr</code> parameter before writing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>val</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.accessviolationexception\" data-linktype=\"relative-path\">AccessViolationException</a></div>\r\n                  </div>\r\n                  <p>Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>ptr</code> is an <a class=\"xref\" href=\"system.runtime.interopservices.arraywithoffset\" data-linktype=\"relative-path\">ArrayWithOffset</a> object. This method does not accept <a class=\"xref\" href=\"system.runtime.interopservices.arraywithoffset\" data-linktype=\"relative-path\">ArrayWithOffset</a> parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_WriteInt64_\" data-linktype=\"relative-path\">WriteInt64</a> enables direct interaction with an unmanaged 64-bit signed array, eliminating the expense of copying an entire unmanaged array (using <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_Copy_\" data-linktype=\"relative-path\">Copy</a>) to a separate managed array before setting its element values.  </p>\n<p> Writing to unaligned memory locations is supported.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_WriteIntPtr_System_IntPtr_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_WriteIntPtr_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteIntPtr(IntPtr,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a processor native sized integer value into unmanaged memory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteIntPtr (IntPtr ptr, IntPtr val);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ptr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The address in unmanaged memory to write to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>val</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.accessviolationexception\" data-linktype=\"relative-path\">AccessViolationException</a></div>\r\n                  </div>\r\n                  <p><code>ptr</code> is not a recognized format.  </p>\n<p> -or-  </p>\n<p> <code>ptr</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>ptr</code> is invalid.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_WriteIntPtr_\" data-linktype=\"relative-path\">WriteIntPtr</a> enables direct interaction with an unmanaged C-style <code>IntPtr</code> array, eliminating the expense of copying an entire unmanaged array (using <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_Copy_\" data-linktype=\"relative-path\">Copy</a>) to a separate managed array before setting its element values.  </p>\n<p> Writing to unaligned memory locations is supported.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to read and write to an unmanaged array using the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_ReadIntPtr_\" data-linktype=\"relative-path\">ReadIntPtr</a> and <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_WriteIntPtr_\" data-linktype=\"relative-path\">WriteIntPtr</a> methods.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Runtime.interopServices.Marshal.Read-Write val#2\">    Sub ReadWriteIntPtr()\n        &#39; Allocate unmanaged memory.\n        Dim elementSize As Integer = Marshal.SizeOf(GetType(IntPtr))\n        Dim unmanagedArray As IntPtr = Marshal.AllocHGlobal(10 * elementSize)\n\n        &#39; Set the 10 elements of the C-style unmanagedArray\n        For i As Integer = 0 To 9\n            Marshal.WriteIntPtr(unmanagedArray, i * elementSize, CType(i + 1, IntPtr))\n        Next i\n        Console.WriteLine(&quot;Unmanaged memory written.&quot;)\n\n        Console.WriteLine(&quot;Reading unmanaged memory:&quot;)\n        &#39; Print the 10 elements of the C-style unmanagedArray\n        For i As Integer = 0 To 9\n            Console.WriteLine(Marshal.ReadIntPtr(unmanagedArray, i * elementSize))\n        Next i\n\n        Marshal.FreeHGlobal(unmanagedArray)\n\n        Console.WriteLine(&quot;Done. Press Enter to continue.&quot;)\n        Console.ReadLine()\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Runtime.interopServices.Marshal.Read-Write val#2\">    static void ReadWriteIntPtr()\n    {\n        // Allocate unmanaged memory. \n        int elementSize = Marshal.SizeOf(typeof(IntPtr));\n        IntPtr unmanagedArray = Marshal.AllocHGlobal(10 * elementSize);\n\n        // Set the 10 elements of the C-style unmanagedArray\n        for (int i = 0; i &lt; 10; i++)\n        {\n            Marshal.WriteIntPtr(unmanagedArray, i * elementSize, ((IntPtr)(i + 1)));\n        }\n        Console.WriteLine(&quot;Unmanaged memory written.&quot;);\n\n        Console.WriteLine(&quot;Reading unmanaged memory:&quot;);\n        // Print the 10 elements of the C-style unmanagedArray\n        for (int i = 0; i &lt; 10; i++)\n        {\n            Console.WriteLine(Marshal.ReadIntPtr(unmanagedArray, i * elementSize));\n        }\n\n        Marshal.FreeHGlobal(unmanagedArray);\n\n        Console.WriteLine(&quot;Done. Press Enter to continue.&quot;);\n        Console.ReadLine();\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_WriteIntPtr_System_IntPtr_System_Int32_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_WriteIntPtr_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteIntPtr(IntPtr,Int32,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a processor native-sized integer value to unmanaged memory at a specified offset.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteIntPtr (IntPtr ptr, int ofs, IntPtr val);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ptr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The base address in unmanaged memory to write to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ofs</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An additional byte offset, which is added to the <code>ptr</code> parameter before writing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>val</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.accessviolationexception\" data-linktype=\"relative-path\">AccessViolationException</a></div>\r\n                  </div>\r\n                  <p>Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method writes a 32 bit integer on 32 bit systems, and a 64 bit integer on 64 bit systems.  </p>\n<p> WriteIntPtr enables direct interaction with an unmanaged C-style <code>IntPtr</code> array, eliminating the expense of copying an entire unmanaged array (using <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_Copy_\" data-linktype=\"relative-path\">Copy</a>) to a separate managed array before setting its element values.  </p>\n<p> Writing to unaligned memory locations is supported.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to read and write to an unmanaged array using the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_ReadIntPtr_\" data-linktype=\"relative-path\">ReadIntPtr</a> and WriteIntPtr methods.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Runtime.interopServices.Marshal.Read-Write val#2\">    Sub ReadWriteIntPtr()\n        &#39; Allocate unmanaged memory.\n        Dim elementSize As Integer = Marshal.SizeOf(GetType(IntPtr))\n        Dim unmanagedArray As IntPtr = Marshal.AllocHGlobal(10 * elementSize)\n\n        &#39; Set the 10 elements of the C-style unmanagedArray\n        For i As Integer = 0 To 9\n            Marshal.WriteIntPtr(unmanagedArray, i * elementSize, CType(i + 1, IntPtr))\n        Next i\n        Console.WriteLine(&quot;Unmanaged memory written.&quot;)\n\n        Console.WriteLine(&quot;Reading unmanaged memory:&quot;)\n        &#39; Print the 10 elements of the C-style unmanagedArray\n        For i As Integer = 0 To 9\n            Console.WriteLine(Marshal.ReadIntPtr(unmanagedArray, i * elementSize))\n        Next i\n\n        Marshal.FreeHGlobal(unmanagedArray)\n\n        Console.WriteLine(&quot;Done. Press Enter to continue.&quot;)\n        Console.ReadLine()\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Runtime.interopServices.Marshal.Read-Write val#2\">    static void ReadWriteIntPtr()\n    {\n        // Allocate unmanaged memory. \n        int elementSize = Marshal.SizeOf(typeof(IntPtr));\n        IntPtr unmanagedArray = Marshal.AllocHGlobal(10 * elementSize);\n\n        // Set the 10 elements of the C-style unmanagedArray\n        for (int i = 0; i &lt; 10; i++)\n        {\n            Marshal.WriteIntPtr(unmanagedArray, i * elementSize, ((IntPtr)(i + 1)));\n        }\n        Console.WriteLine(&quot;Unmanaged memory written.&quot;);\n\n        Console.WriteLine(&quot;Reading unmanaged memory:&quot;);\n        // Print the 10 elements of the C-style unmanagedArray\n        for (int i = 0; i &lt; 10; i++)\n        {\n            Console.WriteLine(Marshal.ReadIntPtr(unmanagedArray, i * elementSize));\n        }\n\n        Marshal.FreeHGlobal(unmanagedArray);\n\n        Console.WriteLine(&quot;Done. Press Enter to continue.&quot;);\n        Console.ReadLine();\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_WriteIntPtr_System_Object_System_Int32_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_WriteIntPtr_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteIntPtr(Object,Int32,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a processor native sized integer value to unmanaged memory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteIntPtr (object ptr, int ofs, IntPtr val);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ptr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The base address in unmanaged memory of the target object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ofs</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An additional byte offset, which is added to the <code>ptr</code> parameter before writing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>val</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.accessviolationexception\" data-linktype=\"relative-path\">AccessViolationException</a></div>\r\n                  </div>\r\n                  <p>Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>ptr</code> is an <a class=\"xref\" href=\"system.runtime.interopservices.arraywithoffset\" data-linktype=\"relative-path\">ArrayWithOffset</a> object. This method does not accept <a class=\"xref\" href=\"system.runtime.interopservices.arraywithoffset\" data-linktype=\"relative-path\">ArrayWithOffset</a> parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_WriteIntPtr_\" data-linktype=\"relative-path\">WriteIntPtr</a> enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_Copy_\" data-linktype=\"relative-path\">Copy</a>) to a separate managed array before setting its element values.  </p>\n<p> Writing to unaligned memory locations is supported.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_ZeroFreeBSTR_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_ZeroFreeBSTR_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ZeroFreeBSTR(IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Frees a <a href=\"https://msdn.microsoft.com/library/ms221069.aspx\" data-linktype=\"external\">BSTR</a> pointer that was allocated using the <span class=\"xref\">stem.Runtime.InteropServices.Marshal.SecureStringToBSTR*</span> method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void ZeroFreeBSTR (IntPtr s);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The address of the <code>BSTR</code> to free.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ZeroFreeBSTR method first sets the contents of the BSTR to zero, and then frees the BSTR.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_ZeroFreeCoTaskMemAnsi_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_ZeroFreeCoTaskMemAnsi_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ZeroFreeCoTaskMemAnsi(IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Frees an unmanaged string pointer that was allocated using the <span class=\"xref\">stem.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi*</span> method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void ZeroFreeCoTaskMemAnsi (IntPtr s);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The address of the unmanaged string to free.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ZeroFreeCoTaskMemAnsi method first zeros out and then frees unmanaged memory that was allocated using the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_SecureStringToCoTaskMemAnsi_\" data-linktype=\"relative-path\">SecureStringToCoTaskMemAnsi</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_SecureStringToCoTaskMemAnsi_\" data-linktype=\"relative-path\">SecureStringToCoTaskMemAnsi</a> method to marshal and decrypt the contents of a <a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a> object to a block of unmanaged memory. It then uses the ZeroFreeCoTaskMemAnsi method to zero out and dispose the unmanaged block.  </p>\n<pre><code class=\"lang-cs\" name=\"Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi#1\">using System;\nusing System.Runtime.InteropServices;\nusing System.Security;\n\nclass MarshalExample\n{\n     static void Main()\n     {\n         IntPtr unmanagedRef = IntPtr.Zero;\n\n          // Ask the user for a password.\n          Console.Write(&quot;Please enter your password: &quot;);\n\n          SecureString passWord = GetPassword();\n\n          Console.WriteLine(&quot;Copying and decrypting the string to unmanaged memory...&quot;);\n\n          // Copy the Secure string to unmanaged memory (and decrypt it).\n          unmanagedRef = Marshal.SecureStringToCoTaskMemAnsi(passWord);\n\n          if (unmanagedRef != IntPtr.Zero)\n          {\n              Console.WriteLine(&quot;Zeroing out unmanaged memory...&quot;);\n\n              Marshal.ZeroFreeCoTaskMemAnsi(unmanagedRef);\n          }\n          passWord.Dispose();\n          \n         Console.WriteLine(&quot;Done.&quot;);\n     }\n\n     public static SecureString GetPassword()\n     {\n         SecureString password = new SecureString();\n\n         // get the first character of the password\n         ConsoleKeyInfo nextKey = Console.ReadKey(true);\n\n         while (nextKey.Key != ConsoleKey.Enter)\n         {\n             if (nextKey.Key == ConsoleKey.Backspace)\n             {\n                 if (password.Length &gt; 0)\n                 {\n                     password.RemoveAt(password.Length - 1);\n\n                     // erase the last * as well\n                     Console.Write(nextKey.KeyChar);\n                     Console.Write(&quot; &quot;);\n                     Console.Write(nextKey.KeyChar);\n                 }\n             }\n             else\n             {\n                 password.AppendChar(nextKey.KeyChar);\n                 Console.Write(&quot;*&quot;);\n             }\n\n             nextKey = Console.ReadKey(true);\n         }\n\n         Console.WriteLine();\n\n         // lock the password down\n         password.MakeReadOnly();\n         return password;\n     }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi#1\">Imports System.Runtime.InteropServices\nImports System.Security\n\nModule Example\n    Sub Main()\n        Dim unmanagedRef As IntPtr\n\n         &#39; Ask the user for a password.\n         Console.Write(&quot;Please enter your password: &quot;)\n         Dim passWord As SecureString = GetPassword()\n\n         Console.WriteLine(&quot;Copying and decrypting the string to unmanaged memory...&quot;)\n\n         &#39; Copy the Secure string to unmanaged memory (and decrypt it).\n         unmanagedRef = Marshal.SecureStringToCoTaskMemAnsi(passWord)\n\n         If unmanagedRef &lt;&gt; IntPtr.Size Then\n             Console.WriteLine(&quot;Zeroing out unmanaged memory...&quot;)\n             Marshal.ZeroFreeCoTaskMemAnsi(unmanagedRef)\n         End If\n         passWord.Dispose()\n\n        Console.WriteLine(&quot;Done.&quot;)\n    End Sub\n\n\n\n    Function GetPassword() As SecureString\n        Dim password As New SecureString()\n\n        &#39; get the first character of the password\n        Dim nextKey As ConsoleKeyInfo = Console.ReadKey(True)\n\n        While nextKey.Key &lt;&gt; ConsoleKey.Enter\n            If nextKey.Key = ConsoleKey.BackSpace Then\n                If password.Length &gt; 0 Then\n                    password.RemoveAt(password.Length - 1)\n\n                    &#39; erase the last * as well\n                    Console.Write(nextKey.KeyChar)\n                    Console.Write(&quot; &quot;)\n                    Console.Write(nextKey.KeyChar)\n                End If\n            Else\n                password.AppendChar(nextKey.KeyChar)\n                Console.Write(&quot;*&quot;)\n            End If\n\n            nextKey = Console.ReadKey(True)\n        End While\n\n        Console.WriteLine()\n\n        &#39; lock the password down\n        password.MakeReadOnly()\n        Return password\n\n    End Function\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_ZeroFreeCoTaskMemUnicode_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_ZeroFreeCoTaskMemUnicode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ZeroFreeCoTaskMemUnicode(IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Frees an unmanaged string pointer that was allocated using the <span class=\"xref\">stem.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode*</span> method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void ZeroFreeCoTaskMemUnicode (IntPtr s);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The address of the unmanaged string to free.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ZeroFreeCoTaskMemUnicode method first zeros out and then frees unmanaged memory that was allocated using the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_SecureStringToCoTaskMemUnicode_\" data-linktype=\"relative-path\">SecureStringToCoTaskMemUnicode</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_ZeroFreeGlobalAllocAnsi_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_ZeroFreeGlobalAllocAnsi_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ZeroFreeGlobalAllocAnsi(IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Frees an unmanaged string pointer that was allocated using the <span class=\"xref\">stem.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi*</span> method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void ZeroFreeGlobalAllocAnsi (IntPtr s);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The address of the unmanaged string to free.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ZeroFreeGlobalAllocAnsi method first zeros out and then frees unmanaged memory that was allocated using the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_SecureStringToGlobalAllocAnsi_\" data-linktype=\"relative-path\">SecureStringToGlobalAllocAnsi</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_SecureStringToGlobalAllocAnsi_\" data-linktype=\"relative-path\">SecureStringToGlobalAllocAnsi</a> method to marshal and decrypt the contents of a <a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a> object to a block of unmanaged memory. It then uses the ZeroFreeGlobalAllocAnsi method to zero out and dispose the unmanaged block.  </p>\n<pre><code class=\"lang-cs\" name=\"Runtime.InteropServices.Marshal.SecureStringToHGlobalAnsi#1\">using System;\nusing System.Runtime.InteropServices;\nusing System.Security;\n\nclass Example\n{\n    static void Main()\n    {\n        IntPtr unmanagedRef = IntPtr.Zero;\n\n        // Ask the user for a password.\n        Console.Write(&quot;Please enter your password: &quot;);\n        SecureString passWord = GetPassword();\n\n        Console.WriteLine(&quot;Copying and decrypting the string to unmanaged memory...&quot;);\n        // Copy the Secure string to unmanaged memory (and decrypt it).\n        unmanagedRef = Marshal.SecureStringToGlobalAllocAnsi(passWord);\n        passWord.Dispose();\n        \n        if (unmanagedRef != IntPtr.Zero) {\n            Console.WriteLine(&quot;Zeroing out unmanaged memory...&quot;);\n            Marshal.ZeroFreeGlobalAllocAnsi(unmanagedRef);\n        }\n        Console.WriteLine(&quot;Done.&quot;);\n    }\n\n    public static SecureString GetPassword()\n    {\n        SecureString password = new SecureString();\n\n        // get the first character of the password\n        ConsoleKeyInfo nextKey = Console.ReadKey(true);\n\n        while (nextKey.Key != ConsoleKey.Enter) {\n            if (nextKey.Key == ConsoleKey.Backspace) {\n                if (password.Length &gt; 0) {\n                    password.RemoveAt(password.Length - 1);\n\n                    // erase the last * as well\n                    Console.Write(nextKey.KeyChar);\n                    Console.Write(&quot; &quot;);\n                    Console.Write(nextKey.KeyChar);\n                }\n            }\n            else {\n                password.AppendChar(nextKey.KeyChar);\n                Console.Write(&quot;*&quot;);\n            }\n\n            nextKey = Console.ReadKey(true);\n        }\n        Console.WriteLine();\n\n        // lock the password down\n        password.MakeReadOnly();\n        return password;\n    }\n}\n// The example displays output like the following:\n//       Please enter your password: ********\n//       Copying and decrypting the string to unmanaged memory...\n//       Zeroing out unmanaged memory...\n//       Done.\n</code></pre><pre><code class=\"lang-vb\" name=\"Runtime.InteropServices.Marshal.SecureStringToHGlobalAnsi#1\">Imports System\nImports System.Runtime.InteropServices\nImports System.Security\n\nModule Example\n    Sub Main()\n        Dim unmanagedRef As IntPtr\n\n        &#39; Ask the user for a password.\n        Console.Write(&quot;Please enter your password: &quot;)\n        Dim passWord As SecureString = GetPassword()\n\n        Console.WriteLine(&quot;Copying and decrypting the string to unmanaged memory...&quot;)\n        &#39; Copy the Secure string to unmanaged memory (and decrypt it).\n        unmanagedRef = Marshal.SecureStringToGlobalAllocAnsi(passWord)\n        passWord.Dispose()\n\n        If unmanagedRef &lt;&gt; IntPtr.Zero Then\n            Console.WriteLine(&quot;Zeroing out unmanaged memory...&quot;)\n            Marshal.ZeroFreeGlobalAllocAnsi(unmanagedRef)\n        End If\n        Console.WriteLine(&quot;Done.&quot;)\n    End Sub\n\n    Function GetPassword() As SecureString\n        Dim password As New SecureString()\n\n        &#39; get the first character of the password\n        Dim nextKey As ConsoleKeyInfo = Console.ReadKey(True)\n\n        While nextKey.Key &lt;&gt; ConsoleKey.Enter\n            If nextKey.Key = ConsoleKey.BackSpace Then\n                If password.Length &gt; 0 Then\n                    password.RemoveAt(password.Length - 1)\n\n                    &#39; Erase the last * as well.\n                    Console.Write(nextKey.KeyChar)\n                    Console.Write(&quot; &quot;)\n                    Console.Write(nextKey.KeyChar)\n                End If\n            Else\n                password.AppendChar(nextKey.KeyChar)\n                Console.Write(&quot;*&quot;)\n            End If\n\n            nextKey = Console.ReadKey(True)\n        End While\n        Console.WriteLine()\n\n        &#39; lock the password down\n        password.MakeReadOnly()\n        Return password\n    End Function\nEnd Module\n&#39; The example displays output like the following:\n&#39;       Please enter your password: ********\n&#39;       Copying and decrypting the string to unmanaged memory...\n&#39;       Zeroing out unmanaged memory...\n&#39;       Done.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_Marshal_ZeroFreeGlobalAllocUnicode_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_Marshal_ZeroFreeGlobalAllocUnicode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ZeroFreeGlobalAllocUnicode(IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Frees an unmanaged string pointer that was allocated using the <span class=\"xref\">stem.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode*</span> method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void ZeroFreeGlobalAllocUnicode (IntPtr s);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The address of the unmanaged string to free.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ZeroFreeGlobalAllocUnicode method first zeros out and then frees unmanaged memory that was allocated using the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_SecureStringToGlobalAllocUnicode_\" data-linktype=\"relative-path\">SecureStringToGlobalAllocUnicode</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_SecureStringToGlobalAllocUnicode_\" data-linktype=\"relative-path\">SecureStringToGlobalAllocUnicode</a> method with the unmanaged <code>LogonUser</code> function to perform impersonation with the <a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a> class. The example then uses the ZeroFreeGlobalAllocUnicode method to zero out and free the unmanaged string reference.  </p>\n<pre><code class=\"lang-vb\" name=\"Runtime.InteropServices.Marshal.SecureStringToHGlobalUni#1\">Imports System\nImports System.ComponentModel\nImports System.Runtime.InteropServices\nImports System.Security\nImports System.Security.Principal\n\nModule Example\n    &#39; PInvoke into the Win32 API to provide access to the\n    &#39; LogonUser and CloseHandle functions.\n    &lt;DllImport(&quot;advapi32.dll&quot;, SetLastError:=True, CharSet:=CharSet.Unicode)&gt; _\n    Function LogonUser(ByVal username As String, ByVal domain As String, _\n                       ByVal password As IntPtr, ByVal logonType As Integer, _\n                       ByVal logonProvider As Integer, ByRef token As IntPtr) _\n                       As Boolean\n    End Function\n\n    &lt;DllImport(&quot;kernel32.dll&quot;, CharSet:=CharSet.Auto)&gt; _\n    Function CloseHandle(ByVal handle As IntPtr) As Boolean\n    End Function\n\n    &#39; Define the required LogonUser enumerations.\n    Const LOGON32_PROVIDER_DEFAULT As Integer = 0\n    Const LOGON32_LOGON_INTERACTIVE As Integer = 2\n\n    Sub Main(ByVal args() As String)\n        &#39; Display the current user before impersonation.\n        Console.WriteLine(&quot;Before impersonation: {0}&quot;,\n                          WindowsIdentity.GetCurrent().Name)\n\n        &#39; Ask the user for a network domain.\n        Console.Write(&quot;Please enter your domain:&quot;)\n        Dim domain As String = Console.ReadLine()\n\n        &#39; Ask the user for a user name.\n        Console.Write(&quot;Please enter your user name:&quot;)\n        Dim username As String = Console.ReadLine()\n\n        &#39; Ask the user for a password.\n        Console.Write(&quot;Please enter your password:&quot;)\n        Dim passWord As SecureString = GetPassword()\n\n        &#39; Impersonate the account provided by the user.\n        Try\n            Dim userContext As WindowsImpersonationContext =\n                            ImpersonateUser(passWord, username, domain)\n            &#39; Display the current user after impersonation.\n            Console.WriteLine(&quot;After impersonation: {0}&quot;,\n                              WindowsIdentity.GetCurrent().Name)\n         Catch e As ArgumentException\n            Console.WriteLine(e.Message)\n             Console.WriteLine(&quot;{0}: {1}&quot;, e.GetType().Name, e.Message)\n         Catch e As Win32Exception\n             Console.WriteLine(&quot;{0}: {1}&quot;, e.GetType().Name, e.Message)\n         Finally\n              passWord.Dispose()\n         End Try\n    End Sub\n\n    Function GetPassword() As SecureString\n        Dim password As New SecureString()\n\n        &#39; get the first character of the password\n        Dim nextKey As ConsoleKeyInfo = Console.ReadKey(True)\n\n        While nextKey.Key &lt;&gt; ConsoleKey.Enter\n            If nextKey.Key = ConsoleKey.BackSpace Then\n                If password.Length &gt; 0 Then\n                    password.RemoveAt(password.Length - 1)\n\n                    &#39; erase the last * as well\n                    Console.Write(nextKey.KeyChar)\n                    Console.Write(&quot; &quot;)\n                    Console.Write(nextKey.KeyChar)\n                End If\n            Else\n                password.AppendChar(nextKey.KeyChar)\n                Console.Write(&quot;*&quot;)\n            End If\n\n            nextKey = Console.ReadKey(True)\n        End While\n\n        Console.WriteLine()\n\n        &#39; lock the password down\n        password.MakeReadOnly()\n        Return password\n    End Function\n\n    Function ImpersonateUser(ByVal password As SecureString,\n                             ByVal userName As String,\n                             ByVal domainName As String) As WindowsImpersonationContext\n        Dim tokenHandle As IntPtr = IntPtr.Zero\n        Dim passwordPtr As IntPtr = IntPtr.Zero\n        Dim returnValue As Boolean = False\n        Dim err As Integer = 0\n        \n        &#39; Marshal the SecureString to unmanaged memory.\n        passwordPtr = Marshal.SecureStringToGlobalAllocUnicode(password)\n\n        &#39; Pass LogonUser the unmanaged (and decrypted) copy of the password.\n        returnValue = LogonUser(userName, domainName, passwordPtr,\n                                LOGON32_LOGON_INTERACTIVE, LOGON32_PROVIDER_DEFAULT,\n                                tokenHandle)\n        If Not returnValue AndAlso tokenHandle = IntPtr.Zero Then\n            err = Marshal.GetLastWin32Error()\n        End If\n        \n        &#39; Perform cleanup whether or not the call succeeded.\n        &#39; Zero-out and free the unmanaged string reference.\n        Marshal.ZeroFreeGlobalAllocUnicode(passwordPtr)\n        &#39; Close the token handle.\n        CloseHandle(tokenHandle)\n\n        &#39; Throw an exception if an error occurred.\n        If err &lt;&gt; 0 Then\n            Throw New System.ComponentModel.Win32Exception(err)\n        End If\n        &#39; The token that is passed to the following constructor must \n        &#39; be a primary token in order to use it for impersonation.\n        Dim newId As New WindowsIdentity(tokenHandle)\n\n        Return newId.Impersonate()\n    End Function\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"Runtime.InteropServices.Marshal.SecureStringToHGlobalUni#1\">using System;\nusing System.ComponentModel;\nusing System.Runtime.InteropServices;\nusing System.Security;\nusing System.Security.Principal;\n\nclass Example\n{\n     // Define the Windows LogonUser and CloseHandle functions.\n     [DllImport(&quot;advapi32.dll&quot;, SetLastError = true, CharSet = CharSet.Unicode)]\n     internal static extern bool LogonUser(String username, String domain, IntPtr password,\n             int logonType, int logonProvider, ref IntPtr token);\n\n     [DllImport(&quot;kernel32.dll&quot;, CharSet = CharSet.Auto)]\n     public extern static bool CloseHandle(IntPtr handle);\n\n     // Define the required LogonUser enumerations.\n     const int LOGON32_PROVIDER_DEFAULT = 0;\n     const int LOGON32_LOGON_INTERACTIVE = 2;\n\n     static void Main()\n     {\n          // Display the current user before impersonation.\n          Console.WriteLine(&quot;Before impersonation: {0}&quot;,\n                            WindowsIdentity.GetCurrent().Name);\n\n          // Ask the user for a network domain.\n          Console.Write(&quot;Please enter your domain: &quot;);\n          string domain = Console.ReadLine();\n\n          // Ask the user for a user name.\n          Console.Write(&quot;Please enter your user name: &quot;);\n          string username = Console.ReadLine();\n\n          // Ask the user for a password.\n          Console.Write(&quot;Please enter your password: &quot;);\n          SecureString passWord = GetPassword();\n\n          // Impersonate the account provided by the user.\n          try {\n             WindowsImpersonationContext userContext =\n                           ImpersonateUser(passWord, username, domain);\n             // Display the current user after impersonation.\n             Console.WriteLine(&quot;After impersonation: {0}&quot;,\n                               WindowsIdentity.GetCurrent().Name);\n          }\n          catch (ArgumentException e) {\n             Console.WriteLine(&quot;{0}: {1}&quot;, e.GetType().Name, e.Message);\n          }\n          catch (Win32Exception e) {\n             Console.WriteLine(&quot;{0}: {1}&quot;, e.GetType().Name, e.Message);\n          }\n          finally {\n             passWord.Dispose();\n          }\n     }\n\n     public static SecureString GetPassword()\n     {\n         SecureString password = new SecureString();\n\n         // get the first character of the password\n         ConsoleKeyInfo nextKey = Console.ReadKey(true);\n\n         while (nextKey.Key != ConsoleKey.Enter) {\n             if (nextKey.Key == ConsoleKey.Backspace) {\n                 if (password.Length &gt; 0) {\n                     password.RemoveAt(password.Length - 1);\n\n                     // erase the last * as well\n                     Console.Write(nextKey.KeyChar);\n                     Console.Write(&quot; &quot;);\n                     Console.Write(nextKey.KeyChar);\n                 }\n             }\n             else {\n                 password.AppendChar(nextKey.KeyChar);\n                 Console.Write(&quot;*&quot;);\n             }\n\n             nextKey = Console.ReadKey(true);\n         }\n\n         Console.WriteLine();\n\n         // lock the password down\n         password.MakeReadOnly();\n         return password;\n     }\n\n     public static WindowsImpersonationContext ImpersonateUser(SecureString password, string userName, string domainName)\n     {\n         IntPtr tokenHandle = IntPtr.Zero;\n         IntPtr passwordPtr = IntPtr.Zero;\n         bool returnValue = false;\n         int error = 0;\n         \n         // Marshal the SecureString to unmanaged memory.\n         passwordPtr = Marshal.SecureStringToGlobalAllocUnicode(password);\n\n         // Pass LogonUser the unmanaged (and decrypted) copy of the password.\n         returnValue = LogonUser(userName, domainName, passwordPtr,\n                                 LOGON32_LOGON_INTERACTIVE, LOGON32_PROVIDER_DEFAULT,\n                                 ref tokenHandle);\n         if (!returnValue &amp;&amp; tokenHandle == IntPtr.Zero)\n            error = Marshal.GetLastWin32Error();\n\n         // Perform cleanup whether or not the call succeeded.\n         // Zero-out and free the unmanaged string reference.\n         Marshal.ZeroFreeGlobalAllocUnicode(passwordPtr);\n         // Close the token handle.\n         CloseHandle(tokenHandle);\n\n         // Throw an exception if an error occurred.\n         if (error != 0) {\n             throw new System.ComponentModel.Win32Exception(error);\n         }\n         // The token that is passed to the following constructor must \n         // be a primary token in order to use it for impersonation.\n         WindowsIdentity newId = new WindowsIdentity(tokenHandle);\n\n         return newId.Impersonate();\n     }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Runtime.InteropServices.Marshal.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Runtime.InteropServices.Marshal.yml\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.AddRef\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.AllocCoTaskMem\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.AllocHGlobal\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.BindToMoniker\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.ChangeWrapperHandleStrength\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.Copy\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.CreateAggregatedObject\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.CreateAggregatedObject&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.CreateWrapperOfType\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.CreateWrapperOfType&lt;T,TWrapper&gt;\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.DestroyStructure\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.DestroyStructure&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.FinalReleaseComObject\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.FreeBSTR\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.FreeCoTaskMem\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.FreeHGlobal\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.GenerateGuidForType\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.GenerateProgIdForType\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.GetActiveObject\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.GetComInterfaceForObject\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.GetComInterfaceForObject&lt;T,TInterface&gt;\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.GetComInterfaceForObjectInContext\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.GetComObjectData\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.GetComSlotForMethodInfo\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer&lt;TDelegate&gt;\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.GetEndComSlot\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.GetExceptionCode\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.GetExceptionForHR\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.GetExceptionPointers\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate&lt;TDelegate&gt;\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.GetHINSTANCE\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.GetHRForException\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.GetIDispatchForObject\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.GetIDispatchForObjectInContext\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.GetITypeInfoForType\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.GetIUnknownForObject\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.GetIUnknownForObjectInContext\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.GetLastWin32Error\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.GetManagedThunkForUnmanagedMethodPtr\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.GetNativeVariantForObject\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.GetNativeVariantForObject&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.GetObjectForIUnknown\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.GetStartComSlot\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.GetThreadFromFiberCookie\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.GetTypeForITypeInfo\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.GetTypeFromCLSID\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.GetTypeInfoName\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.GetTypeLibGuid\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.GetTypeLibGuidForAssembly\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.GetTypeLibLcid\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.GetTypeLibName\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.GetTypeLibVersionForAssembly\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.GetUnmanagedThunkForManagedMethodPtr\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.IsComObject\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.IsTypeVisibleFromCom\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.NumParamBytes\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.OffsetOf\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.OffsetOf&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.Prelink\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.PrelinkAll\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.PtrToStringAnsi\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.PtrToStringAuto\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.PtrToStringBSTR\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.PtrToStringUni\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.PtrToStructure\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.PtrToStructure&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.QueryInterface\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.ReadByte\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.ReadInt16\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.ReadInt32\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.ReadInt64\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.ReadIntPtr\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.ReAllocHGlobal\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.Release\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.ReleaseComObject\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.ReleaseThreadCache\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.SecureStringToBSTR\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.SetComObjectData\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.SizeOf\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.SizeOf&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.StringToBSTR\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.StringToHGlobalAuto\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.StringToHGlobalUni\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.StructureToPtr\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.StructureToPtr&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.SystemDefaultCharSize\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.ThrowExceptionForHR\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.WriteByte\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.WriteInt16\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.WriteInt32\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.WriteInt64\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.WriteIntPtr\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.ZeroFreeBSTR\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"c7ce25df-605d-bc7f-0690-966b7a85f063\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides a collection of methods for allocating unmanaged memory, copying unmanaged memory blocks, and converting managed to unmanaged types, as well as other miscellaneous methods used when interact…\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Runtime.InteropServices/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Runtime.InteropServices.Marshal\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Runtime.InteropServices.Marshal.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Runtime.InteropServices.Marshal.yml","open_to_public_contributors":true,"api_name":["System.Runtime.InteropServices.Marshal","System.Runtime.InteropServices.Marshal.AddRef","System.Runtime.InteropServices.Marshal.AllocCoTaskMem","System.Runtime.InteropServices.Marshal.AllocHGlobal","System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup","System.Runtime.InteropServices.Marshal.BindToMoniker","System.Runtime.InteropServices.Marshal.ChangeWrapperHandleStrength","System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext","System.Runtime.InteropServices.Marshal.Copy","System.Runtime.InteropServices.Marshal.CreateAggregatedObject","System.Runtime.InteropServices.Marshal.CreateAggregatedObject<T>","System.Runtime.InteropServices.Marshal.CreateWrapperOfType","System.Runtime.InteropServices.Marshal.CreateWrapperOfType<T,TWrapper>","System.Runtime.InteropServices.Marshal.DestroyStructure","System.Runtime.InteropServices.Marshal.DestroyStructure<T>","System.Runtime.InteropServices.Marshal.FinalReleaseComObject","System.Runtime.InteropServices.Marshal.FreeBSTR","System.Runtime.InteropServices.Marshal.FreeCoTaskMem","System.Runtime.InteropServices.Marshal.FreeHGlobal","System.Runtime.InteropServices.Marshal.GenerateGuidForType","System.Runtime.InteropServices.Marshal.GenerateProgIdForType","System.Runtime.InteropServices.Marshal.GetActiveObject","System.Runtime.InteropServices.Marshal.GetComInterfaceForObject","System.Runtime.InteropServices.Marshal.GetComInterfaceForObject<T,TInterface>","System.Runtime.InteropServices.Marshal.GetComInterfaceForObjectInContext","System.Runtime.InteropServices.Marshal.GetComObjectData","System.Runtime.InteropServices.Marshal.GetComSlotForMethodInfo","System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer","System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer<TDelegate>","System.Runtime.InteropServices.Marshal.GetEndComSlot","System.Runtime.InteropServices.Marshal.GetExceptionCode","System.Runtime.InteropServices.Marshal.GetExceptionForHR","System.Runtime.InteropServices.Marshal.GetExceptionPointers","System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate","System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate<TDelegate>","System.Runtime.InteropServices.Marshal.GetHINSTANCE","System.Runtime.InteropServices.Marshal.GetHRForException","System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error","System.Runtime.InteropServices.Marshal.GetIDispatchForObject","System.Runtime.InteropServices.Marshal.GetIDispatchForObjectInContext","System.Runtime.InteropServices.Marshal.GetITypeInfoForType","System.Runtime.InteropServices.Marshal.GetIUnknownForObject","System.Runtime.InteropServices.Marshal.GetIUnknownForObjectInContext","System.Runtime.InteropServices.Marshal.GetLastWin32Error","System.Runtime.InteropServices.Marshal.GetManagedThunkForUnmanagedMethodPtr","System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot","System.Runtime.InteropServices.Marshal.GetNativeVariantForObject","System.Runtime.InteropServices.Marshal.GetNativeVariantForObject<T>","System.Runtime.InteropServices.Marshal.GetObjectForIUnknown","System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant","System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant<T>","System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants","System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants<T>","System.Runtime.InteropServices.Marshal.GetStartComSlot","System.Runtime.InteropServices.Marshal.GetThreadFromFiberCookie","System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown","System.Runtime.InteropServices.Marshal.GetTypeForITypeInfo","System.Runtime.InteropServices.Marshal.GetTypeFromCLSID","System.Runtime.InteropServices.Marshal.GetTypeInfoName","System.Runtime.InteropServices.Marshal.GetTypeLibGuid","System.Runtime.InteropServices.Marshal.GetTypeLibGuidForAssembly","System.Runtime.InteropServices.Marshal.GetTypeLibLcid","System.Runtime.InteropServices.Marshal.GetTypeLibName","System.Runtime.InteropServices.Marshal.GetTypeLibVersionForAssembly","System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown","System.Runtime.InteropServices.Marshal.GetUnmanagedThunkForManagedMethodPtr","System.Runtime.InteropServices.Marshal.IsComObject","System.Runtime.InteropServices.Marshal.IsTypeVisibleFromCom","System.Runtime.InteropServices.Marshal.NumParamBytes","System.Runtime.InteropServices.Marshal.OffsetOf","System.Runtime.InteropServices.Marshal.OffsetOf<T>","System.Runtime.InteropServices.Marshal.Prelink","System.Runtime.InteropServices.Marshal.PrelinkAll","System.Runtime.InteropServices.Marshal.PtrToStringAnsi","System.Runtime.InteropServices.Marshal.PtrToStringAuto","System.Runtime.InteropServices.Marshal.PtrToStringBSTR","System.Runtime.InteropServices.Marshal.PtrToStringUni","System.Runtime.InteropServices.Marshal.PtrToStructure","System.Runtime.InteropServices.Marshal.PtrToStructure<T>","System.Runtime.InteropServices.Marshal.QueryInterface","System.Runtime.InteropServices.Marshal.ReadByte","System.Runtime.InteropServices.Marshal.ReadInt16","System.Runtime.InteropServices.Marshal.ReadInt32","System.Runtime.InteropServices.Marshal.ReadInt64","System.Runtime.InteropServices.Marshal.ReadIntPtr","System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem","System.Runtime.InteropServices.Marshal.ReAllocHGlobal","System.Runtime.InteropServices.Marshal.Release","System.Runtime.InteropServices.Marshal.ReleaseComObject","System.Runtime.InteropServices.Marshal.ReleaseThreadCache","System.Runtime.InteropServices.Marshal.SecureStringToBSTR","System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi","System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode","System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi","System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode","System.Runtime.InteropServices.Marshal.SetComObjectData","System.Runtime.InteropServices.Marshal.SizeOf","System.Runtime.InteropServices.Marshal.SizeOf<T>","System.Runtime.InteropServices.Marshal.StringToBSTR","System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi","System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto","System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni","System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi","System.Runtime.InteropServices.Marshal.StringToHGlobalAuto","System.Runtime.InteropServices.Marshal.StringToHGlobalUni","System.Runtime.InteropServices.Marshal.StructureToPtr","System.Runtime.InteropServices.Marshal.StructureToPtr<T>","System.Runtime.InteropServices.Marshal.SystemDefaultCharSize","System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize","System.Runtime.InteropServices.Marshal.ThrowExceptionForHR","System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement","System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement<T>","System.Runtime.InteropServices.Marshal.WriteByte","System.Runtime.InteropServices.Marshal.WriteInt16","System.Runtime.InteropServices.Marshal.WriteInt32","System.Runtime.InteropServices.Marshal.WriteInt64","System.Runtime.InteropServices.Marshal.WriteIntPtr","System.Runtime.InteropServices.Marshal.ZeroFreeBSTR","System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi","System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode","System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi","System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Runtime.InteropServices.Marshal","System::Runtime::InteropServices::Marshal","System.Runtime.InteropServices.Marshal.AddRef","System::Runtime::InteropServices::Marshal::AddRef","System.Runtime.InteropServices.Marshal.AllocCoTaskMem","System::Runtime::InteropServices::Marshal::AllocCoTaskMem","System.Runtime.InteropServices.Marshal.AllocHGlobal","System::Runtime::InteropServices::Marshal::AllocHGlobal","System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup","System::Runtime::InteropServices::Marshal::AreComObjectsAvailableForCleanup","System.Runtime.InteropServices.Marshal.BindToMoniker","System::Runtime::InteropServices::Marshal::BindToMoniker","System.Runtime.InteropServices.Marshal.ChangeWrapperHandleStrength","System::Runtime::InteropServices::Marshal::ChangeWrapperHandleStrength","System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext","System::Runtime::InteropServices::Marshal::CleanupUnusedObjectsInCurrentContext","System.Runtime.InteropServices.Marshal.Copy","System::Runtime::InteropServices::Marshal::Copy","System.Runtime.InteropServices.Marshal.CreateAggregatedObject","System::Runtime::InteropServices::Marshal::CreateAggregatedObject","System.Runtime.InteropServices.Marshal.CreateAggregatedObject``1","System::Runtime::InteropServices::Marshal::CreateAggregatedObject``1","System.Runtime.InteropServices.Marshal.CreateWrapperOfType","System::Runtime::InteropServices::Marshal::CreateWrapperOfType","System.Runtime.InteropServices.Marshal.CreateWrapperOfType``2","System::Runtime::InteropServices::Marshal::CreateWrapperOfType``2","System.Runtime.InteropServices.Marshal.DestroyStructure","System::Runtime::InteropServices::Marshal::DestroyStructure","System.Runtime.InteropServices.Marshal.DestroyStructure``1","System::Runtime::InteropServices::Marshal::DestroyStructure``1","System.Runtime.InteropServices.Marshal.FinalReleaseComObject","System::Runtime::InteropServices::Marshal::FinalReleaseComObject","System.Runtime.InteropServices.Marshal.FreeBSTR","System::Runtime::InteropServices::Marshal::FreeBSTR","System.Runtime.InteropServices.Marshal.FreeCoTaskMem","System::Runtime::InteropServices::Marshal::FreeCoTaskMem","System.Runtime.InteropServices.Marshal.FreeHGlobal","System::Runtime::InteropServices::Marshal::FreeHGlobal","System.Runtime.InteropServices.Marshal.GenerateGuidForType","System::Runtime::InteropServices::Marshal::GenerateGuidForType","System.Runtime.InteropServices.Marshal.GenerateProgIdForType","System::Runtime::InteropServices::Marshal::GenerateProgIdForType","System.Runtime.InteropServices.Marshal.GetActiveObject","System::Runtime::InteropServices::Marshal::GetActiveObject","System.Runtime.InteropServices.Marshal.GetComInterfaceForObject","System::Runtime::InteropServices::Marshal::GetComInterfaceForObject","System.Runtime.InteropServices.Marshal.GetComInterfaceForObject``2","System::Runtime::InteropServices::Marshal::GetComInterfaceForObject``2","System.Runtime.InteropServices.Marshal.GetComInterfaceForObjectInContext","System::Runtime::InteropServices::Marshal::GetComInterfaceForObjectInContext","System.Runtime.InteropServices.Marshal.GetComObjectData","System::Runtime::InteropServices::Marshal::GetComObjectData","System.Runtime.InteropServices.Marshal.GetComSlotForMethodInfo","System::Runtime::InteropServices::Marshal::GetComSlotForMethodInfo","System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer","System::Runtime::InteropServices::Marshal::GetDelegateForFunctionPointer","System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer``1","System::Runtime::InteropServices::Marshal::GetDelegateForFunctionPointer``1","System.Runtime.InteropServices.Marshal.GetEndComSlot","System::Runtime::InteropServices::Marshal::GetEndComSlot","System.Runtime.InteropServices.Marshal.GetExceptionCode","System::Runtime::InteropServices::Marshal::GetExceptionCode","System.Runtime.InteropServices.Marshal.GetExceptionForHR","System::Runtime::InteropServices::Marshal::GetExceptionForHR","System.Runtime.InteropServices.Marshal.GetExceptionPointers","System::Runtime::InteropServices::Marshal::GetExceptionPointers","System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate","System::Runtime::InteropServices::Marshal::GetFunctionPointerForDelegate","System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate``1","System::Runtime::InteropServices::Marshal::GetFunctionPointerForDelegate``1","System.Runtime.InteropServices.Marshal.GetHINSTANCE","System::Runtime::InteropServices::Marshal::GetHINSTANCE","System.Runtime.InteropServices.Marshal.GetHRForException","System::Runtime::InteropServices::Marshal::GetHRForException","System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error","System::Runtime::InteropServices::Marshal::GetHRForLastWin32Error","System.Runtime.InteropServices.Marshal.GetIDispatchForObject","System::Runtime::InteropServices::Marshal::GetIDispatchForObject","System.Runtime.InteropServices.Marshal.GetIDispatchForObjectInContext","System::Runtime::InteropServices::Marshal::GetIDispatchForObjectInContext","System.Runtime.InteropServices.Marshal.GetITypeInfoForType","System::Runtime::InteropServices::Marshal::GetITypeInfoForType","System.Runtime.InteropServices.Marshal.GetIUnknownForObject","System::Runtime::InteropServices::Marshal::GetIUnknownForObject","System.Runtime.InteropServices.Marshal.GetIUnknownForObjectInContext","System::Runtime::InteropServices::Marshal::GetIUnknownForObjectInContext","System.Runtime.InteropServices.Marshal.GetLastWin32Error","System::Runtime::InteropServices::Marshal::GetLastWin32Error","System.Runtime.InteropServices.Marshal.GetManagedThunkForUnmanagedMethodPtr","System::Runtime::InteropServices::Marshal::GetManagedThunkForUnmanagedMethodPtr","System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot","System::Runtime::InteropServices::Marshal::GetMethodInfoForComSlot","System.Runtime.InteropServices.Marshal.GetNativeVariantForObject","System::Runtime::InteropServices::Marshal::GetNativeVariantForObject","System.Runtime.InteropServices.Marshal.GetNativeVariantForObject``1","System::Runtime::InteropServices::Marshal::GetNativeVariantForObject``1","System.Runtime.InteropServices.Marshal.GetObjectForIUnknown","System::Runtime::InteropServices::Marshal::GetObjectForIUnknown","System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant","System::Runtime::InteropServices::Marshal::GetObjectForNativeVariant","System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant``1","System::Runtime::InteropServices::Marshal::GetObjectForNativeVariant``1","System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants","System::Runtime::InteropServices::Marshal::GetObjectsForNativeVariants","System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants``1","System::Runtime::InteropServices::Marshal::GetObjectsForNativeVariants``1","System.Runtime.InteropServices.Marshal.GetStartComSlot","System::Runtime::InteropServices::Marshal::GetStartComSlot","System.Runtime.InteropServices.Marshal.GetThreadFromFiberCookie","System::Runtime::InteropServices::Marshal::GetThreadFromFiberCookie","System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown","System::Runtime::InteropServices::Marshal::GetTypedObjectForIUnknown","System.Runtime.InteropServices.Marshal.GetTypeForITypeInfo","System::Runtime::InteropServices::Marshal::GetTypeForITypeInfo","System.Runtime.InteropServices.Marshal.GetTypeFromCLSID","System::Runtime::InteropServices::Marshal::GetTypeFromCLSID","System.Runtime.InteropServices.Marshal.GetTypeInfoName","System::Runtime::InteropServices::Marshal::GetTypeInfoName","System.Runtime.InteropServices.Marshal.GetTypeLibGuid","System::Runtime::InteropServices::Marshal::GetTypeLibGuid","System.Runtime.InteropServices.Marshal.GetTypeLibGuidForAssembly","System::Runtime::InteropServices::Marshal::GetTypeLibGuidForAssembly","System.Runtime.InteropServices.Marshal.GetTypeLibLcid","System::Runtime::InteropServices::Marshal::GetTypeLibLcid","System.Runtime.InteropServices.Marshal.GetTypeLibName","System::Runtime::InteropServices::Marshal::GetTypeLibName","System.Runtime.InteropServices.Marshal.GetTypeLibVersionForAssembly","System::Runtime::InteropServices::Marshal::GetTypeLibVersionForAssembly","System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown","System::Runtime::InteropServices::Marshal::GetUniqueObjectForIUnknown","System.Runtime.InteropServices.Marshal.GetUnmanagedThunkForManagedMethodPtr","System::Runtime::InteropServices::Marshal::GetUnmanagedThunkForManagedMethodPtr","System.Runtime.InteropServices.Marshal.IsComObject","System::Runtime::InteropServices::Marshal::IsComObject","System.Runtime.InteropServices.Marshal.IsTypeVisibleFromCom","System::Runtime::InteropServices::Marshal::IsTypeVisibleFromCom","System.Runtime.InteropServices.Marshal.NumParamBytes","System::Runtime::InteropServices::Marshal::NumParamBytes","System.Runtime.InteropServices.Marshal.OffsetOf","System::Runtime::InteropServices::Marshal::OffsetOf","System.Runtime.InteropServices.Marshal.OffsetOf``1","System::Runtime::InteropServices::Marshal::OffsetOf``1","System.Runtime.InteropServices.Marshal.Prelink","System::Runtime::InteropServices::Marshal::Prelink","System.Runtime.InteropServices.Marshal.PrelinkAll","System::Runtime::InteropServices::Marshal::PrelinkAll","System.Runtime.InteropServices.Marshal.PtrToStringAnsi","System::Runtime::InteropServices::Marshal::PtrToStringAnsi","System.Runtime.InteropServices.Marshal.PtrToStringAuto","System::Runtime::InteropServices::Marshal::PtrToStringAuto","System.Runtime.InteropServices.Marshal.PtrToStringBSTR","System::Runtime::InteropServices::Marshal::PtrToStringBSTR","System.Runtime.InteropServices.Marshal.PtrToStringUni","System::Runtime::InteropServices::Marshal::PtrToStringUni","System.Runtime.InteropServices.Marshal.PtrToStructure","System::Runtime::InteropServices::Marshal::PtrToStructure","System.Runtime.InteropServices.Marshal.PtrToStructure``1","System::Runtime::InteropServices::Marshal::PtrToStructure``1","System.Runtime.InteropServices.Marshal.QueryInterface","System::Runtime::InteropServices::Marshal::QueryInterface","System.Runtime.InteropServices.Marshal.ReadByte","System::Runtime::InteropServices::Marshal::ReadByte","System.Runtime.InteropServices.Marshal.ReadInt16","System::Runtime::InteropServices::Marshal::ReadInt16","System.Runtime.InteropServices.Marshal.ReadInt32","System::Runtime::InteropServices::Marshal::ReadInt32","System.Runtime.InteropServices.Marshal.ReadInt64","System::Runtime::InteropServices::Marshal::ReadInt64","System.Runtime.InteropServices.Marshal.ReadIntPtr","System::Runtime::InteropServices::Marshal::ReadIntPtr","System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem","System::Runtime::InteropServices::Marshal::ReAllocCoTaskMem","System.Runtime.InteropServices.Marshal.ReAllocHGlobal","System::Runtime::InteropServices::Marshal::ReAllocHGlobal","System.Runtime.InteropServices.Marshal.Release","System::Runtime::InteropServices::Marshal::Release","System.Runtime.InteropServices.Marshal.ReleaseComObject","System::Runtime::InteropServices::Marshal::ReleaseComObject","System.Runtime.InteropServices.Marshal.ReleaseThreadCache","System::Runtime::InteropServices::Marshal::ReleaseThreadCache","System.Runtime.InteropServices.Marshal.SecureStringToBSTR","System::Runtime::InteropServices::Marshal::SecureStringToBSTR","System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi","System::Runtime::InteropServices::Marshal::SecureStringToCoTaskMemAnsi","System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode","System::Runtime::InteropServices::Marshal::SecureStringToCoTaskMemUnicode","System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi","System::Runtime::InteropServices::Marshal::SecureStringToGlobalAllocAnsi","System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode","System::Runtime::InteropServices::Marshal::SecureStringToGlobalAllocUnicode","System.Runtime.InteropServices.Marshal.SetComObjectData","System::Runtime::InteropServices::Marshal::SetComObjectData","System.Runtime.InteropServices.Marshal.SizeOf","System::Runtime::InteropServices::Marshal::SizeOf","System.Runtime.InteropServices.Marshal.SizeOf``1","System::Runtime::InteropServices::Marshal::SizeOf``1","System.Runtime.InteropServices.Marshal.StringToBSTR","System::Runtime::InteropServices::Marshal::StringToBSTR","System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi","System::Runtime::InteropServices::Marshal::StringToCoTaskMemAnsi","System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto","System::Runtime::InteropServices::Marshal::StringToCoTaskMemAuto","System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni","System::Runtime::InteropServices::Marshal::StringToCoTaskMemUni","System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi","System::Runtime::InteropServices::Marshal::StringToHGlobalAnsi","System.Runtime.InteropServices.Marshal.StringToHGlobalAuto","System::Runtime::InteropServices::Marshal::StringToHGlobalAuto","System.Runtime.InteropServices.Marshal.StringToHGlobalUni","System::Runtime::InteropServices::Marshal::StringToHGlobalUni","System.Runtime.InteropServices.Marshal.StructureToPtr","System::Runtime::InteropServices::Marshal::StructureToPtr","System.Runtime.InteropServices.Marshal.StructureToPtr``1","System::Runtime::InteropServices::Marshal::StructureToPtr``1","System.Runtime.InteropServices.Marshal.SystemDefaultCharSize","System::Runtime::InteropServices::Marshal::SystemDefaultCharSize","System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize","System::Runtime::InteropServices::Marshal::SystemMaxDBCSCharSize","System.Runtime.InteropServices.Marshal.ThrowExceptionForHR","System::Runtime::InteropServices::Marshal::ThrowExceptionForHR","System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement","System::Runtime::InteropServices::Marshal::UnsafeAddrOfPinnedArrayElement","System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement``1","System::Runtime::InteropServices::Marshal::UnsafeAddrOfPinnedArrayElement``1","System.Runtime.InteropServices.Marshal.WriteByte","System::Runtime::InteropServices::Marshal::WriteByte","System.Runtime.InteropServices.Marshal.WriteInt16","System::Runtime::InteropServices::Marshal::WriteInt16","System.Runtime.InteropServices.Marshal.WriteInt32","System::Runtime::InteropServices::Marshal::WriteInt32","System.Runtime.InteropServices.Marshal.WriteInt64","System::Runtime::InteropServices::Marshal::WriteInt64","System.Runtime.InteropServices.Marshal.WriteIntPtr","System::Runtime::InteropServices::Marshal::WriteIntPtr","System.Runtime.InteropServices.Marshal.ZeroFreeBSTR","System::Runtime::InteropServices::Marshal::ZeroFreeBSTR","System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi","System::Runtime::InteropServices::Marshal::ZeroFreeCoTaskMemAnsi","System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode","System::Runtime::InteropServices::Marshal::ZeroFreeCoTaskMemUnicode","System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi","System::Runtime::InteropServices::Marshal::ZeroFreeGlobalAllocAnsi","System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode","System::Runtime::InteropServices::Marshal::ZeroFreeGlobalAllocUnicode"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"c7ce25df-605d-bc7f-0690-966b7a85f063","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Runtime.InteropServices/Marshal.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Marshal class | Microsoft Docs","_op_ogTitle":"Marshal class","description":"Provides a collection of methods for allocating unmanaged memory, copying unmanaged memory blocks, and converting managed to unmanaged types, as well as other miscellaneous methods used when interact…","toc_asset_id":"_splitted/System.Runtime.InteropServices/toc.json","toc_rel":"_splitted/System.Runtime.InteropServices/toc.json","source_url":"","ms.assetid":"System.Runtime.InteropServices.Marshal","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.runtime.interopservices.marshal","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.runtime.interopservices.marshal","fileRelativePath":"System.Runtime.InteropServices.Marshal.html"},"themesRelativePathToOutputRoot":"_themes/"}