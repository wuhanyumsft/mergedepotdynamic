{"content":"    \r\n    <h1 id=\"System_Workflow_Runtime_WorkflowInstance\">\r\n      <span class=\"lang-csharp\">WorkflowInstance</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a workflow instance.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Obsolete(&quot;The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*&quot;)]\npublic sealed class WorkflowInstance</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">WorkflowInstance</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <div class=\"NOTE\"><h5>Note</h5><p> This material discusses types and namespaces that are obsolete. For more information, see <a href=\"http://aka.ms/wfdeprecatedtypes\" data-linktype=\"external\">Deprecated Types in Windows Workflow Foundation 4.5</a>.  </p>\n</div>\n<p> The WorkflowInstance class exposes methods and properties that can be used to control the execution of a workflow instance; it is essentially a proxy to the actual workflow instance used by the workflow runtime engine. A host or a service can instruct the workflow runtime engine to perform actions on a workflow instance by calling the appropriate methods that are contained in the WorkflowInstance class.  If the requested action is not valid, for example, if the host calls <a class=\"xref\" href=\"system.workflow.runtime.workflowinstance#System_Workflow_Runtime_WorkflowInstance_Load_\" data-linktype=\"relative-path\">Load</a> on a workflow instance that has already completed, the workflow runtime engine will raise an appropriate exception.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If a workflow instance becomes unresponsive because a call on the host application does not return, the only way to recover the instance is to restart the runtime. However, if the instance has been forcibly unloaded, aborted, or suspended, it can be continued by calling the <a class=\"xref\" href=\"system.workflow.runtime.workflowinstance#System_Workflow_Runtime_WorkflowInstance_Resume_\" data-linktype=\"relative-path\">Resume</a> method.</p>\n</div>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Workflow_Runtime_WorkflowInstance_InstanceId\" data-linktype=\"self-bookmark\">InstanceId</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the unique identifier for the workflow instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Workflow_Runtime_WorkflowInstance_WorkflowRuntime\" data-linktype=\"self-bookmark\">WorkflowRuntime</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.workflow.runtime.workflowruntime\" data-linktype=\"relative-path\">WorkflowRuntime</a> for this workflow instance.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Workflow_Runtime_WorkflowInstance_Abort\" data-linktype=\"self-bookmark\">Abort()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Aborts the workflow instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Workflow_Runtime_WorkflowInstance_ApplyWorkflowChanges_System_Workflow_ComponentModel_WorkflowChanges_\" data-linktype=\"self-bookmark\">ApplyWorkflowChanges(WorkflowChanges)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Applies changes to the workflow instance specified by the <a class=\"xref\" href=\"system.workflow.componentmodel.workflowchanges\" data-linktype=\"relative-path\">WorkflowChanges</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Workflow_Runtime_WorkflowInstance_EnqueueItem_System_IComparable_System_Object_System_Workflow_Runtime_IPendingWork_System_Object_\" data-linktype=\"self-bookmark\">EnqueueItem(IComparable,Object,IPendingWork,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Posts a message to the specified workflow queue synchronously.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Workflow_Runtime_WorkflowInstance_EnqueueItemOnIdle_System_IComparable_System_Object_System_Workflow_Runtime_IPendingWork_System_Object_\" data-linktype=\"self-bookmark\">EnqueueItemOnIdle(IComparable,Object,IPendingWork,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Posts a message to the specified workflow queue when the workflow is idle. EnqueueItemOnIdle waits until the workflow reaches an idle point and enqueues after verifying that the workflow scheduler is idle (that is, no active operation is being executed).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Workflow_Runtime_WorkflowInstance_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value that indicates whether the specified object is equal to the <a class=\"xref\" href=\"system.workflow.runtime.workflowinstance\" data-linktype=\"relative-path\">WorkflowInstance</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Workflow_Runtime_WorkflowInstance_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the hash code for this workflow instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Workflow_Runtime_WorkflowInstance_GetWorkflowDefinition\" data-linktype=\"self-bookmark\">GetWorkflowDefinition()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the root activity for this workflow instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Workflow_Runtime_WorkflowInstance_GetWorkflowNextTimerExpiration\" data-linktype=\"self-bookmark\">GetWorkflowNextTimerExpiration()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the next point in time that this <a class=\"xref\" href=\"system.workflow.runtime.workflowinstance\" data-linktype=\"relative-path\">WorkflowInstance</a> is scheduled to be delivered a timer message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Workflow_Runtime_WorkflowInstance_GetWorkflowQueueData\" data-linktype=\"self-bookmark\">GetWorkflowQueueData()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a collection of <a class=\"xref\" href=\"system.workflow.runtime.workflowqueueinfo\" data-linktype=\"relative-path\">WorkflowQueueInfo</a> objects that contains the pending items and subscribed activities for the workflow queues associated with this workflow instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Workflow_Runtime_WorkflowInstance_Load\" data-linktype=\"self-bookmark\">Load()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads a previously unloaded workflow instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Workflow_Runtime_WorkflowInstance_ReloadTrackingProfiles\" data-linktype=\"self-bookmark\">ReloadTrackingProfiles()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reload the tracking profiles for this workflow instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Workflow_Runtime_WorkflowInstance_Resume\" data-linktype=\"self-bookmark\">Resume()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Resumes execution of a previously suspended workflow instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Workflow_Runtime_WorkflowInstance_Start\" data-linktype=\"self-bookmark\">Start()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Starts the execution of the workflow instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Workflow_Runtime_WorkflowInstance_Suspend_System_String_\" data-linktype=\"self-bookmark\">Suspend(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Suspends the workflow instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Workflow_Runtime_WorkflowInstance_Terminate_System_String_\" data-linktype=\"self-bookmark\">Terminate(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Terminates the workflow instance in a synchronous manner.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Workflow_Runtime_WorkflowInstance_TryUnload\" data-linktype=\"self-bookmark\">TryUnload()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Unloads the workflow instance from memory to the persistence store when the instance is suspended or idle.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Workflow_Runtime_WorkflowInstance_Unload\" data-linktype=\"self-bookmark\">Unload()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Unloads the workflow instance from memory to the persistence store. This call blocks until after the currently scheduled work is finished, or the end of a transaction scope.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Workflow_Runtime_WorkflowInstance_InstanceId\">\r\n    \r\n            <a id=\"System_Workflow_Runtime_WorkflowInstance_InstanceId_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InstanceId</div>        \r\n          </div>\r\n    \r\n            <p>Gets the unique identifier for the workflow instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Guid InstanceId { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a> of the workflow instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can use InstanceId to reference the workflow instance.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how you can use the InstanceId property to obtain information about a <a class=\"xref\" href=\"system.workflow.runtime.workflowinstance\" data-linktype=\"relative-path\">WorkflowInstance</a> object. The first code snippet creates a <a class=\"xref\" href=\"system.workflow.runtime.workflowinstance\" data-linktype=\"relative-path\">WorkflowInstance</a> variable named <code>instanceId</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"WF_Samples#210\">string orderId;\npublic WorkflowInstance instanceId;\n</code></pre><pre><code class=\"lang-vb\" name=\"WF_Samples#210\">Dim orderId As String\nPublic instanceId As WorkflowInstance\n</code></pre><p> The second snippet uses the InstanceId property as the first object in an <code>OrderEventArgs</code> constructor call when the <code>CallBackForApproval</code> method is called.  </p>\n<p> This code example is part of the Listen SDK Sample from the OrderServiceImple.cs file. For more information, see <a href=\"http://msdn.microsoft.com/en-us/1cec0e82-7544-429f-b717-0fc25eb42b7f\" data-linktype=\"external\">Listen Sample</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"WF_Samples#211\">public void ApproveOrder()\n{\n    EventHandler&lt;OrderEventArgs&gt; orderApproved = this.OrderApproved;\n    if (orderApproved != null)\n        orderApproved(null, new OrderEventArgs(instanceId.InstanceId, orderId));\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"WF_Samples#211\">Public Sub ApproveOrder()\n    RaiseEvent OrderApproved(Nothing, New OrderEventArgs(instanceId.InstanceId, orderId))\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Workflow_Runtime_WorkflowInstance_WorkflowRuntime\">\r\n    \r\n            <a id=\"System_Workflow_Runtime_WorkflowInstance_WorkflowRuntime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WorkflowRuntime</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.workflow.runtime.workflowruntime\" data-linktype=\"relative-path\">WorkflowRuntime</a> for this workflow instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Workflow.Runtime.WorkflowRuntime WorkflowRuntime { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.workflow.runtime.workflowruntime\" data-linktype=\"relative-path\">WorkflowRuntime</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.workflow.runtime.workflowruntime\" data-linktype=\"relative-path\">WorkflowRuntime</a> that represents the execution environment in which this workflow instance is running.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates accessing the executing <a class=\"xref\" href=\"system.workflow.runtime.workflowruntime\" data-linktype=\"relative-path\">WorkflowRuntime</a> of a <a class=\"xref\" href=\"system.workflow.runtime.workflowinstance\" data-linktype=\"relative-path\">WorkflowInstance</a> object.  </p>\n<pre><code class=\"lang-cs\" name=\"WF_Samples#7\">// Create the main workflow runtime\nWorkflowRuntime runtime = new WorkflowRuntime();\n// Create a workflow instance\nWorkflowInstance workflowInstance = runtime.CreateWorkflow(typeof(Workflow1));\n// Obtain a reference to the instance&#39;s parent runtime\nWorkflowRuntime runtime2 = workflowInstance.WorkflowRuntime;\n</code></pre><pre><code class=\"lang-vb\" name=\"WF_Samples#7\">&#39; Create the main workflow runtime\nDim runtime As New WorkflowRuntime()\n&#39; Create a workflow instance\nDim workflowInstance As WorkflowInstance = runtime.CreateWorkflow(GetType(Workflow1))\n&#39; Obtain a reference to the instance&#39;s parent runtime\nDim runtime2 As WorkflowRuntime = workflowInstance.WorkflowRuntime\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Workflow_Runtime_WorkflowInstance_Abort\">\r\n    \r\n            <a id=\"System_Workflow_Runtime_WorkflowInstance_Abort_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Abort()</div>        \r\n          </div>\r\n    \r\n            <p>Aborts the workflow instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Abort ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The workflow runtime engine is not running.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The workflow instance is aborted in a synchronous manner; that is, the method returns after the workflow instance has been aborted. The workflow runtime engine invalidates the workflow instance in memory and clears the <a class=\"xref\" href=\"system.workflow.runtime.workflowenvironment#System_Workflow_Runtime_WorkflowEnvironment_WorkBatch_\" data-linktype=\"relative-path\">WorkBatch</a>. If a persistence service was used by your workflow instance, all work performed since the last persistence point is thrown away. After it aborts the workflow instance, the workflow runtime engine raises the <a class=\"xref\" href=\"system.workflow.runtime.workflowruntime#System_Workflow_Runtime_WorkflowRuntime_WorkflowAborted\" data-linktype=\"relative-path\">WorkflowAborted</a> event. You can call <a class=\"xref\" href=\"system.workflow.runtime.workflowruntime#System_Workflow_Runtime_WorkflowRuntime_GetWorkflow_\" data-linktype=\"relative-path\">GetWorkflow</a> to reload the workflow instance and start from its last persistence point.  </p>\n<p> <code>Abort</code> is different from <a class=\"xref\" href=\"system.workflow.runtime.workflowinstance#System_Workflow_Runtime_WorkflowInstance_Terminate_\" data-linktype=\"relative-path\">Terminate</a> in that while <code>Abort</code> simply clears the in-memory workflow instance and can be restarted from the last persistence point, Terminate clears the in-memory workflow instance and informs the persistence service that the instance has been cleared from memory. For the <a class=\"xref\" href=\"system.workflow.runtime.hosting.sqlworkflowpersistenceservice\" data-linktype=\"relative-path\">SqlWorkflowPersistenceService</a>, this means that all state information for that workflow instance is deleted from the database upon termination. You will not be able to reload the workflow instance from a previously stored persistence point.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates calling Abort on a workflow instance of type Workflow1.  </p>\n<pre><code class=\"lang-cs\" name=\"WF_Samples#13\">//Create a workflow runtime\nWorkflowRuntime workflowRuntime = new WorkflowRuntime();\n//Create a workflow instance\nWorkflowInstance instance = workflowRuntime.CreateWorkflow(typeof(Workflow1));\n//Start the instance\ninstance.Start();\n//Abort the instance\ninstance.Abort();\n</code></pre><pre><code class=\"lang-vb\" name=\"WF_Samples#13\">&#39;Create a workflow runtime\nDim workflowRuntime As New WorkflowRuntime()\n&#39;Create a workflow instance\nDim workflowInstance As WorkflowInstance = workflowRuntime.CreateWorkflow(GetType(Workflow1))\n&#39;Start the instance\nworkflowInstance.Start()\n&#39;Abort the instance\nworkflowInstance.Abort()\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Workflow_Runtime_WorkflowInstance_ApplyWorkflowChanges_System_Workflow_ComponentModel_WorkflowChanges_\">\r\n    \r\n            <a id=\"System_Workflow_Runtime_WorkflowInstance_ApplyWorkflowChanges_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ApplyWorkflowChanges(WorkflowChanges)</div>        \r\n          </div>\r\n    \r\n            <p>Applies changes to the workflow instance specified by the <a class=\"xref\" href=\"system.workflow.componentmodel.workflowchanges\" data-linktype=\"relative-path\">WorkflowChanges</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ApplyWorkflowChanges (System.Workflow.ComponentModel.WorkflowChanges workflowChanges);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>workflowChanges</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.workflow.componentmodel.workflowchanges\" data-linktype=\"relative-path\">WorkflowChanges</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.workflow.componentmodel.workflowchanges\" data-linktype=\"relative-path\">WorkflowChanges</a> specifying dynamic updates for the workflow instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The workflow runtime engine is not running.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the workflow instance is not already suspended, the workflow runtime engine temporarily suspends the instance before applying the changes.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates calling ApplyWorkflowChanges to a <a class=\"xref\" href=\"system.workflow.runtime.workflowinstance\" data-linktype=\"relative-path\">WorkflowInstance</a> object.  This example is from the Ordering State Machine SDK sample, from the Mainform.cs file.  For more information, see the <a href=\"http://msdn.microsoft.com/en-us/59272cf4-bc98-439c-bcfa-b66999ebce5c\" data-linktype=\"external\">Ordering State Machine Sample</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"WF_Samples#89\">// Apply the changes to the workflow instance\ntry\n{\n    instance.ApplyWorkflowChanges(changes);\n}\ncatch (WorkflowValidationFailedException)\n{\n    // New state has already been added\n    MessageBox.Show(&quot;On Hold state has already been added to this workflow.&quot;);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"WF_Samples#89\">&#39; Apply the changes to the workflow instance\nTry\n    instance.ApplyWorkflowChanges(changes)\nCatch e As WorkflowValidationFailedException\n    &#39; New state has already been added\n    MessageBox.Show(&quot;On Hold state has already been added to this workflow.&quot;)\nEnd Try\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Workflow_Runtime_WorkflowInstance_EnqueueItem_System_IComparable_System_Object_System_Workflow_Runtime_IPendingWork_System_Object_\">\r\n    \r\n            <a id=\"System_Workflow_Runtime_WorkflowInstance_EnqueueItem_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EnqueueItem(IComparable,Object,IPendingWork,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Posts a message to the specified workflow queue synchronously.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void EnqueueItem (IComparable queueName, object item, System.Workflow.Runtime.IPendingWork pendingWork, object workItem);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>queueName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the <a class=\"xref\" href=\"system.workflow.runtime.workflowqueue\" data-linktype=\"relative-path\">WorkflowQueue</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>item</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to enqueue.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pendingWork</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.workflow.runtime.ipendingwork\" data-linktype=\"relative-path\">IPendingWork</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.workflow.runtime.ipendingwork\" data-linktype=\"relative-path\">IPendingWork</a> that allows the sender to be notified when <code>item</code> is delivered.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>workItem</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to be passed to the <a class=\"xref\" href=\"system.workflow.runtime.ipendingwork\" data-linktype=\"relative-path\">IPendingWork</a> methods.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>queueName</code> is a null reference (<code>Nothing</code> in Visual Basic).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The workflow runtime engine is not running.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"system.workflow.runtime.workflowqueue\" data-linktype=\"relative-path\">WorkflowQueue</a> specified by <code>queueName</code> does not exist.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"system.workflow.runtime.workflowqueue\" data-linktype=\"relative-path\">WorkflowQueue</a> specified by <code>queueName</code> is not enabled.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Sends the <code>item</code> to the specified <a class=\"xref\" href=\"system.workflow.runtime.workflowqueue\" data-linktype=\"relative-path\">WorkflowQueue</a>. If you want to be notified when the message is delivered, you can implement <a class=\"xref\" href=\"system.workflow.runtime.ipendingwork\" data-linktype=\"relative-path\">IPendingWork</a> in your service and pass a <code>workItem</code> and an <a class=\"xref\" href=\"system.workflow.runtime.ipendingwork\" data-linktype=\"relative-path\">IPendingWork</a> object to EnqueueItem. If you do not want such notification, you can pass a null reference (<code>Nothing</code> in Visual Basic) for <code>pendingWork</code> and <code>workItem</code>.  </p>\n<p> When using this method with a state machine workflow, you might get an exception with the message &quot;Queue &#39;{0}&#39; is not enabled.&quot; This happens when the current state of the state machine does not know how to handle a specific event. For example, when some state other than the current state contains the <a class=\"xref\" href=\"system.workflow.activities.eventdrivenactivity\" data-linktype=\"relative-path\">EventDrivenActivity</a> that contains the <a class=\"xref\" href=\"system.workflow.activities.handleexternaleventactivity\" data-linktype=\"relative-path\">HandleExternalEventActivity</a> that is represented by the queue &#39;{0}&#39;.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Messages are not guaranteed to be received by the workflow instance in the order that they were sent. For example, if receiving a message in an existing queue (Queue A) causes a workflow to create another queue (Queue B), which then listens for another message sent after the first message, it is possible that the second message will arrive first, and will not be received due to its queue not being created yet. To prevent this issue, the second message should not be sent until the presence of the second queue is verified (using <a class=\"xref\" href=\"system.workflow.runtime.workflowinstance#System_Workflow_Runtime_WorkflowInstance_GetWorkflowQueueData_\" data-linktype=\"relative-path\">GetWorkflowQueueData</a>.)</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use EnqueueItem. When the <a class=\"xref\" href=\"system.workflow.runtime.workflowruntime#System_Workflow_Runtime_WorkflowRuntime_WorkflowIdled\" data-linktype=\"relative-path\">WorkflowIdled</a> event occurs, the <code>OnWorkflowIdled</code> method defined in this example is called. It determines which workflow is idled using the <a class=\"xref\" href=\"system.workflow.runtime.workfloweventargs#System_Workflow_Runtime_WorkflowEventArgs_WorkflowInstance_\" data-linktype=\"relative-path\">WorkflowInstance</a> property and then gets a collection of queued items for the workflow instance by calling the <a class=\"xref\" href=\"system.workflow.runtime.workflowinstance#System_Workflow_Runtime_WorkflowInstance_GetWorkflowQueueData_\" data-linktype=\"relative-path\">GetWorkflowQueueData</a> method. The code iterates over the collection to determine which activity is waiting for the event that idled the workflow. It then sends an exception to the workflow queue using the EnqueueItem method along with the name of the event queue item.  </p>\n<p> This code example is part of the Canceling a Workflow SDK sample from the Program.cs file. For more information, see <a href=\"http://msdn.microsoft.com/en-us/d5077f56-a78b-48e7-825c-f6c77c8e54fb\" data-linktype=\"external\">Canceling a Workflow</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"WF_Samples#261\">static void OnWorkflowIdled(object sender, WorkflowEventArgs e)\n{\n    WorkflowInstance workflow = e.WorkflowInstance;\n\n    Console.WriteLine(&quot;<br>...waiting for 3 seconds... <br>&quot;);\n    Thread.Sleep(3000);\n\n    // what activity is blocking the workflow\n    ReadOnlyCollection&lt;WorkflowQueueInfo&gt; wqi = workflow.GetWorkflowQueueData();\n    foreach (WorkflowQueueInfo q in wqi)\n    {\n        EventQueueName eq = q.QueueName as EventQueueName;\n        if (eq != null)\n        {\n            // get activity that is waiting for event\n            ReadOnlyCollection&lt;string&gt; blockedActivity = q.SubscribedActivityNames;\n            Console.WriteLine(&quot;Host: Workflow is blocked on &quot; + blockedActivity[0]);\n\n            // this event is never going to arrive eg. employee left the company\n            // lets send an exception to this queue\n            // it will either be handled by exception handler that was modeled in workflow\n            // or the runtime will unwind running compensation handlers and exit the workflow\n            Console.WriteLine(&quot;Host: This event is not going to arrive&quot;);\n            Console.WriteLine(&quot;Host: Cancel workflow with unhandled exception&quot;);\n            workflow.EnqueueItem(q.QueueName, new Exception(&quot;ExitWorkflowException&quot;), null, null);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"WF_Samples#261\">Shared Sub OnWorkflowIdled(ByVal sender As Object, ByVal e As WorkflowEventArgs)\n    Dim workflow As WorkflowInstance = e.WorkflowInstance\n\n    Console.WriteLine(vbCrLf + &quot;...waiting for 3 seconds... &quot; + vbCrLf)\n    Thread.Sleep(3000)\n\n    &#39; what activity is blocking the workflow\n    Dim wqi As ReadOnlyCollection(Of WorkflowQueueInfo) = workflow.GetWorkflowQueueData()\n    For Each q As WorkflowQueueInfo In wqi\n\n        Dim eq As EventQueueName = TryCast(q.QueueName, EventQueueName)\n\n        If eq IsNot Nothing Then\n            &#39; get activity that is waiting for event\n            Dim blockedActivity As ReadOnlyCollection(Of String) = q.SubscribedActivityNames\n            Console.WriteLine(&quot;Host: Workflow is blocked on &quot; + blockedActivity(0))\n\n            &#39; this event is never going to arrive eg. employee left the company\n            &#39; lets send an exception to this queue\n            &#39; it will either be handled by exception handler that was modeled in workflow\n            &#39; or the runtime will unwind running compensation handlers and exit the workflow\n            Console.WriteLine(&quot;Host: This event is not going to arrive&quot;)\n            Console.WriteLine(&quot;Host: Cancel workflow with unhandled exception&quot;)\n            workflow.EnqueueItem(q.QueueName, New Exception(&quot;ExitWorkflowException&quot;), Nothing, Nothing)\n        End If\n    Next\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Workflow_Runtime_WorkflowInstance_EnqueueItemOnIdle_System_IComparable_System_Object_System_Workflow_Runtime_IPendingWork_System_Object_\">\r\n    \r\n            <a id=\"System_Workflow_Runtime_WorkflowInstance_EnqueueItemOnIdle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EnqueueItemOnIdle(IComparable,Object,IPendingWork,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Posts a message to the specified workflow queue when the workflow is idle. EnqueueItemOnIdle waits until the workflow reaches an idle point and enqueues after verifying that the workflow scheduler is idle (that is, no active operation is being executed).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void EnqueueItemOnIdle (IComparable queueName, object item, System.Workflow.Runtime.IPendingWork pendingWork, object workItem);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>queueName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the <a class=\"xref\" href=\"system.workflow.runtime.workflowqueue\" data-linktype=\"relative-path\">WorkflowQueue</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>item</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to enqueue.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pendingWork</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.workflow.runtime.ipendingwork\" data-linktype=\"relative-path\">IPendingWork</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.workflow.runtime.ipendingwork\" data-linktype=\"relative-path\">IPendingWork</a> that allows the sender to be notified when <code>item</code> is delivered.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>workItem</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to be passed to the <a class=\"xref\" href=\"system.workflow.runtime.ipendingwork\" data-linktype=\"relative-path\">IPendingWork</a> methods.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>queueName</code> is a null reference (<code>Nothing</code> in Visual Basic).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The workflow runtime engine is not running.  </p>\n<p> -or-  </p>\n<p> The workflow instance is suspended.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"system.workflow.runtime.workflowqueue\" data-linktype=\"relative-path\">WorkflowQueue</a> specified by <code>queueName</code> does not exist.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"system.workflow.runtime.workflowqueue\" data-linktype=\"relative-path\">WorkflowQueue</a> specified by <code>queueName</code> is not enabled.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Waits for the workflow instance to become idle and then sends the <code>item</code> to the specified <a class=\"xref\" href=\"system.workflow.runtime.workflowqueue\" data-linktype=\"relative-path\">WorkflowQueue</a>. If you call EnqueueItemOnIdle while the workflow instance is suspended, the workflow runtime engine will throw an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a>. If you want to be notified when the message is delivered, you can implement <a class=\"xref\" href=\"system.workflow.runtime.ipendingwork\" data-linktype=\"relative-path\">IPendingWork</a> in your service and pass a <code>workItem</code> and an <a class=\"xref\" href=\"system.workflow.runtime.ipendingwork\" data-linktype=\"relative-path\">IPendingWork</a> object to <a class=\"xref\" href=\"system.workflow.runtime.workflowinstance#System_Workflow_Runtime_WorkflowInstance_EnqueueItem_\" data-linktype=\"relative-path\">EnqueueItem</a>. If you do not want such notification, you can pass a null reference (<code>Nothing</code> in Visual Basic) for <code>pendingWork</code> and <code>workItem</code>.  </p>\n<p> When you are using this method with a state machine workflow, you might get an exception that contains the message &quot;Queue &#39;{0}&#39; is not enabled.&quot; This occurs when the current state of the state machine does not know how to handle a specific event. For example, when some state other than the current state contains the <a class=\"xref\" href=\"system.workflow.activities.eventdrivenactivity\" data-linktype=\"relative-path\">EventDrivenActivity</a> that contains the <a class=\"xref\" href=\"system.workflow.activities.handleexternaleventactivity\" data-linktype=\"relative-path\">HandleExternalEventActivity</a> that is represented by the queue &#39;{0}&#39;.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates sending information to a workflow instance using the <code>EnqueueItemOnIdle</code> method. First, a WorkflowInstance object is created and started; next, an object that implements the <a class=\"xref\" href=\"system.workflow.runtime.ipendingwork\" data-linktype=\"relative-path\">IPendingWork</a> interface is created. <code>EnqueueItemOnIdle</code> is then called, passing in string values for the queue name, the enqueued item, and the work item to be passed to the methods of the pendingWork object.  </p>\n<pre><code class=\"lang-cs\" name=\"WF_Samples#12\">// Create a workflow runtime environment\nWorkflowRuntime workflowRuntime = new WorkflowRuntime();\n// Create a new instance of the out-of-box SqlWorkflowPersistenceService.\n// Use the non-locking constructor, since we&#39;re only creating a single Workflow Runtime.\nNameValueCollection parameters = new NameValueCollection();\nparameters.Add(&quot;ConnectionString&quot;,\n    &quot;Initial Catalog=SqlPersistenceService;Data Source=localhost;Integrated Security=SSPI;&quot;);\n//Set UnloadOnIdle to true, so that the service will persist the workflow\nparameters.Add(&quot;UnloadOnIdle&quot;, &quot;true&quot;);\nSqlWorkflowPersistenceService persistenceService =\n   new SqlWorkflowPersistenceService(parameters);\n\n// Add the service to the runtime\nworkflowRuntime.AddService(persistenceService);\n// Create a WorkflowInstance object\nWorkflowInstance workflowInstance = workflowRuntime.CreateWorkflow(typeof(Workflow1));\n// Start the instance\nworkflowInstance.Start();\n// Create an instance of a class that implements IPendingWork for notification\nPendingService pendingWork = new PendingService();\n// Send the workflow the message\nworkflowInstance.EnqueueItemOnIdle(&quot;ActionQueue&quot;, &quot;StartWork&quot;, pendingWork, &quot;ActionItem&quot;);\n</code></pre><pre><code class=\"lang-vb\" name=\"WF_Samples#12\">&#39; Create a workflow runtime environment\nDim workflowRuntime As New WorkflowRuntime()\n&#39; Create a new instance of the out-of-box SqlWorkflowPersistenceService.\n&#39; Use the non-locking constructor, since we&#39;re only creating a single Workflow Runtime.\nDim parameters As New NameValueCollection()\nparameters.Add(&quot;ConnectionString&quot;, _\n    &quot;Initial Catalog=SqlPersistenceServiceData Source=localhostIntegrated Security=SSPI&quot;)\n&#39;Set UnloadOnIdle to true, so that the service will persist the workflow\nparameters.Add(&quot;UnloadOnIdle&quot;, &quot;true&quot;)\nDim persistenceService As _\n   New SqlWorkflowPersistenceService(parameters)\n\n&#39; Add the service to the runtime\nworkflowRuntime.AddService(persistenceService)\n&#39; Create a WorkflowInstance object\nDim workflowInstance As WorkflowInstance = workflowRuntime.CreateWorkflow(GetType(Workflow1))\n&#39; Start the instance\nworkflowInstance.Start()\n&#39; Create an instance of a class that implements IPendingWork for notification\nDim pendingWork As New PendingService()\n&#39; Send the workflow the message\nworkflowInstance.EnqueueItemOnIdle(&quot;ActionQueue&quot;, &quot;StartWork&quot;, pendingWork, &quot;ActionItem&quot;)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Workflow_Runtime_WorkflowInstance_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_Workflow_Runtime_WorkflowInstance_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value that indicates whether the specified object is equal to the <a class=\"xref\" href=\"system.workflow.runtime.workflowinstance\" data-linktype=\"relative-path\">WorkflowInstance</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the specified object is equal to this <a class=\"xref\" href=\"system.workflow.runtime.workflowinstance\" data-linktype=\"relative-path\">WorkflowInstance</a>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The object must be an instance of the <a class=\"xref\" href=\"system.workflow.runtime.workflowinstance\" data-linktype=\"relative-path\">WorkflowInstance</a> class and have the same <a class=\"xref\" href=\"system.workflow.runtime.workflowinstance#System_Workflow_Runtime_WorkflowInstance_InstanceId_\" data-linktype=\"relative-path\">InstanceId</a> as this <a class=\"xref\" href=\"system.workflow.runtime.workflowinstance\" data-linktype=\"relative-path\">WorkflowInstance</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Workflow_Runtime_WorkflowInstance_GetHashCode\">\r\n    \r\n            <a id=\"System_Workflow_Runtime_WorkflowInstance_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the hash code for this workflow instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The hash code for this <a class=\"xref\" href=\"system.workflow.runtime.workflowinstance\" data-linktype=\"relative-path\">WorkflowInstance</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>GetHashCode returns a hash code based on the value of <a class=\"xref\" href=\"system.workflow.runtime.workflowinstance#System_Workflow_Runtime_WorkflowInstance_InstanceId_\" data-linktype=\"relative-path\">InstanceId</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Workflow_Runtime_WorkflowInstance_GetWorkflowDefinition\">\r\n    \r\n            <a id=\"System_Workflow_Runtime_WorkflowInstance_GetWorkflowDefinition_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetWorkflowDefinition()</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the root activity for this workflow instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Workflow.ComponentModel.Activity GetWorkflowDefinition ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.workflow.componentmodel.activity\" data-linktype=\"relative-path\">Activity</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.workflow.componentmodel.activity\" data-linktype=\"relative-path\">Activity</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can use the root activity to navigate the activity hierarchy of the workflow.  </p>\n<p> This method is not thread safe, so the host should synchronize its calls to this method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates retrieving the workflow definition from a workflow instance.  This example is from the Ordering State Machine SDK sample, from the Mainform.cs file.  For more information, see the <a href=\"http://msdn.microsoft.com/en-us/59272cf4-bc98-439c-bcfa-b66999ebce5c\" data-linktype=\"external\">Ordering State Machine Sample</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"WF_Samples#86\">// Get a reference to the root activity for the workflow\nActivity root = instance.GetWorkflowDefinition();\n</code></pre><pre><code class=\"lang-vb\" name=\"WF_Samples#86\">&#39; Get a reference to the root activity for the workflow\nDim root As Activity = instance.GetWorkflowDefinition()\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Workflow_Runtime_WorkflowInstance_GetWorkflowNextTimerExpiration\">\r\n    \r\n            <a id=\"System_Workflow_Runtime_WorkflowInstance_GetWorkflowNextTimerExpiration_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetWorkflowNextTimerExpiration()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the next point in time that this <a class=\"xref\" href=\"system.workflow.runtime.workflowinstance\" data-linktype=\"relative-path\">WorkflowInstance</a> is scheduled to be delivered a timer message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public DateTime GetWorkflowNextTimerExpiration ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>A DateTime value that represents the next <span class=\"xref\">stem.Workflow.Runtime.TimerEventSubscription.ExpiresAt*</span> time this <a class=\"xref\" href=\"system.workflow.runtime.workflowinstance\" data-linktype=\"relative-path\">WorkflowInstance</a> will be delivered a timer message.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates using the GetWorkflowNextTimerExpiration method to determine if more workflow timer messages are enqueued. This example is from the WorkflowThreading SDK sample, from the Program.cs file. For more information, see <a href=\"http://msdn.microsoft.com/en-us/5b650be7-09fa-47db-a2f6-523dc8ea5ee9\" data-linktype=\"external\">Workflow Threading Sample</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"WF_Samples#284\">static void ReloadWorkflow(object state)\n{\n    if (workflowInstance.GetWorkflowNextTimerExpiration() &gt; DateTime.UtcNow)\n    {\n        SetReloadWorkflowTimer();\n    }\n    else\n    {\n        readyHandle.Set();\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"WF_Samples#284\">Shared Sub ReloadWorkflow(ByVal state As Object)\n    If workflowInstance.GetWorkflowNextTimerExpiration() &gt; DateTime.UtcNow Then\n        SetReloadWorkflowTimer()\n    Else\n        readyHandle.Set()\n    End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Workflow_Runtime_WorkflowInstance_GetWorkflowQueueData\">\r\n    \r\n            <a id=\"System_Workflow_Runtime_WorkflowInstance_GetWorkflowQueueData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetWorkflowQueueData()</div>        \r\n          </div>\r\n    \r\n            <p>Gets a collection of <a class=\"xref\" href=\"system.workflow.runtime.workflowqueueinfo\" data-linktype=\"relative-path\">WorkflowQueueInfo</a> objects that contains the pending items and subscribed activities for the workflow queues associated with this workflow instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.Runtime.WorkflowQueueInfo&gt; GetWorkflowQueueData ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.objectmodel.readonlycollection-1\" data-linktype=\"relative-path\">ReadOnlyCollection</a>&lt;<a class=\"xref\" href=\"system.workflow.runtime.workflowqueueinfo\" data-linktype=\"relative-path\">WorkflowQueueInfo</a>&gt;</div>\r\n                  </div>\r\n                  <p>A <span class=\"xref\">stem.Collections.ObjectModel.ReadOnlyCollection`1</span> of <a class=\"xref\" href=\"system.workflow.runtime.workflowqueueinfo\" data-linktype=\"relative-path\">WorkflowQueueInfo</a> objects.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The workflow runtime engine is not running.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>GetWorkflowQueueData returns a collection of <a class=\"xref\" href=\"system.workflow.runtime.workflowqueueinfo\" data-linktype=\"relative-path\">WorkflowQueueInfo</a> objects, each of which contains information about the state of one of the workflow queues associated with this workflow instance. <a class=\"xref\" href=\"system.workflow.runtime.workflowqueueinfo#System_Workflow_Runtime_WorkflowQueueInfo_Items_\" data-linktype=\"relative-path\">Items</a> contains the pending items for a <a class=\"xref\" href=\"system.workflow.runtime.workflowqueue\" data-linktype=\"relative-path\">WorkflowQueue</a> and <a class=\"xref\" href=\"system.workflow.runtime.workflowqueueinfo#System_Workflow_Runtime_WorkflowQueueInfo_SubscribedActivityNames_\" data-linktype=\"relative-path\">SubscribedActivityNames</a> contains a list of the activities that are subscribed for item delivery on a <a class=\"xref\" href=\"system.workflow.runtime.workflowqueue\" data-linktype=\"relative-path\">WorkflowQueue</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how you can use the GetWorkflowQueueData method to obtain information about the state of all workflow queues associated with a <a class=\"xref\" href=\"system.workflow.runtime.workflowinstance\" data-linktype=\"relative-path\">WorkflowInstance</a> object. When the <a class=\"xref\" href=\"system.workflow.runtime.workflowruntime#System_Workflow_Runtime_WorkflowRuntime_WorkflowIdled\" data-linktype=\"relative-path\">WorkflowIdled</a> event occurs, the <code>OnWorkflowIdled</code> method defined in this example is called. It determines which workflow is idled using the <a class=\"xref\" href=\"system.workflow.runtime.workfloweventargs#System_Workflow_Runtime_WorkflowEventArgs_WorkflowInstance_\" data-linktype=\"relative-path\">WorkflowInstance</a> property and then gets a collection of queued items for the workflow instance by calling the GetWorkflowQueueData method. The code iterates over the collection to determine which activity is waiting for the event that idled the workflow. It then sends an exception to the workflow queue using the <a class=\"xref\" href=\"system.workflow.runtime.workflowinstance#System_Workflow_Runtime_WorkflowInstance_EnqueueItem_\" data-linktype=\"relative-path\">EnqueueItem</a> method along with the name of the event queue item.  </p>\n<p> This code example is part of the Canceling a Workflow SDK sample from the Program.cs file. For more information, see <a href=\"http://msdn.microsoft.com/en-us/d5077f56-a78b-48e7-825c-f6c77c8e54fb\" data-linktype=\"external\">Canceling a Workflow</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"WF_Samples#261\">static void OnWorkflowIdled(object sender, WorkflowEventArgs e)\n{\n    WorkflowInstance workflow = e.WorkflowInstance;\n\n    Console.WriteLine(&quot;<br>...waiting for 3 seconds... <br>&quot;);\n    Thread.Sleep(3000);\n\n    // what activity is blocking the workflow\n    ReadOnlyCollection&lt;WorkflowQueueInfo&gt; wqi = workflow.GetWorkflowQueueData();\n    foreach (WorkflowQueueInfo q in wqi)\n    {\n        EventQueueName eq = q.QueueName as EventQueueName;\n        if (eq != null)\n        {\n            // get activity that is waiting for event\n            ReadOnlyCollection&lt;string&gt; blockedActivity = q.SubscribedActivityNames;\n            Console.WriteLine(&quot;Host: Workflow is blocked on &quot; + blockedActivity[0]);\n\n            // this event is never going to arrive eg. employee left the company\n            // lets send an exception to this queue\n            // it will either be handled by exception handler that was modeled in workflow\n            // or the runtime will unwind running compensation handlers and exit the workflow\n            Console.WriteLine(&quot;Host: This event is not going to arrive&quot;);\n            Console.WriteLine(&quot;Host: Cancel workflow with unhandled exception&quot;);\n            workflow.EnqueueItem(q.QueueName, new Exception(&quot;ExitWorkflowException&quot;), null, null);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"WF_Samples#261\">Shared Sub OnWorkflowIdled(ByVal sender As Object, ByVal e As WorkflowEventArgs)\n    Dim workflow As WorkflowInstance = e.WorkflowInstance\n\n    Console.WriteLine(vbCrLf + &quot;...waiting for 3 seconds... &quot; + vbCrLf)\n    Thread.Sleep(3000)\n\n    &#39; what activity is blocking the workflow\n    Dim wqi As ReadOnlyCollection(Of WorkflowQueueInfo) = workflow.GetWorkflowQueueData()\n    For Each q As WorkflowQueueInfo In wqi\n\n        Dim eq As EventQueueName = TryCast(q.QueueName, EventQueueName)\n\n        If eq IsNot Nothing Then\n            &#39; get activity that is waiting for event\n            Dim blockedActivity As ReadOnlyCollection(Of String) = q.SubscribedActivityNames\n            Console.WriteLine(&quot;Host: Workflow is blocked on &quot; + blockedActivity(0))\n\n            &#39; this event is never going to arrive eg. employee left the company\n            &#39; lets send an exception to this queue\n            &#39; it will either be handled by exception handler that was modeled in workflow\n            &#39; or the runtime will unwind running compensation handlers and exit the workflow\n            Console.WriteLine(&quot;Host: This event is not going to arrive&quot;)\n            Console.WriteLine(&quot;Host: Cancel workflow with unhandled exception&quot;)\n            workflow.EnqueueItem(q.QueueName, New Exception(&quot;ExitWorkflowException&quot;), Nothing, Nothing)\n        End If\n    Next\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Workflow_Runtime_WorkflowInstance_Load\">\r\n    \r\n            <a id=\"System_Workflow_Runtime_WorkflowInstance_Load_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Load()</div>        \r\n          </div>\r\n    \r\n            <p>Loads a previously unloaded workflow instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Load ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The workflow runtime engine is not running.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Load is synchronous; if the workflow instance can be loaded, Load will return after the workflow instance has been loaded into memory and scheduled by the workflow runtime engine. The runtime raises the <a class=\"xref\" href=\"system.workflow.runtime.workflowruntime#System_Workflow_Runtime_WorkflowRuntime_WorkflowLoaded\" data-linktype=\"relative-path\">WorkflowLoaded</a> event after the persistence service has restored the workflow instance in memory, but before the workflow runtime engine schedules the instance.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to load a previously unloaded <a class=\"xref\" href=\"system.workflow.runtime.workflowinstance\" data-linktype=\"relative-path\">WorkflowInstance</a> object.  </p>\n<pre><code class=\"lang-cs\" name=\"WF_Samples#10\">// Create a WorkflowRuntime object\nWorkflowRuntime workflowRuntime = new WorkflowRuntime();\n// Create a new instance of the out-of-box SqlWorkflowPersistenceService\nSqlWorkflowPersistenceService persistenceService =\n   new SqlWorkflowPersistenceService(\n   &quot;Initial Catalog=SqlPersistenceService;Data Source=localhost;Integrated Security=SSPI;&quot;);\n// Add the service to the runtime\nworkflowRuntime.AddService(persistenceService);\n// Create a WorkflowInstance object\nWorkflowInstance workflowInstance = workflowRuntime.CreateWorkflow(typeof(Workflow1));\n// Start the workflow instance\nworkflowInstance.Start();\n//Unload the instance\nworkflowInstance.Unload();\n//Reload the previously unloaded instance\nworkflowInstance.Load();\n</code></pre><pre><code class=\"lang-vb\" name=\"WF_Samples#10\">&#39; Create a WorkflowRuntime object\nDim workflowRuntime As New WorkflowRuntime()\n&#39; Create a new instance of the out-of-box SqlWorkflowPersistenceService\nDim persistenceService As _\n   New SqlWorkflowPersistenceService( _\n   &quot;Initial Catalog=SqlPersistenceServiceData Source=localhostIntegrated Security=SSPI&quot;)\n&#39; Add the service to the runtime\nworkflowRuntime.AddService(persistenceService)\n&#39; Create a WorkflowInstance object\nDim workflowInstance As WorkflowInstance = workflowRuntime.CreateWorkflow(GetType(Workflow1))\n&#39; Start the workflow instance\nworkflowInstance.Start()\n&#39;Unload the instance\nworkflowInstance.Unload()\n&#39;Reload the previously unloaded instance\nworkflowInstance.Load()\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Workflow_Runtime_WorkflowInstance_ReloadTrackingProfiles\">\r\n    \r\n            <a id=\"System_Workflow_Runtime_WorkflowInstance_ReloadTrackingProfiles_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReloadTrackingProfiles()</div>        \r\n          </div>\r\n    \r\n            <p>Reload the tracking profiles for this workflow instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ReloadTrackingProfiles ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The workflow runtime engine is not running.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The runtime tracking infrastructure will reload each <a class=\"xref\" href=\"system.workflow.runtime.tracking.trackingprofile\" data-linktype=\"relative-path\">TrackingProfile</a> for this workflow instance associated with its tracking channels. If it is not already in a suspended state, the workflow is temporarily suspended by the runtime tracking infrastructure while the tracking profiles are reloaded.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Workflow_Runtime_WorkflowInstance_Resume\">\r\n    \r\n            <a id=\"System_Workflow_Runtime_WorkflowInstance_Resume_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Resume()</div>        \r\n          </div>\r\n    \r\n            <p>Resumes execution of a previously suspended workflow instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Resume ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The workflow runtime engine is not running.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The host can call Resume to resume execution of a workflow instance that has been previously suspended. If the workflow instance is not in the suspended state, no action is taken. The runtime raises the <a class=\"xref\" href=\"system.workflow.runtime.workflowruntime#System_Workflow_Runtime_WorkflowRuntime_WorkflowResumed\" data-linktype=\"relative-path\">WorkflowResumed</a> event just before execution of the workflow instance is resumed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates calling Resume on a previously suspended workflow instance.  This example is from the Suspend and Terminate SDK sample.  For more information, see <a href=\"http://msdn.microsoft.com/en-us/f4dffa58-d01e-44fb-b5a1-3b283d2c4517\" data-linktype=\"external\">Suspend and Terminate Sample</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"WF_Samples#172\">if (workflowSuspended)\n{\n    Console.WriteLine(&quot;\\r<br>Resuming Workflow Instance&quot;);\n    workflowInstance.Resume();\n    waitHandle.WaitOne();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"WF_Samples#172\">If workflowSuspended Then\n    Console.WriteLine(&quot;\\r<br>Resuming Workflow Instance&quot;)\n    workflowInstance.Resume()\n    waitHandle.WaitOne()\nEnd If\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Workflow_Runtime_WorkflowInstance_Start\">\r\n    \r\n            <a id=\"System_Workflow_Runtime_WorkflowInstance_Start_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Start()</div>        \r\n          </div>\r\n    \r\n            <p>Starts the execution of the workflow instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Start ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The workflow runtime engine is not running.  </p>\n<p> -or-  </p>\n<p> The workflow instance has already been started.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Start calls <a class=\"xref\" href=\"system.workflow.componentmodel.activityexecutioncontext#System_Workflow_ComponentModel_ActivityExecutionContext_ExecuteActivity_\" data-linktype=\"relative-path\">ExecuteActivity</a> on the root activity of this workflow instance. If Start encounters an exception, it terminates the workflow instance by calling <a class=\"xref\" href=\"system.workflow.runtime.workflowinstance#System_Workflow_Runtime_WorkflowInstance_Terminate_\" data-linktype=\"relative-path\">Terminate</a> with the <a class=\"xref\" href=\"system.exception#System_Exception_Message_\" data-linktype=\"relative-path\">Message</a> property of the exception passed as the reason for the termination.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how you can use the Start method to start a <a class=\"xref\" href=\"system.workflow.runtime.workflowinstance\" data-linktype=\"relative-path\">WorkflowInstance</a> in a workflow host. The code creates an instance of the <a class=\"xref\" href=\"system.workflow.runtime.workflowruntime\" data-linktype=\"relative-path\">WorkflowRuntime</a>, adds services to the runtime, and then demonstrates the recommended way to create a <a class=\"xref\" href=\"system.workflow.runtime.workflowinstance\" data-linktype=\"relative-path\">WorkflowInstance</a> object. It creates a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object and casts it to one of the workflow objects with which the host is associated. The code next initializes <a class=\"xref\" href=\"system.workflow.runtime.workflowinstance\" data-linktype=\"relative-path\">WorkflowInstance</a> by calling the <a class=\"xref\" href=\"system.workflow.runtime.workflowruntime#System_Workflow_Runtime_WorkflowRuntime_CreateWorkflow_\" data-linktype=\"relative-path\">CreateWorkflow</a> method and passing the previously created type to it. The <a class=\"xref\" href=\"system.workflow.runtime.workflowinstance\" data-linktype=\"relative-path\">WorkflowInstance</a> is started with the Start method call.  </p>\n<p> This code example is part of the Canceling a Workflow SDK sample from the Program.cs file. For more information, see <a href=\"http://msdn.microsoft.com/en-us/d5077f56-a78b-48e7-825c-f6c77c8e54fb\" data-linktype=\"external\">Canceling a Workflow</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"WF_Samples#260\">Type type = typeof(SampleWorkflow1);\nWorkflowInstance workflowInstance = workflowRuntime.CreateWorkflow(type);\nworkflowInstance.Start();\n</code></pre><pre><code class=\"lang-vb\" name=\"WF_Samples#260\">Dim workflowInstance As WorkflowInstance\nworkflowInstance = workflowRuntime.CreateWorkflow(GetType(SampleWorkflow))\nworkflowInstance.Start()\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Workflow_Runtime_WorkflowInstance_Suspend_System_String_\">\r\n    \r\n            <a id=\"System_Workflow_Runtime_WorkflowInstance_Suspend_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Suspend(String)</div>        \r\n          </div>\r\n    \r\n            <p>Suspends the workflow instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Suspend (string error);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>error</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A description of the reason for suspending the workflow instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The workflow runtime engine is not running.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The workflow instance is suspended in a synchronous manner. If the workflow instance is already suspended, no action is taken; otherwise, the workflow runtime engine suspends the workflow instance, raises the <a class=\"xref\" href=\"system.workflow.runtime.workflowruntime#System_Workflow_Runtime_WorkflowRuntime_WorkflowSuspended\" data-linktype=\"relative-path\">WorkflowSuspended</a> event and passes <code>reason</code> in a <a class=\"xref\" href=\"system.workflow.runtime.workflowsuspendedeventargs\" data-linktype=\"relative-path\">WorkflowSuspendedEventArgs</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Suspend does not unload the workflow instance.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates calling Suspend on a <a class=\"xref\" href=\"system.workflow.runtime.workflowinstance\" data-linktype=\"relative-path\">WorkflowInstance</a> object.  </p>\n<pre><code class=\"lang-cs\" name=\"WF_Samples#9\">// Create a workflow runtime\nWorkflowRuntime workflowRuntime = new WorkflowRuntime();\n// Create a workflow instance\nWorkflowInstance workflowInstance = workflowRuntime.CreateWorkflow(typeof(Workflow1));\n// Start the workflow\nworkflowInstance.Start();\n// Suspend the workflow, passing in a message\nworkflowInstance.Suspend(&quot;Workflow manually suspended&quot;);\n</code></pre><pre><code class=\"lang-vb\" name=\"WF_Samples#9\">&#39; Create a workflow runtime\nDim workflowRuntime As New WorkflowRuntime()\n&#39; Create a workflow instance\nDim workflowInstance As WorkflowInstance = workflowRuntime.CreateWorkflow(GetType(Workflow1))\n&#39; Start the workflow\nworkflowInstance.Start()\n&#39; Suspend the workflow, passing in a message\nworkflowInstance.Suspend(&quot;Workflow manually suspended&quot;)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Workflow_Runtime_WorkflowInstance_Terminate_System_String_\">\r\n    \r\n            <a id=\"System_Workflow_Runtime_WorkflowInstance_Terminate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Terminate(String)</div>        \r\n          </div>\r\n    \r\n            <p>Terminates the workflow instance in a synchronous manner.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Terminate (string error);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>error</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A description of the reason for terminating the workflow instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The workflow runtime engine is not running.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The workflow instance is terminated in a synchronous manner. The host calls Terminate to terminate the workflow instance. The workflow runtime engine clears the in-memory workflow instance and informs the persistence service that the instance has been cleared from memory. For the <a class=\"xref\" href=\"system.workflow.runtime.hosting.sqlworkflowpersistenceservice\" data-linktype=\"relative-path\">SqlWorkflowPersistenceService</a>, this means that all state information for that workflow instance is deleted from the database upon termination. You will not be able to reload the workflow instance from a previously stored persistence point.  </p>\n<p> After the in-memory workflow instance is cleared and the persistence service is informed of the termination, the <code>Terminate</code> method raises the <a class=\"xref\" href=\"system.workflow.runtime.workflowruntime#System_Workflow_Runtime_WorkflowRuntime_WorkflowTerminated\" data-linktype=\"relative-path\">WorkflowTerminated</a> event and passes <code>reason</code> in the <a class=\"xref\" href=\"system.exception#System_Exception_Message_\" data-linktype=\"relative-path\">Message</a> property of a <a class=\"xref\" href=\"system.workflow.componentmodel.workflowterminatedexception\" data-linktype=\"relative-path\">WorkflowTerminatedException</a> contained in the <a class=\"xref\" href=\"system.workflow.runtime.workflowterminatedeventargs\" data-linktype=\"relative-path\">WorkflowTerminatedEventArgs</a>.  </p>\n<p> <code>Terminate</code> is different from <a class=\"xref\" href=\"system.workflow.runtime.workflowinstance#System_Workflow_Runtime_WorkflowInstance_Abort_\" data-linktype=\"relative-path\">Abort</a> in that while Terminate clears the in-memory workflow instance and informs the persistence service of the termination, <code>Abort</code> simply clears the in-memory workflow instance, which can then be restarted from the last persistence point.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates calling Terminate on a <a class=\"xref\" href=\"system.workflow.runtime.workflowinstance\" data-linktype=\"relative-path\">WorkflowInstance</a> object.  </p>\n<pre><code class=\"lang-cs\" name=\"WF_Samples#8\">// Create a workflow runtime\nWorkflowRuntime workflowRuntime = new WorkflowRuntime();\n// Create a workflow instance\nWorkflowInstance workflowInstance = workflowRuntime.CreateWorkflow(typeof(Workflow1));\n// Start the workflow\nworkflowInstance.Start();\n// Terminate the workflow, passing in a message\nworkflowInstance.Terminate(&quot;Workflow manually terminated&quot;);\n</code></pre><pre><code class=\"lang-vb\" name=\"WF_Samples#8\">&#39; Create a workflow runtime\nDim workflowRuntime As New WorkflowRuntime()\n&#39; Create a workflow instance\nDim workflowInstance As WorkflowInstance = workflowRuntime.CreateWorkflow(GetType(Workflow1))\n&#39; Start the workflow\nworkflowInstance.Start()\n&#39; Terminate the workflow, passing in a message\nworkflowInstance.Terminate(&quot;Workflow manually terminated&quot;)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Workflow_Runtime_WorkflowInstance_TryUnload\">\r\n    \r\n            <a id=\"System_Workflow_Runtime_WorkflowInstance_TryUnload_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryUnload()</div>        \r\n          </div>\r\n    \r\n            <p>Unloads the workflow instance from memory to the persistence store when the instance is suspended or idle.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool TryUnload ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the workflow instance was unloaded; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>There is no persistence service registered with the workflow runtime engine.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the workflow instance is idle or suspended, TryUnload uses the persistence service to remove the workflow instance from memory and persist it to a data store. If there is no persistence service registered with the <a class=\"xref\" href=\"system.workflow.runtime.workflowruntime\" data-linktype=\"relative-path\">WorkflowRuntime</a>, TryUnload throws an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a>. If the workflow instance is successfully persisted, the runtime raises the <a class=\"xref\" href=\"system.workflow.runtime.workflowruntime#System_Workflow_Runtime_WorkflowRuntime_WorkflowUnloaded\" data-linktype=\"relative-path\">WorkflowUnloaded</a> event, and returns <code>true</code>. <a class=\"xref\" href=\"system.workflow.runtime.workflowinstance#System_Workflow_Runtime_WorkflowInstance_Unload_\" data-linktype=\"relative-path\">Unload</a> returns <code>false</code> if the workflow instance has already been unloaded, has been terminated, has been aborted, or has already completed.  </p>\n<p> The host can use TryUnload to reclaim system resources from an idle workflow.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates using the TryUnload method to unload a workflow when the <a class=\"xref\" href=\"system.workflow.runtime.workflowruntime#System_Workflow_Runtime_WorkflowRuntime_WorkflowIdled\" data-linktype=\"relative-path\">WorkflowIdled</a> event fires. This example is from the Using Persistence Services SDK sample, from the Program.cs file. For more information, see <a href=\"http://msdn.microsoft.com/en-us/3176b7e7-ae49-4d5c-802b-85032d6ebde6\" data-linktype=\"external\">Using Persistence Services Sample</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"WF_Samples#280\">//Called when the workflow is idle - in this sample this occurs when the workflow is waiting on the\n// delay1 activity to expire\nstatic void OnWorkflowIdled(object sender, WorkflowEventArgs e)\n{\n    Console.WriteLine(&quot;Workflow is idle.&quot;);\n    e.WorkflowInstance.TryUnload();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"WF_Samples#280\">&#39;Called when the workflow is idle - in me sample me occurs when the workflow is waiting on the\n&#39; delay1 activity to expire\nShared Sub OnWorkflowIdled(ByVal sender As Object, ByVal e As WorkflowEventArgs)\n    Console.WriteLine(&quot;Workflow is idle.&quot;)\n    e.WorkflowInstance.TryUnload()\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Workflow_Runtime_WorkflowInstance_Unload\">\r\n    \r\n            <a id=\"System_Workflow_Runtime_WorkflowInstance_Unload_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Unload()</div>        \r\n          </div>\r\n    \r\n            <p>Unloads the workflow instance from memory to the persistence store. This call blocks until after the currently scheduled work is finished, or the end of a transaction scope.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Unload ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>There is no persistence service registered with the workflow runtime engine.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Unload is synchronous; that is, it returns after completing any action that it performs. If the workflow instance is not idle, the runtime waits until the instance can be interrupted. An instance can only be interrupted after the currently scheduled work item completes; this is typically when the currently running Activity returns from its <a class=\"xref\" href=\"system.workflow.componentmodel.activity#System_Workflow_ComponentModel_Activity_Execute_\" data-linktype=\"relative-path\">Execute</a> method. However, if the instance is executing a <a class=\"xref\" href=\"system.workflow.componentmodel.transactionscopeactivity\" data-linktype=\"relative-path\">TransactionScopeActivity</a>, the transaction scope must complete execution before the instance can be interrupted. Unload then uses the persistence service to remove the workflow instance from memory and persists it to a data store. If there is no persistence service registered with the <a class=\"xref\" href=\"system.workflow.runtime.workflowruntime\" data-linktype=\"relative-path\">WorkflowRuntime</a>, Unload throws an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a>. If the workflow instance is successfully persisted, the runtime raises the <a class=\"xref\" href=\"system.workflow.runtime.workflowruntime#System_Workflow_Runtime_WorkflowRuntime_WorkflowUnloaded\" data-linktype=\"relative-path\">WorkflowUnloaded</a> event.  </p>\n<p> The host can use Unload to reclaim system resources from an idle workflow.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates calling Unload on a <a class=\"xref\" href=\"system.workflow.runtime.workflowinstance\" data-linktype=\"relative-path\">WorkflowInstance</a> object.  </p>\n<pre><code class=\"lang-cs\" name=\"WF_Samples#11\">// Create a WorkflowRuntime object\nWorkflowRuntime workflowRuntime = new WorkflowRuntime();\n// Create a new instance of the out-of-box SqlWorkflowPersistenceService\nSqlWorkflowPersistenceService persistenceService =\n   new SqlWorkflowPersistenceService(\n   &quot;Initial Catalog=SqlPersistenceService;Data Source=localhost;Integrated Security=SSPI;&quot;);\n// Add the service to the runtime\nworkflowRuntime.AddService(persistenceService);\n// Create a WorkflowInstance object\nWorkflowInstance workflowInstance = workflowRuntime.CreateWorkflow(typeof(Workflow1));\n// Start the workflow instance\nworkflowInstance.Start();\n//Unload the instance\nworkflowInstance.Unload();\n</code></pre><pre><code class=\"lang-vb\" name=\"WF_Samples#11\">&#39; Create a WorkflowRuntime object\nDim workflowRuntime As New WorkflowRuntime()\n&#39; Create a new instance of the out-of-box SqlWorkflowPersistenceService\nDim persistenceService As _\n   New SqlWorkflowPersistenceService( _\n   &quot;Initial Catalog=SqlPersistenceServiceData Source=localhostIntegrated Security=SSPI&quot;)\n&#39; Add the service to the runtime\nworkflowRuntime.AddService(persistenceService)\n&#39; Create a WorkflowInstance object\nDim workflowInstance As WorkflowInstance = workflowRuntime.CreateWorkflow(GetType(Workflow1))\n&#39; Start the workflow instance\nworkflowInstance.Start()\n&#39;Unload the instance\nworkflowInstance.Unload()\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Workflow.Runtime.WorkflowInstance.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Workflow.Runtime.WorkflowInstance.yml\">\r\n<meta name=\"APIName\" content=\"System.Workflow.Runtime.WorkflowInstance\">\r\n<meta name=\"APIName\" content=\"System.Workflow.Runtime.WorkflowInstance.Abort\">\r\n<meta name=\"APIName\" content=\"System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges\">\r\n<meta name=\"APIName\" content=\"System.Workflow.Runtime.WorkflowInstance.EnqueueItem\">\r\n<meta name=\"APIName\" content=\"System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle\">\r\n<meta name=\"APIName\" content=\"System.Workflow.Runtime.WorkflowInstance.Equals\">\r\n<meta name=\"APIName\" content=\"System.Workflow.Runtime.WorkflowInstance.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition\">\r\n<meta name=\"APIName\" content=\"System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration\">\r\n<meta name=\"APIName\" content=\"System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData\">\r\n<meta name=\"APIName\" content=\"System.Workflow.Runtime.WorkflowInstance.InstanceId\">\r\n<meta name=\"APIName\" content=\"System.Workflow.Runtime.WorkflowInstance.Load\">\r\n<meta name=\"APIName\" content=\"System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles\">\r\n<meta name=\"APIName\" content=\"System.Workflow.Runtime.WorkflowInstance.Resume\">\r\n<meta name=\"APIName\" content=\"System.Workflow.Runtime.WorkflowInstance.Start\">\r\n<meta name=\"APIName\" content=\"System.Workflow.Runtime.WorkflowInstance.Suspend\">\r\n<meta name=\"APIName\" content=\"System.Workflow.Runtime.WorkflowInstance.Terminate\">\r\n<meta name=\"APIName\" content=\"System.Workflow.Runtime.WorkflowInstance.TryUnload\">\r\n<meta name=\"APIName\" content=\"System.Workflow.Runtime.WorkflowInstance.Unload\">\r\n<meta name=\"APIName\" content=\"System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime\">\r\n<meta name=\"APILocation\" content=\"System.Workflow.Runtime.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"153de9d9-85e6-ed1d-f984-33c2698187bb\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a workflow instance.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Workflow.Runtime/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Workflow.Runtime.WorkflowInstance\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Workflow.Runtime.WorkflowInstance.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Workflow.Runtime.WorkflowInstance.yml","open_to_public_contributors":true,"api_name":["System.Workflow.Runtime.WorkflowInstance","System.Workflow.Runtime.WorkflowInstance.Abort","System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges","System.Workflow.Runtime.WorkflowInstance.EnqueueItem","System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle","System.Workflow.Runtime.WorkflowInstance.Equals","System.Workflow.Runtime.WorkflowInstance.GetHashCode","System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition","System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration","System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData","System.Workflow.Runtime.WorkflowInstance.InstanceId","System.Workflow.Runtime.WorkflowInstance.Load","System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles","System.Workflow.Runtime.WorkflowInstance.Resume","System.Workflow.Runtime.WorkflowInstance.Start","System.Workflow.Runtime.WorkflowInstance.Suspend","System.Workflow.Runtime.WorkflowInstance.Terminate","System.Workflow.Runtime.WorkflowInstance.TryUnload","System.Workflow.Runtime.WorkflowInstance.Unload","System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime"],"api_location":["System.Workflow.Runtime.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Workflow.Runtime.WorkflowInstance","System::Workflow::Runtime::WorkflowInstance","System.Workflow.Runtime.WorkflowInstance.Abort","System::Workflow::Runtime::WorkflowInstance::Abort","System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges","System::Workflow::Runtime::WorkflowInstance::ApplyWorkflowChanges","System.Workflow.Runtime.WorkflowInstance.EnqueueItem","System::Workflow::Runtime::WorkflowInstance::EnqueueItem","System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle","System::Workflow::Runtime::WorkflowInstance::EnqueueItemOnIdle","System.Workflow.Runtime.WorkflowInstance.Equals","System::Workflow::Runtime::WorkflowInstance::Equals","System.Workflow.Runtime.WorkflowInstance.GetHashCode","System::Workflow::Runtime::WorkflowInstance::GetHashCode","System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition","System::Workflow::Runtime::WorkflowInstance::GetWorkflowDefinition","System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration","System::Workflow::Runtime::WorkflowInstance::GetWorkflowNextTimerExpiration","System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData","System::Workflow::Runtime::WorkflowInstance::GetWorkflowQueueData","System.Workflow.Runtime.WorkflowInstance.InstanceId","System::Workflow::Runtime::WorkflowInstance::InstanceId","System.Workflow.Runtime.WorkflowInstance.Load","System::Workflow::Runtime::WorkflowInstance::Load","System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles","System::Workflow::Runtime::WorkflowInstance::ReloadTrackingProfiles","System.Workflow.Runtime.WorkflowInstance.Resume","System::Workflow::Runtime::WorkflowInstance::Resume","System.Workflow.Runtime.WorkflowInstance.Start","System::Workflow::Runtime::WorkflowInstance::Start","System.Workflow.Runtime.WorkflowInstance.Suspend","System::Workflow::Runtime::WorkflowInstance::Suspend","System.Workflow.Runtime.WorkflowInstance.Terminate","System::Workflow::Runtime::WorkflowInstance::Terminate","System.Workflow.Runtime.WorkflowInstance.TryUnload","System::Workflow::Runtime::WorkflowInstance::TryUnload","System.Workflow.Runtime.WorkflowInstance.Unload","System::Workflow::Runtime::WorkflowInstance::Unload","System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime","System::Workflow::Runtime::WorkflowInstance::WorkflowRuntime"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"153de9d9-85e6-ed1d-f984-33c2698187bb","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Workflow.Runtime/WorkflowInstance.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"WorkflowInstance class | Microsoft Docs","_op_ogTitle":"WorkflowInstance class","description":"Represents a workflow instance.\n","toc_asset_id":"_splitted/System.Workflow.Runtime/toc.json","toc_rel":"_splitted/System.Workflow.Runtime/toc.json","source_url":"","ms.assetid":"System.Workflow.Runtime.WorkflowInstance","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.workflow.runtime.workflowinstance","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.workflow.runtime.workflowinstance","fileRelativePath":"System.Workflow.Runtime.WorkflowInstance.html"},"themesRelativePathToOutputRoot":"_themes/"}