{"content":"    \r\n    <h1 id=\"System_Func_3\">\r\n      <span class=\"lang-csharp\">Func&lt;T1,T2,TResult&gt;</span>\r\n        Delegate\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Encapsulates a method that has two parameters and returns a value of the type specified by the <code>TResult</code> parameter.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.CompilerServices.TypeForwardedFrom(&quot;System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089&quot;)]\npublic delegate TResult Func&lt;in T1,in T2,out TResult&gt;(T1 arg1, T2 arg2);</code></pre>\r\n    \r\n    \r\n    \t<h2>Type Parameters</h2>\r\n    \r\n    \t<table class=\"nameValue\">\r\n    \t\t<tr>\r\n    \t\t<td>\r\n    \t\tT1\r\n    \t\t</td>\r\n    \t\t<td>\r\n    \t\t<p>The type of the first parameter of the method that this delegate encapsulates.</p>\n\r\n    \t\t</td>\r\n    \t\t</tr>\r\n    \t\t<tr>\r\n    \t\t<td>\r\n    \t\tT2\r\n    \t\t</td>\r\n    \t\t<td>\r\n    \t\t<p>The type of the second parameter of the method that this delegate encapsulates.</p>\n\r\n    \t\t</td>\r\n    \t\t</tr>\r\n    \t\t<tr>\r\n    \t\t<td>\r\n    \t\tTResult\r\n    \t\t</td>\r\n    \t\t<td>\r\n    \t\t<p>The type of the return value of the method that this delegate encapsulates.</p>\n\r\n    \t\t</td>\r\n    \t\t</tr>\r\n    \t</table>\r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">System.Delegate</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Func&lt;T1,T2,TResult&gt;</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate. The encapsulated method must correspond to the method signature that is defined by this delegate. This means that the encapsulated method must have two parameters, each of which is passed to it by value, and that it must return a value.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To reference a method that has two parameters and returns <code>void</code> (or in Visual Basic, that is declared as a <code>Sub</code> rather than as a <code>Function</code>), use the generic <a class=\"xref\" href=\"system.action-2\" data-linktype=\"relative-path\">Action&lt;T1,T2&gt;</a> delegate instead.  </p>\n</div>\n<p> When you use the Func(T1, delegate you do not have to explicitly define a delegate that encapsulates a method with two parameters. For example, the following code explicitly declares a delegate named <code>ExtractMethod</code> and assigns a reference to the <code>ExtractWords</code> method to its delegate instance.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Func~3#1\">using System;\n\ndelegate string[] ExtractMethod(string stringToManipulate, int maximum);\n\npublic class DelegateExample\n{\n   public static void Main()\n   {\n      // Instantiate delegate to reference ExtractWords method\n      ExtractMethod extractMeth = ExtractWords;\n      string title = &quot;The Scarlet Letter&quot;;\n      // Use delegate instance to call ExtractWords method and display result\n      foreach (string word in extractMeth(title, 5))\n         Console.WriteLine(word);\n   }\n\n   private static string[] ExtractWords(string phrase, int limit)\n   {\n      char[] delimiters = new char[] {&#39; &#39;};\n      if (limit &gt; 0)\n         return phrase.Split(delimiters, limit);\n      else\n         return phrase.Split(delimiters);\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Func~3#1\">&#39; Declare a delegate to represent string extraction method\nDelegate Function ExtractMethod(ByVal stringToManipulate As String, _\n                                ByVal maximum As Integer) As String()\n\nModule DelegateExample\n   Public Sub Main()\n      &#39; Instantiate delegate to reference ExtractWords method\n      Dim extractMeth As ExtractMethod = AddressOf ExtractWords\n      Dim title As String = &quot;The Scarlet Letter&quot;\n      &#39; Use delegate instance to call ExtractWords method and display result\n      For Each word As String In extractMeth(title, 5)\n         Console.WriteLine(word)\n      Next   \n   End Sub\n\n   Private Function ExtractWords(phrase As String, limit As Integer) As String()\n      Dim delimiters() As Char = {&quot; &quot;c}\n      If limit &gt; 0 Then\n         Return phrase.Split(delimiters, limit)\n      Else\n         Return phrase.Split(delimiters)\n      End If\n   End Function\nEnd Module\n</code></pre><p> The following example simplifies this code by instantiating a Func(T1, delegate instead of explicitly defining a new delegate and assigning a named method to it.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Func~3#2\">Module GenericFunc\n   Public Sub Main()\n      &#39; Instantiate delegate to reference ExtractWords method\n      Dim extractMeth As Func(Of String, Integer, String()) = AddressOf ExtractWords\n      Dim title As String = &quot;The Scarlet Letter&quot;\n      &#39; Use delegate instance to call ExtractWords method and display result\n      For Each word As String In extractMeth(title, 5)\n         Console.WriteLine(word)\n      Next   \n   End Sub\n\n   Private Function ExtractWords(phrase As String, limit As Integer) As String()\n      Dim delimiters() As Char = {&quot; &quot;c}\n      If limit &gt; 0 Then\n         Return phrase.Split(delimiters, limit)\n      Else\n         Return phrase.Split(delimiters)\n      End If\n   End Function\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Func~3#2\">using System;\n\npublic class GenericFunc\n{\n   public static void Main()\n   {\n      // Instantiate delegate to reference ExtractWords method\n      Func&lt;string, int, string[]&gt; extractMethod = ExtractWords;\n      string title = &quot;The Scarlet Letter&quot;;\n      // Use delegate instance to call ExtractWords method and display result\n      foreach (string word in extractMethod(title, 5))\n         Console.WriteLine(word);\n   }\n\n   private static string[] ExtractWords(string phrase, int limit)\n   {\n      char[] delimiters = new char[] {&#39; &#39;};\n      if (limit &gt; 0)\n         return phrase.Split(delimiters, limit);\n      else\n         return phrase.Split(delimiters);\n   }\n}\n</code></pre><p> You can use the Func(T1, delegate with anonymous methods in C#, as the following example illustrates. (For an introduction to anonymous methods, see <a href=\"../Topic/Anonymous%20Methods%20(C%23%20Programming%20Guide).md\" data-linktype=\"relative-path\">Anonymous Methods</a>.)  </p>\n<pre><code class=\"lang-cs\" name=\"System.Func~3#3\">using System;\n\npublic class Anonymous\n{\n   public static void Main()\n   {\n      Func&lt;string, int, string[]&gt; extractMeth = delegate(string s, int i)\n         { char[] delimiters = new char[] {&#39; &#39;}; \n           return i &gt; 0 ? s.Split(delimiters, i) : s.Split(delimiters);\n         };\n      \n      string title = &quot;The Scarlet Letter&quot;;\n      // Use Func instance to call ExtractWords method and display result\n      foreach (string word in extractMeth(title, 5))\n         Console.WriteLine(word);\n   }\n}\n</code></pre><p> You can also assign a lambda expression to a Func(T1, delegate, as the following example illustrates. (For an introduction to lambda expressions, see <a href=\"../Topic/Lambda%20Expressions%20(Visual%20Basic).md\" data-linktype=\"relative-path\">Lambda Expressions</a> and <a href=\"../Topic/Lambda%20Expressions%20(C%23%20Programming%20Guide).md\" data-linktype=\"relative-path\">Lambda Expressions</a>.)  </p>\n<pre><code class=\"lang-cs\" name=\"System.Func~3#4\">using System;\n\npublic class LambdaExpression\n{\n   public static void Main()\n   {\n      char[] separators = new char[] {&#39; &#39;};\n      Func&lt;string, int, string[]&gt; extract = (s, i) =&gt; \n           i &gt; 0 ? s.Split(separators, i) : s.Split(separators) ;\n         \n      string title = &quot;The Scarlet Letter&quot;;\n      // Use Func instance to call ExtractWords method and display result\n      foreach (string word in extract(title, 5))\n         Console.WriteLine(word);\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Func~3#4\">Module LambdaExpression\n   Public Sub Main()\n      Dim separators() As Char = {&quot; &quot;c}\n      Dim extract As Func(Of String, Integer, String()) = Function(s, i) _\n          CType(iif(i &gt; 0, s.Split(separators, i), s.Split(separators)), String())  \n      \n      Dim title As String = &quot;The Scarlet Letter&quot;\n      For Each word As String In extract(title, 5)\n         Console.WriteLine(word)\n      Next   \n   End Sub\nEnd Module\n</code></pre><p> The underlying type of a lambda expression is one of the generic <code>Func</code> delegates. This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate. In particular, because many methods of types in the <a class=\"xref\" href=\"system.linq\" data-linktype=\"relative-path\">System.Linq</a> namespace have Func(T1, parameters, you can pass these methods a lambda expression without explicitly instantiating a Func(T1, delegate.</p>\n\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Func-3.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Func-3.yml\">\r\n<meta name=\"APIName\" content=\"System.Func&lt;T1,T2,TResult&gt;\">\r\n<meta name=\"APIName\" content=\"System.Func&lt;T1,T2,TResult&gt;..ctor\">\r\n<meta name=\"APIName\" content=\"System.Func&lt;T1,T2,TResult&gt;.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Func&lt;T1,T2,TResult&gt;.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Func&lt;T1,T2,TResult&gt;.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"53f311ab-e722-103f-85f0-5afe33dbb8e8\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Encapsulates a method that has two parameters and returns a value of the type specified by the TResult parameter.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Func`3\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Func-3.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Func-3.yml","open_to_public_contributors":true,"api_name":["System.Func<T1,T2,TResult>","System.Func<T1,T2,TResult>..ctor","System.Func<T1,T2,TResult>.Invoke","System.Func<T1,T2,TResult>.BeginInvoke","System.Func<T1,T2,TResult>.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Func`3","System::Func`3"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"53f311ab-e722-103f-85f0-5afe33dbb8e8","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/Func`3.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Func<T1,T2,TResult> delegate | Microsoft Docs","_op_ogTitle":"Func<T1,T2,TResult> delegate","description":"Encapsulates a method that has two parameters and returns a value of the type specified by the TResult parameter.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.Func`3","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.func-3","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.func-3","fileRelativePath":"System.Func-3.html"},"themesRelativePathToOutputRoot":"_themes/"}