{"content":"    \r\n    <h1 id=\"System_Text_UTF32Encoding\">\r\n      <span class=\"lang-csharp\">UTF32Encoding</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a UTF-32 encoding of Unicode characters.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public sealed class UTF32Encoding : System.Text.Encoding</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">System.Text.Encoding</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">UTF32Encoding</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_ASCII\" data-linktype=\"relative-path\">ASCII</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_BigEndianUnicode\" data-linktype=\"relative-path\">BigEndianUnicode</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_BodyName\" data-linktype=\"relative-path\">BodyName</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_Clone\" data-linktype=\"relative-path\">Clone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_CodePage\" data-linktype=\"relative-path\">CodePage</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_Convert_System_Text_Encoding_System_Text_Encoding_System_Byte___\" data-linktype=\"relative-path\">Convert(Encoding,Encoding,Byte[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_Convert_System_Text_Encoding_System_Text_Encoding_System_Byte___System_Int32_System_Int32_\" data-linktype=\"relative-path\">Convert(Encoding,Encoding,Byte[],Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_DecoderFallback\" data-linktype=\"relative-path\">DecoderFallback</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_Default\" data-linktype=\"relative-path\">Default</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_EncoderFallback\" data-linktype=\"relative-path\">EncoderFallback</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_EncodingName\" data-linktype=\"relative-path\">EncodingName</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetByteCount_System_Char___\" data-linktype=\"relative-path\">GetByteCount(Char[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_System_Char___\" data-linktype=\"relative-path\">GetBytes(Char[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_System_Char___System_Int32_System_Int32_\" data-linktype=\"relative-path\">GetBytes(Char[],Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_System_String_\" data-linktype=\"relative-path\">GetBytes(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetCharCount_System_Byte___\" data-linktype=\"relative-path\">GetCharCount(Byte[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetChars_System_Byte___\" data-linktype=\"relative-path\">GetChars(Byte[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetChars_System_Byte___System_Int32_System_Int32_\" data-linktype=\"relative-path\">GetChars(Byte[],Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncoding_System_Int32_\" data-linktype=\"relative-path\">GetEncoding(Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncoding_System_Int32_System_Text_EncoderFallback_System_Text_DecoderFallback_\" data-linktype=\"relative-path\">GetEncoding(Int32,EncoderFallback,DecoderFallback)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncoding_System_String_\" data-linktype=\"relative-path\">GetEncoding(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncoding_System_String_System_Text_EncoderFallback_System_Text_DecoderFallback_\" data-linktype=\"relative-path\">GetEncoding(String,EncoderFallback,DecoderFallback)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncodings\" data-linktype=\"relative-path\">GetEncodings()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetString_System_Byte__System_Int32_\" data-linktype=\"relative-path\">GetString(Byte*,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetString_System_Byte___\" data-linktype=\"relative-path\">GetString(Byte[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_HeaderName\" data-linktype=\"relative-path\">HeaderName</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_IsAlwaysNormalized\" data-linktype=\"relative-path\">IsAlwaysNormalized()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_IsAlwaysNormalized_System_Text_NormalizationForm_\" data-linktype=\"relative-path\">IsAlwaysNormalized(NormalizationForm)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_IsBrowserDisplay\" data-linktype=\"relative-path\">IsBrowserDisplay</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_IsBrowserSave\" data-linktype=\"relative-path\">IsBrowserSave</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_IsMailNewsDisplay\" data-linktype=\"relative-path\">IsMailNewsDisplay</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_IsMailNewsSave\" data-linktype=\"relative-path\">IsMailNewsSave</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_IsReadOnly\" data-linktype=\"relative-path\">IsReadOnly</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_IsSingleByte\" data-linktype=\"relative-path\">IsSingleByte</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_RegisterProvider_System_Text_EncodingProvider_\" data-linktype=\"relative-path\">RegisterProvider(EncodingProvider)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_Unicode\" data-linktype=\"relative-path\">Unicode</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_UTF32\" data-linktype=\"relative-path\">UTF32</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_UTF7\" data-linktype=\"relative-path\">UTF7</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_UTF8\" data-linktype=\"relative-path\">UTF8</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_WebName\" data-linktype=\"relative-path\">WebName</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_WindowsCodePage\" data-linktype=\"relative-path\">WindowsCodePage</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Encoding is the process of transforming a set of Unicode characters into a sequence of bytes. Decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.  </p>\n<p> The <a href=\"http://go.microsoft.com/fwlink/?linkid=37123\" data-linktype=\"external\">Unicode Standard</a> assigns a code point (a number) to each character in every supported script. A Unicode Transformation Format (UTF) is a way to encode that code point. The <a href=\"http://go.microsoft.com/fwlink/?linkid=37123\" data-linktype=\"external\">Unicode Standard</a> uses the following UTFs:  </p>\n<ul>\n<li><p>UTF-8, which represents each code point as a sequence of one to four bytes.  </p>\n</li>\n<li><p>UTF-16, which represents each code point as a sequence of one to two 16-bit integers.  </p>\n</li>\n<li><p>UTF-32, which represents each code point as a 32-bit integer.  </p>\n<p>For more information about the UTFs and other encodings supported by <a class=\"xref\" href=\"system.text\" data-linktype=\"relative-path\">System.Text</a>, see .  </p>\n<p>The UTF32Encoding class represents a UTF-32 encoding. The encoder can use the big endian byte order (most significant byte first) or the little endian byte order (least significant byte first). For example, the Latin Capital Letter A (code point U+0041) is serialized as follows (in hexadecimal):  </p>\n</li>\n<li><p>Big endian byte order: 00 00 00 41  </p>\n</li>\n<li><p>Little endian byte order: 41 00 00 00  </p>\n<p>It is generally more efficient to store Unicode characters using the native byte order. For example, it is better to use the little endian byte order on little endian platforms, such as Intel computers. UTF32Encoding corresponds to the Windows code pages 12000 (little endian byte order) and 12001 (big endian byte order). You can determine the &quot;endianness&quot; of a particular architecture by calling the <a class=\"xref\" href=\"system.bitconverter#System_BitConverter_IsLittleEndian\" data-linktype=\"relative-path\">System.BitConverter.IsLittleEndian</a> method.  </p>\n<p>Optionally, the UTF32Encoding object provides a byte order mark (BOM), which is an array of bytes that can be prefixed to the sequence of bytes resulting from the encoding process. If the preamble contains a byte order mark (BOM), it helps the decoder determine the byte order and the transformation format or UTF of a byte array.  </p>\n<p>If the UTF32Encoding instance is configured to provide a BOM, you can retrieve it by calling the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetPreamble_\" data-linktype=\"relative-path\">GetPreamble</a> method; otherwise, the method returns an empty array. Note that, even if a UTF32Encoding object is configured for BOM support, you must include the BOM at the beginning of the encoded byte stream as appropriate; the encoding methods of the UTF32Encoding class do not do this automatically.  </p>\n<p>To enable error detection and to make the class instance more secure, you should instantiate a UTF32Encoding object by calling the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding__ctor_System_Boolean_System_Boolean_System_Boolean_\" data-linktype=\"relative-path\">UTF32Encoding(Boolean,Boolean,Boolean)</a> constructor and setting its <code>throwOnInvalidBytes</code> argument to <code>true</code>. With error detection, a method that detects an invalid sequence of characters or bytes throws an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a> exception. Without error detection, no exception is thrown, and the invalid sequence is generally ignored.  </p>\n<p>You can instantiate a UTF32Encoding object in a number of ways, depending on whether you want to it to provide a byte order mark (BOM), whether you want big-endian or little-endian encoding, and whether you want to enable error detection. The following table lists the UTF32Encoding constructors and the <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> properties that return a <a class=\"xref\" href=\"system.text.unicodeencoding\" data-linktype=\"relative-path\">UnicodeEncoding</a> object.  </p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Member</th>\n<th>Endianness</th>\n<th>BOM</th>\n<th>Error detection</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_UTF32_\" data-linktype=\"relative-path\">UTF32</a></td>\n<td>Little-endian</td>\n<td>Yes</td>\n<td>No (Replacement fallback)</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding__ctor\" data-linktype=\"relative-path\">System.Text.UTF32Encoding.UTF32Encoding()</a></td>\n<td>Little-endian</td>\n<td>Yes</td>\n<td>No (Replacement fallback)</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding__ctor_System_Boolean_System_Boolean_\" data-linktype=\"relative-path\">System.Text.UTF32Encoding.UTF32Encoding(Boolean,Boolean)</a></td>\n<td>Configurable</td>\n<td>Configurable</td>\n<td>No (Replacement fallback)</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding__ctor_System_Boolean_System_Boolean_System_Boolean_\" data-linktype=\"relative-path\">System.Text.UTF32Encoding.UTF32Encoding(Boolean,Boolean,Boolean)</a></td>\n<td>Configurable</td>\n<td>Configurable</td>\n<td>Configurable</td>\n</tr>\n</tbody>\n</table>\n<p> The <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method determines how many bytes result in encoding a set of Unicode characters, and the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method performs the actual encoding.  </p>\n<p> Likewise, the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a> method determines how many characters result in decoding a sequence of bytes, and the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a> and <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetString_\" data-linktype=\"relative-path\">GetString</a> methods perform the actual decoding.  </p>\n<p> For an encoder or decoder that is able to save state information when encoding or decoding data that spans multiple blocks (such as string of 1 million characters that is encoded in 100,000-character segments), use the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetEncoder_\" data-linktype=\"relative-path\">GetEncoder</a> and <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetDecoder_\" data-linktype=\"relative-path\">GetDecoder</a> properties, respectively.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_UTF32Encoding__ctor\" data-linktype=\"self-bookmark\">UTF32Encoding()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">UTF32Encoding</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_UTF32Encoding__ctor_System_Boolean_System_Boolean_\" data-linktype=\"self-bookmark\">UTF32Encoding(Boolean,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">UTF32Encoding</a> class. Parameters specify whether to use the big endian byte order and whether the <span class=\"xref\">stem.Text.UTF32Encoding.GetPreamble*</span> method returns a Unicode Unicode byte order mark.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_UTF32Encoding__ctor_System_Boolean_System_Boolean_System_Boolean_\" data-linktype=\"self-bookmark\">UTF32Encoding(Boolean,Boolean,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">UTF32Encoding</a> class. Parameters specify whether to use the big endian byte order, whether to provide a Unicode byte order mark, and whether to throw an exception when an invalid encoding is detected.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_UTF32Encoding_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the specified <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> is equal to the current <a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">UTF32Encoding</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_UTF32Encoding_GetByteCount_System_String_\" data-linktype=\"self-bookmark\">GetByteCount(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calculates the number of bytes produced by encoding the characters in the specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_UTF32Encoding_GetByteCount_System_Char__System_Int32_\" data-linktype=\"self-bookmark\">GetByteCount(Char*,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_UTF32Encoding_GetByteCount_System_Char___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">GetByteCount(Char[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calculates the number of bytes produced by encoding a set of characters from the specified character array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_UTF32Encoding_GetBytes_System_Char__System_Int32_System_Byte__System_Int32_\" data-linktype=\"self-bookmark\">GetBytes(Char*,Int32,Byte*,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_UTF32Encoding_GetBytes_System_Char___System_Int32_System_Int32_System_Byte___System_Int32_\" data-linktype=\"self-bookmark\">GetBytes(Char[],Int32,Int32,Byte[],Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Encodes a set of characters from the specified character array into the specified byte array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_UTF32Encoding_GetBytes_System_String_System_Int32_System_Int32_System_Byte___System_Int32_\" data-linktype=\"self-bookmark\">GetBytes(String,Int32,Int32,Byte[],Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Encodes a set of characters from the specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> into the specified byte array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_UTF32Encoding_GetCharCount_System_Byte__System_Int32_\" data-linktype=\"self-bookmark\">GetCharCount(Byte*,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_UTF32Encoding_GetCharCount_System_Byte___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">GetCharCount(Byte[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_UTF32Encoding_GetChars_System_Byte__System_Int32_System_Char__System_Int32_\" data-linktype=\"self-bookmark\">GetChars(Byte*,Int32,Char*,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_UTF32Encoding_GetChars_System_Byte___System_Int32_System_Int32_System_Char___System_Int32_\" data-linktype=\"self-bookmark\">GetChars(Byte[],Int32,Int32,Char[],Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Decodes a sequence of bytes from the specified byte array into the specified character array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_UTF32Encoding_GetDecoder\" data-linktype=\"self-bookmark\">GetDecoder()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Obtains a decoder that converts a UTF-32 encoded sequence of bytes into a sequence of Unicode characters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_UTF32Encoding_GetEncoder\" data-linktype=\"self-bookmark\">GetEncoder()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Obtains an encoder that converts a sequence of Unicode characters into a UTF-32 encoded sequence of bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_UTF32Encoding_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the hash code for the current instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_UTF32Encoding_GetMaxByteCount_System_Int32_\" data-linktype=\"self-bookmark\">GetMaxByteCount(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calculates the maximum number of bytes produced by encoding the specified number of characters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_UTF32Encoding_GetMaxCharCount_System_Int32_\" data-linktype=\"self-bookmark\">GetMaxCharCount(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calculates the maximum number of characters produced by decoding the specified number of bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_UTF32Encoding_GetPreamble\" data-linktype=\"self-bookmark\">GetPreamble()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a Unicode byte order mark encoded in UTF-32 format, if the <a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">UTF32Encoding</a> object is configured to supply one.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_UTF32Encoding_GetString_System_Byte___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">GetString(Byte[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Decodes a range of bytes from a byte array into a string.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Text_UTF32Encoding__ctor\">\r\n    \r\n            <a id=\"System_Text_UTF32Encoding__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UTF32Encoding()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">UTF32Encoding</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public UTF32Encoding ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor creates an instance that uses the little endian byte order, provides a Unicode byte order mark, and does not throw an exception when an invalid encoding is detected.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For security reasons, you should enable error detection by calling the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding__ctor_System_Boolean_System_Boolean_System_Boolean_\" data-linktype=\"relative-path\">UTF32Encoding(Boolean,Boolean,Boolean)</a> constructor and setting its <code>throwOnInvalidCharacters</code> argument to <code>true</code>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example retrieves and displays the byte order mark for different <a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">UTF32Encoding</a> instances.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.UTF32Encoding.GetPreamble#1\">using System;\nusing System.Text;\n\npublic class SamplesUTF32Encoding\n{\n   public static void Main()\n   {\n      // Create instances of UTF32Encoding, with the byte order mark and without.\n      UTF32Encoding u32LeNone = new UTF32Encoding();\n      UTF32Encoding u32BeNone = new UTF32Encoding( true, false );\n      UTF32Encoding u32LeBom  = new UTF32Encoding( false, true );\n      UTF32Encoding u32BeBom  = new UTF32Encoding( true, true );\n\n      // Display the preamble for each instance.\n      PrintHexBytes( u32LeNone.GetPreamble() );\n      PrintHexBytes( u32BeNone.GetPreamble() );\n      PrintHexBytes( u32LeBom.GetPreamble() );\n      PrintHexBytes( u32BeBom.GetPreamble() );\n   }\n\n   public static void PrintHexBytes( byte[] bytes )\n   {\n\n      if (( bytes == null ) || ( bytes.Length == 0 ))\n         Console.WriteLine( &quot;&lt;none&gt;&quot; );\n      else  {\n         for ( int i = 0; i &lt; bytes.Length; i++ )\n            Console.Write( &quot;{0:X2} &quot;, bytes[i] );\n         Console.WriteLine();\n      }\n   }\n}\n/*\nThis example displays the following output.\n      FF FE 00 00\n      &lt;none&gt;\n      FF FE 00 00\n      00 00 FE FF\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Text.UTF32Encoding.GetPreamble#1\">using namespace System;\nusing namespace System::Text;\n\nvoid PrintHexBytes( array&lt;Byte&gt;^bytes );\n\nint main()\n{\n   \n   // Create instances of UTF32Encoding, with the byte order mark and without.\n   UTF32Encoding ^ u32LeNone = gcnew UTF32Encoding;\n   UTF32Encoding ^ u32BeNone = gcnew UTF32Encoding( true,false );\n   UTF32Encoding ^ u32LeBom = gcnew UTF32Encoding( false,true );\n   UTF32Encoding ^ u32BeBom = gcnew UTF32Encoding( true,true );\n   \n   // Display the preamble for each instance.\n   PrintHexBytes( u32LeNone-&gt;GetPreamble() );\n   PrintHexBytes( u32BeNone-&gt;GetPreamble() );\n   PrintHexBytes( u32LeBom-&gt;GetPreamble() );\n   PrintHexBytes( u32BeBom-&gt;GetPreamble() );\n}\n\nvoid PrintHexBytes( array&lt;Byte&gt;^bytes )\n{\n   if ( (bytes == nullptr) || (bytes-&gt;Length == 0) )\n      Console::WriteLine( &quot;&lt;none&gt;&quot; );\n   else\n   {\n      for ( int i = 0; i &lt; bytes-&gt;Length; i++ )\n         Console::Write( &quot;{0:X2} &quot;, bytes[ i ] );\n      Console::WriteLine();\n   }\n}\n\n/* \nThis example displays the following output:\n      FF FE 00 00\n      &lt;none&gt;\n      FF FE 00 00\n      00 00 FE FF\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.UTF32Encoding.GetPreamble#1\">Imports System.Text\n\nPublic Class SamplesUTF32Encoding   \n   Public Shared Sub Main()\n      &#39; Create instances of UTF32Encoding, with the byte order mark and without.\n      Dim u32LeNone As New UTF32Encoding()\n      Dim u32BeNone As New UTF32Encoding(True, False)\n      Dim u32LeBom As New UTF32Encoding(False, True)\n      Dim u32BeBom As New UTF32Encoding(True, True)\n\n      &#39; Display the preamble for each instance.\n      PrintHexBytes(u32LeNone.GetPreamble())\n      PrintHexBytes(u32BeNone.GetPreamble())\n      PrintHexBytes(u32LeBom.GetPreamble())\n      PrintHexBytes(u32BeBom.GetPreamble())\n   End Sub\n\n   Public Shared Sub PrintHexBytes(bytes() As Byte)\n      If bytes Is Nothing OrElse bytes.Length = 0 Then\n         Console.WriteLine(&quot;&lt;none&gt;&quot;)\n      Else\n         Dim i As Integer\n         For i = 0 To bytes.Length - 1\n            Console.Write(&quot;{0:X2} &quot;, bytes(i))\n         Next i\n         Console.WriteLine()\n      End If\n   End Sub\nEnd Class\n&#39;This example displays the following output:\n&#39;       FF FE 00 00\n&#39;       &lt;none&gt;\n&#39;       FF FE 00 00\n&#39;       00 00 FE FF\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_UTF32Encoding__ctor_System_Boolean_System_Boolean_\">\r\n    \r\n            <a id=\"System_Text_UTF32Encoding__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UTF32Encoding(Boolean,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">UTF32Encoding</a> class. Parameters specify whether to use the big endian byte order and whether the <span class=\"xref\">stem.Text.UTF32Encoding.GetPreamble*</span> method returns a Unicode Unicode byte order mark.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public UTF32Encoding (bool bigEndian, bool byteOrderMark);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bigEndian</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to use the big endian byte order (most significant byte first), or <code>false</code> to use the little endian byte order (least significant byte first).</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>byteOrderMark</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to specify that a Unicode byte order mark is provided; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor creates an instance that does not throw an exception when an invalid encoding is detected.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For security reasons, you should enable error detection by calling the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding__ctor_System_Boolean_System_Boolean_System_Boolean_\" data-linktype=\"relative-path\">UTF32Encoding(Boolean,Boolean,Boolean)</a> constructor and setting its <code>throwOnInvalidCharacters</code> argument to <code>true</code>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example retrieves and displays the byte order mark for different <a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">UTF32Encoding</a> instances.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.UTF32Encoding.GetPreamble#1\">using System;\nusing System.Text;\n\npublic class SamplesUTF32Encoding\n{\n   public static void Main()\n   {\n      // Create instances of UTF32Encoding, with the byte order mark and without.\n      UTF32Encoding u32LeNone = new UTF32Encoding();\n      UTF32Encoding u32BeNone = new UTF32Encoding( true, false );\n      UTF32Encoding u32LeBom  = new UTF32Encoding( false, true );\n      UTF32Encoding u32BeBom  = new UTF32Encoding( true, true );\n\n      // Display the preamble for each instance.\n      PrintHexBytes( u32LeNone.GetPreamble() );\n      PrintHexBytes( u32BeNone.GetPreamble() );\n      PrintHexBytes( u32LeBom.GetPreamble() );\n      PrintHexBytes( u32BeBom.GetPreamble() );\n   }\n\n   public static void PrintHexBytes( byte[] bytes )\n   {\n\n      if (( bytes == null ) || ( bytes.Length == 0 ))\n         Console.WriteLine( &quot;&lt;none&gt;&quot; );\n      else  {\n         for ( int i = 0; i &lt; bytes.Length; i++ )\n            Console.Write( &quot;{0:X2} &quot;, bytes[i] );\n         Console.WriteLine();\n      }\n   }\n}\n/*\nThis example displays the following output.\n      FF FE 00 00\n      &lt;none&gt;\n      FF FE 00 00\n      00 00 FE FF\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Text.UTF32Encoding.GetPreamble#1\">using namespace System;\nusing namespace System::Text;\n\nvoid PrintHexBytes( array&lt;Byte&gt;^bytes );\n\nint main()\n{\n   \n   // Create instances of UTF32Encoding, with the byte order mark and without.\n   UTF32Encoding ^ u32LeNone = gcnew UTF32Encoding;\n   UTF32Encoding ^ u32BeNone = gcnew UTF32Encoding( true,false );\n   UTF32Encoding ^ u32LeBom = gcnew UTF32Encoding( false,true );\n   UTF32Encoding ^ u32BeBom = gcnew UTF32Encoding( true,true );\n   \n   // Display the preamble for each instance.\n   PrintHexBytes( u32LeNone-&gt;GetPreamble() );\n   PrintHexBytes( u32BeNone-&gt;GetPreamble() );\n   PrintHexBytes( u32LeBom-&gt;GetPreamble() );\n   PrintHexBytes( u32BeBom-&gt;GetPreamble() );\n}\n\nvoid PrintHexBytes( array&lt;Byte&gt;^bytes )\n{\n   if ( (bytes == nullptr) || (bytes-&gt;Length == 0) )\n      Console::WriteLine( &quot;&lt;none&gt;&quot; );\n   else\n   {\n      for ( int i = 0; i &lt; bytes-&gt;Length; i++ )\n         Console::Write( &quot;{0:X2} &quot;, bytes[ i ] );\n      Console::WriteLine();\n   }\n}\n\n/* \nThis example displays the following output:\n      FF FE 00 00\n      &lt;none&gt;\n      FF FE 00 00\n      00 00 FE FF\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.UTF32Encoding.GetPreamble#1\">Imports System.Text\n\nPublic Class SamplesUTF32Encoding   \n   Public Shared Sub Main()\n      &#39; Create instances of UTF32Encoding, with the byte order mark and without.\n      Dim u32LeNone As New UTF32Encoding()\n      Dim u32BeNone As New UTF32Encoding(True, False)\n      Dim u32LeBom As New UTF32Encoding(False, True)\n      Dim u32BeBom As New UTF32Encoding(True, True)\n\n      &#39; Display the preamble for each instance.\n      PrintHexBytes(u32LeNone.GetPreamble())\n      PrintHexBytes(u32BeNone.GetPreamble())\n      PrintHexBytes(u32LeBom.GetPreamble())\n      PrintHexBytes(u32BeBom.GetPreamble())\n   End Sub\n\n   Public Shared Sub PrintHexBytes(bytes() As Byte)\n      If bytes Is Nothing OrElse bytes.Length = 0 Then\n         Console.WriteLine(&quot;&lt;none&gt;&quot;)\n      Else\n         Dim i As Integer\n         For i = 0 To bytes.Length - 1\n            Console.Write(&quot;{0:X2} &quot;, bytes(i))\n         Next i\n         Console.WriteLine()\n      End If\n   End Sub\nEnd Class\n&#39;This example displays the following output:\n&#39;       FF FE 00 00\n&#39;       &lt;none&gt;\n&#39;       FF FE 00 00\n&#39;       00 00 FE FF\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_UTF32Encoding__ctor_System_Boolean_System_Boolean_System_Boolean_\">\r\n    \r\n            <a id=\"System_Text_UTF32Encoding__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UTF32Encoding(Boolean,Boolean,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">UTF32Encoding</a> class. Parameters specify whether to use the big endian byte order, whether to provide a Unicode byte order mark, and whether to throw an exception when an invalid encoding is detected.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public UTF32Encoding (bool bigEndian, bool byteOrderMark, bool throwOnInvalidCharacters);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bigEndian</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to use the big endian byte order (most significant byte first), or <code>false</code> to use the little endian byte order (least significant byte first).</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>byteOrderMark</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to specify that a Unicode byte order mark is provided; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>throwOnInvalidCharacters</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to specify that an exception should be thrown when an invalid encoding is detected; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>throwOnInvalidCharacters</code> is <code>true</code>, a method that detects an invalid byte sequence throws <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">System.ArgumentException</a>. Otherwise, the method does not throw an exception, and the invalid sequence is ignored.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For security reasons, you should enable error detection by calling the UTF32Encoding constructor and setting its <code>throwOnInvalidCharacters</code> argument to <code>true</code>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the behavior of <a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">UTF32Encoding</a>, both with error detection enabled and without.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.UTF32Encoding.ErrorDetection#1\">using System;\nusing System.Text;\n\npublic class Example\n{\n   public static void Main()\n   {\n     // Create a UTF32Encoding object with error detection enabled.\n      var encExc = new UTF32Encoding(! BitConverter.IsLittleEndian, true, true);\n      // Create a UTF32Encoding object with error detection disabled.\n      var encRepl = new UTF32Encoding(! BitConverter.IsLittleEndian, true, false);\n\n      // Create a byte arrays from a string, and add an invalid surrogate pair, as follows.\n      //    Latin Small Letter Z (U+007A)\n      //    Latin Small Letter A (U+0061)\n      //    Combining Breve (U+0306)\n      //    Latin Small Letter AE With Acute (U+01FD)\n      //    Greek Small Letter Beta (U+03B2)\n      //    a high-surrogate value (U+D8FF)\n      //    an invalid low surrogate (U+01FF)\n      String s = &quot;za\\u0306\\u01FD\\u03B2&quot;;\n\n      // Encode the string using little-endian byte order.\n      int index = encExc.GetByteCount(s);\n      Byte[] bytes = new Byte[index + 4];\n      encExc.GetBytes(s, 0, s.Length, bytes, 0);\n      bytes[index] = 0xFF;\n      bytes[index + 1] = 0xD8;\n      bytes[index + 2] = 0xFF;\n      bytes[index + 3] = 0x01;\n\n      // Decode the byte array with error detection.\n      Console.WriteLine(&quot;Decoding with error detection:&quot;);\n      PrintDecodedString(bytes, encExc);\n\n      // Decode the byte array without error detection.\n      Console.WriteLine(&quot;Decoding without error detection:&quot;);\n      PrintDecodedString(bytes, encRepl);\n   }\n\n   // Decode the bytes and display the string.\n   public static void PrintDecodedString(Byte[] bytes, Encoding enc)\n   {\n      try {\n         Console.WriteLine(&quot;   Decoded string: {0}&quot;, enc.GetString(bytes, 0, bytes.Length));\n      }\n      catch (DecoderFallbackException e) {\n         Console.WriteLine(e.ToString());\n      }\n      Console.WriteLine();\n   }\n}\n// The example displays the following output:\n//    Decoding with error detection:\n//    System.Text.DecoderFallbackException: Unable to translate bytes [FF][D8][FF][01] at index\n//    20 from specified code page to Unicode.\n//       at System.Text.DecoderExceptionFallbackBuffer.Throw(Byte[] bytesUnknown, Int32 index)\n//       at System.Text.DecoderExceptionFallbackBuffer.Fallback(Byte[] bytesUnknown, Int32 index\n//    )\n//       at System.Text.DecoderFallbackBuffer.InternalFallback(Byte[] bytes, Byte* pBytes)\n//       at System.Text.UTF32Encoding.GetCharCount(Byte* bytes, Int32 count, DecoderNLS baseDeco\n//    der)\n//       at System.Text.UTF32Encoding.GetString(Byte[] bytes, Int32 index, Int32 count)\n//       at Example.PrintDecodedString(Byte[] bytes, Encoding enc)\n//\n//    Decoding without error detection:\n//       Decoded string: zaÌ†Ç½Î²ï¿½\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Text.UTF32Encoding.ErrorDetection#1\">using namespace System;\nusing namespace System::Text;\nvoid PrintDecodedString( array&lt;Byte&gt;^bytes, Encoding^ enc );\nint main()\n{\n   \n   // Create an instance of UTF32Encoding using little-endian byte order.\n   // This will be used for encoding.\n   UTF32Encoding^ u32LE = gcnew UTF32Encoding( false,true );\n   \n   // Create two instances of UTF32Encoding using big-endian byte order: one with error detection and one without.\n   // These will be used for decoding.\n   UTF32Encoding^ u32withED = gcnew UTF32Encoding( true,true,true );\n   UTF32Encoding^ u32noED = gcnew UTF32Encoding( true,true,false );\n   \n   // Create byte arrays from the same string containing the following characters:\n   //    Latin Small Letter Z (U+007A)\n   //    Latin Small Letter A (U+0061)\n   //    Combining Breve (U+0306)\n   //    Latin Small Letter AE With Acute (U+01FD)\n   //    Greek Small Letter Beta (U+03B2)\n   String^ myStr = L&quot;za\\u0306\\u01FD\\u03B2\\xD8FF\\xDCFF&quot;;\n   \n   // Encode the string using little-endian byte order.\n   array&lt;Byte&gt;^myBytes = gcnew array&lt;Byte&gt;(u32LE-&gt;GetByteCount( myStr ));\n   u32LE-&gt;GetBytes( myStr, 0, myStr-&gt;Length, myBytes, 0 );\n   \n   // Decode the byte array with error detection.\n   Console::WriteLine( &quot;Decoding with error detection:&quot; );\n   PrintDecodedString( myBytes, u32withED );\n   \n   // Decode the byte array without error detection.\n   Console::WriteLine( &quot;Decoding without error detection:&quot; );\n   PrintDecodedString( myBytes, u32noED );\n}\n\n\n// Decode the bytes and display the string.\nvoid PrintDecodedString( array&lt;Byte&gt;^bytes, Encoding^ enc )\n{\n   try\n   {\n      Console::WriteLine( &quot;   Decoded string: {0}&quot;, enc-&gt;GetString( bytes, 0, bytes-&gt;Length ) );\n   }\n   catch ( System::ArgumentException^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n   Console::WriteLine();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.UTF32Encoding.ErrorDetection#1\">Imports System.Text\n\nPublic Module Example\n   Public Sub Main()\n      &#39; Create a UTF32Encoding object with error detection enabled.\n      Dim encExc As New UTF32Encoding(Not BitConverter.IsLittleEndian, True, True)\n      &#39; Create a UTF32Encoding object with error detection disabled.\n      Dim encRepl As New UTF32Encoding(Not BitConverter.IsLittleEndian, True, False)\n\n      &#39; Create a byte arrays from a string, and add an invalid surrogate pair, as follows.\n      &#39;    Latin Small Letter Z (U+007A)\n      &#39;    Latin Small Letter A (U+0061)\n      &#39;    Combining Breve (U+0306)\n      &#39;    Latin Small Letter AE With Acute (U+01FD)\n      &#39;    Greek Small Letter Beta (U+03B2)\n      &#39;    a high-surrogate value (U+D8FF)\n      &#39;    an invalid low surrogate (U+01FF)\n      Dim s As String = &quot;za&quot; &amp; ChrW(&amp;H0306) &amp; ChrW(&amp;H01FD) &amp; ChrW(&amp;H03B2)\n\n      &#39; Encode the string using little-endian byte order.\n      Dim index As Integer = encExc.GetBytecount(s)\n      Dim bytes(index + 3) As Byte\n      encExc.GetBytes(s, 0, s.Length, bytes, 0)\n      bytes(index) = &amp;hFF\n      bytes(index + 1) = &amp;hD8\n      bytes(index + 2) = &amp;hFF\n      bytes(index + 3) = &amp;h01\n\n      &#39; Decode the byte array with error detection.\n      Console.WriteLine(&quot;Decoding with error detection:&quot;)\n      PrintDecodedString(bytes, encExc)\n\n      &#39; Decode the byte array without error detection.\n      Console.WriteLine(&quot;Decoding without error detection:&quot;)\n      PrintDecodedString(bytes, encRepl)\n   End Sub\n\n   &#39; Decode the bytes and display the string.\n   Public Sub PrintDecodedString(bytes() As Byte, enc As Encoding)\n      Try\n         Console.WriteLine(&quot;   Decoded string: {0}&quot;, enc.GetString(bytes, 0, bytes.Length))\n      Catch e As DecoderFallbackException\n         Console.WriteLine(e.ToString())\n      End Try\n      Console.WriteLine()\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    Decoding with error detection:\n&#39;    System.Text.DecoderFallbackException: Unable to translate bytes [FF][D8][FF][01] at index\n&#39;    20 from specified code page to Unicode.\n&#39;       at System.Text.DecoderExceptionFallbackBuffer.Throw(Byte[] bytesUnknown, Int32 index)\n&#39;       at System.Text.DecoderExceptionFallbackBuffer.Fallback(Byte[] bytesUnknown, Int32 index\n&#39;    )\n&#39;       at System.Text.DecoderFallbackBuffer.InternalFallback(Byte[] bytes, Byte* pBytes)\n&#39;       at System.Text.UTF32Encoding.GetCharCount(Byte* bytes, Int32 count, DecoderNLS baseDeco\n&#39;    der)\n&#39;       at System.Text.UTF32Encoding.GetString(Byte[] bytes, Int32 index, Int32 count)\n&#39;       at Example.PrintDecodedString(Byte[] bytes, Encoding enc)\n&#39;\n&#39;    Decoding without error detection:\n&#39;       Decoded string: zaÌ†Ç½Î²ï¿½\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Text_UTF32Encoding_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_Text_UTF32Encoding_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the specified <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> is equal to the current <a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">UTF32Encoding</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to compare with the current object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>value</code> is an instance of <a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">UTF32Encoding</a> and is equal to the current object; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Two <a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">UTF32Encoding</a> objects are considered equal if all of the following conditions are true:  </p>\n<ul>\n<li><p>Both objects use the same byte order.  </p>\n</li>\n<li><p>Both objects provide the byte order mark, or both do not.  </p>\n</li>\n<li><p>Both objects use the same encoder fallback.  </p>\n</li>\n<li><p>Both objects use the same decoder fallback.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates <a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">UTF32Encoding</a> objects using different parameter values and then checks them for equality.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.UTF32Encoding.Equals#1\">using System;\nusing System.Text;\n\npublic class SamplesUTF32Encoding  {\n\n   public static void Main()  {\n\n      // Create different instances of UTF32Encoding.\n      UTF32Encoding u32   = new UTF32Encoding();\n      UTF32Encoding u32tt = new UTF32Encoding( true, true );\n      UTF32Encoding u32tf = new UTF32Encoding( true, false );\n      UTF32Encoding u32ft = new UTF32Encoding( false, true );\n      UTF32Encoding u32ff = new UTF32Encoding( false, false );\n\n      // Compare these instances with instances created using the ctor with three parameters.\n      CompareEncodings( u32,   &quot;u32  &quot; );\n      CompareEncodings( u32tt, &quot;u32tt&quot; );\n      CompareEncodings( u32tf, &quot;u32tf&quot; );\n      CompareEncodings( u32ft, &quot;u32ft&quot; );\n      CompareEncodings( u32ff, &quot;u32ff&quot; );\n\n   }\n\n\n   public static void CompareEncodings( UTF32Encoding a, String name )  {\n\n      // Create different instances of UTF32Encoding using the ctor with three parameters.\n      UTF32Encoding u32ttt = new UTF32Encoding( true, true, true );\n      UTF32Encoding u32ttf = new UTF32Encoding( true, true, false );\n      UTF32Encoding u32tft = new UTF32Encoding( true, false, true );\n      UTF32Encoding u32tff = new UTF32Encoding( true, false, false );\n      UTF32Encoding u32ftt = new UTF32Encoding( false, true, true );\n      UTF32Encoding u32ftf = new UTF32Encoding( false, true, false );\n      UTF32Encoding u32fft = new UTF32Encoding( false, false, true );\n      UTF32Encoding u32fff = new UTF32Encoding( false, false, false );\n\n      // Compare the specified instance with each of the instances that were just created.\n      Console.WriteLine( &quot;{0} and u32ttt : {1}&quot;, name, a.Equals( u32ttt ) );\n      Console.WriteLine( &quot;{0} and u32ttf : {1}&quot;, name, a.Equals( u32ttf ) );\n      Console.WriteLine( &quot;{0} and u32tft : {1}&quot;, name, a.Equals( u32tft ) );\n      Console.WriteLine( &quot;{0} and u32tff : {1}&quot;, name, a.Equals( u32tff ) );\n      Console.WriteLine( &quot;{0} and u32ftt : {1}&quot;, name, a.Equals( u32ftt ) );\n      Console.WriteLine( &quot;{0} and u32ftf : {1}&quot;, name, a.Equals( u32ftf ) );\n      Console.WriteLine( &quot;{0} and u32fft : {1}&quot;, name, a.Equals( u32fft ) );\n      Console.WriteLine( &quot;{0} and u32fff : {1}&quot;, name, a.Equals( u32fff ) );\n\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\nu32   vs u32ttt : False\nu32   vs u32ttf : False\nu32   vs u32tft : False\nu32   vs u32tff : False\nu32   vs u32ftt : False\nu32   vs u32ftf : False\nu32   vs u32fft : False\nu32   vs u32fff : True\nu32tt vs u32ttt : False\nu32tt vs u32ttf : True\nu32tt vs u32tft : False\nu32tt vs u32tff : False\nu32tt vs u32ftt : False\nu32tt vs u32ftf : False\nu32tt vs u32fft : False\nu32tt vs u32fff : False\nu32tf vs u32ttt : False\nu32tf vs u32ttf : False\nu32tf vs u32tft : False\nu32tf vs u32tff : True\nu32tf vs u32ftt : False\nu32tf vs u32ftf : False\nu32tf vs u32fft : False\nu32tf vs u32fff : False\nu32ft vs u32ttt : False\nu32ft vs u32ttf : False\nu32ft vs u32tft : False\nu32ft vs u32tff : False\nu32ft vs u32ftt : False\nu32ft vs u32ftf : True\nu32ft vs u32fft : False\nu32ft vs u32fff : False\nu32ff vs u32ttt : False\nu32ff vs u32ttf : False\nu32ff vs u32tft : False\nu32ff vs u32tff : False\nu32ff vs u32ftt : False\nu32ff vs u32ftf : False\nu32ff vs u32fft : False\nu32ff vs u32fff : True\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.UTF32Encoding.Equals#1\">Imports System\nImports System.Text\n\nPublic Class SamplesUTF32Encoding   \n\n   Public Shared Sub Main()\n\n      &#39; Create different instances of UTF32Encoding.\n      Dim u32 As New UTF32Encoding()\n      Dim u32tt As New UTF32Encoding(True, True)\n      Dim u32tf As New UTF32Encoding(True, False)\n      Dim u32ft As New UTF32Encoding(False, True)\n      Dim u32ff As New UTF32Encoding(False, False)\n\n      &#39; Compare these instances with instances created using the ctor with three parameters.\n      CompareEncodings(u32, &quot;u32  &quot;)\n      CompareEncodings(u32tt, &quot;u32tt&quot;)\n      CompareEncodings(u32tf, &quot;u32tf&quot;)\n      CompareEncodings(u32ft, &quot;u32ft&quot;)\n      CompareEncodings(u32ff, &quot;u32ff&quot;)\n\n   End Sub &#39;Main\n\n\n   Public Shared Sub CompareEncodings(a As UTF32Encoding, name As String)\n\n      &#39; Create different instances of UTF32Encoding using the ctor with three parameters.\n      Dim u32ttt As New UTF32Encoding(True, True, True)\n      Dim u32ttf As New UTF32Encoding(True, True, False)\n      Dim u32tft As New UTF32Encoding(True, False, True)\n      Dim u32tff As New UTF32Encoding(True, False, False)\n      Dim u32ftt As New UTF32Encoding(False, True, True)\n      Dim u32ftf As New UTF32Encoding(False, True, False)\n      Dim u32fft As New UTF32Encoding(False, False, True)\n      Dim u32fff As New UTF32Encoding(False, False, False)\n\n      &#39; Compare the specified instance with each of the instances that were just created.\n      Console.WriteLine(&quot;{0} and u32ttt : {1}&quot;, name, a.Equals(u32ttt))\n      Console.WriteLine(&quot;{0} and u32ttf : {1}&quot;, name, a.Equals(u32ttf))\n      Console.WriteLine(&quot;{0} and u32tft : {1}&quot;, name, a.Equals(u32tft))\n      Console.WriteLine(&quot;{0} and u32tff : {1}&quot;, name, a.Equals(u32tff))\n      Console.WriteLine(&quot;{0} and u32ftt : {1}&quot;, name, a.Equals(u32ftt))\n      Console.WriteLine(&quot;{0} and u32ftf : {1}&quot;, name, a.Equals(u32ftf))\n      Console.WriteLine(&quot;{0} and u32fft : {1}&quot;, name, a.Equals(u32fft))\n      Console.WriteLine(&quot;{0} and u32fff : {1}&quot;, name, a.Equals(u32fff))\n\n   End Sub &#39;CompareEncodings \n\nEnd Class &#39;SamplesUTF32Encoding\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;u32   vs u32ttt : False\n&#39;u32   vs u32ttf : False\n&#39;u32   vs u32tft : False\n&#39;u32   vs u32tff : False\n&#39;u32   vs u32ftt : False\n&#39;u32   vs u32ftf : False\n&#39;u32   vs u32fft : False\n&#39;u32   vs u32fff : True\n&#39;u32tt vs u32ttt : False\n&#39;u32tt vs u32ttf : True\n&#39;u32tt vs u32tft : False\n&#39;u32tt vs u32tff : False\n&#39;u32tt vs u32ftt : False\n&#39;u32tt vs u32ftf : False\n&#39;u32tt vs u32fft : False\n&#39;u32tt vs u32fff : False\n&#39;u32tf vs u32ttt : False\n&#39;u32tf vs u32ttf : False\n&#39;u32tf vs u32tft : False\n&#39;u32tf vs u32tff : True\n&#39;u32tf vs u32ftt : False\n&#39;u32tf vs u32ftf : False\n&#39;u32tf vs u32fft : False\n&#39;u32tf vs u32fff : False\n&#39;u32ft vs u32ttt : False\n&#39;u32ft vs u32ttf : False\n&#39;u32ft vs u32tft : False\n&#39;u32ft vs u32tff : False\n&#39;u32ft vs u32ftt : False\n&#39;u32ft vs u32ftf : True\n&#39;u32ft vs u32fft : False\n&#39;u32ft vs u32fff : False\n&#39;u32ff vs u32ttt : False\n&#39;u32ff vs u32ttf : False\n&#39;u32ff vs u32tft : False\n&#39;u32ff vs u32tff : False\n&#39;u32ff vs u32ftt : False\n&#39;u32ff vs u32ftf : False\n&#39;u32ff vs u32fft : False\n&#39;u32ff vs u32fff : True\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Text.UTF32Encoding.Equals#1\">using namespace System;\nusing namespace System::Text;\nvoid CompareEncodings( UTF32Encoding ^ a, String^ name );\nint main()\n{\n   \n   // Create different instances of UTF32Encoding.\n   UTF32Encoding ^ u32 = gcnew UTF32Encoding;\n   UTF32Encoding ^ u32tt = gcnew UTF32Encoding( true,true );\n   UTF32Encoding ^ u32tf = gcnew UTF32Encoding( true,false );\n   UTF32Encoding ^ u32ft = gcnew UTF32Encoding( false,true );\n   UTF32Encoding ^ u32ff = gcnew UTF32Encoding( false,false );\n   \n   // Compare these instances with instances created using the ctor with three parameters.\n   CompareEncodings( u32, &quot;u32  &quot; );\n   CompareEncodings( u32tt, &quot;u32tt&quot; );\n   CompareEncodings( u32tf, &quot;u32tf&quot; );\n   CompareEncodings( u32ft, &quot;u32ft&quot; );\n   CompareEncodings( u32ff, &quot;u32ff&quot; );\n}\n\nvoid CompareEncodings( UTF32Encoding ^ a, String^ name )\n{\n   \n   // Create different instances of UTF32Encoding using the ctor with three parameters.\n   UTF32Encoding ^ u32ttt = gcnew UTF32Encoding( true,true,true );\n   UTF32Encoding ^ u32ttf = gcnew UTF32Encoding( true,true,false );\n   UTF32Encoding ^ u32tft = gcnew UTF32Encoding( true,false,true );\n   UTF32Encoding ^ u32tff = gcnew UTF32Encoding( true,false,false );\n   UTF32Encoding ^ u32ftt = gcnew UTF32Encoding( false,true,true );\n   UTF32Encoding ^ u32ftf = gcnew UTF32Encoding( false,true,false );\n   UTF32Encoding ^ u32fft = gcnew UTF32Encoding( false,false,true );\n   UTF32Encoding ^ u32fff = gcnew UTF32Encoding( false,false,false );\n   \n   // Compare the specified instance with each of the instances that were just created.\n   Console::WriteLine( &quot;{0} and u32ttt : {1}&quot;, name, a-&gt;Equals( u32ttt ) );\n   Console::WriteLine( &quot;{0} and u32ttf : {1}&quot;, name, a-&gt;Equals( u32ttf ) );\n   Console::WriteLine( &quot;{0} and u32tft : {1}&quot;, name, a-&gt;Equals( u32tft ) );\n   Console::WriteLine( &quot;{0} and u32tff : {1}&quot;, name, a-&gt;Equals( u32tff ) );\n   Console::WriteLine( &quot;{0} and u32ftt : {1}&quot;, name, a-&gt;Equals( u32ftt ) );\n   Console::WriteLine( &quot;{0} and u32ftf : {1}&quot;, name, a-&gt;Equals( u32ftf ) );\n   Console::WriteLine( &quot;{0} and u32fft : {1}&quot;, name, a-&gt;Equals( u32fft ) );\n   Console::WriteLine( &quot;{0} and u32fff : {1}&quot;, name, a-&gt;Equals( u32fff ) );\n}\n\n/* \nThis code produces the following output.\n\nu32   vs u32ttt : False\nu32   vs u32ttf : False\nu32   vs u32tft : False\nu32   vs u32tff : False\nu32   vs u32ftt : False\nu32   vs u32ftf : False\nu32   vs u32fft : False\nu32   vs u32fff : True\nu32tt vs u32ttt : False\nu32tt vs u32ttf : True\nu32tt vs u32tft : False\nu32tt vs u32tff : False\nu32tt vs u32ftt : False\nu32tt vs u32ftf : False\nu32tt vs u32fft : False\nu32tt vs u32fff : False\nu32tf vs u32ttt : False\nu32tf vs u32ttf : False\nu32tf vs u32tft : False\nu32tf vs u32tff : True\nu32tf vs u32ftt : False\nu32tf vs u32ftf : False\nu32tf vs u32fft : False\nu32tf vs u32fff : False\nu32ft vs u32ttt : False\nu32ft vs u32ttf : False\nu32ft vs u32tft : False\nu32ft vs u32tff : False\nu32ft vs u32ftt : False\nu32ft vs u32ftf : True\nu32ft vs u32fft : False\nu32ft vs u32fff : False\nu32ff vs u32ttt : False\nu32ff vs u32ttf : False\nu32ff vs u32tft : False\nu32ff vs u32tff : False\nu32ff vs u32ftt : False\nu32ff vs u32ftf : False\nu32ff vs u32fft : False\nu32ff vs u32fff : True\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_UTF32Encoding_GetByteCount_System_String_\">\r\n    \r\n            <a id=\"System_Text_UTF32Encoding_GetByteCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetByteCount(String)</div>        \r\n          </div>\r\n    \r\n            <p>Calculates the number of bytes produced by encoding the characters in the specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetByteCount (string s);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> containing the set of characters to encode.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of bytes produced by encoding the specified characters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The resulting number of bytes is greater than the maximum number that can be returned as an integer.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Error detection is enabled, and <code>s</code> contains an invalid sequence of characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoderfallbackexception\" data-linktype=\"relative-path\">EncoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for complete explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.EncoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.encoderexceptionfallback\" data-linktype=\"relative-path\">EncoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To calculate the exact array size required by <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> to store the resulting bytes, you call the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method. To calculate the maximum array size, you call the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a> method. The <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method generally allocates less memory, while the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a> method generally executes faster.  </p>\n<p> With error detection, an invalid sequence causes this method to throw a <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>. Without error detection, invalid sequences are ignored, and no exception is thrown.  </p>\n<p> To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble. Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer&#39;s responsibility, and the number of bytes in the preamble is not reflected in the value returned by the GetByteCount method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example calls the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a> and <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetByteCount_System_String_\" data-linktype=\"relative-path\">GetByteCount(String)</a> methods to calculate the maximum and actual number of bytes required to encode a string. It also displays the actual number of bytes required to store a byte stream with a byte order mark.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.Utf32Encoding.GetByteCount#1\">using System;\nusing System.Text;\n\nclass UTF8EncodingExample {\n    public static void Main() {\n        String chars = &quot;UTF-32 Encoding Example&quot;;\n        Encoding enc = Encoding.UTF32;\n\n        Console.WriteLine(&quot;Bytes needed to encode &#39;{0}&#39;:&quot;, chars);\n        Console.WriteLine(&quot;   Maximum:         {0}&quot;,\n                          enc.GetMaxByteCount(chars.Length));\n        Console.WriteLine(&quot;   Actual:          {0}&quot;,\n                          enc.GetByteCount(chars));\n        Console.WriteLine(&quot;   Actual with BOM: {0}&quot;,\n                          enc.GetByteCount(chars) + enc.GetPreamble().Length);\n    }\n}\n// The example displays the following output:\n//       Bytes needed to encode &#39;UTF-32 Encoding Example&#39;:\n//          Maximum:         96\n//          Actual:          92\n//          Actual with BOM: 96\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.Utf32Encoding.GetByteCount#1\">Imports System.Text\n\nModule Example\n    Public Sub Main()\n        Dim chars As String = &quot;UTF-32 Encoding Example&quot;\n        Dim enc As Encoding = Encoding.UTF32\n\n        Console.WriteLine(&quot;Bytes needed to encode &#39;{0}&#39;:&quot;, chars)\n        Console.WriteLine(&quot;   Maximum:         {0}&quot;,\n                          enc.GetMaxByteCount(chars.Length))\n        Console.WriteLine(&quot;   Actual:          {0}&quot;,\n                          enc.GetByteCount(chars))\n        Console.WriteLine(&quot;   Actual with BOM: {0}&quot;,\n                          enc.GetByteCount(chars) + enc.GetPreamble().Length)\n    End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Bytes needed to encode &#39;UTF-32 Encoding Example&#39;:\n&#39;          Maximum:         96\n&#39;          Actual:          92\n&#39;          Actual with BOM: 96\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_UTF32Encoding_GetByteCount_System_Char__System_Int32_\">\r\n    \r\n            <a id=\"System_Text_UTF32Encoding_GetByteCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetByteCount(Char*,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetByteCount (char* chars, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>chars</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>*</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to the first character to encode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of characters to encode.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of bytes produced by encoding the specified characters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>chars</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>count</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> The resulting number of bytes is greater than the maximum number that can be returned as an integer.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Error detection is enabled, and <code>chars</code> contains an invalid sequence of characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoderfallbackexception\" data-linktype=\"relative-path\">EncoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for complete explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.EncoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.encoderexceptionfallback\" data-linktype=\"relative-path\">EncoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To calculate the exact array size required by <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> to store the resulting bytes, you call the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method. To calculate the maximum array size, you call the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a>. The <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method generally allocates less memory, while the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a> method generally executes faster.  </p>\n<p> With error detection, an invalid sequence causes this method to throw an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>. Without error detection, invalid sequences are ignored, and no exception is thrown.  </p>\n<p> To ensure that the encoded bytes are decoded properly when they are saved as a file or a stream, you can prefix a stream of encoded bytes with a preamble. Inserting a preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer&#39;s responsibility, and the number of bytes in the preamble Is not reflected in the value returned by the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_UTF32Encoding_GetByteCount_System_Char___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Text_UTF32Encoding_GetByteCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetByteCount(Char[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Calculates the number of bytes produced by encoding a set of characters from the specified character array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetByteCount (char[] chars, int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>chars</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character array containing the set of characters to encode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the first character to encode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of characters to encode.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of bytes produced by encoding the specified characters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>chars</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> or <code>count</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>index</code> and <code>count</code> do not denote a valid range in <code>chars</code>.  </p>\n<p> -or-  </p>\n<p> The resulting number of bytes is greater than the maximum number that can be returned as an integer.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Error detection is enabled, and <code>chars</code> contains an invalid sequence of characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoderfallbackexception\" data-linktype=\"relative-path\">EncoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for complete explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.EncoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.encoderexceptionfallback\" data-linktype=\"relative-path\">EncoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To calculate the exact array size required by <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> to store the resulting bytes, you call the GetByteCount method. To calculate the maximum array size, you call the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a> method. The GetByteCount method generally allocates less memory, while the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a> method generally executes faster.  </p>\n<p> With error detection, an invalid sequence causes this method to throw a <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>. Without error detection, invalid sequences are ignored, and no exception is thrown.  </p>\n<p> To ensure that the encoded bytes are decoded properly when they are saved as a file or a stream, you can prefix a stream of encoded bytes with a preamble. Inserting a preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer&#39;s responsibility, and the number of bytes in the preamble Is not reflected in the value returned by the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example populates an array with a Latin uppercase and lowercase characters and calls the [GetByteCount(Char&lt;xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt; method to determine the number of bytes needed to encode the Latin lowercase characters. It then displays this information along with the total number of bytes needed if a byte order mark is added. It compares this number with the value returned by the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a> method, which indicates maximum number of bytes needed to encode the Latin lowercase characters. The following example populates an array with a combination of Greek and Cyrillic characters and calls the [GetByteCount(Char&lt;xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt; method to determine the number of bytes needed to encode the Cyrillic characters. It then displays this information along with the total number of bytes needed if a byte order mark is added. It compares this number with the value returned by the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a> method, which indicates maximum number of bytes needed to encode the Cyrillic characters.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.Utf32Encoding.GetByteCount#2\">using System;\nusing System.Text;\n\npublic class Example\n{\n   public static void Main()\n   {\n      int uppercaseStart = 0x0041;\n      int uppercaseEnd = 0x005a;\n      int lowercaseStart = 0x0061;\n      int lowercaseEnd = 0x007a;\n      // Instantiate a UTF8 encoding object with BOM support.\n      Encoding enc = Encoding.UTF32;\n\n      // Populate array with characters.\n      char[] chars = new char[lowercaseEnd - lowercaseStart + uppercaseEnd - uppercaseStart + 2];\n      int index = 0;\n      for (int ctr = uppercaseStart; ctr &lt;= uppercaseEnd; ctr++) {\n         chars[index] = (char)ctr;\n         index++;\n      }\n      for (int ctr = lowercaseStart; ctr &lt;= lowercaseEnd; ctr++) {\n         chars[index] = (char)ctr;\n         index++;\n      }\n\n      // Display the bytes needed for the lowercase characters.\n      Console.WriteLine(&quot;Bytes needed for lowercase Latin characters:&quot;);\n      Console.WriteLine(&quot;   Maximum:         {0,5:N0}&quot;,\n                        enc.GetMaxByteCount(lowercaseEnd - lowercaseStart + 1));\n      Console.WriteLine(&quot;   Actual:          {0,5:N0}&quot;,\n                        enc.GetByteCount(chars, uppercaseEnd - uppercaseStart + 1,\n                                          lowercaseEnd - lowercaseStart + 1));\n      Console.WriteLine(&quot;   Actual with BOM: {0,5:N0}&quot;,\n                        enc.GetByteCount(chars, uppercaseEnd - uppercaseStart + 1,\n                                          lowercaseEnd - lowercaseStart + 1) +\n                                          enc.GetPreamble().Length);\n   }\n}\n// The example displays the following output:\n//       Bytes needed for lowercase Latin characters:\n//          Maximum:           108\n//          Actual:            104\n//          Actual with BOM:   108\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.Utf32Encoding.GetByteCount#2\">Imports System.Text\n\nModule Example\n   Public Sub Main()\n      Dim uppercaseStart As Integer = &amp;h0041\n      Dim uppercaseEnd As Integer = &amp;h005a\n      Dim lowercaseStart As Integer = &amp;h0061\n      Dim lowercaseEnd As Integer = &amp;h007a\n      &#39; Instantiate a UTF8 encoding object with BOM support.\n      Dim enc As Encoding = Encoding.UTF32\n      \n      &#39; Populate array with characters.\n      Dim chars(lowercaseEnd - lowercaseStart + uppercaseEnd - uppercaseStart + 1) As Char\n      Dim index As Integer = 0\n      For ctr As Integer = uppercaseStart To uppercaseEnd\n         chars(index) = ChrW(ctr)\n         index += 1\n      Next\n      For ctr As Integer = lowercaseStart To lowercaseEnd\n         chars(index) = ChrW(ctr)\n         index += 1\n      Next\n\n      &#39; Display the bytes needed for the lowercase characters.\n        Console.WriteLine(&quot;Bytes needed for lowercase Latin characters:&quot;)\n        Console.WriteLine(&quot;   Maximum:         {0,5:N0}&quot;,\n                          enc.GetMaxByteCount(lowercaseEnd - lowercaseStart + 1))\n        Console.WriteLine(&quot;   Actual:          {0,5:N0}&quot;,\n                          enc.GetByteCount(chars, uppercaseEnd - uppercaseStart + 1,\n                                            lowercaseEnd - lowercaseStart + 1))\n        Console.WriteLine(&quot;   Actual with BOM: {0,5:N0}&quot;,\n                          enc.GetByteCount(chars, uppercaseEnd - uppercaseStart + 1,\n                                            lowercaseEnd - lowercaseStart + 1) +\n                                            enc.GetPreamble().Length)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Bytes needed for lowercase Latin characters:\n&#39;          Maximum:           108\n&#39;          Actual:            104\n&#39;          Actual with BOM:   108\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_UTF32Encoding_GetBytes_System_Char__System_Int32_System_Byte__System_Int32_\">\r\n    \r\n            <a id=\"System_Text_UTF32Encoding_GetBytes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetBytes(Char*,Int32,Byte*,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetBytes (char* chars, int charCount, byte* bytes, int byteCount);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>chars</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>*</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to the first character to encode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>charCount</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of characters to encode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bytes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>*</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to the location at which to start writing the resulting sequence of bytes.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>byteCount</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of bytes to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The actual number of bytes written at the location indicated by the <code>bytes</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>chars</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>bytes</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>charCount</code> or <code>byteCount</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Error detection is enabled, and <code>chars</code> contains an invalid sequence of characters.  </p>\n<p> -or-  </p>\n<p> <code>byteCount</code> is less than the resulting number of bytes.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoderfallbackexception\" data-linktype=\"relative-path\">EncoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for complete explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.EncoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.encoderexceptionfallback\" data-linktype=\"relative-path\">EncoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To calculate the exact array size required by <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> to store the resulting bytes, you call the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method. To calculate the maximum array size, you call the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a> method. The <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method generally allocates less memory, while the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a> method generally executes faster.  </p>\n<p> With error detection, an invalid sequence causes this method to throw a <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>. Without error detection, invalid sequences are ignored, and no exception is thrown.  </p>\n<p> Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application uses the <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> or the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> provided by the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetDecoder_\" data-linktype=\"relative-path\">GetDecoder</a> method or the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetEncoder_\" data-linktype=\"relative-path\">GetEncoder</a> method, respectively.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble. Inserting a preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer&#39;s responsibility. The <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_UTF32Encoding_GetBytes_System_Char___System_Int32_System_Int32_System_Byte___System_Int32_\">\r\n    \r\n            <a id=\"System_Text_UTF32Encoding_GetBytes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetBytes(Char[],Int32,Int32,Byte[],Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Encodes a set of characters from the specified character array into the specified byte array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>chars</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character array containing the set of characters to encode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>charIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the first character to encode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>charCount</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of characters to encode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bytes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The byte array to contain the resulting sequence of bytes.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>byteIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index at which to start writing the resulting sequence of bytes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The actual number of bytes written into <code>bytes</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>chars</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>bytes</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>charIndex</code> or <code>charCount</code> or <code>byteIndex</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>charIndex</code> and <code>charCount</code> do not denote a valid range in <code>chars</code>.  </p>\n<p> -or-  </p>\n<p> <code>byteIndex</code> is not a valid index in <code>bytes</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Error detection is enabled, and <code>chars</code> contains an invalid sequence of characters.  </p>\n<p> -or-  </p>\n<p> <code>bytes</code> does not have enough capacity from <code>byteIndex</code> to the end of the array to accommodate the resulting bytes.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoderfallbackexception\" data-linktype=\"relative-path\">EncoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for complete explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.EncoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.encoderexceptionfallback\" data-linktype=\"relative-path\">EncoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To calculate the exact array size required by <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> to store the resulting bytes, you call the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method. To calculate the maximum array size, you call the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a> method. The <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method generally allocates less memory, while the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a> method generally executes faster.  </p>\n<p> With error detection, an invalid sequence causes this method to throw a <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>. Without error detection, invalid sequences are ignored, and no exception is thrown.  </p>\n<p> Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application uses the <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> or the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> provided by the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetDecoder_\" data-linktype=\"relative-path\">GetDecoder</a> method or the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetEncoder_\" data-linktype=\"relative-path\">GetEncoder</a> method, respectively.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble. Inserting a preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer&#39;s responsibility. The <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines the number of bytes required to encode three characters from a character array, then encodes the characters and displays the resulting bytes.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Text.UTF32Encoding.GetBytes_CharArr#1\">using namespace System;\nusing namespace System::Text;\nvoid PrintCountsAndBytes( array&lt;Char&gt;^chars, int index, int count, Encoding^ enc );\nvoid PrintHexBytes( array&lt;Byte&gt;^bytes );\nint main()\n{\n   \n   // The characters to encode:\n   //    Latin Small Letter Z (U+007A)\n   //    Latin Small Letter A (U+0061)\n   //    Combining Breve (U+0306)\n   //    Latin Small Letter AE With Acute (U+01FD)\n   //    Greek Small Letter Beta (U+03B2)\n   //    a high-surrogate value (U+D8FF)\n   //    a low-surrogate value (U+DCFF)\n   array&lt;Char&gt;^myChars = gcnew array&lt;Char&gt;(7){\n      L&#39;z&#39;,L&#39;a&#39;,L&#39;\\u0306&#39;,L&#39;\\u01FD&#39;,L&#39;\\u03B2&#39;,L&#39;\\xD8FF&#39;,L&#39;\\xDCFF&#39;\n   };\n   \n   // Create instances of different encodings.\n   UTF7Encoding^ u7 = gcnew UTF7Encoding;\n   UTF8Encoding^ u8Nobom = gcnew UTF8Encoding( false,true );\n   UTF8Encoding^ u8Bom = gcnew UTF8Encoding( true,true );\n   UTF32Encoding ^ u32Nobom = gcnew UTF32Encoding( false,false,true );\n   UTF32Encoding ^ u32Bom = gcnew UTF32Encoding( false,true,true );\n   \n   // Encode three characters starting at index 4 and print out the counts and the resulting bytes.\n   PrintCountsAndBytes( myChars, 4, 3, u7 );\n   PrintCountsAndBytes( myChars, 4, 3, u8Nobom );\n   PrintCountsAndBytes( myChars, 4, 3, u8Bom );\n   PrintCountsAndBytes( myChars, 4, 3, u32Nobom );\n   PrintCountsAndBytes( myChars, 4, 3, u32Bom );\n}\n\nvoid PrintCountsAndBytes( array&lt;Char&gt;^chars, int index, int count, Encoding^ enc )\n{\n   \n   // Display the name of the encoding used.\n   Console::Write( &quot;{0,-25} :&quot;, enc );\n   \n   // Display the exact byte count.\n   int iBC = enc-&gt;GetByteCount( chars, index, count );\n   Console::Write( &quot; {0,-3}&quot;, iBC );\n   \n   // Display the maximum byte count.\n   int iMBC = enc-&gt;GetMaxByteCount( count );\n   Console::Write( &quot; {0,-3} :&quot;, iMBC );\n   \n   // Get the byte order mark, if any.\n   array&lt;Byte&gt;^preamble = enc-&gt;GetPreamble();\n   \n   // Combine the preamble and the encoded bytes.\n   array&lt;Byte&gt;^bytes = gcnew array&lt;Byte&gt;(preamble-&gt;Length + iBC);\n   Array::Copy( preamble, bytes, preamble-&gt;Length );\n   enc-&gt;GetBytes( chars, index, count, bytes, preamble-&gt;Length );\n   \n   // Display all the encoded bytes.\n   PrintHexBytes( bytes );\n}\n\nvoid PrintHexBytes( array&lt;Byte&gt;^bytes )\n{\n   if ( (bytes == nullptr) || (bytes-&gt;Length == 0) )\n      Console::WriteLine( &quot;&lt;none&gt;&quot; );\n   else\n   {\n      for ( int i = 0; i &lt; bytes-&gt;Length; i++ )\n         Console::Write( &quot;{0:X2} &quot;, bytes[ i ] );\n      Console::WriteLine();\n   }\n}\n\n/* \nThis code produces the following output.\n\nSystem.Text.UTF7Encoding  : 10  11  :2B 41 37 4C 59 2F 39 7A 2F 2D\nSystem.Text.UTF8Encoding  : 6   12  :CE B2 F1 8F B3 BF\nSystem.Text.UTF8Encoding  : 6   12  :EF BB BF CE B2 F1 8F B3 BF\nSystem.Text.UTF32Encoding : 8   12  :B2 03 00 00 FF FC 04 00\nSystem.Text.UTF32Encoding : 8   12  :FF FE 00 00 B2 03 00 00 FF FC 04 00\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.UTF32Encoding.GetBytes_CharArr#1\">using System;\nusing System.Text;\n\npublic class SamplesUTF32Encoding  {\n\n   public static void Main()  {\n\n      // The characters to encode:\n      //    Latin Small Letter Z (U+007A)\n      //    Latin Small Letter A (U+0061)\n      //    Combining Breve (U+0306)\n      //    Latin Small Letter AE With Acute (U+01FD)\n      //    Greek Small Letter Beta (U+03B2)\n      //    a high-surrogate value (U+D8FF)\n      //    a low-surrogate value (U+DCFF)\n      char[] myChars = new char[7] { &#39;z&#39;, &#39;a&#39;, &#39;\\u0306&#39;, &#39;\\u01FD&#39;, &#39;\\u03B2&#39;, &#39;\\uD8FF&#39;, &#39;\\uDCFF&#39; };\n\n      // Create instances of different encodings.\n      UTF7Encoding  u7       = new UTF7Encoding();\n      UTF8Encoding  u8Nobom  = new UTF8Encoding( false, true );\n      UTF8Encoding  u8Bom    = new UTF8Encoding( true,  true );\n      UTF32Encoding u32Nobom = new UTF32Encoding( false, false, true );\n      UTF32Encoding u32Bom   = new UTF32Encoding( false, true,  true );\n\n      // Encode three characters starting at index 4 and print out the counts and the resulting bytes.\n      PrintCountsAndBytes( myChars, 4, 3, u7 );\n      PrintCountsAndBytes( myChars, 4, 3, u8Nobom );\n      PrintCountsAndBytes( myChars, 4, 3, u8Bom );\n      PrintCountsAndBytes( myChars, 4, 3, u32Nobom );\n      PrintCountsAndBytes( myChars, 4, 3, u32Bom );\n\n   }\n\n\n   public static void PrintCountsAndBytes( char[] chars, int index, int count, Encoding enc )  {\n\n      // Display the name of the encoding used.\n      Console.Write( &quot;{0,-25} :&quot;, enc.ToString() );\n\n      // Display the exact byte count.\n      int iBC  = enc.GetByteCount( chars, index, count );\n      Console.Write( &quot; {0,-3}&quot;, iBC );\n\n      // Display the maximum byte count.\n      int iMBC = enc.GetMaxByteCount( count );\n      Console.Write( &quot; {0,-3} :&quot;, iMBC );\n\n      // Get the byte order mark, if any.\n      byte[] preamble = enc.GetPreamble();\n\n      // Combine the preamble and the encoded bytes.\n      byte[] bytes = new byte[preamble.Length + iBC];\n      Array.Copy( preamble, bytes, preamble.Length );\n      enc.GetBytes( chars, index, count, bytes, preamble.Length );\n\n      // Display all the encoded bytes.\n      PrintHexBytes( bytes );\n\n   }\n\n\n   public static void PrintHexBytes( byte[] bytes )  {\n\n      if (( bytes == null ) || ( bytes.Length == 0 ))\n         Console.WriteLine( &quot;&lt;none&gt;&quot; );\n      else  {\n         for ( int i = 0; i &lt; bytes.Length; i++ )\n            Console.Write( &quot;{0:X2} &quot;, bytes[i] );\n         Console.WriteLine();\n      }\n\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\nSystem.Text.UTF7Encoding  : 10  11  :2B 41 37 4C 59 2F 39 7A 2F 2D\nSystem.Text.UTF8Encoding  : 6   12  :CE B2 F1 8F B3 BF\nSystem.Text.UTF8Encoding  : 6   12  :EF BB BF CE B2 F1 8F B3 BF\nSystem.Text.UTF32Encoding : 8   12  :B2 03 00 00 FF FC 04 00\nSystem.Text.UTF32Encoding : 8   12  :FF FE 00 00 B2 03 00 00 FF FC 04 00\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.UTF32Encoding.GetBytes_CharArr#1\">Imports System\nImports System.Text\nImports Microsoft.VisualBasic\n\nPublic Class SamplesUTF32Encoding   \n\n   Public Shared Sub Main()\n\n      &#39; The characters to encode:\n      &#39;    Latin Small Letter Z (U+007A)\n      &#39;    Latin Small Letter A (U+0061)\n      &#39;    Combining Breve (U+0306)\n      &#39;    Latin Small Letter AE With Acute (U+01FD)\n      &#39;    Greek Small Letter Beta (U+03B2)\n      &#39;    a high-surrogate value (U+D8FF)\n      &#39;    a low-surrogate value (U+DCFF)\n      Dim myChars() As Char = {&quot;z&quot;c, &quot;a&quot;c, ChrW(&amp;H0306), ChrW(&amp;H01FD), ChrW(&amp;H03B2), ChrW(&amp;HD8FF), ChrW(&amp;HDCFF)}\n\n      &#39; Create instances of different encodings.\n      Dim u7 As New UTF7Encoding()\n      Dim u8Nobom As New UTF8Encoding(False, True)\n      Dim u8Bom As New UTF8Encoding(True, True)\n      Dim u32Nobom As New UTF32Encoding(False, False, True)\n      Dim u32Bom As New UTF32Encoding(False, True, True)\n\n      &#39; Encode three characters starting at index 4 and print out the counts and the resulting bytes.\n      PrintCountsAndBytes(myChars, 4, 3, u7)\n      PrintCountsAndBytes(myChars, 4, 3, u8Nobom)\n      PrintCountsAndBytes(myChars, 4, 3, u8Bom)\n      PrintCountsAndBytes(myChars, 4, 3, u32Nobom)\n      PrintCountsAndBytes(myChars, 4, 3, u32Bom)\n\n   End Sub &#39;Main\n\n\n   Public Shared Sub PrintCountsAndBytes(chars() As Char, index As Integer, count As Integer, enc As Encoding)\n\n      &#39; Display the name of the encoding used.\n      Console.Write(&quot;{0,-25} :&quot;, enc.ToString())\n\n      &#39; Display the exact byte count.\n      Dim iBC As Integer = enc.GetByteCount(chars, index, count)\n      Console.Write(&quot; {0,-3}&quot;, iBC)\n\n      &#39; Display the maximum byte count.\n      Dim iMBC As Integer = enc.GetMaxByteCount(count)\n      Console.Write(&quot; {0,-3} :&quot;, iMBC)\n\n      &#39; Get the byte order mark, if any.\n      Dim preamble As Byte() = enc.GetPreamble()\n\n      &#39; Combine the preamble and the encoded bytes.\n      &#39; NOTE: In Visual Basic, arrays contain one extra element by default.\n      &#39;       The following line creates an array with the exact number of elements required.\n      Dim bytes(preamble.Length + iBC - 1) As Byte\n      Array.Copy(preamble, bytes, preamble.Length)\n      enc.GetBytes(chars, index, count, bytes, preamble.Length)\n\n      &#39; Display all the encoded bytes.\n      PrintHexBytes(bytes)\n\n   End Sub &#39;PrintCountsAndBytes\n\n\n   Public Shared Sub PrintHexBytes(bytes() As Byte)\n\n      If bytes Is Nothing OrElse bytes.Length = 0 Then\n         Console.WriteLine(&quot;&lt;none&gt;&quot;)\n      Else\n         Dim i As Integer\n         For i = 0 To bytes.Length - 1\n            Console.Write(&quot;{0:X2} &quot;, bytes(i))\n         Next i\n         Console.WriteLine()\n      End If\n\n   End Sub &#39;PrintHexBytes \n\nEnd Class &#39;SamplesUTF32Encoding\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;System.Text.UTF7Encoding  : 10  11  :2B 41 37 4C 59 2F 39 7A 2F 2D\n&#39;System.Text.UTF8Encoding  : 6   12  :CE B2 F1 8F B3 BF\n&#39;System.Text.UTF8Encoding  : 6   12  :EF BB BF CE B2 F1 8F B3 BF\n&#39;System.Text.UTF32Encoding : 8   12  :B2 03 00 00 FF FC 04 00\n&#39;System.Text.UTF32Encoding : 8   12  :FF FE 00 00 B2 03 00 00 FF FC 04 00\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_UTF32Encoding_GetBytes_System_String_System_Int32_System_Int32_System_Byte___System_Int32_\">\r\n    \r\n            <a id=\"System_Text_UTF32Encoding_GetBytes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetBytes(String,Int32,Int32,Byte[],Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Encodes a set of characters from the specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> into the specified byte array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetBytes (string s, int charIndex, int charCount, byte[] bytes, int byteIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> containing the set of characters to encode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>charIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the first character to encode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>charCount</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of characters to encode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bytes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The byte array to contain the resulting sequence of bytes.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>byteIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index at which to start writing the resulting sequence of bytes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The actual number of bytes written into <code>bytes</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>bytes</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>charIndex</code> or <code>charCount</code> or <code>byteIndex</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>charIndex</code> and <code>charCount</code> do not denote a valid range in <code>chars</code>.  </p>\n<p> -or-  </p>\n<p> <code>byteIndex</code> is not a valid index in <code>bytes</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Error detection is enabled, and <code>s</code> contains an invalid sequence of characters.  </p>\n<p> -or-  </p>\n<p> <code>bytes</code> does not have enough capacity from <code>byteIndex</code> to the end of the array to accommodate the resulting bytes.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoderfallbackexception\" data-linktype=\"relative-path\">EncoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for complete explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.EncoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.encoderexceptionfallback\" data-linktype=\"relative-path\">EncoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To calculate the exact array size required by GetBytes to store the resulting bytes, you call the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method. To calculate the maximum array size, you call the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a> method. The <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method generally allocates less memory, while the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a> method generally executes faster.  </p>\n<p> With error detection, an invalid sequence causes this method to throw a <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>. Without error detection, invalid sequences are ignored, and no exception is thrown.  </p>\n<p> Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application uses the <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> or the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> provided by the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetDecoder_\" data-linktype=\"relative-path\">GetDecoder</a> method or the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetEncoder_\" data-linktype=\"relative-path\">GetEncoder</a> method, respectively.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble. Inserting a preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer&#39;s responsibility. The GetBytes method does not prepend a preamble to the beginning of a sequence of encoded bytes.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines the number of bytes required to encode a string, then encodes the string and displays the resulting bytes.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.UTF32Encoding.GetBytes_String#1\">using System;\nusing System.Text;\n\npublic class SamplesUTF32Encoding  {\n\n   public static void Main()  {\n\n      // The characters to encode:\n      //    Latin Small Letter Z (U+007A)\n      //    Latin Small Letter A (U+0061)\n      //    Combining Breve (U+0306)\n      //    Latin Small Letter AE With Acute (U+01FD)\n      //    Greek Small Letter Beta (U+03B2)\n      //    a high-surrogate value (U+D8FF)\n      //    a low-surrogate value (U+DCFF)\n      String myStr = &quot;za\\u0306\\u01FD\\u03B2\\uD8FF\\uDCFF&quot;;\n\n      // Create instances of different encodings.\n      UTF7Encoding  u7       = new UTF7Encoding();\n      UTF8Encoding  u8Nobom  = new UTF8Encoding( false, true );\n      UTF8Encoding  u8Bom    = new UTF8Encoding( true,  true );\n      UTF32Encoding u32Nobom = new UTF32Encoding( false, false, true );\n      UTF32Encoding u32Bom   = new UTF32Encoding( false, true,  true );\n\n      // Get the byte counts and the bytes.\n      PrintCountsAndBytes( myStr, u7 );\n      PrintCountsAndBytes( myStr, u8Nobom );\n      PrintCountsAndBytes( myStr, u8Bom );\n      PrintCountsAndBytes( myStr, u32Nobom );\n      PrintCountsAndBytes( myStr, u32Bom );\n\n   }\n\n\n   public static void PrintCountsAndBytes( String s, Encoding enc )  {\n\n      // Display the name of the encoding used.\n      Console.Write( &quot;{0,-25} :&quot;, enc.ToString() );\n\n      // Display the exact byte count.\n      int iBC  = enc.GetByteCount( s );\n      Console.Write( &quot; {0,-3}&quot;, iBC );\n\n      // Display the maximum byte count.\n      int iMBC = enc.GetMaxByteCount( s.Length );\n      Console.Write( &quot; {0,-3} :&quot;, iMBC );\n\n      // Get the byte order mark, if any.\n      byte[] preamble = enc.GetPreamble();\n\n      // Combine the preamble and the encoded bytes.\n      byte[] bytes = new byte[preamble.Length + iBC];\n      Array.Copy( preamble, bytes, preamble.Length );\n      enc.GetBytes( s, 0, s.Length, bytes, preamble.Length );\n\n      // Display all the encoded bytes.\n      PrintHexBytes( bytes );\n\n   }\n\n\n   public static void PrintHexBytes( byte[] bytes )  {\n\n      if (( bytes == null ) || ( bytes.Length == 0 ))\n         Console.WriteLine( &quot;&lt;none&gt;&quot; );\n      else  {\n         for ( int i = 0; i &lt; bytes.Length; i++ )\n            Console.Write( &quot;{0:X2} &quot;, bytes[i] );\n         Console.WriteLine();\n      }\n\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\nSystem.Text.UTF7Encoding  : 18  23  :7A 61 2B 41 77 59 42 2F 51 4F 79 32 50 2F 63 2F 77 2D\nSystem.Text.UTF8Encoding  : 12  24  :7A 61 CC 86 C7 BD CE B2 F1 8F B3 BF\nSystem.Text.UTF8Encoding  : 12  24  :EF BB BF 7A 61 CC 86 C7 BD CE B2 F1 8F B3 BF\nSystem.Text.UTF32Encoding : 24  28  :7A 00 00 00 61 00 00 00 06 03 00 00 FD 01 00 00 B2 03 00 00 FF FC 04 00\nSystem.Text.UTF32Encoding : 24  28  :FF FE 00 00 7A 00 00 00 61 00 00 00 06 03 00 00 FD 01 00 00 B2 03 00 00 FF FC 04 00\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Text.UTF32Encoding.GetBytes_String#1\">using namespace System;\nusing namespace System::Text;\nvoid PrintCountsAndBytes( String^ s, Encoding^ enc );\nvoid PrintHexBytes( array&lt;Byte&gt;^bytes );\nint main()\n{\n   \n   // The characters to encode:\n   //    Latin Small Letter Z (U+007A)\n   //    Latin Small Letter A (U+0061)\n   //    Combining Breve (U+0306)\n   //    Latin Small Letter AE With Acute (U+01FD)\n   //    Greek Small Letter Beta (U+03B2)\n   //    a high-surrogate value (U+D8FF)\n   //    a low-surrogate value (U+DCFF)\n   String^ myStr = L&quot;za\\u0306\\u01FD\\u03B2\\xD8FF\\xDCFF&quot;;\n   \n   // Create instances of different encodings.\n   UTF7Encoding^ u7 = gcnew UTF7Encoding;\n   UTF8Encoding^ u8Nobom = gcnew UTF8Encoding( false,true );\n   UTF8Encoding^ u8Bom = gcnew UTF8Encoding( true,true );\n   UTF32Encoding ^ u32Nobom = gcnew UTF32Encoding( false,false,true );\n   UTF32Encoding ^ u32Bom = gcnew UTF32Encoding( false,true,true );\n   \n   // Get the byte counts and the bytes.\n   PrintCountsAndBytes( myStr, u7 );\n   PrintCountsAndBytes( myStr, u8Nobom );\n   PrintCountsAndBytes( myStr, u8Bom );\n   PrintCountsAndBytes( myStr, u32Nobom );\n   PrintCountsAndBytes( myStr, u32Bom );\n}\n\nvoid PrintCountsAndBytes( String^ s, Encoding^ enc )\n{\n   \n   // Display the name of the encoding used.\n   Console::Write( &quot;{0,-25} :&quot;, enc );\n   \n   // Display the exact byte count.\n   int iBC = enc-&gt;GetByteCount( s );\n   Console::Write( &quot; {0,-3}&quot;, iBC );\n   \n   // Display the maximum byte count.\n   int iMBC = enc-&gt;GetMaxByteCount( s-&gt;Length );\n   Console::Write( &quot; {0,-3} :&quot;, iMBC );\n   \n   // Get the byte order mark, if any.\n   array&lt;Byte&gt;^preamble = enc-&gt;GetPreamble();\n   \n   // Combine the preamble and the encoded bytes.\n   array&lt;Byte&gt;^bytes = gcnew array&lt;Byte&gt;(preamble-&gt;Length + iBC);\n   Array::Copy( preamble, bytes, preamble-&gt;Length );\n   enc-&gt;GetBytes( s, 0, s-&gt;Length, bytes, preamble-&gt;Length );\n   \n   // Display all the encoded bytes.\n   PrintHexBytes( bytes );\n}\n\nvoid PrintHexBytes( array&lt;Byte&gt;^bytes )\n{\n   if ( (bytes == nullptr) || (bytes-&gt;Length == 0) )\n      Console::WriteLine( &quot;&lt;none&gt;&quot; );\n   else\n   {\n      for ( int i = 0; i &lt; bytes-&gt;Length; i++ )\n         Console::Write( &quot;{0:X2} &quot;, bytes[ i ] );\n      Console::WriteLine();\n   }\n}\n\n/* \nThis code produces the following output.\n\nSystem.Text.UTF7Encoding  : 18  23  :7A 61 2B 41 77 59 42 2F 51 4F 79 32 50 2F 63 2F 77 2D\nSystem.Text.UTF8Encoding  : 12  24  :7A 61 CC 86 C7 BD CE B2 F1 8F B3 BF\nSystem.Text.UTF8Encoding  : 12  24  :EF BB BF 7A 61 CC 86 C7 BD CE B2 F1 8F B3 BF\nSystem.Text.UTF32Encoding : 24  28  :7A 00 00 00 61 00 00 00 06 03 00 00 FD 01 00 00 B2 03 00 00 FF FC 04 00\nSystem.Text.UTF32Encoding : 24  28  :FF FE 00 00 7A 00 00 00 61 00 00 00 06 03 00 00 FD 01 00 00 B2 03 00 00 FF FC 04 00\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.UTF32Encoding.GetBytes_String#1\">Imports System\nImports System.Text\nImports Microsoft.VisualBasic\n\nPublic Class SamplesUTF32Encoding   \n\n   Public Shared Sub Main()\n\n      &#39; The characters to encode:\n      &#39;    Latin Small Letter Z (U+007A)\n      &#39;    Latin Small Letter A (U+0061)\n      &#39;    Combining Breve (U+0306)\n      &#39;    Latin Small Letter AE With Acute (U+01FD)\n      &#39;    Greek Small Letter Beta (U+03B2)\n      &#39;    a high-surrogate value (U+D8FF)\n      &#39;    a low-surrogate value (U+DCFF)\n      Dim myStr As String = &quot;za&quot; &amp; ChrW(&amp;H0306) &amp; ChrW(&amp;H01FD) &amp; ChrW(&amp;H03B2) &amp; ChrW(&amp;HD8FF) &amp; ChrW(&amp;HDCFF)\n\n      &#39; Create instances of different encodings.\n      Dim u7 As New UTF7Encoding()\n      Dim u8Nobom As New UTF8Encoding(False, True)\n      Dim u8Bom As New UTF8Encoding(True, True)\n      Dim u32Nobom As New UTF32Encoding(False, False, True)\n      Dim u32Bom As New UTF32Encoding(False, True, True)\n\n      &#39; Get the byte counts and the bytes.\n      PrintCountsAndBytes(myStr, u7)\n      PrintCountsAndBytes(myStr, u8Nobom)\n      PrintCountsAndBytes(myStr, u8Bom)\n      PrintCountsAndBytes(myStr, u32Nobom)\n      PrintCountsAndBytes(myStr, u32Bom)\n\n   End Sub &#39;Main\n\n\n   Public Shared Sub PrintCountsAndBytes(s As String, enc As Encoding)\n\n      &#39; Display the name of the encoding used.\n      Console.Write(&quot;{0,-25} :&quot;, enc.ToString())\n\n      &#39; Display the exact byte count.\n      Dim iBC As Integer = enc.GetByteCount(s)\n      Console.Write(&quot; {0,-3}&quot;, iBC)\n\n      &#39; Display the maximum byte count.\n      Dim iMBC As Integer = enc.GetMaxByteCount(s.Length)\n      Console.Write(&quot; {0,-3} :&quot;, iMBC)\n\n      &#39; Get the byte order mark, if any.\n      Dim preamble As Byte() = enc.GetPreamble()\n\n      &#39; Combine the preamble and the encoded bytes.\n      &#39; NOTE: In Visual Basic, arrays contain one extra element by default.\n      &#39;       The following line creates an array with the exact number of elements required.\n      Dim bytes(preamble.Length + iBC - 1) As Byte\n      Array.Copy(preamble, bytes, preamble.Length)\n      enc.GetBytes(s, 0, s.Length, bytes, preamble.Length)\n\n      &#39; Display all the encoded bytes.\n      PrintHexBytes(bytes)\n\n   End Sub &#39;PrintCountsAndBytes\n\n\n   Public Shared Sub PrintHexBytes(bytes() As Byte)\n\n      If bytes Is Nothing OrElse bytes.Length = 0 Then\n         Console.WriteLine(&quot;&lt;none&gt;&quot;)\n      Else\n         Dim i As Integer\n         For i = 0 To bytes.Length - 1\n            Console.Write(&quot;{0:X2} &quot;, bytes(i))\n         Next i\n         Console.WriteLine()\n      End If\n\n   End Sub &#39;PrintHexBytes \n\nEnd Class &#39;SamplesUTF32Encoding\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;System.Text.UTF7Encoding  : 18  23  :7A 61 2B 41 77 59 42 2F 51 4F 79 32 50 2F 63 2F 77 2D\n&#39;System.Text.UTF8Encoding  : 12  24  :7A 61 CC 86 C7 BD CE B2 F1 8F B3 BF\n&#39;System.Text.UTF8Encoding  : 12  24  :EF BB BF 7A 61 CC 86 C7 BD CE B2 F1 8F B3 BF\n&#39;System.Text.UTF32Encoding : 24  28  :7A 00 00 00 61 00 00 00 06 03 00 00 FD 01 00 00 B2 03 00 00 FF FC 04 00\n&#39;System.Text.UTF32Encoding : 24  28  :FF FE 00 00 7A 00 00 00 61 00 00 00 06 03 00 00 FD 01 00 00 B2 03 00 00 FF FC 04 00\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_UTF32Encoding_GetCharCount_System_Byte__System_Int32_\">\r\n    \r\n            <a id=\"System_Text_UTF32Encoding_GetCharCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCharCount(Byte*,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetCharCount (byte* bytes, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bytes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>*</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to the first byte to decode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes to decode.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of characters produced by decoding the specified sequence of bytes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>bytes</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>count</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> The resulting number of bytes is greater than the maximum number that can be returned as an integer.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Error detection is enabled, and <code>bytes</code> contains an invalid sequence of bytes.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.decoderfallbackexception\" data-linktype=\"relative-path\">DecoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for complete explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.DecoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.decoderexceptionfallback\" data-linktype=\"relative-path\">DecoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>GetCharCount calculates the exact array size required by the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a> method to store the resulting characters. To calculate the maximum array size, call the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetMaxCharCount_\" data-linktype=\"relative-path\">GetMaxCharCount</a> method. The <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a> method generally allocates less memory, while the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetMaxCharCount_\" data-linktype=\"relative-path\">GetMaxCharCount</a> method generally executes faster.  </p>\n<p> With error detection, an invalid sequence causes this method to throw a <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>. Without error detection, invalid sequences are ignored, and no exception is thrown.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_UTF32Encoding_GetCharCount_System_Byte___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Text_UTF32Encoding_GetCharCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCharCount(Byte[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetCharCount (byte[] bytes, int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bytes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The byte array containing the sequence of bytes to decode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the first byte to decode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes to decode.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of characters produced by decoding the specified sequence of bytes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>bytes</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> or <code>count</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>index</code> and <code>count</code> do not denote a valid range in <code>bytes</code>.  </p>\n<p> -or-  </p>\n<p> The resulting number of bytes is greater than the maximum number that can be returned as an integer.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Error detection is enabled, and <code>bytes</code> contains an invalid sequence of bytes.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.decoderfallbackexception\" data-linktype=\"relative-path\">DecoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for complete explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.DecoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.decoderexceptionfallback\" data-linktype=\"relative-path\">DecoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The GetCharCount method calculates the exact array size required by the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a> method to store the resulting characters. To calculate the maximum array size, call the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetMaxCharCount_\" data-linktype=\"relative-path\">GetMaxCharCount</a> method. The GetCharCount method generally allocates less memory, while the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetMaxCharCount_\" data-linktype=\"relative-path\">GetMaxCharCount</a> method generally executes faster.  </p>\n<p> With error detection, an invalid sequence causes this method to throw a <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>. Without error detection, invalid sequences are ignored, and no exception is thrown.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example encodes a string into an array of bytes, and then decodes the bytes into an array of characters.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.UTF32Encoding.GetChars#1\">using System;\nusing System.Text;\n\npublic class SamplesUTF32Encoding  {\n\n   public static void Main()  {\n\n      // Create two instances of UTF32Encoding: one with little-endian byte order and one with big-endian byte order.\n      UTF32Encoding u32LE = new UTF32Encoding( false, true, true );\n      UTF32Encoding u32BE = new UTF32Encoding( true, true, true );\n\n\n      // Create byte arrays from the same string containing the following characters:\n      //    Latin Small Letter Z (U+007A)\n      //    Latin Small Letter A (U+0061)\n      //    Combining Breve (U+0306)\n      //    Latin Small Letter AE With Acute (U+01FD)\n      //    Greek Small Letter Beta (U+03B2)\n      //    a high-surrogate value (U+D8FF)\n      //    a low-surrogate value (U+DCFF)\n      String myStr = &quot;za\\u0306\\u01FD\\u03B2\\uD8FF\\uDCFF&quot;;\n\n      // barrBE uses the big-endian byte order.\n      byte[] barrBE = new byte[u32BE.GetByteCount( myStr )];\n      u32BE.GetBytes( myStr, 0, myStr.Length, barrBE, 0 );\n\n      // barrLE uses the little-endian byte order.\n      byte[] barrLE = new byte[u32LE.GetByteCount( myStr )];\n      u32LE.GetBytes( myStr, 0, myStr.Length, barrLE, 0 );\n\n\n      // Get the char counts and decode the byte arrays.\n      Console.Write( &quot;BE array with BE encoding : &quot; );\n      PrintCountsAndChars( barrBE, u32BE );\n      Console.Write( &quot;LE array with LE encoding : &quot; );\n      PrintCountsAndChars( barrLE, u32LE );\n\n\n      // Decode the byte arrays using an encoding with a different byte order.\n      Console.Write( &quot;BE array with LE encoding : &quot; );\n      try  {\n         PrintCountsAndChars( barrBE, u32LE );\n      }\n      catch ( System.ArgumentException e )  {\n         Console.WriteLine( e.Message );\n      }\n\n      Console.Write( &quot;LE array with BE encoding : &quot; );\n      try  {\n         PrintCountsAndChars( barrLE, u32BE );\n      }\n      catch ( System.ArgumentException e )  {\n         Console.WriteLine( e.Message );\n      }\n\n   }\n\n\n   public static void PrintCountsAndChars( byte[] bytes, Encoding enc )  {\n\n      // Display the name of the encoding used.\n      Console.Write( &quot;{0,-25} :&quot;, enc.ToString() );\n\n      // Display the exact character count.\n      int iCC  = enc.GetCharCount( bytes );\n      Console.Write( &quot; {0,-3}&quot;, iCC );\n\n      // Display the maximum character count.\n      int iMCC = enc.GetMaxCharCount( bytes.Length );\n      Console.Write( &quot; {0,-3} :&quot;, iMCC );\n\n      // Decode the bytes and display the characters.\n      char[] chars = new char[iCC];\n      enc.GetChars( bytes, 0, bytes.Length, chars, 0 );\n      Console.WriteLine( chars );\n\n   }\n\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Text.UTF32Encoding.GetChars#1\">using namespace System;\nusing namespace System::Text;\nvoid PrintCountsAndChars( array&lt;Byte&gt;^bytes, Encoding^ enc );\nint main()\n{\n   \n   // Create two instances of UTF32Encoding: one with little-endian byte order and one with big-endian byte order.\n   UTF32Encoding^ u32LE = gcnew UTF32Encoding( false,true,true );\n   UTF32Encoding^ u32BE = gcnew UTF32Encoding( true,true,true );\n   \n   // Create byte arrays from the same string containing the following characters:\n   //    Latin Small Letter Z (U+007A)\n   //    Latin Small Letter A (U+0061)\n   //    Combining Breve (U+0306)\n   //    Latin Small Letter AE With Acute (U+01FD)\n   //    Greek Small Letter Beta (U+03B2)\n   String^ myStr = L&quot;za\\u0306\\u01FD\\u03B2\\xD8FF\\xDCFF&quot;;\n   \n   // barrBE uses the big-endian byte order.\n   array&lt;Byte&gt;^barrBE = gcnew array&lt;Byte&gt;(u32BE-&gt;GetByteCount( myStr ));\n   u32BE-&gt;GetBytes( myStr, 0, myStr-&gt;Length, barrBE, 0 );\n   \n   // barrLE uses the little-endian byte order.\n   array&lt;Byte&gt;^barrLE = gcnew array&lt;Byte&gt;(u32LE-&gt;GetByteCount( myStr ));\n   u32LE-&gt;GetBytes( myStr, 0, myStr-&gt;Length, barrLE, 0 );\n   \n   // Get the char counts and decode the byte arrays.\n   Console::Write( &quot;BE array with BE encoding : &quot; );\n   PrintCountsAndChars( barrBE, u32BE );\n   Console::Write( &quot;LE array with LE encoding : &quot; );\n   PrintCountsAndChars( barrLE, u32LE );\n   \n   // Decode the byte arrays using an encoding with a different byte order.\n   Console::Write( &quot;BE array with LE encoding : &quot; );\n   try\n   {\n      PrintCountsAndChars( barrBE, u32LE );\n   }\n   catch ( System::ArgumentException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n\n   Console::Write( &quot;LE array with BE encoding : &quot; );\n   try\n   {\n      PrintCountsAndChars( barrLE, u32BE );\n   }\n   catch ( System::ArgumentException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n\n}\n\nvoid PrintCountsAndChars( array&lt;Byte&gt;^bytes, Encoding^ enc )\n{\n   \n   // Display the name of the encoding used.\n   Console::Write( &quot;{0,-25} :&quot;, enc );\n   \n   // Display the exact character count.\n   int iCC = enc-&gt;GetCharCount( bytes );\n   Console::Write( &quot; {0,-3}&quot;, iCC );\n   \n   // Display the maximum character count.\n   int iMCC = enc-&gt;GetMaxCharCount( bytes-&gt;Length );\n   Console::Write( &quot; {0,-3} :&quot;, iMCC );\n   \n   // Decode the bytes and display the characters.\n   array&lt;Char&gt;^chars = gcnew array&lt;Char&gt;(iCC);\n   enc-&gt;GetChars( bytes, 0, bytes-&gt;Length, chars, 0 );\n   Console::WriteLine( chars );\n}\n\n/* \nThis code produces the following output.  The question marks take the place of characters that cannot be displayed at the console.\n\nBE array with BE encoding : System.Text.UTF32Encoding : 7   14  :za??ï¿½?\nLE array with LE encoding : System.Text.UTF32Encoding : 7   14  :za??ï¿½?\nBE array with LE encoding : System.Text.UTF32Encoding :Invalid byte was found at byte index 3.\nLE array with BE encoding : System.Text.UTF32Encoding :Invalid byte was found at byte index 3.\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.UTF32Encoding.GetChars#1\">Imports System\nImports System.Text\nImports Microsoft.VisualBasic\n\nPublic Class SamplesUTF32Encoding   \n\n   Public Shared Sub Main()\n\n      &#39; Create two instances of UTF32Encoding: one with little-endian byte order and one with big-endian byte order.\n      Dim u32LE As New UTF32Encoding(False, True, True)\n      Dim u32BE As New UTF32Encoding(True, True, True)\n\n\n      &#39; Create byte arrays from the same string containing the following characters:\n      &#39;    Latin Small Letter Z (U+007A)\n      &#39;    Latin Small Letter A (U+0061)\n      &#39;    Combining Breve (U+0306)\n      &#39;    Latin Small Letter AE With Acute (U+01FD)\n      &#39;    Greek Small Letter Beta (U+03B2)\n      &#39;    a high-surrogate value (U+D8FF)\n      &#39;    a low-surrogate value (U+DCFF)\n      Dim myStr As String = &quot;za&quot; &amp; ChrW(&amp;H0306) &amp; ChrW(&amp;H01FD) &amp; ChrW(&amp;H03B2) &amp; ChrW(&amp;HD8FF) &amp; ChrW(&amp;HDCFF)\n\n      &#39; barrBE uses the big-endian byte order.\n      &#39; NOTE: In Visual Basic, arrays contain one extra element by default.\n      &#39;       The following line creates an array with the exact number of elements required.\n      Dim barrBE(u32BE.GetByteCount(myStr) - 1) As Byte\n      u32BE.GetBytes(myStr, 0, myStr.Length, barrBE, 0)\n\n      &#39; barrLE uses the little-endian byte order.\n      &#39; NOTE: In Visual Basic, arrays contain one extra element by default.\n      &#39;       The following line creates an array with the exact number of elements required.\n      Dim barrLE(u32LE.GetByteCount(myStr) - 1) As Byte\n      u32LE.GetBytes(myStr, 0, myStr.Length, barrLE, 0)\n\n\n      &#39; Get the char counts and decode the byte arrays.\n      Console.Write(&quot;BE array with BE encoding : &quot;)\n      PrintCountsAndChars(barrBE, u32BE)\n      Console.Write(&quot;LE array with LE encoding : &quot;)\n      PrintCountsAndChars(barrLE, u32LE)\n\n\n      &#39; Decode the byte arrays using an encoding with a different byte order.\n      Console.Write(&quot;BE array with LE encoding : &quot;)\n      Try\n         PrintCountsAndChars(barrBE, u32LE)\n      Catch e As System.ArgumentException\n         Console.WriteLine(e.Message)\n      End Try\n\n      Console.Write(&quot;LE array with BE encoding : &quot;)\n      Try\n         PrintCountsAndChars(barrLE, u32BE)\n      Catch e As System.ArgumentException\n         Console.WriteLine(e.Message)\n      End Try\n\n   End Sub &#39;Main\n\n\n   Public Shared Sub PrintCountsAndChars(bytes() As Byte, enc As Encoding)\n\n      &#39; Display the name of the encoding used.\n      Console.Write(&quot;{0,-25} :&quot;, enc.ToString())\n\n      &#39; Display the exact character count.\n      Dim iCC As Integer = enc.GetCharCount(bytes)\n      Console.Write(&quot; {0,-3}&quot;, iCC)\n\n      &#39; Display the maximum character count.\n      Dim iMCC As Integer = enc.GetMaxCharCount(bytes.Length)\n      Console.Write(&quot; {0,-3} :&quot;, iMCC)\n\n      &#39; Decode the bytes and display the characters.\n      Dim chars(iCC) As Char\n      enc.GetChars(bytes, 0, bytes.Length, chars, 0)\n      Console.WriteLine(chars)\n\n   End Sub &#39;PrintCountsAndChars \n\nEnd Class &#39;SamplesUTF32Encoding\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_UTF32Encoding_GetChars_System_Byte__System_Int32_System_Char__System_Int32_\">\r\n    \r\n            <a id=\"System_Text_UTF32Encoding_GetChars_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetChars(Byte*,Int32,Char*,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetChars (byte* bytes, int byteCount, char* chars, int charCount);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bytes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>*</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to the first byte to decode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>byteCount</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes to decode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>chars</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>*</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to the location at which to start writing the resulting set of characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>charCount</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of characters to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The actual number of characters written at the location indicated by <code>chars</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>bytes</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>chars</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>byteCount</code> or <code>charCount</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Error detection is enabled, and <code>bytes</code> contains an invalid sequence of bytes.  </p>\n<p> -or-  </p>\n<p> <code>charCount</code> is less than the resulting number of characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.decoderfallbackexception\" data-linktype=\"relative-path\">DecoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for complete explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.DecoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.decoderexceptionfallback\" data-linktype=\"relative-path\">DecoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To calculate the exact array size required by <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a> to store the resulting characters, call the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a> method. To calculate the maximum array size, call the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetMaxCharCount_\" data-linktype=\"relative-path\">GetMaxCharCount</a> method. The <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a> method generally allocates less memory, while the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetMaxCharCount_\" data-linktype=\"relative-path\">GetMaxCharCount</a> method generally executes faster.  </p>\n<p> With error detection, an invalid sequence causes this method to throw a <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>. Without error detection, invalid sequences are ignored, and no exception is thrown.  </p>\n<p> If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method. You can remove it by calling the <a class=\"xref\" href=\"system.string#System_String_TrimStart_\" data-linktype=\"relative-path\">TrimStart</a> method.  </p>\n<p> Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application uses the <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> or the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> provided by the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetDecoder_\" data-linktype=\"relative-path\">GetDecoder</a> method or the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetEncoder_\" data-linktype=\"relative-path\">GetEncoder</a> method, respectively.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_UTF32Encoding_GetChars_System_Byte___System_Int32_System_Int32_System_Char___System_Int32_\">\r\n    \r\n            <a id=\"System_Text_UTF32Encoding_GetChars_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetChars(Byte[],Int32,Int32,Char[],Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Decodes a sequence of bytes from the specified byte array into the specified character array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bytes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The byte array containing the sequence of bytes to decode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>byteIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the first byte to decode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>byteCount</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes to decode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>chars</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character array to contain the resulting set of characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>charIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index at which to start writing the resulting set of characters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The actual number of characters written into <code>chars</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>bytes</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>chars</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>byteIndex</code> or <code>byteCount</code> or <code>charIndex</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>byteindex</code> and <code>byteCount</code> do not denote a valid range in <code>bytes</code>.  </p>\n<p> -or-  </p>\n<p> <code>charIndex</code> is not a valid index in <code>chars</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Error detection is enabled, and <code>bytes</code> contains an invalid sequence of bytes.  </p>\n<p> -or-  </p>\n<p> <code>chars</code> does not have enough capacity from <code>charIndex</code> to the end of the array to accommodate the resulting characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.decoderfallbackexception\" data-linktype=\"relative-path\">DecoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for complete explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.DecoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.decoderexceptionfallback\" data-linktype=\"relative-path\">DecoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To calculate the exact array size required by GetChars to store the resulting characters, call the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a> method. To calculate the maximum array size, call the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetMaxCharCount_\" data-linktype=\"relative-path\">GetMaxCharCount</a> method. The <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a> method generally allocates less memory, while the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetMaxCharCount_\" data-linktype=\"relative-path\">GetMaxCharCount</a> method generally executes faster.  </p>\n<p> With error detection, an invalid sequence causes this method to throw a <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>. Without error detection, invalid sequences are ignored, and no exception is thrown.  </p>\n<p> If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method. You can remove it by calling the <a class=\"xref\" href=\"system.string#System_String_TrimStart_\" data-linktype=\"relative-path\">TrimStart</a> method.  </p>\n<p> Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application uses the <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> or the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> provided by the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetDecoder_\" data-linktype=\"relative-path\">GetDecoder</a> method or the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetEncoder_\" data-linktype=\"relative-path\">GetEncoder</a> method, respectively.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example encodes a string into an array of bytes, and then decodes the bytes into an array of characters.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.UTF32Encoding.GetChars#1\">using System;\nusing System.Text;\n\npublic class SamplesUTF32Encoding  {\n\n   public static void Main()  {\n\n      // Create two instances of UTF32Encoding: one with little-endian byte order and one with big-endian byte order.\n      UTF32Encoding u32LE = new UTF32Encoding( false, true, true );\n      UTF32Encoding u32BE = new UTF32Encoding( true, true, true );\n\n\n      // Create byte arrays from the same string containing the following characters:\n      //    Latin Small Letter Z (U+007A)\n      //    Latin Small Letter A (U+0061)\n      //    Combining Breve (U+0306)\n      //    Latin Small Letter AE With Acute (U+01FD)\n      //    Greek Small Letter Beta (U+03B2)\n      //    a high-surrogate value (U+D8FF)\n      //    a low-surrogate value (U+DCFF)\n      String myStr = &quot;za\\u0306\\u01FD\\u03B2\\uD8FF\\uDCFF&quot;;\n\n      // barrBE uses the big-endian byte order.\n      byte[] barrBE = new byte[u32BE.GetByteCount( myStr )];\n      u32BE.GetBytes( myStr, 0, myStr.Length, barrBE, 0 );\n\n      // barrLE uses the little-endian byte order.\n      byte[] barrLE = new byte[u32LE.GetByteCount( myStr )];\n      u32LE.GetBytes( myStr, 0, myStr.Length, barrLE, 0 );\n\n\n      // Get the char counts and decode the byte arrays.\n      Console.Write( &quot;BE array with BE encoding : &quot; );\n      PrintCountsAndChars( barrBE, u32BE );\n      Console.Write( &quot;LE array with LE encoding : &quot; );\n      PrintCountsAndChars( barrLE, u32LE );\n\n\n      // Decode the byte arrays using an encoding with a different byte order.\n      Console.Write( &quot;BE array with LE encoding : &quot; );\n      try  {\n         PrintCountsAndChars( barrBE, u32LE );\n      }\n      catch ( System.ArgumentException e )  {\n         Console.WriteLine( e.Message );\n      }\n\n      Console.Write( &quot;LE array with BE encoding : &quot; );\n      try  {\n         PrintCountsAndChars( barrLE, u32BE );\n      }\n      catch ( System.ArgumentException e )  {\n         Console.WriteLine( e.Message );\n      }\n\n   }\n\n\n   public static void PrintCountsAndChars( byte[] bytes, Encoding enc )  {\n\n      // Display the name of the encoding used.\n      Console.Write( &quot;{0,-25} :&quot;, enc.ToString() );\n\n      // Display the exact character count.\n      int iCC  = enc.GetCharCount( bytes );\n      Console.Write( &quot; {0,-3}&quot;, iCC );\n\n      // Display the maximum character count.\n      int iMCC = enc.GetMaxCharCount( bytes.Length );\n      Console.Write( &quot; {0,-3} :&quot;, iMCC );\n\n      // Decode the bytes and display the characters.\n      char[] chars = new char[iCC];\n      enc.GetChars( bytes, 0, bytes.Length, chars, 0 );\n      Console.WriteLine( chars );\n\n   }\n\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Text.UTF32Encoding.GetChars#1\">using namespace System;\nusing namespace System::Text;\nvoid PrintCountsAndChars( array&lt;Byte&gt;^bytes, Encoding^ enc );\nint main()\n{\n   \n   // Create two instances of UTF32Encoding: one with little-endian byte order and one with big-endian byte order.\n   UTF32Encoding^ u32LE = gcnew UTF32Encoding( false,true,true );\n   UTF32Encoding^ u32BE = gcnew UTF32Encoding( true,true,true );\n   \n   // Create byte arrays from the same string containing the following characters:\n   //    Latin Small Letter Z (U+007A)\n   //    Latin Small Letter A (U+0061)\n   //    Combining Breve (U+0306)\n   //    Latin Small Letter AE With Acute (U+01FD)\n   //    Greek Small Letter Beta (U+03B2)\n   String^ myStr = L&quot;za\\u0306\\u01FD\\u03B2\\xD8FF\\xDCFF&quot;;\n   \n   // barrBE uses the big-endian byte order.\n   array&lt;Byte&gt;^barrBE = gcnew array&lt;Byte&gt;(u32BE-&gt;GetByteCount( myStr ));\n   u32BE-&gt;GetBytes( myStr, 0, myStr-&gt;Length, barrBE, 0 );\n   \n   // barrLE uses the little-endian byte order.\n   array&lt;Byte&gt;^barrLE = gcnew array&lt;Byte&gt;(u32LE-&gt;GetByteCount( myStr ));\n   u32LE-&gt;GetBytes( myStr, 0, myStr-&gt;Length, barrLE, 0 );\n   \n   // Get the char counts and decode the byte arrays.\n   Console::Write( &quot;BE array with BE encoding : &quot; );\n   PrintCountsAndChars( barrBE, u32BE );\n   Console::Write( &quot;LE array with LE encoding : &quot; );\n   PrintCountsAndChars( barrLE, u32LE );\n   \n   // Decode the byte arrays using an encoding with a different byte order.\n   Console::Write( &quot;BE array with LE encoding : &quot; );\n   try\n   {\n      PrintCountsAndChars( barrBE, u32LE );\n   }\n   catch ( System::ArgumentException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n\n   Console::Write( &quot;LE array with BE encoding : &quot; );\n   try\n   {\n      PrintCountsAndChars( barrLE, u32BE );\n   }\n   catch ( System::ArgumentException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n\n}\n\nvoid PrintCountsAndChars( array&lt;Byte&gt;^bytes, Encoding^ enc )\n{\n   \n   // Display the name of the encoding used.\n   Console::Write( &quot;{0,-25} :&quot;, enc );\n   \n   // Display the exact character count.\n   int iCC = enc-&gt;GetCharCount( bytes );\n   Console::Write( &quot; {0,-3}&quot;, iCC );\n   \n   // Display the maximum character count.\n   int iMCC = enc-&gt;GetMaxCharCount( bytes-&gt;Length );\n   Console::Write( &quot; {0,-3} :&quot;, iMCC );\n   \n   // Decode the bytes and display the characters.\n   array&lt;Char&gt;^chars = gcnew array&lt;Char&gt;(iCC);\n   enc-&gt;GetChars( bytes, 0, bytes-&gt;Length, chars, 0 );\n   Console::WriteLine( chars );\n}\n\n/* \nThis code produces the following output.  The question marks take the place of characters that cannot be displayed at the console.\n\nBE array with BE encoding : System.Text.UTF32Encoding : 7   14  :za??ï¿½?\nLE array with LE encoding : System.Text.UTF32Encoding : 7   14  :za??ï¿½?\nBE array with LE encoding : System.Text.UTF32Encoding :Invalid byte was found at byte index 3.\nLE array with BE encoding : System.Text.UTF32Encoding :Invalid byte was found at byte index 3.\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.UTF32Encoding.GetChars#1\">Imports System\nImports System.Text\nImports Microsoft.VisualBasic\n\nPublic Class SamplesUTF32Encoding   \n\n   Public Shared Sub Main()\n\n      &#39; Create two instances of UTF32Encoding: one with little-endian byte order and one with big-endian byte order.\n      Dim u32LE As New UTF32Encoding(False, True, True)\n      Dim u32BE As New UTF32Encoding(True, True, True)\n\n\n      &#39; Create byte arrays from the same string containing the following characters:\n      &#39;    Latin Small Letter Z (U+007A)\n      &#39;    Latin Small Letter A (U+0061)\n      &#39;    Combining Breve (U+0306)\n      &#39;    Latin Small Letter AE With Acute (U+01FD)\n      &#39;    Greek Small Letter Beta (U+03B2)\n      &#39;    a high-surrogate value (U+D8FF)\n      &#39;    a low-surrogate value (U+DCFF)\n      Dim myStr As String = &quot;za&quot; &amp; ChrW(&amp;H0306) &amp; ChrW(&amp;H01FD) &amp; ChrW(&amp;H03B2) &amp; ChrW(&amp;HD8FF) &amp; ChrW(&amp;HDCFF)\n\n      &#39; barrBE uses the big-endian byte order.\n      &#39; NOTE: In Visual Basic, arrays contain one extra element by default.\n      &#39;       The following line creates an array with the exact number of elements required.\n      Dim barrBE(u32BE.GetByteCount(myStr) - 1) As Byte\n      u32BE.GetBytes(myStr, 0, myStr.Length, barrBE, 0)\n\n      &#39; barrLE uses the little-endian byte order.\n      &#39; NOTE: In Visual Basic, arrays contain one extra element by default.\n      &#39;       The following line creates an array with the exact number of elements required.\n      Dim barrLE(u32LE.GetByteCount(myStr) - 1) As Byte\n      u32LE.GetBytes(myStr, 0, myStr.Length, barrLE, 0)\n\n\n      &#39; Get the char counts and decode the byte arrays.\n      Console.Write(&quot;BE array with BE encoding : &quot;)\n      PrintCountsAndChars(barrBE, u32BE)\n      Console.Write(&quot;LE array with LE encoding : &quot;)\n      PrintCountsAndChars(barrLE, u32LE)\n\n\n      &#39; Decode the byte arrays using an encoding with a different byte order.\n      Console.Write(&quot;BE array with LE encoding : &quot;)\n      Try\n         PrintCountsAndChars(barrBE, u32LE)\n      Catch e As System.ArgumentException\n         Console.WriteLine(e.Message)\n      End Try\n\n      Console.Write(&quot;LE array with BE encoding : &quot;)\n      Try\n         PrintCountsAndChars(barrLE, u32BE)\n      Catch e As System.ArgumentException\n         Console.WriteLine(e.Message)\n      End Try\n\n   End Sub &#39;Main\n\n\n   Public Shared Sub PrintCountsAndChars(bytes() As Byte, enc As Encoding)\n\n      &#39; Display the name of the encoding used.\n      Console.Write(&quot;{0,-25} :&quot;, enc.ToString())\n\n      &#39; Display the exact character count.\n      Dim iCC As Integer = enc.GetCharCount(bytes)\n      Console.Write(&quot; {0,-3}&quot;, iCC)\n\n      &#39; Display the maximum character count.\n      Dim iMCC As Integer = enc.GetMaxCharCount(bytes.Length)\n      Console.Write(&quot; {0,-3} :&quot;, iMCC)\n\n      &#39; Decode the bytes and display the characters.\n      Dim chars(iCC) As Char\n      enc.GetChars(bytes, 0, bytes.Length, chars, 0)\n      Console.WriteLine(chars)\n\n   End Sub &#39;PrintCountsAndChars \n\nEnd Class &#39;SamplesUTF32Encoding\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_UTF32Encoding_GetDecoder\">\r\n    \r\n            <a id=\"System_Text_UTF32Encoding_GetDecoder_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDecoder()</div>        \r\n          </div>\r\n    \r\n            <p>Obtains a decoder that converts a UTF-32 encoded sequence of bytes into a sequence of Unicode characters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Text.Decoder GetDecoder ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> that converts a UTF-32 encoded sequence of bytes into a sequence of Unicode characters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_GetChars_\" data-linktype=\"relative-path\">GetChars</a> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a> method. However, a <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> maintains state information between calls so it can correctly decode byte sequences that span blocks. The <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation. Therefore, GetDecoder and <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetEncoder_\" data-linktype=\"relative-path\">GetEncoder</a> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.  </p>\n<p> If error detection is enabled, that is, the <code>throwOnInvalidCharacters</code> parameter of the constructor was set to <code>true</code>, error detection is also enabled in the <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> returned by this method. If error detection is enabled and an invalid sequence is encountered, the state of the decoder is undefined and processing must stop.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses an encoder and a decoder to encode a string into an array of bytes, and then decode the bytes into an array of characters.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.UTF32Encoding.EncDec#1\">using System;\nusing System.Text;\n\npublic class SamplesUTF32Encoding  {\n\n   public static void Main()  {\n\n      // Get an encoder and a decoder from UTF32Encoding.\n      UTF32Encoding u32 = new UTF32Encoding( false, true, true );\n      Encoder myEnc = u32.GetEncoder();\n      Decoder myDec = u32.GetDecoder();\n\n      // The characters to encode:\n      //    Latin Small Letter Z (U+007A)\n      //    Latin Small Letter A (U+0061)\n      //    Combining Breve (U+0306)\n      //    Latin Small Letter AE With Acute (U+01FD)\n      //    Greek Small Letter Beta (U+03B2)\n      char[] myChars = new char[5] { &#39;z&#39;, &#39;a&#39;, &#39;\\u0306&#39;, &#39;\\u01FD&#39;, &#39;\\u03B2&#39; };\n      Console.Write( &quot;The original characters : &quot; );\n      Console.WriteLine( myChars );\n\n      // Encode the character array.\n      int iBC  = myEnc.GetByteCount( myChars, 0, myChars.Length, true );\n      byte[] myBytes = new byte[iBC];\n      myEnc.GetBytes( myChars, 0, myChars.Length, myBytes, 0, true );\n\n      // Print the resulting bytes.\n      Console.Write( &quot;Using the encoder       : &quot; );\n      for ( int i = 0; i &lt; myBytes.Length; i++ )\n         Console.Write( &quot;{0:X2} &quot;, myBytes[i] );\n      Console.WriteLine();\n\n      // Decode the byte array back into an array of characters.\n      int iCC  = myDec.GetCharCount( myBytes, 0, myBytes.Length, true );\n      char[] myDecodedChars = new char[iCC];\n      myDec.GetChars( myBytes, 0, myBytes.Length, myDecodedChars, 0, true );\n\n      // Print the resulting characters.\n      Console.Write( &quot;Using the decoder       : &quot; );\n      Console.WriteLine( myDecodedChars );\n\n   }\n\n}\n\n\n/* \nThis code produces the following output.  The question marks take the place of characters that cannot be displayed at the console.\n\nThe original characters : za??ï¿½\nUsing the encoder       : 7A 00 00 00 61 00 00 00 06 03 00 00 FD 01 00 00 B2 03 00 00\nUsing the decoder       : za??ï¿½\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Text.UTF32Encoding.EncDec#1\">using namespace System;\nusing namespace System::Text;\nint main()\n{\n   \n   // Get an encoder and a decoder from UTF32Encoding.\n   UTF32Encoding ^ u32 = gcnew UTF32Encoding( false,true,true );\n   Encoder^ myEnc = u32-&gt;GetEncoder();\n   Decoder^ myDec = u32-&gt;GetDecoder();\n   \n   // The characters to encode:\n   //    Latin Small Letter Z (U+007A)\n   //    Latin Small Letter A (U+0061)\n   //    Combining Breve (U+0306)\n   //    Latin Small Letter AE With Acute (U+01FD)\n   //    Greek Small Letter Beta (U+03B2)\n   array&lt;Char&gt;^myChars = gcnew array&lt;Char&gt;(5){\n      L&#39;z&#39;,L&#39;a&#39;,L&#39;\\u0306&#39;,L&#39;\\u01FD&#39;,L&#39;\\u03B2&#39;\n   };\n   Console::Write( &quot;The original characters : &quot; );\n   Console::WriteLine( myChars );\n   \n   // Encode the character array.\n   int iBC = myEnc-&gt;GetByteCount( myChars, 0, myChars.Length, true );\n   array&lt;Byte&gt;^myBytes = gcnew array&lt;Byte&gt;(iBC);\n   myEnc-&gt;GetBytes( myChars, 0, myChars.Length, myBytes, 0, true );\n   \n   // Print the resulting bytes.\n   Console::Write( &quot;Using the encoder       : &quot; );\n   for ( int i = 0; i &lt; myBytes.Length; i++ )\n      Console::Write( &quot;{0:X2} &quot;, myBytes[ i ] );\n   Console::WriteLine();\n   \n   // Decode the byte array back into an array of characters.\n   int iCC = myDec-&gt;GetCharCount( myBytes, 0, myBytes.Length, true );\n   array&lt;Char&gt;^myDecodedChars = gcnew array&lt;Char&gt;(iCC);\n   myDec-&gt;GetChars( myBytes, 0, myBytes.Length, myDecodedChars, 0, true );\n   \n   // Print the resulting characters.\n   Console::Write( &quot;Using the decoder       : &quot; );\n   Console::WriteLine( myDecodedChars );\n}\n\n/* \nThis code produces the following output.  The question marks take the place of characters that cannot be displayed at the console.\n\nThe original characters : za??\nUsing the encoder       : 7A 00 00 00 61 00 00 00 06 03 00 00 FD 01 00 00 B2 03 00 00\nUsing the decoder       : za??\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.UTF32Encoding.EncDec#1\">Imports System\nImports System.Text\nImports Microsoft.VisualBasic\n\nPublic Class SamplesUTF32Encoding   \n\n   Public Shared Sub Main()\n\n      &#39; Get an encoder and a decoder from UTF32Encoding.\n      Dim u32 As New UTF32Encoding(False, True, True)\n      Dim myEnc As Encoder = u32.GetEncoder()\n      Dim myDec As Decoder = u32.GetDecoder()\n\n      &#39; The characters to encode:\n      &#39;    Latin Small Letter Z (U+007A)\n      &#39;    Latin Small Letter A (U+0061)\n      &#39;    Combining Breve (U+0306)\n      &#39;    Latin Small Letter AE With Acute (U+01FD)\n      &#39;    Greek Small Letter Beta (U+03B2)\n      Dim myChars() As Char = {&quot;z&quot;c, &quot;a&quot;c, ChrW(&amp;H0306), ChrW(&amp;H01FD), ChrW(&amp;H03B2)}\n      Console.Write(&quot;The original characters : &quot;)\n      Console.WriteLine(myChars)\n\n      &#39; Encode the character array.\n      Dim iBC As Integer = myEnc.GetByteCount(myChars, 0, myChars.Length, True)\n      &#39; NOTE: In Visual Basic, arrays contain one extra element by default.\n      &#39;       The following line creates an array with the exact number of elements required.\n      Dim myBytes(iBC - 1) As Byte\n      myEnc.GetBytes(myChars, 0, myChars.Length, myBytes, 0, True)\n\n      &#39; Print the resulting bytes.\n      Console.Write(&quot;Using the encoder       : &quot;)\n      Dim i As Integer\n      For i = 0 To myBytes.Length - 1\n         Console.Write(&quot;{0:X2} &quot;, myBytes(i))\n      Next i\n      Console.WriteLine()\n\n      &#39; Decode the byte array back into an array of characters.\n      Dim iCC As Integer = myDec.GetCharCount(myBytes, 0, myBytes.Length, True)\n      &#39; NOTE: In Visual Basic, arrays contain one extra element by default.\n      &#39;       The following line creates an array with the exact number of elements required.\n      Dim myDecodedChars(iCC - 1) As Char\n      myDec.GetChars(myBytes, 0, myBytes.Length, myDecodedChars, 0, True)\n\n      &#39; Print the resulting characters.\n      Console.Write(&quot;Using the decoder       : &quot;)\n      Console.WriteLine(myDecodedChars)\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesUTF32Encoding\n\n\n&#39;This code produces the following output.  The question marks take the place of characters that cannot be displayed at the console.\n&#39;\n&#39;The original characters : za??&#223;\n&#39;Using the encoder       : 7A 00 00 00 61 00 00 00 06 03 00 00 FD 01 00 00 B2 03 00 00\n&#39;Using the decoder       : za??&#223;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_UTF32Encoding_GetEncoder\">\r\n    \r\n            <a id=\"System_Text_UTF32Encoding_GetEncoder_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEncoder()</div>        \r\n          </div>\r\n    \r\n            <p>Obtains an encoder that converts a sequence of Unicode characters into a UTF-32 encoded sequence of bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Text.Encoder GetEncoder ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> that converts a sequence of Unicode characters into a UTF-32 encoded sequence of bytes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.text.encoder#System_Text_Encoder_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method converts sequential blocks of characters into sequential blocks of bytes, in a manner similar to the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method. However, a <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> maintains state information between calls so it can correctly encode character sequences that span blocks. The <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation. For example, a data block might end with an unmatched high-surrogate, and the matching low-surrogate might be in the next data block. Therefore, <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetDecoder_\" data-linktype=\"relative-path\">GetDecoder</a> and GetEncoder are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.  </p>\n<p> If error detection is enabled, that is, the <code>throwOnInvalidCharacters</code> parameter of the constructor was set to <code>true</code>, error detection is also enabled in the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> returned by this method. If error detection is enabled and an invalid sequence is encountered, the state of the encoder is undefined and processing must stop.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses an encoder and a decoder to encode a string into an array of bytes, and then decode the bytes into an array of characters.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.UTF32Encoding.EncDec#1\">using System;\nusing System.Text;\n\npublic class SamplesUTF32Encoding  {\n\n   public static void Main()  {\n\n      // Get an encoder and a decoder from UTF32Encoding.\n      UTF32Encoding u32 = new UTF32Encoding( false, true, true );\n      Encoder myEnc = u32.GetEncoder();\n      Decoder myDec = u32.GetDecoder();\n\n      // The characters to encode:\n      //    Latin Small Letter Z (U+007A)\n      //    Latin Small Letter A (U+0061)\n      //    Combining Breve (U+0306)\n      //    Latin Small Letter AE With Acute (U+01FD)\n      //    Greek Small Letter Beta (U+03B2)\n      char[] myChars = new char[5] { &#39;z&#39;, &#39;a&#39;, &#39;\\u0306&#39;, &#39;\\u01FD&#39;, &#39;\\u03B2&#39; };\n      Console.Write( &quot;The original characters : &quot; );\n      Console.WriteLine( myChars );\n\n      // Encode the character array.\n      int iBC  = myEnc.GetByteCount( myChars, 0, myChars.Length, true );\n      byte[] myBytes = new byte[iBC];\n      myEnc.GetBytes( myChars, 0, myChars.Length, myBytes, 0, true );\n\n      // Print the resulting bytes.\n      Console.Write( &quot;Using the encoder       : &quot; );\n      for ( int i = 0; i &lt; myBytes.Length; i++ )\n         Console.Write( &quot;{0:X2} &quot;, myBytes[i] );\n      Console.WriteLine();\n\n      // Decode the byte array back into an array of characters.\n      int iCC  = myDec.GetCharCount( myBytes, 0, myBytes.Length, true );\n      char[] myDecodedChars = new char[iCC];\n      myDec.GetChars( myBytes, 0, myBytes.Length, myDecodedChars, 0, true );\n\n      // Print the resulting characters.\n      Console.Write( &quot;Using the decoder       : &quot; );\n      Console.WriteLine( myDecodedChars );\n\n   }\n\n}\n\n\n/* \nThis code produces the following output.  The question marks take the place of characters that cannot be displayed at the console.\n\nThe original characters : za??ï¿½\nUsing the encoder       : 7A 00 00 00 61 00 00 00 06 03 00 00 FD 01 00 00 B2 03 00 00\nUsing the decoder       : za??ï¿½\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Text.UTF32Encoding.EncDec#1\">using namespace System;\nusing namespace System::Text;\nint main()\n{\n   \n   // Get an encoder and a decoder from UTF32Encoding.\n   UTF32Encoding ^ u32 = gcnew UTF32Encoding( false,true,true );\n   Encoder^ myEnc = u32-&gt;GetEncoder();\n   Decoder^ myDec = u32-&gt;GetDecoder();\n   \n   // The characters to encode:\n   //    Latin Small Letter Z (U+007A)\n   //    Latin Small Letter A (U+0061)\n   //    Combining Breve (U+0306)\n   //    Latin Small Letter AE With Acute (U+01FD)\n   //    Greek Small Letter Beta (U+03B2)\n   array&lt;Char&gt;^myChars = gcnew array&lt;Char&gt;(5){\n      L&#39;z&#39;,L&#39;a&#39;,L&#39;\\u0306&#39;,L&#39;\\u01FD&#39;,L&#39;\\u03B2&#39;\n   };\n   Console::Write( &quot;The original characters : &quot; );\n   Console::WriteLine( myChars );\n   \n   // Encode the character array.\n   int iBC = myEnc-&gt;GetByteCount( myChars, 0, myChars.Length, true );\n   array&lt;Byte&gt;^myBytes = gcnew array&lt;Byte&gt;(iBC);\n   myEnc-&gt;GetBytes( myChars, 0, myChars.Length, myBytes, 0, true );\n   \n   // Print the resulting bytes.\n   Console::Write( &quot;Using the encoder       : &quot; );\n   for ( int i = 0; i &lt; myBytes.Length; i++ )\n      Console::Write( &quot;{0:X2} &quot;, myBytes[ i ] );\n   Console::WriteLine();\n   \n   // Decode the byte array back into an array of characters.\n   int iCC = myDec-&gt;GetCharCount( myBytes, 0, myBytes.Length, true );\n   array&lt;Char&gt;^myDecodedChars = gcnew array&lt;Char&gt;(iCC);\n   myDec-&gt;GetChars( myBytes, 0, myBytes.Length, myDecodedChars, 0, true );\n   \n   // Print the resulting characters.\n   Console::Write( &quot;Using the decoder       : &quot; );\n   Console::WriteLine( myDecodedChars );\n}\n\n/* \nThis code produces the following output.  The question marks take the place of characters that cannot be displayed at the console.\n\nThe original characters : za??\nUsing the encoder       : 7A 00 00 00 61 00 00 00 06 03 00 00 FD 01 00 00 B2 03 00 00\nUsing the decoder       : za??\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.UTF32Encoding.EncDec#1\">Imports System\nImports System.Text\nImports Microsoft.VisualBasic\n\nPublic Class SamplesUTF32Encoding   \n\n   Public Shared Sub Main()\n\n      &#39; Get an encoder and a decoder from UTF32Encoding.\n      Dim u32 As New UTF32Encoding(False, True, True)\n      Dim myEnc As Encoder = u32.GetEncoder()\n      Dim myDec As Decoder = u32.GetDecoder()\n\n      &#39; The characters to encode:\n      &#39;    Latin Small Letter Z (U+007A)\n      &#39;    Latin Small Letter A (U+0061)\n      &#39;    Combining Breve (U+0306)\n      &#39;    Latin Small Letter AE With Acute (U+01FD)\n      &#39;    Greek Small Letter Beta (U+03B2)\n      Dim myChars() As Char = {&quot;z&quot;c, &quot;a&quot;c, ChrW(&amp;H0306), ChrW(&amp;H01FD), ChrW(&amp;H03B2)}\n      Console.Write(&quot;The original characters : &quot;)\n      Console.WriteLine(myChars)\n\n      &#39; Encode the character array.\n      Dim iBC As Integer = myEnc.GetByteCount(myChars, 0, myChars.Length, True)\n      &#39; NOTE: In Visual Basic, arrays contain one extra element by default.\n      &#39;       The following line creates an array with the exact number of elements required.\n      Dim myBytes(iBC - 1) As Byte\n      myEnc.GetBytes(myChars, 0, myChars.Length, myBytes, 0, True)\n\n      &#39; Print the resulting bytes.\n      Console.Write(&quot;Using the encoder       : &quot;)\n      Dim i As Integer\n      For i = 0 To myBytes.Length - 1\n         Console.Write(&quot;{0:X2} &quot;, myBytes(i))\n      Next i\n      Console.WriteLine()\n\n      &#39; Decode the byte array back into an array of characters.\n      Dim iCC As Integer = myDec.GetCharCount(myBytes, 0, myBytes.Length, True)\n      &#39; NOTE: In Visual Basic, arrays contain one extra element by default.\n      &#39;       The following line creates an array with the exact number of elements required.\n      Dim myDecodedChars(iCC - 1) As Char\n      myDec.GetChars(myBytes, 0, myBytes.Length, myDecodedChars, 0, True)\n\n      &#39; Print the resulting characters.\n      Console.Write(&quot;Using the decoder       : &quot;)\n      Console.WriteLine(myDecodedChars)\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesUTF32Encoding\n\n\n&#39;This code produces the following output.  The question marks take the place of characters that cannot be displayed at the console.\n&#39;\n&#39;The original characters : za??&#223;\n&#39;Using the encoder       : 7A 00 00 00 61 00 00 00 06 03 00 00 FD 01 00 00 B2 03 00 00\n&#39;Using the decoder       : za??&#223;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_UTF32Encoding_GetHashCode\">\r\n    \r\n            <a id=\"System_Text_UTF32Encoding_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the hash code for the current instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The hash code for the current <a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">UTF32Encoding</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_UTF32Encoding_GetMaxByteCount_System_Int32_\">\r\n    \r\n            <a id=\"System_Text_UTF32Encoding_GetMaxByteCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMaxByteCount(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Calculates the maximum number of bytes produced by encoding the specified number of characters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetMaxByteCount (int charCount);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>charCount</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of characters to encode.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The maximum number of bytes produced by encoding the specified number of characters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>charCount</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> The resulting number of bytes is greater than the maximum number that can be returned as an integer.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoderfallbackexception\" data-linktype=\"relative-path\">EncoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for complete explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.EncoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.encoderexceptionfallback\" data-linktype=\"relative-path\">EncoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To calculate the exact array size required by <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> to store the resulting bytes, you call the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method. To calculate the maximum array size, you call the GetMaxByteCount method. The <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method generally allocates less memory, while the GetMaxByteCount method generally executes faster.  </p>\n<p> GetMaxByteCount is a worst-case number, including the worst case for the currently selected <a class=\"xref\" href=\"system.text.encoderfallback\" data-linktype=\"relative-path\">EncoderFallback</a>. If a fallback is chosen with a potentially large string,  GetMaxByteCount can return large values.  </p>\n<p> In most cases, this method returns reasonable numbers for small strings. For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded. You might also want to consider a different approach and use <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> or <a class=\"xref\" href=\"system.text.encoder#System_Text_Encoder_Convert_\" data-linktype=\"relative-path\">Convert</a>.  </p>\n<p> GetMaxByteCount has no relationship to <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a>. If you need a similar function to use with <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a>, use <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetMaxCharCount_\" data-linktype=\"relative-path\">GetMaxCharCount</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> <code>GetMaxByteCount(N)</code> is not necessarily the same value as <code>N* GetMaxByteCount(1)</code>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines the number of bytes required to encode a string, then encodes the string and displays the resulting bytes.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.UTF32Encoding.GetBytes_String#1\">using System;\nusing System.Text;\n\npublic class SamplesUTF32Encoding  {\n\n   public static void Main()  {\n\n      // The characters to encode:\n      //    Latin Small Letter Z (U+007A)\n      //    Latin Small Letter A (U+0061)\n      //    Combining Breve (U+0306)\n      //    Latin Small Letter AE With Acute (U+01FD)\n      //    Greek Small Letter Beta (U+03B2)\n      //    a high-surrogate value (U+D8FF)\n      //    a low-surrogate value (U+DCFF)\n      String myStr = &quot;za\\u0306\\u01FD\\u03B2\\uD8FF\\uDCFF&quot;;\n\n      // Create instances of different encodings.\n      UTF7Encoding  u7       = new UTF7Encoding();\n      UTF8Encoding  u8Nobom  = new UTF8Encoding( false, true );\n      UTF8Encoding  u8Bom    = new UTF8Encoding( true,  true );\n      UTF32Encoding u32Nobom = new UTF32Encoding( false, false, true );\n      UTF32Encoding u32Bom   = new UTF32Encoding( false, true,  true );\n\n      // Get the byte counts and the bytes.\n      PrintCountsAndBytes( myStr, u7 );\n      PrintCountsAndBytes( myStr, u8Nobom );\n      PrintCountsAndBytes( myStr, u8Bom );\n      PrintCountsAndBytes( myStr, u32Nobom );\n      PrintCountsAndBytes( myStr, u32Bom );\n\n   }\n\n\n   public static void PrintCountsAndBytes( String s, Encoding enc )  {\n\n      // Display the name of the encoding used.\n      Console.Write( &quot;{0,-25} :&quot;, enc.ToString() );\n\n      // Display the exact byte count.\n      int iBC  = enc.GetByteCount( s );\n      Console.Write( &quot; {0,-3}&quot;, iBC );\n\n      // Display the maximum byte count.\n      int iMBC = enc.GetMaxByteCount( s.Length );\n      Console.Write( &quot; {0,-3} :&quot;, iMBC );\n\n      // Get the byte order mark, if any.\n      byte[] preamble = enc.GetPreamble();\n\n      // Combine the preamble and the encoded bytes.\n      byte[] bytes = new byte[preamble.Length + iBC];\n      Array.Copy( preamble, bytes, preamble.Length );\n      enc.GetBytes( s, 0, s.Length, bytes, preamble.Length );\n\n      // Display all the encoded bytes.\n      PrintHexBytes( bytes );\n\n   }\n\n\n   public static void PrintHexBytes( byte[] bytes )  {\n\n      if (( bytes == null ) || ( bytes.Length == 0 ))\n         Console.WriteLine( &quot;&lt;none&gt;&quot; );\n      else  {\n         for ( int i = 0; i &lt; bytes.Length; i++ )\n            Console.Write( &quot;{0:X2} &quot;, bytes[i] );\n         Console.WriteLine();\n      }\n\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\nSystem.Text.UTF7Encoding  : 18  23  :7A 61 2B 41 77 59 42 2F 51 4F 79 32 50 2F 63 2F 77 2D\nSystem.Text.UTF8Encoding  : 12  24  :7A 61 CC 86 C7 BD CE B2 F1 8F B3 BF\nSystem.Text.UTF8Encoding  : 12  24  :EF BB BF 7A 61 CC 86 C7 BD CE B2 F1 8F B3 BF\nSystem.Text.UTF32Encoding : 24  28  :7A 00 00 00 61 00 00 00 06 03 00 00 FD 01 00 00 B2 03 00 00 FF FC 04 00\nSystem.Text.UTF32Encoding : 24  28  :FF FE 00 00 7A 00 00 00 61 00 00 00 06 03 00 00 FD 01 00 00 B2 03 00 00 FF FC 04 00\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Text.UTF32Encoding.GetBytes_String#1\">using namespace System;\nusing namespace System::Text;\nvoid PrintCountsAndBytes( String^ s, Encoding^ enc );\nvoid PrintHexBytes( array&lt;Byte&gt;^bytes );\nint main()\n{\n   \n   // The characters to encode:\n   //    Latin Small Letter Z (U+007A)\n   //    Latin Small Letter A (U+0061)\n   //    Combining Breve (U+0306)\n   //    Latin Small Letter AE With Acute (U+01FD)\n   //    Greek Small Letter Beta (U+03B2)\n   //    a high-surrogate value (U+D8FF)\n   //    a low-surrogate value (U+DCFF)\n   String^ myStr = L&quot;za\\u0306\\u01FD\\u03B2\\xD8FF\\xDCFF&quot;;\n   \n   // Create instances of different encodings.\n   UTF7Encoding^ u7 = gcnew UTF7Encoding;\n   UTF8Encoding^ u8Nobom = gcnew UTF8Encoding( false,true );\n   UTF8Encoding^ u8Bom = gcnew UTF8Encoding( true,true );\n   UTF32Encoding ^ u32Nobom = gcnew UTF32Encoding( false,false,true );\n   UTF32Encoding ^ u32Bom = gcnew UTF32Encoding( false,true,true );\n   \n   // Get the byte counts and the bytes.\n   PrintCountsAndBytes( myStr, u7 );\n   PrintCountsAndBytes( myStr, u8Nobom );\n   PrintCountsAndBytes( myStr, u8Bom );\n   PrintCountsAndBytes( myStr, u32Nobom );\n   PrintCountsAndBytes( myStr, u32Bom );\n}\n\nvoid PrintCountsAndBytes( String^ s, Encoding^ enc )\n{\n   \n   // Display the name of the encoding used.\n   Console::Write( &quot;{0,-25} :&quot;, enc );\n   \n   // Display the exact byte count.\n   int iBC = enc-&gt;GetByteCount( s );\n   Console::Write( &quot; {0,-3}&quot;, iBC );\n   \n   // Display the maximum byte count.\n   int iMBC = enc-&gt;GetMaxByteCount( s-&gt;Length );\n   Console::Write( &quot; {0,-3} :&quot;, iMBC );\n   \n   // Get the byte order mark, if any.\n   array&lt;Byte&gt;^preamble = enc-&gt;GetPreamble();\n   \n   // Combine the preamble and the encoded bytes.\n   array&lt;Byte&gt;^bytes = gcnew array&lt;Byte&gt;(preamble-&gt;Length + iBC);\n   Array::Copy( preamble, bytes, preamble-&gt;Length );\n   enc-&gt;GetBytes( s, 0, s-&gt;Length, bytes, preamble-&gt;Length );\n   \n   // Display all the encoded bytes.\n   PrintHexBytes( bytes );\n}\n\nvoid PrintHexBytes( array&lt;Byte&gt;^bytes )\n{\n   if ( (bytes == nullptr) || (bytes-&gt;Length == 0) )\n      Console::WriteLine( &quot;&lt;none&gt;&quot; );\n   else\n   {\n      for ( int i = 0; i &lt; bytes-&gt;Length; i++ )\n         Console::Write( &quot;{0:X2} &quot;, bytes[ i ] );\n      Console::WriteLine();\n   }\n}\n\n/* \nThis code produces the following output.\n\nSystem.Text.UTF7Encoding  : 18  23  :7A 61 2B 41 77 59 42 2F 51 4F 79 32 50 2F 63 2F 77 2D\nSystem.Text.UTF8Encoding  : 12  24  :7A 61 CC 86 C7 BD CE B2 F1 8F B3 BF\nSystem.Text.UTF8Encoding  : 12  24  :EF BB BF 7A 61 CC 86 C7 BD CE B2 F1 8F B3 BF\nSystem.Text.UTF32Encoding : 24  28  :7A 00 00 00 61 00 00 00 06 03 00 00 FD 01 00 00 B2 03 00 00 FF FC 04 00\nSystem.Text.UTF32Encoding : 24  28  :FF FE 00 00 7A 00 00 00 61 00 00 00 06 03 00 00 FD 01 00 00 B2 03 00 00 FF FC 04 00\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.UTF32Encoding.GetBytes_String#1\">Imports System\nImports System.Text\nImports Microsoft.VisualBasic\n\nPublic Class SamplesUTF32Encoding   \n\n   Public Shared Sub Main()\n\n      &#39; The characters to encode:\n      &#39;    Latin Small Letter Z (U+007A)\n      &#39;    Latin Small Letter A (U+0061)\n      &#39;    Combining Breve (U+0306)\n      &#39;    Latin Small Letter AE With Acute (U+01FD)\n      &#39;    Greek Small Letter Beta (U+03B2)\n      &#39;    a high-surrogate value (U+D8FF)\n      &#39;    a low-surrogate value (U+DCFF)\n      Dim myStr As String = &quot;za&quot; &amp; ChrW(&amp;H0306) &amp; ChrW(&amp;H01FD) &amp; ChrW(&amp;H03B2) &amp; ChrW(&amp;HD8FF) &amp; ChrW(&amp;HDCFF)\n\n      &#39; Create instances of different encodings.\n      Dim u7 As New UTF7Encoding()\n      Dim u8Nobom As New UTF8Encoding(False, True)\n      Dim u8Bom As New UTF8Encoding(True, True)\n      Dim u32Nobom As New UTF32Encoding(False, False, True)\n      Dim u32Bom As New UTF32Encoding(False, True, True)\n\n      &#39; Get the byte counts and the bytes.\n      PrintCountsAndBytes(myStr, u7)\n      PrintCountsAndBytes(myStr, u8Nobom)\n      PrintCountsAndBytes(myStr, u8Bom)\n      PrintCountsAndBytes(myStr, u32Nobom)\n      PrintCountsAndBytes(myStr, u32Bom)\n\n   End Sub &#39;Main\n\n\n   Public Shared Sub PrintCountsAndBytes(s As String, enc As Encoding)\n\n      &#39; Display the name of the encoding used.\n      Console.Write(&quot;{0,-25} :&quot;, enc.ToString())\n\n      &#39; Display the exact byte count.\n      Dim iBC As Integer = enc.GetByteCount(s)\n      Console.Write(&quot; {0,-3}&quot;, iBC)\n\n      &#39; Display the maximum byte count.\n      Dim iMBC As Integer = enc.GetMaxByteCount(s.Length)\n      Console.Write(&quot; {0,-3} :&quot;, iMBC)\n\n      &#39; Get the byte order mark, if any.\n      Dim preamble As Byte() = enc.GetPreamble()\n\n      &#39; Combine the preamble and the encoded bytes.\n      &#39; NOTE: In Visual Basic, arrays contain one extra element by default.\n      &#39;       The following line creates an array with the exact number of elements required.\n      Dim bytes(preamble.Length + iBC - 1) As Byte\n      Array.Copy(preamble, bytes, preamble.Length)\n      enc.GetBytes(s, 0, s.Length, bytes, preamble.Length)\n\n      &#39; Display all the encoded bytes.\n      PrintHexBytes(bytes)\n\n   End Sub &#39;PrintCountsAndBytes\n\n\n   Public Shared Sub PrintHexBytes(bytes() As Byte)\n\n      If bytes Is Nothing OrElse bytes.Length = 0 Then\n         Console.WriteLine(&quot;&lt;none&gt;&quot;)\n      Else\n         Dim i As Integer\n         For i = 0 To bytes.Length - 1\n            Console.Write(&quot;{0:X2} &quot;, bytes(i))\n         Next i\n         Console.WriteLine()\n      End If\n\n   End Sub &#39;PrintHexBytes \n\nEnd Class &#39;SamplesUTF32Encoding\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;System.Text.UTF7Encoding  : 18  23  :7A 61 2B 41 77 59 42 2F 51 4F 79 32 50 2F 63 2F 77 2D\n&#39;System.Text.UTF8Encoding  : 12  24  :7A 61 CC 86 C7 BD CE B2 F1 8F B3 BF\n&#39;System.Text.UTF8Encoding  : 12  24  :EF BB BF 7A 61 CC 86 C7 BD CE B2 F1 8F B3 BF\n&#39;System.Text.UTF32Encoding : 24  28  :7A 00 00 00 61 00 00 00 06 03 00 00 FD 01 00 00 B2 03 00 00 FF FC 04 00\n&#39;System.Text.UTF32Encoding : 24  28  :FF FE 00 00 7A 00 00 00 61 00 00 00 06 03 00 00 FD 01 00 00 B2 03 00 00 FF FC 04 00\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_UTF32Encoding_GetMaxCharCount_System_Int32_\">\r\n    \r\n            <a id=\"System_Text_UTF32Encoding_GetMaxCharCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMaxCharCount(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Calculates the maximum number of characters produced by decoding the specified number of bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetMaxCharCount (int byteCount);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>byteCount</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes to decode.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The maximum number of characters produced by decoding the specified number of bytes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>byteCount</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> The resulting number of bytes is greater than the maximum number that can be returned as an integer.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.decoderfallbackexception\" data-linktype=\"relative-path\">DecoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for complete explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.DecoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.decoderexceptionfallback\" data-linktype=\"relative-path\">DecoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To calculate the exact array size required by <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a> to store the resulting characters, you call the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a> method. To calculate the maximum array size, you call the GetMaxCharCount method. The <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a> method generally allocates less memory, while the GetMaxCharCount method generally executes faster.  </p>\n<p> GetMaxCharCount is a worst-case number, including the worst case for the currently selected <a class=\"xref\" href=\"system.text.decoderfallback\" data-linktype=\"relative-path\">DecoderFallback</a>. If a fallback is chosen with a potentially large string, GetMaxCharCount can return large values.  </p>\n<p> In most cases, this method returns reasonable numbers for small strings. For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded. You might also want to consider a different approach and use <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a> or <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_Convert_\" data-linktype=\"relative-path\">Convert</a>.  </p>\n<p> GetMaxCharCount has no relationship to <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a>. If you need a similar function to use with <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a>, use <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> <code>GetMaxCharCount(N)</code> is not necessarily the same value as <code>N* GetMaxCharCount(1)</code>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example encodes a string into an array of bytes, and then decodes the bytes into an array of characters.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.UTF32Encoding.GetChars#1\">using System;\nusing System.Text;\n\npublic class SamplesUTF32Encoding  {\n\n   public static void Main()  {\n\n      // Create two instances of UTF32Encoding: one with little-endian byte order and one with big-endian byte order.\n      UTF32Encoding u32LE = new UTF32Encoding( false, true, true );\n      UTF32Encoding u32BE = new UTF32Encoding( true, true, true );\n\n\n      // Create byte arrays from the same string containing the following characters:\n      //    Latin Small Letter Z (U+007A)\n      //    Latin Small Letter A (U+0061)\n      //    Combining Breve (U+0306)\n      //    Latin Small Letter AE With Acute (U+01FD)\n      //    Greek Small Letter Beta (U+03B2)\n      //    a high-surrogate value (U+D8FF)\n      //    a low-surrogate value (U+DCFF)\n      String myStr = &quot;za\\u0306\\u01FD\\u03B2\\uD8FF\\uDCFF&quot;;\n\n      // barrBE uses the big-endian byte order.\n      byte[] barrBE = new byte[u32BE.GetByteCount( myStr )];\n      u32BE.GetBytes( myStr, 0, myStr.Length, barrBE, 0 );\n\n      // barrLE uses the little-endian byte order.\n      byte[] barrLE = new byte[u32LE.GetByteCount( myStr )];\n      u32LE.GetBytes( myStr, 0, myStr.Length, barrLE, 0 );\n\n\n      // Get the char counts and decode the byte arrays.\n      Console.Write( &quot;BE array with BE encoding : &quot; );\n      PrintCountsAndChars( barrBE, u32BE );\n      Console.Write( &quot;LE array with LE encoding : &quot; );\n      PrintCountsAndChars( barrLE, u32LE );\n\n\n      // Decode the byte arrays using an encoding with a different byte order.\n      Console.Write( &quot;BE array with LE encoding : &quot; );\n      try  {\n         PrintCountsAndChars( barrBE, u32LE );\n      }\n      catch ( System.ArgumentException e )  {\n         Console.WriteLine( e.Message );\n      }\n\n      Console.Write( &quot;LE array with BE encoding : &quot; );\n      try  {\n         PrintCountsAndChars( barrLE, u32BE );\n      }\n      catch ( System.ArgumentException e )  {\n         Console.WriteLine( e.Message );\n      }\n\n   }\n\n\n   public static void PrintCountsAndChars( byte[] bytes, Encoding enc )  {\n\n      // Display the name of the encoding used.\n      Console.Write( &quot;{0,-25} :&quot;, enc.ToString() );\n\n      // Display the exact character count.\n      int iCC  = enc.GetCharCount( bytes );\n      Console.Write( &quot; {0,-3}&quot;, iCC );\n\n      // Display the maximum character count.\n      int iMCC = enc.GetMaxCharCount( bytes.Length );\n      Console.Write( &quot; {0,-3} :&quot;, iMCC );\n\n      // Decode the bytes and display the characters.\n      char[] chars = new char[iCC];\n      enc.GetChars( bytes, 0, bytes.Length, chars, 0 );\n      Console.WriteLine( chars );\n\n   }\n\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Text.UTF32Encoding.GetChars#1\">using namespace System;\nusing namespace System::Text;\nvoid PrintCountsAndChars( array&lt;Byte&gt;^bytes, Encoding^ enc );\nint main()\n{\n   \n   // Create two instances of UTF32Encoding: one with little-endian byte order and one with big-endian byte order.\n   UTF32Encoding^ u32LE = gcnew UTF32Encoding( false,true,true );\n   UTF32Encoding^ u32BE = gcnew UTF32Encoding( true,true,true );\n   \n   // Create byte arrays from the same string containing the following characters:\n   //    Latin Small Letter Z (U+007A)\n   //    Latin Small Letter A (U+0061)\n   //    Combining Breve (U+0306)\n   //    Latin Small Letter AE With Acute (U+01FD)\n   //    Greek Small Letter Beta (U+03B2)\n   String^ myStr = L&quot;za\\u0306\\u01FD\\u03B2\\xD8FF\\xDCFF&quot;;\n   \n   // barrBE uses the big-endian byte order.\n   array&lt;Byte&gt;^barrBE = gcnew array&lt;Byte&gt;(u32BE-&gt;GetByteCount( myStr ));\n   u32BE-&gt;GetBytes( myStr, 0, myStr-&gt;Length, barrBE, 0 );\n   \n   // barrLE uses the little-endian byte order.\n   array&lt;Byte&gt;^barrLE = gcnew array&lt;Byte&gt;(u32LE-&gt;GetByteCount( myStr ));\n   u32LE-&gt;GetBytes( myStr, 0, myStr-&gt;Length, barrLE, 0 );\n   \n   // Get the char counts and decode the byte arrays.\n   Console::Write( &quot;BE array with BE encoding : &quot; );\n   PrintCountsAndChars( barrBE, u32BE );\n   Console::Write( &quot;LE array with LE encoding : &quot; );\n   PrintCountsAndChars( barrLE, u32LE );\n   \n   // Decode the byte arrays using an encoding with a different byte order.\n   Console::Write( &quot;BE array with LE encoding : &quot; );\n   try\n   {\n      PrintCountsAndChars( barrBE, u32LE );\n   }\n   catch ( System::ArgumentException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n\n   Console::Write( &quot;LE array with BE encoding : &quot; );\n   try\n   {\n      PrintCountsAndChars( barrLE, u32BE );\n   }\n   catch ( System::ArgumentException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n\n}\n\nvoid PrintCountsAndChars( array&lt;Byte&gt;^bytes, Encoding^ enc )\n{\n   \n   // Display the name of the encoding used.\n   Console::Write( &quot;{0,-25} :&quot;, enc );\n   \n   // Display the exact character count.\n   int iCC = enc-&gt;GetCharCount( bytes );\n   Console::Write( &quot; {0,-3}&quot;, iCC );\n   \n   // Display the maximum character count.\n   int iMCC = enc-&gt;GetMaxCharCount( bytes-&gt;Length );\n   Console::Write( &quot; {0,-3} :&quot;, iMCC );\n   \n   // Decode the bytes and display the characters.\n   array&lt;Char&gt;^chars = gcnew array&lt;Char&gt;(iCC);\n   enc-&gt;GetChars( bytes, 0, bytes-&gt;Length, chars, 0 );\n   Console::WriteLine( chars );\n}\n\n/* \nThis code produces the following output.  The question marks take the place of characters that cannot be displayed at the console.\n\nBE array with BE encoding : System.Text.UTF32Encoding : 7   14  :za??ï¿½?\nLE array with LE encoding : System.Text.UTF32Encoding : 7   14  :za??ï¿½?\nBE array with LE encoding : System.Text.UTF32Encoding :Invalid byte was found at byte index 3.\nLE array with BE encoding : System.Text.UTF32Encoding :Invalid byte was found at byte index 3.\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.UTF32Encoding.GetChars#1\">Imports System\nImports System.Text\nImports Microsoft.VisualBasic\n\nPublic Class SamplesUTF32Encoding   \n\n   Public Shared Sub Main()\n\n      &#39; Create two instances of UTF32Encoding: one with little-endian byte order and one with big-endian byte order.\n      Dim u32LE As New UTF32Encoding(False, True, True)\n      Dim u32BE As New UTF32Encoding(True, True, True)\n\n\n      &#39; Create byte arrays from the same string containing the following characters:\n      &#39;    Latin Small Letter Z (U+007A)\n      &#39;    Latin Small Letter A (U+0061)\n      &#39;    Combining Breve (U+0306)\n      &#39;    Latin Small Letter AE With Acute (U+01FD)\n      &#39;    Greek Small Letter Beta (U+03B2)\n      &#39;    a high-surrogate value (U+D8FF)\n      &#39;    a low-surrogate value (U+DCFF)\n      Dim myStr As String = &quot;za&quot; &amp; ChrW(&amp;H0306) &amp; ChrW(&amp;H01FD) &amp; ChrW(&amp;H03B2) &amp; ChrW(&amp;HD8FF) &amp; ChrW(&amp;HDCFF)\n\n      &#39; barrBE uses the big-endian byte order.\n      &#39; NOTE: In Visual Basic, arrays contain one extra element by default.\n      &#39;       The following line creates an array with the exact number of elements required.\n      Dim barrBE(u32BE.GetByteCount(myStr) - 1) As Byte\n      u32BE.GetBytes(myStr, 0, myStr.Length, barrBE, 0)\n\n      &#39; barrLE uses the little-endian byte order.\n      &#39; NOTE: In Visual Basic, arrays contain one extra element by default.\n      &#39;       The following line creates an array with the exact number of elements required.\n      Dim barrLE(u32LE.GetByteCount(myStr) - 1) As Byte\n      u32LE.GetBytes(myStr, 0, myStr.Length, barrLE, 0)\n\n\n      &#39; Get the char counts and decode the byte arrays.\n      Console.Write(&quot;BE array with BE encoding : &quot;)\n      PrintCountsAndChars(barrBE, u32BE)\n      Console.Write(&quot;LE array with LE encoding : &quot;)\n      PrintCountsAndChars(barrLE, u32LE)\n\n\n      &#39; Decode the byte arrays using an encoding with a different byte order.\n      Console.Write(&quot;BE array with LE encoding : &quot;)\n      Try\n         PrintCountsAndChars(barrBE, u32LE)\n      Catch e As System.ArgumentException\n         Console.WriteLine(e.Message)\n      End Try\n\n      Console.Write(&quot;LE array with BE encoding : &quot;)\n      Try\n         PrintCountsAndChars(barrLE, u32BE)\n      Catch e As System.ArgumentException\n         Console.WriteLine(e.Message)\n      End Try\n\n   End Sub &#39;Main\n\n\n   Public Shared Sub PrintCountsAndChars(bytes() As Byte, enc As Encoding)\n\n      &#39; Display the name of the encoding used.\n      Console.Write(&quot;{0,-25} :&quot;, enc.ToString())\n\n      &#39; Display the exact character count.\n      Dim iCC As Integer = enc.GetCharCount(bytes)\n      Console.Write(&quot; {0,-3}&quot;, iCC)\n\n      &#39; Display the maximum character count.\n      Dim iMCC As Integer = enc.GetMaxCharCount(bytes.Length)\n      Console.Write(&quot; {0,-3} :&quot;, iMCC)\n\n      &#39; Decode the bytes and display the characters.\n      Dim chars(iCC) As Char\n      enc.GetChars(bytes, 0, bytes.Length, chars, 0)\n      Console.WriteLine(chars)\n\n   End Sub &#39;PrintCountsAndChars \n\nEnd Class &#39;SamplesUTF32Encoding\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_UTF32Encoding_GetPreamble\">\r\n    \r\n            <a id=\"System_Text_UTF32Encoding_GetPreamble_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetPreamble()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a Unicode byte order mark encoded in UTF-32 format, if the <a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">UTF32Encoding</a> object is configured to supply one.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override byte[] GetPreamble ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>A byte array containing the Unicode byte order mark, if the <a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">UTF32Encoding</a> object is configured to supply one. Otherwise, this method returns a zero-length byte array.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">UTF32Encoding</a> object can provide a preamble, which is an array of bytes that can be prefixed to the sequence of bytes resulting from the encoding process. Prefacing a sequence of encoded bytes with a byte order mark (code points U+0000 U+FEFF) helps the decoder determine the byte order and the transformation format, or UTF. The Unicode byte order mark (BOM) is serialized as follows (in hexadecimal):  </p>\n<ul>\n<li><p>Big endian byte order: 00 00 FE FF  </p>\n</li>\n<li><p>Little endian byte order: FF FE 00 00  </p>\n<p>You can instantiate a <a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">UTF32Encoding</a> object whose GetPreamble method returns a valid BOM in the following ways:  </p>\n</li>\n<li><p>By retrieving the <a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">UTF32Encoding</a> object returned by the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_UTF32_\" data-linktype=\"relative-path\">UTF32</a> property.  </p>\n</li>\n<li><p>By calling the parameterless <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding__ctor\" data-linktype=\"relative-path\">UTF32Encoding()</a> constructor to instantiate a <a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">UTF32Encoding</a> object.  </p>\n</li>\n<li><p>By supplying <code>true</code> as the value of the <code>byteOrderMark</code> argument to the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding__ctor_\" data-linktype=\"relative-path\">UTF32Encoding</a> and <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding__ctor_\" data-linktype=\"relative-path\">UTF32Encoding</a> constructors.  </p>\n<p>We recommend that you use the BOM, since it provides nearly certain identification of an encoding for files that otherwise have lost reference to the <a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">UTF32Encoding</a> object, for example, untagged or improperly tagged web data, or random text files stored when a business did not have international concerns or other data. Often, user problems might be avoided if data is consistently and properly tagged.  </p>\n<p>For standards that provide an encoding type, a BOM is somewhat redundant. However, it can be used to help a server send the correct encoding header. Alternatively, it can be used as a fallback in case the encoding is otherwise lost.  </p>\n<p>There are some disadvantages to using a BOM. For example, knowing how to limit the database fields that use a BOM can be difficult. Concatenation of files can be a problem also, for example, when files are merged in such a way that an unnecessary character can end up in the middle of data. In spite of the few disadvantages, however, the use of a BOM is highly recommended.  </p>\n<p>For more information on byte order and the byte order mark, see The Unicode Standard at the <a href=\"http://go.microsoft.com/fwlink/?LinkId=37123\" data-linktype=\"external\">Unicode home page</a>.  </p>\n</li>\n</ul>\n<div class=\"CAUTION\"><h5>Caution</h5><p> To ensure that the encoded bytes are decoded properly, you should prefix encoded bytes with a preamble. Note that the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method does not prepend a BOM to a sequence of encoded bytes; supplying a BOM at the beginning of an appropriate byte stream is the developer&#39;s responsibility.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example retrieves and displays the byte order mark for different <a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">UTF32Encoding</a> instances.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.UTF32Encoding.GetPreamble#1\">using System;\nusing System.Text;\n\npublic class SamplesUTF32Encoding\n{\n   public static void Main()\n   {\n      // Create instances of UTF32Encoding, with the byte order mark and without.\n      UTF32Encoding u32LeNone = new UTF32Encoding();\n      UTF32Encoding u32BeNone = new UTF32Encoding( true, false );\n      UTF32Encoding u32LeBom  = new UTF32Encoding( false, true );\n      UTF32Encoding u32BeBom  = new UTF32Encoding( true, true );\n\n      // Display the preamble for each instance.\n      PrintHexBytes( u32LeNone.GetPreamble() );\n      PrintHexBytes( u32BeNone.GetPreamble() );\n      PrintHexBytes( u32LeBom.GetPreamble() );\n      PrintHexBytes( u32BeBom.GetPreamble() );\n   }\n\n   public static void PrintHexBytes( byte[] bytes )\n   {\n\n      if (( bytes == null ) || ( bytes.Length == 0 ))\n         Console.WriteLine( &quot;&lt;none&gt;&quot; );\n      else  {\n         for ( int i = 0; i &lt; bytes.Length; i++ )\n            Console.Write( &quot;{0:X2} &quot;, bytes[i] );\n         Console.WriteLine();\n      }\n   }\n}\n/*\nThis example displays the following output.\n      FF FE 00 00\n      &lt;none&gt;\n      FF FE 00 00\n      00 00 FE FF\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Text.UTF32Encoding.GetPreamble#1\">using namespace System;\nusing namespace System::Text;\n\nvoid PrintHexBytes( array&lt;Byte&gt;^bytes );\n\nint main()\n{\n   \n   // Create instances of UTF32Encoding, with the byte order mark and without.\n   UTF32Encoding ^ u32LeNone = gcnew UTF32Encoding;\n   UTF32Encoding ^ u32BeNone = gcnew UTF32Encoding( true,false );\n   UTF32Encoding ^ u32LeBom = gcnew UTF32Encoding( false,true );\n   UTF32Encoding ^ u32BeBom = gcnew UTF32Encoding( true,true );\n   \n   // Display the preamble for each instance.\n   PrintHexBytes( u32LeNone-&gt;GetPreamble() );\n   PrintHexBytes( u32BeNone-&gt;GetPreamble() );\n   PrintHexBytes( u32LeBom-&gt;GetPreamble() );\n   PrintHexBytes( u32BeBom-&gt;GetPreamble() );\n}\n\nvoid PrintHexBytes( array&lt;Byte&gt;^bytes )\n{\n   if ( (bytes == nullptr) || (bytes-&gt;Length == 0) )\n      Console::WriteLine( &quot;&lt;none&gt;&quot; );\n   else\n   {\n      for ( int i = 0; i &lt; bytes-&gt;Length; i++ )\n         Console::Write( &quot;{0:X2} &quot;, bytes[ i ] );\n      Console::WriteLine();\n   }\n}\n\n/* \nThis example displays the following output:\n      FF FE 00 00\n      &lt;none&gt;\n      FF FE 00 00\n      00 00 FE FF\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.UTF32Encoding.GetPreamble#1\">Imports System.Text\n\nPublic Class SamplesUTF32Encoding   \n   Public Shared Sub Main()\n      &#39; Create instances of UTF32Encoding, with the byte order mark and without.\n      Dim u32LeNone As New UTF32Encoding()\n      Dim u32BeNone As New UTF32Encoding(True, False)\n      Dim u32LeBom As New UTF32Encoding(False, True)\n      Dim u32BeBom As New UTF32Encoding(True, True)\n\n      &#39; Display the preamble for each instance.\n      PrintHexBytes(u32LeNone.GetPreamble())\n      PrintHexBytes(u32BeNone.GetPreamble())\n      PrintHexBytes(u32LeBom.GetPreamble())\n      PrintHexBytes(u32BeBom.GetPreamble())\n   End Sub\n\n   Public Shared Sub PrintHexBytes(bytes() As Byte)\n      If bytes Is Nothing OrElse bytes.Length = 0 Then\n         Console.WriteLine(&quot;&lt;none&gt;&quot;)\n      Else\n         Dim i As Integer\n         For i = 0 To bytes.Length - 1\n            Console.Write(&quot;{0:X2} &quot;, bytes(i))\n         Next i\n         Console.WriteLine()\n      End If\n   End Sub\nEnd Class\n&#39;This example displays the following output:\n&#39;       FF FE 00 00\n&#39;       &lt;none&gt;\n&#39;       FF FE 00 00\n&#39;       00 00 FE FF\n</code></pre><p> The following example instantiates two <a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">UTF32Encoding</a> objects, the first of which does not provide a BOM and the second of which does. It then calls the GetPreamble method to write the BOM to a file before writing a UTF-32-encoded string. As the output from the example shows, the file that saves the bytes from the second encoder has four more bytes that the first.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Text.UTF32Encoding.GetPreamble#2\">Imports System.IO\nImports System.Text\n\nModule Example\n   Public Sub Main()\n      Dim s As String = &quot;This is a string to write to a file using UTF-32 encoding.&quot;\n      \n      &#39; Write a file using the default constructor without a BOM.\n      Dim enc As New UTF32Encoding(Not BitConverter.IsLittleEndian, False)\n      Dim bytes() As Byte = enc.GetBytes(s)\n      WriteToFile(&quot;NoPreamble.txt&quot;, enc, bytes)\n\n      &#39; Use BOM.\n      enc = New UTF32Encoding(Not BitConverter.IsLittleEndian, True)\n      WriteToFile(&quot;Preamble.txt&quot;, enc, bytes)\n   End Sub\n\n   Private Sub WriteToFile(fn As String, enc As Encoding, bytes As Byte())\n      Dim fs As New FileStream(fn, FileMode.Create)\n      Dim preamble() As Byte = enc.GetPreamble()\n      fs.Write(preamble, 0, preamble.Length)\n      Console.WriteLine(&quot;Preamble has {0} bytes&quot;, preamble.Length)\n      fs.Write(bytes, 0, bytes.Length)\n      Console.WriteLine(&quot;Wrote {0} bytes to {1}.&quot;, fs.Length, fn)\n      fs.Close()\n      Console.WriteLine()\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Preamble has 0 bytes\n&#39;       Wrote 232 bytes to NoPreamble.txt.\n&#39;\n&#39;       Preamble has 4 bytes\n&#39;       Wrote 236 bytes to Preamble.txt.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.UTF32Encoding.GetPreamble#2\">using System;\nusing System.IO;\nusing System.Text;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String s = &quot;This is a string to write to a file using UTF-32 encoding.&quot;;\n\n      // Write a file using the default constructor without a BOM.\n      var enc = new UTF32Encoding(! BitConverter.IsLittleEndian, false);\n      Byte[] bytes = enc.GetBytes(s);\n      WriteToFile(@&quot;.<br>oPreamble.txt&quot;, enc, bytes);\n\n      // Use BOM.\n      enc = new UTF32Encoding(! BitConverter.IsLittleEndian, true);\n      WriteToFile(@&quot;.\\Preamble.txt&quot;, enc, bytes);\n   }\n\n   private static void WriteToFile(String fn, Encoding enc, Byte[] bytes)\n   {\n      var fs = new FileStream(fn, FileMode.Create);\n      Byte[] preamble = enc.GetPreamble();\n      fs.Write(preamble, 0, preamble.Length);\n      Console.WriteLine(&quot;Preamble has {0} bytes&quot;, preamble.Length);\n      fs.Write(bytes, 0, bytes.Length);\n      Console.WriteLine(&quot;Wrote {0} bytes to {1}.&quot;, fs.Length, fn);\n      fs.Close();\n      Console.WriteLine();\n   }\n}\n// The example displays the following output:\n//       Preamble has 0 bytes\n//       Wrote 232 bytes to .<br>oPreamble.txt.\n//\n//       Preamble has 4 bytes\n//       Wrote 236 bytes to .\\Preamble.txt.\n</code></pre><p> You can also compare the files by using the <code>fc</code> command in a console window, or you can inspect the files in a text editor that includes a Hex View mode. Note that when the file is opened in an editor that supports UTF-32, the BOM is not displayed.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_UTF32Encoding_GetString_System_Byte___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Text_UTF32Encoding_GetString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetString(Byte[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Decodes a range of bytes from a byte array into a string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string GetString (byte[] bytes, int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bytes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The byte array containing the sequence of bytes to decode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the first byte to decode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes to decode.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that contains the results of decoding the specified sequence of bytes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>bytes</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> or <code>count</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>index</code> and <code>count</code> do not denote a valid range in <code>bytes</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Error detection is enabled, and <code>bytes</code> contains an invalid sequence of bytes.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.decoderfallbackexception\" data-linktype=\"relative-path\">DecoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for a complete explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.DecoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.decoderexceptionfallback\" data-linktype=\"relative-path\">DecoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>With error detection, an invalid sequence causes this method to throw a <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>. Without error detection, invalid sequences are ignored, and no exception is thrown.  </p>\n<p> If the range of bytes to be decoded includes the byte order mark (BOM), and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method. You can remove it by calling the <a class=\"xref\" href=\"system.string#System_String_TrimStart_\" data-linktype=\"relative-path\">TrimStart</a> method.  </p>\n<p> Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> or the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> provided by the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetDecoder_\" data-linktype=\"relative-path\">GetDecoder</a> method or the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetEncoder_\" data-linktype=\"relative-path\">GetEncoder</a> method, respectively.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example encodes a string into two arrays arrays of bytes, one in little-endian order and the other in big-endian order. It then decodes the bytes back into a string.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Text.UTF32Encoding.GetString#1\">Imports System.Text\n\nPublic Module Example  \n   Public Sub Main()  \n      &#39; Create two instances of UTF32Encoding: one with little-endian byte order and one with big-endian byte order.\n      Dim u32LE As New UTF32Encoding(False, True, True)\n      Dim u32BE As New UTF32Encoding(True, True, True)\n\n      &#39; Create byte arrays from the same string containing the following characters:\n      &#39;    Latin Small Letter Z (U+007A)\n      &#39;    Latin Small Letter A (U+0061)\n      &#39;    Combining Breve (U+0306)\n      &#39;    Latin Small Letter AE With Acute (U+01FD)\n      &#39;    Greek Small Letter Beta (U+03B2)\n      Dim str As String = &quot;za&quot; + ChrW(&amp;h0306) + ChrW(&amp;h01FD) + ChrW(&amp;h03B2)\n\n      &#39; barrBE uses the big-endian byte order.\n      Dim barrBE(u32BE.GetByteCount(str) - 1) As Byte\n      u32BE.GetBytes(str, 0, str.Length, barrBE, 0)\n\n      &#39; barrLE uses the little-endian byte order.\n      Dim barrLE(u32LE.GetByteCount(str) - 1) As Byte\n      u32LE.GetBytes(str, 0, str.Length, barrLE, 0)\n\n      &#39; Decode the byte arrays.\n      Console.WriteLine(&quot;BE array with BE encoding:&quot;)\n      DisplayString(barrBE, u32BE)\n      Console.WriteLine()\n\n      Console.WriteLine(&quot;LE array with LE encoding:&quot;)\n      DisplayString(barrLE, u32LE)\n      Console.WriteLine()\n   \n      &#39; Decode the byte arrays using an encoding with a different byte order.\n      Console.WriteLine(&quot;BE array with LE encoding:&quot;)\n      Try  \n         DisplayString(barrBE, u32LE)\n      Catch e As ArgumentException\n         Console.WriteLine(e.Message)\n      End Try\n      Console.WriteLine()\n\n      Console.WriteLine(&quot;LE array with BE encoding:&quot;)\n      Try  \n         DisplayString(barrLE, u32BE)\n      Catch e As ArgumentException\n         Console.WriteLine(e.Message)\n      End Try\n      Console.WriteLine()\n   End Sub\n\n   Public Sub DisplayString(bytes As Byte(), enc As Encoding )  \n      &#39; Display the name of the encoding used.\n      Console.Write(&quot;{0,-25}: &quot;, enc.ToString())\n\n      &#39; Decode the bytes and display the characters.\n      Console.WriteLine(enc.GetString(bytes, 0, bytes.Length))\n   End Sub\nEnd Module\n&#39; This example displays the following output:\n&#39;   BE array with BE encoding:\n&#39;   System.Text.UTF32Encoding: zaÌ†Ç½Î²\n&#39;\n&#39;   LE array with LE encoding:\n&#39;   System.Text.UTF32Encoding: zaÌ†Ç½Î²\n&#39;\n&#39;   BE array with LE encoding:\n&#39;   System.Text.UTF32Encoding: Unable to translate bytes [00][00][00][7A] at index 0 from specified code page to Unicode.\n&#39;\n&#39;   LE array with BE encoding:\n&#39;   System.Text.UTF32Encoding: Unable to translate bytes [7A][00][00][00] at index 0 from specified code page to Unicode.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.UTF32Encoding.GetString#1\">using System;\nusing System.Text;\n\npublic class Example  \n{\n   public static void Main()  \n   {\n      // Create two instances of UTF32Encoding: one with little-endian byte order and one with big-endian byte order.\n      UTF32Encoding u32LE = new UTF32Encoding(false, true, true);\n      UTF32Encoding u32BE = new UTF32Encoding(true, true, true);\n\n      // Create byte arrays from the same string containing the following characters:\n      //    Latin Small Letter Z (U+007A)\n      //    Latin Small Letter A (U+0061)\n      //    Combining Breve (U+0306)\n      //    Latin Small Letter AE With Acute (U+01FD)\n      //    Greek Small Letter Beta (U+03B2)\n      String str = &quot;za\\u0306\\u01FD\\u03B2&quot;;\n\n      // barrBE uses the big-endian byte order.\n      byte[] barrBE = new byte[u32BE.GetByteCount(str)];\n      u32BE.GetBytes(str, 0, str.Length, barrBE, 0);\n\n      // barrLE uses the little-endian byte order.\n      byte[] barrLE = new byte[u32LE.GetByteCount(str)];\n      u32LE.GetBytes(str, 0, str.Length, barrLE, 0);\n\n      // Decode the byte arrays.\n      Console.WriteLine(&quot;BE array with BE encoding:&quot;);\n      DisplayString(barrBE, u32BE);\n      Console.WriteLine();\n\n      Console.WriteLine(&quot;LE array with LE encoding:&quot;);\n      DisplayString(barrLE, u32LE);\n      Console.WriteLine();\n   \n      // Decode the byte arrays using an encoding with a different byte order.\n      Console.WriteLine(&quot;BE array with LE encoding:&quot;);\n      try  {\n         DisplayString(barrBE, u32LE);\n      }\n      catch (System.ArgumentException e)  {\n         Console.WriteLine(e.Message);\n      }\n      Console.WriteLine();\n\n      Console.WriteLine(&quot;LE array with BE encoding:&quot;);\n      try  {\n         DisplayString(barrLE, u32BE);\n      }\n      catch (ArgumentException e)  {\n         Console.WriteLine(e.Message);\n      }\n      Console.WriteLine();\n   }\n\n   public static void DisplayString(byte[] bytes, Encoding enc)  \n   {\n      // Display the name of the encoding used.\n      Console.Write(&quot;{0,-25}: &quot;, enc.ToString());\n\n      // Decode the bytes and display the characters.\n      Console.WriteLine(enc.GetString(bytes, 0, bytes.Length));\n   }\n}\n// This example displays the following output:\n//   BE array with BE encoding:\n//   System.Text.UTF32Encoding: zaÌ†Ç½Î²\n//\n//   LE array with LE encoding:\n//   System.Text.UTF32Encoding: zaÌ†Ç½Î²\n//\n//   BE array with LE encoding:\n//   System.Text.UTF32Encoding: Unable to translate bytes [00][00][00][7A] at index 0 from specified code page to Unicode.\n//\n//   LE array with BE encoding:\n//   System.Text.UTF32Encoding: Unable to translate bytes [7A][00][00][00] at index 0 from specified code page to Unicode.\n</code></pre><p> The following example initializes an array by calling the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method to determine exactly how many bytes are required for an encoded string and then adding the size of the byte order mark (BOM). The example then calls the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetPreamble_\" data-linktype=\"relative-path\">GetPreamble</a> method to store the BOM to the array before calling the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method to store the encoded bytes to the array. The example then calls the GetString method to decode the string.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.UTF32Encoding.GetString#2\">using System;\nusing System.Text;\n\npublic class Example\n{\n   public static void Main()\n   {\n      var utf32 = new UTF32Encoding(! BitConverter.IsLittleEndian, true);\n\n      String s = &quot;It was the best of times, it was the worst of times...&quot;;\n\n      // We need to dimension the array, since we&#39;ll populate it with 2 method calls.\n      Byte[] bytes = new Byte[utf32.GetByteCount(s) + utf32.GetPreamble().Length];\n      // Encode the string.\n      Array.Copy(utf32.GetPreamble(), bytes, utf32.GetPreamble().Length);\n      utf32.GetBytes(s, 0, s.Length, bytes, utf32.GetPreamble().Length);\n\n      // Decode the byte array.\n      String s2 = utf32.GetString(bytes, 0, bytes.Length);\n      Console.WriteLine(s2);\n   }\n}\n// The example displays the following output:\n//        ?It was the best of times, it was the worst of times...\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.UTF32Encoding.GetString#2\">Imports System.Text\n\nModule Example\n   Public Sub Main()\n      Dim utf32 As New UTF32Encoding(Not BitConverter.IsLittleEndian, True)\n\n      Dim s As String = &quot;It was the best of times, it was the worst of times...&quot;\n\n      &#39; We need to dimension the array, since we&#39;ll populate it with 2 method calls.\n      Dim bytes(utf32.GetByteCount(s) + utf32.GetPreamble().Length - 1) As Byte\n      &#39; Encode the string.\n      Array.Copy(utf32.GetPreamble(), bytes, utf32.GetPreamble().Length)\n      utf32.GetBytes(s, 0, s.Length, bytes, utf32.GetPreamble().Length)\n\n      &#39; Decode the byte array.\n      Dim s2 As String = utf32.GetString(bytes, 0, bytes.Length)\n      Console.WriteLine(s2)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       ?It was the best of times, it was the worst of times...\n</code></pre><p> Note that in this case the decoded string differs from the original string, since it begins with a 32-bit byte order mark U+FFFE U+0000. This means that the two strings will compare as unequal, and that if the string is output, the BOM will be displayed as the replacement character &quot;?&quot;.</p>\n\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Text.UTF32Encoding.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Text.UTF32Encoding.yml\">\r\n<meta name=\"APIName\" content=\"System.Text.UTF32Encoding\">\r\n<meta name=\"APIName\" content=\"System.Text.UTF32Encoding..ctor\">\r\n<meta name=\"APIName\" content=\"System.Text.UTF32Encoding.Equals\">\r\n<meta name=\"APIName\" content=\"System.Text.UTF32Encoding.GetByteCount\">\r\n<meta name=\"APIName\" content=\"System.Text.UTF32Encoding.GetBytes\">\r\n<meta name=\"APIName\" content=\"System.Text.UTF32Encoding.GetCharCount\">\r\n<meta name=\"APIName\" content=\"System.Text.UTF32Encoding.GetChars\">\r\n<meta name=\"APIName\" content=\"System.Text.UTF32Encoding.GetDecoder\">\r\n<meta name=\"APIName\" content=\"System.Text.UTF32Encoding.GetEncoder\">\r\n<meta name=\"APIName\" content=\"System.Text.UTF32Encoding.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Text.UTF32Encoding.GetMaxByteCount\">\r\n<meta name=\"APIName\" content=\"System.Text.UTF32Encoding.GetMaxCharCount\">\r\n<meta name=\"APIName\" content=\"System.Text.UTF32Encoding.GetPreamble\">\r\n<meta name=\"APIName\" content=\"System.Text.UTF32Encoding.GetString\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"6ef336f8-c5c1-c6fa-76de-228d4a858cc6\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a UTF-32 encoding of Unicode characters.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Text/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Text.UTF32Encoding\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Text.UTF32Encoding.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Text.UTF32Encoding.yml","open_to_public_contributors":true,"api_name":["System.Text.UTF32Encoding","System.Text.UTF32Encoding..ctor","System.Text.UTF32Encoding.Equals","System.Text.UTF32Encoding.GetByteCount","System.Text.UTF32Encoding.GetBytes","System.Text.UTF32Encoding.GetCharCount","System.Text.UTF32Encoding.GetChars","System.Text.UTF32Encoding.GetDecoder","System.Text.UTF32Encoding.GetEncoder","System.Text.UTF32Encoding.GetHashCode","System.Text.UTF32Encoding.GetMaxByteCount","System.Text.UTF32Encoding.GetMaxCharCount","System.Text.UTF32Encoding.GetPreamble","System.Text.UTF32Encoding.GetString"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Text.UTF32Encoding","System::Text::UTF32Encoding","System.Text.UTF32Encoding.#ctor","System::Text::UTF32Encoding::#ctor","System.Text.UTF32Encoding.Equals","System::Text::UTF32Encoding::Equals","System.Text.UTF32Encoding.GetByteCount","System::Text::UTF32Encoding::GetByteCount","System.Text.UTF32Encoding.GetBytes","System::Text::UTF32Encoding::GetBytes","System.Text.UTF32Encoding.GetCharCount","System::Text::UTF32Encoding::GetCharCount","System.Text.UTF32Encoding.GetChars","System::Text::UTF32Encoding::GetChars","System.Text.UTF32Encoding.GetDecoder","System::Text::UTF32Encoding::GetDecoder","System.Text.UTF32Encoding.GetEncoder","System::Text::UTF32Encoding::GetEncoder","System.Text.UTF32Encoding.GetHashCode","System::Text::UTF32Encoding::GetHashCode","System.Text.UTF32Encoding.GetMaxByteCount","System::Text::UTF32Encoding::GetMaxByteCount","System.Text.UTF32Encoding.GetMaxCharCount","System::Text::UTF32Encoding::GetMaxCharCount","System.Text.UTF32Encoding.GetPreamble","System::Text::UTF32Encoding::GetPreamble","System.Text.UTF32Encoding.GetString","System::Text::UTF32Encoding::GetString"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"6ef336f8-c5c1-c6fa-76de-228d4a858cc6","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Text/UTF32Encoding.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"UTF32Encoding class | Microsoft Docs","_op_ogTitle":"UTF32Encoding class","description":"Represents a UTF-32 encoding of Unicode characters.\n","toc_asset_id":"_splitted/System.Text/toc.json","toc_rel":"_splitted/System.Text/toc.json","source_url":"","ms.assetid":"System.Text.UTF32Encoding","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.text.utf32encoding","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.text.utf32encoding","fileRelativePath":"System.Text.UTF32Encoding.html"},"themesRelativePathToOutputRoot":"_themes/"}