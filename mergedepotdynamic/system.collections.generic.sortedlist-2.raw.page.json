{"content":"    \r\n    <h1 id=\"System_Collections_Generic_SortedList_2\">\r\n      <span class=\"lang-csharp\">SortedList&lt;TKey,TValue&gt;</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a collection of key/value pairs that are sorted by key based on the associated <span class=\"xref\">stem.Collections.Generic.IComparer`1</span> implementation.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Diagnostics.DebuggerDisplay(&quot;Count = {Count}&quot;)]\n[System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.System_DictionaryDebugView`2))]\n[System.Runtime.InteropServices.ComVisible(false)]\npublic class SortedList&lt;TKey,TValue&gt; : System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;, System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;, System.Collections.Generic.IReadOnlyCollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;, System.Collections.Generic.IReadOnlyDictionary&lt;TKey,TValue&gt;, System.Collections.IDictionary</code></pre>\r\n    \r\n    \r\n    \t<h2>Type Parameters</h2>\r\n    \r\n    \t<table class=\"nameValue\">\r\n    \t\t<tr>\r\n    \t\t<td>\r\n    \t\tTKey\r\n    \t\t</td>\r\n    \t\t<td>\r\n    \t\t<p>The type of keys in the collection.</p>\n\r\n    \t\t</td>\r\n    \t\t</tr>\r\n    \t\t<tr>\r\n    \t\t<td>\r\n    \t\tTValue\r\n    \t\t</td>\r\n    \t\t<td>\r\n    \t\t<p>The type of values in the collection.</p>\n\r\n    \t\t</td>\r\n    \t\t</tr>\r\n    \t</table>\r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">SortedList&lt;TKey,TValue&gt;</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The SortedList(TKey, generic class is an array of key/value pairs with O(log <code>n</code>) retrieval, where n is the number of elements in the dictionary. In this, it is similar to the <a class=\"xref\" href=\"system.collections.generic.sorteddictionary-2\" data-linktype=\"relative-path\">SortedDictionary&lt;TKey,TValue&gt;</a> generic class. The two classes have similar object models, and both have O(log <code>n</code>) retrieval. Where the two classes differ is in memory use and speed of insertion and removal:  </p>\n<ul>\n<li><p>SortedList(TKey, uses less memory than <a class=\"xref\" href=\"system.collections.generic.sorteddictionary-2\" data-linktype=\"relative-path\">SortedDictionary&lt;TKey,TValue&gt;</a>.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.collections.generic.sorteddictionary-2\" data-linktype=\"relative-path\">SortedDictionary&lt;TKey,TValue&gt;</a> has faster insertion and removal operations for unsorted data, O(log <code>n</code>) as opposed to O(<code>n</code>) for SortedList(TKey,.  </p>\n</li>\n<li><p>If the list is populated all at once from sorted data, SortedList(TKey, is faster than <a class=\"xref\" href=\"system.collections.generic.sorteddictionary-2\" data-linktype=\"relative-path\">SortedDictionary&lt;TKey,TValue&gt;</a>.  </p>\n<p>Another difference between the <a class=\"xref\" href=\"system.collections.generic.sorteddictionary-2\" data-linktype=\"relative-path\">SortedDictionary&lt;TKey,TValue&gt;</a> and SortedList(TKey, classes is that SortedList(TKey, supports efficient indexed retrieval of keys and values through the collections returned by the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_Keys_\" data-linktype=\"relative-path\">Keys</a> and <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_Values_\" data-linktype=\"relative-path\">Values</a> properties. It is not necessary to regenerate the lists when the properties are accessed, because the lists are just wrappers for the internal arrays of keys and values. The following code shows the use of the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_Values_\" data-linktype=\"relative-path\">Values</a> property for indexed retrieval of values from a sorted list of strings:  </p>\n<pre><code class=\"lang-cs\" name=\"Generic.SortedList#11\">        string v = mySortedList.Values[3];\n</code></pre><pre><code class=\"lang-cpp\" name=\"Generic.SortedList#11\">        String^ v = mySortedList-&gt;Values[3];\n</code></pre><pre><code class=\"lang-vb\" name=\"Generic.SortedList#11\">        Dim v As String = mySortedList.Values(3)\n</code></pre><p>SortedList(TKey, is implemented as an array of key/value pairs, sorted by the key.  Each element can be retrieved as a <a class=\"xref\" href=\"system.collections.generic.keyvaluepair-2\" data-linktype=\"relative-path\">KeyValuePair&lt;TKey,TValue&gt;</a> object.  </p>\n<p>Key objects must be immutable as long as they are used as keys in the SortedList(TKey,. Every key in a SortedList(TKey, must be unique. A key cannot be <code>null</code>, but a value can be, if the type of values in the list, <code>TValue</code>, is a reference type.  </p>\n<p>SortedList(TKey, requires a comparer implementation to sort and to perform comparisons.  The default comparer <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a> checks whether the key type <code>TKey</code> implements <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">System.IComparable&lt;T&gt;</a> and uses that implementation, if available.  If not, <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a> checks whether the key type <code>TKey</code> implements <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">System.IComparable</a>.  If the key type <code>TKey</code> does not implement either interface, you can specify a <a class=\"xref\" href=\"system.collections.generic.icomparer-1\" data-linktype=\"relative-path\">System.Collections.Generic.IComparer&lt;T&gt;</a> implementation in a constructor overload that accepts a <code>comparer</code> parameter.  </p>\n<p>The capacity of a SortedList(TKey, is the number of elements the SortedList(TKey, can hold. As elements are added to a SortedList(TKey,, the capacity is automatically increased as required by reallocating the internal array. The capacity can be decreased by calling <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_TrimExcess_\" data-linktype=\"relative-path\">TrimExcess</a> or by setting the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_Capacity_\" data-linktype=\"relative-path\">Capacity</a> property explicitly. Decreasing the capacity reallocates memory and copies all the elements in the SortedList(TKey,.  </p>\n<p>For very large SortedList(TKey, objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the <code>enabled</code> attribute of the  configuration element to <code>true</code> in the run-time environment.  </p>\n<p>The <code>foreach</code> statement of the C# language (<code>for each</code> in C++, <code>For Each</code> in Visual Basic) returns an object of the type of the elements in the collection. Since the elements of the SortedList(TKey, are key/value pairs, the element type is not the type of the key or the type of the value. Instead, the element type is <a class=\"xref\" href=\"system.collections.generic.keyvaluepair-2\" data-linktype=\"relative-path\">KeyValuePair&lt;TKey,TValue&gt;</a>. For example:  </p>\n<pre><code class=\"lang-cs\" name=\"Generic.SortedList#12\">        foreach( KeyValuePair&lt;int, string&gt; kvp in mySortedList )\n        {\n            Console.WriteLine(&quot;Key = {0}, Value = {1}&quot;, kvp.Key, kvp.Value);\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"Generic.SortedList#12\">        for each( KeyValuePair&lt;int, String^&gt; kvp in mySortedList )\n        {\n            Console::WriteLine(&quot;Key = {0}, Value = {1}&quot;, kvp.Key, kvp.Value);\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"Generic.SortedList#12\">        For Each kvp As KeyValuePair(Of Integer, String) In mySortedList\n            Console.WriteLine(&quot;Key = {0}, Value = {1}&quot;, kvp.Key, kvp.Value)\n        Next kvp\n</code></pre><p>The <code>foreach</code> statement is a wrapper around the enumerator, which only allows reading from, not writing to, the collection.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_SortedList_2__ctor\" data-linktype=\"self-bookmark\">SortedList&lt;TKey,TValue&gt;()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span> class that is empty, has the default initial capacity, and uses the default <span class=\"xref\">stem.Collections.Generic.IComparer`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_SortedList_2__ctor_System_Collections_Generic_IComparer__0__\" data-linktype=\"self-bookmark\">SortedList&lt;TKey,TValue&gt;(IComparer&lt;TKey&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span> class that is empty, has the default initial capacity, and uses the specified <span class=\"xref\">stem.Collections.Generic.IComparer`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_SortedList_2__ctor_System_Collections_Generic_IDictionary__0__1__\" data-linktype=\"self-bookmark\">SortedList&lt;TKey,TValue&gt;(IDictionary&lt;TKey,TValue&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span> class that contains elements copied from the specified <span class=\"xref\">stem.Collections.Generic.IDictionary`2</span>, has sufficient capacity to accommodate the number of elements copied, and uses the default <span class=\"xref\">stem.Collections.Generic.IComparer`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_SortedList_2__ctor_System_Int32_\" data-linktype=\"self-bookmark\">SortedList&lt;TKey,TValue&gt;(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span> class that is empty, has the specified initial capacity, and uses the default <span class=\"xref\">stem.Collections.Generic.IComparer`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_SortedList_2__ctor_System_Collections_Generic_IDictionary__0__1__System_Collections_Generic_IComparer__0__\" data-linktype=\"self-bookmark\">SortedList&lt;TKey,TValue&gt;(IDictionary&lt;TKey,TValue&gt;,IComparer&lt;TKey&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span> class that contains elements copied from the specified <span class=\"xref\">stem.Collections.Generic.IDictionary`2</span>, has sufficient capacity to accommodate the number of elements copied, and uses the specified <span class=\"xref\">stem.Collections.Generic.IComparer`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_SortedList_2__ctor_System_Int32_System_Collections_Generic_IComparer__0__\" data-linktype=\"self-bookmark\">SortedList&lt;TKey,TValue&gt;(Int32,IComparer&lt;TKey&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span> class that is empty, has the specified initial capacity, and uses the specified <span class=\"xref\">stem.Collections.Generic.IComparer`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_SortedList_2_Capacity\" data-linktype=\"self-bookmark\">Capacity</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the number of elements that the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span> can contain.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_SortedList_2_Comparer\" data-linktype=\"self-bookmark\">Comparer</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <span class=\"xref\">stem.Collections.Generic.IComparer`1</span> for the sorted list.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_SortedList_2_Count\" data-linktype=\"self-bookmark\">Count</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the number of key/value pairs contained in the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_SortedList_2_Item__0_\" data-linktype=\"self-bookmark\">Item(TKey)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the value associated with the specified key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_SortedList_2_Keys\" data-linktype=\"self-bookmark\">Keys</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a collection containing the keys in the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span>, in sorted order.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_SortedList_2_Values\" data-linktype=\"self-bookmark\">Values</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a collection containing the values in the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_SortedList_2_Add__0__1_\" data-linktype=\"self-bookmark\">Add(TKey,TValue)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds an element with the specified key and value into the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_SortedList_2_Clear\" data-linktype=\"self-bookmark\">Clear()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes all elements from the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_SortedList_2_ContainsKey__0_\" data-linktype=\"self-bookmark\">ContainsKey(TKey)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span> contains a specific key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_SortedList_2_ContainsValue__1_\" data-linktype=\"self-bookmark\">ContainsValue(TValue)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span> contains a specific value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_SortedList_2_GetEnumerator\" data-linktype=\"self-bookmark\">GetEnumerator()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an enumerator that iterates through the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_SortedList_2_IndexOfKey__0_\" data-linktype=\"self-bookmark\">IndexOfKey(TKey)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified key and returns the zero-based index within the entire <span class=\"xref\">stem.Collections.Generic.SortedList`2</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_SortedList_2_IndexOfValue__1_\" data-linktype=\"self-bookmark\">IndexOfValue(TValue)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified value and returns the zero-based index of the first occurrence within the entire <span class=\"xref\">stem.Collections.Generic.SortedList`2</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_SortedList_2_Remove__0_\" data-linktype=\"self-bookmark\">Remove(TKey)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes the element with the specified key from the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_SortedList_2_RemoveAt_System_Int32_\" data-linktype=\"self-bookmark\">RemoveAt(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes the element at the specified index of the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_SortedList_2_TrimExcess\" data-linktype=\"self-bookmark\">TrimExcess()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the capacity to the actual number of elements in the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span>, if that number is less than 90 percent of current capacity.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_SortedList_2_TryGetValue__0__1__\" data-linktype=\"self-bookmark\">TryGetValue(TKey,TValue)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value associated with the specified key.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_SortedList_2_System_Collections_Generic_ICollection_System_Collections_Generic_KeyValuePair_TKey_TValue___Add_System_Collections_Generic_KeyValuePair__0__1__\" data-linktype=\"self-bookmark\">ICollection&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.Add(KeyValuePair&lt;TKey,TValue&gt;)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_SortedList_2_System_Collections_Generic_ICollection_System_Collections_Generic_KeyValuePair_TKey_TValue___Contains_System_Collections_Generic_KeyValuePair__0__1__\" data-linktype=\"self-bookmark\">ICollection&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.Contains(KeyValuePair&lt;TKey,TValue&gt;)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_SortedList_2_System_Collections_Generic_ICollection_System_Collections_Generic_KeyValuePair_TKey_TValue___CopyTo_System_Collections_Generic_KeyValuePair__0__1____System_Int32_\" data-linktype=\"self-bookmark\">ICollection&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.CopyTo(KeyValuePair&lt;TKey,TValue&gt;[],Int32)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_SortedList_2_System_Collections_Generic_ICollection_System_Collections_Generic_KeyValuePair_TKey_TValue___IsReadOnly\" data-linktype=\"self-bookmark\">ICollection&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.IsReadOnly</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_SortedList_2_System_Collections_Generic_ICollection_System_Collections_Generic_KeyValuePair_TKey_TValue___Remove_System_Collections_Generic_KeyValuePair__0__1__\" data-linktype=\"self-bookmark\">ICollection&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.Remove(KeyValuePair&lt;TKey,TValue&gt;)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_SortedList_2_System_Collections_Generic_IDictionary_TKey_TValue__Keys\" data-linktype=\"self-bookmark\">IDictionary&lt;TKey,TValue&gt;.Keys</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_SortedList_2_System_Collections_Generic_IDictionary_TKey_TValue__Values\" data-linktype=\"self-bookmark\">IDictionary&lt;TKey,TValue&gt;.Values</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_SortedList_2_System_Collections_Generic_IEnumerable_System_Collections_Generic_KeyValuePair_TKey_TValue___GetEnumerator\" data-linktype=\"self-bookmark\">IEnumerable&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.GetEnumerator()</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_SortedList_2_System_Collections_Generic_IReadOnlyDictionary_TKey_TValue__Keys\" data-linktype=\"self-bookmark\">IReadOnlyDictionary&lt;TKey,TValue&gt;.Keys</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_SortedList_2_System_Collections_Generic_IReadOnlyDictionary_TKey_TValue__Values\" data-linktype=\"self-bookmark\">IReadOnlyDictionary&lt;TKey,TValue&gt;.Values</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_SortedList_2_System_Collections_ICollection_CopyTo_System_Array_System_Int32_\" data-linktype=\"self-bookmark\">ICollection.CopyTo(Array,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies the elements of the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> to an <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>, starting at a particular <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_SortedList_2_System_Collections_ICollection_IsSynchronized\" data-linktype=\"self-bookmark\">ICollection.IsSynchronized</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether access to the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> is synchronized (thread safe).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_SortedList_2_System_Collections_ICollection_SyncRoot\" data-linktype=\"self-bookmark\">ICollection.SyncRoot</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an object that can be used to synchronize access to the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_SortedList_2_System_Collections_IDictionary_Add_System_Object_System_Object_\" data-linktype=\"self-bookmark\">IDictionary.Add(Object,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds an element with the provided key and value to the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_SortedList_2_System_Collections_IDictionary_Contains_System_Object_\" data-linktype=\"self-bookmark\">IDictionary.Contains(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> contains an element with the specified key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_SortedList_2_System_Collections_IDictionary_GetEnumerator\" data-linktype=\"self-bookmark\">IDictionary.GetEnumerator()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an <a class=\"xref\" href=\"system.collections.idictionaryenumerator\" data-linktype=\"relative-path\">IDictionaryEnumerator</a> for the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_SortedList_2_System_Collections_IDictionary_IsFixedSize\" data-linktype=\"self-bookmark\">IDictionary.IsFixedSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> has a fixed size.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_SortedList_2_System_Collections_IDictionary_IsReadOnly\" data-linktype=\"self-bookmark\">IDictionary.IsReadOnly</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_SortedList_2_System_Collections_IDictionary_Item_System_Object_\" data-linktype=\"self-bookmark\">IDictionary.Item(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the element with the specified key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_SortedList_2_System_Collections_IDictionary_Keys\" data-linktype=\"self-bookmark\">IDictionary.Keys</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> containing the keys of the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_SortedList_2_System_Collections_IDictionary_Remove_System_Object_\" data-linktype=\"self-bookmark\">IDictionary.Remove(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes the element with the specified key from the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_SortedList_2_System_Collections_IDictionary_Values\" data-linktype=\"self-bookmark\">IDictionary.Values</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> containing the values in the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_SortedList_2_System_Collections_IEnumerable_GetEnumerator\" data-linktype=\"self-bookmark\">IEnumerable.GetEnumerator()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an enumerator that iterates through a collection.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_SortedList_2__ctor\">\r\n    \r\n            <a id=\"System_Collections_Generic_SortedList_2__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SortedList&lt;TKey,TValue&gt;()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span> class that is empty, has the default initial capacity, and uses the default <span class=\"xref\">stem.Collections.Generic.IComparer`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public SortedList ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Every key in a <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a> must be unique according to the default comparer.  </p>\n<p> This constructor uses the default value for the initial capacity of the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a>. To set the initial capacity, use the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2__ctor_System_Int32_\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;(Int32)</a> constructor. If the final size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a>.  </p>\n<p> This constructor uses the default comparer for <code>TKey</code>. To specify a comparer, use the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2__ctor_System_Collections_Generic_IComparer__0__\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;(IComparer&lt;TKey&gt;)</a> constructor. The default comparer <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a> checks whether the key type <code>TKey</code> implements <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">System.IComparable&lt;T&gt;</a> and uses that implementation, if available.  If not, <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a> checks whether the key type <code>TKey</code> implements <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">System.IComparable</a>.  If the key type <code>TKey</code> does not implement either interface, you can specify a <a class=\"xref\" href=\"system.collections.generic.icomparer-1\" data-linktype=\"relative-path\">System.Collections.Generic.IComparer&lt;T&gt;</a> implementation in a constructor overload that accepts a <code>comparer</code> parameter.  </p>\n<p> This constructor is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates an empty <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a> of strings with string keys and uses the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_Add_\" data-linktype=\"relative-path\">Add</a> method to add some elements. The example demonstrates that the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_Add_\" data-linktype=\"relative-path\">Add</a> method throws an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a> when attempting to add a duplicate key.  </p>\n<p> This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"Generic.SortedList#2\">        &#39; Create a new sorted list of strings, with string \n        &#39; keys. \n        Dim openWith As New SortedList(Of String, String)\n        \n        &#39; Add some elements to the list. There are no \n        &#39; duplicate keys, but some of the values are duplicates.\n        openWith.Add(&quot;txt&quot;, &quot;notepad.exe&quot;)\n        openWith.Add(&quot;bmp&quot;, &quot;paint.exe&quot;)\n        openWith.Add(&quot;dib&quot;, &quot;paint.exe&quot;)\n        openWith.Add(&quot;rtf&quot;, &quot;wordpad.exe&quot;)\n        \n        &#39; The Add method throws an exception if the new key is \n        &#39; already in the list.\n        Try\n            openWith.Add(&quot;txt&quot;, &quot;winword.exe&quot;)\n        Catch \n            Console.WriteLine(&quot;An element with Key = &quot;&quot;txt&quot;&quot; already exists.&quot;)\n        End Try\n</code></pre><pre><code class=\"lang-cpp\" name=\"Generic.SortedList#2\">        // Create a new sorted list of strings, with string\n        // keys.\n        SortedList&lt;String^, String^&gt;^ openWith =\n            gcnew SortedList&lt;String^, String^&gt;();\n\n        // Add some elements to the list. There are no \n        // duplicate keys, but some of the values are duplicates.\n        openWith-&gt;Add(&quot;txt&quot;, &quot;notepad.exe&quot;);\n        openWith-&gt;Add(&quot;bmp&quot;, &quot;paint.exe&quot;);\n        openWith-&gt;Add(&quot;dib&quot;, &quot;paint.exe&quot;);\n        openWith-&gt;Add(&quot;rtf&quot;, &quot;wordpad.exe&quot;);\n\n        // The Add method throws an exception if the new key is\n        // already in the list.\n        try\n        {\n            openWith-&gt;Add(&quot;txt&quot;, &quot;winword.exe&quot;);\n        }\n        catch (ArgumentException^)\n        {\n            Console::WriteLine(&quot;An element with Key = \\&quot;txt\\&quot; already exists.&quot;);\n        }\n</code></pre><pre><code class=\"lang-cs\" name=\"Generic.SortedList#2\">        // Create a new sorted list of strings, with string\n        // keys.\n        SortedList&lt;string, string&gt; openWith = \n            new SortedList&lt;string, string&gt;();\n\n        // Add some elements to the list. There are no \n        // duplicate keys, but some of the values are duplicates.\n        openWith.Add(&quot;txt&quot;, &quot;notepad.exe&quot;);\n        openWith.Add(&quot;bmp&quot;, &quot;paint.exe&quot;);\n        openWith.Add(&quot;dib&quot;, &quot;paint.exe&quot;);\n        openWith.Add(&quot;rtf&quot;, &quot;wordpad.exe&quot;);\n\n        // The Add method throws an exception if the new key is \n        // already in the list.\n        try\n        {\n            openWith.Add(&quot;txt&quot;, &quot;winword.exe&quot;);\n        }\n        catch (ArgumentException)\n        {\n            Console.WriteLine(&quot;An element with Key = \\&quot;txt\\&quot; already exists.&quot;);\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_SortedList_2__ctor_System_Collections_Generic_IComparer__0__\">\r\n    \r\n            <a id=\"System_Collections_Generic_SortedList_2__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SortedList&lt;TKey,TValue&gt;(IComparer&lt;TKey&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span> class that is empty, has the default initial capacity, and uses the specified <span class=\"xref\">stem.Collections.Generic.IComparer`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public SortedList (System.Collections.Generic.IComparer&lt;TKey&gt; comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.icomparer-1\" data-linktype=\"relative-path\">IComparer</a>&lt;<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Collections.Generic.IComparer`1</span> implementation to use when comparing keys.  </p>\n<p> -or-  </p>\n<p> <code>null</code> to use the default <span class=\"xref\">stem.Collections.Generic.Comparer`1</span> for the type of the key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Every key in a <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a> must be unique according to the specified comparer.  </p>\n<p> This constructor uses the default value for the initial capacity of the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a>. To set the initial capacity, use the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2__ctor_System_Int32_System_Collections_Generic_IComparer__0__\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;(Int32,IComparer&lt;TKey&gt;)</a> constructor. If the final size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a>.  </p>\n<p> This constructor is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a sorted list with a case-insensitive comparer for the current culture. The example adds four elements, some with lower-case keys and some with upper-case keys. The example then attempts to add an element with a key that differs from an existing key only by case, catches the resulting exception, and displays an error message. Finally, the example displays the elements in case-insensitive sort order.  </p>\n<pre><code class=\"lang-vb\" name=\"Generic.SortedList.ctor_IComp#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class Example\n    \n    Public Shared Sub Main() \n\n        &#39; Create a new sorted list of strings, with string keys and\n        &#39; a case-insensitive comparer for the current culture.\n        Dim openWith As New SortedList(Of String, String)( _\n            StringComparer.CurrentCultureIgnoreCase)\n        \n        &#39; Add some elements to the list. \n        openWith.Add(&quot;txt&quot;, &quot;notepad.exe&quot;)\n        openWith.Add(&quot;bmp&quot;, &quot;paint.exe&quot;)\n        openWith.Add(&quot;DIB&quot;, &quot;paint.exe&quot;)\n        openWith.Add(&quot;rtf&quot;, &quot;wordpad.exe&quot;)\n\n        &#39; Try to add a fifth element with a key that is the same \n        &#39; except for case; this would be allowed with the default\n        &#39; comparer.\n        Try\n            openWith.Add(&quot;BMP&quot;, &quot;paint.exe&quot;)\n        Catch ex As ArgumentException\n            Console.WriteLine(vbLf &amp; &quot;BMP is already in the sorted list.&quot;)\n        End Try\n        \n        &#39; List the contents of the sorted list.\n        Console.WriteLine()\n        For Each kvp As KeyValuePair(Of String, String) In openWith\n            Console.WriteLine(&quot;Key = {0}, Value = {1}&quot;, _\n                kvp.Key, kvp.Value)\n        Next kvp\n\n    End Sub\n\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;BMP is already in the sorted list.\n&#39;\n&#39;Key = bmp, Value = paint.exe\n&#39;Key = DIB, Value = paint.exe\n&#39;Key = rtf, Value = wordpad.exe\n&#39;Key = txt, Value = notepad.exe\n</code></pre><pre><code class=\"lang-cs\" name=\"Generic.SortedList.ctor_IComp#1\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Create a new sorted list of strings, with string keys and\n        // a case-insensitive comparer for the current culture.\n        SortedList&lt;string, string&gt; openWith = \n                      new SortedList&lt;string, string&gt;( \n                          StringComparer.CurrentCultureIgnoreCase);\n        \n        // Add some elements to the list. \n        openWith.Add(&quot;txt&quot;, &quot;notepad.exe&quot;);\n        openWith.Add(&quot;bmp&quot;, &quot;paint.exe&quot;);\n        openWith.Add(&quot;DIB&quot;, &quot;paint.exe&quot;);\n        openWith.Add(&quot;rtf&quot;, &quot;wordpad.exe&quot;);\n\n        // Try to add a fifth element with a key that is the same \n        // except for case; this would be allowed with the default\n        // comparer.\n        try\n        {\n            openWith.Add(&quot;BMP&quot;, &quot;paint.exe&quot;);\n        }\n        catch (ArgumentException)\n        {\n            Console.WriteLine(&quot;<br>BMP is already in the sorted list.&quot;);\n        }\n        \n        // List the contents of the sorted list.\n        Console.WriteLine();\n        foreach( KeyValuePair&lt;string, string&gt; kvp in openWith )\n        {\n            Console.WriteLine(&quot;Key = {0}, Value = {1}&quot;, kvp.Key, \n                kvp.Value);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nBMP is already in the sorted list.\n\nKey = bmp, Value = paint.exe\nKey = DIB, Value = paint.exe\nKey = rtf, Value = wordpad.exe\nKey = txt, Value = notepad.exe\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_SortedList_2__ctor_System_Collections_Generic_IDictionary__0__1__\">\r\n    \r\n            <a id=\"System_Collections_Generic_SortedList_2__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SortedList&lt;TKey,TValue&gt;(IDictionary&lt;TKey,TValue&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span> class that contains elements copied from the specified <span class=\"xref\">stem.Collections.Generic.IDictionary`2</span>, has sufficient capacity to accommodate the number of elements copied, and uses the default <span class=\"xref\">stem.Collections.Generic.IComparer`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public SortedList (System.Collections.Generic.IDictionary&lt;TKey,TValue&gt; dictionary);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dictionary</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.idictionary-2\" data-linktype=\"relative-path\">IDictionary<tkey,tvalue></tkey,tvalue></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Collections.Generic.IDictionary`2</span> whose elements are copied to the new <span class=\"xref\">stem.Collections.Generic.SortedList`2</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>dictionary</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>dictionary</code> contains one or more duplicate keys.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Every key in a <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a> must be unique according to the default comparer; likewise, every key in the source <code>dictionary</code> must also be unique according to the default comparer.  </p>\n<p> The capacity of the new <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a> is set to the number of elements in <code>dictionary</code>, so no resizing takes place while the list is being populated.  </p>\n<p> This constructor uses the default comparer for <code>TKey</code>. To specify a comparer, use the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2__ctor_System_Collections_Generic_IDictionary__0__1__System_Collections_Generic_IComparer__0__\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;(IDictionary&lt;TKey,TValue&gt;,IComparer&lt;TKey&gt;)</a> constructor. The default comparer <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a> checks whether the key type <code>TKey</code> implements <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">System.IComparable&lt;T&gt;</a> and uses that implementation, if available.  If not, <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a> checks whether the key type <code>TKey</code> implements <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">System.IComparable</a>.  If the key type <code>TKey</code> does not implement either interface, you can specify a <a class=\"xref\" href=\"system.collections.generic.icomparer-1\" data-linktype=\"relative-path\">System.Collections.Generic.IComparer&lt;T&gt;</a> implementation in a constructor overload that accepts a <code>comparer</code> parameter.  </p>\n<p> If the data in <code>dictionary</code> are sorted, this constructor is an O(<code>n</code>) operation, where <code>n</code> is the number of elements in <code>dictionary</code>. Otherwise it is an O(<code>n</code>*<code>n</code>) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to use <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a> to create a sorted copy of the information in a <a class=\"xref\" href=\"system.collections.generic.dictionary-2\" data-linktype=\"relative-path\">Dictionary&lt;TKey,TValue&gt;</a>, by passing the <a class=\"xref\" href=\"system.collections.generic.dictionary-2\" data-linktype=\"relative-path\">Dictionary&lt;TKey,TValue&gt;</a> to the SortedList(TKey, constructor.  </p>\n<pre><code class=\"lang-cs\" name=\"Generic.SortedList.ctor_IDic#1\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Create a new Dictionary of strings, with string keys.\n        //\n        Dictionary&lt;string, string&gt; openWith = \n                                  new Dictionary&lt;string, string&gt;();\n        \n        // Add some elements to the dictionary. \n        openWith.Add(&quot;txt&quot;, &quot;notepad.exe&quot;);\n        openWith.Add(&quot;bmp&quot;, &quot;paint.exe&quot;);\n        openWith.Add(&quot;dib&quot;, &quot;paint.exe&quot;);\n        openWith.Add(&quot;rtf&quot;, &quot;wordpad.exe&quot;);\n        \n        // Create a SortedList of strings with string keys, \n        // and initialize it with the contents of the Dictionary.\n        SortedList&lt;string, string&gt; copy = \n                  new SortedList&lt;string, string&gt;(openWith);\n\n        // List the contents of the copy.\n        Console.WriteLine();\n        foreach( KeyValuePair&lt;string, string&gt; kvp in copy )\n        {\n            Console.WriteLine(&quot;Key = {0}, Value = {1}&quot;, \n               kvp.Key, kvp.Value);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nKey = bmp, Value = paint.exe\nKey = dib, Value = paint.exe\nKey = rtf, Value = wordpad.exe\nKey = txt, Value = notepad.exe\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Generic.SortedList.ctor_IDic#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class Example\n    \n    Public Shared Sub Main() \n\n        &#39; Create a new Dictionary of strings, with string \n        &#39; keys.\n        Dim openWith As New Dictionary(Of String, String)\n        \n        &#39; Add some elements to the dictionary. \n        openWith.Add(&quot;txt&quot;, &quot;notepad.exe&quot;)\n        openWith.Add(&quot;bmp&quot;, &quot;paint.exe&quot;)\n        openWith.Add(&quot;dib&quot;, &quot;paint.exe&quot;)\n        openWith.Add(&quot;rtf&quot;, &quot;wordpad.exe&quot;)\n        \n        &#39; Create a SortedList of strings with string keys, \n        &#39; and initialize it with the contents of the Dictionary.\n        Dim copy As New SortedList(Of String, String)(openWith)\n\n        &#39; List the sorted contents of the copy.\n        Console.WriteLine()\n        For Each kvp As KeyValuePair(Of String, String) In copy\n            Console.WriteLine(&quot;Key = {0}, Value = {1}&quot;, _\n                kvp.Key, kvp.Value)\n        Next kvp\n\n    End Sub\n\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Key = bmp, Value = paint.exe\n&#39;Key = dib, Value = paint.exe\n&#39;Key = rtf, Value = wordpad.exe\n&#39;Key = txt, Value = notepad.exe\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_SortedList_2__ctor_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_Generic_SortedList_2__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SortedList&lt;TKey,TValue&gt;(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span> class that is empty, has the specified initial capacity, and uses the default <span class=\"xref\">stem.Collections.Generic.IComparer`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public SortedList (int capacity);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>capacity</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The initial number of elements that the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span> can contain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>capacity</code> is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Every key in a <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a> must be unique according to the default comparer.  </p>\n<p> The capacity of a <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a> is the number of elements that the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a> can hold before resizing. As elements are added to a <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a>, the capacity is automatically increased as required by reallocating the internal array.  </p>\n<p> If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a>.  </p>\n<p> The capacity can be decreased by calling <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_TrimExcess_\" data-linktype=\"relative-path\">TrimExcess</a> or by setting the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_Capacity_\" data-linktype=\"relative-path\">Capacity</a> property explicitly. Decreasing the capacity reallocates memory and copies all the elements in the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a>.  </p>\n<p> This constructor uses the default comparer for <code>TKey</code>. To specify a comparer, use the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2__ctor_System_Int32_System_Collections_Generic_IComparer__0__\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;(Int32,IComparer&lt;TKey&gt;)</a> constructor. The default comparer <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a> checks whether the key type <code>TKey</code> implements <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">System.IComparable&lt;T&gt;</a> and uses that implementation, if available.  If not, <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a> checks whether the key type <code>TKey</code> implements <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">System.IComparable</a>.  If the key type <code>TKey</code> does not implement either interface, you can specify a <a class=\"xref\" href=\"system.collections.generic.icomparer-1\" data-linktype=\"relative-path\">System.Collections.Generic.IComparer&lt;T&gt;</a> implementation in a constructor overload that accepts a <code>comparer</code> parameter.  </p>\n<p> This constructor is an O(<code>n</code>) operation, where <code>n</code> is <code>capacity</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a sorted list with an initial capacity of 4 and populates it with 4 entries.  </p>\n<pre><code class=\"lang-cs\" name=\"Generic.SortedList.ctor_Int32#1\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Create a new sorted list of strings, with string keys and\n        // an initial capacity of 4.\n        SortedList&lt;string, string&gt; openWith = \n                               new SortedList&lt;string, string&gt;(4);\n        \n        // Add 4 elements to the list. \n        openWith.Add(&quot;txt&quot;, &quot;notepad.exe&quot;);\n        openWith.Add(&quot;bmp&quot;, &quot;paint.exe&quot;);\n        openWith.Add(&quot;dib&quot;, &quot;paint.exe&quot;);\n        openWith.Add(&quot;rtf&quot;, &quot;wordpad.exe&quot;);\n        \n        // List the contents of the sorted list.\n        Console.WriteLine();\n        foreach( KeyValuePair&lt;string, string&gt; kvp in openWith )\n        {\n            Console.WriteLine(&quot;Key = {0}, Value = {1}&quot;, \n               kvp.Key, kvp.Value);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nKey = bmp, Value = paint.exe\nKey = dib, Value = paint.exe\nKey = rtf, Value = wordpad.exe\nKey = txt, Value = notepad.exe\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Generic.SortedList.ctor_Int32#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class Example\n    \n    Public Shared Sub Main() \n\n        &#39; Create a new sorted list of strings, with string keys and\n        &#39; an initial capacity of 4.\n        Dim openWith As New SortedList(Of String, String)(4)\n        \n        &#39; Add 4 elements to the list. \n        openWith.Add(&quot;txt&quot;, &quot;notepad.exe&quot;)\n        openWith.Add(&quot;bmp&quot;, &quot;paint.exe&quot;)\n        openWith.Add(&quot;dib&quot;, &quot;paint.exe&quot;)\n        openWith.Add(&quot;rtf&quot;, &quot;wordpad.exe&quot;)\n        \n        &#39; List the contents of the sorted list.\n        Console.WriteLine()\n        For Each kvp As KeyValuePair(Of String, String) In openWith\n            Console.WriteLine(&quot;Key = {0}, Value = {1}&quot;, _\n                kvp.Key, kvp.Value)\n        Next kvp\n\n    End Sub\n\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Key = bmp, Value = paint.exe\n&#39;Key = dib, Value = paint.exe\n&#39;Key = rtf, Value = wordpad.exe\n&#39;Key = txt, Value = notepad.exe\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_SortedList_2__ctor_System_Collections_Generic_IDictionary__0__1__System_Collections_Generic_IComparer__0__\">\r\n    \r\n            <a id=\"System_Collections_Generic_SortedList_2__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SortedList&lt;TKey,TValue&gt;(IDictionary&lt;TKey,TValue&gt;,IComparer&lt;TKey&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span> class that contains elements copied from the specified <span class=\"xref\">stem.Collections.Generic.IDictionary`2</span>, has sufficient capacity to accommodate the number of elements copied, and uses the specified <span class=\"xref\">stem.Collections.Generic.IComparer`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public SortedList (System.Collections.Generic.IDictionary&lt;TKey,TValue&gt; dictionary, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dictionary</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.idictionary-2\" data-linktype=\"relative-path\">IDictionary<tkey,tvalue></tkey,tvalue></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Collections.Generic.IDictionary`2</span> whose elements are copied to the new <span class=\"xref\">stem.Collections.Generic.SortedList`2</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.icomparer-1\" data-linktype=\"relative-path\">IComparer</a>&lt;<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Collections.Generic.IComparer`1</span> implementation to use when comparing keys.  </p>\n<p> -or-  </p>\n<p> <code>null</code> to use the default <span class=\"xref\">stem.Collections.Generic.Comparer`1</span> for the type of the key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>dictionary</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>dictionary</code> contains one or more duplicate keys.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Every key in a <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a> must be unique according to the specified comparer; likewise, every key in the source <code>dictionary</code> must also be unique according to the specified comparer.  </p>\n<p> The capacity of the new <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a> is set to the number of elements in <code>dictionary</code>, so no resizing takes place while the list is being populated.  </p>\n<p> If the data in <code>dictionary</code> are sorted, this constructor is an O(<code>n</code>) operation, where <code>n</code> is the number of elements in <code>dictionary</code>. Otherwise it is an O(<code>n</code>*<code>n</code>) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to use <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a> to create a case-insensitive sorted copy of the information in a case-insensitive <a class=\"xref\" href=\"system.collections.generic.dictionary-2\" data-linktype=\"relative-path\">Dictionary&lt;TKey,TValue&gt;</a>, by passing the <a class=\"xref\" href=\"system.collections.generic.dictionary-2\" data-linktype=\"relative-path\">Dictionary&lt;TKey,TValue&gt;</a> to the SortedList(TKey, constructor. In this example, the case-insensitive comparers are for the current culture.  </p>\n<pre><code class=\"lang-cs\" name=\"Generic.SortedList.ctor_IDicIComp#1\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Create a new Dictionary of strings, with string keys and\n        // a case-insensitive equality comparer for the current \n        // culture.\n        Dictionary&lt;string, string&gt; openWith = \n            new Dictionary&lt;string, string&gt;\n                (StringComparer.CurrentCultureIgnoreCase);\n        \n        // Add some elements to the dictionary. \n        openWith.Add(&quot;txt&quot;, &quot;notepad.exe&quot;);\n        openWith.Add(&quot;Bmp&quot;, &quot;paint.exe&quot;);\n        openWith.Add(&quot;DIB&quot;, &quot;paint.exe&quot;);\n        openWith.Add(&quot;rtf&quot;, &quot;wordpad.exe&quot;);\n        \n        // Create a SortedList of strings with string keys and a \n        // case-insensitive equality comparer for the current culture,\n        // and initialize it with the contents of the Dictionary.\n        SortedList&lt;string, string&gt; copy = \n            new SortedList&lt;string, string&gt;(openWith, \n                StringComparer.CurrentCultureIgnoreCase);\n\n        // List the sorted contents of the copy.\n        Console.WriteLine();\n        foreach( KeyValuePair&lt;string, string&gt; kvp in copy )\n        {\n            Console.WriteLine(&quot;Key = {0}, Value = {1}&quot;, kvp.Key, \n                kvp.Value);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nKey = Bmp, Value = paint.exe\nKey = DIB, Value = paint.exe\nKey = rtf, Value = wordpad.exe\nKey = txt, Value = notepad.exe\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Generic.SortedList.ctor_IDicIComp#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class Example\n    \n    Public Shared Sub Main() \n\n        &#39; Create a new Dictionary of strings, with string keys and\n        &#39; a case-insensitive equality comparer for the current \n        &#39; culture.\n        Dim openWith As New Dictionary(Of String, String)( _\n            StringComparer.CurrentCultureIgnoreCase)\n        \n        &#39; Add some elements to the dictionary. \n        openWith.Add(&quot;txt&quot;, &quot;notepad.exe&quot;)\n        openWith.Add(&quot;Bmp&quot;, &quot;paint.exe&quot;)\n        openWith.Add(&quot;DIB&quot;, &quot;paint.exe&quot;)\n        openWith.Add(&quot;rtf&quot;, &quot;wordpad.exe&quot;)\n        \n        &#39; Create a SortedList of strings with string keys and a \n        &#39; case-insensitive equality comparer for the current culture,\n        &#39; and initialize it with the contents of the Dictionary.\n        Dim copy As New SortedList(Of String, String)(openWith, _\n            StringComparer.CurrentCultureIgnoreCase)\n\n        &#39; List the sorted contents of the copy.\n        Console.WriteLine()\n        For Each kvp As KeyValuePair(Of String, String) In copy\n            Console.WriteLine(&quot;Key = {0}, Value = {1}&quot;, _\n                kvp.Key, kvp.Value)\n        Next kvp\n\n    End Sub\n\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Key = Bmp, Value = paint.exe\n&#39;Key = DIB, Value = paint.exe\n&#39;Key = rtf, Value = wordpad.exe\n&#39;Key = txt, Value = notepad.exe\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_SortedList_2__ctor_System_Int32_System_Collections_Generic_IComparer__0__\">\r\n    \r\n            <a id=\"System_Collections_Generic_SortedList_2__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SortedList&lt;TKey,TValue&gt;(Int32,IComparer&lt;TKey&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span> class that is empty, has the specified initial capacity, and uses the specified <span class=\"xref\">stem.Collections.Generic.IComparer`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public SortedList (int capacity, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>capacity</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The initial number of elements that the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span> can contain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.icomparer-1\" data-linktype=\"relative-path\">IComparer</a>&lt;<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Collections.Generic.IComparer`1</span> implementation to use when comparing keys.  </p>\n<p> -or-  </p>\n<p> <code>null</code> to use the default <span class=\"xref\">stem.Collections.Generic.Comparer`1</span> for the type of the key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>capacity</code> is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Every key in a <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a> must be unique according to the specified comparer.  </p>\n<p> The capacity of a <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a> is the number of elements that the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a> can hold before resizing. As elements are added to a <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a>, the capacity is automatically increased as required by reallocating the internal array.  </p>\n<p> If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a>.  </p>\n<p> The capacity can be decreased by calling <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_TrimExcess_\" data-linktype=\"relative-path\">TrimExcess</a> or by setting the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_Capacity_\" data-linktype=\"relative-path\">Capacity</a> property explicitly. Decreasing the capacity reallocates memory and copies all the elements in the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a>.  </p>\n<p> This constructor is an O(<code>n</code>) operation, where <code>n</code> is <code>capacity</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a sorted list with an initial capacity of 5 and a case-insensitive comparer for the current culture. The example adds four elements, some with lower-case keys and some with upper-case keys. The example then attempts to add an element with a key that differs from an existing key only by case, catches the resulting exception, and displays an error message. Finally, the example displays the elements in case-insensitive sort order.  </p>\n<pre><code class=\"lang-vb\" name=\"Generic.SortedList.ctor_Int32IComp#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class Example\n    \n    Public Shared Sub Main() \n\n        &#39; Create a new sorted list of strings, with string keys, an\n        &#39; initial capacity of 5, and a case-insensitive comparer.\n        Dim openWith As New SortedList(Of String, String)(5, _\n            StringComparer.CurrentCultureIgnoreCase)\n        \n        &#39; Add 4 elements to the list. \n        openWith.Add(&quot;txt&quot;, &quot;notepad.exe&quot;)\n        openWith.Add(&quot;bmp&quot;, &quot;paint.exe&quot;)\n        openWith.Add(&quot;DIB&quot;, &quot;paint.exe&quot;)\n        openWith.Add(&quot;rtf&quot;, &quot;wordpad.exe&quot;)\n\n        &#39; Try to add a fifth element with a key that is the same \n        &#39; except for case; this would be allowed with the default\n        &#39; comparer.\n        Try\n            openWith.Add(&quot;BMP&quot;, &quot;paint.exe&quot;)\n        Catch ex As ArgumentException\n            Console.WriteLine(vbLf &amp; &quot;BMP is already in the sorted list.&quot;)\n        End Try\n        \n        &#39; List the contents of the sorted list.\n        Console.WriteLine()\n        For Each kvp As KeyValuePair(Of String, String) In openWith\n            Console.WriteLine(&quot;Key = {0}, Value = {1}&quot;, _\n                kvp.Key, kvp.Value)\n        Next kvp\n\n    End Sub\n\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;BMP is already in the sorted list.\n&#39;\n&#39;Key = bmp, Value = paint.exe\n&#39;Key = DIB, Value = paint.exe\n&#39;Key = rtf, Value = wordpad.exe\n&#39;Key = txt, Value = notepad.exe\n</code></pre><pre><code class=\"lang-cs\" name=\"Generic.SortedList.ctor_Int32IComp#1\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Create a new sorted list of strings, with string keys, an\n        // initial capacity of 5, and a case-insensitive comparer.\n        SortedList&lt;string, string&gt; openWith = \n                      new SortedList&lt;string, string&gt;(5, \n                          StringComparer.CurrentCultureIgnoreCase);\n        \n        // Add 4 elements to the list. \n        openWith.Add(&quot;txt&quot;, &quot;notepad.exe&quot;);\n        openWith.Add(&quot;bmp&quot;, &quot;paint.exe&quot;);\n        openWith.Add(&quot;DIB&quot;, &quot;paint.exe&quot;);\n        openWith.Add(&quot;rtf&quot;, &quot;wordpad.exe&quot;);\n\n        // Try to add a fifth element with a key that is the same \n        // except for case; this would be allowed with the default\n        // comparer.\n        try\n        {\n            openWith.Add(&quot;BMP&quot;, &quot;paint.exe&quot;);\n        }\n        catch (ArgumentException)\n        {\n            Console.WriteLine(&quot;<br>BMP is already in the sorted list.&quot;);\n        }\n        \n        // List the contents of the sorted list.\n        Console.WriteLine();\n        foreach( KeyValuePair&lt;string, string&gt; kvp in openWith )\n        {\n            Console.WriteLine(&quot;Key = {0}, Value = {1}&quot;, kvp.Key, \n                kvp.Value);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nBMP is already in the sorted list.\n\nKey = bmp, Value = paint.exe\nKey = DIB, Value = paint.exe\nKey = rtf, Value = wordpad.exe\nKey = txt, Value = notepad.exe\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_SortedList_2_Capacity\">\r\n    \r\n            <a id=\"System_Collections_Generic_SortedList_2_Capacity_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Capacity</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the number of elements that the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span> can contain.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Capacity { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of elements that the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span> can contain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>Capacity is set to a value that is less than <span class=\"xref\">stem.Collections.Generic.SortedList`2.Count*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a></div>\r\n                  </div>\r\n                  <p>There is not enough memory available on the system.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Capacity is the number of elements that the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a> can store. <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_Count_\" data-linktype=\"relative-path\">Count</a> is the number of elements that are actually in the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a>.  </p>\n<p> Capacity is always greater than or equal to <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_Count_\" data-linktype=\"relative-path\">Count</a>. If <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_Count_\" data-linktype=\"relative-path\">Count</a> exceeds Capacity while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.  </p>\n<p> The capacity can be decreased by calling <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_TrimExcess_\" data-linktype=\"relative-path\">TrimExcess</a> or by setting the Capacity property explicitly. When the value of Capacity is set explicitly, the internal array is also reallocated to accommodate the specified capacity.  </p>\n<p> Retrieving the value of this property is an O(1) operation; setting the property is an O(<code>n</code>) operation, where <code>n</code> is the new capacity.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_SortedList_2_Comparer\">\r\n    \r\n            <a id=\"System_Collections_Generic_SortedList_2_Comparer_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Comparer</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <span class=\"xref\">stem.Collections.Generic.IComparer`1</span> for the sorted list.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Generic.IComparer&lt;TKey&gt; Comparer { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.icomparer-1\" data-linktype=\"relative-path\">IComparer</a>&lt;<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.IComparable`1</span> for the current <span class=\"xref\">stem.Collections.Generic.SortedList`2</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_SortedList_2_Count\">\r\n    \r\n            <a id=\"System_Collections_Generic_SortedList_2_Count_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Count</div>        \r\n          </div>\r\n    \r\n            <p>Gets the number of key/value pairs contained in the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Count { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of key/value pairs contained in the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_Capacity_\" data-linktype=\"relative-path\">Capacity</a> is the number of elements that the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a> can store. Count is the number of elements that are actually in the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a>.  </p>\n<p> <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_Capacity_\" data-linktype=\"relative-path\">Capacity</a> is always greater than or equal to Count. If Count exceeds <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_Capacity_\" data-linktype=\"relative-path\">Capacity</a> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_SortedList_2_Item__0_\">\r\n    \r\n            <a id=\"System_Collections_Generic_SortedList_2_Item_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Item(TKey)</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the value associated with the specified key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TValue this[TKey key] { get; set; }</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">TKey</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key whose value to get or set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TValue</span></div>\r\n                  </div>\r\n                  <p>The value associated with the specified key. If the specified key is not found, a get operation throws a <a class=\"xref\" href=\"system.collections.generic.keynotfoundexception\" data-linktype=\"relative-path\">KeyNotFoundException</a> and a set operation creates a new element using the specified key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>key</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.keynotfoundexception\" data-linktype=\"relative-path\">KeyNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The property is retrieved and <code>key</code> does not exist in the collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property provides the ability to access a specific element in the collection by using the following syntax: <code>myCollection[key]</code>.  </p>\n<p> A key cannot be <code>null</code>, but a value can be, if the type of values in the list, <code>TValue</code>, is a reference type.  </p>\n<p> If the key is not found when a value is being retrieved, <a class=\"xref\" href=\"system.collections.generic.keynotfoundexception\" data-linktype=\"relative-path\">KeyNotFoundException</a> is thrown. If the key is not found when a value is being set, the key and value are added.  </p>\n<p> You can also use the Item property to add new elements by setting the value of a key that does not exist in the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a>; for example, <code>myCollection[&quot;myNonexistentKey&quot;] = myValue</code>. However, if the specified key already exists in the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a>, setting the Item property overwrites the old value. In contrast, the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_Add_\" data-linktype=\"relative-path\">Add</a> method does not modify existing elements.  </p>\n<p> The C# language uses the  keyword to define the indexers instead of implementing the Item property. Visual Basic implements Item as a default property, which provides the same indexing functionality.  </p>\n<p> Retrieving the value of this property is an O(log <code>n</code>) operation, where n is <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_Count_\" data-linktype=\"relative-path\">Count</a>. Setting the property is an O(log <code>n</code>) operation if the key is already in the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a>. If the key is not in the list, setting the property is an O(<code>n</code>) operation for unsorted data, or O(log <code>n</code>) if the new element is added at the end of the list. If insertion causes a resize, the operation is O(<code>n</code>).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the Item property (the indexer in C#) to retrieve values, demonstrating that a <a class=\"xref\" href=\"system.collections.generic.keynotfoundexception\" data-linktype=\"relative-path\">KeyNotFoundException</a> is thrown when a requested key is not present, and showing that the value associated with a key can be replaced.  </p>\n<p> The example also shows how to use the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_TryGetValue_\" data-linktype=\"relative-path\">TryGetValue</a> method as a more efficient way to retrieve values if a program often must try key values that are not in the sorted list.  </p>\n<p> This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"Generic.SortedList#3\">        &#39; The Item property is the default property, so you \n        &#39; can omit its name when accessing elements. \n        Console.WriteLine(&quot;For key = &quot;&quot;rtf&quot;&quot;, value = {0}.&quot;, _\n            openWith(&quot;rtf&quot;))\n        \n        &#39; The default Item property can be used to change the value\n        &#39; associated with a key.\n        openWith(&quot;rtf&quot;) = &quot;winword.exe&quot;\n        Console.WriteLine(&quot;For key = &quot;&quot;rtf&quot;&quot;, value = {0}.&quot;, _\n            openWith(&quot;rtf&quot;))\n        \n        &#39; If a key does not exist, setting the default Item property\n        &#39; for that key adds a new key/value pair.\n        openWith(&quot;doc&quot;) = &quot;winword.exe&quot;\n</code></pre><pre><code class=\"lang-cpp\" name=\"Generic.SortedList#3\">        // The Item property is another name for the indexer, so you\n        // can omit its name when accessing elements.\n        Console::WriteLine(&quot;For key = \\&quot;rtf\\&quot;, value = {0}.&quot;,\n            openWith[&quot;rtf&quot;]);\n\n        // The indexer can be used to change the value associated\n        // with a key.\n        openWith[&quot;rtf&quot;] = &quot;winword.exe&quot;;\n        Console::WriteLine(&quot;For key = \\&quot;rtf\\&quot;, value = {0}.&quot;,\n            openWith[&quot;rtf&quot;]);\n\n        // If a key does not exist, setting the indexer for that key\n        // adds a new key/value pair.\n        openWith[&quot;doc&quot;] = &quot;winword.exe&quot;;\n</code></pre><pre><code class=\"lang-cs\" name=\"Generic.SortedList#3\">        // The Item property is another name for the indexer, so you \n        // can omit its name when accessing elements. \n        Console.WriteLine(&quot;For key = \\&quot;rtf\\&quot;, value = {0}.&quot;, \n            openWith[&quot;rtf&quot;]);\n\n        // The indexer can be used to change the value associated\n        // with a key.\n        openWith[&quot;rtf&quot;] = &quot;winword.exe&quot;;\n        Console.WriteLine(&quot;For key = \\&quot;rtf\\&quot;, value = {0}.&quot;, \n            openWith[&quot;rtf&quot;]);\n\n        // If a key does not exist, setting the indexer for that key\n        // adds a new key/value pair.\n        openWith[&quot;doc&quot;] = &quot;winword.exe&quot;;\n</code></pre><pre><code class=\"lang-vb\" name=\"Generic.SortedList#4\">        &#39; The default Item property throws an exception if the requested\n        &#39; key is not in the list.\n        Try\n            Console.WriteLine(&quot;For key = &quot;&quot;tif&quot;&quot;, value = {0}.&quot;, _\n                openWith(&quot;tif&quot;))\n        Catch \n            Console.WriteLine(&quot;Key = &quot;&quot;tif&quot;&quot; is not found.&quot;)\n        End Try\n</code></pre><pre><code class=\"lang-cpp\" name=\"Generic.SortedList#4\">        // The indexer throws an exception if the requested key is\n        // not in the list.\n        try\n        {\n            Console::WriteLine(&quot;For key = \\&quot;tif\\&quot;, value = {0}.&quot;,\n                openWith[&quot;tif&quot;]);\n        }\n        catch (KeyNotFoundException^)\n        {\n            Console::WriteLine(&quot;Key = \\&quot;tif\\&quot; is not found.&quot;);\n        }\n</code></pre><pre><code class=\"lang-cs\" name=\"Generic.SortedList#4\">        // The indexer throws an exception if the requested key is\n        // not in the list.\n        try\n        {\n            Console.WriteLine(&quot;For key = \\&quot;tif\\&quot;, value = {0}.&quot;, \n                openWith[&quot;tif&quot;]);\n        }\n        catch (KeyNotFoundException)\n        {\n            Console.WriteLine(&quot;Key = \\&quot;tif\\&quot; is not found.&quot;);\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"Generic.SortedList#5\">        &#39; When a program often has to try keys that turn out not to\n        &#39; be in the list, TryGetValue can be a more efficient \n        &#39; way to retrieve values.\n        Dim value As String = &quot;&quot;\n        If openWith.TryGetValue(&quot;tif&quot;, value) Then\n            Console.WriteLine(&quot;For key = &quot;&quot;tif&quot;&quot;, value = {0}.&quot;, value)\n        Else\n            Console.WriteLine(&quot;Key = &quot;&quot;tif&quot;&quot; is not found.&quot;)\n        End If\n</code></pre><pre><code class=\"lang-cpp\" name=\"Generic.SortedList#5\">        // When a program often has to try keys that turn out not to\n        // be in the list, TryGetValue can be a more efficient\n        // way to retrieve values.\n        String^ value = &quot;&quot;;\n        if (openWith-&gt;TryGetValue(&quot;tif&quot;, value))\n        {\n            Console::WriteLine(&quot;For key = \\&quot;tif\\&quot;, value = {0}.&quot;, value);\n        }\n        else\n        {\n            Console::WriteLine(&quot;Key = \\&quot;tif\\&quot; is not found.&quot;);\n        }\n</code></pre><pre><code class=\"lang-cs\" name=\"Generic.SortedList#5\">        // When a program often has to try keys that turn out not to\n        // be in the list, TryGetValue can be a more efficient \n        // way to retrieve values.\n        string value = &quot;&quot;;\n        if (openWith.TryGetValue(&quot;tif&quot;, out value))\n        {\n            Console.WriteLine(&quot;For key = \\&quot;tif\\&quot;, value = {0}.&quot;, value);\n        }\n        else\n        {\n            Console.WriteLine(&quot;Key = \\&quot;tif\\&quot; is not found.&quot;);\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_SortedList_2_Keys\">\r\n    \r\n            <a id=\"System_Collections_Generic_SortedList_2_Keys_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Keys</div>        \r\n          </div>\r\n    \r\n            <p>Gets a collection containing the keys in the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span>, in sorted order.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Generic.IList&lt;TKey&gt; Keys { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList</a>&lt;<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </div>\r\n                  <p>A <span class=\"xref\">stem.Collections.Generic.IList`1</span> containing the keys in the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The order of the keys in the <a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList&lt;T&gt;</a> is the same as the order in the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a>.  </p>\n<p> The returned <a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList&lt;T&gt;</a> is not a static copy; instead, the <a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList&lt;T&gt;</a> refers back to the keys in the original <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a>. Therefore, changes to the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a> continue to be reflected in the <a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList&lt;T&gt;</a>.  </p>\n<p> The collection returned by the Keys property provides an efficient way to retrieve keys by index. It is not necessary to regenerate the list when the property is accessed, because the list is just a wrapper for the internal array of keys. The following code shows the use of the Keys property for indexed retrieval of keys from a sorted list of elements with string keys:  </p>\n<pre><code class=\"lang-cs\" name=\"Generic.SortedList#11\">        string v = mySortedList.Values[3];\n</code></pre><pre><code class=\"lang-cpp\" name=\"Generic.SortedList#11\">        String^ v = mySortedList-&gt;Values[3];\n</code></pre><pre><code class=\"lang-vb\" name=\"Generic.SortedList#11\">        Dim v As String = mySortedList.Values(3)\n</code></pre><p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to enumerate the keys in the sorted list using the Keys property, and how to enumerate the keys and values in the sorted list.  </p>\n<p> The example also shows how to use the Keys property for efficient indexed retrieval of keys.  </p>\n<p> This code is part of a larger example that can be compiled and executed. See <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"Generic.SortedList#9\">        &#39; To get the keys alone, use the Keys property.\n        Dim ilistKeys As IList(Of String) = openWith.Keys\n        \n        &#39; The elements of the list are strongly typed with the\n        &#39; type that was specified for the SortedList keys.\n        Console.WriteLine()\n        For Each s As String In ilistKeys \n            Console.WriteLine(&quot;Key = {0}&quot;, s)\n        Next s\n\n        &#39; The Keys property is an efficient way to retrieve\n        &#39; keys by index.\n        Console.WriteLine(vbLf &amp; &quot;Indexed retrieval using the &quot; &amp; _\n            &quot;Keys property: Keys(2) = {0}&quot;, openWith.Keys(2))\n</code></pre><pre><code class=\"lang-cpp\" name=\"Generic.SortedList#9\">        // To get the keys alone, use the Keys property.\n        IList&lt;String^&gt;^ ilistKeys = openWith-&gt;Keys;\n\n        // The elements of the list are strongly typed with the\n        // type that was specified for the SortedList keys.\n        Console::WriteLine();\n        for each( String^ s in ilistKeys )\n        {\n            Console::WriteLine(&quot;Key = {0}&quot;, s);\n        }\n\n        // The Keys property is an efficient way to retrieve\n        // keys by index.\n        Console::WriteLine(&quot;<br>Indexed retrieval using the Keys &quot; +\n            &quot;property: Keys[2] = {0}&quot;, openWith-&gt;Keys[2]);\n</code></pre><pre><code class=\"lang-cs\" name=\"Generic.SortedList#9\">        // To get the keys alone, use the Keys property.\n        IList&lt;string&gt; ilistKeys = openWith.Keys;\n\n        // The elements of the list are strongly typed with the \n        // type that was specified for the SortedList keys.\n        Console.WriteLine();\n        foreach( string s in ilistKeys )\n        {\n            Console.WriteLine(&quot;Key = {0}&quot;, s);\n        }\n\n        // The Keys property is an efficient way to retrieve\n        // keys by index.\n        Console.WriteLine(&quot;<br>Indexed retrieval using the Keys &quot; +\n            &quot;property: Keys[2] = {0}&quot;, openWith.Keys[2]);\n</code></pre><pre><code class=\"lang-vb\" name=\"Generic.SortedList#7\">        &#39; When you use foreach to enumerate list elements,\n        &#39; the elements are retrieved as KeyValuePair objects.\n        Console.WriteLine()\n        For Each kvp As KeyValuePair(Of String, String) In openWith\n            Console.WriteLine(&quot;Key = {0}, Value = {1}&quot;, _\n                kvp.Key, kvp.Value)\n        Next kvp\n</code></pre><pre><code class=\"lang-cpp\" name=\"Generic.SortedList#7\">        // When you use foreach to enumerate list elements,\n        // the elements are retrieved as KeyValuePair objects.\n        Console::WriteLine();\n        for each( KeyValuePair&lt;String^, String^&gt; kvp in openWith )\n        {\n            Console::WriteLine(&quot;Key = {0}, Value = {1}&quot;,\n                kvp.Key, kvp.Value);\n        }\n</code></pre><pre><code class=\"lang-cs\" name=\"Generic.SortedList#7\">        // When you use foreach to enumerate list elements,\n        // the elements are retrieved as KeyValuePair objects.\n        Console.WriteLine();\n        foreach( KeyValuePair&lt;string, string&gt; kvp in openWith )\n        {\n            Console.WriteLine(&quot;Key = {0}, Value = {1}&quot;, \n                kvp.Key, kvp.Value);\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_SortedList_2_Values\">\r\n    \r\n            <a id=\"System_Collections_Generic_SortedList_2_Values_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Values</div>        \r\n          </div>\r\n    \r\n            <p>Gets a collection containing the values in the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Generic.IList&lt;TValue&gt; Values { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList</a>&lt;<span class=\"xref\">TValue</span>&gt;</div>\r\n                  </div>\r\n                  <p>A <span class=\"xref\">stem.Collections.Generic.IList`1</span> containing the values in the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The order of the values in the <a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList&lt;T&gt;</a> is the same as the order in the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a>.  </p>\n<p> The returned <a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList&lt;T&gt;</a> is not a static copy; instead, the <a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList&lt;T&gt;</a> refers back to the values in the original <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a>. Therefore, changes to the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a> continue to be reflected in the <a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList&lt;T&gt;</a>.  </p>\n<p> The collection returned by the Values property provides an efficient way to retrieve values by index. It is not necessary to regenerate the list when the property is accessed, because the list is just a wrapper for the internal array of values. The following code shows the use of the Values property for indexed retrieval of values from a sorted list of strings:  </p>\n<pre><code class=\"lang-cs\" name=\"Generic.SortedList#11\">        string v = mySortedList.Values[3];\n</code></pre><pre><code class=\"lang-cpp\" name=\"Generic.SortedList#11\">        String^ v = mySortedList-&gt;Values[3];\n</code></pre><pre><code class=\"lang-vb\" name=\"Generic.SortedList#11\">        Dim v As String = mySortedList.Values(3)\n</code></pre><p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This code example shows how to enumerate the values in the sorted list using the Values property, and how to enumerate the keys and values in the sorted list.  </p>\n<p> The example also shows how to use the Values property for efficient indexed retrieval of values.  </p>\n<p> This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"Generic.SortedList#8\">        &#39; To get the values alone, use the Values property.\n        Dim ilistValues As IList(Of String) = openWith.Values\n        \n        &#39; The elements of the list are strongly typed with the\n        &#39; type that was specified for the SortedList values.\n        Console.WriteLine()\n        For Each s As String In ilistValues\n            Console.WriteLine(&quot;Value = {0}&quot;, s)\n        Next s\n\n        &#39; The Values property is an efficient way to retrieve\n        &#39; values by index.\n        Console.WriteLine(vbLf &amp; &quot;Indexed retrieval using the &quot; &amp; _\n            &quot;Values property: Values(2) = {0}&quot;, openWith.Values(2))\n</code></pre><pre><code class=\"lang-cpp\" name=\"Generic.SortedList#8\">        // To get the values alone, use the Values property.\n        IList&lt;String^&gt;^ ilistValues = openWith-&gt;Values;\n\n        // The elements of the list are strongly typed with the\n        // type that was specified for the SorteList values.\n        Console::WriteLine();\n        for each( String^ s in ilistValues )\n        {\n            Console::WriteLine(&quot;Value = {0}&quot;, s);\n        }\n\n        // The Values property is an efficient way to retrieve\n        // values by index.\n        Console::WriteLine(&quot;<br>Indexed retrieval using the Values &quot; +\n            &quot;property: Values[2] = {0}&quot;, openWith-&gt;Values[2]);\n</code></pre><pre><code class=\"lang-cs\" name=\"Generic.SortedList#8\">        // To get the values alone, use the Values property.\n        IList&lt;string&gt; ilistValues = openWith.Values;\n\n        // The elements of the list are strongly typed with the \n        // type that was specified for the SorteList values.\n        Console.WriteLine();\n        foreach( string s in ilistValues )\n        {\n            Console.WriteLine(&quot;Value = {0}&quot;, s);\n        }\n\n        // The Values property is an efficient way to retrieve\n        // values by index.\n        Console.WriteLine(&quot;<br>Indexed retrieval using the Values &quot; +\n            &quot;property: Values[2] = {0}&quot;, openWith.Values[2]);\n</code></pre><pre><code class=\"lang-vb\" name=\"Generic.SortedList#7\">        &#39; When you use foreach to enumerate list elements,\n        &#39; the elements are retrieved as KeyValuePair objects.\n        Console.WriteLine()\n        For Each kvp As KeyValuePair(Of String, String) In openWith\n            Console.WriteLine(&quot;Key = {0}, Value = {1}&quot;, _\n                kvp.Key, kvp.Value)\n        Next kvp\n</code></pre><pre><code class=\"lang-cpp\" name=\"Generic.SortedList#7\">        // When you use foreach to enumerate list elements,\n        // the elements are retrieved as KeyValuePair objects.\n        Console::WriteLine();\n        for each( KeyValuePair&lt;String^, String^&gt; kvp in openWith )\n        {\n            Console::WriteLine(&quot;Key = {0}, Value = {1}&quot;,\n                kvp.Key, kvp.Value);\n        }\n</code></pre><pre><code class=\"lang-cs\" name=\"Generic.SortedList#7\">        // When you use foreach to enumerate list elements,\n        // the elements are retrieved as KeyValuePair objects.\n        Console.WriteLine();\n        foreach( KeyValuePair&lt;string, string&gt; kvp in openWith )\n        {\n            Console.WriteLine(&quot;Key = {0}, Value = {1}&quot;, \n                kvp.Key, kvp.Value);\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_SortedList_2_Add__0__1_\">\r\n    \r\n            <a id=\"System_Collections_Generic_SortedList_2_Add_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Add(TKey,TValue)</div>        \r\n          </div>\r\n    \r\n            <p>Adds an element with the specified key and value into the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Add (TKey key, TValue value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">TKey</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key of the element to add.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">TValue</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value of the element to add. The value can be <code>null</code> for reference types.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>key</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>An element with the same key already exists in the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A key cannot be <code>null</code>, but a value can be, if the type of values in the sorted list, <code>TValue</code>, is a reference type.  </p>\n<p> You can also use the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_Item_\" data-linktype=\"relative-path\">Item</a> property to add new elements by setting the value of a key that does not exist in the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a>; for example, <code>myCollection[&quot;myNonexistentKey&quot;] = myValue</code>. However, if the specified key already exists in the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a>, setting the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_Item_\" data-linktype=\"relative-path\">Item</a> property overwrites the old value. In contrast, the Add method does not modify existing elements.  </p>\n<p> If <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_Count_\" data-linktype=\"relative-path\">Count</a> already equals <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_Capacity_\" data-linktype=\"relative-path\">Capacity</a>, the capacity of the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.  </p>\n<p> This method is an O(<code>n</code>) operation for unsorted data, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_Count_\" data-linktype=\"relative-path\">Count</a>. It is an O(log <code>n</code>) operation if the new element is added at the end of the list. If insertion causes a resize, the operation is O(<code>n</code>).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates an empty <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a> of strings with string keys and uses the Add method to add some elements. The example demonstrates that the Add method throws an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a> when attempting to add a duplicate key.  </p>\n<p> This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"Generic.SortedList#2\">        &#39; Create a new sorted list of strings, with string \n        &#39; keys. \n        Dim openWith As New SortedList(Of String, String)\n        \n        &#39; Add some elements to the list. There are no \n        &#39; duplicate keys, but some of the values are duplicates.\n        openWith.Add(&quot;txt&quot;, &quot;notepad.exe&quot;)\n        openWith.Add(&quot;bmp&quot;, &quot;paint.exe&quot;)\n        openWith.Add(&quot;dib&quot;, &quot;paint.exe&quot;)\n        openWith.Add(&quot;rtf&quot;, &quot;wordpad.exe&quot;)\n        \n        &#39; The Add method throws an exception if the new key is \n        &#39; already in the list.\n        Try\n            openWith.Add(&quot;txt&quot;, &quot;winword.exe&quot;)\n        Catch \n            Console.WriteLine(&quot;An element with Key = &quot;&quot;txt&quot;&quot; already exists.&quot;)\n        End Try\n</code></pre><pre><code class=\"lang-cpp\" name=\"Generic.SortedList#2\">        // Create a new sorted list of strings, with string\n        // keys.\n        SortedList&lt;String^, String^&gt;^ openWith =\n            gcnew SortedList&lt;String^, String^&gt;();\n\n        // Add some elements to the list. There are no \n        // duplicate keys, but some of the values are duplicates.\n        openWith-&gt;Add(&quot;txt&quot;, &quot;notepad.exe&quot;);\n        openWith-&gt;Add(&quot;bmp&quot;, &quot;paint.exe&quot;);\n        openWith-&gt;Add(&quot;dib&quot;, &quot;paint.exe&quot;);\n        openWith-&gt;Add(&quot;rtf&quot;, &quot;wordpad.exe&quot;);\n\n        // The Add method throws an exception if the new key is\n        // already in the list.\n        try\n        {\n            openWith-&gt;Add(&quot;txt&quot;, &quot;winword.exe&quot;);\n        }\n        catch (ArgumentException^)\n        {\n            Console::WriteLine(&quot;An element with Key = \\&quot;txt\\&quot; already exists.&quot;);\n        }\n</code></pre><pre><code class=\"lang-cs\" name=\"Generic.SortedList#2\">        // Create a new sorted list of strings, with string\n        // keys.\n        SortedList&lt;string, string&gt; openWith = \n            new SortedList&lt;string, string&gt;();\n\n        // Add some elements to the list. There are no \n        // duplicate keys, but some of the values are duplicates.\n        openWith.Add(&quot;txt&quot;, &quot;notepad.exe&quot;);\n        openWith.Add(&quot;bmp&quot;, &quot;paint.exe&quot;);\n        openWith.Add(&quot;dib&quot;, &quot;paint.exe&quot;);\n        openWith.Add(&quot;rtf&quot;, &quot;wordpad.exe&quot;);\n\n        // The Add method throws an exception if the new key is \n        // already in the list.\n        try\n        {\n            openWith.Add(&quot;txt&quot;, &quot;winword.exe&quot;);\n        }\n        catch (ArgumentException)\n        {\n            Console.WriteLine(&quot;An element with Key = \\&quot;txt\\&quot; already exists.&quot;);\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_SortedList_2_Clear\">\r\n    \r\n            <a id=\"System_Collections_Generic_SortedList_2_Clear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clear()</div>        \r\n          </div>\r\n    \r\n            <p>Removes all elements from the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Clear ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_Count_\" data-linktype=\"relative-path\">Count</a> is set to zero, and references to other objects from elements of the collection are also released.  </p>\n<p> <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_Capacity_\" data-linktype=\"relative-path\">Capacity</a> remains unchanged. To reset the capacity of the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a>, call <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_TrimExcess_\" data-linktype=\"relative-path\">TrimExcess</a> or set the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_Capacity_\" data-linktype=\"relative-path\">Capacity</a> property directly. Trimming an empty <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a> sets the capacity of the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a> to the default capacity.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_SortedList_2_ContainsKey__0_\">\r\n    \r\n            <a id=\"System_Collections_Generic_SortedList_2_ContainsKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContainsKey(TKey)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span> contains a specific key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool ContainsKey (TKey key);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">TKey</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key to locate in the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span> contains an element with the specified key; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>key</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is an O(log <code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to use the ContainsKey method to test whether a key exists prior to calling the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_Add_\" data-linktype=\"relative-path\">Add</a> method. It also shows how to use the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_TryGetValue_\" data-linktype=\"relative-path\">TryGetValue</a> method to retrieve values, which is an efficient way to retrieve values when a program frequently tries keys that are not in the sorted list. Finally, it shows the least efficient way to test whether keys exist, by using the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_Item_\" data-linktype=\"relative-path\">Item</a> property (the indexer in C#).  </p>\n<p> This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"Generic.SortedList#6\">        &#39; ContainsKey can be used to test keys before inserting \n        &#39; them.\n        If Not openWith.ContainsKey(&quot;ht&quot;) Then\n            openWith.Add(&quot;ht&quot;, &quot;hypertrm.exe&quot;)\n            Console.WriteLine(&quot;Value added for key = &quot;&quot;ht&quot;&quot;: {0}&quot;, _\n                openWith(&quot;ht&quot;))\n        End If\n</code></pre><pre><code class=\"lang-cpp\" name=\"Generic.SortedList#6\">        // ContainsKey can be used to test keys before inserting\n        // them.\n        if (!openWith-&gt;ContainsKey(&quot;ht&quot;))\n        {\n            openWith-&gt;Add(&quot;ht&quot;, &quot;hypertrm.exe&quot;);\n            Console::WriteLine(&quot;Value added for key = \\&quot;ht\\&quot;: {0}&quot;,\n                openWith[&quot;ht&quot;]);\n        }\n</code></pre><pre><code class=\"lang-cs\" name=\"Generic.SortedList#6\">        // ContainsKey can be used to test keys before inserting \n        // them.\n        if (!openWith.ContainsKey(&quot;ht&quot;))\n        {\n            openWith.Add(&quot;ht&quot;, &quot;hypertrm.exe&quot;);\n            Console.WriteLine(&quot;Value added for key = \\&quot;ht\\&quot;: {0}&quot;, \n                openWith[&quot;ht&quot;]);\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"Generic.SortedList#5\">        &#39; When a program often has to try keys that turn out not to\n        &#39; be in the list, TryGetValue can be a more efficient \n        &#39; way to retrieve values.\n        Dim value As String = &quot;&quot;\n        If openWith.TryGetValue(&quot;tif&quot;, value) Then\n            Console.WriteLine(&quot;For key = &quot;&quot;tif&quot;&quot;, value = {0}.&quot;, value)\n        Else\n            Console.WriteLine(&quot;Key = &quot;&quot;tif&quot;&quot; is not found.&quot;)\n        End If\n</code></pre><pre><code class=\"lang-cpp\" name=\"Generic.SortedList#5\">        // When a program often has to try keys that turn out not to\n        // be in the list, TryGetValue can be a more efficient\n        // way to retrieve values.\n        String^ value = &quot;&quot;;\n        if (openWith-&gt;TryGetValue(&quot;tif&quot;, value))\n        {\n            Console::WriteLine(&quot;For key = \\&quot;tif\\&quot;, value = {0}.&quot;, value);\n        }\n        else\n        {\n            Console::WriteLine(&quot;Key = \\&quot;tif\\&quot; is not found.&quot;);\n        }\n</code></pre><pre><code class=\"lang-cs\" name=\"Generic.SortedList#5\">        // When a program often has to try keys that turn out not to\n        // be in the list, TryGetValue can be a more efficient \n        // way to retrieve values.\n        string value = &quot;&quot;;\n        if (openWith.TryGetValue(&quot;tif&quot;, out value))\n        {\n            Console.WriteLine(&quot;For key = \\&quot;tif\\&quot;, value = {0}.&quot;, value);\n        }\n        else\n        {\n            Console.WriteLine(&quot;Key = \\&quot;tif\\&quot; is not found.&quot;);\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"Generic.SortedList#4\">        &#39; The default Item property throws an exception if the requested\n        &#39; key is not in the list.\n        Try\n            Console.WriteLine(&quot;For key = &quot;&quot;tif&quot;&quot;, value = {0}.&quot;, _\n                openWith(&quot;tif&quot;))\n        Catch \n            Console.WriteLine(&quot;Key = &quot;&quot;tif&quot;&quot; is not found.&quot;)\n        End Try\n</code></pre><pre><code class=\"lang-cpp\" name=\"Generic.SortedList#4\">        // The indexer throws an exception if the requested key is\n        // not in the list.\n        try\n        {\n            Console::WriteLine(&quot;For key = \\&quot;tif\\&quot;, value = {0}.&quot;,\n                openWith[&quot;tif&quot;]);\n        }\n        catch (KeyNotFoundException^)\n        {\n            Console::WriteLine(&quot;Key = \\&quot;tif\\&quot; is not found.&quot;);\n        }\n</code></pre><pre><code class=\"lang-cs\" name=\"Generic.SortedList#4\">        // The indexer throws an exception if the requested key is\n        // not in the list.\n        try\n        {\n            Console.WriteLine(&quot;For key = \\&quot;tif\\&quot;, value = {0}.&quot;, \n                openWith[&quot;tif&quot;]);\n        }\n        catch (KeyNotFoundException)\n        {\n            Console.WriteLine(&quot;Key = \\&quot;tif\\&quot; is not found.&quot;);\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_SortedList_2_ContainsValue__1_\">\r\n    \r\n            <a id=\"System_Collections_Generic_SortedList_2_ContainsValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContainsValue(TValue)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span> contains a specific value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool ContainsValue (TValue value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">TValue</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to locate in the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span>. The value can be <code>null</code> for reference types.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span> contains an element with the specified value; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method determines equality using the default comparer <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a> for the value type <code>TValue</code>.  <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a> checks whether the value type <code>TValue</code> implements <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">System.IComparable&lt;T&gt;</a> and uses that implementation, if available.  If not, <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a> checks whether the value type <code>TValue</code> implements <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">System.IComparable</a>.  If the value type <code>TValue</code> does not implement either interface, this method uses <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a>.  </p>\n<p> This method performs a linear search; therefore, the average execution time is proportional to <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_Count_\" data-linktype=\"relative-path\">Count</a>. That is, this method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_SortedList_2_GetEnumerator\">\r\n    \r\n            <a id=\"System_Collections_Generic_SortedList_2_GetEnumerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEnumerator()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an enumerator that iterates through the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt; GetEnumerator ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerator-1\" data-linktype=\"relative-path\">IEnumerator</a>&lt;<a class=\"xref\" href=\"system.collections.generic.keyvaluepair-2\" data-linktype=\"relative-path\">KeyValuePair</a>&lt;<span class=\"xref\">TKey</span>,<span class=\"xref\">TValue</span>&gt;&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerator`1</span> of type <span class=\"xref\">stem.Collections.Generic.KeyValuePair`2</span> for the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>foreach</code> statement of the C# language (<code>for each</code> in C++, <code>For Each</code> in Visual Basic) hides the complexity of the enumerators.  Therefore, using <code>foreach</code> is recommended, instead of directly manipulating the enumerator.  </p>\n<p> Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  </p>\n<p> The dictionary is maintained in a sorted order using an internal tree. Every new element is positioned at the correct sort position, and the tree is adjusted to maintain the sort order whenever an element is removed. While enumerating, the sort order is maintained.  </p>\n<p> Initially, the enumerator is positioned before the first element in the collection. At this position, <a class=\"xref\" href=\"system.collections.generic.ienumerator-1#System_Collections_Generic_IEnumerator_1_Current_\" data-linktype=\"relative-path\">Current</a> is undefined. Therefore, you must call <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> to advance the enumerator to the first element of the collection before reading the value of <a class=\"xref\" href=\"system.collections.generic.ienumerator-1#System_Collections_Generic_IEnumerator_1_Current_\" data-linktype=\"relative-path\">Current</a>.  </p>\n<p> <a class=\"xref\" href=\"system.collections.generic.ienumerator-1#System_Collections_Generic_IEnumerator_1_Current_\" data-linktype=\"relative-path\">Current</a> returns the same object until <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> is called. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> sets <a class=\"xref\" href=\"system.collections.generic.ienumerator-1#System_Collections_Generic_IEnumerator_1_Current_\" data-linktype=\"relative-path\">Current</a> to the next element.  </p>\n<p> If <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> passes the end of the collection, the enumerator is positioned after the last element in the collection and <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returns <code>false</code>. When the enumerator is at this position, subsequent calls to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> return <code>false</code>. If the last call to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returned <code>false</code>, <a class=\"xref\" href=\"system.collections.generic.ienumerator-1#System_Collections_Generic_IEnumerator_1_Current_\" data-linktype=\"relative-path\">Current</a> is undefined. You cannot set <a class=\"xref\" href=\"system.collections.generic.ienumerator-1#System_Collections_Generic_IEnumerator_1_Current_\" data-linktype=\"relative-path\">Current</a> to the first element of the collection again; you must create a new enumerator instance instead.  </p>\n<p> An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  </p>\n<p> The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  </p>\n<p> Default implementations of collections in <a class=\"xref\" href=\"system.collections.generic\" data-linktype=\"relative-path\">System.Collections.Generic</a> are not synchronized.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_SortedList_2_IndexOfKey__0_\">\r\n    \r\n            <a id=\"System_Collections_Generic_SortedList_2_IndexOfKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IndexOfKey(TKey)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified key and returns the zero-based index within the entire <span class=\"xref\">stem.Collections.Generic.SortedList`2</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int IndexOfKey (TKey key);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">TKey</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key to locate in the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of <code>key</code> within the entire <span class=\"xref\">stem.Collections.Generic.SortedList`2</span>, if found; otherwise, -1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>key</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method performs a binary search; therefore, this method is an O(log <code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_SortedList_2_IndexOfValue__1_\">\r\n    \r\n            <a id=\"System_Collections_Generic_SortedList_2_IndexOfValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IndexOfValue(TValue)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified value and returns the zero-based index of the first occurrence within the entire <span class=\"xref\">stem.Collections.Generic.SortedList`2</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int IndexOfValue (TValue value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">TValue</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to locate in the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span>.  The value can be <code>null</code> for reference types.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the first occurrence of <code>value</code> within the entire <span class=\"xref\">stem.Collections.Generic.SortedList`2</span>, if found; otherwise, -1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method determines equality using the default comparer <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a> for the value type <code>TValue</code>.  <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a> checks whether the value type <code>TValue</code> implements <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">System.IComparable&lt;T&gt;</a> and uses that implementation, if available.  If not, <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a> checks whether the value type <code>TValue</code> implements <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">System.IComparable</a>.  If the value type <code>TValue</code> does not implement either interface, this method uses <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a>.  </p>\n<p> This method performs a linear search; therefore, the average execution time is proportional to <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_Count_\" data-linktype=\"relative-path\">Count</a>. That is, this method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_SortedList_2_Remove__0_\">\r\n    \r\n            <a id=\"System_Collections_Generic_SortedList_2_Remove_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Remove(TKey)</div>        \r\n          </div>\r\n    \r\n            <p>Removes the element with the specified key from the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Remove (TKey key);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">TKey</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key of the element to remove.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the element is successfully removed; otherwise, <code>false</code>.  This method also returns <code>false</code> if <code>key</code> was not found in the original <span class=\"xref\">stem.Collections.Generic.SortedList`2</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>key</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method performs a binary search; however, the elements are moved up to fill in the open spot, so this method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to remove a key/value pair from the sorted list using the Remove method.  </p>\n<p> This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"Generic.SortedList#10\">        &#39; Use the Remove method to remove a key/value pair.\n        Console.WriteLine(vbLf + &quot;Remove(&quot;&quot;doc&quot;&quot;)&quot;)\n        openWith.Remove(&quot;doc&quot;)\n        \n        If Not openWith.ContainsKey(&quot;doc&quot;) Then\n            Console.WriteLine(&quot;Key &quot;&quot;doc&quot;&quot; is not found.&quot;)\n        End If\n</code></pre><pre><code class=\"lang-cpp\" name=\"Generic.SortedList#10\">        // Use the Remove method to remove a key/value pair.\n        Console::WriteLine(&quot;<br>Remove(\\&quot;doc\\&quot;)&quot;);\n        openWith-&gt;Remove(&quot;doc&quot;);\n\n        if (!openWith-&gt;ContainsKey(&quot;doc&quot;))\n        {\n            Console::WriteLine(&quot;Key \\&quot;doc\\&quot; is not found.&quot;);\n        }\n</code></pre><pre><code class=\"lang-cs\" name=\"Generic.SortedList#10\">        // Use the Remove method to remove a key/value pair.\n        Console.WriteLine(&quot;<br>Remove(\\&quot;doc\\&quot;)&quot;);\n        openWith.Remove(&quot;doc&quot;);\n\n        if (!openWith.ContainsKey(&quot;doc&quot;))\n        {\n            Console.WriteLine(&quot;Key \\&quot;doc\\&quot; is not found.&quot;);\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_SortedList_2_RemoveAt_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_Generic_SortedList_2_RemoveAt_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RemoveAt(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Removes the element at the specified index of the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void RemoveAt (int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index of the element to remove.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>index</code> is equal to or greater than <span class=\"xref\">stem.Collections.Generic.SortedList`2.Count*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method performs a binary search; however, the elements are moved up to fill in the open spot, so this method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_SortedList_2_TrimExcess\">\r\n    \r\n            <a id=\"System_Collections_Generic_SortedList_2_TrimExcess_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TrimExcess()</div>        \r\n          </div>\r\n    \r\n            <p>Sets the capacity to the actual number of elements in the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span>, if that number is less than 90 percent of current capacity.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void TrimExcess ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method can be used to minimize a collection&#39;s memory overhead if no new elements will be added to the collection. The cost of reallocating and copying a large <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a> can be considerable, however, so the TrimExcess method does nothing if the list is at more than 90 percent of capacity. This avoids incurring a large reallocation cost for a relatively small gain.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_Count_\" data-linktype=\"relative-path\">Count</a>.  </p>\n<p> To reset a <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a> to its initial state, call the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_Clear_\" data-linktype=\"relative-path\">Clear</a> method before calling TrimExcess method. Trimming an empty <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a> sets the capacity of the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a> to the default capacity.  </p>\n<p> The capacity can also be set using the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_Capacity_\" data-linktype=\"relative-path\">Capacity</a> property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_SortedList_2_TryGetValue__0__1__\">\r\n    \r\n            <a id=\"System_Collections_Generic_SortedList_2_TryGetValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryGetValue(TKey,TValue)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value associated with the specified key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool TryGetValue (TKey key, out TValue value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">TKey</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key whose value to get.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">TValue</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <code>value</code> parameter. This parameter is passed uninitialized.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span> contains an element with the specified key; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>key</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method combines the functionality of the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_ContainsKey_\" data-linktype=\"relative-path\">ContainsKey</a> method and the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_Item_\" data-linktype=\"relative-path\">Item</a> property.  </p>\n<p> If the key is not found, then the <code>value</code> parameter gets the appropriate default value for the value type <code>TValue</code>; for example, zero (0) for integer types, <code>false</code> for Boolean types, and <code>null</code> for reference types.  </p>\n<p> This method performs a binary search; therefore, this method is an O(log <code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The example shows how to use the TryGetValue method as a more efficient way to retrieve values in a program that frequently tries keys that are not in the sorted list. For contrast, the example also shows how the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_Item_\" data-linktype=\"relative-path\">Item</a> property (the indexer in C#) throws exceptions when attempting to retrieve nonexistent keys.  </p>\n<p> This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"Generic.SortedList#5\">        &#39; When a program often has to try keys that turn out not to\n        &#39; be in the list, TryGetValue can be a more efficient \n        &#39; way to retrieve values.\n        Dim value As String = &quot;&quot;\n        If openWith.TryGetValue(&quot;tif&quot;, value) Then\n            Console.WriteLine(&quot;For key = &quot;&quot;tif&quot;&quot;, value = {0}.&quot;, value)\n        Else\n            Console.WriteLine(&quot;Key = &quot;&quot;tif&quot;&quot; is not found.&quot;)\n        End If\n</code></pre><pre><code class=\"lang-cpp\" name=\"Generic.SortedList#5\">        // When a program often has to try keys that turn out not to\n        // be in the list, TryGetValue can be a more efficient\n        // way to retrieve values.\n        String^ value = &quot;&quot;;\n        if (openWith-&gt;TryGetValue(&quot;tif&quot;, value))\n        {\n            Console::WriteLine(&quot;For key = \\&quot;tif\\&quot;, value = {0}.&quot;, value);\n        }\n        else\n        {\n            Console::WriteLine(&quot;Key = \\&quot;tif\\&quot; is not found.&quot;);\n        }\n</code></pre><pre><code class=\"lang-cs\" name=\"Generic.SortedList#5\">        // When a program often has to try keys that turn out not to\n        // be in the list, TryGetValue can be a more efficient \n        // way to retrieve values.\n        string value = &quot;&quot;;\n        if (openWith.TryGetValue(&quot;tif&quot;, out value))\n        {\n            Console.WriteLine(&quot;For key = \\&quot;tif\\&quot;, value = {0}.&quot;, value);\n        }\n        else\n        {\n            Console.WriteLine(&quot;Key = \\&quot;tif\\&quot; is not found.&quot;);\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"Generic.SortedList#4\">        &#39; The default Item property throws an exception if the requested\n        &#39; key is not in the list.\n        Try\n            Console.WriteLine(&quot;For key = &quot;&quot;tif&quot;&quot;, value = {0}.&quot;, _\n                openWith(&quot;tif&quot;))\n        Catch \n            Console.WriteLine(&quot;Key = &quot;&quot;tif&quot;&quot; is not found.&quot;)\n        End Try\n</code></pre><pre><code class=\"lang-cpp\" name=\"Generic.SortedList#4\">        // The indexer throws an exception if the requested key is\n        // not in the list.\n        try\n        {\n            Console::WriteLine(&quot;For key = \\&quot;tif\\&quot;, value = {0}.&quot;,\n                openWith[&quot;tif&quot;]);\n        }\n        catch (KeyNotFoundException^)\n        {\n            Console::WriteLine(&quot;Key = \\&quot;tif\\&quot; is not found.&quot;);\n        }\n</code></pre><pre><code class=\"lang-cs\" name=\"Generic.SortedList#4\">        // The indexer throws an exception if the requested key is\n        // not in the list.\n        try\n        {\n            Console.WriteLine(&quot;For key = \\&quot;tif\\&quot;, value = {0}.&quot;, \n                openWith[&quot;tif&quot;]);\n        }\n        catch (KeyNotFoundException)\n        {\n            Console.WriteLine(&quot;Key = \\&quot;tif\\&quot; is not found.&quot;);\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_SortedList_2_System_Collections_Generic_ICollection_System_Collections_Generic_KeyValuePair_TKey_TValue___Add_System_Collections_Generic_KeyValuePair__0__1__\">\r\n    \r\n            <a id=\"System_Collections_Generic_SortedList_2_System_Collections_Generic_ICollection_System_Collections_Generic_KeyValuePair_TKey_TValue___Add_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ICollection&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.Add(KeyValuePair&lt;TKey,TValue&gt;)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void ICollection&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.Add (System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt; keyValuePair);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>keyValuePair</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.keyvaluepair-2\" data-linktype=\"relative-path\">KeyValuePair<tkey,tvalue></tkey,tvalue></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_SortedList_2_System_Collections_Generic_ICollection_System_Collections_Generic_KeyValuePair_TKey_TValue___Contains_System_Collections_Generic_KeyValuePair__0__1__\">\r\n    \r\n            <a id=\"System_Collections_Generic_SortedList_2_System_Collections_Generic_ICollection_System_Collections_Generic_KeyValuePair_TKey_TValue___Contains_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ICollection&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.Contains(KeyValuePair&lt;TKey,TValue&gt;)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool ICollection&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.Contains (System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt; keyValuePair);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>keyValuePair</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.keyvaluepair-2\" data-linktype=\"relative-path\">KeyValuePair<tkey,tvalue></tkey,tvalue></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_SortedList_2_System_Collections_Generic_ICollection_System_Collections_Generic_KeyValuePair_TKey_TValue___CopyTo_System_Collections_Generic_KeyValuePair__0__1____System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_Generic_SortedList_2_System_Collections_Generic_ICollection_System_Collections_Generic_KeyValuePair_TKey_TValue___CopyTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ICollection&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.CopyTo(KeyValuePair&lt;TKey,TValue&gt;[],Int32)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void ICollection&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.CopyTo (System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;[] array, int arrayIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.keyvaluepair-2\" data-linktype=\"relative-path\">KeyValuePair</a>&lt;<span class=\"xref\">TKey</span>,<span class=\"xref\">TValue</span>&gt;[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arrayIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_SortedList_2_System_Collections_Generic_ICollection_System_Collections_Generic_KeyValuePair_TKey_TValue___IsReadOnly\">\r\n    \r\n            <a id=\"System_Collections_Generic_SortedList_2_System_Collections_Generic_ICollection_System_Collections_Generic_KeyValuePair_TKey_TValue___IsReadOnly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ICollection&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.IsReadOnly</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.IsReadOnly { get; }</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_SortedList_2_System_Collections_Generic_ICollection_System_Collections_Generic_KeyValuePair_TKey_TValue___Remove_System_Collections_Generic_KeyValuePair__0__1__\">\r\n    \r\n            <a id=\"System_Collections_Generic_SortedList_2_System_Collections_Generic_ICollection_System_Collections_Generic_KeyValuePair_TKey_TValue___Remove_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ICollection&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.Remove(KeyValuePair&lt;TKey,TValue&gt;)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool ICollection&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.Remove (System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt; keyValuePair);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>keyValuePair</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.keyvaluepair-2\" data-linktype=\"relative-path\">KeyValuePair<tkey,tvalue></tkey,tvalue></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_SortedList_2_System_Collections_Generic_IDictionary_TKey_TValue__Keys\">\r\n    \r\n            <a id=\"System_Collections_Generic_SortedList_2_System_Collections_Generic_IDictionary_TKey_TValue__Keys_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IDictionary&lt;TKey,TValue&gt;.Keys</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">System.Collections.Generic.ICollection&lt;TKey&gt; System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.Keys { get; }</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.icollection-1\" data-linktype=\"relative-path\">ICollection</a>&lt;<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_SortedList_2_System_Collections_Generic_IDictionary_TKey_TValue__Values\">\r\n    \r\n            <a id=\"System_Collections_Generic_SortedList_2_System_Collections_Generic_IDictionary_TKey_TValue__Values_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IDictionary&lt;TKey,TValue&gt;.Values</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">System.Collections.Generic.ICollection&lt;TValue&gt; System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.Values { get; }</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.icollection-1\" data-linktype=\"relative-path\">ICollection</a>&lt;<span class=\"xref\">TValue</span>&gt;</div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_SortedList_2_System_Collections_Generic_IEnumerable_System_Collections_Generic_KeyValuePair_TKey_TValue___GetEnumerator\">\r\n    \r\n            <a id=\"System_Collections_Generic_SortedList_2_System_Collections_Generic_IEnumerable_System_Collections_Generic_KeyValuePair_TKey_TValue___GetEnumerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IEnumerable&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.GetEnumerator()</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt; IEnumerable&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.GetEnumerator ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerator-1\" data-linktype=\"relative-path\">IEnumerator</a>&lt;<a class=\"xref\" href=\"system.collections.generic.keyvaluepair-2\" data-linktype=\"relative-path\">KeyValuePair</a>&lt;<span class=\"xref\">TKey</span>,<span class=\"xref\">TValue</span>&gt;&gt;</div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_SortedList_2_System_Collections_Generic_IReadOnlyDictionary_TKey_TValue__Keys\">\r\n    \r\n            <a id=\"System_Collections_Generic_SortedList_2_System_Collections_Generic_IReadOnlyDictionary_TKey_TValue__Keys_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IReadOnlyDictionary&lt;TKey,TValue&gt;.Keys</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">System.Collections.Generic.IEnumerable&lt;TKey&gt; System.Collections.Generic.IReadOnlyDictionary&lt;TKey,TValue&gt;.Keys { get; }</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_SortedList_2_System_Collections_Generic_IReadOnlyDictionary_TKey_TValue__Values\">\r\n    \r\n            <a id=\"System_Collections_Generic_SortedList_2_System_Collections_Generic_IReadOnlyDictionary_TKey_TValue__Values_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IReadOnlyDictionary&lt;TKey,TValue&gt;.Values</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">System.Collections.Generic.IEnumerable&lt;TValue&gt; System.Collections.Generic.IReadOnlyDictionary&lt;TKey,TValue&gt;.Values { get; }</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TValue</span>&gt;</div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_SortedList_2_System_Collections_ICollection_CopyTo_System_Array_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_Generic_SortedList_2_System_Collections_ICollection_CopyTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ICollection.CopyTo(Array,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Copies the elements of the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> to an <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>, starting at a particular <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void ICollection.CopyTo (Array array, int arrayIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that is the destination of the elements copied from <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a>. The <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> must have zero-based indexing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arrayIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index in <code>array</code> at which copying begins.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>arrayIndex</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is multidimensional.  </p>\n<p> -or-  </p>\n<p> <code>array</code> does not have zero-based indexing.  </p>\n<p> -or-  </p>\n<p> The number of elements in the source <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> is greater than the available space from <code>arrayIndex</code> to the end of the destination <code>array</code>.  </p>\n<p> -or-  </p>\n<p> The type of the source <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> cannot be cast automatically to the type of the destination <code>array</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> If the type of the source <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> cannot be cast automatically to the type of the destination <code>array</code>, the non-generic implementations of <a class=\"xref\" href=\"system.collections.icollection#System_Collections_ICollection_CopyTo_\" data-linktype=\"relative-path\">CopyTo</a> throw <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>, whereas the generic implementations throw <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>.  </p>\n</div>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_SortedList_2_System_Collections_ICollection_IsSynchronized\">\r\n    \r\n            <a id=\"System_Collections_Generic_SortedList_2_System_Collections_ICollection_IsSynchronized_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ICollection.IsSynchronized</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether access to the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> is synchronized (thread safe).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool System.Collections.ICollection.IsSynchronized { get; }</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if access to the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> is synchronized (thread safe); otherwise, <code>false</code>.  In the default implementation of <span class=\"xref\">stem.Collections.Generic.SortedList`2</span>, this property always returns <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Default implementations of collections in <a class=\"xref\" href=\"system.collections.generic\" data-linktype=\"relative-path\">System.Collections.Generic</a> are not synchronized.  </p>\n<p> Enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.icollection#System_Collections_ICollection_SyncRoot_\" data-linktype=\"relative-path\">SyncRoot</a> property returns an object that can be used to synchronize access to the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a>. Synchronization is effective only if all threads lock this object before accessing the collection.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_SortedList_2_System_Collections_ICollection_SyncRoot\">\r\n    \r\n            <a id=\"System_Collections_Generic_SortedList_2_System_Collections_ICollection_SyncRoot_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ICollection.SyncRoot</div>        \r\n          </div>\r\n    \r\n            <p>Gets an object that can be used to synchronize access to the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">object System.Collections.ICollection.SyncRoot { get; }</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>An object that can be used to synchronize access to the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a>.  In the default implementation of <span class=\"xref\">stem.Collections.Generic.SortedList`2</span>, this property always returns the current instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Default implementations of collections in <a class=\"xref\" href=\"system.collections.generic\" data-linktype=\"relative-path\">System.Collections.Generic</a> are not synchronized.  </p>\n<p> Enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration. To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.icollection#System_Collections_ICollection_SyncRoot_\" data-linktype=\"relative-path\">SyncRoot</a> property returns an object that can be used to synchronize access to the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a>. Synchronization is effective only if all threads lock this object before accessing the collection. The following code shows the use of the <a class=\"xref\" href=\"system.collections.icollection#System_Collections_ICollection_SyncRoot_\" data-linktype=\"relative-path\">SyncRoot</a> property for C#, C++, and Visual Basic.  </p>\n<pre><code class=\"lang-c#\">ICollection ic = ...;  \nlock (ic.SyncRoot) {  \n   // Access the collection.  \n}\n</code></pre><pre><code class=\"lang-vb#\">Dim ic As ICollection = ...  \nSyncLock ic.SyncRoot  \n   &#39; Access the collection.  \nEnd SyncLock\n</code></pre><pre><code class=\"lang-cpp#\">ICollection^ ic = ...;  \ntry {  \n   Monitor::Enter(ic-&gt;SyncRoot);  \n   // Access the collection.  \n}  \nfinally {  \n   Monitor::Exit(ic-&gt;SyncRoot);  \n}\n</code></pre><p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_SortedList_2_System_Collections_IDictionary_Add_System_Object_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_Generic_SortedList_2_System_Collections_IDictionary_Add_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IDictionary.Add(Object,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Adds an element with the provided key and value to the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void IDictionary.Add (object key, object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to use as the key of the element to add.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to use as the value of the element to add.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>key</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>key</code> is of a type that is not assignable to the key type <code>TKey</code> of the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a>.  </p>\n<p> -or-  </p>\n<p> <code>value</code> is of a type that is not assignable to the value type <code>TValue</code> of the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a>.  </p>\n<p> -or-  </p>\n<p> An element with the same key already exists in the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can also use the <a class=\"xref\" href=\"system.collections.idictionary#System_Collections_IDictionary_Item_\" data-linktype=\"relative-path\">Item</a> property to add new elements by setting the value of a key that does not exist in the dictionary; for example, <code>myCollection[&quot;myNonexistentKey&quot;] = myValue</code>. However, if the specified key already exists in the dictionary, setting the <a class=\"xref\" href=\"system.collections.idictionary#System_Collections_IDictionary_Item_\" data-linktype=\"relative-path\">Item</a> property overwrites the old value. In contrast, the <a class=\"xref\" href=\"system.collections.idictionary#System_Collections_IDictionary_Add_\" data-linktype=\"relative-path\">Add</a> method does not modify existing elements.  </p>\n<p> This method is an O(<code>n</code>) operation for unsorted data, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_Count_\" data-linktype=\"relative-path\">Count</a>. It is an O(log <code>n</code>) operation if the new element is added at the end of the list. If insertion causes a resize, the operation is O(<code>n</code>).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to access the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a> class through the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">System.Collections.IDictionary</a> interface. The code example creates an empty <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a> of strings with string keys and uses the IDictionary.Add method to add some elements. The example demonstrates that the IDictionary.Add method throws an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a> when attempting to add a duplicate key, or when a key or value of the wrong data type is supplied.  </p>\n<p> The code example demonstrates the use of several other members of the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">System.Collections.IDictionary</a> interface.  </p>\n<pre><code class=\"lang-cs\" name=\"Generic.SortedList.IDictionary#1\">using System;\nusing System.Collections;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Create a new sorted list of strings, with string keys,\n        // and access it using the IDictionary interface.\n        //\n        IDictionary openWith = new SortedList&lt;string, string&gt;();\n\n        // Add some elements to the sorted list. There are no \n        // duplicate keys, but some of the values are duplicates.\n        // IDictionary.Add throws an exception if incorrect types\n        // are supplied for key or value.\n        openWith.Add(&quot;txt&quot;, &quot;notepad.exe&quot;);\n        openWith.Add(&quot;bmp&quot;, &quot;paint.exe&quot;);\n        openWith.Add(&quot;dib&quot;, &quot;paint.exe&quot;);\n        openWith.Add(&quot;rtf&quot;, &quot;wordpad.exe&quot;);\n        try\n        {\n            openWith.Add(42, new Example());\n        }\n        catch (ArgumentException ex)\n        {\n            Console.WriteLine(&quot;An exception was caught for &quot; + \n                &quot;IDictionary.Add. Exception message:<br>&nbsp;&nbsp;&nbsp;&nbsp;{0}<br>&quot;,\n                ex.Message);\n        }\n\n        // The Add method throws an exception if the new key is \n        // already in the sorted list.\n        try\n        {\n            openWith.Add(&quot;txt&quot;, &quot;winword.exe&quot;);\n        }\n        catch (ArgumentException)\n        {\n            Console.WriteLine(&quot;An element with Key = \\&quot;txt\\&quot; already exists.&quot;);\n        }\n\n        // The Item property is another name for the indexer, so you \n        // can omit its name when accessing elements. \n        Console.WriteLine(&quot;For key = \\&quot;rtf\\&quot;, value = {0}.&quot;, \n            openWith[&quot;rtf&quot;]);\n\n        // The indexer can be used to change the value associated\n        // with a key.\n        openWith[&quot;rtf&quot;] = &quot;winword.exe&quot;;\n        Console.WriteLine(&quot;For key = \\&quot;rtf\\&quot;, value = {0}.&quot;, \n            openWith[&quot;rtf&quot;]);\n\n        // If a key does not exist, setting the indexer for that key\n        // adds a new key/value pair.\n        openWith[&quot;doc&quot;] = &quot;winword.exe&quot;;\n\n        // The indexer returns null if the key is of the wrong data \n        // type.\n        Console.WriteLine(&quot;The indexer returns null&quot; \n            + &quot; if the key is of the wrong type:&quot;);\n        Console.WriteLine(&quot;For key = 2, value = {0}.&quot;, \n            openWith[2]);\n\n        // The indexer throws an exception when setting a value\n        // if the key is of the wrong data type.\n        try\n        {\n            openWith[2] = &quot;This does not get added.&quot;;\n        }\n        catch (ArgumentException)\n        {\n            Console.WriteLine(&quot;A key of the wrong type was specified&quot; \n                + &quot; when assigning to the indexer.&quot;);\n        }\n\n        // Unlike the default Item property on the SorteList class\n        // itself, IDictionary.Item does not throw an exception\n        // if the requested key is not in the sorted list.\n        Console.WriteLine(&quot;For key = \\&quot;tif\\&quot;, value = {0}.&quot;, \n            openWith[&quot;tif&quot;]);\n\n        // Contains can be used to test keys before inserting \n        // them.\n        if (!openWith.Contains(&quot;ht&quot;))\n        {\n            openWith.Add(&quot;ht&quot;, &quot;hypertrm.exe&quot;);\n            Console.WriteLine(&quot;Value added for key = \\&quot;ht\\&quot;: {0}&quot;, \n                openWith[&quot;ht&quot;]);\n        }\n\n        // IDictionary.Contains returns false if the wrong data\n        // type is supplied.\n        Console.WriteLine(&quot;openWith.Contains(29.7) returns {0}&quot;,\n            openWith.Contains(29.7));\n\n        // When you use foreach to enumerate sorted list elements\n        // with the IDictionary interface, the elements are retrieved\n        // as DictionaryEntry objects instead of KeyValuePair objects.\n        Console.WriteLine();\n        foreach( DictionaryEntry de in openWith )\n        {\n            Console.WriteLine(&quot;Key = {0}, Value = {1}&quot;, \n                de.Key, de.Value);\n        }\n\n        // To get the values alone, use the Values property.\n        ICollection icoll = openWith.Values;\n\n        // The elements of the collection are strongly typed\n        // with the type that was specified for values,\n        // even though the ICollection interface is not strongly\n        // typed.\n        Console.WriteLine();\n        foreach( string s in icoll )\n        {\n            Console.WriteLine(&quot;Value = {0}&quot;, s);\n        }\n\n        // To get the keys alone, use the Keys property.\n        icoll = openWith.Keys;\n\n        // The elements of the collection are strongly typed\n        // with the type that was specified for keys,\n        // even though the ICollection interface is not strongly\n        // typed.\n        Console.WriteLine();\n        foreach( string s in icoll )\n        {\n            Console.WriteLine(&quot;Key = {0}&quot;, s);\n        }\n\n        // Use the Remove method to remove a key/value pair. No\n        // exception is thrown if the wrong data type is supplied.\n        Console.WriteLine(&quot;<br>Remove(\\&quot;dib\\&quot;)&quot;);\n        openWith.Remove(&quot;dib&quot;);\n\n        if (!openWith.Contains(&quot;dib&quot;))\n        {\n            Console.WriteLine(&quot;Key \\&quot;dib\\&quot; is not found.&quot;);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nAn exception was caught for IDictionary.Add. Exception message:\n        The value &quot;42&quot; is not of type &quot;System.String&quot; and cannot be used in this generic collection.\nParameter name: key\n\nAn element with Key = &quot;txt&quot; already exists.\nFor key = &quot;rtf&quot;, value = wordpad.exe.\nFor key = &quot;rtf&quot;, value = winword.exe.\nThe indexer returns null if the key is of the wrong type:\nFor key = 2, value = .\nA key of the wrong type was specified when assigning to the indexer.\nFor key = &quot;tif&quot;, value = .\nValue added for key = &quot;ht&quot;: hypertrm.exe\nopenWith.Contains(29.7) returns False\n\nKey = txt, Value = notepad.exe\nKey = bmp, Value = paint.exe\nKey = dib, Value = paint.exe\nKey = rtf, Value = winword.exe\nKey = doc, Value = winword.exe\nKey = ht, Value = hypertrm.exe\n\nValue = notepad.exe\nValue = paint.exe\nValue = paint.exe\nValue = winword.exe\nValue = winword.exe\nValue = hypertrm.exe\n\nKey = txt\nKey = bmp\nKey = dib\nKey = rtf\nKey = doc\nKey = ht\n\nRemove(&quot;dib&quot;)\nKey &quot;dib&quot; is not found.\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Generic.SortedList.IDictionary#1\">Imports System\nImports System.Collections\nImports System.Collections.Generic\n\nPublic Class Example\n    \n    Public Shared Sub Main() \n\n        &#39; Create a new sorted list of strings, with string keys,\n        &#39; and access it using the IDictionary interface.\n        &#39;\n        Dim openWith As IDictionary = _\n            New sortedList(Of String, String)\n        \n        &#39; Add some elements to the sorted list. There are no \n        &#39; duplicate keys, but some of the values are duplicates.\n        &#39; IDictionary.Add throws an exception if incorrect types\n        &#39; are supplied for key or value.\n        openWith.Add(&quot;txt&quot;, &quot;notepad.exe&quot;)\n        openWith.Add(&quot;bmp&quot;, &quot;paint.exe&quot;)\n        openWith.Add(&quot;dib&quot;, &quot;paint.exe&quot;)\n        openWith.Add(&quot;rtf&quot;, &quot;wordpad.exe&quot;)\n        Try\n            openWith.Add(42, New Example())\n        Catch ex As ArgumentException\n            Console.WriteLine(&quot;An exception was caught for &quot; &amp; _\n                &quot;IDictionary.Add. Exception message:&quot; &amp; vbLf _\n                &amp; vbTab &amp; ex.Message &amp; vbLf)\n        End Try\n        \n        &#39; The Add method throws an exception if the new key is \n        &#39; already in the sorted list.\n        Try\n            openWith.Add(&quot;txt&quot;, &quot;winword.exe&quot;)\n        Catch \n            Console.WriteLine(&quot;An element with Key = &quot;&quot;txt&quot;&quot; already exists.&quot;)\n        End Try\n\n        &#39; The Item property is the default property, so you \n        &#39; can omit its name when accessing elements. \n        Console.WriteLine(&quot;For key = &quot;&quot;rtf&quot;&quot;, value = {0}.&quot;, _\n            openWith(&quot;rtf&quot;))\n        \n        &#39; The default Item property can be used to change the value\n        &#39; associated with a key.\n        openWith(&quot;rtf&quot;) = &quot;winword.exe&quot;\n        Console.WriteLine(&quot;For key = &quot;&quot;rtf&quot;&quot;, value = {0}.&quot;, _\n            openWith(&quot;rtf&quot;))\n        \n        &#39; If a key does not exist, setting the default Item property\n        &#39; for that key adds a new key/value pair.\n        openWith(&quot;doc&quot;) = &quot;winword.exe&quot;\n\n        &#39; The default Item property returns Nothing if the key\n        &#39; is of the wrong data type.\n        Console.WriteLine(&quot;The default Item property returns Nothing&quot; _\n            &amp; &quot; if the key is of the wrong type:&quot;)\n        Console.WriteLine(&quot;For key = 2, value = {0}.&quot;, _\n            openWith(2))\n\n        &#39; The default Item property throws an exception when setting\n        &#39; a value if the key is of the wrong data type.\n        Try\n            openWith(2) = &quot;This does not get added.&quot;\n        Catch \n            Console.WriteLine(&quot;A key of the wrong type was specified&quot; _\n                &amp; &quot; when setting the default Item property.&quot;)\n        End Try\n\n        &#39; Unlike the default Item property on the SortedList class\n        &#39; itself, IDictionary.Item does not throw an exception\n        &#39; if the requested key is not in the sorted list.\n        Console.WriteLine(&quot;For key = &quot;&quot;tif&quot;&quot;, value = {0}.&quot;, _\n            openWith(&quot;tif&quot;))\n\n        &#39; Contains can be used to test keys before inserting \n        &#39; them.\n        If Not openWith.Contains(&quot;ht&quot;) Then\n            openWith.Add(&quot;ht&quot;, &quot;hypertrm.exe&quot;)\n            Console.WriteLine(&quot;Value added for key = &quot;&quot;ht&quot;&quot;: {0}&quot;, _\n                openWith(&quot;ht&quot;))\n        End If\n\n        &#39; IDictionary.Contains returns False if the wrong data \n        &#39; type is supplied.\n        Console.WriteLine(&quot;openWith.Contains(29.7) returns {0}&quot;, _\n            openWith.Contains(29.7))\n\n        &#39; When you use foreach to enumerate sorted list elements\n        &#39; with the IDictionary interface, the elements are retrieved\n        &#39; as DictionaryEntry objects instead of KeyValuePair objects.\n        Console.WriteLine()\n        For Each de As DictionaryEntry In openWith\n            Console.WriteLine(&quot;Key = {0}, Value = {1}&quot;, _\n                de.Key, de.Value)\n        Next \n\n        &#39; To get the values alone, use the Values property.\n        Dim icoll As ICollection = openWith.Values\n        \n        &#39; The elements of the collection are strongly typed\n        &#39; with the type that was specified for sorted list values,\n        &#39; even though the ICollection interface is not strongly\n        &#39; typed.\n        Console.WriteLine()\n        For Each s As String In  icoll\n            Console.WriteLine(&quot;Value = {0}&quot;, s)\n        Next s\n\n        &#39; To get the keys alone, use the Keys property.\n        icoll = openWith.Keys\n        \n        &#39; The elements of the collection are strongly typed\n        &#39; with the type that was specified for sorted list keys,\n        &#39; even though the ICollection interface is not strongly\n        &#39; typed.\n        Console.WriteLine()\n        For Each s As String In  icoll\n            Console.WriteLine(&quot;Key = {0}&quot;, s)\n        Next s\n\n        &#39; Use the Remove method to remove a key/value pair. No\n        &#39; exception is thrown if the wrong data type is supplied.\n        Console.WriteLine(vbLf + &quot;Remove(&quot;&quot;dib&quot;&quot;)&quot;)\n        openWith.Remove(&quot;dib&quot;)\n        \n        If Not openWith.Contains(&quot;dib&quot;) Then\n            Console.WriteLine(&quot;Key &quot;&quot;dib&quot;&quot; is not found.&quot;)\n        End If\n\n    End Sub\n\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;An exception was caught for IDictionary.Add. Exception message:\n&#39;        The value &quot;42&quot; is not of type &quot;System.String&quot; and cannot be used in this generic collection.\n&#39;Parameter name: key\n&#39;\n&#39;An element with Key = &quot;txt&quot; already exists.\n&#39;For key = &quot;rtf&quot;, value = wordpad.exe.\n&#39;For key = &quot;rtf&quot;, value = winword.exe.\n&#39;The default Item property returns Nothing if the key is of the wrong type:\n&#39;For key = 2, value = .\n&#39;A key of the wrong type was specified when setting the default Item property.\n&#39;For key = &quot;tif&quot;, value = .\n&#39;Value added for key = &quot;ht&quot;: hypertrm.exe\n&#39;openWith.Contains(29.7) returns False\n&#39;\n&#39;Key = txt, Value = notepad.exe\n&#39;Key = bmp, Value = paint.exe\n&#39;Key = dib, Value = paint.exe\n&#39;Key = rtf, Value = winword.exe\n&#39;Key = doc, Value = winword.exe\n&#39;Key = ht, Value = hypertrm.exe\n&#39;\n&#39;Value = notepad.exe\n&#39;Value = paint.exe\n&#39;Value = paint.exe\n&#39;Value = winword.exe\n&#39;Value = winword.exe\n&#39;Value = hypertrm.exe\n&#39;\n&#39;Key = txt\n&#39;Key = bmp\n&#39;Key = dib\n&#39;Key = rtf\n&#39;Key = doc\n&#39;Key = ht\n&#39;\n&#39;Remove(&quot;dib&quot;)\n&#39;Key &quot;dib&quot; is not found.\n&#39; \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_SortedList_2_System_Collections_IDictionary_Contains_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_Generic_SortedList_2_System_Collections_IDictionary_Contains_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IDictionary.Contains(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> contains an element with the specified key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool IDictionary.Contains (object key);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key to locate in the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> contains an element with the key; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>key</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method returns <code>false</code> if <code>key</code> is of a type that is not assignable to the key type <code>TKey</code> of the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a>.  </p>\n<p> This method is an O(log <code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to use the IDictionary.Contains method of the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">System.Collections.IDictionary</a> interface with a <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a>. The example demonstrates that the method returns <code>false</code> if a key of the wrong data type is supplied.  </p>\n<p> The code example is part of a larger example, including output, provided for the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_System_Collections_IDictionary_Add_\" data-linktype=\"relative-path\">System.Collections.IDictionary.Add</a> method.  </p>\n<pre><code class=\"lang-cs\" name=\"Generic.SortedList.IDictionary#31\">using System;\nusing System.Collections;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Create a new sorted list of strings, with string keys,\n        // and access it using the IDictionary interface.\n        //\n        IDictionary openWith = new SortedList&lt;string, string&gt;();\n\n        // Add some elements to the sorted list. There are no \n        // duplicate keys, but some of the values are duplicates.\n        // IDictionary.Add throws an exception if incorrect types\n        // are supplied for key or value.\n        openWith.Add(&quot;txt&quot;, &quot;notepad.exe&quot;);\n        openWith.Add(&quot;bmp&quot;, &quot;paint.exe&quot;);\n        openWith.Add(&quot;dib&quot;, &quot;paint.exe&quot;);\n        openWith.Add(&quot;rtf&quot;, &quot;wordpad.exe&quot;);\n</code></pre><pre><code class=\"lang-vb\" name=\"Generic.SortedList.IDictionary#31\">Imports System\nImports System.Collections\nImports System.Collections.Generic\n\nPublic Class Example\n    \n    Public Shared Sub Main() \n\n        &#39; Create a new sorted list of strings, with string keys,\n        &#39; and access it using the IDictionary interface.\n        &#39;\n        Dim openWith As IDictionary = _\n            New sortedList(Of String, String)\n        \n        &#39; Add some elements to the sorted list. There are no \n        &#39; duplicate keys, but some of the values are duplicates.\n        &#39; IDictionary.Add throws an exception if incorrect types\n        &#39; are supplied for key or value.\n        openWith.Add(&quot;txt&quot;, &quot;notepad.exe&quot;)\n        openWith.Add(&quot;bmp&quot;, &quot;paint.exe&quot;)\n        openWith.Add(&quot;dib&quot;, &quot;paint.exe&quot;)\n        openWith.Add(&quot;rtf&quot;, &quot;wordpad.exe&quot;)\n</code></pre><pre><code class=\"lang-cs\" name=\"Generic.SortedList.IDictionary#6\">        // Contains can be used to test keys before inserting \n        // them.\n        if (!openWith.Contains(&quot;ht&quot;))\n        {\n            openWith.Add(&quot;ht&quot;, &quot;hypertrm.exe&quot;);\n            Console.WriteLine(&quot;Value added for key = \\&quot;ht\\&quot;: {0}&quot;, \n                openWith[&quot;ht&quot;]);\n        }\n\n        // IDictionary.Contains returns false if the wrong data\n        // type is supplied.\n        Console.WriteLine(&quot;openWith.Contains(29.7) returns {0}&quot;,\n            openWith.Contains(29.7));\n</code></pre><pre><code class=\"lang-vb\" name=\"Generic.SortedList.IDictionary#6\">        &#39; Contains can be used to test keys before inserting \n        &#39; them.\n        If Not openWith.Contains(&quot;ht&quot;) Then\n            openWith.Add(&quot;ht&quot;, &quot;hypertrm.exe&quot;)\n            Console.WriteLine(&quot;Value added for key = &quot;&quot;ht&quot;&quot;: {0}&quot;, _\n                openWith(&quot;ht&quot;))\n        End If\n\n        &#39; IDictionary.Contains returns False if the wrong data \n        &#39; type is supplied.\n        Console.WriteLine(&quot;openWith.Contains(29.7) returns {0}&quot;, _\n            openWith.Contains(29.7))\n</code></pre><pre><code class=\"lang-cs\" name=\"Generic.SortedList.IDictionary#32\">    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Generic.SortedList.IDictionary#32\">\n    End Sub\n\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_SortedList_2_System_Collections_IDictionary_GetEnumerator\">\r\n    \r\n            <a id=\"System_Collections_Generic_SortedList_2_System_Collections_IDictionary_GetEnumerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IDictionary.GetEnumerator()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an <a class=\"xref\" href=\"system.collections.idictionaryenumerator\" data-linktype=\"relative-path\">IDictionaryEnumerator</a> for the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">System.Collections.IDictionaryEnumerator IDictionary.GetEnumerator ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.idictionaryenumerator\" data-linktype=\"relative-path\">IDictionaryEnumerator</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.idictionaryenumerator\" data-linktype=\"relative-path\">IDictionaryEnumerator</a> for the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>foreach</code> statement of the C# language (<code>for each</code> in C++, <code>For Each</code> in Visual Basic) hides the complexity of the enumerators.  Therefore, using <code>foreach</code> is recommended, instead of directly manipulating the enumerator.  </p>\n<p> Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  </p>\n<p> Initially, the enumerator is positioned before the first element in the collection. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> also brings the enumerator back to this position.  At this position, <a class=\"xref\" href=\"system.collections.idictionaryenumerator#System_Collections_IDictionaryEnumerator_Entry_\" data-linktype=\"relative-path\">Entry</a> is undefined. Therefore, you must call <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> to advance the enumerator to the first element of the collection before reading the value of <a class=\"xref\" href=\"system.collections.idictionaryenumerator#System_Collections_IDictionaryEnumerator_Entry_\" data-linktype=\"relative-path\">Entry</a>.  </p>\n<p> <a class=\"xref\" href=\"system.collections.idictionaryenumerator#System_Collections_IDictionaryEnumerator_Entry_\" data-linktype=\"relative-path\">Entry</a> returns the same object until either <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> or <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> is called. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> sets <a class=\"xref\" href=\"system.collections.idictionaryenumerator#System_Collections_IDictionaryEnumerator_Entry_\" data-linktype=\"relative-path\">Entry</a> to the next element.  </p>\n<p> If <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> passes the end of the collection, the enumerator is positioned after the last element in the collection and <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returns <code>false</code>. When the enumerator is at this position, subsequent calls to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> also return <code>false</code>. If the last call to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returned <code>false</code>, <a class=\"xref\" href=\"system.collections.idictionaryenumerator#System_Collections_IDictionaryEnumerator_Entry_\" data-linktype=\"relative-path\">Entry</a> is undefined. To set <a class=\"xref\" href=\"system.collections.idictionaryenumerator#System_Collections_IDictionaryEnumerator_Entry_\" data-linktype=\"relative-path\">Entry</a> to the first element of the collection again, you can call <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> followed by <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a>.  </p>\n<p> An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  </p>\n<p> The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  </p>\n<p> Default implementations of collections in <a class=\"xref\" href=\"system.collections.generic\" data-linktype=\"relative-path\">System.Collections.Generic</a> are not synchronized.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to enumerate the key/value pairs in the sorted list by using the <code>foreach</code> statement (<code>For Each</code> in Visual Basic, <code>for each</code> in C++), which hides the use of the enumerator. In particular, note that the enumerator for the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">System.Collections.IDictionary</a> interface returns <a class=\"xref\" href=\"system.collections.dictionaryentry\" data-linktype=\"relative-path\">DictionaryEntry</a> objects rather than <a class=\"xref\" href=\"system.collections.generic.keyvaluepair-2\" data-linktype=\"relative-path\">KeyValuePair&lt;TKey,TValue&gt;</a> objects.  </p>\n<p> The code example is part of a larger example, including output, provided for the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_System_Collections_IDictionary_Add_\" data-linktype=\"relative-path\">System.Collections.IDictionary.Add</a> method.  </p>\n<pre><code class=\"lang-cs\" name=\"Generic.SortedList.IDictionary#31\">using System;\nusing System.Collections;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Create a new sorted list of strings, with string keys,\n        // and access it using the IDictionary interface.\n        //\n        IDictionary openWith = new SortedList&lt;string, string&gt;();\n\n        // Add some elements to the sorted list. There are no \n        // duplicate keys, but some of the values are duplicates.\n        // IDictionary.Add throws an exception if incorrect types\n        // are supplied for key or value.\n        openWith.Add(&quot;txt&quot;, &quot;notepad.exe&quot;);\n        openWith.Add(&quot;bmp&quot;, &quot;paint.exe&quot;);\n        openWith.Add(&quot;dib&quot;, &quot;paint.exe&quot;);\n        openWith.Add(&quot;rtf&quot;, &quot;wordpad.exe&quot;);\n</code></pre><pre><code class=\"lang-vb\" name=\"Generic.SortedList.IDictionary#31\">Imports System\nImports System.Collections\nImports System.Collections.Generic\n\nPublic Class Example\n    \n    Public Shared Sub Main() \n\n        &#39; Create a new sorted list of strings, with string keys,\n        &#39; and access it using the IDictionary interface.\n        &#39;\n        Dim openWith As IDictionary = _\n            New sortedList(Of String, String)\n        \n        &#39; Add some elements to the sorted list. There are no \n        &#39; duplicate keys, but some of the values are duplicates.\n        &#39; IDictionary.Add throws an exception if incorrect types\n        &#39; are supplied for key or value.\n        openWith.Add(&quot;txt&quot;, &quot;notepad.exe&quot;)\n        openWith.Add(&quot;bmp&quot;, &quot;paint.exe&quot;)\n        openWith.Add(&quot;dib&quot;, &quot;paint.exe&quot;)\n        openWith.Add(&quot;rtf&quot;, &quot;wordpad.exe&quot;)\n</code></pre><pre><code class=\"lang-cs\" name=\"Generic.SortedList.IDictionary#7\">        // When you use foreach to enumerate sorted list elements\n        // with the IDictionary interface, the elements are retrieved\n        // as DictionaryEntry objects instead of KeyValuePair objects.\n        Console.WriteLine();\n        foreach( DictionaryEntry de in openWith )\n        {\n            Console.WriteLine(&quot;Key = {0}, Value = {1}&quot;, \n                de.Key, de.Value);\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"Generic.SortedList.IDictionary#7\">        &#39; When you use foreach to enumerate sorted list elements\n        &#39; with the IDictionary interface, the elements are retrieved\n        &#39; as DictionaryEntry objects instead of KeyValuePair objects.\n        Console.WriteLine()\n        For Each de As DictionaryEntry In openWith\n            Console.WriteLine(&quot;Key = {0}, Value = {1}&quot;, _\n                de.Key, de.Value)\n        Next \n</code></pre><pre><code class=\"lang-cs\" name=\"Generic.SortedList.IDictionary#32\">    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Generic.SortedList.IDictionary#32\">\n    End Sub\n\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_SortedList_2_System_Collections_IDictionary_IsFixedSize\">\r\n    \r\n            <a id=\"System_Collections_Generic_SortedList_2_System_Collections_IDictionary_IsFixedSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IDictionary.IsFixedSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> has a fixed size.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool System.Collections.IDictionary.IsFixedSize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> has a fixed size; otherwise, <code>false</code>.  In the default implementation of <span class=\"xref\">stem.Collections.Generic.SortedList`2</span>, this property always returns <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.  </p>\n<p> A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_SortedList_2_System_Collections_IDictionary_IsReadOnly\">\r\n    \r\n            <a id=\"System_Collections_Generic_SortedList_2_System_Collections_IDictionary_IsReadOnly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IDictionary.IsReadOnly</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool System.Collections.IDictionary.IsReadOnly { get; }</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> is read-only; otherwise, <code>false</code>.  In the default implementation of <span class=\"xref\">stem.Collections.Generic.SortedList`2</span>, this property always returns <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.  </p>\n<p> A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_SortedList_2_System_Collections_IDictionary_Item_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_Generic_SortedList_2_System_Collections_IDictionary_Item_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IDictionary.Item(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the element with the specified key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">object System.Collections.IDictionary.Item[object key] { get; set; }</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key of the element to get or set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The element with the specified key, or <code>null</code> if <code>key</code> is not in the dictionary or <code>key</code> is of a type that is not assignable to the key type <code>TKey</code> of the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>key</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>A value is being assigned, and <code>key</code> is of a type that is not assignable to the key type <code>TKey</code> of the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span>.  </p>\n<p> -or-  </p>\n<p> A value is being assigned, and <code>value</code> is of a type that is not assignable to the value type <code>TValue</code> of the <span class=\"xref\">stem.Collections.Generic.SortedList`2</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property returns <code>null</code> if <code>key</code> is of a type that is not assignable to the key type <code>TKey</code> of the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a>.  </p>\n<p> This property provides the ability to access a specific element in the collection by using the following syntax: <code>myCollection[key]</code>.  </p>\n<p> You can also use the <a class=\"xref\" href=\"system.collections.idictionary#System_Collections_IDictionary_Item_\" data-linktype=\"relative-path\">Item</a> property to add new elements by setting the value of a key that does not exist in the dictionary; for example, <code>myCollection[&quot;myNonexistentKey&quot;] = myValue</code>. However, if the specified key already exists in the dictionary, setting the <a class=\"xref\" href=\"system.collections.idictionary#System_Collections_IDictionary_Item_\" data-linktype=\"relative-path\">Item</a> property overwrites the old value. In contrast, the <a class=\"xref\" href=\"system.collections.idictionary#System_Collections_IDictionary_Add_\" data-linktype=\"relative-path\">Add</a> method does not modify existing elements.  </p>\n<p> The C# language uses the <a href=\"../Topic/this%20(C%23%20Reference).md\" data-linktype=\"relative-path\">this</a> keyword to define the indexers instead of implementing the IDictionary.Item property. Visual Basic implements IDictionary.Item as a default property, which provides the same indexing functionality.  </p>\n<p> Retrieving the value of this property is an O(log <code>n</code>) operation, where n is <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_Count_\" data-linktype=\"relative-path\">Count</a>. Setting the property is an O(log <code>n</code>) operation if the key is already in the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a>. If the key is not in the list, setting the property is an O(<code>n</code>) operation for unsorted data, or O(log <code>n</code>) if the new element is added at the end of the list. If insertion causes a resize, the operation is O(<code>n</code>).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to use the IDictionary.Item property (the indexer in C#) of the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">System.Collections.IDictionary</a> interface with a <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a>, and ways the property differs from the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_Item_\" data-linktype=\"relative-path\">Item</a> property.  </p>\n<p> The example shows that, like the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_Item_\" data-linktype=\"relative-path\">Item</a> property, the IDictionary.Item property can change the value associated with an existing key and can be used to add a new key/value pair if the specified key is not in the sorted list. The example also shows that unlike the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_Item_\" data-linktype=\"relative-path\">Item</a> property, the IDictionary.Item property does not throw an exception if <code>key</code> is not in the sorted list, returning a null reference instead. Finally, the example demonstrates that getting the IDictionary.Item property returns a null reference if <code>key</code> is not the correct data type, and that setting the property throws an exception if <code>key</code> is not the correct data type.  </p>\n<p> The code example is part of a larger example, including output, provided for the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_System_Collections_IDictionary_Add_\" data-linktype=\"relative-path\">System.Collections.IDictionary.Add</a> method.  </p>\n<pre><code class=\"lang-cs\" name=\"Generic.SortedList.IDictionary#31\">using System;\nusing System.Collections;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Create a new sorted list of strings, with string keys,\n        // and access it using the IDictionary interface.\n        //\n        IDictionary openWith = new SortedList&lt;string, string&gt;();\n\n        // Add some elements to the sorted list. There are no \n        // duplicate keys, but some of the values are duplicates.\n        // IDictionary.Add throws an exception if incorrect types\n        // are supplied for key or value.\n        openWith.Add(&quot;txt&quot;, &quot;notepad.exe&quot;);\n        openWith.Add(&quot;bmp&quot;, &quot;paint.exe&quot;);\n        openWith.Add(&quot;dib&quot;, &quot;paint.exe&quot;);\n        openWith.Add(&quot;rtf&quot;, &quot;wordpad.exe&quot;);\n</code></pre><pre><code class=\"lang-vb\" name=\"Generic.SortedList.IDictionary#31\">Imports System\nImports System.Collections\nImports System.Collections.Generic\n\nPublic Class Example\n    \n    Public Shared Sub Main() \n\n        &#39; Create a new sorted list of strings, with string keys,\n        &#39; and access it using the IDictionary interface.\n        &#39;\n        Dim openWith As IDictionary = _\n            New sortedList(Of String, String)\n        \n        &#39; Add some elements to the sorted list. There are no \n        &#39; duplicate keys, but some of the values are duplicates.\n        &#39; IDictionary.Add throws an exception if incorrect types\n        &#39; are supplied for key or value.\n        openWith.Add(&quot;txt&quot;, &quot;notepad.exe&quot;)\n        openWith.Add(&quot;bmp&quot;, &quot;paint.exe&quot;)\n        openWith.Add(&quot;dib&quot;, &quot;paint.exe&quot;)\n        openWith.Add(&quot;rtf&quot;, &quot;wordpad.exe&quot;)\n</code></pre><pre><code class=\"lang-cs\" name=\"Generic.SortedList.IDictionary#3\">        // The Item property is another name for the indexer, so you \n        // can omit its name when accessing elements. \n        Console.WriteLine(&quot;For key = \\&quot;rtf\\&quot;, value = {0}.&quot;, \n            openWith[&quot;rtf&quot;]);\n\n        // The indexer can be used to change the value associated\n        // with a key.\n        openWith[&quot;rtf&quot;] = &quot;winword.exe&quot;;\n        Console.WriteLine(&quot;For key = \\&quot;rtf\\&quot;, value = {0}.&quot;, \n            openWith[&quot;rtf&quot;]);\n\n        // If a key does not exist, setting the indexer for that key\n        // adds a new key/value pair.\n        openWith[&quot;doc&quot;] = &quot;winword.exe&quot;;\n\n        // The indexer returns null if the key is of the wrong data \n        // type.\n        Console.WriteLine(&quot;The indexer returns null&quot; \n            + &quot; if the key is of the wrong type:&quot;);\n        Console.WriteLine(&quot;For key = 2, value = {0}.&quot;, \n            openWith[2]);\n\n        // The indexer throws an exception when setting a value\n        // if the key is of the wrong data type.\n        try\n        {\n            openWith[2] = &quot;This does not get added.&quot;;\n        }\n        catch (ArgumentException)\n        {\n            Console.WriteLine(&quot;A key of the wrong type was specified&quot; \n                + &quot; when assigning to the indexer.&quot;);\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"Generic.SortedList.IDictionary#3\">        &#39; The Item property is the default property, so you \n        &#39; can omit its name when accessing elements. \n        Console.WriteLine(&quot;For key = &quot;&quot;rtf&quot;&quot;, value = {0}.&quot;, _\n            openWith(&quot;rtf&quot;))\n        \n        &#39; The default Item property can be used to change the value\n        &#39; associated with a key.\n        openWith(&quot;rtf&quot;) = &quot;winword.exe&quot;\n        Console.WriteLine(&quot;For key = &quot;&quot;rtf&quot;&quot;, value = {0}.&quot;, _\n            openWith(&quot;rtf&quot;))\n        \n        &#39; If a key does not exist, setting the default Item property\n        &#39; for that key adds a new key/value pair.\n        openWith(&quot;doc&quot;) = &quot;winword.exe&quot;\n\n        &#39; The default Item property returns Nothing if the key\n        &#39; is of the wrong data type.\n        Console.WriteLine(&quot;The default Item property returns Nothing&quot; _\n            &amp; &quot; if the key is of the wrong type:&quot;)\n        Console.WriteLine(&quot;For key = 2, value = {0}.&quot;, _\n            openWith(2))\n\n        &#39; The default Item property throws an exception when setting\n        &#39; a value if the key is of the wrong data type.\n        Try\n            openWith(2) = &quot;This does not get added.&quot;\n        Catch \n            Console.WriteLine(&quot;A key of the wrong type was specified&quot; _\n                &amp; &quot; when setting the default Item property.&quot;)\n        End Try\n</code></pre><pre><code class=\"lang-cs\" name=\"Generic.SortedList.IDictionary#4\">        // Unlike the default Item property on the SorteList class\n        // itself, IDictionary.Item does not throw an exception\n        // if the requested key is not in the sorted list.\n        Console.WriteLine(&quot;For key = \\&quot;tif\\&quot;, value = {0}.&quot;, \n            openWith[&quot;tif&quot;]);\n</code></pre><pre><code class=\"lang-vb\" name=\"Generic.SortedList.IDictionary#4\">        &#39; Unlike the default Item property on the SortedList class\n        &#39; itself, IDictionary.Item does not throw an exception\n        &#39; if the requested key is not in the sorted list.\n        Console.WriteLine(&quot;For key = &quot;&quot;tif&quot;&quot;, value = {0}.&quot;, _\n            openWith(&quot;tif&quot;))\n</code></pre><pre><code class=\"lang-cs\" name=\"Generic.SortedList.IDictionary#32\">    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Generic.SortedList.IDictionary#32\">\n    End Sub\n\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_SortedList_2_System_Collections_IDictionary_Keys\">\r\n    \r\n            <a id=\"System_Collections_Generic_SortedList_2_System_Collections_IDictionary_Keys_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IDictionary.Keys</div>        \r\n          </div>\r\n    \r\n            <p>Gets an <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> containing the keys of the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">System.Collections.ICollection System.Collections.IDictionary.Keys { get; }</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> containing the keys of the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The order of the keys in the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> is the same as the order in the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a>.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to use the &lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23Generic%23IDictionary%7BTKey%40TValue%7D%23Keys%2A&gt; property of the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">System.Collections.IDictionary</a> interface with a <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a>, to list the keys in the sorted list. The example also shows how to enumerate the key/value pairs in the sorted list; note that the enumerator for the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">System.Collections.IDictionary</a> interface returns <a class=\"xref\" href=\"system.collections.dictionaryentry\" data-linktype=\"relative-path\">DictionaryEntry</a> objects rather than <a class=\"xref\" href=\"system.collections.generic.keyvaluepair-2\" data-linktype=\"relative-path\">KeyValuePair&lt;TKey,TValue&gt;</a> objects.  </p>\n<p> The code example is part of a larger example, including output, provided for the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_System_Collections_IDictionary_Add_\" data-linktype=\"relative-path\">System.Collections.IDictionary.Add</a> method.  </p>\n<pre><code class=\"lang-cs\" name=\"Generic.SortedList.IDictionary#31\">using System;\nusing System.Collections;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Create a new sorted list of strings, with string keys,\n        // and access it using the IDictionary interface.\n        //\n        IDictionary openWith = new SortedList&lt;string, string&gt;();\n\n        // Add some elements to the sorted list. There are no \n        // duplicate keys, but some of the values are duplicates.\n        // IDictionary.Add throws an exception if incorrect types\n        // are supplied for key or value.\n        openWith.Add(&quot;txt&quot;, &quot;notepad.exe&quot;);\n        openWith.Add(&quot;bmp&quot;, &quot;paint.exe&quot;);\n        openWith.Add(&quot;dib&quot;, &quot;paint.exe&quot;);\n        openWith.Add(&quot;rtf&quot;, &quot;wordpad.exe&quot;);\n</code></pre><pre><code class=\"lang-vb\" name=\"Generic.SortedList.IDictionary#31\">Imports System\nImports System.Collections\nImports System.Collections.Generic\n\nPublic Class Example\n    \n    Public Shared Sub Main() \n\n        &#39; Create a new sorted list of strings, with string keys,\n        &#39; and access it using the IDictionary interface.\n        &#39;\n        Dim openWith As IDictionary = _\n            New sortedList(Of String, String)\n        \n        &#39; Add some elements to the sorted list. There are no \n        &#39; duplicate keys, but some of the values are duplicates.\n        &#39; IDictionary.Add throws an exception if incorrect types\n        &#39; are supplied for key or value.\n        openWith.Add(&quot;txt&quot;, &quot;notepad.exe&quot;)\n        openWith.Add(&quot;bmp&quot;, &quot;paint.exe&quot;)\n        openWith.Add(&quot;dib&quot;, &quot;paint.exe&quot;)\n        openWith.Add(&quot;rtf&quot;, &quot;wordpad.exe&quot;)\n</code></pre><pre><code class=\"lang-cs\" name=\"Generic.SortedList.IDictionary#9\">        // To get the keys alone, use the Keys property.\n        icoll = openWith.Keys;\n\n        // The elements of the collection are strongly typed\n        // with the type that was specified for keys,\n        // even though the ICollection interface is not strongly\n        // typed.\n        Console.WriteLine();\n        foreach( string s in icoll )\n        {\n            Console.WriteLine(&quot;Key = {0}&quot;, s);\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"Generic.SortedList.IDictionary#9\">        &#39; To get the keys alone, use the Keys property.\n        icoll = openWith.Keys\n        \n        &#39; The elements of the collection are strongly typed\n        &#39; with the type that was specified for sorted list keys,\n        &#39; even though the ICollection interface is not strongly\n        &#39; typed.\n        Console.WriteLine()\n        For Each s As String In  icoll\n            Console.WriteLine(&quot;Key = {0}&quot;, s)\n        Next s\n</code></pre><pre><code class=\"lang-cs\" name=\"Generic.SortedList.IDictionary#7\">        // When you use foreach to enumerate sorted list elements\n        // with the IDictionary interface, the elements are retrieved\n        // as DictionaryEntry objects instead of KeyValuePair objects.\n        Console.WriteLine();\n        foreach( DictionaryEntry de in openWith )\n        {\n            Console.WriteLine(&quot;Key = {0}, Value = {1}&quot;, \n                de.Key, de.Value);\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"Generic.SortedList.IDictionary#7\">        &#39; When you use foreach to enumerate sorted list elements\n        &#39; with the IDictionary interface, the elements are retrieved\n        &#39; as DictionaryEntry objects instead of KeyValuePair objects.\n        Console.WriteLine()\n        For Each de As DictionaryEntry In openWith\n            Console.WriteLine(&quot;Key = {0}, Value = {1}&quot;, _\n                de.Key, de.Value)\n        Next \n</code></pre><pre><code class=\"lang-cs\" name=\"Generic.SortedList.IDictionary#32\">    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Generic.SortedList.IDictionary#32\">\n    End Sub\n\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_SortedList_2_System_Collections_IDictionary_Remove_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_Generic_SortedList_2_System_Collections_IDictionary_Remove_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IDictionary.Remove(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Removes the element with the specified key from the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void IDictionary.Remove (object key);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key of the element to remove.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>key</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method performs a binary search; however, the elements are moved up to fill in the open spot, so this method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to use the IDictionary.Remove of the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">System.Collections.IDictionary</a> interface with a <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a>.  </p>\n<p> The code example is part of a larger example, including output, provided for the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_System_Collections_IDictionary_Add_\" data-linktype=\"relative-path\">System.Collections.IDictionary.Add</a> method.  </p>\n<pre><code class=\"lang-cs\" name=\"Generic.SortedList.IDictionary#31\">using System;\nusing System.Collections;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Create a new sorted list of strings, with string keys,\n        // and access it using the IDictionary interface.\n        //\n        IDictionary openWith = new SortedList&lt;string, string&gt;();\n\n        // Add some elements to the sorted list. There are no \n        // duplicate keys, but some of the values are duplicates.\n        // IDictionary.Add throws an exception if incorrect types\n        // are supplied for key or value.\n        openWith.Add(&quot;txt&quot;, &quot;notepad.exe&quot;);\n        openWith.Add(&quot;bmp&quot;, &quot;paint.exe&quot;);\n        openWith.Add(&quot;dib&quot;, &quot;paint.exe&quot;);\n        openWith.Add(&quot;rtf&quot;, &quot;wordpad.exe&quot;);\n</code></pre><pre><code class=\"lang-vb\" name=\"Generic.SortedList.IDictionary#31\">Imports System\nImports System.Collections\nImports System.Collections.Generic\n\nPublic Class Example\n    \n    Public Shared Sub Main() \n\n        &#39; Create a new sorted list of strings, with string keys,\n        &#39; and access it using the IDictionary interface.\n        &#39;\n        Dim openWith As IDictionary = _\n            New sortedList(Of String, String)\n        \n        &#39; Add some elements to the sorted list. There are no \n        &#39; duplicate keys, but some of the values are duplicates.\n        &#39; IDictionary.Add throws an exception if incorrect types\n        &#39; are supplied for key or value.\n        openWith.Add(&quot;txt&quot;, &quot;notepad.exe&quot;)\n        openWith.Add(&quot;bmp&quot;, &quot;paint.exe&quot;)\n        openWith.Add(&quot;dib&quot;, &quot;paint.exe&quot;)\n        openWith.Add(&quot;rtf&quot;, &quot;wordpad.exe&quot;)\n</code></pre><pre><code class=\"lang-cs\" name=\"Generic.SortedList.IDictionary#10\">        // Use the Remove method to remove a key/value pair. No\n        // exception is thrown if the wrong data type is supplied.\n        Console.WriteLine(&quot;<br>Remove(\\&quot;dib\\&quot;)&quot;);\n        openWith.Remove(&quot;dib&quot;);\n\n        if (!openWith.Contains(&quot;dib&quot;))\n        {\n            Console.WriteLine(&quot;Key \\&quot;dib\\&quot; is not found.&quot;);\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"Generic.SortedList.IDictionary#10\">        &#39; Use the Remove method to remove a key/value pair. No\n        &#39; exception is thrown if the wrong data type is supplied.\n        Console.WriteLine(vbLf + &quot;Remove(&quot;&quot;dib&quot;&quot;)&quot;)\n        openWith.Remove(&quot;dib&quot;)\n        \n        If Not openWith.Contains(&quot;dib&quot;) Then\n            Console.WriteLine(&quot;Key &quot;&quot;dib&quot;&quot; is not found.&quot;)\n        End If\n</code></pre><pre><code class=\"lang-cs\" name=\"Generic.SortedList.IDictionary#32\">    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Generic.SortedList.IDictionary#32\">\n    End Sub\n\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_SortedList_2_System_Collections_IDictionary_Values\">\r\n    \r\n            <a id=\"System_Collections_Generic_SortedList_2_System_Collections_IDictionary_Values_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IDictionary.Values</div>        \r\n          </div>\r\n    \r\n            <p>Gets an <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> containing the values in the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">System.Collections.ICollection System.Collections.IDictionary.Values { get; }</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> containing the values in the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The order of the values in the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> is the same as the order in the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a>.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to use the IDictionary.Values property of the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">System.Collections.IDictionary</a> interface with a <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a>, to list the values in the sorted list. The example also shows how to enumerate the key/value pairs in the sorted list; note that the enumerator for the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">System.Collections.IDictionary</a> interface returns <a class=\"xref\" href=\"system.collections.dictionaryentry\" data-linktype=\"relative-path\">DictionaryEntry</a> objects rather than <a class=\"xref\" href=\"system.collections.generic.keyvaluepair-2\" data-linktype=\"relative-path\">KeyValuePair&lt;TKey,TValue&gt;</a> objects.  </p>\n<p> The code example is part of a larger example, including output, provided for the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_System_Collections_IDictionary_Add_\" data-linktype=\"relative-path\">System.Collections.IDictionary.Add</a> method.  </p>\n<pre><code class=\"lang-cs\" name=\"Generic.SortedList.IDictionary#31\">using System;\nusing System.Collections;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Create a new sorted list of strings, with string keys,\n        // and access it using the IDictionary interface.\n        //\n        IDictionary openWith = new SortedList&lt;string, string&gt;();\n\n        // Add some elements to the sorted list. There are no \n        // duplicate keys, but some of the values are duplicates.\n        // IDictionary.Add throws an exception if incorrect types\n        // are supplied for key or value.\n        openWith.Add(&quot;txt&quot;, &quot;notepad.exe&quot;);\n        openWith.Add(&quot;bmp&quot;, &quot;paint.exe&quot;);\n        openWith.Add(&quot;dib&quot;, &quot;paint.exe&quot;);\n        openWith.Add(&quot;rtf&quot;, &quot;wordpad.exe&quot;);\n</code></pre><pre><code class=\"lang-vb\" name=\"Generic.SortedList.IDictionary#31\">Imports System\nImports System.Collections\nImports System.Collections.Generic\n\nPublic Class Example\n    \n    Public Shared Sub Main() \n\n        &#39; Create a new sorted list of strings, with string keys,\n        &#39; and access it using the IDictionary interface.\n        &#39;\n        Dim openWith As IDictionary = _\n            New sortedList(Of String, String)\n        \n        &#39; Add some elements to the sorted list. There are no \n        &#39; duplicate keys, but some of the values are duplicates.\n        &#39; IDictionary.Add throws an exception if incorrect types\n        &#39; are supplied for key or value.\n        openWith.Add(&quot;txt&quot;, &quot;notepad.exe&quot;)\n        openWith.Add(&quot;bmp&quot;, &quot;paint.exe&quot;)\n        openWith.Add(&quot;dib&quot;, &quot;paint.exe&quot;)\n        openWith.Add(&quot;rtf&quot;, &quot;wordpad.exe&quot;)\n</code></pre><pre><code class=\"lang-cs\" name=\"Generic.SortedList.IDictionary#8\">        // To get the values alone, use the Values property.\n        ICollection icoll = openWith.Values;\n\n        // The elements of the collection are strongly typed\n        // with the type that was specified for values,\n        // even though the ICollection interface is not strongly\n        // typed.\n        Console.WriteLine();\n        foreach( string s in icoll )\n        {\n            Console.WriteLine(&quot;Value = {0}&quot;, s);\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"Generic.SortedList.IDictionary#8\">        &#39; To get the values alone, use the Values property.\n        Dim icoll As ICollection = openWith.Values\n        \n        &#39; The elements of the collection are strongly typed\n        &#39; with the type that was specified for sorted list values,\n        &#39; even though the ICollection interface is not strongly\n        &#39; typed.\n        Console.WriteLine()\n        For Each s As String In  icoll\n            Console.WriteLine(&quot;Value = {0}&quot;, s)\n        Next s\n</code></pre><pre><code class=\"lang-cs\" name=\"Generic.SortedList.IDictionary#7\">        // When you use foreach to enumerate sorted list elements\n        // with the IDictionary interface, the elements are retrieved\n        // as DictionaryEntry objects instead of KeyValuePair objects.\n        Console.WriteLine();\n        foreach( DictionaryEntry de in openWith )\n        {\n            Console.WriteLine(&quot;Key = {0}, Value = {1}&quot;, \n                de.Key, de.Value);\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"Generic.SortedList.IDictionary#7\">        &#39; When you use foreach to enumerate sorted list elements\n        &#39; with the IDictionary interface, the elements are retrieved\n        &#39; as DictionaryEntry objects instead of KeyValuePair objects.\n        Console.WriteLine()\n        For Each de As DictionaryEntry In openWith\n            Console.WriteLine(&quot;Key = {0}, Value = {1}&quot;, _\n                de.Key, de.Value)\n        Next \n</code></pre><pre><code class=\"lang-cs\" name=\"Generic.SortedList.IDictionary#32\">    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Generic.SortedList.IDictionary#32\">\n    End Sub\n\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_SortedList_2_System_Collections_IEnumerable_GetEnumerator\">\r\n    \r\n            <a id=\"System_Collections_Generic_SortedList_2_System_Collections_IEnumerable_GetEnumerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IEnumerable.GetEnumerator()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an enumerator that iterates through a collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">System.Collections.IEnumerator IEnumerable.GetEnumerator ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a> that can be used to iterate through the collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>foreach</code> statement of the C# language (<code>for each</code> in C++, <code>For Each</code> in Visual Basic) hides the complexity of the enumerators.  Therefore, using <code>foreach</code> is recommended, instead of directly manipulating the enumerator.  </p>\n<p> Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  </p>\n<p> Initially, the enumerator is positioned before the first element in the collection. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> also brings the enumerator back to this position.  At this position, <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> is undefined. Therefore, you must call <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> to advance the enumerator to the first element of the collection before reading the value of <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a>.  </p>\n<p> <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> returns the same object until either <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> or <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> is called. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> sets <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the next element.  </p>\n<p> If <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> passes the end of the collection, the enumerator is positioned after the last element in the collection and <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returns <code>false</code>. When the enumerator is at this position, subsequent calls to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> also return <code>false</code>. If the last call to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returned <code>false</code>, <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> is undefined. To set <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the first element of the collection again, you can call <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> followed by <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a>.  </p>\n<p> An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  </p>\n<p> The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  </p>\n<p> Default implementations of collections in <a class=\"xref\" href=\"system.collections.generic\" data-linktype=\"relative-path\">System.Collections.Generic</a> are not synchronized.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Collections.Generic.SortedList-2.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Collections.Generic.SortedList-2.yml\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.SortedList&lt;TKey,TValue&gt;\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.SortedList&lt;TKey,TValue&gt;..ctor\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.SortedList&lt;TKey,TValue&gt;.Add\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.SortedList&lt;TKey,TValue&gt;.Capacity\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.SortedList&lt;TKey,TValue&gt;.Clear\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.SortedList&lt;TKey,TValue&gt;.Comparer\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.SortedList&lt;TKey,TValue&gt;.ContainsKey\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.SortedList&lt;TKey,TValue&gt;.ContainsValue\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.SortedList&lt;TKey,TValue&gt;.Count\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.SortedList&lt;TKey,TValue&gt;.GetEnumerator\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.SortedList&lt;TKey,TValue&gt;.IndexOfKey\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.SortedList&lt;TKey,TValue&gt;.IndexOfValue\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.SortedList&lt;TKey,TValue&gt;.Item\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.SortedList&lt;TKey,TValue&gt;.Keys\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.SortedList&lt;TKey,TValue&gt;.Remove\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.SortedList&lt;TKey,TValue&gt;.RemoveAt\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.SortedList&lt;TKey,TValue&gt;.ICollection&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.Add\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.SortedList&lt;TKey,TValue&gt;.ICollection&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.Contains\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.SortedList&lt;TKey,TValue&gt;.ICollection&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.CopyTo\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.SortedList&lt;TKey,TValue&gt;.ICollection&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.IsReadOnly\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.SortedList&lt;TKey,TValue&gt;.ICollection&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.Remove\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.SortedList&lt;TKey,TValue&gt;.IDictionary&lt;TKey,TValue&gt;.Keys\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.SortedList&lt;TKey,TValue&gt;.IDictionary&lt;TKey,TValue&gt;.Values\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.SortedList&lt;TKey,TValue&gt;.IEnumerable&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.GetEnumerator\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.SortedList&lt;TKey,TValue&gt;.IReadOnlyDictionary&lt;TKey,TValue&gt;.Keys\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.SortedList&lt;TKey,TValue&gt;.IReadOnlyDictionary&lt;TKey,TValue&gt;.Values\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.SortedList&lt;TKey,TValue&gt;.ICollection.CopyTo\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.SortedList&lt;TKey,TValue&gt;.ICollection.IsSynchronized\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.SortedList&lt;TKey,TValue&gt;.ICollection.SyncRoot\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.SortedList&lt;TKey,TValue&gt;.IDictionary.Add\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.SortedList&lt;TKey,TValue&gt;.IDictionary.Contains\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.SortedList&lt;TKey,TValue&gt;.IDictionary.GetEnumerator\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.SortedList&lt;TKey,TValue&gt;.IDictionary.IsFixedSize\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.SortedList&lt;TKey,TValue&gt;.IDictionary.IsReadOnly\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.SortedList&lt;TKey,TValue&gt;.IDictionary.Item\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.SortedList&lt;TKey,TValue&gt;.IDictionary.Keys\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.SortedList&lt;TKey,TValue&gt;.IDictionary.Remove\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.SortedList&lt;TKey,TValue&gt;.IDictionary.Values\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.SortedList&lt;TKey,TValue&gt;.IEnumerable.GetEnumerator\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.SortedList&lt;TKey,TValue&gt;.TrimExcess\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.SortedList&lt;TKey,TValue&gt;.TryGetValue\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.SortedList&lt;TKey,TValue&gt;.Values\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"0f8bbfbb-0fa3-67df-dc75-ba4f841db74b\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Collections.Generic\\SortedList`2.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a collection of key/value pairs that are sorted by key based on the associated  implementation.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Collections.Generic/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Collections.Generic.SortedList`2\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Collections.Generic.SortedList-2.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Collections.Generic.SortedList-2.yml","open_to_public_contributors":true,"api_name":["System.Collections.Generic.SortedList<TKey,TValue>","System.Collections.Generic.SortedList<TKey,TValue>..ctor","System.Collections.Generic.SortedList<TKey,TValue>.Add","System.Collections.Generic.SortedList<TKey,TValue>.Capacity","System.Collections.Generic.SortedList<TKey,TValue>.Clear","System.Collections.Generic.SortedList<TKey,TValue>.Comparer","System.Collections.Generic.SortedList<TKey,TValue>.ContainsKey","System.Collections.Generic.SortedList<TKey,TValue>.ContainsValue","System.Collections.Generic.SortedList<TKey,TValue>.Count","System.Collections.Generic.SortedList<TKey,TValue>.GetEnumerator","System.Collections.Generic.SortedList<TKey,TValue>.IndexOfKey","System.Collections.Generic.SortedList<TKey,TValue>.IndexOfValue","System.Collections.Generic.SortedList<TKey,TValue>.Item","System.Collections.Generic.SortedList<TKey,TValue>.Keys","System.Collections.Generic.SortedList<TKey,TValue>.Remove","System.Collections.Generic.SortedList<TKey,TValue>.RemoveAt","System.Collections.Generic.SortedList<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.Add","System.Collections.Generic.SortedList<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.Contains","System.Collections.Generic.SortedList<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.CopyTo","System.Collections.Generic.SortedList<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.IsReadOnly","System.Collections.Generic.SortedList<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.Remove","System.Collections.Generic.SortedList<TKey,TValue>.IDictionary<TKey,TValue>.Keys","System.Collections.Generic.SortedList<TKey,TValue>.IDictionary<TKey,TValue>.Values","System.Collections.Generic.SortedList<TKey,TValue>.IEnumerable<KeyValuePair<TKey,TValue>>.GetEnumerator","System.Collections.Generic.SortedList<TKey,TValue>.IReadOnlyDictionary<TKey,TValue>.Keys","System.Collections.Generic.SortedList<TKey,TValue>.IReadOnlyDictionary<TKey,TValue>.Values","System.Collections.Generic.SortedList<TKey,TValue>.ICollection.CopyTo","System.Collections.Generic.SortedList<TKey,TValue>.ICollection.IsSynchronized","System.Collections.Generic.SortedList<TKey,TValue>.ICollection.SyncRoot","System.Collections.Generic.SortedList<TKey,TValue>.IDictionary.Add","System.Collections.Generic.SortedList<TKey,TValue>.IDictionary.Contains","System.Collections.Generic.SortedList<TKey,TValue>.IDictionary.GetEnumerator","System.Collections.Generic.SortedList<TKey,TValue>.IDictionary.IsFixedSize","System.Collections.Generic.SortedList<TKey,TValue>.IDictionary.IsReadOnly","System.Collections.Generic.SortedList<TKey,TValue>.IDictionary.Item","System.Collections.Generic.SortedList<TKey,TValue>.IDictionary.Keys","System.Collections.Generic.SortedList<TKey,TValue>.IDictionary.Remove","System.Collections.Generic.SortedList<TKey,TValue>.IDictionary.Values","System.Collections.Generic.SortedList<TKey,TValue>.IEnumerable.GetEnumerator","System.Collections.Generic.SortedList<TKey,TValue>.TrimExcess","System.Collections.Generic.SortedList<TKey,TValue>.TryGetValue","System.Collections.Generic.SortedList<TKey,TValue>.Values"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Collections.Generic.SortedList`2","System::Collections::Generic::SortedList`2","System.Collections.Generic.SortedList`2.#ctor","System::Collections::Generic::SortedList`2::#ctor","System.Collections.Generic.SortedList`2.Add","System::Collections::Generic::SortedList`2::Add","System.Collections.Generic.SortedList`2.Capacity","System::Collections::Generic::SortedList`2::Capacity","System.Collections.Generic.SortedList`2.Clear","System::Collections::Generic::SortedList`2::Clear","System.Collections.Generic.SortedList`2.Comparer","System::Collections::Generic::SortedList`2::Comparer","System.Collections.Generic.SortedList`2.ContainsKey","System::Collections::Generic::SortedList`2::ContainsKey","System.Collections.Generic.SortedList`2.ContainsValue","System::Collections::Generic::SortedList`2::ContainsValue","System.Collections.Generic.SortedList`2.Count","System::Collections::Generic::SortedList`2::Count","System.Collections.Generic.SortedList`2.GetEnumerator","System::Collections::Generic::SortedList`2::GetEnumerator","System.Collections.Generic.SortedList`2.IndexOfKey","System::Collections::Generic::SortedList`2::IndexOfKey","System.Collections.Generic.SortedList`2.IndexOfValue","System::Collections::Generic::SortedList`2::IndexOfValue","System.Collections.Generic.SortedList`2.Item","System::Collections::Generic::SortedList`2::Item","System.Collections.Generic.SortedList`2.Keys","System::Collections::Generic::SortedList`2::Keys","System.Collections.Generic.SortedList`2.Remove","System::Collections::Generic::SortedList`2::Remove","System.Collections.Generic.SortedList`2.RemoveAt","System::Collections::Generic::SortedList`2::RemoveAt","System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add","System::Collections::Generic::SortedList`2::System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add","System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains","System::Collections::Generic::SortedList`2::System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains","System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo","System::Collections::Generic::SortedList`2::System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo","System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly","System::Collections::Generic::SortedList`2::System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly","System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove","System::Collections::Generic::SortedList`2::System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove","System.Collections.Generic.SortedList`2.System#Collections#Generic#IDictionary{TKey,TValue}#Keys","System::Collections::Generic::SortedList`2::System#Collections#Generic#IDictionary{TKey,TValue}#Keys","System.Collections.Generic.SortedList`2.System#Collections#Generic#IDictionary{TKey,TValue}#Values","System::Collections::Generic::SortedList`2::System#Collections#Generic#IDictionary{TKey,TValue}#Values","System.Collections.Generic.SortedList`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator","System::Collections::Generic::SortedList`2::System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator","System.Collections.Generic.SortedList`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys","System::Collections::Generic::SortedList`2::System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys","System.Collections.Generic.SortedList`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values","System::Collections::Generic::SortedList`2::System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values","System.Collections.Generic.SortedList`2.System#Collections#ICollection#CopyTo","System::Collections::Generic::SortedList`2::System#Collections#ICollection#CopyTo","System.Collections.Generic.SortedList`2.System#Collections#ICollection#IsSynchronized","System::Collections::Generic::SortedList`2::System#Collections#ICollection#IsSynchronized","System.Collections.Generic.SortedList`2.System#Collections#ICollection#SyncRoot","System::Collections::Generic::SortedList`2::System#Collections#ICollection#SyncRoot","System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add","System::Collections::Generic::SortedList`2::System#Collections#IDictionary#Add","System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Contains","System::Collections::Generic::SortedList`2::System#Collections#IDictionary#Contains","System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator","System::Collections::Generic::SortedList`2::System#Collections#IDictionary#GetEnumerator","System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsFixedSize","System::Collections::Generic::SortedList`2::System#Collections#IDictionary#IsFixedSize","System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsReadOnly","System::Collections::Generic::SortedList`2::System#Collections#IDictionary#IsReadOnly","System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item","System::Collections::Generic::SortedList`2::System#Collections#IDictionary#Item","System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Keys","System::Collections::Generic::SortedList`2::System#Collections#IDictionary#Keys","System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Remove","System::Collections::Generic::SortedList`2::System#Collections#IDictionary#Remove","System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Values","System::Collections::Generic::SortedList`2::System#Collections#IDictionary#Values","System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator","System::Collections::Generic::SortedList`2::System#Collections#IEnumerable#GetEnumerator","System.Collections.Generic.SortedList`2.TrimExcess","System::Collections::Generic::SortedList`2::TrimExcess","System.Collections.Generic.SortedList`2.TryGetValue","System::Collections::Generic::SortedList`2::TryGetValue","System.Collections.Generic.SortedList`2.Values","System::Collections::Generic::SortedList`2::Values"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"0f8bbfbb-0fa3-67df-dc75-ba4f841db74b","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Collections.Generic\\SortedList`2.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Collections.Generic/SortedList`2.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"SortedList<TKey,TValue> class | Microsoft Docs","_op_ogTitle":"SortedList<TKey,TValue> class","description":"Represents a collection of key/value pairs that are sorted by key based on the associated  implementation.\n","toc_asset_id":"_splitted/System.Collections.Generic/toc.json","toc_rel":"_splitted/System.Collections.Generic/toc.json","source_url":"","ms.assetid":"System.Collections.Generic.SortedList`2","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.collections.generic.sortedlist-2","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.collections.generic.sortedlist-2","fileRelativePath":"System.Collections.Generic.SortedList-2.html"},"themesRelativePathToOutputRoot":"_themes/"}