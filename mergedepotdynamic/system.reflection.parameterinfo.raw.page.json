{"content":"    \r\n    <h1 id=\"System_Reflection_ParameterInfo\">\r\n      <span class=\"lang-csharp\">ParameterInfo</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Discovers the attributes of a parameter and provides access to parameter metadata.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]\n[System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._ParameterInfo))]\n[System.Runtime.InteropServices.ComVisible(true)]\npublic class ParameterInfo : System.Reflection.ICustomAttributeProvider, System.Runtime.InteropServices._ParameterInfo, System.Runtime.Serialization.IObjectReference</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">ParameterInfo</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Use an instance of <code>ParameterInfo</code> to obtain information about the parameter&#39;s data type, default value, and so on.  </p>\n<p> <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_GetParameters_\" data-linktype=\"relative-path\">GetParameters</a> returns an array of <code>ParameterInfo</code> objects representing the parameters of a method, in order.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_ParameterInfo__ctor\" data-linktype=\"self-bookmark\">ParameterInfo()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <code>ParameterInfo</code> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Fields\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_ParameterInfo_AttrsImpl\" data-linktype=\"self-bookmark\">AttrsImpl</a></div>\r\n          </td>\r\n            <td>\r\n            <p>The attributes of the parameter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_ParameterInfo_ClassImpl\" data-linktype=\"self-bookmark\">ClassImpl</a></div>\r\n          </td>\r\n            <td>\r\n            <p>The <code>Type</code> of the parameter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_ParameterInfo_DefaultValueImpl\" data-linktype=\"self-bookmark\">DefaultValueImpl</a></div>\r\n          </td>\r\n            <td>\r\n            <p>The default value of the parameter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_ParameterInfo_MemberImpl\" data-linktype=\"self-bookmark\">MemberImpl</a></div>\r\n          </td>\r\n            <td>\r\n            <p>The member in which the field is implemented.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_ParameterInfo_NameImpl\" data-linktype=\"self-bookmark\">NameImpl</a></div>\r\n          </td>\r\n            <td>\r\n            <p>The name of the parameter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_ParameterInfo_PositionImpl\" data-linktype=\"self-bookmark\">PositionImpl</a></div>\r\n          </td>\r\n            <td>\r\n            <p>The zero-based position of the parameter in the parameter list.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_ParameterInfo_Attributes\" data-linktype=\"self-bookmark\">Attributes</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the attributes for this parameter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_ParameterInfo_CustomAttributes\" data-linktype=\"self-bookmark\">CustomAttributes</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a collection that contains this parameter&#39;s custom attributes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_ParameterInfo_DefaultValue\" data-linktype=\"self-bookmark\">DefaultValue</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating the default value if the parameter has a default value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_ParameterInfo_HasDefaultValue\" data-linktype=\"self-bookmark\">HasDefaultValue</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether this parameter has a default value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_ParameterInfo_IsIn\" data-linktype=\"self-bookmark\">IsIn</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether this is an input parameter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_ParameterInfo_IsLcid\" data-linktype=\"self-bookmark\">IsLcid</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether this parameter is a locale identifier (lcid).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_ParameterInfo_IsOptional\" data-linktype=\"self-bookmark\">IsOptional</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether this parameter is optional.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_ParameterInfo_IsOut\" data-linktype=\"self-bookmark\">IsOut</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether this is an output parameter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_ParameterInfo_IsRetval\" data-linktype=\"self-bookmark\">IsRetval</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether this is a <code>Retval</code> parameter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_ParameterInfo_Member\" data-linktype=\"self-bookmark\">Member</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating the member in which the parameter is implemented.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_ParameterInfo_MetadataToken\" data-linktype=\"self-bookmark\">MetadataToken</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that identifies this parameter in metadata.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_ParameterInfo_Name\" data-linktype=\"self-bookmark\">Name</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the name of the parameter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_ParameterInfo_ParameterType\" data-linktype=\"self-bookmark\">ParameterType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <code>Type</code> of this parameter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_ParameterInfo_Position\" data-linktype=\"self-bookmark\">Position</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the zero-based position of the parameter in the formal parameter list.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_ParameterInfo_RawDefaultValue\" data-linktype=\"self-bookmark\">RawDefaultValue</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating the default value if the parameter has a default value.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_ParameterInfo_GetCustomAttributes_System_Boolean_\" data-linktype=\"self-bookmark\">GetCustomAttributes(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets all the custom attributes defined on this parameter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_ParameterInfo_GetCustomAttributes_System_Type_System_Boolean_\" data-linktype=\"self-bookmark\">GetCustomAttributes(Type,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the custom attributes of the specified type or its derived types that are applied to this parameter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_ParameterInfo_GetCustomAttributesData\" data-linktype=\"self-bookmark\">GetCustomAttributesData()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a list of <a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a> objects for the current parameter, which can be used in the reflection-only context.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_ParameterInfo_GetOptionalCustomModifiers\" data-linktype=\"self-bookmark\">GetOptionalCustomModifiers()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the optional custom modifiers of the parameter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_ParameterInfo_GetRealObject_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"self-bookmark\">GetRealObject(StreamingContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the real object that should be deserialized instead of the object that the serialized stream specifies.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_ParameterInfo_GetRequiredCustomModifiers\" data-linktype=\"self-bookmark\">GetRequiredCustomModifiers()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the required custom modifiers of the parameter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_ParameterInfo_IsDefined_System_Type_System_Boolean_\" data-linktype=\"self-bookmark\">IsDefined(Type,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the custom attribute of the specified type or its derived types is applied to this parameter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_ParameterInfo_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the parameter type and name represented as a string.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_ParameterInfo_System_Runtime_InteropServices__ParameterInfo_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"self-bookmark\">_ParameterInfo.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Maps a set of names to a corresponding set of dispatch identifiers.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_ParameterInfo_System_Runtime_InteropServices__ParameterInfo_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"self-bookmark\">_ParameterInfo.GetTypeInfo(UInt32,UInt32,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the type information for an object, which can then be used to get the type information for an interface.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_ParameterInfo_System_Runtime_InteropServices__ParameterInfo_GetTypeInfoCount_System_UInt32__\" data-linktype=\"self-bookmark\">_ParameterInfo.GetTypeInfoCount(UInt32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_ParameterInfo_System_Runtime_InteropServices__ParameterInfo_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\" data-linktype=\"self-bookmark\">_ParameterInfo.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides access to properties and methods exposed by an object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_ParameterInfo__ctor\">\r\n    \r\n            <a id=\"System_Reflection_ParameterInfo__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ParameterInfo()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <code>ParameterInfo</code> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected ParameterInfo ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"fields\">\r\n        <h2>Fields\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_ParameterInfo_AttrsImpl\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AttrsImpl</div>        \r\n          </div>\r\n    \r\n            <p>The attributes of the parameter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected System.Reflection.ParameterAttributes AttrsImpl;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This field is intended only for users who are deriving classes from <code>ParameterInfo</code>.  </p>\n<p> Typical access to parameter attributes is through <a class=\"xref\" href=\"system.reflection.parameterinfo#System_Reflection_ParameterInfo_Attributes_\" data-linktype=\"relative-path\">Attributes</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_ParameterInfo_ClassImpl\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ClassImpl</div>        \r\n          </div>\r\n    \r\n            <p>The <code>Type</code> of the parameter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected Type ClassImpl;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This field is intended only for users who are deriving classes from <code>ParameterInfo</code>.  </p>\n<p> Typical access to parameter types is through <a class=\"xref\" href=\"system.reflection.parameterinfo#System_Reflection_ParameterInfo_ParameterType_\" data-linktype=\"relative-path\">ParameterType</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_ParameterInfo_DefaultValueImpl\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefaultValueImpl</div>        \r\n          </div>\r\n    \r\n            <p>The default value of the parameter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected object DefaultValueImpl;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This field is intended only for users who are deriving classes from <code>ParameterInfo</code>.  </p>\n<p> Typical access to the default value of the parameter is through <a class=\"xref\" href=\"system.reflection.parameterinfo#System_Reflection_ParameterInfo_DefaultValue_\" data-linktype=\"relative-path\">DefaultValue</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_ParameterInfo_MemberImpl\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MemberImpl</div>        \r\n          </div>\r\n    \r\n            <p>The member in which the field is implemented.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected System.Reflection.MemberInfo MemberImpl;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This field is intended only for users who are deriving classes from <code>ParameterInfo</code>.  </p>\n<p> Typical access to the parameter name is through the <a class=\"xref\" href=\"system.reflection.parameterinfo#System_Reflection_ParameterInfo_Member_\" data-linktype=\"relative-path\">Member</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_ParameterInfo_NameImpl\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NameImpl</div>        \r\n          </div>\r\n    \r\n            <p>The name of the parameter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected string NameImpl;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This field is intended only for users who are deriving classes from <code>ParameterInfo</code>.  </p>\n<p> Typical access to the parameter name is through the <a class=\"xref\" href=\"system.reflection.parameterinfo#System_Reflection_ParameterInfo_Name_\" data-linktype=\"relative-path\">Name</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_ParameterInfo_PositionImpl\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PositionImpl</div>        \r\n          </div>\r\n    \r\n            <p>The zero-based position of the parameter in the parameter list.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected int PositionImpl;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This field is intended only for users who are deriving classes from <code>ParameterInfo</code>.  </p>\n<p> Typical access to the name of the parameter is through <a class=\"xref\" href=\"system.reflection.parameterinfo#System_Reflection_ParameterInfo_Position_\" data-linktype=\"relative-path\">Position</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_ParameterInfo_Attributes\">\r\n    \r\n            <a id=\"System_Reflection_ParameterInfo_Attributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Attributes</div>        \r\n          </div>\r\n    \r\n            <p>Gets the attributes for this parameter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Reflection.ParameterAttributes Attributes { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.parameterattributes\" data-linktype=\"relative-path\">ParameterAttributes</a></div>\r\n                  </div>\r\n                  <p>A <code>ParameterAttributes</code> object representing the attributes for this parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method utilizes the <a class=\"xref\" href=\"system.reflection.parameterinfo#System_Reflection_ParameterInfo_AttrsImpl\" data-linktype=\"relative-path\">AttrsImpl</a> method.  </p>\n<p> To get the <a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a> array, first get the method or the constructor and then call <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_GetParameters_\" data-linktype=\"relative-path\">GetParameters</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a method with three parameters. It uses the Attributes property to get the attributes of the second parameter and display them at the console.  </p>\n<pre><code class=\"lang-cs\" name=\"ParameterInfo_Attributes1#1\">using System;\nusing System.Reflection;\npublic class MyClass1\n{\n   public int MyMethod( int i, out short j, ref long k)\n   {\n      j = 2;\n      return 0;\n   }  \n}\n\npublic class ParameterInfo_Attributes\n{   \n   public static void Main()\n   {\n      // Get the type. \n      Type myType = typeof(MyClass1);\n      // Get the method named &#39;MyMethod&#39; from the type.\n      MethodBase myMethodBase = myType.GetMethod(&quot;MyMethod&quot;);\n      // Get the parameters associated with the method.\n      ParameterInfo[] myParameters = myMethodBase.GetParameters();\n      Console.WriteLine(&quot;<br>The method {0} has the {1} parameters :&quot;, \n                          &quot;ParameterInfo_Example.MyMethod&quot;, myParameters.Length);\n      // Print the attributes associated with each of the parameters.\n      for(int i = 0; i &lt; myParameters.Length; i++)\n         Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;The {0} parameter has the attribute : {1}&quot;, \n                                             i + 1, myParameters[i].Attributes);\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"ParameterInfo_Attributes1#1\">Imports System\nImports System.Reflection\nImports Microsoft.VisualBasic\n\nPublic Class MyClass1\n   \n   Public Function MyMethod(i As Integer, ByRef j As Short, ByRef k As Long) As Integer\n      j = 2\n      Return 0\n   End Function &#39;MyMethod\nEnd Class &#39;MyClass1\n\nPublic Class ParameterInfo_Attributes\n   \n   Public Shared Sub Main()\n      &#39; Get the type. \n      Dim myType As Type = GetType(MyClass1)\n      &#39; Get the method named &#39;MyMethod&#39; from the type.\n      Dim myMethodBase As MethodBase = myType.GetMethod(&quot;MyMethod&quot;)\n      &#39; Get the parameters associated with the method.\n      Dim myParameters As ParameterInfo() = myMethodBase.GetParameters()\n      Console.WriteLine(ControlChars.Cr + &quot;The method {0} has the {1} parameters :&quot;, &quot;ParameterInfo_Example.MyMethod&quot;, myParameters.Length)\n      &#39; Print the attributes associated with each of the parameters.\n      Dim i As Integer\n      For i = 0 To myParameters.Length - 1\n         Console.WriteLine(ControlChars.Tab + &quot;The {0} parameter has the attribute : {1}&quot;, i + 1, myParameters(i).Attributes)\n      Next i\n   End Sub &#39;Main\nEnd Class &#39;ParameterInfo_Attributes\n</code></pre><pre><code class=\"lang-cpp\" name=\"ParameterInfo_Attributes1#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Runtime::InteropServices;\npublic ref class MyClass1\n{\npublic:\n   int MyMethod( int i, [Out]short * j, long * k )\n   {\n       *j = 2;\n      return 0;\n   }\n\n};\n\nvoid main()\n{\n   // Get the type. \n   Type^ myType = MyClass1::typeid;\n\n   // Get the method named &#39;MyMethod&#39; from the type.\n   MethodBase^ myMethodBase = myType-&gt;GetMethod( &quot;MyMethod&quot; );\n\n   // Get the parameters associated with the method.\n   array&lt;ParameterInfo^&gt;^myParameters = myMethodBase-&gt;GetParameters();\n   Console::WriteLine( &quot;<br>The method {0} has the {1} parameters :&quot;, &quot;ParameterInfo_Example::MyMethod&quot;, myParameters-&gt;Length );\n\n   // Print the attributes associated with each of the parameters.\n   for ( int i = 0; i &lt; myParameters-&gt;Length; i++ )\n      Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;The {0} parameter has the attribute : {1}&quot;, i + 1, myParameters[ i ]-&gt;Attributes );\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_ParameterInfo_CustomAttributes\">\r\n    \r\n            <a id=\"System_Reflection_ParameterInfo_CustomAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CustomAttributes</div>        \r\n          </div>\r\n    \r\n            <p>Gets a collection that contains this parameter&#39;s custom attributes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Collections.Generic.IEnumerable&lt;System.Reflection.CustomAttributeData&gt; CustomAttributes { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a>&gt;</div>\r\n                  </div>\r\n                  <p>A collection that contains this parameter&#39;s custom attributes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_ParameterInfo_DefaultValue\">\r\n    \r\n            <a id=\"System_Reflection_ParameterInfo_DefaultValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefaultValue</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating the default value if the parameter has a default value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual object DefaultValue { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The default value of the parameter, or <a class=\"xref\" href=\"system.dbnull#System_DBNull_Value\" data-linktype=\"relative-path\">Value</a> if the parameter has no default value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property is used only in the execution context. In the reflection-only context, use the <a class=\"xref\" href=\"system.reflection.parameterinfo#System_Reflection_ParameterInfo_RawDefaultValue_\" data-linktype=\"relative-path\">RawDefaultValue</a> property instead.  </p>\n<p> The default value is used when an actual value is not specified in the method call. A parameter can have a default value that is <code>null</code>. This is distinct from the case where a default value is not defined.  </p>\n<p> This method utilizes the <a class=\"xref\" href=\"system.reflection.parameterinfo#System_Reflection_ParameterInfo_DefaultValueImpl\" data-linktype=\"relative-path\">DefaultValueImpl</a> method.  </p>\n<p> To get the <a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a> array, first get the method or the constructor and then call <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_GetParameters_\" data-linktype=\"relative-path\">GetParameters</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_ParameterInfo_HasDefaultValue\">\r\n    \r\n            <a id=\"System_Reflection_ParameterInfo_HasDefaultValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HasDefaultValue</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether this parameter has a default value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool HasDefaultValue { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if this parameter has a default value; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_ParameterInfo_IsIn\">\r\n    \r\n            <a id=\"System_Reflection_ParameterInfo_IsIn_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsIn</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether this is an input parameter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsIn { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the parameter is an input parameter; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method depends on an optional metadata flag. This flag can be inserted by compilers, but the compilers are not obligated to do so.  </p>\n<p> This method utilizes the <code>In</code> flag of the <code>ParameterAttributes</code> enumerator.  </p>\n<p> To get the <a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a> array, first get the method or the constructor and then call <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_GetParameters_\" data-linktype=\"relative-path\">GetParameters</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to test method parameters for the <a class=\"xref\" href=\"system.reflection.parameterattributes\" data-linktype=\"relative-path\">System.Reflection.ParameterAttributes</a>, <a class=\"xref\" href=\"system.reflection.parameterattributes\" data-linktype=\"relative-path\">System.Reflection.ParameterAttributes</a>, and <a class=\"xref\" href=\"system.reflection.parameterattributes\" data-linktype=\"relative-path\">System.Reflection.ParameterAttributes</a> attributes.  </p>\n<p> The example contains a <code>DefineMethod</code> method that does the following:  </p>\n<ul>\n<li><p>Creates a dynamic assembly containing a <code>MyType</code> type.  </p>\n</li>\n<li><p>Adds a <code>MyMethod</code> method to <code>MyType</code>. <code>MyMethod</code> has three parameters. The first parameter is defined with <a class=\"xref\" href=\"system.reflection.parameterattributes\" data-linktype=\"relative-path\">System.Reflection.ParameterAttributes</a>, the second with <a class=\"xref\" href=\"system.reflection.parameterattributes\" data-linktype=\"relative-path\">System.Reflection.ParameterAttributes</a>, and the third with <a class=\"xref\" href=\"system.reflection.parameterattributes\" data-linktype=\"relative-path\">System.Reflection.ParameterAttributes</a>.  </p>\n</li>\n<li><p>Calls <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_CreateType_\" data-linktype=\"relative-path\">CreateType</a> to complete the type.  </p>\n<p>After executing <code>DefineMethod</code>, the example searches the assemblies that are currently loaded until it finds the dynamic assembly. It loads <code>MyType</code> from the assembly, gets a <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> object for the <code>MyMethod</code> method, and examines the parameters. The example uses the IsIn, <a class=\"xref\" href=\"system.reflection.parameterinfo#System_Reflection_ParameterInfo_IsOut_\" data-linktype=\"relative-path\">IsOut</a>, and <a class=\"xref\" href=\"system.reflection.parameterinfo#System_Reflection_ParameterInfo_IsOptional_\" data-linktype=\"relative-path\">IsOptional</a> properties to display information about the parameters.  </p>\n<pre><code class=\"lang-vb\" name=\"ParameterInfo_IsIn_IsOut_IsOptional#1\">Imports System\nImports System.Reflection\nImports System.Threading\nImports System.Reflection.Emit\nImports Microsoft.VisualBasic\n\n\n\nPublic Class ParameterInfo_IsIn_IsOut_IsOptional\n   \n   Public Shared Sub DefineMethod()\n      Dim myAssemblyName As New AssemblyName()\n      myAssemblyName.Name = &quot;MyAssembly&quot;\n      &#39; Get the assesmbly builder from the application domain associated with the current thread.\n      Dim myAssemblyBuilder As AssemblyBuilder = Thread.GetDomain().DefineDynamicAssembly(myAssemblyName, AssemblyBuilderAccess.RunAndSave)\n      &#39; Create a dynamic module in the assembly.\n      Dim myModuleBuilder As ModuleBuilder = myAssemblyBuilder.DefineDynamicModule(&quot;MyModule&quot;, &quot;MyAssembly.dll&quot;)\n      &#39; Create a type in the module.\n      Dim myTypeBuilder As TypeBuilder = myModuleBuilder.DefineType(&quot;MyType&quot;)\n      &#39; Create a method called MyMethod.\n      Dim myMethodBuilder As MethodBuilder = myTypeBuilder.DefineMethod(&quot;MyMethod&quot;, MethodAttributes.Public Or MethodAttributes.HideBySig Or MethodAttributes.Static, GetType(String), New Type() {GetType(Integer), GetType(Short), GetType(Long)})\n      &#39; Set the attributes for the parameters of the method.\n      &#39; Set the attribute for the first parameter to IN.\n      Dim myParameterBuilder As ParameterBuilder = myMethodBuilder.DefineParameter(1, ParameterAttributes.In, &quot;MyIntParameter&quot;)\n      &#39; Set the attribute for the second parameter to OUT.\n      myParameterBuilder = myMethodBuilder.DefineParameter(2, ParameterAttributes.Out, &quot;MyShortParameter&quot;)\n      &#39; Set the attribute for the third parameter to OPTIONAL.\n      myParameterBuilder = myMethodBuilder.DefineParameter(3, ParameterAttributes.Optional Or ParameterAttributes.HasDefault, &quot;MyLongParameter&quot;)\n      &#39; Get the Microsoft Intermediate Language generator for the method.\n      Dim myILGenerator As ILGenerator = myMethodBuilder.GetILGenerator()\n      &#39; Use the utility method to generate the MSIL instructions that print a string to the console.\n      myILGenerator.EmitWriteLine(&quot;Hello World!&quot;)\n      &#39; Generate the &quot;ret&quot; MSIL instruction.\n      myILGenerator.Emit(OpCodes.Ret)\n      &#39; End the creation of the type.\n      myTypeBuilder.CreateType()\n   End Sub &#39;DefineMethod\n   \n   \n   Public Shared Sub Main()\n      &#39; Create a dynamic assembly with a type named &#39;MyType&#39;.\n      DefineMethod()\n      \n      &#39; Get the assemblies currently loaded in the application domain.\n      Dim myAssemblies As [Assembly]() = Thread.GetDomain().GetAssemblies()\n      Dim myAssembly As [Assembly] = Nothing\n      &#39; Get the assembly named MyAssembly.\n      Dim i As Integer\n      For i = 0 To myAssemblies.Length - 1\n         If [String].Compare(myAssemblies(i).GetName(False).Name, &quot;MyAssembly&quot;) = 0 Then\n            myAssembly = myAssemblies(i)\n         End If \n      Next i\n      If Not (myAssembly Is Nothing) Then\n         &#39; Get a type named MyType.\n         Dim myType As Type = myAssembly.GetType(&quot;MyType&quot;)\n         &#39; Get a method named MyMethod from the type.\n         Dim myMethodBase As MethodBase = myType.GetMethod(&quot;MyMethod&quot;)\n         &#39; Get the parameters associated with the method.\n         Dim myParameters As ParameterInfo() = myMethodBase.GetParameters()\n         Console.WriteLine(ControlChars.Cr + &quot;The method {0} has the {1} parameters :&quot;, myMethodBase, myParameters.Length)\n         &#39; Print the IN, OUT and OPTIONAL attributes associated with each of the parameters.\n         For i = 0 To myParameters.Length - 1\n            If myParameters(i).IsIn Then\n               Console.WriteLine(ControlChars.Tab + &quot;The {0} parameter has the In attribute&quot;, i + 1)\n            End If\n            If myParameters(i).IsOptional Then\n               Console.WriteLine(ControlChars.Tab + &quot;The {0} parameter has the Optional attribute&quot;, i + 1)\n            End If\n            If myParameters(i).IsOut Then\n               Console.WriteLine(ControlChars.Tab + &quot;The {0} parameter has the Out attribute&quot;, i + 1)\n            End If\n         Next i\n      Else\n         Console.WriteLine(&quot;Could not find a assembly named &#39;MyAssembly&#39; for the current application domain&quot;)\n      End If\n   End Sub &#39;Main\nEnd Class &#39;ParameterInfo_IsIn_IsOut_IsOptional \n</code></pre><pre><code class=\"lang-cs\" name=\"ParameterInfo_IsIn_IsOut_IsOptional#1\">\nusing System;\nusing System.Reflection;\nusing System.Threading;\nusing System.Reflection.Emit;\n\npublic class ParameterInfo_IsIn_IsOut_IsOptional\n{\n   public static void DefineMethod()\n   {\n      AssemblyName myAssemblyName = new AssemblyName();\n      myAssemblyName.Name = &quot;MyAssembly&quot;;\n      // Get the assembly builder from the application domain associated with the current thread.\n      AssemblyBuilder myAssemblyBuilder = Thread.GetDomain().DefineDynamicAssembly(myAssemblyName, AssemblyBuilderAccess.RunAndSave);\n      // Create a dynamic module in the assembly.\n      ModuleBuilder myModuleBuilder = myAssemblyBuilder.DefineDynamicModule(&quot;MyModule&quot;, &quot;MyAssembly.dll&quot;);\n      // Create a type in the module.\n      TypeBuilder myTypeBuilder = myModuleBuilder.DefineType(&quot;MyType&quot;);\n      // Create a method called MyMethod.\n      MethodBuilder myMethodBuilder = myTypeBuilder.DefineMethod(&quot;MyMethod&quot;,MethodAttributes.Public | MethodAttributes.HideBySig |\n                                                                           MethodAttributes.Static, typeof(string), new Type[] {typeof(int), typeof(short), typeof(long)});\n      // Set the attributes for the parameters of the method.\n      // Set the attribute for the first parameter to IN.\n      ParameterBuilder myParameterBuilder = myMethodBuilder.DefineParameter(1, ParameterAttributes.In, &quot;MyIntParameter&quot;);\n      // Set the attribute for the second parameter to OUT.\n      myParameterBuilder = myMethodBuilder.DefineParameter(2, ParameterAttributes.Out, &quot;MyShortParameter&quot;);\n      // Set the attribute for the third parameter to OPTIONAL.\n      myParameterBuilder = myMethodBuilder.DefineParameter(3, ParameterAttributes.Optional | ParameterAttributes.HasDefault, &quot;MyLongParameter&quot;);\n      // Get the Microsoft Intermediate Language generator for the method.\n      ILGenerator myILGenerator = myMethodBuilder.GetILGenerator();\n      // Use the utility method to generate the MSIL instructions that print a string to the console.\n      myILGenerator.EmitWriteLine(&quot;Hello World!&quot;);\n      // Generate the &quot;ret&quot; MSIL instruction.\n      myILGenerator.Emit(OpCodes.Ret);\n      // End the creation of the type.\n      myTypeBuilder.CreateType();\n   }\n\n   public static void Main()\n   {\n      // Create a dynamic assembly with a type named MyType.\n      DefineMethod();\n\n      // Get the assemblies currently loaded in the application domain.\n      Assembly[] myAssemblies = Thread.GetDomain().GetAssemblies();\n      Assembly myAssembly = null;\n      // Get the assembly named MyAssembly.\n      for(int i = 0; i &lt; myAssemblies.Length; i++)\n         if(String.Compare(myAssemblies[i].GetName(false).Name, &quot;MyAssembly&quot;) == 0)\n            myAssembly = myAssemblies[i];\n\n      if(myAssembly != null)\n      {\n         // Get a type named MyType.\n         Type myType = myAssembly.GetType(&quot;MyType&quot;);\n         // Get a method named MyMethod from the type.\n         MethodBase myMethodBase = myType.GetMethod(&quot;MyMethod&quot;);\n         // Get the parameters associated with the method.\n         ParameterInfo[] myParameters = myMethodBase.GetParameters();\n         Console.WriteLine(&quot;<br>The method {0} has the {1} parameters :&quot;, \n            myMethodBase, myParameters.Length);\n         // Print the IN, OUT and OPTIONAL attributes associated with each of the parameters.\n         for(int i = 0; i &lt; myParameters.Length; i++)\n         {\n            if(myParameters[i].IsIn)\n               Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;The {0} parameter has the In attribute&quot;, \n                                       i + 1);\n            if(myParameters[i].IsOptional)\n               Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;The {0} parameter has the Optional attribute&quot;,\n                                       i + 1);\n            if(myParameters[i].IsOut)\n               Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;The {0} parameter has the Out attribute&quot;,\n                                       i + 1);\n         }\n      }\n      else\n         Console.WriteLine(&quot;Could not find a assembly named &#39;MyAssembly&#39; for the current application domain&quot;);\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"ParameterInfo_IsIn_IsOut_IsOptional#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Threading;\nusing namespace System::Reflection::Emit;\nvoid DefineMethod()\n{\n   AssemblyName^ myAssemblyName = gcnew AssemblyName;\n   myAssemblyName-&gt;Name = &quot;MyAssembly&quot;;\n\n   // Get the assembly builder from the application domain associated with the current thread.\n   AssemblyBuilder^ myAssemblyBuilder = Thread::GetDomain()-&gt;DefineDynamicAssembly( myAssemblyName, AssemblyBuilderAccess::RunAndSave );\n\n   // Create a dynamic module in the assembly.\n   ModuleBuilder^ myModuleBuilder = myAssemblyBuilder-&gt;DefineDynamicModule( &quot;MyModule&quot;, &quot;MyAssembly.dll&quot; );\n\n   // Create a type in the module.\n   TypeBuilder^ myTypeBuilder = myModuleBuilder-&gt;DefineType( &quot;MyType&quot; );\n\n   // Create a method called MyMethod.\n   array&lt;Type^&gt;^type1 = {int::typeid,short::typeid,long::typeid};\n   MethodBuilder^ myMethodBuilder = myTypeBuilder-&gt;DefineMethod( &quot;MyMethod&quot;, static_cast&lt;MethodAttributes&gt;(MethodAttributes::Public | MethodAttributes::HideBySig | MethodAttributes::Static), String::typeid, type1 );\n\n   // Set the attributes for the parameters of the method.\n   // Set the attribute for the first parameter to IN.\n   ParameterBuilder^ myParameterBuilder = myMethodBuilder-&gt;DefineParameter( 1, ParameterAttributes::In, &quot;MyIntParameter&quot; );\n\n   // Set the attribute for the second parameter to OUT.\n   myParameterBuilder = myMethodBuilder-&gt;DefineParameter( 2, ParameterAttributes::Out, &quot;MyShortParameter&quot; );\n\n   // Set the attribute for the third parameter to OPTIONAL.\n   myParameterBuilder = myMethodBuilder-&gt;DefineParameter( 3, static_cast&lt;ParameterAttributes&gt;(ParameterAttributes::Optional | ParameterAttributes::HasDefault), &quot;MyLongParameter&quot; );\n\n   // Get the Microsoft Intermediate Language generator for the method.\n   ILGenerator^ myILGenerator = myMethodBuilder-&gt;GetILGenerator();\n\n   // Use the utility method to generate the MSIL instructions that print a String* to the console.\n   myILGenerator-&gt;EmitWriteLine( &quot;Hello World!&quot; );\n\n   // Generate the S&quot;ret&quot; MSIL instruction.\n   myILGenerator-&gt;Emit( OpCodes::Ret );\n\n   // End the creation of the type.\n   myTypeBuilder-&gt;CreateType();\n}\n\nint main()\n{\n   // Create a dynamic assembly with a type named MyType.\n   DefineMethod();\n\n   // Get the assemblies currently loaded in the application domain.\n   array&lt;Assembly^&gt;^myAssemblies = Thread::GetDomain()-&gt;GetAssemblies();\n   Assembly^ myAssembly = nullptr;\n\n   // Get the assembly named MyAssembly.\n   for ( int i = 0; i &lt; myAssemblies-&gt;Length; i++ )\n      if ( String::Compare( myAssemblies[ i ]-&gt;GetName( false )-&gt;Name, &quot;MyAssembly&quot; ) == 0 )\n            myAssembly = myAssemblies[ i ];\n\n   if ( myAssembly != nullptr )\n   {\n      // Get a type named MyType.\n      Type^ myType = myAssembly-&gt;GetType( &quot;MyType&quot; );\n\n      // Get a method named MyMethod from the type.\n      MethodBase^ myMethodBase = myType-&gt;GetMethod( &quot;MyMethod&quot; );\n\n      // Get the parameters associated with the method.\n      array&lt;ParameterInfo^&gt;^myParameters = myMethodBase-&gt;GetParameters();\n      Console::WriteLine( &quot;<br>The method {0} has the {1} parameters :&quot;, myMethodBase, myParameters-&gt;Length );\n\n      // Print the IN, OUT and OPTIONAL attributes associated with each of the parameters.\n      for ( int i = 0; i &lt; myParameters-&gt;Length; i++ )\n      {\n         if ( myParameters[ i ]-&gt;IsIn )\n                  Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;The {0} parameter has the In attribute&quot;, i + 1 );\n         if ( myParameters[ i ]-&gt;IsOptional )\n                  Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;The {0} parameter has the Optional attribute&quot;, i + 1 );\n         if ( myParameters[ i ]-&gt;IsOut )\n                  Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;The {0} parameter has the Out attribute&quot;, i + 1 );\n      }\n   }\n   else\n      Console::WriteLine( &quot;Could not find a assembly named &#39;MyAssembly&#39; for the current application domain&quot; );\n}\n</code></pre></li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_ParameterInfo_IsLcid\">\r\n    \r\n            <a id=\"System_Reflection_ParameterInfo_IsLcid_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsLcid</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether this parameter is a locale identifier (lcid).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsLcid { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the parameter is a locale identifier; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method depends on an optional metadata flag. This flag can be inserted by compilers, but the compilers are not obligated to do so.  </p>\n<p> This method utilizes the <code>Lcid</code> flag of the <code>ParameterAttributes</code> enumerator.  </p>\n<p> To get the <a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a> array, first get the method or the constructor and then call <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_GetParameters_\" data-linktype=\"relative-path\">GetParameters</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_ParameterInfo_IsOptional\">\r\n    \r\n            <a id=\"System_Reflection_ParameterInfo_IsOptional_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsOptional</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether this parameter is optional.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsOptional { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the parameter is optional; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method depends on an optional metadata flag. This flag can be inserted by compilers, but the compilers are not obligated to do so.  </p>\n<p> This method utilizes the <code>Optional</code> flag of the <code>ParameterAttributes</code> enumerator.  </p>\n<p> To get the <a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a> array, first get the method and then call <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_GetParameters_\" data-linktype=\"relative-path\">GetParameters</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to test method parameters for the <a class=\"xref\" href=\"system.reflection.parameterattributes\" data-linktype=\"relative-path\">System.Reflection.ParameterAttributes</a>, <a class=\"xref\" href=\"system.reflection.parameterattributes\" data-linktype=\"relative-path\">System.Reflection.ParameterAttributes</a>, and <a class=\"xref\" href=\"system.reflection.parameterattributes\" data-linktype=\"relative-path\">System.Reflection.ParameterAttributes</a> attributes.  </p>\n<p> The example contains a <code>DefineMethod</code> method that does the following:  </p>\n<ul>\n<li><p>Creates a dynamic assembly containing a <code>MyType</code> type.  </p>\n</li>\n<li><p>Adds a <code>MyMethod</code> method to <code>MyType</code>. <code>MyMethod</code> has three parameters. The first parameter is defined with <a class=\"xref\" href=\"system.reflection.parameterattributes\" data-linktype=\"relative-path\">System.Reflection.ParameterAttributes</a>, the second with <a class=\"xref\" href=\"system.reflection.parameterattributes\" data-linktype=\"relative-path\">System.Reflection.ParameterAttributes</a>, and the third with <a class=\"xref\" href=\"system.reflection.parameterattributes\" data-linktype=\"relative-path\">System.Reflection.ParameterAttributes</a>.  </p>\n</li>\n<li><p>Calls <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_CreateType_\" data-linktype=\"relative-path\">CreateType</a> to complete the type.  </p>\n<p>After executing <code>DefineMethod</code>, the example searches the assemblies that are currently loaded until it finds the dynamic assembly. It loads <code>MyType</code> from the assembly, gets a <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> object for the <code>MyMethod</code> method, and examines the parameters. The example uses the <a class=\"xref\" href=\"system.reflection.parameterinfo#System_Reflection_ParameterInfo_IsIn_\" data-linktype=\"relative-path\">IsIn</a>, <a class=\"xref\" href=\"system.reflection.parameterinfo#System_Reflection_ParameterInfo_IsOut_\" data-linktype=\"relative-path\">IsOut</a>, and IsOptional properties to display information about the parameters.  </p>\n<pre><code class=\"lang-vb\" name=\"ParameterInfo_IsIn_IsOut_IsOptional#1\">Imports System\nImports System.Reflection\nImports System.Threading\nImports System.Reflection.Emit\nImports Microsoft.VisualBasic\n\n\n\nPublic Class ParameterInfo_IsIn_IsOut_IsOptional\n   \n   Public Shared Sub DefineMethod()\n      Dim myAssemblyName As New AssemblyName()\n      myAssemblyName.Name = &quot;MyAssembly&quot;\n      &#39; Get the assesmbly builder from the application domain associated with the current thread.\n      Dim myAssemblyBuilder As AssemblyBuilder = Thread.GetDomain().DefineDynamicAssembly(myAssemblyName, AssemblyBuilderAccess.RunAndSave)\n      &#39; Create a dynamic module in the assembly.\n      Dim myModuleBuilder As ModuleBuilder = myAssemblyBuilder.DefineDynamicModule(&quot;MyModule&quot;, &quot;MyAssembly.dll&quot;)\n      &#39; Create a type in the module.\n      Dim myTypeBuilder As TypeBuilder = myModuleBuilder.DefineType(&quot;MyType&quot;)\n      &#39; Create a method called MyMethod.\n      Dim myMethodBuilder As MethodBuilder = myTypeBuilder.DefineMethod(&quot;MyMethod&quot;, MethodAttributes.Public Or MethodAttributes.HideBySig Or MethodAttributes.Static, GetType(String), New Type() {GetType(Integer), GetType(Short), GetType(Long)})\n      &#39; Set the attributes for the parameters of the method.\n      &#39; Set the attribute for the first parameter to IN.\n      Dim myParameterBuilder As ParameterBuilder = myMethodBuilder.DefineParameter(1, ParameterAttributes.In, &quot;MyIntParameter&quot;)\n      &#39; Set the attribute for the second parameter to OUT.\n      myParameterBuilder = myMethodBuilder.DefineParameter(2, ParameterAttributes.Out, &quot;MyShortParameter&quot;)\n      &#39; Set the attribute for the third parameter to OPTIONAL.\n      myParameterBuilder = myMethodBuilder.DefineParameter(3, ParameterAttributes.Optional Or ParameterAttributes.HasDefault, &quot;MyLongParameter&quot;)\n      &#39; Get the Microsoft Intermediate Language generator for the method.\n      Dim myILGenerator As ILGenerator = myMethodBuilder.GetILGenerator()\n      &#39; Use the utility method to generate the MSIL instructions that print a string to the console.\n      myILGenerator.EmitWriteLine(&quot;Hello World!&quot;)\n      &#39; Generate the &quot;ret&quot; MSIL instruction.\n      myILGenerator.Emit(OpCodes.Ret)\n      &#39; End the creation of the type.\n      myTypeBuilder.CreateType()\n   End Sub &#39;DefineMethod\n   \n   \n   Public Shared Sub Main()\n      &#39; Create a dynamic assembly with a type named &#39;MyType&#39;.\n      DefineMethod()\n      \n      &#39; Get the assemblies currently loaded in the application domain.\n      Dim myAssemblies As [Assembly]() = Thread.GetDomain().GetAssemblies()\n      Dim myAssembly As [Assembly] = Nothing\n      &#39; Get the assembly named MyAssembly.\n      Dim i As Integer\n      For i = 0 To myAssemblies.Length - 1\n         If [String].Compare(myAssemblies(i).GetName(False).Name, &quot;MyAssembly&quot;) = 0 Then\n            myAssembly = myAssemblies(i)\n         End If \n      Next i\n      If Not (myAssembly Is Nothing) Then\n         &#39; Get a type named MyType.\n         Dim myType As Type = myAssembly.GetType(&quot;MyType&quot;)\n         &#39; Get a method named MyMethod from the type.\n         Dim myMethodBase As MethodBase = myType.GetMethod(&quot;MyMethod&quot;)\n         &#39; Get the parameters associated with the method.\n         Dim myParameters As ParameterInfo() = myMethodBase.GetParameters()\n         Console.WriteLine(ControlChars.Cr + &quot;The method {0} has the {1} parameters :&quot;, myMethodBase, myParameters.Length)\n         &#39; Print the IN, OUT and OPTIONAL attributes associated with each of the parameters.\n         For i = 0 To myParameters.Length - 1\n            If myParameters(i).IsIn Then\n               Console.WriteLine(ControlChars.Tab + &quot;The {0} parameter has the In attribute&quot;, i + 1)\n            End If\n            If myParameters(i).IsOptional Then\n               Console.WriteLine(ControlChars.Tab + &quot;The {0} parameter has the Optional attribute&quot;, i + 1)\n            End If\n            If myParameters(i).IsOut Then\n               Console.WriteLine(ControlChars.Tab + &quot;The {0} parameter has the Out attribute&quot;, i + 1)\n            End If\n         Next i\n      Else\n         Console.WriteLine(&quot;Could not find a assembly named &#39;MyAssembly&#39; for the current application domain&quot;)\n      End If\n   End Sub &#39;Main\nEnd Class &#39;ParameterInfo_IsIn_IsOut_IsOptional \n</code></pre><pre><code class=\"lang-cs\" name=\"ParameterInfo_IsIn_IsOut_IsOptional#1\">\nusing System;\nusing System.Reflection;\nusing System.Threading;\nusing System.Reflection.Emit;\n\npublic class ParameterInfo_IsIn_IsOut_IsOptional\n{\n   public static void DefineMethod()\n   {\n      AssemblyName myAssemblyName = new AssemblyName();\n      myAssemblyName.Name = &quot;MyAssembly&quot;;\n      // Get the assembly builder from the application domain associated with the current thread.\n      AssemblyBuilder myAssemblyBuilder = Thread.GetDomain().DefineDynamicAssembly(myAssemblyName, AssemblyBuilderAccess.RunAndSave);\n      // Create a dynamic module in the assembly.\n      ModuleBuilder myModuleBuilder = myAssemblyBuilder.DefineDynamicModule(&quot;MyModule&quot;, &quot;MyAssembly.dll&quot;);\n      // Create a type in the module.\n      TypeBuilder myTypeBuilder = myModuleBuilder.DefineType(&quot;MyType&quot;);\n      // Create a method called MyMethod.\n      MethodBuilder myMethodBuilder = myTypeBuilder.DefineMethod(&quot;MyMethod&quot;,MethodAttributes.Public | MethodAttributes.HideBySig |\n                                                                           MethodAttributes.Static, typeof(string), new Type[] {typeof(int), typeof(short), typeof(long)});\n      // Set the attributes for the parameters of the method.\n      // Set the attribute for the first parameter to IN.\n      ParameterBuilder myParameterBuilder = myMethodBuilder.DefineParameter(1, ParameterAttributes.In, &quot;MyIntParameter&quot;);\n      // Set the attribute for the second parameter to OUT.\n      myParameterBuilder = myMethodBuilder.DefineParameter(2, ParameterAttributes.Out, &quot;MyShortParameter&quot;);\n      // Set the attribute for the third parameter to OPTIONAL.\n      myParameterBuilder = myMethodBuilder.DefineParameter(3, ParameterAttributes.Optional | ParameterAttributes.HasDefault, &quot;MyLongParameter&quot;);\n      // Get the Microsoft Intermediate Language generator for the method.\n      ILGenerator myILGenerator = myMethodBuilder.GetILGenerator();\n      // Use the utility method to generate the MSIL instructions that print a string to the console.\n      myILGenerator.EmitWriteLine(&quot;Hello World!&quot;);\n      // Generate the &quot;ret&quot; MSIL instruction.\n      myILGenerator.Emit(OpCodes.Ret);\n      // End the creation of the type.\n      myTypeBuilder.CreateType();\n   }\n\n   public static void Main()\n   {\n      // Create a dynamic assembly with a type named MyType.\n      DefineMethod();\n\n      // Get the assemblies currently loaded in the application domain.\n      Assembly[] myAssemblies = Thread.GetDomain().GetAssemblies();\n      Assembly myAssembly = null;\n      // Get the assembly named MyAssembly.\n      for(int i = 0; i &lt; myAssemblies.Length; i++)\n         if(String.Compare(myAssemblies[i].GetName(false).Name, &quot;MyAssembly&quot;) == 0)\n            myAssembly = myAssemblies[i];\n\n      if(myAssembly != null)\n      {\n         // Get a type named MyType.\n         Type myType = myAssembly.GetType(&quot;MyType&quot;);\n         // Get a method named MyMethod from the type.\n         MethodBase myMethodBase = myType.GetMethod(&quot;MyMethod&quot;);\n         // Get the parameters associated with the method.\n         ParameterInfo[] myParameters = myMethodBase.GetParameters();\n         Console.WriteLine(&quot;<br>The method {0} has the {1} parameters :&quot;, \n            myMethodBase, myParameters.Length);\n         // Print the IN, OUT and OPTIONAL attributes associated with each of the parameters.\n         for(int i = 0; i &lt; myParameters.Length; i++)\n         {\n            if(myParameters[i].IsIn)\n               Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;The {0} parameter has the In attribute&quot;, \n                                       i + 1);\n            if(myParameters[i].IsOptional)\n               Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;The {0} parameter has the Optional attribute&quot;,\n                                       i + 1);\n            if(myParameters[i].IsOut)\n               Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;The {0} parameter has the Out attribute&quot;,\n                                       i + 1);\n         }\n      }\n      else\n         Console.WriteLine(&quot;Could not find a assembly named &#39;MyAssembly&#39; for the current application domain&quot;);\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"ParameterInfo_IsIn_IsOut_IsOptional#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Threading;\nusing namespace System::Reflection::Emit;\nvoid DefineMethod()\n{\n   AssemblyName^ myAssemblyName = gcnew AssemblyName;\n   myAssemblyName-&gt;Name = &quot;MyAssembly&quot;;\n\n   // Get the assembly builder from the application domain associated with the current thread.\n   AssemblyBuilder^ myAssemblyBuilder = Thread::GetDomain()-&gt;DefineDynamicAssembly( myAssemblyName, AssemblyBuilderAccess::RunAndSave );\n\n   // Create a dynamic module in the assembly.\n   ModuleBuilder^ myModuleBuilder = myAssemblyBuilder-&gt;DefineDynamicModule( &quot;MyModule&quot;, &quot;MyAssembly.dll&quot; );\n\n   // Create a type in the module.\n   TypeBuilder^ myTypeBuilder = myModuleBuilder-&gt;DefineType( &quot;MyType&quot; );\n\n   // Create a method called MyMethod.\n   array&lt;Type^&gt;^type1 = {int::typeid,short::typeid,long::typeid};\n   MethodBuilder^ myMethodBuilder = myTypeBuilder-&gt;DefineMethod( &quot;MyMethod&quot;, static_cast&lt;MethodAttributes&gt;(MethodAttributes::Public | MethodAttributes::HideBySig | MethodAttributes::Static), String::typeid, type1 );\n\n   // Set the attributes for the parameters of the method.\n   // Set the attribute for the first parameter to IN.\n   ParameterBuilder^ myParameterBuilder = myMethodBuilder-&gt;DefineParameter( 1, ParameterAttributes::In, &quot;MyIntParameter&quot; );\n\n   // Set the attribute for the second parameter to OUT.\n   myParameterBuilder = myMethodBuilder-&gt;DefineParameter( 2, ParameterAttributes::Out, &quot;MyShortParameter&quot; );\n\n   // Set the attribute for the third parameter to OPTIONAL.\n   myParameterBuilder = myMethodBuilder-&gt;DefineParameter( 3, static_cast&lt;ParameterAttributes&gt;(ParameterAttributes::Optional | ParameterAttributes::HasDefault), &quot;MyLongParameter&quot; );\n\n   // Get the Microsoft Intermediate Language generator for the method.\n   ILGenerator^ myILGenerator = myMethodBuilder-&gt;GetILGenerator();\n\n   // Use the utility method to generate the MSIL instructions that print a String* to the console.\n   myILGenerator-&gt;EmitWriteLine( &quot;Hello World!&quot; );\n\n   // Generate the S&quot;ret&quot; MSIL instruction.\n   myILGenerator-&gt;Emit( OpCodes::Ret );\n\n   // End the creation of the type.\n   myTypeBuilder-&gt;CreateType();\n}\n\nint main()\n{\n   // Create a dynamic assembly with a type named MyType.\n   DefineMethod();\n\n   // Get the assemblies currently loaded in the application domain.\n   array&lt;Assembly^&gt;^myAssemblies = Thread::GetDomain()-&gt;GetAssemblies();\n   Assembly^ myAssembly = nullptr;\n\n   // Get the assembly named MyAssembly.\n   for ( int i = 0; i &lt; myAssemblies-&gt;Length; i++ )\n      if ( String::Compare( myAssemblies[ i ]-&gt;GetName( false )-&gt;Name, &quot;MyAssembly&quot; ) == 0 )\n            myAssembly = myAssemblies[ i ];\n\n   if ( myAssembly != nullptr )\n   {\n      // Get a type named MyType.\n      Type^ myType = myAssembly-&gt;GetType( &quot;MyType&quot; );\n\n      // Get a method named MyMethod from the type.\n      MethodBase^ myMethodBase = myType-&gt;GetMethod( &quot;MyMethod&quot; );\n\n      // Get the parameters associated with the method.\n      array&lt;ParameterInfo^&gt;^myParameters = myMethodBase-&gt;GetParameters();\n      Console::WriteLine( &quot;<br>The method {0} has the {1} parameters :&quot;, myMethodBase, myParameters-&gt;Length );\n\n      // Print the IN, OUT and OPTIONAL attributes associated with each of the parameters.\n      for ( int i = 0; i &lt; myParameters-&gt;Length; i++ )\n      {\n         if ( myParameters[ i ]-&gt;IsIn )\n                  Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;The {0} parameter has the In attribute&quot;, i + 1 );\n         if ( myParameters[ i ]-&gt;IsOptional )\n                  Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;The {0} parameter has the Optional attribute&quot;, i + 1 );\n         if ( myParameters[ i ]-&gt;IsOut )\n                  Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;The {0} parameter has the Out attribute&quot;, i + 1 );\n      }\n   }\n   else\n      Console::WriteLine( &quot;Could not find a assembly named &#39;MyAssembly&#39; for the current application domain&quot; );\n}\n</code></pre></li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_ParameterInfo_IsOut\">\r\n    \r\n            <a id=\"System_Reflection_ParameterInfo_IsOut_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsOut</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether this is an output parameter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsOut { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the parameter is an output parameter; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method depends on an optional metadata flag. This flag can be inserted by compilers, but the compilers are not obligated to do so.  </p>\n<p> This method utilizes the <code>Out</code> flag of the <code>ParameterAttributes</code> enumerator.  </p>\n<p> To get the <a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a> array, first get the method or the constructor and then call <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_GetParameters_\" data-linktype=\"relative-path\">GetParameters</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to test method parameters for the <a class=\"xref\" href=\"system.reflection.parameterattributes\" data-linktype=\"relative-path\">System.Reflection.ParameterAttributes</a>, <a class=\"xref\" href=\"system.reflection.parameterattributes\" data-linktype=\"relative-path\">System.Reflection.ParameterAttributes</a>, and <a class=\"xref\" href=\"system.reflection.parameterattributes\" data-linktype=\"relative-path\">System.Reflection.ParameterAttributes</a> attributes.  </p>\n<p> The example contains a <code>DefineMethod</code> method that does the following:  </p>\n<ul>\n<li><p>Creates a dynamic assembly containing a <code>MyType</code> type.  </p>\n</li>\n<li><p>Adds a <code>MyMethod</code> method to <code>MyType</code>. <code>MyMethod</code> has three parameters. The first parameter is defined with <a class=\"xref\" href=\"system.reflection.parameterattributes\" data-linktype=\"relative-path\">System.Reflection.ParameterAttributes</a>, the second with <a class=\"xref\" href=\"system.reflection.parameterattributes\" data-linktype=\"relative-path\">System.Reflection.ParameterAttributes</a>, and the third with <a class=\"xref\" href=\"system.reflection.parameterattributes\" data-linktype=\"relative-path\">System.Reflection.ParameterAttributes</a>.  </p>\n</li>\n<li><p>Calls <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_CreateType_\" data-linktype=\"relative-path\">CreateType</a> to complete the type.  </p>\n<p>After executing <code>DefineMethod</code>, the example searches the assemblies that are currently loaded until it finds the dynamic assembly. It loads <code>MyType</code> from the assembly, gets a <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> object for the <code>MyMethod</code> method, and examines the parameters. The example uses the <a class=\"xref\" href=\"system.reflection.parameterinfo#System_Reflection_ParameterInfo_IsIn_\" data-linktype=\"relative-path\">IsIn</a>, IsOut, and <a class=\"xref\" href=\"system.reflection.parameterinfo#System_Reflection_ParameterInfo_IsOptional_\" data-linktype=\"relative-path\">IsOptional</a> properties to display information about the parameters.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic ParameterInfo.IsOut Example#1\">Imports System\nImports System.Reflection\nImports Microsoft.VisualBasic\n\nClass parminfo\n    \n    Public Shared Sub mymethod(int1m As Integer, ByRef str2m As String, _\n    ByRef str3m As String)    \n        str2m = &quot;in mymethod&quot;\n    End Sub\n    \n    Public Shared Function Main() As Integer\n        Console.WriteLine(ControlChars.CrLf + &quot;Reflection.Parameterinfo&quot;)\n        \n        &#39;Get the ParameterInfo parameter of a function.\n        &#39;Get the type.\n        Dim Mytype As Type = Type.GetType(&quot;parminfo&quot;)\n        \n        &#39;Get and display the method.\n        Dim Mymethodbase As MethodBase = Mytype.GetMethod(&quot;mymethod&quot;)\n        Console.Write(ControlChars.CrLf + &quot;Mymethodbase = &quot; _\n           + Mymethodbase.ToString())\n        \n        &#39;Get the ParameterInfo array.\n        Dim Myarray As ParameterInfo() = Mymethodbase.GetParameters()\n        \n        &#39;Get and display the IsOut of each parameter.\n        Dim Myparam As ParameterInfo\n        For Each Myparam In  Myarray\n            Console.Write(ControlChars.CrLf _\n               + &quot;For parameter # &quot; + Myparam.Position.ToString() _\n               + &quot;, the IsOut is - &quot; + Myparam.IsOut.ToString())\n        Next Myparam\n        Return 0\n    End Function\nEnd Class\n\n&#39; This code produces the following output:\n&#39;\n&#39; Reflection.ParameterInfo\n&#39;  \n&#39; Mymethodbase = Void mymethod (Int32, System.String ByRef, System.String ByRef)\n&#39; For parameter # 0, the IsOut is - False\n&#39; For parameter # 1, the IsOut is - True\n&#39; For parameter # 2, the IsOut is - False \n</code></pre><pre><code class=\"lang-cs\" name=\"Classic ParameterInfo.IsOut Example#1\">using System;\nusing System.Reflection;\n \n class parminfo\n {\n    public static void mymethod (\n       int int1m, out string str2m, ref string str3m)\n    {\n       str2m = &quot;in mymethod&quot;;\n    }\n  \n    public static int Main(string[] args)\n    {\n       Console.WriteLine(&quot;<br>Reflection.Parameterinfo&quot;);\n       \n       //Get the ParameterInfo parameter of a function.\n  \n       //Get the type.\n       Type Mytype = Type.GetType(&quot;parminfo&quot;);\n  \n       //Get and display the method.\n       MethodBase Mymethodbase = Mytype.GetMethod(&quot;mymethod&quot;);\n       Console.Write(&quot;<br>Mymethodbase = &quot; + Mymethodbase);\n  \n       //Get the ParameterInfo array.\n       ParameterInfo[] Myarray = Mymethodbase.GetParameters();\n       \n       //Get and display the IsOut of each parameter.\n       foreach (ParameterInfo Myparam in Myarray)\n       {\n          Console.Write (&quot;<br>For parameter # &quot;   + Myparam.Position \n             + &quot;, the IsOut is - &quot; +  Myparam.IsOut );\n       }\n       return 0;\n    }\n }\n /*\n This code produces the following output:\n\n Reflection.ParameterInfo\n  \n Mymethodbase = Void mymethod (Int32, System.String ByRef, System.String ByRef)\n For parameter # 0, the IsOut is - False\n For parameter # 1, the IsOut is - True\n For parameter # 2, the IsOut is - False\n */\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic ParameterInfo.IsOut Example#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Runtime::InteropServices;\npublic ref class parminfo\n{\npublic:\n   static void mymethod( int int1m, [Out]interior_ptr&lt;String^&gt; str2m, interior_ptr&lt;String^&gt; str3m )\n   {\n       *str2m = &quot;in mymethod&quot;;\n   }\n\n};\n\nint main()\n{\n   Console::WriteLine( &quot;<br>Reflection.Parameterinfo&quot; );\n   \n   //Get the ParameterInfo parameter of a function.\n   //Get the type.\n   Type^ Mytype = Type::GetType( &quot;parminfo&quot; );\n   \n   //Get and display the method.\n   MethodBase^ Mymethodbase = Mytype-&gt;GetMethod( &quot;mymethod&quot; );\n   Console::Write( &quot;<br>Mymethodbase = {0}&quot;, Mymethodbase );\n   \n   //Get the ParameterInfo array.\n   array&lt;ParameterInfo^&gt;^Myarray = Mymethodbase-&gt;GetParameters();\n   \n   //Get and display the IsOut of each parameter.\n   System::Collections::IEnumerator^ enum0 = Myarray-&gt;GetEnumerator();\n   while ( enum0-&gt;MoveNext() )\n   {\n      ParameterInfo^ Myparam = safe_cast&lt;ParameterInfo^&gt;(enum0-&gt;Current);\n      Console::Write( &quot;<br>For parameter # {0}, the IsOut is - {1}&quot;, Myparam-&gt;Position, Myparam-&gt;IsOut );\n   }\n\n   return 0;\n}\n\n/*\nThis code produces the following output:\n\nReflection.ParameterInfo\n\nMymethodbase = Void mymethod (Int32, System.String ByRef, System.String ByRef)\nFor parameter # 0, the IsOut is - False\nFor parameter # 1, the IsOut is - True\nFor parameter # 2, the IsOut is - False\n*/\n</code></pre></li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_ParameterInfo_IsRetval\">\r\n    \r\n            <a id=\"System_Reflection_ParameterInfo_IsRetval_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsRetval</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether this is a <code>Retval</code> parameter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsRetval { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the parameter is a <code>Retval</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method depends on an optional metadata flag. This flag can be inserted by compilers, but the compilers are not obligated to do so.  </p>\n<p> This method utilizes the <code>Retval</code> flag of the <code>ParameterAttributes</code> enumerator.  </p>\n<p> To get the <a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a> array, first get the method or the constructor and then call <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_GetParameters_\" data-linktype=\"relative-path\">GetParameters</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_ParameterInfo_Member\">\r\n    \r\n            <a id=\"System_Reflection_ParameterInfo_Member_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Member</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating the member in which the parameter is implemented.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Reflection.MemberInfo Member { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a></div>\r\n                  </div>\r\n                  <p>The member which implanted the parameter represented by this <a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_ParameterInfo_MetadataToken\">\r\n    \r\n            <a id=\"System_Reflection_ParameterInfo_MetadataToken_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MetadataToken</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that identifies this parameter in metadata.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int MetadataToken { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A value which, in combination with the module, uniquely identifies this parameter in metadata.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To get the module, use the <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_Module_\" data-linktype=\"relative-path\">Module</a> property of the member that defines this parameter.  </p>\n<p> The tokens obtained using this property can be passed to the unmanaged Reflection API. For more information, please see <a href=\"http://msdn.microsoft.com/en-us/0c5bb9de-0cf6-438d-ba47-134e6c775fb8\" data-linktype=\"external\">Unmanaged Reflection API</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_ParameterInfo_Name\">\r\n    \r\n            <a id=\"System_Reflection_ParameterInfo_Name_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Name</div>        \r\n          </div>\r\n    \r\n            <p>Gets the name of the parameter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string Name { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The simple name of this parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property utilizes the protected <a class=\"xref\" href=\"system.reflection.parameterinfo#System_Reflection_ParameterInfo_NameImpl\" data-linktype=\"relative-path\">NameImpl</a> field, and depends on an optional metadata flag that might not be available in all compilers.  </p>\n<p> To get the <a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a> array, first get the method or the constructor and then call the <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_GetParameters_\" data-linktype=\"relative-path\">GetParameters</a> method.  </p>\n<div class=\"WARNING\"><h5>Warning</h5><p> If this <a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a> represents a return value (that is, if it was obtained by using the <a class=\"xref\" href=\"system.reflection.methodinfo#System_Reflection_MethodInfo_ReturnParameter_\" data-linktype=\"relative-path\">ReturnParameter</a> property), this property will be <code>null</code>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to get <a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a> objects for the parameters of a method, and then use the Name property to obtain the parameter names.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic ParameterInfo.Name Example#1\">using System;\nusing System.Reflection;\n \nclass parminfo\n{\n    public static void mymethod (\n       int int1m, out string str2m, ref string str3m)\n    {\n       str2m = &quot;in mymethod&quot;;\n    }\n  \n    public static int Main(string[] args)\n    {   \n       Console.WriteLine(&quot;<br>Reflection.Parameterinfo&quot;);\n       \n       //Get the ParameterInfo parameter of a function.\n  \n       //Get the type.\n       Type Mytype = Type.GetType(&quot;parminfo&quot;);\n  \n       //Get and display the method.\n       MethodBase Mymethodbase = Mytype.GetMethod(&quot;mymethod&quot;);\n       Console.Write(&quot;<br>Mymethodbase = &quot; + Mymethodbase);\n  \n       //Get the ParameterInfo array.\n       ParameterInfo[] Myarray = Mymethodbase.GetParameters();\n       \n       //Get and display the name of each parameter.\n       foreach (ParameterInfo Myparam in Myarray)\n       {\n          Console.Write (&quot;<br>For parameter # &quot;   + Myparam.Position \n             + &quot;, the Name is - &quot; +  Myparam.Name);\n       }\n       return 0;\n    }\n }\n /*\n This code produces the following output:\n\n Reflection.ParameterInfo\n  \n Mymethodbase\n = Void mymethod (Int32, System.String ByRef, System.String ByRef)\n For parameter # 0, the Name is - int1m\n For parameter # 1, the Name is - str2m\n For parameter # 2, the Name is - str3m\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic ParameterInfo.Name Example#1\">Imports System\nImports System.Reflection\nImports Microsoft.VisualBasic\n\nClass parminfo\n    \n    Public Shared Sub mymethod(int1m As Integer, ByRef str2m As String, _\n    ByRef str3m As String)\n        str2m = &quot;in mymethod&quot;\n    End Sub\n       \n    Public Shared Function Main() As Integer\n        Console.WriteLine(ControlChars.CrLf + &quot;Reflection.Parameterinfo&quot;)\n        \n        &#39;Get the ParameterInfo parameter of a function.\n        &#39;Get the type.\n        Dim Mytype As Type = Type.GetType(&quot;parminfo&quot;)\n        \n        &#39;Get and display the method.\n        Dim Mymethodbase As MethodBase = Mytype.GetMethod(&quot;mymethod&quot;)\n        Console.Write(ControlChars.CrLf _\n           + &quot;Mymethodbase = &quot; + Mymethodbase.ToString())\n        \n        &#39;Get the ParameterInfo array.\n        Dim Myarray As ParameterInfo() = Mymethodbase.GetParameters()\n        \n        &#39;Get and display the name of each parameter.\n        Dim Myparam As ParameterInfo\n        For Each Myparam In  Myarray\n            Console.Write(ControlChars.CrLf _\n               + &quot;For parameter # &quot; + Myparam.Position.ToString() _\n               + &quot;, the Name is - &quot; + Myparam.Name)\n        Next Myparam\n        Return 0\n    End Function\nEnd Class\n\n&#39; This code produces the following output:\n&#39;\n&#39; Reflection.ParameterInfo\n&#39;  \n&#39; Mymethodbase\n&#39; = Void mymethod (Int32, System.String ByRef, System.String ByRef)\n&#39; For parameter # 0, the Name is - int1m\n&#39; For parameter # 1, the Name is - str2m\n&#39; For parameter # 2, the Name is - str3m\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic ParameterInfo.Name Example#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Runtime::InteropServices;\npublic ref class parminfo\n{\npublic:\n   static void mymethod( int int1m, [Out]interior_ptr&lt;String^&gt; str2m, interior_ptr&lt;String^&gt; str3m )\n   {\n       *str2m = &quot;in mymethod&quot;;\n   }\n\n};\n\nint main()\n{\n   Console::WriteLine( &quot;<br>Reflection.Parameterinfo&quot; );\n   \n   //Get the ParameterInfo parameter of a function.\n   //Get the type.\n   Type^ Mytype = Type::GetType( &quot;parminfo&quot; );\n   \n   //Get and display the method.\n   MethodBase^ Mymethodbase = Mytype-&gt;GetMethod( &quot;mymethod&quot; );\n   Console::Write( &quot;<br>Mymethodbase = {0}&quot;, Mymethodbase );\n   \n   //Get the ParameterInfo array.\n   array&lt;ParameterInfo^&gt;^Myarray = Mymethodbase-&gt;GetParameters();\n   \n   //Get and display the name of each parameter.\n   System::Collections::IEnumerator^ enum0 = Myarray-&gt;GetEnumerator();\n   while ( enum0-&gt;MoveNext() )\n   {\n      ParameterInfo^ Myparam = safe_cast&lt;ParameterInfo^&gt;(enum0-&gt;Current);\n      Console::Write( &quot;<br>For parameter # {0}, the Name is - {1}&quot;, Myparam-&gt;Position, Myparam-&gt;Name );\n   }\n\n   return 0;\n}\n\n/*\nThis code produces the following output:\n\nReflection.ParameterInfo\n\nMymethodbase\n= Void mymethod (Int32, System.String ByRef, System.String ByRef)\nFor parameter # 0, the Name is - int1m\nFor parameter # 1, the Name is - str2m\nFor parameter # 2, the Name is - str3m\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_ParameterInfo_ParameterType\">\r\n    \r\n            <a id=\"System_Reflection_ParameterInfo_ParameterType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ParameterType</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <code>Type</code> of this parameter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual Type ParameterType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>The <code>Type</code> object that represents the <code>Type</code> of this parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method depends on an optional metadata and might not be available in all compilers.  </p>\n<p> To get the <a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a> array, first get the method or the constructor and then call <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_GetParameters_\" data-linktype=\"relative-path\">GetParameters</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to get <a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a> objects for the parameters of a method, and then use the ParameterType property to display the type of each parameter.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic ParameterInfo.ParameterType Example#1\"> using System;\n using System.Reflection;\n\n class parminfo\n {\n    public static void mymethod (\n       int int1m, out string str2m, ref string str3m)\n    {\n       str2m = &quot;in mymethod&quot;;\n    }\n  \n    public static int Main(string[] args)\n    {\n       Console.WriteLine(&quot;<br>Reflection.Parameterinfo&quot;);\n       \n       //Get the ParameterInfo parameter of a function.\n  \n       //Get the type.\n       Type Mytype = Type.GetType(&quot;parminfo&quot;);\n  \n       //Get and display the method.\n       MethodBase Mymethodbase = Mytype.GetMethod(&quot;mymethod&quot;);\n       Console.Write(&quot;<br>Mymethodbase = &quot; + Mymethodbase);\n  \n       //Get the ParameterInfo array.\n       ParameterInfo[]Myarray = Mymethodbase.GetParameters();\n       \n       //Get and display the ParameterInfo of each parameter.\n       foreach (ParameterInfo Myparam in Myarray)\n       {\n          Console.Write (&quot;<br>For parameter # &quot; + Myparam.Position \n             + &quot;, the ParameterType is - &quot; + Myparam.ParameterType);\n       }\n       return 0;\n    }\n }\n\n /*\n This code produces the following output:\n \nReflection.Parameterinfo\n\nMymethodbase = Void mymethod(Int32, System.String ByRef, System.String ByRef)\nFor parameter # 0, the ParameterType is - System.Int32\nFor parameter # 1, the ParameterType is - System.String&amp;\nFor parameter # 2, the ParameterType is - System.String&amp;\n */\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic ParameterInfo.ParameterType Example#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Runtime::InteropServices;\npublic ref class parminfo\n{\npublic:\n   static void mymethod( int int1m, [Out]interior_ptr&lt;String^&gt; str2m, interior_ptr&lt;String^&gt; str3m )\n   {\n       *str2m = &quot;in mymethod&quot;;\n   }\n\n};\n\nint main()\n{\n   Console::WriteLine( &quot;<br>Reflection.Parameterinfo&quot; );\n   \n   //Get the ParameterInfo parameter of a function.\n   //Get the type.\n   Type^ Mytype = Type::GetType( &quot;parminfo&quot; );\n   \n   //Get and display the method.\n   MethodBase^ Mymethodbase = Mytype-&gt;GetMethod( &quot;mymethod&quot; );\n   Console::Write( &quot;<br>Mymethodbase = {0}&quot;, Mymethodbase );\n   \n   //Get the ParameterInfo array.\n   array&lt;ParameterInfo^&gt;^Myarray = Mymethodbase-&gt;GetParameters();\n   \n   //Get and display the ParameterInfo of each parameter.\n   System::Collections::IEnumerator^ enum0 = Myarray-&gt;GetEnumerator();\n   while ( enum0-&gt;MoveNext() )\n   {\n      ParameterInfo^ Myparam = safe_cast&lt;ParameterInfo^&gt;(enum0-&gt;Current);\n      Console::Write( &quot;<br>For parameter # {0}, the ParameterType is - {1}&quot;, Myparam-&gt;Position, Myparam-&gt;ParameterType );\n   }\n\n   return 0;\n}\n\n/*\nThis code produces the following output:\n\nReflection.Parameterinfo\n\nMymethodbase = Void mymethod(Int32, System.String ByRef, System.String ByRef)\nFor parameter # 0, the ParameterType is - System.Int32\nFor parameter # 1, the ParameterType is - System.String&amp;\nFor parameter # 2, the ParameterType is - System.String&amp;\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic ParameterInfo.ParameterType Example#1\">Imports System\nImports System.Reflection\nImports Microsoft.VisualBasic\n\nClass parminfo\n    \n    Public Shared Sub mymethod(int1m As Integer, ByRef str2m As String, _\n    ByRef str3m As String)\n        str2m = &quot;in mymethod&quot;\n    End Sub\n       \n    Public Shared Function Main() As Integer\n        Console.WriteLine(ControlChars.CrLf + &quot;Reflection.Parameterinfo&quot;)\n        \n        &#39;Get the ParameterInfo parameter of a function.\n        &#39;Get the type.\n        Dim Mytype As Type = GetType(parminfo)\n        \n        &#39;Get and display the method.\n        Dim Mymethodbase As MethodBase = Mytype.GetMethod(&quot;mymethod&quot;)\n        Console.Write(ControlChars.CrLf _\n           + &quot;Mymethodbase = &quot; + Mymethodbase.ToString())\n        \n        &#39;Get the ParameterInfo array.\n        Dim Myarray As ParameterInfo() = Mymethodbase.GetParameters()\n        \n        &#39;Get and display the ParameterInfo of each parameter.\n        Dim Myparam As ParameterInfo\n        For Each Myparam In  Myarray\n            Console.Write(ControlChars.CrLf _\n               + &quot;For parameter # &quot; + Myparam.Position.ToString() _\n               + &quot;, the ParameterType is - &quot; + Myparam.ParameterType.ToString())\n        Next Myparam\n        Return 0\n    End Function\nEnd Class\n\n&#39; This code produces the following output:\n&#39; \n&#39; Reflection.Parameterinfo\n\n&#39; Mymethodbase = Void mymethod(Int32, System.String ByRef, System.String ByRef)\n&#39; For parameter # 0, the ParameterType is - System.Int32\n&#39; For parameter # 1, the ParameterType is - System.String&amp;\n&#39; For parameter # 2, the ParameterType is - System.String&amp; \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_ParameterInfo_Position\">\r\n    \r\n            <a id=\"System_Reflection_ParameterInfo_Position_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Position</div>        \r\n          </div>\r\n    \r\n            <p>Gets the zero-based position of the parameter in the formal parameter list.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int Position { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An integer representing the position this parameter occupies in the parameter list.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Only parameters in the method signature (that is, in the formal parameter list) are considered when calculating the position. For instance methods, the hidden parameter that represents <code>this</code> (<code>Me</code> in Visual Basic) is not counted.  </p>\n<p> This method utilizes the <a class=\"xref\" href=\"system.reflection.parameterinfo#System_Reflection_ParameterInfo_PositionImpl\" data-linktype=\"relative-path\">PositionImpl</a> method.  </p>\n<p> To get the <a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a> array, first get the method or the constructor and then call <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_GetParameters_\" data-linktype=\"relative-path\">GetParameters</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_ParameterInfo_RawDefaultValue\">\r\n    \r\n            <a id=\"System_Reflection_ParameterInfo_RawDefaultValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RawDefaultValue</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating the default value if the parameter has a default value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual object RawDefaultValue { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The default value of the parameter, or <a class=\"xref\" href=\"system.dbnull#System_DBNull_Value\" data-linktype=\"relative-path\">Value</a> if the parameter has no default value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property can be used in both the execution context and the reflection-only context.  </p>\n<p> The default value is used when an actual value is not specified in the method call. A parameter can have a default value that is <code>null</code>. This is distinct from the case where a default value is not defined.  </p>\n<p> To get the <a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a> array, first get the method or the constructor and then call the <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_GetParameters_\" data-linktype=\"relative-path\">GetParameters</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_ParameterInfo_GetCustomAttributes_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_ParameterInfo_GetCustomAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttributes(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Gets all the custom attributes defined on this parameter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual object[] GetCustomAttributes (bool inherit);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>inherit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This argument is ignored for objects of this type. See Remarks.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </div>\r\n                  <p>An array that contains all the custom attributes applied to this parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a></div>\r\n                  </div>\r\n                  <p>A custom attribute type could not be loaded.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method ignores the <code>inherit</code> parameter. To search the inheritance chain for attributes on parameters, use the appropriate overloads of the <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how custom attributes that have been applied to the parameters of methods can be retrieved at run time. The example defines a custom attribute named <code>MyAttribute</code> that can be applied to parameters. The example then defines a class named <code>MyClass</code> with a method named <code>MyMethod</code>, and applies <code>MyAttribute</code> to a parameter of the method.  </p>\n<p> When the example is run, it uses the GetCustomAttributes method to retrieve the custom attributes that have been applied to all parameters of all methods in <code>MyClass</code>, and displays them at the console.  </p>\n<pre><code class=\"lang-cpp\" name=\"ParameterInfo_GetCustomAttributes#1\">using namespace System;\nusing namespace System::Reflection;\n\n// Define a custom attribute with one named parameter.\n[AttributeUsage(AttributeTargets::Parameter)]\npublic ref class MyAttribute: public Attribute\n{\nprivate:\n   String^ myName;\n\npublic:\n   MyAttribute( String^ name )\n   {\n      myName = name;\n   }\n\n   property String^ Name \n   {\n      String^ get()\n      {\n         return myName;\n      }\n   }\n};\n\n// Define a class which has a custom attribute associated with one of the \n// parameters of a method. \npublic ref class MyClass1\n{\npublic:\n   void MyMethod( \n      [MyAttribute(&quot;This is an example parameter attribute&quot;)]\n      int i ) {}\n};\n\nvoid main()\n{\n   // Get the type of the class &#39;MyClass1&#39;.\n   Type^ myType = MyClass1::typeid;\n\n   // Get the members associated with the class &#39;MyClass1&#39;.\n   array&lt;MethodInfo^&gt;^myMethods = myType-&gt;GetMethods();\n\n   // Display the attributes for each of the parameters of each method of the class &#39;MyClass1&#39;.\n   for ( int i = 0; i &lt; myMethods-&gt;Length; i++ )\n   {\n      // Get the parameters for the method.\n      array&lt;ParameterInfo^&gt;^myParameters = myMethods[ i ]-&gt;GetParameters();\n\n      if ( myParameters-&gt;Length &gt; 0 )\n      {\n         Console::WriteLine( &quot;<br>The parameters for the method \\&quot;{0}\\&quot; that have custom attributes are:&quot;, myMethods[ i ] );\n         for ( int j = 0; j &lt; myParameters-&gt;Length; j++ )\n         {\n            // Get the attributes of type &#39;MyAttribute&#39; for each parameter.\n            array&lt;Object^&gt;^myAttributes = myParameters[ j ]-&gt;GetCustomAttributes( MyAttribute::typeid, false );\n\n            if ( myAttributes-&gt;Length &gt; 0 )\n            {\n               Console::WriteLine( &quot;Parameter {0}, name = {1}, type = {2} has attributes:&quot;,\n                  myParameters[ j ]-&gt;Position, \n                  myParameters[ j ]-&gt;Name, \n                  myParameters[ j ]-&gt;ParameterType );\n               for ( int k = 0; k &lt; myAttributes-&gt;Length; k++ )\n               {\n                  Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myAttributes[ k ] );\n               }\n            }\n         }\n      }\n   }\n}\n/* This code example produces the following output:\n\nThe parameters for the method Void MyMethod(Int32) that have custom attributes are :\nParameter 0, name = i, type = System.Int32 has attributes:\n        MyAttribute\n\nThe parameters for the method Boolean Equals(System.Object) that have custom attributes are :\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"ParameterInfo_GetCustomAttributes#1\">using System;\nusing System.Reflection;\n\n// Define a custom attribute with one named parameter.\n[AttributeUsage(AttributeTargets.Parameter)]\npublic class MyAttribute : Attribute\n{\n    private string myName;\n    public MyAttribute(string name)\n    {\n        myName = name;\n    }\n    public string Name \n    {\n        get \n        {\n            return myName;\n        }\n    }\n}\n\n// Define a class which has a custom attribute associated with one of the \n// parameters of a method. \npublic class MyClass1\n{\n    public void MyMethod(\n        [MyAttribute(&quot;This is an example parameter attribute&quot;)]\n        int i)\n    {\n        return;\n    }\n}\n\npublic class MemberInfo_GetCustomAttributes \n{\n    public static void Main()\n    {\n        // Get the type of the class &#39;MyClass1&#39;.\n        Type myType = typeof(MyClass1);\n        // Get the members associated with the class &#39;MyClass1&#39;.\n        MethodInfo[] myMethods = myType.GetMethods();\n\n        // Display the attributes for each of the parameters of each method of the class &#39;MyClass1&#39;.\n        for(int i = 0; i &lt; myMethods.Length; i++)\n        {\n            // Get the parameters for the method.\n            ParameterInfo[] myParameters = myMethods[i].GetParameters();\n\n            if (myParameters.Length &gt; 0)\n            {\n                Console.WriteLine(&quot;<br>The parameters for the method {0} that have custom attributes are :&quot;, myMethods[i]);\n                for(int j = 0; j &lt; myParameters.Length; j++)\n                {\n                    // Get the attributes of type &#39;MyAttribute&#39; for each parameter.\n                    Object[] myAttributes = myParameters[j].GetCustomAttributes(typeof(MyAttribute), false);\n \n                    if (myAttributes.Length &gt; 0)\n                    {\n                        Console.WriteLine(&quot;Parameter {0}, name = {1}, type = {2} has attributes: &quot;, \n                            myParameters[j].Position, myParameters[j].Name, myParameters[j].ParameterType);\n                        for(int k = 0; k &lt; myAttributes.Length; k++)\n                        {\n                            Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myAttributes[k]);\n                        }\n                    }\n                }\n            }\n        }  \n    }\n}\n/* This code example produces the following output:\n\nThe parameters for the method Void MyMethod(Int32) that have custom attributes are :\nParameter 0, name = i, type = System.Int32 has attributes:\n        MyAttribute\n\nThe parameters for the method Boolean Equals(System.Object) that have custom attributes are :\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"ParameterInfo_GetCustomAttributes#1\">Imports System\nImports System.Reflection\nImports Microsoft.VisualBasic\n\n&#39; Define a custom attribute with one named parameter.\n&lt;AttributeUsage(AttributeTargets.Parameter)&gt; Public Class MyAttribute\n    Inherits Attribute\n    Private myName As String\n\n    Public Sub New(ByVal name As String)\n        myName = name\n    End Sub \n\n    Public ReadOnly Property Name() As String\n        Get\n            Return myName\n        End Get\n    End Property\nEnd Class \n\n&#39; Define a class which has a custom attribute associated with one of \n&#39; the parameters of a method. \nPublic Class MyClass1\n\n    Public Sub MyMethod( _\n            &lt;MyAttribute(&quot;This is an example parameter attribute&quot;)&gt; _\n            ByVal i As Integer _\n        )\n        Return\n    End Sub \nEnd Class \n\n\nPublic Class MemberInfo_GetCustomAttributes\n\n    Public Shared Sub Main()\n        &#39; Get the type of the class &#39;MyClass1&#39;.\n        Dim myType As Type = GetType(MyClass1)\n        &#39; Get the members associated with the class &#39;MyClass1&#39;.\n        Dim myMethods As MethodInfo() = myType.GetMethods()\n\n        &#39; Display the attributes for each of the parameters of each method of the class &#39;MyClass1&#39;.\n        For i As Integer = 0 To myMethods.Length - 1\n            &#39; Get the parameters for the method.\n            Dim myParameters As ParameterInfo() = myMethods(i).GetParameters()\n\n            If myParameters.Length &gt; 0 Then\n                Console.WriteLine(vbCrLf &amp; &quot;The parameters for the method {0} that have custom attributes are : &quot;, myMethods(i))\n                For j As Integer = 0 To myParameters.Length - 1\n                    &#39; Get the attributes of type &#39;MyAttribute&#39; for each parameter.\n                    Dim myAttributes As Object() = myParameters(j).GetCustomAttributes(GetType(MyAttribute), False)\n\n                    If myAttributes.Length &gt; 0 Then\n                        Console.WriteLine(&quot;Parameter {0}, name = {1}, type = {2} has attributes: &quot;, _\n                            myParameters(j).Position, myParameters(j).Name, myParameters(j).ParameterType)\n                        For k As Integer = 0 To myAttributes.Length - 1\n                            Console.WriteLine(vbTab &amp; &quot;{0}&quot;, myAttributes(k))\n                        Next k\n                    End If\n                Next j\n            End If\n        Next i\n    End Sub \nEnd Class \n\n&#39; This code example produces the following output:\n&#39;\n&#39;The parameters for the method Void MyMethod(Int32) that have custom attributes are :\n&#39;Parameter 0, name = i, type = System.Int32 has attributes:\n&#39;        MyAttribute\n&#39;\n&#39;The parameters for the method Boolean Equals(System.Object) that have custom attributes are :\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_ParameterInfo_GetCustomAttributes_System_Type_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_ParameterInfo_GetCustomAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttributes(Type,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the custom attributes of the specified type or its derived types that are applied to this parameter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual object[] GetCustomAttributes (Type attributeType, bool inherit);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The custom attributes identified by type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inherit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This argument is ignored for objects of this type. See Remarks.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </div>\r\n                  <p>An array that contains the custom attributes of the specified type or its derived types.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The type must be a type provided by the underlying runtime system.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>attributeType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a></div>\r\n                  </div>\r\n                  <p>A custom attribute type could not be loaded.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method ignores the <code>inherit</code> parameter. To search the inheritance chain for attributes on parameters, use the appropriate overloads of the <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_ParameterInfo_GetCustomAttributesData\">\r\n    \r\n            <a id=\"System_Reflection_ParameterInfo_GetCustomAttributesData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttributesData()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a list of <a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a> objects for the current parameter, which can be used in the reflection-only context.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt; GetCustomAttributesData ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList</a>&lt;<a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a>&gt;</div>\r\n                  </div>\r\n                  <p>A generic list of <a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a> objects representing data about the attributes that have been applied to the current parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to examine the custom attributes of code in the reflection-only context, in cases where the custom attributes themselves are defined in code that is loaded into the reflection-only context. Methods such as <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a> and <a class=\"xref\" href=\"system.reflection.parameterinfo#System_Reflection_ParameterInfo_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a> cannot be used in such cases, because they create instances of the attributes. Code in the reflection-only context cannot be executed. For more information and example code, see the <a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a> class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_ParameterInfo_GetOptionalCustomModifiers\">\r\n    \r\n            <a id=\"System_Reflection_ParameterInfo_GetOptionalCustomModifiers_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetOptionalCustomModifiers()</div>        \r\n          </div>\r\n    \r\n            <p>Gets the optional custom modifiers of the parameter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual Type[] GetOptionalCustomModifiers ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </div>\r\n                  <p>An array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects that identify the optional custom modifiers of the current parameter, such as <a class=\"xref\" href=\"system.runtime.compilerservices.isconst\" data-linktype=\"relative-path\">IsConst</a> or <a class=\"xref\" href=\"system.runtime.compilerservices.isimplicitlydereferenced\" data-linktype=\"relative-path\">IsImplicitlyDereferenced</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The GetOptionalCustomModifiers and <a class=\"xref\" href=\"system.reflection.parameterinfo#System_Reflection_ParameterInfo_GetRequiredCustomModifiers_\" data-linktype=\"relative-path\">GetRequiredCustomModifiers</a> methods are provided for designers of managed compilers. For more information on custom modifiers, see <a class=\"xref\" href=\"system.runtime.compilerservices.isboxed\" data-linktype=\"relative-path\">IsBoxed</a> and related classes in the <a class=\"xref\" href=\"system.runtime.compilerservices\" data-linktype=\"relative-path\">System.Runtime.CompilerServices</a> namespace, and the metadata specification in the ECMA Partition II documentation. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the Ecma International Web site.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_ParameterInfo_GetRealObject_System_Runtime_Serialization_StreamingContext_\">\r\n    \r\n            <a id=\"System_Reflection_ParameterInfo_GetRealObject_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetRealObject(StreamingContext)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the real object that should be deserialized instead of the object that the serialized stream specifies.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object GetRealObject (System.Runtime.Serialization.StreamingContext context);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>context</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The serialized stream from which the current object is deserialized.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The actual object that is put into the graph.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationexception\" data-linktype=\"relative-path\">SerializationException</a></div>\r\n                  </div>\r\n                  <p>The parameter&#39;s position in the parameter list of its associated member is not valid for that member&#39;s type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method implements the <a class=\"xref\" href=\"system.runtime.serialization.iobjectreference#System_Runtime_Serialization_IObjectReference_GetRealObject_\" data-linktype=\"relative-path\">GetRealObject</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_ParameterInfo_GetRequiredCustomModifiers\">\r\n    \r\n            <a id=\"System_Reflection_ParameterInfo_GetRequiredCustomModifiers_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetRequiredCustomModifiers()</div>        \r\n          </div>\r\n    \r\n            <p>Gets the required custom modifiers of the parameter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual Type[] GetRequiredCustomModifiers ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </div>\r\n                  <p>An array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects that identify the required custom modifiers of the current parameter, such as <a class=\"xref\" href=\"system.runtime.compilerservices.isconst\" data-linktype=\"relative-path\">IsConst</a> or <a class=\"xref\" href=\"system.runtime.compilerservices.isimplicitlydereferenced\" data-linktype=\"relative-path\">IsImplicitlyDereferenced</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.reflection.parameterinfo#System_Reflection_ParameterInfo_GetOptionalCustomModifiers_\" data-linktype=\"relative-path\">GetOptionalCustomModifiers</a> and GetRequiredCustomModifiers methods are provided for designers of managed compilers. For more information on custom modifiers, see <a class=\"xref\" href=\"system.runtime.compilerservices.isboxed\" data-linktype=\"relative-path\">IsBoxed</a> and related classes in the <a class=\"xref\" href=\"system.runtime.compilerservices\" data-linktype=\"relative-path\">System.Runtime.CompilerServices</a> namespace, and the metadata specification in the ECMA Partition II documentation. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the Ecma International Web site.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_ParameterInfo_IsDefined_System_Type_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_ParameterInfo_IsDefined_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsDefined(Type,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the custom attribute of the specified type or its derived types is applied to this parameter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool IsDefined (Type attributeType, bool inherit);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <code>Type</code> object to search for.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inherit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This argument is ignored for objects of this type. See Remarks.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if one or more instances of <code>attributeType</code> or its derived types are applied to this parameter; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>attributeType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>attributeType</code> is not a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object supplied by the common language runtime.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method ignores the <code>inherit</code> parameter. To search the inheritance chain for attributes on parameters, use the appropriate overloads of the <a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_\" data-linktype=\"relative-path\">IsDefined</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines two custom attributes, <code>MyAttribute</code> and <code>MyDerivedAttribute</code>. <code>MyDerivedAttribute</code> is derived from <code>MyAttribute</code>. The example then applies these attributes to the parameters of a method of an example class.  </p>\n<p> When the example is run, it uses the IsDefined method to test all parameters of all methods in the example class. It then displays the parameters that have <code>MyAttribute</code> or <code>MyDerivedAttribute</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"ParameterInfo_GetCustomAttribute_IsDefined#1\">using System;\nusing System.Reflection;\n\n// Define a custom attribute with one named parameter.\n[AttributeUsage(AttributeTargets.Parameter)]\npublic class MyAttribute : Attribute\n{\n    private string myName;\n    public MyAttribute(string name)\n    {\n        myName = name;\n    }\n    public string Name \n    {\n        get \n        {\n            return myName;\n        }\n    }\n}\n\n// Derive another custom attribute from MyAttribute\n[AttributeUsage(AttributeTargets.Parameter)]\npublic class MyDerivedAttribute : MyAttribute\n{\n    public MyDerivedAttribute(string name) : base(name) {}\n}\n\n// Define a class with a method that has three parameters. Apply\n// MyAttribute to one parameter, MyDerivedAttribute to another, and\n// no attributes to the third. \npublic class MyClass1\n{\n    public void MyMethod(\n        [MyAttribute(&quot;This is an example parameter attribute&quot;)]\n        int i,\n        [MyDerivedAttribute(&quot;This is another parameter attribute&quot;)]\n        int j,\n        int k )\n    {\n        return;\n    }\n}\n\npublic class MemberInfo_GetCustomAttributes \n{\n    public static void Main()\n    {\n        // Get the type of the class &#39;MyClass1&#39;.\n        Type myType = typeof(MyClass1);\n        // Get the members associated with the class &#39;MyClass1&#39;.\n        MethodInfo[] myMethods = myType.GetMethods();\n\n        // For each method of the class &#39;MyClass1&#39;, display all the parameters\n        // to which MyAttribute or its derived types have been applied.\n        foreach (MethodInfo mi in myMethods)\n        {\n            // Get the parameters for the method.\n            ParameterInfo[] myParameters = mi.GetParameters();\n            if (myParameters.Length &gt; 0)\n            {\n                Console.WriteLine(&quot;<br>The following parameters of {0} have MyAttribute or a derived type: &quot;, mi);\n                foreach (ParameterInfo pi in myParameters)\n                {\n                    if (pi.IsDefined(typeof(MyAttribute), false))\n                    {\n                        Console.WriteLine(&quot;Parameter {0}, name = {1}, type = {2}&quot;, \n                            pi.Position, pi.Name, pi.ParameterType);\n                    }\n                }\n            }\n        }  \n    }\n}\n\n/* This code example produces the following output:\n\nThe following parameters of Void MyMethod(Int32, Int32, Int32) have MyAttribute or a derived type:\nParameter 0, name = i, type = System.Int32\nParameter 1, name = j, type = System.Int32\n\nThe following parameters of Boolean Equals(System.Object) have MyAttribute or a derived type:\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"ParameterInfo_GetCustomAttribute_IsDefined#1\">Imports System\nImports System.Reflection\nImports Microsoft.VisualBasic\n\n&#39; Define a custom attribute with one named parameter.\n&lt;AttributeUsage(AttributeTargets.Parameter)&gt; _\nPublic Class MyAttribute\n    Inherits Attribute\n    Private myName As String\n\n    Public Sub New(ByVal name As String)\n        myName = name\n    End Sub \n\n    Public ReadOnly Property Name() As String\n        Get\n            Return myName\n        End Get\n    End Property\nEnd Class \n\n&#39; Derive another custom attribute from MyAttribute\n&lt;AttributeUsage(AttributeTargets.Parameter)&gt; _\nPublic Class MyDerivedAttribute\n    Inherits MyAttribute\n\n    Public Sub New(ByVal name As String)\n        MyBase.New(name)\n    End Sub \nEnd Class\n\n&#39; Define a class with a method that has three parameters. Apply\n&#39; MyAttribute to one parameter, MyDerivedAttribute to another, and\n&#39; no attributes to the third. \nPublic Class MyClass1\n\n    Public Sub MyMethod(&lt;MyAttribute(&quot;This is an example parameter attribute&quot;)&gt; _\n                        ByVal i As Integer, _\n                        &lt;MyDerivedAttribute(&quot;This is another parameter attribute&quot;)&gt; _\n                        ByVal j As Integer, _\n                        ByVal k As Integer)\n        Return\n    End Sub \nEnd Class \n\nPublic Class MemberInfo_GetCustomAttributes\n\n    Public Shared Sub Main()\n        &#39; Get the type of the class &#39;MyClass1&#39;.\n        Dim myType As Type = GetType(MyClass1)\n        &#39; Get the members associated with the class &#39;MyClass1&#39;.\n        Dim myMethods As MethodInfo() = myType.GetMethods()\n\n        &#39; For each method of the class &#39;MyClass1&#39;, display all the parameters\n        &#39; to which MyAttribute or its derived types have been applied.\n        For Each mi As MethodInfo In myMethods\n            &#39; Get the parameters for the method.\n            Dim myParameters As ParameterInfo() = mi.GetParameters()\n            If myParameters.Length &gt; 0 Then\n                Console.WriteLine(vbCrLf &amp; &quot;The following parameters of {0} have MyAttribute or a derived type: &quot;, mi)\n                For Each pi As ParameterInfo In myParameters\n                    If pi.IsDefined(GetType(MyAttribute), False) Then\n                        Console.WriteLine(&quot;Parameter {0}, name = {1}, type = {2}&quot;, _\n                            pi.Position, pi.Name, pi.ParameterType)\n                    End If\n                Next\n            End If\n        Next\n    End Sub \nEnd Class \n\n&#39; This code example produces the following output:\n&#39;\n&#39;The following parameters of Void MyMethod(Int32, Int32, Int32) have MyAttribute or a derived type:\n&#39;Parameter 0, name = i, type = System.Int32\n&#39;Parameter 1, name = j, type = System.Int32\n&#39;\n&#39;The following parameters of Boolean Equals(System.Object) have MyAttribute or a derived type:\n</code></pre><pre><code class=\"lang-cpp\" name=\"ParameterInfo_GetCustomAttribute_IsDefined#1\">// System::Reflection::ParameterInfo::GetCustomAttributes(Type, bool)\n// System::Reflection::ParameterInfo::IsDefined(Type, bool)\nusing namespace System;\nusing namespace System::Reflection;\n\n// Define a custom attribute with one named parameter.\n[AttributeUsage(AttributeTargets::Parameter)]\npublic ref class MyAttribute: public Attribute\n{\nprivate:\n   String^ myName;\n\npublic:\n   MyAttribute( String^ name )\n   {\n      myName = name;\n   }\n\n   property String^ Name \n   {\n      String^ get()\n      {\n         return myName;\n      }\n   }\n};\n\n// Derive another custom attribute from MyAttribute.\n[AttributeUsage(AttributeTargets::Parameter)]\npublic ref class MyDerivedAttribute: public MyAttribute\n{\npublic:\n   MyDerivedAttribute( String^ name ) : MyAttribute( name ) {}\n};\n\n// Define a class with a method that has three parameters. Apply\n// MyAttribute to one parameter, MyDerivedAttribute to another, and\n// no attributes to the third. \npublic ref class MyClass1\n{\npublic:\n   void MyMethod( [MyAttribute(&quot;This is an example parameter attribute&quot;)] \n                  int i,\n                  [MyDerivedAttribute(&quot;This is another parameter attribute&quot;)] \n                  int j,\n                  int k ){}\n};\n\nvoid main()\n{\n   // Get the type of the class &#39;MyClass1&#39;.\n   Type^ myType = MyClass1::typeid;\n\n   // Get the members associated with the class &#39;MyClass1&#39;.\n   array&lt;MethodInfo^&gt;^myMethods = myType-&gt;GetMethods();\n\n   // For each method of the class &#39;MyClass1&#39;, display all the parameters\n   // to which MyAttribute or its derived types have been applied.\n   for each ( MethodInfo^ mi in myMethods )\n   {\n      // Get the parameters for the method.\n      array&lt;ParameterInfo^&gt;^ myParameters = mi-&gt;GetParameters();\n      if ( myParameters-&gt;Length &gt; 0 )\n      {\n         Console::WriteLine(&quot;<br>The following parameters of {0} have MyAttribute or a derived type:&quot;, mi);\n         for each ( ParameterInfo^ pi in myParameters)\n         {\n            if (pi-&gt;IsDefined(MyAttribute::typeid, false))\n            {\n               Console::WriteLine(&quot;Parameter {0}, name = {1}, type = {2}&quot;, \n                  pi-&gt;Position, pi-&gt;Name, pi-&gt;ParameterType);\n            }\n         }\n      }\n   }\n}\n\n/* This code example produces the following output:\n\nThe following parameters of Void MyMethod(Int32, Int32, Int32) have MyAttribute or a derived type:\nParameter 0, name = i, type = System.Int32\nParameter 1, name = j, type = System.Int32\n\nThe following parameters of Boolean Equals(System.Object) have MyAttribute or a derived type:\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_ParameterInfo_ToString\">\r\n    \r\n            <a id=\"System_Reflection_ParameterInfo_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Gets the parameter type and name represented as a string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string containing the type and the name of the parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_ParameterInfo_System_Runtime_InteropServices__ParameterInfo_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Reflection_ParameterInfo_System_Runtime_InteropServices__ParameterInfo_GetIDsOfNames_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_ParameterInfo.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Maps a set of names to a corresponding set of dispatch identifiers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _ParameterInfo.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>riid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Reserved for future use. Must be IID_NULL.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgszNames</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Passed-in array of names to be mapped.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cNames</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Count of the names to be mapped.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lcid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The locale context in which to interpret the names.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgDispId</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Caller-allocated array which receives the IDs corresponding to the names.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Late-bound access using the COM <code>IDispatch</code> interface is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetIDsOfNames</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_ParameterInfo_System_Runtime_InteropServices__ParameterInfo_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Reflection_ParameterInfo_System_Runtime_InteropServices__ParameterInfo_GetTypeInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_ParameterInfo.GetTypeInfo(UInt32,UInt32,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the type information for an object, which can then be used to get the type information for an interface.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _ParameterInfo.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>iTInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type information to return.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lcid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The locale identifier for the type information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ppTInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Receives a pointer to the requested type information object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Late-bound access using the COM <code>IDispatch</code> interface is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetTypeInfo</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_ParameterInfo_System_Runtime_InteropServices__ParameterInfo_GetTypeInfoCount_System_UInt32__\">\r\n    \r\n            <a id=\"System_Reflection_ParameterInfo_System_Runtime_InteropServices__ParameterInfo_GetTypeInfoCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_ParameterInfo.GetTypeInfoCount(UInt32)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _ParameterInfo.GetTypeInfoCount (out uint pcTInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>pcTInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Points to a location that receives the number of type information interfaces provided by the object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Late-bound access using the COM <code>IDispatch</code> interface is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetTypeInfoCount</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_ParameterInfo_System_Runtime_InteropServices__ParameterInfo_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Reflection_ParameterInfo_System_Runtime_InteropServices__ParameterInfo_Invoke_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_ParameterInfo.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Provides access to properties and methods exposed by an object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _ParameterInfo.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dispIdMember</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Identifies the member.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>riid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Reserved for future use. Must be IID_NULL.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lcid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The locale context in which to interpret arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>wFlags</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Flags describing the context of the call.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pDispParams</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pVarResult</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Pointer to the location where the result is to be stored.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pExcepInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Pointer to a structure that contains exception information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>puArgErr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the first argument that has an error.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Late-bound access using the COM <code>IDispatch</code> interface is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::Invoke</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Reflection.ParameterInfo.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Reflection.ParameterInfo.yml\">\r\n<meta name=\"APIName\" content=\"System.Reflection.ParameterInfo\">\r\n<meta name=\"APIName\" content=\"System.Reflection.ParameterInfo..ctor\">\r\n<meta name=\"APIName\" content=\"System.Reflection.ParameterInfo.Attributes\">\r\n<meta name=\"APIName\" content=\"System.Reflection.ParameterInfo.AttrsImpl\">\r\n<meta name=\"APIName\" content=\"System.Reflection.ParameterInfo.ClassImpl\">\r\n<meta name=\"APIName\" content=\"System.Reflection.ParameterInfo.CustomAttributes\">\r\n<meta name=\"APIName\" content=\"System.Reflection.ParameterInfo.DefaultValue\">\r\n<meta name=\"APIName\" content=\"System.Reflection.ParameterInfo.DefaultValueImpl\">\r\n<meta name=\"APIName\" content=\"System.Reflection.ParameterInfo.GetCustomAttributes\">\r\n<meta name=\"APIName\" content=\"System.Reflection.ParameterInfo.GetCustomAttributesData\">\r\n<meta name=\"APIName\" content=\"System.Reflection.ParameterInfo.GetOptionalCustomModifiers\">\r\n<meta name=\"APIName\" content=\"System.Reflection.ParameterInfo.GetRealObject\">\r\n<meta name=\"APIName\" content=\"System.Reflection.ParameterInfo.GetRequiredCustomModifiers\">\r\n<meta name=\"APIName\" content=\"System.Reflection.ParameterInfo.HasDefaultValue\">\r\n<meta name=\"APIName\" content=\"System.Reflection.ParameterInfo.IsDefined\">\r\n<meta name=\"APIName\" content=\"System.Reflection.ParameterInfo.IsIn\">\r\n<meta name=\"APIName\" content=\"System.Reflection.ParameterInfo.IsLcid\">\r\n<meta name=\"APIName\" content=\"System.Reflection.ParameterInfo.IsOptional\">\r\n<meta name=\"APIName\" content=\"System.Reflection.ParameterInfo.IsOut\">\r\n<meta name=\"APIName\" content=\"System.Reflection.ParameterInfo.IsRetval\">\r\n<meta name=\"APIName\" content=\"System.Reflection.ParameterInfo.Member\">\r\n<meta name=\"APIName\" content=\"System.Reflection.ParameterInfo.MemberImpl\">\r\n<meta name=\"APIName\" content=\"System.Reflection.ParameterInfo.MetadataToken\">\r\n<meta name=\"APIName\" content=\"System.Reflection.ParameterInfo.Name\">\r\n<meta name=\"APIName\" content=\"System.Reflection.ParameterInfo.NameImpl\">\r\n<meta name=\"APIName\" content=\"System.Reflection.ParameterInfo.ParameterType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.ParameterInfo.Position\">\r\n<meta name=\"APIName\" content=\"System.Reflection.ParameterInfo.PositionImpl\">\r\n<meta name=\"APIName\" content=\"System.Reflection.ParameterInfo.RawDefaultValue\">\r\n<meta name=\"APIName\" content=\"System.Reflection.ParameterInfo._ParameterInfo.GetIDsOfNames\">\r\n<meta name=\"APIName\" content=\"System.Reflection.ParameterInfo._ParameterInfo.GetTypeInfo\">\r\n<meta name=\"APIName\" content=\"System.Reflection.ParameterInfo._ParameterInfo.GetTypeInfoCount\">\r\n<meta name=\"APIName\" content=\"System.Reflection.ParameterInfo._ParameterInfo.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Reflection.ParameterInfo.ToString\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"3b1b6055-e043-de03-b5c3-942d8ed5330d\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Discovers the attributes of a parameter and provides access to parameter metadata.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Reflection/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Reflection.ParameterInfo\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Reflection.ParameterInfo.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Reflection.ParameterInfo.yml","open_to_public_contributors":true,"api_name":["System.Reflection.ParameterInfo","System.Reflection.ParameterInfo..ctor","System.Reflection.ParameterInfo.Attributes","System.Reflection.ParameterInfo.AttrsImpl","System.Reflection.ParameterInfo.ClassImpl","System.Reflection.ParameterInfo.CustomAttributes","System.Reflection.ParameterInfo.DefaultValue","System.Reflection.ParameterInfo.DefaultValueImpl","System.Reflection.ParameterInfo.GetCustomAttributes","System.Reflection.ParameterInfo.GetCustomAttributesData","System.Reflection.ParameterInfo.GetOptionalCustomModifiers","System.Reflection.ParameterInfo.GetRealObject","System.Reflection.ParameterInfo.GetRequiredCustomModifiers","System.Reflection.ParameterInfo.HasDefaultValue","System.Reflection.ParameterInfo.IsDefined","System.Reflection.ParameterInfo.IsIn","System.Reflection.ParameterInfo.IsLcid","System.Reflection.ParameterInfo.IsOptional","System.Reflection.ParameterInfo.IsOut","System.Reflection.ParameterInfo.IsRetval","System.Reflection.ParameterInfo.Member","System.Reflection.ParameterInfo.MemberImpl","System.Reflection.ParameterInfo.MetadataToken","System.Reflection.ParameterInfo.Name","System.Reflection.ParameterInfo.NameImpl","System.Reflection.ParameterInfo.ParameterType","System.Reflection.ParameterInfo.Position","System.Reflection.ParameterInfo.PositionImpl","System.Reflection.ParameterInfo.RawDefaultValue","System.Reflection.ParameterInfo._ParameterInfo.GetIDsOfNames","System.Reflection.ParameterInfo._ParameterInfo.GetTypeInfo","System.Reflection.ParameterInfo._ParameterInfo.GetTypeInfoCount","System.Reflection.ParameterInfo._ParameterInfo.Invoke","System.Reflection.ParameterInfo.ToString"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Reflection.ParameterInfo","System::Reflection::ParameterInfo","System.Reflection.ParameterInfo.#ctor","System::Reflection::ParameterInfo::#ctor","System.Reflection.ParameterInfo.Attributes","System::Reflection::ParameterInfo::Attributes","System.Reflection.ParameterInfo.AttrsImpl","System::Reflection::ParameterInfo::AttrsImpl","System.Reflection.ParameterInfo.ClassImpl","System::Reflection::ParameterInfo::ClassImpl","System.Reflection.ParameterInfo.CustomAttributes","System::Reflection::ParameterInfo::CustomAttributes","System.Reflection.ParameterInfo.DefaultValue","System::Reflection::ParameterInfo::DefaultValue","System.Reflection.ParameterInfo.DefaultValueImpl","System::Reflection::ParameterInfo::DefaultValueImpl","System.Reflection.ParameterInfo.GetCustomAttributes","System::Reflection::ParameterInfo::GetCustomAttributes","System.Reflection.ParameterInfo.GetCustomAttributesData","System::Reflection::ParameterInfo::GetCustomAttributesData","System.Reflection.ParameterInfo.GetOptionalCustomModifiers","System::Reflection::ParameterInfo::GetOptionalCustomModifiers","System.Reflection.ParameterInfo.GetRealObject","System::Reflection::ParameterInfo::GetRealObject","System.Reflection.ParameterInfo.GetRequiredCustomModifiers","System::Reflection::ParameterInfo::GetRequiredCustomModifiers","System.Reflection.ParameterInfo.HasDefaultValue","System::Reflection::ParameterInfo::HasDefaultValue","System.Reflection.ParameterInfo.IsDefined","System::Reflection::ParameterInfo::IsDefined","System.Reflection.ParameterInfo.IsIn","System::Reflection::ParameterInfo::IsIn","System.Reflection.ParameterInfo.IsLcid","System::Reflection::ParameterInfo::IsLcid","System.Reflection.ParameterInfo.IsOptional","System::Reflection::ParameterInfo::IsOptional","System.Reflection.ParameterInfo.IsOut","System::Reflection::ParameterInfo::IsOut","System.Reflection.ParameterInfo.IsRetval","System::Reflection::ParameterInfo::IsRetval","System.Reflection.ParameterInfo.Member","System::Reflection::ParameterInfo::Member","System.Reflection.ParameterInfo.MemberImpl","System::Reflection::ParameterInfo::MemberImpl","System.Reflection.ParameterInfo.MetadataToken","System::Reflection::ParameterInfo::MetadataToken","System.Reflection.ParameterInfo.Name","System::Reflection::ParameterInfo::Name","System.Reflection.ParameterInfo.NameImpl","System::Reflection::ParameterInfo::NameImpl","System.Reflection.ParameterInfo.ParameterType","System::Reflection::ParameterInfo::ParameterType","System.Reflection.ParameterInfo.Position","System::Reflection::ParameterInfo::Position","System.Reflection.ParameterInfo.PositionImpl","System::Reflection::ParameterInfo::PositionImpl","System.Reflection.ParameterInfo.RawDefaultValue","System::Reflection::ParameterInfo::RawDefaultValue","System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames","System::Reflection::ParameterInfo::System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames","System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfo","System::Reflection::ParameterInfo::System#Runtime#InteropServices#_ParameterInfo#GetTypeInfo","System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfoCount","System::Reflection::ParameterInfo::System#Runtime#InteropServices#_ParameterInfo#GetTypeInfoCount","System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke","System::Reflection::ParameterInfo::System#Runtime#InteropServices#_ParameterInfo#Invoke","System.Reflection.ParameterInfo.ToString","System::Reflection::ParameterInfo::ToString"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"3b1b6055-e043-de03-b5c3-942d8ed5330d","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Reflection/ParameterInfo.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ParameterInfo class | Microsoft Docs","_op_ogTitle":"ParameterInfo class","description":"Discovers the attributes of a parameter and provides access to parameter metadata.\n","toc_asset_id":"_splitted/System.Reflection/toc.json","toc_rel":"_splitted/System.Reflection/toc.json","source_url":"","ms.assetid":"System.Reflection.ParameterInfo","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.reflection.parameterinfo","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.reflection.parameterinfo","fileRelativePath":"System.Reflection.ParameterInfo.html"},"themesRelativePathToOutputRoot":"_themes/"}