{"content":"    \r\n    <h1 id=\"System_Xml_Serialization_XmlTypeMapping\">\r\n      <span class=\"lang-csharp\">XmlTypeMapping</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Contains a mapping of one type to another.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class XmlTypeMapping : System.Xml.Serialization.XmlMapping</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.serialization.xmlmapping\" data-linktype=\"relative-path\">System.Xml.Serialization.XmlMapping</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">XmlTypeMapping</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.serialization.xmlmapping#System_Xml_Serialization_XmlMapping_ElementName\" data-linktype=\"relative-path\">ElementName</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.serialization.xmlmapping#System_Xml_Serialization_XmlMapping_Namespace\" data-linktype=\"relative-path\">Namespace</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.serialization.xmlmapping#System_Xml_Serialization_XmlMapping_SetKey_System_String_\" data-linktype=\"relative-path\">SetKey(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.serialization.xmlmapping#System_Xml_Serialization_XmlMapping_XsdElementName\" data-linktype=\"relative-path\">XsdElementName</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The XmlTypeMapping class is used to serialize an object as encoded SOAP XML. The resulting XML conforms to section 5 of the World Wide Web Consortium (www.w3.org) document, &quot;Simple Object Access Protocol (SOAP) 1.1&quot;. Create an XmlTypeMapping by calling the <a class=\"xref\" href=\"system.xml.serialization.soapreflectionimporter#System_Xml_Serialization_SoapReflectionImporter_ImportTypeMapping_\" data-linktype=\"relative-path\">ImportTypeMapping</a> method of the <a class=\"xref\" href=\"system.xml.serialization.soapreflectionimporter\" data-linktype=\"relative-path\">SoapReflectionImporter</a> class. Use the XmlTypeMapping to construct an instance of the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> class. To control the serialization, use one of the attributes listed in <a href=\"../Topic/Attributes%20That%20Control%20Encoded%20SOAP%20Serialization.md\" data-linktype=\"relative-path\">Attributes That Control Encoded SOAP Serialization</a>.</p>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Serialization_XmlTypeMapping_TypeFullName\" data-linktype=\"self-bookmark\">TypeFullName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>The fully qualified type name that includes the namespace (or namespaces) and type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Serialization_XmlTypeMapping_TypeName\" data-linktype=\"self-bookmark\">TypeName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the type name of the mapped object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Serialization_XmlTypeMapping_XsdTypeName\" data-linktype=\"self-bookmark\">XsdTypeName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the XML element name of the mapped object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Serialization_XmlTypeMapping_XsdTypeNamespace\" data-linktype=\"self-bookmark\">XsdTypeNamespace</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the XML namespace of the mapped object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Serialization_XmlTypeMapping_TypeFullName\">\r\n    \r\n            <a id=\"System_Xml_Serialization_XmlTypeMapping_TypeFullName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TypeFullName</div>        \r\n          </div>\r\n    \r\n            <p>The fully qualified type name that includes the namespace (or namespaces) and type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string TypeFullName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The fully qualified type name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cpp\" name=\"XmlTypeMapping Example#1\">#using &lt;System.Xml.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml::Serialization;\nusing namespace System::Collections;\nusing namespace System::Xml;\nusing namespace System::Text;\n\npublic ref class Thing\n{\npublic:\n   String^ ThingName;\n};\n\n[SoapType(&quot;TheGroup&quot;,&quot;http://www.cohowinery.com&quot;)]\npublic ref class Group\n{\npublic:\n   String^ GroupName;\n   array&lt;Thing^&gt;^Things;\n\n   [SoapElement(DataType=&quot;language&quot;)]\n   static String^ Lang = &quot;en&quot;;\n\n   [SoapElement(DataType=&quot;integer&quot;)]\n   String^ MyNumber;\n\n   [SoapElement(DataType=&quot;duration&quot;)]\n   static String^ ReDate = &quot;8/31/01&quot;;\n};\n\nvoid GetMap( String^ filename )\n{\n   // Create an XmlSerializer instance.\n   SoapReflectionImporter^ sri = gcnew SoapReflectionImporter;\n   XmlTypeMapping^ map = sri-&gt;ImportTypeMapping( Group::typeid );\n   Console::WriteLine( &quot;ElementName: {0}&quot;, map-&gt;ElementName );\n   Console::WriteLine( &quot;Namespace: {0}&quot;, map-&gt;Namespace );\n   Console::WriteLine( &quot;TypeFullName: {0}&quot;, map-&gt;TypeFullName );\n   Console::WriteLine( &quot;TypeName: {0}&quot;, map-&gt;TypeName );\n   XmlSerializer^ ser = gcnew XmlSerializer( map );\n   Group^ xGroup = gcnew Group;\n   xGroup-&gt;GroupName = &quot;MyCar&quot;;\n   xGroup-&gt;MyNumber = &quot;5454&quot;;\n   xGroup-&gt;Things = gcnew array&lt;Thing^&gt;(2); // {new Thing(), new Thing()};\n   xGroup-&gt;Things[ 0 ] = gcnew Thing;\n   xGroup-&gt;Things[ 1 ] = gcnew Thing;\n\n   // To write the outer wrapper, use an XmlTextWriter.\n   XmlTextWriter^ writer = gcnew XmlTextWriter( filename,Encoding::UTF8 );\n   writer-&gt;Formatting = Formatting::Indented;\n   writer-&gt;WriteStartElement( &quot;wrapper&quot; );\n   ser-&gt;Serialize( writer, xGroup );\n   writer-&gt;WriteEndElement();\n   writer-&gt;Close();\n}\n\nint main()\n{\n   GetMap( &quot;MyMap.xml&quot; );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlTypeMapping Example#1\">using System;\nusing System.IO;\nusing System.Xml.Serialization;\nusing System.Collections;\nusing System.Xml;\nusing System.Text;\n\nnamespace Company{\n\n[SoapType(&quot;TheGroup&quot;, &quot;http://www.cohowinery.com&quot;)]\npublic class Group\n{\n   public string GroupName;\n   public Thing[] Things;\n   [SoapElement(DataType = &quot;language&quot;)]\n   public string Lang = &quot;en&quot;;\n   [SoapElement(DataType = &quot;integer&quot;)]\n   public string MyNumber;\n\n   [SoapElement(DataType = &quot;duration&quot;)]\n   public string ReDate = &quot;8/31/01&quot;;\n}\n\npublic class Thing{ \n   public string ThingName;\n}\n\npublic class Test\n{\n   public static void Main()\n   {\n      Test t = new Test();\n\n      t.GetMap(&quot;MyMap.xml&quot;);\n   }\n\n\n   public void GetMap(string filename){\n      // Create an XmlSerializer instance.\n      XmlTypeMapping map = new SoapReflectionImporter().ImportTypeMapping(typeof(Group));\n      Console.WriteLine(&quot;ElementName: &quot; + map.ElementName);\n      Console.WriteLine(&quot;Namespace: &quot; + map.Namespace);\n      Console.WriteLine(&quot;TypeFullName: &quot; + map.TypeFullName);\n      Console.WriteLine(&quot;TypeName: &quot; + map.TypeName);\n      XmlSerializer ser = new XmlSerializer(map);\n      Group xGroup=  new Group();\n      xGroup.GroupName= &quot;MyCar&quot;;\n      xGroup.MyNumber= 5454.ToString();\n      xGroup.Things = new Thing[]{new Thing(), new Thing()};\n      // To write the outer wrapper, use an XmlTextWriter.\n      XmlTextWriter writer = \n      new XmlTextWriter(filename, Encoding.UTF8);\n      writer.Formatting = Formatting.Indented;\n      writer.WriteStartElement(&quot;wrapper&quot;);\n      ser.Serialize(writer, xGroup);\n      writer.WriteEndElement();\n      writer.Close();\n   }\n}\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"XmlTypeMapping Example#1\">Imports System\nImports System.IO\nImports System.Xml.Serialization\nImports System.Collections\nImports System.Xml\nImports System.Text\n\n\nNamespace Company\n\t\n&lt;SoapType(&quot;TheGroup&quot;, &quot;http://www.cohowinery.com&quot;)&gt; _\nPublic Class Group\n\n   &#39; The SoapElementAttribute specifies that the\n   &#39; generated XML element name will be &quot;Wheels&quot;\n   &#39; instead of &quot;Vehicle&quot;.\n   Public GroupName As String \n   public Things() As  Thing\n   &lt;SoapElement(DataType:= &quot;language&quot;)&gt; _\n   Public Lang As String = &quot;en&quot;\n   &lt;SoapElement(DataType:= &quot;integer&quot;)&gt; _\n   Public MyNumber As String \n\n   &lt;SoapElement(DataType:= &quot;duration&quot;)&gt; _\n   Public ReDate As String  = &quot;8/31/01&quot;\nEnd Class\n\nPublic Class Thing \n   Public ThingName As String \nEnd Class\n\nPublic Class Test\n   Shared Sub Main()\n   \n      Dim t As Test = new Test()\n\n      t.GetMap(&quot;MyMap.xml&quot;)\n   End Sub\n\n\n   public Sub GetMap(filename As string )\n      &#39; Create an XmlSerializer instance.\n      Dim map As XmlTypeMapping = new SoapReflectionImporter().ImportTypeMapping(GetType(Group))\n      Console.WriteLine(&quot;ElementName: &quot; + map.ElementName)\n      Console.WriteLine(&quot;Namespace: &quot; + map.Namespace)\n      Console.WriteLine(&quot;TypeFullName: &quot; + map.TypeFullName)\n      Console.WriteLine(&quot;TypeName: &quot; + map.TypeName)\n      Dim ser As XmlSerializer= new XmlSerializer(map)\n      Dim xGroup As Group =  new Group()\n      xGroup.GroupName= &quot;MyCar&quot;\n      xGroup.MyNumber= 5454.ToString()\n      xGroup.Things = new Thing(){new Thing(), new Thing()}\n      &#39; To write the outer wrapper, use an XmlTextWriter.\n      Dim writer As XmlTextWriter =  _\n      new XmlTextWriter(filename, Encoding.UTF8)\n      writer.Formatting = Formatting.Indented\n      writer.WriteStartElement(&quot;wrapper&quot;)\n      ser.Serialize(writer, xGroup)\n      writer.WriteEndElement()\n      writer.Close()\n   End Sub\nEnd Class\n\nEnd namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Serialization_XmlTypeMapping_TypeName\">\r\n    \r\n            <a id=\"System_Xml_Serialization_XmlTypeMapping_TypeName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TypeName</div>        \r\n          </div>\r\n    \r\n            <p>Gets the type name of the mapped object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string TypeName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The type name of the mapped object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The type name is the class name of the mapped object.  </p>\n<p> You can also see the fully qualified name by examining the <a class=\"xref\" href=\"system.xml.serialization.xmltypemapping#System_Xml_Serialization_XmlTypeMapping_TypeFullName_\" data-linktype=\"relative-path\">TypeFullName</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cpp\" name=\"XmlTypeMapping Example#1\">#using &lt;System.Xml.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml::Serialization;\nusing namespace System::Collections;\nusing namespace System::Xml;\nusing namespace System::Text;\n\npublic ref class Thing\n{\npublic:\n   String^ ThingName;\n};\n\n[SoapType(&quot;TheGroup&quot;,&quot;http://www.cohowinery.com&quot;)]\npublic ref class Group\n{\npublic:\n   String^ GroupName;\n   array&lt;Thing^&gt;^Things;\n\n   [SoapElement(DataType=&quot;language&quot;)]\n   static String^ Lang = &quot;en&quot;;\n\n   [SoapElement(DataType=&quot;integer&quot;)]\n   String^ MyNumber;\n\n   [SoapElement(DataType=&quot;duration&quot;)]\n   static String^ ReDate = &quot;8/31/01&quot;;\n};\n\nvoid GetMap( String^ filename )\n{\n   // Create an XmlSerializer instance.\n   SoapReflectionImporter^ sri = gcnew SoapReflectionImporter;\n   XmlTypeMapping^ map = sri-&gt;ImportTypeMapping( Group::typeid );\n   Console::WriteLine( &quot;ElementName: {0}&quot;, map-&gt;ElementName );\n   Console::WriteLine( &quot;Namespace: {0}&quot;, map-&gt;Namespace );\n   Console::WriteLine( &quot;TypeFullName: {0}&quot;, map-&gt;TypeFullName );\n   Console::WriteLine( &quot;TypeName: {0}&quot;, map-&gt;TypeName );\n   XmlSerializer^ ser = gcnew XmlSerializer( map );\n   Group^ xGroup = gcnew Group;\n   xGroup-&gt;GroupName = &quot;MyCar&quot;;\n   xGroup-&gt;MyNumber = &quot;5454&quot;;\n   xGroup-&gt;Things = gcnew array&lt;Thing^&gt;(2); // {new Thing(), new Thing()};\n   xGroup-&gt;Things[ 0 ] = gcnew Thing;\n   xGroup-&gt;Things[ 1 ] = gcnew Thing;\n\n   // To write the outer wrapper, use an XmlTextWriter.\n   XmlTextWriter^ writer = gcnew XmlTextWriter( filename,Encoding::UTF8 );\n   writer-&gt;Formatting = Formatting::Indented;\n   writer-&gt;WriteStartElement( &quot;wrapper&quot; );\n   ser-&gt;Serialize( writer, xGroup );\n   writer-&gt;WriteEndElement();\n   writer-&gt;Close();\n}\n\nint main()\n{\n   GetMap( &quot;MyMap.xml&quot; );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlTypeMapping Example#1\">using System;\nusing System.IO;\nusing System.Xml.Serialization;\nusing System.Collections;\nusing System.Xml;\nusing System.Text;\n\nnamespace Company{\n\n[SoapType(&quot;TheGroup&quot;, &quot;http://www.cohowinery.com&quot;)]\npublic class Group\n{\n   public string GroupName;\n   public Thing[] Things;\n   [SoapElement(DataType = &quot;language&quot;)]\n   public string Lang = &quot;en&quot;;\n   [SoapElement(DataType = &quot;integer&quot;)]\n   public string MyNumber;\n\n   [SoapElement(DataType = &quot;duration&quot;)]\n   public string ReDate = &quot;8/31/01&quot;;\n}\n\npublic class Thing{ \n   public string ThingName;\n}\n\npublic class Test\n{\n   public static void Main()\n   {\n      Test t = new Test();\n\n      t.GetMap(&quot;MyMap.xml&quot;);\n   }\n\n\n   public void GetMap(string filename){\n      // Create an XmlSerializer instance.\n      XmlTypeMapping map = new SoapReflectionImporter().ImportTypeMapping(typeof(Group));\n      Console.WriteLine(&quot;ElementName: &quot; + map.ElementName);\n      Console.WriteLine(&quot;Namespace: &quot; + map.Namespace);\n      Console.WriteLine(&quot;TypeFullName: &quot; + map.TypeFullName);\n      Console.WriteLine(&quot;TypeName: &quot; + map.TypeName);\n      XmlSerializer ser = new XmlSerializer(map);\n      Group xGroup=  new Group();\n      xGroup.GroupName= &quot;MyCar&quot;;\n      xGroup.MyNumber= 5454.ToString();\n      xGroup.Things = new Thing[]{new Thing(), new Thing()};\n      // To write the outer wrapper, use an XmlTextWriter.\n      XmlTextWriter writer = \n      new XmlTextWriter(filename, Encoding.UTF8);\n      writer.Formatting = Formatting.Indented;\n      writer.WriteStartElement(&quot;wrapper&quot;);\n      ser.Serialize(writer, xGroup);\n      writer.WriteEndElement();\n      writer.Close();\n   }\n}\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"XmlTypeMapping Example#1\">Imports System\nImports System.IO\nImports System.Xml.Serialization\nImports System.Collections\nImports System.Xml\nImports System.Text\n\n\nNamespace Company\n\t\n&lt;SoapType(&quot;TheGroup&quot;, &quot;http://www.cohowinery.com&quot;)&gt; _\nPublic Class Group\n\n   &#39; The SoapElementAttribute specifies that the\n   &#39; generated XML element name will be &quot;Wheels&quot;\n   &#39; instead of &quot;Vehicle&quot;.\n   Public GroupName As String \n   public Things() As  Thing\n   &lt;SoapElement(DataType:= &quot;language&quot;)&gt; _\n   Public Lang As String = &quot;en&quot;\n   &lt;SoapElement(DataType:= &quot;integer&quot;)&gt; _\n   Public MyNumber As String \n\n   &lt;SoapElement(DataType:= &quot;duration&quot;)&gt; _\n   Public ReDate As String  = &quot;8/31/01&quot;\nEnd Class\n\nPublic Class Thing \n   Public ThingName As String \nEnd Class\n\nPublic Class Test\n   Shared Sub Main()\n   \n      Dim t As Test = new Test()\n\n      t.GetMap(&quot;MyMap.xml&quot;)\n   End Sub\n\n\n   public Sub GetMap(filename As string )\n      &#39; Create an XmlSerializer instance.\n      Dim map As XmlTypeMapping = new SoapReflectionImporter().ImportTypeMapping(GetType(Group))\n      Console.WriteLine(&quot;ElementName: &quot; + map.ElementName)\n      Console.WriteLine(&quot;Namespace: &quot; + map.Namespace)\n      Console.WriteLine(&quot;TypeFullName: &quot; + map.TypeFullName)\n      Console.WriteLine(&quot;TypeName: &quot; + map.TypeName)\n      Dim ser As XmlSerializer= new XmlSerializer(map)\n      Dim xGroup As Group =  new Group()\n      xGroup.GroupName= &quot;MyCar&quot;\n      xGroup.MyNumber= 5454.ToString()\n      xGroup.Things = new Thing(){new Thing(), new Thing()}\n      &#39; To write the outer wrapper, use an XmlTextWriter.\n      Dim writer As XmlTextWriter =  _\n      new XmlTextWriter(filename, Encoding.UTF8)\n      writer.Formatting = Formatting.Indented\n      writer.WriteStartElement(&quot;wrapper&quot;)\n      ser.Serialize(writer, xGroup)\n      writer.WriteEndElement()\n      writer.Close()\n   End Sub\nEnd Class\n\nEnd namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Serialization_XmlTypeMapping_XsdTypeName\">\r\n    \r\n            <a id=\"System_Xml_Serialization_XmlTypeMapping_XsdTypeName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XsdTypeName</div>        \r\n          </div>\r\n    \r\n            <p>Gets the XML element name of the mapped object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string XsdTypeName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The XML element name of the mapped object. The default is the class name of the object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To set an alternate element name of an object, apply a <a class=\"xref\" href=\"system.xml.serialization.soaptypeattribute\" data-linktype=\"relative-path\">SoapTypeAttribute</a> to the class, and set the <a class=\"xref\" href=\"system.xml.serialization.soaptypeattribute#System_Xml_Serialization_SoapTypeAttribute_TypeName_\" data-linktype=\"relative-path\">TypeName</a> property to a new value.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cpp\" name=\"XmlTypeMapping Example#1\">#using &lt;System.Xml.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml::Serialization;\nusing namespace System::Collections;\nusing namespace System::Xml;\nusing namespace System::Text;\n\npublic ref class Thing\n{\npublic:\n   String^ ThingName;\n};\n\n[SoapType(&quot;TheGroup&quot;,&quot;http://www.cohowinery.com&quot;)]\npublic ref class Group\n{\npublic:\n   String^ GroupName;\n   array&lt;Thing^&gt;^Things;\n\n   [SoapElement(DataType=&quot;language&quot;)]\n   static String^ Lang = &quot;en&quot;;\n\n   [SoapElement(DataType=&quot;integer&quot;)]\n   String^ MyNumber;\n\n   [SoapElement(DataType=&quot;duration&quot;)]\n   static String^ ReDate = &quot;8/31/01&quot;;\n};\n\nvoid GetMap( String^ filename )\n{\n   // Create an XmlSerializer instance.\n   SoapReflectionImporter^ sri = gcnew SoapReflectionImporter;\n   XmlTypeMapping^ map = sri-&gt;ImportTypeMapping( Group::typeid );\n   Console::WriteLine( &quot;ElementName: {0}&quot;, map-&gt;ElementName );\n   Console::WriteLine( &quot;Namespace: {0}&quot;, map-&gt;Namespace );\n   Console::WriteLine( &quot;TypeFullName: {0}&quot;, map-&gt;TypeFullName );\n   Console::WriteLine( &quot;TypeName: {0}&quot;, map-&gt;TypeName );\n   XmlSerializer^ ser = gcnew XmlSerializer( map );\n   Group^ xGroup = gcnew Group;\n   xGroup-&gt;GroupName = &quot;MyCar&quot;;\n   xGroup-&gt;MyNumber = &quot;5454&quot;;\n   xGroup-&gt;Things = gcnew array&lt;Thing^&gt;(2); // {new Thing(), new Thing()};\n   xGroup-&gt;Things[ 0 ] = gcnew Thing;\n   xGroup-&gt;Things[ 1 ] = gcnew Thing;\n\n   // To write the outer wrapper, use an XmlTextWriter.\n   XmlTextWriter^ writer = gcnew XmlTextWriter( filename,Encoding::UTF8 );\n   writer-&gt;Formatting = Formatting::Indented;\n   writer-&gt;WriteStartElement( &quot;wrapper&quot; );\n   ser-&gt;Serialize( writer, xGroup );\n   writer-&gt;WriteEndElement();\n   writer-&gt;Close();\n}\n\nint main()\n{\n   GetMap( &quot;MyMap.xml&quot; );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlTypeMapping Example#1\">using System;\nusing System.IO;\nusing System.Xml.Serialization;\nusing System.Collections;\nusing System.Xml;\nusing System.Text;\n\nnamespace Company{\n\n[SoapType(&quot;TheGroup&quot;, &quot;http://www.cohowinery.com&quot;)]\npublic class Group\n{\n   public string GroupName;\n   public Thing[] Things;\n   [SoapElement(DataType = &quot;language&quot;)]\n   public string Lang = &quot;en&quot;;\n   [SoapElement(DataType = &quot;integer&quot;)]\n   public string MyNumber;\n\n   [SoapElement(DataType = &quot;duration&quot;)]\n   public string ReDate = &quot;8/31/01&quot;;\n}\n\npublic class Thing{ \n   public string ThingName;\n}\n\npublic class Test\n{\n   public static void Main()\n   {\n      Test t = new Test();\n\n      t.GetMap(&quot;MyMap.xml&quot;);\n   }\n\n\n   public void GetMap(string filename){\n      // Create an XmlSerializer instance.\n      XmlTypeMapping map = new SoapReflectionImporter().ImportTypeMapping(typeof(Group));\n      Console.WriteLine(&quot;ElementName: &quot; + map.ElementName);\n      Console.WriteLine(&quot;Namespace: &quot; + map.Namespace);\n      Console.WriteLine(&quot;TypeFullName: &quot; + map.TypeFullName);\n      Console.WriteLine(&quot;TypeName: &quot; + map.TypeName);\n      XmlSerializer ser = new XmlSerializer(map);\n      Group xGroup=  new Group();\n      xGroup.GroupName= &quot;MyCar&quot;;\n      xGroup.MyNumber= 5454.ToString();\n      xGroup.Things = new Thing[]{new Thing(), new Thing()};\n      // To write the outer wrapper, use an XmlTextWriter.\n      XmlTextWriter writer = \n      new XmlTextWriter(filename, Encoding.UTF8);\n      writer.Formatting = Formatting.Indented;\n      writer.WriteStartElement(&quot;wrapper&quot;);\n      ser.Serialize(writer, xGroup);\n      writer.WriteEndElement();\n      writer.Close();\n   }\n}\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"XmlTypeMapping Example#1\">Imports System\nImports System.IO\nImports System.Xml.Serialization\nImports System.Collections\nImports System.Xml\nImports System.Text\n\n\nNamespace Company\n\t\n&lt;SoapType(&quot;TheGroup&quot;, &quot;http://www.cohowinery.com&quot;)&gt; _\nPublic Class Group\n\n   &#39; The SoapElementAttribute specifies that the\n   &#39; generated XML element name will be &quot;Wheels&quot;\n   &#39; instead of &quot;Vehicle&quot;.\n   Public GroupName As String \n   public Things() As  Thing\n   &lt;SoapElement(DataType:= &quot;language&quot;)&gt; _\n   Public Lang As String = &quot;en&quot;\n   &lt;SoapElement(DataType:= &quot;integer&quot;)&gt; _\n   Public MyNumber As String \n\n   &lt;SoapElement(DataType:= &quot;duration&quot;)&gt; _\n   Public ReDate As String  = &quot;8/31/01&quot;\nEnd Class\n\nPublic Class Thing \n   Public ThingName As String \nEnd Class\n\nPublic Class Test\n   Shared Sub Main()\n   \n      Dim t As Test = new Test()\n\n      t.GetMap(&quot;MyMap.xml&quot;)\n   End Sub\n\n\n   public Sub GetMap(filename As string )\n      &#39; Create an XmlSerializer instance.\n      Dim map As XmlTypeMapping = new SoapReflectionImporter().ImportTypeMapping(GetType(Group))\n      Console.WriteLine(&quot;ElementName: &quot; + map.ElementName)\n      Console.WriteLine(&quot;Namespace: &quot; + map.Namespace)\n      Console.WriteLine(&quot;TypeFullName: &quot; + map.TypeFullName)\n      Console.WriteLine(&quot;TypeName: &quot; + map.TypeName)\n      Dim ser As XmlSerializer= new XmlSerializer(map)\n      Dim xGroup As Group =  new Group()\n      xGroup.GroupName= &quot;MyCar&quot;\n      xGroup.MyNumber= 5454.ToString()\n      xGroup.Things = new Thing(){new Thing(), new Thing()}\n      &#39; To write the outer wrapper, use an XmlTextWriter.\n      Dim writer As XmlTextWriter =  _\n      new XmlTextWriter(filename, Encoding.UTF8)\n      writer.Formatting = Formatting.Indented\n      writer.WriteStartElement(&quot;wrapper&quot;)\n      ser.Serialize(writer, xGroup)\n      writer.WriteEndElement()\n      writer.Close()\n   End Sub\nEnd Class\n\nEnd namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Serialization_XmlTypeMapping_XsdTypeNamespace\">\r\n    \r\n            <a id=\"System_Xml_Serialization_XmlTypeMapping_XsdTypeNamespace_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XsdTypeNamespace</div>        \r\n          </div>\r\n    \r\n            <p>Gets the XML namespace of the mapped object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string XsdTypeNamespace { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The XML namespace of the mapped object. The default is an empty string (&quot;&quot;).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To set a namespace name of an object, apply a <a class=\"xref\" href=\"system.xml.serialization.soaptypeattribute\" data-linktype=\"relative-path\">SoapTypeAttribute</a> to the class, and set the <a class=\"xref\" href=\"system.xml.serialization.soaptypeattribute#System_Xml_Serialization_SoapTypeAttribute_Namespace_\" data-linktype=\"relative-path\">Namespace</a> property to a new value.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cpp\" name=\"XmlTypeMapping Example#1\">#using &lt;System.Xml.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml::Serialization;\nusing namespace System::Collections;\nusing namespace System::Xml;\nusing namespace System::Text;\n\npublic ref class Thing\n{\npublic:\n   String^ ThingName;\n};\n\n[SoapType(&quot;TheGroup&quot;,&quot;http://www.cohowinery.com&quot;)]\npublic ref class Group\n{\npublic:\n   String^ GroupName;\n   array&lt;Thing^&gt;^Things;\n\n   [SoapElement(DataType=&quot;language&quot;)]\n   static String^ Lang = &quot;en&quot;;\n\n   [SoapElement(DataType=&quot;integer&quot;)]\n   String^ MyNumber;\n\n   [SoapElement(DataType=&quot;duration&quot;)]\n   static String^ ReDate = &quot;8/31/01&quot;;\n};\n\nvoid GetMap( String^ filename )\n{\n   // Create an XmlSerializer instance.\n   SoapReflectionImporter^ sri = gcnew SoapReflectionImporter;\n   XmlTypeMapping^ map = sri-&gt;ImportTypeMapping( Group::typeid );\n   Console::WriteLine( &quot;ElementName: {0}&quot;, map-&gt;ElementName );\n   Console::WriteLine( &quot;Namespace: {0}&quot;, map-&gt;Namespace );\n   Console::WriteLine( &quot;TypeFullName: {0}&quot;, map-&gt;TypeFullName );\n   Console::WriteLine( &quot;TypeName: {0}&quot;, map-&gt;TypeName );\n   XmlSerializer^ ser = gcnew XmlSerializer( map );\n   Group^ xGroup = gcnew Group;\n   xGroup-&gt;GroupName = &quot;MyCar&quot;;\n   xGroup-&gt;MyNumber = &quot;5454&quot;;\n   xGroup-&gt;Things = gcnew array&lt;Thing^&gt;(2); // {new Thing(), new Thing()};\n   xGroup-&gt;Things[ 0 ] = gcnew Thing;\n   xGroup-&gt;Things[ 1 ] = gcnew Thing;\n\n   // To write the outer wrapper, use an XmlTextWriter.\n   XmlTextWriter^ writer = gcnew XmlTextWriter( filename,Encoding::UTF8 );\n   writer-&gt;Formatting = Formatting::Indented;\n   writer-&gt;WriteStartElement( &quot;wrapper&quot; );\n   ser-&gt;Serialize( writer, xGroup );\n   writer-&gt;WriteEndElement();\n   writer-&gt;Close();\n}\n\nint main()\n{\n   GetMap( &quot;MyMap.xml&quot; );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"XmlTypeMapping Example#1\">using System;\nusing System.IO;\nusing System.Xml.Serialization;\nusing System.Collections;\nusing System.Xml;\nusing System.Text;\n\nnamespace Company{\n\n[SoapType(&quot;TheGroup&quot;, &quot;http://www.cohowinery.com&quot;)]\npublic class Group\n{\n   public string GroupName;\n   public Thing[] Things;\n   [SoapElement(DataType = &quot;language&quot;)]\n   public string Lang = &quot;en&quot;;\n   [SoapElement(DataType = &quot;integer&quot;)]\n   public string MyNumber;\n\n   [SoapElement(DataType = &quot;duration&quot;)]\n   public string ReDate = &quot;8/31/01&quot;;\n}\n\npublic class Thing{ \n   public string ThingName;\n}\n\npublic class Test\n{\n   public static void Main()\n   {\n      Test t = new Test();\n\n      t.GetMap(&quot;MyMap.xml&quot;);\n   }\n\n\n   public void GetMap(string filename){\n      // Create an XmlSerializer instance.\n      XmlTypeMapping map = new SoapReflectionImporter().ImportTypeMapping(typeof(Group));\n      Console.WriteLine(&quot;ElementName: &quot; + map.ElementName);\n      Console.WriteLine(&quot;Namespace: &quot; + map.Namespace);\n      Console.WriteLine(&quot;TypeFullName: &quot; + map.TypeFullName);\n      Console.WriteLine(&quot;TypeName: &quot; + map.TypeName);\n      XmlSerializer ser = new XmlSerializer(map);\n      Group xGroup=  new Group();\n      xGroup.GroupName= &quot;MyCar&quot;;\n      xGroup.MyNumber= 5454.ToString();\n      xGroup.Things = new Thing[]{new Thing(), new Thing()};\n      // To write the outer wrapper, use an XmlTextWriter.\n      XmlTextWriter writer = \n      new XmlTextWriter(filename, Encoding.UTF8);\n      writer.Formatting = Formatting.Indented;\n      writer.WriteStartElement(&quot;wrapper&quot;);\n      ser.Serialize(writer, xGroup);\n      writer.WriteEndElement();\n      writer.Close();\n   }\n}\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"XmlTypeMapping Example#1\">Imports System\nImports System.IO\nImports System.Xml.Serialization\nImports System.Collections\nImports System.Xml\nImports System.Text\n\n\nNamespace Company\n\t\n&lt;SoapType(&quot;TheGroup&quot;, &quot;http://www.cohowinery.com&quot;)&gt; _\nPublic Class Group\n\n   &#39; The SoapElementAttribute specifies that the\n   &#39; generated XML element name will be &quot;Wheels&quot;\n   &#39; instead of &quot;Vehicle&quot;.\n   Public GroupName As String \n   public Things() As  Thing\n   &lt;SoapElement(DataType:= &quot;language&quot;)&gt; _\n   Public Lang As String = &quot;en&quot;\n   &lt;SoapElement(DataType:= &quot;integer&quot;)&gt; _\n   Public MyNumber As String \n\n   &lt;SoapElement(DataType:= &quot;duration&quot;)&gt; _\n   Public ReDate As String  = &quot;8/31/01&quot;\nEnd Class\n\nPublic Class Thing \n   Public ThingName As String \nEnd Class\n\nPublic Class Test\n   Shared Sub Main()\n   \n      Dim t As Test = new Test()\n\n      t.GetMap(&quot;MyMap.xml&quot;)\n   End Sub\n\n\n   public Sub GetMap(filename As string )\n      &#39; Create an XmlSerializer instance.\n      Dim map As XmlTypeMapping = new SoapReflectionImporter().ImportTypeMapping(GetType(Group))\n      Console.WriteLine(&quot;ElementName: &quot; + map.ElementName)\n      Console.WriteLine(&quot;Namespace: &quot; + map.Namespace)\n      Console.WriteLine(&quot;TypeFullName: &quot; + map.TypeFullName)\n      Console.WriteLine(&quot;TypeName: &quot; + map.TypeName)\n      Dim ser As XmlSerializer= new XmlSerializer(map)\n      Dim xGroup As Group =  new Group()\n      xGroup.GroupName= &quot;MyCar&quot;\n      xGroup.MyNumber= 5454.ToString()\n      xGroup.Things = new Thing(){new Thing(), new Thing()}\n      &#39; To write the outer wrapper, use an XmlTextWriter.\n      Dim writer As XmlTextWriter =  _\n      new XmlTextWriter(filename, Encoding.UTF8)\n      writer.Formatting = Formatting.Indented\n      writer.WriteStartElement(&quot;wrapper&quot;)\n      ser.Serialize(writer, xGroup)\n      writer.WriteEndElement()\n      writer.Close()\n   End Sub\nEnd Class\n\nEnd namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Xml.Serialization.XmlTypeMapping.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Xml.Serialization.XmlTypeMapping.yml\">\r\n<meta name=\"APIName\" content=\"System.Xml.Serialization.XmlTypeMapping\">\r\n<meta name=\"APIName\" content=\"System.Xml.Serialization.XmlTypeMapping.TypeFullName\">\r\n<meta name=\"APIName\" content=\"System.Xml.Serialization.XmlTypeMapping.TypeName\">\r\n<meta name=\"APIName\" content=\"System.Xml.Serialization.XmlTypeMapping.XsdTypeName\">\r\n<meta name=\"APIName\" content=\"System.Xml.Serialization.XmlTypeMapping.XsdTypeNamespace\">\r\n<meta name=\"APILocation\" content=\"System.Xml.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"d1a71990-3772-7a66-a515-cf6d76ae46e2\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Contains a mapping of one type to another.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Xml.Serialization/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Xml.Serialization.XmlTypeMapping\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Xml.Serialization.XmlTypeMapping.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Xml.Serialization.XmlTypeMapping.yml","open_to_public_contributors":true,"api_name":["System.Xml.Serialization.XmlTypeMapping","System.Xml.Serialization.XmlTypeMapping.TypeFullName","System.Xml.Serialization.XmlTypeMapping.TypeName","System.Xml.Serialization.XmlTypeMapping.XsdTypeName","System.Xml.Serialization.XmlTypeMapping.XsdTypeNamespace"],"api_location":["System.Xml.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Xml.Serialization.XmlTypeMapping","System::Xml::Serialization::XmlTypeMapping","System.Xml.Serialization.XmlTypeMapping.TypeFullName","System::Xml::Serialization::XmlTypeMapping::TypeFullName","System.Xml.Serialization.XmlTypeMapping.TypeName","System::Xml::Serialization::XmlTypeMapping::TypeName","System.Xml.Serialization.XmlTypeMapping.XsdTypeName","System::Xml::Serialization::XmlTypeMapping::XsdTypeName","System.Xml.Serialization.XmlTypeMapping.XsdTypeNamespace","System::Xml::Serialization::XmlTypeMapping::XsdTypeNamespace"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"d1a71990-3772-7a66-a515-cf6d76ae46e2","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Xml.Serialization/XmlTypeMapping.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"XmlTypeMapping class | Microsoft Docs","_op_ogTitle":"XmlTypeMapping class","description":"Contains a mapping of one type to another.\n","toc_asset_id":"_splitted/System.Xml.Serialization/toc.json","toc_rel":"_splitted/System.Xml.Serialization/toc.json","source_url":"","ms.assetid":"System.Xml.Serialization.XmlTypeMapping","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.xml.serialization.xmltypemapping","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.xml.serialization.xmltypemapping","fileRelativePath":"System.Xml.Serialization.XmlTypeMapping.html"},"themesRelativePathToOutputRoot":"_themes/"}