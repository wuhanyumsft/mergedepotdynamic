{"content":"    \r\n    <h1 id=\"System_TimeZoneInfo_TransitionTime\">\r\n      <span class=\"lang-csharp\">TimeZoneInfo+TransitionTime</span>\r\n        Struct\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides information about a specific time change, such as the change from daylight saving time to standard time or vice versa, in a particular time zone.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.CompilerServices.TypeForwardedFrom(&quot;System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089&quot;)]\npublic struct TimeZoneInfo.TransitionTime : IEquatable&lt;TimeZoneInfo.TransitionTime&gt;, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">System.ValueType</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">TimeZoneInfo+TransitionTime</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>You can use the TimeZoneInfo.TransitionTime structure to indicate when a transition from standard time to daylight saving time, or from daylight saving time back to standard time, occurs. This structure supports both fixed-date rules and floating-date rules. Use fixed-date rules for time transitions that occur on a specific day of a specific month (such as 2:00 A.M. on November 3). Use floating-date rules for time transitions that occur on a specific day of a specific week of a specific month (such as 2:00 A.M. on the first Sunday of November).  </p>\n<p> The following table compares the properties used in fixed-date and floating-date transitions:  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Month</th>\n<th>Week</th>\n<th>Day</th>\n<th>Time</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Fixed-date rule</td>\n<td><a class=\"xref\" href=\"system.timezoneinfo.transitiontime#System_TimeZoneInfo_TransitionTime_Month_\" data-linktype=\"relative-path\">Month</a></td>\n<td>N/A</td>\n<td><a class=\"xref\" href=\"system.timezoneinfo.transitiontime#System_TimeZoneInfo_TransitionTime_Day_\" data-linktype=\"relative-path\">Day</a></td>\n<td><a class=\"xref\" href=\"system.timezoneinfo.transitiontime#System_TimeZoneInfo_TransitionTime_TimeOfDay_\" data-linktype=\"relative-path\">TimeOfDay</a></td>\n</tr>\n<tr>\n<td>Floating-date rule</td>\n<td><a class=\"xref\" href=\"system.timezoneinfo.transitiontime#System_TimeZoneInfo_TransitionTime_Month_\" data-linktype=\"relative-path\">Month</a></td>\n<td><a class=\"xref\" href=\"system.timezoneinfo.transitiontime#System_TimeZoneInfo_TransitionTime_Week_\" data-linktype=\"relative-path\">Week</a></td>\n<td><a class=\"xref\" href=\"system.timezoneinfo.transitiontime#System_TimeZoneInfo_TransitionTime_DayOfWeek_\" data-linktype=\"relative-path\">DayOfWeek</a></td>\n<td><a class=\"xref\" href=\"system.timezoneinfo.transitiontime#System_TimeZoneInfo_TransitionTime_TimeOfDay_\" data-linktype=\"relative-path\">TimeOfDay</a></td>\n</tr>\n</tbody>\n</table>\n<p> For both fixed-date and floating-date transitions, the <a class=\"xref\" href=\"system.timezoneinfo.transitiontime#System_TimeZoneInfo_TransitionTime_TimeOfDay_\" data-linktype=\"relative-path\">TimeOfDay</a> property gets the time at which the time change occurs. For transitions from standard to daylight saving time, this is the time zone&#39;s standard time value. For transitions from daylight saving to standard time, this is the time zone&#39;s daylight saving time value. This is a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> value whose date component is ignored; its year, month, and day value must always equal 1.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> An instance of the TimeZoneInfo.TransitionTime structure is immutable. Once an object has been created, its values cannot be modified.  </p>\n</div>\n<p> A TimeZoneInfo.TransitionTime object can be created by calling the <code>static</code> (<code>Shared</code> in Visual Basic) <a class=\"xref\" href=\"system.timezoneinfo.transitiontime#System_TimeZoneInfo_TransitionTime_CreateFixedDateRule_\" data-linktype=\"relative-path\">CreateFixedDateRule</a> and <a class=\"xref\" href=\"system.timezoneinfo.transitiontime#System_TimeZoneInfo_TransitionTime_CreateFloatingDateRule_\" data-linktype=\"relative-path\">CreateFloatingDateRule</a> methods to create a fixed or floating-date rule, respectively. The starting and ending TimeZoneInfo.TransitionTime objects are then supplied as parameters to the <a class=\"xref\" href=\"system.timezoneinfo.adjustmentrule#System_TimeZoneInfo_AdjustmentRule_CreateAdjustmentRule_\" data-linktype=\"relative-path\">CreateAdjustmentRule</a> method to create a new adjustment rule that includes this transition time information.  </p>\n<p> The <a class=\"xref\" href=\"system.timezoneinfo.adjustmentrule#System_TimeZoneInfo_AdjustmentRule_DaylightTransitionStart_\" data-linktype=\"relative-path\">DaylightTransitionStart</a> and <a class=\"xref\" href=\"system.timezoneinfo.adjustmentrule#System_TimeZoneInfo_AdjustmentRule_DaylightTransitionEnd_\" data-linktype=\"relative-path\">DaylightTransitionEnd</a> properties of an <a class=\"xref\" href=\"system.timezoneinfo.adjustmentrule\" data-linktype=\"relative-path\">TimeZoneInfo+AdjustmentRule</a> object return a TimeZoneInfo.TransitionTime object.</p>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeZoneInfo_TransitionTime_Day\" data-linktype=\"self-bookmark\">Day</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the day on which the time change occurs.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeZoneInfo_TransitionTime_DayOfWeek\" data-linktype=\"self-bookmark\">DayOfWeek</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the day of the week on which the time change occurs.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeZoneInfo_TransitionTime_IsFixedDateRule\" data-linktype=\"self-bookmark\">IsFixedDateRule</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the time change occurs at a fixed date and time (such as November 1) or a floating date and time (such as the last Sunday of October).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeZoneInfo_TransitionTime_Month\" data-linktype=\"self-bookmark\">Month</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the month in which the time change occurs.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeZoneInfo_TransitionTime_TimeOfDay\" data-linktype=\"self-bookmark\">TimeOfDay</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the hour, minute, and second at which the time change occurs.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeZoneInfo_TransitionTime_Week\" data-linktype=\"self-bookmark\">Week</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the week of the month in which a time change occurs.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeZoneInfo_TransitionTime_CreateFixedDateRule_System_DateTime_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">CreateFixedDateRule(DateTime,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines a time change that uses a fixed-date rule (that is, a time change that occurs on a specific day of a specific month).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeZoneInfo_TransitionTime_CreateFloatingDateRule_System_DateTime_System_Int32_System_Int32_System_DayOfWeek_\" data-linktype=\"self-bookmark\">CreateFloatingDateRule(DateTime,Int32,Int32,DayOfWeek)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines a time change that uses a floating-date rule (that is, a time change that occurs on a specific day of a specific week of a specific month).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeZoneInfo_TransitionTime_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether an object has identical values to the current <a class=\"xref\" href=\"system.timezoneinfo.transitiontime\" data-linktype=\"relative-path\">TimeZoneInfo+TransitionTime</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeZoneInfo_TransitionTime_Equals_System_TimeZoneInfo_TransitionTime_\" data-linktype=\"self-bookmark\">Equals(TimeZoneInfo+TransitionTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the current <a class=\"xref\" href=\"system.timezoneinfo.transitiontime\" data-linktype=\"relative-path\">TimeZoneInfo+TransitionTime</a> object has identical values to a second <a class=\"xref\" href=\"system.timezoneinfo.transitiontime\" data-linktype=\"relative-path\">TimeZoneInfo+TransitionTime</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeZoneInfo_TransitionTime_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Serves as a hash function for hashing algorithms and data structures such as hash tables.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Operators\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeZoneInfo_TransitionTime_op_Equality_System_TimeZoneInfo_TransitionTime_System_TimeZoneInfo_TransitionTime_\" data-linktype=\"self-bookmark\">op_Equality(TimeZoneInfo+TransitionTime,TimeZoneInfo+TransitionTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether two specified <a class=\"xref\" href=\"system.timezoneinfo.transitiontime\" data-linktype=\"relative-path\">TimeZoneInfo+TransitionTime</a> objects are equal.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeZoneInfo_TransitionTime_op_Inequality_System_TimeZoneInfo_TransitionTime_System_TimeZoneInfo_TransitionTime_\" data-linktype=\"self-bookmark\">op_Inequality(TimeZoneInfo+TransitionTime,TimeZoneInfo+TransitionTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether two specified <a class=\"xref\" href=\"system.timezoneinfo.transitiontime\" data-linktype=\"relative-path\">TimeZoneInfo+TransitionTime</a> objects are not equal.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeZoneInfo_TransitionTime_System_Runtime_Serialization_IDeserializationCallback_OnDeserialization_System_Object_\" data-linktype=\"self-bookmark\">IDeserializationCallback.OnDeserialization(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Runs when the deserialization of an object has been completed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeZoneInfo_TransitionTime_System_Runtime_Serialization_ISerializable_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"self-bookmark\">ISerializable.GetObjectData(SerializationInfo,StreamingContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Populates a <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> object with the data that is required to serialize this object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_TimeZoneInfo_TransitionTime_Day\">\r\n    \r\n            <a id=\"System_TimeZoneInfo_TransitionTime_Day_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Day</div>        \r\n          </div>\r\n    \r\n            <p>Gets the day on which the time change occurs.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Day { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The day on which the time change occurs.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Day property returns a valid value only if the <a class=\"xref\" href=\"system.timezoneinfo.transitiontime#System_TimeZoneInfo_TransitionTime_IsFixedDateRule_\" data-linktype=\"relative-path\">IsFixedDateRule</a> property is <code>true</code>.  </p>\n<p> The Day property value corresponds to the value of the <code>day</code> parameter of the <a class=\"xref\" href=\"system.timezoneinfo.transitiontime#System_TimeZoneInfo_TransitionTime_CreateFixedDateRule_\" data-linktype=\"relative-path\">CreateFixedDateRule</a> method. If its value is greater than the number of days in the month of the transition, the transition occurs on the last day of the month.  </p>\n<p> The Day property indicates the day of the month on which a fixed-date rule is applied (for example, April 15). In contrast, the <a class=\"xref\" href=\"system.timezoneinfo.transitiontime#System_TimeZoneInfo_TransitionTime_DayOfWeek_\" data-linktype=\"relative-path\">DayOfWeek</a> property indicates the day of the week on which a floating-date rule is applied (for example, the second Sunday of November).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example enumerates the time zones found on the local computer and displays transition time information for all fixed-date transitions. The time information includes the day on which the time change occurs.  </p>\n<pre><code class=\"lang-cs\" name=\"System.TimeZone2.TransitionTime.Class#3\">   private void GetFixedTransitionTimes()\n   {\n      ReadOnlyCollection&lt;TimeZoneInfo&gt; timeZones = TimeZoneInfo.GetSystemTimeZones();\n      DateTimeFormatInfo dateInfo = CultureInfo.CurrentCulture.DateTimeFormat;\n      foreach (TimeZoneInfo zone in timeZones)\n      {\n         TimeZoneInfo.AdjustmentRule[] adjustmentRules = zone.GetAdjustmentRules();\n         foreach (TimeZoneInfo.AdjustmentRule adjustmentRule in adjustmentRules)\n         {\n            TimeZoneInfo.TransitionTime daylightStart = adjustmentRule.DaylightTransitionStart;\n            if (daylightStart.IsFixedDateRule)\n               Console.WriteLine(&quot;For {0}, daylight savings time begins at {1:t} on {2} {3} from {4:d} to {5:d}.&quot;, \n                                 zone.StandardName, \n                                 daylightStart.TimeOfDay,  \n                                 dateInfo.GetMonthName(daylightStart.Month), \n                                 daylightStart.Day, \n                                 adjustmentRule.DateStart, \n                                 adjustmentRule.DateEnd);\n            TimeZoneInfo.TransitionTime daylightEnd = adjustmentRule.DaylightTransitionEnd;\n            if (daylightEnd.IsFixedDateRule)\n               Console.WriteLine(&quot;For {0}, daylight savings time ends at {1:t} on {2} {3} from {4:d} to {5:d}.&quot;, \n                                 zone.StandardName, \n                                 daylightEnd.TimeOfDay,  \n                                 dateInfo.GetMonthName(daylightEnd.Month), \n                                 daylightEnd.Day, \n                                 adjustmentRule.DateStart, \n                                 adjustmentRule.DateEnd);\n         }\n      }   \n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeZone2.TransitionTime.Class#3\">   Private Sub GetFixedTransitionTimes()\n      Dim timeZones As ReadOnlyCollection(Of TimeZoneInfo) = TimeZoneInfo.GetSystemTimeZones()\n      For Each zone As TimeZoneInfo In timeZones\n         Dim adjustmentRules() As TimeZoneInfo.AdjustmentRule = zone.GetAdjustmentRules()\n         For Each adjustmentRule As TimeZoneInfo.AdjustmentRule in adjustmentRules\n            Dim daylightStart As TimeZoneInfo.TransitionTime = adjustmentRule.DaylightTransitionStart\n            If daylightStart.IsFixedDateRule Then\n               Console.WriteLine(&quot;For {0}, daylight savings time begins at {1:t} on {2} {3} from {4:d} to {5:d}.&quot;, _\n                                 zone.StandardName, _\n                                 daylightStart.TimeOfDay, _ \n                                 MonthName(daylightStart.Month), _\n                                 daylightStart.Day, _\n                                 adjustmentRule.DateStart, _\n                                 adjustmentRule.DateEnd)\n            End If\n            Dim daylightEnd As TimeZoneInfo.TransitionTime = adjustmentRule.DaylightTransitionEnd\n            If daylightEnd.IsFixedDateRule Then\n               Console.WriteLine(&quot;For {0}, daylight savings time ends at {1:t} on {2} {3} from {4:d} to {5:d}.&quot;, _\n                                 zone.StandardName, _\n                                 daylightEnd.TimeOfDay, _ \n                                 MonthName(daylightEnd.Month), _\n                                 daylightEnd.Day, _\n                                 adjustmentRule.DateStart, _\n                                 adjustmentRule.DateEnd)\n            End If   \n         Next\n      Next   \n   End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeZoneInfo_TransitionTime_DayOfWeek\">\r\n    \r\n            <a id=\"System_TimeZoneInfo_TransitionTime_DayOfWeek_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DayOfWeek</div>        \r\n          </div>\r\n    \r\n            <p>Gets the day of the week on which the time change occurs.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public DayOfWeek DayOfWeek { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.dayofweek\" data-linktype=\"relative-path\">DayOfWeek</a></div>\r\n                  </div>\r\n                  <p>The day of the week on which the time change occurs.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The DayOfWeek property returns a valid value only if the <a class=\"xref\" href=\"system.timezoneinfo.transitiontime#System_TimeZoneInfo_TransitionTime_IsFixedDateRule_\" data-linktype=\"relative-path\">IsFixedDateRule</a> property is <code>false</code>.  </p>\n<p> The DayOfWeek property indicates the day of the week on which a floating-date rule is applied (for example, the second Sunday of November). In contrast, the <a class=\"xref\" href=\"system.timezoneinfo.transitiontime#System_TimeZoneInfo_TransitionTime_Day_\" data-linktype=\"relative-path\">Day</a> property indicates the day of the month on which a fixed-date rule is applied (for example, April 15).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example enumerates the time zones found on the local computer and displays transition time information for all floating-date transitions. The time information includes the day of the week on which the time change occurs.  </p>\n<pre><code class=\"lang-cs\" name=\"System.TimeZone2.TransitionTime.Class#4\">   private enum WeekOfMonth\n   {\n      First = 1,\n      Second = 2,\n      Third = 3,\n      Fourth = 4,\n      Last = 5\n   }\n   \n   private void GetFloatingTransitionTimes()\n   {\n      ReadOnlyCollection&lt;TimeZoneInfo&gt; timeZones = TimeZoneInfo.GetSystemTimeZones();\n      foreach (TimeZoneInfo zone in timeZones)\n      {\n         TimeZoneInfo.AdjustmentRule[] adjustmentRules = zone.GetAdjustmentRules();\n         DateTimeFormatInfo dateInfo = CultureInfo.CurrentCulture.DateTimeFormat;\n         foreach (TimeZoneInfo.AdjustmentRule adjustmentRule in adjustmentRules)\n         {\n            TimeZoneInfo.TransitionTime daylightStart = adjustmentRule.DaylightTransitionStart;\n            if (! daylightStart.IsFixedDateRule)\n               Console.WriteLine(&quot;{0}, {1:d}-{2:d}: Begins at {3:t} on the {4} {5} of {6}.&quot;, \n                                 zone.StandardName, \n                                 adjustmentRule.DateStart, \n                                 adjustmentRule.DateEnd,                                 \n                                 daylightStart.TimeOfDay, \n                                 ((WeekOfMonth)daylightStart.Week).ToString(),  \n                                 daylightStart.DayOfWeek.ToString(),\n                                 dateInfo.GetMonthName(daylightStart.Month));\n\n            TimeZoneInfo.TransitionTime daylightEnd = adjustmentRule.DaylightTransitionEnd;\n            if (! daylightEnd.IsFixedDateRule)\n               Console.WriteLine(&quot;{0}, {1:d}-{2:d}: Ends at {3:t} on the {4} {5} of {6}.&quot;, \n                                 zone.StandardName, \n                                 adjustmentRule.DateStart, \n                                 adjustmentRule.DateEnd,                                 \n                                 daylightEnd.TimeOfDay, \n                                 ((WeekOfMonth)daylightEnd.Week).ToString(),  \n                                 daylightEnd.DayOfWeek.ToString(), \n                                 dateInfo.GetMonthName(daylightEnd.Month));\n         }\n      }   \n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeZone2.TransitionTime.Class#4\">   Private Enum WeekOfMonth As Integer\n      First = 1\n      Second = 2\n      Third = 3\n      Fourth = 4\n      Last = 5 \n   End Enum\n   \n   Private Sub GetFloatingTransitionTimes()\n      Dim timeZones As ReadOnlyCollection(Of TimeZoneInfo) = TimeZoneInfo.GetSystemTimeZones()\n      For Each zone As TimeZoneInfo In timeZones\n         Dim adjustmentRules() As TimeZoneInfo.AdjustmentRule = zone.GetAdjustmentRules()\n         For Each adjustmentRule As TimeZoneInfo.AdjustmentRule in adjustmentRules\n            Dim daylightStart As TimeZoneInfo.TransitionTime = adjustmentRule.DaylightTransitionStart\n            If Not daylightStart.IsFixedDateRule Then\n               Console.WriteLine(&quot;{0}, {1:d}-{2:d}: Begins at {3:t} on the {4} {5} of {6}.&quot;, _\n                                 zone.StandardName, _\n                                 adjustmentRule.DateStart, _\n                                 adjustmentRule.DateEnd, _                                 \n                                 daylightStart.TimeOfDay, _\n                                 CType(daylightStart.Week, WeekOfMonth).ToString(), _ \n                                 daylightStart.DayOfWeek.ToString(), _\n                                 MonthName(daylightStart.Month))\n            End If\n            Dim daylightEnd As TimeZoneInfo.TransitionTime = adjustmentRule.DaylightTransitionEnd\n            If Not daylightEnd.IsFixedDateRule Then\n               Console.WriteLine(&quot;{0}, {1:d}-{2:d}: Ends at {3:t} on the {4} {5} of {6}.&quot;, _\n                                 zone.StandardName, _\n                                 adjustmentRule.DateStart, _\n                                 adjustmentRule.DateEnd, _                                 \n                                 daylightEnd.TimeOfDay, _\n                                 CType(daylightEnd.Week, WeekOfMonth).ToString(), _ \n                                 daylightEnd.DayOfWeek.ToString(), _\n                                 MonthName(daylightEnd.Month))\n            End If   \n         Next\n      Next   \n   End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeZoneInfo_TransitionTime_IsFixedDateRule\">\r\n    \r\n            <a id=\"System_TimeZoneInfo_TransitionTime_IsFixedDateRule_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsFixedDateRule</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the time change occurs at a fixed date and time (such as November 1) or a floating date and time (such as the last Sunday of October).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsFixedDateRule { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the time change rule is fixed-date; <code>false</code> if the time change rule is floating-date.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A fixed-date rule indicates that the transition occurs on the same date and time of each year to which the adjustment rule applies. For example, a time change that occurs every November 3 follows a fixed-date rule. A floating-date rule indicates that the transition occurs on a specific day of a specific week of a specific month for each year to which the adjustment rule applies. For example, a time change that occurs on the first Sunday of November follows a floating-date rule.  </p>\n<p> The value of the IsFixedDateRule property determines which properties of a <a class=\"xref\" href=\"system.timezoneinfo.transitiontime\" data-linktype=\"relative-path\">TimeZoneInfo+TransitionTime</a> object have valid values. The following table indicates which properties are affected by the value of the IsFixedDateRule property.  </p>\n<table>\n<thead>\n<tr>\n<th>TransitionTime property</th>\n<th>IsFixedDateRule = true</th>\n<th>IsFixedDateRule = false</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Day</code></td>\n<td>Valid</td>\n<td>Unused</td>\n</tr>\n<tr>\n<td><code>DayOfWeek</code></td>\n<td>Unused</td>\n<td>Valid</td>\n</tr>\n<tr>\n<td><code>Week</code></td>\n<td>Unused</td>\n<td>Valid</td>\n</tr>\n<tr>\n<td><code>Month</code></td>\n<td>Valid</td>\n<td>Valid</td>\n</tr>\n<tr>\n<td><code>TimeOfDay</code></td>\n<td>Valid</td>\n<td>Valid</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example lists the transition times to and from daylight saving time for all time zones that are available on the local system. For time zones with fixed-date rules, it displays transition time information from the properties of the <a class=\"xref\" href=\"system.timezoneinfo.transitiontime\" data-linktype=\"relative-path\">TimeZoneInfo+TransitionTime</a> object. For time zones without fixed-date rules, it uses a <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> object that represents the current system calendar to determine the actual start and end dates of the transition. The example displays the results to the console.  </p>\n<pre><code class=\"lang-cs\" name=\"System.TimeZone2.TransitionTime.Class#5\">   private void GetTransitionTimes(int year)\n   {\n      // Instantiate DateTimeFormatInfo object for month names\n      DateTimeFormatInfo dateFormat = CultureInfo.CurrentCulture.DateTimeFormat;\n\n      // Get and iterate time zones on local computer\n      ReadOnlyCollection&lt;TimeZoneInfo&gt; timeZones = TimeZoneInfo.GetSystemTimeZones();\n      foreach (TimeZoneInfo timeZone in timeZones)\n      {\n         Console.WriteLine(&quot;{0}:&quot;, timeZone.StandardName);\n         TimeZoneInfo.AdjustmentRule[] adjustments = timeZone.GetAdjustmentRules();\n         int startYear = year;\n         int endYear = startYear;\n\n         if (adjustments.Length == 0)\n         {\n            Console.WriteLine(&quot;   No adjustment rules.&quot;);\n         }   \n         else\n         {   \n            TimeZoneInfo.AdjustmentRule adjustment = GetAdjustment(adjustments, year);\n            if (adjustment == null)\n            {\n               Console.WriteLine(&quot;   No adjustment rules available for this year.&quot;);\n               continue;\n            }\n            TimeZoneInfo.TransitionTime startTransition, endTransition;\n            \n            // Determine if starting transition is fixed \n            startTransition = adjustment.DaylightTransitionStart;\n            // Determine if starting transition is fixed and display transition info for year\n            if (startTransition.IsFixedDateRule)\n               Console.WriteLine(&quot;   Begins on {0} {1} at {2:t}&quot;, \n                                 dateFormat.GetMonthName(startTransition.Month), \n                                 startTransition.Day, \n                                 startTransition.TimeOfDay);\n            else\n               DisplayTransitionInfo(startTransition, startYear, &quot;Begins on&quot;);\n\n            // Determine if ending transition is fixed and display transition info for year\n            endTransition = adjustment.DaylightTransitionEnd;\n            \n            // Does the transition back occur in an earlier month (i.e., \n            // the following year) than the transition to DST? If so, make\n            // sure we have the right adjustment rule.\n            if (endTransition.Month &lt; startTransition.Month)\n            {\n               endTransition = GetAdjustment(adjustments, year + 1).DaylightTransitionEnd;\n               endYear++;\n            }\n         \n            if (endTransition.IsFixedDateRule)\n               Console.WriteLine(&quot;   Ends on {0} {1} at {2:t}&quot;, \n                                 dateFormat.GetMonthName(endTransition.Month), \n                                 endTransition.Day, \n                                 endTransition.TimeOfDay);\n            else\n               DisplayTransitionInfo(endTransition, endYear, &quot;Ends on&quot;);\n         }      \n      }   \n   } \n\n\n   private static TimeZoneInfo.AdjustmentRule GetAdjustment(TimeZoneInfo.AdjustmentRule[] adjustments,\n                                                     int year)\n   {                                                  \n      // Iterate adjustment rules for time zone\n      foreach (TimeZoneInfo.AdjustmentRule adjustment in adjustments)\n      {\n         // Determine if this adjustment rule covers year desired\n         if (adjustment.DateStart.Year &lt;= year &amp;&amp; adjustment.DateEnd.Year &gt;= year)\n            return adjustment;\n      }   \n      return null;\n   }\n   \n   private void DisplayTransitionInfo(TimeZoneInfo.TransitionTime transition, int year, string label)\n   {\n      // For non-fixed date rules, get local calendar\n      Calendar cal = CultureInfo.CurrentCulture.Calendar;\n      // Get first day of week for transition\n      // For example, the 3rd week starts no earlier than the 15th of the month\n      int startOfWeek = transition.Week * 7 - 6;\n      // What day of the week does the month start on?\n      int firstDayOfWeek = (int) cal.GetDayOfWeek(new DateTime(year, transition.Month, 1)); \n      // Determine how much start date has to be adjusted\n      int transitionDay; \n      int changeDayOfWeek = (int) transition.DayOfWeek;\n\n      if (firstDayOfWeek &lt;= changeDayOfWeek)\n         transitionDay = startOfWeek + (changeDayOfWeek - firstDayOfWeek);\n      else     \n         transitionDay = startOfWeek + (7 - firstDayOfWeek + changeDayOfWeek);\n\n      // Adjust for months with no fifth week\n      if (transitionDay &gt; cal.GetDaysInMonth(year, transition.Month))  \n         transitionDay -= 7;\n\n      Console.WriteLine(&quot;   {0} {1}, {2:d} at {3:t}&quot;, \n                        label, \n                        transition.DayOfWeek, \n                        new DateTime(year, transition.Month, transitionDay), \n                        transition.TimeOfDay);   \n   }   \n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeZone2.TransitionTime.Class#5\">   Private Sub GetTransitionTimes(year As Integer)\n      &#39; Get and iterate time zones on local computer\n      Dim timeZones As ReadOnlyCollection(Of TimeZoneInfo) = TimeZoneInfo.GetSystemTimeZones()\n      For Each timeZone As TimeZoneInfo In timeZones\n         Console.WriteLine(&quot;{0}:&quot;, timeZone.StandardName)\n         Dim adjustments() As TimeZoneInfo.AdjustmentRule = timeZone.GetAdjustmentRules()\n         Dim startYear As Integer = year\n         Dim endYear As Integer = startYear\n\n         If adjustments.Length = 0 Then\n            Console.WriteLine(&quot;   No adjustment rules.&quot;)\n         Else   \n            Dim adjustment As TimeZoneInfo.AdjustmentRule = GetAdjustment(adjustments, year)\n            If adjustment Is Nothing Then\n               Console.WriteLine(&quot;   No adjustment rules available for this year.&quot;)\n               Continue For\n            End If\n            Dim startTransition, endTransition As TimeZoneInfo.TransitionTime\n\n            &#39; Determine if starting transition is fixed \n            startTransition = adjustment.DaylightTransitionStart\n            &#39; Determine if starting transition is fixed and display transition info for year\n            If startTransition.IsFixedDateRule Then\n               Console.WriteLine(&quot;   Begins on {0} {1} at {2:t}&quot;, _\n                                 MonthName(startTransition.Month), _\n                                 startTransition.Day, _\n                                 startTransition.TimeOfDay)\n            Else\n               DisplayTransitionInfo(startTransition, startYear, &quot;Begins on&quot;)\n            End If    \n\n            &#39; Determine if ending transition is fixed and display transition info for year\n            endTransition = adjustment.DaylightTransitionEnd\n                   \n            &#39; Does the transition back occur in an earlier month (i.e., \n            &#39; the following year) than the transition to DST? If so, make\n            &#39; sure we have the right adjustment rule.\n            If endTransition.Month &lt; startTransition.Month Then\n               endTransition = GetAdjustment(adjustments, year + 1).DaylightTransitionEnd\n               endYear += 1\n            End If\n\n            If endTransition.IsFixedDateRule Then\n               Console.WriteLine(&quot;   Ends on {0} {1} at {2:t}&quot;, _\n                                 MonthName(endTransition.Month), _\n                                 endTransition.Day, _\n                                 endTransition.TimeOfDay)\n            Else\n               DisplayTransitionInfo(endTransition, endYear, &quot;Ends on&quot;)\n            End If    \n         End If   \n      Next \n   End Sub\n\n   Private Function GetAdjustment(adjustments As TimeZoneInfo.AdjustmentRule(), _\n                                  year As Integer) As TimeZoneInfo.AdjustmentRule\n      &#39; Iterate adjustment rules for time zone\n      For Each adjustment As TimeZoneInfo.AdjustmentRule In adjustments\n         &#39; Determine if this adjustment rule covers year desired\n         If adjustment.DateStart.Year &lt;= year And adjustment.DateEnd.Year &gt;= year Then\n            Return adjustment\n         End If\n      Next   \n      Return Nothing\n   End Function\n      \n   Private Sub DisplayTransitionInfo(transition As TimeZoneInfo.TransitionTime, year As Integer, label As String)\n      &#39; For non-fixed date rules, get local calendar\n      Static cal As Calendar = CultureInfo.CurrentCulture.Calendar\n   \n      &#39; Get first day of week for transition\n      &#39; For example, the 3rd week starts no earlier than the 15th of the month\n      Dim startOfWeek As Integer = transition.Week * 7 - 6\n      &#39; What day of the week does the month start on?\n      Dim firstDayOfWeek As Integer = cal.GetDayOfWeek(New Date(year, transition.Month, 1))\n      &#39; Determine how much start date has to be adjusted\n      Dim transitionDay As Integer \n      Dim changeDayOfWeek As Integer = transition.DayOfWeek\n   \n      If firstDayOfWeek &lt;= changeDayOfWeek Then\n         transitionDay = startOfWeek + (changeDayOfWeek - firstDayOfWeek)\n      Else     \n         transitionDay = startOfWeek + (7 - firstDayOfWeek + changeDayOfWeek)\n      End If\n      &#39; Adjust for months with no fifth week\n      If transitionDay &gt; cal.GetDaysInMonth(year, transition.Month) Then  \n         transitionDay -= 7\n      End If\n      Console.WriteLine(&quot;   {0} {1}, {2:d} at {3:t}&quot;, _\n                        label, _\n                        transition.DayOfWeek, _\n                        New DateTime(year, transition.Month, transitionDay), _\n                        transition.TimeOfDay)   \n   End Sub   \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeZoneInfo_TransitionTime_Month\">\r\n    \r\n            <a id=\"System_TimeZoneInfo_TransitionTime_Month_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Month</div>        \r\n          </div>\r\n    \r\n            <p>Gets the month in which the time change occurs.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Month { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The month in which the time change occurs.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Valid values for the Month property range from 1 to 12.  </p>\n<p> The Month property is used for both fixed-date and floating-date rules.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example enumerates the time zones found on the local computer and displays transition time information for all floating-date transitions. The time information includes the month in which the time change occurs.  </p>\n<pre><code class=\"lang-cs\" name=\"System.TimeZone2.TransitionTime.Class#4\">   private enum WeekOfMonth\n   {\n      First = 1,\n      Second = 2,\n      Third = 3,\n      Fourth = 4,\n      Last = 5\n   }\n   \n   private void GetFloatingTransitionTimes()\n   {\n      ReadOnlyCollection&lt;TimeZoneInfo&gt; timeZones = TimeZoneInfo.GetSystemTimeZones();\n      foreach (TimeZoneInfo zone in timeZones)\n      {\n         TimeZoneInfo.AdjustmentRule[] adjustmentRules = zone.GetAdjustmentRules();\n         DateTimeFormatInfo dateInfo = CultureInfo.CurrentCulture.DateTimeFormat;\n         foreach (TimeZoneInfo.AdjustmentRule adjustmentRule in adjustmentRules)\n         {\n            TimeZoneInfo.TransitionTime daylightStart = adjustmentRule.DaylightTransitionStart;\n            if (! daylightStart.IsFixedDateRule)\n               Console.WriteLine(&quot;{0}, {1:d}-{2:d}: Begins at {3:t} on the {4} {5} of {6}.&quot;, \n                                 zone.StandardName, \n                                 adjustmentRule.DateStart, \n                                 adjustmentRule.DateEnd,                                 \n                                 daylightStart.TimeOfDay, \n                                 ((WeekOfMonth)daylightStart.Week).ToString(),  \n                                 daylightStart.DayOfWeek.ToString(),\n                                 dateInfo.GetMonthName(daylightStart.Month));\n\n            TimeZoneInfo.TransitionTime daylightEnd = adjustmentRule.DaylightTransitionEnd;\n            if (! daylightEnd.IsFixedDateRule)\n               Console.WriteLine(&quot;{0}, {1:d}-{2:d}: Ends at {3:t} on the {4} {5} of {6}.&quot;, \n                                 zone.StandardName, \n                                 adjustmentRule.DateStart, \n                                 adjustmentRule.DateEnd,                                 \n                                 daylightEnd.TimeOfDay, \n                                 ((WeekOfMonth)daylightEnd.Week).ToString(),  \n                                 daylightEnd.DayOfWeek.ToString(), \n                                 dateInfo.GetMonthName(daylightEnd.Month));\n         }\n      }   \n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeZone2.TransitionTime.Class#4\">   Private Enum WeekOfMonth As Integer\n      First = 1\n      Second = 2\n      Third = 3\n      Fourth = 4\n      Last = 5 \n   End Enum\n   \n   Private Sub GetFloatingTransitionTimes()\n      Dim timeZones As ReadOnlyCollection(Of TimeZoneInfo) = TimeZoneInfo.GetSystemTimeZones()\n      For Each zone As TimeZoneInfo In timeZones\n         Dim adjustmentRules() As TimeZoneInfo.AdjustmentRule = zone.GetAdjustmentRules()\n         For Each adjustmentRule As TimeZoneInfo.AdjustmentRule in adjustmentRules\n            Dim daylightStart As TimeZoneInfo.TransitionTime = adjustmentRule.DaylightTransitionStart\n            If Not daylightStart.IsFixedDateRule Then\n               Console.WriteLine(&quot;{0}, {1:d}-{2:d}: Begins at {3:t} on the {4} {5} of {6}.&quot;, _\n                                 zone.StandardName, _\n                                 adjustmentRule.DateStart, _\n                                 adjustmentRule.DateEnd, _                                 \n                                 daylightStart.TimeOfDay, _\n                                 CType(daylightStart.Week, WeekOfMonth).ToString(), _ \n                                 daylightStart.DayOfWeek.ToString(), _\n                                 MonthName(daylightStart.Month))\n            End If\n            Dim daylightEnd As TimeZoneInfo.TransitionTime = adjustmentRule.DaylightTransitionEnd\n            If Not daylightEnd.IsFixedDateRule Then\n               Console.WriteLine(&quot;{0}, {1:d}-{2:d}: Ends at {3:t} on the {4} {5} of {6}.&quot;, _\n                                 zone.StandardName, _\n                                 adjustmentRule.DateStart, _\n                                 adjustmentRule.DateEnd, _                                 \n                                 daylightEnd.TimeOfDay, _\n                                 CType(daylightEnd.Week, WeekOfMonth).ToString(), _ \n                                 daylightEnd.DayOfWeek.ToString(), _\n                                 MonthName(daylightEnd.Month))\n            End If   \n         Next\n      Next   \n   End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeZoneInfo_TransitionTime_TimeOfDay\">\r\n    \r\n            <a id=\"System_TimeZoneInfo_TransitionTime_TimeOfDay_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TimeOfDay</div>        \r\n          </div>\r\n    \r\n            <p>Gets the hour, minute, and second at which the time change occurs.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public DateTime TimeOfDay { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>The time of day at which the time change occurs.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For transitions from standard time to daylight saving time, the TimeOfDay value represents the time of the transition in the time zone&#39;s standard time. For transitions from daylight saving time to standard time, it represents the time of the transition in the time zone&#39;s daylight saving time.  </p>\n<p> The TimeOfDay property defines only the time of a time change, but not its date. The date is determined by the <a class=\"xref\" href=\"system.timezoneinfo.transitiontime#System_TimeZoneInfo_TransitionTime_Month_\" data-linktype=\"relative-path\">Month</a> and <a class=\"xref\" href=\"system.timezoneinfo.transitiontime#System_TimeZoneInfo_TransitionTime_Day_\" data-linktype=\"relative-path\">Day</a> properties for fixed-rule changes, and by the <a class=\"xref\" href=\"system.timezoneinfo.transitiontime#System_TimeZoneInfo_TransitionTime_Month_\" data-linktype=\"relative-path\">Month</a>, <a class=\"xref\" href=\"system.timezoneinfo.transitiontime#System_TimeZoneInfo_TransitionTime_Week_\" data-linktype=\"relative-path\">Week</a>, and <a class=\"xref\" href=\"system.timezoneinfo.transitiontime#System_TimeZoneInfo_TransitionTime_DayOfWeek_\" data-linktype=\"relative-path\">DayOfWeek</a> properties for floating-rule changes. The date component of this <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> value is ignored; the value of the year, month, and day is always 1.  </p>\n<p> The TimeOfDay property is used for both fixed-date and floating-date transitions.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example enumerates the time zones found on the local computer and displays transition time information for those time zones that have adjustment rules. The time information includes the time of day at which the time change occurs.  </p>\n<pre><code class=\"lang-cs\" name=\"System.TimeZone2.TransitionTime.Class#6\">   private enum WeekOfMonth\n   {\n      First = 1,\n      Second = 2,\n      Third = 3,\n      Fourth = 4,\n      Last = 5,\n   }\n\n   public void GetAllTransitionTimes()\n   {\n      ReadOnlyCollection&lt;TimeZoneInfo&gt; timeZones = TimeZoneInfo.GetSystemTimeZones();\n      DateTimeFormatInfo dateInfo = CultureInfo.CurrentCulture.DateTimeFormat;\n      \n      foreach (TimeZoneInfo zone in timeZones)\n      {\n         Console.WriteLine(&quot;{0} transition time information:&quot;, zone.StandardName);\n         TimeZoneInfo.AdjustmentRule[] adjustmentRules= zone.GetAdjustmentRules();\n         \n         // Indicate that time zone has no adjustment rules\n         if (adjustmentRules.Length == 0)\n         { \n            Console.WriteLine(&quot;   No adjustment rules defined.&quot;);\n         }   \n         else\n         {\n            // Iterate adjustment rules       \n            foreach (TimeZoneInfo.AdjustmentRule adjustmentRule in adjustmentRules)\n            {\n               Console.WriteLine(&quot;   Adjustment rule from {0:d} to {1:d}:&quot;, \n                                 adjustmentRule.DateStart, \n                                 adjustmentRule.DateEnd);                                 \n               \n               // Get start of transition\n               TimeZoneInfo.TransitionTime daylightStart = adjustmentRule.DaylightTransitionStart;\n               // Display information on fixed date rule\n               if (! daylightStart.IsFixedDateRule)\n                  Console.WriteLine(&quot;      Begins at {0:t} on the {1} {2} of {3}.&quot;, \n                                 daylightStart.TimeOfDay, \n                                 ((WeekOfMonth)daylightStart.Week).ToString(),  \n                                 daylightStart.DayOfWeek.ToString(), \n                                 dateInfo.GetMonthName(daylightStart.Month));\n               // Display information on floating date rule \n               else\n                  Console.WriteLine(&quot;      Begins at {0:t} on the {1} {2} of {3}.&quot;, \n                                    daylightStart.TimeOfDay, \n                                    ((WeekOfMonth)daylightStart.Week).ToString(),  \n                                    daylightStart.DayOfWeek.ToString(), \n                                    dateInfo.GetMonthName(daylightStart.Month));\n               \n               // Get end of transition\n               TimeZoneInfo.TransitionTime daylightEnd = adjustmentRule.DaylightTransitionEnd;\n               // Display information on fixed date rule\n               if (! daylightEnd.IsFixedDateRule)\n                  Console.WriteLine(&quot;      Ends at {0:t} on the {1} {2} of {3}.&quot;, \n                                 daylightEnd.TimeOfDay, \n                                 ((WeekOfMonth)daylightEnd.Week).ToString(),  \n                                 daylightEnd.DayOfWeek.ToString(), \n                                 dateInfo.GetMonthName(daylightEnd.Month));\n               // Display information on floating date rule\n               else\n                  Console.WriteLine(&quot;      Ends at {0:t} on the {1} {2} of {3}.&quot;, \n                                    daylightStart.TimeOfDay, \n                                    ((WeekOfMonth)daylightStart.Week).ToString(),  \n                                    daylightStart.DayOfWeek.ToString(), \n                                    dateInfo.GetMonthName(daylightStart.Month));\n            }\n         }   \n      }   \n   }   \n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeZone2.TransitionTime.Class#6\">   Private Enum WeekOfMonth As Integer\n      First = 1\n      Second = 2\n      Third = 3\n      Fourth = 4\n      Last = 5 \n   End Enum\n   \n   Sub GetAllTransitionTimes()\n      Dim timeZones As ReadOnlyCollection(Of TimeZoneInfo) = TimeZoneInfo.GetSystemTimeZones()\n      For Each zone As TimeZoneInfo In timeZones\n         Console.WriteLine(&quot;{0} transition time information:&quot;, zone.StandardName)\n         Dim adjustmentRules() As TimeZoneInfo.AdjustmentRule = zone.GetAdjustmentRules()\n         \n         &#39; Indicate that time zone has no adjustment rules\n         If adjustmentRules.Length = 0 Then \n            Console.WriteLine(&quot;   No adjustment rules defined.&quot;)\n         Else\n            &#39; Iterate adjustment rules       \n            For Each adjustmentRule As TimeZoneInfo.AdjustmentRule in adjustmentRules\n               Console.WriteLine(&quot;   Adjustment rule from {0:d} to {1:d}:&quot;, _\n                                 adjustmentRule.DateStart, _\n                                 adjustmentRule.DateEnd)                                 \n               \n               &#39; Get start of transition\n               Dim daylightStart As TimeZoneInfo.TransitionTime = adjustmentRule.DaylightTransitionStart\n               &#39; Display information on fixed date rule\n               If Not daylightStart.IsFixedDateRule Then\n                  Console.WriteLine(&quot;      Begins at {0:t} on the {1} {2} of {3}.&quot;, _\n                                 daylightStart.TimeOfDay, _\n                                 CType(daylightStart.Week, WeekOfMonth).ToString(), _ \n                                 daylightStart.DayOfWeek.ToString(), _\n                                 MonthName(daylightStart.Month))\n               &#39; Display information on floating date rule \n               Else\n                  Console.WriteLine(&quot;      Begins at {0:t} on the {1} {2} of {3}.&quot;, _\n                                    daylightStart.TimeOfDay, _\n                                    CType(daylightStart.Week, WeekOfMonth).ToString(), _ \n                                    daylightStart.DayOfWeek.ToString(), _\n                                    MonthName(daylightStart.Month))\n               End If\n               \n               &#39; Get end of transition\n               Dim daylightEnd As TimeZoneInfo.TransitionTime = adjustmentRule.DaylightTransitionEnd\n               &#39; Display information on fixed date rule\n               If Not daylightEnd.IsFixedDateRule Then\n                  Console.WriteLine(&quot;      Ends at {0:t} on the {1} {2} of {3}.&quot;, _\n                                 daylightEnd.TimeOfDay, _\n                                 CType(daylightEnd.Week, WeekOfMonth).ToString(), _ \n                                 daylightEnd.DayOfWeek.ToString(), _\n                                 MonthName(daylightEnd.Month))\n               &#39; Display information on floating date rule\n               Else\n                  Console.WriteLine(&quot;      Ends at {0:t} on the {1} {2} of {3}.&quot;, _\n                                    daylightStart.TimeOfDay, _\n                                    CType(daylightStart.Week, WeekOfMonth).ToString(), _ \n                                    daylightStart.DayOfWeek.ToString(), _\n                                    MonthName(daylightStart.Month))\n               End If                     \n            Next\n         End If   \n      Next   \n   End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeZoneInfo_TransitionTime_Week\">\r\n    \r\n            <a id=\"System_TimeZoneInfo_TransitionTime_Week_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Week</div>        \r\n          </div>\r\n    \r\n            <p>Gets the week of the month in which a time change occurs.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Week { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The week of the month in which the time change occurs.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of the Week property is used only for time changes with floating-date rules. Valid values can range from 1 to 5.  </p>\n<p> The<a class=\"xref\" href=\"system.timezoneinfo.transitiontime#System_TimeZoneInfo_TransitionTime_Month_\" data-linktype=\"relative-path\">Month</a> property defines the month in which the time change occurs. The Week property determines the week on which the transition occurs. The <a class=\"xref\" href=\"system.timezoneinfo.transitiontime#System_TimeZoneInfo_TransitionTime_DayOfWeek_\" data-linktype=\"relative-path\">DayOfWeek</a> property defines the day of the week on which the transition occurs. The value of the Week property is determined as shown in the following table.  </p>\n<table>\n<thead>\n<tr>\n<th>If the Week property value is</th>\n<th>The transition occurs on</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>The first occurrence of the <a class=\"xref\" href=\"system.timezoneinfo.transitiontime#System_TimeZoneInfo_TransitionTime_DayOfWeek_\" data-linktype=\"relative-path\">DayOfWeek</a> value in <a class=\"xref\" href=\"system.timezoneinfo.transitiontime#System_TimeZoneInfo_TransitionTime_Month_\" data-linktype=\"relative-path\">Month</a>.</td>\n</tr>\n<tr>\n<td>2</td>\n<td>The second occurrence of the <a class=\"xref\" href=\"system.timezoneinfo.transitiontime#System_TimeZoneInfo_TransitionTime_DayOfWeek_\" data-linktype=\"relative-path\">DayOfWeek</a> value in <a class=\"xref\" href=\"system.timezoneinfo.transitiontime#System_TimeZoneInfo_TransitionTime_Month_\" data-linktype=\"relative-path\">Month</a>.</td>\n</tr>\n<tr>\n<td>3</td>\n<td>The third occurrence of the <a class=\"xref\" href=\"system.timezoneinfo.transitiontime#System_TimeZoneInfo_TransitionTime_DayOfWeek_\" data-linktype=\"relative-path\">DayOfWeek</a> value in <a class=\"xref\" href=\"system.timezoneinfo.transitiontime#System_TimeZoneInfo_TransitionTime_Month_\" data-linktype=\"relative-path\">Month</a>.</td>\n</tr>\n<tr>\n<td>4</td>\n<td>The fourth occurrence of the <a class=\"xref\" href=\"system.timezoneinfo.transitiontime#System_TimeZoneInfo_TransitionTime_DayOfWeek_\" data-linktype=\"relative-path\">DayOfWeek</a> value in <a class=\"xref\" href=\"system.timezoneinfo.transitiontime#System_TimeZoneInfo_TransitionTime_Month_\" data-linktype=\"relative-path\">Month</a>.</td>\n</tr>\n<tr>\n<td>5</td>\n<td>The last occurrence of the <a class=\"xref\" href=\"system.timezoneinfo.transitiontime#System_TimeZoneInfo_TransitionTime_DayOfWeek_\" data-linktype=\"relative-path\">DayOfWeek</a> value in <a class=\"xref\" href=\"system.timezoneinfo.transitiontime#System_TimeZoneInfo_TransitionTime_Month_\" data-linktype=\"relative-path\">Month</a>.</td>\n</tr>\n</tbody>\n</table>\n<p> For example, if a transition occurs on the first Sunday of March, the value of the Week property is 1. If it occurs on the last Sunday of March, the value of the Week property is 5.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example enumerates the time zones found on the local computer and displays transition time information for all floating-date transitions. The time information includes the week of the month in which the time change occurs. The example also defines a <code>WeekOfMonth</code> enumeration to display a string that represents the ordinal value of the Week property rather than an integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.TimeZone2.TransitionTime.Class#4\">   private enum WeekOfMonth\n   {\n      First = 1,\n      Second = 2,\n      Third = 3,\n      Fourth = 4,\n      Last = 5\n   }\n   \n   private void GetFloatingTransitionTimes()\n   {\n      ReadOnlyCollection&lt;TimeZoneInfo&gt; timeZones = TimeZoneInfo.GetSystemTimeZones();\n      foreach (TimeZoneInfo zone in timeZones)\n      {\n         TimeZoneInfo.AdjustmentRule[] adjustmentRules = zone.GetAdjustmentRules();\n         DateTimeFormatInfo dateInfo = CultureInfo.CurrentCulture.DateTimeFormat;\n         foreach (TimeZoneInfo.AdjustmentRule adjustmentRule in adjustmentRules)\n         {\n            TimeZoneInfo.TransitionTime daylightStart = adjustmentRule.DaylightTransitionStart;\n            if (! daylightStart.IsFixedDateRule)\n               Console.WriteLine(&quot;{0}, {1:d}-{2:d}: Begins at {3:t} on the {4} {5} of {6}.&quot;, \n                                 zone.StandardName, \n                                 adjustmentRule.DateStart, \n                                 adjustmentRule.DateEnd,                                 \n                                 daylightStart.TimeOfDay, \n                                 ((WeekOfMonth)daylightStart.Week).ToString(),  \n                                 daylightStart.DayOfWeek.ToString(),\n                                 dateInfo.GetMonthName(daylightStart.Month));\n\n            TimeZoneInfo.TransitionTime daylightEnd = adjustmentRule.DaylightTransitionEnd;\n            if (! daylightEnd.IsFixedDateRule)\n               Console.WriteLine(&quot;{0}, {1:d}-{2:d}: Ends at {3:t} on the {4} {5} of {6}.&quot;, \n                                 zone.StandardName, \n                                 adjustmentRule.DateStart, \n                                 adjustmentRule.DateEnd,                                 \n                                 daylightEnd.TimeOfDay, \n                                 ((WeekOfMonth)daylightEnd.Week).ToString(),  \n                                 daylightEnd.DayOfWeek.ToString(), \n                                 dateInfo.GetMonthName(daylightEnd.Month));\n         }\n      }   \n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeZone2.TransitionTime.Class#4\">   Private Enum WeekOfMonth As Integer\n      First = 1\n      Second = 2\n      Third = 3\n      Fourth = 4\n      Last = 5 \n   End Enum\n   \n   Private Sub GetFloatingTransitionTimes()\n      Dim timeZones As ReadOnlyCollection(Of TimeZoneInfo) = TimeZoneInfo.GetSystemTimeZones()\n      For Each zone As TimeZoneInfo In timeZones\n         Dim adjustmentRules() As TimeZoneInfo.AdjustmentRule = zone.GetAdjustmentRules()\n         For Each adjustmentRule As TimeZoneInfo.AdjustmentRule in adjustmentRules\n            Dim daylightStart As TimeZoneInfo.TransitionTime = adjustmentRule.DaylightTransitionStart\n            If Not daylightStart.IsFixedDateRule Then\n               Console.WriteLine(&quot;{0}, {1:d}-{2:d}: Begins at {3:t} on the {4} {5} of {6}.&quot;, _\n                                 zone.StandardName, _\n                                 adjustmentRule.DateStart, _\n                                 adjustmentRule.DateEnd, _                                 \n                                 daylightStart.TimeOfDay, _\n                                 CType(daylightStart.Week, WeekOfMonth).ToString(), _ \n                                 daylightStart.DayOfWeek.ToString(), _\n                                 MonthName(daylightStart.Month))\n            End If\n            Dim daylightEnd As TimeZoneInfo.TransitionTime = adjustmentRule.DaylightTransitionEnd\n            If Not daylightEnd.IsFixedDateRule Then\n               Console.WriteLine(&quot;{0}, {1:d}-{2:d}: Ends at {3:t} on the {4} {5} of {6}.&quot;, _\n                                 zone.StandardName, _\n                                 adjustmentRule.DateStart, _\n                                 adjustmentRule.DateEnd, _                                 \n                                 daylightEnd.TimeOfDay, _\n                                 CType(daylightEnd.Week, WeekOfMonth).ToString(), _ \n                                 daylightEnd.DayOfWeek.ToString(), _\n                                 MonthName(daylightEnd.Month))\n            End If   \n         Next\n      Next   \n   End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_TimeZoneInfo_TransitionTime_CreateFixedDateRule_System_DateTime_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_TimeZoneInfo_TransitionTime_CreateFixedDateRule_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateFixedDateRule(DateTime,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Defines a time change that uses a fixed-date rule (that is, a time change that occurs on a specific day of a specific month).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TimeZoneInfo.TransitionTime CreateFixedDateRule (DateTime timeOfDay, int month, int day);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeOfDay</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The time at which the time change occurs. This parameter corresponds to the <span class=\"xref\">stem.TimeZoneInfo.TransitionTime.TimeOfDay*</span> property. For details, see Remarks.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>month</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The month in which the time change occurs. This parameter corresponds to the <span class=\"xref\">stem.TimeZoneInfo.TransitionTime.Month*</span> property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>day</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The day of the month on which the time change occurs. This parameter corresponds to the <span class=\"xref\">stem.TimeZoneInfo.TransitionTime.Day*</span> property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timezoneinfo.transitiontime\" data-linktype=\"relative-path\">TimeZoneInfo+TransitionTime</a></div>\r\n                  </div>\r\n                  <p>Data about the time change.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>timeOfDay</code> parameter has a non-default date component.  </p>\n<p> -or-  </p>\n<p> The <code>timeOfDay</code> parameter&#39;s <span class=\"xref\">stem.DateTime.Kind*</span> property is not <a class=\"xref\" href=\"system.datetimekind\" data-linktype=\"relative-path\">DateTimeKind</a>.  </p>\n<p> -or-  </p>\n<p> The <code>timeOfDay</code> parameter does not represent a whole number of milliseconds.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>month</code> parameter is less than 1 or greater than 12.  </p>\n<p> -or-  </p>\n<p> The <code>day</code> parameter is less than 1 or greater than 31.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method creates a fixed-date rule (that is, a time change that occurs on a specific day of a specific month). For example, a time change that always occurs on October 28 follows a fixed-date rule.  </p>\n<p> For transitions from standard time to daylight saving time, the <code>timeOfDay</code> argument represents the time of the transition in the time zone&#39;s standard time. For transitions from daylight saving time to standard time, it represents the time of the transition in the time zone&#39;s daylight saving time. Note that this is a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> value whose year, month, and date values must all equal 1.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates time zone transitions for an imaginary time zone by using both a fixed-date rule and a floating-date rule. The fixed-date rule defines a time zone adjustment that starts at 2:00 A.M. on March 15 and ends at 3:00 A.M. on November 15 for the years 1900 to 1955.  </p>\n<pre><code class=\"lang-cs\" name=\"System.TimeZone2.TransitionTime.Class#2\">      // Declare necessary TimeZoneInfo.AdjustmentRule objects for time zone\n      TimeZoneInfo imaginaryTZ;\n      TimeSpan delta = new TimeSpan(1, 0, 0);\n      TimeZoneInfo.AdjustmentRule adjustment;\n      List&lt;TimeZoneInfo.AdjustmentRule&gt; adjustmentList = new List&lt;TimeZoneInfo.AdjustmentRule&gt;();\n      // Declare transition time variables to hold transition time information\n      TimeZoneInfo.TransitionTime transitionRuleStart, transitionRuleEnd;\n                            \n      // Define a fictitious new time zone consisting of fixed and floating adjustment rules \n      // Define fixed rule (for 1900-1955)\n      transitionRuleStart = TimeZoneInfo.TransitionTime.CreateFixedDateRule(new DateTime(1, 1, 1, 2, 0, 0), 3, 15);\n      transitionRuleEnd = TimeZoneInfo.TransitionTime.CreateFixedDateRule(new DateTime(1, 1, 1, 3, 0, 0), 11, 15);\n      adjustment = TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule(new DateTime(1900, 1, 1), new DateTime(1955, 12, 31), \n                   delta, transitionRuleStart, transitionRuleEnd);\n      adjustmentList.Add(adjustment);\n      // Define floating rule (for 1956- )\n      transitionRuleStart = TimeZoneInfo.TransitionTime.CreateFloatingDateRule(new DateTime(1, 1, 1, 2, 0, 0), 3, 5, DayOfWeek.Sunday);\n      transitionRuleEnd = TimeZoneInfo.TransitionTime.CreateFloatingDateRule(new DateTime(1, 1, 1, 3, 0, 0), 10, 4, DayOfWeek.Sunday); \n      adjustment = TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule(new DateTime(1956, 1, 1), DateTime.MaxValue.Date, delta, transitionRuleStart, transitionRuleEnd);\n      adjustmentList.Add(adjustment); \n\n      // Create fictitious time zone   \n      imaginaryTZ = TimeZoneInfo.CreateCustomTimeZone(&quot;Fictitious Standard Time&quot;, new TimeSpan(-9, 0, 0), \n                      &quot;(GMT-09:00) Fictitious Time&quot;, &quot;Fictitious Standard Time&quot;, \n                      &quot;Fictitious Daylight Time&quot;, adjustmentList.ToArray());\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeZone2.TransitionTime.Class#2\">      &#39; Declare necessary TimeZoneInfo.AdjustmentRule objects for time zone\n      Dim imaginaryTZ As TimeZoneInfo\n      Dim delta As New TimeSpan(1, 0, 0)\n      Dim adjustment As TimeZoneInfo.AdjustmentRule\n      Dim adjustmentList As New List(Of TimeZoneInfo.AdjustmentRule)\n      &#39; Declare transition time variables to hold transition time information\n      Dim transitionRuleStart, transitionRuleEnd As TimeZoneInfo.TransitionTime\n                            \n      &#39; Define a fictitious new time zone consisting of fixed and floating adjustment rules \n      &#39; Define fixed rule (for 1900-1955)\n      transitionRuleStart = TimeZoneInfo.TransitionTime.CreateFixedDateRule(#2:00:00AM#, 3, 15)\n      transitionRuleEnd = TimeZoneInfo.TransitionTime.CreateFixedDateRule(#3:00:00AM#, 11, 15)\n      adjustment = TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule(#1/1/1900#, #12/31/1955#, delta, _\n                   transitionRuleStart, transitionRuleEnd)\n      adjustmentList.Add(adjustment)\n      &#39; Define floating rule (for 1956- )\n      transitionRuleStart = TimeZoneInfo.TransitionTime.CreateFloatingDateRule(#02:00:00AM#, 3, 5, DayOfWeek.Sunday)\n      transitionRuleEnd = TimeZoneInfo.TransitionTime.CreateFloatingDateRule(#03:00:00AM#, 10, 4, DayOfWeek.Sunday) \n      adjustment = TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule(#01/01/1956#, Date.MaxValue.Date, delta, transitionRuleStart, transitionRuleEnd)\n      adjustmentList.Add(adjustment) \n\n      &#39; Create fictitious time zone   \n      imaginaryTZ = TimeZoneInfo.CreateCustomTimeZone(&quot;Fictitious Standard Time&quot;, New TimeSpan(-9, 0, 0), _\n                      &quot;(GMT-09:00) Fictitious Time&quot;, &quot;Fictitious Standard Time&quot;, _\n                      &quot;Fictitious Daylight Time&quot;, adjustmentList.ToArray())\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeZoneInfo_TransitionTime_CreateFloatingDateRule_System_DateTime_System_Int32_System_Int32_System_DayOfWeek_\">\r\n    \r\n            <a id=\"System_TimeZoneInfo_TransitionTime_CreateFloatingDateRule_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateFloatingDateRule(DateTime,Int32,Int32,DayOfWeek)</div>        \r\n          </div>\r\n    \r\n            <p>Defines a time change that uses a floating-date rule (that is, a time change that occurs on a specific day of a specific week of a specific month).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TimeZoneInfo.TransitionTime CreateFloatingDateRule (DateTime timeOfDay, int month, int week, DayOfWeek dayOfWeek);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeOfDay</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The time at which the time change occurs. This parameter corresponds to the <span class=\"xref\">stem.TimeZoneInfo.TransitionTime.TimeOfDay*</span> property. For details, see Remarks.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>month</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The month in which the time change occurs. This parameter corresponds to the <span class=\"xref\">stem.TimeZoneInfo.TransitionTime.Month*</span> property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>week</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The week of the month in which the time change occurs. Its value can range from 1 to 5, with 5 representing the last week of the month. This parameter corresponds to the <span class=\"xref\">stem.TimeZoneInfo.TransitionTime.Week*</span> property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>dayOfWeek</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.dayofweek\" data-linktype=\"relative-path\">DayOfWeek</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The day of the week on which the time change occurs. This parameter corresponds to the <span class=\"xref\">stem.TimeZoneInfo.TransitionTime.DayOfWeek*</span> property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timezoneinfo.transitiontime\" data-linktype=\"relative-path\">TimeZoneInfo+TransitionTime</a></div>\r\n                  </div>\r\n                  <p>Data about the time change.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>timeOfDay</code> parameter has a non-default date component.  </p>\n<p> -or-  </p>\n<p> The <code>timeOfDay</code> parameter does not represent a whole number of milliseconds.  </p>\n<p> -or-  </p>\n<p> The <code>timeOfDay</code> parameter&#39;s <span class=\"xref\">stem.DateTime.Kind*</span> property is not <a class=\"xref\" href=\"system.datetimekind\" data-linktype=\"relative-path\">DateTimeKind</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>month</code> is less than 1 or greater than 12.  </p>\n<p> -or-  </p>\n<p> <code>week</code> is less than 1 or greater than 5.  </p>\n<p> -or-  </p>\n<p> The <code>dayOfWeek</code> parameter is not a member of the <a class=\"xref\" href=\"system.dayofweek\" data-linktype=\"relative-path\">DayOfWeek</a> enumeration.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method creates a floating-date rule (that is, a time change that occurs on a specific day of a specific week of a specific month). For example, a time change that occurs on the last Sunday of October follows a floating-date rule.  </p>\n<p> For transitions from standard time to daylight saving time, the <code>timeOfDay</code> argument represents the time of the transition in the time zone&#39;s standard time. For transitions from daylight saving time to standard time, it represents the time of the transition in the time zone&#39;s daylight saving time. Note that this is a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> value whose year, month, and date values must all equal 1.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates time zone transitions for an imaginary time zone by using both a fixed-date rule and a floating-date rule. The floating-date rule defines a time zone adjustment that starts at 2:00 A.M. on the last Sunday of March and ends at 3:00 A.M. on the fourth Sunday in October for the years 1956 onward.  </p>\n<pre><code class=\"lang-cs\" name=\"System.TimeZone2.TransitionTime.Class#2\">      // Declare necessary TimeZoneInfo.AdjustmentRule objects for time zone\n      TimeZoneInfo imaginaryTZ;\n      TimeSpan delta = new TimeSpan(1, 0, 0);\n      TimeZoneInfo.AdjustmentRule adjustment;\n      List&lt;TimeZoneInfo.AdjustmentRule&gt; adjustmentList = new List&lt;TimeZoneInfo.AdjustmentRule&gt;();\n      // Declare transition time variables to hold transition time information\n      TimeZoneInfo.TransitionTime transitionRuleStart, transitionRuleEnd;\n                            \n      // Define a fictitious new time zone consisting of fixed and floating adjustment rules \n      // Define fixed rule (for 1900-1955)\n      transitionRuleStart = TimeZoneInfo.TransitionTime.CreateFixedDateRule(new DateTime(1, 1, 1, 2, 0, 0), 3, 15);\n      transitionRuleEnd = TimeZoneInfo.TransitionTime.CreateFixedDateRule(new DateTime(1, 1, 1, 3, 0, 0), 11, 15);\n      adjustment = TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule(new DateTime(1900, 1, 1), new DateTime(1955, 12, 31), \n                   delta, transitionRuleStart, transitionRuleEnd);\n      adjustmentList.Add(adjustment);\n      // Define floating rule (for 1956- )\n      transitionRuleStart = TimeZoneInfo.TransitionTime.CreateFloatingDateRule(new DateTime(1, 1, 1, 2, 0, 0), 3, 5, DayOfWeek.Sunday);\n      transitionRuleEnd = TimeZoneInfo.TransitionTime.CreateFloatingDateRule(new DateTime(1, 1, 1, 3, 0, 0), 10, 4, DayOfWeek.Sunday); \n      adjustment = TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule(new DateTime(1956, 1, 1), DateTime.MaxValue.Date, delta, transitionRuleStart, transitionRuleEnd);\n      adjustmentList.Add(adjustment); \n\n      // Create fictitious time zone   \n      imaginaryTZ = TimeZoneInfo.CreateCustomTimeZone(&quot;Fictitious Standard Time&quot;, new TimeSpan(-9, 0, 0), \n                      &quot;(GMT-09:00) Fictitious Time&quot;, &quot;Fictitious Standard Time&quot;, \n                      &quot;Fictitious Daylight Time&quot;, adjustmentList.ToArray());\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeZone2.TransitionTime.Class#2\">      &#39; Declare necessary TimeZoneInfo.AdjustmentRule objects for time zone\n      Dim imaginaryTZ As TimeZoneInfo\n      Dim delta As New TimeSpan(1, 0, 0)\n      Dim adjustment As TimeZoneInfo.AdjustmentRule\n      Dim adjustmentList As New List(Of TimeZoneInfo.AdjustmentRule)\n      &#39; Declare transition time variables to hold transition time information\n      Dim transitionRuleStart, transitionRuleEnd As TimeZoneInfo.TransitionTime\n                            \n      &#39; Define a fictitious new time zone consisting of fixed and floating adjustment rules \n      &#39; Define fixed rule (for 1900-1955)\n      transitionRuleStart = TimeZoneInfo.TransitionTime.CreateFixedDateRule(#2:00:00AM#, 3, 15)\n      transitionRuleEnd = TimeZoneInfo.TransitionTime.CreateFixedDateRule(#3:00:00AM#, 11, 15)\n      adjustment = TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule(#1/1/1900#, #12/31/1955#, delta, _\n                   transitionRuleStart, transitionRuleEnd)\n      adjustmentList.Add(adjustment)\n      &#39; Define floating rule (for 1956- )\n      transitionRuleStart = TimeZoneInfo.TransitionTime.CreateFloatingDateRule(#02:00:00AM#, 3, 5, DayOfWeek.Sunday)\n      transitionRuleEnd = TimeZoneInfo.TransitionTime.CreateFloatingDateRule(#03:00:00AM#, 10, 4, DayOfWeek.Sunday) \n      adjustment = TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule(#01/01/1956#, Date.MaxValue.Date, delta, transitionRuleStart, transitionRuleEnd)\n      adjustmentList.Add(adjustment) \n\n      &#39; Create fictitious time zone   \n      imaginaryTZ = TimeZoneInfo.CreateCustomTimeZone(&quot;Fictitious Standard Time&quot;, New TimeSpan(-9, 0, 0), _\n                      &quot;(GMT-09:00) Fictitious Time&quot;, &quot;Fictitious Standard Time&quot;, _\n                      &quot;Fictitious Daylight Time&quot;, adjustmentList.ToArray())\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeZoneInfo_TransitionTime_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_TimeZoneInfo_TransitionTime_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether an object has identical values to the current <a class=\"xref\" href=\"system.timezoneinfo.transitiontime\" data-linktype=\"relative-path\">TimeZoneInfo+TransitionTime</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to compare with the current <a class=\"xref\" href=\"system.timezoneinfo.transitiontime\" data-linktype=\"relative-path\">TimeZoneInfo+TransitionTime</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the two objects are equal; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Equality is defined as follows: The <code>obj</code> parameter must be a <a class=\"xref\" href=\"system.timezoneinfo.transitiontime\" data-linktype=\"relative-path\">TimeZoneInfo+TransitionTime</a> object and must have property values identical to the current <a class=\"xref\" href=\"system.timezoneinfo.transitiontime\" data-linktype=\"relative-path\">TimeZoneInfo+TransitionTime</a> object.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates calls to the Equals method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.TimeZone2.TransitionTime.Class#1\">      TimeZoneInfo.TransitionTime tt1 = TimeZoneInfo.TransitionTime.CreateFixedDateRule(new DateTime(1, 1, 1, 02, 00, 00), 11, 03);\n      TimeZoneInfo.TransitionTime tt2 = TimeZoneInfo.TransitionTime.CreateFixedDateRule(new DateTime(1, 1, 1, 02, 00, 00), 11, 03);\n      TimeZoneInfo.TransitionTime tt3 = TimeZoneInfo.TransitionTime.CreateFloatingDateRule(new DateTime(1, 1, 1, 02, 00, 00), 10, 05, DayOfWeek.Sunday);\n      TimeZoneInfo tz = TimeZoneInfo.Local;\n      Console.WriteLine(tt1.Equals(tz));         // Returns False (overload with argument of type Object)\n      Console.WriteLine(tt1.Equals(tt1));        // Returns True (an object always equals itself)\n      Console.WriteLine(tt1.Equals(tt2));        // Returns True (identical property values)\n      Console.WriteLine(tt1.Equals(tt3));        // Returns False (different property values)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeZone2.TransitionTime.Class#1\">      Dim tt1 As TimeZoneInfo.TransitionTime = TimeZoneInfo.TransitionTime.CreateFixedDateRule(#02:00:00AM#, 11, 03)\n      Dim tt2 As TimeZoneInfo.TransitionTime = TimeZoneInfo.TransitionTime.CreateFixedDateRule(#02:00:00AM#, 11, 03)\n      Dim tt3 As TimeZoneInfo.TransitionTime = TimeZoneInfo.TransitionTime.CreateFloatingDateRule(#02:00:00AM#, 10, 05, DayOfWeek.Sunday)\n      Dim tz As TimeZoneInfo = TimeZoneInfo.Local\n      Console.WriteLine(tt1.Equals(tz))          &#39; Returns False (overload with argument of type Object)\n      Console.WriteLine(tt1.Equals(tt1))         &#39; Returns True (an object always equals itself)\n      Console.WriteLine(tt1.Equals(tt2))         &#39; Returns True (identical property values)\n      Console.WriteLine(tt1.Equals(tt3))         &#39; Returns False (different property values)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeZoneInfo_TransitionTime_Equals_System_TimeZoneInfo_TransitionTime_\">\r\n    \r\n            <a id=\"System_TimeZoneInfo_TransitionTime_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(TimeZoneInfo+TransitionTime)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the current <a class=\"xref\" href=\"system.timezoneinfo.transitiontime\" data-linktype=\"relative-path\">TimeZoneInfo+TransitionTime</a> object has identical values to a second <a class=\"xref\" href=\"system.timezoneinfo.transitiontime\" data-linktype=\"relative-path\">TimeZoneInfo+TransitionTime</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Equals (TimeZoneInfo.TransitionTime other);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>other</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timezoneinfo.transitiontime\" data-linktype=\"relative-path\">TimeZoneInfo+TransitionTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to compare to the current instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the two objects have identical property values; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To determine whether the two <a class=\"xref\" href=\"system.timezoneinfo.transitiontime\" data-linktype=\"relative-path\">TimeZoneInfo+TransitionTime</a> objects are equal, this method performs a property-by-property comparison. The method returns <code>true</code> only if the current <a class=\"xref\" href=\"system.timezoneinfo.transitiontime\" data-linktype=\"relative-path\">TimeZoneInfo+TransitionTime</a> object and the <code>other</code> object have identical values for each of the <a class=\"xref\" href=\"system.timezoneinfo.transitiontime\" data-linktype=\"relative-path\">TimeZoneInfo+TransitionTime</a> object&#39;s six property values.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates calls to the Equals method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.TimeZone2.TransitionTime.Class#7\">      TimeZoneInfo.TransitionTime tt1 = TimeZoneInfo.TransitionTime.CreateFixedDateRule(new DateTime(1, 1, 1, 02, 00, 00), 11, 03);\n      TimeZoneInfo.TransitionTime tt2 = TimeZoneInfo.TransitionTime.CreateFixedDateRule(new DateTime(1, 1, 1, 02, 00, 00), 11, 03);\n      TimeZoneInfo.TransitionTime tt3 = TimeZoneInfo.TransitionTime.CreateFloatingDateRule(new DateTime(1, 1, 1, 02, 00, 00), 10, 05, DayOfWeek.Sunday);\n      Console.WriteLine(tt1.Equals(tt1));        // Returns True (an object always equals itself)\n      Console.WriteLine(tt1.Equals(tt2));        // Returns True (identical property values)\n      Console.WriteLine(tt1.Equals(tt3));        // Returns False (different property values)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeZone2.TransitionTime.Class#7\">      Dim tt1 As TimeZoneInfo.TransitionTime = TimeZoneInfo.TransitionTime.CreateFixedDateRule(#02:00:00AM#, 11, 03)\n      Dim tt2 As TimeZoneInfo.TransitionTime = TimeZoneInfo.TransitionTime.CreateFixedDateRule(#02:00:00AM#, 11, 03)\n      Dim tt3 As TimeZoneInfo.TransitionTime = TimeZoneInfo.TransitionTime.CreateFloatingDateRule(#02:00:00AM#, 10, 05, DayOfWeek.Sunday)\n      Console.WriteLine(tt1.Equals(tt1))         &#39; Returns True (an object always equals itself)\n      Console.WriteLine(tt1.Equals(tt2))         &#39; Returns True (identical property values)\n      Console.WriteLine(tt1.Equals(tt3))         &#39; Returns False (different property values)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeZoneInfo_TransitionTime_GetHashCode\">\r\n    \r\n            <a id=\"System_TimeZoneInfo_TransitionTime_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Serves as a hash function for hashing algorithms and data structures such as hash tables.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer that serves as the hash code for this <a class=\"xref\" href=\"system.timezoneinfo.transitiontime\" data-linktype=\"relative-path\">TimeZoneInfo+TransitionTime</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"operators\">\r\n        <h2>Operators\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_TimeZoneInfo_TransitionTime_op_Equality_System_TimeZoneInfo_TransitionTime_System_TimeZoneInfo_TransitionTime_\">\r\n    \r\n            <a id=\"System_TimeZoneInfo_TransitionTime_op_Equality_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Equality(TimeZoneInfo+TransitionTime,TimeZoneInfo+TransitionTime)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether two specified <a class=\"xref\" href=\"system.timezoneinfo.transitiontime\" data-linktype=\"relative-path\">TimeZoneInfo+TransitionTime</a> objects are equal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_Equality (TimeZoneInfo.TransitionTime t1, TimeZoneInfo.TransitionTime t2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timezoneinfo.transitiontime\" data-linktype=\"relative-path\">TimeZoneInfo+TransitionTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timezoneinfo.transitiontime\" data-linktype=\"relative-path\">TimeZoneInfo+TransitionTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>t1</code> and <code>t2</code> have identical values; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Two <a class=\"xref\" href=\"system.timezoneinfo.transitiontime\" data-linktype=\"relative-path\">TimeZoneInfo+TransitionTime</a> objects are equal if they have identical values for each of their six properties. Otherwise, they are unequal.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeZoneInfo_TransitionTime_op_Inequality_System_TimeZoneInfo_TransitionTime_System_TimeZoneInfo_TransitionTime_\">\r\n    \r\n            <a id=\"System_TimeZoneInfo_TransitionTime_op_Inequality_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Inequality(TimeZoneInfo+TransitionTime,TimeZoneInfo+TransitionTime)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether two specified <a class=\"xref\" href=\"system.timezoneinfo.transitiontime\" data-linktype=\"relative-path\">TimeZoneInfo+TransitionTime</a> objects are not equal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_Inequality (TimeZoneInfo.TransitionTime t1, TimeZoneInfo.TransitionTime t2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timezoneinfo.transitiontime\" data-linktype=\"relative-path\">TimeZoneInfo+TransitionTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timezoneinfo.transitiontime\" data-linktype=\"relative-path\">TimeZoneInfo+TransitionTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>t1</code> and <code>t2</code> have any different member values; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Two <a class=\"xref\" href=\"system.timezoneinfo.transitiontime\" data-linktype=\"relative-path\">TimeZoneInfo+TransitionTime</a> objects are unequal if they have different values for any of their six properties. Otherwise, they are equal.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_TimeZoneInfo_TransitionTime_System_Runtime_Serialization_IDeserializationCallback_OnDeserialization_System_Object_\">\r\n    \r\n            <a id=\"System_TimeZoneInfo_TransitionTime_System_Runtime_Serialization_IDeserializationCallback_OnDeserialization_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IDeserializationCallback.OnDeserialization(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Runs when the deserialization of an object has been completed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void IDeserializationCallback.OnDeserialization (object sender);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>sender</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object that initiated the callback. The functionality for this parameter is not currently implemented.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeZoneInfo_TransitionTime_System_Runtime_Serialization_ISerializable_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\">\r\n    \r\n            <a id=\"System_TimeZoneInfo_TransitionTime_System_Runtime_Serialization_ISerializable_GetObjectData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ISerializable.GetObjectData(SerializationInfo,StreamingContext)</div>        \r\n          </div>\r\n    \r\n            <p>Populates a <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> object with the data that is required to serialize this object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>info</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to populate with data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>context</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The destination for this serialization (see <a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a>).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.TimeZoneInfo.TransitionTime.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.TimeZoneInfo.TransitionTime.yml\">\r\n<meta name=\"APIName\" content=\"System.TimeZoneInfo+TransitionTime\">\r\n<meta name=\"APIName\" content=\"System.TimeZoneInfo+TransitionTime.CreateFixedDateRule\">\r\n<meta name=\"APIName\" content=\"System.TimeZoneInfo+TransitionTime.CreateFloatingDateRule\">\r\n<meta name=\"APIName\" content=\"System.TimeZoneInfo+TransitionTime.Day\">\r\n<meta name=\"APIName\" content=\"System.TimeZoneInfo+TransitionTime.DayOfWeek\">\r\n<meta name=\"APIName\" content=\"System.TimeZoneInfo+TransitionTime.Equals\">\r\n<meta name=\"APIName\" content=\"System.TimeZoneInfo+TransitionTime.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.TimeZoneInfo+TransitionTime.IsFixedDateRule\">\r\n<meta name=\"APIName\" content=\"System.TimeZoneInfo+TransitionTime.Month\">\r\n<meta name=\"APIName\" content=\"System.TimeZoneInfo+TransitionTime.op_Equality\">\r\n<meta name=\"APIName\" content=\"System.TimeZoneInfo+TransitionTime.op_op_Equality\">\r\n<meta name=\"APIName\" content=\"System.TimeZoneInfo+TransitionTime.op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.TimeZoneInfo+TransitionTime.op_op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.TimeZoneInfo+TransitionTime.IDeserializationCallback.OnDeserialization\">\r\n<meta name=\"APIName\" content=\"System.TimeZoneInfo+TransitionTime.ISerializable.GetObjectData\">\r\n<meta name=\"APIName\" content=\"System.TimeZoneInfo+TransitionTime.TimeOfDay\">\r\n<meta name=\"APIName\" content=\"System.TimeZoneInfo+TransitionTime.Week\">\r\n<meta name=\"APILocation\" content=\"System.Core.dll\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"a1e28769-718a-4ed6-7696-6745ef170aaf\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides information about a specific time change, such as the change from daylight saving time to standard time or vice versa, in a particular time zone.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.TimeZoneInfo.TransitionTime\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.TimeZoneInfo.TransitionTime.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.TimeZoneInfo.TransitionTime.yml","open_to_public_contributors":true,"api_name":["System.TimeZoneInfo+TransitionTime","System.TimeZoneInfo+TransitionTime.CreateFixedDateRule","System.TimeZoneInfo+TransitionTime.CreateFloatingDateRule","System.TimeZoneInfo+TransitionTime.Day","System.TimeZoneInfo+TransitionTime.DayOfWeek","System.TimeZoneInfo+TransitionTime.Equals","System.TimeZoneInfo+TransitionTime.GetHashCode","System.TimeZoneInfo+TransitionTime.IsFixedDateRule","System.TimeZoneInfo+TransitionTime.Month","System.TimeZoneInfo+TransitionTime.op_Equality","System.TimeZoneInfo+TransitionTime.op_op_Equality","System.TimeZoneInfo+TransitionTime.op_Inequality","System.TimeZoneInfo+TransitionTime.op_op_Inequality","System.TimeZoneInfo+TransitionTime.IDeserializationCallback.OnDeserialization","System.TimeZoneInfo+TransitionTime.ISerializable.GetObjectData","System.TimeZoneInfo+TransitionTime.TimeOfDay","System.TimeZoneInfo+TransitionTime.Week"],"api_location":["System.Core.dll","mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.TimeZoneInfo.TransitionTime","System::TimeZoneInfo::TransitionTime","System.TimeZoneInfo.TransitionTime.CreateFixedDateRule","System::TimeZoneInfo::TransitionTime::CreateFixedDateRule","System.TimeZoneInfo.TransitionTime.CreateFloatingDateRule","System::TimeZoneInfo::TransitionTime::CreateFloatingDateRule","System.TimeZoneInfo.TransitionTime.Day","System::TimeZoneInfo::TransitionTime::Day","System.TimeZoneInfo.TransitionTime.DayOfWeek","System::TimeZoneInfo::TransitionTime::DayOfWeek","System.TimeZoneInfo.TransitionTime.Equals","System::TimeZoneInfo::TransitionTime::Equals","System.TimeZoneInfo.TransitionTime.GetHashCode","System::TimeZoneInfo::TransitionTime::GetHashCode","System.TimeZoneInfo.TransitionTime.IsFixedDateRule","System::TimeZoneInfo::TransitionTime::IsFixedDateRule","System.TimeZoneInfo.TransitionTime.Month","System::TimeZoneInfo::TransitionTime::Month","System.TimeZoneInfo.TransitionTime.op_Equality","System::TimeZoneInfo::TransitionTime::op_Equality","System.TimeZoneInfo.TransitionTime.op_Inequality","System::TimeZoneInfo::TransitionTime::op_Inequality","System.TimeZoneInfo.TransitionTime.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization","System::TimeZoneInfo::TransitionTime::System#Runtime#Serialization#IDeserializationCallback#OnDeserialization","System.TimeZoneInfo.TransitionTime.System#Runtime#Serialization#ISerializable#GetObjectData","System::TimeZoneInfo::TransitionTime::System#Runtime#Serialization#ISerializable#GetObjectData","System.TimeZoneInfo.TransitionTime.TimeOfDay","System::TimeZoneInfo::TransitionTime::TimeOfDay","System.TimeZoneInfo.TransitionTime.Week","System::TimeZoneInfo::TransitionTime::Week"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"a1e28769-718a-4ed6-7696-6745ef170aaf","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/TimeZoneInfo+TransitionTime.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"TimeZoneInfo+TransitionTime struct | Microsoft Docs","_op_ogTitle":"TimeZoneInfo+TransitionTime struct","description":"Provides information about a specific time change, such as the change from daylight saving time to standard time or vice versa, in a particular time zone.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.TimeZoneInfo.TransitionTime","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.timezoneinfo.transitiontime","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.timezoneinfo.transitiontime","fileRelativePath":"System.TimeZoneInfo.TransitionTime.html"},"themesRelativePathToOutputRoot":"_themes/"}