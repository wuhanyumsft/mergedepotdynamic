{"content":"    \r\n    <h1 id=\"System_IO_Log_FileRegion\">\r\n      <span class=\"lang-csharp\">FileRegion</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a region of a file to be archived. This class cannot be inherited.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public sealed class FileRegion</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">FileRegion</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>A <a class=\"xref\" href=\"system.io.log.logarchivesnapshot\" data-linktype=\"relative-path\">LogArchiveSnapshot</a> object contains the information necessary to generate a consistent backup of the data in a <a class=\"xref\" href=\"system.io.log.logstore\" data-linktype=\"relative-path\">LogStore</a>. The actual data is contained in the enumerable collection of FileRegion objects returned by the <a class=\"xref\" href=\"system.io.log.logarchivesnapshot#System_IO_Log_LogArchiveSnapshot_ArchiveRegions_\" data-linktype=\"relative-path\">ArchiveRegions</a> property. Each FileRegion instance represents a sequence of bytes in a file that must be archived.</p>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Log_FileRegion_FileLength\" data-linktype=\"self-bookmark\">FileLength</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the length of the file in bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Log_FileRegion_Offset\" data-linktype=\"self-bookmark\">Offset</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the offset into the file where the data begins.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Log_FileRegion_Path\" data-linktype=\"self-bookmark\">Path</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the fully qualified location of the file containing this region.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Log_FileRegion_GetStream\" data-linktype=\"self-bookmark\">GetStream()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a stream that can be used to read the data to be archived.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Log_FileRegion_FileLength\">\r\n    \r\n            <a id=\"System_IO_Log_FileRegion_FileLength_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FileLength</div>        \r\n          </div>\r\n    \r\n            <p>Gets the length of the file in bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public long FileLength { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The length of the file in bytes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property returns the length of the entire file instead of that of a single region in the file. The length of the region in the file can be found by examining the <a class=\"xref\" href=\"system.io.log.logstore#System_IO_Log_LogStore_Length_\" data-linktype=\"relative-path\">Length</a> property of the stream returned by the <a class=\"xref\" href=\"system.io.log.fileregion#System_IO_Log_FileRegion_GetStream_\" data-linktype=\"relative-path\">GetStream</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to archive a log store to XML using the <a class=\"xref\" href=\"system.io.log.logstore\" data-linktype=\"relative-path\">LogStore</a> and <a class=\"xref\" href=\"system.io.log.fileregion\" data-linktype=\"relative-path\">FileRegion</a> classes.  </p>\n<pre><code class=\"lang-vb\" name=\"FileRegion#0\">Friend Class LogBackup\n\tPrivate Shared Sub ArchiveToXML(ByVal logStore As LogStore, ByVal fileName As String)\n\n\n\t\tDim snapshot As LogArchiveSnapshot = logStore.CreateLogArchiveSnapshot()\n\t\t\tDim writer As New XmlTextWriter(fileName, System.Text.Encoding.ASCII)\n\t\t\twriter.WriteStartElement(&quot;logArchive&quot;)\n\n        For Each region As FileRegion In snapshot.ArchiveRegions\n            With writer\n                .WriteStartElement(&quot;fileRegion&quot;)\n                .WriteElementString(&quot;path&quot;, region.Path)\n                .WriteElementString(&quot;length&quot;, region.FileLength.ToString())\n                .WriteElementString(&quot;offset&quot;, region.Offset.ToString())\n            End With\n\n            Using dataStream As Stream = region.GetStream()\n                Dim data(dataStream.Length - 1) As Byte\n                dataStream.Read(data, 0, data.Length)\n\n                writer.WriteElementString(&quot;data&quot;, System.Convert.ToBase64String(data))\n            End Using\n\n            writer.WriteEndElement()\n        Next region\n\n\t\t\twriter.Close()\n\t\t\tlogStore.SetArchiveTail(snapshot.LastSequenceNumber)\n\tEnd Sub\n\n\tPrivate Shared Sub RestoreFromXML(ByVal fileName As String)\n\t\tUsing reader As New XmlTextReader(fileName)\n\t\t\treader.ReadStartElement(&quot;logArchive&quot;)\n\t\t\tDo While reader.IsStartElement()\n\t\t\t\tDim path As String\n\t\t\t\tDim length As Long\n\t\t\t\tDim offset As Long\n\t\t\t\tpath = reader.ReadElementString(&quot;path&quot;)\n\t\t\t\tlength = System.Int64.Parse(reader.ReadElementString(&quot;length&quot;))\n\t\t\t\toffset = System.Int64.Parse(reader.ReadElementString(&quot;offset&quot;))\n                Dim dataString = reader.ReadElementString(&quot;data&quot;)\n                Dim data() = System.Convert.FromBase64String(dataString)\n\t\t\t\tDim fileStream As FileStream\n\t\t\t\tfileStream = New FileStream(path, FileMode.OpenOrCreate, FileAccess.Write)\n\t\t\t\tUsing fileStream\n\t\t\t\t\tfileStream.SetLength(length)\n\t\t\t\t\tfileStream.Position = offset\n\t\t\t\t\tfileStream.Write(data, 0, data.Length)\n\t\t\t\tEnd Using\n\t\t\tLoop\n\t\t\treader.ReadEndElement()\n\t\tEnd Using\n\tEnd Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"FileRegion#0\">class LogBackup\n{\n    static void ArchiveToXML(LogStore logStore, string fileName)\n    {\n        \n\n        LogArchiveSnapshot snapshot = logStore.CreateLogArchiveSnapshot();\n        {\n            XmlTextWriter writer = new XmlTextWriter(fileName, System.Text.Encoding.ASCII);\n            writer.WriteStartElement(&quot;logArchive&quot;);\n\n            foreach (FileRegion region in snapshot.ArchiveRegions)\n            {\n                writer.WriteStartElement(&quot;fileRegion&quot;);\n                writer.WriteElementString(&quot;path&quot;,\n                                          region.Path);\n                writer.WriteElementString(&quot;length&quot;,\n                                        region.FileLength.ToString());\n                writer.WriteElementString(&quot;offset&quot;,\n                                          region.Offset.ToString());\n\n                using (Stream dataStream = region.GetStream())\n                {\n                    byte[] data = new byte[dataStream.Length];\n                    dataStream.Read(data, 0, data.Length);\n\n                    writer.WriteElementString(&quot;data&quot;, System.Convert.ToBase64String(data));\n                }\n\n                writer.WriteEndElement();\n            }\n\n            writer.Close();\n            logStore.SetArchiveTail(snapshot.LastSequenceNumber);\n        }\n    }\n\n    static void RestoreFromXML(string fileName)\n    {\n        using (XmlTextReader reader = new XmlTextReader(fileName))\n        {\n            reader.ReadStartElement(&quot;logArchive&quot;);\n            while (reader.IsStartElement())\n            {\n                string path;\n                long length;\n                long offset;\n                path = reader.ReadElementString(&quot;path&quot;);\n                length = System.Int64.Parse(reader.ReadElementString(&quot;length&quot;));\n                offset = System.Int64.Parse(reader.ReadElementString(&quot;offset&quot;));\n                string dataString = reader.ReadElementString(&quot;data&quot;);\n                byte[] data = System.Convert.FromBase64String(dataString);\n                FileStream fileStream;\n                using (fileStream = new FileStream(path,\n                                              FileMode.OpenOrCreate,\n                                              FileAccess.Write))\n                {\n                    fileStream.SetLength(length);\n                    fileStream.Position = offset;\n                    fileStream.Write(data, 0, data.Length);\n                }\n            }\n            reader.ReadEndElement();\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Log_FileRegion_Offset\">\r\n    \r\n            <a id=\"System_IO_Log_FileRegion_Offset_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Offset</div>        \r\n          </div>\r\n    \r\n            <p>Gets the offset into the file where the data begins.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public long Offset { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The offset into the file where the data begins.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to archive a log store to XML using the <a class=\"xref\" href=\"system.io.log.logstore\" data-linktype=\"relative-path\">LogStore</a> and <a class=\"xref\" href=\"system.io.log.fileregion\" data-linktype=\"relative-path\">FileRegion</a> classes.  </p>\n<pre><code class=\"lang-vb\" name=\"FileRegion#0\">Friend Class LogBackup\n\tPrivate Shared Sub ArchiveToXML(ByVal logStore As LogStore, ByVal fileName As String)\n\n\n\t\tDim snapshot As LogArchiveSnapshot = logStore.CreateLogArchiveSnapshot()\n\t\t\tDim writer As New XmlTextWriter(fileName, System.Text.Encoding.ASCII)\n\t\t\twriter.WriteStartElement(&quot;logArchive&quot;)\n\n        For Each region As FileRegion In snapshot.ArchiveRegions\n            With writer\n                .WriteStartElement(&quot;fileRegion&quot;)\n                .WriteElementString(&quot;path&quot;, region.Path)\n                .WriteElementString(&quot;length&quot;, region.FileLength.ToString())\n                .WriteElementString(&quot;offset&quot;, region.Offset.ToString())\n            End With\n\n            Using dataStream As Stream = region.GetStream()\n                Dim data(dataStream.Length - 1) As Byte\n                dataStream.Read(data, 0, data.Length)\n\n                writer.WriteElementString(&quot;data&quot;, System.Convert.ToBase64String(data))\n            End Using\n\n            writer.WriteEndElement()\n        Next region\n\n\t\t\twriter.Close()\n\t\t\tlogStore.SetArchiveTail(snapshot.LastSequenceNumber)\n\tEnd Sub\n\n\tPrivate Shared Sub RestoreFromXML(ByVal fileName As String)\n\t\tUsing reader As New XmlTextReader(fileName)\n\t\t\treader.ReadStartElement(&quot;logArchive&quot;)\n\t\t\tDo While reader.IsStartElement()\n\t\t\t\tDim path As String\n\t\t\t\tDim length As Long\n\t\t\t\tDim offset As Long\n\t\t\t\tpath = reader.ReadElementString(&quot;path&quot;)\n\t\t\t\tlength = System.Int64.Parse(reader.ReadElementString(&quot;length&quot;))\n\t\t\t\toffset = System.Int64.Parse(reader.ReadElementString(&quot;offset&quot;))\n                Dim dataString = reader.ReadElementString(&quot;data&quot;)\n                Dim data() = System.Convert.FromBase64String(dataString)\n\t\t\t\tDim fileStream As FileStream\n\t\t\t\tfileStream = New FileStream(path, FileMode.OpenOrCreate, FileAccess.Write)\n\t\t\t\tUsing fileStream\n\t\t\t\t\tfileStream.SetLength(length)\n\t\t\t\t\tfileStream.Position = offset\n\t\t\t\t\tfileStream.Write(data, 0, data.Length)\n\t\t\t\tEnd Using\n\t\t\tLoop\n\t\t\treader.ReadEndElement()\n\t\tEnd Using\n\tEnd Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"FileRegion#0\">class LogBackup\n{\n    static void ArchiveToXML(LogStore logStore, string fileName)\n    {\n        \n\n        LogArchiveSnapshot snapshot = logStore.CreateLogArchiveSnapshot();\n        {\n            XmlTextWriter writer = new XmlTextWriter(fileName, System.Text.Encoding.ASCII);\n            writer.WriteStartElement(&quot;logArchive&quot;);\n\n            foreach (FileRegion region in snapshot.ArchiveRegions)\n            {\n                writer.WriteStartElement(&quot;fileRegion&quot;);\n                writer.WriteElementString(&quot;path&quot;,\n                                          region.Path);\n                writer.WriteElementString(&quot;length&quot;,\n                                        region.FileLength.ToString());\n                writer.WriteElementString(&quot;offset&quot;,\n                                          region.Offset.ToString());\n\n                using (Stream dataStream = region.GetStream())\n                {\n                    byte[] data = new byte[dataStream.Length];\n                    dataStream.Read(data, 0, data.Length);\n\n                    writer.WriteElementString(&quot;data&quot;, System.Convert.ToBase64String(data));\n                }\n\n                writer.WriteEndElement();\n            }\n\n            writer.Close();\n            logStore.SetArchiveTail(snapshot.LastSequenceNumber);\n        }\n    }\n\n    static void RestoreFromXML(string fileName)\n    {\n        using (XmlTextReader reader = new XmlTextReader(fileName))\n        {\n            reader.ReadStartElement(&quot;logArchive&quot;);\n            while (reader.IsStartElement())\n            {\n                string path;\n                long length;\n                long offset;\n                path = reader.ReadElementString(&quot;path&quot;);\n                length = System.Int64.Parse(reader.ReadElementString(&quot;length&quot;));\n                offset = System.Int64.Parse(reader.ReadElementString(&quot;offset&quot;));\n                string dataString = reader.ReadElementString(&quot;data&quot;);\n                byte[] data = System.Convert.FromBase64String(dataString);\n                FileStream fileStream;\n                using (fileStream = new FileStream(path,\n                                              FileMode.OpenOrCreate,\n                                              FileAccess.Write))\n                {\n                    fileStream.SetLength(length);\n                    fileStream.Position = offset;\n                    fileStream.Write(data, 0, data.Length);\n                }\n            }\n            reader.ReadEndElement();\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Log_FileRegion_Path\">\r\n    \r\n            <a id=\"System_IO_Log_FileRegion_Path_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Path</div>        \r\n          </div>\r\n    \r\n            <p>Gets the fully qualified location of the file containing this region.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Path { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The fully qualified location of the file containing this region.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to archive a log store to XML using the <a class=\"xref\" href=\"system.io.log.logstore\" data-linktype=\"relative-path\">LogStore</a> and <a class=\"xref\" href=\"system.io.log.fileregion\" data-linktype=\"relative-path\">FileRegion</a> classes.  </p>\n<pre><code class=\"lang-vb\" name=\"FileRegion#0\">Friend Class LogBackup\n\tPrivate Shared Sub ArchiveToXML(ByVal logStore As LogStore, ByVal fileName As String)\n\n\n\t\tDim snapshot As LogArchiveSnapshot = logStore.CreateLogArchiveSnapshot()\n\t\t\tDim writer As New XmlTextWriter(fileName, System.Text.Encoding.ASCII)\n\t\t\twriter.WriteStartElement(&quot;logArchive&quot;)\n\n        For Each region As FileRegion In snapshot.ArchiveRegions\n            With writer\n                .WriteStartElement(&quot;fileRegion&quot;)\n                .WriteElementString(&quot;path&quot;, region.Path)\n                .WriteElementString(&quot;length&quot;, region.FileLength.ToString())\n                .WriteElementString(&quot;offset&quot;, region.Offset.ToString())\n            End With\n\n            Using dataStream As Stream = region.GetStream()\n                Dim data(dataStream.Length - 1) As Byte\n                dataStream.Read(data, 0, data.Length)\n\n                writer.WriteElementString(&quot;data&quot;, System.Convert.ToBase64String(data))\n            End Using\n\n            writer.WriteEndElement()\n        Next region\n\n\t\t\twriter.Close()\n\t\t\tlogStore.SetArchiveTail(snapshot.LastSequenceNumber)\n\tEnd Sub\n\n\tPrivate Shared Sub RestoreFromXML(ByVal fileName As String)\n\t\tUsing reader As New XmlTextReader(fileName)\n\t\t\treader.ReadStartElement(&quot;logArchive&quot;)\n\t\t\tDo While reader.IsStartElement()\n\t\t\t\tDim path As String\n\t\t\t\tDim length As Long\n\t\t\t\tDim offset As Long\n\t\t\t\tpath = reader.ReadElementString(&quot;path&quot;)\n\t\t\t\tlength = System.Int64.Parse(reader.ReadElementString(&quot;length&quot;))\n\t\t\t\toffset = System.Int64.Parse(reader.ReadElementString(&quot;offset&quot;))\n                Dim dataString = reader.ReadElementString(&quot;data&quot;)\n                Dim data() = System.Convert.FromBase64String(dataString)\n\t\t\t\tDim fileStream As FileStream\n\t\t\t\tfileStream = New FileStream(path, FileMode.OpenOrCreate, FileAccess.Write)\n\t\t\t\tUsing fileStream\n\t\t\t\t\tfileStream.SetLength(length)\n\t\t\t\t\tfileStream.Position = offset\n\t\t\t\t\tfileStream.Write(data, 0, data.Length)\n\t\t\t\tEnd Using\n\t\t\tLoop\n\t\t\treader.ReadEndElement()\n\t\tEnd Using\n\tEnd Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"FileRegion#0\">class LogBackup\n{\n    static void ArchiveToXML(LogStore logStore, string fileName)\n    {\n        \n\n        LogArchiveSnapshot snapshot = logStore.CreateLogArchiveSnapshot();\n        {\n            XmlTextWriter writer = new XmlTextWriter(fileName, System.Text.Encoding.ASCII);\n            writer.WriteStartElement(&quot;logArchive&quot;);\n\n            foreach (FileRegion region in snapshot.ArchiveRegions)\n            {\n                writer.WriteStartElement(&quot;fileRegion&quot;);\n                writer.WriteElementString(&quot;path&quot;,\n                                          region.Path);\n                writer.WriteElementString(&quot;length&quot;,\n                                        region.FileLength.ToString());\n                writer.WriteElementString(&quot;offset&quot;,\n                                          region.Offset.ToString());\n\n                using (Stream dataStream = region.GetStream())\n                {\n                    byte[] data = new byte[dataStream.Length];\n                    dataStream.Read(data, 0, data.Length);\n\n                    writer.WriteElementString(&quot;data&quot;, System.Convert.ToBase64String(data));\n                }\n\n                writer.WriteEndElement();\n            }\n\n            writer.Close();\n            logStore.SetArchiveTail(snapshot.LastSequenceNumber);\n        }\n    }\n\n    static void RestoreFromXML(string fileName)\n    {\n        using (XmlTextReader reader = new XmlTextReader(fileName))\n        {\n            reader.ReadStartElement(&quot;logArchive&quot;);\n            while (reader.IsStartElement())\n            {\n                string path;\n                long length;\n                long offset;\n                path = reader.ReadElementString(&quot;path&quot;);\n                length = System.Int64.Parse(reader.ReadElementString(&quot;length&quot;));\n                offset = System.Int64.Parse(reader.ReadElementString(&quot;offset&quot;));\n                string dataString = reader.ReadElementString(&quot;data&quot;);\n                byte[] data = System.Convert.FromBase64String(dataString);\n                FileStream fileStream;\n                using (fileStream = new FileStream(path,\n                                              FileMode.OpenOrCreate,\n                                              FileAccess.Write))\n                {\n                    fileStream.SetLength(length);\n                    fileStream.Position = offset;\n                    fileStream.Write(data, 0, data.Length);\n                }\n            }\n            reader.ReadEndElement();\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Log_FileRegion_GetStream\">\r\n    \r\n            <a id=\"System_IO_Log_FileRegion_GetStream_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetStream()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a stream that can be used to read the data to be archived.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.IO.Stream GetStream ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </div>\r\n                  <p>A stream that contains the data to be archived.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>The request could not be performed because of an unexpected I/O exception.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The operation is not supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The method was called after the sequence has been disposed of.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a></div>\r\n                  </div>\r\n                  <p>There is not enough memory to continue the execution of the program.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>Access for the specified log store is denied by the operating system.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to archive a log store to XML using the <a class=\"xref\" href=\"system.io.log.logstore\" data-linktype=\"relative-path\">LogStore</a> and <a class=\"xref\" href=\"system.io.log.fileregion\" data-linktype=\"relative-path\">FileRegion</a> classes.  </p>\n<pre><code class=\"lang-vb\" name=\"FileRegion#0\">Friend Class LogBackup\n\tPrivate Shared Sub ArchiveToXML(ByVal logStore As LogStore, ByVal fileName As String)\n\n\n\t\tDim snapshot As LogArchiveSnapshot = logStore.CreateLogArchiveSnapshot()\n\t\t\tDim writer As New XmlTextWriter(fileName, System.Text.Encoding.ASCII)\n\t\t\twriter.WriteStartElement(&quot;logArchive&quot;)\n\n        For Each region As FileRegion In snapshot.ArchiveRegions\n            With writer\n                .WriteStartElement(&quot;fileRegion&quot;)\n                .WriteElementString(&quot;path&quot;, region.Path)\n                .WriteElementString(&quot;length&quot;, region.FileLength.ToString())\n                .WriteElementString(&quot;offset&quot;, region.Offset.ToString())\n            End With\n\n            Using dataStream As Stream = region.GetStream()\n                Dim data(dataStream.Length - 1) As Byte\n                dataStream.Read(data, 0, data.Length)\n\n                writer.WriteElementString(&quot;data&quot;, System.Convert.ToBase64String(data))\n            End Using\n\n            writer.WriteEndElement()\n        Next region\n\n\t\t\twriter.Close()\n\t\t\tlogStore.SetArchiveTail(snapshot.LastSequenceNumber)\n\tEnd Sub\n\n\tPrivate Shared Sub RestoreFromXML(ByVal fileName As String)\n\t\tUsing reader As New XmlTextReader(fileName)\n\t\t\treader.ReadStartElement(&quot;logArchive&quot;)\n\t\t\tDo While reader.IsStartElement()\n\t\t\t\tDim path As String\n\t\t\t\tDim length As Long\n\t\t\t\tDim offset As Long\n\t\t\t\tpath = reader.ReadElementString(&quot;path&quot;)\n\t\t\t\tlength = System.Int64.Parse(reader.ReadElementString(&quot;length&quot;))\n\t\t\t\toffset = System.Int64.Parse(reader.ReadElementString(&quot;offset&quot;))\n                Dim dataString = reader.ReadElementString(&quot;data&quot;)\n                Dim data() = System.Convert.FromBase64String(dataString)\n\t\t\t\tDim fileStream As FileStream\n\t\t\t\tfileStream = New FileStream(path, FileMode.OpenOrCreate, FileAccess.Write)\n\t\t\t\tUsing fileStream\n\t\t\t\t\tfileStream.SetLength(length)\n\t\t\t\t\tfileStream.Position = offset\n\t\t\t\t\tfileStream.Write(data, 0, data.Length)\n\t\t\t\tEnd Using\n\t\t\tLoop\n\t\t\treader.ReadEndElement()\n\t\tEnd Using\n\tEnd Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"FileRegion#0\">class LogBackup\n{\n    static void ArchiveToXML(LogStore logStore, string fileName)\n    {\n        \n\n        LogArchiveSnapshot snapshot = logStore.CreateLogArchiveSnapshot();\n        {\n            XmlTextWriter writer = new XmlTextWriter(fileName, System.Text.Encoding.ASCII);\n            writer.WriteStartElement(&quot;logArchive&quot;);\n\n            foreach (FileRegion region in snapshot.ArchiveRegions)\n            {\n                writer.WriteStartElement(&quot;fileRegion&quot;);\n                writer.WriteElementString(&quot;path&quot;,\n                                          region.Path);\n                writer.WriteElementString(&quot;length&quot;,\n                                        region.FileLength.ToString());\n                writer.WriteElementString(&quot;offset&quot;,\n                                          region.Offset.ToString());\n\n                using (Stream dataStream = region.GetStream())\n                {\n                    byte[] data = new byte[dataStream.Length];\n                    dataStream.Read(data, 0, data.Length);\n\n                    writer.WriteElementString(&quot;data&quot;, System.Convert.ToBase64String(data));\n                }\n\n                writer.WriteEndElement();\n            }\n\n            writer.Close();\n            logStore.SetArchiveTail(snapshot.LastSequenceNumber);\n        }\n    }\n\n    static void RestoreFromXML(string fileName)\n    {\n        using (XmlTextReader reader = new XmlTextReader(fileName))\n        {\n            reader.ReadStartElement(&quot;logArchive&quot;);\n            while (reader.IsStartElement())\n            {\n                string path;\n                long length;\n                long offset;\n                path = reader.ReadElementString(&quot;path&quot;);\n                length = System.Int64.Parse(reader.ReadElementString(&quot;length&quot;));\n                offset = System.Int64.Parse(reader.ReadElementString(&quot;offset&quot;));\n                string dataString = reader.ReadElementString(&quot;data&quot;);\n                byte[] data = System.Convert.FromBase64String(dataString);\n                FileStream fileStream;\n                using (fileStream = new FileStream(path,\n                                              FileMode.OpenOrCreate,\n                                              FileAccess.Write))\n                {\n                    fileStream.SetLength(length);\n                    fileStream.Position = offset;\n                    fileStream.Write(data, 0, data.Length);\n                }\n            }\n            reader.ReadEndElement();\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.IO.Log.FileRegion.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.IO.Log.FileRegion.yml\">\r\n<meta name=\"APIName\" content=\"System.IO.Log.FileRegion\">\r\n<meta name=\"APIName\" content=\"System.IO.Log.FileRegion.FileLength\">\r\n<meta name=\"APIName\" content=\"System.IO.Log.FileRegion.GetStream\">\r\n<meta name=\"APIName\" content=\"System.IO.Log.FileRegion.Offset\">\r\n<meta name=\"APIName\" content=\"System.IO.Log.FileRegion.Path\">\r\n<meta name=\"APILocation\" content=\"System.IO.Log.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"9cc2aaf1-ce43-8e7b-6017-5fabbeb329c9\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a region of a file to be archived. This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.IO.Log/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.IO.Log.FileRegion\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.IO.Log.FileRegion.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.IO.Log.FileRegion.yml","open_to_public_contributors":true,"api_name":["System.IO.Log.FileRegion","System.IO.Log.FileRegion.FileLength","System.IO.Log.FileRegion.GetStream","System.IO.Log.FileRegion.Offset","System.IO.Log.FileRegion.Path"],"api_location":["System.IO.Log.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.IO.Log.FileRegion","System::IO::Log::FileRegion","System.IO.Log.FileRegion.FileLength","System::IO::Log::FileRegion::FileLength","System.IO.Log.FileRegion.GetStream","System::IO::Log::FileRegion::GetStream","System.IO.Log.FileRegion.Offset","System::IO::Log::FileRegion::Offset","System.IO.Log.FileRegion.Path","System::IO::Log::FileRegion::Path"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"9cc2aaf1-ce43-8e7b-6017-5fabbeb329c9","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.IO.Log/FileRegion.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"FileRegion class | Microsoft Docs","_op_ogTitle":"FileRegion class","description":"Represents a region of a file to be archived. This class cannot be inherited.\n","toc_asset_id":"_splitted/System.IO.Log/toc.json","toc_rel":"_splitted/System.IO.Log/toc.json","source_url":"","ms.assetid":"System.IO.Log.FileRegion","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.io.log.fileregion","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.io.log.fileregion","fileRelativePath":"System.IO.Log.FileRegion.html"},"themesRelativePathToOutputRoot":"_themes/"}