{"content":"    \r\n    <h1 id=\"System_Threading_SpinLock\">\r\n      <span class=\"lang-csharp\">SpinLock</span>\r\n        Struct\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides a mutual exclusion lock primitive where a thread trying to acquire the lock waits in a loop repeatedly checking until the lock becomes available.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Diagnostics.DebuggerDisplay(&quot;IsHeld = {IsHeld}&quot;)]\n[System.Diagnostics.DebuggerTypeProxy(typeof(System.Threading.SpinLock/SystemThreading_SpinLockDebugView))]\n[System.Runtime.InteropServices.ComVisible(false)]\npublic struct SpinLock</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">System.ValueType</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">SpinLock</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>For an example of how to use a Spin Lock, see <a href=\"../Topic/How%20to:%20Use%20SpinLock%20for%20Low-Level%20Synchronization.md\" data-linktype=\"relative-path\">How to: Use SpinLock for Low-Level Synchronization</a>.  </p>\n<p> Spin locks can be used for leaf-level locks where the object allocation implied by using a <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a>, in size or due to garbage collection pressure, is overly expensive. A spin lock can be useful in to avoid blocking; however, if you expect a significant amount of blocking, you should probably not use spin locks due to excessive spinning. Spinning can be beneficial when locks are fine-grained and large in number (for example, a lock per node in a linked list) and also when lock hold-times are always extremely short. In general, while holding a spin lock, one should avoid any of these actions:  </p>\n<ul>\n<li><p>blocking,  </p>\n</li>\n<li><p>calling anything that itself may block,  </p>\n</li>\n<li><p>holding more than one spin lock at once,  </p>\n</li>\n<li><p>making dynamically dispatched calls (interface and virtuals),  </p>\n</li>\n<li><p>making statically dispatched calls into any code one doesn&#39;t own, or  </p>\n</li>\n<li><p>allocating memory.  </p>\n<p>SpinLock should only be used after you have been determined that doing so will improve an application&#39;s performance. It is also important to note that SpinLock is a value type, for performance reasons. For this reason, you must be very careful not to accidentally copy a SpinLock instance, as the two instances (the original and the copy) would then be completely independent of one another, which would likely lead to erroneous behavior of the application. If a SpinLock instance must be passed around, it should be passed by reference rather than by value.  </p>\n<p>Do not store SpinLock instances in readonly fields.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_SpinLock__ctor_System_Boolean_\" data-linktype=\"self-bookmark\">SpinLock(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.threading.spinlock\" data-linktype=\"relative-path\">SpinLock</a> structure with the option to track thread IDs to improve debugging.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_SpinLock_IsHeld\" data-linktype=\"self-bookmark\">IsHeld</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets whether the lock is currently held by any thread.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_SpinLock_IsHeldByCurrentThread\" data-linktype=\"self-bookmark\">IsHeldByCurrentThread</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets whether the lock is held by the current thread.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_SpinLock_IsThreadOwnerTrackingEnabled\" data-linktype=\"self-bookmark\">IsThreadOwnerTrackingEnabled</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets whether thread ownership tracking is enabled for this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_SpinLock_Enter_System_Boolean__\" data-linktype=\"self-bookmark\">Enter(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Acquires the lock in a reliable manner, such that even if an exception occurs within the method call, <code>lockTaken</code> can be examined reliably to determine whether the lock was acquired.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_SpinLock_Exit\" data-linktype=\"self-bookmark\">Exit()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases the lock.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_SpinLock_Exit_System_Boolean_\" data-linktype=\"self-bookmark\">Exit(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases the lock.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_SpinLock_TryEnter_System_Boolean__\" data-linktype=\"self-bookmark\">TryEnter(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <code>lockTaken</code> can be examined reliably to determine whether the lock was acquired.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_SpinLock_TryEnter_System_Int32_System_Boolean__\" data-linktype=\"self-bookmark\">TryEnter(Int32,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <code>lockTaken</code> can be examined reliably to determine whether the lock was acquired.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_SpinLock_TryEnter_System_TimeSpan_System_Boolean__\" data-linktype=\"self-bookmark\">TryEnter(TimeSpan,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <code>lockTaken</code> can be examined reliably to determine whether the lock was acquired.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_SpinLock__ctor_System_Boolean_\">\r\n    \r\n            <a id=\"System_Threading_SpinLock__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SpinLock(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.threading.spinlock\" data-linktype=\"relative-path\">SpinLock</a> structure with the option to track thread IDs to improve debugging.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public SpinLock (bool enableThreadOwnerTracking);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>enableThreadOwnerTracking</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Whether to capture and use thread IDs for debugging purposes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default constructor for <a class=\"xref\" href=\"system.threading.spinlock\" data-linktype=\"relative-path\">SpinLock</a> tracks thread ownership.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how a SpinLock may be used.  </p>\n<pre><code>// C#  \npublic class MyType  \n{  \n    private SpinLock _spinLock = new SpinLock();  \n\n    public void DoWork()  \n    {  \n        bool lockTaken = false;   \n        try  \n        {  \n           _spinLock.Enter(ref lockTaken);  \n           // do work here protected by the lock  \n        }  \n        finally  \n        {  \n            if (lockTaken) _spinLock.Exit();  \n        }  \n    }  \n}  \n</code></pre><pre><code>&#39; Visual Basic  \n\nClass MyType  \n   Private _spinLock As New SpinLock()  \n\n   Public Sub DoWork()  \n      Dim lockTaken As Boolean = False  \n      Try  \n         _spinLock.Enter(lockTaken)  \n         &#39; do work here protected by the lock  \n      Finally  \n         If lockTaken Then _spinLock.Exit()  \n      End Try  \n   End Sub  \nEnd Class  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_SpinLock_IsHeld\">\r\n    \r\n            <a id=\"System_Threading_SpinLock_IsHeld_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsHeld</div>        \r\n          </div>\r\n    \r\n            <p>Gets whether the lock is currently held by any thread.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsHeld { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>true if the lock is currently held by any thread; otherwise false.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_SpinLock_IsHeldByCurrentThread\">\r\n    \r\n            <a id=\"System_Threading_SpinLock_IsHeldByCurrentThread_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsHeldByCurrentThread</div>        \r\n          </div>\r\n    \r\n            <p>Gets whether the lock is held by the current thread.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsHeldByCurrentThread { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>true if the lock is held by the current thread; otherwise false.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Thread ownership tracking is disabled.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the lock was initialized to track owner threads, this will return whether the lock is acquired by the current thread. It is invalid to use this property when the lock was initialized to not track thread ownership.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_SpinLock_IsThreadOwnerTrackingEnabled\">\r\n    \r\n            <a id=\"System_Threading_SpinLock_IsThreadOwnerTrackingEnabled_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsThreadOwnerTrackingEnabled</div>        \r\n          </div>\r\n    \r\n            <p>Gets whether thread ownership tracking is enabled for this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsThreadOwnerTrackingEnabled { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>true if thread ownership tracking is enabled for this instance; otherwise false.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_SpinLock_Enter_System_Boolean__\">\r\n    \r\n            <a id=\"System_Threading_SpinLock_Enter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Enter(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Acquires the lock in a reliable manner, such that even if an exception occurs within the method call, <code>lockTaken</code> can be examined reliably to determine whether the lock was acquired.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Enter (ref bool lockTaken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>lockTaken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>True if the lock is acquired; otherwise, false. <code>lockTaken</code> must be initialized to false prior to calling this method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>lockTaken</code> argument must be initialized to false prior to calling Enter.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.lockrecursionexception\" data-linktype=\"relative-path\">LockRecursionException</a></div>\r\n                  </div>\r\n                  <p>Thread ownership tracking is enabled, and the current thread has already acquired this lock.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.threading.spinlock\" data-linktype=\"relative-path\">SpinLock</a> is a non-reentrant lock, meaning that if a thread holds the lock, it is not allowed to enter the lock again. If thread ownership tracking is enabled (whether it&#39;s enabled is available through <a class=\"xref\" href=\"system.threading.spinlock#System_Threading_SpinLock_IsThreadOwnerTrackingEnabled_\" data-linktype=\"relative-path\">IsThreadOwnerTrackingEnabled</a>), an exception will be thrown when a thread tries to re-enter a lock it already holds. However, if thread ownership tracking is disabled, attempting to enter a lock already held will result in deadlock.  </p>\n<p> If you call <a class=\"xref\" href=\"system.threading.spinlock#System_Threading_SpinLock_Exit_\" data-linktype=\"relative-path\">Exit</a> without having first called Enter the internal state of the <a class=\"xref\" href=\"system.threading.spinlock\" data-linktype=\"relative-path\">SpinLock</a> can become corrupted.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_SpinLock_Exit\">\r\n    \r\n            <a id=\"System_Threading_SpinLock_Exit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Exit()</div>        \r\n          </div>\r\n    \r\n            <p>Releases the lock.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Exit ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.synchronizationlockexception\" data-linktype=\"relative-path\">SynchronizationLockException</a></div>\r\n                  </div>\r\n                  <p>Thread ownership tracking is enabled, and the current thread is not the owner of this lock.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default overload of Exit provides the same behavior as if calling <a class=\"xref\" href=\"system.threading.spinlock#System_Threading_SpinLock_Exit_\" data-linktype=\"relative-path\">Exit</a> using true as the argument.  </p>\n<p> If you call Exit without having first called <a class=\"xref\" href=\"system.threading.spinlock#System_Threading_SpinLock_Enter_\" data-linktype=\"relative-path\">Enter</a> the internal state of the <a class=\"xref\" href=\"system.threading.spinlock\" data-linktype=\"relative-path\">SpinLock</a> can become corrupted.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_SpinLock_Exit_System_Boolean_\">\r\n    \r\n            <a id=\"System_Threading_SpinLock_Exit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Exit(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Releases the lock.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Exit (bool useMemoryBarrier);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>useMemoryBarrier</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A Boolean value that indicates whether a memory fence should be issued in order to immediately publish the exit operation to other threads.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.synchronizationlockexception\" data-linktype=\"relative-path\">SynchronizationLockException</a></div>\r\n                  </div>\r\n                  <p>Thread ownership tracking is enabled, and the current thread is not the owner of this lock.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Calling Exit with the <code>useMemoryBarrier</code> argument set to true will improve the fairness of the lock at the expense of some performance. The default <a class=\"xref\" href=\"system.threading.spinlock#System_Threading_SpinLock_Exit_\" data-linktype=\"relative-path\">Exit</a> overload behaves as if specifying true for <code>useMemoryBarrier</code>.  </p>\n<p> If you call <a class=\"xref\" href=\"system.threading.spinlock#System_Threading_SpinLock_Exit_\" data-linktype=\"relative-path\">Exit</a> without having first called <a class=\"xref\" href=\"system.threading.spinlock#System_Threading_SpinLock_Enter_\" data-linktype=\"relative-path\">Enter</a> the internal state of the <a class=\"xref\" href=\"system.threading.spinlock\" data-linktype=\"relative-path\">SpinLock</a> can become corrupted.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_SpinLock_TryEnter_System_Boolean__\">\r\n    \r\n            <a id=\"System_Threading_SpinLock_TryEnter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryEnter(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <code>lockTaken</code> can be examined reliably to determine whether the lock was acquired.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void TryEnter (ref bool lockTaken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>lockTaken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>True if the lock is acquired; otherwise, false. <code>lockTaken</code> must be initialized to false prior to calling this method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>lockTaken</code> argument must be initialized to false prior to calling TryEnter.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.lockrecursionexception\" data-linktype=\"relative-path\">LockRecursionException</a></div>\r\n                  </div>\r\n                  <p>Thread ownership tracking is enabled, and the current thread has already acquired this lock.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Unlike <a class=\"xref\" href=\"system.threading.spinlock#System_Threading_SpinLock_Enter_\" data-linktype=\"relative-path\">Enter</a>, TryEnter will not block waiting for the lock to be available. If the lock is not available when TryEnter is called, it will return immediately without any further spinning.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_SpinLock_TryEnter_System_Int32_System_Boolean__\">\r\n    \r\n            <a id=\"System_Threading_SpinLock_TryEnter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryEnter(Int32,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <code>lockTaken</code> can be examined reliably to determine whether the lock was acquired.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void TryEnter (int millisecondsTimeout, ref bool lockTaken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>millisecondsTimeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of milliseconds to wait, or <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a> (-1) to wait indefinitely.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lockTaken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>True if the lock is acquired; otherwise, false. <code>lockTaken</code> must be initialized to false prior to calling this method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>lockTaken</code> argument must be initialized to false prior to calling TryEnter.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.lockrecursionexception\" data-linktype=\"relative-path\">LockRecursionException</a></div>\r\n                  </div>\r\n                  <p>Thread ownership tracking is enabled, and the current thread has already acquired this lock.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Unlike <a class=\"xref\" href=\"system.threading.spinlock#System_Threading_SpinLock_Enter_\" data-linktype=\"relative-path\">Enter</a>, TryEnter will not block indefinitely waiting for the lock to be available. It will block until either the lock is available or until the <code>millisecondsTimeout</code> has expired.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_SpinLock_TryEnter_System_TimeSpan_System_Boolean__\">\r\n    \r\n            <a id=\"System_Threading_SpinLock_TryEnter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryEnter(TimeSpan,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <code>lockTaken</code> can be examined reliably to determine whether the lock was acquired.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void TryEnter (TimeSpan timeout, ref bool lockTaken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> that represents the number of milliseconds to wait, or a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> that represents -1 milliseconds to wait indefinitely.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lockTaken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>True if the lock is acquired; otherwise, false. <code>lockTaken</code> must be initialized to false prior to calling this method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>timeout</code> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a> milliseconds.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>lockTaken</code> argument must be initialized to false prior to calling TryEnter.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.lockrecursionexception\" data-linktype=\"relative-path\">LockRecursionException</a></div>\r\n                  </div>\r\n                  <p>Thread ownership tracking is enabled, and the current thread has already acquired this lock.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Unlike <a class=\"xref\" href=\"system.threading.spinlock#System_Threading_SpinLock_Enter_\" data-linktype=\"relative-path\">Enter</a>, TryEnter will not block indefinitely waiting for the lock to be available. It will block until either the lock is available or until the <code>timeout</code> has expired.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Threading.SpinLock.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Threading.SpinLock.yml\">\r\n<meta name=\"APIName\" content=\"System.Threading.SpinLock\">\r\n<meta name=\"APIName\" content=\"System.Threading.SpinLock..ctor\">\r\n<meta name=\"APIName\" content=\"System.Threading.SpinLock.Enter\">\r\n<meta name=\"APIName\" content=\"System.Threading.SpinLock.Exit\">\r\n<meta name=\"APIName\" content=\"System.Threading.SpinLock.IsHeld\">\r\n<meta name=\"APIName\" content=\"System.Threading.SpinLock.IsHeldByCurrentThread\">\r\n<meta name=\"APIName\" content=\"System.Threading.SpinLock.IsThreadOwnerTrackingEnabled\">\r\n<meta name=\"APIName\" content=\"System.Threading.SpinLock.TryEnter\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"c1fc87ee-1234-7b11-1c58-c69c9459a49e\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides a mutual exclusion lock primitive where a thread trying to acquire the lock waits in a loop repeatedly checking until the lock becomes available.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Threading/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Threading.SpinLock\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Threading.SpinLock.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Threading.SpinLock.yml","open_to_public_contributors":true,"api_name":["System.Threading.SpinLock","System.Threading.SpinLock..ctor","System.Threading.SpinLock.Enter","System.Threading.SpinLock.Exit","System.Threading.SpinLock.IsHeld","System.Threading.SpinLock.IsHeldByCurrentThread","System.Threading.SpinLock.IsThreadOwnerTrackingEnabled","System.Threading.SpinLock.TryEnter"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Threading.SpinLock","System::Threading::SpinLock","System.Threading.SpinLock.#ctor","System::Threading::SpinLock::#ctor","System.Threading.SpinLock.Enter","System::Threading::SpinLock::Enter","System.Threading.SpinLock.Exit","System::Threading::SpinLock::Exit","System.Threading.SpinLock.IsHeld","System::Threading::SpinLock::IsHeld","System.Threading.SpinLock.IsHeldByCurrentThread","System::Threading::SpinLock::IsHeldByCurrentThread","System.Threading.SpinLock.IsThreadOwnerTrackingEnabled","System::Threading::SpinLock::IsThreadOwnerTrackingEnabled","System.Threading.SpinLock.TryEnter","System::Threading::SpinLock::TryEnter"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"c1fc87ee-1234-7b11-1c58-c69c9459a49e","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Threading/SpinLock.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"SpinLock struct | Microsoft Docs","_op_ogTitle":"SpinLock struct","description":"Provides a mutual exclusion lock primitive where a thread trying to acquire the lock waits in a loop repeatedly checking until the lock becomes available.\n","toc_asset_id":"_splitted/System.Threading/toc.json","toc_rel":"_splitted/System.Threading/toc.json","source_url":"","ms.assetid":"System.Threading.SpinLock","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.threading.spinlock","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.threading.spinlock","fileRelativePath":"System.Threading.SpinLock.html"},"themesRelativePathToOutputRoot":"_themes/"}