{"content":"    \r\n    <h1 id=\"System_InvalidOperationException\">\r\n      <span class=\"lang-csharp\">InvalidOperationException</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>The exception that is thrown when a method call is invalid for the object&#39;s current state.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic class InvalidOperationException : SystemException</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.systemexception\" data-linktype=\"relative-path\">System.SystemException</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l3\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">InvalidOperationException</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_Data\" data-linktype=\"relative-path\">Data</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_GetBaseException\" data-linktype=\"relative-path\">GetBaseException()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"relative-path\">GetObjectData(SerializationInfo,StreamingContext)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_HelpLink\" data-linktype=\"relative-path\">HelpLink</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_HResult\" data-linktype=\"relative-path\">HResult</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_InnerException\" data-linktype=\"relative-path\">InnerException</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_Message\" data-linktype=\"relative-path\">Message</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_SerializeObjectState\" data-linktype=\"relative-path\">SerializeObjectState</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_Source\" data-linktype=\"relative-path\">Source</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_StackTrace\" data-linktype=\"relative-path\">StackTrace</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_TargetSite\" data-linktype=\"relative-path\">TargetSite</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>InvalidOperationException is used in cases when the failure to invoke a method is caused by reasons other than invalid arguments. Typically, it is thrown when the state of an object cannot support the method call. For example, an InvalidOperationException exception is thrown by methods such as:  </p>\n<ul>\n<li><p><a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> if objects of a collection are modified after the enumerator is created. For more information, see <a href=\"#Iterating\" data-linktype=\"self-bookmark\">Changing a collection while iterating it</a>.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.resources.resourceset#System_Resources_ResourceSet_GetString_\" data-linktype=\"relative-path\">GetString</a> if the resource set is closed before the method call is made.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.xml.linq.xcontainer#System_Xml_Linq_XContainer_Add_\" data-linktype=\"relative-path\">Add</a>, if the object or objects to be added would result in an incorrectly structured XML document.  </p>\n</li>\n<li><p>A method that attempts to manipulate the UI from a thread that is not the main or UI thread.  </p>\n</li>\n</ul>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Because the InvalidOperationException exception can be thrown in a wide variety of circumstances, it is important to read the exception message returned by the <a class=\"xref\" href=\"system.exception#System_Exception_Message_\" data-linktype=\"relative-path\">Message</a> property.  </p>\n</div>\n<p> In this section:  </p>\n<p> <a href=\"#Causes\" data-linktype=\"self-bookmark\">Some common causes of InvalidOperationException exceptions</a><br> <a href=\"#UI\" data-linktype=\"self-bookmark\">Updating a UI thread from a non-UI thread</a><br> <a href=\"#Iterating\" data-linktype=\"self-bookmark\">Changing a collection while iterating it</a><br> <a href=\"#Sorting\" data-linktype=\"self-bookmark\">Sorting an array or collection whose objects cannot be compared</a><br> <a href=\"#Nullable\" data-linktype=\"self-bookmark\">Casting a Nullable&lt;T&gt; that is null to its underlying type</a><br> <a href=\"#Empty\" data-linktype=\"self-bookmark\">Calling a System.Linq.Enumerable method on an empty collection</a><br> <a href=\"#Single\" data-linktype=\"self-bookmark\">Calling Enumerable.Single or Enumerable.SingleOrDefault on a sequence without one element</a><br> <a href=\"#Emit\" data-linktype=\"self-bookmark\">Dynamic cross-application domain field access</a><br><a href=\"#Throwing\" data-linktype=\"self-bookmark\">Throwing an InvalidOperationException exception</a><br><a href=\"#Misc\" data-linktype=\"self-bookmark\">Miscellaneous information</a>  </p>\n<p><a name=\"Causes\"></a>   </p>\n<h2 id=\"some-common-causes-of-invalidoperationexception-exceptions\">Some common causes of InvalidOperationException exceptions</h2>\n<p> The following sections show how some common cases in which in InvalidOperationException exception is thrown in an app. How you handle the issue depends on the specific situation. Most commonly, however, the exception results from developer error, and the InvalidOperationException exception can be anticipated and avoided.  </p>\n<p><a name=\"UI\"></a>   </p>\n<h3 id=\"updating-a-ui-thread-from-a-non-ui-thread\">Updating a UI thread from a non-UI thread</h3>\n<p> Often, worker threads are used to perform some background work that involves gathering data to be displayed in an application&#39;s user interface. However. most GUI (graphical user interface) application frameworks for the .NET Framework, such as Windows Forms and Windows Presentation Foundation (WPF),  let you access GUI objects only from the thread that creates and manages the UI (the Main or UI thread). An InvalidOperationException is thrown when you try to access a UI element from a thread other than the UI thread.  The text of the exception message is shown in the following table.  </p>\n<table>\n<thead>\n<tr>\n<th>Application Type</th>\n<th>Message</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>WPF app</td>\n<td><strong>The calling thread cannot access this object because a different thread owns it.</strong></td>\n</tr>\n<tr>\n<td>UWP app</td>\n<td><strong>The application called an interface that was marshalled for a different thread.</strong></td>\n</tr>\n<tr>\n<td>Windows Forms app</td>\n<td><strong>Cross-thread operation not valid: Control &#39;TextBox1&#39; accessed from a thread other than the thread it was created on.</strong></td>\n</tr>\n</tbody>\n</table>\n<p> UI frameworks for the .NET Framework implement a <em>dispatcher</em> pattern that includes a method to check whether a call to a member of a UI element is being executed on the UI thread, and other methods to schedule the call on the UI thread:  </p>\n<ul>\n<li><p>In WPF apps, call the <a class=\"xref\" href=\"system.windows.threading.dispatcher#System_Windows_Threading_Dispatcher_CheckAccess_\" data-linktype=\"relative-path\">CheckAccess</a> method to determine if a method is running on a non-UI thread. It returns <code>true</code> if the method is running on the UI thread and <code>false</code> otherwise. Call one of the overloads of the <a class=\"xref\" href=\"system.windows.threading.dispatcher#System_Windows_Threading_Dispatcher_Invoke_\" data-linktype=\"relative-path\">Invoke</a> method to schedule the call on the UI thread.  </p>\n</li>\n<li><p>In UWP apps, call the <a href=\"https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.core.coredispatcher.hasthreadaccess.aspx\" data-linktype=\"external\">CoreDispatcher.HasThreadAccess</a> method to determine if a method is running on a non-UI thread. Call the  <a href=\"https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.core.coredispatcher.runasync.aspx\" data-linktype=\"external\">CoreDispatcher.RunAsync</a> method to execute a delegate that updates the UI thread. Use the  </p>\n</li>\n<li><p>In Windows Forms apps, use the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_InvokeRequired_\" data-linktype=\"relative-path\">InvokeRequired</a> property to determine if a method is running on a non-UI thread. Call one of the overloads of the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Invoke_\" data-linktype=\"relative-path\">Invoke</a> method to execute a delegate that updates the UI thread.  </p>\n<p>The following examples illustrate the InvalidOperationException exception that is thrown when you attempt to update a UI element from a thread other than the thread that created it.  Each example requires that you create two controls:  </p>\n</li>\n<li><p>A text box control named <code>textBox1</code>.  In a Windows Forms app, you should set its <a class=\"xref\" href=\"system.windows.forms.textbox#System_Windows_Forms_TextBox_Multiline_\" data-linktype=\"relative-path\">Multiline</a> property to <code>true</code>.  </p>\n</li>\n<li><p>A button  control named <code>threadExampleBtn</code>. The example provides a handler, <code>ThreadsExampleBtn_Click</code>, for the button&#39;s <code>Click</code> event.  </p>\n<p>In each case, the <code>threadExampleBtn_Click</code> event handler calls the <code>DoSomeWork</code> method twice. The first call runs synchronously and succeeds. But the second call, because it runs asynchronously on a thread pool thread, attempts to update the UI from a non-UI thread. This results in a InvalidOperationException exception.  </p>\n<p>WPF and UWP apps  </p>\n<pre><code class=\"lang-cs\" name=\"System.InvalidOperationException.Threading.WPF1#1\">private async void threadExampleBtn_Click(object sender, RoutedEventArgs e)\n{\n    textBox1.Text = String.Empty;\n\n    textBox1.Text = &quot;Simulating work on UI thread.\\n&quot;;\n    DoSomeWork(20);\n    textBox1.Text += &quot;Work completed...\\n&quot;;\n\n    textBox1.Text += &quot;Simulating work on non-UI thread.\\n&quot;;\n    await Task.Run( () =&gt; DoSomeWork(1000));\n    textBox1.Text += &quot;Work completed...\\n&quot;;\n}\n\nprivate async void DoSomeWork(int milliseconds)\n{\n    // Simulate work.\n    await Task.Delay(milliseconds);\n\n    // Report completion.\n    var msg = String.Format(&quot;Some work completed in {0} ms.\\n&quot;, milliseconds);\n    textBox1.Text += msg;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.InvalidOperationException.Threading.WPF1#1\">Private Async Sub threadExampleBtn_Click(sender As Object, e As RoutedEventArgs) Handles threadExampleBtn.Click\n    textBox1.Text = String.Empty\n\n    textBox1.Text = &quot;Simulating work on UI thread.&quot; + vbCrLf\n    DoSomeWork(20)\n    textBox1.Text += &quot;Work completed...&quot; + vbCrLf\n\n    textBox1.Text += &quot;Simulating work on non-UI thread.&quot; + vbCrLf\n    Await Task.Factory.StartNew(Sub()\n                                    DoSomeWork(1000)\n                                End Sub)\n    textBox1.Text += &quot;Work completed...&quot; + vbCrLf\nEnd Sub\n\nPrivate Async Sub DoSomeWork(milliseconds As Integer)\n    &#39; Simulate work.\n    Await Task.Delay(milliseconds)\n\n    &#39; Report completion.\n    Dim msg = String.Format(&quot;Some work completed in {0} ms.&quot;, milliseconds) + vbCrLf\n    textBox1.Text += msg\nEnd Sub\n</code></pre><p>The following version of the <code>DoSomeWork</code> method eliminates the exception in a WPF app.  </p>\n<pre><code class=\"lang-vb\" name=\"System.InvalidOperationException.Threading.WPF2#3\">Private Async Sub DoSomeWork(milliseconds As Integer)\n    &#39; Simulate work.\n    Await Task.Delay(milliseconds)\n\n    &#39; Report completion.\n    Dim uiAccess As Boolean = textBox1.Dispatcher.CheckAccess()\n    Dim msg As String = String.Format(&quot;Some work completed in {0} ms. on {1}UI thread&quot;,\n                                      milliseconds, If(uiAccess, String.Empty, &quot;non-&quot;)) + \n                                      vbCrLf \n    If uiAccess Then\n        textBox1.Text += msg\n    Else\n        textBox1.Dispatcher.Invoke( Sub() textBox1.Text += msg)\n    End If\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.InvalidOperationException.Threading.WPF2#3\">private async void DoSomeWork(int milliseconds)\n{\n    // Simulate work.\n    await Task.Delay(milliseconds);\n\n    // Report completion.\n    bool uiAccess = textBox1.Dispatcher.CheckAccess();\n    String msg = String.Format(&quot;Some work completed in {0} ms. on {1}UI thread\\n&quot;,\n                               milliseconds, uiAccess ? String.Empty : &quot;non-&quot;);\n    if (uiAccess)\n        textBox1.Text += msg;\n    else\n        textBox1.Dispatcher.Invoke(() =&gt; { textBox1.Text += msg; });\n}\n</code></pre><p>The following version of the <code>DoSomeWork</code> method eliminates the exception in a UWP app.  </p>\n<pre><code class=\"lang-cs\" name=\"System.InvalidOperationException.Threading.UWP#4\">private async void DoSomeWork(int milliseconds)\n{\n    // Simulate work.\n    await Task.Delay(milliseconds);\n\n    // Report completion.\n    bool uiAccess = textBox1.Dispatcher.HasThreadAccess;\n    String msg = String.Format(&quot;Some work completed in {0} ms. on {1}UI thread\\n&quot;,\n                               milliseconds, uiAccess ? String.Empty : &quot;non-&quot;);\n    if (uiAccess)\n        textBox1.Text += msg;\n    else\n        await textBox1.Dispatcher.RunAsync(CoreDispatcherPriority.Normal, () =&gt; { textBox1.Text += msg; });\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.InvalidOperationException.Threading.UWP#4\">Private Async Sub DoSomeWork(milliseconds As Integer)\n    &#39; Simulate work.\n    Await Task.Delay(milliseconds)\n\n    &#39; Report completion.\n    Dim uiAccess As Boolean = textBox1.Dispatcher.HasThreadAccess\n    Dim msg As String = String.Format(&quot;Some work completed in {0} ms. on {1}UI thread&quot; + vbCrLf,\n                                      milliseconds, If(uiAccess, String.Empty, &quot;non-&quot;))\n    If (uiAccess) Then\n        textBox1.Text += msg\n    Else\n        Await textBox1.Dispatcher.RunAsync(CoreDispatcherPriority.Normal, Sub() textBox1.Text += msg)\n    End If\nEnd Sub\n</code></pre><p>Windows Forms apps  </p>\n<pre><code class=\"lang-vb\" name=\"System.InvalidOperationException.Threading.WF#2\">Dim lines As New List(Of String)()\nPrivate Async Sub threadExampleBtn_Click(sender As Object, e As EventArgs) Handles threadExampleBtn.Click\n    textBox1.Text = String.Empty\n    lines.Clear()\n\n    lines.Add(&quot;Simulating work on UI thread.&quot;)\n    textBox1.Lines = lines.ToArray()\n    DoSomeWork(20)\n\n    lines.Add(&quot;Simulating work on non-UI thread.&quot;)\n    textBox1.Lines = lines.ToArray()\n    Await Task.Run(Sub() DoSomeWork(1000))\n\n    lines.Add(&quot;ThreadsExampleBtn_Click completes. &quot;)\n    textBox1.Lines = lines.ToArray()\nEnd Sub\n\nPrivate Async Sub DoSomeWork(milliseconds As Integer)\n    &#39; Simulate work.\n    Await Task.Delay(milliseconds)\n\n    &#39; Report completion.\n    lines.Add(String.Format(&quot;Some work completed in {0} ms on UI thread.&quot;, milliseconds))\n    textBox1.Lines = lines.ToArray()\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.InvalidOperationException.Threading.WF#2\">List&lt;String&gt; lines = new List&lt;String&gt;();\n\nprivate async void threadExampleBtn_Click(object sender, EventArgs e)\n{\n    textBox1.Text = String.Empty;\n    lines.Clear();\n\n    lines.Add(&quot;Simulating work on UI thread.&quot;);\n    textBox1.Lines = lines.ToArray();\n    DoSomeWork(20);\n\n    lines.Add(&quot;Simulating work on non-UI thread.&quot;);\n    textBox1.Lines = lines.ToArray();\n    await Task.Run(() =&gt; DoSomeWork(1000));\n\n    lines.Add(&quot;ThreadsExampleBtn_Click completes. &quot;);\n    textBox1.Lines = lines.ToArray();\n}\n\nprivate async void DoSomeWork(int milliseconds)\n{\n    // simulate work\n    await Task.Delay(milliseconds);\n\n    // report completion\n    lines.Add(String.Format(&quot;Some work completed in {0} ms on UI thread.&quot;, milliseconds));\n    textBox1.Lines = lines.ToArray();\n}\n</code></pre><p>The following version of the <code>DoSomeWork</code> method eliminates the exception in a Windows Forms app.  </p>\n<pre><code class=\"lang-vb\" name=\"System.InvalidOperationException.Threading.WF2#5\">Private Async Sub DoSomeWork(milliseconds As Integer)\n    &#39; Simulate work.\n    Await Task.Delay(milliseconds)\n\n    &#39; Report completion.\n    Dim uiMarshal As Boolean = textBox1.InvokeRequired\n    Dim msg As String = String.Format(&quot;Some work completed in {0} ms. on {1}UI thread&quot; + vbCrLf,\n                                      milliseconds, If(uiMarshal, String.Empty, &quot;non-&quot;))\n    lines.Add(msg)\n\n    If uiMarshal Then\n        textBox1.Invoke(New Action(Sub() textBox1.Lines = lines.ToArray()))\n    Else\n        textBox1.Lines = lines.ToArray()\n    End If\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.InvalidOperationException.Threading.WF2#5\">private async void DoSomeWork(int milliseconds)\n{\n    // simulate work\n    await Task.Delay(milliseconds);\n\n    // Report completion.\n    bool uiMarshal = textBox1.InvokeRequired;\n    String msg = String.Format(&quot;Some work completed in {0} ms. on {1}UI thread\\n&quot;,\n                               milliseconds, uiMarshal ? String.Empty : &quot;non-&quot;);\n    lines.Add(msg);\n\n    if (uiMarshal) {\n        textBox1.Invoke(new Action(() =&gt; { textBox1.Lines = lines.ToArray(); }));\n    }\n    else {\n        textBox1.Lines = lines.ToArray();\n    }\n}\n</code></pre></li>\n</ul>\n<p><a name=\"Iterating\"></a>   </p>\n<h3 id=\"changing-a-collection-while-iterating-it\">Changing a collection while iterating it</h3>\n<p> The <code>foreach</code> statement in C# or <code>For Each</code> statement in Visual Basic is used to iterate the members of a collection and to read or modify its individual elements. However, it can&#39;t be used to add or remove items from the collection. Doing this throws an  InvalidOperationException exception with a message that is similar to, &quot;<strong>Collection was modified; enumeration operation may not execute.</strong>&quot;  </p>\n<p> The following example iterates a collection of integers attempts to add the square of each integer to the collection. The example throws an InvalidOperationException with the first call to the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Add_\" data-linktype=\"relative-path\">Add</a> method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.InvalidOperationException#1\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n   public static void Main()\n   {\n      var numbers = new List&lt;int&gt;() { 1, 2, 3, 4, 5 };\n      foreach (var number in numbers) {\n         int square = (int) Math.Pow(number, 2);\n         Console.WriteLine(&quot;{0}^{1}&quot;, number, square);\n         Console.WriteLine(&quot;Adding {0} to the collection...\\n&quot;, square);\n         numbers.Add(square);\n      }\n   }\n}\n// The example displays the following output:\n//    1^1\n//    Adding 1 to the collection...\n//    \n//    \n//    Unhandled Exception: System.InvalidOperationException: Collection was modified; \n//       enumeration operation may not execute.\n//       at System.ThrowHelper.ThrowInvalidOperationException(ExceptionResource resource)\n//       at System.Collections.Generic.List`1.Enumerator.MoveNextRare()\n//       at Example.Main()\n</code></pre><pre><code class=\"lang-vb\" name=\"System.InvalidOperationException#1\">Imports System.Collections.Generic\n\nModule Example\n   Public Sub Main()\n      Dim numbers As New List(Of Integer)( { 1, 2, 3, 4, 5 } )\n      For Each number In numbers\n         Dim square As Integer = CInt(Math.Pow(number, 2))\n         Console.WriteLine(&quot;{0}^{1}&quot;, number, square)\n         Console.WriteLine(&quot;Adding {0} to the collection...&quot; + vbCrLf, \n                           square)\n         numbers.Add(square)\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    1^1\n&#39;    Adding 1 to the collection...\n&#39;    \n&#39;    \n&#39;    Unhandled Exception: System.InvalidOperationException: Collection was modified; \n&#39;       enumeration operation may not execute.\n&#39;       at System.ThrowHelper.ThrowInvalidOperationException(ExceptionResource resource)\n&#39;       at System.Collections.Generic.List`1.Enumerator.MoveNextRare()\n&#39;       at Example.Main()\n</code></pre><p> You can eliminate the exception in one of two ways, depending on your application logic:  </p>\n<ul>\n<li><p>If elements must be added to the collection while iterating it, you can iterate it by index using the <code>for</code> statement instead of <code>foreach</code> or <code>For Each</code>. The following example uses the for statement to add the square of numbers in the collection to the collection.  </p>\n<pre><code class=\"lang-cs\" name=\"System.InvalidOperationException#2\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n   public static void Main()\n   {\n      var numbers = new List&lt;int&gt;() { 1, 2, 3, 4, 5 };\n      \n      int upperBound = numbers.Count - 1;\n      for (int ctr = 0; ctr &lt;= upperBound; ctr++) {\n         int square = (int) Math.Pow(numbers[ctr], 2);\n         Console.WriteLine(&quot;{0}^{1}&quot;, numbers[ctr], square);\n         Console.WriteLine(&quot;Adding {0} to the collection...\\n&quot;, square);\n         numbers.Add(square);\n      }\n   \n      Console.WriteLine(&quot;Elements now in the collection: &quot;);\n      foreach (var number in numbers)\n         Console.Write(&quot;{0}    &quot;, number);\n   }\n}\n// The example displays the following output:\n//    1^1\n//    Adding 1 to the collection...\n//    \n//    2^4\n//    Adding 4 to the collection...\n//    \n//    3^9\n//    Adding 9 to the collection...\n//    \n//    4^16\n//    Adding 16 to the collection...\n//    \n//    5^25\n//    Adding 25 to the collection...\n//    \n//    Elements now in the collection:\n//    1    2    3    4    5    1    4    9    16    25\n</code></pre><pre><code class=\"lang-vb\" name=\"System.InvalidOperationException#2\">Imports System.Collections.Generic\n\nModule Example\n   Public Sub Main()\n      Dim numbers As New List(Of Integer)( { 1, 2, 3, 4, 5 } )\n      Dim upperBound = numbers.Count - 1\n\n      For ctr As Integer = 0 To upperBound\n         Dim square As Integer = CInt(Math.Pow(numbers(ctr), 2))\n         Console.WriteLine(&quot;{0}^{1}&quot;, numbers(ctr), square)\n         Console.WriteLine(&quot;Adding {0} to the collection...&quot; + vbCrLf, \n                           square)\n         numbers.Add(square)\n      Next\n   \n      Console.WriteLine(&quot;Elements now in the collection: &quot;)\n      For Each number In numbers\n         Console.Write(&quot;{0}    &quot;, number)\n      Next   \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    1^1\n&#39;    Adding 1 to the collection...\n&#39;    \n&#39;    2^4\n&#39;    Adding 4 to the collection...\n&#39;    \n&#39;    3^9\n&#39;    Adding 9 to the collection...\n&#39;    \n&#39;    4^16\n&#39;    Adding 16 to the collection...\n&#39;    \n&#39;    5^25\n&#39;    Adding 25 to the collection...\n&#39;    \n&#39;    Elements now in the collection:\n&#39;    1    2    3    4    5    1    4    9    16    25\n</code></pre><p> Note that you must establish the number of iterations before iterating the collection either by using a counter inside the loop that will exit the loop appropraitely, by iterating backward, from <code>Count</code> - 1 to 0, or, as the example does, by assigning the number of elements in the array to a variable and using it to establish the upper bound of the loop. Otherwise, if an element is added to the collection on every iteration, an endless loop results.  </p>\n</li>\n<li><p>If it is not necessary to add elements to the collection while iterating it, you can store the elements to be added in a temporary collection that you add when iterating the collection has finished.  The following example uses this approach to add the square of numbers in a collection to a temporary collection, and then to combine the collections into a single array object.  </p>\n<pre><code class=\"lang-cs\" name=\"System.InvalidOperationException#3\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n   public static void Main()\n   {\n      var numbers = new List&lt;int&gt;() { 1, 2, 3, 4, 5 };\n      var temp = new List&lt;int&gt;();\n      \n      // Square each number and store it in a temporary collection.\n      foreach (var number in numbers) {\n         int square = (int) Math.Pow(number, 2);\n         temp.Add(square);\n      }\n    \n      // Combine the numbers into a single array.\n      int[] combined = new int[numbers.Count + temp.Count];\n      Array.Copy(numbers.ToArray(), 0, combined, 0, numbers.Count);\n      Array.Copy(temp.ToArray(), 0, combined, numbers.Count, temp.Count);\n      \n      // Iterate the array.\n      foreach (var value in combined)\n         Console.Write(&quot;{0}    &quot;, value);\n   }\n}\n// The example displays the following output:\n//       1    2    3    4    5    1    4    9    16    25\n</code></pre><pre><code class=\"lang-vb\" name=\"System.InvalidOperationException#3\">Imports System.Collections.Generic\n\nModule Example\n   Public Sub Main()\n      Dim numbers As New List(Of Integer)( { 1, 2, 3, 4, 5 } )\n      Dim temp As New List(Of Integer)()\n      \n      &#39; Square each number and store it in a temporary collection.\n      For Each number In numbers\n         Dim square As Integer = CInt(Math.Pow(number, 2))\n         temp.Add(square)\n      Next\n    \n      &#39; Combine the numbers into a single array.\n      Dim combined(numbers.Count + temp.Count - 1) As Integer \n      Array.Copy(numbers.ToArray(), 0, combined, 0, numbers.Count)\n      Array.Copy(temp.ToArray(), 0, combined, numbers.Count, temp.Count)\n      \n      &#39; Iterate the array.\n      For Each value In combined\n         Console.Write(&quot;{0}    &quot;, value)\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       1    2    3    4    5    1    4    9    16    25\n</code></pre></li>\n</ul>\n<p><a name=\"Sorting\"></a>   </p>\n<h3 id=\"sorting-an-array-or-collection-whose-objects-cannot-be-compared\">Sorting an array or collection whose objects cannot be compared</h3>\n<p> General-purpose sorting methods, such as the <a class=\"xref\" href=\"system.array#System_Array_Sort_System_Array_\" data-linktype=\"relative-path\">System.Array.Sort(Array)</a> method or the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Sort\" data-linktype=\"relative-path\">System.Collections.Generic.List&lt;T&gt;.Sort()</a> method, usually require that at least one of the objects to be sorted implement the <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> or the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface. If not, the collection or array cannot be sorted, and the method throws an  InvalidOperationException exception. The following example defines a <code>Person</code> class, stores two <code>Person</code> objects in a generic <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> object, and attempts to sort them. As the output from the example shows, the call to the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Sort\" data-linktype=\"relative-path\">System.Collections.Generic.List&lt;T&gt;.Sort()</a> method throws an InvalidOperationException.  </p>\n<pre><code class=\"lang-cs\" name=\"System.InvalidOperationException#12\">using System;\nusing System.Collections.Generic;\n\npublic class Person\n{\n   public Person(String fName, String lName)\n   {\n      FirstName = fName;\n      LastName = lName;\n   }\n   \n   public String FirstName { get; set; }\n   public String LastName { get; set; }\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      var people = new List&lt;Person&gt;();\n      \n      people.Add(new Person(&quot;John&quot;, &quot;Doe&quot;));\n      people.Add(new Person(&quot;Jane&quot;, &quot;Doe&quot;));\n      people.Sort();\n      foreach (var person in people)\n         Console.WriteLine(&quot;{0} {1}&quot;, person.FirstName, person.LastName);\n   }\n}\n// The example displays the following output:\n//    Unhandled Exception: System.InvalidOperationException: Failed to compare two elements in the array. ---&gt; \n//       System.ArgumentException: At least one object must implement IComparable.\n//       at System.Collections.Comparer.Compare(Object a, Object b)\n//       at System.Collections.Generic.ArraySortHelper`1.SwapIfGreater(T[] keys, IComparer`1 comparer, Int32 a, Int32 b)\n//       at System.Collections.Generic.ArraySortHelper`1.DepthLimitedQuickSort(T[] keys, Int32 left, Int32 right, IComparer`1 comparer, Int32 depthLimit)\n//       at System.Collections.Generic.ArraySortHelper`1.Sort(T[] keys, Int32 index, Int32 length, IComparer`1 comparer)\n//       --- End of inner exception stack trace ---\n//       at System.Collections.Generic.ArraySortHelper`1.Sort(T[] keys, Int32 index, Int32 length, IComparer`1 comparer)\n//       at System.Array.Sort[T](T[] array, Int32 index, Int32 length, IComparer`1 comparer)\n//       at System.Collections.Generic.List`1.Sort(Int32 index, Int32 count, IComparer`1 comparer)\n//       at Example.Main()\n</code></pre><pre><code class=\"lang-vb\" name=\"System.InvalidOperationException#12\">Imports System.Collections.Generic\n\nPublic Class Person\n   Public Sub New(fName As String, lName As String)\n      FirstName = fName\n      LastName = lName\n   End Sub\n   \n   Public Property FirstName As String\n   Public Property LastName As String\nEnd Class\n\nModule Example\n   Public Sub Main()\n      Dim people As New List(Of Person)()\n      \n      people.Add(New Person(&quot;John&quot;, &quot;Doe&quot;))\n      people.Add(New Person(&quot;Jane&quot;, &quot;Doe&quot;))\n      people.Sort()\n      For Each person In people\n         Console.WriteLine(&quot;{0} {1}&quot;, person.FirstName, person.LastName)\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    Unhandled Exception: System.InvalidOperationException: Failed to compare two elements in the array. ---&gt; \n&#39;       System.ArgumentException: At least one object must implement IComparable.\n&#39;       at System.Collections.Comparer.Compare(Object a, Object b)\n&#39;       at System.Collections.Generic.ArraySortHelper`1.SwapIfGreater(T[] keys, IComparer`1 comparer, Int32 a, Int32 b)\n&#39;       at System.Collections.Generic.ArraySortHelper`1.DepthLimitedQuickSort(T[] keys, Int32 left, Int32 right, IComparer`1 comparer, Int32 depthLimit)\n&#39;       at System.Collections.Generic.ArraySortHelper`1.Sort(T[] keys, Int32 index, Int32 length, IComparer`1 comparer)\n&#39;       --- End of inner exception stack trace ---\n&#39;       at System.Collections.Generic.ArraySortHelper`1.Sort(T[] keys, Int32 index, Int32 length, IComparer`1 comparer)\n&#39;       at System.Array.Sort[T](T[] array, Int32 index, Int32 length, IComparer`1 comparer)\n&#39;       at System.Collections.Generic.List`1.Sort(Int32 index, Int32 count, IComparer`1 comparer)\n&#39;       at Example.Main()\n</code></pre><p> You can eliminate the exception in any of three ways:  </p>\n<ul>\n<li><p>If you can own the type that you are trying to sort (that is, if you control its source code), you can modify it to implement the <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> or the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface. This requires that you implement either the <a class=\"xref\" href=\"system.icomparable-1#System_IComparable_1_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> or the <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> method. Adding an interface implementation to an existing type is not a breaking change.  </p>\n<p> The following example uses this approach to provide an <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> implementation  for the <code>Person</code> class. You can still call the collection or array&#39;s general sorting method and, as the output from the example shows, the collection sorts successfully.  </p>\n<pre><code class=\"lang-cs\" name=\"System.InvalidOperationException#13\">using System;\nusing System.Collections.Generic;\n\npublic class Person : IComparable&lt;Person&gt;\n{\n   public Person(String fName, String lName)\n   {\n      FirstName = fName;\n      LastName = lName;\n   }\n   \n   public String FirstName { get; set; }\n   public String LastName { get; set; }\n\n   public int CompareTo(Person other)\n   {\n      return String.Format(&quot;{0} {1}&quot;, LastName, FirstName).\n             CompareTo(String.Format(&quot;{0} {1}&quot;, LastName, FirstName));    \n   }       \n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      var people = new List&lt;Person&gt;();\n      \n      people.Add(new Person(&quot;John&quot;, &quot;Doe&quot;));\n      people.Add(new Person(&quot;Jane&quot;, &quot;Doe&quot;));\n      people.Sort();\n      foreach (var person in people)\n         Console.WriteLine(&quot;{0} {1}&quot;, person.FirstName, person.LastName);\n   }\n}\n// The example displays the following output:\n//       Jane Doe\n//       John Doe\n</code></pre><pre><code class=\"lang-vb\" name=\"System.InvalidOperationException#13\">Imports System.Collections.Generic\n\nPublic Class Person : Implements IComparable(Of Person)\n   Public Sub New(fName As String, lName As String)\n      FirstName = fName\n      LastName = lName\n   End Sub\n   \n   Public Property FirstName As String\n   Public Property LastName As String\n   \n   Public Function CompareTo(other As Person) As Integer _\n          Implements IComparable(Of Person).CompareTo\n      Return String.Format(&quot;{0} {1}&quot;, LastName, FirstName).\n             CompareTo(String.Format(&quot;{0} {1}&quot;, LastName, FirstName))    \n   End Function       \nEnd Class\n\nModule Example\n   Public Sub Main()\n      Dim people As New List(Of Person)()\n      \n      people.Add(New Person(&quot;John&quot;, &quot;Doe&quot;))\n      people.Add(New Person(&quot;Jane&quot;, &quot;Doe&quot;))\n      people.Sort()\n      For Each person In people\n         Console.WriteLine(&quot;{0} {1}&quot;, person.FirstName, person.LastName)\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Jane Doe\n&#39;       John Doe\n</code></pre></li>\n<li><p>If you cannot modify the source code for the type you are trying to sort, you can define a special-purpose sorting class that implements the <a class=\"xref\" href=\"system.collections.generic.icomparer-1\" data-linktype=\"relative-path\">IComparer&lt;T&gt;</a> interface.  You can call an overload of the <code>Sort</code> method that includes an  <a class=\"xref\" href=\"system.collections.generic.icomparer-1\" data-linktype=\"relative-path\">IComparer&lt;T&gt;</a> parameter. This approach is especially useful if you want to develop a specialized sorting class that can sort objects based on multiple criteria.  </p>\n<p> The following example uses the approach by developing a custom <code>PersonComparer</code> class that is used to sort <code>Person</code> collections.  It then passes an instance of this class to the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Sort_System_Collections_Generic_IComparer__0__\" data-linktype=\"relative-path\">System.Collections.Generic.List&lt;T&gt;.Sort(IComparer&lt;T&gt;)</a> method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.InvalidOperationException#14\">using System;\nusing System.Collections.Generic;\n\npublic class Person\n{\n   public Person(String fName, String lName)\n   {\n      FirstName = fName;\n      LastName = lName;\n   }\n   \n   public String FirstName { get; set; }\n   public String LastName { get; set; }\n}\n\npublic class PersonComparer : IComparer&lt;Person&gt;\n{\n   public int Compare(Person x, Person y) \n   {\n      return String.Format(&quot;{0} {1}&quot;, x.LastName, x.FirstName).\n             CompareTo(String.Format(&quot;{0} {1}&quot;, y.LastName, y.FirstName));    \n   }       \n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      var people = new List&lt;Person&gt;();\n      \n      people.Add(new Person(&quot;John&quot;, &quot;Doe&quot;));\n      people.Add(new Person(&quot;Jane&quot;, &quot;Doe&quot;));\n      people.Sort(new PersonComparer());\n      foreach (var person in people)\n         Console.WriteLine(&quot;{0} {1}&quot;, person.FirstName, person.LastName);\n   }\n}\n// The example displays the following output:\n//       Jane Doe\n//       John Doe\n</code></pre><pre><code class=\"lang-vb\" name=\"System.InvalidOperationException#14\">Imports System.Collections.Generic\n\nPublic Class Person\n   Public Sub New(fName As String, lName As String)\n      FirstName = fName\n      LastName = lName\n   End Sub\n   \n   Public Property FirstName As String\n   Public Property LastName As String\nEnd Class\n\nPublic Class PersonComparer : Implements IComparer(Of Person)\n   Public Function Compare(x As Person, y As Person) As Integer _\n          Implements IComparer(Of Person).Compare\n      Return String.Format(&quot;{0} {1}&quot;, x.LastName, x.FirstName).\n             CompareTo(String.Format(&quot;{0} {1}&quot;, y.LastName, y.FirstName))    \n   End Function       \nEnd Class\n\nModule Example\n   Public Sub Main()\n      Dim people As New List(Of Person)()\n      \n      people.Add(New Person(&quot;John&quot;, &quot;Doe&quot;))\n      people.Add(New Person(&quot;Jane&quot;, &quot;Doe&quot;))\n      people.Sort(New PersonComparer())\n      For Each person In people\n         Console.WriteLine(&quot;{0} {1}&quot;, person.FirstName, person.LastName)\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Jane Doe\n&#39;       John Doe\n</code></pre></li>\n<li><p>If you cannot modify the source code for the type you are trying to sort, you can create a  <a class=\"xref\" href=\"system.comparison-1\" data-linktype=\"relative-path\">Comparison&lt;T&gt;</a> delegate to perform the sorting. The delegate signature is  </p>\n</li>\n</ul>\n<p><codecontentplaceholder>0</codecontentplaceholder><br><codecontentplaceholder>1</codecontentplaceholder><br>     The following example uses the approach by defining a  <code>PersonComparison</code> method that matches the  <a class=\"xref\" href=\"system.comparison-1\" data-linktype=\"relative-path\">Comparison&lt;T&gt;</a> delegate signature.  It then passes this delegate to the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Sort_System_Comparison__0__\" data-linktype=\"relative-path\">System.Collections.Generic.List&lt;T&gt;.Sort(Comparison&lt;T&gt;)</a> method.  </p>\n<pre><code> [!code-cs[System.InvalidOperationException#15](~/add/codesnippet/csharp/t-system.invalidoperatio_12.cs)]\n [!code-vb[System.InvalidOperationException#15](~/add/codesnippet/visualbasic/t-system.invalidoperatio_12.vb)]  \n</code></pre><p><a name=\"Nullable\"></a>   </p>\n<h3 id=\"casting-a-nullablet-that-is-null-to-its-underlying-type\">Casting a Nullable&lt;T&gt; that is null to its underlying type</h3>\n<p> Attempting to cast a <a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable&lt;T&gt;</a> value that is <code>null</code> to its underlying type throws an InvalidOperationException exception  and displays the error message, &quot;<strong>Nullable object must have a value.</strong>  </p>\n<p> The following example throws an InvalidOperationException exception  when it attempts to iterate an array that includes a <code>Nullable(Of Integer)</code> value.  </p>\n<pre><code class=\"lang-vb\" name=\"System.InvalidOperationException#4\">Imports System.Linq\n\nModule Example\n   Public Sub Main()\n      Dim queryResult = New Integer?() { 1, 2, Nothing, 4 }\n      Dim map = queryResult.Select(Function(nullableInt) CInt(nullableInt))\n      \n      &#39; Display list.\n      For Each num In map\n         Console.Write(&quot;{0} &quot;, num)\n      Next\n      Console.WriteLine()   \n   End Sub\nEnd Module\n&#39; The example displays thIe following output:\n&#39;    1 2\n&#39;    Unhandled Exception: System.InvalidOperationException: Nullable object must have a value.\n&#39;       at System.ThrowHelper.ThrowInvalidOperationException(ExceptionResource resource)\n&#39;       at Example.&lt;Main&gt;b__0(Nullable`1 nullableInt)\n&#39;       at System.Linq.Enumerable.WhereSelectArrayIterator`2.MoveNext()\n&#39;       at Example.Main()\n</code></pre><pre><code class=\"lang-cs\" name=\"System.InvalidOperationException#4\">using System;\nusing System.Linq;\n\npublic class Example\n{\n   public static void Main()\n   {\n      var queryResult = new int?[] { 1, 2, null, 4 };\n      var map = queryResult.Select(nullableInt =&gt; (int)nullableInt);\n      \n      // Display list.\n      foreach (var num in map)\n         Console.Write(&quot;{0} &quot;, num);\n      Console.WriteLine();   \n   }\n}\n// The example displays the following output:\n//    1 2\n//    Unhandled Exception: System.InvalidOperationException: Nullable object must have a value.\n//       at System.ThrowHelper.ThrowInvalidOperationException(ExceptionResource resource)\n//       at Example.&lt;Main&gt;b__0(Nullable`1 nullableInt)\n//       at System.Linq.Enumerable.WhereSelectArrayIterator`2.MoveNext()\n//       at Example.Main()\n</code></pre><p> To prevent the exception:  </p>\n<ul>\n<li><p>Use the <a class=\"xref\" href=\"system.nullable-1#System_Nullable_1_HasValue_\" data-linktype=\"relative-path\">HasValue</a> property to select only those elements that are not <code>null</code>.  </p>\n</li>\n<li><p>Call one of the <a class=\"xref\" href=\"system.nullable-1#System_Nullable_1_GetValueOrDefault_\" data-linktype=\"relative-path\">GetValueOrDefault</a> overloads to provide a default value for a <code>null</code> value.  </p>\n<p>The following example does both to avoid the  InvalidOperationException exception.  </p>\n<pre><code class=\"lang-cs\" name=\"System.InvalidOperationException#5\">using System;\nusing System.Linq;\n\npublic class Example\n{\n   public static void Main()\n   {\n      var queryResult = new int?[] { 1, 2, null, 4 };\n      var numbers = queryResult.Select(nullableInt =&gt; (int)nullableInt.GetValueOrDefault());\n      \n      // Display list using Nullable&lt;int&gt;.HasValue.\n      foreach (var number in numbers)\n         Console.Write(&quot;{0} &quot;, number);\n      Console.WriteLine();   \n      \n      numbers = queryResult.Select(nullableInt =&gt; (int) (nullableInt.HasValue ? nullableInt : -1));\n      // Display list using Nullable&lt;int&gt;.GetValueOrDefault.\n      foreach (var number in numbers)\n         Console.Write(&quot;{0} &quot;, number);\n      Console.WriteLine();   \n   }\n}\n// The example displays the following output:\n//       1 2 0 4\n//       1 2 -1 4\n</code></pre><pre><code class=\"lang-vb\" name=\"System.InvalidOperationException#5\">Imports System.Linq\n\nModule Example\n   Public Sub Main()\n      Dim queryResult = New Integer?() { 1, 2, Nothing, 4 }\n      Dim numbers = queryResult.Select(Function(nullableInt) _ \n                                          CInt(nullableInt.GetValueOrDefault()))\n      &#39; Display list.\n      For Each number In numbers\n         Console.Write(&quot;{0} &quot;, number)\n      Next\n      Console.WriteLine()\n      \n      &#39; Use -1 to indicate a missing values.\n      numbers = queryResult.Select(Function(nullableInt) _   \n                                      CInt(If(nullableInt.HasValue, nullableInt, -1)))\n      &#39; Display list.\n      For Each number In numbers\n         Console.Write(&quot;{0} &quot;, number)\n      Next\n      Console.WriteLine()\n                                      \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       1 2 0 4\n&#39;       1 2 -1 4\n</code></pre></li>\n</ul>\n<p><a name=\"Empty\"></a>   </p>\n<h3 id=\"calling-a-systemlinqenumerable-method-on-an-empty-collection\">Calling a System.Linq.Enumerable method on an empty collection</h3>\n<p> The &lt;xref:System.Linq.Enumerable.Aggregate%2A?displayProperty=fullName&gt;, <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Average_\" data-linktype=\"relative-path\">Average</a>, &lt;xref:System.Linq.Enumerable.First%2A?displayProperty=fullName&gt;, &lt;xref:System.Linq.Enumerable.Last%2A?displayProperty=fullName&gt;, <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Max_\" data-linktype=\"relative-path\">Max</a>, <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Min_\" data-linktype=\"relative-path\">Min</a>,  &lt;xref:System.Linq.Enumerable.Single%2A?displayProperty=fullName&gt;, and &lt;xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=fullName&gt; methods perform operations on a sequence and return a single result.   Some overloads of these methods throw an InvalidOperationException exception when the sequence is empty, while other overloads return <code>null</code>. The &lt;xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=fullName&gt; method also throws an InvalidOperationException exception when the sequence contains more than one element.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Most of the methods that throw an InvalidOperationException exception are overloads. Be sure that you understand the behavior of the overload that you choose.  </p>\n</div>\n<p> The following table lists the exception messages from the InvalidOperationException exception objects thrown by calls to some <a class=\"xref\" href=\"system.linq.enumerable\" data-linktype=\"relative-path\">System.Linq.Enumerable</a> methods.  </p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Message</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Aggregate</code> <br> <code>Average</code> <br> <code>Last</code> <br> <code>Max</code> <br> <code>Min</code></td>\n<td><strong>Sequence contains no elements</strong></td>\n</tr>\n<tr>\n<td><code>First</code></td>\n<td><strong>Sequence contains no matching element</strong></td>\n</tr>\n<tr>\n<td><code>Single</code> <br> <code>SingleOrDefault</code></td>\n<td><strong>Sequence contains more than one matching element</strong></td>\n</tr>\n</tbody>\n</table>\n<p> How you eliminate or handle the exception depends on your application&#39;s assumptions and on the particular method you call.  </p>\n<ul>\n<li><p>When you deliberately call one of these methods without checking for an empty sequence, you are assuming that the sequence is not empty, and that an empty sequence is an unexpected occurrence. In this case, catching or rethrowing the exception is appropriate .  </p>\n</li>\n<li><p>If your failure to check for an empty sequence was inadvertent, you can  call one of the overloads of the &lt;xref:System.Linq.Enumerable.Any%2A?displayProperty=fullName&gt; overload to determine whether a sequence contains any elements.  </p>\n<div class=\"TIP\"><h5>Tip</h5><p> Calling the <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Any__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Boolean__\" data-linktype=\"relative-path\">System.Linq.Enumerable.Any&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Boolean&gt;)</a> method before generating a sequence can improve performance if the data to be processed might contain a large number of elements or if operation that generates the sequence is expensive.  </p>\n</div>\n</li>\n<li><p>If you&#39;ve called a method such as &lt;xref:System.Linq.Enumerable.First%2A?displayProperty=fullName&gt;, &lt;xref:System.Linq.Enumerable.Last%2A?displayProperty=fullName&gt;, or &lt;xref:System.Linq.Enumerable.Single%2A?displayProperty=fullName&gt;, you can substitute an alternate method, such as &lt;xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=fullName&gt;, &lt;xref:System.Linq.Enumerable.LastOrDefault%2A?displayProperty=fullName&gt;, or  &lt;xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=fullName&gt;, that returns a default value instead of a member of the sequence.  </p>\n<p>The examples provide additional detail.  </p>\n<p>The following example uses the <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_Average_\" data-linktype=\"relative-path\">Average</a> method to compute the average of a sequence whose values are greater than 4. Since no values from the original array exceed 4, no values are included in the sequence, and the method throws an InvalidOperationException exception.  </p>\n<pre><code class=\"lang-cs\" name=\"System.InvalidOperationException#6\">using System;\nusing System.Linq;\n\npublic class Example\n{\n   public static void Main()\n   {\n      int[] data = { 1, 2, 3, 4 };\n      var average = data.Where(num =&gt; num &gt; 4).Average();\n      Console.Write(&quot;The average of numbers greater than 4 is {0}&quot;,\n                    average);\n   }\n}\n// The example displays the following output:\n//    Unhandled Exception: System.InvalidOperationException: Sequence contains no elements\n//       at System.Linq.Enumerable.Average(IEnumerable`1 source)\n//       at Example.Main()\n</code></pre><pre><code class=\"lang-vb\" name=\"System.InvalidOperationException#6\">Imports System.Linq\n\nModule Example\n   Public Sub Main()\n      Dim data() As Integer = { 1, 2, 3, 4 }\n      Dim average = data.Where(Function(num) num &gt; 4).Average()\n      Console.Write(&quot;The average of numbers greater than 4 is {0}&quot;,\n                    average)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    Unhandled Exception: System.InvalidOperationException: Sequence contains no elements\n&#39;       at System.Linq.Enumerable.Average(IEnumerable`1 source)\n&#39;       at Example.Main()\n</code></pre><p>The exception can be eliminated by calling the &lt;xref:System.Linq.Enumerable.Any%2A&gt; method to determine whether the sequence contains any elements before calling the method that processes the sequence, as the following example shows.  </p>\n<pre><code class=\"lang-cs\" name=\"System.InvalidOperationException#7\">using System;\nusing System.Linq;\n\npublic class Example\n{\n   public static void Main()\n   {\n       int[] dbQueryResults = { 1, 2, 3, 4 };\n       var moreThan4 = dbQueryResults.Where(num =&gt; num &gt; 4);\n   \n       if(moreThan4.Any())\n           Console.WriteLine(&quot;Average value of numbers greater than 4: {0}:&quot;, \n                             moreThan4.Average());\n       else\n           // handle empty collection \n           Console.WriteLine(&quot;The dataset has no values greater than 4.&quot;);\n   }\n}\n// The example displays the following output:\n//       The dataset has no values greater than 4.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.InvalidOperationException#7\">Imports System.Linq\n\nModule Example\n   Public Sub Main()\n       Dim dbQueryResults() As Integer = { 1, 2, 3, 4 }\n       Dim moreThan4 = dbQueryResults.Where(Function(num) num &gt; 4)\n   \n       If moreThan4.Any() Then\n           Console.WriteLine(&quot;Average value of numbers greater than 4: {0}:&quot;, \n                             moreThan4.Average())\n       Else\n           &#39; Handle empty collection. \n           Console.WriteLine(&quot;The dataset has no values greater than 4.&quot;)\n       End If    \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       The dataset has no values greater than 4.\n</code></pre><p>The &lt;xref:System.Linq.Enumerable.First%2A?displayProperty=fullName&gt; method returns the first item in a sequence or the first element in a sequence that satisfies a specified condition. If the sequence is empty and therefore does not have a first element, it throws an InvalidOperationException exception.  </p>\n<p>In the following example, the <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_First__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Boolean__\" data-linktype=\"relative-path\">System.Linq.Enumerable.First&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Boolean&gt;)</a> method throws an InvalidOperationException exception because the dbQueryResults array doesn&#39;t contain an element greater than 4.  </p>\n<pre><code class=\"lang-vb\" name=\"System.InvalidOperationException#8\">Imports System.Linq\n\nModule Example\n   Public Sub Main()\n      Dim dbQueryResults() As Integer = { 1, 2, 3, 4 }\n\n      Dim firstNum = dbQueryResults.First(Function(n) n &gt; 4)\n\n      Console.WriteLine(&quot;The first value greater than 4 is {0}&quot;, \n                        firstNum)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    Unhandled Exception: System.InvalidOperationException: \n&#39;       Sequence contains no matching element\n&#39;       at System.Linq.Enumerable.First[TSource](IEnumerable`1 source, Func`2 predicate)\n&#39;       at Example.Main()\n</code></pre><pre><code class=\"lang-cs\" name=\"System.InvalidOperationException#8\">using System;\nusing System.Linq;\n\npublic class Example\n{\n   public static void Main()\n   {\n      int[] dbQueryResults = { 1, 2, 3, 4 };\n\n      var firstNum = dbQueryResults.First(n =&gt; n &gt; 4);\n\n      Console.WriteLine(&quot;The first value greater than 4 is {0}&quot;, \n                        firstNum);\n   }\n}\n// The example displays the following output:\n//    Unhandled Exception: System.InvalidOperationException: \n//       Sequence contains no matching element\n//       at System.Linq.Enumerable.First[TSource](IEnumerable`1 source, Func`2 predicate)\n//       at Example.Main()\n</code></pre><p>You can call the &lt;xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=fullName&gt; method instead of &lt;xref:System.Linq.Enumerable.First%2A?displayProperty=fullName&gt; to return a specified or default value. If the method does not find a first element in the sequence, it returns  the default value for that data type.  The default value is <code>null</code> for a reference type, zero for a numeric data type, and <a class=\"xref\" href=\"system.datetime#System_DateTime_MinValue\" data-linktype=\"relative-path\">System.DateTime.MinValue</a> for the <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> type.  </p>\n</li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> Interpreting the value returned by the &lt;xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=fullName&gt; method is often complicated by the fact that the default value of the type can be a valid value in the sequence.  In this case, you an call the &lt;xref:System.Linq.Enumerable.Any%2A?displayProperty=fullName&gt;method to determine whether the sequence has valid members before calling the &lt;xref:System.Linq.Enumerable.First%2A?displayProperty=fullName&gt; method.  </p>\n</div>\n<p> The following example calls the  <a class=\"xref\" href=\"system.linq.enumerable#System_Linq_Enumerable_FirstOrDefault__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Boolean__\" data-linktype=\"relative-path\">System.Linq.Enumerable.FirstOrDefault&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TSource,Boolean&gt;)</a> method to prevent the InvalidOperationException exception thrown in the previous example.  </p>\n<pre><code class=\"lang-cs\" name=\"System.InvalidOperationException#9\">using System;\nusing System.Linq;\n\npublic class Example\n{\n   public static void Main()\n   {\n      int[] dbQueryResults = { 1, 2, 3, 4 };\n\n      var firstNum = dbQueryResults.FirstOrDefault(n =&gt; n &gt; 4);\n\n      if (firstNum == 0)\n         Console.WriteLine(&quot;No value is greater than 4.&quot;);\n      else   \n         Console.WriteLine(&quot;The first value greater than 4 is {0}&quot;, \n                           firstNum);\n   }\n}\n// The example displays the following output:\n//       No value is greater than 4.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.InvalidOperationException#9\">Imports System.Linq\n\nModule Example\n   Public Sub Main()\n      Dim dbQueryResults() As Integer = { 1, 2, 3, 4 }\n\n      Dim firstNum = dbQueryResults.FirstOrDefault(Function(n) n &gt; 4)\n\n      If firstNum = 0 Then\n         Console.WriteLIne(&quot;No value is greater than 4.&quot;)\n      Else   \n         Console.WriteLine(&quot;The first value greater than 4 is {0}&quot;, \n                           firstNum)\n      End If                     \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       No value is greater than 4.\n</code></pre><p><a name=\"Single\"></a>   </p>\n<h3 id=\"calling-enumerablesingle-or-enumerablesingleordefault-on-a-sequence-without-one-element\">Calling Enumerable.Single or Enumerable.SingleOrDefault on a sequence without one element</h3>\n<p> The &lt;xref:System.Linq.Enumerable.Single%2A?displayProperty=fullName&gt; method returns the only element of a sequence, or the only element of a sequence that meets a specified condition.    If there are no elements in the sequence, or if there is more than one element , the method throws an InvalidOperationException exception.  </p>\n<p> You can use the &lt;xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=fullName&gt; method to return a default value instead of throwing an exception when the sequence contains no elements. However, the &lt;xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=fullName&gt; method still throws an InvalidOperationException exception  when the sequence contains more than one element.  </p>\n<p> The following table lists the exception messages from the InvalidOperationException exception objects thrown by calls to the &lt;xref:System.Linq.Enumerable.Single%2A?displayProperty=fullName&gt; and &lt;xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=fullName&gt; methods.  </p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Message</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Single</code></td>\n<td><strong>Sequence contains no matching element</strong></td>\n</tr>\n<tr>\n<td><code>Single</code> <br> <code>SingleOrDefault</code></td>\n<td><strong>Sequence contains more than one matching element</strong></td>\n</tr>\n</tbody>\n</table>\n<p> In the following example, the call to the &lt;xref:System.Linq.Enumerable.Single%2A?displayProperty=fullName&gt; method throws an InvalidOperationException exception because the sequence doesn&#39;t have an element greater than 4.  </p>\n<pre><code class=\"lang-vb\" name=\"System.InvalidOperationException#10\">Imports System.Linq\n\nModule Example\n   Public Sub Main()\n       Dim dbQueryResults() As Integer = { 1, 2, 3, 4 }\n   \n       Dim singleObject = dbQueryResults.Single(Function(value) value &gt; 4)\n   \n       &#39; Display results.\n       Console.WriteLine(&quot;{0} is the only value greater than 4&quot;, \n                         singleObject)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    Unhandled Exception: System.InvalidOperationException: \n&#39;       Sequence contains no matching element\n&#39;       at System.Linq.Enumerable.Single[TSource](IEnumerable`1 source, Func`2 predicate)\n&#39;       at Example.Main()\n</code></pre><pre><code class=\"lang-cs\" name=\"System.InvalidOperationException#10\">using System;\nusing System.Linq;\n\npublic class Example\n{\n   public static void Main()\n   {\n       int[] dbQueryResults = { 1, 2, 3, 4 };\n   \n       var singleObject = dbQueryResults.Single(value =&gt; value &gt; 4);\n   \n       // Display results.\n       Console.WriteLine(&quot;{0} is the only value greater than 4&quot;, singleObject);\n   }\n}\n// The example displays the following output:\n//    Unhandled Exception: System.InvalidOperationException: \n//       Sequence contains no matching element\n//       at System.Linq.Enumerable.Single[TSource](IEnumerable`1 source, Func`2 predicate)\n//       at Example.Main()\n</code></pre><p> The following example attempts to prevent the InvalidOperationException exception thrown when a sequence is empty by instead calling the &lt;xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=fullName&gt; method. However, because this sequence returns multiple elements whose value is greater than 2, it also throws an InvalidOperationException exception.  </p>\n<pre><code class=\"lang-cs\" name=\"System.InvalidOperationException#11\">using System;\nusing System.Linq;\n\npublic class Example\n{\n   public static void Main()\n   {\n       int[] dbQueryResults = { 1, 2, 3, 4 };\n   \n       var singleObject = dbQueryResults.SingleOrDefault(value =&gt; value &gt; 2);\n   \n       if (singleObject != 0)\n           Console.WriteLine(&quot;{0} is the only value greater than 2&quot;, \n                             singleObject);\n       else\n           // Handle an empty collection.\n           Console.WriteLine(&quot;No value is greater than 2&quot;);\n   }\n}\n// The example displays the following output:\n//    Unhandled Exception: System.InvalidOperationException: \n//       Sequence contains more than one matching element\n//       at System.Linq.Enumerable.SingleOrDefault[TSource](IEnumerable`1 source, Func`2 predicate)\n//       at Example.Main()\n</code></pre><pre><code class=\"lang-vb\" name=\"System.InvalidOperationException#11\">Imports System.Linq\n\nModule Example\n   Public Sub Main()\n       Dim dbQueryResults() As Integer = { 1, 2, 3, 4 }\n   \n       Dim singleObject = dbQueryResults.SingleOrDefault(Function(value) value &gt; 2)\n   \n       If singleObject &lt;&gt; 0 Then\n           Console.WriteLine(&quot;{0} is the only value greater than 2&quot;, \n                             singleObject)\n       Else\n           &#39; Handle an empty collection.\n           Console.WriteLine(&quot;No value is greater than 2&quot;)\n       End If    \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    Unhandled Exception: System.InvalidOperationException: \n&#39;       Sequence contains more than one matching element\n&#39;       at System.Linq.Enumerable.SingleOrDefault[TSource](IEnumerable`1 source, Func`2 predicate)\n&#39;       at Example.Main()\n</code></pre><p> Calling the &lt;xref:System.Linq.Enumerable.Single%2A?displayProperty=fullName&gt; method assumes that either a sequence or the sequence that meets specified criteria contains only one element.  &lt;xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=fullName&gt; assumes a sequence with zero or one result, but no more. If this assumption is a deliberate one on your part and these conditions are not met, rethrowing or catching the resulting InvalidOperationException is appropriate. Otherwise, or if you expect that invalid conditions will occur with some frequency, you should consider using some other <a class=\"xref\" href=\"system.linq.enumerable\" data-linktype=\"relative-path\">Enumerable</a> method, such as &lt;xref:System.Linq.Enumerable.FirstOrDefault%2A&gt; or &lt;xref:System.Linq.Enumerable.Where%2A&gt;.  </p>\n<p><a name=\"Emit\"></a>   </p>\n<h3 id=\"dynamic-cross-application-domain-field-access\">Dynamic cross-application domain field access</h3>\n<p> The <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldflda\" data-linktype=\"relative-path\">System.Reflection.Emit.OpCodes.Ldflda</a> Microsoft intermediate language (MSIL) instruction throws an InvalidOperationException exception if the object containing the field whose address you are trying to retrieve is not within the application domain in which your code is executing. The address of a field can only be accessed from the application domain in which it resides.  </p>\n<p><a name=\"Throwing\"></a>   </p>\n<h2 id=\"throwing-an-invalidoperationexception-exception\">Throwing an InvalidOperationException exception</h2>\n<p> You should throw an InvalidOperationException exception only when the state of your object for some reason does not support a particular method call. That is, the method call is valid in some circumstances or contexts, but is invalid in others.  </p>\n<p> If the method invocation failure is due to invalid arguments, then <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a> or one of its derived classes, <a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a> or <a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a>, should be thrown instead.  </p>\n<p><a name=\"Misc\"></a>   </p>\n<h2 id=\"miscellaneous-information\">Miscellaneous information</h2>\n<p> InvalidOperationException uses the HRESULT COR_E_INVALIDOPERATION, which has the value 0x80131509.  </p>\n<p> For a list of initial property values for an instance of InvalidOperationException, see the <a class=\"xref\" href=\"system.invalidoperationexception#System_InvalidOperationException__ctor_\" data-linktype=\"relative-path\">InvalidOperationException</a> constructors.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_InvalidOperationException__ctor\" data-linktype=\"self-bookmark\">InvalidOperationException()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_InvalidOperationException__ctor_System_String_\" data-linktype=\"self-bookmark\">InvalidOperationException(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> class with a specified error message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_InvalidOperationException__ctor_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"self-bookmark\">InvalidOperationException(SerializationInfo,StreamingContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> class with serialized data.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_InvalidOperationException__ctor_System_String_System_Exception_\" data-linktype=\"self-bookmark\">InvalidOperationException(String,Exception)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> class with a specified error message and a reference to the inner exception that is the cause of this exception.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_InvalidOperationException__ctor\">\r\n    \r\n            <a id=\"System_InvalidOperationException__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InvalidOperationException()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public InvalidOperationException ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor initializes the <a class=\"xref\" href=\"system.exception#System_Exception_Message_\" data-linktype=\"relative-path\">Message</a> property of the new instance to a system-supplied message that describes the error, such as &quot;The requested operation cannot be performed.&quot; This message takes into account the current system culture.  </p>\n<p> The following table shows the initial property values for an instance of <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a>.  </p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.exception#System_Exception_InnerException_\" data-linktype=\"relative-path\">InnerException</a></td>\n<td>A null reference (<code>Nothing</code> in Visual Basic).</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.exception#System_Exception_Message_\" data-linktype=\"relative-path\">Message</a></td>\n<td>The localized error message string.</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_InvalidOperationException__ctor_System_String_\">\r\n    \r\n            <a id=\"System_InvalidOperationException__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InvalidOperationException(String)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> class with a specified error message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public InvalidOperationException (string message);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>message</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The message that describes the error.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor initializes the <a class=\"xref\" href=\"system.exception#System_Exception_Message_\" data-linktype=\"relative-path\">Message</a> property of the new exception using the <code>message</code> parameter. The content of <code>message</code> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.  </p>\n<p> The following table shows the initial property values for an instance of <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a>.  </p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.exception#System_Exception_InnerException_\" data-linktype=\"relative-path\">InnerException</a></td>\n<td>A null reference (<code>Nothing</code> in Visual Basic).</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.exception#System_Exception_Message_\" data-linktype=\"relative-path\">Message</a></td>\n<td>The error message string.</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_InvalidOperationException__ctor_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\">\r\n    \r\n            <a id=\"System_InvalidOperationException__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InvalidOperationException(SerializationInfo,StreamingContext)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> class with serialized data.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected InvalidOperationException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>info</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object that holds the serialized object data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>context</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The contextual information about the source or destination.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor is called during deserialization to reconstitute the exception object transmitted over a stream. For more information, see <a href=\"../Topic/XML%20and%20SOAP%20Serialization.md\" data-linktype=\"relative-path\">XML and SOAP Serialization</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_InvalidOperationException__ctor_System_String_System_Exception_\">\r\n    \r\n            <a id=\"System_InvalidOperationException__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InvalidOperationException(String,Exception)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> class with a specified error message and a reference to the inner exception that is the cause of this exception.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public InvalidOperationException (string message, Exception innerException);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>message</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The error message that explains the reason for the exception.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>innerException</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The exception that is the cause of the current exception. If the <code>innerException</code> parameter is not a null reference (<code>Nothing</code> in Visual Basic), the current exception is raised in a <code>catch</code> block that handles the inner exception.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <a class=\"xref\" href=\"system.exception#System_Exception_InnerException_\" data-linktype=\"relative-path\">InnerException</a> property. The <a class=\"xref\" href=\"system.exception#System_Exception_InnerException_\" data-linktype=\"relative-path\">InnerException</a> property returns the same value that is passed into the constructor, or a null reference (<code>Nothing</code> in Visual Basic) if the <a class=\"xref\" href=\"system.exception#System_Exception_InnerException_\" data-linktype=\"relative-path\">InnerException</a> property does not supply the inner exception value to the constructor.  </p>\n<p> The following table shows the initial property values for an instance of <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a>.  </p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.exception#System_Exception_InnerException_\" data-linktype=\"relative-path\">InnerException</a></td>\n<td>The inner exception reference.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.exception#System_Exception_Message_\" data-linktype=\"relative-path\">Message</a></td>\n<td>The error message string.</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.InvalidOperationException.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.InvalidOperationException.yml\">\r\n<meta name=\"APIName\" content=\"System.InvalidOperationException\">\r\n<meta name=\"APIName\" content=\"System.InvalidOperationException..ctor\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"0b09ce24-da54-c6fd-0a44-4136357e4865\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System\\InvalidOperationException.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"The exception that is thrown when a method call is invalid for the object&amp;#39;s current state.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.InvalidOperationException\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.InvalidOperationException.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.InvalidOperationException.yml","open_to_public_contributors":true,"api_name":["System.InvalidOperationException","System.InvalidOperationException..ctor"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.InvalidOperationException","System::InvalidOperationException","System.InvalidOperationException.#ctor","System::InvalidOperationException::#ctor"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"0b09ce24-da54-c6fd-0a44-4136357e4865","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System\\InvalidOperationException.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/InvalidOperationException.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"InvalidOperationException class | Microsoft Docs","_op_ogTitle":"InvalidOperationException class","description":"The exception that is thrown when a method call is invalid for the object&#39;s current state.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.InvalidOperationException","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.invalidoperationexception","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.invalidoperationexception","fileRelativePath":"System.InvalidOperationException.html"},"themesRelativePathToOutputRoot":"_themes/"}