{"content":"\r\n<div style=\"display:none\">\r\n\t\r\n</div>\r\n\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">XamlType</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Reports information about XAML types as part of the overall XAML system that is implemented in .NET Framework XAML Services.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public class XamlType : IEquatable&lt;System.Xaml.XamlType&gt;</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span></div>\r\n  \t\t\t<span class=\"lang-csharp\">XamlType</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>Many APIs in the XamlType class provide information about XAML types, where the concept they report on is similar to particular sections of the XAML specification [MS-XAML].  </p>\n<p> XamlType is used extensively in the .NET Framework XAML Services API for reporting information about a XAML type. XamlType reports the information that you might need to know about a XAML type in order to work with an instance or to access its members from a XAML node stream, or a similar XAML representation. Its reporting is similar to how the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> in the CLR type system, together with reflection classes such as <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a>, provide information about a CLR type and its usage.  </p>\n<p> To extend the XAML type system, you can derive from XamlType. To do so effectively, you might also need to implement a <a class=\"xref\" href=\"system.xaml.schema.xamltypeinvoker\" data-linktype=\"relative-path\">XamlTypeInvoker</a>. The <a class=\"xref\" href=\"system.xaml.schema.xamltypeinvoker\" data-linktype=\"relative-path\">XamlTypeInvoker</a> enables the generalized XAML type system to work with the type system backing that you specify as part of the invocation behavior. The specific custom <a class=\"xref\" href=\"system.xaml.schema.xamltypeinvoker\" data-linktype=\"relative-path\">XamlTypeInvoker</a> provides a way to reduce the dependencies on the CLR type system, which are used by the default XamlType behavior.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType__ctor_System_Type_System_Xaml_XamlSchemaContext_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">XamlType(Type,XamlSchemaContext)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> class based on the underlying CLR type information.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public XamlType (Type underlyingType, System.Xaml.XamlSchemaContext schemaContext);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>underlyingType</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The underlying CLR <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> for the XAML type to construct.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>schemaContext</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xaml.xamlschemacontext\" data-linktype=\"relative-path\">XamlSchemaContext</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>XAML schema context for XAML readers or XAML writers.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>One or more of <code>underlyingType</code> or <code>schemaContext</code> are <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType__ctor_System_String_System_Collections_Generic_IList_System_Xaml_XamlType__System_Xaml_XamlSchemaContext_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">XamlType(String,IList&lt;XamlType&gt;,XamlSchemaContext)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> class based on a string name for the type.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected XamlType (string typeName, System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; typeArguments, System.Xaml.XamlSchemaContext schemaContext);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>typeName</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The name of the type to create.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>typeArguments</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList</a>&lt;<a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>&gt;</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The type arguments for a <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> that represents a generic type. Can be (and often is) <code>null</code>, which indicates that the represented type is not a generic type.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>schemaContext</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xaml.xamlschemacontext\" data-linktype=\"relative-path\">XamlSchemaContext</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>XAML schema context for XAML readers and XAML writers.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>One or more of <code>typeName</code> or <code>schemaContext</code> are <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This is a protected constructor. No current public derived classes exist that use this particular path for construction. As a consumer of the existing <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>, you must use the other constructor signatures (<a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType__ctor_System_Type_System_Xaml_XamlSchemaContext_System_Xaml_Schema_XamlTypeInvoker_\" data-linktype=\"relative-path\">XamlType(Type,XamlSchemaContext,XamlTypeInvoker)</a>, <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType__ctor_System_Type_System_Xaml_XamlSchemaContext_\" data-linktype=\"relative-path\">XamlType(Type,XamlSchemaContext)</a>, or <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType__ctor_System_String_System_String_System_Collections_Generic_IList_System_Xaml_XamlType__System_Xaml_XamlSchemaContext_\" data-linktype=\"relative-path\">XamlType(String,String,IList&lt;XamlType&gt;,XamlSchemaContext)</a>) to initialize a <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType__ctor_System_Type_System_Xaml_XamlSchemaContext_System_Xaml_Schema_XamlTypeInvoker_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">XamlType(Type,XamlSchemaContext,XamlTypeInvoker)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> class based on underlying type information and a <a class=\"xref\" href=\"system.xaml.schema.xamltypeinvoker\" data-linktype=\"relative-path\">XamlTypeInvoker</a> implementation.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public XamlType (Type underlyingType, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlTypeInvoker invoker);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>underlyingType</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The underlying type for the XAML type to construct.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>schemaContext</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xaml.xamlschemacontext\" data-linktype=\"relative-path\">XamlSchemaContext</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>XAML schema context for the XAML reader.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>invoker</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xaml.schema.xamltypeinvoker\" data-linktype=\"relative-path\">XamlTypeInvoker</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.xaml.schema.xamltypeinvoker\" data-linktype=\"relative-path\">XamlTypeInvoker</a> implementation that handles run-time reflection calls against the <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>One or more of <code>underlyingType</code> or <code>schemaContext</code> are <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType__ctor_System_String_System_String_System_Collections_Generic_IList_System_Xaml_XamlType__System_Xaml_XamlSchemaContext_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">XamlType(String,String,IList&lt;XamlType&gt;,XamlSchemaContext)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> class based on the XAML namespace and a string name for the type. This constructor is exclusively for analysis and XAML-node recording of type usages that are known to not have backing in the supporting type system and XAML schema context.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public XamlType (string unknownTypeNamespace, string unknownTypeName, System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; typeArguments, System.Xaml.XamlSchemaContext schemaContext);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>unknownTypeNamespace</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The XAML namespace for the type, as a string.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>unknownTypeName</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The name of the type in the provided <code>unknownTypeNamespace</code> XAML namespace.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>typeArguments</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList</a>&lt;<a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>&gt;</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The type arguments for a <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> that represents a generic type. Can be (and often is) <code>null</code>, which indicates that the represented type is not a generic type.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>schemaContext</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xaml.xamlschemacontext\" data-linktype=\"relative-path\">XamlSchemaContext</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>XAML schema context for XAML readers or XAML writers.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>One or more of <code>unknownTypeNamespace</code>, <code>unknownTypeName</code>, or <code>schemaContext</code> are <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Use this constructor only for &quot;unknown&quot; types where a XAML type that maps to an underlying type system is unavailable. This constructor might not produce a result where <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_IsUnknown_\" data-linktype=\"relative-path\">IsUnknown</a> is <code>true</code>. Instead, the default reflector logic reports the underlying type as <a class=\"xref\" href=\"system.xaml.xamllanguage#System_Xaml_XamlLanguage_Object_\" data-linktype=\"relative-path\">Object</a>. However, this behavior can change because of the <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupIsUnknown_\" data-linktype=\"relative-path\">LookupIsUnknown</a> override.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_AllowedContentTypes\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AllowedContentTypes</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a read-only collection of the types that are usable as the <span class=\"xref\">stem.Xaml.XamlType.ContentProperty*</span> value for this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; AllowedContentTypes { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList</a>&lt;<a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>&gt;</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A read-only collection of possible content types.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Types that are assignable a specific content type (for example, assignable to a base type that is an allowed content type) are not considered multiple types for purposes of AllowedContentTypes.  </p>\n<p> If you do not use the default internal CLR reflection technique for a <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>, calls to this property can invoke <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupAllowedContentTypes_\" data-linktype=\"relative-path\">LookupAllowedContentTypes</a> overrides on <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> derived classes.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_BaseType\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">BaseType</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> for the immediate base type of this XAML type. Determination of this value is based on the underlying type of this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> and schema context.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Xaml.XamlType BaseType { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> for the immediate base type of this XAML type.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If you do not use the default internal CLR reflection technique for a <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>, calls to this property can invoke <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupBaseType_\" data-linktype=\"relative-path\">LookupBaseType</a> overrides on <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> derived classes. For more information about return values and other behavior, see the documentation for <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupBaseType_\" data-linktype=\"relative-path\">LookupBaseType</a> on this type. By default, BaseType returns an internal constant that represents an <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> if <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_UnderlyingType_\" data-linktype=\"relative-path\">UnderlyingType</a> is <code>null</code>.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupBaseType_\" data-linktype=\"relative-path\">LookupBaseType</a> is virtual, and therefore, can be overridden. The override has the potential (whether for malicious purposes or otherwise) to change the reported type information about a XAML type so that it no longer aligns in an expected way with the type system information of its underlying CLR type. For any security-critical checks of assignment operations and access, use the underlying CLR type instead.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_ConstructionRequiresArguments\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ConstructionRequiresArguments</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that indicates whether this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> must have arguments (generic constraints through <code>x:TypeArguments</code>, initialization text, or other XAML techniques) to construct a valid instance of the type.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool ConstructionRequiresArguments { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if construction of an instance requires some argument value; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If you do not use the default internal CLR reflection technique for a <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>, calls to this property can invoke <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupConstructionRequiresArguments_\" data-linktype=\"relative-path\">LookupConstructionRequiresArguments</a> overrides on <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> derived classes. For more information about return values and other behavior, see the documentation for <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupConstructionRequiresArguments_\" data-linktype=\"relative-path\">LookupConstructionRequiresArguments</a> on this type.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_ContentProperty\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ContentProperty</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the <a class=\"xref\" href=\"system.xaml.xamlmember\" data-linktype=\"relative-path\">XamlMember</a> information for the content property of this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Xaml.XamlMember ContentProperty { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xaml.xamlmember\" data-linktype=\"relative-path\">XamlMember</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><a class=\"xref\" href=\"system.xaml.xamlmember\" data-linktype=\"relative-path\">XamlMember</a> information for the content property of this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>. May be <code>null</code> if no content property exists.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>When using the binding or backing of the CLR type system, the XAML content property can be specified on a type by applying <a class=\"xref\" href=\"system.windows.markup.contentpropertyattribute\" data-linktype=\"relative-path\">ContentPropertyAttribute</a> to the type definition.  </p>\n<p> This property aligns to the <code>[content property]</code> information item in the [MS-XAML] specification.  </p>\n<p> If you do not use the default internal CLR reflection technique for a <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>, calls to this property can invoke <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupContentProperty_\" data-linktype=\"relative-path\">LookupContentProperty</a> overrides on <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> derived classes. For more information about return values and other behavior, see the documentation for <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupContentProperty_\" data-linktype=\"relative-path\">LookupContentProperty</a> on this type.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_ContentWrappers\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ContentWrappers</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the types that are used to wrap content for a content property when it is not a strict type match, such as strings in a strongly typed <code>Collection&lt;T&gt;</code>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; ContentWrappers { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList</a>&lt;<a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>&gt;</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A read-only collection of possible content wrapper types; otherwise, <code>null</code>. See Remarks.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If there are no wrappers to account for type match loosening, this property is <code>null</code>.  </p>\n<p> Types that evaluate as <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_CanAssignTo_\" data-linktype=\"relative-path\">CanAssignTo</a> for a specific content type are not considered multiple types for purposes of ContentWrappers.  </p>\n<p> In the CLR binding for <a class=\"xref\" href=\"system.xaml\" data-linktype=\"relative-path\">System.Xaml</a> and <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>, the XAML content wrapper type can be specified on a type as a <a class=\"xref\" href=\"system.windows.markup.contentwrapperattribute\" data-linktype=\"relative-path\">ContentWrapperAttribute</a>.  </p>\n<p> If you do not use the default internal CLR reflection technique for a <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>, calls to this property can invoke <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupContentWrappers_\" data-linktype=\"relative-path\">LookupContentWrappers</a> overrides on <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> derived classes. For more information about return values and other behavior, see the documentation for <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupContentWrappers_\" data-linktype=\"relative-path\">LookupContentWrappers</a> on this type.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_DeferringLoader\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">DeferringLoader</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the <span class=\"xref\">stem.Xaml.Schema.XamlValueConverter`1</span> that represents the deferred loading conversion behavior for this type.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt; DeferringLoader { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xaml.schema.xamlvalueconverter-1\" data-linktype=\"relative-path\">XamlValueConverter</a>&lt;<a class=\"xref\" href=\"system.xaml.xamldeferringloader\" data-linktype=\"relative-path\">XamlDeferringLoader</a>&gt;</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <span class=\"xref\">stem.Xaml.Schema.XamlValueConverter`1</span> with <a class=\"xref\" href=\"system.xaml.xamldeferringloader\" data-linktype=\"relative-path\">XamlDeferringLoader</a> constraint that represents the deferred loading behavior for this type.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>XAML template behavior in WPF is an example of deferred loading behavior.  </p>\n<p> If you do not use the default internal CLR reflection technique for a <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>, calls to this property can invoke <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupDeferringLoader_\" data-linktype=\"relative-path\">LookupDeferringLoader</a> overrides on <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> derived classes. For more information about return values and other behavior, see the documentation for <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupDeferringLoader_\" data-linktype=\"relative-path\">LookupDeferringLoader</a> on this type.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_Invoker\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Invoker</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the <a class=\"xref\" href=\"system.xaml.schema.xamltypeinvoker\" data-linktype=\"relative-path\">XamlTypeInvoker</a> implementation that is associated with this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Xaml.Schema.XamlTypeInvoker Invoker { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xaml.schema.xamltypeinvoker\" data-linktype=\"relative-path\">XamlTypeInvoker</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.xaml.schema.xamltypeinvoker\" data-linktype=\"relative-path\">XamlTypeInvoker</a> implementation that is associated with this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If you do not use the default internal CLR reflection technique for a <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>, calling Invoker can invoke either <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupInvoker_\" data-linktype=\"relative-path\">LookupInvoker</a> or a specific override of that method. For more information about return values and other behavior, see the documentation for <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupInvoker_\" data-linktype=\"relative-path\">LookupInvoker</a> on this type.  </p>\n<p> If a <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupInvoker_\" data-linktype=\"relative-path\">LookupInvoker</a> override returns <code>null</code>, or if the default implementation returns <code>null</code> because of lack of <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_UnderlyingType_\" data-linktype=\"relative-path\">UnderlyingType</a> for this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>, then Invoker returns <a class=\"xref\" href=\"system.xaml.schema.xamltypeinvoker#System_Xaml_Schema_XamlTypeInvoker_UnknownInvoker_\" data-linktype=\"relative-path\">UnknownInvoker</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_IsAmbient\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsAmbient</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that indicates whether this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents an ambient type, as per the XAML definition.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsAmbient { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents an ambient type; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If you do not use the default internal CLR reflection technique for a <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>, calls to this property can invoke <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupIsAmbient_\" data-linktype=\"relative-path\">LookupIsAmbient</a> overrides on <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> derived classes. For more information about return values and other behavior, see the documentation for <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupIsAmbient_\" data-linktype=\"relative-path\">LookupIsAmbient</a> on this type.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_IsArray\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsArray</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that indicates whether this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents an array.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsArray { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents an array; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If you do not use the default internal CLR reflection technique for a <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>, calls to this property can invoke <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupCollectionKind_\" data-linktype=\"relative-path\">LookupCollectionKind</a> overrides on <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> derived classes. For more information about return values and other behavior, see the documentation for <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupCollectionKind_\" data-linktype=\"relative-path\">LookupCollectionKind</a> on this type.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_IsCollection\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsCollection</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that indicates whether this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents a collection.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsCollection { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents a collection; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If you do not use the default internal CLR reflection technique for a <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>, calls to this property can invoke <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupCollectionKind_\" data-linktype=\"relative-path\">LookupCollectionKind</a> overrides on <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> derived classes. For more information about return values and other behavior, see the documentation for <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupCollectionKind_\" data-linktype=\"relative-path\">LookupCollectionKind</a> on this type.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_IsConstructible\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsConstructible</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that indicates whether this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents a constructible type, as per the XAML definition.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsConstructible { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents a constructible type; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This property aligns to the <code>[is default constructible]</code> information item in the [MS-XAML] specification.  </p>\n<p> If you do not use the default internal CLR reflection technique for a <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>, calls to this property can invoke <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupIsConstructible_\" data-linktype=\"relative-path\">LookupIsConstructible</a> overrides on <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> derived classes. For more information about return values and other behavior, see the documentation for <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupIsConstructible_\" data-linktype=\"relative-path\">LookupIsConstructible</a> on this type.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_IsDictionary\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsDictionary</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that indicates whether this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents a dictionary, as per the XAML definition.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsDictionary { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents a dictionary; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This property aligns to the <code>[is dictionary]</code> information item in the [MS-XAML] specification.  </p>\n<p> If you do not use the default internal CLR reflection technique for a <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>, calls to this property can invoke <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupCollectionKind_\" data-linktype=\"relative-path\">LookupCollectionKind</a> overrides on <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> derived classes. For more information about return values and other behavior, see the documentation for <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupCollectionKind_\" data-linktype=\"relative-path\">LookupCollectionKind</a> on this type.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_IsGeneric\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsGeneric</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that indicates whether this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents a generic type.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsGeneric { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents a generic type; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This property is a helper property that checks for a null value of <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_TypeArguments_\" data-linktype=\"relative-path\">TypeArguments</a>. There is no specific <code>Lookup</code> method related to IsGeneric.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_IsMarkupExtension\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsMarkupExtension</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that indicates whether this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents a markup extension.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsMarkupExtension { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents a markup extension; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>In XAML specification terms, this type must be assignable to <code>x:MarkupExtension</code> in order to return <code>true</code> for IsMarkupExtension.  </p>\n<p> If you do not use the default internal CLR reflection technique for a <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>, calls to this property can invoke <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupIsMarkupExtension_\" data-linktype=\"relative-path\">LookupIsMarkupExtension</a> overrides on <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> derived classes. For more information about return values and other behavior, see the documentation for <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupIsMarkupExtension_\" data-linktype=\"relative-path\">LookupIsMarkupExtension</a> on this type.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_IsNameScope\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsNameScope</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that indicates whether this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents a XAML namescope, as per the XAML definition.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsNameScope { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents a XAML namescope; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>A XAML namescope enforces the name uniqueness of the property or properties used for <code>x:Name</code> / <code>[name property]</code>. If IsNameScope is <code>true</code>, some mechanism for enforcing uniqueness should exist and should evaluate from the perspective of this type owning a XAML namescope. The XAML namescope then extends to the content of the type until another XAML namescope-owning type is encountered.  </p>\n<p> This property aligns to the <code>[is name scope]</code> information item in the [MS-XAML] specification.  </p>\n<p> If you do not use the default internal CLR reflection technique for a <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>, calls to this property can invoke <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupIsNameScope_\" data-linktype=\"relative-path\">LookupIsNameScope</a> overrides on <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> derived classes.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_IsNameValid\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsNameValid</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that indicates whether this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> is initialized by using a valid <code>xamlName</code> string as its <span class=\"xref\">stem.Xaml.XamlType.Name*</span>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsNameValid { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> is initialized by using a valid <code>xamlName</code> string; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_IsNullable\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsNullable</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that indicates whether this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents a nullable type, as per the XAML definition.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsNullable { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents a nullable type; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This property aligns to the <code>[is nullable]</code> information item in the [MS-XAML] specification.  </p>\n<p> If you are not using the default internal CLR reflection technique for a <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>, calls to this property can invoke <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupIsNullable_\" data-linktype=\"relative-path\">LookupIsNullable</a> overrides on <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> derived classes.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_IsPublic\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsPublic</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that indicates whether this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents a public type in the relevant type system.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsPublic { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents a public type; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If you do not use the default internal CLR reflection technique for a <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>, calls to this property can invoke <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupIsPublic_\" data-linktype=\"relative-path\">LookupIsPublic</a> overrides on <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> derived classes.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupIsPublic_\" data-linktype=\"relative-path\">LookupIsPublic</a> is virtual, and therefore, can be overridden. The override has the potential (whether for malicious purposes or otherwise) to change the reported access information about a XAML type so that it no longer aligns in an expected way with the type system and access information of its underlying CLR type. For any security-critical checks of assignment operations and access, use the underlying CLR type instead.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_IsUnknown\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsUnknown</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that indicates whether this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents a type that cannot be resolved in the underlying type system.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsUnknown { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents an unresolvable type; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If you do not use the default internal CLR reflection technique for a <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>, calls to this property can invoke <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupIsUnknown_\" data-linktype=\"relative-path\">LookupIsUnknown</a> overrides on <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>derived classes.  </p>\n<p> For a load path that involves <a class=\"xref\" href=\"system.xaml.xamlobjectwriter\" data-linktype=\"relative-path\">XamlObjectWriter</a>, a <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> that has <code>true</code> for IsUnknown cannot be written into an object graph. Under the default implementations in <a class=\"xref\" href=\"system.xaml\" data-linktype=\"relative-path\">System.Xaml</a> , the <a class=\"xref\" href=\"system.xaml.xamlobjectwriter#System_Xaml_XamlObjectWriter_WriteStartObject_\" data-linktype=\"relative-path\">WriteStartObject</a> call throws a <a class=\"xref\" href=\"system.xaml.xamlobjectwriterexception\" data-linktype=\"relative-path\">XamlObjectWriterException</a> when the relevant <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> reports <code>true</code> for IsUnknown. You should not pass a <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> that has IsUnknown as <code>true</code> unless you are prepared to handle the exceptions from <a class=\"xref\" href=\"system.xaml.xamlobjectwriter\" data-linktype=\"relative-path\">XamlObjectWriter</a>, or you have other ways to adjust the <a class=\"xref\" href=\"system.xaml.xamlobjectwriter\" data-linktype=\"relative-path\">XamlObjectWriter</a> behavior or the XAML node stream prior to writing the object graph.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_IsUsableDuringInitialization\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsUsableDuringInitialization</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that indicates whether this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> is built top-down during XAML initialization.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsUsableDuringInitialization { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> is built top-down during XAML initialization; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Top-down is a metaphor that approximates XAML processor behavior when creating the object graph. When built top-down, a type is instantiated, attached to the parent, and then has its properties set. Top-down construction avoids invoking property-changed handlers multiple times. Such handling ripples up the object graph and therefore, eliminates the multiple handler calls and provides a performance optimization for startup of the object graph.  </p>\n<p> If you do not use the default internal CLR reflection technique for a <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>, calls to this property can invoke <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupUsableDuringInitialization_\" data-linktype=\"relative-path\">LookupUsableDuringInitialization</a> overrides on <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> derived classes. For more information about return values and other behavior, see the documentation for <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupUsableDuringInitialization_\" data-linktype=\"relative-path\">LookupUsableDuringInitialization</a> on this type.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_IsWhitespaceSignificantCollection\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsWhitespaceSignificantCollection</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that indicates whether this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents a whitespace significant collection, as per the XML definition.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsWhitespaceSignificantCollection { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents a whitespace significant collection; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If you do not use the default internal CLR reflection technique for a <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>, calls to this property can invoke <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupIsWhitespaceSignificantCollection_\" data-linktype=\"relative-path\">LookupIsWhitespaceSignificantCollection</a> overrides on <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> derived classes. For more information about return values and other behavior, see the documentation for <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupIsWhitespaceSignificantCollection_\" data-linktype=\"relative-path\">LookupIsWhitespaceSignificantCollection</a> on this type.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_IsXData\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsXData</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that indicates whether this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents XML <code>XDATA</code>, as per the XAML definition.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsXData { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents <code>XDATA</code>; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This property aligns to the <code>[is xdata]</code> information item in the [MS-XAML] specification.  </p>\n<p> If you do not use the default internal CLR reflection technique for a <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>, calls to this property can invoke <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupIsXData_\" data-linktype=\"relative-path\">LookupIsXData</a> overrides on <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> derived classes. For more information about return values and other behavior, see the documentation for <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupIsXData_\" data-linktype=\"relative-path\">LookupIsXData</a> on this type.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_ItemType\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ItemType</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that provides the type information for the <code>Items</code> property of this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Xaml.XamlType ItemType { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> object for the type of the items in the collection; otherwise, <code>null</code>, if this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> does not represent a collection.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This property is only relevant if this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents a collection (<a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_IsCollection_\" data-linktype=\"relative-path\">IsCollection</a> is <code>true</code>). The <code>Items</code> property is whatever property holds items in that type of collection or array.  </p>\n<p> If you do not use the default internal CLR reflection technique for a <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>, calls to this property can invoke <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupItemType_\" data-linktype=\"relative-path\">LookupItemType</a> overrides on <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> derived classes. For more information about return values and other behavior, see the documentation for <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupItemType_\" data-linktype=\"relative-path\">LookupItemType</a> on this type.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_KeyType\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">KeyType</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that provides the type information for the key property of this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>, if the <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents a dictionary.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Xaml.XamlType KeyType { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> object for the type of the key for dictionary usage, otherwise, <code>null</code>, if this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> does not represent a dictionary.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This property is only relevant if this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents a dictionary (<a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_IsDictionary_\" data-linktype=\"relative-path\">IsDictionary</a> is <code>true</code>).  </p>\n<p> If you do not use the default internal CLR reflection technique for a <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>, calls to this property can invoke <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupKeyType_\" data-linktype=\"relative-path\">LookupKeyType</a> overrides on <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> derived classes. For more information about return values and other behavior, see the documentation for <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupKeyType_\" data-linktype=\"relative-path\">LookupKeyType</a> on this type.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_MarkupExtensionReturnType\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">MarkupExtensionReturnType</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that provides the type information for the returned <code>ProvideValue</code> of this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>, if it represents a markup extension.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Xaml.XamlType MarkupExtensionReturnType { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> object for the return type for markup extension usage; otherwise, <code>null</code>, if this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> does not represent a markup extension.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This property is only relevant if this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents a markup extension (<code>x:MarkupExtension</code> is in the assignable types list).  </p>\n<p> If you do not use the default internal CLR reflection technique for a <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>, calls to this property can invoke <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupMarkupExtensionReturnType_\" data-linktype=\"relative-path\">LookupMarkupExtensionReturnType</a> overrides on <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> derived classes. For more information about return values and other behavior, see the documentation for <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupMarkupExtensionReturnType_\" data-linktype=\"relative-path\">LookupMarkupExtensionReturnType</a> on this type.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_Name\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Name</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the string name of the type that this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string Name { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string name of this XAML type.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This property typically gets the schema-constructed name (per the <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType__ctor_\" data-linktype=\"relative-path\">XamlType</a> signature), or the name of the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>, if it is constructed by using the pertinent constructor of the CLR type system.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_PreferredXamlNamespace\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreferredXamlNamespace</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the single XAML namespace that is the primary XAML namespace for this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string PreferredXamlNamespace { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The identifier, as a string, of the primary XAML namespace for this XAML type.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This implementation provides the same value as calling <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_GetXamlNamespaces_\" data-linktype=\"relative-path\">GetXamlNamespaces</a> and then getting the first value string from the returned enumerable set.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_SchemaContext\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">SchemaContext</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the active <a class=\"xref\" href=\"system.xaml.xamlschemacontext\" data-linktype=\"relative-path\">XamlSchemaContext</a> for processing this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Xaml.XamlSchemaContext SchemaContext { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xaml.xamlschemacontext\" data-linktype=\"relative-path\">XamlSchemaContext</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The active <a class=\"xref\" href=\"system.xaml.xamlschemacontext\" data-linktype=\"relative-path\">XamlSchemaContext</a> for processing this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><a class=\"xref\" href=\"system.xaml.xamlschemacontext\" data-linktype=\"relative-path\">XamlSchemaContext</a> is a required parameter entry when constructing a <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_TrimSurroundingWhitespace\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TrimSurroundingWhitespace</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that indicates whether this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> has whitespace handling behavior for serialization that trims the surrounding whitespace in its content.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool TrimSurroundingWhitespace { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents a type that uses whitespace trimming; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If you do not use the default internal CLR reflection technique for a <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>, calls to this property can invoke <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupIsWhitespaceSignificantCollection_\" data-linktype=\"relative-path\">LookupIsWhitespaceSignificantCollection</a> overrides on <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> derived classes. For more information about return values and other behavior, see the documentation for <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupIsWhitespaceSignificantCollection_\" data-linktype=\"relative-path\">LookupIsWhitespaceSignificantCollection</a> on this type.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_TypeArguments\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TypeArguments</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a list of type arguments for cases where this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents a generic.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; TypeArguments { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList</a>&lt;<a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>&gt;</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A list of type argument types; otherwise, <code>null</code>, if this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> does not represent a generic.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>There are certain scenarios for a <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> where calling the TypeArguments parameter returns a list where the types are still open. In this case, one or more of the returned <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> values will have placeholder values for <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_Name_\" data-linktype=\"relative-path\">Name</a>, such as <code>T</code>, to represent that the generic is still open. This scenario can occur if you get a <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> from a call to <a class=\"xref\" href=\"system.xaml.xamlschemacontext#System_Xaml_XamlSchemaContext_GetXamlType_\" data-linktype=\"relative-path\">GetXamlType</a>, instead of from a XAML reader implementation.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_TypeConverter\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TypeConverter</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a <span class=\"xref\">stem.Xaml.Schema.XamlValueConverter`1</span> with <a class=\"xref\" href=\"system.componentmodel.typeconverter\" data-linktype=\"relative-path\">TypeConverter</a> constraint that represents type conversion behavior for values of this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt; TypeConverter { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xaml.schema.xamlvalueconverter-1\" data-linktype=\"relative-path\">XamlValueConverter</a>&lt;<a class=\"xref\" href=\"system.componentmodel.typeconverter\" data-linktype=\"relative-path\">TypeConverter</a>&gt;</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <span class=\"xref\">stem.Xaml.Schema.XamlValueConverter`1</span> with <a class=\"xref\" href=\"system.componentmodel.typeconverter\" data-linktype=\"relative-path\">TypeConverter</a> constraint that represents type conversion behavior for values of this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If you do not use the default internal CLR reflection technique for a <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>, calls to this property can invoke <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupTypeConverter_\" data-linktype=\"relative-path\">LookupTypeConverter</a> overrides on <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> derived classes. For more information about return values and other behavior, see the documentation for <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupTypeConverter_\" data-linktype=\"relative-path\">LookupTypeConverter</a> on this type.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_UnderlyingType\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">UnderlyingType</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the CLR <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> that underlies this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public Type UnderlyingType { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The CLR <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> that underlies this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_ValueSerializer\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ValueSerializer</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a <span class=\"xref\">stem.Xaml.Schema.XamlValueConverter`1</span> with <a class=\"xref\" href=\"system.windows.markup.valueserializer\" data-linktype=\"relative-path\">ValueSerializer</a> constraint that represents value serialization behavior for values of this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt; ValueSerializer { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xaml.schema.xamlvalueconverter-1\" data-linktype=\"relative-path\">XamlValueConverter</a>&lt;<a class=\"xref\" href=\"system.windows.markup.valueserializer\" data-linktype=\"relative-path\">ValueSerializer</a>&gt;</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <span class=\"xref\">stem.Xaml.Schema.XamlValueConverter`1</span> with <a class=\"xref\" href=\"system.windows.markup.valueserializer\" data-linktype=\"relative-path\">ValueSerializer</a> constraint that represents value serialization behavior for values of this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>; otherwise, <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If you do not use the default internal CLR reflection technique for a <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>, calls to this property can invoke <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupValueSerializer_\" data-linktype=\"relative-path\">LookupValueSerializer</a> overrides on <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> derived classes. For more information about return values and other behavior, see the documentation for <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupValueSerializer_\" data-linktype=\"relative-path\">LookupValueSerializer</a> on this type.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_CanAssignTo_System_Xaml_XamlType_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CanAssignTo(XamlType)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether an instance of this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> has the specified <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> in its list of assignable types.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual bool CanAssignTo (System.Xaml.XamlType xamlType);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>xamlType</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The type to check against the current <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> .</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>xamlType</code> is in the assignable types list; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Although the assignable type does not have all the capabilities of the reference type, you can use it for assignment. For example, you can use assignment to make type matches for the values of a property. The concept of assignable types in XAML is similar to the concept of casting up in the CLR type system. For example, under a CLR type system, every type has an <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> in its assignable type list.  </p>\n<p> If one of the two <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> instances that are used for comparison has <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_IsUnknown_\" data-linktype=\"relative-path\">IsUnknown</a> equal to <code>true</code>, this method has a special Unknown mode that returns <code>true</code> if the two <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> instances are equivalent.  </p>\n<p> The default implementation uses the CLR <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> from <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_UnderlyingType_\" data-linktype=\"relative-path\">UnderlyingType</a> for this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> and the input <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>, and calls <a class=\"xref\" href=\"system.type#System_Type_IsAssignableFrom_\" data-linktype=\"relative-path\">IsAssignableFrom</a>. Override this method if you want a different determination of assignable types.  </p>\n<p> Passing a null <code>xamlType</code> does not throw an exception and always returns <code>false</code>.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> CanAssignTo is virtual, and therefore, can be overridden. The override has the potential (whether for malicious purposes or otherwise) to change the assignability of a XAML type so that it no longer aligns in an expected way with the type-casting behavior of its underlying CLR type. For any security-critical checks of assignment operations and access, use the underlying CLR type instead.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_Equals_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Equals(Object)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Indicates whether the current object is equal to another object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override bool Equals (object obj);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>obj</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The object to compare with this object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the current object is equal to the <code>obj</code> parameter; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_Equals_System_Xaml_XamlType_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Equals(XamlType)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Indicates whether the current object is equal to another object of the same type.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool Equals (System.Xaml.XamlType other);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>other</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object to compare with this object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the current object is equal to the <code>other</code> parameter; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_GetAliasedProperty_System_Xaml_XamlDirective_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetAliasedProperty(XamlDirective)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the XAML member that is aliased to a XAML directive by this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Xaml.XamlMember GetAliasedProperty (System.Xaml.XamlDirective directive);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>directive</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xaml.xamldirective\" data-linktype=\"relative-path\">XamlDirective</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The directive for which to find the aliased member.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xaml.xamlmember\" data-linktype=\"relative-path\">XamlMember</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The aliased member, if found; otherwise, <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If you do not use the default internal CLR reflection technique for a <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>, calls to this method can invoke <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupAliasedProperty_\" data-linktype=\"relative-path\">LookupAliasedProperty</a> overrides on <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> derived classes. For more information about return values and other behavior, see the documentation for <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupAliasedProperty_\" data-linktype=\"relative-path\">LookupAliasedProperty</a> on this type.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_GetAllAttachableMembers\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetAllAttachableMembers()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a collection that contains all the attachable properties that are exposed by this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Collections.Generic.ICollection&lt;System.Xaml.XamlMember&gt; GetAllAttachableMembers ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.icollection-1\" data-linktype=\"relative-path\">ICollection</a>&lt;<a class=\"xref\" href=\"system.xaml.xamlmember\" data-linktype=\"relative-path\">XamlMember</a>&gt;</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A collection that contains zero or more <a class=\"xref\" href=\"system.xaml.xamlmember\" data-linktype=\"relative-path\">XamlMember</a> values.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Each <a class=\"xref\" href=\"system.xaml.xamlmember\" data-linktype=\"relative-path\">XamlMember</a> in the returned collection should contain values that support the concept that the <a class=\"xref\" href=\"system.xaml.xamlmember\" data-linktype=\"relative-path\">XamlMember</a> is an attachable member. For example, members should return <code>true</code> for <a class=\"xref\" href=\"system.xaml.xamlmember#System_Xaml_XamlMember_IsAttachable_\" data-linktype=\"relative-path\">IsAttachable</a>, a type for <a class=\"xref\" href=\"system.xaml.xamlmember#System_Xaml_XamlMember_TargetType_\" data-linktype=\"relative-path\">TargetType</a>, and so on.  </p>\n<p> If you do not use the default internal CLR reflection technique for a <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>, calls to this method can invoke <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupAllAttachableMembers_\" data-linktype=\"relative-path\">LookupAllAttachableMembers</a> overrides on <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> derived classes. For more information about return values and other behavior, see the documentation for <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupAllAttachableMembers_\" data-linktype=\"relative-path\">LookupAllAttachableMembers</a> on this type.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_GetAllMembers\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetAllMembers()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a collection that contains all the members that are exposed by this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Collections.Generic.ICollection&lt;System.Xaml.XamlMember&gt; GetAllMembers ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.icollection-1\" data-linktype=\"relative-path\">ICollection</a>&lt;<a class=\"xref\" href=\"system.xaml.xamlmember\" data-linktype=\"relative-path\">XamlMember</a>&gt;</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A collection that contains zero or more <a class=\"xref\" href=\"system.xaml.xamlmember\" data-linktype=\"relative-path\">XamlMember</a> values.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Calls to this method can invoke <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupAllMembers_\" data-linktype=\"relative-path\">LookupAllMembers</a> overrides on <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> derived classes.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_GetAttachableMember_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetAttachableMember(String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a <a class=\"xref\" href=\"system.xaml.xamlmember\" data-linktype=\"relative-path\">XamlMember</a> representing a specific named attachable member of this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Xaml.XamlMember GetAttachableMember (string name);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>name</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The name of the attachable member to get, in <code>ownerTypeName.MemberName</code> form.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xaml.xamlmember\" data-linktype=\"relative-path\">XamlMember</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.xaml.xamlmember\" data-linktype=\"relative-path\">XamlMember</a> object for the requested attachable member; otherwise, <code>null</code>, if no attachable member by that name exists.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Calls to this method can invoke <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupAttachableMember_\" data-linktype=\"relative-path\">LookupAttachableMember</a> overrides on <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> derived classes.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupAttachableMember_\" data-linktype=\"relative-path\">LookupAttachableMember</a> is virtual, and therefore, can be overridden. The override has the potential (whether for malicious purposes or otherwise) to change the reported members of a XAML type so that they no longer align in an expected way with the <a class=\"xref\" href=\"system.componentmodel.typedescriptor\" data-linktype=\"relative-path\">TypeDescriptor</a> <code>Get*</code> information about the underlying CLR type. For any security-critical checks of member reporting, use the underlying CLR type instead.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_GetHashCode\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetHashCode()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the hash code for this object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override int GetHashCode ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An integer hash code.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_GetMember_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetMember(String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a <a class=\"xref\" href=\"system.xaml.xamlmember\" data-linktype=\"relative-path\">XamlMember</a> for a specific named member from this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Xaml.XamlMember GetMember (string name);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>name</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The name of the member to get (as a string).</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xaml.xamlmember\" data-linktype=\"relative-path\">XamlMember</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.xaml.xamlmember\" data-linktype=\"relative-path\">XamlMember</a> information for the member, if such a member was found; otherwise, <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The value for <code>name</code> is expected to be unqualified. Type-qualified names that indicate an attached member should be submitted to <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_GetAttachableMember_\" data-linktype=\"relative-path\">GetAttachableMember</a> instead. Prefixed member names should not be used; a prefix is situational to a usage and the XAML type system cannot know the context of such a usage and how the prefix is mapped.  </p>\n<p> Calls to this method can invoke <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupMember_\" data-linktype=\"relative-path\">LookupMember</a> overrides on <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> derived classes.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupMember_\" data-linktype=\"relative-path\">LookupMember</a> is virtual, and therefore, can be overridden. The override has the potential (whether for malicious purposes or otherwise) to change the reported members of a XAML type so that they no longer align in an expected way with the <a class=\"xref\" href=\"system.componentmodel.typedescriptor\" data-linktype=\"relative-path\">TypeDescriptor</a> <code>Get*</code> information about the underlying CLR type. For any security-critical checks of member reporting, use the underlying CLR type instead.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_GetPositionalParameters_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetPositionalParameters(Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>For markup extension types, returns the types of the positional parameters that are supported in a specific markup extension usage for this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; GetPositionalParameters (int parameterCount);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>parameterCount</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The count (arity) of the particular syntax or constructor mode that you want information about.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList</a>&lt;<a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>&gt;</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A list of <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> values, where each <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> is the type for that position in the syntax. You must specify the types in the same order when you supply markup input for the markup extension.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This API is only relevant if this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents a markup extension (<a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_IsMarkupExtension_\" data-linktype=\"relative-path\">IsMarkupExtension</a> is <code>true</code>).  </p>\n<p> The input <code>parameterCount</code> is not for requesting the type of a specific positional parameter. It is for specifying the arity of a markup extension usage. Markup extension usage often has multiple &quot;signatures&quot; and uses different parameter arity (count) of positional parameters to differentiate. However, you can configure a schema context to allow duplicate arities and use types of the positional parameters for differentiation. For more information, see <a class=\"xref\" href=\"system.xaml.xamlschemacontext#System_Xaml_XamlSchemaContext_SupportMarkupExtensionsWithDuplicateArity_\" data-linktype=\"relative-path\">SupportMarkupExtensionsWithDuplicateArity</a>. For a specific arity (count), the parameter positions and types can vary. To get the positional type of a specific arity&#39;s markup extension usage, you first call GetPositionalParameters specifying the arity count. Then get the item at that position from the returned collection.  </p>\n<p> Calls to this method can invoke <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupPositionalParameters_\" data-linktype=\"relative-path\">LookupPositionalParameters</a> overrides on <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> derived classes.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_GetXamlNamespaces\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetXamlNamespaces()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a list of string identifiers for XAML namespaces that the type is included in.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual System.Collections.Generic.IList&lt;string&gt; GetXamlNamespaces ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>&gt;</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A list of string values, where each string is the URI identifier for a XAML namespace.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Typical XAML namespace identifiers are strings in URI form.  </p>\n<p> The default implementation checks the following, in order: the XAML namespace that is supplied in construction (<a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType__ctor_System_String_System_String_System_Collections_Generic_IList_System_Xaml_XamlType__System_Xaml_XamlSchemaContext_\" data-linktype=\"relative-path\">XamlType(String,String,IList&lt;XamlType&gt;,XamlSchemaContext)</a> signature only); and the namespaces that are available from the schema context. If these are each <code>null</code>, a new list is generated that contains a single empty string. You can override this method to change the lookup methodology.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_LookupAliasedProperty_System_Xaml_XamlDirective_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LookupAliasedProperty(XamlDirective)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the XAML member that is aliased to a XAML directive by this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual System.Xaml.XamlMember LookupAliasedProperty (System.Xaml.XamlDirective directive);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>directive</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xaml.xamldirective\" data-linktype=\"relative-path\">XamlDirective</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The directive for which to find the aliased member.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xaml.xamlmember\" data-linktype=\"relative-path\">XamlMember</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The aliased member, if found; otherwise, <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method can be invoked when a caller gets a value from <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_GetAliasedProperty_\" data-linktype=\"relative-path\">GetAliasedProperty</a>.  </p>\n<p> The default implementation can return results for the following XAML directives: <code>Key</code>; <code>Name</code>; <code>Uid</code>; and <code>xml:lang</code>. Values for these depend on underlying reflection and might still return <code>null</code> if no aliased property is found.  </p>\n<p> Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or the schema information of a type.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_LookupAllAttachableMembers\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LookupAllAttachableMembers()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns an enumerable set that contains all attachable properties that are exposed by this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual System.Collections.Generic.IEnumerable&lt;System.Xaml.XamlMember&gt; LookupAllAttachableMembers ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.xaml.xamlmember\" data-linktype=\"relative-path\">XamlMember</a>&gt;</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An enumerable set that contains zero or more <a class=\"xref\" href=\"system.xaml.xamlmember\" data-linktype=\"relative-path\">XamlMember</a> values; otherwise, <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method can be invoked when a caller gets a value from <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_GetAllAttachableMembers_\" data-linktype=\"relative-path\">GetAllAttachableMembers</a>.  </p>\n<p> Although <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_GetAllAttachableMembers_\" data-linktype=\"relative-path\">GetAllAttachableMembers</a> returns a generic collection, this <code>Lookup</code> method returns a generic enumerable set.  </p>\n<p> The default implementation uses the internal CLR reflection. When <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_UnderlyingType_\" data-linktype=\"relative-path\">UnderlyingType</a> is <code>null</code>, the default implementation can use <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_BaseType_\" data-linktype=\"relative-path\">BaseType</a>, if it is available. This behavior calls LookupAllAttachableMembers recursively to attempt to find a valid base type and returns <code>null</code> if no valid base type exists.  </p>\n<p> Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type. A null return should be reserved for cases where information cannot be determined because of lack of type system or reflection support. If a type is valid and reflection or other techniques are available, but a type does not have attachable members, you should instead return an empty <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> set.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_LookupAllMembers\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LookupAllMembers()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns an enumerable set that contains all the members that are exposed by this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual System.Collections.Generic.IEnumerable&lt;System.Xaml.XamlMember&gt; LookupAllMembers ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.xaml.xamlmember\" data-linktype=\"relative-path\">XamlMember</a>&gt;</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An enumerable set that contains zero or more <a class=\"xref\" href=\"system.xaml.xamlmember\" data-linktype=\"relative-path\">XamlMember</a> values.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method can be invoked when a caller gets a value from <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_GetAllMembers_\" data-linktype=\"relative-path\">GetAllMembers</a>.  </p>\n<p> Although <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_GetAllMembers_\" data-linktype=\"relative-path\">GetAllMembers</a> returns a generic collection, this <code>Lookup</code> method returns a generic enumerable set.  </p>\n<p> The default implementation uses the internal CLR reflection. For cases where <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_UnderlyingType_\" data-linktype=\"relative-path\">UnderlyingType</a> is <code>null</code>, the default implementation can use <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_BaseType_\" data-linktype=\"relative-path\">BaseType</a>, if it is available. This behavior calls LookupAllMembers recursively to attempt to find a valid base type, and returns <code>null</code> if no valid base type exists.  </p>\n<p> Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type. A null return should be reserved for cases where information cannot be determined because of lack of type system or reflection support. If a type is valid, reflection or other techniques are available; if a type does not have members, you should instead return an empty <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> set.  </p>\n<p> Return values for LookupAllMembers and <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupAllAttachableMembers_\" data-linktype=\"relative-path\">LookupAllAttachableMembers</a> should be mutually exclusive. If you have a situation where a backing type system property can support a standard instance usage as well as an attachable usage, that member should be reported as two different <a class=\"xref\" href=\"system.xaml.xamlmember\" data-linktype=\"relative-path\">XamlMember</a> values, with one value appearing in the attachable list and another in the standard members list.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_LookupAllowedContentTypes\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LookupAllowedContentTypes()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a list of the types that are usable as the <span class=\"xref\">stem.Xaml.XamlType.ContentProperty*</span> value for this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; LookupAllowedContentTypes ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList</a>&lt;<a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>&gt;</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A list of possible content types.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method can be invoked when a caller gets a value from <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_AllowedContentTypes_\" data-linktype=\"relative-path\">AllowedContentTypes</a>.  </p>\n<p> Types that evaluate as <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_CanAssignTo_\" data-linktype=\"relative-path\">CanAssignTo</a> for a specific content type are not considered multiple types for purposes of <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_AllowedContentTypes_\" data-linktype=\"relative-path\">AllowedContentTypes</a>.  </p>\n<p> The default implementation can use other properties of <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> (<a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_ContentWrappers_\" data-linktype=\"relative-path\">ContentWrappers</a>, <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_ContentProperty_\" data-linktype=\"relative-path\">ContentProperty</a>, or <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_ItemType_\" data-linktype=\"relative-path\">ItemType</a>) to obtain a result. The <code>Lookup</code> overrides for the preceding property list can also be invoked in this determination.  </p>\n<p> Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_LookupAttachableMember_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LookupAttachableMember(String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a <a class=\"xref\" href=\"system.xaml.xamlmember\" data-linktype=\"relative-path\">XamlMember</a> for a specific named attachable from this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual System.Xaml.XamlMember LookupAttachableMember (string name);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>name</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The name of the attachable member to get, in <code>ownerTypeName.MemberName</code> form.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xaml.xamlmember\" data-linktype=\"relative-path\">XamlMember</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.xaml.xamlmember\" data-linktype=\"relative-path\">XamlMember</a> object for the requested attachable member; otherwise, <code>null</code>, if no attachable member by that name exists.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method can be invoked when a caller gets a value from <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_GetAttachableMember_\" data-linktype=\"relative-path\">GetAttachableMember</a>.  </p>\n<p> The default implementation uses the internal CLR reflection. When <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_UnderlyingType_\" data-linktype=\"relative-path\">UnderlyingType</a> is <code>null</code>, the default implementation can use <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_BaseType_\" data-linktype=\"relative-path\">BaseType</a>, if it is available. This behavior calls LookupAttachableMember recursively to attempt to find a valid base type and returns <code>null</code> if no valid base type exists.  </p>\n<p> Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> LookupAttachableMember is virtual, and therefore, can be overridden. The override has the potential (whether for malicious purposes or otherwise) to change the reported members of a XAML type so that they no longer align in an expected way with the <a class=\"xref\" href=\"system.componentmodel.typedescriptor\" data-linktype=\"relative-path\">TypeDescriptor</a> <code>Get*</code> information about the underlying CLR type. For any security-critical checks of member reporting, use the underlying CLR type instead.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_LookupBaseType\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LookupBaseType()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> for the immediate base type of this XAML type. Determination of this value is based on the underlying type of this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> and schema context.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual System.Xaml.XamlType LookupBaseType ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> for the immediate base type of this XAML type.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method can be invoked when a caller gets a value from <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_BaseType_\" data-linktype=\"relative-path\">BaseType</a>.  </p>\n<p> The default implementation might return an internal constant that represents the <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> if <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_UnderlyingType_\" data-linktype=\"relative-path\">UnderlyingType</a> is <code>null</code>.  </p>\n<p> Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> LookupBaseType is virtual, and therefore, can be overridden. The override has the potential (whether for malicious purposes or otherwise) to change the reported type information about a XAML type so that it no longer aligns in an expected way with the type system information of its underlying CLR type. For any security-critical checks of assignment operations and access, use the underlying CLR type instead.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_LookupCollectionKind\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LookupCollectionKind()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value of the <a class=\"xref\" href=\"system.xaml.schema.xamlcollectionkind\" data-linktype=\"relative-path\">XamlCollectionKind</a> enumeration that declares which specific collection type this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> uses.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual System.Xaml.Schema.XamlCollectionKind LookupCollectionKind ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xaml.schema.xamlcollectionkind\" data-linktype=\"relative-path\">XamlCollectionKind</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A value of the <a class=\"xref\" href=\"system.xaml.schema.xamlcollectionkind\" data-linktype=\"relative-path\">XamlCollectionKind</a> enumeration.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method is invoked by an internal private method (no public <code>CollectionKind</code> or <code>GetCollectionKind</code> API exists on <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>).  </p>\n<p> The default implementation uses the internal CLR reflection. For cases where <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_UnderlyingType_\" data-linktype=\"relative-path\">UnderlyingType</a> is <code>null</code>, the default implementation can use <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_BaseType_\" data-linktype=\"relative-path\">BaseType</a>, if it is available. This behavior indirectly calls LookupCollectionKind recursively to attempt to find a valid base type; it returns <a class=\"xref\" href=\"system.xaml.schema.xamlcollectionkind\" data-linktype=\"relative-path\">System.Xaml.Schema.XamlCollectionKind</a> if no valid base type exists. In general, the default implementation attempts to find the <code>Add</code> method of the underlying type by reflection. If found, the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> of the <code>Add</code> method is enough information to determine which <a class=\"xref\" href=\"system.xaml.schema.xamlcollectionkind\" data-linktype=\"relative-path\">XamlCollectionKind</a> value should be returned. Otherwise, it returns <a class=\"xref\" href=\"system.xaml.schema.xamlcollectionkind\" data-linktype=\"relative-path\">System.Xaml.Schema.XamlCollectionKind</a>.  </p>\n<p> Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_LookupConstructionRequiresArguments\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LookupConstructionRequiresArguments()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> must have arguments (generic constraints through <code>x:TypeArguments</code>, initialization text, or other XAML techniques) to construct a valid instance of the type.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual bool LookupConstructionRequiresArguments ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if construction of an instance requires some argument value; otherwise, false.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method can be invoked when a caller gets a value from <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_ConstructionRequiresArguments_\" data-linktype=\"relative-path\">ConstructionRequiresArguments</a>.  </p>\n<p> The default implementation returns <code>false</code> for types considered value types in the CLR type system. For other than value types, CLR reflection <a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a> is used to determine whether a default constructor exists.  </p>\n<p> Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_LookupContentProperty\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LookupContentProperty()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns <a class=\"xref\" href=\"system.xaml.xamlmember\" data-linktype=\"relative-path\">XamlMember</a> information for the content property of this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual System.Xaml.XamlMember LookupContentProperty ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xaml.xamlmember\" data-linktype=\"relative-path\">XamlMember</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><a class=\"xref\" href=\"system.xaml.xamlmember\" data-linktype=\"relative-path\">XamlMember</a> information for the content property of this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>. May be <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method can be invoked when a caller gets a value from <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_ContentProperty_\" data-linktype=\"relative-path\">ContentProperty</a>.  </p>\n<p> The default implementation checks for <a class=\"xref\" href=\"system.windows.markup.contentpropertyattribute\" data-linktype=\"relative-path\">ContentPropertyAttribute</a> on the type definition. It can also check <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_BaseType_\" data-linktype=\"relative-path\">BaseType</a> for the attribute if no attribute is found on the immediate underlying type. If these checks do not discover a content type, the default implementation returns <code>null</code>.  </p>\n<p> Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_LookupContentWrappers\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LookupContentWrappers()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a list of <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> values that represent the content wrappers for this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; LookupContentWrappers ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList</a>&lt;<a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>&gt;</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A list of <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> values that represent the content wrappers for this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>A content wrapper is a class that represents the content collection type when the types that are used in that collection are not contiguous to the type system. The types of collection items for the content wrapper are expected to be limited in some manner beyond <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> or a neutral object equivalent. However, this limitation is only enforced by the design or purpose of the properties that use that type, and not by the type system. More than one content wrapper can exist on a type.  </p>\n<p> For an example class and scenario from the WPF XAML implementation, see <a class=\"xref\" href=\"system.windows.documents.inlinecollection\" data-linktype=\"relative-path\">InlineCollection</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_LookupCustomAttributeProvider\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LookupCustomAttributeProvider()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>When implemented in a derived class, returns an <a class=\"xref\" href=\"system.reflection.icustomattributeprovider\" data-linktype=\"relative-path\">ICustomAttributeProvider</a> implementation.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual System.Reflection.ICustomAttributeProvider LookupCustomAttributeProvider ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.icustomattributeprovider\" data-linktype=\"relative-path\">ICustomAttributeProvider</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.reflection.icustomattributeprovider\" data-linktype=\"relative-path\">ICustomAttributeProvider</a> implementation.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Override this method to provide the internal reflection with an alternative way to obtain CLR attribute values. In absence of an override, the internal reflector uses typical CLR reflection logic.  </p>\n<p> The default implementation returns <code>null</code>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_LookupDeferringLoader\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LookupDeferringLoader()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a <span class=\"xref\">stem.Xaml.Schema.XamlValueConverter`1</span> object, which is used for deferred loading of XAML-declared objects.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt; LookupDeferringLoader ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xaml.schema.xamlvalueconverter-1\" data-linktype=\"relative-path\">XamlValueConverter</a>&lt;<a class=\"xref\" href=\"system.xaml.xamldeferringloader\" data-linktype=\"relative-path\">XamlDeferringLoader</a>&gt;</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <span class=\"xref\">stem.Xaml.Schema.XamlValueConverter`1</span> that has a <a class=\"xref\" href=\"system.xaml.xamldeferringloader\" data-linktype=\"relative-path\">XamlDeferringLoader</a> constraint on the generic.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method can be invoked when a caller gets a value from <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_DeferringLoader_\" data-linktype=\"relative-path\">DeferringLoader</a>. Override this method if you want <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_DeferringLoader_\" data-linktype=\"relative-path\">DeferringLoader</a> to return a different value than is enabled by default internal reflection and are also providing custom <a class=\"xref\" href=\"system.xaml.schema.xamltypeinvoker\" data-linktype=\"relative-path\">XamlTypeInvoker</a> information.  </p>\n<p> The default implementation returns an object on the basis of reading <a class=\"xref\" href=\"system.windows.markup.xamldeferloadattribute\" data-linktype=\"relative-path\">XamlDeferLoadAttribute</a>. It can also  check <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_BaseType_\" data-linktype=\"relative-path\">BaseType</a> for the attribute if no attribute is found on the immediate underlying type. If a value is unavailable, this method returns <code>null</code>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_LookupInvoker\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LookupInvoker()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a <a class=\"xref\" href=\"system.xaml.schema.xamltypeinvoker\" data-linktype=\"relative-path\">XamlTypeInvoker</a> that is associated with this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual System.Xaml.Schema.XamlTypeInvoker LookupInvoker ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xaml.schema.xamltypeinvoker\" data-linktype=\"relative-path\">XamlTypeInvoker</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.xaml.schema.xamltypeinvoker\" data-linktype=\"relative-path\">XamlTypeInvoker</a> information for this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>; otherwise, <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method can be invoked by calls to <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_Invoker_\" data-linktype=\"relative-path\">Invoker</a>.  </p>\n<p> The default implementation does not require that a <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> be constructed by using one of the constructors that pass an initial <a class=\"xref\" href=\"system.xaml.schema.xamltypeinvoker\" data-linktype=\"relative-path\">XamlTypeInvoker</a>. However, an <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_UnderlyingType_\" data-linktype=\"relative-path\">UnderlyingType</a> value must exist for the <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>; otherwise, the default implementation returns <code>null</code>.  </p>\n<p> Override this method if you also create a derived class from <a class=\"xref\" href=\"system.xaml.schema.xamltypeinvoker\" data-linktype=\"relative-path\">XamlTypeInvoker</a> and intend to return the derived class. If you return <code>null</code>, <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_Invoker_\" data-linktype=\"relative-path\">Invoker</a> returns <a class=\"xref\" href=\"system.xaml.schema.xamltypeinvoker#System_Xaml_Schema_XamlTypeInvoker_UnknownInvoker_\" data-linktype=\"relative-path\">UnknownInvoker</a> to callers.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_LookupIsAmbient\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LookupIsAmbient()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents an ambient type, as per the XAML definition.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual bool LookupIsAmbient ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents an ambient type; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method can be invoked by calls to <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_IsAmbient_\" data-linktype=\"relative-path\">IsAmbient</a>.  </p>\n<p> The default implementation uses CLR reflection on the <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_UnderlyingType_\" data-linktype=\"relative-path\">UnderlyingType</a> and can check the base types. This implementation checks for the <a class=\"xref\" href=\"system.windows.markup.ambientattribute\" data-linktype=\"relative-path\">AmbientAttribute</a> that is applied to the relevant type&#39;s definition at the class level and returns <code>true</code> in this case. All other cases return <code>false</code>.  </p>\n<p> Override this method if you want <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_IsAmbient_\" data-linktype=\"relative-path\">IsAmbient</a> to return a different value than is enabled by default internal reflection.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_LookupIsConstructible\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LookupIsConstructible()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents a constructible type, as per the XAML definition.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual bool LookupIsConstructible ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents a constructible type; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method can be invoked by calls to <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_IsConstructible_\" data-linktype=\"relative-path\">IsConstructible</a>.  </p>\n<p> The default implementation uses CLR reflection on the <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_UnderlyingType_\" data-linktype=\"relative-path\">UnderlyingType</a>. The type must be concrete, non-nested, and closed. The default implementation checks whether the type is a value type and the return of <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_ConstructionRequiresArguments_\" data-linktype=\"relative-path\">ConstructionRequiresArguments</a>. For a null <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_UnderlyingType_\" data-linktype=\"relative-path\">UnderlyingType</a>, this method returns <code>true</code>.  </p>\n<p> Override this method if you want <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_IsConstructible_\" data-linktype=\"relative-path\">IsConstructible</a> to return a different value than is enabled by default internal reflection.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_LookupIsMarkupExtension\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LookupIsMarkupExtension()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents a markup extension.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual bool LookupIsMarkupExtension ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents a markup extension; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method can be invoked by calls to <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_IsMarkupExtension_\" data-linktype=\"relative-path\">IsMarkupExtension</a>.  </p>\n<p> The default implementation consists only of this call:  </p>\n<p> <code>return CanAssignTo(XamlLanguage.MarkupExtension);</code>  </p>\n<p> Override this method if you want <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_IsMarkupExtension_\" data-linktype=\"relative-path\">IsMarkupExtension</a> to use different logic.  </p>\n<p> In XAML specification terms, this type must be assignable to <code>x:MarkupExtension</code> in order to return <code>true</code> for <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_IsMarkupExtension_\" data-linktype=\"relative-path\">IsMarkupExtension</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_LookupIsNameScope\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LookupIsNameScope()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents a XAML namescope, as per the XAML definition.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual bool LookupIsNameScope ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents a XAML namescope; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method can be invoked by calls to <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_IsNameScope_\" data-linktype=\"relative-path\">IsNameScope</a>.  </p>\n<p> The default implementation makes a <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_CanAssignTo_\" data-linktype=\"relative-path\">CanAssignTo</a> call indirectly against the type <a class=\"xref\" href=\"system.windows.markup.inamescope\" data-linktype=\"relative-path\">INameScope</a>. <a class=\"xref\" href=\"system.windows.markup.inamescope\" data-linktype=\"relative-path\">INameScope</a> is an interface that is defined in the assembly WindowsBase. This technique for XAML namescope identification is used both by WPF and Windows Workflow Foundation implementations of XAML.  </p>\n<p> Override this method if you want <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_IsNameScope_\" data-linktype=\"relative-path\">IsNameScope</a> to use different logic.  </p>\n<p> A XAML namescope enforces the name uniqueness of the property or properties that are used for <code>x:Name</code> / <code>[name property]</code>. If <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_IsNameScope_\" data-linktype=\"relative-path\">IsNameScope</a> is <code>true</code>, then some mechanism for enforcing uniqueness should exist and should evaluate from the perspective of this type owning a XAML namescope. The XAML namescope then extends to the content of the type until another XAML namescope owning type is encountered.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_LookupIsNullable\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LookupIsNullable()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents a nullable type, as per the XAML definition.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual bool LookupIsNullable ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents a nullable type; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method can be invoked by calls to <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_IsNullable_\" data-linktype=\"relative-path\">IsNullable</a>.  </p>\n<p> The default implementation makes a determination based on the CLR core library nullable concept, checked against <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_UnderlyingType_\" data-linktype=\"relative-path\">UnderlyingType</a>. For a null <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_UnderlyingType_\" data-linktype=\"relative-path\">UnderlyingType</a>, it returns <code>true</code>.  </p>\n<p> Override this method if you want <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_IsNullable_\" data-linktype=\"relative-path\">IsNullable</a> to use different logic.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_LookupIsPublic\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LookupIsPublic()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents a public type in the relevant type system.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual bool LookupIsPublic ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents a public type; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method can be invoked by calls to <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_IsPublic_\" data-linktype=\"relative-path\">IsPublic</a>.  </p>\n<p> The default implementation uses CLR reflection against a non-null <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_UnderlyingType_\" data-linktype=\"relative-path\">UnderlyingType</a>. For a null <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_UnderlyingType_\" data-linktype=\"relative-path\">UnderlyingType</a>, it returns <code>true</code>.  </p>\n<p> Override this method if you want <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_IsPublic_\" data-linktype=\"relative-path\">IsPublic</a> to use different logic.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> LookupIsPublic is virtual, and therefore, can be overridden. The override has the potential (whether for malicious purposes or otherwise) to change the reported access information about a XAML type so that it no longer aligns in an expected way with the type system or access information of its underlying CLR type. For any security-critical checks of assignment operations and access, use the underlying CLR type instead.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_LookupIsUnknown\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LookupIsUnknown()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents a type that cannot be resolved in the underlying type system.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual bool LookupIsUnknown ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents a nonresolvable type; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method can be invoked by calls to <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_IsUnknown_\" data-linktype=\"relative-path\">IsUnknown</a>.  </p>\n<p> The default implementation can use CLR reflection. For a null <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_UnderlyingType_\" data-linktype=\"relative-path\">UnderlyingType</a>, it returns <code>true</code>.  </p>\n<p> Override this method if you want <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_IsUnknown_\" data-linktype=\"relative-path\">IsUnknown</a> to use different logic.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_LookupIsWhitespaceSignificantCollection\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LookupIsWhitespaceSignificantCollection()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents a whitespace significant collection, as per the XML definition.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual bool LookupIsWhitespaceSignificantCollection ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents a white-space significant collection; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method can be invoked by calls to <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_IsWhitespaceSignificantCollection_\" data-linktype=\"relative-path\">IsWhitespaceSignificantCollection</a>.  </p>\n<p> The default implementation returns a value based on reading <a class=\"xref\" href=\"system.windows.markup.whitespacesignificantcollectionattribute\" data-linktype=\"relative-path\">WhitespaceSignificantCollectionAttribute</a>. It can also check the <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_BaseType_\" data-linktype=\"relative-path\">BaseType</a> for the attribute if no attribute is found on the immediate underlying type. If a value is not available, it returns <code>false</code>.  </p>\n<p> Override this method if you want <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_IsWhitespaceSignificantCollection_\" data-linktype=\"relative-path\">IsWhitespaceSignificantCollection</a> to use different logic.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_LookupIsXData\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LookupIsXData()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents XML <code>XDATA</code>, as per the XAML definition.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual bool LookupIsXData ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents <code>XDATA</code>; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method can be invoked by calls to <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_IsXData_\" data-linktype=\"relative-path\">IsXData</a>.  </p>\n<p> The default implementation makes a <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_CanAssignTo_\" data-linktype=\"relative-path\">CanAssignTo</a> call indirectly against the type <a class=\"xref\" href=\"system.xml.serialization.ixmlserializable\" data-linktype=\"relative-path\">IXmlSerializable</a>.  </p>\n<p> Override this method if you want <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_IsXData_\" data-linktype=\"relative-path\">IsXData</a> to use different logic.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_LookupItemType\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LookupItemType()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that provides the type information for the <code>Items</code> property of this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual System.Xaml.XamlType LookupItemType ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> object for the type of the items in the collection; otherwise, <code>null</code> if this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> does not represent a collection.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method can be invoked by calls to <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_ItemType_\" data-linktype=\"relative-path\">ItemType</a>.  </p>\n<p> The default implementation can use CLR reflection concepts, such as checking for an <code>Add</code> method by <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> and using the <a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a>; checking <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_IsArray_\" data-linktype=\"relative-path\">IsArray</a>; and checking <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_BaseType_\" data-linktype=\"relative-path\">BaseType</a> and trying the same logic there.  </p>\n<p> Override this method if you want <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_ItemType_\" data-linktype=\"relative-path\">ItemType</a> to use different logic. Cases where <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupCollectionKind_\" data-linktype=\"relative-path\">LookupCollectionKind</a> returns <a class=\"xref\" href=\"system.xaml.schema.xamlcollectionkind\" data-linktype=\"relative-path\">System.Xaml.Schema.XamlCollectionKind</a> should return <code>null</code>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_LookupKeyType\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LookupKeyType()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that provides the type information for the key property of this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>, if the <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents a dictionary.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual System.Xaml.XamlType LookupKeyType ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> object for the type of the key for dictionary usage, or <code>null</code> if this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> does not represent a dictionary,</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method can be invoked by calls to <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_KeyType_\" data-linktype=\"relative-path\">KeyType</a>.  </p>\n<p> The default implementation can use CLR reflection concepts, such as checking for an <code>Add</code> method by <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> and using the <a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a>; and checking <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_BaseType_\" data-linktype=\"relative-path\">BaseType</a> and trying the same logic there.  </p>\n<p> Override this method if you want <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_KeyType_\" data-linktype=\"relative-path\">KeyType</a> to use different logic. Cases where <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_LookupCollectionKind_\" data-linktype=\"relative-path\">LookupCollectionKind</a> does not return <a class=\"xref\" href=\"system.xaml.schema.xamlcollectionkind\" data-linktype=\"relative-path\">System.Xaml.Schema.XamlCollectionKind</a> should return <code>null</code>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_LookupMarkupExtensionReturnType\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LookupMarkupExtensionReturnType()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that provides the type information for the returned <code>ProvideValue</code> of this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>, if it represents a markup extension.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual System.Xaml.XamlType LookupMarkupExtensionReturnType ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> object for the return type for markup extension usage; otherwise, <code>null</code>, if this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> does not represent a markup extension.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method can be invoked by calls to <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_MarkupExtensionReturnType_\" data-linktype=\"relative-path\">MarkupExtensionReturnType</a>.  </p>\n<p> The default implementation returns a <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> on the basis of reading <a class=\"xref\" href=\"system.windows.markup.markupextensionreturntypeattribute\" data-linktype=\"relative-path\">MarkupExtensionReturnTypeAttribute</a>. It can also check <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_BaseType_\" data-linktype=\"relative-path\">BaseType</a> for the attribute if no attribute is found on the immediate underlying type. If a value is not available, it returns <code>null</code>.  </p>\n<p> Override this method if you want <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_MarkupExtensionReturnType_\" data-linktype=\"relative-path\">MarkupExtensionReturnType</a> to use different logic.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_LookupMember_System_String_System_Boolean_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LookupMember(String,Boolean)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the <a class=\"xref\" href=\"system.xaml.xamlmember\" data-linktype=\"relative-path\">XamlMember</a> for a specific named member from this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual System.Xaml.XamlMember LookupMember (string name, bool skipReadOnlyCheck);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>name</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The name of the member to get (as a string).</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>skipReadOnlyCheck</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> to return a member even if that member has a <code>true</code> value for <span class=\"xref\">stem.Xaml.XamlMember.IsReadOnly*</span>; <code>false</code> to not return a <span class=\"xref\">stem.Xaml.XamlMember.IsReadOnly*</span> member. The default is <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xaml.xamlmember\" data-linktype=\"relative-path\">XamlMember</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.xaml.xamlmember\" data-linktype=\"relative-path\">XamlMember</a> information for the member, if a member was found; otherwise, <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method can be invoked by calls to <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_GetMember_\" data-linktype=\"relative-path\">GetMember</a>.  </p>\n<p> The default implementation returns a <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> based on internal CLR reflection and evaluation against the schema context.  </p>\n<p> Override this method if you want <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_GetMember_\" data-linktype=\"relative-path\">GetMember</a> to use different logic.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> LookupMember is virtual, and therefore, can be overridden. The override has the potential (whether for malicious purposes or otherwise) to change the reported members of a XAML type so that they no longer align in an expected way with the <a class=\"xref\" href=\"system.componentmodel.typedescriptor\" data-linktype=\"relative-path\">TypeDescriptor</a> <code>Get*</code> information about the underlying CLR type. For any security-critical checks of member reporting, use the underlying CLR type instead.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_LookupPositionalParameters_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LookupPositionalParameters(Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>For markup extension types, returns the types of the positional parameters that are supported in a specific markup extension usage for this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; LookupPositionalParameters (int parameterCount);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>parameterCount</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The count (arity) of the particular syntax or constructor mode that you want information about.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList</a>&lt;<a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>&gt;</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A list of <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> values where each such <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> is the type for that position in the syntax. You must specify those types in the same order when supplying markup input for the markup extension.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method can be invoked by calls to <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_GetPositionalParameters_\" data-linktype=\"relative-path\">GetPositionalParameters</a>.  </p>\n<p> The default implementation uses internal reflection information based on finding constructors and checking the arity. Override this method if you want <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_GetPositionalParameters_\" data-linktype=\"relative-path\">GetPositionalParameters</a> to use different logic.  </p>\n<p> This API is only relevant if this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> represents a markup extension (<a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_IsMarkupExtension_\" data-linktype=\"relative-path\">IsMarkupExtension</a> is <code>true</code>).  </p>\n<p> The input <code>parameterCount</code> is not for requesting the type of a specific positional parameter. It is for specifying the arity of a markup extension usage. Markup extension usage often has multiple signatures and uses different parameter arity (count) of positional parameters to differentiate. However, you can configure a schema context to allow duplicate arities and use types of the positional parameters for differentiation. For more information, see <a class=\"xref\" href=\"system.xaml.xamlschemacontext#System_Xaml_XamlSchemaContext_SupportMarkupExtensionsWithDuplicateArity_\" data-linktype=\"relative-path\">SupportMarkupExtensionsWithDuplicateArity</a>. For a specific arity count, the parameter positions and types can vary. To get the positional type of a specific arity&#39;s markup extension usage, you first call <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_GetPositionalParameters_\" data-linktype=\"relative-path\">GetPositionalParameters</a> with the arity count. Then get the item at that position from the returned collection.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_LookupSetMarkupExtensionHandler\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LookupSetMarkupExtensionHandler()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a handler callback to use for the set operations of markup extensions.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt; LookupSetMarkupExtensionHandler ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventhandler-1\" data-linktype=\"relative-path\">EventHandler</a>&lt;<a class=\"xref\" href=\"system.windows.markup.xamlsetmarkupextensioneventargs\" data-linktype=\"relative-path\">XamlSetMarkupExtensionEventArgs</a>&gt;</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A handler callback to use for the set operations of markup extensions.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The default implementation returns a value based on reading <a class=\"xref\" href=\"system.windows.markup.xamlsetmarkupextensionattribute\" data-linktype=\"relative-path\">XamlSetMarkupExtensionAttribute</a>. It can also check <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_BaseType_\" data-linktype=\"relative-path\">BaseType</a> for the attribute if no attribute is found on the immediate underlying type. If a value is unavailable, it returns <code>null</code>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_LookupSetTypeConverterHandler\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LookupSetTypeConverterHandler()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a handler to use for type converter setting cases.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt; LookupSetTypeConverterHandler ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventhandler-1\" data-linktype=\"relative-path\">EventHandler</a>&lt;<a class=\"xref\" href=\"system.windows.markup.xamlsettypeconvertereventargs\" data-linktype=\"relative-path\">XamlSetTypeConverterEventArgs</a>&gt;</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A handler to use for type converter setting cases.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The default implementation returns a value based on reading <a class=\"xref\" href=\"system.windows.markup.xamlsettypeconverterattribute\" data-linktype=\"relative-path\">XamlSetTypeConverterAttribute</a>. It can also check <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_BaseType_\" data-linktype=\"relative-path\">BaseType</a> for the attribute if no attribute is found on the immediate underlying type. If a value is unavailable, it returns <code>null</code>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_LookupTrimSurroundingWhitespace\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LookupTrimSurroundingWhitespace()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> should be serialized using a mode that  trims surrounding whitespace.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual bool LookupTrimSurroundingWhitespace ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> should be serialized in a mode that trims surrounding whitespace; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method can be invoked by calls to <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_TrimSurroundingWhitespace_\" data-linktype=\"relative-path\">TrimSurroundingWhitespace</a>.  </p>\n<p> The default implementation returns a value based on reading <a class=\"xref\" href=\"system.windows.markup.trimsurroundingwhitespaceattribute\" data-linktype=\"relative-path\">TrimSurroundingWhitespaceAttribute</a>. It can also check <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_BaseType_\" data-linktype=\"relative-path\">BaseType</a> for the attribute if no attribute is found on the immediate underlying type. If a value is unavailable, it returns <code>false</code>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_LookupTypeConverter\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LookupTypeConverter()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a <span class=\"xref\">stem.Xaml.Schema.XamlValueConverter`1</span> that has a <a class=\"xref\" href=\"system.componentmodel.typeconverter\" data-linktype=\"relative-path\">TypeConverter</a> constraint, which represents type-conversion behavior for values of this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt; LookupTypeConverter ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xaml.schema.xamlvalueconverter-1\" data-linktype=\"relative-path\">XamlValueConverter</a>&lt;<a class=\"xref\" href=\"system.componentmodel.typeconverter\" data-linktype=\"relative-path\">TypeConverter</a>&gt;</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <span class=\"xref\">stem.Xaml.Schema.XamlValueConverter`1</span> with <a class=\"xref\" href=\"system.componentmodel.typeconverter\" data-linktype=\"relative-path\">TypeConverter</a> constraint that represents type-conversion behavior for values of this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>; otherwise, <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method can be invoked by calls to <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_TypeConverter_\" data-linktype=\"relative-path\">TypeConverter</a>.  </p>\n<p> The default implementation returns a value based on reading <a class=\"xref\" href=\"system.componentmodel.typeconverterattribute\" data-linktype=\"relative-path\">TypeConverterAttribute</a>. The default implementation can also check <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_BaseType_\" data-linktype=\"relative-path\">BaseType</a> for the attribute if no attribute is found on the immediate underlying type. It also includes special logic for default conversion of enumerations, common value types, and generics. If a value is unavailable, it returns <code>null</code>.  </p>\n<p> Override this method if you want <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_TypeConverter_\" data-linktype=\"relative-path\">TypeConverter</a> to use different logic.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_LookupUnderlyingType\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LookupUnderlyingType()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the CLR <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> that underlies this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual Type LookupUnderlyingType ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The CLR <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> that underlies this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>; otherwise, <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method can be invoked by calls to <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_UnderlyingType_\" data-linktype=\"relative-path\">UnderlyingType</a>.  </p>\n<p> The default implementation returns an internal field. That field is generally initialized during construction and its value is based on which constructor was called and the information that you provided.  </p>\n<p> Override this method if you want <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_UnderlyingType_\" data-linktype=\"relative-path\">UnderlyingType</a> to use different logic.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_LookupUsableDuringInitialization\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LookupUsableDuringInitialization()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> is built top-down during XAML initialization.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual bool LookupUsableDuringInitialization ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> is built top-down during XAML initialization; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Top-down is a metaphor that approximates XAML processor behavior when it creates the object graph. When built top-down, a type is instantiated, attached to the parent, and has its properties set. Top-down construction avoids invoking property-changed handlers multiple times. Such handling ripples up the object graph and therefore, eliminates the multiple handler calls and provides a performance optimization for startup of the object graph.  </p>\n<p> This method can be invoked by calls to <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_IsUsableDuringInitialization_\" data-linktype=\"relative-path\">IsUsableDuringInitialization</a>.  </p>\n<p> The default implementation returns a value based on reading <a class=\"xref\" href=\"system.windows.markup.usableduringinitializationattribute\" data-linktype=\"relative-path\">UsableDuringInitializationAttribute</a>. It can also check <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_BaseType_\" data-linktype=\"relative-path\">BaseType</a> for the attribute if no attribute is found on the immediate underlying type. If a value is unavailable, it returns <code>false</code>.  </p>\n<p> Override this method if you want <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_IsUsableDuringInitialization_\" data-linktype=\"relative-path\">IsUsableDuringInitialization</a> to use different logic.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_LookupValueSerializer\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LookupValueSerializer()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a <span class=\"xref\">stem.Xaml.Schema.XamlValueConverter`1</span> that has a <a class=\"xref\" href=\"system.windows.markup.valueserializer\" data-linktype=\"relative-path\">ValueSerializer</a> constraint, which represents value serialization behavior for values of this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt; LookupValueSerializer ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xaml.schema.xamlvalueconverter-1\" data-linktype=\"relative-path\">XamlValueConverter</a>&lt;<a class=\"xref\" href=\"system.windows.markup.valueserializer\" data-linktype=\"relative-path\">ValueSerializer</a>&gt;</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <span class=\"xref\">stem.Xaml.Schema.XamlValueConverter`1</span> with <a class=\"xref\" href=\"system.windows.markup.valueserializer\" data-linktype=\"relative-path\">ValueSerializer</a> constraint that represents value serialization behavior for values of this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>; otherwise, <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method can be invoked by calls to <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_ValueSerializer_\" data-linktype=\"relative-path\">ValueSerializer</a>.  </p>\n<p> The default implementation returns a value based on reading <a class=\"xref\" href=\"system.windows.markup.valueserializerattribute\" data-linktype=\"relative-path\">ValueSerializerAttribute</a>. It can also check <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_BaseType_\" data-linktype=\"relative-path\">BaseType</a> for the attribute if no attribute is found on the immediate underlying type. It also includes special logic for default serialization of enumerations, common value types, or generics. If a value is unavailable, it returns <code>null</code>.  </p>\n<p> Override this method if you want <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_ValueSerializer_\" data-linktype=\"relative-path\">ValueSerializer</a> to use different logic.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_ToString\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ToString()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a string representation of this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override string ToString ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A string representation of this <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> implementation of <a class=\"xref\" href=\"system.object#System_Object_ToString_\" data-linktype=\"relative-path\">ToString</a> returns the <a class=\"xref\" href=\"system.xaml.xamltype#System_Xaml_XamlType_Name_\" data-linktype=\"relative-path\">Name</a> property of the <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Operators\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_op_Equality_System_Xaml_XamlType_System_Xaml_XamlType_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Equality(XamlType,XamlType)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Determines whether two specified <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> objects have the same value.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool op_Equality (System.Xaml.XamlType xamlType1, System.Xaml.XamlType xamlType2);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>xamlType1</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> or <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>xamlType2</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> or <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the value of <code>xamlType1</code> is the same as the value of <code>xamlType2</code>; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xaml_XamlType_op_Inequality_System_Xaml_XamlType_System_Xaml_XamlType_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Inequality(XamlType,XamlType)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Determines whether two specified <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> objects have different values.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool op_Inequality (System.Xaml.XamlType xamlType1, System.Xaml.XamlType xamlType2);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>xamlType1</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> or <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>xamlType2</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.xaml.xamltype\" data-linktype=\"relative-path\">XamlType</a> or <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the value of <code>xamlType1</code> is different from the value of <code>xamlType2</code>; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Xaml.XamlType.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Xaml.XamlType.yml\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType..ctor\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.AllowedContentTypes\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.BaseType\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.CanAssignTo\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.ConstructionRequiresArguments\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.ContentProperty\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.ContentWrappers\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.DeferringLoader\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.Equals\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.GetAliasedProperty\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.GetAllAttachableMembers\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.GetAllMembers\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.GetAttachableMember\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.GetMember\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.GetPositionalParameters\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.GetXamlNamespaces\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.Invoker\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.IsAmbient\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.IsArray\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.IsCollection\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.IsConstructible\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.IsDictionary\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.IsGeneric\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.IsMarkupExtension\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.IsNameScope\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.IsNameValid\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.IsNullable\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.IsPublic\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.IsUnknown\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.IsUsableDuringInitialization\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.IsWhitespaceSignificantCollection\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.IsXData\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.ItemType\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.KeyType\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.LookupAliasedProperty\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.LookupAllAttachableMembers\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.LookupAllMembers\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.LookupAllowedContentTypes\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.LookupAttachableMember\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.LookupBaseType\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.LookupCollectionKind\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.LookupConstructionRequiresArguments\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.LookupContentProperty\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.LookupContentWrappers\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.LookupCustomAttributeProvider\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.LookupDeferringLoader\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.LookupInvoker\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.LookupIsAmbient\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.LookupIsConstructible\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.LookupIsMarkupExtension\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.LookupIsNameScope\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.LookupIsNullable\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.LookupIsPublic\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.LookupIsUnknown\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.LookupIsXData\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.LookupItemType\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.LookupKeyType\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.LookupMarkupExtensionReturnType\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.LookupMember\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.LookupPositionalParameters\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.LookupSetMarkupExtensionHandler\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.LookupSetTypeConverterHandler\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.LookupTrimSurroundingWhitespace\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.LookupTypeConverter\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.LookupUnderlyingType\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.LookupUsableDuringInitialization\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.LookupValueSerializer\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.MarkupExtensionReturnType\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.Name\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.op_Equality\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.op_op_Equality\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.op_op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.PreferredXamlNamespace\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.SchemaContext\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.ToString\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.TrimSurroundingWhitespace\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.TypeArguments\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.TypeConverter\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.UnderlyingType\">\r\n<meta name=\"APIName\" content=\"System.Xaml.XamlType.ValueSerializer\">\r\n<meta name=\"APILocation\" content=\"System.Xaml.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"82cb0827-0b75-3201-0462-829527b17f9b\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Reports information about XAML types as part of the overall XAML system that is implemented in .NET Framework XAML Services.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Xaml/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Xaml.XamlType\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Xaml.XamlType.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Xaml.XamlType.yml","open_to_public_contributors":true,"api_name":["System.Xaml.XamlType","System.Xaml.XamlType..ctor","System.Xaml.XamlType.AllowedContentTypes","System.Xaml.XamlType.BaseType","System.Xaml.XamlType.CanAssignTo","System.Xaml.XamlType.ConstructionRequiresArguments","System.Xaml.XamlType.ContentProperty","System.Xaml.XamlType.ContentWrappers","System.Xaml.XamlType.DeferringLoader","System.Xaml.XamlType.Equals","System.Xaml.XamlType.GetAliasedProperty","System.Xaml.XamlType.GetAllAttachableMembers","System.Xaml.XamlType.GetAllMembers","System.Xaml.XamlType.GetAttachableMember","System.Xaml.XamlType.GetHashCode","System.Xaml.XamlType.GetMember","System.Xaml.XamlType.GetPositionalParameters","System.Xaml.XamlType.GetXamlNamespaces","System.Xaml.XamlType.Invoker","System.Xaml.XamlType.IsAmbient","System.Xaml.XamlType.IsArray","System.Xaml.XamlType.IsCollection","System.Xaml.XamlType.IsConstructible","System.Xaml.XamlType.IsDictionary","System.Xaml.XamlType.IsGeneric","System.Xaml.XamlType.IsMarkupExtension","System.Xaml.XamlType.IsNameScope","System.Xaml.XamlType.IsNameValid","System.Xaml.XamlType.IsNullable","System.Xaml.XamlType.IsPublic","System.Xaml.XamlType.IsUnknown","System.Xaml.XamlType.IsUsableDuringInitialization","System.Xaml.XamlType.IsWhitespaceSignificantCollection","System.Xaml.XamlType.IsXData","System.Xaml.XamlType.ItemType","System.Xaml.XamlType.KeyType","System.Xaml.XamlType.LookupAliasedProperty","System.Xaml.XamlType.LookupAllAttachableMembers","System.Xaml.XamlType.LookupAllMembers","System.Xaml.XamlType.LookupAllowedContentTypes","System.Xaml.XamlType.LookupAttachableMember","System.Xaml.XamlType.LookupBaseType","System.Xaml.XamlType.LookupCollectionKind","System.Xaml.XamlType.LookupConstructionRequiresArguments","System.Xaml.XamlType.LookupContentProperty","System.Xaml.XamlType.LookupContentWrappers","System.Xaml.XamlType.LookupCustomAttributeProvider","System.Xaml.XamlType.LookupDeferringLoader","System.Xaml.XamlType.LookupInvoker","System.Xaml.XamlType.LookupIsAmbient","System.Xaml.XamlType.LookupIsConstructible","System.Xaml.XamlType.LookupIsMarkupExtension","System.Xaml.XamlType.LookupIsNameScope","System.Xaml.XamlType.LookupIsNullable","System.Xaml.XamlType.LookupIsPublic","System.Xaml.XamlType.LookupIsUnknown","System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection","System.Xaml.XamlType.LookupIsXData","System.Xaml.XamlType.LookupItemType","System.Xaml.XamlType.LookupKeyType","System.Xaml.XamlType.LookupMarkupExtensionReturnType","System.Xaml.XamlType.LookupMember","System.Xaml.XamlType.LookupPositionalParameters","System.Xaml.XamlType.LookupSetMarkupExtensionHandler","System.Xaml.XamlType.LookupSetTypeConverterHandler","System.Xaml.XamlType.LookupTrimSurroundingWhitespace","System.Xaml.XamlType.LookupTypeConverter","System.Xaml.XamlType.LookupUnderlyingType","System.Xaml.XamlType.LookupUsableDuringInitialization","System.Xaml.XamlType.LookupValueSerializer","System.Xaml.XamlType.MarkupExtensionReturnType","System.Xaml.XamlType.Name","System.Xaml.XamlType.op_Equality","System.Xaml.XamlType.op_op_Equality","System.Xaml.XamlType.op_Inequality","System.Xaml.XamlType.op_op_Inequality","System.Xaml.XamlType.PreferredXamlNamespace","System.Xaml.XamlType.SchemaContext","System.Xaml.XamlType.ToString","System.Xaml.XamlType.TrimSurroundingWhitespace","System.Xaml.XamlType.TypeArguments","System.Xaml.XamlType.TypeConverter","System.Xaml.XamlType.UnderlyingType","System.Xaml.XamlType.ValueSerializer"],"api_location":["System.Xaml.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Xaml.XamlType","System::Xaml::XamlType","System.Xaml.XamlType.#ctor","System::Xaml::XamlType::#ctor","System.Xaml.XamlType.AllowedContentTypes","System::Xaml::XamlType::AllowedContentTypes","System.Xaml.XamlType.BaseType","System::Xaml::XamlType::BaseType","System.Xaml.XamlType.CanAssignTo","System::Xaml::XamlType::CanAssignTo","System.Xaml.XamlType.ConstructionRequiresArguments","System::Xaml::XamlType::ConstructionRequiresArguments","System.Xaml.XamlType.ContentProperty","System::Xaml::XamlType::ContentProperty","System.Xaml.XamlType.ContentWrappers","System::Xaml::XamlType::ContentWrappers","System.Xaml.XamlType.DeferringLoader","System::Xaml::XamlType::DeferringLoader","System.Xaml.XamlType.Equals","System::Xaml::XamlType::Equals","System.Xaml.XamlType.GetAliasedProperty","System::Xaml::XamlType::GetAliasedProperty","System.Xaml.XamlType.GetAllAttachableMembers","System::Xaml::XamlType::GetAllAttachableMembers","System.Xaml.XamlType.GetAllMembers","System::Xaml::XamlType::GetAllMembers","System.Xaml.XamlType.GetAttachableMember","System::Xaml::XamlType::GetAttachableMember","System.Xaml.XamlType.GetHashCode","System::Xaml::XamlType::GetHashCode","System.Xaml.XamlType.GetMember","System::Xaml::XamlType::GetMember","System.Xaml.XamlType.GetPositionalParameters","System::Xaml::XamlType::GetPositionalParameters","System.Xaml.XamlType.GetXamlNamespaces","System::Xaml::XamlType::GetXamlNamespaces","System.Xaml.XamlType.Invoker","System::Xaml::XamlType::Invoker","System.Xaml.XamlType.IsAmbient","System::Xaml::XamlType::IsAmbient","System.Xaml.XamlType.IsArray","System::Xaml::XamlType::IsArray","System.Xaml.XamlType.IsCollection","System::Xaml::XamlType::IsCollection","System.Xaml.XamlType.IsConstructible","System::Xaml::XamlType::IsConstructible","System.Xaml.XamlType.IsDictionary","System::Xaml::XamlType::IsDictionary","System.Xaml.XamlType.IsGeneric","System::Xaml::XamlType::IsGeneric","System.Xaml.XamlType.IsMarkupExtension","System::Xaml::XamlType::IsMarkupExtension","System.Xaml.XamlType.IsNameScope","System::Xaml::XamlType::IsNameScope","System.Xaml.XamlType.IsNameValid","System::Xaml::XamlType::IsNameValid","System.Xaml.XamlType.IsNullable","System::Xaml::XamlType::IsNullable","System.Xaml.XamlType.IsPublic","System::Xaml::XamlType::IsPublic","System.Xaml.XamlType.IsUnknown","System::Xaml::XamlType::IsUnknown","System.Xaml.XamlType.IsUsableDuringInitialization","System::Xaml::XamlType::IsUsableDuringInitialization","System.Xaml.XamlType.IsWhitespaceSignificantCollection","System::Xaml::XamlType::IsWhitespaceSignificantCollection","System.Xaml.XamlType.IsXData","System::Xaml::XamlType::IsXData","System.Xaml.XamlType.ItemType","System::Xaml::XamlType::ItemType","System.Xaml.XamlType.KeyType","System::Xaml::XamlType::KeyType","System.Xaml.XamlType.LookupAliasedProperty","System::Xaml::XamlType::LookupAliasedProperty","System.Xaml.XamlType.LookupAllAttachableMembers","System::Xaml::XamlType::LookupAllAttachableMembers","System.Xaml.XamlType.LookupAllMembers","System::Xaml::XamlType::LookupAllMembers","System.Xaml.XamlType.LookupAllowedContentTypes","System::Xaml::XamlType::LookupAllowedContentTypes","System.Xaml.XamlType.LookupAttachableMember","System::Xaml::XamlType::LookupAttachableMember","System.Xaml.XamlType.LookupBaseType","System::Xaml::XamlType::LookupBaseType","System.Xaml.XamlType.LookupCollectionKind","System::Xaml::XamlType::LookupCollectionKind","System.Xaml.XamlType.LookupConstructionRequiresArguments","System::Xaml::XamlType::LookupConstructionRequiresArguments","System.Xaml.XamlType.LookupContentProperty","System::Xaml::XamlType::LookupContentProperty","System.Xaml.XamlType.LookupContentWrappers","System::Xaml::XamlType::LookupContentWrappers","System.Xaml.XamlType.LookupCustomAttributeProvider","System::Xaml::XamlType::LookupCustomAttributeProvider","System.Xaml.XamlType.LookupDeferringLoader","System::Xaml::XamlType::LookupDeferringLoader","System.Xaml.XamlType.LookupInvoker","System::Xaml::XamlType::LookupInvoker","System.Xaml.XamlType.LookupIsAmbient","System::Xaml::XamlType::LookupIsAmbient","System.Xaml.XamlType.LookupIsConstructible","System::Xaml::XamlType::LookupIsConstructible","System.Xaml.XamlType.LookupIsMarkupExtension","System::Xaml::XamlType::LookupIsMarkupExtension","System.Xaml.XamlType.LookupIsNameScope","System::Xaml::XamlType::LookupIsNameScope","System.Xaml.XamlType.LookupIsNullable","System::Xaml::XamlType::LookupIsNullable","System.Xaml.XamlType.LookupIsPublic","System::Xaml::XamlType::LookupIsPublic","System.Xaml.XamlType.LookupIsUnknown","System::Xaml::XamlType::LookupIsUnknown","System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection","System::Xaml::XamlType::LookupIsWhitespaceSignificantCollection","System.Xaml.XamlType.LookupIsXData","System::Xaml::XamlType::LookupIsXData","System.Xaml.XamlType.LookupItemType","System::Xaml::XamlType::LookupItemType","System.Xaml.XamlType.LookupKeyType","System::Xaml::XamlType::LookupKeyType","System.Xaml.XamlType.LookupMarkupExtensionReturnType","System::Xaml::XamlType::LookupMarkupExtensionReturnType","System.Xaml.XamlType.LookupMember","System::Xaml::XamlType::LookupMember","System.Xaml.XamlType.LookupPositionalParameters","System::Xaml::XamlType::LookupPositionalParameters","System.Xaml.XamlType.LookupSetMarkupExtensionHandler","System::Xaml::XamlType::LookupSetMarkupExtensionHandler","System.Xaml.XamlType.LookupSetTypeConverterHandler","System::Xaml::XamlType::LookupSetTypeConverterHandler","System.Xaml.XamlType.LookupTrimSurroundingWhitespace","System::Xaml::XamlType::LookupTrimSurroundingWhitespace","System.Xaml.XamlType.LookupTypeConverter","System::Xaml::XamlType::LookupTypeConverter","System.Xaml.XamlType.LookupUnderlyingType","System::Xaml::XamlType::LookupUnderlyingType","System.Xaml.XamlType.LookupUsableDuringInitialization","System::Xaml::XamlType::LookupUsableDuringInitialization","System.Xaml.XamlType.LookupValueSerializer","System::Xaml::XamlType::LookupValueSerializer","System.Xaml.XamlType.MarkupExtensionReturnType","System::Xaml::XamlType::MarkupExtensionReturnType","System.Xaml.XamlType.Name","System::Xaml::XamlType::Name","System.Xaml.XamlType.op_Equality","System::Xaml::XamlType::op_Equality","System.Xaml.XamlType.op_Inequality","System::Xaml::XamlType::op_Inequality","System.Xaml.XamlType.PreferredXamlNamespace","System::Xaml::XamlType::PreferredXamlNamespace","System.Xaml.XamlType.SchemaContext","System::Xaml::XamlType::SchemaContext","System.Xaml.XamlType.ToString","System::Xaml::XamlType::ToString","System.Xaml.XamlType.TrimSurroundingWhitespace","System::Xaml::XamlType::TrimSurroundingWhitespace","System.Xaml.XamlType.TypeArguments","System::Xaml::XamlType::TypeArguments","System.Xaml.XamlType.TypeConverter","System::Xaml::XamlType::TypeConverter","System.Xaml.XamlType.UnderlyingType","System::Xaml::XamlType::UnderlyingType","System.Xaml.XamlType.ValueSerializer","System::Xaml::XamlType::ValueSerializer"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"82cb0827-0b75-3201-0462-829527b17f9b","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Xaml/XamlType.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"XamlType class | Microsoft Docs","_op_ogTitle":"XamlType class","description":"Reports information about XAML types as part of the overall XAML system that is implemented in .NET Framework XAML Services.\n","toc_asset_id":"_splitted/System.Xaml/toc.json","toc_rel":"_splitted/System.Xaml/toc.json","source_url":"","ms.assetid":"System.Xaml.XamlType","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.xaml.xamltype","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.xaml.xamltype","fileRelativePath":"System.Xaml.XamlType.html"},"themesRelativePathToOutputRoot":"_themes/"}