{"content":"    \r\n    <h1 id=\"System_Deployment_Application_ApplicationDeployment\">\r\n      <span class=\"lang-csharp\">ApplicationDeployment</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Supports updates of the current deployment programmatically, and handles on-demand downloading of files. This class cannot be inherited.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public sealed class ApplicationDeployment</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">ApplicationDeployment</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>You can configure your <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> application to check for updates and install them automatically through the <code>subscription</code> element of the deployment manifest. Some applications, however, need finer control over their updates. You may want to install required updates programmatically, and prompt users to install optional updates at their convenience. By turning off subscription updates in the deployment manifest, you can take complete control of your application&#39;s update policies. Alternatively, you can use automatic subscription in conjunction with ApplicationDeployment, which enables <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> to update the application periodically, but uses ApplicationDeployment to download critical updates shortly after they are released.  </p>\n<p> You can test whether your deployment has an available update by using either the <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_CheckForUpdate_\" data-linktype=\"relative-path\">CheckForUpdate</a> or the <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_CheckForUpdateAsync_\" data-linktype=\"relative-path\">CheckForUpdateAsync</a> method; the latter method raises the <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_CheckForUpdateCompleted\" data-linktype=\"relative-path\">CheckForUpdateCompleted</a> event on successful completion. <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_CheckForDetailedUpdate_\" data-linktype=\"relative-path\">CheckForDetailedUpdate</a> returns important information about the update, such as its version number and whether it is a required update for current users. If an update is available, you can install it by using <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_Update_\" data-linktype=\"relative-path\">Update</a> or <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_UpdateAsync_\" data-linktype=\"relative-path\">UpdateAsync</a>; the latter method raises the <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_UpdateCompleted\" data-linktype=\"relative-path\">UpdateCompleted</a> event after installation of the update is complete. For large updates, you can receive progress notifications through the <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_CheckForUpdateProgressChanged\" data-linktype=\"relative-path\">CheckForUpdateProgressChanged</a> and <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_UpdateProgressChanged\" data-linktype=\"relative-path\">UpdateProgressChanged</a> events, and use the information in <a class=\"xref\" href=\"system.componentmodel.progresschangedeventargs\" data-linktype=\"relative-path\">ProgressChangedEventArgs</a> to notify the user of the download status.  </p>\n<p> You can also use ApplicationDeployment to download large files and assemblies on demand. These files must be marked as &quot;optional&quot; within the deployment&#39;s application manifest so that they are not downloaded during installation. You can download the files at any point during the application&#39;s duration by using the <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_DownloadFileGroup_\" data-linktype=\"relative-path\">DownloadFileGroup</a> or the <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_DownloadFileGroupAsync_\" data-linktype=\"relative-path\">DownloadFileGroupAsync</a> method. You can download assemblies before they are loaded into memory by supplying an event handler for the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_AssemblyResolve\" data-linktype=\"relative-path\">AssemblyResolve</a> event on the <a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a> class. For more information, see <a href=\"../Topic/Walkthrough:%20Downloading%20Assemblies%20on%20Demand%20with%20the%20ClickOnce%20Deployment%20API%20Using%20the%20Designer.md\" data-linktype=\"relative-path\">Walkthrough: Downloading Assemblies on Demand with the ClickOnce Deployment API Using the Designer</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If you update a <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> application while the application is running, the user will not see the updates until you call the <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_Restart_\" data-linktype=\"relative-path\">Restart</a> method of the <a class=\"xref\" href=\"system.windows.forms.application\" data-linktype=\"relative-path\">Application</a>, which will close the current running instance of the application and immediately restart it.  </p>\n</div>\n<p> ApplicationDeployment has no public constructor; you obtain instances of the class within a <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> application through the <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_CurrentDeployment_\" data-linktype=\"relative-path\">CurrentDeployment</a> property. You use the <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_IsNetworkDeployed_\" data-linktype=\"relative-path\">IsNetworkDeployed</a> property to verify that the current application is a <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> application.  </p>\n<p> ApplicationDeployment supports checking for updates and downloading updated files asynchronously by using the new <a href=\"../Topic/Event-based%20Asynchronous%20Pattern%20Overview.md\" data-linktype=\"relative-path\">Event-based Asynchronous Pattern Overview</a>, which exposes completion callbacks as class events. ApplicationDeployment starts and manages the threads for you, and calls your application back on the correct UI thread. Through this class, you can update without locking up the application, so that the user can continue working while the update installs. If the user must stop all work while an update takes place, consider using the synchronous methods instead.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Performing asynchronous updates requires that your application import both the <a class=\"xref\" href=\"system.deployment.application\" data-linktype=\"relative-path\">System.Deployment.Application</a> and <a class=\"xref\" href=\"system.componentmodel\" data-linktype=\"relative-path\">System.ComponentModel</a> namespaces.</p>\n</div>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Deployment_Application_ApplicationDeployment_ActivationUri\" data-linktype=\"self-bookmark\">ActivationUri</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the URL used to launch the deployment manifest of the application.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Deployment_Application_ApplicationDeployment_CurrentDeployment\" data-linktype=\"self-bookmark\">CurrentDeployment</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the current <a class=\"xref\" href=\"system.deployment.application.applicationdeployment\" data-linktype=\"relative-path\">ApplicationDeployment</a> for this deployment.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Deployment_Application_ApplicationDeployment_CurrentVersion\" data-linktype=\"self-bookmark\">CurrentVersion</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the version of the deployment for the current running instance of the application.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Deployment_Application_ApplicationDeployment_DataDirectory\" data-linktype=\"self-bookmark\">DataDirectory</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the path to the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> data directory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Deployment_Application_ApplicationDeployment_IsFirstRun\" data-linktype=\"self-bookmark\">IsFirstRun</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether this is the first time this application has run on the client computer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Deployment_Application_ApplicationDeployment_IsNetworkDeployed\" data-linktype=\"self-bookmark\">IsNetworkDeployed</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the current application is a <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> application.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Deployment_Application_ApplicationDeployment_TimeOfLastUpdateCheck\" data-linktype=\"self-bookmark\">TimeOfLastUpdateCheck</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the date and the time <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> last checked for an application update.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Deployment_Application_ApplicationDeployment_UpdatedApplicationFullName\" data-linktype=\"self-bookmark\">UpdatedApplicationFullName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the full name of the application after it has been updated.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Deployment_Application_ApplicationDeployment_UpdatedVersion\" data-linktype=\"self-bookmark\">UpdatedVersion</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the version of the update that was recently downloaded.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Deployment_Application_ApplicationDeployment_UpdateLocation\" data-linktype=\"self-bookmark\">UpdateLocation</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the Web site or file share from which this application updates itself.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Deployment_Application_ApplicationDeployment_CheckForDetailedUpdate\" data-linktype=\"self-bookmark\">CheckForDetailedUpdate()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Performs the same operation as <span class=\"xref\">stem.Deployment.Application.ApplicationDeployment.CheckForUpdate*</span>, but returns extended information about the available update.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Deployment_Application_ApplicationDeployment_CheckForDetailedUpdate_System_Boolean_\" data-linktype=\"self-bookmark\">CheckForDetailedUpdate(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Performs the same operation as <span class=\"xref\">stem.Deployment.Application.ApplicationDeployment.CheckForUpdate*</span>, but returns extended information about the available update.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Deployment_Application_ApplicationDeployment_CheckForUpdate\" data-linktype=\"self-bookmark\">CheckForUpdate()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Checks <span class=\"xref\">stem.Deployment.Application.ApplicationDeployment.UpdateLocation*</span> to determine whether a new update is available.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Deployment_Application_ApplicationDeployment_CheckForUpdate_System_Boolean_\" data-linktype=\"self-bookmark\">CheckForUpdate(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Checks <span class=\"xref\">stem.Deployment.Application.ApplicationDeployment.UpdateLocation*</span> to determine whether a new update is available.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Deployment_Application_ApplicationDeployment_CheckForUpdateAsync\" data-linktype=\"self-bookmark\">CheckForUpdateAsync()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Checks <span class=\"xref\">stem.Deployment.Application.ApplicationDeployment.UpdateLocation*</span> asynchronously to determine whether a new update is available.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Deployment_Application_ApplicationDeployment_CheckForUpdateAsyncCancel\" data-linktype=\"self-bookmark\">CheckForUpdateAsyncCancel()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Cancels the asynchronous update check.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Deployment_Application_ApplicationDeployment_DownloadFileGroup_System_String_\" data-linktype=\"self-bookmark\">DownloadFileGroup(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Downloads a set of optional files on demand.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Deployment_Application_ApplicationDeployment_DownloadFileGroupAsync_System_String_\" data-linktype=\"self-bookmark\">DownloadFileGroupAsync(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Downloads, on demand, a set of optional files in the background.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Deployment_Application_ApplicationDeployment_DownloadFileGroupAsync_System_String_System_Object_\" data-linktype=\"self-bookmark\">DownloadFileGroupAsync(String,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Downloads, on demand, a set of optional files in the background, and passes a piece of application state to the event callbacks.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Deployment_Application_ApplicationDeployment_DownloadFileGroupAsyncCancel_System_String_\" data-linktype=\"self-bookmark\">DownloadFileGroupAsyncCancel(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Cancels an asynchronous file download.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Deployment_Application_ApplicationDeployment_IsFileGroupDownloaded_System_String_\" data-linktype=\"self-bookmark\">IsFileGroupDownloaded(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Checks whether the named file group has already been downloaded to the client computer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Deployment_Application_ApplicationDeployment_Update\" data-linktype=\"self-bookmark\">Update()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Starts a synchronous download and installation of the latest version of this application.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Deployment_Application_ApplicationDeployment_UpdateAsync\" data-linktype=\"self-bookmark\">UpdateAsync()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Starts an asynchronous download and installation of the latest version of this application.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Deployment_Application_ApplicationDeployment_UpdateAsyncCancel\" data-linktype=\"self-bookmark\">UpdateAsyncCancel()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Cancels an asynchronous update initiated by <span class=\"xref\">stem.Deployment.Application.ApplicationDeployment.UpdateAsync*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Events\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Deployment_Application_ApplicationDeployment_CheckForUpdateCompleted\" data-linktype=\"self-bookmark\">CheckForUpdateCompleted</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when <span class=\"xref\">stem.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync*</span> has completed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Deployment_Application_ApplicationDeployment_CheckForUpdateProgressChanged\" data-linktype=\"self-bookmark\">CheckForUpdateProgressChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when a progress update is available on a <span class=\"xref\">stem.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync*</span> call.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Deployment_Application_ApplicationDeployment_DownloadFileGroupCompleted\" data-linktype=\"self-bookmark\">DownloadFileGroupCompleted</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs on the main application thread when a file download is complete.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Deployment_Application_ApplicationDeployment_DownloadFileGroupProgressChanged\" data-linktype=\"self-bookmark\">DownloadFileGroupProgressChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when status information is available on a file download operation initiated by a call to <span class=\"xref\">stem.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Deployment_Application_ApplicationDeployment_UpdateCompleted\" data-linktype=\"self-bookmark\">UpdateCompleted</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> has finished upgrading the application as the result of a call to <span class=\"xref\">stem.Deployment.Application.ApplicationDeployment.UpdateAsync*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Deployment_Application_ApplicationDeployment_UpdateProgressChanged\" data-linktype=\"self-bookmark\">UpdateProgressChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> has new status information for an update operation initiated by calling the <span class=\"xref\">stem.Deployment.Application.ApplicationDeployment.UpdateAsync*</span> method.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Deployment_Application_ApplicationDeployment_ActivationUri\">\r\n    \r\n            <a id=\"System_Deployment_Application_ApplicationDeployment_ActivationUri_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ActivationUri</div>        \r\n          </div>\r\n    \r\n            <p>Gets the URL used to launch the deployment manifest of the application.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Uri ActivationUri { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uri\" data-linktype=\"relative-path\">Uri</a></div>\r\n                  </div>\r\n                  <p>A zero-length string if the <code>TrustUrlParameters</code> property in the deployment manifest is <code>false</code>, or if the user has supplied a UNC to open the deployment or has opened it locally. Otherwise, the return value is the full URL used to launch the application, including any parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property will work in both fully trusted and partially trusted applications.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code shows how to retrieve the URL parameters by using ActivationUri, and how to use the <a class=\"xref\" href=\"system.web.httputility\" data-linktype=\"relative-path\">HttpUtility</a> class to parse the query string safely. Multiple occurrences of the same query string variable are consolidated in one entry of the returned <a class=\"xref\" href=\"system.collections.specialized.namevaluecollection\" data-linktype=\"relative-path\">NameValueCollection</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"ClickOnceQueryString#1\">private NameValueCollection GetQueryStringParameters()\n{\n    NameValueCollection nameValueTable = new NameValueCollection();\n\n    if (ApplicationDeployment.IsNetworkDeployed)\n    {\n        string queryString = ApplicationDeployment.CurrentDeployment.ActivationUri.Query;\n        nameValueTable = HttpUtility.ParseQueryString(queryString);\n    }\n\n    return (nameValueTable);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"ClickOnceQueryString#1\">Private Function GetQueryStringParameters() As NameValueCollection\n    Dim NameValueTable As New NameValueCollection()\n\n    If (ApplicationDeployment.IsNetworkDeployed) Then\n        Dim QueryString As String = ApplicationDeployment.CurrentDeployment.ActivationUri.Query\n        NameValueTable = HttpUtility.ParseQueryString(QueryString)\n    End If\n\n    GetQueryStringParameters = NameValueTable\nEnd Function\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Deployment_Application_ApplicationDeployment_CurrentDeployment\">\r\n    \r\n            <a id=\"System_Deployment_Application_ApplicationDeployment_CurrentDeployment_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CurrentDeployment</div>        \r\n          </div>\r\n    \r\n            <p>Returns the current <a class=\"xref\" href=\"system.deployment.application.applicationdeployment\" data-linktype=\"relative-path\">ApplicationDeployment</a> for this deployment.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Deployment.Application.ApplicationDeployment CurrentDeployment { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.deployment.application.applicationdeployment\" data-linktype=\"relative-path\">ApplicationDeployment</a></div>\r\n                  </div>\r\n                  <p>The current deployment.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.deployment.application.invaliddeploymentexception\" data-linktype=\"relative-path\">InvalidDeploymentException</a></div>\r\n                  </div>\r\n                  <p>You attempted to call this static property from a non-<!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> application.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You cannot create instances of <a class=\"xref\" href=\"system.deployment.application.applicationdeployment\" data-linktype=\"relative-path\">ApplicationDeployment</a> directly in your application; you must retrieve a valid instance through the CurrentDeployment property.  </p>\n<p> The CurrentDeployment static property is valid only from within an application that was deployed using <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE -->. Attempts to call this property from non-<!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> applications will throw an exception. If you are developing an application that may or may not be deployed using <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE -->, use the <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_IsNetworkDeployed_\" data-linktype=\"relative-path\">IsNetworkDeployed</a> property to test whether the current program is a <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> application.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example retrieves CurrentDeployment and checks to determine whether the application has been updated in the past three days.  </p>\n<pre><code class=\"lang-cs\" name=\"ClickOnceAPI#3\">private Boolean CheckForUpdateDue()\n{\n    Boolean isUpdateDue = false;\n\n    if (ApplicationDeployment.IsNetworkDeployed)\n    {\n        ApplicationDeployment ad = ApplicationDeployment.CurrentDeployment;\n        TimeSpan updateInterval = DateTime.Now - ad.TimeOfLastUpdateCheck;\n        if (updateInterval.Days &gt; 3)\n        {\n            isUpdateDue = true;\n        }\n    }\n\n    return (isUpdateDue);\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"ClickOnceAPI#3\">    public:\n        bool CheckForUpdateDue()\n        {\n            bool isUpdateDue = false;\n\n            if (ApplicationDeployment::IsNetworkDeployed)\n            {\n                ApplicationDeployment^ dueAppDeployment =\n                    ApplicationDeployment::CurrentDeployment;\n                TimeSpan^ updateInterval =\n                    DateTime::Now - dueAppDeployment-&gt;TimeOfLastUpdateCheck;\n                if (updateInterval-&gt;Days &gt;= 3)\n                {\n                    isUpdateDue = true;\n                }\n            }\n\n            return (isUpdateDue);\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"ClickOnceAPI#3\">Private Function CheckForUpdateDue() As Boolean\n    Dim isUpdateDue As Boolean = False\n\n    If (ApplicationDeployment.IsNetworkDeployed) Then\n        Dim AD As ApplicationDeployment = ApplicationDeployment.CurrentDeployment\n        Dim updateInterval As TimeSpan = DateTime.Now - AD.TimeOfLastUpdateCheck\n        If (updateInterval.Days &gt; 3) Then\n            isUpdateDue = True\n        End If\n    End If\n\n    CheckForUpdateDue = isUpdateDue\nEnd Function\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Deployment_Application_ApplicationDeployment_CurrentVersion\">\r\n    \r\n            <a id=\"System_Deployment_Application_ApplicationDeployment_CurrentVersion_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CurrentVersion</div>        \r\n          </div>\r\n    \r\n            <p>Gets the version of the deployment for the current running instance of the application.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Version CurrentVersion { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a></div>\r\n                  </div>\r\n                  <p>The current deployment version.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>CurrentVersion will differ from <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_UpdatedVersion_\" data-linktype=\"relative-path\">UpdatedVersion</a> if a new update has been installed but you have not yet called <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_Restart_\" data-linktype=\"relative-path\">Restart</a>. If the deployment manifest is configured to perform automatic updates, you can compare these two values to determine if you should restart the application.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example defines a method that determines whether <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> has updated the application.  </p>\n<pre><code class=\"lang-cs\" name=\"ClickOnceAPI#3\">private Boolean CheckForUpdateDue()\n{\n    Boolean isUpdateDue = false;\n\n    if (ApplicationDeployment.IsNetworkDeployed)\n    {\n        ApplicationDeployment ad = ApplicationDeployment.CurrentDeployment;\n        TimeSpan updateInterval = DateTime.Now - ad.TimeOfLastUpdateCheck;\n        if (updateInterval.Days &gt; 3)\n        {\n            isUpdateDue = true;\n        }\n    }\n\n    return (isUpdateDue);\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"ClickOnceAPI#3\">    public:\n        bool CheckForUpdateDue()\n        {\n            bool isUpdateDue = false;\n\n            if (ApplicationDeployment::IsNetworkDeployed)\n            {\n                ApplicationDeployment^ dueAppDeployment =\n                    ApplicationDeployment::CurrentDeployment;\n                TimeSpan^ updateInterval =\n                    DateTime::Now - dueAppDeployment-&gt;TimeOfLastUpdateCheck;\n                if (updateInterval-&gt;Days &gt;= 3)\n                {\n                    isUpdateDue = true;\n                }\n            }\n\n            return (isUpdateDue);\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"ClickOnceAPI#3\">Private Function CheckForUpdateDue() As Boolean\n    Dim isUpdateDue As Boolean = False\n\n    If (ApplicationDeployment.IsNetworkDeployed) Then\n        Dim AD As ApplicationDeployment = ApplicationDeployment.CurrentDeployment\n        Dim updateInterval As TimeSpan = DateTime.Now - AD.TimeOfLastUpdateCheck\n        If (updateInterval.Days &gt; 3) Then\n            isUpdateDue = True\n        End If\n    End If\n\n    CheckForUpdateDue = isUpdateDue\nEnd Function\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Deployment_Application_ApplicationDeployment_DataDirectory\">\r\n    \r\n            <a id=\"System_Deployment_Application_ApplicationDeployment_DataDirectory_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DataDirectory</div>        \r\n          </div>\r\n    \r\n            <p>Gets the path to the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> data directory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string DataDirectory { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string containing the path to the application&#39;s data directory on the local disk.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Deployment_Application_ApplicationDeployment_IsFirstRun\">\r\n    \r\n            <a id=\"System_Deployment_Application_ApplicationDeployment_IsFirstRun_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsFirstRun</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether this is the first time this application has run on the client computer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsFirstRun { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if this version of the application has never run on the client computer before; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use IsFirstRun to determine whether you need to perform any one-time initialization operations the first time your application runs.  </p>\n<p> Do not assume that a IsFirstRun setting of <code>true</code> indicates that this instance of an application is the first one to show its user interface to the user. Due to the way the system schedules processes, one instance of the application may have its IsFirstRun property set to <code>true</code>, but another instance may be the first to render on the screen. The value of this property is reset whenever the user upgrades from one version to the next. If you want to perform an operation only the very first time any version of the application is run, you will need to perform an additional test, such as checking for the existence of a file you created the first time, or storing a flag using <strong>Application Settings</strong>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses IsFirstRun to decide whether to check for an update to the file group <code>HelpFiles</code>. If one or more of the files have been updated, it calls <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_DownloadFileGroup_\" data-linktype=\"relative-path\">DownloadFileGroup</a> to obtain the new versions.  </p>\n<pre><code class=\"lang-cs\" name=\"ClickOnceAPI#9\">private void DownloadFileGroupSync(string fileGroup)\n{\n    if (ApplicationDeployment.IsNetworkDeployed)\n    {\n        ApplicationDeployment deployment = ApplicationDeployment.CurrentDeployment;\n\n        if (deployment.IsFirstRun)\n        {\n            try\n            {\n                if (deployment.IsFileGroupDownloaded(fileGroup))\n                {\n                    deployment.DownloadFileGroup(fileGroup);\n                } \n            }\n            catch (InvalidOperationException ioe)\n            {\n                MessageBox.Show(&quot;This application is not a ClickOnce application. Error: &quot; + ioe.Message);\n                return;\n            }\n\n            downloadStatus.Text = String.Format(&quot;Download of file group {0} complete.&quot;, fileGroup);\n        }\n    }            \n}\n\n</code></pre><pre><code class=\"lang-vb\" name=\"ClickOnceAPI#9\">Private Sub DownloadFileGroupSync(ByVal fileGroup As String)\n    If (ApplicationDeployment.IsNetworkDeployed) Then\n        Dim deployment As ApplicationDeployment = ApplicationDeployment.CurrentDeployment\n\n        If (deployment.IsFirstRun) Then\n            Try\n                If (deployment.IsFileGroupDownloaded(fileGroup)) Then\n                    deployment.DownloadFileGroup(fileGroup)\n                End If\n            Catch ioe As InvalidOperationException\n                MessageBox.Show(&quot;This application is not a ClickOnce application. Error: &quot; &amp; ioe.Message)\n                Exit Sub\n            End Try\n\n            DownloadStatus.Text = String.Format(&quot;Download of file group {0} complete.&quot;, fileGroup)\n        End If\n    End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Deployment_Application_ApplicationDeployment_IsNetworkDeployed\">\r\n    \r\n            <a id=\"System_Deployment_Application_ApplicationDeployment_IsNetworkDeployed_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsNetworkDeployed</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the current application is a <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> application.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsNetworkDeployed { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if this is a <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> application; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If you want your application to run both inside and outside of a <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> deployment (for example, if you need to debug your application on the local computer before deploying it), test IsNetworkDeployed before accessing the <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_CurrentDeployment_\" data-linktype=\"relative-path\">CurrentDeployment</a> property.  </p>\n<p> IsNetworkDeployed will return <code>true</code> regardless of whether the application is installed or hosted online, and regardless of whether it was installed from a Web site, file share, or CD-ROM.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example retrieves <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_CurrentDeployment_\" data-linktype=\"relative-path\">CurrentDeployment</a> by using IsNetworkDeployed first to ensure that the reference is not <code>null</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"ClickOnceAPI#2\">private void UpdateApplication()\n{\n    if (ApplicationDeployment.IsNetworkDeployed)\n    {\n        ApplicationDeployment ad = ApplicationDeployment.CurrentDeployment;\n        ad.CheckForUpdateCompleted += new CheckForUpdateCompletedEventHandler(ad_CheckForUpdateCompleted);\n        ad.CheckForUpdateProgressChanged += new DeploymentProgressChangedEventHandler(ad_CheckForUpdateProgressChanged);\n\n        ad.CheckForUpdateAsync();\n    }\n}\n\nvoid  ad_CheckForUpdateProgressChanged(object sender, DeploymentProgressChangedEventArgs e)\n{\n    downloadStatus.Text = String.Format(&quot;Downloading: {0}. {1:D}K of {2:D}K downloaded.&quot;, GetProgressString(e.State), e.BytesCompleted/1024, e.BytesTotal/1024);   \n}\n\nstring GetProgressString(DeploymentProgressState state)\n{\n    if (state == DeploymentProgressState.DownloadingApplicationFiles)\n    {\n        return &quot;application files&quot;;\n    } \n    else if (state == DeploymentProgressState.DownloadingApplicationInformation) \n    {\n        return &quot;application manifest&quot;;\n    } \n    else \n    {\n        return &quot;deployment manifest&quot;;\n    }\n}\n\nvoid ad_CheckForUpdateCompleted(object sender, CheckForUpdateCompletedEventArgs e)\n{\n    if (e.Error != null)\n    {\n        MessageBox.Show(&quot;ERROR: Could not retrieve new version of the application. Reason: <br>&quot; + e.Error.Message + &quot;<br>Please report this error to the system administrator.&quot;);\n        return;\n    }\n    else if (e.Cancelled == true)\n    {\n        MessageBox.Show(&quot;The update was cancelled.&quot;);\n    }\n\n    // Ask the user if they would like to update the application now.\n    if (e.UpdateAvailable)\n    {\n        sizeOfUpdate = e.UpdateSizeBytes;\n\n        if (!e.IsUpdateRequired)\n        {\n            DialogResult dr = MessageBox.Show(&quot;An update is available. Would you like to update the application now?<br><br>Estimated Download Time: &quot;, &quot;Update Available&quot;, MessageBoxButtons.OKCancel);\n            if (DialogResult.OK == dr)\n            {\n                BeginUpdate();\n            }\n        }\n        else\n        {\n            MessageBox.Show(&quot;A mandatory update is available for your application. We will install the update now, after which we will save all of your in-progress data and restart your application.&quot;);\n            BeginUpdate();\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"ClickOnceAPI#2\">    public:\n        void LaunchUpdate()\n        {\n            if (ApplicationDeployment::IsNetworkDeployed)\n            {\n                ApplicationDeployment^ launchAppDeployment =\n                    ApplicationDeployment::CurrentDeployment;\n                // Launch synchronous or asynchronous update.\n            }\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Deployment_Application_ApplicationDeployment_TimeOfLastUpdateCheck\">\r\n    \r\n            <a id=\"System_Deployment_Application_ApplicationDeployment_TimeOfLastUpdateCheck_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TimeOfLastUpdateCheck</div>        \r\n          </div>\r\n    \r\n            <p>Gets the date and the time <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> last checked for an application update.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public DateTime TimeOfLastUpdateCheck { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> of the last update check.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> application can be configured for subscription updates. In this scenario, <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> polls an application&#39;s deployment location automatically at intervals defined in the deployment manifest, and determines whether there is an update available. TimeOfLastUpdateCheck returns the time of the last update check regardless of whether it was initiated by a subscription or by an explicit check using the <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_CheckForUpdate_\" data-linktype=\"relative-path\">CheckForUpdate</a>, <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_CheckForUpdateAsync_\" data-linktype=\"relative-path\">CheckForUpdateAsync</a>, <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_CheckForDetailedUpdate_\" data-linktype=\"relative-path\">CheckForDetailedUpdate</a>, <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_Update_\" data-linktype=\"relative-path\">Update</a>, or <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_UpdateAsync_\" data-linktype=\"relative-path\">UpdateAsync</a> method.  </p>\n<p> If no update check has been performed since the application was installed, TimeOfLastUpdateCheck returns the installation time.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example checks whether a <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> application has been checked for available updates in the past three days.  </p>\n<pre><code class=\"lang-cs\" name=\"ClickOnceAPI#3\">private Boolean CheckForUpdateDue()\n{\n    Boolean isUpdateDue = false;\n\n    if (ApplicationDeployment.IsNetworkDeployed)\n    {\n        ApplicationDeployment ad = ApplicationDeployment.CurrentDeployment;\n        TimeSpan updateInterval = DateTime.Now - ad.TimeOfLastUpdateCheck;\n        if (updateInterval.Days &gt; 3)\n        {\n            isUpdateDue = true;\n        }\n    }\n\n    return (isUpdateDue);\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"ClickOnceAPI#3\">    public:\n        bool CheckForUpdateDue()\n        {\n            bool isUpdateDue = false;\n\n            if (ApplicationDeployment::IsNetworkDeployed)\n            {\n                ApplicationDeployment^ dueAppDeployment =\n                    ApplicationDeployment::CurrentDeployment;\n                TimeSpan^ updateInterval =\n                    DateTime::Now - dueAppDeployment-&gt;TimeOfLastUpdateCheck;\n                if (updateInterval-&gt;Days &gt;= 3)\n                {\n                    isUpdateDue = true;\n                }\n            }\n\n            return (isUpdateDue);\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"ClickOnceAPI#3\">Private Function CheckForUpdateDue() As Boolean\n    Dim isUpdateDue As Boolean = False\n\n    If (ApplicationDeployment.IsNetworkDeployed) Then\n        Dim AD As ApplicationDeployment = ApplicationDeployment.CurrentDeployment\n        Dim updateInterval As TimeSpan = DateTime.Now - AD.TimeOfLastUpdateCheck\n        If (updateInterval.Days &gt; 3) Then\n            isUpdateDue = True\n        End If\n    End If\n\n    CheckForUpdateDue = isUpdateDue\nEnd Function\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Deployment_Application_ApplicationDeployment_UpdatedApplicationFullName\">\r\n    \r\n            <a id=\"System_Deployment_Application_ApplicationDeployment_UpdatedApplicationFullName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UpdatedApplicationFullName</div>        \r\n          </div>\r\n    \r\n            <p>Gets the full name of the application after it has been updated.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string UpdatedApplicationFullName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains the full name of the application.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Deployment_Application_ApplicationDeployment_UpdatedVersion\">\r\n    \r\n            <a id=\"System_Deployment_Application_ApplicationDeployment_UpdatedVersion_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UpdatedVersion</div>        \r\n          </div>\r\n    \r\n            <p>Gets the version of the update that was recently downloaded.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Version UpdatedVersion { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> describing the version of the update.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>UpdatedVersion differs from <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_CurrentVersion_\" data-linktype=\"relative-path\">CurrentVersion</a> if a new update has been installed but you have not yet called <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_Restart_\" data-linktype=\"relative-path\">Restart</a> on the <a class=\"xref\" href=\"system.windows.forms.application\" data-linktype=\"relative-path\">Application</a>. If the application&#39;s deployment manifest is configured to perform automatic updates, you can compare these two values to determine whether you should restart the application.  </p>\n<p> If the application has not been updated, UpdatedVersion returns the same value as <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_CurrentVersion_\" data-linktype=\"relative-path\">CurrentVersion</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example defines a method that determines whether <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> has updated the application.  </p>\n<pre><code class=\"lang-cs\" name=\"ClickOnceAPI#4\">public Boolean IsNewVersionAvailable()\n{\n    Boolean isRestartRequired = false;\n\n    if (ApplicationDeployment.IsNetworkDeployed)\n    {\n        ApplicationDeployment ad = ApplicationDeployment.CurrentDeployment;\n        if (ad.UpdatedVersion &gt; ad.CurrentVersion)\n        {\n            isRestartRequired = true;\n        }\n    }\n\n    return (isRestartRequired);\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"ClickOnceAPI#4\">    public:\n        bool IsNewVersionAvailable()\n        {\n            bool isRestartRequired = false;\n\n            if (ApplicationDeployment::IsNetworkDeployed)\n            {\n                ApplicationDeployment^ restartAppDeployment =\n                    ApplicationDeployment::CurrentDeployment;\n                if (restartAppDeployment-&gt;UpdatedVersion &gt; \n                    restartAppDeployment-&gt;CurrentVersion)\n                {\n                    isRestartRequired = true;\n                }\n            }\n\n            return (isRestartRequired);\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"ClickOnceAPI#4\">Public Function IsNewVersionAvailable() As Boolean\n    Dim isRestartRequired As Boolean = False\n\n    If (ApplicationDeployment.IsNetworkDeployed) Then\n        Dim AD As ApplicationDeployment = ApplicationDeployment.CurrentDeployment\n        If (AD.UpdatedVersion &gt; AD.CurrentVersion) Then\n            isRestartRequired = True\n        End If\n    End If\n\n    IsNewVersionAvailable = isRestartRequired\nEnd Function\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Deployment_Application_ApplicationDeployment_UpdateLocation\">\r\n    \r\n            <a id=\"System_Deployment_Application_ApplicationDeployment_UpdateLocation_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UpdateLocation</div>        \r\n          </div>\r\n    \r\n            <p>Gets the Web site or file share from which this application updates itself.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Uri UpdateLocation { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uri\" data-linktype=\"relative-path\">Uri</a></div>\r\n                  </div>\r\n                  <p>The update path, expressed as an HTTP, HTTPS, or file URL; or as a Windows network file path (UNC).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>UpdateLocation may be different from the Web site used to download the application initially if the application&#39;s deployment is configured to use update redirection.  </p>\n<p> This value can be changed only in the application&#39;s deployment manifest.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Deployment_Application_ApplicationDeployment_CheckForDetailedUpdate\">\r\n    \r\n            <a id=\"System_Deployment_Application_ApplicationDeployment_CheckForDetailedUpdate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CheckForDetailedUpdate()</div>        \r\n          </div>\r\n    \r\n            <p>Performs the same operation as <span class=\"xref\">stem.Deployment.Application.ApplicationDeployment.CheckForUpdate*</span>, but returns extended information about the available update.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Deployment.Application.UpdateCheckInfo CheckForDetailedUpdate ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.deployment.application.updatecheckinfo\" data-linktype=\"relative-path\">UpdateCheckInfo</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.deployment.application.updatecheckinfo\" data-linktype=\"relative-path\">UpdateCheckInfo</a> for the available update.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The current application is either not configured to support updates, or there is another update check operation already in progress.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.deployment.application.deploymentdownloadexception\" data-linktype=\"relative-path\">DeploymentDownloadException</a></div>\r\n                  </div>\r\n                  <p>The deployment manifest cannot be downloaded. This exception will appear in the <span class=\"xref\">stem.ComponentModel.AsyncCompletedEventArgs.Error*</span> property of the <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_CheckForUpdateCompleted\" data-linktype=\"relative-path\">CheckForUpdateCompleted</a> event.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.deployment.application.invaliddeploymentexception\" data-linktype=\"relative-path\">InvalidDeploymentException</a></div>\r\n                  </div>\r\n                  <p>The deployment manifest is corrupted. Regenerate the application&#39;s manifest before you attempt to deploy this application to users. This exception will appear in the <span class=\"xref\">stem.ComponentModel.AsyncCompletedEventArgs.Error*</span> property of the <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_CheckForUpdateCompleted\" data-linktype=\"relative-path\">CheckForUpdateCompleted</a> event.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The CheckForDetailedUpdate method lets synchronous callers get the same extended information that asynchronous callers get using the <a class=\"xref\" href=\"system.deployment.application.checkforupdatecompletedeventargs\" data-linktype=\"relative-path\">CheckForUpdateCompletedEventArgs</a> class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses CheckForDetailedUpdate to retrieve the information about the latest update. If an update exists, it installs it automatically only if it is a required update; otherwise, it prompts the user.  </p>\n<pre><code class=\"lang-cs\" name=\"ClickOnceAPI#7\">public void LaunchAppUpdate()\n{\n    if (ApplicationDeployment.IsNetworkDeployed)\n    {\n        ApplicationDeployment appDeploy = ApplicationDeployment.CurrentDeployment;\n        appDeploy.UpdateCompleted += new AsyncCompletedEventHandler(appDeploy_UpdateCompleted);\n    }\n}\n\nvoid appDeploy_UpdateCompleted(object sender, AsyncCompletedEventArgs e)\n{\n    if (e.Error != null)\n    {\n        MessageBox.Show(&quot;Could not install application update. Please try again later,  or contact a system administrator.&quot;, &quot;Application Update Error&quot;);\n        return;\n    }\n    else if (e.Cancelled)\n    {\n        MessageBox.Show(&quot;The application update has been cancelled.&quot;, &quot;Application Update Cancelled&quot;);\n        return;\n    }\n\n    // Process successful update.\n    DialogResult dr = MessageBox.Show(&quot;The application has been updated. Restart?&quot;, &quot;Restart Application&quot;, MessageBoxButtons.OKCancel);\n    if (DialogResult.OK == dr)\n    {\n        Application.Restart();\n    }\n}\n\n</code></pre><pre><code class=\"lang-cpp\" name=\"ClickOnceAPI#7\">    public:\n        void InstallUpdateSyncWithInfo()\n        {\n            if (ApplicationDeployment::IsNetworkDeployed)\n            {\n                ApplicationDeployment^ deployment =\n                    ApplicationDeployment::CurrentDeployment;\n                UpdateCheckInfo^ updateInfo = nullptr;\n\n                try\n                {\n                    updateInfo = deployment-&gt;CheckForDetailedUpdate();\n                }\n                catch (Exception^ ex)\n                {\n                    MessageBox::Show(&quot;The update failed. Error: {0}&quot;,\n                        ex-&gt;Message);\n                    return;\n                }\n\n                if (updateInfo-&gt;UpdateAvailable)\n                {\n                    bool doUpdate = true;\n\n                    if (!updateInfo-&gt;IsUpdateRequired)\n                    {\n                        System::Windows::Forms::DialogResult dr =\n                            MessageBox::Show(\n                            &quot;An update is available. Would you like to &quot; +\n                            &quot;update the application now?&quot;,\n                            &quot;Update Available&quot;,\n                            MessageBoxButtons::OKCancel);\n                        if (!(System::Windows::Forms::DialogResult::OK == dr))\n                        {\n                            doUpdate = false;\n                        }\n                    }\n\n                    if (doUpdate)\n                    {\n                        try\n                        {\n                            deployment-&gt;Update();\n                            MessageBox::Show(\n                                &quot;The application has been upgraded, and will &quot; +\n                                &quot;now restart.&quot;);\n                            Application::Restart();\n                        }\n                        catch (Exception^ ex)\n                        {\n                            MessageBox::Show(&quot;The update failed. Error: {0}&quot;,\n                                ex-&gt;Message);\n                            return;\n                        }\n                    }\n                }\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"ClickOnceAPI#7\">Dim WithEvents ADLaunchAppUpdate As ApplicationDeployment\n\nPublic Sub LaunchAppUpdate()\n    If (ApplicationDeployment.IsNetworkDeployed) Then\n        ADLaunchAppUpdate = ApplicationDeployment.CurrentDeployment\n    End If\nEnd Sub\n\n\nPrivate Sub ADLaunchAppUpdate_UpdateCompleted(ByVal sender As Object, ByVal e As AsyncCompletedEventArgs) Handles ADLaunchAppUpdate.UpdateCompleted\n    If Not (e.Error Is Nothing) Then\n        MessageBox.Show(&quot;Could not install application update. Please try again later,  or contact a system administrator.&quot;, &quot;Application Update Error&quot;)\n        Exit Sub\n    Else\n        If (e.Cancelled) Then\n            MessageBox.Show(&quot;The application update has been cancelled.&quot;, &quot;Application Update Cancelled&quot;)\n            Exit Sub\n        End If\n    End If\n\n    &#39; Process successful update.\n    Dim dr As DialogResult = MessageBox.Show(&quot;The application has been updated. Restart?&quot;, &quot;Restart Application&quot;, MessageBoxButtons.OKCancel)\n    If (System.Windows.Forms.DialogResult.OK = dr) Then\n        Application.Restart()\n    End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Deployment_Application_ApplicationDeployment_CheckForDetailedUpdate_System_Boolean_\">\r\n    \r\n            <a id=\"System_Deployment_Application_ApplicationDeployment_CheckForDetailedUpdate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CheckForDetailedUpdate(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Performs the same operation as <span class=\"xref\">stem.Deployment.Application.ApplicationDeployment.CheckForUpdate*</span>, but returns extended information about the available update.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Deployment.Application.UpdateCheckInfo CheckForDetailedUpdate (bool persistUpdateCheckResult);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>persistUpdateCheckResult</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>If <code>false</code>, the update will be applied silently and no dialog box will be displayed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.deployment.application.updatecheckinfo\" data-linktype=\"relative-path\">UpdateCheckInfo</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.deployment.application.updatecheckinfo\" data-linktype=\"relative-path\">UpdateCheckInfo</a> for the available update.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Deployment_Application_ApplicationDeployment_CheckForUpdate\">\r\n    \r\n            <a id=\"System_Deployment_Application_ApplicationDeployment_CheckForUpdate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CheckForUpdate()</div>        \r\n          </div>\r\n    \r\n            <p>Checks <span class=\"xref\">stem.Deployment.Application.ApplicationDeployment.UpdateLocation*</span> to determine whether a new update is available.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool CheckForUpdate ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if a new update is available; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> throws this exception immediately if you call the CheckForUpdate method while an update is already in progress.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.deployment.application.deploymentdownloadexception\" data-linktype=\"relative-path\">DeploymentDownloadException</a></div>\r\n                  </div>\r\n                  <p>The deployment manifest cannot be downloaded.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.deployment.application.invaliddeploymentexception\" data-linktype=\"relative-path\">InvalidDeploymentException</a></div>\r\n                  </div>\r\n                  <p>The deployment manifest is corrupted. You will likely need to redeploy the application to fix this problem.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The CheckForUpdate method compares the version of the currently installed deployment with the version specified in the deployment manifest found at <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_UpdateLocation_\" data-linktype=\"relative-path\">UpdateLocation</a>. If the version on the server is different from the installed version, it returns <code>true</code>.  </p>\n<p> This method will block until the check has completed. To check for an update asynchronously, use the <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_CheckForUpdateAsync_\" data-linktype=\"relative-path\">CheckForUpdateAsync</a> method instead.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If CheckForUpdate discovers that an update is available, and the user chooses not to install it, <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> will prompt the user that an update is available the next time the application is run. There is no way to disable this prompting. (If the application is a required update, <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> will install it without prompting.)</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example checks for an application update; if one is available, it installs it synchronously.  </p>\n<pre><code class=\"lang-cs\" name=\"ClickOnceAPI#5\">private void InstallUpdateSync()\n{\n    if (ApplicationDeployment.IsNetworkDeployed)\n    {\n        Boolean updateAvailable = false;\n        ApplicationDeployment ad = ApplicationDeployment.CurrentDeployment;\n\n        try\n        {\n            updateAvailable = ad.CheckForUpdate();\n        }\n        catch (DeploymentDownloadException dde)\n        {\n            // This exception occurs if a network error or disk error occurs\n            // when downloading the deployment.\n            MessageBox.Show(&quot;The application cannt check for the existence of a new version at this time. <br><br>Please check your network connection, or try again later. Error: &quot; + dde);\n            return;\n        }\n        catch (InvalidDeploymentException ide)\n        {\n            MessageBox.Show(&quot;The application cannot check for an update. The ClickOnce deployment is corrupt. Please redeploy the application and try again. Error: &quot; + ide.Message);\n            return;\n        }\n        catch (InvalidOperationException ioe)\n        {\n            MessageBox.Show(&quot;This application cannot check for an update. This most often happens if the application is already in the process of updating. Error: &quot; + ioe.Message);\n            return;\n        }\n\n        if (updateAvailable)\n        {\n            try\n            {\n                ad.Update();\n                MessageBox.Show(&quot;The application has been upgraded, and will now restart.&quot;);\n                Application.Restart();\n            }\n            catch (DeploymentDownloadException dde)\n            {\n                MessageBox.Show(&quot;Cannot install the latest version of the application. Either the deployment server is unavailable, or your network connection is down. <br><br>Please check your network connection, or try again later. Error: &quot; + dde.Message);\n            }\n            catch (TrustNotGrantedException tnge)\n            {\n                MessageBox.Show(&quot;The application cannot be updated. The system did not grant the application the appropriate level of trust. Please contact your system administrator or help desk for further troubleshooting. Error: &quot; + tnge.Message);\n            }\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"ClickOnceAPI#5\">    public:\n        void LaunchUpdateWithTimeout()\n        {\n            if (ApplicationDeployment::IsNetworkDeployed)\n            {\n                ApplicationDeployment^ appDeployment =\n                    ApplicationDeployment::CurrentDeployment;\n                appDeployment-&gt;UpdateCompleted +=\n                    gcnew AsyncCompletedEventHandler(this, \n                    &amp;Form1::deploy_UpdateCompleted);\n\n                // The Interval property uses millisecond resolution.\n                timer1-&gt;Interval = (1000 * 60) * 2;\n                timer1-&gt;Start();\n\n                appDeployment-&gt;UpdateAsync();\n            }\n        }\n\n    private:\n        void deploy_UpdateCompleted(Object^ sender,\n            AsyncCompletedEventArgs^ e)\n        {\n            timer1-&gt;Stop();\n            if (!e-&gt;Cancelled)\n            {\n                if (nullptr == e-&gt;Error)\n                {\n                    Application::Restart();\n                }\n                else\n                {\n                    // Replace with your own error reporting or logging.\n                    MessageBox::Show(\n                        &quot;The update of the application encountered an &quot; +\n                        &quot;error. Error message: {0}&quot;,\n                        e-&gt;Error-&gt;Message);\n                }\n            }\n            else\n            {\n                // Replace with your own error reporting or logging.\n                MessageBox::Show(\n                    &quot;The application update was cancelled because the update &quot; +\n                    &quot;server was unreachable. Please try again later.&quot;);\n            }\n        }\n\n    private:\n        void timer1_Tick(Object^ sender, EventArgs^ e)\n        {\n            if (ApplicationDeployment::IsNetworkDeployed)\n            {\n                ApplicationDeployment::CurrentDeployment-&gt;UpdateAsyncCancel();\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"ClickOnceAPI#5\">Private Sub InstallUpdateSync()\n    If (ApplicationDeployment.IsNetworkDeployed) Then\n        Dim updateAvailable As Boolean = False\n        Dim AD As ApplicationDeployment = ApplicationDeployment.CurrentDeployment\n\n        Try\n            updateAvailable = AD.CheckForUpdate()\n        Catch dde As DeploymentDownloadException\n            &#39; This exception occurs if a network error or disk error occurs\n            &#39; when downloading the deployment.\n            MessageBox.Show(&quot;The application cannot check for the existence of a new version at this time. &quot; &amp; ControlChars.Lf &amp; ControlChars.Lf &amp; &quot;Please check your network connection, or try again later. Message: &quot; &amp; dde.Message)\n            Exit Sub\n        Catch ide As InvalidDeploymentException\n            MessageBox.Show(&quot;The application cannot check for an update. The ClickOnce deployment is corrupt. Please redeploy the application and try again. Message: &quot; &amp; ide.Message)\n            Exit Sub\n        Catch ioe As InvalidOperationException\n            MessageBox.Show(&quot;The application cannot check for an update. This most likely happened because the application is already updating. Message: &quot; &amp; ioe.Message)\n            Exit Sub\n        End Try\n\n        If (updateAvailable) Then\n            Try\n                AD.Update()\n                MessageBox.Show(&quot;The application has been upgraded, and will now restart.&quot;)\n                Application.Restart()\n            Catch dde As DeploymentDownloadException\n                MessageBox.Show(&quot;Cannot install the latest version of the application. &quot; + ControlChars.Lf + ControlChars.Lf + &quot;Please check your network connection, or try again later.&quot;)\n            End Try\n        End If\n    End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Deployment_Application_ApplicationDeployment_CheckForUpdate_System_Boolean_\">\r\n    \r\n            <a id=\"System_Deployment_Application_ApplicationDeployment_CheckForUpdate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CheckForUpdate(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Checks <span class=\"xref\">stem.Deployment.Application.ApplicationDeployment.UpdateLocation*</span> to determine whether a new update is available.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool CheckForUpdate (bool persistUpdateCheckResult);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>persistUpdateCheckResult</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>If <code>false</code>, the update will be applied silently and no dialog box will be displayed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if a new update is available; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Deployment_Application_ApplicationDeployment_CheckForUpdateAsync\">\r\n    \r\n            <a id=\"System_Deployment_Application_ApplicationDeployment_CheckForUpdateAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CheckForUpdateAsync()</div>        \r\n          </div>\r\n    \r\n            <p>Checks <span class=\"xref\">stem.Deployment.Application.ApplicationDeployment.UpdateLocation*</span> asynchronously to determine whether a new update is available.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void CheckForUpdateAsync ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> throws this exception immediately if you call the CheckForUpdateAsync method while an update is already in progress.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.deployment.application.deploymentdownloadexception\" data-linktype=\"relative-path\">DeploymentDownloadException</a></div>\r\n                  </div>\r\n                  <p>The deployment manifest cannot be downloaded. This exception appears in the <span class=\"xref\">stem.ComponentModel.AsyncCompletedEventArgs.Error*</span> property of the <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_CheckForUpdateCompleted\" data-linktype=\"relative-path\">CheckForUpdateCompleted</a> event.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.deployment.application.invaliddeploymentexception\" data-linktype=\"relative-path\">InvalidDeploymentException</a></div>\r\n                  </div>\r\n                  <p>The deployment manifest is corrupted. You will likely need to redeploy the application to fix this problem. This exception appears in the <span class=\"xref\">stem.ComponentModel.AsyncCompletedEventArgs.Error*</span> property of the <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_CheckForUpdateCompleted\" data-linktype=\"relative-path\">CheckForUpdateCompleted</a> event.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>CheckForUpdateAsync returns immediately and starts a separate thread for downloading the updated application. When the method completes or is canceled, it raises the <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_CheckForUpdateCompleted\" data-linktype=\"relative-path\">CheckForUpdateCompleted</a> event. You can use <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs\" data-linktype=\"relative-path\">AsyncCompletedEventArgs</a> in this event handler to determine whether the operation was canceled, or if an exception was raised during update.  </p>\n<p> You can cancel an asynchronous update by calling <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_CheckForUpdateAsyncCancel_\" data-linktype=\"relative-path\">CheckForUpdateAsyncCancel</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_CheckForUpdate_\" data-linktype=\"relative-path\">CheckForUpdate</a> discovers that an update is available, and the user chooses not to install it, <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> will prompt the user that an update is available the next time the application is run. There is no way to disable this prompting. (If the application is a required update, <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> will install it without prompting.)</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example checks for an update asynchronously, and installs the update if one exists.  </p>\n<pre><code class=\"lang-cs\" name=\"ClickOnceAPI#1\">long sizeOfUpdate = 0;\n\nprivate void UpdateApplication()\n{\n    if (ApplicationDeployment.IsNetworkDeployed)\n    {\n        ApplicationDeployment ad = ApplicationDeployment.CurrentDeployment;\n        ad.CheckForUpdateCompleted += new CheckForUpdateCompletedEventHandler(ad_CheckForUpdateCompleted);\n        ad.CheckForUpdateProgressChanged += new DeploymentProgressChangedEventHandler(ad_CheckForUpdateProgressChanged);\n\n        ad.CheckForUpdateAsync();\n    }\n}\n\nvoid  ad_CheckForUpdateProgressChanged(object sender, DeploymentProgressChangedEventArgs e)\n{\n    downloadStatus.Text = String.Format(&quot;Downloading: {0}. {1:D}K of {2:D}K downloaded.&quot;, GetProgressString(e.State), e.BytesCompleted/1024, e.BytesTotal/1024);   \n}\n\nstring GetProgressString(DeploymentProgressState state)\n{\n    if (state == DeploymentProgressState.DownloadingApplicationFiles)\n    {\n        return &quot;application files&quot;;\n    } \n    else if (state == DeploymentProgressState.DownloadingApplicationInformation) \n    {\n        return &quot;application manifest&quot;;\n    } \n    else \n    {\n        return &quot;deployment manifest&quot;;\n    }\n}\n\nvoid ad_CheckForUpdateCompleted(object sender, CheckForUpdateCompletedEventArgs e)\n{\n    if (e.Error != null)\n    {\n        MessageBox.Show(&quot;ERROR: Could not retrieve new version of the application. Reason: <br>&quot; + e.Error.Message + &quot;<br>Please report this error to the system administrator.&quot;);\n        return;\n    }\n    else if (e.Cancelled == true)\n    {\n        MessageBox.Show(&quot;The update was cancelled.&quot;);\n    }\n\n    // Ask the user if they would like to update the application now.\n    if (e.UpdateAvailable)\n    {\n        sizeOfUpdate = e.UpdateSizeBytes;\n\n        if (!e.IsUpdateRequired)\n        {\n            DialogResult dr = MessageBox.Show(&quot;An update is available. Would you like to update the application now?<br><br>Estimated Download Time: &quot;, &quot;Update Available&quot;, MessageBoxButtons.OKCancel);\n            if (DialogResult.OK == dr)\n            {\n                BeginUpdate();\n            }\n        }\n        else\n        {\n            MessageBox.Show(&quot;A mandatory update is available for your application. We will install the update now, after which we will save all of your in-progress data and restart your application.&quot;);\n            BeginUpdate();\n        }\n    }\n}\n\nprivate void BeginUpdate()\n{\n    ApplicationDeployment ad = ApplicationDeployment.CurrentDeployment;\n    ad.UpdateCompleted += new AsyncCompletedEventHandler(ad_UpdateCompleted);\n\n    // Indicate progress in the application&#39;s status bar.\n    ad.UpdateProgressChanged += new DeploymentProgressChangedEventHandler(ad_UpdateProgressChanged);\n    ad.UpdateAsync();\n}\n\nvoid ad_UpdateProgressChanged(object sender, DeploymentProgressChangedEventArgs e)\n{\n    String progressText = String.Format(&quot;{0:D}K out of {1:D}K downloaded - {2:D}% complete&quot;, e.BytesCompleted / 1024, e.BytesTotal / 1024, e.ProgressPercentage);\n    downloadStatus.Text = progressText;\n}\n\nvoid ad_UpdateCompleted(object sender, AsyncCompletedEventArgs e)\n{\n    if (e.Cancelled)\n    {\n        MessageBox.Show(&quot;The update of the application&#39;s latest version was cancelled.&quot;);\n        return;\n    }\n    else if (e.Error != null)\n    {\n        MessageBox.Show(&quot;ERROR: Could not install the latest version of the application. Reason: <br>&quot; + e.Error.Message + &quot;<br>Please report this error to the system administrator.&quot;);\n        return;\n    }\n\n    DialogResult dr = MessageBox.Show(&quot;The application has been updated. Restart? (If you do not restart now, the new version will not take effect until after you quit and launch the application again.)&quot;, &quot;Restart Application&quot;, MessageBoxButtons.OKCancel);\n    if (DialogResult.OK == dr)\n    {\n        Application.Restart();\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"ClickOnceAPI#1\">    private:\n        long sizeOfUpdate;\n\n\n    private:\n        void Form1_Load(Object^ sender, System::EventArgs^ e)\n        {\n            DoUpdate();\n        }\n\n    public:\n        void DoUpdate()\n        {\n            if (ApplicationDeployment::IsNetworkDeployed)\n            {\n                ApplicationDeployment^ currentAppDeployment =\n                    ApplicationDeployment::CurrentDeployment;\n                currentAppDeployment-&gt;CheckForUpdateCompleted +=\n                    gcnew CheckForUpdateCompletedEventHandler(\n                    this, &amp;Form1::currentDeploy_CheckForUpdateCompleted);\n                currentAppDeployment-&gt;CheckForUpdateAsync();\n            }\n        }\n\n        // If update is available, fetch it.\n        void currentDeploy_CheckForUpdateCompleted(Object^ sender,\n            CheckForUpdateCompletedEventArgs^ e)\n        {\n            if (nullptr != e-&gt;Error)\n            {\n                // Log error.\n                return;\n            }\n\n            if (e-&gt;UpdateAvailable)\n            {\n                sizeOfUpdate = (long) e-&gt;UpdateSizeBytes;\n                if (!e-&gt;IsUpdateRequired)\n                {\n                    System::Windows::Forms::DialogResult \n                        updateDialogueResult = MessageBox::Show(\n                        &quot;An update is available.Would you like to update the&quot; +\n                        &quot; application now?&quot;, &quot;Update Available&quot;,\n                        MessageBoxButtons::OKCancel);\n                    if (System::Windows::Forms::DialogResult::OK == \n                        updateDialogueResult)\n                    {\n                        BeginUpdate();\n                    }\n                }\n                else\n                {\n                    BeginUpdate();\n                }\n            }\n        }\n\n        void BeginUpdate()\n        {\n            ApplicationDeployment^ ad = ApplicationDeployment::CurrentDeployment;\n            ad-&gt;UpdateCompleted +=\n                gcnew AsyncCompletedEventHandler(\n                this, &amp;Form1::CurrentDeployment_UpdateCompleted);\n\n            // Indicate progress in the application&#39;s status bar.\n            ad-&gt;UpdateProgressChanged +=\n                gcnew DeploymentProgressChangedEventHandler(this, \n                &amp;Form1::ad_ProgressChanged);\n\n            ad-&gt;UpdateAsync();\n        }\n\n        void CurrentDeployment_UpdateCompleted(Object^ sender,\n            AsyncCompletedEventArgs^ e)\n        {\n            if (!e-&gt;Cancelled)\n            {\n                if (nullptr != e-&gt;Error)\n                {\n                    System::Windows::Forms::DialogResult \n                        restartDialogueResult = MessageBox::Show(\n                        &quot;The application has been updated. Restart?&quot;,\n                        &quot;Restart Application&quot;,\n                        MessageBoxButtons::OKCancel);\n                    if (System::Windows::Forms::DialogResult::OK == \n                        restartDialogueResult)\n                    {\n                        Application::Restart();\n                    }\n                }\n                else\n                {\n                    // Replace with your own error reporting or logging.\n                    MessageBox::Show(\n                        &quot;The application encountered an error in downloading&quot; +\n                        &quot; the latest update. Error: {0}&quot;,\n                        e-&gt;Error-&gt;Message);\n                }\n            }\n            else\n            {\n                // Replace with your own error reporting or logging.\n                MessageBox::Show(&quot;The update of the application&#39;s latest&quot; +\n                    &quot; version was cancelled.&quot;);\n            }\n        }\n\n        void ad_ProgressChanged(Object^ sender,\n            DeploymentProgressChangedEventArgs^ e)\n        {\n            String^ progressText =\n                String::Format(\n                &quot;{0:D}K out of {1:D}K downloaded - {2:D}% complete&quot;,\n                e-&gt;BytesCompleted / 1024, e-&gt;BytesTotal / 1024,\n                e-&gt;ProgressPercentage);\n            statusStrip1-&gt;Text = progressText;\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"ClickOnceAPI#1\">Private sizeOfUpdate As Long = 0\n\nDim WithEvents ADUpdateAsync As ApplicationDeployment\n\nPrivate Sub UpdateApplication()\n    If (ApplicationDeployment.IsNetworkDeployed) Then\n        ADUpdateAsync = ApplicationDeployment.CurrentDeployment\n\n        ADUpdateAsync.CheckForUpdateAsync()\n    End If\nEnd Sub\n\nPrivate Sub ADUpdateAsync_CheckForUpdateProgressChanged(ByVal sender As Object, ByVal e As DeploymentProgressChangedEventArgs) Handles ADUpdateAsync.CheckForUpdateProgressChanged\n    DownloadStatus.Text = [String].Format(&quot;{0:D}K of {1:D}K downloaded.&quot;, e.BytesCompleted / 1024, e.BytesTotal / 1024)\nEnd Sub\n\n\nPrivate Sub ADUpdateAsync_CheckForUpdateCompleted(ByVal sender As Object, ByVal e As CheckForUpdateCompletedEventArgs) Handles ADUpdateAsync.CheckForUpdateCompleted\n    If (e.Error IsNot Nothing) Then\n        MessageBox.Show((&quot;ERROR: Could not retrieve new version of the application. Reason: &quot; + ControlChars.Lf + e.Error.Message + ControlChars.Lf + &quot;Please report this error to the system administrator.&quot;))\n        Return\n    Else\n        If (e.Cancelled = True) Then\n            MessageBox.Show(&quot;The update was cancelled.&quot;)\n        End If\n    End If\n\n    &#39; Ask the user if they would like to update the application now.\n    If (e.UpdateAvailable) Then\n        sizeOfUpdate = e.UpdateSizeBytes\n\n        If (Not e.IsUpdateRequired) Then\n            Dim dr As DialogResult = MessageBox.Show(&quot;An update is available. Would you like to update the application now?&quot;, &quot;Update Available&quot;, MessageBoxButtons.OKCancel)\n            If (System.Windows.Forms.DialogResult.OK = dr) Then\n                BeginUpdate()\n            End If\n        Else\n            MessageBox.Show(&quot;A mandatory update is available for your application. We will install the update now, after which we will save all of your in-progress data and restart your application.&quot;)\n            BeginUpdate()\n        End If\n    End If\nEnd Sub\n\nPrivate Sub BeginUpdate()\n    ADUpdateAsync = ApplicationDeployment.CurrentDeployment\n    ADUpdateAsync.UpdateAsync()\nEnd Sub\n\n\nPrivate Sub ADUpdateAsync_UpdateProgressChanged(ByVal sender As Object, ByVal e As DeploymentProgressChangedEventArgs) Handles ADUpdateAsync.UpdateProgressChanged\n    Dim progressText As String = String.Format(&quot;{0:D}K out of {1:D}K downloaded - {2:D}% complete&quot;, e.BytesCompleted / 1024, e.BytesTotal / 1024, e.ProgressPercentage)\n    DownloadStatus.Text = progressText\nEnd Sub\n\n\nPrivate Sub ADUpdateAsync_UpdateCompleted(ByVal sender As Object, ByVal e As AsyncCompletedEventArgs) Handles ADUpdateAsync.UpdateCompleted\n    If (e.Cancelled) Then\n        MessageBox.Show(&quot;The update of the application&#39;s latest version was cancelled.&quot;)\n        Exit Sub\n    Else\n        If (e.Error IsNot Nothing) Then\n            MessageBox.Show(&quot;ERROR: Could not install the latest version of the application. Reason: &quot; + ControlChars.Lf + e.Error.Message + ControlChars.Lf + &quot;Please report this error to the system administrator.&quot;)\n            Exit Sub\n        End If\n    End If\n\n    Dim dr As DialogResult = MessageBox.Show(&quot;The application has been updated. Restart? (If you do not restart now, the new version will not take effect until after you quit and launch the application again.)&quot;, &quot;Restart Application&quot;, MessageBoxButtons.OKCancel)\n    If (dr = System.Windows.Forms.DialogResult.OK) Then\n        Application.Restart()\n    End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Deployment_Application_ApplicationDeployment_CheckForUpdateAsyncCancel\">\r\n    \r\n            <a id=\"System_Deployment_Application_ApplicationDeployment_CheckForUpdateAsyncCancel_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CheckForUpdateAsyncCancel()</div>        \r\n          </div>\r\n    \r\n            <p>Cancels the asynchronous update check.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void CheckForUpdateAsyncCancel ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to cancel an update check initiated with the <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_CheckForUpdateAsync_\" data-linktype=\"relative-path\">CheckForUpdateAsync</a> method.  </p>\n<p> This method will not cancel any background update that may already be in progress, such as an update started as part of a subscription. For more information about subscriptions, see <a href=\"../Topic/Choosing%20a%20ClickOnce%20Update%20Strategy.md\" data-linktype=\"relative-path\">Choosing a ClickOnce Update Strategy</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Deployment_Application_ApplicationDeployment_DownloadFileGroup_System_String_\">\r\n    \r\n            <a id=\"System_Deployment_Application_ApplicationDeployment_DownloadFileGroup_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DownloadFileGroup(String)</div>        \r\n          </div>\r\n    \r\n            <p>Downloads a set of optional files on demand.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void DownloadFileGroup (string groupName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>groupName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The named group of files to download. All files marked &quot;optional&quot; in a <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> application require a group name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>groupName</code> parameter is null or zero-length.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In a <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> application, the files marked &quot;optional&quot; in the application manifest are not downloaded during initialization or update. You can use the DownloadFileGroup method to download all of the files belonging to a named group on demand, so that they do not consume network resources and disk space until you are sure the user requires them. For example, certain users may need to use a data analysis package included in your application on a daily basis, while other users may never invoke it.  </p>\n<p> To use an assembly you have downloaded with DownloadFileGroup, you attach an event listener to the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_AssemblyResolve\" data-linktype=\"relative-path\">AssemblyResolve</a> event on the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_CurrentDomain_\" data-linktype=\"relative-path\">CurrentDomain</a>. For an example, see =<a href=\"../Topic/Walkthrough:%20Downloading%20Assemblies%20on%20Demand%20with%20the%20ClickOnce%20Deployment%20API%20Using%20the%20Designer.md\" data-linktype=\"relative-path\">Walkthrough: Downloading Assemblies on Demand with the ClickOnce Deployment API Using the Designer</a>.  </p>\n<p> All files are downloaded to the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> application cache and are therefore isolated to the current version of the application. Let&#39;s say that after an application downloads a file group, the user installs a new version of the application, but later reverts to the previous version of the application. In this case, the previous version will still have the copies of the files it originally downloaded. For more information about accessing data files, see <a href=\"../Topic/Accessing%20Local%20and%20Remote%20Data%20in%20ClickOnce%20Applications.md\" data-linktype=\"relative-path\">Accessing Local and Remote Data in ClickOnce Applications</a>.  </p>\n<p> DownloadFileGroup works in partially trusted applications, that is, in any <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> application running with restricted permission. However, if you attempt to load assemblies dynamically, your application will require full trust.  </p>\n<p> On-demand downloading of data files is currently not supported.  </p>\n<p> Your application will not be responsive to user input until the DownloadFileGroup method returns. If you need to download files without interrupting the user&#39;s workflow, use the <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_DownloadFileGroupAsync_\" data-linktype=\"relative-path\">DownloadFileGroupAsync</a> method instead.  </p>\n<p> You cannot download a single file by its file name alone. To download a single file, assign it a group name in your <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> deployment and download the group using this method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to load an assembly on demand by listening for the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_AssemblyResolve\" data-linktype=\"relative-path\">AssemblyResolve</a> event.  </p>\n<pre><code class=\"lang-cs\" name=\"ClickOnceOnDemandCmdLine#2\">namespace ClickOnceOnDemand\n{\n    [System.Security.Permissions.SecurityPermission(System.Security.Permissions.SecurityAction.Demand, Unrestricted=true)]\n    public class Form1 : Form\n    {\n        // Maintain a dictionary mapping DLL names to download file groups. This is trivial for this sample,\n        // but will be important in real-world applications where a feature is spread across multiple DLLs,\n        // and you want to download all DLLs for that feature in one shot. \n        Dictionary&lt;String, String&gt; DllMapping = new Dictionary&lt;String, String&gt;();\n\n        public static void Main()\n        {\n            Form1 NewForm = new Form1();\n            Application.Run(NewForm);\n        }\n\n        public Form1()\n        {\n            // Configure form. \n            this.Size = new Size(500, 200);\n            Button getAssemblyButton = new Button();\n            getAssemblyButton.Size = new Size(130, getAssemblyButton.Size.Height);\n            getAssemblyButton.Text = &quot;Test Assembly&quot;;\n            getAssemblyButton.Location = new Point(50, 50);\n            this.Controls.Add(getAssemblyButton);\n            getAssemblyButton.Click += new EventHandler(getAssemblyButton_Click);\n\n            DllMapping[&quot;ClickOnceLibrary&quot;] = &quot;ClickOnceLibrary&quot;;\n            AppDomain.CurrentDomain.AssemblyResolve += new ResolveEventHandler(CurrentDomain_AssemblyResolve);\n        }\n\n        /*\n         * Use ClickOnce APIs to download the assembly on demand.\n         */\n        private Assembly CurrentDomain_AssemblyResolve(object sender, ResolveEventArgs args)\n        {\n            Assembly newAssembly = null;\n\n            if (ApplicationDeployment.IsNetworkDeployed)\n            {\n                ApplicationDeployment deploy = ApplicationDeployment.CurrentDeployment;\n\n                // Get the DLL name from the Name argument.\n                string[] nameParts = args.Name.Split(&#39;,&#39;);\n                string dllName = nameParts[0];\n                string downloadGroupName = DllMapping[dllName];\n\n                try\n                {\n                    deploy.DownloadFileGroup(downloadGroupName);\n                }\n                catch (DeploymentException de)\n                {\n                    MessageBox.Show(&quot;Downloading file group failed. Group name: &quot; + downloadGroupName + &quot;; DLL name: &quot; + args.Name);\n                    throw (de);\n                }\n\n                // Load the assembly.\n                // Assembly.Load() doesn&#39;t work here, as the previous failure to load the assembly\n                // is cached by the CLR. LoadFrom() is not recommended. Use LoadFile() instead.\n                try\n                {\n                    newAssembly = Assembly.LoadFile(Application.StartupPath + @&quot;\\&quot; + dllName + &quot;.dll,&quot; +  \n\t\t\t&quot;Version=1.0.0.0, Culture=en, PublicKeyToken=03689116d3a4ae33&quot;);\n                }\n                catch (Exception e)\n                {\n                    throw (e);\n                }\n            }\n            else\n            {\n                //Major error - not running under ClickOnce, but missing assembly. Don&#39;t know how to recover.\n                throw (new Exception(&quot;Cannot load assemblies dynamically - application is not deployed using ClickOnce.&quot;));\n            }\n\n\n            return (newAssembly);\n        }\n\n        private void getAssemblyButton_Click(object sender, EventArgs e)\n        {\n            DynamicClass dc = new DynamicClass();\n            MessageBox.Show(&quot;Message: &quot; + dc.Message);\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Deployment_Application_ApplicationDeployment_DownloadFileGroupAsync_System_String_\">\r\n    \r\n            <a id=\"System_Deployment_Application_ApplicationDeployment_DownloadFileGroupAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DownloadFileGroupAsync(String)</div>        \r\n          </div>\r\n    \r\n            <p>Downloads, on demand, a set of optional files in the background.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void DownloadFileGroupAsync (string groupName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>groupName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The named group of files to download. All files marked &quot;optional&quot; in a <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> application require a group name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>groupName</code> parameter is null or zero-length.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>You cannot initiate more than one download of <code>groupName</code> at a time.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In a <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> application, the files marked &quot;optional&quot; in the application manifest are not downloaded during initialization or update. You can use the DownloadFileGroupAsync method to download all of the files belonging to a named group on demand, so that they do not consume network resources and disk space until you are sure the user requires them. This approach works not only for static files, but also for assemblies that an application may or may not require. For example, certain users may need to use a data analysis package included in your application on a daily basis, while other users may never invoke it.  </p>\n<p> To download assemblies on demand, attach an event listener to the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_AssemblyResolve\" data-linktype=\"relative-path\">AssemblyResolve</a> event on the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_CurrentDomain_\" data-linktype=\"relative-path\">CurrentDomain</a>. For an example, see <a href=\"../Topic/Walkthrough:%20Downloading%20Assemblies%20on%20Demand%20with%20the%20ClickOnce%20Deployment%20API.md\" data-linktype=\"relative-path\">Walkthrough: Downloading Assemblies on Demand with the ClickOnce Deployment API</a>.  </p>\n<p> All assemblies are downloaded to the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> application cache.  </p>\n<p> All static files are downloaded to the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> application&#39;s data directory and are therefore isolated to the current version of the application. Let&#39;s say that after an application downloads a file group, the user installs a new version of the application, but later reverts to the previous version of the application. In this case, the previous version will still have the copies of the files it originally downloaded. For more information about accessing static files, see <a href=\"../Topic/Accessing%20Local%20and%20Remote%20Data%20in%20ClickOnce%20Applications.md\" data-linktype=\"relative-path\">Accessing Local and Remote Data in ClickOnce Applications</a>.  </p>\n<p> You can download multiple file groups simultaneously using <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_DownloadFileGroupAsync_\" data-linktype=\"relative-path\">DownloadFileGroupAsync</a>. You can distinguish among them by using the <a class=\"xref\" href=\"system.deployment.application.deploymentprogresschangedeventargs#System_Deployment_Application_DeploymentProgressChangedEventArgs_Group_\" data-linktype=\"relative-path\">Group</a> property of the <a class=\"xref\" href=\"system.deployment.application.deploymentprogresschangedeventargs\" data-linktype=\"relative-path\">DeploymentProgressChangedEventArgs</a> class, which is passed to the <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_DownloadFileGroupProgressChanged\" data-linktype=\"relative-path\">DownloadFileGroupProgressChanged</a> event. If you need to pass more complex state, you can use <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_DownloadFileGroupAsync_\" data-linktype=\"relative-path\">DownloadFileGroupAsync</a> to pass in a <code>state</code> object.  </p>\n<p> <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_DownloadFileGroup_\" data-linktype=\"relative-path\">DownloadFileGroup</a> works in partially trusted applications, that is, in any <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> application running with restricted permission. However, if you are attempting to load assemblies dynamically, your application will require full trust.  </p>\n<p> On-demand downloading of data files is currently not supported.  </p>\n<p> You cannot download a single file by its file name alone. To download a single file, assign it a group name in your <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> deployment and download the group using this method.  </p>\n<p> To cancel an asynchronous download, call the <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_DownloadFileGroupAsyncCancel_\" data-linktype=\"relative-path\">DownloadFileGroupAsyncCancel</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Deployment_Application_ApplicationDeployment_DownloadFileGroupAsync_System_String_System_Object_\">\r\n    \r\n            <a id=\"System_Deployment_Application_ApplicationDeployment_DownloadFileGroupAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DownloadFileGroupAsync(String,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Downloads, on demand, a set of optional files in the background, and passes a piece of application state to the event callbacks.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void DownloadFileGroupAsync (string groupName, object userState);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>groupName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The named group of files to download. All files marked &quot;optional&quot; in a <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> application require a group name.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>userState</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An arbitrary object containing state information for the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>groupName</code> parameter is null or zero-length.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>You cannot initiate more than one download of <code>groupName</code> at a time.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In a <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> application, the files marked &quot;optional&quot; in the application manifest are not downloaded during initialization or update. You can use the <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_DownloadFileGroupAsync_\" data-linktype=\"relative-path\">DownloadFileGroupAsync</a> method to download all of the files belonging to a named group on demand, so that they do not consume network resources and disk space until you are sure the user requires them. This approach works not only for static files, but also for assemblies that an application may or may not require. For example, certain users may need to use a data analysis package included in your application on a daily basis, while other users may never invoke it. To download assemblies on demand, attach an event listener to the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_AssemblyResolve\" data-linktype=\"relative-path\">AssemblyResolve</a> event on the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_CurrentDomain_\" data-linktype=\"relative-path\">CurrentDomain</a>.  </p>\n<p> You can download multiple file groups simultaneously by using the DownloadFileGroupAsync method. You can distinguish among them by using the <a class=\"xref\" href=\"system.deployment.application.deploymentprogresschangedeventargs#System_Deployment_Application_DeploymentProgressChangedEventArgs_Group_\" data-linktype=\"relative-path\">Group</a> property of the <a class=\"xref\" href=\"system.deployment.application.deploymentprogresschangedeventargs\" data-linktype=\"relative-path\">DeploymentProgressChangedEventArgs</a> class, which is passed to the <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_DownloadFileGroupProgressChanged\" data-linktype=\"relative-path\">DownloadFileGroupProgressChanged</a> event. If you need to pass a more complex state, you can use  </p>\n<p> DownloadFileGroupAsync to pass in a <code>state</code> object.  </p>\n<p> All static files are downloaded to the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> application&#39;s data directory and are therefore isolated to the current version of the application. For more information about accessing static files, see <a href=\"../Topic/Accessing%20Local%20and%20Remote%20Data%20in%20ClickOnce%20Applications.md\" data-linktype=\"relative-path\">Accessing Local and Remote Data in ClickOnce Applications</a>. . Let&#39;s say that after an application downloads a file group, the user installs a new version of the application, but later  user reverts to the previous version of the application. In this case, the previous version will still have the copies of the files it originally downloaded.  </p>\n<p> <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_DownloadFileGroup_\" data-linktype=\"relative-path\">DownloadFileGroup</a> works in partially trusted applications, that is, in any <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> application running with restricted permission. However, if you are attempting to load assemblies dynamically, your application will require full trust.  </p>\n<p> On-demand downloading of data files is currently not supported.  </p>\n<p> To cancel an asynchronous download, call the <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_DownloadFileGroupAsyncCancel_\" data-linktype=\"relative-path\">DownloadFileGroupAsyncCancel</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Deployment_Application_ApplicationDeployment_DownloadFileGroupAsyncCancel_System_String_\">\r\n    \r\n            <a id=\"System_Deployment_Application_ApplicationDeployment_DownloadFileGroupAsyncCancel_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DownloadFileGroupAsyncCancel(String)</div>        \r\n          </div>\r\n    \r\n            <p>Cancels an asynchronous file download.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void DownloadFileGroupAsyncCancel (string groupName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>groupName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The named group of files to download. All files marked &quot;optional&quot; in a <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> application require a group name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>groupName</code> cannot be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Deployment_Application_ApplicationDeployment_IsFileGroupDownloaded_System_String_\">\r\n    \r\n            <a id=\"System_Deployment_Application_ApplicationDeployment_IsFileGroupDownloaded_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsFileGroupDownloaded(String)</div>        \r\n          </div>\r\n    \r\n            <p>Checks whether the named file group has already been downloaded to the client computer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsFileGroupDownloaded (string groupName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>groupName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The named group of files to download. All files marked &quot;optional&quot; in a <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> application require a group name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the file group has already been downloaded for the current version of this application; otherwise, <code>false</code>. If a new version of the application has been installed, and the new version has not added, removed, or altered files in the file group, IsFileGroupDownloaded returns <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.deployment.application.invaliddeploymentexception\" data-linktype=\"relative-path\">InvalidDeploymentException</a></div>\r\n                  </div>\r\n                  <p><code>groupName</code> is not a file group defined in the application manifest.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>IsFileGroupDownloaded works in a partially trusted application without any security demands.  </p>\n<p> When you update an application, <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> copies any on-demand data files from the previous version into the new version&#39;s data directory. If you download a new version of these files, you should remove any data you want to keep from the old version and move it into the new version.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example downloads all of the files in the <code>HelpFiles</code> group to disk.  </p>\n<pre><code class=\"lang-cs\" name=\"ClickOnceAPI#8\">private void DownloadFileGroupAsync(string fileGroup)\n{\n    if (ApplicationDeployment.IsNetworkDeployed)\n    {\n        ApplicationDeployment deployment = ApplicationDeployment.CurrentDeployment;\n\n        try\n        {\n            if (!deployment.IsFileGroupDownloaded(fileGroup))\n            {\n                deployment.DownloadFileGroupProgressChanged += new DeploymentProgressChangedEventHandler(deployment_DownloadFileGroupProgressChanged);\n                deployment.DownloadFileGroupCompleted += new DownloadFileGroupCompletedEventHandler(deployment_DownloadFileGroupCompleted);\n\n                deployment.DownloadFileGroupAsync(fileGroup);\n            }\n        }\n        catch (InvalidOperationException ioe)\n        {\n            MessageBox.Show(&quot;This application is not a ClickOnce application. Error: &quot; + ioe.Message);\n            return;\n        }\n    }\n}\n\nvoid deployment_DownloadFileGroupProgressChanged(object sender, DeploymentProgressChangedEventArgs e)\n{\n    downloadStatus.Text = String.Format(&quot;Downloading file group {0}; {1:D}K of {2:D}K completed.&quot;, e.Group, e.BytesCompleted / 1024, e.BytesTotal / 1024);               \n}\n\nvoid deployment_DownloadFileGroupCompleted(object sender, DownloadFileGroupCompletedEventArgs e)\n{\n    if (e.Error != null)\n    {\n        downloadStatus.Text = &quot;Could not download files. Will try again later.&quot;;\n        return;\n    }\n    else if (e.Cancelled)\n    {\n        downloadStatus.Text = &quot;The file download has been cancelled.&quot;;\n        return;\n    }\n\n    downloadStatus.Text = String.Format(&quot;Download of file group {0} complete.&quot;, e.Group);\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"ClickOnceAPI#8\">        void LaunchAppUpdate()\n        {\n            if (ApplicationDeployment::IsNetworkDeployed)\n            {\n                ApplicationDeployment^ ad =\n                    ApplicationDeployment::CurrentDeployment;\n                ad-&gt;UpdateCompleted +=\n                    gcnew AsyncCompletedEventHandler(this,\n                    &amp;Form1::LaunchAppUpdate_UpdateCompleted);\n\n                ad-&gt;UpdateAsync();\n            }\n        }\n\n        void LaunchAppUpdate_UpdateCompleted(Object^ sender,\n            AsyncCompletedEventArgs^ e)\n        {\n            if (!e-&gt;Cancelled)\n            {\n                if (nullptr != e-&gt;Error)\n                {\n                    System::Windows::Forms::DialogResult dr =\n                        MessageBox::Show(\n                        &quot;The application has been updated. Restart?&quot;,\n                        &quot;Restart Application&quot;,\n                        MessageBoxButtons::OKCancel);\n                    if (System::Windows::Forms::DialogResult::OK == dr)\n                    {\n                        Application::Restart();\n                    }\n                }\n                else\n                {\n                    // Replace with your own error reporting or logging.\n                    MessageBox::Show(\n                        &quot;The application encountered an error in &quot; +\n                        &quot;downloading the latest update. Error: {0}&quot;,\n                        e-&gt;Error-&gt;Message);\n                }\n            }\n            else\n            {\n                // Replace with your own error reporting or logging.\n                MessageBox::Show(\n                    &quot;The update of the application&#39;s latest version was &quot; +\n                    &quot;cancelled.&quot;);\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"ClickOnceAPI#8\">Dim WithEvents ADDownloadHelpFiles As ApplicationDeployment\n\nPrivate Sub DownloadHelpFiles(ByVal GroupName As String)\n    If (ApplicationDeployment.IsNetworkDeployed) Then\n        ADDownloadHelpFiles = ApplicationDeployment.CurrentDeployment\n\n        If ADDownloadHelpFiles.IsFirstRun Then\n            Try\n                If Not ADDownloadHelpFiles.IsFileGroupDownloaded(GroupName) Then\n                    ADDownloadHelpFiles.DownloadFileGroupAsync(GroupName)\n                End If\n            Catch ioe As InvalidOperationException\n                MessageBox.Show(&quot;This application is not a ClickOnce application.&quot;)\n                Return\n            End Try\n        End If\n    End If\nEnd Sub\n\nPrivate Sub ADDownloadHelpFiles_DownloadFileGroupProgressChanged(ByVal sender As Object, ByVal e As DeploymentProgressChangedEventArgs) Handles ADDownloadHelpFiles.DownloadFileGroupProgressChanged\n    DownloadStatus.Text = String.Format(&quot;Downloading file group {0}; {1:D}K of {2:D}K completed.&quot;, e.Group, e.BytesCompleted / 1024, e.BytesTotal / 1024)\nEnd Sub\n\nPrivate Sub ADDownloadHelpFiles_DownloadFileGroupCompleted(ByVal sender As Object, ByVal e As DownloadFileGroupCompletedEventArgs) Handles ADDownloadHelpFiles.DownloadFileGroupCompleted\n    DownloadStatus.Text = String.Format(&quot;Download of file group {0} complete.&quot;, e.Group)\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Deployment_Application_ApplicationDeployment_Update\">\r\n    \r\n            <a id=\"System_Deployment_Application_ApplicationDeployment_Update_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Update()</div>        \r\n          </div>\r\n    \r\n            <p>Starts a synchronous download and installation of the latest version of this application.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Update ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if an application has been updated; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.deployment.application.trustnotgrantedexception\" data-linktype=\"relative-path\">TrustNotGrantedException</a></div>\r\n                  </div>\r\n                  <p>The local computer did not grant the application the permission level it requested to execute.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.deployment.application.invaliddeploymentexception\" data-linktype=\"relative-path\">InvalidDeploymentException</a></div>\r\n                  </div>\r\n                  <p>Your <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> deployment is corrupted. For tips on how to diagnose and correct the problem, see <a href=\"../Topic/Troubleshooting%20ClickOnce%20Deployments.md\" data-linktype=\"relative-path\">Troubleshooting ClickOnce Deployments</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.deployment.application.deploymentdownloadexception\" data-linktype=\"relative-path\">DeploymentDownloadException</a></div>\r\n                  </div>\r\n                  <p>The new deployment could not be downloaded from its location on the network.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The application is currently being updated.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An application is considered updated when you publish a new version of the application to the location specified by <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_UpdateLocation_\" data-linktype=\"relative-path\">UpdateLocation</a>, and the version number in the application&#39;s deployment manifest is greater than the version number of the application currently installed on the user&#39;s computer.  </p>\n<p> The Update call will block until the update has been downloaded to the client computer and installed into the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> cache; during this time, the application will not be responsive to the user. If you want to maintain application responsiveness or display a progress report during download, use the <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_UpdateAsync_\" data-linktype=\"relative-path\">UpdateAsync</a> method instead.  </p>\n<p> Update downloads all of the files that are not marked as &quot;optional&quot; in the application manifest. You can download optional files on demand by using the <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_DownloadFileGroup_\" data-linktype=\"relative-path\">DownloadFileGroup</a> or the <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_DownloadFileGroupAsync_\" data-linktype=\"relative-path\">DownloadFileGroupAsync</a> method.  </p>\n<p> <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> may already be updating the application automatically when you call the Update method; if that happens, calls to this method will throw an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a>.  </p>\n<p> If you have updated one or more files in your deployment, but you have not refreshed your application manifest, you will receive an <a class=\"xref\" href=\"system.deployment.application.invaliddeploymentexception\" data-linktype=\"relative-path\">InvalidDeploymentException</a>. Most of the time, redeploying your <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> application solves this problem. You will also receive this exception if a public-key signature on a deployment manifest or application manifest is invalid or missing.  </p>\n<p> An update may request a higher level of trust on the local computer than the previous version of the application. If the application uses Trusted Application Deployment, the common language runtime (CLR) trust manager examines the deployment manifest to determine whether it contains a valid trust license. If the deployment manifest does not contain a valid trust license, <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> stops the installation and throws a <a class=\"xref\" href=\"system.deployment.application.trustnotgrantedexception\" data-linktype=\"relative-path\">TrustNotGrantedException</a>. The Update method will never display a prompt asking the user whether they want to grant the application permission to run.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example checks for an application update; if an update is available, it installs it synchronously.  </p>\n<pre><code class=\"lang-cs\" name=\"ClickOnceAPI#6\">private void InstallUpdateSyncWithInfo()\n{\n    UpdateCheckInfo info = null;\n\n    if (ApplicationDeployment.IsNetworkDeployed)\n    {\n        ApplicationDeployment ad = ApplicationDeployment.CurrentDeployment;\n\n        try\n        {\n            info = ad.CheckForDetailedUpdate();\n\n        }\n        catch (DeploymentDownloadException dde)\n        {\n            MessageBox.Show(&quot;The new version of the application cannot be downloaded at this time. <br><br>Please check your network connection, or try again later. Error: &quot; + dde.Message);\n            return;\n        }\n        catch (InvalidDeploymentException ide)\n        {\n            MessageBox.Show(&quot;Cannot check for a new version of the application. The ClickOnce deployment is corrupt. Please redeploy the application and try again. Error: &quot; + ide.Message);\n            return;\n        }\n        catch (InvalidOperationException ioe)\n        {\n            MessageBox.Show(&quot;This application cannot be updated. It is likely not a ClickOnce application. Error: &quot; + ioe.Message);\n            return;\n        }\n\n        if (info.UpdateAvailable)\n        {\n            Boolean doUpdate = true;\n\n            if (!info.IsUpdateRequired)\n            {\n                DialogResult dr = MessageBox.Show(&quot;An update is available. Would you like to update the application now?&quot;, &quot;Update Available&quot;, MessageBoxButtons.OKCancel);\n                if (!(DialogResult.OK == dr))\n                {\n                    doUpdate = false;\n                }\n            }\n            else\n            {\n                // Display a message that the app MUST reboot. Display the minimum required version.\n                MessageBox.Show(&quot;This application has detected a mandatory update from your current &quot; + \n                    &quot;version to version &quot; + info.MinimumRequiredVersion.ToString() + \n                    &quot;. The application will now install the update and restart.&quot;, \n                    &quot;Update Available&quot;, MessageBoxButtons.OK, \n                    MessageBoxIcon.Information);\n            }\n\n            if (doUpdate)\n            {\n                try\n                {\n                    ad.Update();\n                    MessageBox.Show(&quot;The application has been upgraded, and will now restart.&quot;);\n                    Application.Restart();\n                }\n                catch (DeploymentDownloadException dde)\n                {\n                    MessageBox.Show(&quot;Cannot install the latest version of the application. <br><br>Please check your network connection, or try again later. Error: &quot; + dde);\n                    return;\n                }\n            }\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"ClickOnceAPI#6\">    public:\n        void InstallUpdateSync()\n        {\n            if (ApplicationDeployment::IsNetworkDeployed)\n            {\n                bool isUpdateAvailable = false;\n                ApplicationDeployment^ appDeployment =\n                    ApplicationDeployment::CurrentDeployment;\n\n                try\n                {\n                    isUpdateAvailable = appDeployment-&gt;CheckForUpdate();\n                }\n                catch (InvalidOperationException^ ex)\n                {\n                    MessageBox::Show(&quot;The update check failed. Error: {0}&quot;,\n                        ex-&gt;Message);\n                    return;\n                }\n\n                if (isUpdateAvailable)\n                {\n                    try\n                    {\n                        appDeployment-&gt;Update();\n                        MessageBox::Show(\n                            &quot;The application has been upgraded, and will now &quot; +\n                            &quot;restart.&quot;);\n                        Application::Restart();\n                    }\n                    catch (Exception^ ex)\n                    {\n                        MessageBox::Show(&quot;The update failed. Error: {0}&quot;,\n                            ex-&gt;Message);\n                        return;\n                    }\n\n                }\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"ClickOnceAPI#6\">Private Sub InstallUpdateSyncWithInfo()\n    Dim info As UpdateCheckInfo = Nothing\n\n    If (ApplicationDeployment.IsNetworkDeployed) Then\n        Dim AD As ApplicationDeployment = ApplicationDeployment.CurrentDeployment\n\n        Try\n            info = AD.CheckForDetailedUpdate()\n        Catch dde As DeploymentDownloadException\n            MessageBox.Show(&quot;The new version of the application cannot be downloaded at this time. &quot; + ControlChars.Lf &amp; ControlChars.Lf &amp; &quot;Please check your network connection, or try again later. Error: &quot; + dde.Message)\n            Return\n        Catch ioe As InvalidOperationException\n            MessageBox.Show(&quot;This application cannot be updated. It is likely not a ClickOnce application. Error: &quot; &amp; ioe.Message)\n            Return\n        End Try\n\n        If (info.UpdateAvailable) Then\n            Dim doUpdate As Boolean = True\n\n            If (Not info.IsUpdateRequired) Then\n                Dim dr As DialogResult = MessageBox.Show(&quot;An update is available. Would you like to update the application now?&quot;, &quot;Update Available&quot;, MessageBoxButtons.OKCancel)\n                If (Not System.Windows.Forms.DialogResult.OK = dr) Then\n                    doUpdate = False\n                End If\n            Else\n                &#39; Display a message that the app MUST reboot. Display the minimum required version.\n                MessageBox.Show(&quot;This application has detected a mandatory update from your current &quot; &amp; _\n                    &quot;version to version &quot; &amp; info.MinimumRequiredVersion.ToString() &amp; _\n                    &quot;. The application will now install the update and restart.&quot;, _\n                    &quot;Update Available&quot;, MessageBoxButtons.OK, _\n                    MessageBoxIcon.Information)\n            End If\n\n            If (doUpdate) Then\n                Try\n                    AD.Update()\n                    MessageBox.Show(&quot;The application has been upgraded, and will now restart.&quot;)\n                    Application.Restart()\n                Catch dde As DeploymentDownloadException\n                    MessageBox.Show(&quot;Cannot install the latest version of the application. &quot; &amp; ControlChars.Lf &amp; ControlChars.Lf &amp; &quot;Please check your network connection, or try again later.&quot;)\n                    Return\n                End Try\n            End If\n        End If\n        End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Deployment_Application_ApplicationDeployment_UpdateAsync\">\r\n    \r\n            <a id=\"System_Deployment_Application_ApplicationDeployment_UpdateAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UpdateAsync()</div>        \r\n          </div>\r\n    \r\n            <p>Starts an asynchronous download and installation of the latest version of this application.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void UpdateAsync ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.deployment.application.trustnotgrantedexception\" data-linktype=\"relative-path\">TrustNotGrantedException</a></div>\r\n                  </div>\r\n                  <p>The local computer did not grant this application the permission level it requested to execute.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.deployment.application.invaliddeploymentexception\" data-linktype=\"relative-path\">InvalidDeploymentException</a></div>\r\n                  </div>\r\n                  <p>Your <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> deployment is corrupted. For tips on how to diagnose and correct the problem, see <a href=\"../Topic/Troubleshooting%20ClickOnce%20Deployments.md\" data-linktype=\"relative-path\">Troubleshooting ClickOnce Deployments</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.deployment.application.deploymentdownloadexception\" data-linktype=\"relative-path\">DeploymentDownloadException</a></div>\r\n                  </div>\r\n                  <p>The new deployment could not be downloaded from its location on the network.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An application is considered updated when you publish a new version of the application to the location specified by <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_UpdateLocation_\" data-linktype=\"relative-path\">UpdateLocation</a>, and the version number in the application&#39;s deployment manifest is greater than the version number of the application currently installed on the user&#39;s computer.  </p>\n<p> While downloading the update, <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> will raise the <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_UpdateProgressChanged\" data-linktype=\"relative-path\">UpdateProgressChanged</a> event handler on the main application thread to inform you of the status of the download. When the asynchronous update finishes or encounters an exception, <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> will raise the <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_UpdateCompleted\" data-linktype=\"relative-path\">UpdateCompleted</a> event on the main application thread. Examine the <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs\" data-linktype=\"relative-path\">AsyncCompletedEventArgs</a> supplied to this event to determine whether the update succeeded.  </p>\n<p> If UpdateAsync throws an exception, <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> calls <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_UpdateCompleted\" data-linktype=\"relative-path\">UpdateCompleted</a> and sets the <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs#System_ComponentModel_AsyncCompletedEventArgs_Error_\" data-linktype=\"relative-path\">Error</a> property of <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs\" data-linktype=\"relative-path\">AsyncCompletedEventArgs</a> to the exception that was thrown.  </p>\n<p> UpdateAsync will download all files in a deployment not marked as &quot;optional&quot; in the application manifest. You can download optional files on demand by using the <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_DownloadFileGroup_\" data-linktype=\"relative-path\">DownloadFileGroup</a> or the <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_DownloadFileGroupAsync_\" data-linktype=\"relative-path\">DownloadFileGroupAsync</a> method.  </p>\n<p> <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> may already be updating the application automatically when you call the UpdateAsync method; if that happens, calls to this method will throw an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a>.  </p>\n<p> If you have updated one or more files in your deployment, but you have not refreshed your application manifest, you will receive an <a class=\"xref\" href=\"system.deployment.application.invaliddeploymentexception\" data-linktype=\"relative-path\">InvalidDeploymentException</a>. Most of the time, rebuilding your application manifest solves this problem. You will also receive this exception if a public-key signature on a deployment manifest or application manifest is invalid or missing.  </p>\n<p> An update may request a higher level of trust on the local computer than the previous version of the application. If the application uses Trusted Application Deployment, the common language runtime (CLR) trust manager examines the deployment manifest to determine whether it contains a valid trust license. If the deployment manifest does not contain a valid trust license, <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> stops the installation and throws a <a class=\"xref\" href=\"system.deployment.application.trustnotgrantedexception\" data-linktype=\"relative-path\">TrustNotGrantedException</a>. UpdateAsync will never display a prompt asking the user if they want to grant the application permission to run.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example determines whether a new update is available at application load time; if a required update is available, it installs the update asynchronously. The example requires that you deploy a Windows Forms application that includes a <a class=\"xref\" href=\"system.windows.forms.statusstrip\" data-linktype=\"relative-path\">StatusStrip</a> control, and that this control contain a <a class=\"xref\" href=\"system.windows.forms.toolstripstatuslabel\" data-linktype=\"relative-path\">ToolStripStatusLabel</a> control named <code>downloadStatus</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"ClickOnceAPI#1\">long sizeOfUpdate = 0;\n\nprivate void UpdateApplication()\n{\n    if (ApplicationDeployment.IsNetworkDeployed)\n    {\n        ApplicationDeployment ad = ApplicationDeployment.CurrentDeployment;\n        ad.CheckForUpdateCompleted += new CheckForUpdateCompletedEventHandler(ad_CheckForUpdateCompleted);\n        ad.CheckForUpdateProgressChanged += new DeploymentProgressChangedEventHandler(ad_CheckForUpdateProgressChanged);\n\n        ad.CheckForUpdateAsync();\n    }\n}\n\nvoid  ad_CheckForUpdateProgressChanged(object sender, DeploymentProgressChangedEventArgs e)\n{\n    downloadStatus.Text = String.Format(&quot;Downloading: {0}. {1:D}K of {2:D}K downloaded.&quot;, GetProgressString(e.State), e.BytesCompleted/1024, e.BytesTotal/1024);   \n}\n\nstring GetProgressString(DeploymentProgressState state)\n{\n    if (state == DeploymentProgressState.DownloadingApplicationFiles)\n    {\n        return &quot;application files&quot;;\n    } \n    else if (state == DeploymentProgressState.DownloadingApplicationInformation) \n    {\n        return &quot;application manifest&quot;;\n    } \n    else \n    {\n        return &quot;deployment manifest&quot;;\n    }\n}\n\nvoid ad_CheckForUpdateCompleted(object sender, CheckForUpdateCompletedEventArgs e)\n{\n    if (e.Error != null)\n    {\n        MessageBox.Show(&quot;ERROR: Could not retrieve new version of the application. Reason: <br>&quot; + e.Error.Message + &quot;<br>Please report this error to the system administrator.&quot;);\n        return;\n    }\n    else if (e.Cancelled == true)\n    {\n        MessageBox.Show(&quot;The update was cancelled.&quot;);\n    }\n\n    // Ask the user if they would like to update the application now.\n    if (e.UpdateAvailable)\n    {\n        sizeOfUpdate = e.UpdateSizeBytes;\n\n        if (!e.IsUpdateRequired)\n        {\n            DialogResult dr = MessageBox.Show(&quot;An update is available. Would you like to update the application now?<br><br>Estimated Download Time: &quot;, &quot;Update Available&quot;, MessageBoxButtons.OKCancel);\n            if (DialogResult.OK == dr)\n            {\n                BeginUpdate();\n            }\n        }\n        else\n        {\n            MessageBox.Show(&quot;A mandatory update is available for your application. We will install the update now, after which we will save all of your in-progress data and restart your application.&quot;);\n            BeginUpdate();\n        }\n    }\n}\n\nprivate void BeginUpdate()\n{\n    ApplicationDeployment ad = ApplicationDeployment.CurrentDeployment;\n    ad.UpdateCompleted += new AsyncCompletedEventHandler(ad_UpdateCompleted);\n\n    // Indicate progress in the application&#39;s status bar.\n    ad.UpdateProgressChanged += new DeploymentProgressChangedEventHandler(ad_UpdateProgressChanged);\n    ad.UpdateAsync();\n}\n\nvoid ad_UpdateProgressChanged(object sender, DeploymentProgressChangedEventArgs e)\n{\n    String progressText = String.Format(&quot;{0:D}K out of {1:D}K downloaded - {2:D}% complete&quot;, e.BytesCompleted / 1024, e.BytesTotal / 1024, e.ProgressPercentage);\n    downloadStatus.Text = progressText;\n}\n\nvoid ad_UpdateCompleted(object sender, AsyncCompletedEventArgs e)\n{\n    if (e.Cancelled)\n    {\n        MessageBox.Show(&quot;The update of the application&#39;s latest version was cancelled.&quot;);\n        return;\n    }\n    else if (e.Error != null)\n    {\n        MessageBox.Show(&quot;ERROR: Could not install the latest version of the application. Reason: <br>&quot; + e.Error.Message + &quot;<br>Please report this error to the system administrator.&quot;);\n        return;\n    }\n\n    DialogResult dr = MessageBox.Show(&quot;The application has been updated. Restart? (If you do not restart now, the new version will not take effect until after you quit and launch the application again.)&quot;, &quot;Restart Application&quot;, MessageBoxButtons.OKCancel);\n    if (DialogResult.OK == dr)\n    {\n        Application.Restart();\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"ClickOnceAPI#1\">    private:\n        long sizeOfUpdate;\n\n\n    private:\n        void Form1_Load(Object^ sender, System::EventArgs^ e)\n        {\n            DoUpdate();\n        }\n\n    public:\n        void DoUpdate()\n        {\n            if (ApplicationDeployment::IsNetworkDeployed)\n            {\n                ApplicationDeployment^ currentAppDeployment =\n                    ApplicationDeployment::CurrentDeployment;\n                currentAppDeployment-&gt;CheckForUpdateCompleted +=\n                    gcnew CheckForUpdateCompletedEventHandler(\n                    this, &amp;Form1::currentDeploy_CheckForUpdateCompleted);\n                currentAppDeployment-&gt;CheckForUpdateAsync();\n            }\n        }\n\n        // If update is available, fetch it.\n        void currentDeploy_CheckForUpdateCompleted(Object^ sender,\n            CheckForUpdateCompletedEventArgs^ e)\n        {\n            if (nullptr != e-&gt;Error)\n            {\n                // Log error.\n                return;\n            }\n\n            if (e-&gt;UpdateAvailable)\n            {\n                sizeOfUpdate = (long) e-&gt;UpdateSizeBytes;\n                if (!e-&gt;IsUpdateRequired)\n                {\n                    System::Windows::Forms::DialogResult \n                        updateDialogueResult = MessageBox::Show(\n                        &quot;An update is available.Would you like to update the&quot; +\n                        &quot; application now?&quot;, &quot;Update Available&quot;,\n                        MessageBoxButtons::OKCancel);\n                    if (System::Windows::Forms::DialogResult::OK == \n                        updateDialogueResult)\n                    {\n                        BeginUpdate();\n                    }\n                }\n                else\n                {\n                    BeginUpdate();\n                }\n            }\n        }\n\n        void BeginUpdate()\n        {\n            ApplicationDeployment^ ad = ApplicationDeployment::CurrentDeployment;\n            ad-&gt;UpdateCompleted +=\n                gcnew AsyncCompletedEventHandler(\n                this, &amp;Form1::CurrentDeployment_UpdateCompleted);\n\n            // Indicate progress in the application&#39;s status bar.\n            ad-&gt;UpdateProgressChanged +=\n                gcnew DeploymentProgressChangedEventHandler(this, \n                &amp;Form1::ad_ProgressChanged);\n\n            ad-&gt;UpdateAsync();\n        }\n\n        void CurrentDeployment_UpdateCompleted(Object^ sender,\n            AsyncCompletedEventArgs^ e)\n        {\n            if (!e-&gt;Cancelled)\n            {\n                if (nullptr != e-&gt;Error)\n                {\n                    System::Windows::Forms::DialogResult \n                        restartDialogueResult = MessageBox::Show(\n                        &quot;The application has been updated. Restart?&quot;,\n                        &quot;Restart Application&quot;,\n                        MessageBoxButtons::OKCancel);\n                    if (System::Windows::Forms::DialogResult::OK == \n                        restartDialogueResult)\n                    {\n                        Application::Restart();\n                    }\n                }\n                else\n                {\n                    // Replace with your own error reporting or logging.\n                    MessageBox::Show(\n                        &quot;The application encountered an error in downloading&quot; +\n                        &quot; the latest update. Error: {0}&quot;,\n                        e-&gt;Error-&gt;Message);\n                }\n            }\n            else\n            {\n                // Replace with your own error reporting or logging.\n                MessageBox::Show(&quot;The update of the application&#39;s latest&quot; +\n                    &quot; version was cancelled.&quot;);\n            }\n        }\n\n        void ad_ProgressChanged(Object^ sender,\n            DeploymentProgressChangedEventArgs^ e)\n        {\n            String^ progressText =\n                String::Format(\n                &quot;{0:D}K out of {1:D}K downloaded - {2:D}% complete&quot;,\n                e-&gt;BytesCompleted / 1024, e-&gt;BytesTotal / 1024,\n                e-&gt;ProgressPercentage);\n            statusStrip1-&gt;Text = progressText;\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"ClickOnceAPI#1\">Private sizeOfUpdate As Long = 0\n\nDim WithEvents ADUpdateAsync As ApplicationDeployment\n\nPrivate Sub UpdateApplication()\n    If (ApplicationDeployment.IsNetworkDeployed) Then\n        ADUpdateAsync = ApplicationDeployment.CurrentDeployment\n\n        ADUpdateAsync.CheckForUpdateAsync()\n    End If\nEnd Sub\n\nPrivate Sub ADUpdateAsync_CheckForUpdateProgressChanged(ByVal sender As Object, ByVal e As DeploymentProgressChangedEventArgs) Handles ADUpdateAsync.CheckForUpdateProgressChanged\n    DownloadStatus.Text = [String].Format(&quot;{0:D}K of {1:D}K downloaded.&quot;, e.BytesCompleted / 1024, e.BytesTotal / 1024)\nEnd Sub\n\n\nPrivate Sub ADUpdateAsync_CheckForUpdateCompleted(ByVal sender As Object, ByVal e As CheckForUpdateCompletedEventArgs) Handles ADUpdateAsync.CheckForUpdateCompleted\n    If (e.Error IsNot Nothing) Then\n        MessageBox.Show((&quot;ERROR: Could not retrieve new version of the application. Reason: &quot; + ControlChars.Lf + e.Error.Message + ControlChars.Lf + &quot;Please report this error to the system administrator.&quot;))\n        Return\n    Else\n        If (e.Cancelled = True) Then\n            MessageBox.Show(&quot;The update was cancelled.&quot;)\n        End If\n    End If\n\n    &#39; Ask the user if they would like to update the application now.\n    If (e.UpdateAvailable) Then\n        sizeOfUpdate = e.UpdateSizeBytes\n\n        If (Not e.IsUpdateRequired) Then\n            Dim dr As DialogResult = MessageBox.Show(&quot;An update is available. Would you like to update the application now?&quot;, &quot;Update Available&quot;, MessageBoxButtons.OKCancel)\n            If (System.Windows.Forms.DialogResult.OK = dr) Then\n                BeginUpdate()\n            End If\n        Else\n            MessageBox.Show(&quot;A mandatory update is available for your application. We will install the update now, after which we will save all of your in-progress data and restart your application.&quot;)\n            BeginUpdate()\n        End If\n    End If\nEnd Sub\n\nPrivate Sub BeginUpdate()\n    ADUpdateAsync = ApplicationDeployment.CurrentDeployment\n    ADUpdateAsync.UpdateAsync()\nEnd Sub\n\n\nPrivate Sub ADUpdateAsync_UpdateProgressChanged(ByVal sender As Object, ByVal e As DeploymentProgressChangedEventArgs) Handles ADUpdateAsync.UpdateProgressChanged\n    Dim progressText As String = String.Format(&quot;{0:D}K out of {1:D}K downloaded - {2:D}% complete&quot;, e.BytesCompleted / 1024, e.BytesTotal / 1024, e.ProgressPercentage)\n    DownloadStatus.Text = progressText\nEnd Sub\n\n\nPrivate Sub ADUpdateAsync_UpdateCompleted(ByVal sender As Object, ByVal e As AsyncCompletedEventArgs) Handles ADUpdateAsync.UpdateCompleted\n    If (e.Cancelled) Then\n        MessageBox.Show(&quot;The update of the application&#39;s latest version was cancelled.&quot;)\n        Exit Sub\n    Else\n        If (e.Error IsNot Nothing) Then\n            MessageBox.Show(&quot;ERROR: Could not install the latest version of the application. Reason: &quot; + ControlChars.Lf + e.Error.Message + ControlChars.Lf + &quot;Please report this error to the system administrator.&quot;)\n            Exit Sub\n        End If\n    End If\n\n    Dim dr As DialogResult = MessageBox.Show(&quot;The application has been updated. Restart? (If you do not restart now, the new version will not take effect until after you quit and launch the application again.)&quot;, &quot;Restart Application&quot;, MessageBoxButtons.OKCancel)\n    If (dr = System.Windows.Forms.DialogResult.OK) Then\n        Application.Restart()\n    End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Deployment_Application_ApplicationDeployment_UpdateAsyncCancel\">\r\n    \r\n            <a id=\"System_Deployment_Application_ApplicationDeployment_UpdateAsyncCancel_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UpdateAsyncCancel()</div>        \r\n          </div>\r\n    \r\n            <p>Cancels an asynchronous update initiated by <span class=\"xref\">stem.Deployment.Application.ApplicationDeployment.UpdateAsync*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void UpdateAsyncCancel ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>UpdateAsyncCancel only cancels an update initiated by a call to <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_UpdateAsync_\" data-linktype=\"relative-path\">UpdateAsync</a>; it does not cancel an update started as part of a subscription.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"events\">\r\n        <h2>Events\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Deployment_Application_ApplicationDeployment_CheckForUpdateCompleted\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CheckForUpdateCompleted</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when <span class=\"xref\">stem.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync*</span> has completed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Deployment.Application.CheckForUpdateCompletedEventHandler CheckForUpdateCompleted;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.deployment.application.checkforupdatecompletedeventargs\" data-linktype=\"relative-path\">CheckForUpdateCompletedEventArgs</a> class will tell you, among other things, the version of the update, how large the update is, and whether the available update is required or optional.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses CheckForUpdateCompleted to decide whether to ask the user to install the available application update. If the update is a mandatory upgrade, the CheckForUpdateCompleted event handler does not prompt the user. The example requires that you deploy a Windows Forms application that includes a <a class=\"xref\" href=\"system.windows.forms.statusstrip\" data-linktype=\"relative-path\">StatusStrip</a> control, and that this control contain a <a class=\"xref\" href=\"system.windows.forms.toolstripstatuslabel\" data-linktype=\"relative-path\">ToolStripStatusLabel</a> control named <code>downloadStatus</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"ClickOnceAPI#1\">long sizeOfUpdate = 0;\n\nprivate void UpdateApplication()\n{\n    if (ApplicationDeployment.IsNetworkDeployed)\n    {\n        ApplicationDeployment ad = ApplicationDeployment.CurrentDeployment;\n        ad.CheckForUpdateCompleted += new CheckForUpdateCompletedEventHandler(ad_CheckForUpdateCompleted);\n        ad.CheckForUpdateProgressChanged += new DeploymentProgressChangedEventHandler(ad_CheckForUpdateProgressChanged);\n\n        ad.CheckForUpdateAsync();\n    }\n}\n\nvoid  ad_CheckForUpdateProgressChanged(object sender, DeploymentProgressChangedEventArgs e)\n{\n    downloadStatus.Text = String.Format(&quot;Downloading: {0}. {1:D}K of {2:D}K downloaded.&quot;, GetProgressString(e.State), e.BytesCompleted/1024, e.BytesTotal/1024);   \n}\n\nstring GetProgressString(DeploymentProgressState state)\n{\n    if (state == DeploymentProgressState.DownloadingApplicationFiles)\n    {\n        return &quot;application files&quot;;\n    } \n    else if (state == DeploymentProgressState.DownloadingApplicationInformation) \n    {\n        return &quot;application manifest&quot;;\n    } \n    else \n    {\n        return &quot;deployment manifest&quot;;\n    }\n}\n\nvoid ad_CheckForUpdateCompleted(object sender, CheckForUpdateCompletedEventArgs e)\n{\n    if (e.Error != null)\n    {\n        MessageBox.Show(&quot;ERROR: Could not retrieve new version of the application. Reason: <br>&quot; + e.Error.Message + &quot;<br>Please report this error to the system administrator.&quot;);\n        return;\n    }\n    else if (e.Cancelled == true)\n    {\n        MessageBox.Show(&quot;The update was cancelled.&quot;);\n    }\n\n    // Ask the user if they would like to update the application now.\n    if (e.UpdateAvailable)\n    {\n        sizeOfUpdate = e.UpdateSizeBytes;\n\n        if (!e.IsUpdateRequired)\n        {\n            DialogResult dr = MessageBox.Show(&quot;An update is available. Would you like to update the application now?<br><br>Estimated Download Time: &quot;, &quot;Update Available&quot;, MessageBoxButtons.OKCancel);\n            if (DialogResult.OK == dr)\n            {\n                BeginUpdate();\n            }\n        }\n        else\n        {\n            MessageBox.Show(&quot;A mandatory update is available for your application. We will install the update now, after which we will save all of your in-progress data and restart your application.&quot;);\n            BeginUpdate();\n        }\n    }\n}\n\nprivate void BeginUpdate()\n{\n    ApplicationDeployment ad = ApplicationDeployment.CurrentDeployment;\n    ad.UpdateCompleted += new AsyncCompletedEventHandler(ad_UpdateCompleted);\n\n    // Indicate progress in the application&#39;s status bar.\n    ad.UpdateProgressChanged += new DeploymentProgressChangedEventHandler(ad_UpdateProgressChanged);\n    ad.UpdateAsync();\n}\n\nvoid ad_UpdateProgressChanged(object sender, DeploymentProgressChangedEventArgs e)\n{\n    String progressText = String.Format(&quot;{0:D}K out of {1:D}K downloaded - {2:D}% complete&quot;, e.BytesCompleted / 1024, e.BytesTotal / 1024, e.ProgressPercentage);\n    downloadStatus.Text = progressText;\n}\n\nvoid ad_UpdateCompleted(object sender, AsyncCompletedEventArgs e)\n{\n    if (e.Cancelled)\n    {\n        MessageBox.Show(&quot;The update of the application&#39;s latest version was cancelled.&quot;);\n        return;\n    }\n    else if (e.Error != null)\n    {\n        MessageBox.Show(&quot;ERROR: Could not install the latest version of the application. Reason: <br>&quot; + e.Error.Message + &quot;<br>Please report this error to the system administrator.&quot;);\n        return;\n    }\n\n    DialogResult dr = MessageBox.Show(&quot;The application has been updated. Restart? (If you do not restart now, the new version will not take effect until after you quit and launch the application again.)&quot;, &quot;Restart Application&quot;, MessageBoxButtons.OKCancel);\n    if (DialogResult.OK == dr)\n    {\n        Application.Restart();\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"ClickOnceAPI#1\">    private:\n        long sizeOfUpdate;\n\n\n    private:\n        void Form1_Load(Object^ sender, System::EventArgs^ e)\n        {\n            DoUpdate();\n        }\n\n    public:\n        void DoUpdate()\n        {\n            if (ApplicationDeployment::IsNetworkDeployed)\n            {\n                ApplicationDeployment^ currentAppDeployment =\n                    ApplicationDeployment::CurrentDeployment;\n                currentAppDeployment-&gt;CheckForUpdateCompleted +=\n                    gcnew CheckForUpdateCompletedEventHandler(\n                    this, &amp;Form1::currentDeploy_CheckForUpdateCompleted);\n                currentAppDeployment-&gt;CheckForUpdateAsync();\n            }\n        }\n\n        // If update is available, fetch it.\n        void currentDeploy_CheckForUpdateCompleted(Object^ sender,\n            CheckForUpdateCompletedEventArgs^ e)\n        {\n            if (nullptr != e-&gt;Error)\n            {\n                // Log error.\n                return;\n            }\n\n            if (e-&gt;UpdateAvailable)\n            {\n                sizeOfUpdate = (long) e-&gt;UpdateSizeBytes;\n                if (!e-&gt;IsUpdateRequired)\n                {\n                    System::Windows::Forms::DialogResult \n                        updateDialogueResult = MessageBox::Show(\n                        &quot;An update is available.Would you like to update the&quot; +\n                        &quot; application now?&quot;, &quot;Update Available&quot;,\n                        MessageBoxButtons::OKCancel);\n                    if (System::Windows::Forms::DialogResult::OK == \n                        updateDialogueResult)\n                    {\n                        BeginUpdate();\n                    }\n                }\n                else\n                {\n                    BeginUpdate();\n                }\n            }\n        }\n\n        void BeginUpdate()\n        {\n            ApplicationDeployment^ ad = ApplicationDeployment::CurrentDeployment;\n            ad-&gt;UpdateCompleted +=\n                gcnew AsyncCompletedEventHandler(\n                this, &amp;Form1::CurrentDeployment_UpdateCompleted);\n\n            // Indicate progress in the application&#39;s status bar.\n            ad-&gt;UpdateProgressChanged +=\n                gcnew DeploymentProgressChangedEventHandler(this, \n                &amp;Form1::ad_ProgressChanged);\n\n            ad-&gt;UpdateAsync();\n        }\n\n        void CurrentDeployment_UpdateCompleted(Object^ sender,\n            AsyncCompletedEventArgs^ e)\n        {\n            if (!e-&gt;Cancelled)\n            {\n                if (nullptr != e-&gt;Error)\n                {\n                    System::Windows::Forms::DialogResult \n                        restartDialogueResult = MessageBox::Show(\n                        &quot;The application has been updated. Restart?&quot;,\n                        &quot;Restart Application&quot;,\n                        MessageBoxButtons::OKCancel);\n                    if (System::Windows::Forms::DialogResult::OK == \n                        restartDialogueResult)\n                    {\n                        Application::Restart();\n                    }\n                }\n                else\n                {\n                    // Replace with your own error reporting or logging.\n                    MessageBox::Show(\n                        &quot;The application encountered an error in downloading&quot; +\n                        &quot; the latest update. Error: {0}&quot;,\n                        e-&gt;Error-&gt;Message);\n                }\n            }\n            else\n            {\n                // Replace with your own error reporting or logging.\n                MessageBox::Show(&quot;The update of the application&#39;s latest&quot; +\n                    &quot; version was cancelled.&quot;);\n            }\n        }\n\n        void ad_ProgressChanged(Object^ sender,\n            DeploymentProgressChangedEventArgs^ e)\n        {\n            String^ progressText =\n                String::Format(\n                &quot;{0:D}K out of {1:D}K downloaded - {2:D}% complete&quot;,\n                e-&gt;BytesCompleted / 1024, e-&gt;BytesTotal / 1024,\n                e-&gt;ProgressPercentage);\n            statusStrip1-&gt;Text = progressText;\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"ClickOnceAPI#1\">Private sizeOfUpdate As Long = 0\n\nDim WithEvents ADUpdateAsync As ApplicationDeployment\n\nPrivate Sub UpdateApplication()\n    If (ApplicationDeployment.IsNetworkDeployed) Then\n        ADUpdateAsync = ApplicationDeployment.CurrentDeployment\n\n        ADUpdateAsync.CheckForUpdateAsync()\n    End If\nEnd Sub\n\nPrivate Sub ADUpdateAsync_CheckForUpdateProgressChanged(ByVal sender As Object, ByVal e As DeploymentProgressChangedEventArgs) Handles ADUpdateAsync.CheckForUpdateProgressChanged\n    DownloadStatus.Text = [String].Format(&quot;{0:D}K of {1:D}K downloaded.&quot;, e.BytesCompleted / 1024, e.BytesTotal / 1024)\nEnd Sub\n\n\nPrivate Sub ADUpdateAsync_CheckForUpdateCompleted(ByVal sender As Object, ByVal e As CheckForUpdateCompletedEventArgs) Handles ADUpdateAsync.CheckForUpdateCompleted\n    If (e.Error IsNot Nothing) Then\n        MessageBox.Show((&quot;ERROR: Could not retrieve new version of the application. Reason: &quot; + ControlChars.Lf + e.Error.Message + ControlChars.Lf + &quot;Please report this error to the system administrator.&quot;))\n        Return\n    Else\n        If (e.Cancelled = True) Then\n            MessageBox.Show(&quot;The update was cancelled.&quot;)\n        End If\n    End If\n\n    &#39; Ask the user if they would like to update the application now.\n    If (e.UpdateAvailable) Then\n        sizeOfUpdate = e.UpdateSizeBytes\n\n        If (Not e.IsUpdateRequired) Then\n            Dim dr As DialogResult = MessageBox.Show(&quot;An update is available. Would you like to update the application now?&quot;, &quot;Update Available&quot;, MessageBoxButtons.OKCancel)\n            If (System.Windows.Forms.DialogResult.OK = dr) Then\n                BeginUpdate()\n            End If\n        Else\n            MessageBox.Show(&quot;A mandatory update is available for your application. We will install the update now, after which we will save all of your in-progress data and restart your application.&quot;)\n            BeginUpdate()\n        End If\n    End If\nEnd Sub\n\nPrivate Sub BeginUpdate()\n    ADUpdateAsync = ApplicationDeployment.CurrentDeployment\n    ADUpdateAsync.UpdateAsync()\nEnd Sub\n\n\nPrivate Sub ADUpdateAsync_UpdateProgressChanged(ByVal sender As Object, ByVal e As DeploymentProgressChangedEventArgs) Handles ADUpdateAsync.UpdateProgressChanged\n    Dim progressText As String = String.Format(&quot;{0:D}K out of {1:D}K downloaded - {2:D}% complete&quot;, e.BytesCompleted / 1024, e.BytesTotal / 1024, e.ProgressPercentage)\n    DownloadStatus.Text = progressText\nEnd Sub\n\n\nPrivate Sub ADUpdateAsync_UpdateCompleted(ByVal sender As Object, ByVal e As AsyncCompletedEventArgs) Handles ADUpdateAsync.UpdateCompleted\n    If (e.Cancelled) Then\n        MessageBox.Show(&quot;The update of the application&#39;s latest version was cancelled.&quot;)\n        Exit Sub\n    Else\n        If (e.Error IsNot Nothing) Then\n            MessageBox.Show(&quot;ERROR: Could not install the latest version of the application. Reason: &quot; + ControlChars.Lf + e.Error.Message + ControlChars.Lf + &quot;Please report this error to the system administrator.&quot;)\n            Exit Sub\n        End If\n    End If\n\n    Dim dr As DialogResult = MessageBox.Show(&quot;The application has been updated. Restart? (If you do not restart now, the new version will not take effect until after you quit and launch the application again.)&quot;, &quot;Restart Application&quot;, MessageBoxButtons.OKCancel)\n    If (dr = System.Windows.Forms.DialogResult.OK) Then\n        Application.Restart()\n    End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Deployment_Application_ApplicationDeployment_CheckForUpdateProgressChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CheckForUpdateProgressChanged</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when a progress update is available on a <span class=\"xref\">stem.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync*</span> call.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Deployment.Application.DeploymentProgressChangedEventHandler CheckForUpdateProgressChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>CheckForUpdateProgressChanged reports on the download status of the application&#39;s deployment manifest. This can be important information for users who are downloading the deployment over slow network connections.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the CheckForUpdateProgressChanged event to inform the user how much of the deployment manifest is left to download. The example requires that you deploy a Windows Forms application that includes a <a class=\"xref\" href=\"system.windows.forms.statusstrip\" data-linktype=\"relative-path\">StatusStrip</a> control, and that this control contain a <a class=\"xref\" href=\"system.windows.forms.toolstripstatuslabel\" data-linktype=\"relative-path\">ToolStripStatusLabel</a> control named <code>downloadStatus</code>..  </p>\n<pre><code class=\"lang-cs\" name=\"ClickOnceAPI#1\">long sizeOfUpdate = 0;\n\nprivate void UpdateApplication()\n{\n    if (ApplicationDeployment.IsNetworkDeployed)\n    {\n        ApplicationDeployment ad = ApplicationDeployment.CurrentDeployment;\n        ad.CheckForUpdateCompleted += new CheckForUpdateCompletedEventHandler(ad_CheckForUpdateCompleted);\n        ad.CheckForUpdateProgressChanged += new DeploymentProgressChangedEventHandler(ad_CheckForUpdateProgressChanged);\n\n        ad.CheckForUpdateAsync();\n    }\n}\n\nvoid  ad_CheckForUpdateProgressChanged(object sender, DeploymentProgressChangedEventArgs e)\n{\n    downloadStatus.Text = String.Format(&quot;Downloading: {0}. {1:D}K of {2:D}K downloaded.&quot;, GetProgressString(e.State), e.BytesCompleted/1024, e.BytesTotal/1024);   \n}\n\nstring GetProgressString(DeploymentProgressState state)\n{\n    if (state == DeploymentProgressState.DownloadingApplicationFiles)\n    {\n        return &quot;application files&quot;;\n    } \n    else if (state == DeploymentProgressState.DownloadingApplicationInformation) \n    {\n        return &quot;application manifest&quot;;\n    } \n    else \n    {\n        return &quot;deployment manifest&quot;;\n    }\n}\n\nvoid ad_CheckForUpdateCompleted(object sender, CheckForUpdateCompletedEventArgs e)\n{\n    if (e.Error != null)\n    {\n        MessageBox.Show(&quot;ERROR: Could not retrieve new version of the application. Reason: <br>&quot; + e.Error.Message + &quot;<br>Please report this error to the system administrator.&quot;);\n        return;\n    }\n    else if (e.Cancelled == true)\n    {\n        MessageBox.Show(&quot;The update was cancelled.&quot;);\n    }\n\n    // Ask the user if they would like to update the application now.\n    if (e.UpdateAvailable)\n    {\n        sizeOfUpdate = e.UpdateSizeBytes;\n\n        if (!e.IsUpdateRequired)\n        {\n            DialogResult dr = MessageBox.Show(&quot;An update is available. Would you like to update the application now?<br><br>Estimated Download Time: &quot;, &quot;Update Available&quot;, MessageBoxButtons.OKCancel);\n            if (DialogResult.OK == dr)\n            {\n                BeginUpdate();\n            }\n        }\n        else\n        {\n            MessageBox.Show(&quot;A mandatory update is available for your application. We will install the update now, after which we will save all of your in-progress data and restart your application.&quot;);\n            BeginUpdate();\n        }\n    }\n}\n\nprivate void BeginUpdate()\n{\n    ApplicationDeployment ad = ApplicationDeployment.CurrentDeployment;\n    ad.UpdateCompleted += new AsyncCompletedEventHandler(ad_UpdateCompleted);\n\n    // Indicate progress in the application&#39;s status bar.\n    ad.UpdateProgressChanged += new DeploymentProgressChangedEventHandler(ad_UpdateProgressChanged);\n    ad.UpdateAsync();\n}\n\nvoid ad_UpdateProgressChanged(object sender, DeploymentProgressChangedEventArgs e)\n{\n    String progressText = String.Format(&quot;{0:D}K out of {1:D}K downloaded - {2:D}% complete&quot;, e.BytesCompleted / 1024, e.BytesTotal / 1024, e.ProgressPercentage);\n    downloadStatus.Text = progressText;\n}\n\nvoid ad_UpdateCompleted(object sender, AsyncCompletedEventArgs e)\n{\n    if (e.Cancelled)\n    {\n        MessageBox.Show(&quot;The update of the application&#39;s latest version was cancelled.&quot;);\n        return;\n    }\n    else if (e.Error != null)\n    {\n        MessageBox.Show(&quot;ERROR: Could not install the latest version of the application. Reason: <br>&quot; + e.Error.Message + &quot;<br>Please report this error to the system administrator.&quot;);\n        return;\n    }\n\n    DialogResult dr = MessageBox.Show(&quot;The application has been updated. Restart? (If you do not restart now, the new version will not take effect until after you quit and launch the application again.)&quot;, &quot;Restart Application&quot;, MessageBoxButtons.OKCancel);\n    if (DialogResult.OK == dr)\n    {\n        Application.Restart();\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"ClickOnceAPI#1\">    private:\n        long sizeOfUpdate;\n\n\n    private:\n        void Form1_Load(Object^ sender, System::EventArgs^ e)\n        {\n            DoUpdate();\n        }\n\n    public:\n        void DoUpdate()\n        {\n            if (ApplicationDeployment::IsNetworkDeployed)\n            {\n                ApplicationDeployment^ currentAppDeployment =\n                    ApplicationDeployment::CurrentDeployment;\n                currentAppDeployment-&gt;CheckForUpdateCompleted +=\n                    gcnew CheckForUpdateCompletedEventHandler(\n                    this, &amp;Form1::currentDeploy_CheckForUpdateCompleted);\n                currentAppDeployment-&gt;CheckForUpdateAsync();\n            }\n        }\n\n        // If update is available, fetch it.\n        void currentDeploy_CheckForUpdateCompleted(Object^ sender,\n            CheckForUpdateCompletedEventArgs^ e)\n        {\n            if (nullptr != e-&gt;Error)\n            {\n                // Log error.\n                return;\n            }\n\n            if (e-&gt;UpdateAvailable)\n            {\n                sizeOfUpdate = (long) e-&gt;UpdateSizeBytes;\n                if (!e-&gt;IsUpdateRequired)\n                {\n                    System::Windows::Forms::DialogResult \n                        updateDialogueResult = MessageBox::Show(\n                        &quot;An update is available.Would you like to update the&quot; +\n                        &quot; application now?&quot;, &quot;Update Available&quot;,\n                        MessageBoxButtons::OKCancel);\n                    if (System::Windows::Forms::DialogResult::OK == \n                        updateDialogueResult)\n                    {\n                        BeginUpdate();\n                    }\n                }\n                else\n                {\n                    BeginUpdate();\n                }\n            }\n        }\n\n        void BeginUpdate()\n        {\n            ApplicationDeployment^ ad = ApplicationDeployment::CurrentDeployment;\n            ad-&gt;UpdateCompleted +=\n                gcnew AsyncCompletedEventHandler(\n                this, &amp;Form1::CurrentDeployment_UpdateCompleted);\n\n            // Indicate progress in the application&#39;s status bar.\n            ad-&gt;UpdateProgressChanged +=\n                gcnew DeploymentProgressChangedEventHandler(this, \n                &amp;Form1::ad_ProgressChanged);\n\n            ad-&gt;UpdateAsync();\n        }\n\n        void CurrentDeployment_UpdateCompleted(Object^ sender,\n            AsyncCompletedEventArgs^ e)\n        {\n            if (!e-&gt;Cancelled)\n            {\n                if (nullptr != e-&gt;Error)\n                {\n                    System::Windows::Forms::DialogResult \n                        restartDialogueResult = MessageBox::Show(\n                        &quot;The application has been updated. Restart?&quot;,\n                        &quot;Restart Application&quot;,\n                        MessageBoxButtons::OKCancel);\n                    if (System::Windows::Forms::DialogResult::OK == \n                        restartDialogueResult)\n                    {\n                        Application::Restart();\n                    }\n                }\n                else\n                {\n                    // Replace with your own error reporting or logging.\n                    MessageBox::Show(\n                        &quot;The application encountered an error in downloading&quot; +\n                        &quot; the latest update. Error: {0}&quot;,\n                        e-&gt;Error-&gt;Message);\n                }\n            }\n            else\n            {\n                // Replace with your own error reporting or logging.\n                MessageBox::Show(&quot;The update of the application&#39;s latest&quot; +\n                    &quot; version was cancelled.&quot;);\n            }\n        }\n\n        void ad_ProgressChanged(Object^ sender,\n            DeploymentProgressChangedEventArgs^ e)\n        {\n            String^ progressText =\n                String::Format(\n                &quot;{0:D}K out of {1:D}K downloaded - {2:D}% complete&quot;,\n                e-&gt;BytesCompleted / 1024, e-&gt;BytesTotal / 1024,\n                e-&gt;ProgressPercentage);\n            statusStrip1-&gt;Text = progressText;\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"ClickOnceAPI#1\">Private sizeOfUpdate As Long = 0\n\nDim WithEvents ADUpdateAsync As ApplicationDeployment\n\nPrivate Sub UpdateApplication()\n    If (ApplicationDeployment.IsNetworkDeployed) Then\n        ADUpdateAsync = ApplicationDeployment.CurrentDeployment\n\n        ADUpdateAsync.CheckForUpdateAsync()\n    End If\nEnd Sub\n\nPrivate Sub ADUpdateAsync_CheckForUpdateProgressChanged(ByVal sender As Object, ByVal e As DeploymentProgressChangedEventArgs) Handles ADUpdateAsync.CheckForUpdateProgressChanged\n    DownloadStatus.Text = [String].Format(&quot;{0:D}K of {1:D}K downloaded.&quot;, e.BytesCompleted / 1024, e.BytesTotal / 1024)\nEnd Sub\n\n\nPrivate Sub ADUpdateAsync_CheckForUpdateCompleted(ByVal sender As Object, ByVal e As CheckForUpdateCompletedEventArgs) Handles ADUpdateAsync.CheckForUpdateCompleted\n    If (e.Error IsNot Nothing) Then\n        MessageBox.Show((&quot;ERROR: Could not retrieve new version of the application. Reason: &quot; + ControlChars.Lf + e.Error.Message + ControlChars.Lf + &quot;Please report this error to the system administrator.&quot;))\n        Return\n    Else\n        If (e.Cancelled = True) Then\n            MessageBox.Show(&quot;The update was cancelled.&quot;)\n        End If\n    End If\n\n    &#39; Ask the user if they would like to update the application now.\n    If (e.UpdateAvailable) Then\n        sizeOfUpdate = e.UpdateSizeBytes\n\n        If (Not e.IsUpdateRequired) Then\n            Dim dr As DialogResult = MessageBox.Show(&quot;An update is available. Would you like to update the application now?&quot;, &quot;Update Available&quot;, MessageBoxButtons.OKCancel)\n            If (System.Windows.Forms.DialogResult.OK = dr) Then\n                BeginUpdate()\n            End If\n        Else\n            MessageBox.Show(&quot;A mandatory update is available for your application. We will install the update now, after which we will save all of your in-progress data and restart your application.&quot;)\n            BeginUpdate()\n        End If\n    End If\nEnd Sub\n\nPrivate Sub BeginUpdate()\n    ADUpdateAsync = ApplicationDeployment.CurrentDeployment\n    ADUpdateAsync.UpdateAsync()\nEnd Sub\n\n\nPrivate Sub ADUpdateAsync_UpdateProgressChanged(ByVal sender As Object, ByVal e As DeploymentProgressChangedEventArgs) Handles ADUpdateAsync.UpdateProgressChanged\n    Dim progressText As String = String.Format(&quot;{0:D}K out of {1:D}K downloaded - {2:D}% complete&quot;, e.BytesCompleted / 1024, e.BytesTotal / 1024, e.ProgressPercentage)\n    DownloadStatus.Text = progressText\nEnd Sub\n\n\nPrivate Sub ADUpdateAsync_UpdateCompleted(ByVal sender As Object, ByVal e As AsyncCompletedEventArgs) Handles ADUpdateAsync.UpdateCompleted\n    If (e.Cancelled) Then\n        MessageBox.Show(&quot;The update of the application&#39;s latest version was cancelled.&quot;)\n        Exit Sub\n    Else\n        If (e.Error IsNot Nothing) Then\n            MessageBox.Show(&quot;ERROR: Could not install the latest version of the application. Reason: &quot; + ControlChars.Lf + e.Error.Message + ControlChars.Lf + &quot;Please report this error to the system administrator.&quot;)\n            Exit Sub\n        End If\n    End If\n\n    Dim dr As DialogResult = MessageBox.Show(&quot;The application has been updated. Restart? (If you do not restart now, the new version will not take effect until after you quit and launch the application again.)&quot;, &quot;Restart Application&quot;, MessageBoxButtons.OKCancel)\n    If (dr = System.Windows.Forms.DialogResult.OK) Then\n        Application.Restart()\n    End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Deployment_Application_ApplicationDeployment_DownloadFileGroupCompleted\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DownloadFileGroupCompleted</div>        \r\n          </div>\r\n    \r\n            <p>Occurs on the main application thread when a file download is complete.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Deployment.Application.DownloadFileGroupCompletedEventHandler DownloadFileGroupCompleted;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The DownloadFileGroupCompleted event is called on the main application thread. It is thread safe to call your application&#39;s Windows Forms controls directly within this callback.  </p>\n<p> Check the <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs#System_ComponentModel_AsyncCompletedEventArgs_Error_\" data-linktype=\"relative-path\">Error</a> property of the <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs\" data-linktype=\"relative-path\">AsyncCompletedEventArgs</a> supplied to this callback. If this property is <code>null</code>, the download was successful; if it is not <code>null</code>, the installation did not succeed, and you can find more information about the installation failure through the <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs#System_ComponentModel_AsyncCompletedEventArgs_Error_\" data-linktype=\"relative-path\">Error</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example downloads a group of Help files in the background. The example requires that you deploy a Windows Forms application that includes a <a class=\"xref\" href=\"system.windows.forms.statusstrip\" data-linktype=\"relative-path\">StatusStrip</a> control, and that this control contain a <a class=\"xref\" href=\"system.windows.forms.toolstripstatuslabel\" data-linktype=\"relative-path\">ToolStripStatusLabel</a> control named <code>downloadStatus</code>..  </p>\n<pre><code class=\"lang-cs\" name=\"ClickOnceAPI#8\">private void DownloadFileGroupAsync(string fileGroup)\n{\n    if (ApplicationDeployment.IsNetworkDeployed)\n    {\n        ApplicationDeployment deployment = ApplicationDeployment.CurrentDeployment;\n\n        try\n        {\n            if (!deployment.IsFileGroupDownloaded(fileGroup))\n            {\n                deployment.DownloadFileGroupProgressChanged += new DeploymentProgressChangedEventHandler(deployment_DownloadFileGroupProgressChanged);\n                deployment.DownloadFileGroupCompleted += new DownloadFileGroupCompletedEventHandler(deployment_DownloadFileGroupCompleted);\n\n                deployment.DownloadFileGroupAsync(fileGroup);\n            }\n        }\n        catch (InvalidOperationException ioe)\n        {\n            MessageBox.Show(&quot;This application is not a ClickOnce application. Error: &quot; + ioe.Message);\n            return;\n        }\n    }\n}\n\nvoid deployment_DownloadFileGroupProgressChanged(object sender, DeploymentProgressChangedEventArgs e)\n{\n    downloadStatus.Text = String.Format(&quot;Downloading file group {0}; {1:D}K of {2:D}K completed.&quot;, e.Group, e.BytesCompleted / 1024, e.BytesTotal / 1024);               \n}\n\nvoid deployment_DownloadFileGroupCompleted(object sender, DownloadFileGroupCompletedEventArgs e)\n{\n    if (e.Error != null)\n    {\n        downloadStatus.Text = &quot;Could not download files. Will try again later.&quot;;\n        return;\n    }\n    else if (e.Cancelled)\n    {\n        downloadStatus.Text = &quot;The file download has been cancelled.&quot;;\n        return;\n    }\n\n    downloadStatus.Text = String.Format(&quot;Download of file group {0} complete.&quot;, e.Group);\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"ClickOnceAPI#8\">        void LaunchAppUpdate()\n        {\n            if (ApplicationDeployment::IsNetworkDeployed)\n            {\n                ApplicationDeployment^ ad =\n                    ApplicationDeployment::CurrentDeployment;\n                ad-&gt;UpdateCompleted +=\n                    gcnew AsyncCompletedEventHandler(this,\n                    &amp;Form1::LaunchAppUpdate_UpdateCompleted);\n\n                ad-&gt;UpdateAsync();\n            }\n        }\n\n        void LaunchAppUpdate_UpdateCompleted(Object^ sender,\n            AsyncCompletedEventArgs^ e)\n        {\n            if (!e-&gt;Cancelled)\n            {\n                if (nullptr != e-&gt;Error)\n                {\n                    System::Windows::Forms::DialogResult dr =\n                        MessageBox::Show(\n                        &quot;The application has been updated. Restart?&quot;,\n                        &quot;Restart Application&quot;,\n                        MessageBoxButtons::OKCancel);\n                    if (System::Windows::Forms::DialogResult::OK == dr)\n                    {\n                        Application::Restart();\n                    }\n                }\n                else\n                {\n                    // Replace with your own error reporting or logging.\n                    MessageBox::Show(\n                        &quot;The application encountered an error in &quot; +\n                        &quot;downloading the latest update. Error: {0}&quot;,\n                        e-&gt;Error-&gt;Message);\n                }\n            }\n            else\n            {\n                // Replace with your own error reporting or logging.\n                MessageBox::Show(\n                    &quot;The update of the application&#39;s latest version was &quot; +\n                    &quot;cancelled.&quot;);\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"ClickOnceAPI#8\">Dim WithEvents ADDownloadHelpFiles As ApplicationDeployment\n\nPrivate Sub DownloadHelpFiles(ByVal GroupName As String)\n    If (ApplicationDeployment.IsNetworkDeployed) Then\n        ADDownloadHelpFiles = ApplicationDeployment.CurrentDeployment\n\n        If ADDownloadHelpFiles.IsFirstRun Then\n            Try\n                If Not ADDownloadHelpFiles.IsFileGroupDownloaded(GroupName) Then\n                    ADDownloadHelpFiles.DownloadFileGroupAsync(GroupName)\n                End If\n            Catch ioe As InvalidOperationException\n                MessageBox.Show(&quot;This application is not a ClickOnce application.&quot;)\n                Return\n            End Try\n        End If\n    End If\nEnd Sub\n\nPrivate Sub ADDownloadHelpFiles_DownloadFileGroupProgressChanged(ByVal sender As Object, ByVal e As DeploymentProgressChangedEventArgs) Handles ADDownloadHelpFiles.DownloadFileGroupProgressChanged\n    DownloadStatus.Text = String.Format(&quot;Downloading file group {0}; {1:D}K of {2:D}K completed.&quot;, e.Group, e.BytesCompleted / 1024, e.BytesTotal / 1024)\nEnd Sub\n\nPrivate Sub ADDownloadHelpFiles_DownloadFileGroupCompleted(ByVal sender As Object, ByVal e As DownloadFileGroupCompletedEventArgs) Handles ADDownloadHelpFiles.DownloadFileGroupCompleted\n    DownloadStatus.Text = String.Format(&quot;Download of file group {0} complete.&quot;, e.Group)\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Deployment_Application_ApplicationDeployment_DownloadFileGroupProgressChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DownloadFileGroupProgressChanged</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when status information is available on a file download operation initiated by a call to <span class=\"xref\">stem.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Deployment.Application.DeploymentProgressChangedEventHandler DownloadFileGroupProgressChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The DownloadFileGroupProgressChanged event is called on the main application thread. It is thread safe to call your application&#39;s Windows Forms controls directly within this callback.  </p>\n<p> Use the information supplied in <a class=\"xref\" href=\"system.deployment.application.deploymentprogresschangedeventargs\" data-linktype=\"relative-path\">DeploymentProgressChangedEventArgs</a> to communicate progress information to your users.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example downloads a group of Help files in the background. The example requires that you deploy a Windows Forms application that includes a <a class=\"xref\" href=\"system.windows.forms.statusstrip\" data-linktype=\"relative-path\">StatusStrip</a> control, and that this control contain a <a class=\"xref\" href=\"system.windows.forms.toolstripstatuslabel\" data-linktype=\"relative-path\">ToolStripStatusLabel</a> control named <code>downloadStatus</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"ClickOnceAPI#8\">private void DownloadFileGroupAsync(string fileGroup)\n{\n    if (ApplicationDeployment.IsNetworkDeployed)\n    {\n        ApplicationDeployment deployment = ApplicationDeployment.CurrentDeployment;\n\n        try\n        {\n            if (!deployment.IsFileGroupDownloaded(fileGroup))\n            {\n                deployment.DownloadFileGroupProgressChanged += new DeploymentProgressChangedEventHandler(deployment_DownloadFileGroupProgressChanged);\n                deployment.DownloadFileGroupCompleted += new DownloadFileGroupCompletedEventHandler(deployment_DownloadFileGroupCompleted);\n\n                deployment.DownloadFileGroupAsync(fileGroup);\n            }\n        }\n        catch (InvalidOperationException ioe)\n        {\n            MessageBox.Show(&quot;This application is not a ClickOnce application. Error: &quot; + ioe.Message);\n            return;\n        }\n    }\n}\n\nvoid deployment_DownloadFileGroupProgressChanged(object sender, DeploymentProgressChangedEventArgs e)\n{\n    downloadStatus.Text = String.Format(&quot;Downloading file group {0}; {1:D}K of {2:D}K completed.&quot;, e.Group, e.BytesCompleted / 1024, e.BytesTotal / 1024);               \n}\n\nvoid deployment_DownloadFileGroupCompleted(object sender, DownloadFileGroupCompletedEventArgs e)\n{\n    if (e.Error != null)\n    {\n        downloadStatus.Text = &quot;Could not download files. Will try again later.&quot;;\n        return;\n    }\n    else if (e.Cancelled)\n    {\n        downloadStatus.Text = &quot;The file download has been cancelled.&quot;;\n        return;\n    }\n\n    downloadStatus.Text = String.Format(&quot;Download of file group {0} complete.&quot;, e.Group);\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"ClickOnceAPI#8\">        void LaunchAppUpdate()\n        {\n            if (ApplicationDeployment::IsNetworkDeployed)\n            {\n                ApplicationDeployment^ ad =\n                    ApplicationDeployment::CurrentDeployment;\n                ad-&gt;UpdateCompleted +=\n                    gcnew AsyncCompletedEventHandler(this,\n                    &amp;Form1::LaunchAppUpdate_UpdateCompleted);\n\n                ad-&gt;UpdateAsync();\n            }\n        }\n\n        void LaunchAppUpdate_UpdateCompleted(Object^ sender,\n            AsyncCompletedEventArgs^ e)\n        {\n            if (!e-&gt;Cancelled)\n            {\n                if (nullptr != e-&gt;Error)\n                {\n                    System::Windows::Forms::DialogResult dr =\n                        MessageBox::Show(\n                        &quot;The application has been updated. Restart?&quot;,\n                        &quot;Restart Application&quot;,\n                        MessageBoxButtons::OKCancel);\n                    if (System::Windows::Forms::DialogResult::OK == dr)\n                    {\n                        Application::Restart();\n                    }\n                }\n                else\n                {\n                    // Replace with your own error reporting or logging.\n                    MessageBox::Show(\n                        &quot;The application encountered an error in &quot; +\n                        &quot;downloading the latest update. Error: {0}&quot;,\n                        e-&gt;Error-&gt;Message);\n                }\n            }\n            else\n            {\n                // Replace with your own error reporting or logging.\n                MessageBox::Show(\n                    &quot;The update of the application&#39;s latest version was &quot; +\n                    &quot;cancelled.&quot;);\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"ClickOnceAPI#8\">Dim WithEvents ADDownloadHelpFiles As ApplicationDeployment\n\nPrivate Sub DownloadHelpFiles(ByVal GroupName As String)\n    If (ApplicationDeployment.IsNetworkDeployed) Then\n        ADDownloadHelpFiles = ApplicationDeployment.CurrentDeployment\n\n        If ADDownloadHelpFiles.IsFirstRun Then\n            Try\n                If Not ADDownloadHelpFiles.IsFileGroupDownloaded(GroupName) Then\n                    ADDownloadHelpFiles.DownloadFileGroupAsync(GroupName)\n                End If\n            Catch ioe As InvalidOperationException\n                MessageBox.Show(&quot;This application is not a ClickOnce application.&quot;)\n                Return\n            End Try\n        End If\n    End If\nEnd Sub\n\nPrivate Sub ADDownloadHelpFiles_DownloadFileGroupProgressChanged(ByVal sender As Object, ByVal e As DeploymentProgressChangedEventArgs) Handles ADDownloadHelpFiles.DownloadFileGroupProgressChanged\n    DownloadStatus.Text = String.Format(&quot;Downloading file group {0}; {1:D}K of {2:D}K completed.&quot;, e.Group, e.BytesCompleted / 1024, e.BytesTotal / 1024)\nEnd Sub\n\nPrivate Sub ADDownloadHelpFiles_DownloadFileGroupCompleted(ByVal sender As Object, ByVal e As DownloadFileGroupCompletedEventArgs) Handles ADDownloadHelpFiles.DownloadFileGroupCompleted\n    DownloadStatus.Text = String.Format(&quot;Download of file group {0} complete.&quot;, e.Group)\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Deployment_Application_ApplicationDeployment_UpdateCompleted\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UpdateCompleted</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> has finished upgrading the application as the result of a call to <span class=\"xref\">stem.Deployment.Application.ApplicationDeployment.UpdateAsync*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.ComponentModel.AsyncCompletedEventHandler UpdateCompleted;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The UpdateCompleted event is called on the main application thread. You may call your application&#39;s Windows Forms controls directly within this callback without triggering an exception.  </p>\n<p> Check the <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs#System_ComponentModel_AsyncCompletedEventArgs_Error_\" data-linktype=\"relative-path\">Error</a> property of the <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs\" data-linktype=\"relative-path\">AsyncCompletedEventArgs</a> supplied to this callback. If this property is <code>null</code>, the installation was successful; if it is not <code>null</code>, the installation did not succeed, and you can find more information about this installation failure through the <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs#System_ComponentModel_AsyncCompletedEventArgs_Error_\" data-linktype=\"relative-path\">Error</a> property. Once the update has been downloaded, you will need to call the <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_Restart_\" data-linktype=\"relative-path\">Restart</a> method on the <a class=\"xref\" href=\"system.windows.forms.application\" data-linktype=\"relative-path\">Application</a> to use the newer version of the application.  </p>\n<p> If the installation of the update was canceled by a call to <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_UpdateAsyncCancel_\" data-linktype=\"relative-path\">UpdateAsyncCancel</a>, the <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs#System_ComponentModel_AsyncCompletedEventArgs_Cancelled_\" data-linktype=\"relative-path\">Cancelled</a> property of the <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs\" data-linktype=\"relative-path\">AsyncCompletedEventArgs</a> class will be <code>true</code>.  </p>\n<p> To use this event handler, your application must import both the <a class=\"xref\" href=\"system.deployment.application\" data-linktype=\"relative-path\">System.Deployment.Application</a> and <a class=\"xref\" href=\"system.componentmodel\" data-linktype=\"relative-path\">System.ComponentModel</a> namespaces.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example determines at application load time whether a new update is available; if a required update is available, it installs the update asynchronously. The example requires that you deploy a Windows Forms application that includes a <a class=\"xref\" href=\"system.windows.forms.statusstrip\" data-linktype=\"relative-path\">StatusStrip</a> control, and that this control contain a <a class=\"xref\" href=\"system.windows.forms.toolstripstatuslabel\" data-linktype=\"relative-path\">ToolStripStatusLabel</a> control named <code>downloadStatus</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"ClickOnceAPI#1\">long sizeOfUpdate = 0;\n\nprivate void UpdateApplication()\n{\n    if (ApplicationDeployment.IsNetworkDeployed)\n    {\n        ApplicationDeployment ad = ApplicationDeployment.CurrentDeployment;\n        ad.CheckForUpdateCompleted += new CheckForUpdateCompletedEventHandler(ad_CheckForUpdateCompleted);\n        ad.CheckForUpdateProgressChanged += new DeploymentProgressChangedEventHandler(ad_CheckForUpdateProgressChanged);\n\n        ad.CheckForUpdateAsync();\n    }\n}\n\nvoid  ad_CheckForUpdateProgressChanged(object sender, DeploymentProgressChangedEventArgs e)\n{\n    downloadStatus.Text = String.Format(&quot;Downloading: {0}. {1:D}K of {2:D}K downloaded.&quot;, GetProgressString(e.State), e.BytesCompleted/1024, e.BytesTotal/1024);   \n}\n\nstring GetProgressString(DeploymentProgressState state)\n{\n    if (state == DeploymentProgressState.DownloadingApplicationFiles)\n    {\n        return &quot;application files&quot;;\n    } \n    else if (state == DeploymentProgressState.DownloadingApplicationInformation) \n    {\n        return &quot;application manifest&quot;;\n    } \n    else \n    {\n        return &quot;deployment manifest&quot;;\n    }\n}\n\nvoid ad_CheckForUpdateCompleted(object sender, CheckForUpdateCompletedEventArgs e)\n{\n    if (e.Error != null)\n    {\n        MessageBox.Show(&quot;ERROR: Could not retrieve new version of the application. Reason: <br>&quot; + e.Error.Message + &quot;<br>Please report this error to the system administrator.&quot;);\n        return;\n    }\n    else if (e.Cancelled == true)\n    {\n        MessageBox.Show(&quot;The update was cancelled.&quot;);\n    }\n\n    // Ask the user if they would like to update the application now.\n    if (e.UpdateAvailable)\n    {\n        sizeOfUpdate = e.UpdateSizeBytes;\n\n        if (!e.IsUpdateRequired)\n        {\n            DialogResult dr = MessageBox.Show(&quot;An update is available. Would you like to update the application now?<br><br>Estimated Download Time: &quot;, &quot;Update Available&quot;, MessageBoxButtons.OKCancel);\n            if (DialogResult.OK == dr)\n            {\n                BeginUpdate();\n            }\n        }\n        else\n        {\n            MessageBox.Show(&quot;A mandatory update is available for your application. We will install the update now, after which we will save all of your in-progress data and restart your application.&quot;);\n            BeginUpdate();\n        }\n    }\n}\n\nprivate void BeginUpdate()\n{\n    ApplicationDeployment ad = ApplicationDeployment.CurrentDeployment;\n    ad.UpdateCompleted += new AsyncCompletedEventHandler(ad_UpdateCompleted);\n\n    // Indicate progress in the application&#39;s status bar.\n    ad.UpdateProgressChanged += new DeploymentProgressChangedEventHandler(ad_UpdateProgressChanged);\n    ad.UpdateAsync();\n}\n\nvoid ad_UpdateProgressChanged(object sender, DeploymentProgressChangedEventArgs e)\n{\n    String progressText = String.Format(&quot;{0:D}K out of {1:D}K downloaded - {2:D}% complete&quot;, e.BytesCompleted / 1024, e.BytesTotal / 1024, e.ProgressPercentage);\n    downloadStatus.Text = progressText;\n}\n\nvoid ad_UpdateCompleted(object sender, AsyncCompletedEventArgs e)\n{\n    if (e.Cancelled)\n    {\n        MessageBox.Show(&quot;The update of the application&#39;s latest version was cancelled.&quot;);\n        return;\n    }\n    else if (e.Error != null)\n    {\n        MessageBox.Show(&quot;ERROR: Could not install the latest version of the application. Reason: <br>&quot; + e.Error.Message + &quot;<br>Please report this error to the system administrator.&quot;);\n        return;\n    }\n\n    DialogResult dr = MessageBox.Show(&quot;The application has been updated. Restart? (If you do not restart now, the new version will not take effect until after you quit and launch the application again.)&quot;, &quot;Restart Application&quot;, MessageBoxButtons.OKCancel);\n    if (DialogResult.OK == dr)\n    {\n        Application.Restart();\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"ClickOnceAPI#1\">    private:\n        long sizeOfUpdate;\n\n\n    private:\n        void Form1_Load(Object^ sender, System::EventArgs^ e)\n        {\n            DoUpdate();\n        }\n\n    public:\n        void DoUpdate()\n        {\n            if (ApplicationDeployment::IsNetworkDeployed)\n            {\n                ApplicationDeployment^ currentAppDeployment =\n                    ApplicationDeployment::CurrentDeployment;\n                currentAppDeployment-&gt;CheckForUpdateCompleted +=\n                    gcnew CheckForUpdateCompletedEventHandler(\n                    this, &amp;Form1::currentDeploy_CheckForUpdateCompleted);\n                currentAppDeployment-&gt;CheckForUpdateAsync();\n            }\n        }\n\n        // If update is available, fetch it.\n        void currentDeploy_CheckForUpdateCompleted(Object^ sender,\n            CheckForUpdateCompletedEventArgs^ e)\n        {\n            if (nullptr != e-&gt;Error)\n            {\n                // Log error.\n                return;\n            }\n\n            if (e-&gt;UpdateAvailable)\n            {\n                sizeOfUpdate = (long) e-&gt;UpdateSizeBytes;\n                if (!e-&gt;IsUpdateRequired)\n                {\n                    System::Windows::Forms::DialogResult \n                        updateDialogueResult = MessageBox::Show(\n                        &quot;An update is available.Would you like to update the&quot; +\n                        &quot; application now?&quot;, &quot;Update Available&quot;,\n                        MessageBoxButtons::OKCancel);\n                    if (System::Windows::Forms::DialogResult::OK == \n                        updateDialogueResult)\n                    {\n                        BeginUpdate();\n                    }\n                }\n                else\n                {\n                    BeginUpdate();\n                }\n            }\n        }\n\n        void BeginUpdate()\n        {\n            ApplicationDeployment^ ad = ApplicationDeployment::CurrentDeployment;\n            ad-&gt;UpdateCompleted +=\n                gcnew AsyncCompletedEventHandler(\n                this, &amp;Form1::CurrentDeployment_UpdateCompleted);\n\n            // Indicate progress in the application&#39;s status bar.\n            ad-&gt;UpdateProgressChanged +=\n                gcnew DeploymentProgressChangedEventHandler(this, \n                &amp;Form1::ad_ProgressChanged);\n\n            ad-&gt;UpdateAsync();\n        }\n\n        void CurrentDeployment_UpdateCompleted(Object^ sender,\n            AsyncCompletedEventArgs^ e)\n        {\n            if (!e-&gt;Cancelled)\n            {\n                if (nullptr != e-&gt;Error)\n                {\n                    System::Windows::Forms::DialogResult \n                        restartDialogueResult = MessageBox::Show(\n                        &quot;The application has been updated. Restart?&quot;,\n                        &quot;Restart Application&quot;,\n                        MessageBoxButtons::OKCancel);\n                    if (System::Windows::Forms::DialogResult::OK == \n                        restartDialogueResult)\n                    {\n                        Application::Restart();\n                    }\n                }\n                else\n                {\n                    // Replace with your own error reporting or logging.\n                    MessageBox::Show(\n                        &quot;The application encountered an error in downloading&quot; +\n                        &quot; the latest update. Error: {0}&quot;,\n                        e-&gt;Error-&gt;Message);\n                }\n            }\n            else\n            {\n                // Replace with your own error reporting or logging.\n                MessageBox::Show(&quot;The update of the application&#39;s latest&quot; +\n                    &quot; version was cancelled.&quot;);\n            }\n        }\n\n        void ad_ProgressChanged(Object^ sender,\n            DeploymentProgressChangedEventArgs^ e)\n        {\n            String^ progressText =\n                String::Format(\n                &quot;{0:D}K out of {1:D}K downloaded - {2:D}% complete&quot;,\n                e-&gt;BytesCompleted / 1024, e-&gt;BytesTotal / 1024,\n                e-&gt;ProgressPercentage);\n            statusStrip1-&gt;Text = progressText;\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"ClickOnceAPI#1\">Private sizeOfUpdate As Long = 0\n\nDim WithEvents ADUpdateAsync As ApplicationDeployment\n\nPrivate Sub UpdateApplication()\n    If (ApplicationDeployment.IsNetworkDeployed) Then\n        ADUpdateAsync = ApplicationDeployment.CurrentDeployment\n\n        ADUpdateAsync.CheckForUpdateAsync()\n    End If\nEnd Sub\n\nPrivate Sub ADUpdateAsync_CheckForUpdateProgressChanged(ByVal sender As Object, ByVal e As DeploymentProgressChangedEventArgs) Handles ADUpdateAsync.CheckForUpdateProgressChanged\n    DownloadStatus.Text = [String].Format(&quot;{0:D}K of {1:D}K downloaded.&quot;, e.BytesCompleted / 1024, e.BytesTotal / 1024)\nEnd Sub\n\n\nPrivate Sub ADUpdateAsync_CheckForUpdateCompleted(ByVal sender As Object, ByVal e As CheckForUpdateCompletedEventArgs) Handles ADUpdateAsync.CheckForUpdateCompleted\n    If (e.Error IsNot Nothing) Then\n        MessageBox.Show((&quot;ERROR: Could not retrieve new version of the application. Reason: &quot; + ControlChars.Lf + e.Error.Message + ControlChars.Lf + &quot;Please report this error to the system administrator.&quot;))\n        Return\n    Else\n        If (e.Cancelled = True) Then\n            MessageBox.Show(&quot;The update was cancelled.&quot;)\n        End If\n    End If\n\n    &#39; Ask the user if they would like to update the application now.\n    If (e.UpdateAvailable) Then\n        sizeOfUpdate = e.UpdateSizeBytes\n\n        If (Not e.IsUpdateRequired) Then\n            Dim dr As DialogResult = MessageBox.Show(&quot;An update is available. Would you like to update the application now?&quot;, &quot;Update Available&quot;, MessageBoxButtons.OKCancel)\n            If (System.Windows.Forms.DialogResult.OK = dr) Then\n                BeginUpdate()\n            End If\n        Else\n            MessageBox.Show(&quot;A mandatory update is available for your application. We will install the update now, after which we will save all of your in-progress data and restart your application.&quot;)\n            BeginUpdate()\n        End If\n    End If\nEnd Sub\n\nPrivate Sub BeginUpdate()\n    ADUpdateAsync = ApplicationDeployment.CurrentDeployment\n    ADUpdateAsync.UpdateAsync()\nEnd Sub\n\n\nPrivate Sub ADUpdateAsync_UpdateProgressChanged(ByVal sender As Object, ByVal e As DeploymentProgressChangedEventArgs) Handles ADUpdateAsync.UpdateProgressChanged\n    Dim progressText As String = String.Format(&quot;{0:D}K out of {1:D}K downloaded - {2:D}% complete&quot;, e.BytesCompleted / 1024, e.BytesTotal / 1024, e.ProgressPercentage)\n    DownloadStatus.Text = progressText\nEnd Sub\n\n\nPrivate Sub ADUpdateAsync_UpdateCompleted(ByVal sender As Object, ByVal e As AsyncCompletedEventArgs) Handles ADUpdateAsync.UpdateCompleted\n    If (e.Cancelled) Then\n        MessageBox.Show(&quot;The update of the application&#39;s latest version was cancelled.&quot;)\n        Exit Sub\n    Else\n        If (e.Error IsNot Nothing) Then\n            MessageBox.Show(&quot;ERROR: Could not install the latest version of the application. Reason: &quot; + ControlChars.Lf + e.Error.Message + ControlChars.Lf + &quot;Please report this error to the system administrator.&quot;)\n            Exit Sub\n        End If\n    End If\n\n    Dim dr As DialogResult = MessageBox.Show(&quot;The application has been updated. Restart? (If you do not restart now, the new version will not take effect until after you quit and launch the application again.)&quot;, &quot;Restart Application&quot;, MessageBoxButtons.OKCancel)\n    If (dr = System.Windows.Forms.DialogResult.OK) Then\n        Application.Restart()\n    End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Deployment_Application_ApplicationDeployment_UpdateProgressChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UpdateProgressChanged</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> has new status information for an update operation initiated by calling the <span class=\"xref\">stem.Deployment.Application.ApplicationDeployment.UpdateAsync*</span> method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Deployment.Application.DeploymentProgressChangedEventHandler UpdateProgressChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The UpdateProgressChanged event is called on the main application thread. You may call your application&#39;s Windows Forms controls directly within this callback without triggering an exception.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example determines at application load time whether a new update is available; if a required update is available, it installs the update asynchronously.  </p>\n<pre><code class=\"lang-cs\" name=\"ClickOnceAPI#1\">long sizeOfUpdate = 0;\n\nprivate void UpdateApplication()\n{\n    if (ApplicationDeployment.IsNetworkDeployed)\n    {\n        ApplicationDeployment ad = ApplicationDeployment.CurrentDeployment;\n        ad.CheckForUpdateCompleted += new CheckForUpdateCompletedEventHandler(ad_CheckForUpdateCompleted);\n        ad.CheckForUpdateProgressChanged += new DeploymentProgressChangedEventHandler(ad_CheckForUpdateProgressChanged);\n\n        ad.CheckForUpdateAsync();\n    }\n}\n\nvoid  ad_CheckForUpdateProgressChanged(object sender, DeploymentProgressChangedEventArgs e)\n{\n    downloadStatus.Text = String.Format(&quot;Downloading: {0}. {1:D}K of {2:D}K downloaded.&quot;, GetProgressString(e.State), e.BytesCompleted/1024, e.BytesTotal/1024);   \n}\n\nstring GetProgressString(DeploymentProgressState state)\n{\n    if (state == DeploymentProgressState.DownloadingApplicationFiles)\n    {\n        return &quot;application files&quot;;\n    } \n    else if (state == DeploymentProgressState.DownloadingApplicationInformation) \n    {\n        return &quot;application manifest&quot;;\n    } \n    else \n    {\n        return &quot;deployment manifest&quot;;\n    }\n}\n\nvoid ad_CheckForUpdateCompleted(object sender, CheckForUpdateCompletedEventArgs e)\n{\n    if (e.Error != null)\n    {\n        MessageBox.Show(&quot;ERROR: Could not retrieve new version of the application. Reason: <br>&quot; + e.Error.Message + &quot;<br>Please report this error to the system administrator.&quot;);\n        return;\n    }\n    else if (e.Cancelled == true)\n    {\n        MessageBox.Show(&quot;The update was cancelled.&quot;);\n    }\n\n    // Ask the user if they would like to update the application now.\n    if (e.UpdateAvailable)\n    {\n        sizeOfUpdate = e.UpdateSizeBytes;\n\n        if (!e.IsUpdateRequired)\n        {\n            DialogResult dr = MessageBox.Show(&quot;An update is available. Would you like to update the application now?<br><br>Estimated Download Time: &quot;, &quot;Update Available&quot;, MessageBoxButtons.OKCancel);\n            if (DialogResult.OK == dr)\n            {\n                BeginUpdate();\n            }\n        }\n        else\n        {\n            MessageBox.Show(&quot;A mandatory update is available for your application. We will install the update now, after which we will save all of your in-progress data and restart your application.&quot;);\n            BeginUpdate();\n        }\n    }\n}\n\nprivate void BeginUpdate()\n{\n    ApplicationDeployment ad = ApplicationDeployment.CurrentDeployment;\n    ad.UpdateCompleted += new AsyncCompletedEventHandler(ad_UpdateCompleted);\n\n    // Indicate progress in the application&#39;s status bar.\n    ad.UpdateProgressChanged += new DeploymentProgressChangedEventHandler(ad_UpdateProgressChanged);\n    ad.UpdateAsync();\n}\n\nvoid ad_UpdateProgressChanged(object sender, DeploymentProgressChangedEventArgs e)\n{\n    String progressText = String.Format(&quot;{0:D}K out of {1:D}K downloaded - {2:D}% complete&quot;, e.BytesCompleted / 1024, e.BytesTotal / 1024, e.ProgressPercentage);\n    downloadStatus.Text = progressText;\n}\n\nvoid ad_UpdateCompleted(object sender, AsyncCompletedEventArgs e)\n{\n    if (e.Cancelled)\n    {\n        MessageBox.Show(&quot;The update of the application&#39;s latest version was cancelled.&quot;);\n        return;\n    }\n    else if (e.Error != null)\n    {\n        MessageBox.Show(&quot;ERROR: Could not install the latest version of the application. Reason: <br>&quot; + e.Error.Message + &quot;<br>Please report this error to the system administrator.&quot;);\n        return;\n    }\n\n    DialogResult dr = MessageBox.Show(&quot;The application has been updated. Restart? (If you do not restart now, the new version will not take effect until after you quit and launch the application again.)&quot;, &quot;Restart Application&quot;, MessageBoxButtons.OKCancel);\n    if (DialogResult.OK == dr)\n    {\n        Application.Restart();\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"ClickOnceAPI#1\">    private:\n        long sizeOfUpdate;\n\n\n    private:\n        void Form1_Load(Object^ sender, System::EventArgs^ e)\n        {\n            DoUpdate();\n        }\n\n    public:\n        void DoUpdate()\n        {\n            if (ApplicationDeployment::IsNetworkDeployed)\n            {\n                ApplicationDeployment^ currentAppDeployment =\n                    ApplicationDeployment::CurrentDeployment;\n                currentAppDeployment-&gt;CheckForUpdateCompleted +=\n                    gcnew CheckForUpdateCompletedEventHandler(\n                    this, &amp;Form1::currentDeploy_CheckForUpdateCompleted);\n                currentAppDeployment-&gt;CheckForUpdateAsync();\n            }\n        }\n\n        // If update is available, fetch it.\n        void currentDeploy_CheckForUpdateCompleted(Object^ sender,\n            CheckForUpdateCompletedEventArgs^ e)\n        {\n            if (nullptr != e-&gt;Error)\n            {\n                // Log error.\n                return;\n            }\n\n            if (e-&gt;UpdateAvailable)\n            {\n                sizeOfUpdate = (long) e-&gt;UpdateSizeBytes;\n                if (!e-&gt;IsUpdateRequired)\n                {\n                    System::Windows::Forms::DialogResult \n                        updateDialogueResult = MessageBox::Show(\n                        &quot;An update is available.Would you like to update the&quot; +\n                        &quot; application now?&quot;, &quot;Update Available&quot;,\n                        MessageBoxButtons::OKCancel);\n                    if (System::Windows::Forms::DialogResult::OK == \n                        updateDialogueResult)\n                    {\n                        BeginUpdate();\n                    }\n                }\n                else\n                {\n                    BeginUpdate();\n                }\n            }\n        }\n\n        void BeginUpdate()\n        {\n            ApplicationDeployment^ ad = ApplicationDeployment::CurrentDeployment;\n            ad-&gt;UpdateCompleted +=\n                gcnew AsyncCompletedEventHandler(\n                this, &amp;Form1::CurrentDeployment_UpdateCompleted);\n\n            // Indicate progress in the application&#39;s status bar.\n            ad-&gt;UpdateProgressChanged +=\n                gcnew DeploymentProgressChangedEventHandler(this, \n                &amp;Form1::ad_ProgressChanged);\n\n            ad-&gt;UpdateAsync();\n        }\n\n        void CurrentDeployment_UpdateCompleted(Object^ sender,\n            AsyncCompletedEventArgs^ e)\n        {\n            if (!e-&gt;Cancelled)\n            {\n                if (nullptr != e-&gt;Error)\n                {\n                    System::Windows::Forms::DialogResult \n                        restartDialogueResult = MessageBox::Show(\n                        &quot;The application has been updated. Restart?&quot;,\n                        &quot;Restart Application&quot;,\n                        MessageBoxButtons::OKCancel);\n                    if (System::Windows::Forms::DialogResult::OK == \n                        restartDialogueResult)\n                    {\n                        Application::Restart();\n                    }\n                }\n                else\n                {\n                    // Replace with your own error reporting or logging.\n                    MessageBox::Show(\n                        &quot;The application encountered an error in downloading&quot; +\n                        &quot; the latest update. Error: {0}&quot;,\n                        e-&gt;Error-&gt;Message);\n                }\n            }\n            else\n            {\n                // Replace with your own error reporting or logging.\n                MessageBox::Show(&quot;The update of the application&#39;s latest&quot; +\n                    &quot; version was cancelled.&quot;);\n            }\n        }\n\n        void ad_ProgressChanged(Object^ sender,\n            DeploymentProgressChangedEventArgs^ e)\n        {\n            String^ progressText =\n                String::Format(\n                &quot;{0:D}K out of {1:D}K downloaded - {2:D}% complete&quot;,\n                e-&gt;BytesCompleted / 1024, e-&gt;BytesTotal / 1024,\n                e-&gt;ProgressPercentage);\n            statusStrip1-&gt;Text = progressText;\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"ClickOnceAPI#1\">Private sizeOfUpdate As Long = 0\n\nDim WithEvents ADUpdateAsync As ApplicationDeployment\n\nPrivate Sub UpdateApplication()\n    If (ApplicationDeployment.IsNetworkDeployed) Then\n        ADUpdateAsync = ApplicationDeployment.CurrentDeployment\n\n        ADUpdateAsync.CheckForUpdateAsync()\n    End If\nEnd Sub\n\nPrivate Sub ADUpdateAsync_CheckForUpdateProgressChanged(ByVal sender As Object, ByVal e As DeploymentProgressChangedEventArgs) Handles ADUpdateAsync.CheckForUpdateProgressChanged\n    DownloadStatus.Text = [String].Format(&quot;{0:D}K of {1:D}K downloaded.&quot;, e.BytesCompleted / 1024, e.BytesTotal / 1024)\nEnd Sub\n\n\nPrivate Sub ADUpdateAsync_CheckForUpdateCompleted(ByVal sender As Object, ByVal e As CheckForUpdateCompletedEventArgs) Handles ADUpdateAsync.CheckForUpdateCompleted\n    If (e.Error IsNot Nothing) Then\n        MessageBox.Show((&quot;ERROR: Could not retrieve new version of the application. Reason: &quot; + ControlChars.Lf + e.Error.Message + ControlChars.Lf + &quot;Please report this error to the system administrator.&quot;))\n        Return\n    Else\n        If (e.Cancelled = True) Then\n            MessageBox.Show(&quot;The update was cancelled.&quot;)\n        End If\n    End If\n\n    &#39; Ask the user if they would like to update the application now.\n    If (e.UpdateAvailable) Then\n        sizeOfUpdate = e.UpdateSizeBytes\n\n        If (Not e.IsUpdateRequired) Then\n            Dim dr As DialogResult = MessageBox.Show(&quot;An update is available. Would you like to update the application now?&quot;, &quot;Update Available&quot;, MessageBoxButtons.OKCancel)\n            If (System.Windows.Forms.DialogResult.OK = dr) Then\n                BeginUpdate()\n            End If\n        Else\n            MessageBox.Show(&quot;A mandatory update is available for your application. We will install the update now, after which we will save all of your in-progress data and restart your application.&quot;)\n            BeginUpdate()\n        End If\n    End If\nEnd Sub\n\nPrivate Sub BeginUpdate()\n    ADUpdateAsync = ApplicationDeployment.CurrentDeployment\n    ADUpdateAsync.UpdateAsync()\nEnd Sub\n\n\nPrivate Sub ADUpdateAsync_UpdateProgressChanged(ByVal sender As Object, ByVal e As DeploymentProgressChangedEventArgs) Handles ADUpdateAsync.UpdateProgressChanged\n    Dim progressText As String = String.Format(&quot;{0:D}K out of {1:D}K downloaded - {2:D}% complete&quot;, e.BytesCompleted / 1024, e.BytesTotal / 1024, e.ProgressPercentage)\n    DownloadStatus.Text = progressText\nEnd Sub\n\n\nPrivate Sub ADUpdateAsync_UpdateCompleted(ByVal sender As Object, ByVal e As AsyncCompletedEventArgs) Handles ADUpdateAsync.UpdateCompleted\n    If (e.Cancelled) Then\n        MessageBox.Show(&quot;The update of the application&#39;s latest version was cancelled.&quot;)\n        Exit Sub\n    Else\n        If (e.Error IsNot Nothing) Then\n            MessageBox.Show(&quot;ERROR: Could not install the latest version of the application. Reason: &quot; + ControlChars.Lf + e.Error.Message + ControlChars.Lf + &quot;Please report this error to the system administrator.&quot;)\n            Exit Sub\n        End If\n    End If\n\n    Dim dr As DialogResult = MessageBox.Show(&quot;The application has been updated. Restart? (If you do not restart now, the new version will not take effect until after you quit and launch the application again.)&quot;, &quot;Restart Application&quot;, MessageBoxButtons.OKCancel)\n    If (dr = System.Windows.Forms.DialogResult.OK) Then\n        Application.Restart()\n    End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Deployment.Application.ApplicationDeployment.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Deployment.Application.ApplicationDeployment.yml\">\r\n<meta name=\"APIName\" content=\"System.Deployment.Application.ApplicationDeployment\">\r\n<meta name=\"APIName\" content=\"System.Deployment.Application.ApplicationDeployment.ActivationUri\">\r\n<meta name=\"APIName\" content=\"System.Deployment.Application.ApplicationDeployment.CheckForDetailedUpdate\">\r\n<meta name=\"APIName\" content=\"System.Deployment.Application.ApplicationDeployment.CheckForUpdate\">\r\n<meta name=\"APIName\" content=\"System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync\">\r\n<meta name=\"APIName\" content=\"System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsyncCancel\">\r\n<meta name=\"APIName\" content=\"System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted\">\r\n<meta name=\"APIName\" content=\"System.Deployment.Application.ApplicationDeployment.add_CheckForUpdateCompleted\">\r\n<meta name=\"APIName\" content=\"System.Deployment.Application.ApplicationDeployment.remove_CheckForUpdateCompleted\">\r\n<meta name=\"APIName\" content=\"System.Deployment.Application.ApplicationDeployment.CheckForUpdateProgressChanged\">\r\n<meta name=\"APIName\" content=\"System.Deployment.Application.ApplicationDeployment.add_CheckForUpdateProgressChanged\">\r\n<meta name=\"APIName\" content=\"System.Deployment.Application.ApplicationDeployment.remove_CheckForUpdateProgressChanged\">\r\n<meta name=\"APIName\" content=\"System.Deployment.Application.ApplicationDeployment.CurrentDeployment\">\r\n<meta name=\"APIName\" content=\"System.Deployment.Application.ApplicationDeployment.CurrentVersion\">\r\n<meta name=\"APIName\" content=\"System.Deployment.Application.ApplicationDeployment.DataDirectory\">\r\n<meta name=\"APIName\" content=\"System.Deployment.Application.ApplicationDeployment.DownloadFileGroup\">\r\n<meta name=\"APIName\" content=\"System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync\">\r\n<meta name=\"APIName\" content=\"System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsyncCancel\">\r\n<meta name=\"APIName\" content=\"System.Deployment.Application.ApplicationDeployment.DownloadFileGroupCompleted\">\r\n<meta name=\"APIName\" content=\"System.Deployment.Application.ApplicationDeployment.add_DownloadFileGroupCompleted\">\r\n<meta name=\"APIName\" content=\"System.Deployment.Application.ApplicationDeployment.remove_DownloadFileGroupCompleted\">\r\n<meta name=\"APIName\" content=\"System.Deployment.Application.ApplicationDeployment.DownloadFileGroupProgressChanged\">\r\n<meta name=\"APIName\" content=\"System.Deployment.Application.ApplicationDeployment.add_DownloadFileGroupProgressChanged\">\r\n<meta name=\"APIName\" content=\"System.Deployment.Application.ApplicationDeployment.remove_DownloadFileGroupProgressChanged\">\r\n<meta name=\"APIName\" content=\"System.Deployment.Application.ApplicationDeployment.IsFileGroupDownloaded\">\r\n<meta name=\"APIName\" content=\"System.Deployment.Application.ApplicationDeployment.IsFirstRun\">\r\n<meta name=\"APIName\" content=\"System.Deployment.Application.ApplicationDeployment.IsNetworkDeployed\">\r\n<meta name=\"APIName\" content=\"System.Deployment.Application.ApplicationDeployment.TimeOfLastUpdateCheck\">\r\n<meta name=\"APIName\" content=\"System.Deployment.Application.ApplicationDeployment.Update\">\r\n<meta name=\"APIName\" content=\"System.Deployment.Application.ApplicationDeployment.UpdateAsync\">\r\n<meta name=\"APIName\" content=\"System.Deployment.Application.ApplicationDeployment.UpdateAsyncCancel\">\r\n<meta name=\"APIName\" content=\"System.Deployment.Application.ApplicationDeployment.UpdateCompleted\">\r\n<meta name=\"APIName\" content=\"System.Deployment.Application.ApplicationDeployment.add_UpdateCompleted\">\r\n<meta name=\"APIName\" content=\"System.Deployment.Application.ApplicationDeployment.remove_UpdateCompleted\">\r\n<meta name=\"APIName\" content=\"System.Deployment.Application.ApplicationDeployment.UpdatedApplicationFullName\">\r\n<meta name=\"APIName\" content=\"System.Deployment.Application.ApplicationDeployment.UpdatedVersion\">\r\n<meta name=\"APIName\" content=\"System.Deployment.Application.ApplicationDeployment.UpdateLocation\">\r\n<meta name=\"APIName\" content=\"System.Deployment.Application.ApplicationDeployment.UpdateProgressChanged\">\r\n<meta name=\"APIName\" content=\"System.Deployment.Application.ApplicationDeployment.add_UpdateProgressChanged\">\r\n<meta name=\"APIName\" content=\"System.Deployment.Application.ApplicationDeployment.remove_UpdateProgressChanged\">\r\n<meta name=\"APILocation\" content=\"System.Deployment.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"a0259fe1-f49c-5d27-12e8-30e0100a52a3\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Deployment.Application\\ApplicationDeployment.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Supports updates of the current deployment programmatically, and handles on-demand downloading of files. This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Deployment.Application/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Deployment.Application.ApplicationDeployment\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Deployment.Application.ApplicationDeployment.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Deployment.Application.ApplicationDeployment.yml","open_to_public_contributors":true,"api_name":["System.Deployment.Application.ApplicationDeployment","System.Deployment.Application.ApplicationDeployment.ActivationUri","System.Deployment.Application.ApplicationDeployment.CheckForDetailedUpdate","System.Deployment.Application.ApplicationDeployment.CheckForUpdate","System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync","System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsyncCancel","System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted","System.Deployment.Application.ApplicationDeployment.add_CheckForUpdateCompleted","System.Deployment.Application.ApplicationDeployment.remove_CheckForUpdateCompleted","System.Deployment.Application.ApplicationDeployment.CheckForUpdateProgressChanged","System.Deployment.Application.ApplicationDeployment.add_CheckForUpdateProgressChanged","System.Deployment.Application.ApplicationDeployment.remove_CheckForUpdateProgressChanged","System.Deployment.Application.ApplicationDeployment.CurrentDeployment","System.Deployment.Application.ApplicationDeployment.CurrentVersion","System.Deployment.Application.ApplicationDeployment.DataDirectory","System.Deployment.Application.ApplicationDeployment.DownloadFileGroup","System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync","System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsyncCancel","System.Deployment.Application.ApplicationDeployment.DownloadFileGroupCompleted","System.Deployment.Application.ApplicationDeployment.add_DownloadFileGroupCompleted","System.Deployment.Application.ApplicationDeployment.remove_DownloadFileGroupCompleted","System.Deployment.Application.ApplicationDeployment.DownloadFileGroupProgressChanged","System.Deployment.Application.ApplicationDeployment.add_DownloadFileGroupProgressChanged","System.Deployment.Application.ApplicationDeployment.remove_DownloadFileGroupProgressChanged","System.Deployment.Application.ApplicationDeployment.IsFileGroupDownloaded","System.Deployment.Application.ApplicationDeployment.IsFirstRun","System.Deployment.Application.ApplicationDeployment.IsNetworkDeployed","System.Deployment.Application.ApplicationDeployment.TimeOfLastUpdateCheck","System.Deployment.Application.ApplicationDeployment.Update","System.Deployment.Application.ApplicationDeployment.UpdateAsync","System.Deployment.Application.ApplicationDeployment.UpdateAsyncCancel","System.Deployment.Application.ApplicationDeployment.UpdateCompleted","System.Deployment.Application.ApplicationDeployment.add_UpdateCompleted","System.Deployment.Application.ApplicationDeployment.remove_UpdateCompleted","System.Deployment.Application.ApplicationDeployment.UpdatedApplicationFullName","System.Deployment.Application.ApplicationDeployment.UpdatedVersion","System.Deployment.Application.ApplicationDeployment.UpdateLocation","System.Deployment.Application.ApplicationDeployment.UpdateProgressChanged","System.Deployment.Application.ApplicationDeployment.add_UpdateProgressChanged","System.Deployment.Application.ApplicationDeployment.remove_UpdateProgressChanged"],"api_location":["System.Deployment.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Deployment.Application.ApplicationDeployment","System::Deployment::Application::ApplicationDeployment","System.Deployment.Application.ApplicationDeployment.ActivationUri","System::Deployment::Application::ApplicationDeployment::ActivationUri","System.Deployment.Application.ApplicationDeployment.CheckForDetailedUpdate","System::Deployment::Application::ApplicationDeployment::CheckForDetailedUpdate","System.Deployment.Application.ApplicationDeployment.CheckForUpdate","System::Deployment::Application::ApplicationDeployment::CheckForUpdate","System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync","System::Deployment::Application::ApplicationDeployment::CheckForUpdateAsync","System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsyncCancel","System::Deployment::Application::ApplicationDeployment::CheckForUpdateAsyncCancel","System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted","System::Deployment::Application::ApplicationDeployment::CheckForUpdateCompleted","System.Deployment.Application.ApplicationDeployment.CheckForUpdateProgressChanged","System::Deployment::Application::ApplicationDeployment::CheckForUpdateProgressChanged","System.Deployment.Application.ApplicationDeployment.CurrentDeployment","System::Deployment::Application::ApplicationDeployment::CurrentDeployment","System.Deployment.Application.ApplicationDeployment.CurrentVersion","System::Deployment::Application::ApplicationDeployment::CurrentVersion","System.Deployment.Application.ApplicationDeployment.DataDirectory","System::Deployment::Application::ApplicationDeployment::DataDirectory","System.Deployment.Application.ApplicationDeployment.DownloadFileGroup","System::Deployment::Application::ApplicationDeployment::DownloadFileGroup","System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync","System::Deployment::Application::ApplicationDeployment::DownloadFileGroupAsync","System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsyncCancel","System::Deployment::Application::ApplicationDeployment::DownloadFileGroupAsyncCancel","System.Deployment.Application.ApplicationDeployment.DownloadFileGroupCompleted","System::Deployment::Application::ApplicationDeployment::DownloadFileGroupCompleted","System.Deployment.Application.ApplicationDeployment.DownloadFileGroupProgressChanged","System::Deployment::Application::ApplicationDeployment::DownloadFileGroupProgressChanged","System.Deployment.Application.ApplicationDeployment.IsFileGroupDownloaded","System::Deployment::Application::ApplicationDeployment::IsFileGroupDownloaded","System.Deployment.Application.ApplicationDeployment.IsFirstRun","System::Deployment::Application::ApplicationDeployment::IsFirstRun","System.Deployment.Application.ApplicationDeployment.IsNetworkDeployed","System::Deployment::Application::ApplicationDeployment::IsNetworkDeployed","System.Deployment.Application.ApplicationDeployment.TimeOfLastUpdateCheck","System::Deployment::Application::ApplicationDeployment::TimeOfLastUpdateCheck","System.Deployment.Application.ApplicationDeployment.Update","System::Deployment::Application::ApplicationDeployment::Update","System.Deployment.Application.ApplicationDeployment.UpdateAsync","System::Deployment::Application::ApplicationDeployment::UpdateAsync","System.Deployment.Application.ApplicationDeployment.UpdateAsyncCancel","System::Deployment::Application::ApplicationDeployment::UpdateAsyncCancel","System.Deployment.Application.ApplicationDeployment.UpdateCompleted","System::Deployment::Application::ApplicationDeployment::UpdateCompleted","System.Deployment.Application.ApplicationDeployment.UpdatedApplicationFullName","System::Deployment::Application::ApplicationDeployment::UpdatedApplicationFullName","System.Deployment.Application.ApplicationDeployment.UpdatedVersion","System::Deployment::Application::ApplicationDeployment::UpdatedVersion","System.Deployment.Application.ApplicationDeployment.UpdateLocation","System::Deployment::Application::ApplicationDeployment::UpdateLocation","System.Deployment.Application.ApplicationDeployment.UpdateProgressChanged","System::Deployment::Application::ApplicationDeployment::UpdateProgressChanged"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"a0259fe1-f49c-5d27-12e8-30e0100a52a3","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Deployment.Application\\ApplicationDeployment.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Deployment.Application/ApplicationDeployment.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ApplicationDeployment class | Microsoft Docs","_op_ogTitle":"ApplicationDeployment class","description":"Supports updates of the current deployment programmatically, and handles on-demand downloading of files. This class cannot be inherited.\n","toc_asset_id":"_splitted/System.Deployment.Application/toc.json","toc_rel":"_splitted/System.Deployment.Application/toc.json","source_url":"","ms.assetid":"System.Deployment.Application.ApplicationDeployment","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.deployment.application.applicationdeployment","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.deployment.application.applicationdeployment","fileRelativePath":"System.Deployment.Application.ApplicationDeployment.html"},"themesRelativePathToOutputRoot":"_themes/"}