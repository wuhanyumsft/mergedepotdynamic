{"content":"    \r\n    <h1 id=\"System_Security_Cryptography_RC2CryptoServiceProvider\">\r\n      <span class=\"lang-csharp\">RC2CryptoServiceProvider</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Defines a wrapper object to access the cryptographic service provider (CSP) implementation of the <a class=\"xref\" href=\"system.security.cryptography.rc2\" data-linktype=\"relative-path\">RC2</a> algorithm. This class cannot be inherited.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic sealed class RC2CryptoServiceProvider : System.Security.Cryptography.RC2</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm\" data-linktype=\"relative-path\">SymmetricAlgorithm</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.rc2\" data-linktype=\"relative-path\">System.Security.Cryptography.RC2</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l3\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">RC2CryptoServiceProvider</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.rc2#System_Security_Cryptography_RC2_Create\" data-linktype=\"relative-path\">Create()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.rc2#System_Security_Cryptography_RC2_Create_System_String_\" data-linktype=\"relative-path\">Create(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.rc2#System_Security_Cryptography_RC2_EffectiveKeySizeValue\" data-linktype=\"relative-path\">EffectiveKeySizeValue</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.rc2#System_Security_Cryptography_RC2_KeySize\" data-linktype=\"relative-path\">KeySize</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_BlockSize\" data-linktype=\"relative-path\">BlockSize</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_BlockSizeValue\" data-linktype=\"relative-path\">BlockSizeValue</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_Clear\" data-linktype=\"relative-path\">Clear()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_CreateDecryptor\" data-linktype=\"relative-path\">CreateDecryptor()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_CreateEncryptor\" data-linktype=\"relative-path\">CreateEncryptor()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_Dispose\" data-linktype=\"relative-path\">Dispose()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_Dispose_System_Boolean_\" data-linktype=\"relative-path\">Dispose(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_FeedbackSize\" data-linktype=\"relative-path\">FeedbackSize</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_FeedbackSizeValue\" data-linktype=\"relative-path\">FeedbackSizeValue</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_IV\" data-linktype=\"relative-path\">IV</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_IVValue\" data-linktype=\"relative-path\">IVValue</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_Key\" data-linktype=\"relative-path\">Key</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_KeySizeValue\" data-linktype=\"relative-path\">KeySizeValue</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_KeyValue\" data-linktype=\"relative-path\">KeyValue</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_LegalBlockSizes\" data-linktype=\"relative-path\">LegalBlockSizes</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_LegalBlockSizesValue\" data-linktype=\"relative-path\">LegalBlockSizesValue</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_LegalKeySizes\" data-linktype=\"relative-path\">LegalKeySizes</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_LegalKeySizesValue\" data-linktype=\"relative-path\">LegalKeySizesValue</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_Mode\" data-linktype=\"relative-path\">Mode</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_ModeValue\" data-linktype=\"relative-path\">ModeValue</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_Padding\" data-linktype=\"relative-path\">Padding</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_PaddingValue\" data-linktype=\"relative-path\">PaddingValue</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_ValidKeySize_System_Int32_\" data-linktype=\"relative-path\">ValidKeySize(Int32)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The RC2CryptoServiceProvider implementation supports key lengths from 40 bits to 128 bits in increments of 8 bits.  </p>\n<p> The RC2CryptoServiceProvider object is a block cipher that encrypts and decrypts data in blocks of 8 bytes.  This class pads the final block of data if it is less than 8 bytes.  As a result of this padding, the length of encrypted data could be greater than the original plaintext.  </p>\n<p> Note that the RC2CryptoServiceProvider object does not use salt.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> A newer symmetric encryption algorithm, Advanced Encryption Standard (AES), is available. Consider using the <a class=\"xref\" href=\"system.security.cryptography.aes\" data-linktype=\"relative-path\">Aes</a> algorithm and its derived classes instead of the RC2CryptoServiceProvider class. Use RC2CryptoServiceProvider only for compatibility with legacy applications and data.</p>\n</div>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_RC2CryptoServiceProvider__ctor\" data-linktype=\"self-bookmark\">RC2CryptoServiceProvider()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.rc2cryptoserviceprovider\" data-linktype=\"relative-path\">RC2CryptoServiceProvider</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_RC2CryptoServiceProvider_EffectiveKeySize\" data-linktype=\"self-bookmark\">EffectiveKeySize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the effective size, in bits, of the secret key used by the <a class=\"xref\" href=\"system.security.cryptography.rc2\" data-linktype=\"relative-path\">RC2</a> algorithm.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_RC2CryptoServiceProvider_UseSalt\" data-linktype=\"self-bookmark\">UseSalt</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that determines whether to create a key with an 11-byte-long, zero-value salt.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_RC2CryptoServiceProvider_CreateDecryptor_System_Byte___System_Byte___\" data-linktype=\"self-bookmark\">CreateDecryptor(Byte[],Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a symmetric <a class=\"xref\" href=\"system.security.cryptography.rc2\" data-linktype=\"relative-path\">RC2</a> decryptor object with the specified key (<span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.Key*</span>)and initialization vector (<span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.IV*</span>).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_RC2CryptoServiceProvider_CreateEncryptor_System_Byte___System_Byte___\" data-linktype=\"self-bookmark\">CreateEncryptor(Byte[],Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a symmetric <a class=\"xref\" href=\"system.security.cryptography.rc2\" data-linktype=\"relative-path\">RC2</a> encryptor object with the specified key (<span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.Key*</span>) and initialization vector (<span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.IV*</span>).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_RC2CryptoServiceProvider_GenerateIV\" data-linktype=\"self-bookmark\">GenerateIV()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Generates a random initialization vector (<span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.IV*</span>) to use for the algorithm.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_RC2CryptoServiceProvider_GenerateKey\" data-linktype=\"self-bookmark\">GenerateKey()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Generates a random key (<span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.Key*</span>) to be used for the algorithm.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_RC2CryptoServiceProvider__ctor\">\r\n    \r\n            <a id=\"System_Security_Cryptography_RC2CryptoServiceProvider__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RC2CryptoServiceProvider()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.rc2cryptoserviceprovider\" data-linktype=\"relative-path\">RC2CryptoServiceProvider</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public RC2CryptoServiceProvider ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The cryptographic service provider (CSP) cannot be acquired.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>A non-compliant FIPS algorithm was found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example encrypts and then decrypts a string.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.RC2CryptoServiceProvider Example#1\">using System;\nusing System.IO;\nusing System.Text;\nusing System.Security.Cryptography;\n\nnamespace RC2CryptoServiceProvider_Examples\n{\n    class MyMainClass\n    {\n        public static void Main()\n        {\n\n            // Create a new instance of the RC2CryptoServiceProvider class\n            // and automatically generate a Key and IV.\n            RC2CryptoServiceProvider rc2CSP = new RC2CryptoServiceProvider();\n\n            Console.WriteLine(&quot;Effective key size is {0} bits.&quot;, rc2CSP.EffectiveKeySize);\n\n            // Get the key and IV.\n            byte[] key = rc2CSP.Key;\n            byte[] IV = rc2CSP.IV;\n\n            // Get an encryptor.\n            ICryptoTransform encryptor = rc2CSP.CreateEncryptor(key, IV);\n\n            // Encrypt the data as an array of encrypted bytes in memory.\n            MemoryStream msEncrypt = new MemoryStream();\n            CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write);\n\n            // Convert the data to a byte array.\n            string original = &quot;Here is some data to encrypt.&quot;;\n            byte[] toEncrypt = Encoding.ASCII.GetBytes(original);\n\n            // Write all data to the crypto stream and flush it.\n            csEncrypt.Write(toEncrypt, 0, toEncrypt.Length);\n            csEncrypt.FlushFinalBlock();\n\n            // Get the encrypted array of bytes.\n            byte[] encrypted = msEncrypt.ToArray();\n\n            ///////////////////////////////////////////////////////\n            // This is where the data could be transmitted or saved.          \n            ///////////////////////////////////////////////////////\n\n            //Get a decryptor that uses the same key and IV as the encryptor.\n            ICryptoTransform decryptor = rc2CSP.CreateDecryptor(key, IV);\n\n            // Now decrypt the previously encrypted message using the decryptor\n            // obtained in the above step.\n            MemoryStream msDecrypt = new MemoryStream(encrypted);\n            CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read);\n\n            // Read the decrypted bytes from the decrypting stream\n            // and place them in a StringBuilder class.\n\n            StringBuilder roundtrip = new StringBuilder();\n            \n            int b = 0;\n\n            do\n            {\n                b = csDecrypt.ReadByte();\n                \n                if (b != -1)\n                {\n                    roundtrip.Append((char)b);\n                }\n\n            } while (b != -1);\n \n\n            // Display the original data and the decrypted data.\n            Console.WriteLine(&quot;Original:   {0}&quot;, original);\n            Console.WriteLine(&quot;Round Trip: {0}&quot;, roundtrip);\n\n            Console.ReadLine();\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.RC2CryptoServiceProvider Example#1\">Imports System\nImports System.IO\nImports System.Text\nImports System.Security.Cryptography\n\n\n\nModule Crypto\n\n    Sub Main()\n\n        &#39; Create a new instance of the RC2CryptoServiceProvider class\n        &#39; and automatically generate a Key and IV.\n        Dim rc2CSP As New RC2CryptoServiceProvider()\n\n        Console.WriteLine(&quot;Effective key size is {0} bits.&quot;, rc2CSP.EffectiveKeySize)\n\n        &#39; Get the key and IV.\n        Dim key As Byte() = rc2CSP.Key\n        Dim IV As Byte() = rc2CSP.IV\n\n        &#39; Get an encryptor.\n        Dim encryptor As ICryptoTransform = rc2CSP.CreateEncryptor(key, IV)\n\n        &#39; Encrypt the data as an array of encrypted bytes in memory.\n        Dim msEncrypt As New MemoryStream()\n        Dim csEncrypt As New CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write)\n\n        &#39; Convert the data to a byte array.\n        Dim original As String = &quot;Here is some data to encrypt.&quot;\n        Dim toEncrypt As Byte() = Encoding.ASCII.GetBytes(original)\n\n        &#39; Write all data to the crypto stream and flush it.\n        csEncrypt.Write(toEncrypt, 0, toEncrypt.Length)\n        csEncrypt.FlushFinalBlock()\n\n        &#39; Get the encrypted array of bytes.\n        Dim encrypted As Byte() = msEncrypt.ToArray()\n\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; This is where the data could be transmitted or saved.          \n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n\n        &#39;Get a decryptor that uses the same key and IV as the encryptor.\n        Dim decryptor As ICryptoTransform = rc2CSP.CreateDecryptor(key, IV)\n\n        &#39; Now decrypt the previously encrypted message using the decryptor\n        &#39; obtained in the above step.\n        Dim msDecrypt As New MemoryStream(encrypted)\n        Dim csDecrypt As New CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read)\n\n        &#39; Read the decrypted bytes from the decrypting stream\n        &#39; and place them in a StringBuilder class.\n        Dim roundtrip As New StringBuilder()\n\n        Dim b As Integer = 0\n\n        Do\n            b = csDecrypt.ReadByte()\n\n            If b &lt;&gt; -1 Then\n                roundtrip.Append(ChrW(b))\n            End If\n        Loop While b &lt;&gt; -1\n\n        &#39; Display the original data and the decrypted data.\n        Console.WriteLine(&quot;Original:   {0}&quot;, original)\n        Console.WriteLine(&quot;Round Trip: {0}&quot;, roundtrip)\n\n        Console.ReadLine()\n\n    End Sub\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_RC2CryptoServiceProvider_EffectiveKeySize\">\r\n    \r\n            <a id=\"System_Security_Cryptography_RC2CryptoServiceProvider_EffectiveKeySize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EffectiveKeySize</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the effective size, in bits, of the secret key used by the <a class=\"xref\" href=\"system.security.cryptography.rc2\" data-linktype=\"relative-path\">RC2</a> algorithm.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int EffectiveKeySize { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The effective key size, in bits, used by the <a class=\"xref\" href=\"system.security.cryptography.rc2\" data-linktype=\"relative-path\">RC2</a> algorithm.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicunexpectedoperationexception\" data-linktype=\"relative-path\">CryptographicUnexpectedOperationException</a></div>\r\n                  </div>\r\n                  <p>The EffectiveKeySize property was set to a value other than the <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_KeySizeValue\" data-linktype=\"relative-path\">KeySizeValue</a> property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_RC2CryptoServiceProvider_UseSalt\">\r\n    \r\n            <a id=\"System_Security_Cryptography_RC2CryptoServiceProvider_UseSalt_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UseSalt</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that determines whether to create a key with an 11-byte-long, zero-value salt.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool UseSalt { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the key should be created with an 11-byte-long, zero-value salt; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The UseSalt property allows you to interoperate with an existing application that uses an 11-byte-long, zero-value salt.  For most scenarios, you should not use a salt with an <a class=\"xref\" href=\"system.security.cryptography.rc2cryptoserviceprovider\" data-linktype=\"relative-path\">RC2CryptoServiceProvider</a> key.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example sets the UseSalt property to <code>true</code>, and then encrypts and decrypts a value.  </p>\n<pre><code class=\"lang-cs\" name=\"Cryptography.RC2CryptoServiceProvider#1\">using System;\nusing System.IO;\nusing System.Text;\nusing System.Security.Cryptography;\n\nnamespace RC2CryptoServiceProvider_Examples\n{\n    class MyMainClass\n    {\n        public static void Main()\n        {\n            byte[] originalBytes = ASCIIEncoding.ASCII.GetBytes(&quot;Here is some data.&quot;);\n\n\t    //Create a new RC2CryptoServiceProvider.\n            RC2CryptoServiceProvider rc2CSP = new RC2CryptoServiceProvider();\n\n            rc2CSP.UseSalt = true;\n\n            rc2CSP.GenerateKey();\n            rc2CSP.GenerateIV();\n\n            //Encrypt the data.\n            MemoryStream msEncrypt = new MemoryStream();\n            CryptoStream csEncrypt = new CryptoStream(msEncrypt, rc2CSP.CreateEncryptor(rc2CSP.Key, rc2CSP.IV), CryptoStreamMode.Write);\n\n            //Write all data to the crypto stream and flush it.\n            csEncrypt.Write(originalBytes, 0, originalBytes.Length);\n            csEncrypt.FlushFinalBlock();\n\n            //Get encrypted array of bytes.\n            byte[] encryptedBytes = msEncrypt.ToArray();            \n\n            //Decrypt the previously encrypted message.\n            MemoryStream msDecrypt = new MemoryStream(encryptedBytes);\n            CryptoStream csDecrypt = new CryptoStream(msDecrypt, rc2CSP.CreateDecryptor(rc2CSP.Key, rc2CSP.IV), CryptoStreamMode.Read);\n\n            byte[] unencryptedBytes = new byte[originalBytes.Length];\n\n            //Read the data out of the crypto stream.\n            csDecrypt.Read(unencryptedBytes, 0, unencryptedBytes.Length);\n\n            //Convert the byte array back into a string.\n            string plaintext = ASCIIEncoding.ASCII.GetString(unencryptedBytes);\n\n            //Display the results.\n            Console.WriteLine(&quot;Unencrypted text: {0}&quot;, plaintext);\n\n            Console.ReadLine();\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Cryptography.RC2CryptoServiceProvider#1\">Imports System\nImports System.IO\nImports System.Text\nImports System.Security.Cryptography\n\n\n\nModule MyMainModule\n\n    Sub Main()\n        Dim originalBytes As Byte() = ASCIIEncoding.ASCII.GetBytes(&quot;Here is some data.&quot;)\n\n        &#39;Create a new RC2CryptoServiceProvider.\n        Dim rc2CSP As New RC2CryptoServiceProvider()\n\n        rc2CSP.UseSalt = True\n\n        rc2CSP.GenerateKey()\n        rc2CSP.GenerateIV()\n\n        &#39;Encrypt the data.\n        Dim msEncrypt As New MemoryStream()\n        Dim csEncrypt As New CryptoStream(msEncrypt, rc2CSP.CreateEncryptor(rc2CSP.Key, rc2CSP.IV), CryptoStreamMode.Write)\n\n        &#39;Write all data to the crypto stream and flush it.\n        csEncrypt.Write(originalBytes, 0, originalBytes.Length)\n        csEncrypt.FlushFinalBlock()\n\n        &#39;Get encrypted array of bytes.\n        Dim encryptedBytes As Byte() = msEncrypt.ToArray()\n\n        &#39;Decrypt the previously encrypted message.\n        Dim msDecrypt As New MemoryStream(encryptedBytes)\n        Dim csDecrypt As New CryptoStream(msDecrypt, rc2CSP.CreateDecryptor(rc2CSP.Key, rc2CSP.IV), CryptoStreamMode.Read)\n\n        Dim unencryptedBytes(originalBytes.Length) As Byte\n\n        &#39;Read the data out of the crypto stream.\n        csDecrypt.Read(unencryptedBytes, 0, unencryptedBytes.Length)\n\n        &#39;Convert the byte array back into a string.\n        Dim plaintext As String = ASCIIEncoding.ASCII.GetString(unencryptedBytes)\n\n        &#39;Display the results.\n        Console.WriteLine(&quot;Unencrypted text: {0}&quot;, plaintext)\n\n        Console.ReadLine()\n\n    End Sub\nEnd Module\n</code></pre><pre><code class=\"lang-cpp\" name=\"Cryptography.RC2CryptoServiceProvider#1\">using namespace System;\nusing namespace System::IO;\nusing namespace System::Text;\nusing namespace System::Security::Cryptography;\n\nint main()\n{\n    array &lt;Byte&gt;^ originalBytes = \n        ASCIIEncoding::ASCII-&gt;GetBytes(&quot;Here is some data.&quot;);\n\n    //Create a new RC2CryptoServiceProvider.\n    RC2CryptoServiceProvider^ rc2Provider = \n        gcnew RC2CryptoServiceProvider();\n    rc2Provider-&gt;UseSalt = true;\n\n    rc2Provider-&gt;GenerateKey();\n    rc2Provider-&gt;GenerateIV();\n\n    //Encrypt the data.\n    MemoryStream^ encryptionMemoryStream = gcnew MemoryStream();\n    CryptoStream^ encryptionCryptoStream = gcnew CryptoStream(\n        encryptionMemoryStream, rc2Provider-&gt;CreateEncryptor(\n        rc2Provider-&gt;Key, rc2Provider-&gt;IV), CryptoStreamMode::Write);\n\n    //Write all data to the crypto stream and flush it.\n    encryptionCryptoStream-&gt;Write(originalBytes, 0, originalBytes-&gt;Length);\n    encryptionCryptoStream-&gt;FlushFinalBlock();\n\n    //Get encrypted array of bytes.\n    array&lt;Byte&gt;^ encryptedBytes = encryptionMemoryStream-&gt;ToArray();\n\n    //Decrypt the previously encrypted message.\n    MemoryStream^ decryptionMemoryStream = \n        gcnew MemoryStream(encryptedBytes);\n    CryptoStream^ decryptionCryptoStream = \n        gcnew CryptoStream(decryptionMemoryStream,\n        rc2Provider-&gt;CreateDecryptor(rc2Provider-&gt;Key,rc2Provider-&gt;IV),\n        CryptoStreamMode::Read);\n\n    array&lt;Byte&gt;^ unencryptedBytes = \n        gcnew array&lt;Byte&gt;(originalBytes-&gt;Length); \n\n    //Read the data out of the crypto stream.\n    decryptionCryptoStream-&gt;Read(unencryptedBytes, 0, \n        unencryptedBytes-&gt;Length);\n\n    //Convert the byte array back into a string.\n    String^ plainText = ASCIIEncoding::ASCII-&gt;GetString(unencryptedBytes);\n\n    //Display the results.\n    Console::WriteLine(&quot;Unencrypted text: {0}&quot;, plainText);\n\n    Console::ReadLine();\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_RC2CryptoServiceProvider_CreateDecryptor_System_Byte___System_Byte___\">\r\n    \r\n            <a id=\"System_Security_Cryptography_RC2CryptoServiceProvider_CreateDecryptor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateDecryptor(Byte[],Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a symmetric <a class=\"xref\" href=\"system.security.cryptography.rc2\" data-linktype=\"relative-path\">RC2</a> decryptor object with the specified key (<span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.Key*</span>)and initialization vector (<span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.IV*</span>).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Security.Cryptography.ICryptoTransform CreateDecryptor (byte[] rgbKey, byte[] rgbIV);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgbKey</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The secret key to use for the symmetric algorithm.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgbIV</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The initialization vector to use for the symmetric algorithm.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.icryptotransform\" data-linktype=\"relative-path\">ICryptoTransform</a></div>\r\n                  </div>\r\n                  <p>A symmetric <a class=\"xref\" href=\"system.security.cryptography.rc2\" data-linktype=\"relative-path\">RC2</a> decryptor object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.security.cryptography.ciphermode\" data-linktype=\"relative-path\">CipherMode</a> cipher mode was used.  </p>\n<p> -or-  </p>\n<p> A <a class=\"xref\" href=\"system.security.cryptography.ciphermode\" data-linktype=\"relative-path\">CipherMode</a> cipher mode with a feedback size other than 8 bits was used.  </p>\n<p> -or-  </p>\n<p> An invalid key size was used.  </p>\n<p> -or-  </p>\n<p> The algorithm key size was not available.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is used to decrypt an encrypted message created using the <a class=\"xref\" href=\"system.security.cryptography.rc2cryptoserviceprovider#System_Security_Cryptography_RC2CryptoServiceProvider_CreateEncryptor_\" data-linktype=\"relative-path\">CreateEncryptor</a> overload with the same parameters.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example encrypts and then decrypts a string.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.RC2CryptoServiceProvider Example#1\">using System;\nusing System.IO;\nusing System.Text;\nusing System.Security.Cryptography;\n\nnamespace RC2CryptoServiceProvider_Examples\n{\n    class MyMainClass\n    {\n        public static void Main()\n        {\n\n            // Create a new instance of the RC2CryptoServiceProvider class\n            // and automatically generate a Key and IV.\n            RC2CryptoServiceProvider rc2CSP = new RC2CryptoServiceProvider();\n\n            Console.WriteLine(&quot;Effective key size is {0} bits.&quot;, rc2CSP.EffectiveKeySize);\n\n            // Get the key and IV.\n            byte[] key = rc2CSP.Key;\n            byte[] IV = rc2CSP.IV;\n\n            // Get an encryptor.\n            ICryptoTransform encryptor = rc2CSP.CreateEncryptor(key, IV);\n\n            // Encrypt the data as an array of encrypted bytes in memory.\n            MemoryStream msEncrypt = new MemoryStream();\n            CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write);\n\n            // Convert the data to a byte array.\n            string original = &quot;Here is some data to encrypt.&quot;;\n            byte[] toEncrypt = Encoding.ASCII.GetBytes(original);\n\n            // Write all data to the crypto stream and flush it.\n            csEncrypt.Write(toEncrypt, 0, toEncrypt.Length);\n            csEncrypt.FlushFinalBlock();\n\n            // Get the encrypted array of bytes.\n            byte[] encrypted = msEncrypt.ToArray();\n\n            ///////////////////////////////////////////////////////\n            // This is where the data could be transmitted or saved.          \n            ///////////////////////////////////////////////////////\n\n            //Get a decryptor that uses the same key and IV as the encryptor.\n            ICryptoTransform decryptor = rc2CSP.CreateDecryptor(key, IV);\n\n            // Now decrypt the previously encrypted message using the decryptor\n            // obtained in the above step.\n            MemoryStream msDecrypt = new MemoryStream(encrypted);\n            CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read);\n\n            // Read the decrypted bytes from the decrypting stream\n            // and place them in a StringBuilder class.\n\n            StringBuilder roundtrip = new StringBuilder();\n            \n            int b = 0;\n\n            do\n            {\n                b = csDecrypt.ReadByte();\n                \n                if (b != -1)\n                {\n                    roundtrip.Append((char)b);\n                }\n\n            } while (b != -1);\n \n\n            // Display the original data and the decrypted data.\n            Console.WriteLine(&quot;Original:   {0}&quot;, original);\n            Console.WriteLine(&quot;Round Trip: {0}&quot;, roundtrip);\n\n            Console.ReadLine();\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.RC2CryptoServiceProvider Example#1\">Imports System\nImports System.IO\nImports System.Text\nImports System.Security.Cryptography\n\n\n\nModule Crypto\n\n    Sub Main()\n\n        &#39; Create a new instance of the RC2CryptoServiceProvider class\n        &#39; and automatically generate a Key and IV.\n        Dim rc2CSP As New RC2CryptoServiceProvider()\n\n        Console.WriteLine(&quot;Effective key size is {0} bits.&quot;, rc2CSP.EffectiveKeySize)\n\n        &#39; Get the key and IV.\n        Dim key As Byte() = rc2CSP.Key\n        Dim IV As Byte() = rc2CSP.IV\n\n        &#39; Get an encryptor.\n        Dim encryptor As ICryptoTransform = rc2CSP.CreateEncryptor(key, IV)\n\n        &#39; Encrypt the data as an array of encrypted bytes in memory.\n        Dim msEncrypt As New MemoryStream()\n        Dim csEncrypt As New CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write)\n\n        &#39; Convert the data to a byte array.\n        Dim original As String = &quot;Here is some data to encrypt.&quot;\n        Dim toEncrypt As Byte() = Encoding.ASCII.GetBytes(original)\n\n        &#39; Write all data to the crypto stream and flush it.\n        csEncrypt.Write(toEncrypt, 0, toEncrypt.Length)\n        csEncrypt.FlushFinalBlock()\n\n        &#39; Get the encrypted array of bytes.\n        Dim encrypted As Byte() = msEncrypt.ToArray()\n\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; This is where the data could be transmitted or saved.          \n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n\n        &#39;Get a decryptor that uses the same key and IV as the encryptor.\n        Dim decryptor As ICryptoTransform = rc2CSP.CreateDecryptor(key, IV)\n\n        &#39; Now decrypt the previously encrypted message using the decryptor\n        &#39; obtained in the above step.\n        Dim msDecrypt As New MemoryStream(encrypted)\n        Dim csDecrypt As New CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read)\n\n        &#39; Read the decrypted bytes from the decrypting stream\n        &#39; and place them in a StringBuilder class.\n        Dim roundtrip As New StringBuilder()\n\n        Dim b As Integer = 0\n\n        Do\n            b = csDecrypt.ReadByte()\n\n            If b &lt;&gt; -1 Then\n                roundtrip.Append(ChrW(b))\n            End If\n        Loop While b &lt;&gt; -1\n\n        &#39; Display the original data and the decrypted data.\n        Console.WriteLine(&quot;Original:   {0}&quot;, original)\n        Console.WriteLine(&quot;Round Trip: {0}&quot;, roundtrip)\n\n        Console.ReadLine()\n\n    End Sub\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_RC2CryptoServiceProvider_CreateEncryptor_System_Byte___System_Byte___\">\r\n    \r\n            <a id=\"System_Security_Cryptography_RC2CryptoServiceProvider_CreateEncryptor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateEncryptor(Byte[],Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a symmetric <a class=\"xref\" href=\"system.security.cryptography.rc2\" data-linktype=\"relative-path\">RC2</a> encryptor object with the specified key (<span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.Key*</span>) and initialization vector (<span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.IV*</span>).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Security.Cryptography.ICryptoTransform CreateEncryptor (byte[] rgbKey, byte[] rgbIV);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgbKey</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The secret key to use for the symmetric algorithm.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgbIV</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The initialization vector to use for the symmetric algorithm.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.icryptotransform\" data-linktype=\"relative-path\">ICryptoTransform</a></div>\r\n                  </div>\r\n                  <p>A symmetric <a class=\"xref\" href=\"system.security.cryptography.rc2\" data-linktype=\"relative-path\">RC2</a> encryptor object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.security.cryptography.ciphermode\" data-linktype=\"relative-path\">CipherMode</a> cipher mode was used.  </p>\n<p> -or-  </p>\n<p> A <a class=\"xref\" href=\"system.security.cryptography.ciphermode\" data-linktype=\"relative-path\">CipherMode</a> cipher mode with a feedback size other than 8 bits was used.  </p>\n<p> -or-  </p>\n<p> An invalid key size was used.  </p>\n<p> -or-  </p>\n<p> The algorithm key size was not available.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <a class=\"xref\" href=\"system.security.cryptography.rc2cryptoserviceprovider#System_Security_Cryptography_RC2CryptoServiceProvider_CreateDecryptor_\" data-linktype=\"relative-path\">CreateDecryptor</a> overload with the same parameters to decrypt the result of this method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example encrypts and then decrypts a string.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.RC2CryptoServiceProvider Example#1\">using System;\nusing System.IO;\nusing System.Text;\nusing System.Security.Cryptography;\n\nnamespace RC2CryptoServiceProvider_Examples\n{\n    class MyMainClass\n    {\n        public static void Main()\n        {\n\n            // Create a new instance of the RC2CryptoServiceProvider class\n            // and automatically generate a Key and IV.\n            RC2CryptoServiceProvider rc2CSP = new RC2CryptoServiceProvider();\n\n            Console.WriteLine(&quot;Effective key size is {0} bits.&quot;, rc2CSP.EffectiveKeySize);\n\n            // Get the key and IV.\n            byte[] key = rc2CSP.Key;\n            byte[] IV = rc2CSP.IV;\n\n            // Get an encryptor.\n            ICryptoTransform encryptor = rc2CSP.CreateEncryptor(key, IV);\n\n            // Encrypt the data as an array of encrypted bytes in memory.\n            MemoryStream msEncrypt = new MemoryStream();\n            CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write);\n\n            // Convert the data to a byte array.\n            string original = &quot;Here is some data to encrypt.&quot;;\n            byte[] toEncrypt = Encoding.ASCII.GetBytes(original);\n\n            // Write all data to the crypto stream and flush it.\n            csEncrypt.Write(toEncrypt, 0, toEncrypt.Length);\n            csEncrypt.FlushFinalBlock();\n\n            // Get the encrypted array of bytes.\n            byte[] encrypted = msEncrypt.ToArray();\n\n            ///////////////////////////////////////////////////////\n            // This is where the data could be transmitted or saved.          \n            ///////////////////////////////////////////////////////\n\n            //Get a decryptor that uses the same key and IV as the encryptor.\n            ICryptoTransform decryptor = rc2CSP.CreateDecryptor(key, IV);\n\n            // Now decrypt the previously encrypted message using the decryptor\n            // obtained in the above step.\n            MemoryStream msDecrypt = new MemoryStream(encrypted);\n            CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read);\n\n            // Read the decrypted bytes from the decrypting stream\n            // and place them in a StringBuilder class.\n\n            StringBuilder roundtrip = new StringBuilder();\n            \n            int b = 0;\n\n            do\n            {\n                b = csDecrypt.ReadByte();\n                \n                if (b != -1)\n                {\n                    roundtrip.Append((char)b);\n                }\n\n            } while (b != -1);\n \n\n            // Display the original data and the decrypted data.\n            Console.WriteLine(&quot;Original:   {0}&quot;, original);\n            Console.WriteLine(&quot;Round Trip: {0}&quot;, roundtrip);\n\n            Console.ReadLine();\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.RC2CryptoServiceProvider Example#1\">Imports System\nImports System.IO\nImports System.Text\nImports System.Security.Cryptography\n\n\n\nModule Crypto\n\n    Sub Main()\n\n        &#39; Create a new instance of the RC2CryptoServiceProvider class\n        &#39; and automatically generate a Key and IV.\n        Dim rc2CSP As New RC2CryptoServiceProvider()\n\n        Console.WriteLine(&quot;Effective key size is {0} bits.&quot;, rc2CSP.EffectiveKeySize)\n\n        &#39; Get the key and IV.\n        Dim key As Byte() = rc2CSP.Key\n        Dim IV As Byte() = rc2CSP.IV\n\n        &#39; Get an encryptor.\n        Dim encryptor As ICryptoTransform = rc2CSP.CreateEncryptor(key, IV)\n\n        &#39; Encrypt the data as an array of encrypted bytes in memory.\n        Dim msEncrypt As New MemoryStream()\n        Dim csEncrypt As New CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write)\n\n        &#39; Convert the data to a byte array.\n        Dim original As String = &quot;Here is some data to encrypt.&quot;\n        Dim toEncrypt As Byte() = Encoding.ASCII.GetBytes(original)\n\n        &#39; Write all data to the crypto stream and flush it.\n        csEncrypt.Write(toEncrypt, 0, toEncrypt.Length)\n        csEncrypt.FlushFinalBlock()\n\n        &#39; Get the encrypted array of bytes.\n        Dim encrypted As Byte() = msEncrypt.ToArray()\n\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; This is where the data could be transmitted or saved.          \n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n\n        &#39;Get a decryptor that uses the same key and IV as the encryptor.\n        Dim decryptor As ICryptoTransform = rc2CSP.CreateDecryptor(key, IV)\n\n        &#39; Now decrypt the previously encrypted message using the decryptor\n        &#39; obtained in the above step.\n        Dim msDecrypt As New MemoryStream(encrypted)\n        Dim csDecrypt As New CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read)\n\n        &#39; Read the decrypted bytes from the decrypting stream\n        &#39; and place them in a StringBuilder class.\n        Dim roundtrip As New StringBuilder()\n\n        Dim b As Integer = 0\n\n        Do\n            b = csDecrypt.ReadByte()\n\n            If b &lt;&gt; -1 Then\n                roundtrip.Append(ChrW(b))\n            End If\n        Loop While b &lt;&gt; -1\n\n        &#39; Display the original data and the decrypted data.\n        Console.WriteLine(&quot;Original:   {0}&quot;, original)\n        Console.WriteLine(&quot;Round Trip: {0}&quot;, roundtrip)\n\n        Console.ReadLine()\n\n    End Sub\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_RC2CryptoServiceProvider_GenerateIV\">\r\n    \r\n            <a id=\"System_Security_Cryptography_RC2CryptoServiceProvider_GenerateIV_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GenerateIV()</div>        \r\n          </div>\r\n    \r\n            <p>Generates a random initialization vector (<span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.IV*</span>) to use for the algorithm.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void GenerateIV ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to generate a random <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_IV_\" data-linktype=\"relative-path\">IV</a> when none is specified.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example encrypts and then decrypts a string.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.RC2CryptoServiceProvider Example#1\">using System;\nusing System.IO;\nusing System.Text;\nusing System.Security.Cryptography;\n\nnamespace RC2CryptoServiceProvider_Examples\n{\n    class MyMainClass\n    {\n        public static void Main()\n        {\n\n            // Create a new instance of the RC2CryptoServiceProvider class\n            // and automatically generate a Key and IV.\n            RC2CryptoServiceProvider rc2CSP = new RC2CryptoServiceProvider();\n\n            Console.WriteLine(&quot;Effective key size is {0} bits.&quot;, rc2CSP.EffectiveKeySize);\n\n            // Get the key and IV.\n            byte[] key = rc2CSP.Key;\n            byte[] IV = rc2CSP.IV;\n\n            // Get an encryptor.\n            ICryptoTransform encryptor = rc2CSP.CreateEncryptor(key, IV);\n\n            // Encrypt the data as an array of encrypted bytes in memory.\n            MemoryStream msEncrypt = new MemoryStream();\n            CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write);\n\n            // Convert the data to a byte array.\n            string original = &quot;Here is some data to encrypt.&quot;;\n            byte[] toEncrypt = Encoding.ASCII.GetBytes(original);\n\n            // Write all data to the crypto stream and flush it.\n            csEncrypt.Write(toEncrypt, 0, toEncrypt.Length);\n            csEncrypt.FlushFinalBlock();\n\n            // Get the encrypted array of bytes.\n            byte[] encrypted = msEncrypt.ToArray();\n\n            ///////////////////////////////////////////////////////\n            // This is where the data could be transmitted or saved.          \n            ///////////////////////////////////////////////////////\n\n            //Get a decryptor that uses the same key and IV as the encryptor.\n            ICryptoTransform decryptor = rc2CSP.CreateDecryptor(key, IV);\n\n            // Now decrypt the previously encrypted message using the decryptor\n            // obtained in the above step.\n            MemoryStream msDecrypt = new MemoryStream(encrypted);\n            CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read);\n\n            // Read the decrypted bytes from the decrypting stream\n            // and place them in a StringBuilder class.\n\n            StringBuilder roundtrip = new StringBuilder();\n            \n            int b = 0;\n\n            do\n            {\n                b = csDecrypt.ReadByte();\n                \n                if (b != -1)\n                {\n                    roundtrip.Append((char)b);\n                }\n\n            } while (b != -1);\n \n\n            // Display the original data and the decrypted data.\n            Console.WriteLine(&quot;Original:   {0}&quot;, original);\n            Console.WriteLine(&quot;Round Trip: {0}&quot;, roundtrip);\n\n            Console.ReadLine();\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.RC2CryptoServiceProvider Example#1\">Imports System\nImports System.IO\nImports System.Text\nImports System.Security.Cryptography\n\n\n\nModule Crypto\n\n    Sub Main()\n\n        &#39; Create a new instance of the RC2CryptoServiceProvider class\n        &#39; and automatically generate a Key and IV.\n        Dim rc2CSP As New RC2CryptoServiceProvider()\n\n        Console.WriteLine(&quot;Effective key size is {0} bits.&quot;, rc2CSP.EffectiveKeySize)\n\n        &#39; Get the key and IV.\n        Dim key As Byte() = rc2CSP.Key\n        Dim IV As Byte() = rc2CSP.IV\n\n        &#39; Get an encryptor.\n        Dim encryptor As ICryptoTransform = rc2CSP.CreateEncryptor(key, IV)\n\n        &#39; Encrypt the data as an array of encrypted bytes in memory.\n        Dim msEncrypt As New MemoryStream()\n        Dim csEncrypt As New CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write)\n\n        &#39; Convert the data to a byte array.\n        Dim original As String = &quot;Here is some data to encrypt.&quot;\n        Dim toEncrypt As Byte() = Encoding.ASCII.GetBytes(original)\n\n        &#39; Write all data to the crypto stream and flush it.\n        csEncrypt.Write(toEncrypt, 0, toEncrypt.Length)\n        csEncrypt.FlushFinalBlock()\n\n        &#39; Get the encrypted array of bytes.\n        Dim encrypted As Byte() = msEncrypt.ToArray()\n\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; This is where the data could be transmitted or saved.          \n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n\n        &#39;Get a decryptor that uses the same key and IV as the encryptor.\n        Dim decryptor As ICryptoTransform = rc2CSP.CreateDecryptor(key, IV)\n\n        &#39; Now decrypt the previously encrypted message using the decryptor\n        &#39; obtained in the above step.\n        Dim msDecrypt As New MemoryStream(encrypted)\n        Dim csDecrypt As New CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read)\n\n        &#39; Read the decrypted bytes from the decrypting stream\n        &#39; and place them in a StringBuilder class.\n        Dim roundtrip As New StringBuilder()\n\n        Dim b As Integer = 0\n\n        Do\n            b = csDecrypt.ReadByte()\n\n            If b &lt;&gt; -1 Then\n                roundtrip.Append(ChrW(b))\n            End If\n        Loop While b &lt;&gt; -1\n\n        &#39; Display the original data and the decrypted data.\n        Console.WriteLine(&quot;Original:   {0}&quot;, original)\n        Console.WriteLine(&quot;Round Trip: {0}&quot;, roundtrip)\n\n        Console.ReadLine()\n\n    End Sub\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_RC2CryptoServiceProvider_GenerateKey\">\r\n    \r\n            <a id=\"System_Security_Cryptography_RC2CryptoServiceProvider_GenerateKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GenerateKey()</div>        \r\n          </div>\r\n    \r\n            <p>Generates a random key (<span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.Key*</span>) to be used for the algorithm.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void GenerateKey ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to generate a random key when none is specified.  </p>\n<p> The <a class=\"xref\" href=\"system.security.cryptography.rc2cryptoserviceprovider\" data-linktype=\"relative-path\">RC2CryptoServiceProvider</a> implementation supports key lengths from 40 bits to 128 bits in increments of 8 bits.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example encrypts and then decrypts a string.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.RC2CryptoServiceProvider Example#1\">using System;\nusing System.IO;\nusing System.Text;\nusing System.Security.Cryptography;\n\nnamespace RC2CryptoServiceProvider_Examples\n{\n    class MyMainClass\n    {\n        public static void Main()\n        {\n\n            // Create a new instance of the RC2CryptoServiceProvider class\n            // and automatically generate a Key and IV.\n            RC2CryptoServiceProvider rc2CSP = new RC2CryptoServiceProvider();\n\n            Console.WriteLine(&quot;Effective key size is {0} bits.&quot;, rc2CSP.EffectiveKeySize);\n\n            // Get the key and IV.\n            byte[] key = rc2CSP.Key;\n            byte[] IV = rc2CSP.IV;\n\n            // Get an encryptor.\n            ICryptoTransform encryptor = rc2CSP.CreateEncryptor(key, IV);\n\n            // Encrypt the data as an array of encrypted bytes in memory.\n            MemoryStream msEncrypt = new MemoryStream();\n            CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write);\n\n            // Convert the data to a byte array.\n            string original = &quot;Here is some data to encrypt.&quot;;\n            byte[] toEncrypt = Encoding.ASCII.GetBytes(original);\n\n            // Write all data to the crypto stream and flush it.\n            csEncrypt.Write(toEncrypt, 0, toEncrypt.Length);\n            csEncrypt.FlushFinalBlock();\n\n            // Get the encrypted array of bytes.\n            byte[] encrypted = msEncrypt.ToArray();\n\n            ///////////////////////////////////////////////////////\n            // This is where the data could be transmitted or saved.          \n            ///////////////////////////////////////////////////////\n\n            //Get a decryptor that uses the same key and IV as the encryptor.\n            ICryptoTransform decryptor = rc2CSP.CreateDecryptor(key, IV);\n\n            // Now decrypt the previously encrypted message using the decryptor\n            // obtained in the above step.\n            MemoryStream msDecrypt = new MemoryStream(encrypted);\n            CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read);\n\n            // Read the decrypted bytes from the decrypting stream\n            // and place them in a StringBuilder class.\n\n            StringBuilder roundtrip = new StringBuilder();\n            \n            int b = 0;\n\n            do\n            {\n                b = csDecrypt.ReadByte();\n                \n                if (b != -1)\n                {\n                    roundtrip.Append((char)b);\n                }\n\n            } while (b != -1);\n \n\n            // Display the original data and the decrypted data.\n            Console.WriteLine(&quot;Original:   {0}&quot;, original);\n            Console.WriteLine(&quot;Round Trip: {0}&quot;, roundtrip);\n\n            Console.ReadLine();\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.RC2CryptoServiceProvider Example#1\">Imports System\nImports System.IO\nImports System.Text\nImports System.Security.Cryptography\n\n\n\nModule Crypto\n\n    Sub Main()\n\n        &#39; Create a new instance of the RC2CryptoServiceProvider class\n        &#39; and automatically generate a Key and IV.\n        Dim rc2CSP As New RC2CryptoServiceProvider()\n\n        Console.WriteLine(&quot;Effective key size is {0} bits.&quot;, rc2CSP.EffectiveKeySize)\n\n        &#39; Get the key and IV.\n        Dim key As Byte() = rc2CSP.Key\n        Dim IV As Byte() = rc2CSP.IV\n\n        &#39; Get an encryptor.\n        Dim encryptor As ICryptoTransform = rc2CSP.CreateEncryptor(key, IV)\n\n        &#39; Encrypt the data as an array of encrypted bytes in memory.\n        Dim msEncrypt As New MemoryStream()\n        Dim csEncrypt As New CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write)\n\n        &#39; Convert the data to a byte array.\n        Dim original As String = &quot;Here is some data to encrypt.&quot;\n        Dim toEncrypt As Byte() = Encoding.ASCII.GetBytes(original)\n\n        &#39; Write all data to the crypto stream and flush it.\n        csEncrypt.Write(toEncrypt, 0, toEncrypt.Length)\n        csEncrypt.FlushFinalBlock()\n\n        &#39; Get the encrypted array of bytes.\n        Dim encrypted As Byte() = msEncrypt.ToArray()\n\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; This is where the data could be transmitted or saved.          \n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n\n        &#39;Get a decryptor that uses the same key and IV as the encryptor.\n        Dim decryptor As ICryptoTransform = rc2CSP.CreateDecryptor(key, IV)\n\n        &#39; Now decrypt the previously encrypted message using the decryptor\n        &#39; obtained in the above step.\n        Dim msDecrypt As New MemoryStream(encrypted)\n        Dim csDecrypt As New CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read)\n\n        &#39; Read the decrypted bytes from the decrypting stream\n        &#39; and place them in a StringBuilder class.\n        Dim roundtrip As New StringBuilder()\n\n        Dim b As Integer = 0\n\n        Do\n            b = csDecrypt.ReadByte()\n\n            If b &lt;&gt; -1 Then\n                roundtrip.Append(ChrW(b))\n            End If\n        Loop While b &lt;&gt; -1\n\n        &#39; Display the original data and the decrypted data.\n        Console.WriteLine(&quot;Original:   {0}&quot;, original)\n        Console.WriteLine(&quot;Round Trip: {0}&quot;, roundtrip)\n\n        Console.ReadLine()\n\n    End Sub\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Security.Cryptography.RC2CryptoServiceProvider.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.Cryptography.RC2CryptoServiceProvider.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.RC2CryptoServiceProvider\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.RC2CryptoServiceProvider..ctor\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.RC2CryptoServiceProvider.CreateDecryptor\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.RC2CryptoServiceProvider.CreateEncryptor\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.RC2CryptoServiceProvider.EffectiveKeySize\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.RC2CryptoServiceProvider.GenerateIV\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.RC2CryptoServiceProvider.GenerateKey\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.RC2CryptoServiceProvider.UseSalt\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"2d539a71-d272-6aff-c3dd-bb12650ea600\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Defines a wrapper object to access the cryptographic service provider (CSP) implementation of the  algorithm. This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Security.Cryptography/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.Cryptography.RC2CryptoServiceProvider\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Security.Cryptography.RC2CryptoServiceProvider.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.Cryptography.RC2CryptoServiceProvider.yml","open_to_public_contributors":true,"api_name":["System.Security.Cryptography.RC2CryptoServiceProvider","System.Security.Cryptography.RC2CryptoServiceProvider..ctor","System.Security.Cryptography.RC2CryptoServiceProvider.CreateDecryptor","System.Security.Cryptography.RC2CryptoServiceProvider.CreateEncryptor","System.Security.Cryptography.RC2CryptoServiceProvider.EffectiveKeySize","System.Security.Cryptography.RC2CryptoServiceProvider.GenerateIV","System.Security.Cryptography.RC2CryptoServiceProvider.GenerateKey","System.Security.Cryptography.RC2CryptoServiceProvider.UseSalt"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.Cryptography.RC2CryptoServiceProvider","System::Security::Cryptography::RC2CryptoServiceProvider","System.Security.Cryptography.RC2CryptoServiceProvider.#ctor","System::Security::Cryptography::RC2CryptoServiceProvider::#ctor","System.Security.Cryptography.RC2CryptoServiceProvider.CreateDecryptor","System::Security::Cryptography::RC2CryptoServiceProvider::CreateDecryptor","System.Security.Cryptography.RC2CryptoServiceProvider.CreateEncryptor","System::Security::Cryptography::RC2CryptoServiceProvider::CreateEncryptor","System.Security.Cryptography.RC2CryptoServiceProvider.EffectiveKeySize","System::Security::Cryptography::RC2CryptoServiceProvider::EffectiveKeySize","System.Security.Cryptography.RC2CryptoServiceProvider.GenerateIV","System::Security::Cryptography::RC2CryptoServiceProvider::GenerateIV","System.Security.Cryptography.RC2CryptoServiceProvider.GenerateKey","System::Security::Cryptography::RC2CryptoServiceProvider::GenerateKey","System.Security.Cryptography.RC2CryptoServiceProvider.UseSalt","System::Security::Cryptography::RC2CryptoServiceProvider::UseSalt"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"2d539a71-d272-6aff-c3dd-bb12650ea600","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Security.Cryptography/RC2CryptoServiceProvider.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"RC2CryptoServiceProvider class | Microsoft Docs","_op_ogTitle":"RC2CryptoServiceProvider class","description":"Defines a wrapper object to access the cryptographic service provider (CSP) implementation of the  algorithm. This class cannot be inherited.\n","toc_asset_id":"_splitted/System.Security.Cryptography/toc.json","toc_rel":"_splitted/System.Security.Cryptography/toc.json","source_url":"","ms.assetid":"System.Security.Cryptography.RC2CryptoServiceProvider","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.cryptography.rc2cryptoserviceprovider","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.cryptography.rc2cryptoserviceprovider","fileRelativePath":"System.Security.Cryptography.RC2CryptoServiceProvider.html"},"themesRelativePathToOutputRoot":"_themes/"}