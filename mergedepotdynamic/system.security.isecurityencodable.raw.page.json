{"content":"    \r\n    <h1 id=\"System_Security_ISecurityEncodable\">\r\n      <span class=\"lang-csharp\">ISecurityEncodable</span>\r\n        Interface\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Defines the methods that convert permission object state to and from XML element representation.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic interface ISecurityEncodable</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The XML representation of permissions is used to describe instances of permissions for code requests, declarative security permission sets, and security policy configuration.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> You must implement this interface for any new permission object.</p>\n</div>\n\r\n    \r\n    \r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_ISecurityEncodable_FromXml_System_Security_SecurityElement_\" data-linktype=\"self-bookmark\">FromXml(SecurityElement)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reconstructs a security object with a specified state from an XML encoding.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_ISecurityEncodable_ToXml\" data-linktype=\"self-bookmark\">ToXml()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an XML encoding of the security object and its current state.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_ISecurityEncodable_FromXml_System_Security_SecurityElement_\">\r\n    \r\n            <a id=\"System_Security_ISecurityEncodable_FromXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FromXml(SecurityElement)</div>        \r\n          </div>\r\n    \r\n            <p>Reconstructs a security object with a specified state from an XML encoding.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void FromXml (System.Security.SecurityElement e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The XML encoding to use to reconstruct the security object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Custom code that extends security objects needs to implement the <a class=\"xref\" href=\"system.security.isecurityencodable#System_Security_ISecurityEncodable_ToXml_\" data-linktype=\"relative-path\">ToXml</a> and FromXml methods to make the objects security-encodable.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates implementing the FromXml method. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.isecurityencodable\" data-linktype=\"relative-path\">ISecurityEncodable</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"Permission#6\">    // Populate the permission&#39;s fields from XML.\n    public override void FromXml(SecurityElement e)\n    {\n        m_specifiedAsUnrestricted = false;\n        m_flags = 0;\n\n        // If XML indicates an unrestricted permission, make this permission unrestricted.\n        String s = (String)e.Attributes[&quot;Unrestricted&quot;];\n        if (s != null)\n        {\n            m_specifiedAsUnrestricted = Convert.ToBoolean(s);\n            if (m_specifiedAsUnrestricted)\n                m_flags = SoundPermissionState.PlayAnySound;\n        }\n\n        // If XML indicates a restricted permission, parse the flags.\n        if (!m_specifiedAsUnrestricted)\n        {\n            s = (String)e.Attributes[&quot;Flags&quot;];\n            if (s != null)\n            {\n                m_flags = (SoundPermissionState)\n                Convert.ToInt32(Enum.Parse(typeof(SoundPermission), s, true));\n            }\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Permission#6\">    &#39; Populate the permission&#39;s fields from XML.\n    Public Overrides Sub FromXml(ByVal e As SecurityElement)\n        m_specifiedAsUnrestricted = False\n        m_flags = 0\n\n        &#39; If XML indicates an unrestricted permission, make this permission unrestricted.\n        Dim s As String = CStr(e.Attributes(&quot;Unrestricted&quot;))\n        If Not (s Is Nothing) Then\n            m_specifiedAsUnrestricted = Convert.ToBoolean(s)\n            If m_specifiedAsUnrestricted Then\n                m_flags = SoundPermissionState.PlayAnySound\n            End If\n        End If\n        &#39; If XML indicates a restricted permission, parse the flags.\n        If Not m_specifiedAsUnrestricted Then\n            s = CStr(e.Attributes(&quot;Flags&quot;))\n            If Not (s Is Nothing) Then\n                m_flags = CType(Convert.ToInt32([Enum].Parse(GetType(SoundPermission), s, True)), SoundPermissionState)\n            End If\n        End If\n\n    End Sub &#39;FromXml\n</code></pre><pre><code class=\"lang-cpp\" name=\"Permission#6\">    // Populate the permission&#39;s fields from XML.\npublic:\n    virtual void FromXml(SecurityElement^ element) override\n    {\n        specifiedAsUnrestricted = false;\n        stateFlags = (SoundPermissionState)0;\n\n        // If XML indicates an unrestricted permission, \n        // make this permission unrestricted.\n        String^ attributeString = \n            (String^) element-&gt;Attributes[&quot;Unrestricted&quot;];\n        if (attributeString != nullptr)\n        {\n            specifiedAsUnrestricted = Convert::ToBoolean(attributeString);\n            if (specifiedAsUnrestricted)\n            {\n                stateFlags = SoundPermissionState::PlayAnySound;\n            }\n        }\n\n        // If XML indicates a restricted permission, parse the flags.\n        if (!specifiedAsUnrestricted)\n        {\n            attributeString = (String^) element-&gt;Attributes[&quot;Flags&quot;];\n            if (attributeString != nullptr)\n            {\n                stateFlags = (SoundPermissionState) Convert::ToInt32(\n                    Enum::Parse(SoundPermissionState::typeid, \n                    attributeString, true));\n            }\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_ISecurityEncodable_ToXml\">\r\n    \r\n            <a id=\"System_Security_ISecurityEncodable_ToXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToXml()</div>        \r\n          </div>\r\n    \r\n            <p>Creates an XML encoding of the security object and its current state.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Security.SecurityElement ToXml ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a></div>\r\n                  </div>\r\n                  <p>An XML encoding of the security object, including any state information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Custom code that extends security objects needs to implement the ToXml and <a class=\"xref\" href=\"system.security.isecurityencodable#System_Security_ISecurityEncodable_FromXml_\" data-linktype=\"relative-path\">FromXml</a> methods to make the objects security-encodable.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates implementing the <a class=\"xref\" href=\"system.security.isecurityencodable#System_Security_ISecurityEncodable_FromXml_\" data-linktype=\"relative-path\">FromXml</a> method. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.isecurityencodable\" data-linktype=\"relative-path\">ISecurityEncodable</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"Permission#7\">    // Produce XML from the permission&#39;s fields.\n    public override SecurityElement ToXml()\n    {\n        // These first three lines create an element with the required format.\n        SecurityElement e = new SecurityElement(&quot;IPermission&quot;);\n        // Replace the double quotation marks (��) with single quotation marks (��)\n        // to remain XML compliant when the culture is not neutral.\n        e.AddAttribute(&quot;class&quot;, GetType().AssemblyQualifiedName.Replace(&#39;\\&quot;&#39;, &#39;\\&#39;&#39;));\n        e.AddAttribute(&quot;version&quot;, &quot;1&quot;);\n\n        if (!m_specifiedAsUnrestricted)\n            e.AddAttribute(&quot;Flags&quot;, Enum.Format(typeof(SoundPermissionState), m_flags, &quot;G&quot;));\n        else\n            e.AddAttribute(&quot;Unrestricted&quot;, &quot;true&quot;);\n        return e;\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Permission#7\">    &#39; Produce XML from the permission&#39;s fields.\n    Public Overrides Function ToXml() As SecurityElement\n        &#39; These first three lines create an element with the required format.\n        Dim e As New SecurityElement(&quot;IPermission&quot;)\n        &#39; Replace the double quotation marks (“”) with single quotation marks (‘’)\n        &#39; to remain XML compliant when the culture is not neutral.\n        e.AddAttribute(&quot;class&quot;, [GetType]().AssemblyQualifiedName.Replace(ControlChars.Quote, &quot;&#39;&quot;c))\n        e.AddAttribute(&quot;version&quot;, &quot;1&quot;)\n\n        If Not m_specifiedAsUnrestricted Then\n            e.AddAttribute(&quot;Flags&quot;, [Enum].Format(GetType(SoundPermissionState), m_flags, &quot;G&quot;))\n        Else\n            e.AddAttribute(&quot;Unrestricted&quot;, &quot;true&quot;)\n        End If\n        Return e\n\n    End Function &#39;ToXml\n</code></pre><pre><code class=\"lang-cpp\" name=\"Permission#7\">    // Produce XML from the permission&#39;s fields.\npublic:\n    virtual SecurityElement^ ToXml() override\n    {\n        // These first three lines create an element with the required format.\n        SecurityElement^ element = gcnew SecurityElement(&quot;IPermission&quot;);\n        // Replace the double quotation marks () \n        // with single quotation marks ()\n        // to remain XML compliant when the culture is not neutral.\n        element-&gt;AddAttribute(&quot;class&quot;, \n            GetType()-&gt;AssemblyQualifiedName-&gt;Replace(&#39;\\&quot;&#39;, &#39;\\&#39;&#39;));\n        element-&gt;AddAttribute(&quot;version&quot;, &quot;1&quot;);\n\n        if (!specifiedAsUnrestricted)\n        {\n            element-&gt;AddAttribute(&quot;Flags&quot;, \n                Enum::Format(SoundPermissionState::typeid, stateFlags, &quot;G&quot;));\n        }   \n        else\n        {\n            element-&gt;AddAttribute(&quot;Unrestricted&quot;, &quot;true&quot;);\n        }\n        return element;\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Security.ISecurityEncodable.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.ISecurityEncodable.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.ISecurityEncodable\">\r\n<meta name=\"APIName\" content=\"System.Security.ISecurityEncodable.FromXml\">\r\n<meta name=\"APIName\" content=\"System.Security.ISecurityEncodable.ToXml\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"951c0ad6-2739-483b-e748-f920db447dea\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Defines the methods that convert permission object state to and from XML element representation.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Security/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.ISecurityEncodable\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Security.ISecurityEncodable.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.ISecurityEncodable.yml","open_to_public_contributors":true,"api_name":["System.Security.ISecurityEncodable","System.Security.ISecurityEncodable.FromXml","System.Security.ISecurityEncodable.ToXml"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.ISecurityEncodable","System::Security::ISecurityEncodable","System.Security.ISecurityEncodable.FromXml","System::Security::ISecurityEncodable::FromXml","System.Security.ISecurityEncodable.ToXml","System::Security::ISecurityEncodable::ToXml"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"951c0ad6-2739-483b-e748-f920db447dea","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Security/ISecurityEncodable.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ISecurityEncodable interface | Microsoft Docs","_op_ogTitle":"ISecurityEncodable interface","description":"Defines the methods that convert permission object state to and from XML element representation.\n","toc_asset_id":"_splitted/System.Security/toc.json","toc_rel":"_splitted/System.Security/toc.json","source_url":"","ms.assetid":"System.Security.ISecurityEncodable","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.isecurityencodable","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.isecurityencodable","fileRelativePath":"System.Security.ISecurityEncodable.html"},"themesRelativePathToOutputRoot":"_themes/"}