{"content":"    \r\n    <h1 id=\"System_Windows_Forms_Application\">\r\n      <span class=\"lang-csharp\">Application</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides <code>static</code> methods and properties to manage an application, such as methods to start and stop an application, to process Windows messages, and properties to get information about an application. This class cannot be inherited.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public sealed class Application</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Application</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The Application class has methods to start and stop applications and threads, and to process Windows messages, as follows:  </p>\n<ul>\n<li><p><a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_Run_\" data-linktype=\"relative-path\">Run</a> starts an application message loop on the current thread and, optionally, makes a form visible.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_Exit_\" data-linktype=\"relative-path\">Exit</a> or <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_ExitThread_\" data-linktype=\"relative-path\">ExitThread</a> stops a message loop.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_DoEvents_\" data-linktype=\"relative-path\">DoEvents</a> processes messages while your program is in a loop.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_AddMessageFilter_\" data-linktype=\"relative-path\">AddMessageFilter</a> adds a message filter to the application message pump to monitor Windows messages.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.windows.forms.imessagefilter\" data-linktype=\"relative-path\">IMessageFilter</a> lets you stop an event from being raised or perform special operations before invoking an event handler.  </p>\n<p>This class has <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_CurrentCulture_\" data-linktype=\"relative-path\">CurrentCulture</a> and <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_CurrentInputLanguage_\" data-linktype=\"relative-path\">CurrentInputLanguage</a> properties to get or set culture information for the current thread.  </p>\n<p>You cannot create an instance of this class.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Application_AllowQuit\" data-linktype=\"self-bookmark\">AllowQuit</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the caller can quit this application.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Application_CommonAppDataPath\" data-linktype=\"self-bookmark\">CommonAppDataPath</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the path for the application data that is shared among all users.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Application_CommonAppDataRegistry\" data-linktype=\"self-bookmark\">CommonAppDataRegistry</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the registry key for the application data that is shared among all users.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Application_CompanyName\" data-linktype=\"self-bookmark\">CompanyName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the company name associated with the application.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Application_CurrentCulture\" data-linktype=\"self-bookmark\">CurrentCulture</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the culture information for the current thread.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Application_CurrentInputLanguage\" data-linktype=\"self-bookmark\">CurrentInputLanguage</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the current input language for the current thread.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Application_ExecutablePath\" data-linktype=\"self-bookmark\">ExecutablePath</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the path for the executable file that started the application, including the executable name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Application_LocalUserAppDataPath\" data-linktype=\"self-bookmark\">LocalUserAppDataPath</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the path for the application data of a local, non-roaming user.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Application_MessageLoop\" data-linktype=\"self-bookmark\">MessageLoop</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether a message loop exists on this thread.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Application_OpenForms\" data-linktype=\"self-bookmark\">OpenForms</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a collection of open forms owned by the application.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Application_ProductName\" data-linktype=\"self-bookmark\">ProductName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the product name associated with this application.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Application_ProductVersion\" data-linktype=\"self-bookmark\">ProductVersion</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the product version associated with this application.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Application_RenderWithVisualStyles\" data-linktype=\"self-bookmark\">RenderWithVisualStyles</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value specifying whether the current application is drawing controls with visual styles.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Application_SafeTopLevelCaptionFormat\" data-linktype=\"self-bookmark\">SafeTopLevelCaptionFormat</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the format string to apply to top-level window captions when they are displayed with a warning banner.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Application_StartupPath\" data-linktype=\"self-bookmark\">StartupPath</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the path for the executable file that started the application, not including the executable name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Application_UserAppDataPath\" data-linktype=\"self-bookmark\">UserAppDataPath</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the path for the application data of a user.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Application_UserAppDataRegistry\" data-linktype=\"self-bookmark\">UserAppDataRegistry</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the registry key for the application data of a user.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Application_UseWaitCursor\" data-linktype=\"self-bookmark\">UseWaitCursor</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets whether the wait cursor is used for all open forms of the application.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Application_VisualStyleState\" data-linktype=\"self-bookmark\">VisualStyleState</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that specifies how visual styles are applied to application windows.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Application_AddMessageFilter_System_Windows_Forms_IMessageFilter_\" data-linktype=\"self-bookmark\">AddMessageFilter(IMessageFilter)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds a message filter to monitor Windows messages as they are routed to their destinations.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Application_DoEvents\" data-linktype=\"self-bookmark\">DoEvents()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Processes all Windows messages currently in the message queue.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Application_EnableVisualStyles\" data-linktype=\"self-bookmark\">EnableVisualStyles()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Enables visual styles for the application.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Application_Exit\" data-linktype=\"self-bookmark\">Exit()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Informs all message pumps that they must terminate, and then closes all application windows after the messages have been processed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Application_Exit_System_ComponentModel_CancelEventArgs_\" data-linktype=\"self-bookmark\">Exit(CancelEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Informs all message pumps that they must terminate, and then closes all application windows after the messages have been processed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Application_ExitThread\" data-linktype=\"self-bookmark\">ExitThread()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Exits the message loop on the current thread and closes all windows on the thread.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Application_FilterMessage_System_Windows_Forms_Message__\" data-linktype=\"self-bookmark\">FilterMessage(Message)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Runs any filters against a window message, and returns a copy of the modified message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Application_OleRequired\" data-linktype=\"self-bookmark\">OleRequired()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes OLE on the current thread.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Application_OnThreadException_System_Exception_\" data-linktype=\"self-bookmark\">OnThreadException(Exception)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_ThreadException\" data-linktype=\"relative-path\">ThreadException</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Application_RaiseIdle_System_EventArgs_\" data-linktype=\"self-bookmark\">RaiseIdle(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_Idle\" data-linktype=\"relative-path\">Idle</a> event in hosted scenarios.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Application_RegisterMessageLoop_System_Windows_Forms_Application_MessageLoopCallback_\" data-linktype=\"self-bookmark\">RegisterMessageLoop(Application+MessageLoopCallback)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Registers a callback for checking whether the message loop is running in hosted environments.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Application_RemoveMessageFilter_System_Windows_Forms_IMessageFilter_\" data-linktype=\"self-bookmark\">RemoveMessageFilter(IMessageFilter)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes a message filter from the message pump of the application.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Application_Restart\" data-linktype=\"self-bookmark\">Restart()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Shuts down the application and starts a new instance immediately.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Application_Run\" data-linktype=\"self-bookmark\">Run()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Begins running a standard application message loop on the current thread, without a form.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Application_Run_System_Windows_Forms_ApplicationContext_\" data-linktype=\"self-bookmark\">Run(ApplicationContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Begins running a standard application message loop on the current thread, with an <a class=\"xref\" href=\"system.windows.forms.applicationcontext\" data-linktype=\"relative-path\">ApplicationContext</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Application_Run_System_Windows_Forms_Form_\" data-linktype=\"self-bookmark\">Run(Form)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Begins running a standard application message loop on the current thread, and makes the specified form visible.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Application_SetCompatibleTextRenderingDefault_System_Boolean_\" data-linktype=\"self-bookmark\">SetCompatibleTextRenderingDefault(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the application-wide default for the <code>UseCompatibleTextRendering</code> property defined on certain controls.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Application_SetSuspendState_System_Windows_Forms_PowerState_System_Boolean_System_Boolean_\" data-linktype=\"self-bookmark\">SetSuspendState(PowerState,Boolean,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Suspends or hibernates the system, or requests that the system be suspended or hibernated.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Application_SetUnhandledExceptionMode_System_Windows_Forms_UnhandledExceptionMode_\" data-linktype=\"self-bookmark\">SetUnhandledExceptionMode(UnhandledExceptionMode)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Instructs the application how to respond to unhandled exceptions.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Application_SetUnhandledExceptionMode_System_Windows_Forms_UnhandledExceptionMode_System_Boolean_\" data-linktype=\"self-bookmark\">SetUnhandledExceptionMode(UnhandledExceptionMode,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Instructs the application how to respond to unhandled exceptions, optionally applying thread-specific behavior.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Application_UnregisterMessageLoop\" data-linktype=\"self-bookmark\">UnregisterMessageLoop()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Unregisters the message loop callback made with <span class=\"xref\">stem.Windows.Forms.Application.RegisterMessageLoop*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Events\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Application_ApplicationExit\" data-linktype=\"self-bookmark\">ApplicationExit</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the application is about to shut down.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Application_EnterThreadModal\" data-linktype=\"self-bookmark\">EnterThreadModal</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the application is about to enter a modal state.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Application_Idle\" data-linktype=\"self-bookmark\">Idle</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the application finishes processing and is about to enter the idle state.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Application_LeaveThreadModal\" data-linktype=\"self-bookmark\">LeaveThreadModal</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the application is about to leave a modal state.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Application_ThreadException\" data-linktype=\"self-bookmark\">ThreadException</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when an untrapped thread exception is thrown.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Application_ThreadExit\" data-linktype=\"self-bookmark\">ThreadExit</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when a thread is about to shut down. When the main thread for an application is about to be shut down, this event is raised first, followed by an <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_ApplicationExit\" data-linktype=\"relative-path\">ApplicationExit</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Application_AllowQuit\">\r\n    \r\n            <a id=\"System_Windows_Forms_Application_AllowQuit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AllowQuit</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the caller can quit this application.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool AllowQuit { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the caller can quit this application; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property returns <code>false</code> if it is called from a <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> being hosted within a Web browser. Thus, the <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> cannot quit the <a class=\"xref\" href=\"system.windows.forms.application\" data-linktype=\"relative-path\">Application</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Application_CommonAppDataPath\">\r\n    \r\n            <a id=\"System_Windows_Forms_Application_CommonAppDataPath_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CommonAppDataPath</div>        \r\n          </div>\r\n    \r\n            <p>Gets the path for the application data that is shared among all users.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string CommonAppDataPath { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The path for the application data that is shared among all users.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If a path does not exist, one is created in the following format:  </p>\n<p> <em>Base Path</em>\\<a href=\"assetId:///P:System.Windows.Forms.Application.CompanyName?qualifyHint=False&amp;autoUpgrade=True\" data-linktype=\"external\">CompanyName</a>\\<a href=\"assetId:///P:System.Windows.Forms.Application.ProductName?qualifyHint=False&amp;autoUpgrade=True\" data-linktype=\"external\">ProductName</a>\\<a href=\"assetId:///P:System.Windows.Forms.Application.ProductVersion?qualifyHint=False&amp;autoUpgrade=True\" data-linktype=\"external\">ProductVersion</a>  </p>\n<p> <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_ProductVersion_\" data-linktype=\"relative-path\">ProductVersion</a> first looks to see if the assembly containing the main executable has the <code>AssemblyInformationalVersion</code> attribute on it. If this attribute exists, it is used for both <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_ProductVersion_\" data-linktype=\"relative-path\">ProductVersion</a> and CommonAppDataPath. If this attribute does not exist, both properties use the version of the executable file instead.  </p>\n<p> The path will be different depending on whether the Windows Forms application is deployed using <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE -->. <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> applications are stored in a per-user application cache in the C:\\Documents and Settings\\<em>username</em> directory. For more information, see <a href=\"../Topic/Accessing%20Local%20and%20Remote%20Data%20in%20ClickOnce%20Applications.md\" data-linktype=\"relative-path\">Accessing Local and Remote Data in ClickOnce Applications</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Application_CommonAppDataRegistry\">\r\n    \r\n            <a id=\"System_Windows_Forms_Application_CommonAppDataRegistry_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CommonAppDataRegistry</div>        \r\n          </div>\r\n    \r\n            <p>Gets the registry key for the application data that is shared among all users.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Microsoft.Win32.RegistryKey CommonAppDataRegistry { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> representing the registry key of the application data that is shared among all users.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the key does not exist, it is created in the following format:  </p>\n<p> LocalMachine\\Software\\<a href=\"assetId:///P:System.Windows.Forms.Application.CompanyName?qualifyHint=False&amp;autoUpgrade=True\" data-linktype=\"external\">CompanyName</a>\\<a href=\"assetId:///P:System.Windows.Forms.Application.ProductName?qualifyHint=False&amp;autoUpgrade=True\" data-linktype=\"external\">ProductName</a>\\<a href=\"assetId:///P:System.Windows.Forms.Application.ProductVersion?qualifyHint=False&amp;autoUpgrade=True\" data-linktype=\"external\">ProductVersion</a></p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Application_CompanyName\">\r\n    \r\n            <a id=\"System_Windows_Forms_Application_CompanyName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CompanyName</div>        \r\n          </div>\r\n    \r\n            <p>Gets the company name associated with the application.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string CompanyName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The company name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example gets this property and displays its value in a text box. The example requires that <code>textBox1</code> has been placed on a form.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic Application.CompanyName Example#1\">private void PrintCompanyName() {\n    textBox1.Text = &quot;The company name is: &quot; + Application.CompanyName;\n }\n   \n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic Application.CompanyName Example#1\">private:\n   void PrintCompanyName()\n   {\n      textBox1-&gt;Text = String::Format( &quot;The company name is: {0}&quot;,\n         Application::CompanyName );\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Application.CompanyName Example#1\"> Private Sub PrintCompanyName()\n    textBox1.Text = &quot;The company name is: &quot; &amp; _\n       Application.CompanyName\n End Sub\n   \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Application_CurrentCulture\">\r\n    \r\n            <a id=\"System_Windows_Forms_Application_CurrentCulture_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CurrentCulture</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the culture information for the current thread.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Globalization.CultureInfo CurrentCulture { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> representing the culture information for the current thread.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example gets this property and displays its value in a text box. The example requires that <code>textBox1</code> has been placed on a form.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Application.CurrentCulture Example#1\">private:\n   void PrintCurrentCulture()\n   {\n      textBox1-&gt;Text = &quot;The current culture is: {0}&quot;,\n         Application::CurrentCulture-&gt;EnglishName;\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Application.CurrentCulture Example#1\">private void PrintCurrentCulture() {\n    textBox1.Text = &quot;The current culture is: &quot; +\n       Application.CurrentCulture.EnglishName;\n }\n   \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Application.CurrentCulture Example#1\"> Private Sub PrintCurrentCulture()\n    textBox1.Text = &quot;The current culture is: &quot; &amp; _\n       Application.CurrentCulture.EnglishName\n End Sub\n   \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Application_CurrentInputLanguage\">\r\n    \r\n            <a id=\"System_Windows_Forms_Application_CurrentInputLanguage_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CurrentInputLanguage</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the current input language for the current thread.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Forms.InputLanguage CurrentInputLanguage { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.inputlanguage\" data-linktype=\"relative-path\">InputLanguage</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.windows.forms.inputlanguage\" data-linktype=\"relative-path\">InputLanguage</a> representing the current input language for the current thread.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example gets this property and displays its value in a text box. The example requires that <code>textBox1</code> has been placed on a form.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic Application.CurrentInputLanguage Example#1\"> Private Sub PrintCurrentInputLanguage()\n    textBox1.Text = &quot;The current input language is: &quot; &amp; _\n       Application.CurrentInputLanguage.Culture.EnglishName\n End Sub\n   \n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Application.CurrentInputLanguage Example#1\">private void PrintCurrentInputLanguage() {\n    textBox1.Text = &quot;The current input language is: &quot; +\n       Application.CurrentInputLanguage.Culture.EnglishName;\n }\n   \n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic Application.CurrentInputLanguage Example#1\">private:\n   void PrintCurrentInputLanguage()\n   {\n      textBox1-&gt;Text = &quot;The current input language is: {0}&quot;,\n         Application::CurrentInputLanguage-&gt;Culture-&gt;EnglishName;\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Application_ExecutablePath\">\r\n    \r\n            <a id=\"System_Windows_Forms_Application_ExecutablePath_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExecutablePath</div>        \r\n          </div>\r\n    \r\n            <p>Gets the path for the executable file that started the application, including the executable name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ExecutablePath { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The path and executable name for the executable file that started the application.  </p>\n<p> This path will be different depending on whether the Windows Forms application is deployed using <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE -->. <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> applications are stored in a per-user application cache in the C:\\Documents and Settings\\<em>username</em> directory. For more information, see <a href=\"../Topic/Accessing%20Local%20and%20Remote%20Data%20in%20ClickOnce%20Applications.md\" data-linktype=\"relative-path\">Accessing Local and Remote Data in ClickOnce Applications</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Application_LocalUserAppDataPath\">\r\n    \r\n            <a id=\"System_Windows_Forms_Application_LocalUserAppDataPath_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LocalUserAppDataPath</div>        \r\n          </div>\r\n    \r\n            <p>Gets the path for the application data of a local, non-roaming user.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string LocalUserAppDataPath { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The path for the application data of a local, non-roaming user.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A local user is one whose user profile is stored on the system on which the user logged on. If a path does not exist, one is created in the following format:  </p>\n<p> <em>Base Path</em>\\<a href=\"assetId:///P:System.Windows.Forms.Application.CompanyName?qualifyHint=False&amp;autoUpgrade=True\" data-linktype=\"external\">CompanyName</a>\\<a href=\"assetId:///P:System.Windows.Forms.Application.ProductName?qualifyHint=False&amp;autoUpgrade=True\" data-linktype=\"external\">ProductName</a>\\<a href=\"assetId:///P:System.Windows.Forms.Application.ProductVersion?qualifyHint=False&amp;autoUpgrade=True\" data-linktype=\"external\">ProductVersion</a>  </p>\n<p> A typical base path is C:\\Documents and Settings\\<em>username</em>\\Local Settings\\Application Data. This path will be different, however, if the Windows Forms application is deployed by using <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE -->. <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> creates its own application data directory that is isolated from all other applications. For more information, see <a href=\"../Topic/Accessing%20Local%20and%20Remote%20Data%20in%20ClickOnce%20Applications.md\" data-linktype=\"relative-path\">Accessing Local and Remote Data in ClickOnce Applications</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays two forms and exits the application when both forms are closed. When the application starts and exits, the position of each form is remembered. Although this example demonstrates using the <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_UserAppDataPath_\" data-linktype=\"relative-path\">UserAppDataPath</a> property to store application data for the user, the LocalUserAppDataPath can be used instead.  </p>\n<p> The <code>MyApplicationContext</code> class inherits from <a class=\"xref\" href=\"system.windows.forms.applicationcontext\" data-linktype=\"relative-path\">ApplicationContext</a> and keeps track when each form is closed, and exits the current thread when they both are. The class stores the positions of each form for the user. The form position data is stored in a file titled <code>Appdata.txt</code> that is created in the location determined by <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_UserAppDataPath_\" data-linktype=\"relative-path\">UserAppDataPath</a>. The <code>Main</code> method calls <code>Application.Run(context)</code> to start the application given the <a class=\"xref\" href=\"system.windows.forms.applicationcontext\" data-linktype=\"relative-path\">ApplicationContext</a>.  </p>\n<p> This code is an excerpt from the example shown in the <a class=\"xref\" href=\"system.windows.forms.applicationcontext\" data-linktype=\"relative-path\">ApplicationContext</a> class overview. Some code is not shown for the purpose of brevity. See <a class=\"xref\" href=\"system.windows.forms.applicationcontext\" data-linktype=\"relative-path\">ApplicationContext</a> for the whole code listing.  </p>\n<pre><code class=\"lang-vb\" name=\"Application#5\">    Public Sub New()\n        MyBase.New()\n        formCount = 0\n\n        &#39; Handle the ApplicationExit event to know when the application is exiting.\n        AddHandler Application.ApplicationExit, AddressOf OnApplicationExit\n\n        Try\n            &#39; Create a file that the application will store user specific data in.\n            userData = New FileStream(Application.UserAppDataPath + &quot;\\appdata.txt&quot;, FileMode.OpenOrCreate)\n\n        Catch e As IOException\n            &#39; Inform the user that an error occurred.\n            MessageBox.Show(&quot;An error occurred while attempting to show the application.&quot; + _\n                            &quot;The error is:&quot; + e.ToString())\n\n            &#39; Exit the current thread instead of showing the windows.\n            ExitThread()\n        End Try\n\n        &#39; Create both application forms and handle the Closed event\n        &#39; to know when both forms are closed.\n        form1 = New AppForm1()\n        AddHandler form1.Closed, AddressOf OnFormClosed\n        AddHandler form1.Closing, AddressOf OnFormClosing\n        formCount = formCount + 1\n\n        form2 = New AppForm2()\n        AddHandler form2.Closed, AddressOf OnFormClosed\n        AddHandler form2.Closing, AddressOf OnFormClosing\n        formCount = formCount + 1\n\n        &#39; Get the form positions based upon the user specific data.\n        If (ReadFormDataFromFile()) Then\n            &#39; If the data was read from the file, set the form\n            &#39; positions manually.\n            form1.StartPosition = FormStartPosition.Manual\n            form2.StartPosition = FormStartPosition.Manual\n\n            form1.Bounds = form1Position\n            form2.Bounds = form2Position\n        End If\n\n        &#39; Show both forms.\n        form1.Show()\n        form2.Show()\n    End Sub\n\n    Private Sub OnApplicationExit(ByVal sender As Object, ByVal e As EventArgs)\n        &#39; When the application is exiting, write the application data to the\n        &#39; user file and close it.\n        WriteFormDataToFile()\n\n        Try\n            &#39; Ignore any errors that might occur while closing the file handle.\n            userData.Close()\n        Catch\n        End Try\n    End Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"Application#5\">   MyApplicationContext()\n   {\n      formCount = 0;\n      \n      // Handle the ApplicationExit event to know when the application is exiting.\n      Application::ApplicationExit += gcnew EventHandler( this, &amp;MyApplicationContext::OnApplicationExit );\n      try\n      {\n         \n         // Create a file that the application will store user specific data in.\n         userData = gcnew FileStream( String::Concat( Application::UserAppDataPath, &quot;\\\\appdata.txt&quot; ),FileMode::OpenOrCreate );\n      }\n      catch ( IOException^ e ) \n      {\n         \n         // Inform the user that an error occurred.\n         MessageBox::Show( &quot;An error occurred while attempting to show the application. The error is: {0}&quot;, dynamic_cast&lt;String^&gt;(e) );\n         \n         // Exit the current thread instead of showing the windows.\n         ExitThread();\n      }\n\n      \n      // Create both application forms and handle the Closed event\n      // to know when both forms are closed.\n      form1 = gcnew AppForm1;\n      form1-&gt;Closed += gcnew EventHandler( this, &amp;MyApplicationContext::OnFormClosed );\n      form1-&gt;Closing += gcnew CancelEventHandler( this, &amp;MyApplicationContext::OnFormClosing );\n      formCount++;\n      form2 = gcnew AppForm2;\n      form2-&gt;Closed += gcnew EventHandler( this, &amp;MyApplicationContext::OnFormClosed );\n      form2-&gt;Closing += gcnew CancelEventHandler( this, &amp;MyApplicationContext::OnFormClosing );\n      formCount++;\n      \n      // Get the form positions based upon the user specific data.\n      if ( ReadFormDataFromFile() )\n      {\n         \n         // If the data was read from the file, set the form\n         // positions manually.\n         form1-&gt;StartPosition = FormStartPosition::Manual;\n         form2-&gt;StartPosition = FormStartPosition::Manual;\n         form1-&gt;Bounds = form1Position;\n         form2-&gt;Bounds = form2Position;\n      }\n\n      \n      // Show both forms.\n      form1-&gt;Show();\n      form2-&gt;Show();\n   }\n\n   void OnApplicationExit( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // When the application is exiting, write the application data to the\n      // user file and close it.\n      WriteFormDataToFile();\n      try\n      {\n         \n         // Ignore any errors that might occur while closing the file handle.\n         userData-&gt;Close();\n      }\n      catch ( Exception^ ) \n      {\n      }\n\n   }\n\n\nprivate:\n</code></pre><pre><code class=\"lang-cs\" name=\"Application#5\">        private MyApplicationContext() {\n            formCount = 0;\n\n            // Handle the ApplicationExit event to know when the application is exiting.\n            Application.ApplicationExit += new EventHandler(this.OnApplicationExit);\n\n            try {\n                // Create a file that the application will store user specific data in.\n                userData = new FileStream(Application.UserAppDataPath + &quot;\\\\appdata.txt&quot;, FileMode.OpenOrCreate);\n\n            } catch(IOException e) {\n                // Inform the user that an error occurred.\n                MessageBox.Show(&quot;An error occurred while attempting to show the application.&quot; + \n                                &quot;The error is:&quot; + e.ToString());\n\n                // Exit the current thread instead of showing the windows.\n                ExitThread();\n            }\n\n            // Create both application forms and handle the Closed event\n            // to know when both forms are closed.\n            form1 = new AppForm1();\n            form1.Closed += new EventHandler(OnFormClosed);            \n            form1.Closing += new CancelEventHandler(OnFormClosing);            \n            formCount++;\n\n            form2 = new AppForm2();\n            form2.Closed += new EventHandler(OnFormClosed);            \n            form2.Closing += new CancelEventHandler(OnFormClosing);            \n            formCount++;\n\n            // Get the form positions based upon the user specific data.\n            if (ReadFormDataFromFile()) {\n                // If the data was read from the file, set the form\n                // positions manually.\n                form1.StartPosition = FormStartPosition.Manual;\n                form2.StartPosition = FormStartPosition.Manual;\n                \n                form1.Bounds = form1Position;\n                form2.Bounds = form2Position;\n            }\n\n            // Show both forms.\n            form1.Show();\n            form2.Show();\n        }\n\n        private void OnApplicationExit(object sender, EventArgs e) {\n            // When the application is exiting, write the application data to the\n            // user file and close it.\n            WriteFormDataToFile();\n\n            try {\n                // Ignore any errors that might occur while closing the file handle.\n                userData.Close();\n            } catch {}\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Application_MessageLoop\">\r\n    \r\n            <a id=\"System_Windows_Forms_Application_MessageLoop_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MessageLoop</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether a message loop exists on this thread.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool MessageLoop { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if a message loop exists; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When hosting Windows Forms in other environments, such as unmanaged applications, this property will always return <code>false</code>. Use <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_RegisterMessageLoop_\" data-linktype=\"relative-path\">RegisterMessageLoop</a> to instruct Windows Forms if the hosting environment still has an active message loop.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Application_OpenForms\">\r\n    \r\n            <a id=\"System_Windows_Forms_Application_OpenForms_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OpenForms</div>        \r\n          </div>\r\n    \r\n            <p>Gets a collection of open forms owned by the application.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Forms.FormCollection OpenForms { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.formcollection\" data-linktype=\"relative-path\">FormCollection</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.formcollection\" data-linktype=\"relative-path\">FormCollection</a> containing all the currently open forms owned by this application.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The OpenForms property represents a read-only collection of forms owned by the application. This collection can be searched by index position or by the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Name_\" data-linktype=\"relative-path\">Name</a> of the <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Application_ProductName\">\r\n    \r\n            <a id=\"System_Windows_Forms_Application_ProductName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ProductName</div>        \r\n          </div>\r\n    \r\n            <p>Gets the product name associated with this application.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ProductName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The product name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>ProductName</code> is taken from the metadata of the assembly containing the main form of the current application. You can set it by setting <a class=\"xref\" href=\"system.reflection.assemblyproductattribute\" data-linktype=\"relative-path\">AssemblyProductAttribute</a> inside of your assembly manifest. For more information, see <a href=\"../Topic/Assembly%20Manifest.md\" data-linktype=\"relative-path\">Assembly Manifest</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example gets this property and displays its value in a text box. The example requires that <code>textBox1</code> has been placed on a form.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Application.ProductName Example#1\">private:\n   void PrintProductName()\n   {\n      textBox1-&gt;Text = &quot;The product name is: {0}&quot;,\n         Application::ProductName;\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Application.ProductName Example#1\"> Private Sub PrintProductName()\n    textBox1.Text = &quot;The product name is: &quot; &amp; _\n       Application.ProductName\n End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Application.ProductName Example#1\">private void PrintProductName() {\n    textBox1.Text = &quot;The product name is: &quot; +\n       Application.ProductName;\n }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Application_ProductVersion\">\r\n    \r\n            <a id=\"System_Windows_Forms_Application_ProductVersion_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ProductVersion</div>        \r\n          </div>\r\n    \r\n            <p>Gets the product version associated with this application.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ProductVersion { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The product version.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Typically, a version number displays as <em>major number</em>.<em>minor number</em>.<em>build number</em>.<em>private part number</em>. You can set it explicitly by setting the assembly version within your assembly manifest. For more information, see <a href=\"../Topic/Assembly%20Manifest.md\" data-linktype=\"relative-path\">Assembly Manifest</a>.  </p>\n<p> ProductVersion first looks to see if the assembly containing the main executable has the <code>AssemblyInformationalVersion</code> attribute on it. If this attribute exists, it is used for both ProductVersion and <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_CommonAppDataPath_\" data-linktype=\"relative-path\">CommonAppDataPath</a>. If this attribute does not exist, both properties use the version of the executable file instead.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example gets this property and displays its value in a text box. The example requires that <code>textBox1</code> has been placed on a form.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Application.ProductVersion Example#1\">private:\n   void PrintProductVersion()\n   {\n      textBox1-&gt;Text = &quot;The product version is: {0}&quot;,\n         Application::ProductVersion;\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Application.ProductVersion Example#1\">private void PrintProductVersion() {\n    textBox1.Text = &quot;The product version is: &quot; +\n       Application.ProductVersion;\n }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Application.ProductVersion Example#1\"> Private Sub PrintProductVersion()\n    textBox1.Text = &quot;The product version is: &quot; &amp; _\n       Application.ProductVersion\n End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Application_RenderWithVisualStyles\">\r\n    \r\n            <a id=\"System_Windows_Forms_Application_RenderWithVisualStyles_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RenderWithVisualStyles</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value specifying whether the current application is drawing controls with visual styles.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool RenderWithVisualStyles { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if visual styles are enabled for controls in the client area of application windows; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If you are drawing a custom control, use this property to decide whether to draw the control with or without visual styles, so that its appearance is consistent with other controls in the application.  </p>\n<p> The following table shows the four conditions that must exist for RenderWithVisualStyles to return <code>true</code>.  </p>\n<table>\n<thead>\n<tr>\n<th>Condition</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>The operating system supports visual styles</td>\n<td>To verify this condition separately, use the <a class=\"xref\" href=\"system.windows.forms.visualstyles.visualstyleinformation#System_Windows_Forms_VisualStyles_VisualStyleInformation_IsSupportedByOS_\" data-linktype=\"relative-path\">IsSupportedByOS</a> property of the <a class=\"xref\" href=\"system.windows.forms.visualstyles.visualstyleinformation\" data-linktype=\"relative-path\">VisualStyleInformation</a> class.</td>\n</tr>\n<tr>\n<td>The user has enabled visual styles in the operating system</td>\n<td>To verify this condition separately, use the <a class=\"xref\" href=\"system.windows.forms.visualstyles.visualstyleinformation#System_Windows_Forms_VisualStyles_VisualStyleInformation_IsEnabledByUser_\" data-linktype=\"relative-path\">IsEnabledByUser</a> property of the <a class=\"xref\" href=\"system.windows.forms.visualstyles.visualstyleinformation\" data-linktype=\"relative-path\">VisualStyleInformation</a> class.</td>\n</tr>\n<tr>\n<td>Visual styles are enabled in the application</td>\n<td>Visual styles can be enabled in an application by calling the <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_EnableVisualStyles\" data-linktype=\"relative-path\">EnableVisualStyles()</a> method or by using an application manifest that specifies that ComCtl32.dll version 6 or later will be used to draw controls.</td>\n</tr>\n<tr>\n<td>Visual styles are being used to draw the client area of application windows</td>\n<td>To verify this condition separately, use the <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_VisualStyleState_\" data-linktype=\"relative-path\">VisualStyleState</a> property of the <a class=\"xref\" href=\"system.windows.forms.application\" data-linktype=\"relative-path\">Application</a> class and verify that it has the value <a class=\"xref\" href=\"system.windows.forms.visualstyles.visualstylestate\" data-linktype=\"relative-path\">System.Windows.Forms.VisualStyles.VisualStyleState</a> or <a class=\"xref\" href=\"system.windows.forms.visualstyles.visualstylestate\" data-linktype=\"relative-path\">System.Windows.Forms.VisualStyles.VisualStyleState</a>.</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Application_SafeTopLevelCaptionFormat\">\r\n    \r\n            <a id=\"System_Windows_Forms_Application_SafeTopLevelCaptionFormat_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SafeTopLevelCaptionFormat</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the format string to apply to top-level window captions when they are displayed with a warning banner.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string SafeTopLevelCaptionFormat { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The format string to apply to top-level window captions.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Application_StartupPath\">\r\n    \r\n            <a id=\"System_Windows_Forms_Application_StartupPath_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StartupPath</div>        \r\n          </div>\r\n    \r\n            <p>Gets the path for the executable file that started the application, not including the executable name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string StartupPath { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The path for the executable file that started the application.  </p>\n<p> This path will be different depending on whether the Windows Forms application is deployed using <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE -->. <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> applications are stored in a per-user application cache in the C:\\Documents and Settings\\<em>username</em> directory. For more information, see <a href=\"../Topic/Accessing%20Local%20and%20Remote%20Data%20in%20ClickOnce%20Applications.md\" data-linktype=\"relative-path\">Accessing Local and Remote Data in ClickOnce Applications</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example gets this property and displays its value in a text box. The example requires that <code>textBox1</code> has been placed on a form.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Application.StartupPath Example#1\">private:\n   void PrintStartupPath()\n   {\n      textBox1-&gt;Text = String::Concat( &quot;The path for the executable file&quot;,\n        &quot; that started the application is: &quot;, Application::StartupPath );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Application.StartupPath Example#1\">private void PrintStartupPath() {\n    textBox1.Text = &quot;The path for the executable file that &quot; +\n       &quot;started the application is: &quot; +\n       Application.StartupPath;\n }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Application.StartupPath Example#1\"> Private Sub PrintStartupPath()\n    textBox1.Text = &quot;The path for the executable file that &quot; &amp; _\n       &quot;started the application is: &quot; &amp; _\n       Application.StartupPath\n End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Application_UserAppDataPath\">\r\n    \r\n            <a id=\"System_Windows_Forms_Application_UserAppDataPath_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UserAppDataPath</div>        \r\n          </div>\r\n    \r\n            <p>Gets the path for the application data of a user.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string UserAppDataPath { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The path for the application data of a user.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If a path does not exist, one is created in the following format:  </p>\n<p> <em>Base Path</em>\\<a href=\"assetId:///P:System.Windows.Forms.Application.CompanyName?qualifyHint=False&amp;autoUpgrade=True\" data-linktype=\"external\">CompanyName</a>\\<a href=\"assetId:///P:System.Windows.Forms.Application.ProductName?qualifyHint=False&amp;autoUpgrade=True\" data-linktype=\"external\">ProductName</a>\\<a href=\"assetId:///P:System.Windows.Forms.Application.ProductVersion?qualifyHint=False&amp;autoUpgrade=True\" data-linktype=\"external\">ProductVersion</a>  </p>\n<p> Data stored in this path is part of user profile that is enabled for roaming. A roaming user works on more than one computer in a network. The user profile for a roaming user is kept on a server on the network and is loaded onto a system when the user logs on. For a user profile to be considered for roaming, the operating system must support roaming profiles and it must be enabled.  </p>\n<p> A typical base path is C:\\Documents and Settings\\<em>username</em>\\Application Data. This path will be different, however, if the Windows Forms application is deployed by using <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE -->. <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> creates its own application data directory that is isolated from all other applications. For more information, see <a href=\"../Topic/Accessing%20Local%20and%20Remote%20Data%20in%20ClickOnce%20Applications.md\" data-linktype=\"relative-path\">Accessing Local and Remote Data in ClickOnce Applications</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays two forms and exits the application when both forms are closed. When the application starts and exits, the position of each form is remembered. This example demonstrates using the UserAppDataPath property to store application data for the user.  </p>\n<p> The class <code>MyApplicationContext</code> inherits from <a class=\"xref\" href=\"system.windows.forms.applicationcontext\" data-linktype=\"relative-path\">ApplicationContext</a> and keeps track when each form is closed, and exits the current thread when they both are. The class stores the positions of each form for the user. The form position data is stored in a file titled <code>Appdata.txt</code> that is created in the location determined by UserAppDataPath. The <code>Main</code> method calls <code>Application.Run(context)</code> to start the application given the <a class=\"xref\" href=\"system.windows.forms.applicationcontext\" data-linktype=\"relative-path\">ApplicationContext</a>.  </p>\n<p> This code is an excerpt from the example shown in the <a class=\"xref\" href=\"system.windows.forms.applicationcontext\" data-linktype=\"relative-path\">ApplicationContext</a> class overview. Some code is not shown for the purpose of brevity. See <a class=\"xref\" href=\"system.windows.forms.applicationcontext\" data-linktype=\"relative-path\">ApplicationContext</a> for the whole code listing.  </p>\n<pre><code class=\"lang-vb\" name=\"Application#5\">    Public Sub New()\n        MyBase.New()\n        formCount = 0\n\n        &#39; Handle the ApplicationExit event to know when the application is exiting.\n        AddHandler Application.ApplicationExit, AddressOf OnApplicationExit\n\n        Try\n            &#39; Create a file that the application will store user specific data in.\n            userData = New FileStream(Application.UserAppDataPath + &quot;\\appdata.txt&quot;, FileMode.OpenOrCreate)\n\n        Catch e As IOException\n            &#39; Inform the user that an error occurred.\n            MessageBox.Show(&quot;An error occurred while attempting to show the application.&quot; + _\n                            &quot;The error is:&quot; + e.ToString())\n\n            &#39; Exit the current thread instead of showing the windows.\n            ExitThread()\n        End Try\n\n        &#39; Create both application forms and handle the Closed event\n        &#39; to know when both forms are closed.\n        form1 = New AppForm1()\n        AddHandler form1.Closed, AddressOf OnFormClosed\n        AddHandler form1.Closing, AddressOf OnFormClosing\n        formCount = formCount + 1\n\n        form2 = New AppForm2()\n        AddHandler form2.Closed, AddressOf OnFormClosed\n        AddHandler form2.Closing, AddressOf OnFormClosing\n        formCount = formCount + 1\n\n        &#39; Get the form positions based upon the user specific data.\n        If (ReadFormDataFromFile()) Then\n            &#39; If the data was read from the file, set the form\n            &#39; positions manually.\n            form1.StartPosition = FormStartPosition.Manual\n            form2.StartPosition = FormStartPosition.Manual\n\n            form1.Bounds = form1Position\n            form2.Bounds = form2Position\n        End If\n\n        &#39; Show both forms.\n        form1.Show()\n        form2.Show()\n    End Sub\n\n    Private Sub OnApplicationExit(ByVal sender As Object, ByVal e As EventArgs)\n        &#39; When the application is exiting, write the application data to the\n        &#39; user file and close it.\n        WriteFormDataToFile()\n\n        Try\n            &#39; Ignore any errors that might occur while closing the file handle.\n            userData.Close()\n        Catch\n        End Try\n    End Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"Application#5\">   MyApplicationContext()\n   {\n      formCount = 0;\n      \n      // Handle the ApplicationExit event to know when the application is exiting.\n      Application::ApplicationExit += gcnew EventHandler( this, &amp;MyApplicationContext::OnApplicationExit );\n      try\n      {\n         \n         // Create a file that the application will store user specific data in.\n         userData = gcnew FileStream( String::Concat( Application::UserAppDataPath, &quot;\\\\appdata.txt&quot; ),FileMode::OpenOrCreate );\n      }\n      catch ( IOException^ e ) \n      {\n         \n         // Inform the user that an error occurred.\n         MessageBox::Show( &quot;An error occurred while attempting to show the application. The error is: {0}&quot;, dynamic_cast&lt;String^&gt;(e) );\n         \n         // Exit the current thread instead of showing the windows.\n         ExitThread();\n      }\n\n      \n      // Create both application forms and handle the Closed event\n      // to know when both forms are closed.\n      form1 = gcnew AppForm1;\n      form1-&gt;Closed += gcnew EventHandler( this, &amp;MyApplicationContext::OnFormClosed );\n      form1-&gt;Closing += gcnew CancelEventHandler( this, &amp;MyApplicationContext::OnFormClosing );\n      formCount++;\n      form2 = gcnew AppForm2;\n      form2-&gt;Closed += gcnew EventHandler( this, &amp;MyApplicationContext::OnFormClosed );\n      form2-&gt;Closing += gcnew CancelEventHandler( this, &amp;MyApplicationContext::OnFormClosing );\n      formCount++;\n      \n      // Get the form positions based upon the user specific data.\n      if ( ReadFormDataFromFile() )\n      {\n         \n         // If the data was read from the file, set the form\n         // positions manually.\n         form1-&gt;StartPosition = FormStartPosition::Manual;\n         form2-&gt;StartPosition = FormStartPosition::Manual;\n         form1-&gt;Bounds = form1Position;\n         form2-&gt;Bounds = form2Position;\n      }\n\n      \n      // Show both forms.\n      form1-&gt;Show();\n      form2-&gt;Show();\n   }\n\n   void OnApplicationExit( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // When the application is exiting, write the application data to the\n      // user file and close it.\n      WriteFormDataToFile();\n      try\n      {\n         \n         // Ignore any errors that might occur while closing the file handle.\n         userData-&gt;Close();\n      }\n      catch ( Exception^ ) \n      {\n      }\n\n   }\n\n\nprivate:\n</code></pre><pre><code class=\"lang-cs\" name=\"Application#5\">        private MyApplicationContext() {\n            formCount = 0;\n\n            // Handle the ApplicationExit event to know when the application is exiting.\n            Application.ApplicationExit += new EventHandler(this.OnApplicationExit);\n\n            try {\n                // Create a file that the application will store user specific data in.\n                userData = new FileStream(Application.UserAppDataPath + &quot;\\\\appdata.txt&quot;, FileMode.OpenOrCreate);\n\n            } catch(IOException e) {\n                // Inform the user that an error occurred.\n                MessageBox.Show(&quot;An error occurred while attempting to show the application.&quot; + \n                                &quot;The error is:&quot; + e.ToString());\n\n                // Exit the current thread instead of showing the windows.\n                ExitThread();\n            }\n\n            // Create both application forms and handle the Closed event\n            // to know when both forms are closed.\n            form1 = new AppForm1();\n            form1.Closed += new EventHandler(OnFormClosed);            \n            form1.Closing += new CancelEventHandler(OnFormClosing);            \n            formCount++;\n\n            form2 = new AppForm2();\n            form2.Closed += new EventHandler(OnFormClosed);            \n            form2.Closing += new CancelEventHandler(OnFormClosing);            \n            formCount++;\n\n            // Get the form positions based upon the user specific data.\n            if (ReadFormDataFromFile()) {\n                // If the data was read from the file, set the form\n                // positions manually.\n                form1.StartPosition = FormStartPosition.Manual;\n                form2.StartPosition = FormStartPosition.Manual;\n                \n                form1.Bounds = form1Position;\n                form2.Bounds = form2Position;\n            }\n\n            // Show both forms.\n            form1.Show();\n            form2.Show();\n        }\n\n        private void OnApplicationExit(object sender, EventArgs e) {\n            // When the application is exiting, write the application data to the\n            // user file and close it.\n            WriteFormDataToFile();\n\n            try {\n                // Ignore any errors that might occur while closing the file handle.\n                userData.Close();\n            } catch {}\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Application_UserAppDataRegistry\">\r\n    \r\n            <a id=\"System_Windows_Forms_Application_UserAppDataRegistry_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UserAppDataRegistry</div>        \r\n          </div>\r\n    \r\n            <p>Gets the registry key for the application data of a user.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Microsoft.Win32.RegistryKey UserAppDataRegistry { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> representing the registry key for the application data specific to the user.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the key does not exist, it is created in the following format:  </p>\n<p> CurrentUser\\Software\\<a href=\"assetId:///P:System.Windows.Forms.Application.CompanyName?qualifyHint=False&amp;autoUpgrade=True\" data-linktype=\"external\">CompanyName</a>\\<a href=\"assetId:///P:System.Windows.Forms.Application.ProductName?qualifyHint=False&amp;autoUpgrade=True\" data-linktype=\"external\">ProductName</a>\\<a href=\"assetId:///P:System.Windows.Forms.Application.ProductVersion?qualifyHint=False&amp;autoUpgrade=True\" data-linktype=\"external\">ProductVersion</a>  </p>\n<p> Data stored in this key is part of user profile that is enabled for roaming. A roaming user works on more than one computer in a network. The user profile for a roaming user is kept on a server on the network and is loaded onto a system when the user logs on. For a user profile to be considered for roaming, the operating system must support roaming profiles and it must be enabled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Application_UseWaitCursor\">\r\n    \r\n            <a id=\"System_Windows_Forms_Application_UseWaitCursor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UseWaitCursor</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets whether the wait cursor is used for all open forms of the application.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool UseWaitCursor { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> is the wait cursor is used for all open forms; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When this property is set to <code>true</code>, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_UseWaitCursor_\" data-linktype=\"relative-path\">UseWaitCursor</a> property of all open forms in the application will be set to <code>true</code>. This call will not return until this property has been set on all forms. Use this property when you have a long-running operation, and want to indicate in all application forms that the operation is still processing.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Application_VisualStyleState\">\r\n    \r\n            <a id=\"System_Windows_Forms_Application_VisualStyleState_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">VisualStyleState</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that specifies how visual styles are applied to application windows.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Forms.VisualStyles.VisualStyleState VisualStyleState { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.visualstyles.visualstylestate\" data-linktype=\"relative-path\">VisualStyleState</a></div>\r\n                  </div>\r\n                  <p>A bitwise combination of the <a class=\"xref\" href=\"system.windows.forms.visualstyles.visualstylestate\" data-linktype=\"relative-path\">VisualStyleState</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This VisualStyleState property determines whether visual styles are enabled in client areas or nonclient areas of application windows. Generally, this property should be set within the main form&#39;s constructor or <a class=\"xref\" href=\"system.windows.forms.form#System_Windows_Forms_Form_Load\" data-linktype=\"relative-path\">Load</a> event handler.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example sets the VisualStyleState property to one of the <a class=\"xref\" href=\"system.windows.forms.visualstyles.visualstylestate\" data-linktype=\"relative-path\">System.Windows.Forms.VisualStyles.VisualStyleState</a> values within the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Click\" data-linktype=\"relative-path\">Click</a> event handler for a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> control. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.windows.forms.visualstyles.visualstylestate\" data-linktype=\"relative-path\">System.Windows.Forms.VisualStyles.VisualStyleState</a> enumeration.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.VisualStyles.VisualStyleState#10\">    private:\n        void UpdateButton_Click(Object^ sender, EventArgs^ e)\n        {\n            if (applyToClient-&gt;Checked)\n            {\n                Application::VisualStyleState =\n                    VisualStyleState::ClientAreaEnabled;\n            }\n            else if (applyToNonClient-&gt;Checked)\n            {\n                Application::VisualStyleState =\n                    VisualStyleState::NonClientAreaEnabled;\n            }\n            else if (applyToAll-&gt;Checked)\n            {\n                Application::VisualStyleState =\n                    VisualStyleState::ClientAndNonClientAreasEnabled;\n            }\n            else if (disableStyles-&gt;Checked)\n            {\n                Application::VisualStyleState =\n                    VisualStyleState::NoneEnabled;\n            }\n\n            // Repaint the form and all child controls.\n            this-&gt;Invalidate(true);\n        }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.VisualStyles.VisualStyleState#10\">\t\tvoid button1_Click(object sender, EventArgs e)\n\t\t{\n\t\t\tif (radioButton1.Checked)\n\t\t\t{\n\t\t\t\tApplication.VisualStyleState =\n\t\t\t\t\tVisualStyleState.ClientAreaEnabled;\n\t\t\t}\n\t\t\telse if (radioButton2.Checked)\n\t\t\t{\n\t\t\t\tApplication.VisualStyleState =\n\t\t\t\t\tVisualStyleState.NonClientAreaEnabled;\n\t\t\t}\n\t\t\telse if (radioButton3.Checked)\n\t\t\t{\n\t\t\t\tApplication.VisualStyleState =\n\t\t\t\t\tVisualStyleState.ClientAndNonClientAreasEnabled;\n\t\t\t}\n\t\t\telse if (radioButton4.Checked)\n\t\t\t{\n\t\t\t\tApplication.VisualStyleState =\n\t\t\t\t\tVisualStyleState.NoneEnabled;\n\t\t\t}\n\n\t\t\t// Repaint the form and all child controls.\n\t\t\tthis.Invalidate(true);\n\t\t}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.VisualStyles.VisualStyleState#10\">        Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs) _\n            Handles button1.Click\n\n            If radioButton1.Checked Then\n                Application.VisualStyleState = _\n                    VisualStyleState.ClientAreaEnabled\n            ElseIf radioButton2.Checked Then\n                Application.VisualStyleState = _\n                    VisualStyleState.NonClientAreaEnabled\n            ElseIf radioButton3.Checked Then\n                Application.VisualStyleState = _\n                    VisualStyleState.ClientAndNonClientAreasEnabled\n            ElseIf radioButton4.Checked Then\n                Application.VisualStyleState = _\n                    VisualStyleState.NoneEnabled\n            End If\n\n            &#39; Repaint the form and all child controls.\n            Me.Invalidate(True)\n        End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Application_AddMessageFilter_System_Windows_Forms_IMessageFilter_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Application_AddMessageFilter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddMessageFilter(IMessageFilter)</div>        \r\n          </div>\r\n    \r\n            <p>Adds a message filter to monitor Windows messages as they are routed to their destinations.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void AddMessageFilter (System.Windows.Forms.IMessageFilter value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.imessagefilter\" data-linktype=\"relative-path\">IMessageFilter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The implementation of the <a class=\"xref\" href=\"system.windows.forms.imessagefilter\" data-linktype=\"relative-path\">IMessageFilter</a> interface you want to install.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use a message filter to prevent specific events from being raised or to perform special operations for an event before it is passed to an event handler. Message filters are unique to a specific thread.  </p>\n<p> To prevent a message from being dispatched, the <code>value</code> parameter instance that you pass to this method must override the <a class=\"xref\" href=\"system.windows.forms.imessagefilter#System_Windows_Forms_IMessageFilter_PreFilterMessage_\" data-linktype=\"relative-path\">PreFilterMessage</a> method with the code to handle the message. The method must return <code>false</code>.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Adding message filters to the message pump for an application can degrade performance.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a message filter called <code>TestMessageFilter</code>. This filter blocks all messages relating to the left mouse button. Before you can use a message filter, you must provide an implementation for the <a class=\"xref\" href=\"system.windows.forms.imessagefilter\" data-linktype=\"relative-path\">IMessageFilter</a> interface.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Application.RemoveMessageFilter Example#1\">   // Creates a  message filter.\n   ref class TestMessageFilter: public IMessageFilter\n   {\n   public:\n      [SecurityPermission(SecurityAction::LinkDemand, Flags = SecurityPermissionFlag::UnmanagedCode)]\n      virtual bool PreFilterMessage( Message % m )\n      {\n         \n         // Blocks all the messages relating to the left mouse button.\n         if ( m.Msg &gt;= 513 &amp;&amp; m.Msg &lt;= 515 )\n         {\n            Console::WriteLine( &quot;Processing the messages : {0}&quot;, m.Msg );\n            return true;\n         }\n\n         return false;\n      }\n\n   };\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Application.RemoveMessageFilter Example#1\">&#39; Creates a message filter.\n&lt;SecurityPermission(SecurityAction.LinkDemand, Flags := SecurityPermissionFlag.UnmanagedCode)&gt; _\nPublic Class TestMessageFilter\n    Implements IMessageFilter\n\n    &lt;SecurityPermission(SecurityAction.Demand)&gt; _\n    Public Function PreFilterMessage(ByRef m As System.Windows.Forms.Message) _\n    As Boolean Implements IMessageFilter.PreFilterMessage\n        &#39; Blocks all the messages relating to the left mouse button.\n        If ((m.Msg &gt;= 513) And (m.Msg &lt;= 515)) Then\n            Console.WriteLine(&quot;Processing the messages : &quot; &amp; m.Msg)\n            Return True\n        End If\n        Return False\n    End Function\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Application.RemoveMessageFilter Example#1\">// Creates a  message filter.\n[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]\npublic class TestMessageFilter : IMessageFilter\n{\n    public bool PreFilterMessage(ref Message m)\n    {\n        // Blocks all the messages relating to the left mouse button.\n        if (m.Msg &gt;= 513 &amp;&amp; m.Msg &lt;= 515)\n        {\n            Console.WriteLine(&quot;Processing the messages : &quot; + m.Msg);\n            return true;\n        }\n        return false;\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Application_DoEvents\">\r\n    \r\n            <a id=\"System_Windows_Forms_Application_DoEvents_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DoEvents()</div>        \r\n          </div>\r\n    \r\n            <p>Processes all Windows messages currently in the message queue.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void DoEvents ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When you run a Windows Form, it creates the new form, which then waits for events to handle. Each time the form handles an event, it processes all the code associated with that event. All other events wait in the queue. While your code handles the event, your application does not respond. For example, the window does not repaint if another window is dragged on top.  </p>\n<p> If you call DoEvents in your code, your application can handle the other events. For example, if you have a form that adds data to a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> and add DoEvents to your code, your form repaints when another window is dragged over it. If you remove DoEvents from your code, your form will not repaint until the click event handler of the button is finished executing. For more information on messaging, see <a href=\"../Topic/User%20Input%20in%20Windows%20Forms.md\" data-linktype=\"relative-path\">User Input in Windows Forms</a>.  </p>\n<p> Unlike Visual Basic 6.0, the DoEvents method does not call the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_Sleep_\" data-linktype=\"relative-path\">Sleep</a> method.  </p>\n<p> Typically, you use this method in a loop to process messages.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Calling this method causes the current thread to be suspended while all waiting window messages are processed. If a message causes an event to be triggered, then other areas of your application code may execute. This can cause your application to exhibit unexpected behaviors that are difficult to debug. If you perform operations or computations that take a long time, it is often preferable to perform those operations on a new thread. For more information about asynchronous programming, see <a href=\"../Topic/Asynchronous%20Programming%20Model%20(APM).md\" data-linktype=\"relative-path\">Asynchronous Programming Model (APM)</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates using the DoEvents method. When the example runs, a user can select graphics files from an <a class=\"xref\" href=\"system.windows.forms.openfiledialog\" data-linktype=\"relative-path\">OpenFileDialog</a>. The selected files are displayed in the form. The DoEvents method forces a repaint of the form for each graphics file opened. To run this example, paste the following code in a form containing a <a class=\"xref\" href=\"system.windows.forms.picturebox\" data-linktype=\"relative-path\">PictureBox</a> named <code>PictureBox1</code>, an <a class=\"xref\" href=\"system.windows.forms.openfiledialog\" data-linktype=\"relative-path\">OpenFileDialog</a> named <code>OpenFileDialog1</code>, and a button named <code>fileButton</code>. Call the <code>InitializePictureBox</code> and <code>InitializeOpenFileDialog</code> methods from the form&#39;s constructor or <code>Load</code> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/vsprvs-md.md&quot; -->Visual Studio<!--END INCLUDE -->, if you add an <a class=\"xref\" href=\"system.windows.forms.openfiledialog\" data-linktype=\"relative-path\">OpenFileDialog</a> to your form by using a drag operation, you will have to modify the following <code>InitializeOpenFileDialog</code> method by removing the line that creates a new instance of <a class=\"xref\" href=\"system.windows.forms.openfiledialog\" data-linktype=\"relative-path\">OpenFileDialog</a>.  </p>\n</div>\n<p> The example also requires that the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Click\" data-linktype=\"relative-path\">System.Windows.Forms.Control.Click</a> event of the <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> control and the <a class=\"xref\" href=\"system.windows.forms.filedialog#System_Windows_Forms_FileDialog_FileOk\" data-linktype=\"relative-path\">FileOk</a> event of the <a class=\"xref\" href=\"system.windows.forms.openfiledialog\" data-linktype=\"relative-path\">OpenFileDialog</a> are connected to the event handlers defined in the example. When the example is running, display the dialog box by clicking the button.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.FileDialog#1\">\tprivate void InitializePictureBox()\n\t{\n\t\tthis.pictureBox1 = new System.Windows.Forms.PictureBox();\n\t\tthis.pictureBox1.BorderStyle = \n\t\t\tSystem.Windows.Forms.BorderStyle.FixedSingle;\n\t\tthis.pictureBox1.SizeMode = PictureBoxSizeMode.StretchImage;\n\t\tthis.pictureBox1.Location = new System.Drawing.Point(72, 112);\n\t\tthis.pictureBox1.Name = &quot;pictureBox1&quot;;\n\t\tthis.pictureBox1.Size = new System.Drawing.Size(160, 136);\n\t\tthis.pictureBox1.TabIndex = 6;\n\t\tthis.pictureBox1.TabStop = false;\n\t}\n\n\tprivate void InitializeOpenFileDialog()\n\t{\n\t\tthis.openFileDialog1 = new System.Windows.Forms.OpenFileDialog();\n\n\t\t// Set the file dialog to filter for graphics files.\n\t\tthis.openFileDialog1.Filter = \n\t\t\t&quot;Images (*.BMP;*.JPG;*.GIF)|*.BMP;*.JPG;*.GIF|&quot; + \n\t\t\t&quot;All files (*.*)|*.*&quot;;\n\n\t\t// Allow the user to select multiple images.\n\t\tthis.openFileDialog1.Multiselect = true;\n\t\tthis.openFileDialog1.Title = &quot;My Image Browser&quot;;\n\t\t\n\t}\n\n\tprivate void fileButton_Click(System.Object sender, System.EventArgs e)\n\t{\n\t\topenFileDialog1.ShowDialog();\n\t}\n\n\n\t// This method handles the FileOK event.  It opens each file \n\t// selected and loads the image from a stream into pictureBox1.\n\tprivate void openFileDialog1_FileOk(object sender, \n\t\tSystem.ComponentModel.CancelEventArgs e)\n\t{\n\n\t\tthis.Activate();\n\t\t string[] files = openFileDialog1.FileNames;\n\n\t\t// Open each file and display the image in pictureBox1.\n\t\t// Call Application.DoEvents to force a repaint after each\n\t\t// file is read.        \n\t\tforeach (string file in files )\n\t\t{\n\t\t\tSystem.IO.FileInfo fileInfo = new System.IO.FileInfo(file);\n\t\t\tSystem.IO.FileStream fileStream = fileInfo.OpenRead();\n\t\t\tpictureBox1.Image = System.Drawing.Image.FromStream(fileStream);\n\t\t\tApplication.DoEvents();\n\t\t\tfileStream.Close();\n\n\t\t\t// Call Sleep so the picture is briefly displayed, \n\t\t\t//which will create a slide-show effect.\n\t\t\tSystem.Threading.Thread.Sleep(2000);\n\t\t}\n\t\tpictureBox1.Image = null;\n\t}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.FileDialog#1\">   void InitializePictureBox()\n   {\n      this-&gt;PictureBox1 = gcnew System::Windows::Forms::PictureBox;\n      this-&gt;PictureBox1-&gt;BorderStyle =\n         System::Windows::Forms::BorderStyle::FixedSingle;\n      this-&gt;PictureBox1-&gt;SizeMode = PictureBoxSizeMode::StretchImage;\n      this-&gt;PictureBox1-&gt;Location = System::Drawing::Point( 72, 112 );\n      this-&gt;PictureBox1-&gt;Name = &quot;PictureBox1&quot;;\n      this-&gt;PictureBox1-&gt;Size = System::Drawing::Size( 160, 136 );\n      this-&gt;PictureBox1-&gt;TabIndex = 6;\n      this-&gt;PictureBox1-&gt;TabStop = false;\n   }\n\n   void InitializeOpenFileDialog()\n   {\n      this-&gt;OpenFileDialog1 = gcnew System::Windows::Forms::OpenFileDialog;\n      \n      // Set the file dialog to filter for graphics files.\n      this-&gt;OpenFileDialog1-&gt;Filter =\n         &quot;Images (*.BMP;*.JPG;*.GIF)|*.BMP;*.JPG;*.GIF|&quot; +\n         &quot;All files (*.*)|*.*&quot;;\n      \n      // Allow the user to select multiple images.\n      this-&gt;OpenFileDialog1-&gt;Multiselect = true;\n      this-&gt;OpenFileDialog1-&gt;Title = &quot;My Image Browser&quot;;\n   }\n\n   void fileButton_Click( System::Object^ sender, System::EventArgs^ e )\n   {\n      OpenFileDialog1-&gt;ShowDialog();\n   }\n\n   // This method handles the FileOK event.  It opens each file \n   // selected and loads the image from a stream into PictureBox1.\n   void OpenFileDialog1_FileOk( Object^ sender,\n      System::ComponentModel::CancelEventArgs^ e )\n   {\n      this-&gt;Activate();\n      array&lt;String^&gt;^ files = OpenFileDialog1-&gt;FileNames;\n      \n      // Open each file and display the image in PictureBox1.\n      // Call Application.DoEvents to force a repaint after each\n      // file is read.        \n      for each ( String^ file in files )\n      {\n         System::IO::FileInfo^ fileInfo = gcnew System::IO::FileInfo( file );\n         System::IO::FileStream^ fileStream = fileInfo-&gt;OpenRead();\n         PictureBox1-&gt;Image = System::Drawing::Image::FromStream( fileStream );\n         Application::DoEvents();\n         fileStream-&gt;Close();\n         \n         // Call Sleep so the picture is briefly displayed, \n         //which will create a slide-show effect.\n         System::Threading::Thread::Sleep( 2000 );\n      }\n      PictureBox1-&gt;Image = nullptr;\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.FileDialog#1\">    Private Sub InitializePictureBox()\n        Me.PictureBox1 = New System.Windows.Forms.PictureBox\n        Me.PictureBox1.BorderStyle = _\n            System.Windows.Forms.BorderStyle.FixedSingle\n        Me.PictureBox1.SizeMode = PictureBoxSizeMode.StretchImage\n        Me.PictureBox1.Location = New System.Drawing.Point(72, 112)\n        Me.PictureBox1.Name = &quot;PictureBox1&quot;\n        Me.PictureBox1.Size = New System.Drawing.Size(160, 136)\n        Me.PictureBox1.TabStop = False\n    End Sub\n\n    Private Sub InitializeOpenFileDialog()\n        Me.OpenFileDialog1 = New System.Windows.Forms.OpenFileDialog\n\n        &#39; Set the file dialog to filter for graphics files.\n        Me.OpenFileDialog1.Filter = _\n        &quot;Images (*.BMP;*.JPG;*.GIF)|*.BMP;*.JPG;*.GIF|All files (*.*)|*.*&quot;\n\n        &#39; Allow the user to select multiple images.\n        Me.OpenFileDialog1.Multiselect = True\n        Me.OpenFileDialog1.Title = &quot;My Image Browser&quot;\n    End Sub\n\n    Private Sub fileButton_Click(ByVal sender As System.Object, _\n        ByVal e As System.EventArgs) Handles FileButton.Click\n        OpenFileDialog1.ShowDialog()\n    End Sub\n\n\n    &#39; This method handles the FileOK event.  It opens each file \n    &#39; selected and loads the image from a stream into PictureBox1.\n    Private Sub OpenFileDialog1_FileOk(ByVal sender As Object, _\n    ByVal e As System.ComponentModel.CancelEventArgs) _\n     Handles OpenFileDialog1.FileOk\n\n        Me.Activate()\n        Dim file, files() As String\n        files = OpenFileDialog1.FileNames\n\n        &#39; Open each file and display the image in PictureBox1.\n        &#39; Call Application.DoEvents to force a repaint after each\n        &#39; file is read.        \n        For Each file In files\n            Dim fileInfo As System.IO.FileInfo = New System.IO.FileInfo(file)\n            Dim fileStream As System.IO.FileStream = fileInfo.OpenRead()\n            PictureBox1.Image = System.Drawing.Image.FromStream(fileStream)\n            Application.DoEvents()\n            fileStream.Close()\n\n            &#39; Call Sleep so the picture is briefly displayed, \n            &#39;which will create a slide-show effect.\n            System.Threading.Thread.Sleep(2000)\n        Next\n        PictureBox1.Image = Nothing\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Application_EnableVisualStyles\">\r\n    \r\n            <a id=\"System_Windows_Forms_Application_EnableVisualStyles_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EnableVisualStyles()</div>        \r\n          </div>\r\n    \r\n            <p>Enables visual styles for the application.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void EnableVisualStyles ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method enables visual styles for the application. Visual styles are the colors, fonts, and other visual elements that form an operating system theme. Controls will draw with visual styles if the control and the operating system support it. To have an effect, EnableVisualStyles must be called before creating any controls in the application; typically, EnableVisualStyles is the first line in the <code>Main</code> function. A separate manifest is not required to enable visual styles when calling EnableVisualStyles.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Prior to the .NET Framework 2.0, the <code>FlatStyle</code> property of some controls, such as controls that derive from <a class=\"xref\" href=\"system.windows.forms.buttonbase\" data-linktype=\"relative-path\">ButtonBase</a>, had to be set to <a class=\"xref\" href=\"system.windows.forms.flatstyle\" data-linktype=\"relative-path\">System.Windows.Forms.FlatStyle</a> in order for the controls to be drawn with visual styles. In applications written with the .NET Framework 2.0, this is no longer necessary.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> This method will have no effect for controls hosted in Internet Explorer.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates calling EnableVisualStyles in the <code>Main</code> function to enable visual styles for the application.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.Application.EnableVisualStyles#1\">#using &lt;System.dll&gt;\n#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n\nusing namespace System;\nusing namespace System::Drawing;\nusing namespace System::Windows::Forms;\n\nnamespace VStyles\n{\n   public ref class Form1: public System::Windows::Forms::Form\n   {\n   private:\n      System::Windows::Forms::Button^ button1;\n\n   public:\n      Form1()\n      {\n         this-&gt;button1 = gcnew System::Windows::Forms::Button;\n         this-&gt;button1-&gt;Location = System::Drawing::Point( 24, 16 );\n         this-&gt;button1-&gt;Size = System::Drawing::Size( 120, 100 );\n         this-&gt;button1-&gt;FlatStyle = FlatStyle::System;\n         this-&gt;button1-&gt;Text = &quot;I am themed.&quot;;\n         \n         // Sets up how the form should be displayed and adds the controls to the form.\n         this-&gt;ClientSize = System::Drawing::Size( 300, 286 );\n         this-&gt;Controls-&gt;Add( this-&gt;button1 );\n         this-&gt;Text = &quot;Application::EnableVisualStyles Example&quot;;\n      }\n\n   };\n\n}\n\n\n[STAThread]\nint main()\n{\n   Application::EnableVisualStyles();\n   Application::Run( gcnew VStyles::Form1 );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.Application.EnableVisualStyles#1\">Imports System\nImports System.Drawing\nImports System.Windows.Forms\n\nNamespace VStyles\n    \n    &#39; Summary description for Form1.\n    Public Class Form1\n        Inherits System.Windows.Forms.Form\n\n        Private button1 As System.Windows.Forms.Button\n\n        &lt;System.STAThread()&gt; _\n        Public Shared Sub Main()\n\n            System.Windows.Forms.Application.EnableVisualStyles()\n            System.Windows.Forms.Application.Run(New Form1)\n        End Sub &#39;Main\n\n        Public Sub New()\n\n            Me.button1 = New System.Windows.Forms.Button()\n            Me.button1.Location = New System.Drawing.Point(24, 16)\n            Me.button1.Size = New System.Drawing.Size(120, 100)\n            Me.button1.FlatStyle = FlatStyle.System\n            Me.button1.Text = &quot;I am themed.&quot;\n\n            &#39; Sets up how the form should be displayed and adds the controls to the form.\n            Me.ClientSize = New System.Drawing.Size(300, 286)\n            Me.Controls.Add(Me.button1)\n\n            Me.Text = &quot;Application.EnableVisualStyles Example&quot;\n        End Sub &#39;New \n\n    End Class &#39;Form1\nEnd Namespace &#39;VStyles\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.Application.EnableVisualStyles#1\">using System;\nusing System.Drawing;\nusing System.Windows.Forms;\n\nnamespace VStyles\n{\n    public class Form1 : System.Windows.Forms.Form\n    {\n\n        private System.Windows.Forms.Button button1;\n        \n        [STAThread]\n        static void Main() \n        {\n            Application.EnableVisualStyles();\n            Application.Run(new Form1());\n        }\n\n        public Form1()\n        {\n            this.button1 = new System.Windows.Forms.Button();\n            this.button1.Location = new System.Drawing.Point(24, 16);\n            this.button1.Size = new System.Drawing.Size(120, 100);\n            this.button1.FlatStyle = FlatStyle.System;\n            this.button1.Text = &quot;I am themed.&quot;;\n\n            // Sets up how the form should be displayed and adds the controls to the form.\n            this.ClientSize = new System.Drawing.Size(300, 286);\n            this.Controls.Add(this.button1);\n\n            this.Text = &quot;Application.EnableVisualStyles Example&quot;;\n\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Application_Exit\">\r\n    \r\n            <a id=\"System_Windows_Forms_Application_Exit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Exit()</div>        \r\n          </div>\r\n    \r\n            <p>Informs all message pumps that they must terminate, and then closes all application windows after the messages have been processed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Exit ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Exit method stops all running message loops on all threads and closes all windows of the application. This method does not necessarily force the application to exit. The Exit method is typically called from within a message loop, and forces <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_Run_\" data-linktype=\"relative-path\">Run</a> to return. To exit a message loop for the current thread only, call <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_ExitThread_\" data-linktype=\"relative-path\">ExitThread</a>.  </p>\n<p> Exit raises the following events and performs the associated conditional actions:  </p>\n<ul>\n<li><p>A <a class=\"xref\" href=\"system.windows.forms.form#System_Windows_Forms_Form_FormClosing\" data-linktype=\"relative-path\">FormClosing</a> event is raised for every form represented by the <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_OpenForms_\" data-linktype=\"relative-path\">OpenForms</a> property. This event can be canceled by setting the <a class=\"xref\" href=\"system.componentmodel.canceleventargs#System_ComponentModel_CancelEventArgs_Cancel_\" data-linktype=\"relative-path\">Cancel</a> property of their <a class=\"xref\" href=\"system.windows.forms.formclosingeventargs\" data-linktype=\"relative-path\">FormClosingEventArgs</a> parameter to <code>true</code>.  </p>\n</li>\n<li><p>If one of more of the handlers cancels the event, then Exit returns without further action. Otherwise, a <a class=\"xref\" href=\"system.windows.forms.form#System_Windows_Forms_Form_FormClosed\" data-linktype=\"relative-path\">FormClosed</a> event is raised for every open form, then all running message loops and forms are closed.  </p>\n</li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> The Exit method does not raise the <a class=\"xref\" href=\"system.windows.forms.form#System_Windows_Forms_Form_Closed\" data-linktype=\"relative-path\">Closed</a> and <a class=\"xref\" href=\"system.windows.forms.form#System_Windows_Forms_Form_Closing\" data-linktype=\"relative-path\">Closing</a> events, which are obsolete as of <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnlong-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists numbers in a list box on a form. Each time you click <code>button1</code>, the application adds another number to the list.  </p>\n<p> The <code>Main</code> method calls <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_Run_\" data-linktype=\"relative-path\">Run</a> to start the application, which creates the form, <code>listBox1</code>, and <code>button1</code>. When the user clicks <code>button1</code>, the <code>button1_Click</code> method adds numbers one to three to the list box, and displays a <a class=\"xref\" href=\"system.windows.forms.messagebox\" data-linktype=\"relative-path\">MessageBox</a>. If the user clicks <strong>No</strong> on the <a class=\"xref\" href=\"system.windows.forms.messagebox\" data-linktype=\"relative-path\">MessageBox</a>, the <code>button1_Click</code> method adds another number to the list. If the user clicks <strong>Yes</strong>, the application calls Exit, to process all remaining messages in the queue and then to quit.  </p>\n<p> The example requires that <code>listBox1</code> and <code>button1</code> have been instantiated and placed on a form.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic Application.Exit Example#1\">public static void Main(string[] args) {\n    // Starts the application.\n    Application.Run(new Form1());\n }\n \n private void button1_Click(object sender, System.EventArgs e) {\n    // Populates a list box with three numbers.\n    int i = 3;\n    for(int j=1; j&lt;=i; j++) {\n       listBox1.Items.Add(j);\n    }\n \n    /* Determines whether the user wants to exit the application.\n     * If not, adds another number to the list box. */\n    while (MessageBox.Show(&quot;Exit application?&quot;, &quot;&quot;, MessageBoxButtons.YesNo) == \n       DialogResult.No) {\n       // Increments the counter ands add the number to the list box.\n       i++;\n       listBox1.Items.Add(i);\n    }\n \n    // The user wants to exit the application. Close everything down.\n    Application.Exit();\n }\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic Application.Exit Example#1\">public:\n   static void main()\n   {\n      // Starts the application.\n      Application::Run( gcnew Form1 );\n   }\n\nprivate:\n   void button1_Click( Object^ sender, System::EventArgs^ e )\n   {\n      // Populates a list box with three numbers.\n      int i = 3;\n      for ( int j = 1; j &lt;= i; j++ )\n      {\n         listBox1-&gt;Items-&gt;Add( j );\n      }\n      \n      /* Determines whether the user wants to exit the application.\n       * If not, adds another number to the list box. */\n      while ( MessageBox::Show( &quot;Exit application?&quot;, &quot;&quot;,\n         MessageBoxButtons::YesNo ) == ::DialogResult::No )\n      {\n         // Increments the counter ands add the number to the list box.\n         i++;\n         listBox1-&gt;Items-&gt;Add( i );\n      }\n      \n      // The user wants to exit the application. Close everything down.\n      Application::Exit();\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Application.Exit Example#1\"> &lt;STAThread()&gt; _\n Shared Sub Main() \t\n    &#39; Starts the application.\n    Application.Run(New Form1())\n End Sub\n \n Private Sub button1_Click(sender As object, e As System.EventArgs)\n    &#39; Populates a list box with three numbers.\n    Dim i As Integer = 3\n    Dim j As Integer\n    For j = 1 To i - 1\n       listBox1.Items.Add(j)\n    Next\n \n    &#39; Checks to see whether the user wants to exit the application.\n    &#39; If not, adds another number to the list box.\n    While (MessageBox.Show(&quot;Exit application?&quot;, &quot;&quot;, MessageBoxButtons.YesNo) = _ \n       DialogResult.No)\n       &#39; Increments the counter and adds the number to the list box.\n       i = i + 1\n       listBox1.Items.Add(i)\n    End While\n \n    &#39; The user wants to exit the application. Close everything down.\n    Application.Exit()\n End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Application_Exit_System_ComponentModel_CancelEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Application_Exit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Exit(CancelEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Informs all message pumps that they must terminate, and then closes all application windows after the messages have been processed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Exit (System.ComponentModel.CancelEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.canceleventargs\" data-linktype=\"relative-path\">CancelEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Returns whether any <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> within the application cancelled the exit.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Application_ExitThread\">\r\n    \r\n            <a id=\"System_Windows_Forms_Application_ExitThread_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExitThread()</div>        \r\n          </div>\r\n    \r\n            <p>Exits the message loop on the current thread and closes all windows on the thread.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void ExitThread ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to exit the message loop of the current thread. This method causes the call to <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_Run_\" data-linktype=\"relative-path\">Run</a> for the current thread to return. To exit the entire application, call <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_Exit_\" data-linktype=\"relative-path\">Exit</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Application_FilterMessage_System_Windows_Forms_Message__\">\r\n    \r\n            <a id=\"System_Windows_Forms_Application_FilterMessage_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FilterMessage(Message)</div>        \r\n          </div>\r\n    \r\n            <p>Runs any filters against a window message, and returns a copy of the modified message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool FilterMessage (ref System.Windows.Forms.Message message);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>message</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Windows event message to filter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>True</code> if the filters were processed; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Application_OleRequired\">\r\n    \r\n            <a id=\"System_Windows_Forms_Application_OleRequired_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OleRequired()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes OLE on the current thread.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.ApartmentState OleRequired ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.apartmentstate\" data-linktype=\"relative-path\">ApartmentState</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.threading.apartmentstate\" data-linktype=\"relative-path\">ApartmentState</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Call this method before calling any <code>Microsoft.Win32</code> method that requires OLE. OleRequired first checks to see if OLE has been initialized on the current thread. If not, it initializes the thread for OLE.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Unless a thread calls OLE methods directly, you do not need to call this method.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Application_OnThreadException_System_Exception_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Application_OnThreadException_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnThreadException(Exception)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_ThreadException\" data-linktype=\"relative-path\">ThreadException</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void OnThreadException (Exception t);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>t</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> that represents the exception that was thrown.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Call OnThreadException to raise an exception that will halt processing of the application.  </p>\n<p> The <a class=\"xref\" href=\"system.windows.forms.application\" data-linktype=\"relative-path\">Application</a> class has a <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_ThreadException\" data-linktype=\"relative-path\">ThreadException</a> event. You can attach an event handler to this event to do whatever custom processing you need for unhandled exceptions. If you do not attach an event handler, OnThreadException will execute the default behavior, which involves displaying a dialog box to inform the user that there has been an error.  </p>\n<p> OnThreadException only implements default exception behavior for unhandled exceptions that occur on threads owned by Windows Forms. Unhandled exceptions on other threads are handled by the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_UnhandledException\" data-linktype=\"relative-path\">UnhandledException</a> event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Application_RaiseIdle_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Application_RaiseIdle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RaiseIdle(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_Idle\" data-linktype=\"relative-path\">Idle</a> event in hosted scenarios.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void RaiseIdle (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> objects to pass to the <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_Idle\" data-linktype=\"relative-path\">Idle</a> event.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is used when hosting Windows Forms in another environment, such as an unmanaged application. You should call RaiseIdle when the hosting application enters an idle state. This enables some Windows Forms controls and components to do important background work while the user is not interacting with the application.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Application_RegisterMessageLoop_System_Windows_Forms_Application_MessageLoopCallback_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Application_RegisterMessageLoop_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RegisterMessageLoop(Application+MessageLoopCallback)</div>        \r\n          </div>\r\n    \r\n            <p>Registers a callback for checking whether the message loop is running in hosted environments.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void RegisterMessageLoop (System.Windows.Forms.Application.MessageLoopCallback callback);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>callback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.application.messageloopcallback\" data-linktype=\"relative-path\">Application+MessageLoopCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The method to call when Windows Forms needs to check if the hosting environment is still sending messages.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is used when hosting Windows Forms in another environment, such as an unmanaged application. In hosted environments, the <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_MessageLoop_\" data-linktype=\"relative-path\">MessageLoop</a> property will always return false if Windows Forms is not processing messages. Use this callback to tell Windows Forms if the hosting environment is still processing messages.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Application_RemoveMessageFilter_System_Windows_Forms_IMessageFilter_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Application_RemoveMessageFilter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RemoveMessageFilter(IMessageFilter)</div>        \r\n          </div>\r\n    \r\n            <p>Removes a message filter from the message pump of the application.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void RemoveMessageFilter (System.Windows.Forms.IMessageFilter value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.imessagefilter\" data-linktype=\"relative-path\">IMessageFilter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The implementation of the <a class=\"xref\" href=\"system.windows.forms.imessagefilter\" data-linktype=\"relative-path\">IMessageFilter</a> to remove from the application.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can remove a message filter when you no longer want to capture Windows messages before they are dispatched.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>Before you can use a message filter, you must provide an implementation for the <a class=\"xref\" href=\"system.windows.forms.imessagefilter\" data-linktype=\"relative-path\">IMessageFilter</a> interface. The following class creates a message filter called <code>TestMessageFilter</code>. This filter blocks all messages relating to the left mouse button.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Application.RemoveMessageFilter Example#1\">   // Creates a  message filter.\n   ref class TestMessageFilter: public IMessageFilter\n   {\n   public:\n      [SecurityPermission(SecurityAction::LinkDemand, Flags = SecurityPermissionFlag::UnmanagedCode)]\n      virtual bool PreFilterMessage( Message % m )\n      {\n         \n         // Blocks all the messages relating to the left mouse button.\n         if ( m.Msg &gt;= 513 &amp;&amp; m.Msg &lt;= 515 )\n         {\n            Console::WriteLine( &quot;Processing the messages : {0}&quot;, m.Msg );\n            return true;\n         }\n\n         return false;\n      }\n\n   };\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Application.RemoveMessageFilter Example#1\">&#39; Creates a message filter.\n&lt;SecurityPermission(SecurityAction.LinkDemand, Flags := SecurityPermissionFlag.UnmanagedCode)&gt; _\nPublic Class TestMessageFilter\n    Implements IMessageFilter\n\n    &lt;SecurityPermission(SecurityAction.Demand)&gt; _\n    Public Function PreFilterMessage(ByRef m As System.Windows.Forms.Message) _\n    As Boolean Implements IMessageFilter.PreFilterMessage\n        &#39; Blocks all the messages relating to the left mouse button.\n        If ((m.Msg &gt;= 513) And (m.Msg &lt;= 515)) Then\n            Console.WriteLine(&quot;Processing the messages : &quot; &amp; m.Msg)\n            Return True\n        End If\n        Return False\n    End Function\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Application.RemoveMessageFilter Example#1\">// Creates a  message filter.\n[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]\npublic class TestMessageFilter : IMessageFilter\n{\n    public bool PreFilterMessage(ref Message m)\n    {\n        // Blocks all the messages relating to the left mouse button.\n        if (m.Msg &gt;= 513 &amp;&amp; m.Msg &lt;= 515)\n        {\n            Console.WriteLine(&quot;Processing the messages : &quot; + m.Msg);\n            return true;\n        }\n        return false;\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Application_Restart\">\r\n    \r\n            <a id=\"System_Windows_Forms_Application_Restart_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Restart()</div>        \r\n          </div>\r\n    \r\n            <p>Shuts down the application and starts a new instance immediately.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Restart ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>Your code is not a Windows Forms application. You cannot call this method in this context.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The most common reason for calling <code>Restart</code> is to start a new version of the application that you have downloaded through <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> using the <code>Update</code> or <code>UpdateAsync</code> method.  </p>\n<p> Applications are restarted in the context in which they were initially run. If your application was started using a URL pointing directly to the application&#39;s main executable file, it will be restarted using the same URL. If your application is a <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE --> application, it will be restarted using <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecclick-md.md&quot; -->ClickOnce<!--END INCLUDE -->.  </p>\n<p> If your application was originally supplied command-line options when it first executed, Restart will launch the application again with the same options.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Application_Run\">\r\n    \r\n            <a id=\"System_Windows_Forms_Application_Run_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Run()</div>        \r\n          </div>\r\n    \r\n            <p>Begins running a standard application message loop on the current thread, without a form.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Run ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>A main message loop is already running on this thread.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In a Win32-based or Windows Forms application, a message loop is a routine in code that processes user events, such as mouse clicks and keyboard strokes. Every running Windows-based application requires an active message loop, called the main message loop. When the main message loop is closed, the application exits. In Windows Forms, this loop is closed when the <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_Exit_\" data-linktype=\"relative-path\">Exit</a> method is called, or when the <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_ExitThread_\" data-linktype=\"relative-path\">ExitThread</a> method is called on the thread that is running the main message loop.  </p>\n<p> Most Windows Forms developers will not need to use this version of the method. You should use the <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_Run_System_Windows_Forms_Form_\" data-linktype=\"relative-path\">Run(Form)</a> overload to start an application with a main form, so that the application terminates when the main form is closed. For all other situations, use the <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_Run_System_Windows_Forms_ApplicationContext_\" data-linktype=\"relative-path\">Run(ApplicationContext)</a> overload, which supports supplying an <a class=\"xref\" href=\"system.windows.forms.applicationcontext\" data-linktype=\"relative-path\">ApplicationContext</a> object for better control over the lifetime of the application.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Application_Run_System_Windows_Forms_ApplicationContext_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Application_Run_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Run(ApplicationContext)</div>        \r\n          </div>\r\n    \r\n            <p>Begins running a standard application message loop on the current thread, with an <a class=\"xref\" href=\"system.windows.forms.applicationcontext\" data-linktype=\"relative-path\">ApplicationContext</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Run (System.Windows.Forms.ApplicationContext context);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>context</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.applicationcontext\" data-linktype=\"relative-path\">ApplicationContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.windows.forms.applicationcontext\" data-linktype=\"relative-path\">ApplicationContext</a> in which the application is run.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>A main message loop is already running on this thread.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The message loop runs until <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_Exit_\" data-linktype=\"relative-path\">Exit</a> or <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_ExitThread_\" data-linktype=\"relative-path\">ExitThread</a> is called or the <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_ThreadExit\" data-linktype=\"relative-path\">ThreadExit</a> event is raised on the context object.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The example displays two forms and exits the application when both forms are closed. When the application starts and exits, the position of each form is remembered. This example demonstrates how to use an <a class=\"xref\" href=\"system.windows.forms.applicationcontext\" data-linktype=\"relative-path\">ApplicationContext</a>, along with the <code>Application.Run(context)</code> method, to display multiple forms when the application starts.  </p>\n<p> The class <code>MyApplicationContext</code> inherits from <a class=\"xref\" href=\"system.windows.forms.applicationcontext\" data-linktype=\"relative-path\">ApplicationContext</a> and keeps track when each form is closed, and exits the current thread when they both are. The class stores the positions of each form for the user. The form position data is stored in a file titled <code>Appdata.txt</code> that is created in the location determined by <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_UserAppDataPath_\" data-linktype=\"relative-path\">UserAppDataPath</a>. The <code>Main</code> method calls <code>Application.Run(context)</code> to start the application given the <a class=\"xref\" href=\"system.windows.forms.applicationcontext\" data-linktype=\"relative-path\">ApplicationContext</a>.  </p>\n<p> The code for the <code>AppForm1</code> and <code>AppForm2</code> forms is not shown for the purpose of brevity. See the <a class=\"xref\" href=\"system.windows.forms.applicationcontext\" data-linktype=\"relative-path\">ApplicationContext</a> class overview for the whole code listing.  </p>\n<pre><code class=\"lang-vb\" name=\"Application#2\">&#39; The class that handles the creation of the application windows\nPublic Class MyApplicationContext\n    Inherits ApplicationContext\n\n    Private formCount As Integer\n    Private form1 As AppForm1\n    Private form2 As AppForm2\n\n    Private form1Position As Rectangle\n    Private form2Position As Rectangle\n\n    Private userData As FileStream\n\n    Public Sub New()\n        MyBase.New()\n        formCount = 0\n\n        &#39; Handle the ApplicationExit event to know when the application is exiting.\n        AddHandler Application.ApplicationExit, AddressOf OnApplicationExit\n\n        Try\n            &#39; Create a file that the application will store user specific data in.\n            userData = New FileStream(Application.UserAppDataPath + &quot;\\appdata.txt&quot;, FileMode.OpenOrCreate)\n\n        Catch e As IOException\n            &#39; Inform the user that an error occurred.\n            MessageBox.Show(&quot;An error occurred while attempting to show the application.&quot; + _\n                            &quot;The error is:&quot; + e.ToString())\n\n            &#39; Exit the current thread instead of showing the windows.\n            ExitThread()\n        End Try\n\n        &#39; Create both application forms and handle the Closed event\n        &#39; to know when both forms are closed.\n        form1 = New AppForm1()\n        AddHandler form1.Closed, AddressOf OnFormClosed\n        AddHandler form1.Closing, AddressOf OnFormClosing\n        formCount = formCount + 1\n\n        form2 = New AppForm2()\n        AddHandler form2.Closed, AddressOf OnFormClosed\n        AddHandler form2.Closing, AddressOf OnFormClosing\n        formCount = formCount + 1\n\n        &#39; Get the form positions based upon the user specific data.\n        If (ReadFormDataFromFile()) Then\n            &#39; If the data was read from the file, set the form\n            &#39; positions manually.\n            form1.StartPosition = FormStartPosition.Manual\n            form2.StartPosition = FormStartPosition.Manual\n\n            form1.Bounds = form1Position\n            form2.Bounds = form2Position\n        End If\n\n        &#39; Show both forms.\n        form1.Show()\n        form2.Show()\n    End Sub\n\n    Private Sub OnApplicationExit(ByVal sender As Object, ByVal e As EventArgs)\n        &#39; When the application is exiting, write the application data to the\n        &#39; user file and close it.\n        WriteFormDataToFile()\n\n        Try\n            &#39; Ignore any errors that might occur while closing the file handle.\n            userData.Close()\n        Catch\n        End Try\n    End Sub\n\n    Private Sub OnFormClosing(ByVal sender As Object, ByVal e As CancelEventArgs)\n        &#39; When a form is closing, remember the form position so it\n        &#39; can be saved in the user data file.\n        If TypeOf sender Is AppForm1 Then\n            form1Position = CType(sender, Form).Bounds\n        ElseIf TypeOf sender Is AppForm2 Then\n            form2Position = CType(sender, Form).Bounds\n        End If\n    End Sub\n    \n    Private Sub OnFormClosed(ByVal sender As Object, ByVal e As EventArgs)\n        &#39; When a form is closed, decrement the count of open forms.\n\n        &#39; When the count gets to 0, exit the app by calling\n        &#39; ExitThread().\n        formCount = formCount - 1\n        If (formCount = 0) Then\n            ExitThread()\n        End If\n    End Sub\n\n    Private Function WriteFormDataToFile() As Boolean\n        &#39; Write the form positions to the file.\n        Dim encoding As UTF8Encoding = New UTF8Encoding()\n\n        Dim rectConv As RectangleConverter = New RectangleConverter()\n        Dim form1pos As String = rectConv.ConvertToString(form1Position)\n        Dim form2pos As String = rectConv.ConvertToString(form2Position)\n\n        Dim dataToWrite As Byte() = encoding.GetBytes(&quot;~&quot; + form1pos + &quot;~&quot; + form2pos)\n\n        Try\n            &#39; Set the write position to the start of the file and write\n            userData.Seek(0, SeekOrigin.Begin)\n            userData.Write(dataToWrite, 0, dataToWrite.Length)\n            userData.Flush()\n\n            userData.SetLength(dataToWrite.Length)\n            Return True\n\n        Catch\n            &#39; An error occurred while attempting to write, return false.\n            Return False\n        End Try\n\n    End Function\n\n    Private Function ReadFormDataFromFile() As Boolean\n        &#39; Read the form positions from the file.\n        Dim encoding As UTF8Encoding = New UTF8Encoding()\n        Dim data As String\n\n        If (userData.Length &lt;&gt; 0) Then\n            Dim dataToRead(userData.Length) As Byte\n\n            Try\n                &#39; Set the read position to the start of the file and read.\n                userData.Seek(0, SeekOrigin.Begin)\n                userData.Read(dataToRead, 0, dataToRead.Length)\n\n            Catch e As IOException\n                Dim errorInfo As String = e.ToString()\n                &#39; An error occurred while attempt to read, return false.\n                Return False\n            End Try\n\n            &#39; Parse out the data to get the window rectangles\n            data = encoding.GetString(dataToRead)\n\n            Try\n                &#39; Convert the string data to rectangles\n                Dim rectConv As RectangleConverter = New RectangleConverter()\n                Dim form1pos As String = data.Substring(1, data.IndexOf(&quot;~&quot;, 1) - 1)\n\n                form1Position = CType(rectConv.ConvertFromString(form1pos), Rectangle)\n\n                Dim form2pos As String = data.Substring(data.IndexOf(&quot;~&quot;, 1) + 1)\n                form2Position = CType(rectConv.ConvertFromString(form2pos), Rectangle)\n\n                Return True\n\n            Catch\n                &#39; Error occurred while attempting to convert the rectangle data.\n                &#39; Return false to use default values.\n                Return False\n            End Try\n\n        Else\n            &#39; No data in the file, return false to use default values.\n            Return False\n        End If\n    End Function\n\nEnd Class\n\nPublic Module MyApplication\n    Public Sub Main()\n        &#39; Create the MyApplicationContext, that derives from ApplicationContext,\n        &#39; that manages when the application should exit.\n\n        Dim context As MyApplicationContext = New MyApplicationContext()\n\n        &#39; Run the application with the specific context. It will exit when\n        &#39; all forms are closed.\n        Application.Run(context)\n    End Sub\nEnd Module\n</code></pre><pre><code class=\"lang-cpp\" name=\"Application#2\">// The class that handles the creation of the application windows\nref class MyApplicationContext: public ApplicationContext\n{\nprivate:\n   int formCount;\n   AppForm1^ form1;\n   AppForm2^ form2;\n   System::Drawing::Rectangle form1Position;\n   System::Drawing::Rectangle form2Position;\n   FileStream^ userData;\n\npublic:\n\n   MyApplicationContext()\n   {\n      formCount = 0;\n      \n      // Handle the ApplicationExit event to know when the application is exiting.\n      Application::ApplicationExit += gcnew EventHandler( this, &amp;MyApplicationContext::OnApplicationExit );\n      try\n      {\n         \n         // Create a file that the application will store user specific data in.\n         userData = gcnew FileStream( String::Concat( Application::UserAppDataPath, &quot;\\\\appdata.txt&quot; ),FileMode::OpenOrCreate );\n      }\n      catch ( IOException^ e ) \n      {\n         \n         // Inform the user that an error occurred.\n         MessageBox::Show( &quot;An error occurred while attempting to show the application. The error is: {0}&quot;, dynamic_cast&lt;String^&gt;(e) );\n         \n         // Exit the current thread instead of showing the windows.\n         ExitThread();\n      }\n\n      \n      // Create both application forms and handle the Closed event\n      // to know when both forms are closed.\n      form1 = gcnew AppForm1;\n      form1-&gt;Closed += gcnew EventHandler( this, &amp;MyApplicationContext::OnFormClosed );\n      form1-&gt;Closing += gcnew CancelEventHandler( this, &amp;MyApplicationContext::OnFormClosing );\n      formCount++;\n      form2 = gcnew AppForm2;\n      form2-&gt;Closed += gcnew EventHandler( this, &amp;MyApplicationContext::OnFormClosed );\n      form2-&gt;Closing += gcnew CancelEventHandler( this, &amp;MyApplicationContext::OnFormClosing );\n      formCount++;\n      \n      // Get the form positions based upon the user specific data.\n      if ( ReadFormDataFromFile() )\n      {\n         \n         // If the data was read from the file, set the form\n         // positions manually.\n         form1-&gt;StartPosition = FormStartPosition::Manual;\n         form2-&gt;StartPosition = FormStartPosition::Manual;\n         form1-&gt;Bounds = form1Position;\n         form2-&gt;Bounds = form2Position;\n      }\n\n      \n      // Show both forms.\n      form1-&gt;Show();\n      form2-&gt;Show();\n   }\n\n   void OnApplicationExit( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // When the application is exiting, write the application data to the\n      // user file and close it.\n      WriteFormDataToFile();\n      try\n      {\n         \n         // Ignore any errors that might occur while closing the file handle.\n         userData-&gt;Close();\n      }\n      catch ( Exception^ ) \n      {\n      }\n\n   }\n\n\nprivate:\n\n   void OnFormClosing( Object^ sender, CancelEventArgs^ /*e*/ )\n   {\n      \n      // When a form is closing, remember the form position so it\n      // can be saved in the user data file.\n      if ( dynamic_cast&lt;AppForm1^&gt;(sender) != nullptr )\n            form1Position = (dynamic_cast&lt;Form^&gt;(sender))-&gt;Bounds;\n      else\n      if ( dynamic_cast&lt;AppForm1^&gt;(sender) != nullptr )\n            form2Position = (dynamic_cast&lt;Form^&gt;(sender))-&gt;Bounds;\n   }\n\n\n   void OnFormClosed( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // When a form is closed, decrement the count of open forms.\n      // When the count gets to 0, exit the app by calling\n      // ExitThread().\n      formCount--;\n      if ( formCount == 0 )\n      {\n         ExitThread();\n      }\n   }\n\n\n   bool WriteFormDataToFile()\n   {\n      \n      // Write the form positions to the file.\n      UTF8Encoding^ encoding = gcnew UTF8Encoding;\n      RectangleConverter^ rectConv = gcnew RectangleConverter;\n      String^ form1pos = rectConv-&gt;ConvertToString( form1Position );\n      String^ form2pos = rectConv-&gt;ConvertToString( form2Position );\n      array&lt;Byte&gt;^dataToWrite = encoding-&gt;GetBytes( String::Concat( &quot;~&quot;, form1pos, &quot;~&quot;, form2pos ) );\n      try\n      {\n         \n         // Set the write position to the start of the file and write\n         userData-&gt;Seek( 0, SeekOrigin::Begin );\n         userData-&gt;Write( dataToWrite, 0, dataToWrite-&gt;Length );\n         userData-&gt;Flush();\n         userData-&gt;SetLength( dataToWrite-&gt;Length );\n         return true;\n      }\n      catch ( Exception^ ) \n      {\n         \n         // An error occurred while attempting to write, return false.\n         return false;\n      }\n\n   }\n\n   bool ReadFormDataFromFile()\n   {\n      \n      // Read the form positions from the file.\n      UTF8Encoding^ encoding = gcnew UTF8Encoding;\n      String^ data;\n      if ( userData-&gt;Length != 0 )\n      {\n         array&lt;Byte&gt;^dataToRead = gcnew array&lt;Byte&gt;(userData-&gt;Length);\n         try\n         {\n            \n            // Set the read position to the start of the file and read.\n            userData-&gt;Seek( 0, SeekOrigin::Begin );\n            userData-&gt;Read( dataToRead, 0, dataToRead-&gt;Length );\n         }\n         catch ( IOException^ e ) \n         {\n            String^ errorInfo = dynamic_cast&lt;String^&gt;(e);\n            \n            // An error occurred while attempt to read, return false.\n            return false;\n         }\n\n         \n         // Parse out the data to get the window rectangles\n         data = encoding-&gt;GetString( dataToRead );\n         try\n         {\n            \n            // Convert the String* data to rectangles\n            RectangleConverter^ rectConv = gcnew RectangleConverter;\n            String^ form1pos = data-&gt;Substring( 1, data-&gt;IndexOf( &quot;~&quot;, 1 ) - 1 );\n            form1Position =  *safe_cast&lt;Rectangle^&gt;(rectConv-&gt;ConvertFromString( form1pos ));\n            String^ form2pos = data-&gt;Substring( data-&gt;IndexOf( &quot;~&quot;, 1 ) + 1 );\n            form2Position =  *safe_cast&lt;Rectangle^&gt;(rectConv-&gt;ConvertFromString( form2pos ));\n            return true;\n         }\n         catch ( Exception^ ) \n         {\n            \n            // Error occurred while attempting to convert the rectangle data.\n            // Return false to use default values.\n            return false;\n         }\n\n      }\n      else\n      {\n         \n         // No data in the file, return false to use default values.\n         return false;\n      }\n   }\n\n};\n\n</code></pre><pre><code class=\"lang-cs\" name=\"Application#2\">    // The class that handles the creation of the application windows\n    class MyApplicationContext : ApplicationContext {\n    \n        private int formCount;\n        private AppForm1 form1;\n        private AppForm2 form2;\n\n        private Rectangle form1Position;\n        private Rectangle form2Position;\n\n        private FileStream userData;\n\n        private MyApplicationContext() {\n            formCount = 0;\n\n            // Handle the ApplicationExit event to know when the application is exiting.\n            Application.ApplicationExit += new EventHandler(this.OnApplicationExit);\n\n            try {\n                // Create a file that the application will store user specific data in.\n                userData = new FileStream(Application.UserAppDataPath + &quot;\\\\appdata.txt&quot;, FileMode.OpenOrCreate);\n\n            } catch(IOException e) {\n                // Inform the user that an error occurred.\n                MessageBox.Show(&quot;An error occurred while attempting to show the application.&quot; + \n                                &quot;The error is:&quot; + e.ToString());\n\n                // Exit the current thread instead of showing the windows.\n                ExitThread();\n            }\n\n            // Create both application forms and handle the Closed event\n            // to know when both forms are closed.\n            form1 = new AppForm1();\n            form1.Closed += new EventHandler(OnFormClosed);            \n            form1.Closing += new CancelEventHandler(OnFormClosing);            \n            formCount++;\n\n            form2 = new AppForm2();\n            form2.Closed += new EventHandler(OnFormClosed);            \n            form2.Closing += new CancelEventHandler(OnFormClosing);            \n            formCount++;\n\n            // Get the form positions based upon the user specific data.\n            if (ReadFormDataFromFile()) {\n                // If the data was read from the file, set the form\n                // positions manually.\n                form1.StartPosition = FormStartPosition.Manual;\n                form2.StartPosition = FormStartPosition.Manual;\n                \n                form1.Bounds = form1Position;\n                form2.Bounds = form2Position;\n            }\n\n            // Show both forms.\n            form1.Show();\n            form2.Show();\n        }\n\n        private void OnApplicationExit(object sender, EventArgs e) {\n            // When the application is exiting, write the application data to the\n            // user file and close it.\n            WriteFormDataToFile();\n\n            try {\n                // Ignore any errors that might occur while closing the file handle.\n                userData.Close();\n            } catch {}\n        }\n\n        private void OnFormClosing(object sender, CancelEventArgs e) {\n            // When a form is closing, remember the form position so it\n            // can be saved in the user data file.\n            if (sender is AppForm1) \n                form1Position = ((Form)sender).Bounds;\n            else if (sender is AppForm2)\n                form2Position = ((Form)sender).Bounds;\n        }\n\n        private void OnFormClosed(object sender, EventArgs e) {\n            // When a form is closed, decrement the count of open forms.\n\n            // When the count gets to 0, exit the app by calling\n            // ExitThread().\n            formCount--;\n            if (formCount == 0) {\n                ExitThread();\n            }\n        }\n\n        private bool WriteFormDataToFile(){\n            // Write the form positions to the file.\n            UTF8Encoding encoding = new UTF8Encoding();\n\n            RectangleConverter rectConv = new RectangleConverter();\n            String form1pos = rectConv.ConvertToString(form1Position);\n            String form2pos = rectConv.ConvertToString(form2Position);\n\n            byte[] dataToWrite = encoding.GetBytes(&quot;~&quot; + form1pos + &quot;~&quot; + form2pos);\n\n            try {\n                // Set the write position to the start of the file and write\n                userData.Seek(0,SeekOrigin.Begin);\n                userData.Write(dataToWrite, 0, dataToWrite.Length);\n                userData.Flush();\n\n                userData.SetLength(dataToWrite.Length);\n                return true;\n\n            } catch {\n                // An error occurred while attempting to write, return false.\n                return false;\n            }\n\n        }\n\n        private bool ReadFormDataFromFile(){\n            // Read the form positions from the file.\n            UTF8Encoding encoding = new UTF8Encoding();\n            String data;\n\n            if (userData.Length != 0) {\n                byte[] dataToRead = new Byte[userData.Length];\n\n                try {\n                    // Set the read position to the start of the file and read.\n                    userData.Seek(0, SeekOrigin.Begin);\n                    userData.Read(dataToRead, 0, dataToRead.Length);\n\n                } catch (IOException e) {\n                    String errorInfo = e.ToString();\n                    // An error occurred while attempt to read, return false.\n                    return false;\n                }\n\n                // Parse out the data to get the window rectangles\n                data = encoding.GetString(dataToRead);\n\n                try {\n                    // Convert the string data to rectangles\n                    RectangleConverter rectConv = new RectangleConverter();\n                    String form1pos = data.Substring(1,data.IndexOf(&quot;~&quot;,1)-1);\n\n                    form1Position = (Rectangle)rectConv.ConvertFromString(form1pos);\n\n                    String form2pos = data.Substring(data.IndexOf(&quot;~&quot;,1)+1);\n                    form2Position = (Rectangle)rectConv.ConvertFromString(form2pos);\n\n                    return true;\n\n                } catch {\n                    // Error occurred while attempting to convert the rectangle data.\n                    // Return false to use default values.\n                    return false;\n                }\n\n            } else {\n                // No data in the file, return false to use default values.\n                return false;\n            }\n        }        \n        \n        [STAThread]\n        static void Main(string[] args) {\n            \n            // Create the MyApplicationContext, that derives from ApplicationContext,\n            // that manages when the application should exit.\n\n            MyApplicationContext context = new MyApplicationContext();\n\n            // Run the application with the specific context. It will exit when\n            // all forms are closed.\n            Application.Run(context);\n\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Application_Run_System_Windows_Forms_Form_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Application_Run_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Run(Form)</div>        \r\n          </div>\r\n    \r\n            <p>Begins running a standard application message loop on the current thread, and makes the specified form visible.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Run (System.Windows.Forms.Form mainForm);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>mainForm</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> that represents the form to make visible.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>A main message loop is already running on the current thread.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Typically, the main function of an application calls this method and passes to it the main window of the application.  </p>\n<p> This method adds an event handler to the <code>mainForm</code> parameter for the <a class=\"xref\" href=\"system.windows.forms.form#System_Windows_Forms_Form_Closed\" data-linktype=\"relative-path\">Closed</a> event. The event handler calls <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_ExitThread_\" data-linktype=\"relative-path\">ExitThread</a> to clean up the application.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method of the <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> class will be called prior to the return of this method.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lists numbers in a list box on a form. Each time you click <code>button1</code>, the application adds another number to the list.  </p>\n<p> The <code>Main</code> method calls <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_Run_\" data-linktype=\"relative-path\">Run</a> to start the application, which creates the form, <code>listBox1</code>, and <code>button1</code>. When the user clicks <code>button1</code>, the <code>button1_Click</code> method adds numbers one to three to the list box, and displays a <a class=\"xref\" href=\"system.windows.forms.messagebox\" data-linktype=\"relative-path\">MessageBox</a>. If the user clicks <strong>No</strong> on the <a class=\"xref\" href=\"system.windows.forms.messagebox\" data-linktype=\"relative-path\">MessageBox</a>, the <code>button1_Click</code> method adds another number to the list. If the user clicks <strong>Yes</strong>, the application calls <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_Exit_\" data-linktype=\"relative-path\">Exit</a> to process all remaining messages in the queue and then to quit.  </p>\n<p> The example requires that <code>listBox1</code> and <code>button1</code> have been created and placed on a form.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic Application.Exit Example#1\">public static void Main(string[] args) {\n    // Starts the application.\n    Application.Run(new Form1());\n }\n \n private void button1_Click(object sender, System.EventArgs e) {\n    // Populates a list box with three numbers.\n    int i = 3;\n    for(int j=1; j&lt;=i; j++) {\n       listBox1.Items.Add(j);\n    }\n \n    /* Determines whether the user wants to exit the application.\n     * If not, adds another number to the list box. */\n    while (MessageBox.Show(&quot;Exit application?&quot;, &quot;&quot;, MessageBoxButtons.YesNo) == \n       DialogResult.No) {\n       // Increments the counter ands add the number to the list box.\n       i++;\n       listBox1.Items.Add(i);\n    }\n \n    // The user wants to exit the application. Close everything down.\n    Application.Exit();\n }\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic Application.Exit Example#1\">public:\n   static void main()\n   {\n      // Starts the application.\n      Application::Run( gcnew Form1 );\n   }\n\nprivate:\n   void button1_Click( Object^ sender, System::EventArgs^ e )\n   {\n      // Populates a list box with three numbers.\n      int i = 3;\n      for ( int j = 1; j &lt;= i; j++ )\n      {\n         listBox1-&gt;Items-&gt;Add( j );\n      }\n      \n      /* Determines whether the user wants to exit the application.\n       * If not, adds another number to the list box. */\n      while ( MessageBox::Show( &quot;Exit application?&quot;, &quot;&quot;,\n         MessageBoxButtons::YesNo ) == ::DialogResult::No )\n      {\n         // Increments the counter ands add the number to the list box.\n         i++;\n         listBox1-&gt;Items-&gt;Add( i );\n      }\n      \n      // The user wants to exit the application. Close everything down.\n      Application::Exit();\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Application.Exit Example#1\"> &lt;STAThread()&gt; _\n Shared Sub Main() \t\n    &#39; Starts the application.\n    Application.Run(New Form1())\n End Sub\n \n Private Sub button1_Click(sender As object, e As System.EventArgs)\n    &#39; Populates a list box with three numbers.\n    Dim i As Integer = 3\n    Dim j As Integer\n    For j = 1 To i - 1\n       listBox1.Items.Add(j)\n    Next\n \n    &#39; Checks to see whether the user wants to exit the application.\n    &#39; If not, adds another number to the list box.\n    While (MessageBox.Show(&quot;Exit application?&quot;, &quot;&quot;, MessageBoxButtons.YesNo) = _ \n       DialogResult.No)\n       &#39; Increments the counter and adds the number to the list box.\n       i = i + 1\n       listBox1.Items.Add(i)\n    End While\n \n    &#39; The user wants to exit the application. Close everything down.\n    Application.Exit()\n End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Application_SetCompatibleTextRenderingDefault_System_Boolean_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Application_SetCompatibleTextRenderingDefault_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetCompatibleTextRenderingDefault(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the application-wide default for the <code>UseCompatibleTextRendering</code> property defined on certain controls.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void SetCompatibleTextRenderingDefault (bool defaultValue);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>defaultValue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The default value to use for new controls. If <code>true</code>, new controls that support <code>UseCompatibleTextRendering</code> use the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecgdiplus-md.md&quot; -->GDI+<!--END INCLUDE --> based <a class=\"xref\" href=\"system.drawing.graphics\" data-linktype=\"relative-path\">Graphics</a> class for text rendering; if <code>false</code>, new controls use the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecgdi-md.md&quot; -->GDI<!--END INCLUDE --> based <a class=\"xref\" href=\"system.windows.forms.textrenderer\" data-linktype=\"relative-path\">TextRenderer</a> class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>You can only call this method before the first window is created by your Windows Forms application.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Certain Windows Forms controls can render their text using either the <a class=\"xref\" href=\"system.windows.forms.textrenderer\" data-linktype=\"relative-path\">TextRenderer</a> class, which is based on the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecgdi-md.md&quot; -->GDI<!--END INCLUDE --> graphics library, or the <a class=\"xref\" href=\"system.drawing.graphics\" data-linktype=\"relative-path\">Graphics</a> class, which is based on the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecgdiplus-md.md&quot; -->GDI+<!--END INCLUDE --> graphics library. This change was made in the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnlong-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE --> because of performance and localization issues with <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecgdiplus-md.md&quot; -->GDI+<!--END INCLUDE -->. Use SetCompatibleTextRenderingDefault to set the default value of the <code>UseCompatibleTextRendering</code> property for controls that support it.  </p>\n<p> The <code>UseCompatibleTextRendering</code> property is intended to provide visual compatibility between Windows Forms controls that render text using the <a class=\"xref\" href=\"system.windows.forms.textrenderer\" data-linktype=\"relative-path\">TextRenderer</a> class and <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v10-short-md.md&quot; -->.NET Framework 1.0<!--END INCLUDE --> and <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v11-short-md.md&quot; -->.NET Framework 1.1<!--END INCLUDE --> applications that perform custom text rendering using the <a class=\"xref\" href=\"system.drawing.graphics\" data-linktype=\"relative-path\">Graphics</a> class. In most cases, if your application is not being upgraded from <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v10-short-md.md&quot; -->.NET Framework 1.0<!--END INCLUDE --> or <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v11-short-md.md&quot; -->.NET Framework 1.1<!--END INCLUDE -->, it is recommended that you leave <code>UseCompatibleTextRendering</code> set to the default value of <code>false</code>.  </p>\n<p> The <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecgdi-md.md&quot; -->GDI<!--END INCLUDE --> based <a class=\"xref\" href=\"system.windows.forms.textrenderer\" data-linktype=\"relative-path\">TextRenderer</a> class was introduced in the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnlong-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE --> to improve performance, make text look better, and improve support for international fonts. In earlier versions of the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnshort-md.md&quot; -->.NET Framework<!--END INCLUDE -->, the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecgdiplus-md.md&quot; -->GDI+<!--END INCLUDE --> based <a class=\"xref\" href=\"system.drawing.graphics\" data-linktype=\"relative-path\">Graphics</a> class was used to perform all text rendering. <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecgdi-md.md&quot; -->GDI<!--END INCLUDE --> calculates character spacing and word wrapping differently from <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/ndptecgdiplus-md.md&quot; -->GDI+<!--END INCLUDE -->. In a Windows Forms application that uses the <a class=\"xref\" href=\"system.drawing.graphics\" data-linktype=\"relative-path\">Graphics</a> class to render text, this could cause the text for controls that use <a class=\"xref\" href=\"system.windows.forms.textrenderer\" data-linktype=\"relative-path\">TextRenderer</a> to appear different from the other text in the application. To resolve this incompatibility, you can set the <code>UseCompatibleTextRendering</code> property to <code>true</code>. To set <code>UseCompatibleTextRendering</code> to <code>true</code> for all supported controls in the application, call the SetCompatibleTextRenderingDefault method with a parameter of <code>true</code>.  </p>\n<p> You should never call this method if your Windows Forms code is hosted in another application, such as Internet Explorer. Only call this method in stand-alone Windows Forms applications.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <div class=\"IMPORTANT\"><h5>Important</h5><p> To set the default value for <code>UseCompatibleTextRendering</code> in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/vbprvblong-md.md&quot; -->Visual Basic 2005<!--END INCLUDE --> or later, see <a class=\"xref\" href=\"microsoft.visualbasic.applicationservices.windowsformsapplicationbase#Microsoft_VisualBasic_ApplicationServices_WindowsFormsApplicationBase_UseCompatibleTextRendering_\" data-linktype=\"relative-path\">UseCompatibleTextRendering</a>.  </p>\n</div>\n<p> In <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/csprcslong-md.md&quot; -->Visual C# 2005<!--END INCLUDE --> or later, a call to SetCompatibleTextRenderingDefault is automatically generated in the Program.cs file. To change the text rendering default, modify the generated code.  </p>\n<pre><code class=\"lang-scr\">static class Program  \n{  \n    /// &lt;summary&gt;  \n    /// The main entry point for the application.  \n    /// &lt;/summary&gt;  \n    [STAThread]  \n    static void Main()  \n    {  \n        Application.EnableVisualStyles();  \n        Application.SetCompatibleTextRenderingDefault(false);  \n        Application.Run(new Form1());  \n    }  \n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Application_SetSuspendState_System_Windows_Forms_PowerState_System_Boolean_System_Boolean_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Application_SetSuspendState_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetSuspendState(PowerState,Boolean,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Suspends or hibernates the system, or requests that the system be suspended or hibernated.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool SetSuspendState (System.Windows.Forms.PowerState state, bool force, bool disableWakeEvent);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.powerstate\" data-linktype=\"relative-path\">PowerState</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.powerstate\" data-linktype=\"relative-path\">PowerState</a> indicating the power activity mode to which to transition.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>force</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to force the suspended mode immediately; <code>false</code> to cause Windows to send a suspend request to every application.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>disableWakeEvent</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to disable restoring the system&#39;s power status to active on a wake event, <code>false</code> to enable restoring the system&#39;s power status to active on a wake event.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the system is being suspended, otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If an application does not respond to a suspend request within 20 seconds, Windows determines that it is in a non-responsive state, and that the application can either be put to sleep or terminated. Once an application responds to a suspend request, however, it can take whatever time it needs to clean up resources and shut down active processes.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Application_SetUnhandledExceptionMode_System_Windows_Forms_UnhandledExceptionMode_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Application_SetUnhandledExceptionMode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetUnhandledExceptionMode(UnhandledExceptionMode)</div>        \r\n          </div>\r\n    \r\n            <p>Instructs the application how to respond to unhandled exceptions.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void SetUnhandledExceptionMode (System.Windows.Forms.UnhandledExceptionMode mode);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>mode</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.unhandledexceptionmode\" data-linktype=\"relative-path\">UnhandledExceptionMode</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.windows.forms.unhandledexceptionmode\" data-linktype=\"relative-path\">UnhandledExceptionMode</a> value describing how the application should behave if an exception is thrown without being caught.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>You cannot set the exception mode after the application has created its first window.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>It is often not feasible to catch all of the exceptions thrown by Windows Forms. Using this method, you can instruct your application whether it should catch all unhandled exceptions thrown by Windows Forms components and continue operating, or whether it should expose them to the user and halt execution.  </p>\n<p> Call SetUnhandledExceptionMode before you instantiate the main form of your application using the <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_Run_\" data-linktype=\"relative-path\">Run</a> method.  </p>\n<p> To catch exceptions that occur in threads not created and owned by Windows Forms, use the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_UnhandledException\" data-linktype=\"relative-path\">UnhandledException</a> event handler.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example sets event handlers for exceptions that occur on Windows Forms threads and exceptions that occur on other threads. It sets SetUnhandledExceptionMode so that all exceptions are handled by the application, regardless of the settings in the application&#39;s user configuration file. It uses the <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_ThreadException\" data-linktype=\"relative-path\">ThreadException</a> event to handle UI thread exceptions, and the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_UnhandledException\" data-linktype=\"relative-path\">UnhandledException</a> event to handle non-UI thread exceptions. Since <a class=\"xref\" href=\"system.appdomain#System_AppDomain_UnhandledException\" data-linktype=\"relative-path\">UnhandledException</a> cannot prevent an application from terminating, the example simply logs the error in the application event log before termination.  </p>\n<p> This example assumes that you have defined two <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> controls, <code>button1</code> and <code>button2</code>, on your <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Application.ThreadException Example#1\">   // Creates a class to throw the error.\npublic:\n   ref class ErrorHandler: public System::Windows::Forms::Form\n   {\n      // Inserts the code to create a form with a button.\n\n      // Programs the button to throw an exception when clicked.\n   private:\n      void button1_Click( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n      {\n         throw gcnew ArgumentException( &quot;The parameter was invalid&quot; );\n      }\n\n   public:\n      static void Main()\n      {\n         // Creates an instance of the methods that will handle the exception.\n         CustomExceptionHandler ^ eh = gcnew CustomExceptionHandler;\n         \n         // Adds the event handler to to the event.\n         Application::ThreadException += gcnew ThreadExceptionEventHandler( eh, &amp;Form1::CustomExceptionHandler::OnThreadException );\n         \n         // Runs the application.\n         Application::Run( gcnew ErrorHandler );\n      }\n   };\n\n   // Creates a class to handle the exception event.\ninternal:\n   ref class CustomExceptionHandler\n   {\n      // Handles the exception event.\n   public:\n      void OnThreadException( Object^ /*sender*/, ThreadExceptionEventArgs^ t )\n      {\n         System::Windows::Forms::DialogResult result = ::DialogResult::Cancel;\n         try\n         {\n            result = this-&gt;ShowThreadExceptionDialog( t-&gt;Exception );\n         }\n         catch ( Exception^ ) \n         {\n            try\n            {\n               MessageBox::Show( &quot;Fatal Error&quot;, &quot;Fatal Error&quot;, MessageBoxButtons::AbortRetryIgnore, MessageBoxIcon::Stop );\n            }\n            finally\n            {\n               Application::Exit();\n            }\n         }\n         \n         // Exits the program when the user clicks Abort.\n         if ( result == ::DialogResult::Abort )\n         {\n            Application::Exit();\n         }\n      }\n\n      // Creates the error message and displays it.\n   private:\n      System::Windows::Forms::DialogResult ShowThreadExceptionDialog( Exception^ e )\n      {\n         String^ errorMsg = &quot;An error occurred please contact the adminstrator with the following information:<br><br>&quot;;\n         errorMsg = String::Concat( errorMsg, e-&gt;Message, &quot;<br><br>Stack Trace:<br>&quot;, e-&gt;StackTrace );\n         return MessageBox::Show( errorMsg, &quot;Application Error&quot;, MessageBoxButtons::AbortRetryIgnore, MessageBoxIcon::Stop );\n      }\n   };\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Application.ThreadException Example#1\">        Thread newThread = null;\n\n        // Starts the application. \n        [SecurityPermission(SecurityAction.Demand, Flags = SecurityPermissionFlag.ControlAppDomain)]\n        public static void Main(string[] args)\n        {\n            // Add the event handler for handling UI thread exceptions to the event.\n            Application.ThreadException += new ThreadExceptionEventHandler(ErrorHandlerForm.Form1_UIThreadException);\n\n            // Set the unhandled exception mode to force all Windows Forms errors to go through\n            // our handler.\n            Application.SetUnhandledExceptionMode(UnhandledExceptionMode.CatchException);\n\n            // Add the event handler for handling non-UI thread exceptions to the event. \n            AppDomain.CurrentDomain.UnhandledException +=\n                new UnhandledExceptionEventHandler(CurrentDomain_UnhandledException);\n\n            // Runs the application.\n            Application.Run(new ErrorHandlerForm());\n        }\n\n        // Programs the button to throw an exception when clicked.\n        private void button1_Click(object sender, System.EventArgs e)\n        {\n            throw new ArgumentException(&quot;The parameter was invalid&quot;);\n        }\n\n        // Start a new thread, separate from Windows Forms, that will throw an exception.\n        private void button2_Click(object sender, System.EventArgs e)\n        {\n            ThreadStart newThreadStart = new ThreadStart(newThread_Execute);\n            newThread = new Thread(newThreadStart);\n            newThread.Start();\n        }\n\n        // The thread we start up to demonstrate non-UI exception handling. \n        void newThread_Execute()\n        {\n            throw new Exception(&quot;The method or operation is not implemented.&quot;);\n        }\n\n        // Handle the UI exceptions by showing a dialog box, and asking the user whether\n        // or not they wish to abort execution.\n        private static void Form1_UIThreadException(object sender, ThreadExceptionEventArgs t)\n        {\n            DialogResult result = DialogResult.Cancel;\n            try\n            {\n                result = ShowThreadExceptionDialog(&quot;Windows Forms Error&quot;, t.Exception);\n            }\n            catch\n            {\n                try\n                {\n                    MessageBox.Show(&quot;Fatal Windows Forms Error&quot;,\n                        &quot;Fatal Windows Forms Error&quot;, MessageBoxButtons.AbortRetryIgnore, MessageBoxIcon.Stop);\n                }\n                finally\n                {\n                    Application.Exit();\n                }\n            }\n\n            // Exits the program when the user clicks Abort.\n            if (result == DialogResult.Abort)\n                Application.Exit();\n        }\n\n        // Handle the UI exceptions by showing a dialog box, and asking the user whether\n        // or not they wish to abort execution.\n        // NOTE: This exception cannot be kept from terminating the application - it can only \n        // log the event, and inform the user about it. \n        private static void CurrentDomain_UnhandledException(object sender, UnhandledExceptionEventArgs e)\n        {\n            try\n            {\n                Exception ex = (Exception)e.ExceptionObject;\n                string errorMsg = &quot;An application error occurred. Please contact the adminstrator &quot; +\n                    &quot;with the following information:<br><br>&quot;;\n\n                // Since we can&#39;t prevent the app from terminating, log this to the event log.\n                if (!EventLog.SourceExists(&quot;ThreadException&quot;))\n                {\n                    EventLog.CreateEventSource(&quot;ThreadException&quot;, &quot;Application&quot;);\n                }\n\n                // Create an EventLog instance and assign its source.\n                EventLog myLog = new EventLog();\n                myLog.Source = &quot;ThreadException&quot;;\n                myLog.WriteEntry(errorMsg + ex.Message + &quot;<br><br>Stack Trace:<br>&quot; + ex.StackTrace);\n            }\n            catch (Exception exc)\n            {\n                try\n                {\n                    MessageBox.Show(&quot;Fatal Non-UI Error&quot;,\n                        &quot;Fatal Non-UI Error. Could not write the error to the event log. Reason: &quot;\n                        + exc.Message, MessageBoxButtons.OK, MessageBoxIcon.Stop);\n                }\n                finally\n                {\n                    Application.Exit();\n                }\n            }\n        }\n\n        // Creates the error message and displays it.\n        private static DialogResult ShowThreadExceptionDialog(string title, Exception e)\n        {\n            string errorMsg = &quot;An application error occurred. Please contact the adminstrator &quot; +\n                &quot;with the following information:<br><br>&quot;;\n            errorMsg = errorMsg + e.Message + &quot;<br><br>Stack Trace:<br>&quot; + e.StackTrace;\n            return MessageBox.Show(errorMsg, title, MessageBoxButtons.AbortRetryIgnore,\n                MessageBoxIcon.Stop);\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Application.ThreadException Example#1\">        Private newThread As Thread = Nothing\n\n        &#39; Starts the application. \n        &lt;SecurityPermission(SecurityAction.Demand, Flags:=SecurityPermissionFlag.ControlAppDomain)&gt; _\n        Public Shared Sub Main()\n            &#39; Add the event handler for handling UI thread exceptions to the event.\n            AddHandler Application.ThreadException, AddressOf ErrorHandlerForm.Form1_UIThreadException\n\n            &#39; Set the unhandled exception mode to force all Windows Forms errors to go through\n            &#39; our handler.\n            Application.SetUnhandledExceptionMode(UnhandledExceptionMode.CatchException)\n\n            &#39; Add the event handler for handling non-UI thread exceptions to the event. \n            AddHandler AppDomain.CurrentDomain.UnhandledException, AddressOf CurrentDomain_UnhandledException\n\n            &#39; Runs the application.\n            Application.Run(New ErrorHandlerForm())\n        End Sub\n\n\n        &#39; Programs the button to throw an exception when clicked.\n        Private Sub button1_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles button1.Click\n            Throw New ArgumentException(&quot;The parameter was invalid&quot;)\n        End Sub\n\n        &#39; Start a new thread, separate from Windows Forms, that will throw an exception.\n        Private Sub button2_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles button2.Click\n            Dim newThreadStart As New ThreadStart(AddressOf newThread_Execute)\n            newThread = New Thread(newThreadStart)\n            newThread.Start()\n        End Sub\n\n\n        &#39; The thread we start up to demonstrate non-UI exception handling. \n        Sub newThread_Execute()\n            Throw New Exception(&quot;The method or operation is not implemented.&quot;)\n        End Sub\n\n\n        &#39; Handle the UI exceptions by showing a dialog box, and asking the user whether\n        &#39; or not they wish to abort execution.\n        Private Shared Sub Form1_UIThreadException(ByVal sender As Object, ByVal t As ThreadExceptionEventArgs)\n            Dim result As System.Windows.Forms.DialogResult = _\n                System.Windows.Forms.DialogResult.Cancel\n            Try\n                result = ShowThreadExceptionDialog(&quot;Windows Forms Error&quot;, t.Exception)\n            Catch\n                Try\n                    MessageBox.Show(&quot;Fatal Windows Forms Error&quot;, _\n                        &quot;Fatal Windows Forms Error&quot;, MessageBoxButtons.AbortRetryIgnore, MessageBoxIcon.Stop)\n                Finally\n                    Application.Exit()\n                End Try\n            End Try\n\n            &#39; Exits the program when the user clicks Abort.\n            If result = DialogResult.Abort Then\n                Application.Exit()\n            End If\n        End Sub\n\n        &#39; Handle the UI exceptions by showing a dialog box, and asking the user whether\n        &#39; or not they wish to abort execution.\n        &#39; NOTE: This exception cannot be kept from terminating the application - it can only \n        &#39; log the event, and inform the user about it. \n        Private Shared Sub CurrentDomain_UnhandledException(ByVal sender As Object, _\n        ByVal e As UnhandledExceptionEventArgs)\n            Try\n                Dim ex As Exception = CType(e.ExceptionObject, Exception)\n                Dim errorMsg As String = &quot;An application error occurred. Please contact the adminstrator &quot; &amp; _\n                    &quot;with the following information:&quot; &amp; ControlChars.Lf &amp; ControlChars.Lf\n\n                &#39; Since we can&#39;t prevent the app from terminating, log this to the event log.\n                If (Not EventLog.SourceExists(&quot;ThreadException&quot;)) Then\n                    EventLog.CreateEventSource(&quot;ThreadException&quot;, &quot;Application&quot;)\n                End If\n\n                &#39; Create an EventLog instance and assign its source.\n                Dim myLog As New EventLog()\n                myLog.Source = &quot;ThreadException&quot;\n                myLog.WriteEntry((errorMsg + ex.Message &amp; ControlChars.Lf &amp; ControlChars.Lf &amp; _\n                    &quot;Stack Trace:&quot; &amp; ControlChars.Lf &amp; ex.StackTrace))\n            Catch exc As Exception\n                Try\n                    MessageBox.Show(&quot;Fatal Non-UI Error&quot;, &quot;Fatal Non-UI Error. Could not write the error to the event log. &quot; &amp; _\n                        &quot;Reason: &quot; &amp; exc.Message, MessageBoxButtons.OK, MessageBoxIcon.Stop)\n                Finally\n                    Application.Exit()\n                End Try\n            End Try\n        End Sub\n\n\n        &#39; Creates the error message and displays it.\n        Private Shared Function ShowThreadExceptionDialog(ByVal title As String, ByVal e As Exception) As DialogResult\n            Dim errorMsg As String = &quot;An application error occurred. Please contact the adminstrator &quot; &amp; _\n\t\t &quot;with the following information:&quot; &amp; ControlChars.Lf &amp; ControlChars.Lf\n            errorMsg = errorMsg &amp; e.Message &amp; ControlChars.Lf &amp; _\n\t\t ControlChars.Lf &amp; &quot;Stack Trace:&quot; &amp; ControlChars.Lf &amp; e.StackTrace\n\n            Return MessageBox.Show(errorMsg, title, MessageBoxButtons.AbortRetryIgnore, MessageBoxIcon.Stop)\n        End Function\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Application_SetUnhandledExceptionMode_System_Windows_Forms_UnhandledExceptionMode_System_Boolean_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Application_SetUnhandledExceptionMode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetUnhandledExceptionMode(UnhandledExceptionMode,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Instructs the application how to respond to unhandled exceptions, optionally applying thread-specific behavior.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void SetUnhandledExceptionMode (System.Windows.Forms.UnhandledExceptionMode mode, bool threadScope);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>mode</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.unhandledexceptionmode\" data-linktype=\"relative-path\">UnhandledExceptionMode</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.windows.forms.unhandledexceptionmode\" data-linktype=\"relative-path\">UnhandledExceptionMode</a> value describing how the application should behave if an exception is thrown without being caught.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>threadScope</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to set the thread exception mode; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>You cannot set the exception mode after the application has created its first window.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>It is often not feasible to catch all of the exceptions thrown by Windows Forms. Using this method, you can instruct your application whether it should catch all unhandled exceptions thrown by Windows Forms components and continue operating, or whether it should expose them to the user and halt execution.  </p>\n<p> Call <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_SetUnhandledExceptionMode_\" data-linktype=\"relative-path\">SetUnhandledExceptionMode</a> before you instantiate the main form of your application using the <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_Run_\" data-linktype=\"relative-path\">Run</a> method.  </p>\n<p> When <code>threadScope</code> is <code>true</code>, the thread exception mode is set. The thread exception mode overrides the application exception mode if <code>mode</code> is not set to <a class=\"xref\" href=\"system.windows.forms.unhandledexceptionmode\" data-linktype=\"relative-path\">UnhandledExceptionMode</a>.  </p>\n<p> When <code>threadScope</code> is <code>false</code>, the application exception mode is set. The application exception mode is used for all threads that have the <a class=\"xref\" href=\"system.windows.forms.unhandledexceptionmode\" data-linktype=\"relative-path\">UnhandledExceptionMode</a> mode. Setting the application exception mode does not affect the setting of the current thread.  </p>\n<p> To catch exceptions that occur in threads not created and owned by Windows Forms, use the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_UnhandledException\" data-linktype=\"relative-path\">UnhandledException</a> event handler.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example sets event handlers for exceptions that occur on Windows Forms threads and exceptions that occur on other threads. It sets <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_SetUnhandledExceptionMode_\" data-linktype=\"relative-path\">SetUnhandledExceptionMode</a> so that all exceptions are handled by the application, regardless of the settings in the application&#39;s user configuration file. It uses the <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_ThreadException\" data-linktype=\"relative-path\">ThreadException</a> event to handle UI thread exceptions, and the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_UnhandledException\" data-linktype=\"relative-path\">UnhandledException</a> event to handle non-UI thread exceptions. Since <a class=\"xref\" href=\"system.appdomain#System_AppDomain_UnhandledException\" data-linktype=\"relative-path\">UnhandledException</a> cannot prevent an application from terminating, the example simply logs the error in the application event log before termination.  </p>\n<p> This example assumes that you have defined two <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> controls, <code>button1</code> and <code>button2</code>, on your <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Application.ThreadException Example#1\">   // Creates a class to throw the error.\npublic:\n   ref class ErrorHandler: public System::Windows::Forms::Form\n   {\n      // Inserts the code to create a form with a button.\n\n      // Programs the button to throw an exception when clicked.\n   private:\n      void button1_Click( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n      {\n         throw gcnew ArgumentException( &quot;The parameter was invalid&quot; );\n      }\n\n   public:\n      static void Main()\n      {\n         // Creates an instance of the methods that will handle the exception.\n         CustomExceptionHandler ^ eh = gcnew CustomExceptionHandler;\n         \n         // Adds the event handler to to the event.\n         Application::ThreadException += gcnew ThreadExceptionEventHandler( eh, &amp;Form1::CustomExceptionHandler::OnThreadException );\n         \n         // Runs the application.\n         Application::Run( gcnew ErrorHandler );\n      }\n   };\n\n   // Creates a class to handle the exception event.\ninternal:\n   ref class CustomExceptionHandler\n   {\n      // Handles the exception event.\n   public:\n      void OnThreadException( Object^ /*sender*/, ThreadExceptionEventArgs^ t )\n      {\n         System::Windows::Forms::DialogResult result = ::DialogResult::Cancel;\n         try\n         {\n            result = this-&gt;ShowThreadExceptionDialog( t-&gt;Exception );\n         }\n         catch ( Exception^ ) \n         {\n            try\n            {\n               MessageBox::Show( &quot;Fatal Error&quot;, &quot;Fatal Error&quot;, MessageBoxButtons::AbortRetryIgnore, MessageBoxIcon::Stop );\n            }\n            finally\n            {\n               Application::Exit();\n            }\n         }\n         \n         // Exits the program when the user clicks Abort.\n         if ( result == ::DialogResult::Abort )\n         {\n            Application::Exit();\n         }\n      }\n\n      // Creates the error message and displays it.\n   private:\n      System::Windows::Forms::DialogResult ShowThreadExceptionDialog( Exception^ e )\n      {\n         String^ errorMsg = &quot;An error occurred please contact the adminstrator with the following information:<br><br>&quot;;\n         errorMsg = String::Concat( errorMsg, e-&gt;Message, &quot;<br><br>Stack Trace:<br>&quot;, e-&gt;StackTrace );\n         return MessageBox::Show( errorMsg, &quot;Application Error&quot;, MessageBoxButtons::AbortRetryIgnore, MessageBoxIcon::Stop );\n      }\n   };\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Application.ThreadException Example#1\">        Thread newThread = null;\n\n        // Starts the application. \n        [SecurityPermission(SecurityAction.Demand, Flags = SecurityPermissionFlag.ControlAppDomain)]\n        public static void Main(string[] args)\n        {\n            // Add the event handler for handling UI thread exceptions to the event.\n            Application.ThreadException += new ThreadExceptionEventHandler(ErrorHandlerForm.Form1_UIThreadException);\n\n            // Set the unhandled exception mode to force all Windows Forms errors to go through\n            // our handler.\n            Application.SetUnhandledExceptionMode(UnhandledExceptionMode.CatchException);\n\n            // Add the event handler for handling non-UI thread exceptions to the event. \n            AppDomain.CurrentDomain.UnhandledException +=\n                new UnhandledExceptionEventHandler(CurrentDomain_UnhandledException);\n\n            // Runs the application.\n            Application.Run(new ErrorHandlerForm());\n        }\n\n        // Programs the button to throw an exception when clicked.\n        private void button1_Click(object sender, System.EventArgs e)\n        {\n            throw new ArgumentException(&quot;The parameter was invalid&quot;);\n        }\n\n        // Start a new thread, separate from Windows Forms, that will throw an exception.\n        private void button2_Click(object sender, System.EventArgs e)\n        {\n            ThreadStart newThreadStart = new ThreadStart(newThread_Execute);\n            newThread = new Thread(newThreadStart);\n            newThread.Start();\n        }\n\n        // The thread we start up to demonstrate non-UI exception handling. \n        void newThread_Execute()\n        {\n            throw new Exception(&quot;The method or operation is not implemented.&quot;);\n        }\n\n        // Handle the UI exceptions by showing a dialog box, and asking the user whether\n        // or not they wish to abort execution.\n        private static void Form1_UIThreadException(object sender, ThreadExceptionEventArgs t)\n        {\n            DialogResult result = DialogResult.Cancel;\n            try\n            {\n                result = ShowThreadExceptionDialog(&quot;Windows Forms Error&quot;, t.Exception);\n            }\n            catch\n            {\n                try\n                {\n                    MessageBox.Show(&quot;Fatal Windows Forms Error&quot;,\n                        &quot;Fatal Windows Forms Error&quot;, MessageBoxButtons.AbortRetryIgnore, MessageBoxIcon.Stop);\n                }\n                finally\n                {\n                    Application.Exit();\n                }\n            }\n\n            // Exits the program when the user clicks Abort.\n            if (result == DialogResult.Abort)\n                Application.Exit();\n        }\n\n        // Handle the UI exceptions by showing a dialog box, and asking the user whether\n        // or not they wish to abort execution.\n        // NOTE: This exception cannot be kept from terminating the application - it can only \n        // log the event, and inform the user about it. \n        private static void CurrentDomain_UnhandledException(object sender, UnhandledExceptionEventArgs e)\n        {\n            try\n            {\n                Exception ex = (Exception)e.ExceptionObject;\n                string errorMsg = &quot;An application error occurred. Please contact the adminstrator &quot; +\n                    &quot;with the following information:<br><br>&quot;;\n\n                // Since we can&#39;t prevent the app from terminating, log this to the event log.\n                if (!EventLog.SourceExists(&quot;ThreadException&quot;))\n                {\n                    EventLog.CreateEventSource(&quot;ThreadException&quot;, &quot;Application&quot;);\n                }\n\n                // Create an EventLog instance and assign its source.\n                EventLog myLog = new EventLog();\n                myLog.Source = &quot;ThreadException&quot;;\n                myLog.WriteEntry(errorMsg + ex.Message + &quot;<br><br>Stack Trace:<br>&quot; + ex.StackTrace);\n            }\n            catch (Exception exc)\n            {\n                try\n                {\n                    MessageBox.Show(&quot;Fatal Non-UI Error&quot;,\n                        &quot;Fatal Non-UI Error. Could not write the error to the event log. Reason: &quot;\n                        + exc.Message, MessageBoxButtons.OK, MessageBoxIcon.Stop);\n                }\n                finally\n                {\n                    Application.Exit();\n                }\n            }\n        }\n\n        // Creates the error message and displays it.\n        private static DialogResult ShowThreadExceptionDialog(string title, Exception e)\n        {\n            string errorMsg = &quot;An application error occurred. Please contact the adminstrator &quot; +\n                &quot;with the following information:<br><br>&quot;;\n            errorMsg = errorMsg + e.Message + &quot;<br><br>Stack Trace:<br>&quot; + e.StackTrace;\n            return MessageBox.Show(errorMsg, title, MessageBoxButtons.AbortRetryIgnore,\n                MessageBoxIcon.Stop);\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Application.ThreadException Example#1\">        Private newThread As Thread = Nothing\n\n        &#39; Starts the application. \n        &lt;SecurityPermission(SecurityAction.Demand, Flags:=SecurityPermissionFlag.ControlAppDomain)&gt; _\n        Public Shared Sub Main()\n            &#39; Add the event handler for handling UI thread exceptions to the event.\n            AddHandler Application.ThreadException, AddressOf ErrorHandlerForm.Form1_UIThreadException\n\n            &#39; Set the unhandled exception mode to force all Windows Forms errors to go through\n            &#39; our handler.\n            Application.SetUnhandledExceptionMode(UnhandledExceptionMode.CatchException)\n\n            &#39; Add the event handler for handling non-UI thread exceptions to the event. \n            AddHandler AppDomain.CurrentDomain.UnhandledException, AddressOf CurrentDomain_UnhandledException\n\n            &#39; Runs the application.\n            Application.Run(New ErrorHandlerForm())\n        End Sub\n\n\n        &#39; Programs the button to throw an exception when clicked.\n        Private Sub button1_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles button1.Click\n            Throw New ArgumentException(&quot;The parameter was invalid&quot;)\n        End Sub\n\n        &#39; Start a new thread, separate from Windows Forms, that will throw an exception.\n        Private Sub button2_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles button2.Click\n            Dim newThreadStart As New ThreadStart(AddressOf newThread_Execute)\n            newThread = New Thread(newThreadStart)\n            newThread.Start()\n        End Sub\n\n\n        &#39; The thread we start up to demonstrate non-UI exception handling. \n        Sub newThread_Execute()\n            Throw New Exception(&quot;The method or operation is not implemented.&quot;)\n        End Sub\n\n\n        &#39; Handle the UI exceptions by showing a dialog box, and asking the user whether\n        &#39; or not they wish to abort execution.\n        Private Shared Sub Form1_UIThreadException(ByVal sender As Object, ByVal t As ThreadExceptionEventArgs)\n            Dim result As System.Windows.Forms.DialogResult = _\n                System.Windows.Forms.DialogResult.Cancel\n            Try\n                result = ShowThreadExceptionDialog(&quot;Windows Forms Error&quot;, t.Exception)\n            Catch\n                Try\n                    MessageBox.Show(&quot;Fatal Windows Forms Error&quot;, _\n                        &quot;Fatal Windows Forms Error&quot;, MessageBoxButtons.AbortRetryIgnore, MessageBoxIcon.Stop)\n                Finally\n                    Application.Exit()\n                End Try\n            End Try\n\n            &#39; Exits the program when the user clicks Abort.\n            If result = DialogResult.Abort Then\n                Application.Exit()\n            End If\n        End Sub\n\n        &#39; Handle the UI exceptions by showing a dialog box, and asking the user whether\n        &#39; or not they wish to abort execution.\n        &#39; NOTE: This exception cannot be kept from terminating the application - it can only \n        &#39; log the event, and inform the user about it. \n        Private Shared Sub CurrentDomain_UnhandledException(ByVal sender As Object, _\n        ByVal e As UnhandledExceptionEventArgs)\n            Try\n                Dim ex As Exception = CType(e.ExceptionObject, Exception)\n                Dim errorMsg As String = &quot;An application error occurred. Please contact the adminstrator &quot; &amp; _\n                    &quot;with the following information:&quot; &amp; ControlChars.Lf &amp; ControlChars.Lf\n\n                &#39; Since we can&#39;t prevent the app from terminating, log this to the event log.\n                If (Not EventLog.SourceExists(&quot;ThreadException&quot;)) Then\n                    EventLog.CreateEventSource(&quot;ThreadException&quot;, &quot;Application&quot;)\n                End If\n\n                &#39; Create an EventLog instance and assign its source.\n                Dim myLog As New EventLog()\n                myLog.Source = &quot;ThreadException&quot;\n                myLog.WriteEntry((errorMsg + ex.Message &amp; ControlChars.Lf &amp; ControlChars.Lf &amp; _\n                    &quot;Stack Trace:&quot; &amp; ControlChars.Lf &amp; ex.StackTrace))\n            Catch exc As Exception\n                Try\n                    MessageBox.Show(&quot;Fatal Non-UI Error&quot;, &quot;Fatal Non-UI Error. Could not write the error to the event log. &quot; &amp; _\n                        &quot;Reason: &quot; &amp; exc.Message, MessageBoxButtons.OK, MessageBoxIcon.Stop)\n                Finally\n                    Application.Exit()\n                End Try\n            End Try\n        End Sub\n\n\n        &#39; Creates the error message and displays it.\n        Private Shared Function ShowThreadExceptionDialog(ByVal title As String, ByVal e As Exception) As DialogResult\n            Dim errorMsg As String = &quot;An application error occurred. Please contact the adminstrator &quot; &amp; _\n\t\t &quot;with the following information:&quot; &amp; ControlChars.Lf &amp; ControlChars.Lf\n            errorMsg = errorMsg &amp; e.Message &amp; ControlChars.Lf &amp; _\n\t\t ControlChars.Lf &amp; &quot;Stack Trace:&quot; &amp; ControlChars.Lf &amp; e.StackTrace\n\n            Return MessageBox.Show(errorMsg, title, MessageBoxButtons.AbortRetryIgnore, MessageBoxIcon.Stop)\n        End Function\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Application_UnregisterMessageLoop\">\r\n    \r\n            <a id=\"System_Windows_Forms_Application_UnregisterMessageLoop_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UnregisterMessageLoop()</div>        \r\n          </div>\r\n    \r\n            <p>Unregisters the message loop callback made with <span class=\"xref\">stem.Windows.Forms.Application.RegisterMessageLoop*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void UnregisterMessageLoop ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"events\">\r\n        <h2>Events\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Application_ApplicationExit\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ApplicationExit</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the application is about to shut down.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static event EventHandler ApplicationExit;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You must attach the event handlers to the <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_Exit_\" data-linktype=\"relative-path\">Exit</a> event to perform unhandled, required tasks before the application stops running. You can close files opened by this application, or dispose of objects that garbage collection did not reclaim.  </p>\n<p> Because this is a static event, you must detach any event handlers attached to this event in the ApplicationExit event handler itself. If you do not detach these handlers, they will remain attached to the event and continue to consume memory.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays two forms and exits the application when both forms are closed. When the application starts and exits, the position of each form is remembered. This example demonstrates using the ApplicationExit event to know when the form positions should be persisted to the file, and when the <code>FileStream</code> should be closed.  </p>\n<p> The class <code>MyApplicationContext</code> inherits from <a class=\"xref\" href=\"system.windows.forms.applicationcontext\" data-linktype=\"relative-path\">ApplicationContext</a> and keeps track of when each form is closed, and exits the current thread when they both are. The class remembers the position of each form when it is closed. When the ApplicationExit event occurs, the class writes the positions of each for the user to the file. The form position data is stored in a file titled <code>appdata.txt</code> that is created in the location determined by <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_UserAppDataPath_\" data-linktype=\"relative-path\">UserAppDataPath</a>. The <code>Main</code> method calls <code>Application.Run(context)</code> to start the application given the <a class=\"xref\" href=\"system.windows.forms.applicationcontext\" data-linktype=\"relative-path\">ApplicationContext</a>.  </p>\n<p> This code is an excerpt from the example shown in the <a class=\"xref\" href=\"system.windows.forms.applicationcontext\" data-linktype=\"relative-path\">ApplicationContext</a> class overview. See <a class=\"xref\" href=\"system.windows.forms.applicationcontext\" data-linktype=\"relative-path\">ApplicationContext</a> for the whole code listing.  </p>\n<pre><code class=\"lang-vb\" name=\"Application#5\">    Public Sub New()\n        MyBase.New()\n        formCount = 0\n\n        &#39; Handle the ApplicationExit event to know when the application is exiting.\n        AddHandler Application.ApplicationExit, AddressOf OnApplicationExit\n\n        Try\n            &#39; Create a file that the application will store user specific data in.\n            userData = New FileStream(Application.UserAppDataPath + &quot;\\appdata.txt&quot;, FileMode.OpenOrCreate)\n\n        Catch e As IOException\n            &#39; Inform the user that an error occurred.\n            MessageBox.Show(&quot;An error occurred while attempting to show the application.&quot; + _\n                            &quot;The error is:&quot; + e.ToString())\n\n            &#39; Exit the current thread instead of showing the windows.\n            ExitThread()\n        End Try\n\n        &#39; Create both application forms and handle the Closed event\n        &#39; to know when both forms are closed.\n        form1 = New AppForm1()\n        AddHandler form1.Closed, AddressOf OnFormClosed\n        AddHandler form1.Closing, AddressOf OnFormClosing\n        formCount = formCount + 1\n\n        form2 = New AppForm2()\n        AddHandler form2.Closed, AddressOf OnFormClosed\n        AddHandler form2.Closing, AddressOf OnFormClosing\n        formCount = formCount + 1\n\n        &#39; Get the form positions based upon the user specific data.\n        If (ReadFormDataFromFile()) Then\n            &#39; If the data was read from the file, set the form\n            &#39; positions manually.\n            form1.StartPosition = FormStartPosition.Manual\n            form2.StartPosition = FormStartPosition.Manual\n\n            form1.Bounds = form1Position\n            form2.Bounds = form2Position\n        End If\n\n        &#39; Show both forms.\n        form1.Show()\n        form2.Show()\n    End Sub\n\n    Private Sub OnApplicationExit(ByVal sender As Object, ByVal e As EventArgs)\n        &#39; When the application is exiting, write the application data to the\n        &#39; user file and close it.\n        WriteFormDataToFile()\n\n        Try\n            &#39; Ignore any errors that might occur while closing the file handle.\n            userData.Close()\n        Catch\n        End Try\n    End Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"Application#5\">   MyApplicationContext()\n   {\n      formCount = 0;\n      \n      // Handle the ApplicationExit event to know when the application is exiting.\n      Application::ApplicationExit += gcnew EventHandler( this, &amp;MyApplicationContext::OnApplicationExit );\n      try\n      {\n         \n         // Create a file that the application will store user specific data in.\n         userData = gcnew FileStream( String::Concat( Application::UserAppDataPath, &quot;\\\\appdata.txt&quot; ),FileMode::OpenOrCreate );\n      }\n      catch ( IOException^ e ) \n      {\n         \n         // Inform the user that an error occurred.\n         MessageBox::Show( &quot;An error occurred while attempting to show the application. The error is: {0}&quot;, dynamic_cast&lt;String^&gt;(e) );\n         \n         // Exit the current thread instead of showing the windows.\n         ExitThread();\n      }\n\n      \n      // Create both application forms and handle the Closed event\n      // to know when both forms are closed.\n      form1 = gcnew AppForm1;\n      form1-&gt;Closed += gcnew EventHandler( this, &amp;MyApplicationContext::OnFormClosed );\n      form1-&gt;Closing += gcnew CancelEventHandler( this, &amp;MyApplicationContext::OnFormClosing );\n      formCount++;\n      form2 = gcnew AppForm2;\n      form2-&gt;Closed += gcnew EventHandler( this, &amp;MyApplicationContext::OnFormClosed );\n      form2-&gt;Closing += gcnew CancelEventHandler( this, &amp;MyApplicationContext::OnFormClosing );\n      formCount++;\n      \n      // Get the form positions based upon the user specific data.\n      if ( ReadFormDataFromFile() )\n      {\n         \n         // If the data was read from the file, set the form\n         // positions manually.\n         form1-&gt;StartPosition = FormStartPosition::Manual;\n         form2-&gt;StartPosition = FormStartPosition::Manual;\n         form1-&gt;Bounds = form1Position;\n         form2-&gt;Bounds = form2Position;\n      }\n\n      \n      // Show both forms.\n      form1-&gt;Show();\n      form2-&gt;Show();\n   }\n\n   void OnApplicationExit( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // When the application is exiting, write the application data to the\n      // user file and close it.\n      WriteFormDataToFile();\n      try\n      {\n         \n         // Ignore any errors that might occur while closing the file handle.\n         userData-&gt;Close();\n      }\n      catch ( Exception^ ) \n      {\n      }\n\n   }\n\n\nprivate:\n</code></pre><pre><code class=\"lang-cs\" name=\"Application#5\">        private MyApplicationContext() {\n            formCount = 0;\n\n            // Handle the ApplicationExit event to know when the application is exiting.\n            Application.ApplicationExit += new EventHandler(this.OnApplicationExit);\n\n            try {\n                // Create a file that the application will store user specific data in.\n                userData = new FileStream(Application.UserAppDataPath + &quot;\\\\appdata.txt&quot;, FileMode.OpenOrCreate);\n\n            } catch(IOException e) {\n                // Inform the user that an error occurred.\n                MessageBox.Show(&quot;An error occurred while attempting to show the application.&quot; + \n                                &quot;The error is:&quot; + e.ToString());\n\n                // Exit the current thread instead of showing the windows.\n                ExitThread();\n            }\n\n            // Create both application forms and handle the Closed event\n            // to know when both forms are closed.\n            form1 = new AppForm1();\n            form1.Closed += new EventHandler(OnFormClosed);            \n            form1.Closing += new CancelEventHandler(OnFormClosing);            \n            formCount++;\n\n            form2 = new AppForm2();\n            form2.Closed += new EventHandler(OnFormClosed);            \n            form2.Closing += new CancelEventHandler(OnFormClosing);            \n            formCount++;\n\n            // Get the form positions based upon the user specific data.\n            if (ReadFormDataFromFile()) {\n                // If the data was read from the file, set the form\n                // positions manually.\n                form1.StartPosition = FormStartPosition.Manual;\n                form2.StartPosition = FormStartPosition.Manual;\n                \n                form1.Bounds = form1Position;\n                form2.Bounds = form2Position;\n            }\n\n            // Show both forms.\n            form1.Show();\n            form2.Show();\n        }\n\n        private void OnApplicationExit(object sender, EventArgs e) {\n            // When the application is exiting, write the application data to the\n            // user file and close it.\n            WriteFormDataToFile();\n\n            try {\n                // Ignore any errors that might occur while closing the file handle.\n                userData.Close();\n            } catch {}\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Application_EnterThreadModal\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EnterThreadModal</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the application is about to enter a modal state.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static event EventHandler EnterThreadModal;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"CAUTION\"><h5>Caution</h5><p> Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the EnterThreadModal event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <a class=\"xref\" href=\"system.windows.forms.messagebox#System_Windows_Forms_MessageBox_Show_\" data-linktype=\"relative-path\">Show</a> with <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> or appending the message to a multiline <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<p> To run the example code, paste it into a Windows Forms and ensure that the event handler is associated with the EnterThreadModal event.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.EventExamples#3\">private void Application_EnterThreadModal(Object sender, EventArgs e) {\n\n   MessageBox.Show(&quot;You are in the Application.EnterThreadModal event.&quot;);\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.EventExamples#3\">    Private Sub Application_EnterThreadModal(ByVal sender As Object, ByVal e As EventArgs) \n     \n\n        MessageBox.Show(&quot;You are in the Application.EnterThreadModal event.&quot;)\n\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Application_Idle\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Idle</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the application finishes processing and is about to enter the idle state.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static event EventHandler Idle;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If you have tasks that you must perform before the thread becomes idle, attach them to this event.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the Idle event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <a class=\"xref\" href=\"system.windows.forms.messagebox#System_Windows_Forms_MessageBox_Show_\" data-linktype=\"relative-path\">Show</a> with <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> or appending the message to a multiline <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<p> To run the example code, paste it into a Windows Form and make sure that the event handler is associated with the Idle event.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.EventExamples#2\">private void Application_Idle(Object sender, EventArgs e) {\n\n   MessageBox.Show(&quot;You are in the Application.Idle event.&quot;);\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.EventExamples#2\">    Private Sub Application_Idle(ByVal sender As Object, ByVal e As EventArgs) \n     \n        MessageBox.Show(&quot;You are in the Application.Idle event.&quot;)\n\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Application_LeaveThreadModal\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LeaveThreadModal</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the application is about to leave a modal state.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static event EventHandler LeaveThreadModal;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"CAUTION\"><h5>Caution</h5><p> Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the LeaveThreadModal event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <a class=\"xref\" href=\"system.windows.forms.messagebox#System_Windows_Forms_MessageBox_Show_\" data-linktype=\"relative-path\">Show</a> with <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> or appending the message to a multiline <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<p> To run the example code, paste it into a Windows Forms and ensure that the event handler is associated with the LeaveThreadModal event.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.EventExamples#4\">private void Application_LeaveThreadModal(Object sender, EventArgs e) {\n\n   MessageBox.Show(&quot;You are in the Application.LeaveThreadModal event.&quot;);\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.EventExamples#4\">    Private Sub Application_LeaveThreadModal(ByVal sender As Object, ByVal e As EventArgs) \n\n        MessageBox.Show(&quot;You are in the Application.LeaveThreadModal event.&quot;)\n\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Application_ThreadException\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ThreadException</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when an untrapped thread exception is thrown.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static event System.Threading.ThreadExceptionEventHandler ThreadException;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event allows your Windows Forms application to handle otherwise unhandled exceptions that occur in Windows Forms threads. Attach your event handlers to the ThreadException event to deal with these exceptions, which will leave your application in an unknown state. Where possible, exceptions should be handled by a structured exception handling block.  </p>\n<p> You can change whether this callback is used for unhandled Windows Forms thread exceptions by setting <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_SetUnhandledExceptionMode_\" data-linktype=\"relative-path\">SetUnhandledExceptionMode</a>. To catch exceptions that occur in threads not created and owned by Windows Forms, use the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_UnhandledException\" data-linktype=\"relative-path\">UnhandledException</a> event handler.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To guarantee that no activations of this event are missed, you must attach a handler before you call <a class=\"xref\" href=\"system.windows.application#System_Windows_Application_Run_\" data-linktype=\"relative-path\">Run</a>.  </p>\n</div>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example sets event handlers for exceptions that occur on Windows Forms threads and exceptions that occur on other threads. It sets <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_SetUnhandledExceptionMode_\" data-linktype=\"relative-path\">SetUnhandledExceptionMode</a> so that all exceptions are handled by the application, regardless of the settings in the application&#39;s user configuration file. It uses the ThreadException event to handle UI thread exceptions, and the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_UnhandledException\" data-linktype=\"relative-path\">UnhandledException</a> event to handle non-UI thread exceptions. Since <a class=\"xref\" href=\"system.appdomain#System_AppDomain_UnhandledException\" data-linktype=\"relative-path\">UnhandledException</a> cannot prevent an application from terminating, the example simply logs the error in the application event log before termination.  </p>\n<p> This example assumes that you have defined two <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> controls, <code>button1</code> and <code>button2</code>, on your <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Application.ThreadException Example#1\">   // Creates a class to throw the error.\npublic:\n   ref class ErrorHandler: public System::Windows::Forms::Form\n   {\n      // Inserts the code to create a form with a button.\n\n      // Programs the button to throw an exception when clicked.\n   private:\n      void button1_Click( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n      {\n         throw gcnew ArgumentException( &quot;The parameter was invalid&quot; );\n      }\n\n   public:\n      static void Main()\n      {\n         // Creates an instance of the methods that will handle the exception.\n         CustomExceptionHandler ^ eh = gcnew CustomExceptionHandler;\n         \n         // Adds the event handler to to the event.\n         Application::ThreadException += gcnew ThreadExceptionEventHandler( eh, &amp;Form1::CustomExceptionHandler::OnThreadException );\n         \n         // Runs the application.\n         Application::Run( gcnew ErrorHandler );\n      }\n   };\n\n   // Creates a class to handle the exception event.\ninternal:\n   ref class CustomExceptionHandler\n   {\n      // Handles the exception event.\n   public:\n      void OnThreadException( Object^ /*sender*/, ThreadExceptionEventArgs^ t )\n      {\n         System::Windows::Forms::DialogResult result = ::DialogResult::Cancel;\n         try\n         {\n            result = this-&gt;ShowThreadExceptionDialog( t-&gt;Exception );\n         }\n         catch ( Exception^ ) \n         {\n            try\n            {\n               MessageBox::Show( &quot;Fatal Error&quot;, &quot;Fatal Error&quot;, MessageBoxButtons::AbortRetryIgnore, MessageBoxIcon::Stop );\n            }\n            finally\n            {\n               Application::Exit();\n            }\n         }\n         \n         // Exits the program when the user clicks Abort.\n         if ( result == ::DialogResult::Abort )\n         {\n            Application::Exit();\n         }\n      }\n\n      // Creates the error message and displays it.\n   private:\n      System::Windows::Forms::DialogResult ShowThreadExceptionDialog( Exception^ e )\n      {\n         String^ errorMsg = &quot;An error occurred please contact the adminstrator with the following information:<br><br>&quot;;\n         errorMsg = String::Concat( errorMsg, e-&gt;Message, &quot;<br><br>Stack Trace:<br>&quot;, e-&gt;StackTrace );\n         return MessageBox::Show( errorMsg, &quot;Application Error&quot;, MessageBoxButtons::AbortRetryIgnore, MessageBoxIcon::Stop );\n      }\n   };\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Application.ThreadException Example#1\">        Thread newThread = null;\n\n        // Starts the application. \n        [SecurityPermission(SecurityAction.Demand, Flags = SecurityPermissionFlag.ControlAppDomain)]\n        public static void Main(string[] args)\n        {\n            // Add the event handler for handling UI thread exceptions to the event.\n            Application.ThreadException += new ThreadExceptionEventHandler(ErrorHandlerForm.Form1_UIThreadException);\n\n            // Set the unhandled exception mode to force all Windows Forms errors to go through\n            // our handler.\n            Application.SetUnhandledExceptionMode(UnhandledExceptionMode.CatchException);\n\n            // Add the event handler for handling non-UI thread exceptions to the event. \n            AppDomain.CurrentDomain.UnhandledException +=\n                new UnhandledExceptionEventHandler(CurrentDomain_UnhandledException);\n\n            // Runs the application.\n            Application.Run(new ErrorHandlerForm());\n        }\n\n        // Programs the button to throw an exception when clicked.\n        private void button1_Click(object sender, System.EventArgs e)\n        {\n            throw new ArgumentException(&quot;The parameter was invalid&quot;);\n        }\n\n        // Start a new thread, separate from Windows Forms, that will throw an exception.\n        private void button2_Click(object sender, System.EventArgs e)\n        {\n            ThreadStart newThreadStart = new ThreadStart(newThread_Execute);\n            newThread = new Thread(newThreadStart);\n            newThread.Start();\n        }\n\n        // The thread we start up to demonstrate non-UI exception handling. \n        void newThread_Execute()\n        {\n            throw new Exception(&quot;The method or operation is not implemented.&quot;);\n        }\n\n        // Handle the UI exceptions by showing a dialog box, and asking the user whether\n        // or not they wish to abort execution.\n        private static void Form1_UIThreadException(object sender, ThreadExceptionEventArgs t)\n        {\n            DialogResult result = DialogResult.Cancel;\n            try\n            {\n                result = ShowThreadExceptionDialog(&quot;Windows Forms Error&quot;, t.Exception);\n            }\n            catch\n            {\n                try\n                {\n                    MessageBox.Show(&quot;Fatal Windows Forms Error&quot;,\n                        &quot;Fatal Windows Forms Error&quot;, MessageBoxButtons.AbortRetryIgnore, MessageBoxIcon.Stop);\n                }\n                finally\n                {\n                    Application.Exit();\n                }\n            }\n\n            // Exits the program when the user clicks Abort.\n            if (result == DialogResult.Abort)\n                Application.Exit();\n        }\n\n        // Handle the UI exceptions by showing a dialog box, and asking the user whether\n        // or not they wish to abort execution.\n        // NOTE: This exception cannot be kept from terminating the application - it can only \n        // log the event, and inform the user about it. \n        private static void CurrentDomain_UnhandledException(object sender, UnhandledExceptionEventArgs e)\n        {\n            try\n            {\n                Exception ex = (Exception)e.ExceptionObject;\n                string errorMsg = &quot;An application error occurred. Please contact the adminstrator &quot; +\n                    &quot;with the following information:<br><br>&quot;;\n\n                // Since we can&#39;t prevent the app from terminating, log this to the event log.\n                if (!EventLog.SourceExists(&quot;ThreadException&quot;))\n                {\n                    EventLog.CreateEventSource(&quot;ThreadException&quot;, &quot;Application&quot;);\n                }\n\n                // Create an EventLog instance and assign its source.\n                EventLog myLog = new EventLog();\n                myLog.Source = &quot;ThreadException&quot;;\n                myLog.WriteEntry(errorMsg + ex.Message + &quot;<br><br>Stack Trace:<br>&quot; + ex.StackTrace);\n            }\n            catch (Exception exc)\n            {\n                try\n                {\n                    MessageBox.Show(&quot;Fatal Non-UI Error&quot;,\n                        &quot;Fatal Non-UI Error. Could not write the error to the event log. Reason: &quot;\n                        + exc.Message, MessageBoxButtons.OK, MessageBoxIcon.Stop);\n                }\n                finally\n                {\n                    Application.Exit();\n                }\n            }\n        }\n\n        // Creates the error message and displays it.\n        private static DialogResult ShowThreadExceptionDialog(string title, Exception e)\n        {\n            string errorMsg = &quot;An application error occurred. Please contact the adminstrator &quot; +\n                &quot;with the following information:<br><br>&quot;;\n            errorMsg = errorMsg + e.Message + &quot;<br><br>Stack Trace:<br>&quot; + e.StackTrace;\n            return MessageBox.Show(errorMsg, title, MessageBoxButtons.AbortRetryIgnore,\n                MessageBoxIcon.Stop);\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Application.ThreadException Example#1\">        Private newThread As Thread = Nothing\n\n        &#39; Starts the application. \n        &lt;SecurityPermission(SecurityAction.Demand, Flags:=SecurityPermissionFlag.ControlAppDomain)&gt; _\n        Public Shared Sub Main()\n            &#39; Add the event handler for handling UI thread exceptions to the event.\n            AddHandler Application.ThreadException, AddressOf ErrorHandlerForm.Form1_UIThreadException\n\n            &#39; Set the unhandled exception mode to force all Windows Forms errors to go through\n            &#39; our handler.\n            Application.SetUnhandledExceptionMode(UnhandledExceptionMode.CatchException)\n\n            &#39; Add the event handler for handling non-UI thread exceptions to the event. \n            AddHandler AppDomain.CurrentDomain.UnhandledException, AddressOf CurrentDomain_UnhandledException\n\n            &#39; Runs the application.\n            Application.Run(New ErrorHandlerForm())\n        End Sub\n\n\n        &#39; Programs the button to throw an exception when clicked.\n        Private Sub button1_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles button1.Click\n            Throw New ArgumentException(&quot;The parameter was invalid&quot;)\n        End Sub\n\n        &#39; Start a new thread, separate from Windows Forms, that will throw an exception.\n        Private Sub button2_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles button2.Click\n            Dim newThreadStart As New ThreadStart(AddressOf newThread_Execute)\n            newThread = New Thread(newThreadStart)\n            newThread.Start()\n        End Sub\n\n\n        &#39; The thread we start up to demonstrate non-UI exception handling. \n        Sub newThread_Execute()\n            Throw New Exception(&quot;The method or operation is not implemented.&quot;)\n        End Sub\n\n\n        &#39; Handle the UI exceptions by showing a dialog box, and asking the user whether\n        &#39; or not they wish to abort execution.\n        Private Shared Sub Form1_UIThreadException(ByVal sender As Object, ByVal t As ThreadExceptionEventArgs)\n            Dim result As System.Windows.Forms.DialogResult = _\n                System.Windows.Forms.DialogResult.Cancel\n            Try\n                result = ShowThreadExceptionDialog(&quot;Windows Forms Error&quot;, t.Exception)\n            Catch\n                Try\n                    MessageBox.Show(&quot;Fatal Windows Forms Error&quot;, _\n                        &quot;Fatal Windows Forms Error&quot;, MessageBoxButtons.AbortRetryIgnore, MessageBoxIcon.Stop)\n                Finally\n                    Application.Exit()\n                End Try\n            End Try\n\n            &#39; Exits the program when the user clicks Abort.\n            If result = DialogResult.Abort Then\n                Application.Exit()\n            End If\n        End Sub\n\n        &#39; Handle the UI exceptions by showing a dialog box, and asking the user whether\n        &#39; or not they wish to abort execution.\n        &#39; NOTE: This exception cannot be kept from terminating the application - it can only \n        &#39; log the event, and inform the user about it. \n        Private Shared Sub CurrentDomain_UnhandledException(ByVal sender As Object, _\n        ByVal e As UnhandledExceptionEventArgs)\n            Try\n                Dim ex As Exception = CType(e.ExceptionObject, Exception)\n                Dim errorMsg As String = &quot;An application error occurred. Please contact the adminstrator &quot; &amp; _\n                    &quot;with the following information:&quot; &amp; ControlChars.Lf &amp; ControlChars.Lf\n\n                &#39; Since we can&#39;t prevent the app from terminating, log this to the event log.\n                If (Not EventLog.SourceExists(&quot;ThreadException&quot;)) Then\n                    EventLog.CreateEventSource(&quot;ThreadException&quot;, &quot;Application&quot;)\n                End If\n\n                &#39; Create an EventLog instance and assign its source.\n                Dim myLog As New EventLog()\n                myLog.Source = &quot;ThreadException&quot;\n                myLog.WriteEntry((errorMsg + ex.Message &amp; ControlChars.Lf &amp; ControlChars.Lf &amp; _\n                    &quot;Stack Trace:&quot; &amp; ControlChars.Lf &amp; ex.StackTrace))\n            Catch exc As Exception\n                Try\n                    MessageBox.Show(&quot;Fatal Non-UI Error&quot;, &quot;Fatal Non-UI Error. Could not write the error to the event log. &quot; &amp; _\n                        &quot;Reason: &quot; &amp; exc.Message, MessageBoxButtons.OK, MessageBoxIcon.Stop)\n                Finally\n                    Application.Exit()\n                End Try\n            End Try\n        End Sub\n\n\n        &#39; Creates the error message and displays it.\n        Private Shared Function ShowThreadExceptionDialog(ByVal title As String, ByVal e As Exception) As DialogResult\n            Dim errorMsg As String = &quot;An application error occurred. Please contact the adminstrator &quot; &amp; _\n\t\t &quot;with the following information:&quot; &amp; ControlChars.Lf &amp; ControlChars.Lf\n            errorMsg = errorMsg &amp; e.Message &amp; ControlChars.Lf &amp; _\n\t\t ControlChars.Lf &amp; &quot;Stack Trace:&quot; &amp; ControlChars.Lf &amp; e.StackTrace\n\n            Return MessageBox.Show(errorMsg, title, MessageBoxButtons.AbortRetryIgnore, MessageBoxIcon.Stop)\n        End Function\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Application_ThreadExit\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ThreadExit</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when a thread is about to shut down. When the main thread for an application is about to be shut down, this event is raised first, followed by an <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_ApplicationExit\" data-linktype=\"relative-path\">ApplicationExit</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static event EventHandler ThreadExit;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You must attach the event handlers to the ThreadExit event to perform any unhandled, required tasks before the thread stops running. Close files opened by this thread, or dispose of objects that the garbage collector did not reclaim.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the ThreadExit event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <a class=\"xref\" href=\"system.windows.forms.messagebox#System_Windows_Forms_MessageBox_Show_\" data-linktype=\"relative-path\">Show</a> with <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> or appending the message to a multiline <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<p> To run the example code, paste it into a Windows Forms and ensure that the event handler is associated with the ThreadExit event.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.EventExamples#6\">private void Application_ThreadExit(Object sender, EventArgs e) {\n\n   MessageBox.Show(&quot;You are in the Application.ThreadExit event.&quot;);\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.EventExamples#6\">    Private Sub Application_ThreadExit(ByVal sender As Object, ByVal e As EventArgs) \n    \n        MessageBox.Show(&quot;You are in the Application.ThreadExit event.&quot;)\n\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Forms.Application.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Forms.Application.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.AddMessageFilter\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.AllowQuit\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.ApplicationExit\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.add_ApplicationExit\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.remove_ApplicationExit\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.CommonAppDataPath\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.CommonAppDataRegistry\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.CompanyName\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.CurrentCulture\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.CurrentInputLanguage\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.DoEvents\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.EnableVisualStyles\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.EnterThreadModal\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.add_EnterThreadModal\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.remove_EnterThreadModal\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.ExecutablePath\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.Exit\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.ExitThread\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.FilterMessage\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.Idle\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.add_Idle\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.remove_Idle\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.LeaveThreadModal\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.add_LeaveThreadModal\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.remove_LeaveThreadModal\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.LocalUserAppDataPath\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.MessageLoop\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.OleRequired\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.OnThreadException\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.OpenForms\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.ProductName\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.ProductVersion\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.RaiseIdle\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.RegisterMessageLoop\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.RemoveMessageFilter\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.RenderWithVisualStyles\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.Restart\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.Run\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.SafeTopLevelCaptionFormat\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.SetCompatibleTextRenderingDefault\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.SetSuspendState\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.SetUnhandledExceptionMode\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.StartupPath\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.ThreadException\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.add_ThreadException\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.remove_ThreadException\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.ThreadExit\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.add_ThreadExit\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.remove_ThreadExit\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.UnregisterMessageLoop\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.UserAppDataPath\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.UserAppDataRegistry\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.UseWaitCursor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Application.VisualStyleState\">\r\n<meta name=\"APILocation\" content=\"System.Windows.Forms.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"fc830e34-59f7-f05a-2074-c7b434582676\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Windows.Forms\\Application.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides static methods and properties to manage an application, such as methods to start and stop an application, to process Windows messages, and properties to get information about an application.â€¦\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Windows.Forms/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Forms.Application\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Forms.Application.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Forms.Application.yml","open_to_public_contributors":true,"api_name":["System.Windows.Forms.Application","System.Windows.Forms.Application.AddMessageFilter","System.Windows.Forms.Application.AllowQuit","System.Windows.Forms.Application.ApplicationExit","System.Windows.Forms.Application.add_ApplicationExit","System.Windows.Forms.Application.remove_ApplicationExit","System.Windows.Forms.Application.CommonAppDataPath","System.Windows.Forms.Application.CommonAppDataRegistry","System.Windows.Forms.Application.CompanyName","System.Windows.Forms.Application.CurrentCulture","System.Windows.Forms.Application.CurrentInputLanguage","System.Windows.Forms.Application.DoEvents","System.Windows.Forms.Application.EnableVisualStyles","System.Windows.Forms.Application.EnterThreadModal","System.Windows.Forms.Application.add_EnterThreadModal","System.Windows.Forms.Application.remove_EnterThreadModal","System.Windows.Forms.Application.ExecutablePath","System.Windows.Forms.Application.Exit","System.Windows.Forms.Application.ExitThread","System.Windows.Forms.Application.FilterMessage","System.Windows.Forms.Application.Idle","System.Windows.Forms.Application.add_Idle","System.Windows.Forms.Application.remove_Idle","System.Windows.Forms.Application.LeaveThreadModal","System.Windows.Forms.Application.add_LeaveThreadModal","System.Windows.Forms.Application.remove_LeaveThreadModal","System.Windows.Forms.Application.LocalUserAppDataPath","System.Windows.Forms.Application.MessageLoop","System.Windows.Forms.Application.OleRequired","System.Windows.Forms.Application.OnThreadException","System.Windows.Forms.Application.OpenForms","System.Windows.Forms.Application.ProductName","System.Windows.Forms.Application.ProductVersion","System.Windows.Forms.Application.RaiseIdle","System.Windows.Forms.Application.RegisterMessageLoop","System.Windows.Forms.Application.RemoveMessageFilter","System.Windows.Forms.Application.RenderWithVisualStyles","System.Windows.Forms.Application.Restart","System.Windows.Forms.Application.Run","System.Windows.Forms.Application.SafeTopLevelCaptionFormat","System.Windows.Forms.Application.SetCompatibleTextRenderingDefault","System.Windows.Forms.Application.SetSuspendState","System.Windows.Forms.Application.SetUnhandledExceptionMode","System.Windows.Forms.Application.StartupPath","System.Windows.Forms.Application.ThreadException","System.Windows.Forms.Application.add_ThreadException","System.Windows.Forms.Application.remove_ThreadException","System.Windows.Forms.Application.ThreadExit","System.Windows.Forms.Application.add_ThreadExit","System.Windows.Forms.Application.remove_ThreadExit","System.Windows.Forms.Application.UnregisterMessageLoop","System.Windows.Forms.Application.UserAppDataPath","System.Windows.Forms.Application.UserAppDataRegistry","System.Windows.Forms.Application.UseWaitCursor","System.Windows.Forms.Application.VisualStyleState"],"api_location":["System.Windows.Forms.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Forms.Application","System::Windows::Forms::Application","System.Windows.Forms.Application.AddMessageFilter","System::Windows::Forms::Application::AddMessageFilter","System.Windows.Forms.Application.AllowQuit","System::Windows::Forms::Application::AllowQuit","System.Windows.Forms.Application.ApplicationExit","System::Windows::Forms::Application::ApplicationExit","System.Windows.Forms.Application.CommonAppDataPath","System::Windows::Forms::Application::CommonAppDataPath","System.Windows.Forms.Application.CommonAppDataRegistry","System::Windows::Forms::Application::CommonAppDataRegistry","System.Windows.Forms.Application.CompanyName","System::Windows::Forms::Application::CompanyName","System.Windows.Forms.Application.CurrentCulture","System::Windows::Forms::Application::CurrentCulture","System.Windows.Forms.Application.CurrentInputLanguage","System::Windows::Forms::Application::CurrentInputLanguage","System.Windows.Forms.Application.DoEvents","System::Windows::Forms::Application::DoEvents","System.Windows.Forms.Application.EnableVisualStyles","System::Windows::Forms::Application::EnableVisualStyles","System.Windows.Forms.Application.EnterThreadModal","System::Windows::Forms::Application::EnterThreadModal","System.Windows.Forms.Application.ExecutablePath","System::Windows::Forms::Application::ExecutablePath","System.Windows.Forms.Application.Exit","System::Windows::Forms::Application::Exit","System.Windows.Forms.Application.ExitThread","System::Windows::Forms::Application::ExitThread","System.Windows.Forms.Application.FilterMessage","System::Windows::Forms::Application::FilterMessage","System.Windows.Forms.Application.Idle","System::Windows::Forms::Application::Idle","System.Windows.Forms.Application.LeaveThreadModal","System::Windows::Forms::Application::LeaveThreadModal","System.Windows.Forms.Application.LocalUserAppDataPath","System::Windows::Forms::Application::LocalUserAppDataPath","System.Windows.Forms.Application.MessageLoop","System::Windows::Forms::Application::MessageLoop","System.Windows.Forms.Application.OleRequired","System::Windows::Forms::Application::OleRequired","System.Windows.Forms.Application.OnThreadException","System::Windows::Forms::Application::OnThreadException","System.Windows.Forms.Application.OpenForms","System::Windows::Forms::Application::OpenForms","System.Windows.Forms.Application.ProductName","System::Windows::Forms::Application::ProductName","System.Windows.Forms.Application.ProductVersion","System::Windows::Forms::Application::ProductVersion","System.Windows.Forms.Application.RaiseIdle","System::Windows::Forms::Application::RaiseIdle","System.Windows.Forms.Application.RegisterMessageLoop","System::Windows::Forms::Application::RegisterMessageLoop","System.Windows.Forms.Application.RemoveMessageFilter","System::Windows::Forms::Application::RemoveMessageFilter","System.Windows.Forms.Application.RenderWithVisualStyles","System::Windows::Forms::Application::RenderWithVisualStyles","System.Windows.Forms.Application.Restart","System::Windows::Forms::Application::Restart","System.Windows.Forms.Application.Run","System::Windows::Forms::Application::Run","System.Windows.Forms.Application.SafeTopLevelCaptionFormat","System::Windows::Forms::Application::SafeTopLevelCaptionFormat","System.Windows.Forms.Application.SetCompatibleTextRenderingDefault","System::Windows::Forms::Application::SetCompatibleTextRenderingDefault","System.Windows.Forms.Application.SetSuspendState","System::Windows::Forms::Application::SetSuspendState","System.Windows.Forms.Application.SetUnhandledExceptionMode","System::Windows::Forms::Application::SetUnhandledExceptionMode","System.Windows.Forms.Application.StartupPath","System::Windows::Forms::Application::StartupPath","System.Windows.Forms.Application.ThreadException","System::Windows::Forms::Application::ThreadException","System.Windows.Forms.Application.ThreadExit","System::Windows::Forms::Application::ThreadExit","System.Windows.Forms.Application.UnregisterMessageLoop","System::Windows::Forms::Application::UnregisterMessageLoop","System.Windows.Forms.Application.UserAppDataPath","System::Windows::Forms::Application::UserAppDataPath","System.Windows.Forms.Application.UserAppDataRegistry","System::Windows::Forms::Application::UserAppDataRegistry","System.Windows.Forms.Application.UseWaitCursor","System::Windows::Forms::Application::UseWaitCursor","System.Windows.Forms.Application.VisualStyleState","System::Windows::Forms::Application::VisualStyleState"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"fc830e34-59f7-f05a-2074-c7b434582676","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Windows.Forms\\Application.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Windows.Forms/Application.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Application class | Microsoft Docs","_op_ogTitle":"Application class","description":"Provides static methods and properties to manage an application, such as methods to start and stop an application, to process Windows messages, and properties to get information about an application.â€¦","toc_asset_id":"_splitted/System.Windows.Forms/toc.json","toc_rel":"_splitted/System.Windows.Forms/toc.json","source_url":"","ms.assetid":"System.Windows.Forms.Application","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.forms.application","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.forms.application","fileRelativePath":"System.Windows.Forms.Application.html"},"themesRelativePathToOutputRoot":"_themes/"}