{"content":"    \r\n    <h1 id=\"System_Text_Decoder\">\r\n      <span class=\"lang-csharp\">Decoder</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Converts a sequence of encoded bytes into a set of characters.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic abstract class Decoder</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Decoder</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>To obtain an instance of an implementation of the Decoder class, the application should use the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetDecoder_\" data-linktype=\"relative-path\">GetDecoder</a> method of an <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> implementation.  </p>\n<p> The <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a> method determines how many characters result in decoding a sequence of bytes, and the <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_GetChars_\" data-linktype=\"relative-path\">GetChars</a> method performs the actual decoding. There are several versions of both of these methods available in the Decoder class. For more information, see <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a>. A Decoder object maintains state information between successive calls to <code>GetChars</code> or <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_Convert_\" data-linktype=\"relative-path\">Convert</a> methods so it can correctly decode byte sequences that span blocks. The Decoder also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation. Therefore, <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetDecoder_\" data-linktype=\"relative-path\">GetDecoder</a> and <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncoder_\" data-linktype=\"relative-path\">GetEncoder</a> are useful for network transmission and file operations because those operations often deal with blocks of data instead of a complete data stream.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When the application is done with a stream of data, it should make sure that the state information is flushed by setting the <code>flush</code> parameter to <code>true</code> in the appropriate method call. If an exception occurs or if the application switches streams, it should call <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_Reset_\" data-linktype=\"relative-path\">Reset</a> to clear the internal state of the <code>Decoder</code> object.  </p>\n</div>\n<h2 id=\"version-considerations\">Version Considerations</h2>\n<p> A Decoder or <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> object can be serialized during a conversion operation. The state of the object is retained if it is deserialized in the same version of the .NET Framework, but lost if it is deserialized in another version.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Decoder__ctor\" data-linktype=\"self-bookmark\">Decoder()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Decoder_Fallback\" data-linktype=\"self-bookmark\">Fallback</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a <a class=\"xref\" href=\"system.text.decoderfallback\" data-linktype=\"relative-path\">DecoderFallback</a> object for the current <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Decoder_FallbackBuffer\" data-linktype=\"self-bookmark\">FallbackBuffer</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.text.decoderfallbackbuffer\" data-linktype=\"relative-path\">DecoderFallbackBuffer</a> object associated with the current <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Decoder_Convert_System_Byte__System_Int32_System_Char__System_Int32_System_Boolean_System_Int32__System_Int32__System_Boolean__\" data-linktype=\"self-bookmark\">Convert(Byte*,Int32,Char*,Int32,Boolean,Int32,Int32,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts a buffer of encoded bytes to UTF-16 encoded characters and stores the result in another buffer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Decoder_Convert_System_Byte___System_Int32_System_Int32_System_Char___System_Int32_System_Int32_System_Boolean_System_Int32__System_Int32__System_Boolean__\" data-linktype=\"self-bookmark\">Convert(Byte[],Int32,Int32,Char[],Int32,Int32,Boolean,Int32,Int32,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts an array of encoded bytes to UTF-16 encoded characters and stores the result in a character array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Decoder_GetCharCount_System_Byte__System_Int32_System_Boolean_\" data-linktype=\"self-bookmark\">GetCharCount(Byte*,Int32,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer. A parameter indicates whether to clear the internal state of the decoder after the calculation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Decoder_GetCharCount_System_Byte___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">GetCharCount(Byte[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Decoder_GetCharCount_System_Byte___System_Int32_System_Int32_System_Boolean_\" data-linktype=\"self-bookmark\">GetCharCount(Byte[],Int32,Int32,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array. A parameter indicates whether to clear the internal state of the decoder after the calculation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Decoder_GetChars_System_Byte__System_Int32_System_Char__System_Int32_System_Boolean_\" data-linktype=\"self-bookmark\">GetChars(Byte*,Int32,Char*,Int32,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, decodes a sequence of bytes starting at the specified byte pointer and any bytes in the internal buffer into a set of characters that are stored starting at the specified character pointer. A parameter indicates whether to clear the internal state of the decoder after the conversion.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Decoder_GetChars_System_Byte___System_Int32_System_Int32_System_Char___System_Int32_\" data-linktype=\"self-bookmark\">GetChars(Byte[],Int32,Int32,Char[],Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, decodes a sequence of bytes from the specified byte array and any bytes in the internal buffer into the specified character array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Decoder_GetChars_System_Byte___System_Int32_System_Int32_System_Char___System_Int32_System_Boolean_\" data-linktype=\"self-bookmark\">GetChars(Byte[],Int32,Int32,Char[],Int32,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, decodes a sequence of bytes from the specified byte array and any bytes in the internal buffer into the specified character array. A parameter indicates whether to clear the internal state of the decoder after the conversion.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Decoder_Reset\" data-linktype=\"self-bookmark\">Reset()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, sets the decoder back to its initial state.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Decoder__ctor\">\r\n    \r\n            <a id=\"System_Text_Decoder__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Decoder()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected Decoder ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To obtain an instance of an implementation of this class, the application should use the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetDecoder_\" data-linktype=\"relative-path\">GetDecoder</a> method of a <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> implementation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates two techniques for initializing a new <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> instance.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Text.Decoder.ctor Example#1\">Imports System\nImports System.Text\n\nClass EncoderExample\n    \n    Public Shared Sub Main()\n        &#39; A Decoder is obtained from an Encoding.\n        Dim uni As New UnicodeEncoding()\n        Dim dec1 As Decoder = uni.GetDecoder()\n        \n        &#39; A more direct technique.\n        Dim dec2 As Decoder = Encoding.Unicode.GetDecoder()\n        \n        &#39; dec1 and dec2 seem to be the same.\n        Console.WriteLine(dec1.ToString())\n        Console.WriteLine(dec2.ToString())\n        \n        &#39; Note that their hash codes differ.\n        Console.WriteLine(dec1.GetHashCode())\n        Console.WriteLine(dec2.GetHashCode())\n    End Sub\nEnd Class\n\n&#39;This code example produces the following output.\n&#39;System.Text.UnicodeEncoding+Decoder\n&#39;System.Text.UnicodeEncoding+Decoder\n&#39;58225482\n&#39;54267293\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.Decoder.ctor Example#1\">using System;\nusing System.Text;\n\nclass EncoderExample {\n    public static void Main() {\n        // A Decoder is obtained from an Encoding.\n        UnicodeEncoding uni = new UnicodeEncoding();\n        Decoder dec1 = uni.GetDecoder();\n\n        // A more direct technique.\n        Decoder dec2 = Encoding.Unicode.GetDecoder();\n\n        // dec1 and dec2 seem to be the same.\n        Console.WriteLine(dec1.ToString());\n        Console.WriteLine(dec2.ToString());\n\n        // Note that their hash codes differ.\n        Console.WriteLine(dec1.GetHashCode());\n        Console.WriteLine(dec2.GetHashCode());\n    }\n}\n\n/* This code example produces the following output.\n\nSystem.Text.UnicodeEncoding+Decoder\nSystem.Text.UnicodeEncoding+Decoder\n58225482\n54267293\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Text.Decoder.ctor Example#1\">using namespace System;\nusing namespace System::Text;\nint main()\n{\n   \n   // A Decoder is obtained from an Encoding.\n   UnicodeEncoding^ uni = gcnew UnicodeEncoding;\n   Decoder^ dec1 = uni-&gt;GetDecoder();\n   \n   // A more direct technique.\n   Decoder^ dec2 = Encoding::Unicode-&gt;GetDecoder();\n   \n   // dec1 and dec2 seem to be the same.\n   Console::WriteLine( dec1 );\n   Console::WriteLine( dec2 );\n   \n   // Note that their hash codes differ.\n   Console::WriteLine( dec1-&gt;GetHashCode() );\n   Console::WriteLine( dec2-&gt;GetHashCode() );\n}\n\n/* This code example produces the following output.\n\nSystem.Text.UnicodeEncoding+Decoder\nSystem.Text.UnicodeEncoding+Decoder\n54267293\n18643596\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Decoder_Fallback\">\r\n    \r\n            <a id=\"System_Text_Decoder_Fallback_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Fallback</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a <a class=\"xref\" href=\"system.text.decoderfallback\" data-linktype=\"relative-path\">DecoderFallback</a> object for the current <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.DecoderFallback Fallback { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.decoderfallback\" data-linktype=\"relative-path\">DecoderFallback</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.text.decoderfallback\" data-linktype=\"relative-path\">DecoderFallback</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The value in a set operation is <code>null</code>(<code>Nothing</code>).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>A new value cannot be assigned in a set operation because the current <a class=\"xref\" href=\"system.text.decoderfallbackbuffer\" data-linktype=\"relative-path\">DecoderFallbackBuffer</a> object contains data that has not been decoded yet.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.text.decoderfallback\" data-linktype=\"relative-path\">DecoderFallback</a> object represents an error handler that is invoked when an encoded byte sequence cannot be converted to a character.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Decoder_FallbackBuffer\">\r\n    \r\n            <a id=\"System_Text_Decoder_FallbackBuffer_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FallbackBuffer</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.text.decoderfallbackbuffer\" data-linktype=\"relative-path\">DecoderFallbackBuffer</a> object associated with the current <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.DecoderFallbackBuffer FallbackBuffer { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.decoderfallbackbuffer\" data-linktype=\"relative-path\">DecoderFallbackBuffer</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.text.decoderfallbackbuffer\" data-linktype=\"relative-path\">DecoderFallbackBuffer</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.text.decoderfallbackbuffer\" data-linktype=\"relative-path\">DecoderFallbackBuffer</a> object represents data used by the <a class=\"xref\" href=\"system.text.decoderfallback\" data-linktype=\"relative-path\">DecoderFallback</a> object. The <a class=\"xref\" href=\"system.text.decoderfallback\" data-linktype=\"relative-path\">DecoderFallback</a> object represents an error handler that is invoked when an encoded byte sequence cannot be converted to a character.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Decoder_Convert_System_Byte__System_Int32_System_Char__System_Int32_System_Boolean_System_Int32__System_Int32__System_Boolean__\">\r\n    \r\n            <a id=\"System_Text_Decoder_Convert_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Convert(Byte*,Int32,Char*,Int32,Boolean,Int32,Int32,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Converts a buffer of encoded bytes to UTF-16 encoded characters and stores the result in another buffer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Convert (byte* bytes, int byteCount, char* chars, int charCount, bool flush, out int bytesUsed, out int charsUsed, out bool completed);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bytes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>*</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The address of a buffer that contains the byte sequences to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>byteCount</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes in <code>bytes</code> to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>chars</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>*</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The address of a buffer to store the converted characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>charCount</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of characters in <code>chars</code> to use in the conversion.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>flush</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to indicate no further data is to be converted; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bytesUsed</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>When this method returns, contains the number of bytes that were produced by the conversion. This parameter is passed uninitialized.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>charsUsed</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>When this method returns, contains the number of characters from <code>chars</code> that were used in the conversion. This parameter is passed uninitialized.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>completed</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>When this method returns, contains <code>true</code> if all the characters specified by <code>byteCount</code> were converted; otherwise, <code>false</code>. This parameter is passed uninitialized.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>chars</code> or <code>bytes</code> is <code>null</code>(<code>Nothing</code>).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>charCount</code> or <code>byteCount</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The output buffer is too small to contain any of the converted input. The output buffer should be greater than or equal to the size indicated by the <span class=\"xref\">stem.Text.Decoder.GetCharCount*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.decoderfallbackexception\" data-linktype=\"relative-path\">DecoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for fuller explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Decoder.Fallback*</span> is set to <a class=\"xref\" href=\"system.text.decoderexceptionfallback\" data-linktype=\"relative-path\">DecoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Remember that the <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> object saves state between calls to Convert. When the application is done with a stream of data, it should set the <code>flush</code> parameter to <code>true</code> to make sure that the state information is flushed. With this setting, the decoder ignores invalid bytes at the end of the data block and clears the internal buffer. Any remaining processed data that is part of a logical unit, such as the high surrogate of a surrogate pair, is converted according to the current fallback settings.  </p>\n<p> The <code>Convert</code> method is designed to be used in a loop to decode an arbitrary amount of input, such as data read from a file or stream. It stores the output of the decoding operation in a fixed-size buffer. <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_GetChars_\" data-linktype=\"relative-path\">GetChars</a> will throw an exception if the output buffer isn&#39;t large enough, but Convert will fill as much space as possible and return the bytes read and chars written. Also see the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a> topic for more comments.  </p>\n<p> The <code>completed</code> output parameter indicates whether all the data in the input buffer was converted and stored in the output buffer. This parameter is set to <code>false</code> if the number of bytes specified by the <code>byteCount</code> parameter cannot be converted without exceeding the number of characters specified by the <code>charCount</code> parameter. In that situation, the application should use the contents of the output buffer or provide a new output buffer, increment the <code>bytes</code> parameter by the number of bytes specified by the <code>bytesUsed</code> parameter, then call the <code>Convert</code> method again to process the remaining input.  </p>\n<p> The <code>completed</code> parameter can also be set to <code>false</code>, even though the <code>bytesUsed</code> and <code>byteCount</code> parameters are equal. This situation occurs if there is still data in the <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> object that has not been stored in the <code>bytes</code> buffer.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Decoder_Convert_System_Byte___System_Int32_System_Int32_System_Char___System_Int32_System_Int32_System_Boolean_System_Int32__System_Int32__System_Boolean__\">\r\n    \r\n            <a id=\"System_Text_Decoder_Convert_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Convert(Byte[],Int32,Int32,Char[],Int32,Int32,Boolean,Int32,Int32,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Converts an array of encoded bytes to UTF-16 encoded characters and stores the result in a character array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Convert (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, int charCount, bool flush, out int bytesUsed, out int charsUsed, out bool completed);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bytes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A byte array to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>byteIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first element of <code>bytes</code> to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>byteCount</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements of <code>bytes</code> to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>chars</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array to store the converted characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>charIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first element of <code>chars</code> in which data is stored.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>charCount</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of elements of <code>chars</code> to use in the conversion.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>flush</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to indicate that no further data is to be converted; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bytesUsed</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>When this method returns, contains the number of bytes that were used in the conversion. This parameter is passed uninitialized.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>charsUsed</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>When this method returns, contains the number of characters from <code>chars</code> that were produced by the conversion. This parameter is passed uninitialized.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>completed</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>When this method returns, contains <code>true</code> if all the characters specified by <code>byteCount</code> were converted; otherwise, <code>false</code>. This parameter is passed uninitialized.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>chars</code> or <code>bytes</code> is <code>null</code>(<code>Nothing</code>).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>charIndex</code>, <code>charCount</code>, <code>byteIndex</code>, or <code>byteCount</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> The length of <code>chars</code> - <code>charIndex</code> is less than <code>charCount</code>.  </p>\n<p> -or-  </p>\n<p> The length of <code>bytes</code> - <code>byteIndex</code> is less than <code>byteCount</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The output buffer is too small to contain any of the converted input. The output buffer should be greater than or equal to the size indicated by the <span class=\"xref\">stem.Text.Decoder.GetCharCount*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.decoderfallbackexception\" data-linktype=\"relative-path\">DecoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for fuller explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Decoder.Fallback*</span> is set to <a class=\"xref\" href=\"system.text.decoderexceptionfallback\" data-linktype=\"relative-path\">DecoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Remember that the <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> object saves state between calls to Convert. When the application is done with a stream of data, it should set the <code>flush</code> parameter to <code>true</code> to make sure that the state information is flushed. With this setting, the decoder ignores invalid bytes at the end of the data block and clears the internal buffer. Any remaining processed data that is part of a logical unit, such as the high surrogate of a surrogate pair, is converted according to the current fallback settings.  </p>\n<p> The <code>Convert</code> method is designed to be used in a loop to decode an arbitrary amount of input, such as data read from a file or stream. It stores the output of the decoding operation in a fixed-size buffer. <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_GetChars_\" data-linktype=\"relative-path\">GetChars</a> will throw an exception if the output buffer isn&#39;t large enough, but Convert will fill as much space as possible and return the bytes read and chars written. Also see the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a> topic for more comments.  </p>\n<p> The <code>completed</code> output parameter indicates whether all the data in the input buffer was converted and stored in the output buffer. This parameter is set to <code>false</code> if the number of bytes specified by the <code>byteCount</code> parameter cannot be converted without exceeding the number of characters specified by the <code>charCount</code> parameter. In that situation, the application should use the contents of the output buffer or provide a new output buffer, increment the <code>bytes</code> parameter by the number of bytes specified by the <code>bytesUsed</code> parameter, then call the <code>Convert</code> method again to process the remaining input.  </p>\n<p> The <code>completed</code> parameter can also be set to <code>false</code>, even though the <code>bytesUsed</code> and <code>byteCount</code> parameters are equal. This situation occurs if there is still data in the <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> object that has not been stored in the <code>bytes</code> buffer.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the <a class=\"xref\" href=\"system.text.encoder#System_Text_Encoder_Convert_\" data-linktype=\"relative-path\">Convert</a> method to convert a file of UTF-16 characters to UTF-8. It then uses the Convert method to convert the UTF-8 characters back to UTF-16 characters.  </p>\n<pre><code class=\"lang-vb\" name=\"sys.txt.EncoderDecoder.convert#1\">&#39; This code example demonstrates the Encoder.Convert() and Decoder.Convert methods. \n&#39; This example uses files for input and output, but any source that can be expressed\n&#39; as a stream can be used instead.\n\nImports System\nImports System.Text\nImports System.IO\n\nPublic Class Sample\n    Shared Sub Main(ByVal args() As String) \n        &#39; Create a large file of UTF-16 encoded Unicode characters. The file is named Example.txt, \n        &#39; and is used as input to the Encoder.Convert() method. \n        CreateTestFile(&quot;Example.txt&quot;)\n        \n        \n        &#39; Using an input file of UTF-16 encoded characters named Example.txt, create an output file \n        &#39; of UTF-8 encoded bytes named UTF8.txt.\n        EncoderConvert(&quot;Example.txt&quot;, &quot;UTF8.txt&quot;, Encoding.UTF8)\n        \n        &#39; Using an input file of UTF-8 encoded bytes named UTF8.txt, create an output file \n        &#39; of UTF-16 encoded characters named UTF16.txt.\n        DecoderConvert(&quot;UTF8.txt&quot;, &quot;UTF16.txt&quot;, Encoding.UTF8)\n    \n    End Sub &#39;Main\n    \n    &#39; --------------------------------------------------------------------------------------------\n    &#39; Use the Encoder.Convert() method to convert a file of characters to a file of encoded bytes.\n    &#39; --------------------------------------------------------------------------------------------\n    Shared Sub EncoderConvert(ByVal inputFileName As String, ByVal outputFileName As String, ByVal enc As Encoding) \n        &#39; Convert an input file of characters to an output file of encoded bytes.\n        &#39; StreamWriter could convert the input file for us, but we&#39;ll perform the conversion \n        &#39; ourselves.\n        Dim fs As New FileStream(outputFileName, FileMode.Create)\n        Dim outputFile As New BinaryWriter(fs)\n        \n        &#39; StreamReader will detect Unicode encoding from the Byte Order Mark that heads the input file.\n        Dim inputFile As New StreamReader(inputFileName)\n        \n        &#39; Get an Encoder.\n        Dim encoder As Encoder = enc.GetEncoder()\n        \n        &#39; Guarantee the output buffer large enough to convert a few characters.\n        Dim UseBufferSize As Integer = 64\n        If UseBufferSize &lt; enc.GetMaxByteCount(10) Then\n            UseBufferSize = enc.GetMaxByteCount(10)\n        End If\n        Dim bytes(UseBufferSize) As Byte\n        \n        &#39; Intentionally make the input character buffer larger than the output byte buffer so the \n        &#39; conversion loop executes more than one cycle. \n        Dim chars(UseBufferSize * 4) As Char\n        Dim charsRead As Integer\n        Do\n            &#39; Read at most the number of characters that will fit in the input buffer. The return \n            &#39; value is the actual number of characters read, or zero if no characters remain. \n            charsRead = inputFile.Read(chars, 0, UseBufferSize * 4)\n            \n            Dim completed As Boolean = False\n            Dim charIndex As Integer = 0\n            Dim charsUsed As Integer\n            Dim bytesUsed As Integer\n            \n            While Not completed\n                &#39; If this is the last input data, flush the encoder&#39;s internal buffer and state.\n                Dim flush As Boolean = charsRead = 0\n                encoder.Convert(chars, charIndex, charsRead - charIndex, bytes, 0, UseBufferSize, flush, charsUsed, bytesUsed, completed)\n                \n                &#39; The conversion produced the number of bytes indicated by bytesUsed. Write that number\n                &#39; of bytes to the output file.\n                outputFile.Write(bytes, 0, bytesUsed)\n                \n                &#39; Increment charIndex to the next block of characters in the input buffer, if any, to convert.\n                charIndex += charsUsed\n            End While\n        Loop While charsRead &lt;&gt; 0\n        \n        outputFile.Close()\n        fs.Close()\n        inputFile.Close()\n    \n    End Sub &#39;EncoderConvert\n    \n    &#39; --------------------------------------------------------------------------------------------\n    &#39; Use the Decoder.Convert() method to convert a file of encoded bytes to a file of characters.\n    &#39; --------------------------------------------------------------------------------------------\n    Shared Sub DecoderConvert(ByVal inputFileName As String, ByVal outputFileName As String, ByVal enc As Encoding) \n        &#39; Convert an input file of of encoded bytes to an output file characters.\n        &#39; StreamWriter could convert the input file for us, but we&#39;ll perform the conversion \n        &#39; ourselves.\n        Dim outputFile As New StreamWriter(outputFileName, False, Encoding.Unicode)\n        \n        &#39; Read the input as a binary file so we can detect the Byte Order Mark.\n        Dim fs As New FileStream(inputFileName, FileMode.Open)\n        Dim inputFile As New BinaryReader(fs)\n        \n        &#39; Get a Decoder.\n        Dim decoder As Decoder = enc.GetDecoder()\n        \n        &#39; Guarantee the output buffer large enough to convert a few characters.\n        Dim UseBufferSize As Integer = 64\n        If UseBufferSize &lt; enc.GetMaxCharCount(10) Then\n            UseBufferSize = enc.GetMaxCharCount(10)\n        End If\n        Dim chars(UseBufferSize) As Char\n        \n        &#39; Intentionally make the input byte buffer larger than the output character buffer so the \n        &#39; conversion loop executes more than one cycle. \n        Dim bytes(UseBufferSize * 4) As Byte\n        Dim bytesRead As Integer\n        Do\n            &#39; Read at most the number of bytes that will fit in the input buffer. The \n            &#39; return value is the actual number of bytes read, or zero if no bytes remain. \n            bytesRead = inputFile.Read(bytes, 0, UseBufferSize * 4)\n            \n            Dim completed As Boolean = False\n            Dim byteIndex As Integer = 0\n            Dim bytesUsed As Integer\n            Dim charsUsed As Integer\n            \n            While Not completed\n                &#39; If this is the last input data, flush the decoder&#39;s internal buffer and state.\n                Dim flush As Boolean = bytesRead = 0\n                decoder.Convert(bytes, byteIndex, bytesRead - byteIndex, chars, 0, UseBufferSize, flush, bytesUsed, charsUsed, completed)\n                \n                &#39; The conversion produced the number of characters indicated by charsUsed. Write that number\n                &#39; of characters to the output file.\n                outputFile.Write(chars, 0, charsUsed)\n                \n                &#39; Increment byteIndex to the next block of bytes in the input buffer, if any, to convert.\n                byteIndex += bytesUsed\n            End While\n        Loop While bytesRead &lt;&gt; 0\n        \n        outputFile.Close()\n        fs.Close()\n        inputFile.Close()\n    \n    End Sub &#39;DecoderConvert\n    \n    &#39; --------------------------------------------------------------------------------------------\n    &#39; Create a large file of UTF-16 encoded Unicode characters. \n    &#39; --------------------------------------------------------------------------------------------\n    Shared Sub CreateTestFile(ByVal FileName As String) \n        &#39; StreamWriter defaults to UTF-8 encoding so explicitly specify Unicode, that is, \n        &#39; UTF-16, encoding.\n        Dim file As New StreamWriter(FileName, False, Encoding.Unicode)\n        \n        &#39; Write a line of text 100 times.\n        Dim i As Integer\n        For i = 0 To 99\n            file.WriteLine(&quot;This is an example input file used by the convert example.&quot;)\n        Next i\n        \n        &#39; Write Unicode characters from U+0000 to, but not including, the surrogate character range.\n        Dim c As Integer\n        For c = 0 To &amp;HD800\n            file.Write(ChrW(c))\n        Next c\n        file.Close()\n    \n    End Sub &#39;CreateTestFile\nEnd Class &#39;Sample\n\n&#39;\n&#39;This code example produces the following results:\n&#39;\n&#39;(Execute the -dir- console window command and examine the files created.)\n&#39;\n&#39;Example.txt, which contains 122,594 bytes (61,297 UTF-16 encoded characters).\n&#39;UTF8.txt, which contains 169,712 UTF-8 encoded bytes.\n&#39;UTF16.txt, which contains 122,594 bytes (61,297 UTF-16 encoded characters).\n&#39;\n&#39;(Execute the -comp- console window command and compare the two Unicode files.)\n&#39;\n&#39;&gt;comp example.txt utf16.txt /L\n&#39;Comparing example.txt and utf16.txt...\n&#39;Files compare OK\n&#39;\n&#39;(The two files are equal.)\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"sys.txt.EncoderDecoder.convert#1\">// This code example demonstrates the Encoder.Convert() and Decoder.Convert methods. \n// This example uses files for input and output, but any source that can be expressed\n// as a stream can be used instead.\n\n    using System;\n    using System.Text;\n    using System.IO;\n\n    public class Sample\n    {\n    static void Main(string[] args)\n        {\n// Create a large file of UTF-16 encoded Unicode characters. The file is named Example.txt, \n// and is used as input to the Encoder.Convert() method. \n\n            CreateTestFile(&quot;Example.txt&quot;);\n\n \n// Using an input file of UTF-16 encoded characters named Example.txt, create an output file \n// of UTF-8 encoded bytes named UTF8.txt.\n\n            EncoderConvert(&quot;Example.txt&quot;, &quot;UTF8.txt&quot;, Encoding.UTF8);\n\n// Using an input file of UTF-8 encoded bytes named UTF8.txt, create an output file \n// of UTF-16 encoded characters named UTF16.txt.\n\n            DecoderConvert(&quot;UTF8.txt&quot;, &quot;UTF16.txt&quot;, Encoding.UTF8);\n        }\n\n// --------------------------------------------------------------------------------------------\n// Use the Encoder.Convert() method to convert a file of characters to a file of encoded bytes.\n// --------------------------------------------------------------------------------------------\n        static void EncoderConvert(String inputFileName, String outputFileName, Encoding enc)\n        {\n// Convert an input file of characters to an output file of encoded bytes.\n// StreamWriter could convert the input file for us, but we&#39;ll perform the conversion \n// ourselves.\n\n            FileStream fs = new FileStream(outputFileName, FileMode.Create);\n            BinaryWriter outputFile = new BinaryWriter(fs);\n\n// StreamReader will detect Unicode encoding from the Byte Order Mark that heads the input file.\n            StreamReader inputFile = new StreamReader(inputFileName);\n\n// Get an Encoder.\n            Encoder encoder = enc.GetEncoder();\n            \n// Guarantee the output buffer large enough to convert a few characters.\n            int UseBufferSize = 64;\n            if (UseBufferSize &lt; enc.GetMaxByteCount(10))\n                    UseBufferSize = enc.GetMaxByteCount(10);\n            byte[] bytes = new byte[UseBufferSize];\n\n// Intentionally make the input character buffer larger than the output byte buffer so the \n// conversion loop executes more than one cycle. \n\n            char[] chars = new char[UseBufferSize * 4];\n            int charsRead;\n            do\n            {\n// Read at most the number of characters that will fit in the input buffer. The return \n// value is the actual number of characters read, or zero if no characters remain. \n                charsRead = inputFile.Read(chars, 0, UseBufferSize * 4);\n   \n                bool completed = false;\n                int charIndex = 0;\n                int charsUsed;\n                int bytesUsed;\n\n                while (!completed)\n                {\n// If this is the last input data, flush the encoder&#39;s internal buffer and state.\n\n                    bool flush = (charsRead == 0);\n                    encoder.Convert(chars, charIndex, charsRead - charIndex,\n                                    bytes, 0, UseBufferSize, flush,\n                                    out charsUsed, out bytesUsed, out completed);\n\n// The conversion produced the number of bytes indicated by bytesUsed. Write that number\n// of bytes to the output file.\n                    outputFile.Write(bytes, 0, bytesUsed);\n\n// Increment charIndex to the next block of characters in the input buffer, if any, to convert.\n                    charIndex += charsUsed;\n                }\n            }\n            while(charsRead != 0);\n\n            outputFile.Close();\n            fs.Close();\n            inputFile.Close();\n        }\n\n// --------------------------------------------------------------------------------------------\n// Use the Decoder.Convert() method to convert a file of encoded bytes to a file of characters.\n// --------------------------------------------------------------------------------------------\n        static void DecoderConvert(String inputFileName, String outputFileName, Encoding enc)\n        {\n// Convert an input file of of encoded bytes to an output file characters.\n// StreamWriter could convert the input file for us, but we&#39;ll perform the conversion \n// ourselves.\n\n            StreamWriter outputFile = new StreamWriter(outputFileName, false, Encoding.Unicode);\n\n// Read the input as a binary file so we can detect the Byte Order Mark.\n            FileStream fs = new FileStream(inputFileName, FileMode.Open);\n            BinaryReader inputFile = new BinaryReader(fs);\n\n// Get a Decoder.\n            Decoder decoder = enc.GetDecoder();\n            \n// Guarantee the output buffer large enough to convert a few characters.\n            int UseBufferSize = 64;\n            if (UseBufferSize &lt; enc.GetMaxCharCount(10))\n                    UseBufferSize = enc.GetMaxCharCount(10);\n            char[] chars = new char[UseBufferSize];\n\n// Intentionally make the input byte buffer larger than the output character buffer so the \n// conversion loop executes more than one cycle. \n\n            byte[] bytes = new byte[UseBufferSize * 4];\n            int bytesRead;\n            do\n            {\n// Read at most the number of bytes that will fit in the input buffer. The \n// return value is the actual number of bytes read, or zero if no bytes remain. \n\n                bytesRead = inputFile.Read(bytes, 0, UseBufferSize * 4);\n   \n                bool completed = false;\n                int byteIndex = 0;\n                int bytesUsed;\n                int charsUsed;\n\n                while (!completed)\n                {\n// If this is the last input data, flush the decoder&#39;s internal buffer and state.\n\n                    bool flush = (bytesRead == 0);\n                    decoder.Convert(bytes, byteIndex, bytesRead - byteIndex,\n                                    chars, 0, UseBufferSize, flush,\n                                    out bytesUsed, out charsUsed, out completed);\n\n// The conversion produced the number of characters indicated by charsUsed. Write that number\n// of characters to the output file.\n\n                    outputFile.Write(chars, 0, charsUsed);\n\n// Increment byteIndex to the next block of bytes in the input buffer, if any, to convert.\n                    byteIndex += bytesUsed;\n                }\n            }\n            while(bytesRead != 0);\n\n            outputFile.Close();\n            fs.Close();\n            inputFile.Close();\n        }        \n\n// --------------------------------------------------------------------------------------------\n// Create a large file of UTF-16 encoded Unicode characters. \n// --------------------------------------------------------------------------------------------\n        static void CreateTestFile(String FileName)\n        {\n// StreamWriter defaults to UTF-8 encoding so explicitly specify Unicode, that is, \n// UTF-16, encoding.\n            StreamWriter file = new StreamWriter(FileName, false, Encoding.Unicode);\n\n// Write a line of text 100 times.\n            for (int i = 0; i &lt; 100; i++)\n            {\n                file.WriteLine(&quot;This is an example input file used by the convert example.&quot;);\n            }\n\n// Write Unicode characters from U+0000 to, but not including, the surrogate character range.\n            for (char c = (char)0; c &lt; (char)0xD800; c++)\n            {\n                file.Write(c);\n            }\n            file.Close();\n        }\n    }\n\n/*\nThis code example produces the following results:\n\n(Execute the -dir- console window command and examine the files created.)\n\nExample.txt, which contains 122,594 bytes (61,297 UTF-16 encoded characters).\nUTF8.txt, which contains 169,712 UTF-8 encoded bytes.\nUTF16.txt, which contains 122,594 bytes (61,297 UTF-16 encoded characters).\n\n(Execute the -comp- console window command and compare the two Unicode files.)\n\n&gt;comp example.txt utf16.txt /L\nComparing example.txt and utf16.txt...\nFiles compare OK\n\n(The two files are equal.)\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Decoder_GetCharCount_System_Byte__System_Int32_System_Boolean_\">\r\n    \r\n            <a id=\"System_Text_Decoder_GetCharCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCharCount(Byte*,Int32,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer. A parameter indicates whether to clear the internal state of the decoder after the calculation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int GetCharCount (byte* bytes, int count, bool flush);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bytes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>*</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to the first byte to decode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes to decode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>flush</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to simulate clearing the internal state of the encoder after the calculation; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of characters produced by decoding the specified sequence of bytes and any bytes in the internal buffer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>bytes</code> is <code>null</code>(<code>Nothing</code>in Visual Basic .NET).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>count</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.decoderfallbackexception\" data-linktype=\"relative-path\">DecoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for fuller explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Decoder.Fallback*</span> is set to <a class=\"xref\" href=\"system.text.decoderexceptionfallback\" data-linktype=\"relative-path\">DecoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method does not affect the state of the decoder.  </p>\n<p> To calculate the exact array size that <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_GetChars_\" data-linktype=\"relative-path\">GetChars</a> requires to store the resulting characters, the application should use GetCharCount.  </p>\n<p> If <code>GetChars</code> is called with <code>flush</code> set to <code>false</code>, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation. The application should call <code>GetCharCount</code> on a block of data immediately before calling <code>GetChars</code> on the same block, so that any trailing bytes from the previous block are included in the calculation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Decoder_GetCharCount_System_Byte___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Text_Decoder_GetCharCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCharCount(Byte[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract int GetCharCount (byte[] bytes, int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bytes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The byte array containing the sequence of bytes to decode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the first byte to decode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes to decode.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of characters produced by decoding the specified sequence of bytes and any bytes in the internal buffer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>bytes</code> is <code>null</code>(<code>Nothing</code>).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> or <code>count</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>index</code> and <code>count</code> do not denote a valid range in <code>bytes</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.decoderfallbackexception\" data-linktype=\"relative-path\">DecoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for fuller explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Decoder.Fallback*</span> is set to <a class=\"xref\" href=\"system.text.decoderexceptionfallback\" data-linktype=\"relative-path\">DecoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method does not affect the state of the decoder.  </p>\n<p> To calculate the exact array size that <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_GetChars_\" data-linktype=\"relative-path\">GetChars</a> requires to store the resulting characters, the application should use GetCharCount.  </p>\n<p> If <code>GetChars</code> is called with <code>flush</code> set to <code>false</code>, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation. The application should call <code>GetCharCount</code> on a block of data immediately before calling <code>GetChars</code> on the same block, so that any trailing bytes from the previous block are included in the calculation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the GetCharCount method to calculate the number of characters required to decode the specified range of bytes in the array.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.Decoder.GetCharCount Example#1\">using System;\nusing System.Text;\n\nclass DecoderExample {\n    public static void Main() {\n        Byte[] bytes = new Byte[] {\n            85, 0, 110, 0, 105, 0, 99, 0, 111, 0, 100, 0, 101, 0\n        };\n\n        Decoder uniDecoder = Encoding.Unicode.GetDecoder();\n        int charCount = uniDecoder.GetCharCount(bytes, 0, bytes.Length);\n        Console.WriteLine(\n            &quot;{0} characters needed to decode bytes.&quot;, charCount\n        );\n    }\n}\n\n/* This code example produces the following output.\n\n7 characters needed to decode bytes.\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Text.Decoder.GetCharCount Example#1\">using namespace System;\nusing namespace System::Text;\nint main()\n{\n   array&lt;Byte&gt;^bytes = {85,0,110,0,105,0,99,0,111,0,100,0,101,0};\n   Decoder^ uniDecoder = Encoding::Unicode-&gt;GetDecoder();\n   int charCount = uniDecoder-&gt;GetCharCount( bytes, 0, bytes-&gt;Length );\n   Console::WriteLine( &quot;{0} characters needed to decode bytes.&quot;, charCount );\n}\n\n/* This code example produces the following output.\n\n7 characters needed to decode bytes.\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.Decoder.GetCharCount Example#1\">Imports System\nImports System.Text\n\nClass DecoderExample\n    \n    Public Shared Sub Main()\n        Dim bytes() As Byte = { _\n            85, 0, 110, 0, 105, 0, 99, 0, 111, 0, 100, 0, 101, 0 _\n        }\n        \n        Dim uniDecoder As Decoder = Encoding.Unicode.GetDecoder()\n        Dim charCount As Integer = uniDecoder.GetCharCount(bytes, 0, bytes.Length)\n        Console.WriteLine(&quot;{0} characters needed to decode bytes.&quot;, charCount)\n    End Sub\nEnd Class\n\n&#39;This code example produces the following output.\n&#39;\n&#39;7 characters needed to decode bytes.\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Decoder_GetCharCount_System_Byte___System_Int32_System_Int32_System_Boolean_\">\r\n    \r\n            <a id=\"System_Text_Decoder_GetCharCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCharCount(Byte[],Int32,Int32,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array. A parameter indicates whether to clear the internal state of the decoder after the calculation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int GetCharCount (byte[] bytes, int index, int count, bool flush);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bytes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The byte array containing the sequence of bytes to decode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the first byte to decode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes to decode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>flush</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to simulate clearing the internal state of the encoder after the calculation; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of characters produced by decoding the specified sequence of bytes and any bytes in the internal buffer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>bytes</code> is <code>null</code>(<code>Nothing</code>).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> or <code>count</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>index</code> and <code>count</code> do not denote a valid range in <code>bytes</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.decoderfallbackexception\" data-linktype=\"relative-path\">DecoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for fuller explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Decoder.Fallback*</span> is set to <a class=\"xref\" href=\"system.text.decoderexceptionfallback\" data-linktype=\"relative-path\">DecoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method does not affect the state of the decoder.  </p>\n<p> To calculate the exact array size that <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_GetChars_\" data-linktype=\"relative-path\">GetChars</a> requires to store the resulting characters, the application should use GetCharCount.  </p>\n<p> If <code>GetChars</code> is called with <code>flush</code> set to <code>false</code>, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation. The application should call <code>GetCharCount</code> on a block of data immediately before calling <code>GetChars</code> on the same block, so that any trailing bytes from the previous block are included in the calculation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Decoder_GetChars_System_Byte__System_Int32_System_Char__System_Int32_System_Boolean_\">\r\n    \r\n            <a id=\"System_Text_Decoder_GetChars_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetChars(Byte*,Int32,Char*,Int32,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, decodes a sequence of bytes starting at the specified byte pointer and any bytes in the internal buffer into a set of characters that are stored starting at the specified character pointer. A parameter indicates whether to clear the internal state of the decoder after the conversion.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int GetChars (byte* bytes, int byteCount, char* chars, int charCount, bool flush);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bytes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>*</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to the first byte to decode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>byteCount</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes to decode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>chars</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>*</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to the location at which to start writing the resulting set of characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>charCount</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of characters to write.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>flush</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to clear the internal state of the decoder after the conversion; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The actual number of characters written at the location indicated by the <code>chars</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>bytes</code> is <code>null</code>(<code>Nothing</code>).  </p>\n<p> -or-  </p>\n<p> <code>chars</code> is <code>null</code>(<code>Nothing</code>).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>byteCount</code> or <code>charCount</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>charCount</code> is less than the resulting number of characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.decoderfallbackexception\" data-linktype=\"relative-path\">DecoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for fuller explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Decoder.Fallback*</span> is set to <a class=\"xref\" href=\"system.text.decoderexceptionfallback\" data-linktype=\"relative-path\">DecoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Remember that the <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> object saves state between calls to GetChars. When the application is done with a stream of data, it should set the <code>flush</code> parameter to <code>true</code> to make sure that the state information is flushed. With this setting, the decoder ignores invalid bytes at the end of the data block and clears the internal buffer.  </p>\n<p> To calculate the exact buffer size that <code>GetChars</code> requires to store the resulting characters, the application should use <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a>.  </p>\n<p> If <code>GetChars</code> is called with <code>flush</code> set to <code>false</code>, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation. The application should call <code>GetCharCount</code> on a block of data immediately before calling <code>GetChars</code> on the same block, so that any trailing bytes from the previous block are included in the calculation.  </p>\n<p> If your application is to convert many segments of an input stream, consider using the <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_Convert_\" data-linktype=\"relative-path\">Convert</a> method. GetChars will throw an exception if the output buffer isn&#39;t large enough, but <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_Convert_\" data-linktype=\"relative-path\">Convert</a> will fill as much space as possible and return the bytes read and chars written. Also see the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a> topic for more comments.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Decoder_GetChars_System_Byte___System_Int32_System_Int32_System_Char___System_Int32_\">\r\n    \r\n            <a id=\"System_Text_Decoder_GetChars_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetChars(Byte[],Int32,Int32,Char[],Int32)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, decodes a sequence of bytes from the specified byte array and any bytes in the internal buffer into the specified character array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bytes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The byte array containing the sequence of bytes to decode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>byteIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the first byte to decode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>byteCount</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes to decode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>chars</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character array to contain the resulting set of characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>charIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index at which to start writing the resulting set of characters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The actual number of characters written into <code>chars</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>bytes</code> is <code>null</code>(<code>Nothing</code>).  </p>\n<p> -or-  </p>\n<p> <code>chars</code> is <code>null</code>(<code>Nothing</code>).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>byteIndex</code> or <code>byteCount</code> or <code>charIndex</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>byteindex</code> and <code>byteCount</code> do not denote a valid range in <code>bytes</code>.  </p>\n<p> -or-  </p>\n<p> <code>charIndex</code> is not a valid index in <code>chars</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>chars</code> does not have enough capacity from <code>charIndex</code> to the end of the array to accommodate the resulting characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.decoderfallbackexception\" data-linktype=\"relative-path\">DecoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for fuller explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Decoder.Fallback*</span> is set to <a class=\"xref\" href=\"system.text.decoderexceptionfallback\" data-linktype=\"relative-path\">DecoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Remember that the <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> object saves state between calls to GetChars. When the application is done with a stream of data, it should set the <code>flush</code> parameter to <code>true</code> to make sure that the state information is flushed. With this setting, the decoder ignores invalid bytes at the end of the data block and clears the internal buffer.  </p>\n<p> To calculate the exact array size that <code>GetChars</code> requires to store the resulting characters, the application should use <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a>.  </p>\n<p> If <code>GetChars</code> is called with <code>flush</code> set to <code>false</code>, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation. The application should call <code>GetCharCount</code> on a block of data immediately before calling <code>GetChars</code> on the same block, so that any trailing bytes from the previous block are included in the calculation.  </p>\n<p> If your application is to convert many segments of an input stream, consider using the <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_Convert_\" data-linktype=\"relative-path\">Convert</a> method. GetChars will throw an exception if the output buffer isn&#39;t large enough, but <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_Convert_\" data-linktype=\"relative-path\">Convert</a> will fill as much space as possible and return the bytes read and chars written. Also see the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a> topic for more comments.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to decode a range of elements from a byte array and store them in a Unicode character array. The <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a> method is used to calculate the number of characters needed to store the decoded elements in the array <code>bytes</code>. The GetChars method decodes the specified elements in the byte array and stores them in the new character array.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Text.Decoder.GetChars Example#1\">using namespace System;\nusing namespace System::Text;\nusing namespace System::Collections;\nint main()\n{\n   array&lt;Char&gt;^chars;\n   array&lt;Byte&gt;^bytes = {85,0,110,0,105,0,99,0,111,0,100,0,101,0};\n   Decoder^ uniDecoder = Encoding::Unicode-&gt;GetDecoder();\n   int charCount = uniDecoder-&gt;GetCharCount( bytes, 0, bytes-&gt;Length );\n   chars = gcnew array&lt;Char&gt;(charCount);\n   int charsDecodedCount = uniDecoder-&gt;GetChars( bytes, 0, bytes-&gt;Length, chars, 0 );\n   Console::WriteLine( &quot;{0} characters used to decode bytes.&quot;, charsDecodedCount );\n   Console::Write( &quot;Decoded chars: &quot; );\n   IEnumerator^ myEnum = chars-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Char c = safe_cast&lt;Char&gt;(myEnum-&gt;Current);\n      Console::Write( &quot;[{0}]&quot;, c.ToString() );\n   }\n\n   Console::WriteLine();\n}\n\n/* This code example produces the following output.\n\n7 characters used to decode bytes.\nDecoded chars: [U][n][i][c][o][d][e]\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.Decoder.GetChars Example#1\">Imports System\nImports System.Text\n\nClass UnicodeEncodingExample\n    \n    Public Shared Sub Main()\n        Dim chars() As Char\n        Dim bytes() As Byte = { _\n            85, 0, 110, 0, 105, 0, 99, 0, 111, 0, 100, 0, 101, 0 _\n        }\n        \n        Dim uniDecoder As Decoder = Encoding.Unicode.GetDecoder()\n        \n        Dim charCount As Integer = uniDecoder.GetCharCount(bytes, 0, bytes.Length)\n        chars = New Char(charCount - 1) {}\n        Dim charsDecodedCount As Integer = _\n            uniDecoder.GetChars(bytes, 0, bytes.Length, chars, 0)\n        \n        Console.WriteLine( _\n            &quot;{0} characters used to decode bytes.&quot;, _\n            charsDecodedCount _\n        )\n        \n        Console.Write(&quot;Decoded chars: &quot;)\n        Dim c As Char\n        For Each c In  chars\n            Console.Write(&quot;[{0}]&quot;, c)\n        Next c\n        Console.WriteLine()\n    End Sub\nEnd Class\n\n&#39;This code example produces the following output.\n&#39;\n&#39;7 characters used to decode bytes.\n&#39;Decoded chars: [U][n][i][c][o][d][e]\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.Decoder.GetChars Example#1\">using System;\nusing System.Text;\n\nclass UnicodeEncodingExample {\n    public static void Main() {\n        Char[] chars;\n        Byte[] bytes = new Byte[] {\n            85, 0, 110, 0, 105, 0, 99, 0, 111, 0, 100, 0, 101, 0\n        };\n\n        Decoder uniDecoder = Encoding.Unicode.GetDecoder();\n\n        int charCount = uniDecoder.GetCharCount(bytes, 0, bytes.Length);\n        chars = new Char[charCount];\n        int charsDecodedCount = uniDecoder.GetChars(bytes, 0, bytes.Length, chars, 0);\n\n        Console.WriteLine(\n            &quot;{0} characters used to decode bytes.&quot;, charsDecodedCount\n        );\n\n        Console.Write(&quot;Decoded chars: &quot;);\n        foreach (Char c in chars) {\n            Console.Write(&quot;[{0}]&quot;, c);\n        }\n        Console.WriteLine();\n    }\n}\n\n/* This code example produces the following output.\n\n7 characters used to decode bytes.\nDecoded chars: [U][n][i][c][o][d][e]\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Decoder_GetChars_System_Byte___System_Int32_System_Int32_System_Char___System_Int32_System_Boolean_\">\r\n    \r\n            <a id=\"System_Text_Decoder_GetChars_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetChars(Byte[],Int32,Int32,Char[],Int32,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, decodes a sequence of bytes from the specified byte array and any bytes in the internal buffer into the specified character array. A parameter indicates whether to clear the internal state of the decoder after the conversion.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, bool flush);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bytes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The byte array containing the sequence of bytes to decode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>byteIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the first byte to decode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>byteCount</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes to decode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>chars</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character array to contain the resulting set of characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>charIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index at which to start writing the resulting set of characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>flush</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to clear the internal state of the decoder after the conversion; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The actual number of characters written into the <code>chars</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>bytes</code> is <code>null</code>(<code>Nothing</code>).  </p>\n<p> -or-  </p>\n<p> <code>chars</code> is <code>null</code>(<code>Nothing</code>).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>byteIndex</code> or <code>byteCount</code> or <code>charIndex</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>byteindex</code> and <code>byteCount</code> do not denote a valid range in <code>bytes</code>.  </p>\n<p> -or-  </p>\n<p> <code>charIndex</code> is not a valid index in <code>chars</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>chars</code> does not have enough capacity from <code>charIndex</code> to the end of the array to accommodate the resulting characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.decoderfallbackexception\" data-linktype=\"relative-path\">DecoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for fuller explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Decoder.Fallback*</span> is set to <a class=\"xref\" href=\"system.text.decoderexceptionfallback\" data-linktype=\"relative-path\">DecoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Remember that the <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> object saves state between calls to GetChars. When the application is done with a stream of data, it should set the <code>flush</code> parameter to <code>true</code> to make sure that the state information is flushed. With this setting, the decoder ignores invalid bytes at the end of the data block and clears the internal buffer.  </p>\n<p> To calculate the exact array size that <code>GetChars</code> requires to store the resulting characters, the application should use <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a>.  </p>\n<p> If <code>GetChars</code> is called with <code>flush</code> set to <code>false</code>, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation. The application should call <code>GetCharCount</code> on a block of data immediately before calling <code>GetChars</code> on the same block, so that any trailing bytes from the previous block are included in the calculation.  </p>\n<p> If your application is to convert many segments of an input stream, consider using the <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_Convert_\" data-linktype=\"relative-path\">Convert</a> method. GetChars will throw an exception if the output buffer isn&#39;t large enough, but <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_Convert_\" data-linktype=\"relative-path\">Convert</a> will fill as much space as possible and return the bytes read and chars written. Also see the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a> topic for more comments.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Decoder_Reset\">\r\n    \r\n            <a id=\"System_Text_Decoder_Reset_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Reset()</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, sets the decoder back to its initial state.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Reset ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method clears the internal state of the <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> object. The method clears any state information preserved from a previous call to <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_GetChars_\" data-linktype=\"relative-path\">GetChars</a> or <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_Convert_\" data-linktype=\"relative-path\">Convert</a>, including trailing bytes at the end of the previous data block.  </p>\n<p> Your application should call the Reset method if it wants to reuse the same decoder even after an exception is thrown by <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_GetChars_\" data-linktype=\"relative-path\">GetChars</a>, <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_Convert_\" data-linktype=\"relative-path\">Convert</a>, or <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a>, or if the decoder switches streams and begins to decode another stream.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Text.Decoder.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Text.Decoder.yml\">\r\n<meta name=\"APIName\" content=\"System.Text.Decoder\">\r\n<meta name=\"APIName\" content=\"System.Text.Decoder..ctor\">\r\n<meta name=\"APIName\" content=\"System.Text.Decoder.Convert\">\r\n<meta name=\"APIName\" content=\"System.Text.Decoder.Fallback\">\r\n<meta name=\"APIName\" content=\"System.Text.Decoder.FallbackBuffer\">\r\n<meta name=\"APIName\" content=\"System.Text.Decoder.GetCharCount\">\r\n<meta name=\"APIName\" content=\"System.Text.Decoder.GetChars\">\r\n<meta name=\"APIName\" content=\"System.Text.Decoder.Reset\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"2e8f9a62-0429-1c36-cb16-97cdc0313bc9\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Text\\Decoder.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Converts a sequence of encoded bytes into a set of characters.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Text/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Text.Decoder\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Text.Decoder.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Text.Decoder.yml","open_to_public_contributors":true,"api_name":["System.Text.Decoder","System.Text.Decoder..ctor","System.Text.Decoder.Convert","System.Text.Decoder.Fallback","System.Text.Decoder.FallbackBuffer","System.Text.Decoder.GetCharCount","System.Text.Decoder.GetChars","System.Text.Decoder.Reset"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Text.Decoder","System::Text::Decoder","System.Text.Decoder.#ctor","System::Text::Decoder::#ctor","System.Text.Decoder.Convert","System::Text::Decoder::Convert","System.Text.Decoder.Fallback","System::Text::Decoder::Fallback","System.Text.Decoder.FallbackBuffer","System::Text::Decoder::FallbackBuffer","System.Text.Decoder.GetCharCount","System::Text::Decoder::GetCharCount","System.Text.Decoder.GetChars","System::Text::Decoder::GetChars","System.Text.Decoder.Reset","System::Text::Decoder::Reset"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"2e8f9a62-0429-1c36-cb16-97cdc0313bc9","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Text\\Decoder.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Text/Decoder.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Decoder class | Microsoft Docs","_op_ogTitle":"Decoder class","description":"Converts a sequence of encoded bytes into a set of characters.\n","toc_asset_id":"_splitted/System.Text/toc.json","toc_rel":"_splitted/System.Text/toc.json","source_url":"","ms.assetid":"System.Text.Decoder","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.text.decoder","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.text.decoder","fileRelativePath":"System.Text.Decoder.html"},"themesRelativePathToOutputRoot":"_themes/"}