{"content":"    \r\n    <h1 id=\"System_BitConverter\">\r\n      <span class=\"lang-csharp\">BitConverter</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Converts base data types to an array of bytes, and an array of bytes to base data types.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static class BitConverter</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">BitConverter</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The BitConverter class helps manipulate value types in their fundamental form, as a series of bytes. A byte is defined as an 8-bit unsigned integer. The BitConverter class includes static methods to convert each of the primitive types to and from an array of bytes, as the following table illustrates.  </p>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>To byte conversion</th>\n<th>From byte conversion</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></td>\n<td><a class=\"xref\" href=\"system.bitconverter#System_BitConverter_GetBytes_System_Boolean_\" data-linktype=\"relative-path\">GetBytes(Boolean)</a></td>\n<td><a class=\"xref\" href=\"system.bitconverter#System_BitConverter_ToBoolean_\" data-linktype=\"relative-path\">ToBoolean</a></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></td>\n<td><a class=\"xref\" href=\"system.bitconverter#System_BitConverter_GetBytes_System_Char_\" data-linktype=\"relative-path\">GetBytes(Char)</a></td>\n<td><a class=\"xref\" href=\"system.bitconverter#System_BitConverter_ToChar_\" data-linktype=\"relative-path\">ToChar</a></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></td>\n<td><a class=\"xref\" href=\"system.bitconverter#System_BitConverter_GetBytes_System_Double_\" data-linktype=\"relative-path\">GetBytes(Double)</a><br><br> -or-<br><br> <a class=\"xref\" href=\"system.bitconverter#System_BitConverter_DoubleToInt64Bits_System_Double_\" data-linktype=\"relative-path\">DoubleToInt64Bits(Double)</a></td>\n<td><a class=\"xref\" href=\"system.bitconverter#System_BitConverter_ToDouble_\" data-linktype=\"relative-path\">ToDouble</a><br><br> -or-<br><br> <a class=\"xref\" href=\"system.bitconverter#System_BitConverter_Int64BitsToDouble_\" data-linktype=\"relative-path\">Int64BitsToDouble</a></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></td>\n<td><a class=\"xref\" href=\"system.bitconverter#System_BitConverter_GetBytes_System_Int16_\" data-linktype=\"relative-path\">GetBytes(Int16)</a></td>\n<td><a class=\"xref\" href=\"system.bitconverter#System_BitConverter_ToInt16_\" data-linktype=\"relative-path\">ToInt16</a></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></td>\n<td><a class=\"xref\" href=\"system.bitconverter#System_BitConverter_GetBytes_System_Int32_\" data-linktype=\"relative-path\">GetBytes(Int32)</a></td>\n<td><a class=\"xref\" href=\"system.bitconverter#System_BitConverter_ToInt32_\" data-linktype=\"relative-path\">ToInt32</a></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></td>\n<td><a class=\"xref\" href=\"system.bitconverter#System_BitConverter_GetBytes_System_Int64_\" data-linktype=\"relative-path\">GetBytes(Int64)</a></td>\n<td><a class=\"xref\" href=\"system.bitconverter#System_BitConverter_ToInt64_\" data-linktype=\"relative-path\">ToInt64</a></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></td>\n<td><a class=\"xref\" href=\"system.bitconverter#System_BitConverter_GetBytes_System_Single_\" data-linktype=\"relative-path\">GetBytes(Single)</a></td>\n<td><a class=\"xref\" href=\"system.bitconverter#System_BitConverter_ToSingle_\" data-linktype=\"relative-path\">ToSingle</a></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></td>\n<td><a class=\"xref\" href=\"system.bitconverter#System_BitConverter_GetBytes_System_UInt16_\" data-linktype=\"relative-path\">GetBytes(UInt16)</a></td>\n<td><a class=\"xref\" href=\"system.bitconverter#System_BitConverter_ToUInt16_\" data-linktype=\"relative-path\">ToUInt16</a></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></td>\n<td><a class=\"xref\" href=\"system.bitconverter#System_BitConverter_GetBytes_System_UInt32_\" data-linktype=\"relative-path\">GetBytes(UInt32)</a></td>\n<td><a class=\"xref\" href=\"system.bitconverter#System_BitConverter_ToUInt32_\" data-linktype=\"relative-path\">ToUInt32</a></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></td>\n<td><a class=\"xref\" href=\"system.bitconverter#System_BitConverter_GetBytes_System_UInt64_\" data-linktype=\"relative-path\">GetBytes(UInt64)</a></td>\n<td><a class=\"xref\" href=\"system.bitconverter#System_BitConverter_ToUInt64_\" data-linktype=\"relative-path\">ToUInt64</a></td>\n</tr>\n</tbody>\n</table>\n<p> If you use BitConverter methods to round-trip data, make sure that the <a class=\"xref\" href=\"system.bitconverter#System_BitConverter_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> overload and the <code>To</code><em>Type</em> method specify the same type. As the following example illustrates, restoring an array that represents a signed integer by calling the <a class=\"xref\" href=\"system.bitconverter#System_BitConverter_ToUInt32_\" data-linktype=\"relative-path\">ToUInt32</a> method can result in a value that is different from the original. For more information, see the entry <a href=\"http://go.microsoft.com/fwlink/?LinkId=186999\" data-linktype=\"external\">Working with Signed Non-Decimal and Bitwise Values</a> in the BCL Team Blog.  </p>\n<pre><code class=\"lang-vb\" name=\"System.BitConverter.Class#3\">Module Example\n   Public Sub Main()\n      Dim value As Integer = -16\n      Dim bytes() As Byte = BitConverter.GetBytes(value) \n      \n      &#39; Convert bytes back to Int32.\n      Dim intValue As Integer = BitConverter.ToInt32(bytes, 0)\n      Console.WriteLine(&quot;{0} = {1}: {2}&quot;, \n                        value, intValue, \n                        If(value.Equals(intValue), &quot;Round-trips&quot;, &quot;Does not round-trip&quot;))\n      &#39; Convert bytes to UInt32.\n      Dim uintValue As UInteger = BitConverter.ToUInt32(bytes, 0)\n      Console.WriteLine(&quot;{0} = {1}: {2}&quot;, value, uintValue, \n                        If(value.Equals(uintValue), &quot;Round-trips&quot;, &quot;Does not round-trip&quot;))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       -16 = -16: Round-trips\n&#39;       -16 = 4294967280: Does not round-trip\n</code></pre><pre><code class=\"lang-cs\" name=\"System.BitConverter.Class#3\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      int value = -16;\n      Byte[] bytes = BitConverter.GetBytes(value); \n      \n      // Convert bytes back to Int32.\n      int intValue = BitConverter.ToInt32(bytes, 0);\n      Console.WriteLine(&quot;{0} = {1}: {2}&quot;, \n                        value, intValue, \n                        value.Equals(intValue) ? &quot;Round-trips&quot; : &quot;Does not round-trip&quot;);\n      // Convert bytes to UInt32.\n      uint uintValue = BitConverter.ToUInt32(bytes, 0);\n      Console.WriteLine(&quot;{0} = {1}: {2}&quot;, value, uintValue, \n                        value.Equals(uintValue) ? &quot;Round-trips&quot; : &quot;Does not round-trip&quot;);\n   }\n}\n// The example displays the following output:\n//       -16 = -16: Round-trips\n//       -16 = 4294967280: Does not round-trip\n</code></pre><p> The order of bytes in the array returned by the <a class=\"xref\" href=\"system.bitconverter#System_BitConverter_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method overloads (as well as the order of bits in the integer returned by the <a class=\"xref\" href=\"system.bitconverter#System_BitConverter_DoubleToInt64Bits_\" data-linktype=\"relative-path\">DoubleToInt64Bits</a> method and the order of hexadecimal strings returned by the [ToString(Byte&lt;xref:System.BitConverter.ToString%28System.Byte%5B%5D%29&gt; method) depends on whether the computer architecture is little-endian or big-endian. Similarly, the order of bytes in the array and returned by the <code>To</code><em>IntegerValue</em> methods and the <a class=\"xref\" href=\"system.bitconverter#System_BitConverter_ToChar_\" data-linktype=\"relative-path\">ToChar</a> method depends on whether the computer architecture is little-endian or big-endian. The endianness of an architecture is indicated by the <a class=\"xref\" href=\"system.bitconverter#System_BitConverter_IsLittleEndian\" data-linktype=\"relative-path\">IsLittleEndian</a> property, which returns <code>true</code> on little-endian systems and <code>false</code> on big-endian systems. On little-endian systems, lower-order bytes precede higher-order bytes. On big-endian system, higher-order bytes precede lower-order bytes. The following table illustrates the difference in the byte arrays that result from passing the integer 1,234,567,890 (0x499602D2) to the <a class=\"xref\" href=\"system.bitconverter#System_BitConverter_GetBytes_System_Int32_\" data-linktype=\"relative-path\">GetBytes(Int32)</a> method. The bytes are listed in order from the byte at index 0 to the byte at index 3.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Little-endian</td>\n<td>D2-02-96-49</td>\n</tr>\n<tr>\n<td>Big-endian</td>\n<td>49-96-02-D2</td>\n</tr>\n</tbody>\n</table>\n<p> Because the return value of some methods depends on system architecture, be careful when transmitting byte data beyond machine boundaries:  </p>\n<ul>\n<li><p>If all systems sending and receiving data are guaranteed to have the same endianness, nothing has be done to the data.  </p>\n</li>\n<li><p>If systems sending and receiving data can have different endianness, always transmit data in a particular order. This means that the order of bytes in the array may have to be reversed either before sending them or after receiving them. A common convention is to transmit data in network byte order (big-endian order). The following example provides an implementation for sending an integer value in network byte order.  </p>\n<pre><code class=\"lang-cs\" name=\"System.BitConverter.Class#4\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      int value = 12345678;\n      byte[] bytes = BitConverter.GetBytes(value);\n      Console.WriteLine(BitConverter.ToString(bytes));\n      \n      if (BitConverter.IsLittleEndian)\n         Array.Reverse(bytes); \n\n      Console.WriteLine(BitConverter.ToString(bytes));\n      // Call method to send byte stream across machine boundaries.\n      \n      // Receive byte stream from beyond machine boundaries.\n      Console.WriteLine(BitConverter.ToString(bytes));\n      if (BitConverter.IsLittleEndian)\n         Array.Reverse(bytes);\n\n      Console.WriteLine(BitConverter.ToString(bytes));\n      int result = BitConverter.ToInt32(bytes, 0);\n      Console.WriteLine(&quot;Original value: {0}&quot;, value);\n      Console.WriteLine(&quot;Returned value: {0}&quot;, result);\n   }\n}\n// The example displays the following output on a little-endian system:\n//       4E-61-BC-00\n//       00-BC-61-4E\n//       00-BC-61-4E\n//       4E-61-BC-00\n//       Original value: 12345678\n//       Returned value: 12345678\n</code></pre><pre><code class=\"lang-vb\" name=\"System.BitConverter.Class#4\">Module Example\n   Public Sub Main()\n      Dim value As Integer = 12345678\n      Dim bytes() As Byte = BitConverter.GetBytes(value)\n      Console.WriteLine(BitConverter.ToString(bytes))\n      \n      If BitConverter.IsLittleEndian Then\n         Array.Reverse(bytes) \n      End If\n      Console.WriteLine(BitConverter.ToString(bytes))\n      &#39; Call method to send byte stream across machine boundaries.\n      \n      &#39; Receive byte stream from beyond machine boundaries.\n      Console.WriteLine(BitConverter.ToString(bytes))\n      If BitConverter.IsLittleEndian Then     \n         Array.Reverse(bytes)\n      End If   \n      Console.WriteLine(BitConverter.ToString(bytes))\n      Dim result As Integer = BitConverter.ToInt32(bytes, 0)\n      Console.WriteLine(&quot;Original value: {0}&quot;, value)\n      Console.WriteLine(&quot;Returned value: {0}&quot;, result)\n   End Sub\nEnd Module\n&#39; The example displays the following output on a little-endian system:\n&#39;       4E-61-BC-00\n&#39;       00-BC-61-4E\n&#39;       00-BC-61-4E\n&#39;       4E-61-BC-00\n&#39;       Original value: 12345678\n&#39;       Returned value: 12345678\n</code></pre></li>\n<li><p>If systems sending and receiving data can have different endianness and the data to be transmitted consists of signed integers, call the <a class=\"xref\" href=\"system.net.ipaddress#System_Net_IPAddress_HostToNetworkOrder_\" data-linktype=\"relative-path\">HostToNetworkOrder</a> method to convert the data to network byte order and the <a class=\"xref\" href=\"system.net.ipaddress#System_Net_IPAddress_NetworkToHostOrder_\" data-linktype=\"relative-path\">NetworkToHostOrder</a> method to convert it to the order required by the recipient.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Fields\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_BitConverter_IsLittleEndian\" data-linktype=\"self-bookmark\">IsLittleEndian</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates the byte order (&quot;endianness&quot;) in which data is stored in this computer architecture.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_BitConverter_DoubleToInt64Bits_System_Double_\" data-linktype=\"self-bookmark\">DoubleToInt64Bits(Double)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified double-precision floating point number to a 64-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_BitConverter_GetBytes_System_Boolean_\" data-linktype=\"self-bookmark\">GetBytes(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the specified Boolean value as a byte array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_BitConverter_GetBytes_System_Char_\" data-linktype=\"self-bookmark\">GetBytes(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the specified Unicode character value as an array of bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_BitConverter_GetBytes_System_Double_\" data-linktype=\"self-bookmark\">GetBytes(Double)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the specified double-precision floating point value as an array of bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_BitConverter_GetBytes_System_Int16_\" data-linktype=\"self-bookmark\">GetBytes(Int16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the specified 16-bit signed integer value as an array of bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_BitConverter_GetBytes_System_Int32_\" data-linktype=\"self-bookmark\">GetBytes(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the specified 32-bit signed integer value as an array of bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_BitConverter_GetBytes_System_Int64_\" data-linktype=\"self-bookmark\">GetBytes(Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the specified 64-bit signed integer value as an array of bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_BitConverter_GetBytes_System_Single_\" data-linktype=\"self-bookmark\">GetBytes(Single)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the specified single-precision floating point value as an array of bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_BitConverter_GetBytes_System_UInt16_\" data-linktype=\"self-bookmark\">GetBytes(UInt16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the specified 16-bit unsigned integer value as an array of bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_BitConverter_GetBytes_System_UInt32_\" data-linktype=\"self-bookmark\">GetBytes(UInt32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the specified 32-bit unsigned integer value as an array of bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_BitConverter_GetBytes_System_UInt64_\" data-linktype=\"self-bookmark\">GetBytes(UInt64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the specified 64-bit unsigned integer value as an array of bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_BitConverter_Int64BitsToDouble_System_Int64_\" data-linktype=\"self-bookmark\">Int64BitsToDouble(Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified 64-bit signed integer to a double-precision floating point number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_BitConverter_ToBoolean_System_Byte___System_Int32_\" data-linktype=\"self-bookmark\">ToBoolean(Byte[],Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a Boolean value converted from the byte at a specified position in a byte array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_BitConverter_ToChar_System_Byte___System_Int32_\" data-linktype=\"self-bookmark\">ToChar(Byte[],Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a Unicode character converted from two bytes at a specified position in a byte array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_BitConverter_ToDouble_System_Byte___System_Int32_\" data-linktype=\"self-bookmark\">ToDouble(Byte[],Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a double-precision floating point number converted from eight bytes at a specified position in a byte array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_BitConverter_ToInt16_System_Byte___System_Int32_\" data-linktype=\"self-bookmark\">ToInt16(Byte[],Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a 16-bit signed integer converted from two bytes at a specified position in a byte array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_BitConverter_ToInt32_System_Byte___System_Int32_\" data-linktype=\"self-bookmark\">ToInt32(Byte[],Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a 32-bit signed integer converted from four bytes at a specified position in a byte array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_BitConverter_ToInt64_System_Byte___System_Int32_\" data-linktype=\"self-bookmark\">ToInt64(Byte[],Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a 64-bit signed integer converted from eight bytes at a specified position in a byte array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_BitConverter_ToSingle_System_Byte___System_Int32_\" data-linktype=\"self-bookmark\">ToSingle(Byte[],Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a single-precision floating point number converted from four bytes at a specified position in a byte array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_BitConverter_ToString_System_Byte___\" data-linktype=\"self-bookmark\">ToString(Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the numeric value of each element of a specified array of bytes to its equivalent hexadecimal string representation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_BitConverter_ToString_System_Byte___System_Int32_\" data-linktype=\"self-bookmark\">ToString(Byte[],Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the numeric value of each element of a specified subarray of bytes to its equivalent hexadecimal string representation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_BitConverter_ToString_System_Byte___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">ToString(Byte[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the numeric value of each element of a specified subarray of bytes to its equivalent hexadecimal string representation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_BitConverter_ToUInt16_System_Byte___System_Int32_\" data-linktype=\"self-bookmark\">ToUInt16(Byte[],Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a 16-bit unsigned integer converted from two bytes at a specified position in a byte array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_BitConverter_ToUInt32_System_Byte___System_Int32_\" data-linktype=\"self-bookmark\">ToUInt32(Byte[],Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a 32-bit unsigned integer converted from four bytes at a specified position in a byte array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_BitConverter_ToUInt64_System_Byte___System_Int32_\" data-linktype=\"self-bookmark\">ToUInt64(Byte[],Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a 64-bit unsigned integer converted from eight bytes at a specified position in a byte array.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"fields\">\r\n        <h2>Fields\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_BitConverter_IsLittleEndian\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsLittleEndian</div>        \r\n          </div>\r\n    \r\n            <p>Indicates the byte order (&quot;endianness&quot;) in which data is stored in this computer architecture.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly bool IsLittleEndian;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Different computer architectures store data using different byte orders. &quot;Big-endian&quot; means the most significant byte is on the left end of a word. &quot;Little-endian&quot; means the most significant byte is on the right end of a word.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> You can convert from network byte order to the byte order of the host computer without retrieving  the value of the IsLittleEndian field by passing a 16-bit, 32-bit, or 64 bit integer to the <a class=\"xref\" href=\"system.net.ipaddress#System_Net_IPAddress_HostToNetworkOrder_\" data-linktype=\"relative-path\">HostToNetworkOrder</a> method.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example illustrates the use of the <code>IsLittleEndian</code> field.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.BitConverter.Class#2\">// Example of the BitConverter::IsLittleEndian field.\nusing namespace System;\nint main()\n{\n   Console::WriteLine( &quot;This example of the BitConverter::IsLittleEndian field &quot;\n   &quot;generates <br>the following output when run on &quot;\n   &quot;x86-class computers.<br>&quot; );\n   Console::WriteLine( &quot;IsLittleEndian:  {0}&quot;, BitConverter::IsLittleEndian );\n}\n\n/*\nThis example of the BitConverter::IsLittleEndian field generates\nthe following output when run on x86-class computers.\n\nIsLittleEndian:  True\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.BitConverter.Class#2\">&#39; Example of the BitConverter.IsLittleEndian field.\nImports System\nImports Microsoft.VisualBasic\n\nModule LittleEndDemo\n    Sub Main( )\n        Console.WriteLine( _\n            &quot;This example of the BitConverter.IsLittleEndian &quot; &amp; _\n            &quot;field generates &quot; &amp; vbCrLf &amp; &quot;the following output &quot; &amp; _\n            &quot;when run on x86-class computers.&quot; &amp; vbCrLf )\n        Console.WriteLine( &quot;IsLittleEndian:  {0}&quot;, _\n            BitConverter.IsLittleEndian )\n    End Sub \nEnd Module\n\n&#39; This example of the BitConverter.IsLittleEndian field generates\n&#39; the following output when run on x86-class computers.\n&#39;\n&#39; IsLittleEndian:  True\n</code></pre><pre><code class=\"lang-cs\" name=\"System.BitConverter.Class#2\">// Example of the BitConverter.IsLittleEndian field.\nusing System;\n\nclass LittleEndDemo\n{\n    public static void Main( )\n    {\n        Console.WriteLine( \n            &quot;This example of the BitConverter.IsLittleEndian field &quot; +\n            &quot;generates <br>the following output when run on &quot; +\n            &quot;x86-class computers.<br>&quot;);\n        Console.WriteLine( &quot;IsLittleEndian:  {0}&quot;, \n            BitConverter.IsLittleEndian );\n    }\n}\n\n/*\nThis example of the BitConverter.IsLittleEndian field generates\nthe following output when run on x86-class computers.\n\nIsLittleEndian:  True\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_BitConverter_DoubleToInt64Bits_System_Double_\">\r\n    \r\n            <a id=\"System_BitConverter_DoubleToInt64Bits_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DoubleToInt64Bits(Double)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified double-precision floating point number to a 64-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static long DoubleToInt64Bits (double value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>A 64-bit signed integer whose value is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The order of bits in the integer returned by the DoubleToInt64Bits method depends on whether the computer architecture is little-endian or big-endian.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example converts the bit patterns of several <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values to <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values with the <code>DoubleToInt64Bits</code> method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.BitConverter.DoubleInt64#2\">// Example of the BitConverter.DoubleToInt64Bits method.\nusing System;\n\nclass DoubleToInt64BitsDemo\n{\n    const string formatter = &quot;{0,25:E16}{1,23:X16}&quot;;\n \n    // Reinterpret the double argument as a long.\n    public static void DoubleToLongBits( double argument )\n    {\n        long longValue;\n        longValue = BitConverter.DoubleToInt64Bits( argument );\n\n        // Display the resulting long in hexadecimal.\n        Console.WriteLine( formatter, argument, longValue );\n    }\n       \n    public static void Main( )\n    {\n        Console.WriteLine( \n            &quot;This example of the BitConverter.DoubleToInt64Bits( &quot; +\n            &quot;double ) <br>method generates the following output.<br>&quot; );\n        Console.WriteLine( formatter, &quot;double argument&quot;, \n            &quot;hexadecimal value&quot; );\n        Console.WriteLine( formatter, &quot;---------------&quot;, \n            &quot;-----------------&quot; );\n          \n        // Convert double values and display the results.\n        DoubleToLongBits( 1.0 );\n        DoubleToLongBits( 15.0 );\n        DoubleToLongBits( 255.0 );\n        DoubleToLongBits( 4294967295.0 );\n        DoubleToLongBits( 0.00390625 );\n        DoubleToLongBits( 0.00000000023283064365386962890625 );\n        DoubleToLongBits( 1.234567890123E-300 );\n        DoubleToLongBits( 1.23456789012345E-150 );\n        DoubleToLongBits( 1.2345678901234565 );\n        DoubleToLongBits( 1.2345678901234567 );\n        DoubleToLongBits( 1.2345678901234569 );\n        DoubleToLongBits( 1.23456789012345678E+150 );\n        DoubleToLongBits( 1.234567890123456789E+300 );\n        DoubleToLongBits( double.MinValue );\n        DoubleToLongBits( double.MaxValue );\n        DoubleToLongBits( double.Epsilon );\n        DoubleToLongBits( double.NaN );\n        DoubleToLongBits( double.NegativeInfinity );\n        DoubleToLongBits( double.PositiveInfinity );\n    }\n}\n\n/*\nThis example of the BitConverter.DoubleToInt64Bits( double )\nmethod generates the following output.\n\n          double argument      hexadecimal value\n          ---------------      -----------------\n  1.0000000000000000E+000       3FF0000000000000\n  1.5000000000000000E+001       402E000000000000\n  2.5500000000000000E+002       406FE00000000000\n  4.2949672950000000E+009       41EFFFFFFFE00000\n  3.9062500000000000E-003       3F70000000000000\n  2.3283064365386963E-010       3DF0000000000000\n  1.2345678901230000E-300       01AA74FE1C1E7E45\n  1.2345678901234500E-150       20D02A36586DB4BB\n  1.2345678901234565E+000       3FF3C0CA428C59FA\n  1.2345678901234567E+000       3FF3C0CA428C59FB\n  1.2345678901234569E+000       3FF3C0CA428C59FC\n  1.2345678901234569E+150       5F182344CD3CDF9F\n  1.2345678901234569E+300       7E3D7EE8BCBBD352\n -1.7976931348623157E+308       FFEFFFFFFFFFFFFF\n  1.7976931348623157E+308       7FEFFFFFFFFFFFFF\n  4.9406564584124654E-324       0000000000000001\n                      NaN       FFF8000000000000\n                -Infinity       FFF0000000000000\n                 Infinity       7FF0000000000000\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.BitConverter.DoubleInt64#2\">// Example of the BitConverter::DoubleToInt64Bits method.\nusing namespace System;\n\n// Reinterpret the double argument as an __int64.\nvoid DoubleToLongBits( double argument )\n{\n   __int64 longValue;\n   longValue = BitConverter::DoubleToInt64Bits( argument );\n   \n   // Display the resulting __int64 in hexadecimal.\n   Console::WriteLine( &quot;{0,25:E16}{1,23:X16}&quot;, argument, longValue );\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of the BitConverter::DoubleToInt64Bits( &quot;\n   &quot;double ) <br>method generates the following output.<br>&quot; );\n   Console::WriteLine( &quot;{0,25:E16}{1,23:X16}&quot;, &quot;double argument&quot;, &quot;hexadecimal value&quot; );\n   Console::WriteLine( &quot;{0,25:E16}{1,23:X16}&quot;, &quot;---------------&quot;, &quot;-----------------&quot; );\n   \n   // Convert double values and display the results.\n   DoubleToLongBits( 1.0 );\n   DoubleToLongBits( 15.0 );\n   DoubleToLongBits( 255.0 );\n   DoubleToLongBits( 4294967295.0 );\n   DoubleToLongBits( 0.00390625 );\n   DoubleToLongBits( 0.00000000023283064365386962890625 );\n   DoubleToLongBits( 1.234567890123E-300 );\n   DoubleToLongBits( 1.23456789012345E-150 );\n   DoubleToLongBits( 1.2345678901234565 );\n   DoubleToLongBits( 1.2345678901234567 );\n   DoubleToLongBits( 1.2345678901234569 );\n   DoubleToLongBits( 1.23456789012345678E+150 );\n   DoubleToLongBits( 1.234567890123456789E+300 );\n   DoubleToLongBits( Double::MinValue );\n   DoubleToLongBits( Double::MaxValue );\n   DoubleToLongBits( Double::Epsilon );\n   DoubleToLongBits( Double::NaN );\n   DoubleToLongBits( Double::NegativeInfinity );\n   DoubleToLongBits( Double::PositiveInfinity );\n}\n\n/*\nThis example of the BitConverter::DoubleToInt64Bits( double )\nmethod generates the following output.\n\n          double argument      hexadecimal value\n          ---------------      -----------------\n  1.0000000000000000E+000       3FF0000000000000\n  1.5000000000000000E+001       402E000000000000\n  2.5500000000000000E+002       406FE00000000000\n  4.2949672950000000E+009       41EFFFFFFFE00000\n  3.9062500000000000E-003       3F70000000000000\n  2.3283064365386963E-010       3DF0000000000000\n  1.2345678901230000E-300       01AA74FE1C1E7E45\n  1.2345678901234500E-150       20D02A36586DB4BB\n  1.2345678901234565E+000       3FF3C0CA428C59FA\n  1.2345678901234567E+000       3FF3C0CA428C59FB\n  1.2345678901234569E+000       3FF3C0CA428C59FC\n  1.2345678901234569E+150       5F182344CD3CDF9F\n  1.2345678901234569E+300       7E3D7EE8BCBBD352\n -1.7976931348623157E+308       FFEFFFFFFFFFFFFF\n  1.7976931348623157E+308       7FEFFFFFFFFFFFFF\n  4.9406564584124654E-324       0000000000000001\n                      NaN       FFF8000000000000\n                -Infinity       FFF0000000000000\n                 Infinity       7FF0000000000000\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.BitConverter.DoubleInt64#2\">&#39; Example of the BitConverter.DoubleToInt64Bits method.\nImports System\nImports Microsoft.VisualBasic\n\nModule DoubleToInt64BitsDemo\n\n    Const formatter As String = &quot;{0,25:E16}{1,23:X16}&quot;\n \n    &#39; Reinterpret the Double argument as a Long.\n    Sub DoubleToLongBits( argument As Double )\n\n        Dim longValue    As Long\n        longValue = BitConverter.DoubleToInt64Bits( argument )\n\n        &#39; Display the resulting Long in hexadecimal.\n        Console.WriteLine( formatter, argument, longValue )\n    End Sub \n       \n    Sub Main( )\n\n        Console.WriteLine( _\n            &quot;This example of the BitConverter.DoubleToInt64Bits( &quot; &amp; _\n            &quot;Double ) &quot; &amp; vbCrLf &amp; &quot;method generates the &quot; &amp; _\n            &quot;following output.&quot; &amp; vbCrLf )\n        Console.WriteLine( formatter, &quot;Double argument&quot;, _\n            &quot;hexadecimal value&quot; )\n        Console.WriteLine( formatter, &quot;---------------&quot;, _\n            &quot;-----------------&quot; )\n          \n        &#39; Convert Double values and display the results.\n        DoubleToLongBits( 1.0 )\n        DoubleToLongBits( 15.0 )\n        DoubleToLongBits( 255.0 )\n        DoubleToLongBits( 4294967295.0 )\n        DoubleToLongBits( 0.00390625 )\n        DoubleToLongBits( 0.00000000023283064365386962890625 )\n        DoubleToLongBits( 1.234567890123E-300 )\n        DoubleToLongBits( 1.23456789012345E-150 )\n        DoubleToLongBits( 1.2345678901234565 )\n        DoubleToLongBits( 1.2345678901234567 )\n        DoubleToLongBits( 1.2345678901234569 )\n        DoubleToLongBits( 1.23456789012345678E+150 )\n        DoubleToLongBits( 1.234567890123456789E+300 )\n        DoubleToLongBits( Double.MinValue )\n        DoubleToLongBits( Double.MaxValue )\n        DoubleToLongBits( Double.Epsilon )\n        DoubleToLongBits( Double.NaN )\n        DoubleToLongBits( Double.NegativeInfinity )\n        DoubleToLongBits( Double.PositiveInfinity )\n    End Sub \nEnd Module\n\n&#39; This example of the BitConverter.DoubleToInt64Bits( Double )\n&#39; method generates the following output.\n&#39; \n&#39;           Double argument      hexadecimal value\n&#39;           ---------------      -----------------\n&#39;   1.0000000000000000E+000       3FF0000000000000\n&#39;   1.5000000000000000E+001       402E000000000000\n&#39;   2.5500000000000000E+002       406FE00000000000\n&#39;   4.2949672950000000E+009       41EFFFFFFFE00000\n&#39;   3.9062500000000000E-003       3F70000000000000\n&#39;   2.3283064365386963E-010       3DF0000000000000\n&#39;   1.2345678901230000E-300       01AA74FE1C1E7E45\n&#39;   1.2345678901234500E-150       20D02A36586DB4BB\n&#39;   1.2345678901234565E+000       3FF3C0CA428C59FA\n&#39;   1.2345678901234567E+000       3FF3C0CA428C59FB\n&#39;   1.2345678901234569E+000       3FF3C0CA428C59FC\n&#39;   1.2345678901234569E+150       5F182344CD3CDF9F\n&#39;   1.2345678901234569E+300       7E3D7EE8BCBBD352\n&#39;  -1.7976931348623157E+308       FFEFFFFFFFFFFFFF\n&#39;   1.7976931348623157E+308       7FEFFFFFFFFFFFFF\n&#39;   4.9406564584124654E-324       0000000000000001\n&#39;                       NaN       FFF8000000000000\n&#39;                 -Infinity       FFF0000000000000\n&#39;                  Infinity       7FF0000000000000\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_BitConverter_GetBytes_System_Boolean_\">\r\n    \r\n            <a id=\"System_BitConverter_GetBytes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetBytes(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the specified Boolean value as a byte array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static byte[] GetBytes (bool value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A Boolean value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>A byte array with length 1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can convert a byte array back to a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value by calling the <a class=\"xref\" href=\"system.bitconverter#System_BitConverter_ToBoolean_\" data-linktype=\"relative-path\">ToBoolean</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts the bit patterns of <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> values to <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> arrays with the <code>GetBytes</code> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.BitConverter.GetBytes.Others#1\">using namespace System;\n\nint main()\n{\n    // Define Boolean true and false values.\n    array&lt;bool&gt;^ values = { true, false };\n\n    // Display the value and its corresponding byte array.\n    Console::WriteLine(&quot;{0,10}{1,16}<br>&quot;, &quot;Boolean&quot;, &quot;Bytes&quot;);\n    for each (Byte value in values) {\n       array&lt;Byte&gt;^ bytes = BitConverter::GetBytes(value); \n       Console::WriteLine(&quot;{0,10}{1,16}&quot;, value, \n                          BitConverter::ToString(bytes));\n    }\n}\n// This example displays the following output:\n//        Boolean           Bytes\n//     \n//           True              01\n//          False              00\n</code></pre><pre><code class=\"lang-vb\" name=\"System.BitConverter.GetBytes.Others#1\">Module Example\n   Public Sub Main()\n      &#39; Define Boolean true and false values.\n      Dim values() As Boolean = { true, false }\n\n      &#39; Display the value and its corresponding byte array.\n      Console.WriteLine(&quot;{0,10}{1,16}&quot;, &quot;Boolean&quot;, &quot;Bytes&quot;)\n      Console.WriteLine()\n      \n      For Each value In values\n         Dim bytes() As Byte = BitConverter.GetBytes(value) \n         Console.WriteLine(&quot;{0,10}{1,16}&quot;, value, \n                           BitConverter.ToString(bytes))\n      Next\n    End Sub \nEnd Module\n&#39; The example displays the following output:\n&#39;        Boolean           Bytes\n&#39;     \n&#39;           True              01\n&#39;          False              00\n</code></pre><pre><code class=\"lang-cs\" name=\"System.BitConverter.GetBytes.Others#1\">using System;\n\nclass Example\n{\n   public static void Main( )\n   {\n      // Define Boolean true and false values.\n      bool[] values = { true, false };\n\n      // Display the value and its corresponding byte array.\n      Console.WriteLine(&quot;{0,10}{1,16}<br>&quot;, &quot;Boolean&quot;, &quot;Bytes&quot;);\n      foreach (var value in values) {\n         byte[] bytes = BitConverter.GetBytes(value); \n         Console.WriteLine(&quot;{0,10}{1,16}&quot;, value, \n                           BitConverter.ToString(bytes));\n      }\n   }\n}\n// The example displays the following output:\n//        Boolean           Bytes\n//     \n//           True              01\n//          False              00\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_BitConverter_GetBytes_System_Char_\">\r\n    \r\n            <a id=\"System_BitConverter_GetBytes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetBytes(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the specified Unicode character value as an array of bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static byte[] GetBytes (char value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A character to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>An array of bytes with length 2.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The order of bytes in the array returned by the <a class=\"xref\" href=\"system.bitconverter#System_BitConverter_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method depends on whether the computer architecture is little-endian or big-endian.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example converts the bit patterns of <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> values (Unicode characters) to <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> arrays with the <code>GetBytes</code> method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.BitConverter.GetBytes.Others#2\">// Example of the BitConverter.GetBytes( char ) method.\nusing System;\n\nclass GetBytesCharDemo\n{\n    const string formatter = &quot;{0,10}{1,16}&quot;;\n \n    // Convert a char argument to a byte array and display it.\n    public static void GetBytesChar( char argument )\n    {\n        byte[ ] byteArray = BitConverter.GetBytes( argument );\n        Console.WriteLine( formatter, argument, \n            BitConverter.ToString( byteArray ) );\n    }\n       \n    public static void Main( )\n    {\n        Console.WriteLine( \n            &quot;This example of the BitConverter.GetBytes( char ) &quot; +\n            &quot;<br>method generates the following output.\\r<br>&quot; );\n        Console.WriteLine( formatter, &quot;char&quot;, &quot;byte array&quot; );\n        Console.WriteLine( formatter, &quot;----&quot;, &quot;----------&quot; );\n          \n        // Convert char values and display the results.\n        GetBytesChar( &#39;\\0&#39; );\n        GetBytesChar( &#39; &#39; );\n        GetBytesChar( &#39;*&#39; );\n        GetBytesChar( &#39;3&#39; );\n        GetBytesChar( &#39;A&#39; );\n        GetBytesChar( &#39;[&#39; );\n        GetBytesChar( &#39;a&#39; );\n        GetBytesChar( &#39;{&#39; );\n    }\n}\n\n/*\nThis example of the BitConverter.GetBytes( char )\nmethod generates the following output.\n\n      char      byte array\n      ----      ----------\n                     00-00\n                     20-00\n         *           2A-00\n         3           33-00\n         A           41-00\n         [           5B-00\n         a           61-00\n         {           7B-00\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.BitConverter.GetBytes.Others#2\">// Example of the BitConverter::GetBytes( __wchar_t ) method.\nusing namespace System;\n\n// Convert a __wchar_t argument to a byte array and display it.\nvoid GetBytesChar( __wchar_t argument )\n{\n   array&lt;Byte&gt;^byteArray = BitConverter::GetBytes( argument );\n   Console::WriteLine( &quot;{0,10}{1,16}&quot;, argument, BitConverter::ToString( byteArray ) );\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of the BitConverter::GetBytes( __wchar_t ) &quot;\n   &quot;<br>method generates the following output.<br>&quot; );\n   Console::WriteLine( &quot;{0,10}{1,16}&quot;, &quot;__wchar_t&quot;, &quot;byte array&quot; );\n   Console::WriteLine( &quot;{0,10}{1,16}&quot;, &quot;---------&quot;, &quot;----------&quot; );\n   \n   // Convert __wchar_t values and display the results.\n   GetBytesChar( L&#39;\\0&#39; );\n   GetBytesChar( L&#39; &#39; );\n   GetBytesChar( L&#39;*&#39; );\n   GetBytesChar( L&#39;3&#39; );\n   GetBytesChar( L&#39;A&#39; );\n   GetBytesChar( L&#39;[&#39; );\n   GetBytesChar( L&#39;a&#39; );\n   GetBytesChar( L&#39;{&#39; );\n}\n\n/*\nThis example of the BitConverter::GetBytes( __wchar_t )\nmethod generates the following output.\n\n __wchar_t      byte array\n ---------      ----------\n                     00-00\n                     20-00\n         *           2A-00\n         3           33-00\n         A           41-00\n         [           5B-00\n         a           61-00\n         {           7B-00\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.BitConverter.GetBytes.Others#2\">&#39; Example of the BitConverter.GetBytes( Char ) method.\nImports System\nImports Microsoft.VisualBasic\n\nModule GetBytesCharDemo\n\n    Const formatter As String = &quot;{0,10}{1,16}&quot;\n \n    &#39; Convert a Char argument to a Byte array and display it.\n    Sub GetBytesChar( argument As Char )\n\n        Dim byteArray As Byte( ) = BitConverter.GetBytes( argument )\n        Console.WriteLine( formatter, argument, _\n            BitConverter.ToString( byteArray ) )\n    End Sub \n       \n    Sub Main( )\n\n        Console.WriteLine( _\n            &quot;This example of the BitConverter.GetBytes( Char ) &quot; &amp; _\n            vbCrLf &amp; &quot;method generates the following &quot; &amp; _\n            &quot;output.&quot; &amp; vbCrLf )\n        Console.WriteLine( formatter, &quot;Char&quot;, &quot;Byte array&quot; )\n        Console.WriteLine( formatter, &quot;----&quot;, &quot;----------&quot; )\n          \n        &#39; Convert Char values and display the results.\n        GetBytesChar( Chr( 0 ) )\n        GetBytesChar( &quot; &quot;c )\n        GetBytesChar( &quot;*&quot;c )\n        GetBytesChar( &quot;3&quot;c )\n        GetBytesChar( &quot;A&quot;c )\n        GetBytesChar( &quot;[&quot;c )\n        GetBytesChar( &quot;a&quot;c )\n        GetBytesChar( &quot;{&quot;c )\n    End Sub \nEnd Module\n\n&#39; This example of the BitConverter.GetBytes( Char )\n&#39; method generates the following output.\n&#39; \n&#39;       Char      Byte array\n&#39;       ----      ----------\n&#39;                      00-00\n&#39;                      20-00\n&#39;          *           2A-00\n&#39;          3           33-00\n&#39;          A           41-00\n&#39;          [           5B-00\n&#39;          a           61-00\n&#39;          {           7B-00\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_BitConverter_GetBytes_System_Double_\">\r\n    \r\n            <a id=\"System_BitConverter_GetBytes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetBytes(Double)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the specified double-precision floating point value as an array of bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static byte[] GetBytes (double value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>An array of bytes with length 8.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The order of bytes in the array returned by the <a class=\"xref\" href=\"system.bitconverter#System_BitConverter_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method depends on whether the computer architecture is little-endian or big-endian.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example converts the bit patterns of <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values to <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> arrays with the <code>GetBytes</code> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.BitConverter.GetBytes.Others#4\">// Example of the BitConverter::GetBytes( double ) method.\nusing namespace System;\n\n// Convert a double argument to a byte array and display it.\nvoid GetBytesDouble( double argument )\n{\n   array&lt;Byte&gt;^byteArray = BitConverter::GetBytes( argument );\n   Console::WriteLine( &quot;{0,25:E16}{1,30}&quot;, argument, BitConverter::ToString( byteArray ) );\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of the BitConverter::GetBytes( double ) &quot;\n   &quot;<br>method generates the following output.<br>&quot; );\n   Console::WriteLine( &quot;{0,25:E16}{1,30}&quot;, &quot;double&quot;, &quot;byte array&quot; );\n   Console::WriteLine( &quot;{0,25:E16}{1,30}&quot;, &quot;------&quot;, &quot;----------&quot; );\n   \n   // Convert double values and display the results.\n   GetBytesDouble( 0.0 );\n   GetBytesDouble( 1.0 );\n   GetBytesDouble( 255.0 );\n   GetBytesDouble( 4294967295.0 );\n   GetBytesDouble( 0.00390625 );\n   GetBytesDouble( 0.00000000023283064365386962890625 );\n   GetBytesDouble( 1.23456789012345E-300 );\n   GetBytesDouble( 1.2345678901234565 );\n   GetBytesDouble( 1.2345678901234567 );\n   GetBytesDouble( 1.2345678901234569 );\n   GetBytesDouble( 1.23456789012345678E+300 );\n   GetBytesDouble( Double::MinValue );\n   GetBytesDouble( Double::MaxValue );\n   GetBytesDouble( Double::Epsilon );\n   GetBytesDouble( Double::NaN );\n   GetBytesDouble( Double::NegativeInfinity );\n   GetBytesDouble( Double::PositiveInfinity );\n}\n\n/*\nThis example of the BitConverter::GetBytes( double )\nmethod generates the following output.\n\n                   double                    byte array\n                   ------                    ----------\n  0.0000000000000000E+000       00-00-00-00-00-00-00-00\n  1.0000000000000000E+000       00-00-00-00-00-00-F0-3F\n  2.5500000000000000E+002       00-00-00-00-00-E0-6F-40\n  4.2949672950000000E+009       00-00-E0-FF-FF-FF-EF-41\n  3.9062500000000000E-003       00-00-00-00-00-00-70-3F\n  2.3283064365386963E-010       00-00-00-00-00-00-F0-3D\n  1.2345678901234500E-300       DF-88-1E-1C-FE-74-AA-01\n  1.2345678901234565E+000       FA-59-8C-42-CA-C0-F3-3F\n  1.2345678901234567E+000       FB-59-8C-42-CA-C0-F3-3F\n  1.2345678901234569E+000       FC-59-8C-42-CA-C0-F3-3F\n  1.2345678901234569E+300       52-D3-BB-BC-E8-7E-3D-7E\n -1.7976931348623157E+308       FF-FF-FF-FF-FF-FF-EF-FF\n  1.7976931348623157E+308       FF-FF-FF-FF-FF-FF-EF-7F\n  4.9406564584124654E-324       01-00-00-00-00-00-00-00\n                      NaN       00-00-00-00-00-00-F8-FF\n                -Infinity       00-00-00-00-00-00-F0-FF\n                 Infinity       00-00-00-00-00-00-F0-7F\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.BitConverter.GetBytes.Others#4\">&#39; Example of the BitConverter.GetBytes( Double ) method.\nImports System\nImports Microsoft.VisualBasic\n\nModule GetBytesDoubleDemo\n\n    Const formatter As String = &quot;{0,25:E16}{1,30}&quot;\n \n    &#39; Convert a Double argument to a Byte array and display it.\n    Sub GetBytesDouble( argument As Double )\n\n        Dim byteArray As Byte( ) = BitConverter.GetBytes( argument )\n        Console.WriteLine( formatter, argument, _\n            BitConverter.ToString( byteArray ) )\n    End Sub \n       \n    Sub Main( )\n\n        Console.WriteLine( _\n            &quot;This example of the BitConverter.GetBytes( Double ) &quot; &amp; _\n            vbCrLf &amp; &quot;method generates the following &quot; &amp; _\n            &quot;output.&quot; &amp; vbCrLf )\n        Console.WriteLine( formatter, &quot;Double&quot;, &quot;Byte array&quot; )\n        Console.WriteLine( formatter, &quot;------&quot;, &quot;----------&quot; )\n          \n        &#39; Convert Double values and display the results.\n        GetBytesDouble( 0.0 )\n        GetBytesDouble( 1.0 )\n        GetBytesDouble( 255.0 )\n        GetBytesDouble( 4294967295.0 )\n        GetBytesDouble( 0.00390625 )\n        GetBytesDouble( 0.00000000023283064365386962890625 )\n        GetBytesDouble( 1.23456789012345E-300 )\n        GetBytesDouble( 1.2345678901234565 )\n        GetBytesDouble( 1.2345678901234567 )\n        GetBytesDouble( 1.2345678901234569 )\n        GetBytesDouble( 1.23456789012345678E+300 )\n        GetBytesDouble( Double.MinValue )\n        GetBytesDouble( Double.MaxValue )\n        GetBytesDouble( Double.Epsilon )\n        GetBytesDouble( Double.NaN )\n        GetBytesDouble( Double.NegativeInfinity )\n        GetBytesDouble( Double.PositiveInfinity )\n    End Sub \nEnd Module\n\n&#39; This example of the BitConverter.GetBytes( Double )\n&#39; method generates the following output.\n&#39; \n&#39;                    Double                    Byte array\n&#39;                    ------                    ----------\n&#39;   0.0000000000000000E+000       00-00-00-00-00-00-00-00\n&#39;   1.0000000000000000E+000       00-00-00-00-00-00-F0-3F\n&#39;   2.5500000000000000E+002       00-00-00-00-00-E0-6F-40\n&#39;   4.2949672950000000E+009       00-00-E0-FF-FF-FF-EF-41\n&#39;   3.9062500000000000E-003       00-00-00-00-00-00-70-3F\n&#39;   2.3283064365386963E-010       00-00-00-00-00-00-F0-3D\n&#39;   1.2345678901234500E-300       DF-88-1E-1C-FE-74-AA-01\n&#39;   1.2345678901234565E+000       FA-59-8C-42-CA-C0-F3-3F\n&#39;   1.2345678901234567E+000       FB-59-8C-42-CA-C0-F3-3F\n&#39;   1.2345678901234569E+000       FC-59-8C-42-CA-C0-F3-3F\n&#39;   1.2345678901234569E+300       52-D3-BB-BC-E8-7E-3D-7E\n&#39;  -1.7976931348623157E+308       FF-FF-FF-FF-FF-FF-EF-FF\n&#39;   1.7976931348623157E+308       FF-FF-FF-FF-FF-FF-EF-7F\n&#39;   4.9406564584124654E-324       01-00-00-00-00-00-00-00\n&#39;                       NaN       00-00-00-00-00-00-F8-FF\n&#39;                 -Infinity       00-00-00-00-00-00-F0-FF\n&#39;                  Infinity       00-00-00-00-00-00-F0-7F\n</code></pre><pre><code class=\"lang-cs\" name=\"System.BitConverter.GetBytes.Others#4\">// Example of the BitConverter.GetBytes( double ) method.\nusing System;\n\nclass GetBytesDoubleDemo\n{\n    const string formatter = &quot;{0,25:E16}{1,30}&quot;;\n \n    // Convert a double argument to a byte array and display it.\n    public static void GetBytesDouble( double argument )\n    {\n        byte[ ] byteArray = BitConverter.GetBytes( argument );\n        Console.WriteLine( formatter, argument, \n            BitConverter.ToString( byteArray ) );\n    }\n       \n    public static void Main( )\n    {\n        Console.WriteLine( \n            &quot;This example of the BitConverter.GetBytes( double ) &quot; +\n            &quot;<br>method generates the following output.<br>&quot; );\n        Console.WriteLine( formatter, &quot;double&quot;, &quot;byte array&quot; );\n        Console.WriteLine( formatter, &quot;------&quot;, &quot;----------&quot; );\n          \n        // Convert double values and display the results.\n        GetBytesDouble( 0.0 );\n        GetBytesDouble( 1.0 );\n        GetBytesDouble( 255.0 );\n        GetBytesDouble( 4294967295.0 );\n        GetBytesDouble( 0.00390625 );\n        GetBytesDouble( 0.00000000023283064365386962890625 );\n        GetBytesDouble( 1.23456789012345E-300 );\n        GetBytesDouble( 1.2345678901234565 );\n        GetBytesDouble( 1.2345678901234567 );\n        GetBytesDouble( 1.2345678901234569 );\n        GetBytesDouble( 1.23456789012345678E+300 );\n        GetBytesDouble( double.MinValue );\n        GetBytesDouble( double.MaxValue );\n        GetBytesDouble( double.Epsilon );\n        GetBytesDouble( double.NaN );\n        GetBytesDouble( double.NegativeInfinity );\n        GetBytesDouble( double.PositiveInfinity );\n    }\n}\n\n/*\nThis example of the BitConverter.GetBytes( double )\nmethod generates the following output.\n\n                   double                    byte array\n                   ------                    ----------\n  0.0000000000000000E+000       00-00-00-00-00-00-00-00\n  1.0000000000000000E+000       00-00-00-00-00-00-F0-3F\n  2.5500000000000000E+002       00-00-00-00-00-E0-6F-40\n  4.2949672950000000E+009       00-00-E0-FF-FF-FF-EF-41\n  3.9062500000000000E-003       00-00-00-00-00-00-70-3F\n  2.3283064365386963E-010       00-00-00-00-00-00-F0-3D\n  1.2345678901234500E-300       DF-88-1E-1C-FE-74-AA-01\n  1.2345678901234565E+000       FA-59-8C-42-CA-C0-F3-3F\n  1.2345678901234567E+000       FB-59-8C-42-CA-C0-F3-3F\n  1.2345678901234569E+000       FC-59-8C-42-CA-C0-F3-3F\n  1.2345678901234569E+300       52-D3-BB-BC-E8-7E-3D-7E\n -1.7976931348623157E+308       FF-FF-FF-FF-FF-FF-EF-FF\n  1.7976931348623157E+308       FF-FF-FF-FF-FF-FF-EF-7F\n  4.9406564584124654E-324       01-00-00-00-00-00-00-00\n                      NaN       00-00-00-00-00-00-F8-FF\n                -Infinity       00-00-00-00-00-00-F0-FF\n                 Infinity       00-00-00-00-00-00-F0-7F\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_BitConverter_GetBytes_System_Int16_\">\r\n    \r\n            <a id=\"System_BitConverter_GetBytes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetBytes(Int16)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the specified 16-bit signed integer value as an array of bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static byte[] GetBytes (short value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>An array of bytes with length 2.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The order of bytes in the array returned by the <a class=\"xref\" href=\"system.bitconverter#System_BitConverter_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method depends on whether the computer architecture is little-endian or big-endian.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example converts the bit patterns of <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a> values to <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> arrays with the <code>GetBytes</code> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.BitConverter.GetBytes.SInts#3\">using namespace System;\n\nvoid main()\n{\n    // Define an array of integers.\n    array&lt;Int16&gt;^ values = { 0, 15, -15, 10000,  -10000, \n                             Int16::MinValue, Int16::MaxValue};\n       \n    // Convert each integer to a byte array.\n    Console::WriteLine(&quot;{0,16}{1,10}{2,17}&quot;, &quot;Integer&quot;, \n                       &quot;Endian&quot;, &quot;Byte Array&quot;);\n    Console::WriteLine(&quot;{0,16}{1,10}{2,17}&quot;, &quot;---&quot;, &quot;------&quot;, \n                       &quot;----------&quot;);\n    for each (int value in values) {\n      array&lt;Byte&gt;^ byteArray = BitConverter::GetBytes(value);\n      Console::WriteLine(&quot;{0,16}{1,10}{2,17}&quot;, value, \n                        BitConverter::IsLittleEndian ? &quot;Little&quot; : &quot; Big&quot;, \n                        BitConverter::ToString(byteArray));\n    }\n}\n// This example displays output like the following:\n//              Integer    Endian       Byte Array\n//                  ---    ------       ----------\n//                    0    Little            00-00\n//                   15    Little            0F-00\n//                  -15    Little            F1-FF\n//                10000    Little            10-27\n//               -10000    Little            F0-D8\n//               -32768    Little            00-80\n//                32767    Little            FF-7F\n</code></pre><pre><code class=\"lang-cs\" name=\"System.BitConverter.GetBytes.SInts#3\">// Example of the BitConverter.GetBytes( short ) method.\nusing System;\n\nclass GetBytesInt16Demo\n{\n    const string formatter = &quot;{0,10}{1,13}&quot;;\n \n    // Convert a short argument to a byte array and display it.\n    public static void GetBytesInt16( short argument )\n    {\n        byte[ ] byteArray = BitConverter.GetBytes( argument );\n        Console.WriteLine( formatter, argument, \n            BitConverter.ToString( byteArray ) );\n    }\n       \n    public static void Main( )\n    {\n        Console.WriteLine( \n            &quot;This example of the BitConverter.GetBytes( short ) &quot; +\n            &quot;<br>method generates the following output.<br>&quot; );\n        Console.WriteLine( formatter, &quot;short&quot;, &quot;byte array&quot; );\n        Console.WriteLine( formatter, &quot;-----&quot;, &quot;----------&quot; );\n          \n        // Convert short values and display the results.\n        GetBytesInt16( 0 );\n        GetBytesInt16( 15 );\n        GetBytesInt16( -15 );\n        GetBytesInt16( 10000 );\n        GetBytesInt16( -10000 );\n        GetBytesInt16( short.MinValue );\n        GetBytesInt16( short.MaxValue );\n    }\n}\n\n/*\nThis example of the BitConverter.GetBytes( short )\nmethod generates the following output.\n\n     short   byte array\n     -----   ----------\n         0        00-00\n        15        0F-00\n       -15        F1-FF\n     10000        10-27\n    -10000        F0-D8\n    -32768        00-80\n     32767        FF-7F\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.BitConverter.GetBytes.SInts#3\">Module Example\n    Public Sub Main( )\n        &#39; Define an array of integers.\n        Dim values() As Integer  = { 0, 15, -15, 10000,  -10000, \n                                     Short.MinValue, Short.MaxValue }\n          \n        &#39; Convert each integer to a byte array.\n        Console.WriteLine(&quot;{0,16}{1,10}{2,17}&quot;, &quot;Integer&quot;, \n                          &quot;Endian&quot;, &quot;Byte Array&quot;)\n        Console.WriteLine(&quot;{0,16}{1,10}{2,17}&quot;, &quot;---&quot;, &quot;------&quot;, \n                          &quot;----------&quot; )\n        For Each value In values\n          Dim byteArray() As Byte = BitConverter.GetBytes(value)\n          Console.WriteLine(&quot;{0,16}{1,10}{2,17}&quot;, value, \n                            If(BitConverter.IsLittleEndian, &quot;Little&quot;, &quot; Big&quot;), \n                            BitConverter.ToString(byteArray))\n        Next\n    End Sub\nEnd Module\n&#39; This example displays output like the following:\n&#39;              Integer    Endian       Byte Array\n&#39;                  ---    ------       ----------\n&#39;                    0    Little            00-00\n&#39;                   15    Little            0F-00\n&#39;                  -15    Little            F1-FF\n&#39;                10000    Little            10-27\n&#39;               -10000    Little            F0-D8\n&#39;               -32768    Little            00-80\n&#39;                32767    Little            FF-7F\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_BitConverter_GetBytes_System_Int32_\">\r\n    \r\n            <a id=\"System_BitConverter_GetBytes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetBytes(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the specified 32-bit signed integer value as an array of bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static byte[] GetBytes (int value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>An array of bytes with length 4.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The order of bytes in the array returned by the <a class=\"xref\" href=\"system.bitconverter#System_BitConverter_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method depends on whether the computer architecture is little-endian or big-endian.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example converts the bit patterns of <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values to <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> arrays with the <code>GetBytes</code> method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.BitConverter.GetBytes.SInts#2\">using System;\n\nclass Example\n{\n    public static void Main( )\n    {\n        // Define an array of integers.\n        int[] values = { 0, 15, -15, 0x100000,  -0x100000, 1000000000,\n                         -1000000000, int.MinValue, int.MaxValue };\n          \n        // Convert each integer to a byte array.\n        Console.WriteLine(&quot;{0,16}{1,10}{2,17}&quot;, &quot;Integer&quot;, \n                          &quot;Endian&quot;, &quot;Byte Array&quot;);\n        Console.WriteLine(&quot;{0,16}{1,10}{2,17}&quot;, &quot;---&quot;, &quot;------&quot;, \n                          &quot;----------&quot; );\n        foreach (var value in values) {\n          byte[] byteArray = BitConverter.GetBytes(value);\n          Console.WriteLine(&quot;{0,16}{1,10}{2,17}&quot;, value, \n                            BitConverter.IsLittleEndian ? &quot;Little&quot; : &quot; Big&quot;, \n                            BitConverter.ToString(byteArray));\n        }\n    }\n}\n// This example displays output like the following:\n//              Integer    Endian       Byte Array\n//                  ---    ------       ----------\n//                    0    Little      00-00-00-00\n//                   15    Little      0F-00-00-00\n//                  -15    Little      F1-FF-FF-FF\n//              1048576    Little      00-00-10-00\n//             -1048576    Little      00-00-F0-FF\n//           1000000000    Little      00-CA-9A-3B\n//          -1000000000    Little      00-36-65-C4\n//          -2147483648    Little      00-00-00-80\n//           2147483647    Little      FF-FF-FF-7F\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.BitConverter.GetBytes.SInts#2\">using namespace System;\n\nvoid main()\n{\n    // Define an array of integers.\n    array&lt;int&gt;^ values = { 0, 15, -15, 0x100000,  -0x100000, 1000000000,\n                          -1000000000, Int32::MinValue, Int32::MaxValue };\n       \n    // Convert each integer to a byte array.\n    Console::WriteLine(&quot;{0,16}{1,10}{2,17}&quot;, &quot;Integer&quot;, \n                       &quot;Endian&quot;, &quot;Byte Array&quot;);\n    Console::WriteLine(&quot;{0,16}{1,10}{2,17}&quot;, &quot;---&quot;, &quot;------&quot;, \n                       &quot;----------&quot; );\n    for each (int value in values) {\n      array&lt;Byte&gt;^ byteArray = BitConverter::GetBytes(value);\n      Console::WriteLine(&quot;{0,16}{1,10}{2,17}&quot;, value, \n                        BitConverter::IsLittleEndian ? &quot;Little&quot; : &quot; Big&quot;, \n                        BitConverter::ToString(byteArray));\n    }\n}\n// This example displays output like the following:\n//              Integer    Endian       Byte Array\n//                  ---    ------       ----------\n//                    0    Little      00-00-00-00\n//                   15    Little      0F-00-00-00\n//                  -15    Little      F1-FF-FF-FF\n//              1048576    Little      00-00-10-00\n//             -1048576    Little      00-00-F0-FF\n//           1000000000    Little      00-CA-9A-3B\n//          -1000000000    Little      00-36-65-C4\n//          -2147483648    Little      00-00-00-80\n//           2147483647    Little      FF-FF-FF-7F\n</code></pre><pre><code class=\"lang-vb\" name=\"System.BitConverter.GetBytes.SInts#2\">Module Example\n    Public Sub Main( )\n        &#39; Define an array of integers.\n        Dim values() As Integer  = { 0, 15, -15, &amp;h100000,  -&amp;h100000, 1000000000,\n                                     -1000000000, Int32.MinValue, Int32.MaxValue }\n          \n        &#39; Convert each integer to a byte array.\n        Console.WriteLine(&quot;{0,16}{1,10}{2,17}&quot;, &quot;Integer&quot;, \n                          &quot;Endian&quot;, &quot;Byte Array&quot;)\n        Console.WriteLine(&quot;{0,16}{1,10}{2,17}&quot;, &quot;---&quot;, &quot;------&quot;, \n                          &quot;----------&quot; )\n        For Each value In values\n          Dim byteArray() As Byte = BitConverter.GetBytes(value)\n          Console.WriteLine(&quot;{0,16}{1,10}{2,17}&quot;, value, \n                            If(BitConverter.IsLittleEndian, &quot;Little&quot;, &quot; Big&quot;), \n                            BitConverter.ToString(byteArray))\n        Next\n    End Sub\nEnd Module\n&#39; This example displays output like the following:\n&#39;              Integer    Endian       Byte Array\n&#39;                  ---    ------       ----------\n&#39;                    0    Little      00-00-00-00\n&#39;                   15    Little      0F-00-00-00\n&#39;                  -15    Little      F1-FF-FF-FF\n&#39;              1048576    Little      00-00-10-00\n&#39;             -1048576    Little      00-00-F0-FF\n&#39;           1000000000    Little      00-CA-9A-3B\n&#39;          -1000000000    Little      00-36-65-C4\n&#39;          -2147483648    Little      00-00-00-80\n&#39;           2147483647    Little      FF-FF-FF-7F\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_BitConverter_GetBytes_System_Int64_\">\r\n    \r\n            <a id=\"System_BitConverter_GetBytes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetBytes(Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the specified 64-bit signed integer value as an array of bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static byte[] GetBytes (long value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>An array of bytes with length 8.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The order of bytes in the array returned by the <a class=\"xref\" href=\"system.bitconverter#System_BitConverter_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method depends on whether the computer architecture is little-endian or big-endian.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example calls the GetBytes method to convert each element in an <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> array to a<a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> arrays.  </p>\n<pre><code class=\"lang-vb\" name=\"System.BitConverter.GetBytes.SInts#1\">Public Module Example\n    Public Sub Main()\n        &#39; Define an array of Int64 values.\n        Dim values() As Long = { 0, &amp;hFFFFFF, -&amp;hFFFFFF, 1000000000, -1000000000,\n                                 &amp;h100000000, -&amp;h100000000, &amp;hAAAAAAAAAAAA, \n                                 -&amp;hAAAAAAAAAAAA, 1000000000000000000, \n                                 -1000000000000000000, Long.MinValue, \n                                 Long.MaxValue }\n        \n        Console.WriteLine( &quot;{0,22}{1,10}{2,30}&quot;, &quot;Int64&quot;, &quot;Endian&quot;, &quot;Byte Array&quot; )\n        Console.WriteLine( &quot;{0,22}{1,10}{2,30}&quot;, &quot;----&quot;, &quot;------&quot;, &quot;----------&quot; )\n        \n        For Each value in values\n            &#39; Convert each Int64 value to a byte array.\n            Dim byteArray() As Byte = BitConverter.GetBytes(value)\n            &#39; Display the result.\n            Console.WriteLine(&quot;{0,22}{1,10}{2,30}&quot;, value, \n                              If(BitConverter.IsLittleEndian, &quot;Little&quot;, &quot;Big&quot;),\n                              BitConverter.ToString(byteArray))\n        \n        Next  \n    End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;                      Int64    Endian                    Byte Array\n&#39;                       ----    ------                    ----------\n&#39;                          0    Little       00-00-00-00-00-00-00-00\n&#39;                   16777215    Little       FF-FF-FF-00-00-00-00-00\n&#39;                  -16777215    Little       01-00-00-FF-FF-FF-FF-FF\n&#39;                 1000000000    Little       00-CA-9A-3B-00-00-00-00\n&#39;                -1000000000    Little       00-36-65-C4-FF-FF-FF-FF\n&#39;                 4294967296    Little       00-00-00-00-01-00-00-00\n&#39;                -4294967296    Little       00-00-00-00-FF-FF-FF-FF\n&#39;            187649984473770    Little       AA-AA-AA-AA-AA-AA-00-00\n&#39;           -187649984473770    Little       56-55-55-55-55-55-FF-FF\n&#39;        1000000000000000000    Little       00-00-64-A7-B3-B6-E0-0D\n&#39;       -1000000000000000000    Little       00-00-9C-58-4C-49-1F-F2\n&#39;       -9223372036854775808    Little       00-00-00-00-00-00-00-80\n&#39;        9223372036854775807    Little       FF-FF-FF-FF-FF-FF-FF-7F\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.BitConverter.GetBytes.SInts#1\">using namespace System;\n\nvoid main()\n{\n    // Define an array of Int64 values.\n    array&lt;Int64&gt;^ values = { 0, 0xFFFFFF, -0xFFFFFF, 1000000000, -1000000000,\n                            0x100000000, -0x100000000, 0xAAAAAAAAAAAA, \n                            -0xAAAAAAAAAAAA, 1000000000000000000, \n                            -1000000000000000000, Int64::MinValue, \n                            Int64::MaxValue};\n      \n    Console::WriteLine( &quot;{0,22}{1,10}{2,30}&quot;, &quot;Int64&quot;, &quot;Endian&quot;, &quot;Byte Array&quot;);\n    Console::WriteLine( &quot;{0,22}{1,10}{2,30}&quot;, &quot;----&quot;, &quot;------&quot;, &quot;----------&quot;);\n      \n    for each (Int64 value in values) {\n        // Convert each Int64 value to a byte array.\n        array&lt;Byte&gt;^ byteArray = BitConverter::GetBytes(value);\n        // Display the result.\n        Console::WriteLine(&quot;{0,22}{1,10}{2,30}&quot;, value, \n                           BitConverter::IsLittleEndian ? &quot;Little&quot; : &quot; Big&quot;,\n                           BitConverter::ToString(byteArray));\n    }  \n}\n// The example displays output like the following:\n//                      Int64    Endian                    Byte Array\n//                       ----    ------                    ----------\n//                          0    Little       00-00-00-00-00-00-00-00\n//                   16777215    Little       FF-FF-FF-00-00-00-00-00\n//                  -16777215    Little       01-00-00-FF-FF-FF-FF-FF\n//                 1000000000    Little       00-CA-9A-3B-00-00-00-00\n//                -1000000000    Little       00-36-65-C4-FF-FF-FF-FF\n//                 4294967296    Little       00-00-00-00-01-00-00-00\n//                -4294967296    Little       00-00-00-00-FF-FF-FF-FF\n//            187649984473770    Little       AA-AA-AA-AA-AA-AA-00-00\n//           -187649984473770    Little       56-55-55-55-55-55-FF-FF\n//        1000000000000000000    Little       00-00-64-A7-B3-B6-E0-0D\n//       -1000000000000000000    Little       00-00-9C-58-4C-49-1F-F2\n//       -9223372036854775808    Little       00-00-00-00-00-00-00-80\n//        9223372036854775807    Little       FF-FF-FF-FF-FF-FF-FF-7F\n</code></pre><pre><code class=\"lang-cs\" name=\"System.BitConverter.GetBytes.SInts#1\">using System;\n\nclass Example\n{\n    public static void Main()\n    {\n        // Define an array of Int64 values.\n        long[] values = { 0, 0xFFFFFF, -0xFFFFFF, 1000000000, -1000000000,\n                          0x100000000, -0x100000000, 0xAAAAAAAAAAAA, \n                          -0xAAAAAAAAAAAA, 1000000000000000000, \n                          -1000000000000000000, long.MinValue, \n                          long.MaxValue };\n        \n        Console.WriteLine( &quot;{0,22}{1,10} {2,30}&quot;, &quot;Int64&quot;, &quot;Endian&quot;, &quot;Byte Array&quot;);\n        Console.WriteLine( &quot;{0,22}{1,10} {2,30}&quot;, &quot;----&quot;, &quot;------&quot;, &quot;----------&quot; );\n        \n        foreach (var value in values) {\n            // Convert each Int64 value to a byte array.\n            byte[] byteArray = BitConverter.GetBytes(value);\n            // Display the result.\n            Console.WriteLine(&quot;{0,22}{1,10}{2,30}&quot;, value, \n                              BitConverter.IsLittleEndian ? &quot;Little&quot; : &quot;Big&quot;, \n                              BitConverter.ToString(byteArray));\n        }  \n    }\n}\n// The example displays output like the following:\n//                    Int64    Endian                     Byte Array\n//                     ----    ------                     ----------\n//                        0    Little       00-00-00-00-00-00-00-00\n//                 16777215    Little       FF-FF-FF-00-00-00-00-00\n//                -16777215    Little       01-00-00-FF-FF-FF-FF-FF\n//               1000000000    Little       00-CA-9A-3B-00-00-00-00\n//              -1000000000    Little       00-36-65-C4-FF-FF-FF-FF\n//               4294967296    Little       00-00-00-00-01-00-00-00\n//              -4294967296    Little       00-00-00-00-FF-FF-FF-FF\n//          187649984473770    Little       AA-AA-AA-AA-AA-AA-00-00\n//         -187649984473770    Little       56-55-55-55-55-55-FF-FF\n//      1000000000000000000    Little       00-00-64-A7-B3-B6-E0-0D\n//     -1000000000000000000    Little       00-00-9C-58-4C-49-1F-F2\n//     -9223372036854775808    Little       00-00-00-00-00-00-00-80\n//      9223372036854775807    Little       FF-FF-FF-FF-FF-FF-FF-7F\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_BitConverter_GetBytes_System_Single_\">\r\n    \r\n            <a id=\"System_BitConverter_GetBytes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetBytes(Single)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the specified single-precision floating point value as an array of bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static byte[] GetBytes (float value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>An array of bytes with length 4.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The order of bytes in the array returned by the <a class=\"xref\" href=\"system.bitconverter#System_BitConverter_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method depends on whether the computer architecture is little-endian or big-endian.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example converts the bit patterns of <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values to <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> arrays with the <code>GetBytes</code> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.BitConverter.GetBytes.Others#3\">// Example of the BitConverter::GetBytes( float ) method.\nusing namespace System;\n\n// Convert a float argument to a byte array and display it.\nvoid GetBytesSingle( float argument )\n{\n   array&lt;Byte&gt;^byteArray = BitConverter::GetBytes( argument );\n   Console::WriteLine( &quot;{0,16:E7}{1,20}&quot;, argument, BitConverter::ToString( byteArray ) );\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of the BitConverter::GetBytes( float ) &quot;\n   &quot;<br>method generates the following output.<br>&quot; );\n   Console::WriteLine( &quot;{0,16:E7}{1,20}&quot;, &quot;float&quot;, &quot;byte array&quot; );\n   Console::WriteLine( &quot;{0,16:E7}{1,20}&quot;, &quot;-----&quot;, &quot;----------&quot; );\n   \n   // Convert float values and display the results.\n   GetBytesSingle( 0.0F );\n   GetBytesSingle( 1.0F );\n   GetBytesSingle( 15.0F );\n   GetBytesSingle( 65535.0F );\n   GetBytesSingle( 0.00390625F );\n   GetBytesSingle( 0.00000000023283064365386962890625F );\n   GetBytesSingle( 1.2345E-35F );\n   GetBytesSingle( 1.2345671F );\n   GetBytesSingle( 1.2345673F );\n   GetBytesSingle( 1.2345677F );\n   GetBytesSingle( 1.23456789E+35F );\n   GetBytesSingle( Single::MinValue );\n   GetBytesSingle( Single::MaxValue );\n   GetBytesSingle( Single::Epsilon );\n   GetBytesSingle( Single::NaN );\n   GetBytesSingle( Single::NegativeInfinity );\n   GetBytesSingle( Single::PositiveInfinity );\n}\n\n/*\nThis example of the BitConverter::GetBytes( float )\nmethod generates the following output.\n\n           float          byte array\n           -----          ----------\n  0.0000000E+000         00-00-00-00\n  1.0000000E+000         00-00-80-3F\n  1.5000000E+001         00-00-70-41\n  6.5535000E+004         00-FF-7F-47\n  3.9062500E-003         00-00-80-3B\n  2.3283064E-010         00-00-80-2F\n  1.2345000E-035         49-46-83-05\n  1.2345671E+000         4B-06-9E-3F\n  1.2345673E+000         4D-06-9E-3F\n  1.2345676E+000         50-06-9E-3F\n  1.2345679E+035         1E-37-BE-79\n -3.4028235E+038         FF-FF-7F-FF\n  3.4028235E+038         FF-FF-7F-7F\n  1.4012985E-045         01-00-00-00\n             NaN         00-00-C0-FF\n       -Infinity         00-00-80-FF\n        Infinity         00-00-80-7F\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.BitConverter.GetBytes.Others#3\">// Example of the BitConverter.GetBytes( float ) method.\nusing System;\n\nclass GetBytesSingleDemo\n{\n    const string formatter = &quot;{0,16:E7}{1,20}&quot;;\n \n    // Convert a float argument to a byte array and display it.\n    public static void GetBytesSingle( float argument )\n    {\n        byte[ ] byteArray = BitConverter.GetBytes( argument );\n        Console.WriteLine( formatter, argument, \n            BitConverter.ToString( byteArray ) );\n    }\n       \n    public static void Main( )\n    {\n        Console.WriteLine( \n            &quot;This example of the BitConverter.GetBytes( float ) &quot; +\n            &quot;<br>method generates the following output.<br>&quot; );\n        Console.WriteLine( formatter, &quot;float&quot;, &quot;byte array&quot; );\n        Console.WriteLine( formatter, &quot;-----&quot;, &quot;----------&quot; );\n          \n        // Convert float values and display the results.\n        GetBytesSingle( 0.0F );\n        GetBytesSingle( 1.0F );\n        GetBytesSingle( 15.0F );\n        GetBytesSingle( 65535.0F );\n        GetBytesSingle( 0.00390625F );\n        GetBytesSingle( 0.00000000023283064365386962890625F );\n        GetBytesSingle( 1.2345E-35F );\n        GetBytesSingle( 1.2345671F );\n        GetBytesSingle( 1.2345673F );\n        GetBytesSingle( 1.2345677F );\n        GetBytesSingle( 1.23456789E+35F );\n        GetBytesSingle( float.MinValue );\n        GetBytesSingle( float.MaxValue );\n        GetBytesSingle( float.Epsilon );\n        GetBytesSingle( float.NaN );\n        GetBytesSingle( float.NegativeInfinity );\n        GetBytesSingle( float.PositiveInfinity );\n    }\n}\n\n/*\nThis example of the BitConverter.GetBytes( float )\nmethod generates the following output.\n\n           float          byte array\n           -----          ----------\n  0.0000000E+000         00-00-00-00\n  1.0000000E+000         00-00-80-3F\n  1.5000000E+001         00-00-70-41\n  6.5535000E+004         00-FF-7F-47\n  3.9062500E-003         00-00-80-3B\n  2.3283064E-010         00-00-80-2F\n  1.2345000E-035         49-46-83-05\n  1.2345671E+000         4B-06-9E-3F\n  1.2345673E+000         4D-06-9E-3F\n  1.2345676E+000         50-06-9E-3F\n  1.2345679E+035         1E-37-BE-79\n -3.4028235E+038         FF-FF-7F-FF\n  3.4028235E+038         FF-FF-7F-7F\n  1.4012985E-045         01-00-00-00\n             NaN         00-00-C0-FF\n       -Infinity         00-00-80-FF\n        Infinity         00-00-80-7F\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.BitConverter.GetBytes.Others#3\">&#39; Example of the BitConverter.GetBytes( Single ) method.\nImports System\nImports Microsoft.VisualBasic\n\nModule GetBytesSingleDemo\n\n    Const formatter As String = &quot;{0,16:E7}{1,20}&quot;\n \n    &#39; Convert a Single argument to a Byte array and display it.\n    Sub GetBytesSingle( argument As Single )\n\n        Dim byteArray As Byte( ) = BitConverter.GetBytes( argument )\n        Console.WriteLine( formatter, argument, _\n            BitConverter.ToString( byteArray ) )\n    End Sub \n       \n    Sub Main( )\n\n        Console.WriteLine( _\n            &quot;This example of the BitConverter.GetBytes( Single ) &quot; &amp; _\n            vbCrLf &amp; &quot;method generates the following &quot; &amp; _\n            &quot;output.&quot; &amp; vbCrLf )\n        Console.WriteLine( formatter, &quot;Single&quot;, &quot;Byte array&quot; )\n        Console.WriteLine( formatter, &quot;------&quot;, &quot;----------&quot; )\n          \n        &#39; Convert Single values and display the results.\n        GetBytesSingle( 0.0F )\n        GetBytesSingle( 1.0F )\n        GetBytesSingle( 15.0F )\n        GetBytesSingle( 65535.0F )\n        GetBytesSingle( 0.00390625F )\n        GetBytesSingle( 0.00000000023283064365386962890625F )\n        GetBytesSingle( 1.2345E-35F )\n        GetBytesSingle( 1.2345671F )\n        GetBytesSingle( 1.2345673F )\n        GetBytesSingle( 1.2345677F )\n        GetBytesSingle( 1.23456789E+35F )\n        GetBytesSingle( Single.MinValue )\n        GetBytesSingle( Single.MaxValue )\n        GetBytesSingle( Single.Epsilon )\n        GetBytesSingle( Single.NaN )\n        GetBytesSingle( Single.NegativeInfinity )\n        GetBytesSingle( Single.PositiveInfinity )\n    End Sub \nEnd Module\n\n&#39; This example of the BitConverter.GetBytes( Single )\n&#39; method generates the following output.\n&#39; \n&#39;           Single          Byte array\n&#39;           ------          ----------\n&#39;   0.0000000E+000         00-00-00-00\n&#39;   1.0000000E+000         00-00-80-3F\n&#39;   1.5000000E+001         00-00-70-41\n&#39;   6.5535000E+004         00-FF-7F-47\n&#39;   3.9062500E-003         00-00-80-3B\n&#39;   2.3283064E-010         00-00-80-2F\n&#39;   1.2345000E-035         49-46-83-05\n&#39;   1.2345671E+000         4B-06-9E-3F\n&#39;   1.2345673E+000         4D-06-9E-3F\n&#39;   1.2345676E+000         50-06-9E-3F\n&#39;   1.2345679E+035         1E-37-BE-79\n&#39;  -3.4028235E+038         FF-FF-7F-FF\n&#39;   3.4028235E+038         FF-FF-7F-7F\n&#39;   1.4012985E-045         01-00-00-00\n&#39;              NaN         00-00-C0-FF\n&#39;        -Infinity         00-00-80-FF\n&#39;         Infinity         00-00-80-7F\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_BitConverter_GetBytes_System_UInt16_\">\r\n    \r\n            <a id=\"System_BitConverter_GetBytes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetBytes(UInt16)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the specified 16-bit unsigned integer value as an array of bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static byte[] GetBytes (ushort value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>An array of bytes with length 2.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The order of bytes in the array returned by the <a class=\"xref\" href=\"system.bitconverter#System_BitConverter_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method depends on whether the computer architecture is little-endian or big-endian.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example converts the bit patterns of <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a> values to <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> arrays with the <code>GetBytes</code> method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.BitConverter.GetBytes.UInts#3\">// Example of the BitConverter.GetBytes( ushort ) method.\nusing System;\n\nclass GetBytesUInt16Demo\n{\n    const string formatter = &quot;{0,10}{1,13}&quot;;\n \n    // Convert a ushort argument to a byte array and display it.\n    public static void GetBytesUInt16( ushort argument )\n    {\n        byte[ ] byteArray = BitConverter.GetBytes( argument );\n        Console.WriteLine( formatter, argument, \n            BitConverter.ToString( byteArray ) );\n    }\n       \n    public static void Main( )\n    {\n        Console.WriteLine( \n            &quot;This example of the BitConverter.GetBytes( ushort ) &quot; +\n            &quot;<br>method generates the following output.<br>&quot; );\n        Console.WriteLine( formatter, &quot;ushort&quot;, &quot;byte array&quot; );\n        Console.WriteLine( formatter, &quot;------&quot;, &quot;----------&quot; );\n          \n        // Convert ushort values and display the results.\n        GetBytesUInt16( 15 );\n        GetBytesUInt16( 1023 );\n        GetBytesUInt16( 10000 );\n        GetBytesUInt16( ushort.MinValue );\n        GetBytesUInt16( (ushort)short.MaxValue );\n        GetBytesUInt16( ushort.MaxValue );\n    }\n}\n\n/*\nThis example of the BitConverter.GetBytes( ushort )\nmethod generates the following output.\n\n    ushort   byte array\n    ------   ----------\n        15        0F-00\n      1023        FF-03\n     10000        10-27\n         0        00-00\n     32767        FF-7F\n     65535        FF-FF\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.BitConverter.GetBytes.UInts#3\">&#39; Example of the BitConverter.GetBytes( UInt16 ) method.\nImports System\nImports Microsoft.VisualBasic\n\nModule GetBytesUInt16Demo\n\n    Const formatter As String = &quot;{0,10}{1,13}&quot;\n \n    &#39; Convert a UInt16 argument to a Byte array and display it.\n    Sub GetBytesUInt16( argument As UInt16 )\n\n        Dim byteArray As Byte( ) = BitConverter.GetBytes( argument )\n        Console.WriteLine( formatter, argument, _\n            BitConverter.ToString( byteArray ) )\n    End Sub \n       \n    Sub Main( )\n\n        Console.WriteLine( _\n            &quot;This example of the BitConverter.GetBytes( UInt16 ) &quot; &amp; _\n            vbCrLf &amp; &quot;method generates the following &quot; &amp; _\n            &quot;output.&quot; &amp; vbCrLf )\n        Console.WriteLine( formatter, &quot;UInt16&quot;, &quot;Byte array&quot; )\n        Console.WriteLine( formatter, &quot;------&quot;, &quot;----------&quot; )\n          \n        &#39; Convert UInt16 values and display the results.\n        GetBytesUInt16( Convert.ToUInt16( 15 ) )\n        GetBytesUInt16( Convert.ToUInt16( 1023 ) )\n        GetBytesUInt16( Convert.ToUInt16( 10000 ) )\n        GetBytesUInt16( Convert.ToUInt16( 0 ) )\n        GetBytesUInt16( Convert.ToUInt16( Int16.MaxValue ) )\n        GetBytesUInt16( Convert.ToUInt16( 65535 ) )\n    End Sub \nEnd Module\n\n&#39; This example of the BitConverter.GetBytes( UInt16 )\n&#39; method generates the following output.\n&#39; \n&#39;     UInt16   Byte array\n&#39;     ------   ----------\n&#39;         15        0F-00\n&#39;       1023        FF-03\n&#39;      10000        10-27\n&#39;          0        00-00\n&#39;      32767        FF-7F\n&#39;      65535        FF-FF\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.BitConverter.GetBytes.UInts#3\">// Example of the BitConverter::GetBytes( unsigned short ) method.\nusing namespace System;\n\n// Convert an unsigned short argument to a byte array and display it.\nvoid GetBytesUInt16( unsigned short argument )\n{\n   array&lt;Byte&gt;^byteArray = BitConverter::GetBytes( argument );\n   Console::WriteLine( &quot;{0,14}{1,13}&quot;, argument, BitConverter::ToString( byteArray ) );\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of the BitConverter::GetBytes( unsigned &quot;\n   &quot;short ) <br>method generates the following output.<br>&quot; );\n   Console::WriteLine( &quot;{0,14}{1,13}&quot;, &quot;unsigned short&quot;, &quot;byte array&quot; );\n   Console::WriteLine( &quot;{0,14}{1,13}&quot;, &quot;--------------&quot;, &quot;----------&quot; );\n   \n   // Convert unsigned short values and display the results.\n   GetBytesUInt16( 15 );\n   GetBytesUInt16( 1023 );\n   GetBytesUInt16( 10000 );\n   GetBytesUInt16( UInt16::MinValue );\n   GetBytesUInt16( Int16::MaxValue );\n   GetBytesUInt16( UInt16::MaxValue );\n}\n\n/*\nThis example of the BitConverter::GetBytes( unsigned short )\nmethod generates the following output.\n\nunsigned short   byte array\n--------------   ----------\n            15        0F-00\n          1023        FF-03\n         10000        10-27\n             0        00-00\n         32767        FF-7F\n         65535        FF-FF\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_BitConverter_GetBytes_System_UInt32_\">\r\n    \r\n            <a id=\"System_BitConverter_GetBytes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetBytes(UInt32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the specified 32-bit unsigned integer value as an array of bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static byte[] GetBytes (uint value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>An array of bytes with length 4.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The order of bytes in the array returned by the <a class=\"xref\" href=\"system.bitconverter#System_BitConverter_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method depends on whether the computer architecture is little-endian or big-endian.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example converts the bit patterns of <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a> values to <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> arrays with the <code>GetBytes</code> method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.BitConverter.GetBytes.UInts#2\">// Example of the BitConverter.GetBytes( uint ) method.\nusing System;\n\nclass GetBytesUInt32Demo\n{\n    const string formatter = &quot;{0,16}{1,20}&quot;;\n \n    // Convert a uint argument to a byte array and display it.\n    public static void GetBytesUInt32( uint argument )\n    {\n        byte[ ] byteArray = BitConverter.GetBytes( argument );\n        Console.WriteLine( formatter, argument, \n            BitConverter.ToString( byteArray ) );\n    }\n       \n    public static void Main( )\n    {\n        Console.WriteLine( \n            &quot;This example of the BitConverter.GetBytes( uint ) &quot; +\n            &quot;<br>method generates the following output.<br>&quot; );\n        Console.WriteLine( formatter, &quot;uint&quot;, &quot;byte array&quot; );\n        Console.WriteLine( formatter, &quot;----&quot;, &quot;----------&quot; );\n          \n        // Convert uint values and display the results.\n        GetBytesUInt32( 15 );\n        GetBytesUInt32( 1023 );\n        GetBytesUInt32( 0x100000 );\n        GetBytesUInt32( 1000000000 );\n        GetBytesUInt32( uint.MinValue );\n        GetBytesUInt32( int.MaxValue );\n        GetBytesUInt32( uint.MaxValue );\n    }\n}\n\n/*\nThis example of the BitConverter.GetBytes( uint )\nmethod generates the following output.\n\n            uint          byte array\n            ----          ----------\n              15         0F-00-00-00\n            1023         FF-03-00-00\n         1048576         00-00-10-00\n      1000000000         00-CA-9A-3B\n               0         00-00-00-00\n      2147483647         FF-FF-FF-7F\n      4294967295         FF-FF-FF-FF\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.BitConverter.GetBytes.UInts#2\">// Example of the BitConverter::GetBytes( unsigned int ) method.\nusing namespace System;\n\n// Convert an unsigned int argument to a byte array and display it.\nvoid GetBytesUInt32( unsigned int argument )\n{\n   array&lt;Byte&gt;^byteArray = BitConverter::GetBytes( argument );\n   Console::WriteLine( &quot;{0,16}{1,20}&quot;, argument, BitConverter::ToString( byteArray ) );\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of the BitConverter::GetBytes( unsigned &quot;\n   &quot;int ) <br>method generates the following output.<br>&quot; );\n   Console::WriteLine( &quot;{0,16}{1,20}&quot;, &quot;unsigned int&quot;, &quot;byte array&quot; );\n   Console::WriteLine( &quot;{0,16}{1,20}&quot;, &quot;------------&quot;, &quot;----------&quot; );\n   \n   // Convert unsigned int values and display the results.\n   GetBytesUInt32( 15 );\n   GetBytesUInt32( 1023 );\n   GetBytesUInt32( 0x100000 );\n   GetBytesUInt32( 1000000000 );\n   GetBytesUInt32( UInt32::MinValue );\n   GetBytesUInt32( Int32::MaxValue );\n   GetBytesUInt32( UInt32::MaxValue );\n}\n\n/*\nThis example of the BitConverter::GetBytes( unsigned int )\nmethod generates the following output.\n\n    unsigned int          byte array\n    ------------          ----------\n              15         0F-00-00-00\n            1023         FF-03-00-00\n         1048576         00-00-10-00\n      1000000000         00-CA-9A-3B\n               0         00-00-00-00\n      2147483647         FF-FF-FF-7F\n      4294967295         FF-FF-FF-FF\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.BitConverter.GetBytes.UInts#2\">&#39; Example of the BitConverter.GetBytes( UInt32 ) method.\nImports System\nImports Microsoft.VisualBasic\n\nModule GetBytesUInt32Demo\n\n    Const formatter As String = &quot;{0,16}{1,20}&quot;\n \n    &#39; Convert a UInt32 argument to a Byte array and display it.\n    Sub GetBytesUInt32( argument As UInt32 )\n\n        Dim byteArray As Byte( ) = BitConverter.GetBytes( argument )\n        Console.WriteLine( formatter, argument, _\n            BitConverter.ToString( byteArray ) )\n    End Sub \n       \n    Sub Main( )\n\n        Console.WriteLine( _\n            &quot;This example of the BitConverter.GetBytes( UInt32 ) &quot; &amp; _\n            vbCrLf &amp; &quot;method generates the following &quot; &amp; _\n            &quot;output.&quot; &amp; vbCrLf )\n        Console.WriteLine( formatter, &quot;UInt32&quot;, &quot;Byte array&quot; )\n        Console.WriteLine( formatter, &quot;------&quot;, &quot;----------&quot; )\n          \n        &#39; Convert UInt32 values and display the results.\n        GetBytesUInt32( Convert.ToUInt32( 15 ) )\n        GetBytesUInt32( Convert.ToUInt32( 1023 ) )\n        GetBytesUInt32( Convert.ToUInt32( &amp;H100000 ) )\n        GetBytesUInt32( Convert.ToUInt32( 1000000000 ) )\n        GetBytesUInt32( Convert.ToUInt32( 0 ) )\n        GetBytesUInt32( Convert.ToUInt32( Int32.MaxValue ) )\n        GetBytesUInt32( Convert.ToUInt32( 4294967295 ) )\n    End Sub \nEnd Module\n\n&#39; This example of the BitConverter.GetBytes( UInt32 )\n&#39; method generates the following output.\n&#39; \n&#39;           UInt32          Byte array\n&#39;           ------          ----------\n&#39;               15         0F-00-00-00\n&#39;             1023         FF-03-00-00\n&#39;          1048576         00-00-10-00\n&#39;       1000000000         00-CA-9A-3B\n&#39;                0         00-00-00-00\n&#39;       2147483647         FF-FF-FF-7F\n&#39;       4294967295         FF-FF-FF-FF\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_BitConverter_GetBytes_System_UInt64_\">\r\n    \r\n            <a id=\"System_BitConverter_GetBytes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetBytes(UInt64)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the specified 64-bit unsigned integer value as an array of bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static byte[] GetBytes (ulong value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>An array of bytes with length 8.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The order of bytes in the array returned by the <a class=\"xref\" href=\"system.bitconverter#System_BitConverter_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method depends on whether the computer architecture is little-endian or big-endian.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example converts the bit patterns of <a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a> values to <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> arrays with the <code>GetBytes</code> method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.BitConverter.GetBytes.UInts#1\">// Example of the BitConverter.GetBytes( ulong ) method.\nusing System;\n\nclass GetBytesUInt64Demo\n{\n    const string formatter = &quot;{0,22}{1,30}&quot;;\n \n    // Convert a ulong argument to a byte array and display it.\n    public static void GetBytesUInt64( ulong argument )\n    {\n        byte[ ] byteArray = BitConverter.GetBytes( argument );\n        Console.WriteLine( formatter, argument, \n            BitConverter.ToString( byteArray ) );\n    }\n       \n    public static void Main( )\n    {\n        Console.WriteLine( \n            &quot;This example of the BitConverter.GetBytes( ulong ) &quot; +\n            &quot;<br>method generates the following output.<br>&quot; );\n        Console.WriteLine( formatter, &quot;ulong&quot;, &quot;byte array&quot; );\n        Console.WriteLine( formatter, &quot;-----&quot;, &quot;----------&quot; );\n          \n        // Convert ulong values and display the results.\n        GetBytesUInt64( 0xFFFFFF );\n        GetBytesUInt64( 1000000000 );\n        GetBytesUInt64( 0x100000000 );\n        GetBytesUInt64( 0xAAAAAAAAAAAA );\n        GetBytesUInt64( 1000000000000000000 );\n        GetBytesUInt64( 10000000000000000000 );\n        GetBytesUInt64( ulong.MinValue );\n        GetBytesUInt64( long.MaxValue );\n        GetBytesUInt64( ulong.MaxValue );\n    }\n}\n\n/*\nThis example of the BitConverter.GetBytes( ulong )\nmethod generates the following output.\n\n                 ulong                    byte array\n                 -----                    ----------\n              16777215       FF-FF-FF-00-00-00-00-00\n            1000000000       00-CA-9A-3B-00-00-00-00\n            4294967296       00-00-00-00-01-00-00-00\n       187649984473770       AA-AA-AA-AA-AA-AA-00-00\n   1000000000000000000       00-00-64-A7-B3-B6-E0-0D\n  10000000000000000000       00-00-E8-89-04-23-C7-8A\n                     0       00-00-00-00-00-00-00-00\n   9223372036854775807       FF-FF-FF-FF-FF-FF-FF-7F\n  18446744073709551615       FF-FF-FF-FF-FF-FF-FF-FF\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.BitConverter.GetBytes.UInts#1\">// Example of the BitConverter::GetBytes( unsigned __int64 ) method.\nusing namespace System;\n\n// Convert an unsigned __int64 argument to a byte array and display it.\nvoid GetBytesUInt64( unsigned __int64 argument )\n{\n   array&lt;Byte&gt;^byteArray = BitConverter::GetBytes( argument );\n   Console::WriteLine( &quot;{0,22}{1,30}&quot;, argument, BitConverter::ToString( byteArray ) );\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of the BitConverter::GetBytes( unsigned &quot;\n   &quot;__int64 ) <br>method generates the following output.<br>&quot; );\n   Console::WriteLine( &quot;{0,22}{1,30}&quot;, &quot;unsigned __int64&quot;, &quot;byte array&quot; );\n   Console::WriteLine( &quot;{0,22}{1,30}&quot;, &quot;----------------&quot;, &quot;----------&quot; );\n   \n   // Convert unsigned __int64 values and display the results.\n   GetBytesUInt64( 0xFFFFFF );\n   GetBytesUInt64( 1000000000 );\n   GetBytesUInt64( 0x100000000 );\n   GetBytesUInt64( 0xAAAAAAAAAAAA );\n   GetBytesUInt64( 1000000000000000000 );\n   GetBytesUInt64( 10000000000000000000 );\n   GetBytesUInt64( UInt64::MinValue );\n   GetBytesUInt64( Int64::MaxValue );\n   GetBytesUInt64( UInt64::MaxValue );\n}\n\n/*\nThis example of the BitConverter::GetBytes( unsigned __int64 )\nmethod generates the following output.\n\n      unsigned __int64                    byte array\n      ----------------                    ----------\n              16777215       FF-FF-FF-00-00-00-00-00\n            1000000000       00-CA-9A-3B-00-00-00-00\n            4294967296       00-00-00-00-01-00-00-00\n       187649984473770       AA-AA-AA-AA-AA-AA-00-00\n   1000000000000000000       00-00-64-A7-B3-B6-E0-0D\n  10000000000000000000       00-00-E8-89-04-23-C7-8A\n                     0       00-00-00-00-00-00-00-00\n   9223372036854775807       FF-FF-FF-FF-FF-FF-FF-7F\n  18446744073709551615       FF-FF-FF-FF-FF-FF-FF-FF\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.BitConverter.GetBytes.UInts#1\">&#39; Example of the BitConverter.GetBytes( UInt64 ) method.\nImports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\nModule GetBytesUInt64Demo\n\n    Const formatter As String = &quot;{0,22}{1,30}&quot;\n \n    &#39; Convert a UInt64 argument to a Byte array and display it.\n    Sub GetBytesUInt64( argument As UInt64 )\n\n        Dim byteArray As Byte( ) = BitConverter.GetBytes( argument )\n        Console.WriteLine( formatter, argument, _\n            BitConverter.ToString( byteArray ) )\n    End Sub \n       \n    Sub Main( )\n\n        Console.WriteLine( _\n            &quot;This example of the BitConverter.GetBytes( UInt64 ) &quot; &amp; _\n            vbCrLf &amp; &quot;method generates the following &quot; &amp; _\n            &quot;output.&quot; &amp; vbCrLf )\n        Console.WriteLine( formatter, &quot;UInt64&quot;, &quot;Byte array&quot; )\n        Console.WriteLine( formatter, &quot;------&quot;, &quot;----------&quot; )\n          \n        &#39; Convert UInt64 values and display the results.\n        GetBytesUInt64( Convert.ToUInt64( &amp;HFFFFFF ) )\n        GetBytesUInt64( Convert.ToUInt64( 1000000000 ) )\n        GetBytesUInt64( Convert.ToUInt64( &amp;H100000000 ) )\n        GetBytesUInt64( Convert.ToUInt64( &amp;HAAAAAAAAAAAA ) )\n        GetBytesUInt64( Convert.ToUInt64( 1000000000000000000 ) )\n        GetBytesUInt64( UInt64.Parse( &quot;10000000000000000000&quot; ) )\n        GetBytesUInt64( Convert.ToUInt64( 0 ) )\n        GetBytesUInt64( Convert.ToUInt64( Int64.MaxValue ) )\n        GetBytesUInt64( UInt64.Parse( &quot;18446744073709551615&quot; ) )\n    End Sub \nEnd Module\n\n&#39; This example of the BitConverter.GetBytes( UInt64 )\n&#39; method generates the following output.\n&#39; \n&#39;                 UInt64                    Byte array\n&#39;                 ------                    ----------\n&#39;               16777215       FF-FF-FF-00-00-00-00-00\n&#39;             1000000000       00-CA-9A-3B-00-00-00-00\n&#39;             4294967296       00-00-00-00-01-00-00-00\n&#39;        187649984473770       AA-AA-AA-AA-AA-AA-00-00\n&#39;    1000000000000000000       00-00-64-A7-B3-B6-E0-0D\n&#39;   10000000000000000000       00-00-E8-89-04-23-C7-8A\n&#39;                      0       00-00-00-00-00-00-00-00\n&#39;    9223372036854775807       FF-FF-FF-FF-FF-FF-FF-7F\n&#39;   18446744073709551615       FF-FF-FF-FF-FF-FF-FF-FF\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_BitConverter_Int64BitsToDouble_System_Int64_\">\r\n    \r\n            <a id=\"System_BitConverter_Int64BitsToDouble_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Int64BitsToDouble(Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified 64-bit signed integer to a double-precision floating point number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double Int64BitsToDouble (long value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>A double-precision floating point number whose value is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Typically, <code>value</code> is an integer that is returned by the <a class=\"xref\" href=\"system.bitconverter#System_BitConverter_DoubleToInt64Bits_\" data-linktype=\"relative-path\">DoubleToInt64Bits</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example converts the bit patterns of several <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values to <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values with the <code>Int64BitsToDouble</code> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.BitConverter.DoubleInt64#1\">// Example of the BitConverter::Int64BitsToDouble method.\nusing namespace System;\n\n// Reinterpret the __int64 argument as a double.\nvoid LongBitsToDouble( __int64 argument )\n{\n   double doubleValue;\n   doubleValue = BitConverter::Int64BitsToDouble( argument );\n   \n   // Display the argument in hexadecimal.\n   Console::WriteLine( &quot;{0,20}{1,27:E16}&quot;, String::Format( &quot;0x{0:X16}&quot;, argument ), doubleValue );\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of the BitConverter::Int64BitsToDouble( &quot;\n   &quot;__int64 ) <br>method generates the following output.<br>&quot; );\n   Console::WriteLine( &quot;{0,20}{1,27:E16}&quot;, &quot;__int64 argument&quot;, &quot;double value&quot; );\n   Console::WriteLine( &quot;{0,20}{1,27:E16}&quot;, &quot;----------------&quot;, &quot;------------&quot; );\n   \n   // Convert __int64 values and display the results.\n   LongBitsToDouble( 0 );\n   LongBitsToDouble( 0x3FF0000000000000 );\n   LongBitsToDouble( 0x402E000000000000 );\n   LongBitsToDouble( 0x406FE00000000000 );\n   LongBitsToDouble( 0x41EFFFFFFFE00000 );\n   LongBitsToDouble( 0x3F70000000000000 );\n   LongBitsToDouble( 0x3DF0000000000000 );\n   LongBitsToDouble( 0x0000000000000001 );\n   LongBitsToDouble( 0x000000000000FFFF );\n   LongBitsToDouble( 0x0000FFFFFFFFFFFF );\n   LongBitsToDouble( 0xFFFFFFFFFFFFFFFF );\n   LongBitsToDouble( 0xFFF0000000000000 );\n   LongBitsToDouble( 0x7FF0000000000000 );\n   LongBitsToDouble( 0xFFEFFFFFFFFFFFFF );\n   LongBitsToDouble( 0x7FEFFFFFFFFFFFFF );\n   LongBitsToDouble( Int64::MinValue );\n   LongBitsToDouble( Int64::MaxValue );\n}\n\n/*\nThis example of the BitConverter::Int64BitsToDouble( __int64 )\nmethod generates the following output.\n\n    __int64 argument               double value\n    ----------------               ------------\n  0x0000000000000000    0.0000000000000000E+000\n  0x3FF0000000000000    1.0000000000000000E+000\n  0x402E000000000000    1.5000000000000000E+001\n  0x406FE00000000000    2.5500000000000000E+002\n  0x41EFFFFFFFE00000    4.2949672950000000E+009\n  0x3F70000000000000    3.9062500000000000E-003\n  0x3DF0000000000000    2.3283064365386963E-010\n  0x0000000000000001    4.9406564584124654E-324\n  0x000000000000FFFF    3.2378592100206092E-319\n  0x0000FFFFFFFFFFFF    1.3906711615669959E-309\n  0xFFFFFFFFFFFFFFFF                        NaN\n  0xFFF0000000000000                  -Infinity\n  0x7FF0000000000000                   Infinity\n  0xFFEFFFFFFFFFFFFF   -1.7976931348623157E+308\n  0x7FEFFFFFFFFFFFFF    1.7976931348623157E+308\n  0x8000000000000000    0.0000000000000000E+000\n  0x7FFFFFFFFFFFFFFF                        NaN\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.BitConverter.DoubleInt64#1\">// Example of the BitConverter.Int64BitsToDouble method.\nusing System;\n\nclass Int64BitsToDoubleDemo\n{\n    const string formatter = &quot;{0,20}{1,27:E16}&quot;;\n \n    // Reinterpret the long argument as a double.\n    public static void LongBitsToDouble( long argument )\n    {\n        double doubleValue;\n        doubleValue = BitConverter.Int64BitsToDouble( argument );\n\n        // Display the argument in hexadecimal.\n        Console.WriteLine( formatter, \n            String.Format( &quot;0x{0:X16}&quot;, argument ), doubleValue );\n    }\n       \n    public static void Main( )\n    {\n        Console.WriteLine(\n            &quot;This example of the BitConverter.Int64BitsToDouble( &quot; +\n            &quot;long ) <br>method generates the following output.<br>&quot; );\n        Console.WriteLine( formatter, &quot;long argument&quot;, \n            &quot;double value&quot; );\n        Console.WriteLine( formatter, &quot;-------------&quot;, \n            &quot;------------&quot; );\n          \n        // Convert long values and display the results.\n        LongBitsToDouble( 0 );\n        LongBitsToDouble( 0x3FF0000000000000 );\n        LongBitsToDouble( 0x402E000000000000 );\n        LongBitsToDouble( 0x406FE00000000000 );\n        LongBitsToDouble( 0x41EFFFFFFFE00000 );\n        LongBitsToDouble( 0x3F70000000000000 );\n        LongBitsToDouble( 0x3DF0000000000000 );\n        LongBitsToDouble( 0x0000000000000001 );\n        LongBitsToDouble( 0x000000000000FFFF );\n        LongBitsToDouble( 0x0000FFFFFFFFFFFF );\n        LongBitsToDouble( unchecked( (long)0xFFFFFFFFFFFFFFFF ) );\n        LongBitsToDouble( unchecked( (long)0xFFF0000000000000 ) );\n        LongBitsToDouble( 0x7FF0000000000000 );\n        LongBitsToDouble( unchecked( (long)0xFFEFFFFFFFFFFFFF ) );\n        LongBitsToDouble( 0x7FEFFFFFFFFFFFFF );\n        LongBitsToDouble( long.MinValue );\n        LongBitsToDouble( long.MaxValue );\n    }\n}\n\n/*\nThis example of the BitConverter.Int64BitsToDouble( long )\nmethod generates the following output.\n\n       long argument               double value\n       -------------               ------------\n  0x0000000000000000    0.0000000000000000E+000\n  0x3FF0000000000000    1.0000000000000000E+000\n  0x402E000000000000    1.5000000000000000E+001\n  0x406FE00000000000    2.5500000000000000E+002\n  0x41EFFFFFFFE00000    4.2949672950000000E+009\n  0x3F70000000000000    3.9062500000000000E-003\n  0x3DF0000000000000    2.3283064365386963E-010\n  0x0000000000000001    4.9406564584124654E-324\n  0x000000000000FFFF    3.2378592100206092E-319\n  0x0000FFFFFFFFFFFF    1.3906711615669959E-309\n  0xFFFFFFFFFFFFFFFF                        NaN\n  0xFFF0000000000000                  -Infinity\n  0x7FF0000000000000                   Infinity\n  0xFFEFFFFFFFFFFFFF   -1.7976931348623157E+308\n  0x7FEFFFFFFFFFFFFF    1.7976931348623157E+308\n  0x8000000000000000    0.0000000000000000E+000\n  0x7FFFFFFFFFFFFFFF                        NaN\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.BitConverter.DoubleInt64#1\">&#39; Example of the BitConverter.Int64BitsToDouble method.\nImports System\nImports Microsoft.VisualBasic\n\nModule Int64BitsToDoubleDemo\n\n    Const formatter As String = &quot;{0,20}{1,27:E16}&quot;\n \n    &#39; Reinterpret the Long argument as a Double.\n    Sub LongBitsToDouble( argument As Long )\n\n        Dim doubleValue    As Double\n        doubleValue = BitConverter.Int64BitsToDouble( argument )\n\n        &#39; Display the argument in hexadecimal.\n        Console.WriteLine( formatter, _\n            String.Format( &quot;0x{0:X16}&quot;, argument ), doubleValue )\n    End Sub \n       \n    Sub Main( )\n\n        Console.WriteLine( _\n            &quot;This example of the BitConverter.Int64BitsToDouble( &quot; &amp; _\n            &quot;Long ) &quot; &amp; vbCrLf &amp; &quot;method generates the &quot; &amp; _\n            &quot;following output.&quot; &amp; vbCrLf )\n        Console.WriteLine( formatter, &quot;Long argument&quot;, _\n            &quot;Double value&quot; )\n        Console.WriteLine( formatter, &quot;-------------&quot;, _\n            &quot;------------&quot; )\n          \n        &#39; Convert Long values and display the results.\n        LongBitsToDouble( 0 )\n        LongBitsToDouble( &amp;H3FF0000000000000 )\n        LongBitsToDouble( &amp;H402E000000000000 )\n        LongBitsToDouble( &amp;H406FE00000000000 )\n        LongBitsToDouble( &amp;H41EFFFFFFFE00000 )\n        LongBitsToDouble( &amp;H3F70000000000000 )\n        LongBitsToDouble( &amp;H3DF0000000000000 )\n        LongBitsToDouble( &amp;H0000000000000001 )\n        LongBitsToDouble( &amp;H000000000000FFFF )\n        LongBitsToDouble( &amp;H0000FFFFFFFFFFFF )\n        LongBitsToDouble( &amp;HFFFFFFFFFFFFFFFF )\n        LongBitsToDouble( &amp;HFFF0000000000000 )\n        LongBitsToDouble( &amp;H7FF0000000000000 )\n        LongBitsToDouble( &amp;HFFEFFFFFFFFFFFFF )\n        LongBitsToDouble( &amp;H7FEFFFFFFFFFFFFF )\n        LongBitsToDouble( Long.MinValue )\n        LongBitsToDouble( Long.MaxValue )\n    End Sub \nEnd Module\n\n&#39; This example of the BitConverter.Int64BitsToDouble( Long )\n&#39; method generates the following output.\n&#39; \n&#39;        Long argument               Double value\n&#39;        -------------               ------------\n&#39;   0x0000000000000000    0.0000000000000000E+000\n&#39;   0x3FF0000000000000    1.0000000000000000E+000\n&#39;   0x402E000000000000    1.5000000000000000E+001\n&#39;   0x406FE00000000000    2.5500000000000000E+002\n&#39;   0x41EFFFFFFFE00000    4.2949672950000000E+009\n&#39;   0x3F70000000000000    3.9062500000000000E-003\n&#39;   0x3DF0000000000000    2.3283064365386963E-010\n&#39;   0x0000000000000001    4.9406564584124654E-324\n&#39;   0x000000000000FFFF    3.2378592100206092E-319\n&#39;   0x0000FFFFFFFFFFFF    1.3906711615669959E-309\n&#39;   0xFFFFFFFFFFFFFFFF                        NaN\n&#39;   0xFFF0000000000000                  -Infinity\n&#39;   0x7FF0000000000000                   Infinity\n&#39;   0xFFEFFFFFFFFFFFFF   -1.7976931348623157E+308\n&#39;   0x7FEFFFFFFFFFFFFF    1.7976931348623157E+308\n&#39;   0x8000000000000000    0.0000000000000000E+000\n&#39;   0x7FFFFFFFFFFFFFFF                        NaN\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_BitConverter_ToBoolean_System_Byte___System_Int32_\">\r\n    \r\n            <a id=\"System_BitConverter_ToBoolean_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToBoolean(Byte[],Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a Boolean value converted from the byte at a specified position in a byte array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool ToBoolean (byte[] value, int startIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A byte array.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the byte within <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the byte at <code>startIndex</code> in <code>value</code> is nonzero; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is less than zero or greater than the length of <code>value</code> minus 1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To convert a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value to its byte representation, call the ToBoolean method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example converts elements of <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> arrays to <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> values with the <code>ToBoolean</code> method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.BitConverter.ToXXX.Others#1\">using System;\n\nclass Example\n{\n    public static void Main( )\n    {\n        // Define an array of byte values. \n        byte[] bytes = { 0, 1, 2, 4, 8, 16, 32, 64, 128, 255 };\n\n        Console.WriteLine(&quot;{0,5}{1,16}{2,10}<br>&quot;, &quot;index&quot;, &quot;array element&quot;, &quot;bool&quot; );\n        // Convert each array element to a Boolean value.\n        for (int index = 0; index &lt; bytes.Length; index++)\n           Console.WriteLine(&quot;{0,5}{1,16:X2}{2,10}&quot;, index, bytes[index], \n                             BitConverter.ToBoolean(bytes, index));\n    }\n}\n// The example displays the following output:\n//     index   array element      bool\n//     \n//         0              00     False\n//         1              01      True\n//         2              02      True\n//         3              04      True\n//         4              08      True\n//         5              10      True\n//         6              20      True\n//         7              40      True\n//         8              80      True\n//         9              FF      True\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.BitConverter.ToXXX.Others#1\">// Example of the BitConverter::ToBoolean method.\nusing namespace System;\n\nint main()\n{\n        // Define an array of byte values. \n        array&lt;Byte&gt;^ bytes = { 0, 1, 2, 4, 8, 16, 32, 64, 128, 255 };\n\n        Console::WriteLine(&quot;{0,5}{1,16}{2,10}<br>&quot;, &quot;index&quot;, &quot;array element&quot;, &quot;bool&quot; );\n        // Convert each array element to a Boolean value.\n        for (int index = 0; index &lt; bytes-&gt;Length; index++)\n           Console::WriteLine(&quot;{0,5}{1,16:X2}{2,10}&quot;, index, bytes[index], \n                             BitConverter::ToBoolean(bytes, index));\n}\n// The example displays the following output:\n//     index   array element      bool\n//     \n//         0              00     False\n//         1              01      True\n//         2              02      True\n//         3              04      True\n//         4              08      True\n//         5              10      True\n//         6              20      True\n//         7              40      True\n//         8              80      True\n//         9              FF      True\n</code></pre><pre><code class=\"lang-vb\" name=\"System.BitConverter.ToXXX.Others#1\">Module Example\n    Public Sub Main()\n        &#39; Define an array of byte values. \n        Dim bytes() As Byte = { 0, 1, 2, 4, 8, 16, 32, 64, 128, 255 }\n\n        Console.WriteLine(&quot;{0,5}{1,16}{2,10}<br>&quot;, &quot;index&quot;, &quot;array element&quot;, &quot;bool&quot; )\n        &#39; Convert each array element to a Boolean value.\n        For index As Integer = 0 To bytes.Length - 1\n           Console.WriteLine(&quot;{0,5}{1,16:X2}{2,10}&quot;, index, bytes(index), \n                             BitConverter.ToBoolean(bytes, index))\n        Next                     \n    End Sub \nEnd Module\n&#39; The example displays the following output:\n&#39;     index   array element      bool\n&#39;     \n&#39;         0              00     False\n&#39;         1              01      True\n&#39;         2              02      True\n&#39;         3              04      True\n&#39;         4              08      True\n&#39;         5              10      True\n&#39;         6              20      True\n&#39;         7              40      True\n&#39;         8              80      True\n&#39;         9              FF      True\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_BitConverter_ToChar_System_Byte___System_Int32_\">\r\n    \r\n            <a id=\"System_BitConverter_ToChar_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToChar(Byte[],Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a Unicode character converted from two bytes at a specified position in a byte array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static char ToChar (byte[] value, int startIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting position within <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </div>\r\n                  <p>A character formed by two bytes beginning at <code>startIndex</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> equals the length of <code>value</code> minus 1.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is less than zero or greater than the length of <code>value</code> minus 1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ToChar method converts the bytes from index <code>startIndex</code> to <code>startIndex</code> + 1 to a <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> value. The order of bytes in the array must reflect the endianness of the computer system&#39;s architecture; for more information, see the Remarks section of the <a class=\"xref\" href=\"system.bitconverter\" data-linktype=\"relative-path\">BitConverter</a> class topic.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example converts elements of <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> arrays to <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> values (Unicode characters) with the <code>ToChar</code> method.  </p>\n<pre><code class=\"lang-vb\" name=\"System.BitConverter.ToXXX.Others#2\">&#39; Example of the BitConverter.ToChar method.\nImports System\nImports Microsoft.VisualBasic\n\nModule BytesToCharDemo\n\n    Const formatter As String = &quot;{0,5}{1,17}{2,8}&quot;\n \n    &#39; Convert two Byte array elements to a Char and display it.\n    Sub BAToChar( bytes( ) As Byte, index As Integer )\n\n        Dim value As Char = BitConverter.ToChar( bytes, index )\n\n        Console.WriteLine( formatter, index, _\n            BitConverter.ToString( bytes, index, 2 ), value )\n    End Sub \n       \n    Sub Main( )\n\n        Dim byteArray as Byte( ) = { _\n             32,   0,   0,  42,   0,  65,   0, 125,   0, 197, _\n              0, 168,   3,  41,   4, 172,  32 }\n\n        Console.WriteLine( _\n            &quot;This example of the BitConverter.ToChar( Byte( ), &quot; &amp; _\n            &quot;Integer ) &quot; &amp; vbCrLf &amp; &quot;method generates the &quot; &amp; _\n            &quot;following output. It converts elements &quot; &amp; vbCrLf &amp; _\n            &quot;of a Byte array to Char values.&quot; &amp; vbCrLf )\n        Console.WriteLine( &quot;initial Byte array&quot; )\n        Console.WriteLine( &quot;------------------&quot; )\n        Console.WriteLine( BitConverter.ToString( byteArray ) )\n        Console.WriteLine( )\n        Console.WriteLine( formatter, &quot;index&quot;, &quot;array elements&quot;, &quot;Char&quot; )\n        Console.WriteLine( formatter, &quot;-----&quot;, &quot;--------------&quot;, &quot;----&quot; )\n          \n        &#39; Convert Byte array elements to Char values.\n        BAToChar( byteArray, 0 )\n        BAToChar( byteArray, 1 )\n        BAToChar( byteArray, 3 )\n        BAToChar( byteArray, 5 )\n        BAToChar( byteArray, 7 )\n        BAToChar( byteArray, 9 )\n        BAToChar( byteArray, 11 )\n        BAToChar( byteArray, 13 )\n        BAToChar( byteArray, 15 )\n    End Sub \nEnd Module\n\n&#39; This example of the BitConverter.ToChar( Byte( ), Integer )\n&#39; method generates the following output. It converts elements \n&#39; of a Byte array to Char values.\n&#39; \n&#39; initial Byte array\n&#39; ------------------\n&#39; 20-00-00-2A-00-41-00-7D-00-C5-00-A8-03-29-04-AC-20\n&#39; \n&#39; index   array elements    Char\n&#39; -----   --------------    ----\n&#39;     0            20-00\n&#39;     1            00-00\n&#39;     3            2A-00       *\n&#39;     5            41-00       A\n&#39;     7            7D-00       }\n&#39;     9            C5-00       �\n&#39;    11            A8-03       ?\n&#39;    13            29-04       ?\n&#39;    15            AC-20       ?\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.BitConverter.ToXXX.Others#2\">// Example of the BitConverter::ToChar method.\nusing namespace System;\n\n// Convert two byte array elements to a __wchar_t and display it.\nvoid BAToChar( array&lt;unsigned char&gt;^bytes, int index )\n{\n   __wchar_t value = BitConverter::ToChar( bytes, index );\n   Console::WriteLine( &quot;{0,5}{1,17}{2,11}&quot;, index, BitConverter::ToString( bytes, index, 2 ), value );\n}\n\nint main()\n{\n   array&lt;unsigned char&gt;^byteArray = {32,0,0,42,0,65,0,125,0,197,0,168,3,41,4,172,32};\n   Console::WriteLine( &quot;This example of the BitConverter::ToChar( unsigned &quot;\n   &quot;char[ ], int ) <br>method generates the following output. It &quot;\n   &quot;converts elements of a <br>byte array to __wchar_t values.<br>&quot; );\n   Console::WriteLine( &quot;initial unsigned char array&quot; );\n   Console::WriteLine( &quot;---------------------------&quot; );\n   Console::WriteLine( BitConverter::ToString( byteArray ) );\n   Console::WriteLine();\n   Console::WriteLine( &quot;{0,5}{1,17}{2,11}&quot;, &quot;index&quot;, &quot;array elements&quot;, &quot;__wchar_t&quot; );\n   Console::WriteLine( &quot;{0,5}{1,17}{2,11}&quot;, &quot;-----&quot;, &quot;--------------&quot;, &quot;---------&quot; );\n   \n   // Convert byte array elements to __wchar_t values.\n   BAToChar( byteArray, 0 );\n   BAToChar( byteArray, 1 );\n   BAToChar( byteArray, 3 );\n   BAToChar( byteArray, 5 );\n   BAToChar( byteArray, 7 );\n   BAToChar( byteArray, 9 );\n   BAToChar( byteArray, 11 );\n   BAToChar( byteArray, 13 );\n   BAToChar( byteArray, 15 );\n}\n\n/*\nThis example of the BitConverter::ToChar( unsigned char[ ], int )\nmethod generates the following output. It converts elements of a\nbyte array to __wchar_t values.\n\ninitial unsigned char array\n---------------------------\n20-00-00-2A-00-41-00-7D-00-C5-00-A8-03-29-04-AC-20\n\nindex   array elements  __wchar_t\n-----   --------------  ---------\n    0            20-00\n    1            00-00\n    3            2A-00          *\n    5            41-00          A\n    7            7D-00          }\n    9            C5-00          �\n   11            A8-03          ?\n   13            29-04          ?\n   15            AC-20          ?\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.BitConverter.ToXXX.Others#2\">// Example of the BitConverter.ToChar method.\nusing System;\n\nclass BytesToCharDemo\n{\n    const string formatter = &quot;{0,5}{1,17}{2,8}&quot;;\n \n    // Convert two byte array elements to a char and display it.\n    public static void BAToChar( byte[] bytes, int index )\n    {\n        char value = BitConverter.ToChar( bytes, index );\n\n        Console.WriteLine( formatter, index, \n            BitConverter.ToString( bytes, index, 2 ), value );\n    }\n       \n    public static void Main( )\n    {\n        byte[] byteArray = {\n             32,   0,   0,  42,   0,  65,   0, 125,   0, \n            197,   0, 168,   3,  41,   4, 172,  32 };\n\n        Console.WriteLine( \n            &quot;This example of the BitConverter.ToChar( byte[ ], &quot; +\n            &quot;int ) <br>method generates the following output. It &quot; +\n            &quot;converts <br>elements of a byte array to char values.<br>&quot; );\n        Console.WriteLine( &quot;initial byte array&quot; );\n        Console.WriteLine( &quot;------------------&quot; );\n        Console.WriteLine( BitConverter.ToString( byteArray ) );\n        Console.WriteLine( );\n        Console.WriteLine( formatter, &quot;index&quot;, &quot;array elements&quot;, &quot;char&quot; );\n        Console.WriteLine( formatter, &quot;-----&quot;, &quot;--------------&quot;, &quot;----&quot; );\n          \n        // Convert byte array elements to char values.\n        BAToChar( byteArray, 0 );\n        BAToChar( byteArray, 1 );\n        BAToChar( byteArray, 3 );\n        BAToChar( byteArray, 5 );\n        BAToChar( byteArray, 7 );\n        BAToChar( byteArray, 9 );\n        BAToChar( byteArray, 11 );\n        BAToChar( byteArray, 13 );\n        BAToChar( byteArray, 15 );\n    }\n}\n\n/*\nThis example of the BitConverter.ToChar( byte[ ], int )\nmethod generates the following output. It converts\nelements of a byte array to char values.\n\ninitial byte array\n------------------\n20-00-00-2A-00-41-00-7D-00-C5-00-A8-03-29-04-AC-20\n\nindex   array elements    char\n-----   --------------    ----\n    0            20-00\n    1            00-00\n    3            2A-00       *\n    5            41-00       A\n    7            7D-00       }\n    9            C5-00       �\n   11            A8-03       ?\n   13            29-04       ?\n   15            AC-20       ?\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_BitConverter_ToDouble_System_Byte___System_Int32_\">\r\n    \r\n            <a id=\"System_BitConverter_ToDouble_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDouble(Byte[],Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a double-precision floating point number converted from eight bytes at a specified position in a byte array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double ToDouble (byte[] value, int startIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of bytes.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting position within <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>A double precision floating point number formed by eight bytes beginning at <code>startIndex</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is greater than or equal to the length of <code>value</code> minus 7, and is less than or equal to the length of <code>value</code> minus 1.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is less than zero or greater than the length of <code>value</code> minus 1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ToDouble method converts the bytes from index <code>startIndex</code> to <code>startIndex</code> + 7 to a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> value. The order of bytes in the array must reflect the endianness of the computer system&#39;s architecture; for more information, see the Remarks section of the <a class=\"xref\" href=\"system.bitconverter\" data-linktype=\"relative-path\">BitConverter</a> class topic.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example converts elements of <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> arrays to <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values with the <code>ToDouble</code> method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.BitConverter.ToXXX.Others#3\">// Example of the BitConverter.ToDouble method.\nusing System;\n\nclass BytesToDoubleDemo\n{\n    const string formatter = &quot;{0,5}{1,27}{2,27:E16}&quot;;\n \n    // Convert eight byte array elements to a double and display it.\n    public static void BAToDouble( byte[ ] bytes, int index )\n    {\n        double value = BitConverter.ToDouble( bytes, index );\n\n        Console.WriteLine( formatter, index, \n            BitConverter.ToString( bytes, index, 8 ), value );\n    }\n\n    // Display a byte array, using multiple lines if necessary.\n    public static void WriteMultiLineByteArray( byte[ ] bytes )\n    {\n        const int rowSize = 20;\n        int iter;\n\n        Console.WriteLine( &quot;initial byte array&quot; );\n        Console.WriteLine( &quot;------------------&quot; );\n\n        for( iter = 0; iter &lt; bytes.Length - rowSize; iter += rowSize )\n        {\n            Console.Write( \n                BitConverter.ToString( bytes, iter, rowSize ) );\n            Console.WriteLine( &quot;-&quot; );\n        }\n\n        Console.WriteLine( BitConverter.ToString( bytes, iter ) );\n        Console.WriteLine( );\n    }\n\n    public static void Main( )\n    {\n        byte[ ] byteArray = {\n              0,   0,   0,   0,   0,   0,   0,   0, 240,  63, \n              0,   0,   0,   0,   0, 224, 111,  64,   0,   0, \n            224, 255, 255, 255, 239,  65,   0,   0,   0,   0, \n              0,   0, 112,  63,   0,   0,   0,   0,   0,   0, \n            240,  61, 223, 136,  30,  28, 254, 116, 170,   1, \n            250,  89, 140,  66, 202, 192, 243,  63, 251,  89, \n            140,  66, 202, 192, 243,  63, 252,  89, 140,  66, \n            202, 192, 243,  63,  82, 211, 187, 188, 232, 126, \n             61, 126, 255, 255, 255, 255, 255, 255, 239, 255, \n            255, 255, 255, 255, 255, 239, 127,   1,   0,   0, \n              0,   0,   0,   0,   0, 248, 255,   0,   0,   0, \n              0,   0,   0, 240, 255,   0,   0,   0,   0,   0, \n              0, 240, 127 };\n\n        Console.WriteLine( \n            &quot;This example of the BitConverter.ToDouble( byte[ ], &quot; +\n            &quot;int ) <br>method generates the following output. It &quot; +\n            &quot;converts elements <br>of a byte array to double values.<br>&quot; );\n\n        WriteMultiLineByteArray( byteArray );\n\n        Console.WriteLine( formatter, &quot;index&quot;, &quot;array elements&quot;, \n            &quot;double&quot; );\n        Console.WriteLine( formatter, &quot;-----&quot;, &quot;--------------&quot;, \n            &quot;------&quot; );\n          \n        // Convert byte array elements to double values.\n        BAToDouble( byteArray, 0 );\n        BAToDouble( byteArray, 2 );\n        BAToDouble( byteArray, 10 );\n        BAToDouble( byteArray, 18 );\n        BAToDouble( byteArray, 26 );\n        BAToDouble( byteArray, 34 );\n        BAToDouble( byteArray, 42 );\n        BAToDouble( byteArray, 50 );\n        BAToDouble( byteArray, 58 );\n        BAToDouble( byteArray, 66 );\n        BAToDouble( byteArray, 74 );\n        BAToDouble( byteArray, 82 );\n        BAToDouble( byteArray, 89 );\n        BAToDouble( byteArray, 97 );\n        BAToDouble( byteArray, 99 );\n        BAToDouble( byteArray, 107 );\n        BAToDouble( byteArray, 115 );\n    }\n}\n\n/*\nThis example of the BitConverter.ToDouble( byte[ ], int )\nmethod generates the following output. It converts elements\nof a byte array to double values.\n\ninitial byte array\n------------------\n00-00-00-00-00-00-00-00-F0-3F-00-00-00-00-00-E0-6F-40-00-00-\nE0-FF-FF-FF-EF-41-00-00-00-00-00-00-70-3F-00-00-00-00-00-00-\nF0-3D-DF-88-1E-1C-FE-74-AA-01-FA-59-8C-42-CA-C0-F3-3F-FB-59-\n8C-42-CA-C0-F3-3F-FC-59-8C-42-CA-C0-F3-3F-52-D3-BB-BC-E8-7E-\n3D-7E-FF-FF-FF-FF-FF-FF-EF-FF-FF-FF-FF-FF-FF-EF-7F-01-00-00-\n00-00-00-00-00-F8-FF-00-00-00-00-00-00-F0-FF-00-00-00-00-00-\n00-F0-7F\n\nindex             array elements                     double\n-----             --------------                     ------\n    0    00-00-00-00-00-00-00-00    0.0000000000000000E+000\n    2    00-00-00-00-00-00-F0-3F    1.0000000000000000E+000\n   10    00-00-00-00-00-E0-6F-40    2.5500000000000000E+002\n   18    00-00-E0-FF-FF-FF-EF-41    4.2949672950000000E+009\n   26    00-00-00-00-00-00-70-3F    3.9062500000000000E-003\n   34    00-00-00-00-00-00-F0-3D    2.3283064365386963E-010\n   42    DF-88-1E-1C-FE-74-AA-01    1.2345678901234500E-300\n   50    FA-59-8C-42-CA-C0-F3-3F    1.2345678901234565E+000\n   58    FB-59-8C-42-CA-C0-F3-3F    1.2345678901234567E+000\n   66    FC-59-8C-42-CA-C0-F3-3F    1.2345678901234569E+000\n   74    52-D3-BB-BC-E8-7E-3D-7E    1.2345678901234569E+300\n   82    FF-FF-FF-FF-FF-FF-EF-FF   -1.7976931348623157E+308\n   89    FF-FF-FF-FF-FF-FF-EF-7F    1.7976931348623157E+308\n   97    01-00-00-00-00-00-00-00    4.9406564584124654E-324\n   99    00-00-00-00-00-00-F8-FF                        NaN\n  107    00-00-00-00-00-00-F0-FF                  -Infinity\n  115    00-00-00-00-00-00-F0-7F                   Infinity\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.BitConverter.ToXXX.Others#3\">// Example of the BitConverter::ToDouble method.\nusing namespace System;\n\n// Convert eight byte array elements to a double and display it.\nvoid BAToDouble( array&lt;unsigned char&gt;^bytes, int index )\n{\n   double value = BitConverter::ToDouble( bytes, index );\n   Console::WriteLine( &quot;{0,5}{1,27}{2,27:E16}&quot;, index, BitConverter::ToString( bytes, index, 8 ), value );\n}\n\n\n// Display a byte array, using multiple lines if necessary.\nvoid WriteMultiLineByteArray( array&lt;unsigned char&gt;^bytes )\n{\n   const int rowSize = 20;\n   int iter;\n   Console::WriteLine( &quot;initial unsigned char array&quot; );\n   Console::WriteLine( &quot;---------------------------&quot; );\n   for ( iter = 0; iter &lt; bytes-&gt;Length - rowSize; iter += rowSize )\n   {\n      Console::Write( BitConverter::ToString( bytes, iter, rowSize ) );\n      Console::WriteLine( &quot;-&quot; );\n\n   }\n   Console::WriteLine( BitConverter::ToString( bytes, iter ) );\n   Console::WriteLine();\n}\n\nint main()\n{\n   array&lt;unsigned char&gt;^byteArray = {0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,224,111,64,0,0,224,255,255,255,239,65,0,0,0,0,0,0,112,63,0,0,0,0,0,0,240,61,223,136,30,28,254,116,170,1,250,89,140,66,202,192,243,63,251,89,140,66,202,192,243,63,252,89,140,66,202,192,243,63,82,211,187,188,232,126,61,126,255,255,255,255,255,255,239,255,255,255,255,255,255,239,127,1,0,0,0,0,0,0,0,248,255,0,0,0,0,0,0,240,255,0,0,0,0,0,0,240,127};\n   Console::WriteLine( &quot;This example of the BitConverter::ToDouble( unsigned &quot;\n   &quot;char[ ], int ) <br>method generates the following output. It &quot;\n   &quot;converts elements of a <br>byte array to double values.<br>&quot; );\n   WriteMultiLineByteArray( byteArray );\n   Console::WriteLine( &quot;{0,5}{1,27}{2,27:E16}&quot;, &quot;index&quot;, &quot;array elements&quot;, &quot;double&quot; );\n   Console::WriteLine( &quot;{0,5}{1,27}{2,27:E16}&quot;, &quot;-----&quot;, &quot;--------------&quot;, &quot;------&quot; );\n   \n   // Convert byte array elements to double values.\n   BAToDouble( byteArray, 0 );\n   BAToDouble( byteArray, 2 );\n   BAToDouble( byteArray, 10 );\n   BAToDouble( byteArray, 18 );\n   BAToDouble( byteArray, 26 );\n   BAToDouble( byteArray, 34 );\n   BAToDouble( byteArray, 42 );\n   BAToDouble( byteArray, 50 );\n   BAToDouble( byteArray, 58 );\n   BAToDouble( byteArray, 66 );\n   BAToDouble( byteArray, 74 );\n   BAToDouble( byteArray, 82 );\n   BAToDouble( byteArray, 89 );\n   BAToDouble( byteArray, 97 );\n   BAToDouble( byteArray, 99 );\n   BAToDouble( byteArray, 107 );\n   BAToDouble( byteArray, 115 );\n}\n\n/*\nThis example of the BitConverter.ToDouble( byte( ), int )\nmethod generates the following output. It converts elements\nof a byte array to double values.\n\ninitial byte array\n------------------\n00-00-00-00-00-00-00-00-F0-3F-00-00-00-00-00-E0-6F-40-00-00-\nE0-FF-FF-FF-EF-41-00-00-00-00-00-00-70-3F-00-00-00-00-00-00-\nF0-3D-DF-88-1E-1C-FE-74-AA-01-FA-59-8C-42-CA-C0-F3-3F-FB-59-\n8C-42-CA-C0-F3-3F-FC-59-8C-42-CA-C0-F3-3F-52-D3-BB-BC-E8-7E-\n3D-7E-FF-FF-FF-FF-FF-FF-EF-FF-FF-FF-FF-FF-FF-EF-7F-01-00-00-\n00-00-00-00-00-F8-FF-00-00-00-00-00-00-F0-FF-00-00-00-00-00-\n00-F0-7F\n\nindex             array elements                     double\n-----             --------------                     ------\n    0    00-00-00-00-00-00-00-00    0.0000000000000000E+000\n    2    00-00-00-00-00-00-F0-3F    1.0000000000000000E+000\n   10    00-00-00-00-00-E0-6F-40    2.5500000000000000E+002\n   18    00-00-E0-FF-FF-FF-EF-41    4.2949672950000000E+009\n   26    00-00-00-00-00-00-70-3F    3.9062500000000000E-003\n   34    00-00-00-00-00-00-F0-3D    2.3283064365386963E-010\n   42    DF-88-1E-1C-FE-74-AA-01    1.2345678901234500E-300\n   50    FA-59-8C-42-CA-C0-F3-3F    1.2345678901234565E+000\n   58    FB-59-8C-42-CA-C0-F3-3F    1.2345678901234567E+000\n   66    FC-59-8C-42-CA-C0-F3-3F    1.2345678901234569E+000\n   74    52-D3-BB-BC-E8-7E-3D-7E    1.2345678901234569E+300\n   82    FF-FF-FF-FF-FF-FF-EF-FF   -1.7976931348623157E+308\n   89    FF-FF-FF-FF-FF-FF-EF-7F    1.7976931348623157E+308\n   97    01-00-00-00-00-00-00-00    4.9406564584124654E-324\n   99    00-00-00-00-00-00-F8-FF                        NaN\n  107    00-00-00-00-00-00-F0-FF                  -Infinity\n  115    00-00-00-00-00-00-F0-7F                   Infinity\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.BitConverter.ToXXX.Others#3\">&#39; Example of the BitConverter.ToDouble method.\nImports System\nImports Microsoft.VisualBasic\n\nModule BytesToDoubleDemo\n\n    Const formatter As String = &quot;{0,5}{1,27}{2,27:E16}&quot;\n \n    &#39; Convert eight Byte array elements to a Double and display it.\n    Sub BAToDouble( bytes( ) As Byte, index As Integer )\n\n        Dim value As Double = BitConverter.ToDouble( bytes, index )\n\n        Console.WriteLine( formatter, index, _\n            BitConverter.ToString( bytes, index, 8 ), value )\n    End Sub \n\n    &#39; Display a Byte array, using multiple lines if necessary.\n    Sub WriteMultiLineByteArray( bytes( ) As Byte )\n       \n        Const rowSize As Integer = 20 \n        Dim iter As Integer\n\n        Console.WriteLine( &quot;initial Byte array&quot; )\n        Console.WriteLine( &quot;------------------&quot; )\n\n        For iter = 0 To bytes.Length - rowSize - 1 Step rowSize\n            Console.Write( _\n                BitConverter.ToString( bytes, iter, rowSize ) )\n            Console.WriteLine( &quot;-&quot; )\n        Next iter\n\n        Console.WriteLine( BitConverter.ToString( bytes, iter ) )\n        Console.WriteLine( )\n    End Sub\n\n    Sub Main( )\n        Dim byteArray as Byte( ) = { _\n              0,   0,   0,   0,   0,   0,   0,   0, 240,  63, _\n              0,   0,   0,   0,   0, 224, 111,  64,   0,   0, _\n            224, 255, 255, 255, 239,  65,   0,   0,   0,   0, _\n              0,   0, 112,  63,   0,   0,   0,   0,   0,   0, _\n            240,  61, 223, 136,  30,  28, 254, 116, 170,   1, _\n            250,  89, 140,  66, 202, 192, 243,  63, 251,  89, _\n            140,  66, 202, 192, 243,  63, 252,  89, 140,  66, _\n            202, 192, 243,  63,  82, 211, 187, 188, 232, 126, _\n             61, 126, 255, 255, 255, 255, 255, 255, 239, 255, _\n            255, 255, 255, 255, 255, 239, 127,   1,   0,   0, _\n              0,   0,   0,   0,   0, 248, 255,   0,   0,   0, _\n              0,   0,   0, 240, 255,   0,   0,   0,   0,   0, _\n              0, 240, 127 }\n\n        Console.WriteLine( _\n            &quot;This example of the BitConverter.ToDouble( Byte( ), &quot; &amp; _\n            &quot;Integer ) &quot; &amp; vbCrLf &amp; &quot;method generates the &quot; &amp; _\n            &quot;following output. It converts elements &quot; &amp; vbCrLf &amp; _\n            &quot;of a Byte array to Double values.&quot; &amp; vbCrLf )\n\n        WriteMultiLineByteArray( byteArray )\n\n        Console.WriteLine( formatter, &quot;index&quot;, &quot;array elements&quot;, _\n            &quot;Double&quot; )\n        Console.WriteLine( formatter, &quot;-----&quot;, &quot;--------------&quot;, _\n            &quot;------&quot; )\n          \n        &#39; Convert Byte array elements to Double values.\n        BAToDouble( byteArray, 0 )\n        BAToDouble( byteArray, 2 )\n        BAToDouble( byteArray, 10 )\n        BAToDouble( byteArray, 18 )\n        BAToDouble( byteArray, 26 )\n        BAToDouble( byteArray, 34 )\n        BAToDouble( byteArray, 42 )\n        BAToDouble( byteArray, 50 )\n        BAToDouble( byteArray, 58 )\n        BAToDouble( byteArray, 66 )\n        BAToDouble( byteArray, 74 )\n        BAToDouble( byteArray, 82 )\n        BAToDouble( byteArray, 89 )\n        BAToDouble( byteArray, 97 )\n        BAToDouble( byteArray, 99 )\n        BAToDouble( byteArray, 107 )\n        BAToDouble( byteArray, 115 )\n    End Sub \nEnd Module\n\n&#39; This example of the BitConverter.ToDouble( Byte( ), Integer )\n&#39; method generates the following output. It converts elements\n&#39; of a Byte array to Double values.\n&#39; \n&#39; initial Byte array\n&#39; ------------------\n&#39; 00-00-00-00-00-00-00-00-F0-3F-00-00-00-00-00-E0-6F-40-00-00-\n&#39; E0-FF-FF-FF-EF-41-00-00-00-00-00-00-70-3F-00-00-00-00-00-00-\n&#39; F0-3D-DF-88-1E-1C-FE-74-AA-01-FA-59-8C-42-CA-C0-F3-3F-FB-59-\n&#39; 8C-42-CA-C0-F3-3F-FC-59-8C-42-CA-C0-F3-3F-52-D3-BB-BC-E8-7E-\n&#39; 3D-7E-FF-FF-FF-FF-FF-FF-EF-FF-FF-FF-FF-FF-FF-EF-7F-01-00-00-\n&#39; 00-00-00-00-00-F8-FF-00-00-00-00-00-00-F0-FF-00-00-00-00-00-\n&#39; 00-F0-7F\n&#39; \n&#39; index             array elements                     Double\n&#39; -----             --------------                     ------\n&#39;     0    00-00-00-00-00-00-00-00    0.0000000000000000E+000\n&#39;     2    00-00-00-00-00-00-F0-3F    1.0000000000000000E+000\n&#39;    10    00-00-00-00-00-E0-6F-40    2.5500000000000000E+002\n&#39;    18    00-00-E0-FF-FF-FF-EF-41    4.2949672950000000E+009\n&#39;    26    00-00-00-00-00-00-70-3F    3.9062500000000000E-003\n&#39;    34    00-00-00-00-00-00-F0-3D    2.3283064365386963E-010\n&#39;    42    DF-88-1E-1C-FE-74-AA-01    1.2345678901234500E-300\n&#39;    50    FA-59-8C-42-CA-C0-F3-3F    1.2345678901234565E+000\n&#39;    58    FB-59-8C-42-CA-C0-F3-3F    1.2345678901234567E+000\n&#39;    66    FC-59-8C-42-CA-C0-F3-3F    1.2345678901234569E+000\n&#39;    74    52-D3-BB-BC-E8-7E-3D-7E    1.2345678901234569E+300\n&#39;    82    FF-FF-FF-FF-FF-FF-EF-FF   -1.7976931348623157E+308\n&#39;    89    FF-FF-FF-FF-FF-FF-EF-7F    1.7976931348623157E+308\n&#39;    97    01-00-00-00-00-00-00-00    4.9406564584124654E-324\n&#39;    99    00-00-00-00-00-00-F8-FF                        NaN\n&#39;   107    00-00-00-00-00-00-F0-FF                  -Infinity\n&#39;   115    00-00-00-00-00-00-F0-7F                   Infinity\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_BitConverter_ToInt16_System_Byte___System_Int32_\">\r\n    \r\n            <a id=\"System_BitConverter_ToInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt16(Byte[],Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a 16-bit signed integer converted from two bytes at a specified position in a byte array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static short ToInt16 (byte[] value, int startIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of bytes.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting position within <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </div>\r\n                  <p>A 16-bit signed integer formed by two bytes beginning at <code>startIndex</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> equals the length of <code>value</code> minus 1.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is less than zero or greater than the length of <code>value</code> minus 1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ToInt16 method converts the bytes from index <code>startIndex</code> to <code>startIndex</code> + 1 to an <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a> value. The order of bytes in the array must reflect the endianness of the computer system&#39;s architecture; for more information, see the Remarks section of the <a class=\"xref\" href=\"system.bitconverter\" data-linktype=\"relative-path\">BitConverter</a> class topic.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example converts elements of <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> arrays to <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a> values with the <code>ToInt16</code> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.BitConverter.ToXXX.SInts#1\">// Example of the BitConverter::ToInt16 method.\nusing namespace System;\n\n// Convert two byte array elements to a short and display it.\nvoid BAToInt16( array&lt;unsigned char&gt;^bytes, int index )\n{\n   short value = BitConverter::ToInt16( bytes, index );\n   Console::WriteLine( &quot;{0,5}{1,17}{2,10}&quot;, index, BitConverter::ToString( bytes, index, 2 ), value );\n}\n\nint main()\n{\n   array&lt;unsigned char&gt;^byteArray = {15,0,0,128,16,39,240,216,241,255,127};\n   Console::WriteLine( &quot;This example of the BitConverter::ToInt16( unsigned &quot;\n   &quot;char[ ], int ) <br>method generates the following output. It &quot;\n   &quot;converts elements of a <br>byte array to short values.<br>&quot; );\n   Console::WriteLine( &quot;initial byte array&quot; );\n   Console::WriteLine( &quot;------------------&quot; );\n   Console::WriteLine( BitConverter::ToString( byteArray ) );\n   Console::WriteLine();\n   Console::WriteLine( &quot;{0,5}{1,17}{2,10}&quot;, &quot;index&quot;, &quot;array elements&quot;, &quot;short&quot; );\n   Console::WriteLine( &quot;{0,5}{1,17}{2,10}&quot;, &quot;-----&quot;, &quot;--------------&quot;, &quot;-----&quot; );\n   \n   // Convert byte array elements to short values.\n   BAToInt16( byteArray, 1 );\n   BAToInt16( byteArray, 0 );\n   BAToInt16( byteArray, 8 );\n   BAToInt16( byteArray, 4 );\n   BAToInt16( byteArray, 6 );\n   BAToInt16( byteArray, 9 );\n   BAToInt16( byteArray, 2 );\n}\n\n/*\nThis example of the BitConverter::ToInt16( unsigned char[ ], int )\nmethod generates the following output. It converts elements of a\nbyte array to short values.\n\ninitial byte array\n------------------\n0F-00-00-80-10-27-F0-D8-F1-FF-7F\n\nindex   array elements     short\n-----   --------------     -----\n    1            00-00         0\n    0            0F-00        15\n    8            F1-FF       -15\n    4            10-27     10000\n    6            F0-D8    -10000\n    9            FF-7F     32767\n    2            00-80    -32768\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.BitConverter.ToXXX.SInts#1\">// Example of the BitConverter.ToInt16 method.\nusing System;\n\nclass BytesToInt16Demo\n{\n    const string formatter = &quot;{0,5}{1,17}{2,10}&quot;;\n \n    // Convert two byte array elements to a short and display it.\n    public static void BAToInt16( byte[ ] bytes, int index )\n    {\n        short value = BitConverter.ToInt16( bytes, index );\n\n        Console.WriteLine( formatter, index, \n            BitConverter.ToString( bytes, index, 2 ), value );\n    }\n       \n    public static void Main( )\n    {\n        byte[ ] byteArray = \n            { 15, 0, 0, 128, 16, 39, 240, 216, 241, 255, 127 };\n\n        Console.WriteLine( \n            &quot;This example of the BitConverter.ToInt16( byte[ ], &quot; +\n            &quot;int ) <br>method generates the following output. It &quot; +\n            &quot;converts elements <br>of a byte array to short values.<br>&quot; );\n        Console.WriteLine( &quot;initial byte array&quot; );\n        Console.WriteLine( &quot;------------------&quot; );\n        Console.WriteLine( BitConverter.ToString( byteArray ) );\n        Console.WriteLine( );\n        Console.WriteLine( formatter, &quot;index&quot;, &quot;array elements&quot;, &quot;short&quot; );\n        Console.WriteLine( formatter, &quot;-----&quot;, &quot;--------------&quot;, &quot;-----&quot; );\n          \n        // Convert byte array elements to short values.\n        BAToInt16( byteArray, 1 );\n        BAToInt16( byteArray, 0 );\n        BAToInt16( byteArray, 8 );\n        BAToInt16( byteArray, 4 );\n        BAToInt16( byteArray, 6 );\n        BAToInt16( byteArray, 9 );\n        BAToInt16( byteArray, 2 );\n    }\n}\n\n/*\nThis example of the BitConverter.ToInt16( byte[ ], int )\nmethod generates the following output. It converts elements\nof a byte array to short values.\n\ninitial byte array\n------------------\n0F-00-00-80-10-27-F0-D8-F1-FF-7F\n\nindex   array elements     short\n-----   --------------     -----\n    1            00-00         0\n    0            0F-00        15\n    8            F1-FF       -15\n    4            10-27     10000\n    6            F0-D8    -10000\n    9            FF-7F     32767\n    2            00-80    -32768\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.BitConverter.ToXXX.SInts#1\">&#39; Example of the BitConverter.ToInt16 method.\nImports System\nImports Microsoft.VisualBasic\n\nModule BytesToInt16Demo\n\n    Const formatter As String = &quot;{0,5}{1,17}{2,10}&quot;\n \n    &#39; Convert two Byte array elements to a Short and display it.\n    Sub BAToInt16( bytes( ) As Byte, index As Integer )\n\n        Dim value As Short = BitConverter.ToInt16( bytes, index )\n\n        Console.WriteLine( formatter, index, _\n            BitConverter.ToString( bytes, index, 2 ), value )\n    End Sub \n       \n    Sub Main( )\n\n        Dim byteArray as Byte( ) = { _\n             15, 0, 0, 128, 16, 39, 240, 216, 241, 255, 127 }\n\n        Console.WriteLine( _\n            &quot;This example of the BitConverter.ToInt16( Byte( ), &quot; &amp; _\n            &quot;Integer ) &quot; &amp; vbCrLf &amp; &quot;method generates the &quot; &amp; _\n            &quot;following output. It converts elements &quot; &amp; vbCrLf &amp; _\n            &quot;of a Byte array to Short values.&quot; &amp; vbCrLf )\n        Console.WriteLine( &quot;initial Byte array&quot; )\n        Console.WriteLine( &quot;------------------&quot; )\n        Console.WriteLine( BitConverter.ToString( byteArray ) )\n        Console.WriteLine( )\n        Console.WriteLine( formatter, &quot;index&quot;, &quot;array elements&quot;, &quot;Short&quot; )\n        Console.WriteLine( formatter, &quot;-----&quot;, &quot;--------------&quot;, &quot;-----&quot; )\n          \n        &#39; Convert Byte array elements to Short values.\n        BAToInt16( byteArray, 1 )\n        BAToInt16( byteArray, 0 )\n        BAToInt16( byteArray, 8 )\n        BAToInt16( byteArray, 4 )\n        BAToInt16( byteArray, 6 )\n        BAToInt16( byteArray, 9 )\n        BAToInt16( byteArray, 2 )\n    End Sub \nEnd Module\n\n&#39; This example of the BitConverter.ToInt16( Byte( ), Integer )\n&#39; method generates the following output. It converts elements\n&#39; of a Byte array to Short values.\n&#39; \n&#39; initial Byte array\n&#39; ------------------\n&#39; 0F-00-00-80-10-27-F0-D8-F1-FF-7F\n&#39; \n&#39; index   array elements     Short\n&#39; -----   --------------     -----\n&#39;     1            00-00         0\n&#39;     0            0F-00        15\n&#39;     8            F1-FF       -15\n&#39;     4            10-27     10000\n&#39;     6            F0-D8    -10000\n&#39;     9            FF-7F     32767\n&#39;     2            00-80    -32768\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_BitConverter_ToInt32_System_Byte___System_Int32_\">\r\n    \r\n            <a id=\"System_BitConverter_ToInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt32(Byte[],Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a 32-bit signed integer converted from four bytes at a specified position in a byte array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int ToInt32 (byte[] value, int startIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of bytes.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting position within <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer formed by four bytes beginning at <code>startIndex</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is greater than or equal to the length of <code>value</code> minus 3, and is less than or equal to the length of <code>value</code> minus 1.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is less than zero or greater than the length of <code>value</code> minus 1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ToInt32 method converts the bytes from index <code>startIndex</code> to <code>startIndex</code> + 3 to an <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> value. The order of bytes in the array must reflect the endianness of the computer system&#39;s architecture; for more information, see the Remarks section of <a class=\"xref\" href=\"system.bitconverter\" data-linktype=\"relative-path\">BitConverter</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the ToInt32 method to create <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values from a four-byte array and from the upper four bytes of an eight-byte array. It also uses the <a class=\"xref\" href=\"system.bitconverter#System_BitConverter_GetBytes_System_Int32_\" data-linktype=\"relative-path\">GetBytes(Int32)</a> and ToInt32 methods to round-trip an <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> value.  </p>\n<pre><code class=\"lang-cs\" name=\"System.BitConverter.ToInt32#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Create an Integer from a 4-byte array.\n      Byte[] bytes1 = { 0xEC, 0x00, 0x00, 0x00 };\n      Console.WriteLine(&quot;{0}--&gt; 0x{1:X4} ({1:N0})&quot;, FormatBytes(bytes1),\n                                      BitConverter.ToInt32(bytes1, 0));\n      // Create an Integer from the upper four bytes of a byte array.\n      Byte[] bytes2 = BitConverter.GetBytes(Int64.MaxValue / 2);\n      Console.WriteLine(&quot;{0}--&gt; 0x{1:X4} ({1:N0})&quot;, FormatBytes(bytes2),\n                                      BitConverter.ToInt32(bytes2, 4));\n      \n      // Round-trip an integer value.\n      int original = (int) Math.Pow(16, 3);\n      Byte[] bytes3 = BitConverter.GetBytes(original);\n      int restored = BitConverter.ToInt32(bytes3, 0);\n      Console.WriteLine(&quot;0x{0:X4} ({0:N0}) --&gt; {1} --&gt; 0x{2:X4} ({2:N0})&quot;, original, \n                        FormatBytes(bytes3), restored);\n   }\n\n   private static string FormatBytes(Byte[] bytes)\n   {\n       string value = &quot;&quot;;\n       foreach (var byt in bytes)\n          value += String.Format(&quot;{0:X2} &quot;, byt);\n\n       return value;\n   }\n}\n// The example displays the following output:\n//       EC 00 00 00 --&gt; 0x00EC (236)\n//       FF FF FF FF FF FF FF 3F --&gt; 0x3FFFFFFF (1,073,741,823)\n//       0x1000 (4,096) --&gt; 00 10 00 00  --&gt; 0x1000 (4,096)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.BitConverter.ToInt32#1\">Module Example\n   Public Sub Main()\n      &#39; Create an Integer from a 4-byte array.\n      Dim bytes1() As Byte = { &amp;hEC, &amp;h00, &amp;h00, &amp;h00 }\n      Console.WriteLine(&quot;{0}--&gt; 0x{1:X4} ({1:N0})&quot;, FormatBytes(bytes1),\n                                      BitConverter.ToInt32(bytes1, 0))\n      &#39; Create an Integer from the upper four bytes of a byte array.\n      Dim bytes2() As Byte = BitConverter.GetBytes(Int64.MaxValue \\ 2)\n      Console.WriteLine(&quot;{0}--&gt; 0x{1:X4} ({1:N0})&quot;, FormatBytes(bytes2),\n                                      BitConverter.ToInt32(bytes2, 4))\n      \n      &#39; Round-trip an integer value.\n      Dim original As Integer = CInt(16^3)\n      Dim bytes3() As Byte = BitConverter.GetBytes(original)\n      Dim restored As Integer = BitConverter.ToInt32(bytes3, 0)\n      Console.WriteLine(&quot;0x{0:X4} ({0:N0}) --&gt; {1} --&gt; 0x{2:X4} ({2:N0})&quot;, original, \n                        FormatBytes(bytes3), restored)\n   End Sub\n   \n   Private Function FormatBytes(bytes() As Byte) As String\n       Dim value As String = &quot;&quot;\n       For Each byt In bytes\n          value += String.Format(&quot;{0:X2} &quot;, byt)\n       Next\n       Return value\n   End Function\nEnd Module\n&#39; The example displays the following output:\n&#39;       EC 00 00 00 --&gt; 0x00EC (236)\n&#39;       FF FF FF FF FF FF FF 3F --&gt; 0x3FFFFFFF (1,073,741,823)\n&#39;       0x1000 (4,096) --&gt; 00 10 00 00  --&gt; 0x1000 (4,096)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_BitConverter_ToInt64_System_Byte___System_Int32_\">\r\n    \r\n            <a id=\"System_BitConverter_ToInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt64(Byte[],Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a 64-bit signed integer converted from eight bytes at a specified position in a byte array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static long ToInt64 (byte[] value, int startIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of bytes.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting position within <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>A 64-bit signed integer formed by eight bytes beginning at <code>startIndex</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is greater than or equal to the length of <code>value</code> minus 7, and is less than or equal to the length of <code>value</code> minus 1.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is less than zero or greater than the length of <code>value</code> minus 1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ToInt64 method converts the bytes from index <code>startIndex</code> to <code>startIndex</code> + 7 to a <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> value. The order of bytes in the array must reflect the endianness of the computer system&#39;s architecture; for more information, see the Remarks section of the <a class=\"xref\" href=\"system.bitconverter\" data-linktype=\"relative-path\">BitConverter</a> class topic.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example converts elements of <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> arrays to <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values with the <code>ToInt64</code> method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.BitConverter.ToXXX.SInts#3\">// Example of the BitConverter.ToInt64 method.\nusing System;\n\nclass BytesToInt64Demo\n{\n    const string formatter = &quot;{0,5}{1,27}{2,24}&quot;;\n \n    // Convert eight byte array elements to a long and display it.\n    public static void BAToInt64( byte[ ] bytes, int index )\n    {\n        long value = BitConverter.ToInt64( bytes, index );\n\n        Console.WriteLine( formatter, index, \n            BitConverter.ToString( bytes, index, 8 ), value );\n    }\n\n    // Display a byte array, using multiple lines if necessary.\n    public static void WriteMultiLineByteArray( byte[ ] bytes )\n    {\n        const int rowSize = 20;\n        int iter;\n\n        Console.WriteLine( &quot;initial byte array&quot; );\n        Console.WriteLine( &quot;------------------&quot; );\n\n        for( iter = 0; iter &lt; bytes.Length - rowSize; iter += rowSize )\n        {\n            Console.Write( \n                BitConverter.ToString( bytes, iter, rowSize ) );\n            Console.WriteLine( &quot;-&quot; );\n        }\n\n        Console.WriteLine( BitConverter.ToString( bytes, iter ) );\n        Console.WriteLine( );\n    }\n\n    public static void Main( )\n    {\n        byte[ ] byteArray = {\n              0,  54, 101, 196, 255, 255, 255, 255,   0,   0,\n              0,   0,   0,   0,   0,   0, 128,   0, 202, 154, \n             59,   0,   0,   0,   0,   1,   0,   0,   0,   0, \n            255, 255, 255, 255,   1,   0,   0, 255, 255, 255, \n            255, 255, 255, 255, 127,  86,  85,  85,  85,  85, \n             85, 255, 255, 170, 170, 170, 170, 170, 170,   0, \n              0, 100, 167, 179, 182, 224,  13,   0,   0, 156, \n             88,  76,  73,  31, 242 };\n\n        Console.WriteLine( \n            &quot;This example of the BitConverter.ToInt64( byte[ ], &quot; +\n            &quot;int ) <br>method generates the following output. It &quot; +\n            &quot;converts elements <br>of a byte array to long values.\\r<br>&quot; );\n\n        WriteMultiLineByteArray( byteArray );\n\n        Console.WriteLine( formatter, &quot;index&quot;, &quot;array elements&quot;, &quot;long&quot; );\n        Console.WriteLine( formatter, &quot;-----&quot;, &quot;--------------&quot;, &quot;----&quot; );\n          \n        // Convert byte array elements to long values.\n        BAToInt64( byteArray, 8 );\n        BAToInt64( byteArray, 5 );\n        BAToInt64( byteArray, 34 );\n        BAToInt64( byteArray, 17 );\n        BAToInt64( byteArray, 0 );\n        BAToInt64( byteArray, 21 );\n        BAToInt64( byteArray, 26 );\n        BAToInt64( byteArray, 53 );\n        BAToInt64( byteArray, 45 );\n        BAToInt64( byteArray, 59 );\n        BAToInt64( byteArray, 67 );\n        BAToInt64( byteArray, 37 );\n        BAToInt64( byteArray, 9 );\n    }\n}\n\n/*\nThis example of the BitConverter.ToInt64( byte[ ], int )\nmethod generates the following output. It converts elements\nof a byte array to long values.\n\ninitial byte array\n------------------\n00-36-65-C4-FF-FF-FF-FF-00-00-00-00-00-00-00-00-80-00-CA-9A-\n3B-00-00-00-00-01-00-00-00-00-FF-FF-FF-FF-01-00-00-FF-FF-FF-\nFF-FF-FF-FF-7F-56-55-55-55-55-55-FF-FF-AA-AA-AA-AA-AA-AA-00-\n00-64-A7-B3-B6-E0-0D-00-00-9C-58-4C-49-1F-F2\n\nindex             array elements                    long\n-----             --------------                    ----\n    8    00-00-00-00-00-00-00-00                       0\n    5    FF-FF-FF-00-00-00-00-00                16777215\n   34    01-00-00-FF-FF-FF-FF-FF               -16777215\n   17    00-CA-9A-3B-00-00-00-00              1000000000\n    0    00-36-65-C4-FF-FF-FF-FF             -1000000000\n   21    00-00-00-00-01-00-00-00              4294967296\n   26    00-00-00-00-FF-FF-FF-FF             -4294967296\n   53    AA-AA-AA-AA-AA-AA-00-00         187649984473770\n   45    56-55-55-55-55-55-FF-FF        -187649984473770\n   59    00-00-64-A7-B3-B6-E0-0D     1000000000000000000\n   67    00-00-9C-58-4C-49-1F-F2    -1000000000000000000\n   37    FF-FF-FF-FF-FF-FF-FF-7F     9223372036854775807\n    9    00-00-00-00-00-00-00-80    -9223372036854775808\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.BitConverter.ToXXX.SInts#3\">// Example of the BitConverter::ToInt64 method.\nusing namespace System;\n\n// Convert eight byte array elements to an __int64 and display it.\nvoid BAToInt64( array&lt;unsigned char&gt;^bytes, int index )\n{\n   __int64 value = BitConverter::ToInt64( bytes, index );\n   Console::WriteLine( &quot;{0,5}{1,27}{2,24}&quot;, index, BitConverter::ToString( bytes, index, 8 ), value );\n}\n\n\n// Display a byte array, using multiple lines if necessary.\nvoid WriteMultiLineByteArray( array&lt;unsigned char&gt;^bytes )\n{\n   const int rowSize = 20;\n   int iter;\n   Console::WriteLine( &quot;initial unsigned char array&quot; );\n   Console::WriteLine( &quot;---------------------------&quot; );\n   for ( iter = 0; iter &lt; bytes-&gt;Length - rowSize; iter += rowSize )\n   {\n      Console::Write( BitConverter::ToString( bytes, iter, rowSize ) );\n      Console::WriteLine( &quot;-&quot; );\n\n   }\n   Console::WriteLine( BitConverter::ToString( bytes, iter ) );\n   Console::WriteLine();\n}\n\nint main()\n{\n   array&lt;unsigned char&gt;^byteArray = {0,54,101,196,255,255,255,255,0,0,0,0,0,0,0,0,128,0,202,154,59,0,0,0,0,1,0,0,0,0,255,255,255,255,1,0,0,255,255,255,255,255,255,255,127,86,85,85,85,85,85,255,255,170,170,170,170,170,170,0,0,100,167,179,182,224,13,0,0,156,88,76,73,31,242};\n   Console::WriteLine( &quot;This example of the BitConverter::ToInt64( unsigned &quot;\n   &quot;char[ ], int ) <br>method generates the following output. It &quot;\n   &quot;converts elements of a <br>byte array to __int64 values.<br>&quot; );\n   WriteMultiLineByteArray( byteArray );\n   Console::WriteLine( &quot;{0,5}{1,27}{2,24}&quot;, &quot;index&quot;, &quot;array elements&quot;, &quot;__int64&quot; );\n   Console::WriteLine( &quot;{0,5}{1,27}{2,24}&quot;, &quot;-----&quot;, &quot;--------------&quot;, &quot;-------&quot; );\n   \n   // Convert byte array elements to __int64 values.\n   BAToInt64( byteArray, 8 );\n   BAToInt64( byteArray, 5 );\n   BAToInt64( byteArray, 34 );\n   BAToInt64( byteArray, 17 );\n   BAToInt64( byteArray, 0 );\n   BAToInt64( byteArray, 21 );\n   BAToInt64( byteArray, 26 );\n   BAToInt64( byteArray, 53 );\n   BAToInt64( byteArray, 45 );\n   BAToInt64( byteArray, 59 );\n   BAToInt64( byteArray, 67 );\n   BAToInt64( byteArray, 37 );\n   BAToInt64( byteArray, 9 );\n}\n\n/*\nThis example of the BitConverter::ToInt64( unsigned char[ ], int )\nmethod generates the following output. It converts elements of a\nbyte array to __int64 values.\n\ninitial unsigned char array\n---------------------------\n00-36-65-C4-FF-FF-FF-FF-00-00-00-00-00-00-00-00-80-00-CA-9A-\n3B-00-00-00-00-01-00-00-00-00-FF-FF-FF-FF-01-00-00-FF-FF-FF-\nFF-FF-FF-FF-7F-56-55-55-55-55-55-FF-FF-AA-AA-AA-AA-AA-AA-00-\n00-64-A7-B3-B6-E0-0D-00-00-9C-58-4C-49-1F-F2\n\nindex             array elements                 __int64\n-----             --------------                 -------\n    8    00-00-00-00-00-00-00-00                       0\n    5    FF-FF-FF-00-00-00-00-00                16777215\n   34    01-00-00-FF-FF-FF-FF-FF               -16777215\n   17    00-CA-9A-3B-00-00-00-00              1000000000\n    0    00-36-65-C4-FF-FF-FF-FF             -1000000000\n   21    00-00-00-00-01-00-00-00              4294967296\n   26    00-00-00-00-FF-FF-FF-FF             -4294967296\n   53    AA-AA-AA-AA-AA-AA-00-00         187649984473770\n   45    56-55-55-55-55-55-FF-FF        -187649984473770\n   59    00-00-64-A7-B3-B6-E0-0D     1000000000000000000\n   67    00-00-9C-58-4C-49-1F-F2    -1000000000000000000\n   37    FF-FF-FF-FF-FF-FF-FF-7F     9223372036854775807\n    9    00-00-00-00-00-00-00-80    -9223372036854775808\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.BitConverter.ToXXX.SInts#3\">&#39; Example of the BitConverter.ToInt64 method.\nImports System\nImports Microsoft.VisualBasic\n\nModule BytesToInt64Demo\n\n    Const formatter As String = &quot;{0,5}{1,27}{2,24}&quot;\n \n    &#39; Convert eight Byte array elements to a Long and display it.\n    Sub BAToInt64( bytes( ) As Byte, index As Integer )\n\n        Dim value As Long = BitConverter.ToInt64( bytes, index )\n\n        Console.WriteLine( formatter, index, _\n            BitConverter.ToString( bytes, index, 8 ), value )\n    End Sub \n\n    &#39; Display a Byte array, using multiple lines if necessary.\n    Sub WriteMultiLineByteArray( bytes( ) As Byte )\n       \n        Const rowSize As Integer = 20 \n        Dim iter As Integer\n\n        Console.WriteLine( &quot;initial Byte array&quot; )\n        Console.WriteLine( &quot;------------------&quot; )\n\n        For iter = 0 To bytes.Length - rowSize - 1 Step rowSize\n            Console.Write( _\n                BitConverter.ToString( bytes, iter, rowSize ) )\n            Console.WriteLine( &quot;-&quot; )\n        Next iter\n\n        Console.WriteLine( BitConverter.ToString( bytes, iter ) )\n        Console.WriteLine( )\n    End Sub\n\n    Sub Main( )\n        Dim byteArray as Byte( ) = { _\n              0,  54, 101, 196, 255, 255, 255, 255,   0,   0, _\n              0,   0,   0,   0,   0,   0, 128,   0, 202, 154, _\n             59,   0,   0,   0,   0,   1,   0,   0,   0,   0, _\n            255, 255, 255, 255,   1,   0,   0, 255, 255, 255, _\n            255, 255, 255, 255, 127,  86,  85,  85,  85,  85, _\n             85, 255, 255, 170, 170, 170, 170, 170, 170,   0, _\n              0, 100, 167, 179, 182, 224,  13,   0,   0, 156, _\n             88,  76,  73,  31, 242 }\n\n        Console.WriteLine( _\n            &quot;This example of the BitConverter.ToInt64( Byte( ), &quot; &amp; _\n            &quot;Integer ) &quot; &amp; vbCrLf &amp; &quot;method generates the &quot; &amp; _\n            &quot;following output. It converts elements &quot; &amp; vbCrLf &amp; _\n            &quot;of a Byte array to Long values.&quot; &amp; vbCrLf )\n\n        WriteMultiLineByteArray( byteArray )\n\n        Console.WriteLine( formatter, &quot;index&quot;, &quot;array elements&quot;, _\n            &quot;Long&quot; )\n        Console.WriteLine( formatter, &quot;-----&quot;, &quot;--------------&quot;, _\n            &quot;----&quot; )\n          \n        &#39; Convert Byte array elements to Long values.\n        BAToInt64( byteArray, 8 )\n        BAToInt64( byteArray, 5 )\n        BAToInt64( byteArray, 34 )\n        BAToInt64( byteArray, 17 )\n        BAToInt64( byteArray, 0 )\n        BAToInt64( byteArray, 21 )\n        BAToInt64( byteArray, 26 )\n        BAToInt64( byteArray, 53 )\n        BAToInt64( byteArray, 45 )\n        BAToInt64( byteArray, 59 )\n        BAToInt64( byteArray, 67 )\n        BAToInt64( byteArray, 37 )\n        BAToInt64( byteArray, 9 )\n    End Sub \nEnd Module\n\n&#39; This example of the BitConverter.ToInt64( Byte( ), Integer )\n&#39; method generates the following output. It converts elements\n&#39; of a Byte array to Long values.\n&#39; \n&#39; initial Byte array\n&#39; ------------------\n&#39; 00-36-65-C4-FF-FF-FF-FF-00-00-00-00-00-00-00-00-80-00-CA-9A-\n&#39; 3B-00-00-00-00-01-00-00-00-00-FF-FF-FF-FF-01-00-00-FF-FF-FF-\n&#39; FF-FF-FF-FF-7F-56-55-55-55-55-55-FF-FF-AA-AA-AA-AA-AA-AA-00-\n&#39; 00-64-A7-B3-B6-E0-0D-00-00-9C-58-4C-49-1F-F2\n&#39; \n&#39; index             array elements                    Long\n&#39; -----             --------------                    ----\n&#39;     8    00-00-00-00-00-00-00-00                       0\n&#39;     5    FF-FF-FF-00-00-00-00-00                16777215\n&#39;    34    01-00-00-FF-FF-FF-FF-FF               -16777215\n&#39;    17    00-CA-9A-3B-00-00-00-00              1000000000\n&#39;     0    00-36-65-C4-FF-FF-FF-FF             -1000000000\n&#39;    21    00-00-00-00-01-00-00-00              4294967296\n&#39;    26    00-00-00-00-FF-FF-FF-FF             -4294967296\n&#39;    53    AA-AA-AA-AA-AA-AA-00-00         187649984473770\n&#39;    45    56-55-55-55-55-55-FF-FF        -187649984473770\n&#39;    59    00-00-64-A7-B3-B6-E0-0D     1000000000000000000\n&#39;    67    00-00-9C-58-4C-49-1F-F2    -1000000000000000000\n&#39;    37    FF-FF-FF-FF-FF-FF-FF-7F     9223372036854775807\n&#39;     9    00-00-00-00-00-00-00-80    -9223372036854775808\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_BitConverter_ToSingle_System_Byte___System_Int32_\">\r\n    \r\n            <a id=\"System_BitConverter_ToSingle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToSingle(Byte[],Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a single-precision floating point number converted from four bytes at a specified position in a byte array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static float ToSingle (byte[] value, int startIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of bytes.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting position within <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p>A single-precision floating point number formed by four bytes beginning at <code>startIndex</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is greater than or equal to the length of <code>value</code> minus 3, and is less than or equal to the length of <code>value</code> minus 1.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is less than zero or greater than the length of <code>value</code> minus 1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ToSingle method converts the bytes from index <code>startIndex</code> to <code>startIndex</code> + 3 to a <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value. The order of bytes in the array must reflect the endianness of the computer system&#39;s architecture; for more information, see the Remarks section of <a class=\"xref\" href=\"system.bitconverter\" data-linktype=\"relative-path\">BitConverter</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example converts elements of <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> arrays to <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values with the <code>ToSingle</code> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.BitConverter.ToXXX.Others#4\">// Example of the BitConverter::ToSingle method.\nusing namespace System;\n\n// Convert four byte array elements to a float and display it.\nvoid BAToSingle( array&lt;unsigned char&gt;^bytes, int index )\n{\n   float value = BitConverter::ToSingle( bytes, index );\n   Console::WriteLine( &quot;{0,5}{1,17}{2,18:E7}&quot;, index, BitConverter::ToString( bytes, index, 4 ), value );\n}\n\n\n// Display a byte array, using multiple lines if necessary.\nvoid WriteMultiLineByteArray( array&lt;unsigned char&gt;^bytes )\n{\n   const int rowSize = 20;\n   int iter;\n   Console::WriteLine( &quot;initial unsigned char array&quot; );\n   Console::WriteLine( &quot;---------------------------&quot; );\n   for ( iter = 0; iter &lt; bytes-&gt;Length - rowSize; iter += rowSize )\n   {\n      Console::Write( BitConverter::ToString( bytes, iter, rowSize ) );\n      Console::WriteLine( &quot;-&quot; );\n\n   }\n   Console::WriteLine( BitConverter::ToString( bytes, iter ) );\n   Console::WriteLine();\n}\n\nint main()\n{\n   array&lt;unsigned char&gt;^byteArray = {0,0,0,0,128,63,0,0,112,65,0,255,127,71,0,0,128,59,0,0,128,47,73,70,131,5,75,6,158,63,77,6,158,63,80,6,158,63,30,55,190,121,255,255,127,255,255,127,127,1,0,0,0,192,255,0,0,128,255,0,0,128,127};\n   Console::WriteLine( &quot;This example of the BitConverter::ToSingle( unsigned &quot;\n   &quot;char[ ], int ) <br>method generates the following output. It &quot;\n   &quot;converts elements of a <br>byte array to float values.<br>&quot; );\n   WriteMultiLineByteArray( byteArray );\n   Console::WriteLine( &quot;{0,5}{1,17}{2,18:E7}&quot;, &quot;index&quot;, &quot;array elements&quot;, &quot;float&quot; );\n   Console::WriteLine( &quot;{0,5}{1,17}{2,18:E7}&quot;, &quot;-----&quot;, &quot;--------------&quot;, &quot;-----&quot; );\n   \n   // Convert byte array elements to float values.\n   BAToSingle( byteArray, 0 );\n   BAToSingle( byteArray, 2 );\n   BAToSingle( byteArray, 6 );\n   BAToSingle( byteArray, 10 );\n   BAToSingle( byteArray, 14 );\n   BAToSingle( byteArray, 18 );\n   BAToSingle( byteArray, 22 );\n   BAToSingle( byteArray, 26 );\n   BAToSingle( byteArray, 30 );\n   BAToSingle( byteArray, 34 );\n   BAToSingle( byteArray, 38 );\n   BAToSingle( byteArray, 42 );\n   BAToSingle( byteArray, 45 );\n   BAToSingle( byteArray, 49 );\n   BAToSingle( byteArray, 51 );\n   BAToSingle( byteArray, 55 );\n   BAToSingle( byteArray, 59 );\n}\n\n/*\nThis example of the BitConverter::ToSingle( unsigned char[ ], int )\nmethod generates the following output. It converts elements of a\nbyte array to float values.\n\ninitial unsigned char array\n---------------------------\n00-00-00-00-80-3F-00-00-70-41-00-FF-7F-47-00-00-80-3B-00-00-\n80-2F-49-46-83-05-4B-06-9E-3F-4D-06-9E-3F-50-06-9E-3F-1E-37-\nBE-79-FF-FF-7F-FF-FF-7F-7F-01-00-00-00-C0-FF-00-00-80-FF-00-\n00-80-7F\n\nindex   array elements             float\n-----   --------------             -----\n    0      00-00-00-00    0.0000000E+000\n    2      00-00-80-3F    1.0000000E+000\n    6      00-00-70-41    1.5000000E+001\n   10      00-FF-7F-47    6.5535000E+004\n   14      00-00-80-3B    3.9062500E-003\n   18      00-00-80-2F    2.3283064E-010\n   22      49-46-83-05    1.2345000E-035\n   26      4B-06-9E-3F    1.2345671E+000\n   30      4D-06-9E-3F    1.2345673E+000\n   34      50-06-9E-3F    1.2345676E+000\n   38      1E-37-BE-79    1.2345679E+035\n   42      FF-FF-7F-FF   -3.4028235E+038\n   45      FF-FF-7F-7F    3.4028235E+038\n   49      01-00-00-00    1.4012985E-045\n   51      00-00-C0-FF               NaN\n   55      00-00-80-FF         -Infinity\n   59      00-00-80-7F          Infinity\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.BitConverter.ToXXX.Others#4\">// Example of the BitConverter.ToSingle method.\nusing System;\n\nclass BytesToSingleDemo\n{\n    const string formatter = &quot;{0,5}{1,17}{2,18:E7}&quot;;\n \n    // Convert four byte array elements to a float and display it.\n    public static void BAToSingle( byte[ ] bytes, int index )\n    {\n        float value = BitConverter.ToSingle( bytes, index );\n\n        Console.WriteLine( formatter, index, \n            BitConverter.ToString( bytes, index, 4 ), value );\n    }\n\n    // Display a byte array, using multiple lines if necessary.\n    public static void WriteMultiLineByteArray( byte[ ] bytes )\n    {\n        const int rowSize = 20;\n        int iter;\n\n        Console.WriteLine( &quot;initial byte array&quot; );\n        Console.WriteLine( &quot;------------------&quot; );\n\n        for( iter = 0; iter &lt; bytes.Length - rowSize; iter += rowSize )\n        {\n            Console.Write( \n                BitConverter.ToString( bytes, iter, rowSize ) );\n            Console.WriteLine( &quot;-&quot; );\n        }\n\n        Console.WriteLine( BitConverter.ToString( bytes, iter ) );\n        Console.WriteLine( );\n    }\n\n    public static void Main( )\n    {\n        byte[ ] byteArray = {\n              0,   0,   0,   0, 128,  63,   0,   0, 112,  65, \n              0, 255, 127,  71,   0,   0, 128,  59,   0,   0, \n            128,  47,  73,  70, 131,   5,  75,   6, 158,  63, \n             77,   6, 158,  63,  80,   6, 158,  63,  30,  55, \n            190, 121, 255, 255, 127, 255, 255, 127, 127,   1, \n              0,   0,   0, 192, 255,   0,   0, 128, 255,   0, \n              0, 128, 127 };\n\n        Console.WriteLine(\n            &quot;This example of the BitConverter.ToSingle( byte( ), &quot; +\n            &quot;int ) <br>method generates the following output. It &quot; +\n            &quot;converts elements <br>of a byte array to float values.<br>&quot; );\n\n        WriteMultiLineByteArray( byteArray );\n\n        Console.WriteLine( formatter, &quot;index&quot;, &quot;array elements&quot;, \n            &quot;float&quot; );\n        Console.WriteLine( formatter, &quot;-----&quot;, &quot;--------------&quot;, \n            &quot;-----&quot; );\n          \n        // Convert byte array elements to float values.\n        BAToSingle( byteArray, 0 );\n        BAToSingle( byteArray, 2 );\n        BAToSingle( byteArray, 6 );\n        BAToSingle( byteArray, 10 );\n        BAToSingle( byteArray, 14 );\n        BAToSingle( byteArray, 18 );\n        BAToSingle( byteArray, 22 );\n        BAToSingle( byteArray, 26 );\n        BAToSingle( byteArray, 30 );\n        BAToSingle( byteArray, 34 );\n        BAToSingle( byteArray, 38 );\n        BAToSingle( byteArray, 42 );\n        BAToSingle( byteArray, 45 );\n        BAToSingle( byteArray, 49 );\n        BAToSingle( byteArray, 51 );\n        BAToSingle( byteArray, 55 );\n        BAToSingle( byteArray, 59 );\n    }\n}\n\n/*\nThis example of the BitConverter.ToSingle( byte( ), int )\nmethod generates the following output. It converts elements\nof a byte array to float values.\n\ninitial byte array\n------------------\n00-00-00-00-80-3F-00-00-70-41-00-FF-7F-47-00-00-80-3B-00-00-\n80-2F-49-46-83-05-4B-06-9E-3F-4D-06-9E-3F-50-06-9E-3F-1E-37-\nBE-79-FF-FF-7F-FF-FF-7F-7F-01-00-00-00-C0-FF-00-00-80-FF-00-\n00-80-7F\n\nindex   array elements             float\n-----   --------------             -----\n    0      00-00-00-00    0.0000000E+000\n    2      00-00-80-3F    1.0000000E+000\n    6      00-00-70-41    1.5000000E+001\n   10      00-FF-7F-47    6.5535000E+004\n   14      00-00-80-3B    3.9062500E-003\n   18      00-00-80-2F    2.3283064E-010\n   22      49-46-83-05    1.2345000E-035\n   26      4B-06-9E-3F    1.2345671E+000\n   30      4D-06-9E-3F    1.2345673E+000\n   34      50-06-9E-3F    1.2345676E+000\n   38      1E-37-BE-79    1.2345679E+035\n   42      FF-FF-7F-FF   -3.4028235E+038\n   45      FF-FF-7F-7F    3.4028235E+038\n   49      01-00-00-00    1.4012985E-045\n   51      00-00-C0-FF               NaN\n   55      00-00-80-FF         -Infinity\n   59      00-00-80-7F          Infinity\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.BitConverter.ToXXX.Others#4\">&#39; Example of the BitConverter.ToSingle method.\nImports System\nImports Microsoft.VisualBasic\n\nModule BytesToSingleDemo\n\n    Const formatter As String = &quot;{0,5}{1,17}{2,18:E7}&quot;\n \n    &#39; Convert four Byte array elements to a Single and display it.\n    Sub BAToSingle( bytes( ) As Byte, index As Integer )\n\n        Dim value As Single = BitConverter.ToSingle( bytes, index )\n\n        Console.WriteLine( formatter, index, _\n            BitConverter.ToString( bytes, index, 4 ), value )\n    End Sub \n\n    &#39; Display a Byte array, using multiple lines if necessary.\n    Sub WriteMultiLineByteArray( bytes( ) As Byte )\n       \n        Const rowSize As Integer = 20 \n        Dim iter As Integer\n\n        Console.WriteLine( &quot;initial Byte array&quot; )\n        Console.WriteLine( &quot;------------------&quot; )\n\n        For iter = 0 To bytes.Length - rowSize - 1 Step rowSize\n            Console.Write( _\n                BitConverter.ToString( bytes, iter, rowSize ) )\n            Console.WriteLine( &quot;-&quot; )\n        Next iter\n\n        Console.WriteLine( BitConverter.ToString( bytes, iter ) )\n        Console.WriteLine( )\n    End Sub\n\n    Sub Main( )\n        Dim byteArray as Byte( ) = { _\n              0,   0,   0,   0, 128,  63,   0,   0, 112,  65, _\n              0, 255, 127,  71,   0,   0, 128,  59,   0,   0, _\n            128,  47,  73,  70, 131,   5,  75,   6, 158,  63, _\n             77,   6, 158,  63,  80,   6, 158,  63,  30,  55, _\n            190, 121, 255, 255, 127, 255, 255, 127, 127,   1, _\n              0,   0,   0, 192, 255,   0,   0, 128, 255,   0, _\n              0, 128, 127 }\n\n        Console.WriteLine( _\n            &quot;This example of the BitConverter.ToSingle( Byte( ), &quot; &amp; _\n            &quot;Integer ) &quot; &amp; vbCrLf &amp; &quot;method generates the &quot; &amp; _\n            &quot;following output. It converts elements &quot; &amp; vbCrLf &amp; _\n            &quot;of a Byte array to Single values.&quot; &amp; vbCrLf )\n\n        WriteMultiLineByteArray( byteArray )\n\n        Console.WriteLine( formatter, &quot;index&quot;, &quot;array elements&quot;, _\n            &quot;Single&quot; )\n        Console.WriteLine( formatter, &quot;-----&quot;, &quot;--------------&quot;, _\n            &quot;------&quot; )\n          \n        &#39; Convert Byte array elements to Single values.\n        BAToSingle( byteArray, 0 )\n        BAToSingle( byteArray, 2 )\n        BAToSingle( byteArray, 6 )\n        BAToSingle( byteArray, 10 )\n        BAToSingle( byteArray, 14 )\n        BAToSingle( byteArray, 18 )\n        BAToSingle( byteArray, 22 )\n        BAToSingle( byteArray, 26 )\n        BAToSingle( byteArray, 30 )\n        BAToSingle( byteArray, 34 )\n        BAToSingle( byteArray, 38 )\n        BAToSingle( byteArray, 42 )\n        BAToSingle( byteArray, 45 )\n        BAToSingle( byteArray, 49 )\n        BAToSingle( byteArray, 51 )\n        BAToSingle( byteArray, 55 )\n        BAToSingle( byteArray, 59 )\n    End Sub \nEnd Module\n\n&#39; This example of the BitConverter.ToSingle( Byte( ), Integer )\n&#39; method generates the following output. It converts elements\n&#39; of a Byte array to Single values.\n&#39; \n&#39; initial Byte array\n&#39; ------------------\n&#39; 00-00-00-00-80-3F-00-00-70-41-00-FF-7F-47-00-00-80-3B-00-00-\n&#39; 80-2F-49-46-83-05-4B-06-9E-3F-4D-06-9E-3F-50-06-9E-3F-1E-37-\n&#39; BE-79-FF-FF-7F-FF-FF-7F-7F-01-00-00-00-C0-FF-00-00-80-FF-00-\n&#39; 00-80-7F\n&#39; \n&#39; index   array elements            Single\n&#39; -----   --------------            ------\n&#39;     0      00-00-00-00    0.0000000E+000\n&#39;     2      00-00-80-3F    1.0000000E+000\n&#39;     6      00-00-70-41    1.5000000E+001\n&#39;    10      00-FF-7F-47    6.5535000E+004\n&#39;    14      00-00-80-3B    3.9062500E-003\n&#39;    18      00-00-80-2F    2.3283064E-010\n&#39;    22      49-46-83-05    1.2345000E-035\n&#39;    26      4B-06-9E-3F    1.2345671E+000\n&#39;    30      4D-06-9E-3F    1.2345673E+000\n&#39;    34      50-06-9E-3F    1.2345676E+000\n&#39;    38      1E-37-BE-79    1.2345679E+035\n&#39;    42      FF-FF-7F-FF   -3.4028235E+038\n&#39;    45      FF-FF-7F-7F    3.4028235E+038\n&#39;    49      01-00-00-00    1.4012985E-045\n&#39;    51      00-00-C0-FF               NaN\n&#39;    55      00-00-80-FF         -Infinity\n&#39;    59      00-00-80-7F          Infinity\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_BitConverter_ToString_System_Byte___\">\r\n    \r\n            <a id=\"System_BitConverter_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Converts the numeric value of each element of a specified array of bytes to its equivalent hexadecimal string representation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ToString (byte[] value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of bytes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in <code>value</code>; for example, &quot;7F-2C-4A-00&quot;.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>All the elements of <code>value</code> are converted. The order of hexadecimal strings returned by the ToString method depends on whether the computer architecture is little-endian or big-endian.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example converts <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> arrays to <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects with the <code>ToString</code> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.BitConverter.ToString#1\">// Example of the BitConverter::ToString( unsigned char[ ] ) method.\nusing namespace System;\n\n// Display a byte array with a name.\nvoid WriteByteArray( array&lt;unsigned char&gt;^bytes, String^ name )\n{\n   String^ underLine = &quot;--------------------------------&quot;;\n   Console::WriteLine( name );\n   Console::WriteLine( underLine-&gt;Substring( 0, Math::Min( name-&gt;Length, underLine-&gt;Length ) ) );\n   Console::WriteLine( BitConverter::ToString( bytes ) );\n   Console::WriteLine();\n}\n\nint main()\n{\n   array&lt;unsigned char&gt;^arrayOne = {0,1,2,4,8,16,32,64,128,255};\n   array&lt;unsigned char&gt;^arrayTwo = {32,0,0,42,0,65,0,125,0,197,0,168,3,41,4,172,32};\n   array&lt;unsigned char&gt;^arrayThree = {15,0,0,128,16,39,240,216,241,255,127};\n   array&lt;unsigned char&gt;^arrayFour = {15,0,0,0,0,16,0,255,3,0,0,202,154,59,255,255,255,255,127};\n   Console::WriteLine( &quot;This example of the &quot;\n   &quot;BitConverter::ToString( unsigned char[ ] ) <br>&quot;\n   &quot;method generates the following output.<br>&quot; );\n   WriteByteArray( arrayOne, &quot;arrayOne&quot; );\n   WriteByteArray( arrayTwo, &quot;arrayTwo&quot; );\n   WriteByteArray( arrayThree, &quot;arrayThree&quot; );\n   WriteByteArray( arrayFour, &quot;arrayFour&quot; );\n}\n\n/*\nThis example of the BitConverter::ToString( unsigned char[ ] )\nmethod generates the following output.\n\narrayOne\n--------\n00-01-02-04-08-10-20-40-80-FF\n\narrayTwo\n--------\n20-00-00-2A-00-41-00-7D-00-C5-00-A8-03-29-04-AC-20\n\narrayThree\n----------\n0F-00-00-80-10-27-F0-D8-F1-FF-7F\n\narrayFour\n---------\n0F-00-00-00-00-10-00-FF-03-00-00-CA-9A-3B-FF-FF-FF-FF-7F\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.BitConverter.ToString#1\">// Example of the BitConverter.ToString( byte[ ] ) method.\nusing System;\n\nclass BytesToStringDemo\n{\n    // Display a byte array with a name.\n    public static void WriteByteArray( byte[ ] bytes, string name )\n    {\n        const string underLine = &quot;--------------------------------&quot;;\n\n        Console.WriteLine( name );\n        Console.WriteLine( underLine.Substring( 0, \n            Math.Min( name.Length, underLine.Length ) ) );\n        Console.WriteLine( BitConverter.ToString( bytes ) );\n        Console.WriteLine( );\n    }\n\n    public static void Main( )\n    {\n        byte[ ] arrayOne = {\n             0,   1,   2,   4,   8,  16,  32,  64, 128, 255 };\n\n        byte[ ] arrayTwo = {\n            32,   0,   0,  42,   0,  65,   0, 125,   0, 197,\n             0, 168,   3,  41,   4, 172,  32 };\n\n        byte[ ] arrayThree = {\n            15,   0,   0, 128,  16,  39, 240, 216, 241, 255, \n           127 };\n\n        byte[ ] arrayFour = {\n            15,   0,   0,   0,   0,  16,   0, 255,   3,   0, \n             0, 202, 154,  59, 255, 255, 255, 255, 127 };\n\n        Console.WriteLine( &quot;This example of the &quot; +\n            &quot;BitConverter.ToString( byte[ ] ) <br>&quot; +\n            &quot;method generates the following output.<br>&quot; );\n\n        WriteByteArray( arrayOne, &quot;arrayOne&quot; );\n        WriteByteArray( arrayTwo, &quot;arrayTwo&quot; );\n        WriteByteArray( arrayThree, &quot;arrayThree&quot; );\n        WriteByteArray( arrayFour, &quot;arrayFour&quot; );\n    }\n}\n\n/*\nThis example of the BitConverter.ToString( byte[ ] )\nmethod generates the following output.\n\narrayOne\n--------\n00-01-02-04-08-10-20-40-80-FF\n\narrayTwo\n--------\n20-00-00-2A-00-41-00-7D-00-C5-00-A8-03-29-04-AC-20\n\narrayThree\n----------\n0F-00-00-80-10-27-F0-D8-F1-FF-7F\n\narrayFour\n---------\n0F-00-00-00-00-10-00-FF-03-00-00-CA-9A-3B-FF-FF-FF-FF-7F\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.BitConverter.ToString#1\">&#39; Example of the BitConverter.ToString( Byte( ) ) method.\nImports System\nImports Microsoft.VisualBasic\n\nModule BytesToStringDemo\n\n    &#39; Display a Byte array with a name.\n    Sub WriteByteArray( bytes( ) As Byte, name As String )\n       \n        Const underLine As String = &quot;--------------------------------&quot;\n\n        Console.WriteLine( name )\n        Console.WriteLine( underLine.Substring( 0, _\n            Math.Min( name.Length, underLine.Length ) ) )\n        Console.WriteLine( BitConverter.ToString( bytes ) )\n        Console.WriteLine( )\n    End Sub\n\n    Sub Main( )\n        Dim arrayOne as Byte( ) = { _\n              0,   1,   2,   4,   8,  16,  32,  64, 128, 255 }\n\n        Dim arrayTwo as Byte( ) = { _\n             32,   0,   0,  42,   0,  65,   0, 125,   0, 197, _\n              0, 168,   3,  41,   4, 172,  32 }\n\n        Dim arrayThree as Byte( ) = { _\n             15,   0,   0, 128,  16,  39, 240, 216, 241, 255, _\n            127 }\n\n        Dim arrayFour as Byte( ) = { _\n             15,   0,   0,   0,   0,  16,   0, 255,   3,   0, _\n              0, 202, 154,  59, 255, 255, 255, 255, 127 }\n\n        Console.WriteLine( &quot;This example of the &quot; &amp; _\n            &quot;BitConverter.ToString( Byte( ) ) &quot; &amp; vbCrLf &amp; _\n            &quot;method generates the following output.&quot; &amp; vbCrLf )\n\n        WriteByteArray( arrayOne, &quot;arrayOne&quot; )\n        WriteByteArray( arrayTwo, &quot;arrayTwo&quot; )\n        WriteByteArray( arrayThree, &quot;arrayThree&quot; )\n        WriteByteArray( arrayFour, &quot;arrayFour&quot; )\n    End Sub \nEnd Module\n\n&#39; This example of the BitConverter.ToString( Byte( ) )\n&#39; method generates the following output.\n&#39; \n&#39; arrayOne\n&#39; --------\n&#39; 00-01-02-04-08-10-20-40-80-FF\n&#39; \n&#39; arrayTwo\n&#39; --------\n&#39; 20-00-00-2A-00-41-00-7D-00-C5-00-A8-03-29-04-AC-20\n&#39; \n&#39; arrayThree\n&#39; ----------\n&#39; 0F-00-00-80-10-27-F0-D8-F1-FF-7F\n&#39; \n&#39; arrayFour\n&#39; ---------\n&#39; 0F-00-00-00-00-10-00-FF-03-00-00-CA-9A-3B-FF-FF-FF-FF-7F\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_BitConverter_ToString_System_Byte___System_Int32_\">\r\n    \r\n            <a id=\"System_BitConverter_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(Byte[],Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the numeric value of each element of a specified subarray of bytes to its equivalent hexadecimal string representation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ToString (byte[] value, int startIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of bytes.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting position within <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in a subarray of <code>value</code>; for example, &quot;7F-2C-4A-00&quot;.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is less than zero or greater than the length of <code>value</code> minus 1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The elements from array position <code>startIndex</code> to the end of the array are converted. The order of hexadecimal strings returned by the <a class=\"xref\" href=\"system.bitconverter#System_BitConverter_ToString_\" data-linktype=\"relative-path\">ToString</a> method depends on whether the computer architecture is little-endian or big-endian.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example converts the part of a <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> array starting at the specified <code>startIndex</code> to a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> with the <code>ToString</code> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.BitConverter.ToString#2\">// Example of some BitConverter::ToString( ) method overloads.\nusing namespace System;\n\n// Display a byte array, using multiple lines if necessary.\nvoid WriteMultiLineByteArray( array&lt;unsigned char&gt;^bytes, String^ name )\n{\n   const int rowSize = 20;\n   String^ underLine = &quot;--------------------------------&quot;;\n   int iter;\n   Console::WriteLine( name );\n   Console::WriteLine( underLine-&gt;Substring( 0, Math::Min( name-&gt;Length, underLine-&gt;Length ) ) );\n   for ( iter = 0; iter &lt; bytes-&gt;Length - rowSize; iter += rowSize )\n   {\n      Console::Write( BitConverter::ToString( bytes, iter, rowSize ) );\n      Console::WriteLine( &quot;-&quot; );\n\n   }\n   Console::WriteLine( BitConverter::ToString( bytes, iter ) );\n   Console::WriteLine();\n}\n\nint main()\n{\n   array&lt;unsigned char&gt;^arrayOne = {0,0,0,0,128,63,0,0,112,65,0,255,127,71,0,0,128,59,0,0,128,47,73,70,131,5,75,6,158,63,77,6,158,63,80,6,158,63,30,55,190,121,255,255,127,255,255,127,127,1,0,0,0,192,255,0,0,128,255,0,0,128,127};\n   array&lt;unsigned char&gt;^arrayTwo = {255,255,255,0,0,20,0,33,0,0,0,1,0,0,0,100,167,179,182,224,13,0,202,154,59,0,143,91,0,170,170,170,170,170,170,0,0,232,137,4,35,199,138,255,232,244,255,252,205,255,255,129};\n   array&lt;unsigned char&gt;^arrayThree = {0,222,0,0,0,224,111,64,0,0,224,255,255,255,239,65,0,0,131,0,0,0,112,63,0,143,0,100,0,0,240,61,223,136,30,28,254,116,170,1,250,89,140,66,202,192,243,63,251,89,140,66,202,192,243,63,252,89,140,66,202,192,243,63,82,211,187,188,232,126,255,255,255,244,255,239,127,1,0,0,0,10,17,0,0,248,255,0,88,0,91,0,0,240,255,0,0,240,157};\n   Console::WriteLine( &quot;This example of the<br>&quot;\n   &quot;  BitConverter::ToString( unsigned char[ ], int ) and <br>&quot;\n   &quot;  BitConverter::ToString( unsigned char[ ], int, int ) <br>&quot;\n   &quot;methods generates the following output.<br>&quot; );\n   WriteMultiLineByteArray( arrayOne, &quot;arrayOne&quot; );\n   WriteMultiLineByteArray( arrayTwo, &quot;arrayTwo&quot; );\n   WriteMultiLineByteArray( arrayThree, &quot;arrayThree&quot; );\n}\n\n/*\nThis example of the\n  BitConverter::ToString( unsigned char[ ], int ) and\n  BitConverter::ToString( unsigned char[ ], int, int )\nmethods generates the following output.\n\narrayOne\n--------\n00-00-00-00-80-3F-00-00-70-41-00-FF-7F-47-00-00-80-3B-00-00-\n80-2F-49-46-83-05-4B-06-9E-3F-4D-06-9E-3F-50-06-9E-3F-1E-37-\nBE-79-FF-FF-7F-FF-FF-7F-7F-01-00-00-00-C0-FF-00-00-80-FF-00-\n00-80-7F\n\narrayTwo\n--------\nFF-FF-FF-00-00-14-00-21-00-00-00-01-00-00-00-64-A7-B3-B6-E0-\n0D-00-CA-9A-3B-00-8F-5B-00-AA-AA-AA-AA-AA-AA-00-00-E8-89-04-\n23-C7-8A-FF-E8-F4-FF-FC-CD-FF-FF-81\n\narrayThree\n----------\n00-DE-00-00-00-E0-6F-40-00-00-E0-FF-FF-FF-EF-41-00-00-83-00-\n00-00-70-3F-00-8F-00-64-00-00-F0-3D-DF-88-1E-1C-FE-74-AA-01-\nFA-59-8C-42-CA-C0-F3-3F-FB-59-8C-42-CA-C0-F3-3F-FC-59-8C-42-\nCA-C0-F3-3F-52-D3-BB-BC-E8-7E-FF-FF-FF-F4-FF-EF-7F-01-00-00-\n00-0A-11-00-00-F8-FF-00-58-00-5B-00-00-F0-FF-00-00-F0-9D\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.BitConverter.ToString#2\">// Example of some BitConverter.ToString( ) method overloads.\nusing System;\n\nclass BytesToStringDemo\n{\n    // Display a byte array, using multiple lines if necessary.\n    public static void WriteMultiLineByteArray( byte[ ] bytes, \n        string name )\n    {\n        const int rowSize = 20;\n        const string underLine = &quot;--------------------------------&quot;;\n        int iter;\n\n        Console.WriteLine( name );\n        Console.WriteLine( underLine.Substring( 0, \n            Math.Min( name.Length, underLine.Length ) ) );\n\n        for( iter = 0; iter &lt; bytes.Length - rowSize; iter += rowSize )\n        {\n            Console.Write( \n                BitConverter.ToString( bytes, iter, rowSize ) );\n            Console.WriteLine( &quot;-&quot; );\n        }\n\n        Console.WriteLine( BitConverter.ToString( bytes, iter ) );\n        Console.WriteLine( );\n    }\n\n    public static void Main( )\n    {\n        byte[ ] arrayOne = {\n              0,   0,   0,   0, 128,  63,   0,   0, 112,  65, \n              0, 255, 127,  71,   0,   0, 128,  59,   0,   0, \n            128,  47,  73,  70, 131,   5,  75,   6, 158,  63, \n             77,   6, 158,  63,  80,   6, 158,  63,  30,  55, \n            190, 121, 255, 255, 127, 255, 255, 127, 127,   1, \n              0,   0,   0, 192, 255,   0,   0, 128, 255,   0, \n              0, 128, 127 };\n\n        byte[ ] arrayTwo = {\n            255, 255, 255,   0,   0,  20,   0,  33,   0,   0, \n              0,   1,   0,   0,   0, 100, 167, 179, 182, 224, \n             13,   0, 202, 154,  59,   0, 143,  91,   0, 170, \n            170, 170, 170, 170, 170,   0,   0, 232, 137,   4, \n             35, 199, 138, 255, 232, 244, 255, 252, 205, 255, \n            255, 129 };\n\n        byte[ ] arrayThree = {\n              0, 222,   0,   0,   0, 224, 111,  64,   0,   0, \n            224, 255, 255, 255, 239,  65,   0,   0, 131,   0, \n              0,   0, 112,  63,   0, 143,   0, 100,   0,   0, \n            240,  61, 223, 136,  30,  28, 254, 116, 170,   1, \n            250,  89, 140,  66, 202, 192, 243,  63, 251,  89, \n            140,  66, 202, 192, 243,  63, 252,  89, 140,  66, \n            202, 192, 243,  63,  82, 211, 187, 188, 232, 126, \n            255, 255, 255, 244, 255, 239, 127,   1,   0,   0, \n              0,  10,  17,   0,   0, 248, 255,   0,  88,   0, \n             91,   0,   0, 240, 255,   0,   0, 240, 157 };\n\n        Console.WriteLine( &quot;This example of the<br>&quot; +\n            &quot;  BitConverter.ToString( byte[ ], int ) and <br>&quot; +\n            &quot;  BitConverter.ToString( byte[ ], int, int ) <br>&quot; +\n            &quot;methods generates the following output.<br>&quot; );\n\n        WriteMultiLineByteArray( arrayOne, &quot;arrayOne&quot; );\n        WriteMultiLineByteArray( arrayTwo, &quot;arrayTwo&quot; );\n        WriteMultiLineByteArray( arrayThree, &quot;arrayThree&quot; );\n    }\n}\n\n/*\nThis example of the\n  BitConverter.ToString( byte[ ], int ) and\n  BitConverter.ToString( byte[ ], int, int )\nmethods generates the following output.\n\narrayOne\n--------\n00-00-00-00-80-3F-00-00-70-41-00-FF-7F-47-00-00-80-3B-00-00-\n80-2F-49-46-83-05-4B-06-9E-3F-4D-06-9E-3F-50-06-9E-3F-1E-37-\nBE-79-FF-FF-7F-FF-FF-7F-7F-01-00-00-00-C0-FF-00-00-80-FF-00-\n00-80-7F\n\narrayTwo\n--------\nFF-FF-FF-00-00-14-00-21-00-00-00-01-00-00-00-64-A7-B3-B6-E0-\n0D-00-CA-9A-3B-00-8F-5B-00-AA-AA-AA-AA-AA-AA-00-00-E8-89-04-\n23-C7-8A-FF-E8-F4-FF-FC-CD-FF-FF-81\n\narrayThree\n----------\n00-DE-00-00-00-E0-6F-40-00-00-E0-FF-FF-FF-EF-41-00-00-83-00-\n00-00-70-3F-00-8F-00-64-00-00-F0-3D-DF-88-1E-1C-FE-74-AA-01-\nFA-59-8C-42-CA-C0-F3-3F-FB-59-8C-42-CA-C0-F3-3F-FC-59-8C-42-\nCA-C0-F3-3F-52-D3-BB-BC-E8-7E-FF-FF-FF-F4-FF-EF-7F-01-00-00-\n00-0A-11-00-00-F8-FF-00-58-00-5B-00-00-F0-FF-00-00-F0-9D\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.BitConverter.ToString#2\">&#39; Example of some BitConverter.ToString( ) method overloads.\nImports System\nImports Microsoft.VisualBasic\n\nModule BytesToStringDemo\n\n    &#39; Display a Byte array, using multiple lines if necessary.\n    Sub WriteMultiLineByteArray( bytes( ) As Byte, name As String )\n       \n        Const rowSize As Integer = 20 \n        Const underLine As String = &quot;--------------------------------&quot;\n        Dim iter As Integer\n\n        Console.WriteLine( name )\n        Console.WriteLine( underLine.Substring( 0, _\n            Math.Min( name.Length, underLine.Length ) ) )\n\n        For iter = 0 To bytes.Length - rowSize - 1 Step rowSize\n            Console.Write( _\n                BitConverter.ToString( bytes, iter, rowSize ) )\n            Console.WriteLine( &quot;-&quot; )\n        Next iter\n\n        Console.WriteLine( BitConverter.ToString( bytes, iter ) )\n        Console.WriteLine( )\n    End Sub\n\n    Sub Main( )\n        Dim arrayOne as Byte( ) = { _\n              0,   0,   0,   0, 128,  63,   0,   0, 112,  65, _\n              0, 255, 127,  71,   0,   0, 128,  59,   0,   0, _\n            128,  47,  73,  70, 131,   5,  75,   6, 158,  63, _\n             77,   6, 158,  63,  80,   6, 158,  63,  30,  55, _\n            190, 121, 255, 255, 127, 255, 255, 127, 127,   1, _\n              0,   0,   0, 192, 255,   0,   0, 128, 255,   0, _\n              0, 128, 127 }\n\n        Dim arrayTwo as Byte( ) = { _\n            255, 255, 255,   0,   0,  20,   0,  33,   0,   0, _\n              0,   1,   0,   0,   0, 100, 167, 179, 182, 224, _\n             13,   0, 202, 154,  59,   0, 143,  91,   0, 170, _\n            170, 170, 170, 170, 170,   0,   0, 232, 137,   4, _\n             35, 199, 138, 255, 232, 244, 255, 252, 205, 255, _\n            255, 129 }\n\n        Dim arrayThree as Byte( ) = { _\n              0, 222,   0,   0,   0, 224, 111,  64,   0,   0, _\n            224, 255, 255, 255, 239,  65,   0,   0, 131,   0, _\n              0,   0, 112,  63,   0, 143,   0, 100,   0,   0, _\n            240,  61, 223, 136,  30,  28, 254, 116, 170,   1, _\n            250,  89, 140,  66, 202, 192, 243,  63, 251,  89, _\n            140,  66, 202, 192, 243,  63, 252,  89, 140,  66, _\n            202, 192, 243,  63,  82, 211, 187, 188, 232, 126, _\n            255, 255, 255, 244, 255, 239, 127,   1,   0,   0, _\n              0,  10,  17,   0,   0, 248, 255,   0,  88,   0, _\n             91,   0,   0, 240, 255,   0,   0, 240, 157 }\n\n        Console.WriteLine( &quot;This example of the&quot; &amp; vbCrLf &amp; _\n            &quot;  BitConverter.ToString( Byte( ), Integer ) and &quot; &amp; _\n            vbCrLf &amp; &quot;  BitConverter.ToString( Byte( ), &quot; &amp; _\n            &quot;Integer, Integer ) &quot; &amp; vbCrLf &amp; &quot;methods generates &quot; &amp; _\n            &quot;the following output.&quot; &amp; vbCrLf )\n\n        WriteMultiLineByteArray( arrayOne, &quot;arrayOne&quot; )\n        WriteMultiLineByteArray( arrayTwo, &quot;arrayTwo&quot; )\n        WriteMultiLineByteArray( arrayThree, &quot;arrayThree&quot; )\n    End Sub \nEnd Module\n\n&#39; This example of the\n&#39;   BitConverter.ToString( Byte( ), Integer ) and\n&#39;   BitConverter.ToString( Byte( ), Integer, Integer )\n&#39; methods generates the following output.\n&#39; \n&#39; arrayOne\n&#39; --------\n&#39; 00-00-00-00-80-3F-00-00-70-41-00-FF-7F-47-00-00-80-3B-00-00-\n&#39; 80-2F-49-46-83-05-4B-06-9E-3F-4D-06-9E-3F-50-06-9E-3F-1E-37-\n&#39; BE-79-FF-FF-7F-FF-FF-7F-7F-01-00-00-00-C0-FF-00-00-80-FF-00-\n&#39; 00-80-7F\n&#39; \n&#39; arrayTwo\n&#39; --------\n&#39; FF-FF-FF-00-00-14-00-21-00-00-00-01-00-00-00-64-A7-B3-B6-E0-\n&#39; 0D-00-CA-9A-3B-00-8F-5B-00-AA-AA-AA-AA-AA-AA-00-00-E8-89-04-\n&#39; 23-C7-8A-FF-E8-F4-FF-FC-CD-FF-FF-81\n&#39; \n&#39; arrayThree\n&#39; ----------\n&#39; 00-DE-00-00-00-E0-6F-40-00-00-E0-FF-FF-FF-EF-41-00-00-83-00-\n&#39; 00-00-70-3F-00-8F-00-64-00-00-F0-3D-DF-88-1E-1C-FE-74-AA-01-\n&#39; FA-59-8C-42-CA-C0-F3-3F-FB-59-8C-42-CA-C0-F3-3F-FC-59-8C-42-\n&#39; CA-C0-F3-3F-52-D3-BB-BC-E8-7E-FF-FF-FF-F4-FF-EF-7F-01-00-00-\n&#39; 00-0A-11-00-00-F8-FF-00-58-00-5B-00-00-F0-FF-00-00-F0-9D\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_BitConverter_ToString_System_Byte___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_BitConverter_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(Byte[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the numeric value of each element of a specified subarray of bytes to its equivalent hexadecimal string representation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ToString (byte[] value, int startIndex, int length);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of bytes.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting position within <code>value</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of array elements in <code>value</code> to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in a subarray of <code>value</code>; for example, &quot;7F-2C-4A-00&quot;.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> or <code>length</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>startIndex</code> is greater than zero and is greater than or equal to the length of <code>value</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The combination of <code>startIndex</code> and <code>length</code> does not specify a position within <code>value</code>; that is, the <code>startIndex</code> parameter is greater than the length of <code>value</code> minus the <code>length</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>length</code> elements from array position <code>startIndex</code> are converted. If <code>length</code> equals zero, the method returns <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">System.String</a>.  </p>\n<p> The order of hexadecimal strings returned by the <a class=\"xref\" href=\"system.bitconverter#System_BitConverter_ToString_\" data-linktype=\"relative-path\">ToString</a> method depends on whether the computer architecture is little-endian or big-endian.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the ToString method to convert part of a byte array, starting at the specified <code>startIndex</code> and with the specified <code>length</code>, to a string.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.BitConverter.ToString#2\">// Example of some BitConverter::ToString( ) method overloads.\nusing namespace System;\n\n// Display a byte array, using multiple lines if necessary.\nvoid WriteMultiLineByteArray( array&lt;unsigned char&gt;^bytes, String^ name )\n{\n   const int rowSize = 20;\n   String^ underLine = &quot;--------------------------------&quot;;\n   int iter;\n   Console::WriteLine( name );\n   Console::WriteLine( underLine-&gt;Substring( 0, Math::Min( name-&gt;Length, underLine-&gt;Length ) ) );\n   for ( iter = 0; iter &lt; bytes-&gt;Length - rowSize; iter += rowSize )\n   {\n      Console::Write( BitConverter::ToString( bytes, iter, rowSize ) );\n      Console::WriteLine( &quot;-&quot; );\n\n   }\n   Console::WriteLine( BitConverter::ToString( bytes, iter ) );\n   Console::WriteLine();\n}\n\nint main()\n{\n   array&lt;unsigned char&gt;^arrayOne = {0,0,0,0,128,63,0,0,112,65,0,255,127,71,0,0,128,59,0,0,128,47,73,70,131,5,75,6,158,63,77,6,158,63,80,6,158,63,30,55,190,121,255,255,127,255,255,127,127,1,0,0,0,192,255,0,0,128,255,0,0,128,127};\n   array&lt;unsigned char&gt;^arrayTwo = {255,255,255,0,0,20,0,33,0,0,0,1,0,0,0,100,167,179,182,224,13,0,202,154,59,0,143,91,0,170,170,170,170,170,170,0,0,232,137,4,35,199,138,255,232,244,255,252,205,255,255,129};\n   array&lt;unsigned char&gt;^arrayThree = {0,222,0,0,0,224,111,64,0,0,224,255,255,255,239,65,0,0,131,0,0,0,112,63,0,143,0,100,0,0,240,61,223,136,30,28,254,116,170,1,250,89,140,66,202,192,243,63,251,89,140,66,202,192,243,63,252,89,140,66,202,192,243,63,82,211,187,188,232,126,255,255,255,244,255,239,127,1,0,0,0,10,17,0,0,248,255,0,88,0,91,0,0,240,255,0,0,240,157};\n   Console::WriteLine( &quot;This example of the<br>&quot;\n   &quot;  BitConverter::ToString( unsigned char[ ], int ) and <br>&quot;\n   &quot;  BitConverter::ToString( unsigned char[ ], int, int ) <br>&quot;\n   &quot;methods generates the following output.<br>&quot; );\n   WriteMultiLineByteArray( arrayOne, &quot;arrayOne&quot; );\n   WriteMultiLineByteArray( arrayTwo, &quot;arrayTwo&quot; );\n   WriteMultiLineByteArray( arrayThree, &quot;arrayThree&quot; );\n}\n\n/*\nThis example of the\n  BitConverter::ToString( unsigned char[ ], int ) and\n  BitConverter::ToString( unsigned char[ ], int, int )\nmethods generates the following output.\n\narrayOne\n--------\n00-00-00-00-80-3F-00-00-70-41-00-FF-7F-47-00-00-80-3B-00-00-\n80-2F-49-46-83-05-4B-06-9E-3F-4D-06-9E-3F-50-06-9E-3F-1E-37-\nBE-79-FF-FF-7F-FF-FF-7F-7F-01-00-00-00-C0-FF-00-00-80-FF-00-\n00-80-7F\n\narrayTwo\n--------\nFF-FF-FF-00-00-14-00-21-00-00-00-01-00-00-00-64-A7-B3-B6-E0-\n0D-00-CA-9A-3B-00-8F-5B-00-AA-AA-AA-AA-AA-AA-00-00-E8-89-04-\n23-C7-8A-FF-E8-F4-FF-FC-CD-FF-FF-81\n\narrayThree\n----------\n00-DE-00-00-00-E0-6F-40-00-00-E0-FF-FF-FF-EF-41-00-00-83-00-\n00-00-70-3F-00-8F-00-64-00-00-F0-3D-DF-88-1E-1C-FE-74-AA-01-\nFA-59-8C-42-CA-C0-F3-3F-FB-59-8C-42-CA-C0-F3-3F-FC-59-8C-42-\nCA-C0-F3-3F-52-D3-BB-BC-E8-7E-FF-FF-FF-F4-FF-EF-7F-01-00-00-\n00-0A-11-00-00-F8-FF-00-58-00-5B-00-00-F0-FF-00-00-F0-9D\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.BitConverter.ToString#2\">// Example of some BitConverter.ToString( ) method overloads.\nusing System;\n\nclass BytesToStringDemo\n{\n    // Display a byte array, using multiple lines if necessary.\n    public static void WriteMultiLineByteArray( byte[ ] bytes, \n        string name )\n    {\n        const int rowSize = 20;\n        const string underLine = &quot;--------------------------------&quot;;\n        int iter;\n\n        Console.WriteLine( name );\n        Console.WriteLine( underLine.Substring( 0, \n            Math.Min( name.Length, underLine.Length ) ) );\n\n        for( iter = 0; iter &lt; bytes.Length - rowSize; iter += rowSize )\n        {\n            Console.Write( \n                BitConverter.ToString( bytes, iter, rowSize ) );\n            Console.WriteLine( &quot;-&quot; );\n        }\n\n        Console.WriteLine( BitConverter.ToString( bytes, iter ) );\n        Console.WriteLine( );\n    }\n\n    public static void Main( )\n    {\n        byte[ ] arrayOne = {\n              0,   0,   0,   0, 128,  63,   0,   0, 112,  65, \n              0, 255, 127,  71,   0,   0, 128,  59,   0,   0, \n            128,  47,  73,  70, 131,   5,  75,   6, 158,  63, \n             77,   6, 158,  63,  80,   6, 158,  63,  30,  55, \n            190, 121, 255, 255, 127, 255, 255, 127, 127,   1, \n              0,   0,   0, 192, 255,   0,   0, 128, 255,   0, \n              0, 128, 127 };\n\n        byte[ ] arrayTwo = {\n            255, 255, 255,   0,   0,  20,   0,  33,   0,   0, \n              0,   1,   0,   0,   0, 100, 167, 179, 182, 224, \n             13,   0, 202, 154,  59,   0, 143,  91,   0, 170, \n            170, 170, 170, 170, 170,   0,   0, 232, 137,   4, \n             35, 199, 138, 255, 232, 244, 255, 252, 205, 255, \n            255, 129 };\n\n        byte[ ] arrayThree = {\n              0, 222,   0,   0,   0, 224, 111,  64,   0,   0, \n            224, 255, 255, 255, 239,  65,   0,   0, 131,   0, \n              0,   0, 112,  63,   0, 143,   0, 100,   0,   0, \n            240,  61, 223, 136,  30,  28, 254, 116, 170,   1, \n            250,  89, 140,  66, 202, 192, 243,  63, 251,  89, \n            140,  66, 202, 192, 243,  63, 252,  89, 140,  66, \n            202, 192, 243,  63,  82, 211, 187, 188, 232, 126, \n            255, 255, 255, 244, 255, 239, 127,   1,   0,   0, \n              0,  10,  17,   0,   0, 248, 255,   0,  88,   0, \n             91,   0,   0, 240, 255,   0,   0, 240, 157 };\n\n        Console.WriteLine( &quot;This example of the<br>&quot; +\n            &quot;  BitConverter.ToString( byte[ ], int ) and <br>&quot; +\n            &quot;  BitConverter.ToString( byte[ ], int, int ) <br>&quot; +\n            &quot;methods generates the following output.<br>&quot; );\n\n        WriteMultiLineByteArray( arrayOne, &quot;arrayOne&quot; );\n        WriteMultiLineByteArray( arrayTwo, &quot;arrayTwo&quot; );\n        WriteMultiLineByteArray( arrayThree, &quot;arrayThree&quot; );\n    }\n}\n\n/*\nThis example of the\n  BitConverter.ToString( byte[ ], int ) and\n  BitConverter.ToString( byte[ ], int, int )\nmethods generates the following output.\n\narrayOne\n--------\n00-00-00-00-80-3F-00-00-70-41-00-FF-7F-47-00-00-80-3B-00-00-\n80-2F-49-46-83-05-4B-06-9E-3F-4D-06-9E-3F-50-06-9E-3F-1E-37-\nBE-79-FF-FF-7F-FF-FF-7F-7F-01-00-00-00-C0-FF-00-00-80-FF-00-\n00-80-7F\n\narrayTwo\n--------\nFF-FF-FF-00-00-14-00-21-00-00-00-01-00-00-00-64-A7-B3-B6-E0-\n0D-00-CA-9A-3B-00-8F-5B-00-AA-AA-AA-AA-AA-AA-00-00-E8-89-04-\n23-C7-8A-FF-E8-F4-FF-FC-CD-FF-FF-81\n\narrayThree\n----------\n00-DE-00-00-00-E0-6F-40-00-00-E0-FF-FF-FF-EF-41-00-00-83-00-\n00-00-70-3F-00-8F-00-64-00-00-F0-3D-DF-88-1E-1C-FE-74-AA-01-\nFA-59-8C-42-CA-C0-F3-3F-FB-59-8C-42-CA-C0-F3-3F-FC-59-8C-42-\nCA-C0-F3-3F-52-D3-BB-BC-E8-7E-FF-FF-FF-F4-FF-EF-7F-01-00-00-\n00-0A-11-00-00-F8-FF-00-58-00-5B-00-00-F0-FF-00-00-F0-9D\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.BitConverter.ToString#2\">&#39; Example of some BitConverter.ToString( ) method overloads.\nImports System\nImports Microsoft.VisualBasic\n\nModule BytesToStringDemo\n\n    &#39; Display a Byte array, using multiple lines if necessary.\n    Sub WriteMultiLineByteArray( bytes( ) As Byte, name As String )\n       \n        Const rowSize As Integer = 20 \n        Const underLine As String = &quot;--------------------------------&quot;\n        Dim iter As Integer\n\n        Console.WriteLine( name )\n        Console.WriteLine( underLine.Substring( 0, _\n            Math.Min( name.Length, underLine.Length ) ) )\n\n        For iter = 0 To bytes.Length - rowSize - 1 Step rowSize\n            Console.Write( _\n                BitConverter.ToString( bytes, iter, rowSize ) )\n            Console.WriteLine( &quot;-&quot; )\n        Next iter\n\n        Console.WriteLine( BitConverter.ToString( bytes, iter ) )\n        Console.WriteLine( )\n    End Sub\n\n    Sub Main( )\n        Dim arrayOne as Byte( ) = { _\n              0,   0,   0,   0, 128,  63,   0,   0, 112,  65, _\n              0, 255, 127,  71,   0,   0, 128,  59,   0,   0, _\n            128,  47,  73,  70, 131,   5,  75,   6, 158,  63, _\n             77,   6, 158,  63,  80,   6, 158,  63,  30,  55, _\n            190, 121, 255, 255, 127, 255, 255, 127, 127,   1, _\n              0,   0,   0, 192, 255,   0,   0, 128, 255,   0, _\n              0, 128, 127 }\n\n        Dim arrayTwo as Byte( ) = { _\n            255, 255, 255,   0,   0,  20,   0,  33,   0,   0, _\n              0,   1,   0,   0,   0, 100, 167, 179, 182, 224, _\n             13,   0, 202, 154,  59,   0, 143,  91,   0, 170, _\n            170, 170, 170, 170, 170,   0,   0, 232, 137,   4, _\n             35, 199, 138, 255, 232, 244, 255, 252, 205, 255, _\n            255, 129 }\n\n        Dim arrayThree as Byte( ) = { _\n              0, 222,   0,   0,   0, 224, 111,  64,   0,   0, _\n            224, 255, 255, 255, 239,  65,   0,   0, 131,   0, _\n              0,   0, 112,  63,   0, 143,   0, 100,   0,   0, _\n            240,  61, 223, 136,  30,  28, 254, 116, 170,   1, _\n            250,  89, 140,  66, 202, 192, 243,  63, 251,  89, _\n            140,  66, 202, 192, 243,  63, 252,  89, 140,  66, _\n            202, 192, 243,  63,  82, 211, 187, 188, 232, 126, _\n            255, 255, 255, 244, 255, 239, 127,   1,   0,   0, _\n              0,  10,  17,   0,   0, 248, 255,   0,  88,   0, _\n             91,   0,   0, 240, 255,   0,   0, 240, 157 }\n\n        Console.WriteLine( &quot;This example of the&quot; &amp; vbCrLf &amp; _\n            &quot;  BitConverter.ToString( Byte( ), Integer ) and &quot; &amp; _\n            vbCrLf &amp; &quot;  BitConverter.ToString( Byte( ), &quot; &amp; _\n            &quot;Integer, Integer ) &quot; &amp; vbCrLf &amp; &quot;methods generates &quot; &amp; _\n            &quot;the following output.&quot; &amp; vbCrLf )\n\n        WriteMultiLineByteArray( arrayOne, &quot;arrayOne&quot; )\n        WriteMultiLineByteArray( arrayTwo, &quot;arrayTwo&quot; )\n        WriteMultiLineByteArray( arrayThree, &quot;arrayThree&quot; )\n    End Sub \nEnd Module\n\n&#39; This example of the\n&#39;   BitConverter.ToString( Byte( ), Integer ) and\n&#39;   BitConverter.ToString( Byte( ), Integer, Integer )\n&#39; methods generates the following output.\n&#39; \n&#39; arrayOne\n&#39; --------\n&#39; 00-00-00-00-80-3F-00-00-70-41-00-FF-7F-47-00-00-80-3B-00-00-\n&#39; 80-2F-49-46-83-05-4B-06-9E-3F-4D-06-9E-3F-50-06-9E-3F-1E-37-\n&#39; BE-79-FF-FF-7F-FF-FF-7F-7F-01-00-00-00-C0-FF-00-00-80-FF-00-\n&#39; 00-80-7F\n&#39; \n&#39; arrayTwo\n&#39; --------\n&#39; FF-FF-FF-00-00-14-00-21-00-00-00-01-00-00-00-64-A7-B3-B6-E0-\n&#39; 0D-00-CA-9A-3B-00-8F-5B-00-AA-AA-AA-AA-AA-AA-00-00-E8-89-04-\n&#39; 23-C7-8A-FF-E8-F4-FF-FC-CD-FF-FF-81\n&#39; \n&#39; arrayThree\n&#39; ----------\n&#39; 00-DE-00-00-00-E0-6F-40-00-00-E0-FF-FF-FF-EF-41-00-00-83-00-\n&#39; 00-00-70-3F-00-8F-00-64-00-00-F0-3D-DF-88-1E-1C-FE-74-AA-01-\n&#39; FA-59-8C-42-CA-C0-F3-3F-FB-59-8C-42-CA-C0-F3-3F-FC-59-8C-42-\n&#39; CA-C0-F3-3F-52-D3-BB-BC-E8-7E-FF-FF-FF-F4-FF-EF-7F-01-00-00-\n&#39; 00-0A-11-00-00-F8-FF-00-58-00-5B-00-00-F0-FF-00-00-F0-9D\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_BitConverter_ToUInt16_System_Byte___System_Int32_\">\r\n    \r\n            <a id=\"System_BitConverter_ToUInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt16(Byte[],Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a 16-bit unsigned integer converted from two bytes at a specified position in a byte array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static ushort ToUInt16 (byte[] value, int startIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The array of bytes.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting position within <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </div>\r\n                  <p>A 16-bit unsigned integer formed by two bytes beginning at <code>startIndex</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> equals the length of <code>value</code> minus 1.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is less than zero or greater than the length of <code>value</code> minus 1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ToUInt16 method converts the bytes from index <code>startIndex</code> to <code>startIndex</code> + 1 to a <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a> value. The order of bytes in the array must reflect the endianness of the computer system&#39;s architecture; for more information, see the Remarks section of the <a class=\"xref\" href=\"system.bitconverter\" data-linktype=\"relative-path\">BitConverter</a> class topic.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example converts elements of <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> arrays to <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a> values with the <code>ToUInt16</code> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.BitConverter.ToXXX.UInts#1\">// Example of the BitConverter::ToUInt16 method.\nusing namespace System;\n\n// Convert two byte array elements to an unsigned short and display it.\nvoid BAToUInt16( array&lt;unsigned char&gt;^bytes, int index )\n{\n   unsigned short value = BitConverter::ToUInt16( bytes, index );\n   Console::WriteLine( &quot;{0,5}{1,17}{2,16}&quot;, index, BitConverter::ToString( bytes, index, 2 ), value );\n}\n\nint main()\n{\n   array&lt;unsigned char&gt;^byteArray = {15,0,0,255,3,16,39,255,255,127};\n   Console::WriteLine( &quot;This example of the BitConverter::ToUInt16( unsigned &quot;\n   &quot;char[ ], int ) <br>method generates the following output. It &quot;\n   &quot;converts elements of a <br>byte array to unsigned short &quot;\n   &quot;values.<br>&quot; );\n   Console::WriteLine( &quot;initial byte array&quot; );\n   Console::WriteLine( &quot;------------------&quot; );\n   Console::WriteLine( BitConverter::ToString( byteArray ) );\n   Console::WriteLine();\n   Console::WriteLine( &quot;{0,5}{1,17}{2,16}&quot;, &quot;index&quot;, &quot;array elements&quot;, &quot;unsigned short&quot; );\n   Console::WriteLine( &quot;{0,5}{1,17}{2,16}&quot;, &quot;-----&quot;, &quot;--------------&quot;, &quot;--------------&quot; );\n   \n   // Convert byte array elements to unsigned short values.\n   BAToUInt16( byteArray, 1 );\n   BAToUInt16( byteArray, 0 );\n   BAToUInt16( byteArray, 3 );\n   BAToUInt16( byteArray, 5 );\n   BAToUInt16( byteArray, 8 );\n   BAToUInt16( byteArray, 7 );\n}\n\n/*\nThis example of the BitConverter::ToUInt16( unsigned char[ ], int )\nmethod generates the following output. It converts elements of a\nbyte array to unsigned short values.\n\ninitial byte array\n------------------\n0F-00-00-FF-03-10-27-FF-FF-7F\n\nindex   array elements  unsigned short\n-----   --------------  --------------\n    1            00-00               0\n    0            0F-00              15\n    3            FF-03            1023\n    5            10-27           10000\n    8            FF-7F           32767\n    7            FF-FF           65535\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.BitConverter.ToXXX.UInts#1\">// Example of the BitConverter.ToUInt16 method.\nusing System;\n\nclass BytesToUInt16Demo\n{\n    const string formatter = &quot;{0,5}{1,17}{2,10}&quot;;\n \n    // Convert two byte array elements to a ushort and display it.\n    public static void BAToUInt16( byte[ ] bytes, int index )\n    {\n        ushort value = BitConverter.ToUInt16( bytes, index );\n\n        Console.WriteLine( formatter, index, \n            BitConverter.ToString( bytes, index, 2 ), value );\n    }\n       \n    public static void Main( )\n    {\n        byte[] byteArray = {\n            15, 0, 0, 255, 3, 16, 39, 255, 255, 127 };\n\n        Console.WriteLine( \n            &quot;This example of the BitConverter.ToUInt16( byte[ ], &quot; +\n            &quot;int ) <br>method generates the following output. It &quot; +\n            &quot;converts elements <br>of a byte array to ushort values.<br>&quot; );\n        Console.WriteLine( &quot;initial byte array&quot; );\n        Console.WriteLine( &quot;------------------&quot; );\n        Console.WriteLine( BitConverter.ToString( byteArray ) );\n        Console.WriteLine( );\n        Console.WriteLine( formatter, &quot;index&quot;, &quot;array elements&quot;, \n            &quot;ushort&quot; );\n        Console.WriteLine( formatter, &quot;-----&quot;, &quot;--------------&quot;, \n            &quot;------&quot; );\n          \n        // Convert byte array elements to ushort values.\n        BAToUInt16( byteArray, 1 );\n        BAToUInt16( byteArray, 0 );\n        BAToUInt16( byteArray, 3 );\n        BAToUInt16( byteArray, 5 );\n        BAToUInt16( byteArray, 8 );\n        BAToUInt16( byteArray, 7 );\n    }\n}\n\n/*\nThis example of the BitConverter.ToUInt16( byte[ ], int )\nmethod generates the following output. It converts elements\nof a byte array to ushort values.\n\ninitial byte array\n------------------\n0F-00-00-FF-03-10-27-FF-FF-7F\n\nindex   array elements    ushort\n-----   --------------    ------\n    1            00-00         0\n    0            0F-00        15\n    3            FF-03      1023\n    5            10-27     10000\n    8            FF-7F     32767\n    7            FF-FF     65535\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.BitConverter.ToXXX.UInts#1\">&#39; Example of the BitConverter.ToUInt16 method.\nImports System\nImports Microsoft.VisualBasic\n\nModule BytesToUInt16Demo\n\n    Const formatter As String = &quot;{0,5}{1,17}{2,10}&quot;\n \n    &#39; Convert two Byte array elements to a UInt16 and display it.\n    Sub BAToUInt16( bytes( ) As Byte, index As Integer )\n\n        Dim value As UInt16 = BitConverter.ToUInt16( bytes, index )\n\n        Console.WriteLine( formatter, index, _\n            BitConverter.ToString( bytes, index, 2 ), value )\n    End Sub \n       \n    Sub Main( )\n\n        Dim byteArray as Byte( ) = { _\n             15, 0, 0, 255, 3, 16, 39, 255, 255, 127 }\n\n        Console.WriteLine( _\n            &quot;This example of the BitConverter.ToUInt16( Byte( ), &quot; &amp; _\n            &quot;Integer ) &quot; &amp; vbCrLf &amp; &quot;method generates the &quot; &amp; _\n            &quot;following output. It converts elements &quot; &amp; vbCrLf &amp; _\n            &quot;of a Byte array to UInt16 values.&quot; &amp; vbCrLf )\n        Console.WriteLine( &quot;initial Byte array&quot; )\n        Console.WriteLine( &quot;------------------&quot; )\n        Console.WriteLine( BitConverter.ToString( byteArray ) )\n        Console.WriteLine( )\n        Console.WriteLine( formatter, &quot;index&quot;, &quot;array elements&quot;, _\n            &quot;UInt16&quot; )\n        Console.WriteLine( formatter, &quot;-----&quot;, &quot;--------------&quot;, _\n            &quot;------&quot; )\n          \n        &#39; Convert Byte array elements to UInt16 values.\n        BAToUInt16( byteArray, 1 )\n        BAToUInt16( byteArray, 0 )\n        BAToUInt16( byteArray, 3 )\n        BAToUInt16( byteArray, 5 )\n        BAToUInt16( byteArray, 8 )\n        BAToUInt16( byteArray, 7 )\n    End Sub \nEnd Module\n\n&#39; This example of the BitConverter.ToUInt16( Byte( ), Integer )\n&#39; method generates the following output. It converts elements\n&#39; of a Byte array to UInt16 values.\n&#39; \n&#39; initial Byte array\n&#39; ------------------\n&#39; 0F-00-00-FF-03-10-27-FF-FF-7F\n&#39; \n&#39; index   array elements    UInt16\n&#39; -----   --------------    ------\n&#39;     1            00-00         0\n&#39;     0            0F-00        15\n&#39;     3            FF-03      1023\n&#39;     5            10-27     10000\n&#39;     8            FF-7F     32767\n&#39;     7            FF-FF     65535\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_BitConverter_ToUInt32_System_Byte___System_Int32_\">\r\n    \r\n            <a id=\"System_BitConverter_ToUInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt32(Byte[],Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a 32-bit unsigned integer converted from four bytes at a specified position in a byte array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static uint ToUInt32 (byte[] value, int startIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of bytes.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting position within <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit unsigned integer formed by four bytes beginning at <code>startIndex</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is greater than or equal to the length of <code>value</code> minus 3, and is less than or equal to the length of <code>value</code> minus 1.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is less than zero or greater than the length of <code>value</code> minus 1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ToUInt32 method converts the bytes from index <code>startIndex</code> to <code>startIndex</code> + 3 to a <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a> value. The order of bytes in the array must reflect the endianness of the computer system&#39;s architecture; for more information, see the Remarks section of the <a class=\"xref\" href=\"system.bitconverter\" data-linktype=\"relative-path\">BitConverter</a> class topic.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example converts elements of <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> arrays to <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a> values with the <code>ToUInt32</code> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.BitConverter.ToXXX.UInts#2\">// Example of the BitConverter::ToUInt32 method.\nusing namespace System;\n\n// Convert four byte array elements to an unsigned int and display it.\nvoid BAToUInt32( array&lt;unsigned char&gt;^bytes, int index )\n{\n   unsigned int value = BitConverter::ToUInt32( bytes, index );\n   Console::WriteLine( &quot;{0,5}{1,17}{2,15}&quot;, index, BitConverter::ToString( bytes, index, 4 ), value );\n}\n\nint main()\n{\n   array&lt;unsigned char&gt;^byteArray = {15,0,0,0,0,16,0,255,3,0,0,202,154,59,255,255,255,255,127};\n   Console::WriteLine( &quot;This example of the BitConverter::ToUInt32( unsigned &quot;\n   &quot;char[ ], int ) <br>method generates the following output. It &quot;\n   &quot;converts elements of a <br>byte array to unsigned int &quot;\n   &quot;values.<br>&quot; );\n   Console::WriteLine( &quot;initial byte array&quot; );\n   Console::WriteLine( &quot;------------------&quot; );\n   Console::WriteLine( BitConverter::ToString( byteArray ) );\n   Console::WriteLine();\n   Console::WriteLine( &quot;{0,5}{1,17}{2,15}&quot;, &quot;index&quot;, &quot;array elements&quot;, &quot;unsigned int&quot; );\n   Console::WriteLine( &quot;{0,5}{1,17}{2,15}&quot;, &quot;-----&quot;, &quot;--------------&quot;, &quot;------------&quot; );\n   \n   // Convert byte array elements to unsigned int values.\n   BAToUInt32( byteArray, 1 );\n   BAToUInt32( byteArray, 0 );\n   BAToUInt32( byteArray, 7 );\n   BAToUInt32( byteArray, 3 );\n   BAToUInt32( byteArray, 10 );\n   BAToUInt32( byteArray, 15 );\n   BAToUInt32( byteArray, 14 );\n}\n\n/*\nThis example of the BitConverter::ToUInt32( unsigned char[ ], int )\nmethod generates the following output. It converts elements of a\nbyte array to unsigned int values.\n\ninitial byte array\n------------------\n0F-00-00-00-00-10-00-FF-03-00-00-CA-9A-3B-FF-FF-FF-FF-7F\n\nindex   array elements   unsigned int\n-----   --------------   ------------\n    1      00-00-00-00              0\n    0      0F-00-00-00             15\n    7      FF-03-00-00           1023\n    3      00-00-10-00        1048576\n   10      00-CA-9A-3B     1000000000\n   15      FF-FF-FF-7F     2147483647\n   14      FF-FF-FF-FF     4294967295\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.BitConverter.ToXXX.UInts#2\">// Example of the BitConverter.ToUInt32 method.\nusing System;\n\nclass BytesToUInt32Demo\n{\n    const string formatter = &quot;{0,5}{1,17}{2,15}&quot;;\n \n    // Convert four byte array elements to a uint and display it.\n    public static void BAToUInt32( byte[ ] bytes, int index )\n    {\n        uint value = BitConverter.ToUInt32( bytes, index );\n\n        Console.WriteLine( formatter, index, \n            BitConverter.ToString( bytes, index, 4 ), value );\n    }\n\n    public static void Main( )\n    {\n        byte[ ] byteArray = {\n             15,   0,   0,   0,   0,  16,   0, 255,   3,   0, \n              0, 202, 154,  59, 255, 255, 255, 255, 127 };\n\n        Console.WriteLine( \n            &quot;This example of the BitConverter.ToUInt32( byte[ ], &quot; +\n            &quot;int ) <br>method generates the following output. It &quot; +\n            &quot;converts elements <br>of a byte array to uint values.<br>&quot; );\n        Console.WriteLine( &quot;initial byte array&quot; );\n        Console.WriteLine( &quot;------------------&quot; );\n        Console.WriteLine( BitConverter.ToString( byteArray ) );\n        Console.WriteLine( );\n        Console.WriteLine( formatter, &quot;index&quot;, &quot;array elements&quot;, \n            &quot;uint&quot; );\n        Console.WriteLine( formatter, &quot;-----&quot;, &quot;--------------&quot;, \n            &quot;----&quot; );\n          \n        // Convert byte array elements to uint values.\n        BAToUInt32( byteArray, 1 );\n        BAToUInt32( byteArray, 0 );\n        BAToUInt32( byteArray, 7 );\n        BAToUInt32( byteArray, 3 );\n        BAToUInt32( byteArray, 10 );\n        BAToUInt32( byteArray, 15 );\n        BAToUInt32( byteArray, 14 );\n    }\n}\n\n/*\nThis example of the BitConverter.ToUInt32( byte[ ], int )\nmethod generates the following output. It converts elements\nof a byte array to uint values.\n\ninitial byte array\n------------------\n0F-00-00-00-00-10-00-FF-03-00-00-CA-9A-3B-FF-FF-FF-FF-7F\n\nindex   array elements           uint\n-----   --------------           ----\n    1      00-00-00-00              0\n    0      0F-00-00-00             15\n    7      FF-03-00-00           1023\n    3      00-00-10-00        1048576\n   10      00-CA-9A-3B     1000000000\n   15      FF-FF-FF-7F     2147483647\n   14      FF-FF-FF-FF     4294967295\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.BitConverter.ToXXX.UInts#2\">&#39; Example of the BitConverter.ToUInt32 method.\nImports System\nImports Microsoft.VisualBasic\n\nModule BytesToUInt32Demo\n\n    Const formatter As String = &quot;{0,5}{1,17}{2,15}&quot;\n \n    &#39; Convert four Byte array elements to a UInt32 and display it.\n    Sub BAToUInt32( bytes( ) As Byte, index As Integer )\n\n        Dim value As UInt32 = BitConverter.ToUInt32( bytes, index )\n\n        Console.WriteLine( formatter, index, _\n            BitConverter.ToString( bytes, index, 4 ), value )\n    End Sub \n\n    Sub Main( )\n        Dim byteArray as Byte( ) = { _\n             15,   0,   0,   0,   0,  16,   0, 255,   3,   0, _\n              0, 202, 154,  59, 255, 255, 255, 255, 127 }\n\n        Console.WriteLine( _\n            &quot;This example of the BitConverter.ToUInt32( Byte( ), &quot; &amp; _\n            &quot;Integer ) &quot; &amp; vbCrLf &amp; &quot;method generates the &quot; &amp; _\n            &quot;following output. It converts elements &quot; &amp; vbCrLf &amp; _\n            &quot;of a Byte array to UInt32 values.&quot; &amp; vbCrLf )\n        Console.WriteLine( &quot;initial Byte array&quot; )\n        Console.WriteLine( &quot;------------------&quot; )\n        Console.WriteLine( BitConverter.ToString( byteArray ) )\n        Console.WriteLine( )\n        Console.WriteLine( formatter, &quot;index&quot;, &quot;array elements&quot;, _\n            &quot;UInt32&quot; )\n        Console.WriteLine( formatter, &quot;-----&quot;, &quot;--------------&quot;, _\n            &quot;------&quot; )\n          \n        &#39; Convert Byte array elements to UInt32 values.\n        BAToUInt32( byteArray, 1 )\n        BAToUInt32( byteArray, 0 )\n        BAToUInt32( byteArray, 7 )\n        BAToUInt32( byteArray, 3 )\n        BAToUInt32( byteArray, 10 )\n        BAToUInt32( byteArray, 15 )\n        BAToUInt32( byteArray, 14 )\n    End Sub \nEnd Module\n\n&#39; This example of the BitConverter.ToUInt32( Byte( ), Integer )\n&#39; method generates the following output. It converts elements\n&#39; of a Byte array to UInt32 values.\n&#39; \n&#39; initial Byte array\n&#39; ------------------\n&#39; 0F-00-00-00-00-10-00-FF-03-00-00-CA-9A-3B-FF-FF-FF-FF-7F\n&#39; \n&#39; index   array elements         UInt32\n&#39; -----   --------------         ------\n&#39;     1      00-00-00-00              0\n&#39;     0      0F-00-00-00             15\n&#39;     7      FF-03-00-00           1023\n&#39;     3      00-00-10-00        1048576\n&#39;    10      00-CA-9A-3B     1000000000\n&#39;    15      FF-FF-FF-7F     2147483647\n&#39;    14      FF-FF-FF-FF     4294967295\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_BitConverter_ToUInt64_System_Byte___System_Int32_\">\r\n    \r\n            <a id=\"System_BitConverter_ToUInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt64(Byte[],Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a 64-bit unsigned integer converted from eight bytes at a specified position in a byte array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static ulong ToUInt64 (byte[] value, int startIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of bytes.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting position within <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </div>\r\n                  <p>A 64-bit unsigned integer formed by the eight bytes beginning at <code>startIndex</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is greater than or equal to the length of <code>value</code> minus 7, and is less than or equal to the length of <code>value</code> minus 1.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is less than zero or greater than the length of <code>value</code> minus 1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ToUInt64 method converts the bytes from index <code>startIndex</code> to <code>startIndex</code> + 7 to a <a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a> value. The order of bytes in the array must reflect the endianness of the computer system&#39;s architecture; for more information, see the Remarks section of the <a class=\"xref\" href=\"system.bitconverter\" data-linktype=\"relative-path\">BitConverter</a> class topic.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example converts elements of <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> arrays to <a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a> values with the <code>ToUInt64</code> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.BitConverter.ToXXX.UInts#3\">// Example of the BitConverter::ToUInt64 method.\nusing namespace System;\n\n// Convert eight byte array elements to an unsigned __int64 value and \n// display it.\nvoid BAToUInt64( array&lt;unsigned char&gt;^bytes, int index )\n{\n   unsigned __int64 value = BitConverter::ToUInt64( bytes, index );\n   Console::WriteLine( &quot;{0,5}{1,27}{2,24}&quot;, index, BitConverter::ToString( bytes, index, 8 ), value );\n}\n\n\n// Display a byte array, using multiple lines if necessary.\nvoid WriteMultiLineByteArray( array&lt;unsigned char&gt;^bytes )\n{\n   const int rowSize = 20;\n   int iter;\n   Console::WriteLine( &quot;initial unsigned char array&quot; );\n   Console::WriteLine( &quot;---------------------------&quot; );\n   for ( iter = 0; iter &lt; bytes-&gt;Length - rowSize; iter += rowSize )\n   {\n      Console::Write( BitConverter::ToString( bytes, iter, rowSize ) );\n      Console::WriteLine( &quot;-&quot; );\n\n   }\n   Console::WriteLine( BitConverter::ToString( bytes, iter ) );\n   Console::WriteLine();\n}\n\nint main()\n{\n   array&lt;unsigned char&gt;^byteArray = {255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,100,167,179,182,224,13,0,202,154,59,0,0,0,0,170,170,170,170,170,170,0,0,232,137,4,35,199,138,255,255,255,255,255,255,255,255,127};\n   Console::WriteLine( &quot;This example of the BitConverter::ToUInt64( unsigned &quot;\n   &quot;char[ ], int ) <br>method generates the following output. It &quot;\n   &quot;converts elements of a <br>byte array to unsigned __int64 &quot;\n   &quot;values.<br>&quot; );\n   WriteMultiLineByteArray( byteArray );\n   Console::WriteLine( &quot;{0,5}{1,27}{2,24}&quot;, &quot;index&quot;, &quot;array elements&quot;, &quot;unsigned __int64&quot; );\n   Console::WriteLine( &quot;{0,5}{1,27}{2,24}&quot;, &quot;-----&quot;, &quot;--------------&quot;, &quot;----------------&quot; );\n   \n   // Convert byte array elements to unsigned __int64 values.\n   BAToUInt64( byteArray, 3 );\n   BAToUInt64( byteArray, 0 );\n   BAToUInt64( byteArray, 21 );\n   BAToUInt64( byteArray, 7 );\n   BAToUInt64( byteArray, 29 );\n   BAToUInt64( byteArray, 13 );\n   BAToUInt64( byteArray, 35 );\n   BAToUInt64( byteArray, 44 );\n   BAToUInt64( byteArray, 43 );\n}\n\n/*\nThis example of the BitConverter::ToUInt64( unsigned char[ ], int )\nmethod generates the following output. It converts elements of a\nbyte array to unsigned __int64 values.\n\ninitial unsigned char array\n---------------------------\nFF-FF-FF-00-00-00-00-00-00-00-00-01-00-00-00-64-A7-B3-B6-E0-\n0D-00-CA-9A-3B-00-00-00-00-AA-AA-AA-AA-AA-AA-00-00-E8-89-04-\n23-C7-8A-FF-FF-FF-FF-FF-FF-FF-FF-7F\n\nindex             array elements        unsigned __int64\n-----             --------------        ----------------\n    3    00-00-00-00-00-00-00-00                       0\n    0    FF-FF-FF-00-00-00-00-00                16777215\n   21    00-CA-9A-3B-00-00-00-00              1000000000\n    7    00-00-00-00-01-00-00-00              4294967296\n   29    AA-AA-AA-AA-AA-AA-00-00         187649984473770\n   13    00-00-64-A7-B3-B6-E0-0D     1000000000000000000\n   35    00-00-E8-89-04-23-C7-8A    10000000000000000000\n   44    FF-FF-FF-FF-FF-FF-FF-7F     9223372036854775807\n   43    FF-FF-FF-FF-FF-FF-FF-FF    18446744073709551615\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.BitConverter.ToXXX.UInts#3\">// Example of the BitConverter.ToUInt64 method.\nusing System;\n\nclass BytesToUInt64Demo\n{\n    const string formatter = &quot;{0,5}{1,27}{2,24}&quot;;\n \n    // Convert eight byte array elements to a ulong and display it.\n    public static void BAToUInt64( byte[ ] bytes, int index )\n    {\n        ulong value = BitConverter.ToUInt64( bytes, index );\n\n        Console.WriteLine( formatter, index, \n            BitConverter.ToString( bytes, index, 8 ), value );\n    }\n\n    // Display a byte array, using multiple lines if necessary.\n    public static void WriteMultiLineByteArray( byte[ ] bytes )\n    {\n        const int rowSize = 20;\n        int iter;\n\n        Console.WriteLine( &quot;initial byte array&quot; );\n        Console.WriteLine( &quot;------------------&quot; );\n\n        for( iter = 0; iter &lt; bytes.Length - rowSize; iter += rowSize )\n        {\n            Console.Write( \n                BitConverter.ToString( bytes, iter, rowSize ) );\n            Console.WriteLine( &quot;-&quot; );\n        }\n\n        Console.WriteLine( BitConverter.ToString( bytes, iter ) );\n        Console.WriteLine( );\n    }\n\n    public static void Main( )\n    {\n        byte[ ] byteArray = {\n            255, 255, 255,   0,   0,   0,   0,   0,   0,   0, \n              0,   1,   0,   0,   0, 100, 167, 179, 182, 224, \n             13,   0, 202, 154,  59,   0,   0,   0,   0, 170, \n            170, 170, 170, 170, 170,   0,   0, 232, 137,   4, \n             35, 199, 138, 255, 255, 255, 255, 255, 255, 255, \n            255, 127 };\n\n        Console.WriteLine( \n            &quot;This example of the BitConverter.ToUInt64( byte[ ], &quot; +\n            &quot;int ) <br>method generates the following output. It &quot; +\n            &quot;converts elements <br>of a byte array to ulong values.<br>&quot; );\n\n        WriteMultiLineByteArray( byteArray );\n\n        Console.WriteLine( formatter, &quot;index&quot;, &quot;array elements&quot;, \n            &quot;ulong&quot; );\n        Console.WriteLine( formatter, &quot;-----&quot;, &quot;--------------&quot;, \n            &quot;------&quot; );\n          \n        // Convert byte array elements to ulong values.\n        BAToUInt64( byteArray, 3 );\n        BAToUInt64( byteArray, 0 );\n        BAToUInt64( byteArray, 21 );\n        BAToUInt64( byteArray, 7 );\n        BAToUInt64( byteArray, 29 );\n        BAToUInt64( byteArray, 13 );\n        BAToUInt64( byteArray, 35 );\n        BAToUInt64( byteArray, 44 );\n        BAToUInt64( byteArray, 43 );\n    }\n}\n\n/*\nThis example of the BitConverter.ToUInt64( byte[ ], int )\nmethod generates the following output. It converts elements\nof a byte array to ulong values.\n\ninitial byte array\n------------------\nFF-FF-FF-00-00-00-00-00-00-00-00-01-00-00-00-64-A7-B3-B6-E0-\n0D-00-CA-9A-3B-00-00-00-00-AA-AA-AA-AA-AA-AA-00-00-E8-89-04-\n23-C7-8A-FF-FF-FF-FF-FF-FF-FF-FF-7F\n\nindex             array elements                   ulong\n-----             --------------                  ------\n    3    00-00-00-00-00-00-00-00                       0\n    0    FF-FF-FF-00-00-00-00-00                16777215\n   21    00-CA-9A-3B-00-00-00-00              1000000000\n    7    00-00-00-00-01-00-00-00              4294967296\n   29    AA-AA-AA-AA-AA-AA-00-00         187649984473770\n   13    00-00-64-A7-B3-B6-E0-0D     1000000000000000000\n   35    00-00-E8-89-04-23-C7-8A    10000000000000000000\n   44    FF-FF-FF-FF-FF-FF-FF-7F     9223372036854775807\n   43    FF-FF-FF-FF-FF-FF-FF-FF    18446744073709551615\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.BitConverter.ToXXX.UInts#3\">&#39; Example of the BitConverter.ToUInt64 method.\nImports System\nImports Microsoft.VisualBasic\n\nModule BytesToUInt64Demo\n\n    Const formatter As String = &quot;{0,5}{1,27}{2,24}&quot;\n \n    &#39; Convert eight Byte array elements to a UInt64 and display it.\n    Sub BAToUInt64( bytes( ) As Byte, index As Integer )\n\n        Dim value As UInt64 = BitConverter.ToUInt64( bytes, index )\n\n        Console.WriteLine( formatter, index, _\n            BitConverter.ToString( bytes, index, 8 ), value )\n    End Sub \n\n    &#39; Display a Byte array, using multiple lines if necessary.\n    Sub WriteMultiLineByteArray( bytes( ) As Byte )\n       \n        Const rowSize As Integer = 20 \n        Dim iter As Integer\n\n        Console.WriteLine( &quot;initial Byte array&quot; )\n        Console.WriteLine( &quot;------------------&quot; )\n\n        For iter = 0 To bytes.Length - rowSize - 1 Step rowSize\n            Console.Write( _\n                BitConverter.ToString( bytes, iter, rowSize ) )\n            Console.WriteLine( &quot;-&quot; )\n        Next iter\n\n        Console.WriteLine( BitConverter.ToString( bytes, iter ) )\n        Console.WriteLine( )\n    End Sub\n\n    Sub Main( )\n        Dim byteArray as Byte( ) = { _\n            255, 255, 255,   0,   0,   0,   0,   0,   0,   0, _\n              0,   1,   0,   0,   0, 100, 167, 179, 182, 224, _\n             13,   0, 202, 154,  59,   0,   0,   0,   0, 170, _\n            170, 170, 170, 170, 170,   0,   0, 232, 137,   4, _\n             35, 199, 138, 255, 255, 255, 255, 255, 255, 255, _\n            255, 127 }\n\n        Console.WriteLine( _\n            &quot;This example of the BitConverter.ToUInt64( Byte( ), &quot; &amp; _\n            &quot;Integer ) &quot; &amp; vbCrLf &amp; &quot;method generates the &quot; &amp; _\n            &quot;following output. It converts elements &quot; &amp; vbCrLf &amp; _\n            &quot;of a Byte array to UInt64 values.&quot; &amp; vbCrLf )\n\n        WriteMultiLineByteArray( byteArray )\n\n        Console.WriteLine( formatter, &quot;index&quot;, &quot;array elements&quot;, _\n            &quot;UInt64&quot; )\n        Console.WriteLine( formatter, &quot;-----&quot;, &quot;--------------&quot;, _\n            &quot;------&quot; )\n          \n        &#39; Convert Byte array elements to UInt64 values.\n        BAToUInt64( byteArray, 3 )\n        BAToUInt64( byteArray, 0 )\n        BAToUInt64( byteArray, 21 )\n        BAToUInt64( byteArray, 7 )\n        BAToUInt64( byteArray, 29 )\n        BAToUInt64( byteArray, 13 )\n        BAToUInt64( byteArray, 35 )\n        BAToUInt64( byteArray, 44 )\n        BAToUInt64( byteArray, 43 )\n    End Sub \nEnd Module\n\n&#39; This example of the BitConverter.ToUInt64( Byte( ), Integer )\n&#39; method generates the following output. It converts elements\n&#39; of a Byte array to UInt64 values.\n&#39; \n&#39; initial Byte array\n&#39; ------------------\n&#39; FF-FF-FF-00-00-00-00-00-00-00-00-01-00-00-00-64-A7-B3-B6-E0-\n&#39; 0D-00-CA-9A-3B-00-00-00-00-AA-AA-AA-AA-AA-AA-00-00-E8-89-04-\n&#39; 23-C7-8A-FF-FF-FF-FF-FF-FF-FF-FF-7F\n&#39; \n&#39; index             array elements                  UInt64\n&#39; -----             --------------                  ------\n&#39;     3    00-00-00-00-00-00-00-00                       0\n&#39;     0    FF-FF-FF-00-00-00-00-00                16777215\n&#39;    21    00-CA-9A-3B-00-00-00-00              1000000000\n&#39;     7    00-00-00-00-01-00-00-00              4294967296\n&#39;    29    AA-AA-AA-AA-AA-AA-00-00         187649984473770\n&#39;    13    00-00-64-A7-B3-B6-E0-0D     1000000000000000000\n&#39;    35    00-00-E8-89-04-23-C7-8A    10000000000000000000\n&#39;    44    FF-FF-FF-FF-FF-FF-FF-7F     9223372036854775807\n&#39;    43    FF-FF-FF-FF-FF-FF-FF-FF    18446744073709551615\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.BitConverter.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.BitConverter.yml\">\r\n<meta name=\"APIName\" content=\"System.BitConverter\">\r\n<meta name=\"APIName\" content=\"System.BitConverter.DoubleToInt64Bits\">\r\n<meta name=\"APIName\" content=\"System.BitConverter.GetBytes\">\r\n<meta name=\"APIName\" content=\"System.BitConverter.Int64BitsToDouble\">\r\n<meta name=\"APIName\" content=\"System.BitConverter.IsLittleEndian\">\r\n<meta name=\"APIName\" content=\"System.BitConverter.ToBoolean\">\r\n<meta name=\"APIName\" content=\"System.BitConverter.ToChar\">\r\n<meta name=\"APIName\" content=\"System.BitConverter.ToDouble\">\r\n<meta name=\"APIName\" content=\"System.BitConverter.ToInt16\">\r\n<meta name=\"APIName\" content=\"System.BitConverter.ToInt32\">\r\n<meta name=\"APIName\" content=\"System.BitConverter.ToInt64\">\r\n<meta name=\"APIName\" content=\"System.BitConverter.ToSingle\">\r\n<meta name=\"APIName\" content=\"System.BitConverter.ToString\">\r\n<meta name=\"APIName\" content=\"System.BitConverter.ToUInt16\">\r\n<meta name=\"APIName\" content=\"System.BitConverter.ToUInt32\">\r\n<meta name=\"APIName\" content=\"System.BitConverter.ToUInt64\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"93dfd2b6-3292-27fa-31db-afe4dab3346c\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Converts base data types to an array of bytes, and an array of bytes to base data types.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.BitConverter\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.BitConverter.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.BitConverter.yml","open_to_public_contributors":true,"api_name":["System.BitConverter","System.BitConverter.DoubleToInt64Bits","System.BitConverter.GetBytes","System.BitConverter.Int64BitsToDouble","System.BitConverter.IsLittleEndian","System.BitConverter.ToBoolean","System.BitConverter.ToChar","System.BitConverter.ToDouble","System.BitConverter.ToInt16","System.BitConverter.ToInt32","System.BitConverter.ToInt64","System.BitConverter.ToSingle","System.BitConverter.ToString","System.BitConverter.ToUInt16","System.BitConverter.ToUInt32","System.BitConverter.ToUInt64"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.BitConverter","System::BitConverter","System.BitConverter.DoubleToInt64Bits","System::BitConverter::DoubleToInt64Bits","System.BitConverter.GetBytes","System::BitConverter::GetBytes","System.BitConverter.Int64BitsToDouble","System::BitConverter::Int64BitsToDouble","System.BitConverter.IsLittleEndian","System::BitConverter::IsLittleEndian","System.BitConverter.ToBoolean","System::BitConverter::ToBoolean","System.BitConverter.ToChar","System::BitConverter::ToChar","System.BitConverter.ToDouble","System::BitConverter::ToDouble","System.BitConverter.ToInt16","System::BitConverter::ToInt16","System.BitConverter.ToInt32","System::BitConverter::ToInt32","System.BitConverter.ToInt64","System::BitConverter::ToInt64","System.BitConverter.ToSingle","System::BitConverter::ToSingle","System.BitConverter.ToString","System::BitConverter::ToString","System.BitConverter.ToUInt16","System::BitConverter::ToUInt16","System.BitConverter.ToUInt32","System::BitConverter::ToUInt32","System.BitConverter.ToUInt64","System::BitConverter::ToUInt64"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"93dfd2b6-3292-27fa-31db-afe4dab3346c","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/BitConverter.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"BitConverter class | Microsoft Docs","_op_ogTitle":"BitConverter class","description":"Converts base data types to an array of bytes, and an array of bytes to base data types.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.BitConverter","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.bitconverter","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.bitconverter","fileRelativePath":"System.BitConverter.html"},"themesRelativePathToOutputRoot":"_themes/"}