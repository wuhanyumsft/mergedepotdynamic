{"content":"    \r\n    <h1 id=\"System_AppContext\">\r\n      <span class=\"lang-csharp\">AppContext</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides members for setting and retrieving data about an application&#39;s context.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static class AppContext</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">AppContext</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The AppContext class enables library writers to provide a uniform opt-out mechanism for new functionality for their users. It establishes a loosely-coupled contract between components in order to communicate an opt-out request. This capability is typically important when a change is made to existing functionality. Conversely, there is already an implicit opt-in for new functionality.  </p>\n<h2 id=\"appcontext-for-library-developers\">AppContext for library developers</h2>\n<p> Libraries use  the AppContext class to define and expose compatibility switches, while library users can set those switches to affect the library behavior. By default, libraries provide the new functionality, and they only alter it (that is, they provide the previous functionality) if the switch is set.  This allows libraries to provide new behavior for an existing API while continuing to support callers who depend on the previous behavior.  </p>\n<h3 id=\"defining-the-switch-name\">Defining the switch name</h3>\n<p> The most common way to allow consumers of your library to opt out of a change of behavior is to define a named switch.  Its <code>value</code> element is a name/value pair that consists of the name of a switch and its <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value.  By default, the switch is always implicitly <code>false</code>, which provides the new behavior (and makes the new behavior opt-in by default). Setting the switch to <code>true</code> enables it, which provides the legacy behavior. Explicitly setting the switch to <code>false</code> also provides the new behavior.  </p>\n<p> It&#39;s beneficial to use a consistent format for switch names, since they are a formal contract exposed by a library. The following are two obvious formats.  </p>\n<ul>\n<li><p><em>Switch</em>.<em>namespace</em>.<em>switchname</em>  </p>\n</li>\n<li><p><em>Switch</em>.<em>library</em>.<em>switchname</em>  </p>\n<p>Once you define and document the switch, callers can use it by using the registry, by adding an  <code>AppContextSwitchOverrides</code> element to their application configuration file, or by calling the  <a class=\"xref\" href=\"system.appcontext#System_AppContext_SetSwitch_System_String_System_Boolean_\" data-linktype=\"relative-path\">System.AppContext.SetSwitch(String,Boolean)</a> method programmatically. See the <a href=\"#ForConsumers\" data-linktype=\"self-bookmark\">AppContext for library consumers</a> section for more information about how callers use and set the value of AppContext configuration switches.  </p>\n<p>When the common language runtime runs an application, it automatically reads the registry&#39;s compatibility settings and loads the application configuration file in order to populate the application&#39;s AppContext instance. Because the AppContext instance is populated either programmatically by the caller or by the runtime, you do not have to take any action, such as calling the <a class=\"xref\" href=\"system.appcontext#System_AppContext_SetSwitch_\" data-linktype=\"relative-path\">SetSwitch</a> method,  to configure the AppContext instance.  </p>\n</li>\n</ul>\n<h3 id=\"checking-the-setting\">Checking the setting</h3>\n<p> You can then check if a consumer has declared the value of the switch and act appropriately by calling the <a class=\"xref\" href=\"system.appcontext#System_AppContext_TryGetSwitch_\" data-linktype=\"relative-path\">TryGetSwitch</a> method. The method returns <code>true</code> if the <code>switchName</code> argument is found, and when the method returns, its <code>isEnabled</code> argument indicates the value of the switch.  Otherwise, the method returns <code>false</code>.  </p>\n<h3 id=\"an-example\">An example</h3>\n<p> The following example illustrates the use of the AppContext class to allow the customer to choose the original behavior of a library method.   The following is version 1.0 of a library named <code>StringLibrary</code>. It defines a <code>SubstringStartsAt</code> method that performs an ordinal comparison to determine the starting index of a substring within a larger string.  </p>\n<pre><code class=\"lang-cs\" name=\"System.AppContext.Class#4\">using System;\nusing System.Reflection;\n\n[assembly: AssemblyVersion(&quot;1.0.0.0&quot;)]\n\npublic static class StringLibrary\n{\n   public static int SubstringStartsAt(String fullString, String substr)\n   {\n      return fullString.IndexOf(substr, StringComparison.Ordinal);\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.AppContext.Class#4\">Imports System.Reflection\n\n&lt;Assembly: AssemblyVersion(&quot;1.0.0.0&quot;)&gt;\n\nPublic Class StringLibrary\n   Public Shared Function SubstringStartsAt(fullString As String, substr As String) As Integer\n      Return fullString.IndexOf(substr, StringComparison.Ordinal)\n   End Function\nEnd Class\n</code></pre><p> The following example then uses the library to find the starting index of the substring &quot;arch√¶&quot; in &quot;The archaeologist&quot;. Because the method performs an ordinal comparison, the substring cannot be found.  </p>\n<pre><code class=\"lang-cs\" name=\"System.AppContext.Class#5\">   using System;\n   \n   public class Example\n   {\n      public static void Main()\n      {\n         String value = &quot;The archaeologist&quot;;\n         String substring = &quot;arch&#230;&quot;;\n         int position = StringLibrary.SubstringStartsAt(value, substring); \n         if (position &gt;= 0) \n            Console.WriteLine(&quot;&#39;{0}&#39; found in &#39;{1}&#39; starting at position {2}&quot;,\n                           substring, value, position);\n         else\n            Console.WriteLine(&quot;&#39;{0}&#39; not found in &#39;{1}&#39;&quot;, substring, value);\n      }\n   }\n   // The example displays the following output:\n   //       &#39;arch&#230;&#39; not found in &#39;The archaeologist&#39;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.AppContext.Class#5\">Public Module Example\n   Public Sub Main()\n      Dim value As String = &quot;The archaeologist&quot;\n      Dim substring As String = &quot;arch&#230;&quot;\n      Dim position As Integer = StringLibrary.SubstringStartsAt(value, substring) \n      If position &gt;= 0 Then \n         Console.WriteLine(&quot;&#39;{0}&#39; found in &#39;{1}&#39; starting at position {2}&quot;,\n                        substring, value, position)\n      Else\n         Console.WriteLine(&quot;&#39;{0}&#39; not found in &#39;{1}&#39;&quot;, substring, value)\n      End If                  \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       &#39;arch&#230;&#39; not found in &#39;The archaeologist&#39;\n</code></pre><p> Version 2 of the library, however, changes the <code>SubstringStartsAt</code> method to use culture-sensitive comparison.  </p>\n<pre><code class=\"lang-cs\" name=\"System.AppContext.Class#6\">using System;\nusing System.Reflection;\n\n[assembly: AssemblyVersion(&quot;2.0.0.0&quot;)]\n\npublic static class StringLibrary\n{\n   public static int SubstringStartsAt(String fullString, String substr)\n   {\n      return fullString.IndexOf(substr, StringComparison.CurrentCulture);\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.AppContext.Class#6\">Imports System.Reflection\n\n&lt;Assembly: AssemblyVersion(&quot;2.0.0.0&quot;)&gt;\n\nPublic Class StringLibrary\n   Public Shared Function SubstringStartsAt(fullString As String, substr As String) As Integer\n      Return fullString.IndexOf(substr, StringComparison.CurrentCulture)\n   End Function\nEnd Class\n</code></pre><p> When the app is recompiled to run against the new version of the library, it now reports that the substring &quot;arch√¶&quot; is found at index 4 in &quot;The archaeologist&quot;.  </p>\n<pre><code class=\"lang-cs\" name=\"System.AppContext.Class#7\">   using System;\n   \n   public class Example\n   {\n      public static void Main()\n      {\n         String value = &quot;The archaeologist&quot;;\n         String substring = &quot;arch&#230;&quot;;\n         int position = StringLibrary.SubstringStartsAt(value, substring); \n         if (position &gt;= 0) \n            Console.WriteLine(&quot;&#39;{0}&#39; found in &#39;{1}&#39; starting at position {2}&quot;,\n                           substring, value, position);\n         else\n            Console.WriteLine(&quot;&#39;{0}&#39; not found in &#39;{1}&#39;&quot;, substring, value);\n      }\n   }\n   // The example displays the following output:\n   //       &#39;arch&#230;&#39; found in &#39;The archaeologist&#39; starting at position 4   \n</code></pre><pre><code class=\"lang-vb\" name=\"System.AppContext.Class#7\">Public Module Example\n   Public Sub Main()\n      Dim value As String = &quot;The archaeologist&quot;\n      Dim substring As String = &quot;arch&#230;&quot;\n      Dim position As Integer = StringLibrary.SubstringStartsAt(value, substring) \n      If position &gt;= 0 Then \n         Console.WriteLine(&quot;&#39;{0}&#39; found in &#39;{1}&#39; starting at position {2}&quot;,\n                        substring, value, position)\n      Else\n         Console.WriteLine(&quot;&#39;{0}&#39; not found in &#39;{1}&#39;&quot;, substring, value)\n      End If                  \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       &#39;arch&#230;&#39; found in &#39;The archaeologist&#39; starting at position 4\n</code></pre><p> This change can be prevented from breaking the applications that depend on the original behavior by defining an <code>AppContextSwitchOverrides</code> switch. In this case, the switch is named <code>StringLibrary.DoNotUseCultureSensitiveComparison</code>. Its default value, <code>false</code>, indicates that the library should perform its version 2.0 culture-sensitive comparison. <code>true</code> indicates that the library should perform its version 1.0 ordinal comparison.  A slight modification of the previous code allows the library consumer to set the switch to determine the kind of comparison the method performs.  </p>\n<pre><code class=\"lang-cs\" name=\"System.AppContext.Class#8\">using System;\nusing System.Reflection;\n\n[assembly: AssemblyVersion(&quot;2.0.0.0&quot;)]\n\npublic static class StringLibrary\n{\n   public static int SubstringStartsAt(String fullString, String substr)\n   {\n      bool flag;\n      if (AppContext.TryGetSwitch(&quot;StringLibrary.DoNotUseCultureSensitiveComparison&quot;, out flag) &amp;&amp; flag == true)\n         return fullString.IndexOf(substr, StringComparison.Ordinal);\n      else\n         return fullString.IndexOf(substr, StringComparison.CurrentCulture);\n         \n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.AppContext.Class#8\">Imports System.Reflection\n\n&lt;Assembly: AssemblyVersion(&quot;2.0.0.0&quot;)&gt;\n\nPublic Class StringLibrary\n   Public Shared Function SubstringStartsAt(fullString As String, substr As String) As Integer\n      Dim flag As Boolean\n      If AppContext.TryGetSwitch(&quot;StringLibrary.DoNotUseCultureSensitiveComparison&quot;, flag) AndAlso flag = True Then\n         Return fullString.IndexOf(substr, StringComparison.Ordinal)\n      Else\n         Return fullString.IndexOf(substr, StringComparison.CurrentCulture)\n      End If   \n   End Function\nEnd Class\n</code></pre><p> If application can then use the following configuration file to restore the version 1.0 behavior.  </p>\n<pre><code class=\"lang-xml\">\n&lt;configuration&gt;  \n   &lt;runtime&gt;  \n      &lt;AppContextSwitchOverrides value=&quot;StringLibrary.DoNotUseCultureSensitiveComparison=true&quot; /&gt;   \n   &lt;/runtime&gt;  \n&lt;/configuration&gt;  \n</code></pre><p> When the application is run with the configuration file present, it produces the following output:  </p>\n<pre><code>&#39;arch√¶&#39; not found in &#39;The archaeologist&#39;  \n</code></pre><p><a name=\"ForConsumers\"></a>   </p>\n<h2 id=\"appcontext-for-library-consumers\">AppContext for library consumers</h2>\n<p> If you are the consumer of a library, the AppContext class  allows you to take advantage of a library or library method&#39;s opt-out mechanism for new functionality.   Individual methods of the class library that you are calling define particular switches that enable or disable a new behavior. The value of the switch  is a Boolean. If it is <code>false</code>, which is typically the default value, the new behavior is enabled; if it is <code>true</code>, the new behavior is disabled, and the member behaves as it did previously.  </p>\n<p> You can set the value of a switch in one of three ways:  </p>\n<ul>\n<li><p>By calling the <a class=\"xref\" href=\"system.appcontext#System_AppContext_SetSwitch_System_String_System_Boolean_\" data-linktype=\"relative-path\">System.AppContext.SetSwitch(String,Boolean)</a> method in your code.  The <code>switchName</code> argument defines the switch name, and the <code>isEnabled</code> property defines the value of the switch. Because AppContext is a static class, it is available on a per-application domain basis.  </p>\n<p> Calling the <a class=\"xref\" href=\"system.appcontext#System_AppContext_SetSwitch_System_String_System_Boolean_\" data-linktype=\"relative-path\">System.AppContext.SetSwitch(String,Boolean)</a> has application scope; that is, it affects only the application.  </p>\n</li>\n<li><p>By adding an <code>&lt;AppContextSwitchOverrides&gt;</code> element to the <a href=\"../Topic/%3Cruntime%3E%20Element.md\" data-linktype=\"relative-path\">&lt;runtime&gt;</a> section of your app.config file. The switch has a single attribute, <code>value</code>, whose value is a string that represents a key/value pair containing both the switch name and its value.  </p>\n<p> To define multiple switches, separate each switch&#39;s key/value pair in the <code>&lt;AppContextSwitchOverrides&gt;</code> element&#39;s <code>value</code> attribute with a semicolon. In that case, the :<code>&lt;AppContextSwitchOverrides&gt;</code> element has the following format:  </p>\n<pre><code class=\"lang-xml\">&lt;AppContextSwitchOverrides value=‚ÄùswitchName1=value1;switchName2=value2‚Äù /&gt;  \n</code></pre><p> Using the <code>&lt;AppContextSwitchOverrides&gt;</code> element to define a configuration setting has application scope; that is, it affects only the application.  </p>\n</li>\n<li><p>By adding a string value whose name is the name of the switch to the <code>HKLM\\SOFTWARE\\Microsoft\\.NETFramework\\AppContext</code> key in the registry. Its value must be the string representation of a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> that can be parsed by the <a class=\"xref\" href=\"system.boolean#System_Boolean_Parse_\" data-linktype=\"relative-path\">Parse</a> method; that is, it must be &quot;True&quot;, &quot;true&quot;, &quot;False&quot;, or &quot;false&quot;. If the runtime encounters any other value, it ignores the switch.  </p>\n<p> Using the registry to define an AppContext switch has machine scope; that is, it affects every application running on the machine.  </p>\n<p>If you set the same switch in more than one way, the order of precedence for determining which setting overrides the others is:  </p>\n</li>\n</ul>\n<ol>\n<li><p>The programmatic setting.  </p>\n</li>\n<li><p>The setting in the app config file.  </p>\n</li>\n<li><p>The registry setting.  </p>\n<p>The following is a simple application that passes a file URI to the <a class=\"xref\" href=\"system.io.path#System_IO_Path_GetDirectoryName_\" data-linktype=\"relative-path\">GetDirectoryName</a> method.  When run under the .NET Framework 4.6, it throws an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a> because <code>file://</code> is no longer a valid part of a file path.  </p>\n<pre><code class=\"lang-cs\" name=\"System.AppContext.Class#10\">using System;\nusing System.IO;\nusing System.Runtime.Versioning;\n\n[assembly:TargetFramework(&quot;.NETFramework,Version=v4.6.2&quot;)]\n\npublic class Example\n{\n   public static void Main()\n   {\n      Console.WriteLine(Path.GetDirectoryName(&quot;file://c/temp/dirlist.txt&quot;)); \n   }\n}\n// The example displays the following output:\n//    Unhandled Exception: System.ArgumentException: The path is not of a legal form.\n//       at System.IO.Path.NewNormalizePathLimitedChecks(String path, Int32 maxPathLength, Boolean expandShortPaths)\n//       at System.IO.Path.NormalizePath(String path, Boolean fullCheck, Int32 maxPathLength, Boolean expandShortPaths)\n//       at System.IO.Path.InternalGetDirectoryName(String path)\n//       at Example.Main()\n</code></pre><pre><code class=\"lang-vb\" name=\"System.AppContext.Class#10\">Imports System.IO\nImports System.Runtime.Versioning\n\n&lt;assembly:TargetFramework(&quot;.NETFramework,Version=v4.6.2&quot;)&gt;\n\nModule Example\n   Public Sub Main()\n      Console.WriteLine(Path.GetDirectoryName(&quot;file://c/temp/dirlist.txt&quot;)) \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    Unhandled Exception: System.ArgumentException: The path is not of a legal form.\n&#39;       at System.IO.Path.NewNormalizePathLimitedChecks(String path, Int32 maxPathLength, Boolean expandShortPaths)\n&#39;       at System.IO.Path.NormalizePath(String path, Boolean fullCheck, Int32 maxPathLength, Boolean expandShortPaths)\n&#39;       at System.IO.Path.InternalGetDirectoryName(String path)\n&#39;       at Example.Main()\n</code></pre><p>To restore the method&#39;s previous behavior and prevent the exception, you can add the <code>Switch.System.IO.UseLegacyPathHandling</code> switch to the application configuration file for the example:  </p>\n</li>\n</ol>\n<pre><code class=\"lang-xml\">\n&lt;configuration&gt;  \n    &lt;runtime&gt;  \n        &lt;AppContextSwitchOverrides value=&quot;Switch.System.IO.UseLegacyPathHandling=true&quot; /&gt;    \n    &lt;/runtime&gt;  \n&lt;/configuration&gt;  \n</code></pre>\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppContext_BaseDirectory\" data-linktype=\"self-bookmark\">BaseDirectory</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the pathname of the base directory that the assembly resolver uses to probe for assemblies.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppContext_SetSwitch_System_String_System_Boolean_\" data-linktype=\"self-bookmark\">SetSwitch(String,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the value of a switch.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppContext_TryGetSwitch_System_String_System_Boolean__\" data-linktype=\"self-bookmark\">TryGetSwitch(String,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Tries to get the value of a switch.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_AppContext_BaseDirectory\">\r\n    \r\n            <a id=\"System_AppContext_BaseDirectory_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BaseDirectory</div>        \r\n          </div>\r\n    \r\n            <p>Gets the pathname of the base directory that the assembly resolver uses to probe for assemblies.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string BaseDirectory { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>the pathname of the base directory that the assembly resolver uses to probe for assemblies.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This is a per application domain property. Its value corresponds to the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_BaseDirectory_\" data-linktype=\"relative-path\">BaseDirectory</a> property of the current application domain.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_AppContext_SetSwitch_System_String_System_Boolean_\">\r\n    \r\n            <a id=\"System_AppContext_SetSwitch_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetSwitch(String,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the value of a switch.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void SetSwitch (string switchName, bool isEnabled);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>switchName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the switch.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>isEnabled</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value of the switch.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>switchName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>switchName</code> is <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.appcontext\" data-linktype=\"relative-path\">AppContext</a> class enables library writers to provide a uniform opt-out mechanism for new functionality for their users. It establishes a loosely-coupled contract between components in order to communicate an opt-out request. This capability is typically important when a change is made to existing functionality. Conversely, there is already an implicit opt-in for new functionality.  </p>\n<p> The SetSwitch method is called by an application (or a library) to declare the value of a switch (which is always a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value) that a dependent library defines. The switch is always implicitly <code>false</code>, which provides the new behavior. Setting the switch to <code>true</code> enables it, which provides the legacy behavior. Explicitly setting the switch to <code>false</code> also provides the new behavior. The dependent library can then check the value of the switch by calling the <a class=\"xref\" href=\"system.appcontext#System_AppContext_TryGetSwitch_\" data-linktype=\"relative-path\">TryGetSwitch</a> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> It&#39;s beneficial to use a consistent format for switch names, since they are a formal contract exposed by a library. The following are two obvious formats.  </p>\n<ul>\n<li><em>Switch</em>.<em>namespace</em>.<em>switchname</em>  <ul>\n<li><em>Switch</em>.<em>library</em>.<em>switchname</em>  </li>\n</ul>\n</li>\n</ul>\n</div>\n<p> In addition to setting the value of a switch programmatically, it can also be set:  </p>\n<ul>\n<li><p>by adding the switch name and value to the <code>&lt;AppContextSwitchOverrides&gt;</code> element in the <a href=\"../Topic/%3Cruntime%3E%20Element.md\" data-linktype=\"relative-path\">&lt;runtime&gt;</a> section of an application configuration file. For example, the following defines a switch named <code>Libraries.FPLibrary.UseExactFloatingPointComparison</code> whose value is <code>False</code>.  </p>\n<pre><code class=\"lang-xml\">\n&lt;configuration&gt;  \n   &lt;runtime&gt;  \n      &lt;AppContextSwitchOverrides value=&quot;Libraries.FPLibrary.UseExactFloatingPointComparison=false&quot; /&gt;   \n   &lt;/runtime&gt;  \n&lt;/configuration&gt;  \n</code></pre></li>\n<li><p>by adding a string value whose name is the name of the switch to the <code>HKLM\\SOFTWARE\\Microsoft\\.NETFramework\\AppContext</code> key in the registry. Its value must be the string representation of a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> that can be parsed by the <a class=\"xref\" href=\"system.boolean#System_Boolean_Parse_\" data-linktype=\"relative-path\">Parse</a> method; that is, it must be &quot;True&quot;, &quot;true&quot;, &quot;False&quot;, or &quot;false&quot;.  </p>\n<p>If <code>switchName</code> already exists, its value is overwritten by the <code>isEnabled</code> argument.  That is, the most recent call to the SetSwitch method overrides the value defined in the registry, in an app configuration file, or by previous calls to the SetSwitch method.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following line of code sets a switch named <code>Switch.AmazingLib.ThrowOnException</code> to <code>true</code>, which enables a legacy behavior. The library can then check whether a library consumer has set the value of the switch by calling the <a class=\"xref\" href=\"system.appcontext#System_AppContext_TryGetSwitch_\" data-linktype=\"relative-path\">TryGetSwitch</a> method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.AppContext.Class#1\">      AppContext.SetSwitch(&quot;Switch.AmazingLib.ThrowOnException&quot;, true);\n</code></pre><pre><code class=\"lang-vb\" name=\"System.AppContext.Class#1\">      AppContext.SetSwitch(&quot;Switch.AmazingLib.ThrowOnException&quot;, True)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppContext_TryGetSwitch_System_String_System_Boolean__\">\r\n    \r\n            <a id=\"System_AppContext_TryGetSwitch_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryGetSwitch(String,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Tries to get the value of a switch.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool TryGetSwitch (string switchName, out bool isEnabled);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>switchName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the switch.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>isEnabled</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>When this method returns, contains the value of <code>switchName</code> if <code>switchName</code> was found, or <code>false</code> if <code>switchName</code> was not found. This parameter is passed uninitialized.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>switchName</code> was set and the <code>isEnabled</code> argument contains the value of the switch; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>switchName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>switchName</code> is <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.appcontext\" data-linktype=\"relative-path\">AppContext</a> class enables library writers to provide a uniform opt-out mechanism for new functionality for their users. It establishes a loosely-coupled contract between components in order to communicate an opt-out request. This capability is typically important when a change is made to existing functionality. Conversely, there is already an implicit opt-in for new functionality.  </p>\n<p> The common language runtime automatically populates the switches assigned to an <a class=\"xref\" href=\"system.appcontext\" data-linktype=\"relative-path\">AppContext</a> instance by reading the registry and the application&#39;s configuration file. The value of these switches can then be overridden, and new switches added, by calling the <a class=\"xref\" href=\"system.appcontext#System_AppContext_SetSwitch_\" data-linktype=\"relative-path\">SetSwitch</a> method.  </p>\n<p> A library calls the TryGetSwitch method to check whether its consumers have declared the value of the switch and then act appropriately on it.  By default, if the switch is not defined, the new functionality is enabled.. If the switch is defined and its value is <code>false</code>, the new functionality is also enabled. If its value is <code>true</code>, the legacy behavior is enabled.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines whether a library consumer has set a switch named <code>Switch.AmazingLib.ThrowOnException</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.AppContext.Class#2\">public class AmazingLib\n{\n   private bool shouldThrow;\n\n   public void PerformAnOperation()\n   {\n      if (!AppContext.TryGetSwitch(&quot;Switch.AmazingLib.ThrowOnException&quot;, out shouldThrow)) { \n         // This is the case where the switch value was not set by the application. \n         // The library can choose to get the value of shouldThrow by other means. \n         // If no overrides or default values are specified, the value should be &#39;false&#39;. \n         // A false value implies the latest behavior.\n      }\n\n      // The library can use the value of shouldThrow to throw exceptions or not.\n      if (shouldThrow) {\n         // old code\n      }\n      else {\n          // new code\n      }\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.AppContext.Class#2\">Public Class AmazingLib\n\n   Private shouldThrow As Boolean\n\n   Public Sub PerformAnOperation()\n      If Not AppContext.TryGetSwitch(&quot;Switch.AmazingLib.ThrowOnException&quot;, shouldThrow) Then \n         &#39; This is the case where the switch value was not set by the application. \n         &#39; The library can choose to get the value of shouldThrow by other means. \n         &#39; If no overrides or default values are specified, the value should be &#39;false&#39;. \n         &#39; A false value implies the latest behavior.\n      End If\n\n      &#39; The library can use the value of shouldThrow to throw exceptions or not.\n      If shouldThrow Then\n         &#39; old code\n      Else \n          &#39; new code\n      End If\n   End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/417c04fd1daf0cb211ec4909020356fc1fe69260/fulldocset/System.AppContext.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.AppContext.yml\">\r\n<meta name=\"APIName\" content=\"System.AppContext\">\r\n<meta name=\"APIName\" content=\"System.AppContext.BaseDirectory\">\r\n<meta name=\"APIName\" content=\"System.AppContext.SetSwitch\">\r\n<meta name=\"APIName\" content=\"System.AppContext.TryGetSwitch\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-02-28 06:06 AM\">\r\n<meta name=\"document_id\" content=\"5adccf84-b8d4-88ee-3075-d3cc6ed4c00d\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides members for setting and retrieving data about an application&amp;#39;s context.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.AppContext\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/417c04fd1daf0cb211ec4909020356fc1fe69260/fulldocset/System.AppContext.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.AppContext.yml","open_to_public_contributors":true,"api_name":["System.AppContext","System.AppContext.BaseDirectory","System.AppContext.SetSwitch","System.AppContext.TryGetSwitch"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.AppContext","System::AppContext","System.AppContext.BaseDirectory","System::AppContext::BaseDirectory","System.AppContext.SetSwitch","System::AppContext::SetSwitch","System.AppContext.TryGetSwitch","System::AppContext::TryGetSwitch"],"dev_langs":["csharp"],"updated_at":"2017-02-28 06:06 AM","document_id":"5adccf84-b8d4-88ee-3075-d3cc6ed4c00d","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/AppContext.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"AppContext class | Microsoft Docs","_op_ogTitle":"AppContext class","description":"Provides members for setting and retrieving data about an application&#39;s context.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.AppContext","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.appcontext","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.appcontext","fileRelativePath":"System.AppContext.html"},"themesRelativePathToOutputRoot":"_themes/"}