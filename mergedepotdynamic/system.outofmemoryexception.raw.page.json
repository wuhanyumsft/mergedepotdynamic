{"content":"\r\n<div style=\"display:none\">\r\n\t\r\n</div>\r\n\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">OutOfMemoryException</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>The exception that is thrown when there is not enough memory to continue the execution of a program.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic class OutOfMemoryException : SystemException</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div>\r\n  \t\t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a></span></div>\r\n  \t\t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.systemexception\" data-linktype=\"relative-path\">System.SystemException</a></span></div>\r\n  \t\t\t<span class=\"lang-csharp\">OutOfMemoryException</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.exception#System_Exception_Data\" data-linktype=\"relative-path\">Data</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.exception#System_Exception_GetBaseException\" data-linktype=\"relative-path\">GetBaseException()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.exception#System_Exception_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"relative-path\">GetObjectData(SerializationInfo,StreamingContext)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.exception#System_Exception_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.exception#System_Exception_HelpLink\" data-linktype=\"relative-path\">HelpLink</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.exception#System_Exception_HResult\" data-linktype=\"relative-path\">HResult</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.exception#System_Exception_InnerException\" data-linktype=\"relative-path\">InnerException</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.exception#System_Exception_Message\" data-linktype=\"relative-path\">Message</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.exception#System_Exception_SerializeObjectState\" data-linktype=\"relative-path\">SerializeObjectState</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.exception#System_Exception_Source\" data-linktype=\"relative-path\">Source</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.exception#System_Exception_StackTrace\" data-linktype=\"relative-path\">StackTrace</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.exception#System_Exception_TargetSite\" data-linktype=\"relative-path\">TargetSite</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.exception#System_Exception_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>An OutOfMemoryException exception has two major causes:  </p>\n<ul>\n<li><p>You are attempting to expand a <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object beyond the length defined by its <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_MaxCapacity_\" data-linktype=\"relative-path\">MaxCapacity</a> property.  </p>\n</li>\n<li><p>The common language runtime cannot allocate enough contiguous memory to successfully perform an operation. This exception can be thrown by any property assignment or method call that requires a memory allocation. For more information on the cause of the OutOfMemoryException exception, see <a href=\"http://blogs.msdn.com/b/ericlippert/archive/2009/06/08/out-of-memory-does-not-refer-to-physical-memory.aspx\" data-linktype=\"external\">&quot;Out of Memory&quot; Does Not Refer to Physical Memory</a>.  </p>\n<p> This type of OutOfMemoryException exception represents a catastrophic failure. If you choose to handle the exception, you should include a <code>catch</code> block that calls the <a class=\"xref\" href=\"system.environment#System_Environment_FailFast_\" data-linktype=\"relative-path\">FailFast</a> method to terminate your app and add an entry to the system event log, as the following example does.  </p>\n<pre><code class=\"lang-cs\" name=\"System.OutOfMemoryException#2\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      try {\n         // Outer block to handle any unexpected exceptions.\n         try {\n            string s = &quot;This&quot;;\n            s = s.Insert(2, &quot;is &quot;);\n\n            // Throw an OutOfMemoryException exception.\n            throw new OutOfMemoryException();\n         }\n         catch (ArgumentException) {\n            Console.WriteLine(&quot;ArgumentException in String.Insert&quot;);\n         }\n\n         // Execute program logic.\n      }\n      catch (OutOfMemoryException e) {\n         Console.WriteLine(&quot;Terminating application unexpectedly...&quot;);\n         Environment.FailFast(String.Format(&quot;Out of Memory: {0}&quot;,\n                                            e.Message));\n      }\n   }\n}\n// The example displays the following output:\n//        Terminating application unexpectedly...\n</code></pre><pre><code class=\"lang-vb\" name=\"System.OutOfMemoryException#2\">Module Example\n   Public Sub Main()\n      Try\n         &#39; Outer block to handle any unexpected exceptions.\n         Try\n            Dim s As String = &quot;This&quot;\n            s = s.Insert(2, &quot;is &quot;)\n\n            &#39; Throw an OutOfMemoryException exception.\n            Throw New OutOfMemoryException()\n         Catch e As ArgumentException\n            Console.WriteLine(&quot;ArgumentException in String.Insert&quot;)\n         End Try\n         \n         &#39; Execute program logic.\n\n      Catch e As OutOfMemoryException\n         Console.WriteLine(&quot;Terminating application unexpectedly...&quot;)\n         Environment.FailFast(String.Format(&quot;Out of Memory: {0}&quot;,\n                                            e.Message))\n      End Try\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Terminating application unexpectedly...\n</code></pre><p>Some of the conditions under which the exception is thrown and the actions you can take to eliminate it include the following:  </p>\n<p>You are calling the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Insert_\" data-linktype=\"relative-path\">Insert</a> method.<br>You are attempting to increase the length of a <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object beyond the size specified by its <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_MaxCapacity_\" data-linktype=\"relative-path\">MaxCapacity</a> property. The following example illustrates the OutOfMemoryException exception thrown by a call to the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Insert_System_Int32_System_String_System_Int32_\" data-linktype=\"relative-path\">System.Text.StringBuilder.Insert(Int32,String,Int32)</a> method when the example tries to insert a string that would cause the object&#39;s <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Length_\" data-linktype=\"relative-path\">Length</a> property to exceed its maximum capacity.  </p>\n<pre><code class=\"lang-vb\" name=\"System.OutOfMemoryException#1\">Imports System.Text\n\nModule Example\n   Public Sub Main()\n      Dim sb As New StringBuilder(15, 15)\n      sb.Append(&quot;Substring #1 &quot;)\n      Try\n         sb.Insert(0, &quot;Substring #2 &quot;, 1)\n      Catch e As OutOfMemoryException\n         Console.WriteLine(&quot;Out of Memory: {0}&quot;, e.Message)\n      End Try\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;   Out of Memory: Insufficient memory to continue the execution of the program.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.OutOfMemoryException#1\">using System;\nusing System.Text;\n\npublic class Example\n{\n   public static void Main()\n   {\n      StringBuilder sb = new StringBuilder(15, 15);\n      sb.Append(&quot;Substring #1 &quot;);\n      try {\n         sb.Insert(0, &quot;Substring #2 &quot;, 1);\n      }\n      catch (OutOfMemoryException e) {\n         Console.WriteLine(&quot;Out of Memory: {0}&quot;, e.Message);\n      }\n   }\n}\n// The example displays the following output:\n//    Out of Memory: Insufficient memory to continue the execution of the program.\n</code></pre><p>You can do either of the following to address the error:  </p>\n</li>\n<li><p>Replace the call to the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder__ctor_System_Int32_System_Int32_\" data-linktype=\"relative-path\">System.Text.StringBuilder.StringBuilder(Int32,Int32)</a> constructor with a call any other <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> constructor overload. The maximum capacity of your <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object will be set to its default value, which is <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">System.Int32.MaxValue</a>.  </p>\n</li>\n<li><p>Call the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder__ctor_System_Int32_System_Int32_\" data-linktype=\"relative-path\">System.Text.StringBuilder.StringBuilder(Int32,Int32)</a> constructor with a <code>maxCapacity</code> value that is large enough to accommodate any expansions to the <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object.  </p>\n<p>Your app runs as a 32-bit process.<br>32-bit processes can allocate a maximum of 2GB of virtual user-mode memory on 32-bit systems, and 4GB of virtual user-mode memory on 64-bit systems. This can make it more difficult for the common language runtime to allocate sufficient contiguous memory when a large allocation is needed. In contrast, 64-bit processes can allocate up to 8TB of virtual memory. To address this exception, recompile your app to target a 64-bit platform. For information on targeting specific platforms in Visual Studio, see <a href=\"../Topic/How%20to:%20Configure%20Projects%20to%20Target%20Platforms.md\" data-linktype=\"relative-path\">How to: Configure Projects to Target Platforms</a>.  </p>\n<p>Your app is leaking unmanaged resources<br>Although the garbage collector is able to free memory allocated to managed types, it does not manage memory allocated to unmanaged resources such as operating system handles (including handles to files, memory-mapped files, pipes, registry keys, and wait handles) and memory blocks allocated directly by Windows API calls or by calls to memory allocation functions such as <code>malloc</code>. Types that consume unmanaged resources implement the <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface.  </p>\n<p>If you are consuming a type that uses unmanaged resources, you should be sure to call its <a class=\"xref\" href=\"system.idisposable#System_IDisposable_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method when you have finished using it. (Some types also implement a <code>Close</code> method that is identical in function to a <code>Dispose</code> method.) For more information, see the <a href=\"../Topic/Using%20Objects%20That%20Implement%20IDisposable.md\" data-linktype=\"relative-path\">Using Objects That Implement IDisposable</a> topic.  </p>\n<p>If you have created a type that uses unmanaged resources, make sure that you have implemented the Dispose pattern and, if necessary, supplied a finalizer. For more information, see the <a href=\"../Topic/Dispose%20Pattern.md\" data-linktype=\"relative-path\">Dispose Pattern</a>, <a href=\"../Topic/Implementing%20a%20Dispose%20Method.md\" data-linktype=\"relative-path\">Implementing a Dispose Method</a>, and <a class=\"xref\" href=\"system.object#System_Object_Finalize_\" data-linktype=\"relative-path\">Finalize</a> topics.  </p>\n<p>You are attempting to create a large array in a 64-bit process.<br>By default, the common language runtime does not allow single objects whose size exceeds 2GB. To override this default, you can use the  configuration file setting to enable arrays whose total size exceeds 2 GB.  </p>\n<p>You are working with very large sets of data (such as arrays, collections, or database data sets) in memory.<br>When data structures or data sets that reside in memory become so large that the common language runtime is unable to allocate enough contiguous memory for them, an OutOfMemoryException exception results.  </p>\n<p>To prevent the OutOfMemoryException exceptions, you must modify your application so that less data is resident in memory, or the data is divided into segments that require smaller memory allocations. For example:  </p>\n</li>\n<li><p>If you are retrieving all of the data from a database and then filtering it in your app to minimize trips to the server, you should modify your queries to return only the subset of data that your app needs. When working with large tables, multiple queries are almost always more efficient than retrieving all of the data in a single table and then manipulating it.  </p>\n</li>\n<li><p>If you are executing queries that users create dynamically, you should ensure that the number of records returned by the query is limited.  </p>\n</li>\n<li><p>If you are using large arrays or other collection objects whose size results in an OutOfMemoryException exception, you should modify your application to work the data in subsets rather than to work with it all at once.  </p>\n<p>The following example gets a array that consists of 200 million floating-point values and then calculates their mean. The output from the example shows that, because the example stores the entire array in memory before it calculates the mean, an OutOfMemoryException is is thrown.  </p>\n<pre><code class=\"lang-vb\" name=\"System.OutOfMemoryException#3\">Imports System.Collections.Generic\n\nModule Example\n   Public Sub Main()\n      Dim values() As Double = GetData()\n      &#39; Compute mean.\n      Console.WriteLine(&quot;Sample mean: {0}, N = {1}&quot;,\n                        GetMean(values), values.Length)\n   End Sub\n   \n   Private Function GetData() As Double()\n      Dim rnd As New Random()\n      Dim values As New List(Of Double)()\n      For ctr As Integer = 1 To 200000000\n         values.Add(rnd.NextDouble)\n         If ctr Mod 10000000 = 0 Then\n            Console.WriteLine(&quot;Retrieved {0:N0} items of data.&quot;,\n                              ctr)\n         End If\n      Next\n      Return values.ToArray()\n   End Function\n   \n   Private Function GetMean(values() As Double) As Double\n      Dim sum As Double = 0\n      For Each value In values\n         sum += value\n      Next\n      Return sum / values.Length\n   End Function\nEnd Module\n&#39; The example displays output like the following:\n&#39;    Retrieved 10,000,000 items of data.\n&#39;    Retrieved 20,000,000 items of data.\n&#39;    Retrieved 30,000,000 items of data.\n&#39;    Retrieved 40,000,000 items of data.\n&#39;    Retrieved 50,000,000 items of data.\n&#39;    Retrieved 60,000,000 items of data.\n&#39;    Retrieved 70,000,000 items of data.\n&#39;    Retrieved 80,000,000 items of data.\n&#39;    Retrieved 90,000,000 items of data.\n&#39;    Retrieved 100,000,000 items of data.\n&#39;    Retrieved 110,000,000 items of data.\n&#39;    Retrieved 120,000,000 items of data.\n&#39;    Retrieved 130,000,000 items of data.\n&#39;\n&#39;    Unhandled Exception: OutOfMemoryException.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.OutOfMemoryException#3\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Double[] values = GetData();\n      // Compute mean.\n      Console.WriteLine(&quot;Sample mean: {0}, N = {1}&quot;,\n                        GetMean(values), values.Length);\n   }\n\n   private static Double[] GetData()\n   {\n      Random rnd = new Random();\n      List&lt;Double&gt; values = new List&lt;Double&gt;();\n      for (int ctr = 1; ctr &lt;= 200000000; ctr++) {\n         values.Add(rnd.NextDouble());\n         if (ctr % 10000000 == 0)\n            Console.WriteLine(&quot;Retrieved {0:N0} items of data.&quot;,\n                              ctr);\n      }\n      return values.ToArray();\n   }\n\n   private static Double GetMean(Double[] values)\n   {\n      Double sum = 0;\n      foreach (var value in values)\n         sum += value;\n\n      return sum / values.Length;\n   }\n}\n// The example displays output like the following:\n//    Retrieved 10,000,000 items of data.\n//    Retrieved 20,000,000 items of data.\n//    Retrieved 30,000,000 items of data.\n//    Retrieved 40,000,000 items of data.\n//    Retrieved 50,000,000 items of data.\n//    Retrieved 60,000,000 items of data.\n//    Retrieved 70,000,000 items of data.\n//    Retrieved 80,000,000 items of data.\n//    Retrieved 90,000,000 items of data.\n//    Retrieved 100,000,000 items of data.\n//    Retrieved 110,000,000 items of data.\n//    Retrieved 120,000,000 items of data.\n//    Retrieved 130,000,000 items of data.\n//\n//    Unhandled Exception: OutOfMemoryException.\n</code></pre><p>The following example eliminates the OutOfMemoryException exception by processing the incoming data without storing the entire data set in memory, serializing the data to a file if necessary to permit further processing (these lines are commented out in the example, since in this case they produce a file whose size is greater than 1GB), and returning the calculated mean and the number of cases to the calling routine.  </p>\n<pre><code class=\"lang-cs\" name=\"System.OutOfMemoryException#4\">using System;\nusing System.IO;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Tuple&lt;Double, long&gt; result = GetResult();\n      Console.WriteLine(&quot;Sample mean: {0}, N = {1:N0}&quot;,\n                        result.Item1, result.Item2);\n   }\n\n   private static Tuple&lt;Double, long&gt; GetResult()\n   {\n      int chunkSize = 50000000;\n      int nToGet = 200000000;\n      Random rnd = new Random();\n      // FileStream fs = new FileStream(@&quot;.\\data.bin&quot;, FileMode.Create);\n      // BinaryWriter bin = new BinaryWriter(fs);\n      // bin.Write((int)0);\n      int n = 0;\n      Double sum = 0;\n      for (int outer = 0;\n           outer &lt;= ((int) Math.Ceiling(nToGet * 1.0 / chunkSize) - 1);\n           outer++) {\n         for (int inner = 0;\n              inner &lt;= Math.Min(nToGet - n - 1, chunkSize - 1);\n              inner++) {\n            Double value = rnd.NextDouble();\n            sum += value;\n            n++;\n            // bin.Write(value);\n         }\n      }\n      // bin.Seek(0, SeekOrigin.Begin);\n      // bin.Write(n);\n      // bin.Close();\n      return new Tuple&lt;Double, long&gt;(sum/n, n);\n   }\n}\n// The example displays output like the following:\n//    Sample mean: 0.500022771458399, N = 200,000,000\n</code></pre><pre><code class=\"lang-vb\" name=\"System.OutOfMemoryException#4\">Imports System.IO\n\nModule Example\n   Public Sub Main()\n      Dim result As Tuple(Of Double, Long) = GetResult()\n      Console.WriteLine(&quot;Sample mean: {0}, N = {1:N0}&quot;,\n                        result.Item1, result.Item2)\n   End Sub\n\n   Private Function GetResult As Tuple(Of Double, Long)\n      Dim chunkSize As Integer = 50000000\n      Dim nToGet As Integer = 200000000\n      Dim rnd As New Random()\n&#39;       Dim fs As New FileStream(&quot;.\\data.bin&quot;, FileMode.Create)\n&#39;       Dim bin As New BinaryWriter(fs)\n&#39;       bin.Write(CInt(0))\n      Dim n As Integer\n      Dim sum As Double\n      For outer As Integer = 0 To CInt(Math.Ceiling(nToGet/chunkSize) - 1)\n         For inner = 0 To Math.Min(nToGet - n - 1, chunkSize - 1)\n            Dim value As Double = rnd.NextDouble()\n            sum += value\n            n += 1\n&#39;            bin.Write(value)\n         Next\n      Next\n&#39;       bin.Seek(0, SeekOrigin.Begin)\n&#39;       bin.Write(n)\n&#39;       bin.Close()\n      Return New Tuple(Of Double, Long)(sum/n, n)\n   End Function\nEnd Module\n&#39; The example displays output like the following:\n&#39;   Sample mean: 0.500022771458399, N = 200,000,000\n</code></pre><p>You are repeatedly concatenating large strings.<br>Because strings are immutable, each string concatenation operation creates a new string. The impact for small strings, or for a small number of concatenation operations, is negligible. But for large strings or a very large number of concatenation operations, string concatenation can lead to a large number of memory allocations and memory fragmentation, poor performance, and possibly OutOfMemoryException exceptions.  </p>\n<p>When concatenating large strings or performing a large number of concatenation operations, you should use the <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> class instead of the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> class. When you have finished manipulating the string, convert the <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> instance to a string by calling the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_ToString_\" data-linktype=\"relative-path\">ToString</a> method.  </p>\n<p>You pin a large number of objects in memory.<br>Pinning a large number of objects in memory for long periods can make it difficult for the garbage collector to allocate contiguous blocks of memory. If you&#39;ve pinned a large number of objects in memory, for example by using the <code>fixed</code> statement in C# or by calling the <a class=\"xref\" href=\"system.runtime.interopservices.gchandle#System_Runtime_InteropServices_GCHandle_Alloc_System_Object_System_Runtime_InteropServices_GCHandleType_\" data-linktype=\"relative-path\">System.Runtime.InteropServices.GCHandle.Alloc(Object,GCHandleType)</a> method with a handle type of <a class=\"xref\" href=\"system.runtime.interopservices.gchandletype\" data-linktype=\"relative-path\">System.Runtime.InteropServices.GCHandleType</a>, you can do the following to address the OutOfMemoryException exception.  </p>\n</li>\n<li><p>Evaluate whether each object really needs to be pinned,  </p>\n</li>\n<li><p>Ensure that each object is unpinned as soon as possible.  </p>\n</li>\n<li><p>Make sure that each call to the <a class=\"xref\" href=\"system.runtime.interopservices.gchandle#System_Runtime_InteropServices_GCHandle_Alloc_System_Object_System_Runtime_InteropServices_GCHandleType_\" data-linktype=\"relative-path\">System.Runtime.InteropServices.GCHandle.Alloc(Object,GCHandleType)</a> method to pin memory has a corresponding call to the <a class=\"xref\" href=\"system.runtime.interopservices.gchandle#System_Runtime_InteropServices_GCHandle_Free_\" data-linktype=\"relative-path\">Free</a> method to unpin that memory.  </p>\n<p>The following Microsoft intermediate (MSIL) instructions throw an OutOfMemoryException exception:  </p>\n</li>\n<li><p><a href=\"http://msdn.microsoft.com/library/system.reflection.emit.opcodes.box.aspx\" data-linktype=\"external\">box</a>  </p>\n</li>\n<li><p><a href=\"http://msdn.microsoft.com/library/system.reflection.emit.opcodes.newarr.aspx\" data-linktype=\"external\">newarr</a>  </p>\n</li>\n<li><p><a href=\"http://msdn.microsoft.com/library/system.reflection.emit.opcodes.newobj.aspx\" data-linktype=\"external\">newobj</a>newobj  </p>\n<p>OutOfMemoryException uses the HRESULT <code>COR_E_OUTOFMEMORY</code>, which has the value 0x8007000E.  </p>\n<p>For a list of initial property values for an instance of OutOfMemoryException, see the <a class=\"xref\" href=\"system.outofmemoryexception#System_OutOfMemoryException__ctor_\" data-linktype=\"relative-path\">OutOfMemoryException</a> constructors.  </p>\n</li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> The value of the inherited <a class=\"xref\" href=\"system.exception#System_Exception_Data_\" data-linktype=\"relative-path\">Data</a> property is always <code>null</code>.</p>\n</div>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_OutOfMemoryException__ctor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OutOfMemoryException()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public OutOfMemoryException ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This constructor initializes the <a class=\"xref\" href=\"system.exception#System_Exception_Message_\" data-linktype=\"relative-path\">Message</a> property of the new instance to a system-supplied message that describes the error, such as &quot;There was not enough memory to continue the execution of the program.&quot; This message takes into account the current system culture.  </p>\n<p> The following table shows the initial property values for an instance of <a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a>.  </p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.exception#System_Exception_InnerException_\" data-linktype=\"relative-path\">InnerException</a></td>\n<td><code>null</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.exception#System_Exception_Message_\" data-linktype=\"relative-path\">Message</a></td>\n<td>The localized error message string.</td>\n</tr>\n</tbody>\n</table>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_OutOfMemoryException__ctor_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OutOfMemoryException(String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a> class with a specified error message.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public OutOfMemoryException (string message);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>message</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The message that describes the error.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The content of the <code>message</code> parameter is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.  </p>\n<p> The following table shows the initial property values for an instance of <a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a>.  </p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.exception#System_Exception_InnerException_\" data-linktype=\"relative-path\">InnerException</a></td>\n<td>A null reference (<code>Nothing</code> in Visual Basic).</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.exception#System_Exception_Message_\" data-linktype=\"relative-path\">Message</a></td>\n<td>The error message string.</td>\n</tr>\n</tbody>\n</table>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_OutOfMemoryException__ctor_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OutOfMemoryException(SerializationInfo,StreamingContext)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a> class with serialized data.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected OutOfMemoryException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>info</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The object that holds the serialized object data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>context</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The contextual information about the source or destination.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This constructor is called during deserialization to reconstitute the exception object transmitted over a stream. For more information, see <a href=\"../Topic/XML%20and%20SOAP%20Serialization.md\" data-linktype=\"relative-path\">XML and SOAP Serialization</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_OutOfMemoryException__ctor_System_String_System_Exception_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OutOfMemoryException(String,Exception)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a> class with a specified error message and a reference to the inner exception that is the cause of this exception.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public OutOfMemoryException (string message, Exception innerException);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>message</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The error message that explains the reason for the exception.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>innerException</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The exception that is the cause of the current exception. If the <code>innerException</code> parameter is not a null reference (<code>Nothing</code> in Visual Basic), the current exception is raised in a <code>catch</code> block that handles the inner exception.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>An exception that is thrown as a direct result of a previous exception can include a reference to the previous exception in the <a class=\"xref\" href=\"system.exception#System_Exception_InnerException_\" data-linktype=\"relative-path\">InnerException</a> property. The <a class=\"xref\" href=\"system.exception#System_Exception_InnerException_\" data-linktype=\"relative-path\">InnerException</a> property returns the same value that is passed into the constructor, or a null reference (<code>Nothing</code> in Visual Basic) if the <a class=\"xref\" href=\"system.exception#System_Exception_InnerException_\" data-linktype=\"relative-path\">InnerException</a> property does not supply the inner exception value to the constructor.  </p>\n<p> The following table shows the initial property values for an instance of <a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a>.  </p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.exception#System_Exception_InnerException_\" data-linktype=\"relative-path\">InnerException</a></td>\n<td>The inner exception reference.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.exception#System_Exception_Message_\" data-linktype=\"relative-path\">Message</a></td>\n<td>The error message string.</td>\n</tr>\n</tbody>\n</table>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.OutOfMemoryException.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.OutOfMemoryException.yml\">\r\n<meta name=\"APIName\" content=\"System.OutOfMemoryException\">\r\n<meta name=\"APIName\" content=\"System.OutOfMemoryException..ctor\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"5b228080-832f-589b-e72a-3ad1418c5877\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"The exception that is thrown when there is not enough memory to continue the execution of a program.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.OutOfMemoryException\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.OutOfMemoryException.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.OutOfMemoryException.yml","open_to_public_contributors":true,"api_name":["System.OutOfMemoryException","System.OutOfMemoryException..ctor"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.OutOfMemoryException","System::OutOfMemoryException","System.OutOfMemoryException.#ctor","System::OutOfMemoryException::#ctor"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"5b228080-832f-589b-e72a-3ad1418c5877","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/OutOfMemoryException.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"OutOfMemoryException class | Microsoft Docs","_op_ogTitle":"OutOfMemoryException class","description":"The exception that is thrown when there is not enough memory to continue the execution of a program.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.OutOfMemoryException","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.outofmemoryexception","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.outofmemoryexception","fileRelativePath":"System.OutOfMemoryException.html"},"themesRelativePathToOutputRoot":"_themes/"}