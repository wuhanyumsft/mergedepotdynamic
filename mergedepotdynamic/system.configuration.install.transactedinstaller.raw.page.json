{"content":"    \r\n    <h1 id=\"System_Configuration_Install_TransactedInstaller\">\r\n      <span class=\"lang-csharp\">TransactedInstaller</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Defines an installer that either succeeds completely or fails and leaves the computer in its initial state.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class TransactedInstaller : System.Configuration.Install.Installer</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component\" data-linktype=\"relative-path\">Component</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l3\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.configuration.install.installer\" data-linktype=\"relative-path\">System.Configuration.Install.Installer</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l4\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">TransactedInstaller</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_CanRaiseEvents\" data-linktype=\"relative-path\">CanRaiseEvents</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Container\" data-linktype=\"relative-path\">Container</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_DesignMode\" data-linktype=\"relative-path\">DesignMode</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Dispose\" data-linktype=\"relative-path\">Dispose()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Dispose_System_Boolean_\" data-linktype=\"relative-path\">Dispose(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Disposed\" data-linktype=\"relative-path\">Disposed</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Events\" data-linktype=\"relative-path\">Events</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_GetService_System_Type_\" data-linktype=\"relative-path\">GetService(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Site\" data-linktype=\"relative-path\">Site</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.configuration.install.installer#System_Configuration_Install_Installer_AfterInstall\" data-linktype=\"relative-path\">AfterInstall</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.configuration.install.installer#System_Configuration_Install_Installer_AfterRollback\" data-linktype=\"relative-path\">AfterRollback</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.configuration.install.installer#System_Configuration_Install_Installer_AfterUninstall\" data-linktype=\"relative-path\">AfterUninstall</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.configuration.install.installer#System_Configuration_Install_Installer_BeforeInstall\" data-linktype=\"relative-path\">BeforeInstall</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.configuration.install.installer#System_Configuration_Install_Installer_BeforeRollback\" data-linktype=\"relative-path\">BeforeRollback</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.configuration.install.installer#System_Configuration_Install_Installer_BeforeUninstall\" data-linktype=\"relative-path\">BeforeUninstall</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.configuration.install.installer#System_Configuration_Install_Installer_Commit_System_Collections_IDictionary_\" data-linktype=\"relative-path\">Commit(IDictionary)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.configuration.install.installer#System_Configuration_Install_Installer_Committed\" data-linktype=\"relative-path\">Committed</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.configuration.install.installer#System_Configuration_Install_Installer_Committing\" data-linktype=\"relative-path\">Committing</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.configuration.install.installer#System_Configuration_Install_Installer_Context\" data-linktype=\"relative-path\">Context</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.configuration.install.installer#System_Configuration_Install_Installer_HelpText\" data-linktype=\"relative-path\">HelpText</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.configuration.install.installer#System_Configuration_Install_Installer_Installers\" data-linktype=\"relative-path\">Installers</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.configuration.install.installer#System_Configuration_Install_Installer_OnAfterInstall_System_Collections_IDictionary_\" data-linktype=\"relative-path\">OnAfterInstall(IDictionary)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.configuration.install.installer#System_Configuration_Install_Installer_OnAfterRollback_System_Collections_IDictionary_\" data-linktype=\"relative-path\">OnAfterRollback(IDictionary)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.configuration.install.installer#System_Configuration_Install_Installer_OnAfterUninstall_System_Collections_IDictionary_\" data-linktype=\"relative-path\">OnAfterUninstall(IDictionary)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.configuration.install.installer#System_Configuration_Install_Installer_OnBeforeInstall_System_Collections_IDictionary_\" data-linktype=\"relative-path\">OnBeforeInstall(IDictionary)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.configuration.install.installer#System_Configuration_Install_Installer_OnBeforeRollback_System_Collections_IDictionary_\" data-linktype=\"relative-path\">OnBeforeRollback(IDictionary)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.configuration.install.installer#System_Configuration_Install_Installer_OnBeforeUninstall_System_Collections_IDictionary_\" data-linktype=\"relative-path\">OnBeforeUninstall(IDictionary)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.configuration.install.installer#System_Configuration_Install_Installer_OnCommitted_System_Collections_IDictionary_\" data-linktype=\"relative-path\">OnCommitted(IDictionary)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.configuration.install.installer#System_Configuration_Install_Installer_OnCommitting_System_Collections_IDictionary_\" data-linktype=\"relative-path\">OnCommitting(IDictionary)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.configuration.install.installer#System_Configuration_Install_Installer_Parent\" data-linktype=\"relative-path\">Parent</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.configuration.install.installer#System_Configuration_Install_Installer_Rollback_System_Collections_IDictionary_\" data-linktype=\"relative-path\">Rollback(IDictionary)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_CreateObjRef_System_Type_\" data-linktype=\"relative-path\">CreateObjRef(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_GetLifetimeService\" data-linktype=\"relative-path\">GetLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_InitializeLifetimeService\" data-linktype=\"relative-path\">InitializeLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_MemberwiseClone_System_Boolean_\" data-linktype=\"relative-path\">MemberwiseClone(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>To run installers in a transaction, add them to the <a class=\"xref\" href=\"system.configuration.install.installer#System_Configuration_Install_Installer_Installers_\" data-linktype=\"relative-path\">Installers</a> property of this TransactedInstaller instance.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Configuration_Install_TransactedInstaller__ctor\" data-linktype=\"self-bookmark\">TransactedInstaller()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.configuration.install.transactedinstaller\" data-linktype=\"relative-path\">TransactedInstaller</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Configuration_Install_TransactedInstaller_Install_System_Collections_IDictionary_\" data-linktype=\"self-bookmark\">Install(IDictionary)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Performs the installation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Configuration_Install_TransactedInstaller_Uninstall_System_Collections_IDictionary_\" data-linktype=\"self-bookmark\">Uninstall(IDictionary)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes an installation.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Configuration_Install_TransactedInstaller__ctor\">\r\n    \r\n            <a id=\"System_Configuration_Install_TransactedInstaller__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TransactedInstaller()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.configuration.install.transactedinstaller\" data-linktype=\"relative-path\">TransactedInstaller</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TransactedInstaller ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Configuration_Install_TransactedInstaller_Install_System_Collections_IDictionary_\">\r\n    \r\n            <a id=\"System_Configuration_Install_TransactedInstaller_Install_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Install(IDictionary)</div>        \r\n          </div>\r\n    \r\n            <p>Performs the installation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void Install (System.Collections.IDictionary savedState);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>savedState</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> in which this method saves information needed to perform a commit, rollback, or uninstall operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>savedState</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a></div>\r\n                  </div>\r\n                  <p>The installation failed, and is being rolled back.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method calls the Install method of each installer contained in the <a class=\"xref\" href=\"system.configuration.install.installer#System_Configuration_Install_Installer_Installers_\" data-linktype=\"relative-path\">Installers</a> property of this instance. The <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object referenced by the <code>savedState</code> parameter is updated to reflect the status of the installation after the contained installers have run. If all the Install methods succeed, the <a class=\"xref\" href=\"system.configuration.install.installer#System_Configuration_Install_Installer_Commit_\" data-linktype=\"relative-path\">Commit</a> method is called. Otherwise, the <a class=\"xref\" href=\"system.configuration.install.installer#System_Configuration_Install_Installer_Rollback_\" data-linktype=\"relative-path\">Rollback</a> method is called for each installer.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <a class=\"xref\" href=\"system.configuration.install.transactedinstaller#System_Configuration_Install_TransactedInstaller__ctor_\" data-linktype=\"relative-path\">TransactedInstaller</a>, Install and <a class=\"xref\" href=\"system.configuration.install.transactedinstaller#System_Configuration_Install_TransactedInstaller_Uninstall_\" data-linktype=\"relative-path\">Uninstall</a> methods of the <a class=\"xref\" href=\"system.configuration.install.transactedinstaller\" data-linktype=\"relative-path\">TransactedInstaller</a> class.  </p>\n<p> This example provides an implementation similar to that of InstallUtil.exe. It installs assemblies with the options preceding that particular assembly. If an option is not specified for an assembly, the previous assemblies options are taken if there is a previous assembly in the list. If the &#39;/u&#39; or &#39;/uninstall&#39; option is specified then the assemblies are uninstalled. If the &#39;/?&#39; or &#39;/help&#39; option is provided then the help information is printed to the console.  </p>\n<pre><code class=\"lang-cpp\" name=\"TransactedInstaller#1\">   array&lt;String^&gt;^ args = Environment::GetCommandLineArgs();\n   ArrayList^ myOptions = gcnew ArrayList;\n   String^ myOption;\n   bool toUnInstall = false;\n   bool toPrintHelp = false;\n   TransactedInstaller^ myTransactedInstaller = gcnew TransactedInstaller;\n   AssemblyInstaller^ myAssemblyInstaller;\n   InstallContext^ myInstallContext;\n\n   try\n   {\n      for ( int i = 1; i &lt; args-&gt;Length; i++ )\n      {\n         // Process the arguments.\n         if ( args[ i ]-&gt;StartsWith( &quot;/&quot; ) || args[ i ]-&gt;StartsWith( &quot;-&quot; ) )\n         {\n            myOption = args[ i ]-&gt;Substring( 1 );\n            // Determine whether the option is to &#39;uninstall&#39; an assembly.\n            if ( String::Compare( myOption, &quot;u&quot;, true ) == 0 ||\n               String::Compare( myOption, &quot;uninstall&quot;, true ) == 0 )\n            {\n               toUnInstall = true;\n               continue;\n            }\n            // Determine whether the option is for printing help information.\n            if ( String::Compare( myOption, &quot;?&quot;, true ) == 0 ||\n               String::Compare( myOption, &quot;help&quot;, true ) == 0 )\n            {\n               toPrintHelp = true;\n               continue;\n            }\n            // Add the option encountered to the list of all options\n            // encountered for the current assembly.\n            myOptions-&gt;Add( myOption );\n         }\n         else\n         {\n            // Determine whether the assembly file exists.\n            if (  !File::Exists( args[ i ] ) )\n            {\n               // If assembly file doesn&#39;t exist then print error.\n               Console::WriteLine( &quot;<br>Error : {0} - Assembly file doesn&#39;t exist.&quot;,\n                  args[ i ] );\n               return 0;\n            }\n            \n            // Create a instance of &#39;AssemblyInstaller&#39; that installs the given assembly.\n            myAssemblyInstaller =\n               gcnew AssemblyInstaller( args[ i ],\n                  (array&lt;String^&gt;^)( myOptions-&gt;ToArray( String::typeid ) ) );\n            // Add the instance of &#39;AssemblyInstaller&#39; to the &#39;TransactedInstaller&#39;.\n            myTransactedInstaller-&gt;Installers-&gt;Add( myAssemblyInstaller );\n         }\n      }\n      \n      // If user requested help or didn&#39;t provide any assemblies to install\n      // then print help message.\n      if ( toPrintHelp || myTransactedInstaller-&gt;Installers-&gt;Count == 0 )\n      {\n         PrintHelpMessage();\n         return 0;\n      }\n      \n      // Create a instance of &#39;InstallContext&#39; with the options specified.\n      myInstallContext =\n         gcnew InstallContext( &quot;Install.log&quot;,\n            (array&lt;String^&gt;^)( myOptions-&gt;ToArray( String::typeid ) ) );\n      myTransactedInstaller-&gt;Context = myInstallContext;\n      \n      // Install or Uninstall an assembly depending on the option provided.\n      if (  !toUnInstall )\n      {\n         myTransactedInstaller-&gt;Install( gcnew Hashtable );\n      }\n      else\n      {\n         myTransactedInstaller-&gt;Uninstall( nullptr );\n      }\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;<br>Exception raised : {0}&quot;, e-&gt;Message );\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"TransactedInstaller#1\">      Dim options As New ArrayList()\n      Dim myOption As String\n      Dim toUnInstall As Boolean = False\n      Dim toPrintHelp As Boolean = False\n      Dim myTransactedInstaller As New TransactedInstaller()\n      Dim myAssemblyInstaller As AssemblyInstaller\n      Dim myInstallContext As InstallContext\n\n      Try\n         Dim i As Integer\n         For i = 1 To args.Length - 1\n            &#39; Process the arguments.\n            If args(i).StartsWith(&quot;/&quot;) Or args(i).StartsWith(&quot;-&quot;) Then\n               myOption = args(i).Substring(1)\n               &#39; Determine whether the option is to &#39;uninstall&#39; an assembly.\n               If String.Compare(myOption, &quot;u&quot;, True) = 0 Or _\n                  String.Compare(myOption,&quot;uninstall&quot;, True) = 0 Then\n                  toUnInstall = True\n                  GoTo ContinueFor1\n               End If\n               &#39; Determine whether the option is for printing help information.\n               If String.Compare(myOption, &quot;?&quot;, True) = 0 Or _\n                  String.Compare(myOption, &quot;help&quot;, True) = 0 Then\n                  toPrintHelp = True\n                  GoTo ContinueFor1\n               End If\n               &#39; Add the option encountered to the list of all options\n               &#39; encountered for the current assembly.\n               options.Add(myOption)\n            Else\n               &#39; Determine whether the assembly file exists.\n               If Not File.Exists(args(i)) Then\n                  &#39; If assembly file doesn&#39;t exist then print error.\n                  Console.WriteLine(ControlChars.Newline + _\n                           &quot;Error : {0} - Assembly file doesn&#39;t exist.&quot;, args(i))\n                  Return\n               End If\n\n               &#39; Create a instance of &#39;AssemblyInstaller&#39; that installs the given assembly.\n               myAssemblyInstaller = New AssemblyInstaller(args(i), _\n                              CType(options.ToArray(GetType(String)), String()))\n               &#39; Add the instance of &#39;AssemblyInstaller&#39; to the &#39;TransactedInstaller&#39;.\n               myTransactedInstaller.Installers.Add(myAssemblyInstaller)\n            End If\n         ContinueFor1:\n         Next i\n         &#39; If user requested help or didn&#39;t provide any assemblies to install\n         &#39; then print help message.\n         If toPrintHelp Or myTransactedInstaller.Installers.Count = 0 Then\n            PrintHelpMessage()\n            Return\n         End If\n\n         &#39; Create a instance of &#39;InstallContext&#39; with the options specified.\n         myInstallContext = New InstallContext(&quot;Install.log&quot;, _\n                     CType(options.ToArray(GetType(String)), String()))\n         myTransactedInstaller.Context = myInstallContext\n\n         &#39; Install or Uninstall an assembly depending on the option provided.\n         If Not toUnInstall Then\n            myTransactedInstaller.Install(New Hashtable())\n         Else\n            myTransactedInstaller.Uninstall(Nothing)\n         End If\n      Catch e As Exception\n         Console.WriteLine(ControlChars.Newline + &quot;Exception raised : {0}&quot;, e.Message)\n      End Try\n</code></pre><pre><code class=\"lang-cs\" name=\"TransactedInstaller#1\">      ArrayList myOptions = new ArrayList();\n      String myOption;\n      bool toUnInstall = false;\n      bool toPrintHelp = false;\n      TransactedInstaller myTransactedInstaller = new TransactedInstaller();\n      AssemblyInstaller myAssemblyInstaller;\n      InstallContext myInstallContext;\n\n      try\n      {\n         for(int i = 0; i &lt; args.Length; i++)\n         {\n            // Process the arguments.\n            if(args[i].StartsWith(&quot;/&quot;) || args[i].StartsWith(&quot;-&quot;))\n            {\n               myOption = args[i].Substring(1);\n               // Determine whether the option is to &#39;uninstall&#39; an assembly.\n               if(String.Compare(myOption, &quot;u&quot;, true) == 0 ||\n                  String.Compare(myOption, &quot;uninstall&quot;, true) == 0)\n               {\n                  toUnInstall = true;\n                  continue;\n               }\n               // Determine whether the option is for printing help information.\n               if(String.Compare(myOption, &quot;?&quot;, true) == 0 ||\n                  String.Compare(myOption, &quot;help&quot;, true) == 0)\n               {\n                  toPrintHelp = true;\n                  continue;\n               }\n               // Add the option encountered to the list of all options\n               // encountered for the current assembly.\n               myOptions.Add(myOption);\n            }\n            else\n            {\n               // Determine whether the assembly file exists.\n               if(!File.Exists(args[i]))\n               {\n                  // If assembly file doesn&#39;t exist then print error.\n                  Console.WriteLine(&quot;<br>Error : {0} - Assembly file doesn&#39;t exist.&quot;,\n                     args[i]);\n                  return;\n               }\n            \n               // Create a instance of &#39;AssemblyInstaller&#39; that installs the given assembly.\n               myAssemblyInstaller = \n                  new AssemblyInstaller(args[i], \n                  (string[]) myOptions.ToArray(typeof(string)));\n               // Add the instance of &#39;AssemblyInstaller&#39; to the &#39;TransactedInstaller&#39;.  \n               myTransactedInstaller.Installers.Add(myAssemblyInstaller);\n            }\n         }\n         // If user requested help or didn&#39;t provide any assemblies to install\n         // then print help message.\n         if(toPrintHelp || myTransactedInstaller.Installers.Count == 0)\n         {\n            PrintHelpMessage();\n            return;\n         }\n\n         // Create a instance of &#39;InstallContext&#39; with the options specified.\n         myInstallContext = \n            new InstallContext(&quot;Install.log&quot;, \n            (string[]) myOptions.ToArray(typeof(string)));\n         myTransactedInstaller.Context = myInstallContext;\n\n         // Install or Uninstall an assembly depending on the option provided.\n         if(!toUnInstall)\n            myTransactedInstaller.Install(new Hashtable());\n         else\n            myTransactedInstaller.Uninstall(null);\n      }\n      catch(Exception e)\n      {\n         Console.WriteLine(&quot;<br>Exception raised : {0}&quot;, e.Message);\n      }  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Configuration_Install_TransactedInstaller_Uninstall_System_Collections_IDictionary_\">\r\n    \r\n            <a id=\"System_Configuration_Install_TransactedInstaller_Uninstall_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Uninstall(IDictionary)</div>        \r\n          </div>\r\n    \r\n            <p>Removes an installation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void Uninstall (System.Collections.IDictionary savedState);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>savedState</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> that contains the state of the computer after the installation completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Call this method to remove a previously completed installation. This Uninstall method calls the <a class=\"xref\" href=\"system.configuration.install.installer#System_Configuration_Install_Installer_Uninstall_\" data-linktype=\"relative-path\">Uninstall</a> method of each installer in the <a class=\"xref\" href=\"system.configuration.install.installer#System_Configuration_Install_Installer_Installers_\" data-linktype=\"relative-path\">Installers</a> property to uninstall any resources set during installation. Any exceptions during uninstallation are ignored.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Although the <a class=\"xref\" href=\"system.configuration.install.installer#System_Configuration_Install_Installer_Install_\" data-linktype=\"relative-path\">Install</a> and <a class=\"xref\" href=\"system.configuration.install.installer#System_Configuration_Install_Installer_Commit_\" data-linktype=\"relative-path\">Commit</a> methods save the state of the computer after the installations, the file containing the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> from the <code>savedState</code> parameter might have been deleted at some point after the installation was complete. If the file is deleted, the <code>savedState</code> parameter is <code>null</code>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <a class=\"xref\" href=\"system.configuration.install.transactedinstaller#System_Configuration_Install_TransactedInstaller__ctor_\" data-linktype=\"relative-path\">TransactedInstaller</a>, <a class=\"xref\" href=\"system.configuration.install.transactedinstaller#System_Configuration_Install_TransactedInstaller_Install_\" data-linktype=\"relative-path\">Install</a> and Uninstall methods of the <a class=\"xref\" href=\"system.configuration.install.transactedinstaller\" data-linktype=\"relative-path\">TransactedInstaller</a> class.  </p>\n<p> This example provides an implementation similar to that of <a href=\"../Topic/Installutil.exe%20(Installer%20Tool).md\" data-linktype=\"relative-path\">Installutil.exe (Installer Tool)</a>. It installs assemblies with the options preceding that particular assembly. If an option is not specified for an assembly, the previous assembly&#39;s options are used if there is a previous assembly in the list. If either the &quot;/u&quot; or &quot;/uninstall&quot; option is specified, the assemblies are uninstalled. If the &quot;/?&quot; or &quot;/help&quot; option is provided, the help information is displayed to the console.  </p>\n<pre><code class=\"lang-cpp\" name=\"TransactedInstaller#1\">   array&lt;String^&gt;^ args = Environment::GetCommandLineArgs();\n   ArrayList^ myOptions = gcnew ArrayList;\n   String^ myOption;\n   bool toUnInstall = false;\n   bool toPrintHelp = false;\n   TransactedInstaller^ myTransactedInstaller = gcnew TransactedInstaller;\n   AssemblyInstaller^ myAssemblyInstaller;\n   InstallContext^ myInstallContext;\n\n   try\n   {\n      for ( int i = 1; i &lt; args-&gt;Length; i++ )\n      {\n         // Process the arguments.\n         if ( args[ i ]-&gt;StartsWith( &quot;/&quot; ) || args[ i ]-&gt;StartsWith( &quot;-&quot; ) )\n         {\n            myOption = args[ i ]-&gt;Substring( 1 );\n            // Determine whether the option is to &#39;uninstall&#39; an assembly.\n            if ( String::Compare( myOption, &quot;u&quot;, true ) == 0 ||\n               String::Compare( myOption, &quot;uninstall&quot;, true ) == 0 )\n            {\n               toUnInstall = true;\n               continue;\n            }\n            // Determine whether the option is for printing help information.\n            if ( String::Compare( myOption, &quot;?&quot;, true ) == 0 ||\n               String::Compare( myOption, &quot;help&quot;, true ) == 0 )\n            {\n               toPrintHelp = true;\n               continue;\n            }\n            // Add the option encountered to the list of all options\n            // encountered for the current assembly.\n            myOptions-&gt;Add( myOption );\n         }\n         else\n         {\n            // Determine whether the assembly file exists.\n            if (  !File::Exists( args[ i ] ) )\n            {\n               // If assembly file doesn&#39;t exist then print error.\n               Console::WriteLine( &quot;<br>Error : {0} - Assembly file doesn&#39;t exist.&quot;,\n                  args[ i ] );\n               return 0;\n            }\n            \n            // Create a instance of &#39;AssemblyInstaller&#39; that installs the given assembly.\n            myAssemblyInstaller =\n               gcnew AssemblyInstaller( args[ i ],\n                  (array&lt;String^&gt;^)( myOptions-&gt;ToArray( String::typeid ) ) );\n            // Add the instance of &#39;AssemblyInstaller&#39; to the &#39;TransactedInstaller&#39;.\n            myTransactedInstaller-&gt;Installers-&gt;Add( myAssemblyInstaller );\n         }\n      }\n      \n      // If user requested help or didn&#39;t provide any assemblies to install\n      // then print help message.\n      if ( toPrintHelp || myTransactedInstaller-&gt;Installers-&gt;Count == 0 )\n      {\n         PrintHelpMessage();\n         return 0;\n      }\n      \n      // Create a instance of &#39;InstallContext&#39; with the options specified.\n      myInstallContext =\n         gcnew InstallContext( &quot;Install.log&quot;,\n            (array&lt;String^&gt;^)( myOptions-&gt;ToArray( String::typeid ) ) );\n      myTransactedInstaller-&gt;Context = myInstallContext;\n      \n      // Install or Uninstall an assembly depending on the option provided.\n      if (  !toUnInstall )\n      {\n         myTransactedInstaller-&gt;Install( gcnew Hashtable );\n      }\n      else\n      {\n         myTransactedInstaller-&gt;Uninstall( nullptr );\n      }\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;<br>Exception raised : {0}&quot;, e-&gt;Message );\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"TransactedInstaller#1\">      Dim options As New ArrayList()\n      Dim myOption As String\n      Dim toUnInstall As Boolean = False\n      Dim toPrintHelp As Boolean = False\n      Dim myTransactedInstaller As New TransactedInstaller()\n      Dim myAssemblyInstaller As AssemblyInstaller\n      Dim myInstallContext As InstallContext\n\n      Try\n         Dim i As Integer\n         For i = 1 To args.Length - 1\n            &#39; Process the arguments.\n            If args(i).StartsWith(&quot;/&quot;) Or args(i).StartsWith(&quot;-&quot;) Then\n               myOption = args(i).Substring(1)\n               &#39; Determine whether the option is to &#39;uninstall&#39; an assembly.\n               If String.Compare(myOption, &quot;u&quot;, True) = 0 Or _\n                  String.Compare(myOption,&quot;uninstall&quot;, True) = 0 Then\n                  toUnInstall = True\n                  GoTo ContinueFor1\n               End If\n               &#39; Determine whether the option is for printing help information.\n               If String.Compare(myOption, &quot;?&quot;, True) = 0 Or _\n                  String.Compare(myOption, &quot;help&quot;, True) = 0 Then\n                  toPrintHelp = True\n                  GoTo ContinueFor1\n               End If\n               &#39; Add the option encountered to the list of all options\n               &#39; encountered for the current assembly.\n               options.Add(myOption)\n            Else\n               &#39; Determine whether the assembly file exists.\n               If Not File.Exists(args(i)) Then\n                  &#39; If assembly file doesn&#39;t exist then print error.\n                  Console.WriteLine(ControlChars.Newline + _\n                           &quot;Error : {0} - Assembly file doesn&#39;t exist.&quot;, args(i))\n                  Return\n               End If\n\n               &#39; Create a instance of &#39;AssemblyInstaller&#39; that installs the given assembly.\n               myAssemblyInstaller = New AssemblyInstaller(args(i), _\n                              CType(options.ToArray(GetType(String)), String()))\n               &#39; Add the instance of &#39;AssemblyInstaller&#39; to the &#39;TransactedInstaller&#39;.\n               myTransactedInstaller.Installers.Add(myAssemblyInstaller)\n            End If\n         ContinueFor1:\n         Next i\n         &#39; If user requested help or didn&#39;t provide any assemblies to install\n         &#39; then print help message.\n         If toPrintHelp Or myTransactedInstaller.Installers.Count = 0 Then\n            PrintHelpMessage()\n            Return\n         End If\n\n         &#39; Create a instance of &#39;InstallContext&#39; with the options specified.\n         myInstallContext = New InstallContext(&quot;Install.log&quot;, _\n                     CType(options.ToArray(GetType(String)), String()))\n         myTransactedInstaller.Context = myInstallContext\n\n         &#39; Install or Uninstall an assembly depending on the option provided.\n         If Not toUnInstall Then\n            myTransactedInstaller.Install(New Hashtable())\n         Else\n            myTransactedInstaller.Uninstall(Nothing)\n         End If\n      Catch e As Exception\n         Console.WriteLine(ControlChars.Newline + &quot;Exception raised : {0}&quot;, e.Message)\n      End Try\n</code></pre><pre><code class=\"lang-cs\" name=\"TransactedInstaller#1\">      ArrayList myOptions = new ArrayList();\n      String myOption;\n      bool toUnInstall = false;\n      bool toPrintHelp = false;\n      TransactedInstaller myTransactedInstaller = new TransactedInstaller();\n      AssemblyInstaller myAssemblyInstaller;\n      InstallContext myInstallContext;\n\n      try\n      {\n         for(int i = 0; i &lt; args.Length; i++)\n         {\n            // Process the arguments.\n            if(args[i].StartsWith(&quot;/&quot;) || args[i].StartsWith(&quot;-&quot;))\n            {\n               myOption = args[i].Substring(1);\n               // Determine whether the option is to &#39;uninstall&#39; an assembly.\n               if(String.Compare(myOption, &quot;u&quot;, true) == 0 ||\n                  String.Compare(myOption, &quot;uninstall&quot;, true) == 0)\n               {\n                  toUnInstall = true;\n                  continue;\n               }\n               // Determine whether the option is for printing help information.\n               if(String.Compare(myOption, &quot;?&quot;, true) == 0 ||\n                  String.Compare(myOption, &quot;help&quot;, true) == 0)\n               {\n                  toPrintHelp = true;\n                  continue;\n               }\n               // Add the option encountered to the list of all options\n               // encountered for the current assembly.\n               myOptions.Add(myOption);\n            }\n            else\n            {\n               // Determine whether the assembly file exists.\n               if(!File.Exists(args[i]))\n               {\n                  // If assembly file doesn&#39;t exist then print error.\n                  Console.WriteLine(&quot;<br>Error : {0} - Assembly file doesn&#39;t exist.&quot;,\n                     args[i]);\n                  return;\n               }\n            \n               // Create a instance of &#39;AssemblyInstaller&#39; that installs the given assembly.\n               myAssemblyInstaller = \n                  new AssemblyInstaller(args[i], \n                  (string[]) myOptions.ToArray(typeof(string)));\n               // Add the instance of &#39;AssemblyInstaller&#39; to the &#39;TransactedInstaller&#39;.  \n               myTransactedInstaller.Installers.Add(myAssemblyInstaller);\n            }\n         }\n         // If user requested help or didn&#39;t provide any assemblies to install\n         // then print help message.\n         if(toPrintHelp || myTransactedInstaller.Installers.Count == 0)\n         {\n            PrintHelpMessage();\n            return;\n         }\n\n         // Create a instance of &#39;InstallContext&#39; with the options specified.\n         myInstallContext = \n            new InstallContext(&quot;Install.log&quot;, \n            (string[]) myOptions.ToArray(typeof(string)));\n         myTransactedInstaller.Context = myInstallContext;\n\n         // Install or Uninstall an assembly depending on the option provided.\n         if(!toUnInstall)\n            myTransactedInstaller.Install(new Hashtable());\n         else\n            myTransactedInstaller.Uninstall(null);\n      }\n      catch(Exception e)\n      {\n         Console.WriteLine(&quot;<br>Exception raised : {0}&quot;, e.Message);\n      }  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Configuration.Install.TransactedInstaller.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Configuration.Install.TransactedInstaller.yml\">\r\n<meta name=\"APIName\" content=\"System.Configuration.Install.TransactedInstaller\">\r\n<meta name=\"APIName\" content=\"System.Configuration.Install.TransactedInstaller..ctor\">\r\n<meta name=\"APIName\" content=\"System.Configuration.Install.TransactedInstaller.Install\">\r\n<meta name=\"APIName\" content=\"System.Configuration.Install.TransactedInstaller.Uninstall\">\r\n<meta name=\"APILocation\" content=\"System.Configuration.Install.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"7bc21e3b-344b-a5a0-a1f5-8eeb6a33b408\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\o2y0\\s\\fulldocset\\xml\\System.Configuration.Install\\TransactedInstaller.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Defines an installer that either succeeds completely or fails and leaves the computer in its initial state.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Configuration.Install/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Configuration.Install.TransactedInstaller\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Configuration.Install.TransactedInstaller.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Configuration.Install.TransactedInstaller.yml","open_to_public_contributors":true,"api_name":["System.Configuration.Install.TransactedInstaller","System.Configuration.Install.TransactedInstaller..ctor","System.Configuration.Install.TransactedInstaller.Install","System.Configuration.Install.TransactedInstaller.Uninstall"],"api_location":["System.Configuration.Install.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Configuration.Install.TransactedInstaller","System::Configuration::Install::TransactedInstaller","System.Configuration.Install.TransactedInstaller.#ctor","System::Configuration::Install::TransactedInstaller::#ctor","System.Configuration.Install.TransactedInstaller.Install","System::Configuration::Install::TransactedInstaller::Install","System.Configuration.Install.TransactedInstaller.Uninstall","System::Configuration::Install::TransactedInstaller::Uninstall"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"7bc21e3b-344b-a5a0-a1f5-8eeb6a33b408","original_ecmaxml_local_path":"W:\\o2y0\\s\\fulldocset\\xml\\System.Configuration.Install\\TransactedInstaller.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Configuration.Install/TransactedInstaller.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"TransactedInstaller class | Microsoft Docs","_op_ogTitle":"TransactedInstaller class","description":"Defines an installer that either succeeds completely or fails and leaves the computer in its initial state.\n","toc_asset_id":"_splitted/System.Configuration.Install/toc.json","toc_rel":"_splitted/System.Configuration.Install/toc.json","source_url":"","ms.assetid":"System.Configuration.Install.TransactedInstaller","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.configuration.install.transactedinstaller","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.configuration.install.transactedinstaller","fileRelativePath":"System.Configuration.Install.TransactedInstaller.html"},"themesRelativePathToOutputRoot":"_themes/"}