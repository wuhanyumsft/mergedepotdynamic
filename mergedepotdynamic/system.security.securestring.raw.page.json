{"content":"    \r\n    <h1 id=\"System_Security_SecureString\">\r\n      <span class=\"lang-csharp\">SecureString</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents text that should be kept confidential, such as by deleting it from computer memory when no longer needed. This class cannot be inherited.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public sealed class SecureString : IDisposable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">SecureString</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>SecureString is a string type that provides a measure of security. It tries to avoid storing potentially sensitive strings in process memory as plain text.  (For limitations, however, see the <a href=\"#HowSecure\" data-linktype=\"self-bookmark\">How secure is SecureString?</a> section.) The value of an instance of SecureString is automatically protected using a mechanism supported by the underlying platform when the instance is initialized or when the value is modified. Your application can render the instance immutable and prevent further modification by invoking the <a class=\"xref\" href=\"system.security.securestring#System_Security_SecureString_MakeReadOnly_\" data-linktype=\"relative-path\">MakeReadOnly</a> method.  </p>\n<p> The maximum length of a SecureString instance is 65,536 characters.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> This type implements the <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface. When you have finished using an instance of the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <a class=\"xref\" href=\"system.idisposable#System_IDisposable_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method in a <code>try</code>/<code>catch</code> block. To dispose of it indirectly, use a language construct such as <code>using</code> (in C#) or <code>Using</code> (in Visual Basic). For more information, see the â€œUsing an Object that Implements IDisposableâ€ section in the <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface topic.  </p>\n</div>\n<p> The SecureString class and its members are not visible to COM. For more information, see <a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a>.  </p>\n<p> In this section:  </p>\n<p> <a href=\"#vsString\" data-linktype=\"self-bookmark\">String vs. SecureString</a><br> <a href=\"#Ops\" data-linktype=\"self-bookmark\">SecureString operations</a><br> <a href=\"#interop\" data-linktype=\"self-bookmark\">SecureString and interop</a><br> <a href=\"#HowSecure\" data-linktype=\"self-bookmark\">How secure is  SecureString?</a>  </p>\n<p><a name=\"vsString\"></a>   </p>\n<h2 id=\"string-versus-securestring\">String versus SecureString</h2>\n<p> An instance of the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">System.String</a> class is both immutable and, when no longer needed, cannot be programmatically scheduled for garbage collection; that is, the instance is read-only after it is created, and it is not possible to predict when the instance will be deleted from computer memory. Because <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">System.String</a> instances are immutable, operations that appear to modify an existing instance  actually create a copy of it to manipulate. Consequently, if a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object contains sensitive information such as a password, credit card number, or personal data, there is a risk the information could be revealed after it is used because your application cannot delete the data from computer memory.  </p>\n<p> A SecureString object is similar to a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object in that it has a text value. However, the value of a SecureString object is pinned in memory, may use a protection mechanism, such as encryption, provided by the underlying operating system, can be modified until your application marks it as read-only, and can be deleted from computer memory either by your application calling the <a class=\"xref\" href=\"system.security.securestring#System_Security_SecureString_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method  or by the .NET Framework garbage collector.  </p>\n<p> For a discussion of the limitations of the SecureString class, see the <a href=\"#HowSecure\" data-linktype=\"self-bookmark\">How secure is  SecureString?</a> section.  </p>\n<p> <a href=\"#top\" data-linktype=\"self-bookmark\">Back to top</a>  </p>\n<p><a name=\"Ops\"></a>   </p>\n<h2 id=\"securestring-operations\">SecureString operations</h2>\n<p> The SecureString class includes members that allow you to do the following:  </p>\n<p> Instantiate a SecureString object<br> You instantiate a SecureString object by calling its parameterless constructor.  </p>\n<p> Add characters to a SecureString object<br> You can add a single character at a time to a SecureString object  by calling its <a class=\"xref\" href=\"system.security.securestring#System_Security_SecureString_AppendChar_\" data-linktype=\"relative-path\">AppendChar</a> or <a class=\"xref\" href=\"system.security.securestring#System_Security_SecureString_InsertAt_\" data-linktype=\"relative-path\">InsertAt</a> method.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> A SecureString object should never be constructed from a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, because the sensitive data is already subject to the memory persistence consequences of the immutable <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> class. The best way to construct a SecureString object is from a character-at-a-time unmanaged source, such as the <a class=\"xref\" href=\"system.console#System_Console_ReadKey_\" data-linktype=\"relative-path\">ReadKey</a> method.  </p>\n</div>\n<p> Remove characters from a SecureString object<br> You can replace an individual character by calling the <a class=\"xref\" href=\"system.security.securestring#System_Security_SecureString_SetAt_\" data-linktype=\"relative-path\">SetAt</a> method, remove an individual character by calling the <a class=\"xref\" href=\"system.security.securestring#System_Security_SecureString_RemoveAt_\" data-linktype=\"relative-path\">RemoveAt</a> method, or remove all characters from the SecureString instance by calling the  <a class=\"xref\" href=\"system.security.securestring#System_Security_SecureString_Clear_\" data-linktype=\"relative-path\">Clear</a> method.  </p>\n<p> Make the SecureString object read-only<br> Once you have defined the string that the SecureString object represents, you call its  <a class=\"xref\" href=\"system.security.securestring#System_Security_SecureString_MakeReadOnly_\" data-linktype=\"relative-path\">MakeReadOnly</a> method to make the string read-only.  </p>\n<p> Get information about the SecureString object<br> The SecureString class has only two members that provide information about the string: its <a class=\"xref\" href=\"system.security.securestring#System_Security_SecureString_Length_\" data-linktype=\"relative-path\">Length</a> property, which indicates the number of UTF16-encoded code units in the string; and the <a class=\"xref\" href=\"system.security.securestring#System_Security_SecureString_IsReadOnly_\" data-linktype=\"relative-path\">IsReadOnly</a>, method, which indicates whether the instance is read-only.  </p>\n<p> Release the memory allocated to the SecureString instance<br> Because SecureString implements the <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface, you release its memory by calling the <a class=\"xref\" href=\"system.security.securestring#System_Security_SecureString_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method.  </p>\n<p> The SecureString class has no members that inspect, compare, or convert the value of a SecureString. The absence of such members helps protect the value of the instance from accidental or malicious exposure. Use appropriate members of the <a class=\"xref\" href=\"system.runtime.interopservices.marshal\" data-linktype=\"relative-path\">System.Runtime.InteropServices.Marshal</a> class, such as the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_SecureStringToBSTR_\" data-linktype=\"relative-path\">SecureStringToBSTR</a> method, to manipulate the value of a SecureString object.  </p>\n<p> The .NET Framework Class Library commonly uses SecureString instances in the following ways:  </p>\n<ul>\n<li><p>To provide password information to a process by using the <a class=\"xref\" href=\"system.diagnostics.processstartinfo\" data-linktype=\"relative-path\">ProcessStartInfo</a> structure or by calling an overload of the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_Start_\" data-linktype=\"relative-path\">Start</a> method that has a parameter of type SecureString.  </p>\n</li>\n<li><p>To provide network password information by calling a <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> class constructor that has a parameter of type SecureString or by using the <a class=\"xref\" href=\"system.net.networkcredential#System_Net_NetworkCredential_SecurePassword_\" data-linktype=\"relative-path\">SecurePassword</a> property.  </p>\n</li>\n<li><p>To provide password information for SQL Server Authentication by calling the <a class=\"xref\" href=\"system.data.sqlclient.sqlcredential#System_Data_SqlClient_SqlCredential__ctor_\" data-linktype=\"relative-path\">SqlCredential</a> constructor or retrieving the value of the <a class=\"xref\" href=\"system.data.sqlclient.sqlcredential#System_Data_SqlClient_SqlCredential_Password_\" data-linktype=\"relative-path\">Password</a> property.  </p>\n</li>\n<li><p>To pass a string to unmanaged code. For more information, see the <a href=\"#interop\" data-linktype=\"self-bookmark\">SecureString and interop</a> section.  </p>\n<p><a href=\"#top\" data-linktype=\"self-bookmark\">Back to top</a>  </p>\n</li>\n</ul>\n<p><a name=\"interop\"></a>   </p>\n<h2 id=\"securestring-and-interop\">SecureString and interop</h2>\n<p> Because the operating system does not  directly support SecureString, you must convert the value of the SecureString object to the required string type before passing the string to a native method.  The <a class=\"xref\" href=\"system.runtime.interopservices.marshal\" data-linktype=\"relative-path\">Marshal</a> class has five methods that do this:  </p>\n<ul>\n<li><p><a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_SecureStringToBSTR_\" data-linktype=\"relative-path\">SecureStringToBSTR</a>, which converts the SecureString string value to a binary string (BSTR) recognized by COM.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_SecureStringToCoTaskMemAnsi_\" data-linktype=\"relative-path\">SecureStringToCoTaskMemAnsi</a> and <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_SecureStringToGlobalAllocAnsi_\" data-linktype=\"relative-path\">SecureStringToGlobalAllocAnsi</a>, which copy the SecureString string value to an ANSI string in unmanaged memory.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_SecureStringToCoTaskMemUnicode_\" data-linktype=\"relative-path\">SecureStringToCoTaskMemUnicode</a> and <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_SecureStringToCoTaskMemUnicode_\" data-linktype=\"relative-path\">SecureStringToCoTaskMemUnicode</a>, which copy the SecureString string value to a Unicode string in unmanaged memory.  </p>\n<p>Each of these methods creates a clear-text string in unmanaged memory. It is the responsibility of the developer to zero out and free that memory as soon as it is no longer needed. Each of the string conversion and memory allocation methods has a corresponding method to zero out and free the allocated memory:  </p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Allocation and conversion method</th>\n<th>Zero and free method</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_SecureStringToBSTR_\" data-linktype=\"relative-path\">SecureStringToBSTR</a></td>\n<td><a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_ZeroFreeBSTR_\" data-linktype=\"relative-path\">ZeroFreeBSTR</a></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_SecureStringToCoTaskMemAnsi_\" data-linktype=\"relative-path\">SecureStringToCoTaskMemAnsi</a></td>\n<td><a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_ZeroFreeCoTaskMemAnsi_\" data-linktype=\"relative-path\">ZeroFreeCoTaskMemAnsi</a></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_SecureStringToCoTaskMemUnicode_\" data-linktype=\"relative-path\">SecureStringToCoTaskMemUnicode</a></td>\n<td><a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_ZeroFreeCoTaskMemUnicode_\" data-linktype=\"relative-path\">ZeroFreeCoTaskMemUnicode</a></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_SecureStringToGlobalAllocAnsi_\" data-linktype=\"relative-path\">SecureStringToGlobalAllocAnsi</a></td>\n<td><a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_ZeroFreeGlobalAllocAnsi_\" data-linktype=\"relative-path\">ZeroFreeGlobalAllocAnsi</a></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_SecureStringToCoTaskMemUnicode_\" data-linktype=\"relative-path\">SecureStringToCoTaskMemUnicode</a></td>\n<td><a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_ZeroFreeGlobalAllocUnicode_\" data-linktype=\"relative-path\">ZeroFreeGlobalAllocUnicode</a></td>\n</tr>\n</tbody>\n</table>\n<p> <a href=\"#top\" data-linktype=\"self-bookmark\">Back to top</a>  </p>\n<p><a name=\"HowSecure\"></a>   </p>\n<h2 id=\"how-secure-is-securestring\">How secure is SecureString?</h2>\n<p> When created properly, a SecureString instance provides more data protection than a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>. When creating a string from a character-at-a-time source, <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> creates multiple intermediate in memory, whereas  SecureString creates just a single instance.  Garbage collection of <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects  is non-deterministic. In addition, because its memory is not pinned, the garbage collector will make additional copies of <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> values when moving and compacting memory. In contrast, the memory allocated to a SecureString object is pinned,  and that memory can be freed by calling the <a class=\"xref\" href=\"system.security.securestring#System_Security_SecureString_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method.  </p>\n<p> Although data stored in a SecureString instance is more secure than data stored in a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> instance, there are significant limitations on how secure a SecureString instance is. These include:  </p>\n<p> Platform<br> On the Windows operating system, the contents of a SecureString instance&#39;s internal character array is encrypted. However, whether because of missing APIs or key management issues,  encryption is not available on all platforms. Because of this, SecureString is available on Desktop (Windows only), and not on .NET Core.  </p>\n<p> Duration<br> Even if the SecureString implementation is able to take advantage of encryption, the plain text assigned to the SecureString instance may be exposed at various times:  </p>\n<ul>\n<li><p>Because Windows doesn&#39;t offer a secure string implementation at the operating system level, the .NET Framework still has to convert the secure string value to its plain text representation in order to use it.  </p>\n</li>\n<li><p>Whenever the value of the secure string is modified by methods such as <a class=\"xref\" href=\"system.security.securestring#System_Security_SecureString_AppendChar_\" data-linktype=\"relative-path\">AppendChar</a> or <a class=\"xref\" href=\"system.security.securestring#System_Security_SecureString_RemoveAt_\" data-linktype=\"relative-path\">RemoveAt</a>, it must be decrypted (i.e., converted back to plain text), modified, and then encrypted again.  </p>\n</li>\n<li><p>If the secure string is used in an interop call, it must be converted to an ANSI string, a Unicode string, or a binary string (BSTR). For more information, see the <a href=\"#interop\" data-linktype=\"self-bookmark\">SecureString and interop</a> section.  </p>\n<p>The time interval for which the SecureString instance&#39;s value is exposed  is merely shortened in comparison to the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> class.  </p>\n<p>Storage versus usage<br>More generally, the SecureString class defines a storage mechanism for string values that should be protected or kept confidential. However, outside of the .NET Framework itself, no usage mechanism supports SecureString. This means that the secure string must be converted to a usable form (typically a clear text form) that can be recognized by its target, and     that decryption and conversion must occur in user space.  </p>\n<p>Overall, SecureString is more secure than <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> because it limits the exposure of sensitive string data. However, those strings may still be exposed to any process or operation that has access to raw memory, such as a malicious process running on the host computer, a process dump, or a user-viewable swap file. Instead of using SecureString to protect passwords, the recommended alternative is to use an opaque handle to credentials that are stored outside of the process.  </p>\n<p><a href=\"#top\" data-linktype=\"self-bookmark\">Back to top</a></p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_SecureString__ctor\" data-linktype=\"self-bookmark\">SecureString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_SecureString__ctor_System_Char__System_Int32_\" data-linktype=\"self-bookmark\">SecureString(Char*,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a> class from a subarray of <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> objects.  </p>\n<p> This constructor is not CLS-compliant. The CLS-compliant alternative is <span class=\"xref\">stem.Security.SecureString.#ctor</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_SecureString_Length\" data-linktype=\"self-bookmark\">Length</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the number of characters in the current secure string.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_SecureString_AppendChar_System_Char_\" data-linktype=\"self-bookmark\">AppendChar(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Appends a character to the end of the current secure string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_SecureString_Clear\" data-linktype=\"self-bookmark\">Clear()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Deletes the value of the current secure string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_SecureString_Copy\" data-linktype=\"self-bookmark\">Copy()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a copy of the current secure string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_SecureString_Dispose\" data-linktype=\"self-bookmark\">Dispose()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases all resources used by the current <a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_SecureString_InsertAt_System_Int32_System_Char_\" data-linktype=\"self-bookmark\">InsertAt(Int32,Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Inserts a character in this secure string at the specified index position.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_SecureString_IsReadOnly\" data-linktype=\"self-bookmark\">IsReadOnly()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether this secure string is marked read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_SecureString_MakeReadOnly\" data-linktype=\"self-bookmark\">MakeReadOnly()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Makes the text value of this secure string read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_SecureString_RemoveAt_System_Int32_\" data-linktype=\"self-bookmark\">RemoveAt(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes the character at the specified index position from this secure string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_SecureString_SetAt_System_Int32_System_Char_\" data-linktype=\"self-bookmark\">SetAt(Int32,Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Replaces the existing character at the specified index position with another character.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_SecureString__ctor\">\r\n    \r\n            <a id=\"System_Security_SecureString__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SecureString()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public SecureString ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>An error occurred while protecting or unprotecting the value of this instance.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This operation is not supported on this platform.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the default (or parameterless) constructor to instantiate a new <a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a> object. It then calls the <a class=\"xref\" href=\"system.security.securestring#System_Security_SecureString_AppendChar_\" data-linktype=\"relative-path\">AppendChar</a> method to add an array of characters to it.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Security.SecureString.Ctor#2\">using System;\nusing System.Security;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Define the string value to assign to a new secure string.\n      char[] chars = { &#39;t&#39;, &#39;e&#39;, &#39;s&#39;, &#39;t&#39; };\n      // Instantiate the secure string.\n      SecureString testString = new SecureString();\n      // Assign the character array to the secure string.\n      foreach (char ch in chars)\n         testString.AppendChar(ch);      \n      // Display secure string length.\n      Console.WriteLine(&quot;The length of the string is {0} characters.&quot;, \n                        testString.Length);\n      testString.Dispose();\n   }\n}\n// The example displays the following output:\n//      The length of the string is 4 characters.\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Security.SecureString.Ctor#2\">using namespace System;\nusing namespace System::Security;\n\nint main(array&lt;System::String ^&gt; ^args)\n{\n   // Define the string value to assign to a new secure string.\n   Char chars[4] = { &#39;t&#39;, &#39;e&#39;, &#39;s&#39;, &#39;t&#39; };\n   // Instantiate the secure string.\n   SecureString^ testString = gcnew SecureString();\n   // Assign the character array to the secure string.\n   for each (Char ch in chars)\n   {\n      testString-&gt;AppendChar(ch);\n   }   \n   // Display secure string length.\n   Console::WriteLine(&quot;The length of the string is {0} characters.&quot;, \n                        testString-&gt;Length);\n\n   delete testString;\n   return 0;\n}\n// The example displays the following output:\n//      The length of the string is 4 characters.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.SecureString.Ctor#2\">Imports System.Security\n \nModule Example\n   Public Sub Main()\n      &#39; Define the string value to assign to a new secure string.\n      Dim chars() As Char = { &quot;t&quot;c, &quot;e&quot;c, &quot;s&quot;c, &quot;t&quot;c }\n      &#39; Instantiate the secure string.\n      Dim testString As SecureString = New SecureString()\n      &#39; Assign the character array to the secure string.\n      For Each ch As char In chars\n         testString.AppendChar(ch)\n      Next         \n      &#39; Display secure string length.\n      Console.WriteLine(&quot;The length of the string is {0} characters.&quot;, _ \n                        testString.Length)\n      testString.Dispose()\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;      The length of the string is 4 characters.\n</code></pre><p> The following example creates a <a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a> object from the value of a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Security.SecureString.Ctor#3\">Imports System.Security\n\nModule Example\n   Public Sub Main()\n      &#39; Define the string value to be assigned to the secure string.\n      Dim initString As String = &quot;TestString&quot;\n      &#39; Instantiate the secure string.\n      Dim testString As SecureString = New SecureString()\n      &#39; Use the AppendChar method to add each char value to the secure string.\n      For Each ch As Char In initString\n         testString.AppendChar(ch)\n      Next   \n      &#39; Display secure string length.\n      Console.WriteLine(&quot;The length of the string is {0} characters.&quot;, _ \n                        testString.Length)\n      testString.Dispose()\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;      The length of the string is 10 characters.\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Security.SecureString.Ctor#3\">using namespace System;\nusing namespace System::Security;\n\nint main(array&lt;System::String ^&gt; ^args)\n{\n   // Define the string value to be assigned to the secure string.\n   String^ initString = &quot;TestString&quot;;\n   // Instantiate the secure string.\n   SecureString^ testString = gcnew SecureString();\n   // Assign the character array to the secure string.\n   for each (Char ch in initString)\n   {\n      testString-&gt;AppendChar(ch);\n   }   \n   // Display secure string length.\n   Console::WriteLine(&quot;The length of the string is {0} characters.&quot;, \n                        testString-&gt;Length);\n\n   delete testString;\n   return 0;\n}\n// The example displays the following output:\n//      The length of the string is 10 characters.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Security.SecureString.Ctor#3\">using System;\nusing System.Security;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Define the string value to be assigned to the secure string.\n      string initString = &quot;TestString&quot;;\n      // Instantiate the secure string.\n      SecureString testString = new SecureString();\n      // Use the AppendChar method to add each char value to the secure string.\n      foreach (char ch in initString)\n         testString.AppendChar(ch);\n         \n      // Display secure string length.\n      Console.WriteLine(&quot;The length of the string is {0} characters.&quot;, \n                        testString.Length);\n      testString.Dispose();\n   }\n}\n// The example displays the following output:\n//      The length of the string is 10 characters.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_SecureString__ctor_System_Char__System_Int32_\">\r\n    \r\n            <a id=\"System_Security_SecureString__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SecureString(Char*,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a> class from a subarray of <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> objects.  </p>\n<p> This constructor is not CLS-compliant. The CLS-compliant alternative is <span class=\"xref\">stem.Security.SecureString.#ctor</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public SecureString (char* value, int length);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>*</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to an array of <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> objects.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements of <code>value</code> to include in the new instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>length</code> is less than zero or greater than 65,536.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>An error occurred while protecting or unprotecting the value of this secure string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This operation is not supported on this platform.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor initializes the new <a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a> object to the number of characters in <code>value</code> specified by <code>length</code>; the value of the instance is then encrypted.  </p>\n<p> In C#, this constructor is defined only in the context of unsafe code.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example instantiates a new <a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a> object by passing its constructor a pointer to a character array.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Security.SecureString.Ctor2#1\">using namespace System;\nusing namespace System::Security;\n\nint main(array&lt;System::String ^&gt; ^args)\n{\n   SecureString^ testString;\n   // Define the string value to assign to a new secure string.\n   Char chars[4] = { &#39;t&#39;, &#39;e&#39;, &#39;s&#39;, &#39;t&#39; };\n   // Instantiate a new secure string.\n   Char* pChars = &amp;chars[0];\n\n   testString = gcnew SecureString(pChars, sizeof(chars)/sizeof(chars[0]));\n\n   // Display secure string length.\n   Console::WriteLine(&quot;The length of the string is {0} characters.&quot;, \n                        testString-&gt;Length);\n   delete testString;\n   return 0;\n}\n// The example displays the following output:\n//      The length of the string is 4 characters.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Security.SecureString.Ctor2#1\">using System;\nusing System.Security;\n\npublic class Example\n{\n   unsafe public static void Main()\n   {\n      SecureString testString;\n      // Define the string value to assign to a new secure string.\n      char[] chars = { &#39;t&#39;, &#39;e&#39;, &#39;s&#39;, &#39;t&#39; };\n\n      // Instantiate a new secure string.\n      fixed(char* pChars = chars)\n      {\n         testString = new SecureString(pChars, chars.Length);\n      }\n      // Display secure string length.\n      Console.WriteLine(&quot;The length of the string is {0} characters.&quot;, \n                        testString.Length);\n      testString.Dispose();\n   }\n}\n// The example displays the following output:\n//      The length of the string is 4 characters.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_SecureString_Length\">\r\n    \r\n            <a id=\"System_Security_SecureString_Length_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Length</div>        \r\n          </div>\r\n    \r\n            <p>Gets the number of characters in the current secure string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Length { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> objects in this secure string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This secure string has already been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Length property returns the number of <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> objects in this instance, not the number of Unicode characters. A Unicode character might be represented by more than one <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object.  </p>\n<p> The maximum length of a <a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a> instance is 65,536 characters.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_SecureString_AppendChar_System_Char_\">\r\n    \r\n            <a id=\"System_Security_SecureString_AppendChar_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AppendChar(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Appends a character to the end of the current secure string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AppendChar (char c);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>c</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A character to append to this secure string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This secure string has already been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>This secure string is read-only.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>Performing this operation would make the length of this secure string greater than 65,536 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>An error occurred while protecting or unprotecting the value of this secure string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the implementation uses a protection mechanism, such as encryption, the value of this secure string, if any, is unprotected; <code>c</code> is appended; then the new value of the secure string is re-protected.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how the AppendChar, <a class=\"xref\" href=\"system.security.securestring#System_Security_SecureString_InsertAt_\" data-linktype=\"relative-path\">InsertAt</a>, <a class=\"xref\" href=\"system.security.securestring#System_Security_SecureString_RemoveAt_\" data-linktype=\"relative-path\">RemoveAt</a>, <a class=\"xref\" href=\"system.security.securestring#System_Security_SecureString_SetAt_\" data-linktype=\"relative-path\">SetAt</a>, and <a class=\"xref\" href=\"system.security.securestring#System_Security_SecureString_Clear_\" data-linktype=\"relative-path\">Clear</a> methods affect the value of a <a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a> object.  </p>\n<pre><code class=\"lang-cpp\" name=\"SecureString.xAt#1\">using namespace System;\nusing namespace System::Security;\n\nvoid main()\n{\n    String^ msg = L&quot;   The current length of the SecureString object: {0}<br>&quot;;\n    SecureString ^ ss = gcnew SecureString;\n\n    Console::WriteLine(L&quot;1) Instantiate the SecureString object:&quot;);\n    Console::WriteLine(msg, ss-&gt;Length );\n\n    Console::WriteLine(L&quot;2) Append &#39;a&#39; to the value:&quot;);\n    ss-&gt;AppendChar(&#39;a&#39;);\n    Console::WriteLine(msg, ss-&gt;Length );\n\n    Console::WriteLine(L&quot;3) Append &#39;X&#39; to the value:&quot;);\n    ss-&gt;AppendChar(&#39;X&#39;);\n    Console::WriteLine(msg, ss-&gt;Length);\n\n    Console::WriteLine(L&quot;4) Append &#39;c&#39; to the value:&quot;);\n    ss-&gt;AppendChar(&#39;c&#39;);\n    Console::WriteLine(msg, ss-&gt;Length);\n\n    Console::WriteLine(L&quot;5) Insert &#39;d&#39; at the end of the value:&quot;);\n    ss-&gt;InsertAt(ss-&gt;Length, &#39;d&#39;);\n    Console::WriteLine(msg, ss-&gt;Length);\n\n    Console::WriteLine(L&quot;6) Remove the last character (&#39;d&#39;) from the value:&quot;);\n    ss-&gt;RemoveAt(3);\n    Console::WriteLine(msg, ss-&gt;Length);\n\n    Console::WriteLine(L&quot;7) Set the second character (&#39;X&#39;) of the value to &#39;b&#39;:&quot; );\n    ss-&gt;SetAt(1, &#39;b&#39;);\n    Console::WriteLine(msg, ss-&gt;Length );\n\n    Console::WriteLine(L&quot;8) Delete the value of the SecureString object:&quot;);\n    ss-&gt;Clear();\n    Console::WriteLine(msg, ss-&gt;Length);\n\n    delete ss;\n}\n\n/*\nThis code example produces the following results:\n\nThis example demonstrates the effect of the AppendChar, InsertAt,\nRemoveAt, SetAt, and Clear methods on the value of a SecureString\nobject. This example simulates the value of the object because the\nactual value is encrypted.\n\n1) The initial value of the SecureString object:\n   SecureString = &quot;&quot;\n   Length = 0\n\n2) AppendChar: Append &#39;a&#39; to the value:\n   SecureString = &quot;a&quot;\n   Length = 1\n\n3) AppendChar: Append &#39;X&#39; to the value:\n   SecureString = &quot;aX&quot;\n   Length = 2\n\n4) AppendChar: Append &#39;c&#39; to the value:\n   SecureString = &quot;aXc&quot;\n   Length = 3\n\n5) InsertAt: Insert &#39;d&#39; at the end of the value (equivalent\n     to AppendChar):\n   SecureString = &quot;aXcd&quot;\n   Length = 4\n\n6) RemoveAt: Remove the last character (&#39;d&#39;) from the value:\n   SecureString = &quot;aXc&quot;\n   Length = 3\n\n7) SetAt: Set the second character (&#39;X&#39;) of the value to &#39;b&#39;:\n   SecureString = &quot;abc&quot;\n   Length = 3\n\n8) Clear: Delete the value of the SecureString object:\n   SecureString = &quot;&quot;\n   Length = 0\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"SecureString.xAt#1\">using System;\nusing System.Security;\n\nclass Example\n{\n    public static void Main() \n    {\n       string msg = &quot;The curent length of the SecureString object: {0}<br>&quot;;\n       Console.WriteLine(&quot;1) Instantiate the SecureString object.&quot;);\n       SecureString ss = new SecureString();\n       Console.WriteLine(msg, ss.Length);\n\n       Console.WriteLine(&quot;2) Append &#39;a&#39; to the value.&quot;);\n       ss.AppendChar(&#39;a&#39;);\n       Console.WriteLine(msg, ss.Length);\n\n       Console.WriteLine(&quot;3) Append &#39;X&#39; to the value.&quot;);\n       ss.AppendChar(&#39;X&#39;);\n       Console.WriteLine(msg, ss.Length);\n\n       Console.WriteLine(&quot;4) Append &#39;c&#39; to the value.&quot;);\n       ss.AppendChar(&#39;c&#39;);\n       Console.WriteLine(msg, ss.Length);\n\n       Console.WriteLine(&quot;5) Insert &#39;d&#39; at the end of the value.&quot;);\n       ss.InsertAt(ss.Length, &#39;d&#39;);\n       Console.WriteLine(msg, ss.Length);\n\n       Console.WriteLine(&quot;6) Remove the last character (&#39;d&#39;) from the value.&quot;);\n       ss.RemoveAt(3);\n       Console.WriteLine(msg, ss.Length);\n\n       Console.WriteLine(&quot;7) Set the second character of the value to &#39;b&#39;.&quot;);\n       ss.SetAt(1, &#39;b&#39;);\n       Console.WriteLine(msg, ss.Length);\n\n       Console.WriteLine(&quot;8) Delete the value of the SecureString object:&quot;);\n       ss.Clear();\n       Console.WriteLine(msg, ss.Length);\n       \n       ss.Dispose();\n    }\n}\n// The example displays the following output:\n//       1) Instantiate the SecureString object.\n//       The curent length of the SecureString object: 0\n//\n//       2) Append &#39;a&#39; to the value.\n//       The curent length of the SecureString object: 1\n//\n//       3) Append &#39;X&#39; to the value.\n//       The curent length of the SecureString object: 2\n//\n//       4) Append &#39;c&#39; to the value.\n//       The curent length of the SecureString object: 3\n//\n//       5) Insert &#39;d&#39; at the end of the value.\n//       The curent length of the SecureString object: 4\n//\n//       6) Remove the last character (&#39;d&#39;) from the value.\n//       The curent length of the SecureString object: 3\n//\n//       7) Set the second character of the value to &#39;b&#39;.\n//       The curent length of the SecureString object: 3\n//\n//       8) Delete the value of the SecureString object:\n//       The curent length of the SecureString object: 0\n</code></pre><pre><code class=\"lang-vb\" name=\"SecureString.xAt#1\">Imports System.Security\n\nModule Example\n    Public Sub Main()\n       Dim msg As String = &quot;The curent length of the SecureString object: {0}&quot; + vbCrLf\n       Console.WriteLine(&quot;1) Instantiate the SecureString object.&quot;)\n       Dim ss As New SecureString()\n       Console.WriteLine(msg, ss.Length)\n\n       Console.WriteLine(&quot;2) Append &#39;a&#39; to the value.&quot;)\n       ss.AppendChar(&quot;a&quot;c)\n       Console.WriteLine(msg, ss.Length)\n\n       Console.WriteLine(&quot;3) Append &#39;X&#39; to the value.&quot;)\n       ss.AppendChar(&quot;X&quot;c)\n       Console.WriteLine(msg, ss.Length)\n\n       Console.WriteLine(&quot;4) Append &#39;c&#39; to the value.&quot;)\n       ss.AppendChar(&quot;c&quot;c)\n       Console.WriteLine(msg, ss.Length)\n\n       Console.WriteLine(&quot;5) Insert &#39;d&#39; at the end of the value.&quot;)\n       ss.InsertAt(ss.Length, &quot;d&quot;c)\n       Console.WriteLine(msg, ss.Length)\n\n       Console.WriteLine(&quot;6) Remove the last character (&#39;d&#39;) from the value.&quot;)\n       ss.RemoveAt(3)\n       Console.WriteLine(msg, ss.Length)\n\n       Console.WriteLine(&quot;7) Set the second character of the value to &#39;b&#39;.&quot;)\n       ss.SetAt(1, &quot;b&quot;c)\n       Console.WriteLine(msg, ss.Length)\n\n       Console.WriteLine(&quot;8) Delete the value of the SecureString object:&quot;)\n       ss.Clear()\n       Console.WriteLine(msg, ss.Length)\n\n       ss.Dispose()\n    End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       1) Instantiate the SecureString object.\n&#39;       The curent length of the SecureString object: 0\n&#39;\n&#39;       2) Append &#39;a&#39; to the value.\n&#39;       The curent length of the SecureString object: 1\n&#39;\n&#39;       3) Append &#39;X&#39; to the value.\n&#39;       The curent length of the SecureString object: 2\n&#39;\n&#39;       4) Append &#39;c&#39; to the value.\n&#39;       The curent length of the SecureString object: 3\n&#39;\n&#39;       5) Insert &#39;d&#39; at the end of the value.\n&#39;       The curent length of the SecureString object: 4\n&#39;\n&#39;       6) Remove the last character (&#39;d&#39;) from the value.\n&#39;       The curent length of the SecureString object: 3\n&#39;\n&#39;       7) Set the second character of the value to &#39;b&#39;.\n&#39;       The curent length of the SecureString object: 3\n&#39;\n&#39;       8) Delete the value of the SecureString object:\n&#39;       The curent length of the SecureString object: 0\n</code></pre><p> The following example demonstrates how the AppendChar and <a class=\"xref\" href=\"system.security.securestring#System_Security_SecureString_RemoveAt_\" data-linktype=\"relative-path\">RemoveAt</a> methods can be used to collect the characters in a password.  </p>\n<pre><code class=\"lang-cpp\" name=\"SecureString.xChar#1\">using namespace System;\nusing namespace System::Security;\n\nvoid main()\n{\n   bool go = true;\n   ConsoleKeyInfo cki;\n   String^ m = L&quot;<br>Enter your password (up to 15 letters, numbers, and underscores)<br>&quot;\n               L&quot;Press BACKSPACE to delete the last character entered. &quot; +\n               L&quot;<br>Press Enter when done, or ESCAPE to quit:&quot;;\n   SecureString ^ password = gcnew SecureString;\n   int top;\n   int left;\n   \n   // The Console.TreatControlCAsInput property prevents CTRL+C from\n   // ending this example.\n   Console::TreatControlCAsInput = true;\n\n   Console::Clear();\n   Console::WriteLine(m);\n   \n   top = Console::CursorTop;\n   left = Console::CursorLeft;\n\n   do {\n      cki = Console::ReadKey(true);\n      if (cki.Key == ConsoleKey::Escape)\n         break;\n\n      if (cki.Key == ConsoleKey::Backspace){\n         if (password-&gt;Length &gt; 0) {\n            Console::SetCursorPosition(left + password-&gt;Length - 1, top);\n            Console::Write(&#39; &#39;);\n            Console::SetCursorPosition(left + password-&gt;Length - 1, top);\n            password-&gt;RemoveAt(password-&gt;Length - 1);\n         }\n      }\n      else {\n         if ((password-&gt;Length &lt; 15) &amp;&amp;\n             (Char::IsLetterOrDigit( cki.KeyChar ) ||\n              cki.KeyChar == &#39;_&#39;) ) {\n            password-&gt;AppendChar( cki.KeyChar );\n            Console::SetCursorPosition( left + password-&gt;Length - 1, top );\n            Console::Write(&quot;*&quot;);\n         }\n      }\n   } while (cki.Key != ConsoleKey::Enter &amp; password-&gt;Length &lt; 15);\n\n   // Make the password read-only to prevent modification.\n   password-&gt;MakeReadOnly();\n   // Dispose of the SecureString instance.\n   delete password;\n\n}\n// The example displays output like the following:\n//    Enter your password (up to 15 letters, numbers, and underscores)\n//    Press BACKSPACE to delete the last character entered.\n//    Press Enter when done, or ESCAPE to quit:\n//    ************\n</code></pre><pre><code class=\"lang-vb\" name=\"SecureString.xChar#1\">Imports System.Security\n\nClass Example\n   Public Shared Sub Main()\n      Dim cki As ConsoleKeyInfo\n      Dim m As String = vbCrLf &amp; &quot;Enter your password (up to 15 letters, numbers, and underscores)&quot; &amp;\n                        vbCrLf &amp; &quot;Press BACKSPACE to delete the last character entered. &quot; &amp; vbCrLf &amp;\n                        &quot;Press Enter when done, or ESCAPE to quit: &quot;\n      Dim password As New SecureString()\n      Dim top, left As Integer\n\n      &#39; The Console.TreatControlCAsInput property prevents CTRL+C from\n      &#39; ending this example.\n      Console.TreatControlCAsInput = True\n\n      Console.Clear()\n      Console.WriteLine(m)\n\n      top = Console.CursorTop\n      left = Console.CursorLeft\n\n      &#39; Read user input from the console. Store up to 15 letter, digit, or underscore\n      &#39; characters in a SecureString object, or delete a character if the user enters \n      &#39; a backspace. Display an asterisk (*) on the console to represent each character \n      &#39; that is stored.\n      \n      Do\n         cki = Console.ReadKey(True)\n         If cki.Key = ConsoleKey.Escape Then Exit Do\n\n         If cki.Key = ConsoleKey.Backspace Then\n            If password.Length &gt; 0 Then\n               Console.SetCursorPosition(left + password.Length - 1, top)\n               Console.Write(&quot; &quot;c)\n               Console.SetCursorPosition(left + password.Length - 1, top)\n               password.RemoveAt(password.Length - 1)\n            End If\n         Else\n            If password.Length &lt; 15 AndAlso([Char].IsLetterOrDigit(cki.KeyChar) _\n            OrElse cki.KeyChar = &quot;_&quot;c) Then\n               password.AppendChar(cki.KeyChar)\n               Console.SetCursorPosition(left + password.Length - 1, top)\n               Console.Write(&quot;*&quot;c)\n            End If\n         End If\n      Loop While cki.Key &lt;&gt; ConsoleKey.Enter And password.Length &lt; 15\n\n      &#39; Make the password read-only to prevent modification.\n      password.MakeReadOnly()\n      &#39; Dispose of the SecureString instance.\n      password.Dispose()\n   End Sub\nEnd Class\n&#39; The example displays output like the following:\n&#39;    Enter your password (up to 15 letters, numbers, and underscores)\n&#39;    Press BACKSPACE to delete the last character entered.\n&#39;    Press Enter when done, or ESCAPE to quit:\n&#39;    ************\n</code></pre><pre><code class=\"lang-cs\" name=\"SecureString.xChar#1\">using System;\nusing System.Security;\n\nclass Example\n{\n   public static void Main()\n   {\n      ConsoleKeyInfo cki;\n      String m = &quot;<br>Enter your password (up to 15 letters, numbers, and underscores)<br>&quot; +\n                 &quot;Press BACKSPACE to delete the last character entered. &quot; +\n                 &quot;<br>Press Enter when done, or ESCAPE to quit:&quot;;\n      SecureString password = new SecureString();\n      int top, left;\n\n      // The Console.TreatControlCAsInput property prevents CTRL+C from\n      // ending this example.\n      Console.TreatControlCAsInput = true;\n\n      Console.Clear();\n      Console.WriteLine(m);\n\n      top  = Console.CursorTop;\n      left = Console.CursorLeft;\n\n      // Read user input from the console. Store up to 15 letter, digit, or underscore\n      // characters in a SecureString object, or delete a character if the user enters\n      // a backspace. Display an asterisk (*) on the console to represent each character\n      // that is stored.\n\n      do {\n         cki = Console.ReadKey(true);\n         if (cki.Key == ConsoleKey.Escape) break;\n\n         if (cki.Key == ConsoleKey.Backspace) {\n            if (password.Length &gt; 0) {\n               Console.SetCursorPosition(left + password.Length - 1, top);\n               Console.Write(&#39; &#39;);\n               Console.SetCursorPosition(left + password.Length - 1, top);\n               password.RemoveAt(password.Length-1);\n            }\n         }\n         else {\n            if ((password.Length &lt; 15) &amp;&amp;\n                 (Char.IsLetterOrDigit(cki.KeyChar) || cki.KeyChar == &#39;_&#39;)) {\n               password.AppendChar(cki.KeyChar);\n               Console.SetCursorPosition(left+password.Length-1, top);\n               Console.Write(&#39;*&#39;);\n            }\n         }\n      } while (cki.Key != ConsoleKey.Enter &amp; password.Length &lt; 15);\n\n      // Make the password read-only to prevent modification.\n      password.MakeReadOnly();\n      // Dispose of the SecureString instance.\n      password.Dispose();\n   }\n}\n// This example displays output like the following:\n//    Enter your password (up to 15 letters, numbers, and underscores)\n//    Press BACKSPACE to delete the last character entered.\n//    Press Enter when done, or ESCAPE to quit:\n//    ************\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_SecureString_Clear\">\r\n    \r\n            <a id=\"System_Security_SecureString_Clear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clear()</div>        \r\n          </div>\r\n    \r\n            <p>Deletes the value of the current secure string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Clear ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This secure string has already been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>This secure string is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The computer memory that contains the value of this secure string is zeroed, then the length of the value of this secure string is set to zero.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how the <a class=\"xref\" href=\"system.security.securestring#System_Security_SecureString_AppendChar_\" data-linktype=\"relative-path\">AppendChar</a>, <a class=\"xref\" href=\"system.security.securestring#System_Security_SecureString_InsertAt_\" data-linktype=\"relative-path\">InsertAt</a>, <a class=\"xref\" href=\"system.security.securestring#System_Security_SecureString_RemoveAt_\" data-linktype=\"relative-path\">RemoveAt</a>, <a class=\"xref\" href=\"system.security.securestring#System_Security_SecureString_SetAt_\" data-linktype=\"relative-path\">SetAt</a>, and Clear methods affect the value of a <a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a> object.  </p>\n<pre><code class=\"lang-cpp\" name=\"SecureString.xAt#1\">using namespace System;\nusing namespace System::Security;\n\nvoid main()\n{\n    String^ msg = L&quot;   The current length of the SecureString object: {0}<br>&quot;;\n    SecureString ^ ss = gcnew SecureString;\n\n    Console::WriteLine(L&quot;1) Instantiate the SecureString object:&quot;);\n    Console::WriteLine(msg, ss-&gt;Length );\n\n    Console::WriteLine(L&quot;2) Append &#39;a&#39; to the value:&quot;);\n    ss-&gt;AppendChar(&#39;a&#39;);\n    Console::WriteLine(msg, ss-&gt;Length );\n\n    Console::WriteLine(L&quot;3) Append &#39;X&#39; to the value:&quot;);\n    ss-&gt;AppendChar(&#39;X&#39;);\n    Console::WriteLine(msg, ss-&gt;Length);\n\n    Console::WriteLine(L&quot;4) Append &#39;c&#39; to the value:&quot;);\n    ss-&gt;AppendChar(&#39;c&#39;);\n    Console::WriteLine(msg, ss-&gt;Length);\n\n    Console::WriteLine(L&quot;5) Insert &#39;d&#39; at the end of the value:&quot;);\n    ss-&gt;InsertAt(ss-&gt;Length, &#39;d&#39;);\n    Console::WriteLine(msg, ss-&gt;Length);\n\n    Console::WriteLine(L&quot;6) Remove the last character (&#39;d&#39;) from the value:&quot;);\n    ss-&gt;RemoveAt(3);\n    Console::WriteLine(msg, ss-&gt;Length);\n\n    Console::WriteLine(L&quot;7) Set the second character (&#39;X&#39;) of the value to &#39;b&#39;:&quot; );\n    ss-&gt;SetAt(1, &#39;b&#39;);\n    Console::WriteLine(msg, ss-&gt;Length );\n\n    Console::WriteLine(L&quot;8) Delete the value of the SecureString object:&quot;);\n    ss-&gt;Clear();\n    Console::WriteLine(msg, ss-&gt;Length);\n\n    delete ss;\n}\n\n/*\nThis code example produces the following results:\n\nThis example demonstrates the effect of the AppendChar, InsertAt,\nRemoveAt, SetAt, and Clear methods on the value of a SecureString\nobject. This example simulates the value of the object because the\nactual value is encrypted.\n\n1) The initial value of the SecureString object:\n   SecureString = &quot;&quot;\n   Length = 0\n\n2) AppendChar: Append &#39;a&#39; to the value:\n   SecureString = &quot;a&quot;\n   Length = 1\n\n3) AppendChar: Append &#39;X&#39; to the value:\n   SecureString = &quot;aX&quot;\n   Length = 2\n\n4) AppendChar: Append &#39;c&#39; to the value:\n   SecureString = &quot;aXc&quot;\n   Length = 3\n\n5) InsertAt: Insert &#39;d&#39; at the end of the value (equivalent\n     to AppendChar):\n   SecureString = &quot;aXcd&quot;\n   Length = 4\n\n6) RemoveAt: Remove the last character (&#39;d&#39;) from the value:\n   SecureString = &quot;aXc&quot;\n   Length = 3\n\n7) SetAt: Set the second character (&#39;X&#39;) of the value to &#39;b&#39;:\n   SecureString = &quot;abc&quot;\n   Length = 3\n\n8) Clear: Delete the value of the SecureString object:\n   SecureString = &quot;&quot;\n   Length = 0\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"SecureString.xAt#1\">using System;\nusing System.Security;\n\nclass Example\n{\n    public static void Main() \n    {\n       string msg = &quot;The curent length of the SecureString object: {0}<br>&quot;;\n       Console.WriteLine(&quot;1) Instantiate the SecureString object.&quot;);\n       SecureString ss = new SecureString();\n       Console.WriteLine(msg, ss.Length);\n\n       Console.WriteLine(&quot;2) Append &#39;a&#39; to the value.&quot;);\n       ss.AppendChar(&#39;a&#39;);\n       Console.WriteLine(msg, ss.Length);\n\n       Console.WriteLine(&quot;3) Append &#39;X&#39; to the value.&quot;);\n       ss.AppendChar(&#39;X&#39;);\n       Console.WriteLine(msg, ss.Length);\n\n       Console.WriteLine(&quot;4) Append &#39;c&#39; to the value.&quot;);\n       ss.AppendChar(&#39;c&#39;);\n       Console.WriteLine(msg, ss.Length);\n\n       Console.WriteLine(&quot;5) Insert &#39;d&#39; at the end of the value.&quot;);\n       ss.InsertAt(ss.Length, &#39;d&#39;);\n       Console.WriteLine(msg, ss.Length);\n\n       Console.WriteLine(&quot;6) Remove the last character (&#39;d&#39;) from the value.&quot;);\n       ss.RemoveAt(3);\n       Console.WriteLine(msg, ss.Length);\n\n       Console.WriteLine(&quot;7) Set the second character of the value to &#39;b&#39;.&quot;);\n       ss.SetAt(1, &#39;b&#39;);\n       Console.WriteLine(msg, ss.Length);\n\n       Console.WriteLine(&quot;8) Delete the value of the SecureString object:&quot;);\n       ss.Clear();\n       Console.WriteLine(msg, ss.Length);\n       \n       ss.Dispose();\n    }\n}\n// The example displays the following output:\n//       1) Instantiate the SecureString object.\n//       The curent length of the SecureString object: 0\n//\n//       2) Append &#39;a&#39; to the value.\n//       The curent length of the SecureString object: 1\n//\n//       3) Append &#39;X&#39; to the value.\n//       The curent length of the SecureString object: 2\n//\n//       4) Append &#39;c&#39; to the value.\n//       The curent length of the SecureString object: 3\n//\n//       5) Insert &#39;d&#39; at the end of the value.\n//       The curent length of the SecureString object: 4\n//\n//       6) Remove the last character (&#39;d&#39;) from the value.\n//       The curent length of the SecureString object: 3\n//\n//       7) Set the second character of the value to &#39;b&#39;.\n//       The curent length of the SecureString object: 3\n//\n//       8) Delete the value of the SecureString object:\n//       The curent length of the SecureString object: 0\n</code></pre><pre><code class=\"lang-vb\" name=\"SecureString.xAt#1\">Imports System.Security\n\nModule Example\n    Public Sub Main()\n       Dim msg As String = &quot;The curent length of the SecureString object: {0}&quot; + vbCrLf\n       Console.WriteLine(&quot;1) Instantiate the SecureString object.&quot;)\n       Dim ss As New SecureString()\n       Console.WriteLine(msg, ss.Length)\n\n       Console.WriteLine(&quot;2) Append &#39;a&#39; to the value.&quot;)\n       ss.AppendChar(&quot;a&quot;c)\n       Console.WriteLine(msg, ss.Length)\n\n       Console.WriteLine(&quot;3) Append &#39;X&#39; to the value.&quot;)\n       ss.AppendChar(&quot;X&quot;c)\n       Console.WriteLine(msg, ss.Length)\n\n       Console.WriteLine(&quot;4) Append &#39;c&#39; to the value.&quot;)\n       ss.AppendChar(&quot;c&quot;c)\n       Console.WriteLine(msg, ss.Length)\n\n       Console.WriteLine(&quot;5) Insert &#39;d&#39; at the end of the value.&quot;)\n       ss.InsertAt(ss.Length, &quot;d&quot;c)\n       Console.WriteLine(msg, ss.Length)\n\n       Console.WriteLine(&quot;6) Remove the last character (&#39;d&#39;) from the value.&quot;)\n       ss.RemoveAt(3)\n       Console.WriteLine(msg, ss.Length)\n\n       Console.WriteLine(&quot;7) Set the second character of the value to &#39;b&#39;.&quot;)\n       ss.SetAt(1, &quot;b&quot;c)\n       Console.WriteLine(msg, ss.Length)\n\n       Console.WriteLine(&quot;8) Delete the value of the SecureString object:&quot;)\n       ss.Clear()\n       Console.WriteLine(msg, ss.Length)\n\n       ss.Dispose()\n    End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       1) Instantiate the SecureString object.\n&#39;       The curent length of the SecureString object: 0\n&#39;\n&#39;       2) Append &#39;a&#39; to the value.\n&#39;       The curent length of the SecureString object: 1\n&#39;\n&#39;       3) Append &#39;X&#39; to the value.\n&#39;       The curent length of the SecureString object: 2\n&#39;\n&#39;       4) Append &#39;c&#39; to the value.\n&#39;       The curent length of the SecureString object: 3\n&#39;\n&#39;       5) Insert &#39;d&#39; at the end of the value.\n&#39;       The curent length of the SecureString object: 4\n&#39;\n&#39;       6) Remove the last character (&#39;d&#39;) from the value.\n&#39;       The curent length of the SecureString object: 3\n&#39;\n&#39;       7) Set the second character of the value to &#39;b&#39;.\n&#39;       The curent length of the SecureString object: 3\n&#39;\n&#39;       8) Delete the value of the SecureString object:\n&#39;       The curent length of the SecureString object: 0\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_SecureString_Copy\">\r\n    \r\n            <a id=\"System_Security_SecureString_Copy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Copy()</div>        \r\n          </div>\r\n    \r\n            <p>Creates a copy of the current secure string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Security.SecureString Copy ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a></div>\r\n                  </div>\r\n                  <p>A duplicate of this secure string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This secure string has already been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>An error occurred while protecting or unprotecting the value of this secure string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If an instance of a <a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a> is marked read-only, the copy of that instance will not be read-only.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_SecureString_Dispose\">\r\n    \r\n            <a id=\"System_Security_SecureString_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dispose()</div>        \r\n          </div>\r\n    \r\n            <p>Releases all resources used by the current <a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Dispose ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Dispose method writes binary zeroes to the allocated memory that contains the value of this <a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a> object, then frees the allocated memory.  </p>\n<p> For more information, see <a href=\"../Topic/Garbage%20Collection.md\" data-linktype=\"relative-path\">Garbage Collection</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_SecureString_InsertAt_System_Int32_System_Char_\">\r\n    \r\n            <a id=\"System_Security_SecureString_InsertAt_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InsertAt(Int32,Char)</div>        \r\n          </div>\r\n    \r\n            <p>Inserts a character in this secure string at the specified index position.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void InsertAt (int index, char c);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index position where parameter <code>c</code> is inserted.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>c</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character to insert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This secure string has already been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>This secure string is read-only.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero, or greater than the length of this secure string.  </p>\n<p> -or-  </p>\n<p> Performing this operation would make the length of this secure string greater than 65,536 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>An error occurred while protecting or unprotecting the value of this secure string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The index is zero-based; the first character in this secure string is at index position zero.  </p>\n<p> If the implementation uses a protection mechanism, such as encryption, the value of the secure string, if any, is unprotected; <code>c</code> is inserted at the specified index position; then the new value is re-protected. The InsertAt method yields the same results as the <a class=\"xref\" href=\"system.security.securestring#System_Security_SecureString_AppendChar_\" data-linktype=\"relative-path\">AppendChar</a> method, which inserts a character at the end of a secure string, if the <code>index</code> parameter of InsertAt is set to the length of this instance.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how the <a class=\"xref\" href=\"system.security.securestring#System_Security_SecureString_AppendChar_\" data-linktype=\"relative-path\">AppendChar</a>, InsertAt, <a class=\"xref\" href=\"system.security.securestring#System_Security_SecureString_RemoveAt_\" data-linktype=\"relative-path\">RemoveAt</a>, <a class=\"xref\" href=\"system.security.securestring#System_Security_SecureString_SetAt_\" data-linktype=\"relative-path\">SetAt</a>, and <a class=\"xref\" href=\"system.security.securestring#System_Security_SecureString_Clear_\" data-linktype=\"relative-path\">Clear</a> methods affect the value of a <a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a> object.  </p>\n<pre><code class=\"lang-cpp\" name=\"SecureString.xAt#1\">using namespace System;\nusing namespace System::Security;\n\nvoid main()\n{\n    String^ msg = L&quot;   The current length of the SecureString object: {0}<br>&quot;;\n    SecureString ^ ss = gcnew SecureString;\n\n    Console::WriteLine(L&quot;1) Instantiate the SecureString object:&quot;);\n    Console::WriteLine(msg, ss-&gt;Length );\n\n    Console::WriteLine(L&quot;2) Append &#39;a&#39; to the value:&quot;);\n    ss-&gt;AppendChar(&#39;a&#39;);\n    Console::WriteLine(msg, ss-&gt;Length );\n\n    Console::WriteLine(L&quot;3) Append &#39;X&#39; to the value:&quot;);\n    ss-&gt;AppendChar(&#39;X&#39;);\n    Console::WriteLine(msg, ss-&gt;Length);\n\n    Console::WriteLine(L&quot;4) Append &#39;c&#39; to the value:&quot;);\n    ss-&gt;AppendChar(&#39;c&#39;);\n    Console::WriteLine(msg, ss-&gt;Length);\n\n    Console::WriteLine(L&quot;5) Insert &#39;d&#39; at the end of the value:&quot;);\n    ss-&gt;InsertAt(ss-&gt;Length, &#39;d&#39;);\n    Console::WriteLine(msg, ss-&gt;Length);\n\n    Console::WriteLine(L&quot;6) Remove the last character (&#39;d&#39;) from the value:&quot;);\n    ss-&gt;RemoveAt(3);\n    Console::WriteLine(msg, ss-&gt;Length);\n\n    Console::WriteLine(L&quot;7) Set the second character (&#39;X&#39;) of the value to &#39;b&#39;:&quot; );\n    ss-&gt;SetAt(1, &#39;b&#39;);\n    Console::WriteLine(msg, ss-&gt;Length );\n\n    Console::WriteLine(L&quot;8) Delete the value of the SecureString object:&quot;);\n    ss-&gt;Clear();\n    Console::WriteLine(msg, ss-&gt;Length);\n\n    delete ss;\n}\n\n/*\nThis code example produces the following results:\n\nThis example demonstrates the effect of the AppendChar, InsertAt,\nRemoveAt, SetAt, and Clear methods on the value of a SecureString\nobject. This example simulates the value of the object because the\nactual value is encrypted.\n\n1) The initial value of the SecureString object:\n   SecureString = &quot;&quot;\n   Length = 0\n\n2) AppendChar: Append &#39;a&#39; to the value:\n   SecureString = &quot;a&quot;\n   Length = 1\n\n3) AppendChar: Append &#39;X&#39; to the value:\n   SecureString = &quot;aX&quot;\n   Length = 2\n\n4) AppendChar: Append &#39;c&#39; to the value:\n   SecureString = &quot;aXc&quot;\n   Length = 3\n\n5) InsertAt: Insert &#39;d&#39; at the end of the value (equivalent\n     to AppendChar):\n   SecureString = &quot;aXcd&quot;\n   Length = 4\n\n6) RemoveAt: Remove the last character (&#39;d&#39;) from the value:\n   SecureString = &quot;aXc&quot;\n   Length = 3\n\n7) SetAt: Set the second character (&#39;X&#39;) of the value to &#39;b&#39;:\n   SecureString = &quot;abc&quot;\n   Length = 3\n\n8) Clear: Delete the value of the SecureString object:\n   SecureString = &quot;&quot;\n   Length = 0\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"SecureString.xAt#1\">using System;\nusing System.Security;\n\nclass Example\n{\n    public static void Main() \n    {\n       string msg = &quot;The curent length of the SecureString object: {0}<br>&quot;;\n       Console.WriteLine(&quot;1) Instantiate the SecureString object.&quot;);\n       SecureString ss = new SecureString();\n       Console.WriteLine(msg, ss.Length);\n\n       Console.WriteLine(&quot;2) Append &#39;a&#39; to the value.&quot;);\n       ss.AppendChar(&#39;a&#39;);\n       Console.WriteLine(msg, ss.Length);\n\n       Console.WriteLine(&quot;3) Append &#39;X&#39; to the value.&quot;);\n       ss.AppendChar(&#39;X&#39;);\n       Console.WriteLine(msg, ss.Length);\n\n       Console.WriteLine(&quot;4) Append &#39;c&#39; to the value.&quot;);\n       ss.AppendChar(&#39;c&#39;);\n       Console.WriteLine(msg, ss.Length);\n\n       Console.WriteLine(&quot;5) Insert &#39;d&#39; at the end of the value.&quot;);\n       ss.InsertAt(ss.Length, &#39;d&#39;);\n       Console.WriteLine(msg, ss.Length);\n\n       Console.WriteLine(&quot;6) Remove the last character (&#39;d&#39;) from the value.&quot;);\n       ss.RemoveAt(3);\n       Console.WriteLine(msg, ss.Length);\n\n       Console.WriteLine(&quot;7) Set the second character of the value to &#39;b&#39;.&quot;);\n       ss.SetAt(1, &#39;b&#39;);\n       Console.WriteLine(msg, ss.Length);\n\n       Console.WriteLine(&quot;8) Delete the value of the SecureString object:&quot;);\n       ss.Clear();\n       Console.WriteLine(msg, ss.Length);\n       \n       ss.Dispose();\n    }\n}\n// The example displays the following output:\n//       1) Instantiate the SecureString object.\n//       The curent length of the SecureString object: 0\n//\n//       2) Append &#39;a&#39; to the value.\n//       The curent length of the SecureString object: 1\n//\n//       3) Append &#39;X&#39; to the value.\n//       The curent length of the SecureString object: 2\n//\n//       4) Append &#39;c&#39; to the value.\n//       The curent length of the SecureString object: 3\n//\n//       5) Insert &#39;d&#39; at the end of the value.\n//       The curent length of the SecureString object: 4\n//\n//       6) Remove the last character (&#39;d&#39;) from the value.\n//       The curent length of the SecureString object: 3\n//\n//       7) Set the second character of the value to &#39;b&#39;.\n//       The curent length of the SecureString object: 3\n//\n//       8) Delete the value of the SecureString object:\n//       The curent length of the SecureString object: 0\n</code></pre><pre><code class=\"lang-vb\" name=\"SecureString.xAt#1\">Imports System.Security\n\nModule Example\n    Public Sub Main()\n       Dim msg As String = &quot;The curent length of the SecureString object: {0}&quot; + vbCrLf\n       Console.WriteLine(&quot;1) Instantiate the SecureString object.&quot;)\n       Dim ss As New SecureString()\n       Console.WriteLine(msg, ss.Length)\n\n       Console.WriteLine(&quot;2) Append &#39;a&#39; to the value.&quot;)\n       ss.AppendChar(&quot;a&quot;c)\n       Console.WriteLine(msg, ss.Length)\n\n       Console.WriteLine(&quot;3) Append &#39;X&#39; to the value.&quot;)\n       ss.AppendChar(&quot;X&quot;c)\n       Console.WriteLine(msg, ss.Length)\n\n       Console.WriteLine(&quot;4) Append &#39;c&#39; to the value.&quot;)\n       ss.AppendChar(&quot;c&quot;c)\n       Console.WriteLine(msg, ss.Length)\n\n       Console.WriteLine(&quot;5) Insert &#39;d&#39; at the end of the value.&quot;)\n       ss.InsertAt(ss.Length, &quot;d&quot;c)\n       Console.WriteLine(msg, ss.Length)\n\n       Console.WriteLine(&quot;6) Remove the last character (&#39;d&#39;) from the value.&quot;)\n       ss.RemoveAt(3)\n       Console.WriteLine(msg, ss.Length)\n\n       Console.WriteLine(&quot;7) Set the second character of the value to &#39;b&#39;.&quot;)\n       ss.SetAt(1, &quot;b&quot;c)\n       Console.WriteLine(msg, ss.Length)\n\n       Console.WriteLine(&quot;8) Delete the value of the SecureString object:&quot;)\n       ss.Clear()\n       Console.WriteLine(msg, ss.Length)\n\n       ss.Dispose()\n    End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       1) Instantiate the SecureString object.\n&#39;       The curent length of the SecureString object: 0\n&#39;\n&#39;       2) Append &#39;a&#39; to the value.\n&#39;       The curent length of the SecureString object: 1\n&#39;\n&#39;       3) Append &#39;X&#39; to the value.\n&#39;       The curent length of the SecureString object: 2\n&#39;\n&#39;       4) Append &#39;c&#39; to the value.\n&#39;       The curent length of the SecureString object: 3\n&#39;\n&#39;       5) Insert &#39;d&#39; at the end of the value.\n&#39;       The curent length of the SecureString object: 4\n&#39;\n&#39;       6) Remove the last character (&#39;d&#39;) from the value.\n&#39;       The curent length of the SecureString object: 3\n&#39;\n&#39;       7) Set the second character of the value to &#39;b&#39;.\n&#39;       The curent length of the SecureString object: 3\n&#39;\n&#39;       8) Delete the value of the SecureString object:\n&#39;       The curent length of the SecureString object: 0\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_SecureString_IsReadOnly\">\r\n    \r\n            <a id=\"System_Security_SecureString_IsReadOnly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsReadOnly()</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether this secure string is marked read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsReadOnly ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if this secure string is marked read-only; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This secure string has already been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>After an instance of <a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a> is marked read-only by the <a class=\"xref\" href=\"system.security.securestring#System_Security_SecureString_MakeReadOnly_\" data-linktype=\"relative-path\">MakeReadOnly</a> method, any attempt to modify the value of the instance throws an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a>. Use the IsReadOnly method to test whether a <a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a> is read-only before attempting to modify it.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_SecureString_MakeReadOnly\">\r\n    \r\n            <a id=\"System_Security_SecureString_MakeReadOnly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MakeReadOnly()</div>        \r\n          </div>\r\n    \r\n            <p>Makes the text value of this secure string read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void MakeReadOnly ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This secure string has already been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Initialize the text value of an instance of the <a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a> class with the <a class=\"xref\" href=\"system.security.securestring#System_Security_SecureString__ctor_\" data-linktype=\"relative-path\">SecureString</a> constructors, and modify the value with the <a class=\"xref\" href=\"system.security.securestring#System_Security_SecureString_Clear_\" data-linktype=\"relative-path\">Clear</a>, <a class=\"xref\" href=\"system.security.securestring#System_Security_SecureString_RemoveAt_\" data-linktype=\"relative-path\">RemoveAt</a>, <a class=\"xref\" href=\"system.security.securestring#System_Security_SecureString_SetAt_\" data-linktype=\"relative-path\">SetAt</a>, <a class=\"xref\" href=\"system.security.securestring#System_Security_SecureString_InsertAt_\" data-linktype=\"relative-path\">InsertAt</a>, and <a class=\"xref\" href=\"system.security.securestring#System_Security_SecureString_AppendChar_\" data-linktype=\"relative-path\">AppendChar</a> methods.  </p>\n<p> After you have made your final modifications, use the MakeReadOnly method to make the value of the instance immutable (read-only). After the value is marked as read-only, any further attempt to modify it throws an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a>.  </p>\n<p> The effect of invoking MakeReadOnly is permanent because the <a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a> class provides no means to make the secure string modifiable again. Use the <a class=\"xref\" href=\"system.security.securestring#System_Security_SecureString_IsReadOnly_\" data-linktype=\"relative-path\">IsReadOnly</a> method to test whether an instance of <a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a> is read-only.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how the <a class=\"xref\" href=\"system.security.securestring#System_Security_SecureString_AppendChar_\" data-linktype=\"relative-path\">AppendChar</a> and <a class=\"xref\" href=\"system.security.securestring#System_Security_SecureString_RemoveAt_\" data-linktype=\"relative-path\">RemoveAt</a> methods can be used to collect the characters in a password. After the password is collected, it is made read-only.  </p>\n<pre><code class=\"lang-cpp\" name=\"SecureString.xChar#1\">using namespace System;\nusing namespace System::Security;\n\nvoid main()\n{\n   bool go = true;\n   ConsoleKeyInfo cki;\n   String^ m = L&quot;<br>Enter your password (up to 15 letters, numbers, and underscores)<br>&quot;\n               L&quot;Press BACKSPACE to delete the last character entered. &quot; +\n               L&quot;<br>Press Enter when done, or ESCAPE to quit:&quot;;\n   SecureString ^ password = gcnew SecureString;\n   int top;\n   int left;\n   \n   // The Console.TreatControlCAsInput property prevents CTRL+C from\n   // ending this example.\n   Console::TreatControlCAsInput = true;\n\n   Console::Clear();\n   Console::WriteLine(m);\n   \n   top = Console::CursorTop;\n   left = Console::CursorLeft;\n\n   do {\n      cki = Console::ReadKey(true);\n      if (cki.Key == ConsoleKey::Escape)\n         break;\n\n      if (cki.Key == ConsoleKey::Backspace){\n         if (password-&gt;Length &gt; 0) {\n            Console::SetCursorPosition(left + password-&gt;Length - 1, top);\n            Console::Write(&#39; &#39;);\n            Console::SetCursorPosition(left + password-&gt;Length - 1, top);\n            password-&gt;RemoveAt(password-&gt;Length - 1);\n         }\n      }\n      else {\n         if ((password-&gt;Length &lt; 15) &amp;&amp;\n             (Char::IsLetterOrDigit( cki.KeyChar ) ||\n              cki.KeyChar == &#39;_&#39;) ) {\n            password-&gt;AppendChar( cki.KeyChar );\n            Console::SetCursorPosition( left + password-&gt;Length - 1, top );\n            Console::Write(&quot;*&quot;);\n         }\n      }\n   } while (cki.Key != ConsoleKey::Enter &amp; password-&gt;Length &lt; 15);\n\n   // Make the password read-only to prevent modification.\n   password-&gt;MakeReadOnly();\n   // Dispose of the SecureString instance.\n   delete password;\n\n}\n// The example displays output like the following:\n//    Enter your password (up to 15 letters, numbers, and underscores)\n//    Press BACKSPACE to delete the last character entered.\n//    Press Enter when done, or ESCAPE to quit:\n//    ************\n</code></pre><pre><code class=\"lang-vb\" name=\"SecureString.xChar#1\">Imports System.Security\n\nClass Example\n   Public Shared Sub Main()\n      Dim cki As ConsoleKeyInfo\n      Dim m As String = vbCrLf &amp; &quot;Enter your password (up to 15 letters, numbers, and underscores)&quot; &amp;\n                        vbCrLf &amp; &quot;Press BACKSPACE to delete the last character entered. &quot; &amp; vbCrLf &amp;\n                        &quot;Press Enter when done, or ESCAPE to quit: &quot;\n      Dim password As New SecureString()\n      Dim top, left As Integer\n\n      &#39; The Console.TreatControlCAsInput property prevents CTRL+C from\n      &#39; ending this example.\n      Console.TreatControlCAsInput = True\n\n      Console.Clear()\n      Console.WriteLine(m)\n\n      top = Console.CursorTop\n      left = Console.CursorLeft\n\n      &#39; Read user input from the console. Store up to 15 letter, digit, or underscore\n      &#39; characters in a SecureString object, or delete a character if the user enters \n      &#39; a backspace. Display an asterisk (*) on the console to represent each character \n      &#39; that is stored.\n      \n      Do\n         cki = Console.ReadKey(True)\n         If cki.Key = ConsoleKey.Escape Then Exit Do\n\n         If cki.Key = ConsoleKey.Backspace Then\n            If password.Length &gt; 0 Then\n               Console.SetCursorPosition(left + password.Length - 1, top)\n               Console.Write(&quot; &quot;c)\n               Console.SetCursorPosition(left + password.Length - 1, top)\n               password.RemoveAt(password.Length - 1)\n            End If\n         Else\n            If password.Length &lt; 15 AndAlso([Char].IsLetterOrDigit(cki.KeyChar) _\n            OrElse cki.KeyChar = &quot;_&quot;c) Then\n               password.AppendChar(cki.KeyChar)\n               Console.SetCursorPosition(left + password.Length - 1, top)\n               Console.Write(&quot;*&quot;c)\n            End If\n         End If\n      Loop While cki.Key &lt;&gt; ConsoleKey.Enter And password.Length &lt; 15\n\n      &#39; Make the password read-only to prevent modification.\n      password.MakeReadOnly()\n      &#39; Dispose of the SecureString instance.\n      password.Dispose()\n   End Sub\nEnd Class\n&#39; The example displays output like the following:\n&#39;    Enter your password (up to 15 letters, numbers, and underscores)\n&#39;    Press BACKSPACE to delete the last character entered.\n&#39;    Press Enter when done, or ESCAPE to quit:\n&#39;    ************\n</code></pre><pre><code class=\"lang-cs\" name=\"SecureString.xChar#1\">using System;\nusing System.Security;\n\nclass Example\n{\n   public static void Main()\n   {\n      ConsoleKeyInfo cki;\n      String m = &quot;<br>Enter your password (up to 15 letters, numbers, and underscores)<br>&quot; +\n                 &quot;Press BACKSPACE to delete the last character entered. &quot; +\n                 &quot;<br>Press Enter when done, or ESCAPE to quit:&quot;;\n      SecureString password = new SecureString();\n      int top, left;\n\n      // The Console.TreatControlCAsInput property prevents CTRL+C from\n      // ending this example.\n      Console.TreatControlCAsInput = true;\n\n      Console.Clear();\n      Console.WriteLine(m);\n\n      top  = Console.CursorTop;\n      left = Console.CursorLeft;\n\n      // Read user input from the console. Store up to 15 letter, digit, or underscore\n      // characters in a SecureString object, or delete a character if the user enters\n      // a backspace. Display an asterisk (*) on the console to represent each character\n      // that is stored.\n\n      do {\n         cki = Console.ReadKey(true);\n         if (cki.Key == ConsoleKey.Escape) break;\n\n         if (cki.Key == ConsoleKey.Backspace) {\n            if (password.Length &gt; 0) {\n               Console.SetCursorPosition(left + password.Length - 1, top);\n               Console.Write(&#39; &#39;);\n               Console.SetCursorPosition(left + password.Length - 1, top);\n               password.RemoveAt(password.Length-1);\n            }\n         }\n         else {\n            if ((password.Length &lt; 15) &amp;&amp;\n                 (Char.IsLetterOrDigit(cki.KeyChar) || cki.KeyChar == &#39;_&#39;)) {\n               password.AppendChar(cki.KeyChar);\n               Console.SetCursorPosition(left+password.Length-1, top);\n               Console.Write(&#39;*&#39;);\n            }\n         }\n      } while (cki.Key != ConsoleKey.Enter &amp; password.Length &lt; 15);\n\n      // Make the password read-only to prevent modification.\n      password.MakeReadOnly();\n      // Dispose of the SecureString instance.\n      password.Dispose();\n   }\n}\n// This example displays output like the following:\n//    Enter your password (up to 15 letters, numbers, and underscores)\n//    Press BACKSPACE to delete the last character entered.\n//    Press Enter when done, or ESCAPE to quit:\n//    ************\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_SecureString_RemoveAt_System_Int32_\">\r\n    \r\n            <a id=\"System_Security_SecureString_RemoveAt_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RemoveAt(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Removes the character at the specified index position from this secure string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void RemoveAt (int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index position of a character in this secure string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This secure string has already been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>This secure string is read-only.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero, or greater than or equal to the length of this secure string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>An error occurred while protecting or unprotecting the value of this secure string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The index is zero-based; the first character in this instance is at index position zero.  </p>\n<p> If the implementation uses a protection mechanism, such as encryption, the value of this secure string, if any, is unprotected; the character at the specified index position is removed; then the new value is re-protected.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how the <a class=\"xref\" href=\"system.security.securestring#System_Security_SecureString_AppendChar_\" data-linktype=\"relative-path\">AppendChar</a>, <a class=\"xref\" href=\"system.security.securestring#System_Security_SecureString_InsertAt_\" data-linktype=\"relative-path\">InsertAt</a>, RemoveAt, <a class=\"xref\" href=\"system.security.securestring#System_Security_SecureString_SetAt_\" data-linktype=\"relative-path\">SetAt</a>, and <a class=\"xref\" href=\"system.security.securestring#System_Security_SecureString_Clear_\" data-linktype=\"relative-path\">Clear</a> methods affect the value of a <a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a> object.  </p>\n<pre><code class=\"lang-cpp\" name=\"SecureString.xAt#1\">using namespace System;\nusing namespace System::Security;\n\nvoid main()\n{\n    String^ msg = L&quot;   The current length of the SecureString object: {0}<br>&quot;;\n    SecureString ^ ss = gcnew SecureString;\n\n    Console::WriteLine(L&quot;1) Instantiate the SecureString object:&quot;);\n    Console::WriteLine(msg, ss-&gt;Length );\n\n    Console::WriteLine(L&quot;2) Append &#39;a&#39; to the value:&quot;);\n    ss-&gt;AppendChar(&#39;a&#39;);\n    Console::WriteLine(msg, ss-&gt;Length );\n\n    Console::WriteLine(L&quot;3) Append &#39;X&#39; to the value:&quot;);\n    ss-&gt;AppendChar(&#39;X&#39;);\n    Console::WriteLine(msg, ss-&gt;Length);\n\n    Console::WriteLine(L&quot;4) Append &#39;c&#39; to the value:&quot;);\n    ss-&gt;AppendChar(&#39;c&#39;);\n    Console::WriteLine(msg, ss-&gt;Length);\n\n    Console::WriteLine(L&quot;5) Insert &#39;d&#39; at the end of the value:&quot;);\n    ss-&gt;InsertAt(ss-&gt;Length, &#39;d&#39;);\n    Console::WriteLine(msg, ss-&gt;Length);\n\n    Console::WriteLine(L&quot;6) Remove the last character (&#39;d&#39;) from the value:&quot;);\n    ss-&gt;RemoveAt(3);\n    Console::WriteLine(msg, ss-&gt;Length);\n\n    Console::WriteLine(L&quot;7) Set the second character (&#39;X&#39;) of the value to &#39;b&#39;:&quot; );\n    ss-&gt;SetAt(1, &#39;b&#39;);\n    Console::WriteLine(msg, ss-&gt;Length );\n\n    Console::WriteLine(L&quot;8) Delete the value of the SecureString object:&quot;);\n    ss-&gt;Clear();\n    Console::WriteLine(msg, ss-&gt;Length);\n\n    delete ss;\n}\n\n/*\nThis code example produces the following results:\n\nThis example demonstrates the effect of the AppendChar, InsertAt,\nRemoveAt, SetAt, and Clear methods on the value of a SecureString\nobject. This example simulates the value of the object because the\nactual value is encrypted.\n\n1) The initial value of the SecureString object:\n   SecureString = &quot;&quot;\n   Length = 0\n\n2) AppendChar: Append &#39;a&#39; to the value:\n   SecureString = &quot;a&quot;\n   Length = 1\n\n3) AppendChar: Append &#39;X&#39; to the value:\n   SecureString = &quot;aX&quot;\n   Length = 2\n\n4) AppendChar: Append &#39;c&#39; to the value:\n   SecureString = &quot;aXc&quot;\n   Length = 3\n\n5) InsertAt: Insert &#39;d&#39; at the end of the value (equivalent\n     to AppendChar):\n   SecureString = &quot;aXcd&quot;\n   Length = 4\n\n6) RemoveAt: Remove the last character (&#39;d&#39;) from the value:\n   SecureString = &quot;aXc&quot;\n   Length = 3\n\n7) SetAt: Set the second character (&#39;X&#39;) of the value to &#39;b&#39;:\n   SecureString = &quot;abc&quot;\n   Length = 3\n\n8) Clear: Delete the value of the SecureString object:\n   SecureString = &quot;&quot;\n   Length = 0\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"SecureString.xAt#1\">using System;\nusing System.Security;\n\nclass Example\n{\n    public static void Main() \n    {\n       string msg = &quot;The curent length of the SecureString object: {0}<br>&quot;;\n       Console.WriteLine(&quot;1) Instantiate the SecureString object.&quot;);\n       SecureString ss = new SecureString();\n       Console.WriteLine(msg, ss.Length);\n\n       Console.WriteLine(&quot;2) Append &#39;a&#39; to the value.&quot;);\n       ss.AppendChar(&#39;a&#39;);\n       Console.WriteLine(msg, ss.Length);\n\n       Console.WriteLine(&quot;3) Append &#39;X&#39; to the value.&quot;);\n       ss.AppendChar(&#39;X&#39;);\n       Console.WriteLine(msg, ss.Length);\n\n       Console.WriteLine(&quot;4) Append &#39;c&#39; to the value.&quot;);\n       ss.AppendChar(&#39;c&#39;);\n       Console.WriteLine(msg, ss.Length);\n\n       Console.WriteLine(&quot;5) Insert &#39;d&#39; at the end of the value.&quot;);\n       ss.InsertAt(ss.Length, &#39;d&#39;);\n       Console.WriteLine(msg, ss.Length);\n\n       Console.WriteLine(&quot;6) Remove the last character (&#39;d&#39;) from the value.&quot;);\n       ss.RemoveAt(3);\n       Console.WriteLine(msg, ss.Length);\n\n       Console.WriteLine(&quot;7) Set the second character of the value to &#39;b&#39;.&quot;);\n       ss.SetAt(1, &#39;b&#39;);\n       Console.WriteLine(msg, ss.Length);\n\n       Console.WriteLine(&quot;8) Delete the value of the SecureString object:&quot;);\n       ss.Clear();\n       Console.WriteLine(msg, ss.Length);\n       \n       ss.Dispose();\n    }\n}\n// The example displays the following output:\n//       1) Instantiate the SecureString object.\n//       The curent length of the SecureString object: 0\n//\n//       2) Append &#39;a&#39; to the value.\n//       The curent length of the SecureString object: 1\n//\n//       3) Append &#39;X&#39; to the value.\n//       The curent length of the SecureString object: 2\n//\n//       4) Append &#39;c&#39; to the value.\n//       The curent length of the SecureString object: 3\n//\n//       5) Insert &#39;d&#39; at the end of the value.\n//       The curent length of the SecureString object: 4\n//\n//       6) Remove the last character (&#39;d&#39;) from the value.\n//       The curent length of the SecureString object: 3\n//\n//       7) Set the second character of the value to &#39;b&#39;.\n//       The curent length of the SecureString object: 3\n//\n//       8) Delete the value of the SecureString object:\n//       The curent length of the SecureString object: 0\n</code></pre><pre><code class=\"lang-vb\" name=\"SecureString.xAt#1\">Imports System.Security\n\nModule Example\n    Public Sub Main()\n       Dim msg As String = &quot;The curent length of the SecureString object: {0}&quot; + vbCrLf\n       Console.WriteLine(&quot;1) Instantiate the SecureString object.&quot;)\n       Dim ss As New SecureString()\n       Console.WriteLine(msg, ss.Length)\n\n       Console.WriteLine(&quot;2) Append &#39;a&#39; to the value.&quot;)\n       ss.AppendChar(&quot;a&quot;c)\n       Console.WriteLine(msg, ss.Length)\n\n       Console.WriteLine(&quot;3) Append &#39;X&#39; to the value.&quot;)\n       ss.AppendChar(&quot;X&quot;c)\n       Console.WriteLine(msg, ss.Length)\n\n       Console.WriteLine(&quot;4) Append &#39;c&#39; to the value.&quot;)\n       ss.AppendChar(&quot;c&quot;c)\n       Console.WriteLine(msg, ss.Length)\n\n       Console.WriteLine(&quot;5) Insert &#39;d&#39; at the end of the value.&quot;)\n       ss.InsertAt(ss.Length, &quot;d&quot;c)\n       Console.WriteLine(msg, ss.Length)\n\n       Console.WriteLine(&quot;6) Remove the last character (&#39;d&#39;) from the value.&quot;)\n       ss.RemoveAt(3)\n       Console.WriteLine(msg, ss.Length)\n\n       Console.WriteLine(&quot;7) Set the second character of the value to &#39;b&#39;.&quot;)\n       ss.SetAt(1, &quot;b&quot;c)\n       Console.WriteLine(msg, ss.Length)\n\n       Console.WriteLine(&quot;8) Delete the value of the SecureString object:&quot;)\n       ss.Clear()\n       Console.WriteLine(msg, ss.Length)\n\n       ss.Dispose()\n    End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       1) Instantiate the SecureString object.\n&#39;       The curent length of the SecureString object: 0\n&#39;\n&#39;       2) Append &#39;a&#39; to the value.\n&#39;       The curent length of the SecureString object: 1\n&#39;\n&#39;       3) Append &#39;X&#39; to the value.\n&#39;       The curent length of the SecureString object: 2\n&#39;\n&#39;       4) Append &#39;c&#39; to the value.\n&#39;       The curent length of the SecureString object: 3\n&#39;\n&#39;       5) Insert &#39;d&#39; at the end of the value.\n&#39;       The curent length of the SecureString object: 4\n&#39;\n&#39;       6) Remove the last character (&#39;d&#39;) from the value.\n&#39;       The curent length of the SecureString object: 3\n&#39;\n&#39;       7) Set the second character of the value to &#39;b&#39;.\n&#39;       The curent length of the SecureString object: 3\n&#39;\n&#39;       8) Delete the value of the SecureString object:\n&#39;       The curent length of the SecureString object: 0\n</code></pre><p> The following example demonstrates how the <a class=\"xref\" href=\"system.security.securestring#System_Security_SecureString_AppendChar_\" data-linktype=\"relative-path\">AppendChar</a> and RemoveAt methods can be used to collect the characters in a password.  </p>\n<pre><code class=\"lang-cpp\" name=\"SecureString.xChar#1\">using namespace System;\nusing namespace System::Security;\n\nvoid main()\n{\n   bool go = true;\n   ConsoleKeyInfo cki;\n   String^ m = L&quot;<br>Enter your password (up to 15 letters, numbers, and underscores)<br>&quot;\n               L&quot;Press BACKSPACE to delete the last character entered. &quot; +\n               L&quot;<br>Press Enter when done, or ESCAPE to quit:&quot;;\n   SecureString ^ password = gcnew SecureString;\n   int top;\n   int left;\n   \n   // The Console.TreatControlCAsInput property prevents CTRL+C from\n   // ending this example.\n   Console::TreatControlCAsInput = true;\n\n   Console::Clear();\n   Console::WriteLine(m);\n   \n   top = Console::CursorTop;\n   left = Console::CursorLeft;\n\n   do {\n      cki = Console::ReadKey(true);\n      if (cki.Key == ConsoleKey::Escape)\n         break;\n\n      if (cki.Key == ConsoleKey::Backspace){\n         if (password-&gt;Length &gt; 0) {\n            Console::SetCursorPosition(left + password-&gt;Length - 1, top);\n            Console::Write(&#39; &#39;);\n            Console::SetCursorPosition(left + password-&gt;Length - 1, top);\n            password-&gt;RemoveAt(password-&gt;Length - 1);\n         }\n      }\n      else {\n         if ((password-&gt;Length &lt; 15) &amp;&amp;\n             (Char::IsLetterOrDigit( cki.KeyChar ) ||\n              cki.KeyChar == &#39;_&#39;) ) {\n            password-&gt;AppendChar( cki.KeyChar );\n            Console::SetCursorPosition( left + password-&gt;Length - 1, top );\n            Console::Write(&quot;*&quot;);\n         }\n      }\n   } while (cki.Key != ConsoleKey::Enter &amp; password-&gt;Length &lt; 15);\n\n   // Make the password read-only to prevent modification.\n   password-&gt;MakeReadOnly();\n   // Dispose of the SecureString instance.\n   delete password;\n\n}\n// The example displays output like the following:\n//    Enter your password (up to 15 letters, numbers, and underscores)\n//    Press BACKSPACE to delete the last character entered.\n//    Press Enter when done, or ESCAPE to quit:\n//    ************\n</code></pre><pre><code class=\"lang-vb\" name=\"SecureString.xChar#1\">Imports System.Security\n\nClass Example\n   Public Shared Sub Main()\n      Dim cki As ConsoleKeyInfo\n      Dim m As String = vbCrLf &amp; &quot;Enter your password (up to 15 letters, numbers, and underscores)&quot; &amp;\n                        vbCrLf &amp; &quot;Press BACKSPACE to delete the last character entered. &quot; &amp; vbCrLf &amp;\n                        &quot;Press Enter when done, or ESCAPE to quit: &quot;\n      Dim password As New SecureString()\n      Dim top, left As Integer\n\n      &#39; The Console.TreatControlCAsInput property prevents CTRL+C from\n      &#39; ending this example.\n      Console.TreatControlCAsInput = True\n\n      Console.Clear()\n      Console.WriteLine(m)\n\n      top = Console.CursorTop\n      left = Console.CursorLeft\n\n      &#39; Read user input from the console. Store up to 15 letter, digit, or underscore\n      &#39; characters in a SecureString object, or delete a character if the user enters \n      &#39; a backspace. Display an asterisk (*) on the console to represent each character \n      &#39; that is stored.\n      \n      Do\n         cki = Console.ReadKey(True)\n         If cki.Key = ConsoleKey.Escape Then Exit Do\n\n         If cki.Key = ConsoleKey.Backspace Then\n            If password.Length &gt; 0 Then\n               Console.SetCursorPosition(left + password.Length - 1, top)\n               Console.Write(&quot; &quot;c)\n               Console.SetCursorPosition(left + password.Length - 1, top)\n               password.RemoveAt(password.Length - 1)\n            End If\n         Else\n            If password.Length &lt; 15 AndAlso([Char].IsLetterOrDigit(cki.KeyChar) _\n            OrElse cki.KeyChar = &quot;_&quot;c) Then\n               password.AppendChar(cki.KeyChar)\n               Console.SetCursorPosition(left + password.Length - 1, top)\n               Console.Write(&quot;*&quot;c)\n            End If\n         End If\n      Loop While cki.Key &lt;&gt; ConsoleKey.Enter And password.Length &lt; 15\n\n      &#39; Make the password read-only to prevent modification.\n      password.MakeReadOnly()\n      &#39; Dispose of the SecureString instance.\n      password.Dispose()\n   End Sub\nEnd Class\n&#39; The example displays output like the following:\n&#39;    Enter your password (up to 15 letters, numbers, and underscores)\n&#39;    Press BACKSPACE to delete the last character entered.\n&#39;    Press Enter when done, or ESCAPE to quit:\n&#39;    ************\n</code></pre><pre><code class=\"lang-cs\" name=\"SecureString.xChar#1\">using System;\nusing System.Security;\n\nclass Example\n{\n   public static void Main()\n   {\n      ConsoleKeyInfo cki;\n      String m = &quot;<br>Enter your password (up to 15 letters, numbers, and underscores)<br>&quot; +\n                 &quot;Press BACKSPACE to delete the last character entered. &quot; +\n                 &quot;<br>Press Enter when done, or ESCAPE to quit:&quot;;\n      SecureString password = new SecureString();\n      int top, left;\n\n      // The Console.TreatControlCAsInput property prevents CTRL+C from\n      // ending this example.\n      Console.TreatControlCAsInput = true;\n\n      Console.Clear();\n      Console.WriteLine(m);\n\n      top  = Console.CursorTop;\n      left = Console.CursorLeft;\n\n      // Read user input from the console. Store up to 15 letter, digit, or underscore\n      // characters in a SecureString object, or delete a character if the user enters\n      // a backspace. Display an asterisk (*) on the console to represent each character\n      // that is stored.\n\n      do {\n         cki = Console.ReadKey(true);\n         if (cki.Key == ConsoleKey.Escape) break;\n\n         if (cki.Key == ConsoleKey.Backspace) {\n            if (password.Length &gt; 0) {\n               Console.SetCursorPosition(left + password.Length - 1, top);\n               Console.Write(&#39; &#39;);\n               Console.SetCursorPosition(left + password.Length - 1, top);\n               password.RemoveAt(password.Length-1);\n            }\n         }\n         else {\n            if ((password.Length &lt; 15) &amp;&amp;\n                 (Char.IsLetterOrDigit(cki.KeyChar) || cki.KeyChar == &#39;_&#39;)) {\n               password.AppendChar(cki.KeyChar);\n               Console.SetCursorPosition(left+password.Length-1, top);\n               Console.Write(&#39;*&#39;);\n            }\n         }\n      } while (cki.Key != ConsoleKey.Enter &amp; password.Length &lt; 15);\n\n      // Make the password read-only to prevent modification.\n      password.MakeReadOnly();\n      // Dispose of the SecureString instance.\n      password.Dispose();\n   }\n}\n// This example displays output like the following:\n//    Enter your password (up to 15 letters, numbers, and underscores)\n//    Press BACKSPACE to delete the last character entered.\n//    Press Enter when done, or ESCAPE to quit:\n//    ************\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_SecureString_SetAt_System_Int32_System_Char_\">\r\n    \r\n            <a id=\"System_Security_SecureString_SetAt_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetAt(Int32,Char)</div>        \r\n          </div>\r\n    \r\n            <p>Replaces the existing character at the specified index position with another character.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetAt (int index, char c);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index position of an existing character in this secure string</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>c</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A character that replaces the existing character.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This secure string has already been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>This secure string is read-only.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero, or greater than or equal to the length of this secure string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>An error occurred while protecting or unprotecting the value of this secure string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The index is zero-based; the first character in this instance is at index position zero.  </p>\n<p> If the implementation uses a protection mechanism, such as encryption, the value of the secure string, if any, is unprotected; <code>c</code> is assigned to the specified index position; then the new value is re-protected.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how the <a class=\"xref\" href=\"system.security.securestring#System_Security_SecureString_AppendChar_\" data-linktype=\"relative-path\">AppendChar</a>, <a class=\"xref\" href=\"system.security.securestring#System_Security_SecureString_InsertAt_\" data-linktype=\"relative-path\">InsertAt</a>, <a class=\"xref\" href=\"system.security.securestring#System_Security_SecureString_RemoveAt_\" data-linktype=\"relative-path\">RemoveAt</a>, SetAt, and <a class=\"xref\" href=\"system.security.securestring#System_Security_SecureString_Clear_\" data-linktype=\"relative-path\">Clear</a> methods affect the value of a <a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a> object.  </p>\n<pre><code class=\"lang-cpp\" name=\"SecureString.xAt#1\">using namespace System;\nusing namespace System::Security;\n\nvoid main()\n{\n    String^ msg = L&quot;   The current length of the SecureString object: {0}<br>&quot;;\n    SecureString ^ ss = gcnew SecureString;\n\n    Console::WriteLine(L&quot;1) Instantiate the SecureString object:&quot;);\n    Console::WriteLine(msg, ss-&gt;Length );\n\n    Console::WriteLine(L&quot;2) Append &#39;a&#39; to the value:&quot;);\n    ss-&gt;AppendChar(&#39;a&#39;);\n    Console::WriteLine(msg, ss-&gt;Length );\n\n    Console::WriteLine(L&quot;3) Append &#39;X&#39; to the value:&quot;);\n    ss-&gt;AppendChar(&#39;X&#39;);\n    Console::WriteLine(msg, ss-&gt;Length);\n\n    Console::WriteLine(L&quot;4) Append &#39;c&#39; to the value:&quot;);\n    ss-&gt;AppendChar(&#39;c&#39;);\n    Console::WriteLine(msg, ss-&gt;Length);\n\n    Console::WriteLine(L&quot;5) Insert &#39;d&#39; at the end of the value:&quot;);\n    ss-&gt;InsertAt(ss-&gt;Length, &#39;d&#39;);\n    Console::WriteLine(msg, ss-&gt;Length);\n\n    Console::WriteLine(L&quot;6) Remove the last character (&#39;d&#39;) from the value:&quot;);\n    ss-&gt;RemoveAt(3);\n    Console::WriteLine(msg, ss-&gt;Length);\n\n    Console::WriteLine(L&quot;7) Set the second character (&#39;X&#39;) of the value to &#39;b&#39;:&quot; );\n    ss-&gt;SetAt(1, &#39;b&#39;);\n    Console::WriteLine(msg, ss-&gt;Length );\n\n    Console::WriteLine(L&quot;8) Delete the value of the SecureString object:&quot;);\n    ss-&gt;Clear();\n    Console::WriteLine(msg, ss-&gt;Length);\n\n    delete ss;\n}\n\n/*\nThis code example produces the following results:\n\nThis example demonstrates the effect of the AppendChar, InsertAt,\nRemoveAt, SetAt, and Clear methods on the value of a SecureString\nobject. This example simulates the value of the object because the\nactual value is encrypted.\n\n1) The initial value of the SecureString object:\n   SecureString = &quot;&quot;\n   Length = 0\n\n2) AppendChar: Append &#39;a&#39; to the value:\n   SecureString = &quot;a&quot;\n   Length = 1\n\n3) AppendChar: Append &#39;X&#39; to the value:\n   SecureString = &quot;aX&quot;\n   Length = 2\n\n4) AppendChar: Append &#39;c&#39; to the value:\n   SecureString = &quot;aXc&quot;\n   Length = 3\n\n5) InsertAt: Insert &#39;d&#39; at the end of the value (equivalent\n     to AppendChar):\n   SecureString = &quot;aXcd&quot;\n   Length = 4\n\n6) RemoveAt: Remove the last character (&#39;d&#39;) from the value:\n   SecureString = &quot;aXc&quot;\n   Length = 3\n\n7) SetAt: Set the second character (&#39;X&#39;) of the value to &#39;b&#39;:\n   SecureString = &quot;abc&quot;\n   Length = 3\n\n8) Clear: Delete the value of the SecureString object:\n   SecureString = &quot;&quot;\n   Length = 0\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"SecureString.xAt#1\">using System;\nusing System.Security;\n\nclass Example\n{\n    public static void Main() \n    {\n       string msg = &quot;The curent length of the SecureString object: {0}<br>&quot;;\n       Console.WriteLine(&quot;1) Instantiate the SecureString object.&quot;);\n       SecureString ss = new SecureString();\n       Console.WriteLine(msg, ss.Length);\n\n       Console.WriteLine(&quot;2) Append &#39;a&#39; to the value.&quot;);\n       ss.AppendChar(&#39;a&#39;);\n       Console.WriteLine(msg, ss.Length);\n\n       Console.WriteLine(&quot;3) Append &#39;X&#39; to the value.&quot;);\n       ss.AppendChar(&#39;X&#39;);\n       Console.WriteLine(msg, ss.Length);\n\n       Console.WriteLine(&quot;4) Append &#39;c&#39; to the value.&quot;);\n       ss.AppendChar(&#39;c&#39;);\n       Console.WriteLine(msg, ss.Length);\n\n       Console.WriteLine(&quot;5) Insert &#39;d&#39; at the end of the value.&quot;);\n       ss.InsertAt(ss.Length, &#39;d&#39;);\n       Console.WriteLine(msg, ss.Length);\n\n       Console.WriteLine(&quot;6) Remove the last character (&#39;d&#39;) from the value.&quot;);\n       ss.RemoveAt(3);\n       Console.WriteLine(msg, ss.Length);\n\n       Console.WriteLine(&quot;7) Set the second character of the value to &#39;b&#39;.&quot;);\n       ss.SetAt(1, &#39;b&#39;);\n       Console.WriteLine(msg, ss.Length);\n\n       Console.WriteLine(&quot;8) Delete the value of the SecureString object:&quot;);\n       ss.Clear();\n       Console.WriteLine(msg, ss.Length);\n       \n       ss.Dispose();\n    }\n}\n// The example displays the following output:\n//       1) Instantiate the SecureString object.\n//       The curent length of the SecureString object: 0\n//\n//       2) Append &#39;a&#39; to the value.\n//       The curent length of the SecureString object: 1\n//\n//       3) Append &#39;X&#39; to the value.\n//       The curent length of the SecureString object: 2\n//\n//       4) Append &#39;c&#39; to the value.\n//       The curent length of the SecureString object: 3\n//\n//       5) Insert &#39;d&#39; at the end of the value.\n//       The curent length of the SecureString object: 4\n//\n//       6) Remove the last character (&#39;d&#39;) from the value.\n//       The curent length of the SecureString object: 3\n//\n//       7) Set the second character of the value to &#39;b&#39;.\n//       The curent length of the SecureString object: 3\n//\n//       8) Delete the value of the SecureString object:\n//       The curent length of the SecureString object: 0\n</code></pre><pre><code class=\"lang-vb\" name=\"SecureString.xAt#1\">Imports System.Security\n\nModule Example\n    Public Sub Main()\n       Dim msg As String = &quot;The curent length of the SecureString object: {0}&quot; + vbCrLf\n       Console.WriteLine(&quot;1) Instantiate the SecureString object.&quot;)\n       Dim ss As New SecureString()\n       Console.WriteLine(msg, ss.Length)\n\n       Console.WriteLine(&quot;2) Append &#39;a&#39; to the value.&quot;)\n       ss.AppendChar(&quot;a&quot;c)\n       Console.WriteLine(msg, ss.Length)\n\n       Console.WriteLine(&quot;3) Append &#39;X&#39; to the value.&quot;)\n       ss.AppendChar(&quot;X&quot;c)\n       Console.WriteLine(msg, ss.Length)\n\n       Console.WriteLine(&quot;4) Append &#39;c&#39; to the value.&quot;)\n       ss.AppendChar(&quot;c&quot;c)\n       Console.WriteLine(msg, ss.Length)\n\n       Console.WriteLine(&quot;5) Insert &#39;d&#39; at the end of the value.&quot;)\n       ss.InsertAt(ss.Length, &quot;d&quot;c)\n       Console.WriteLine(msg, ss.Length)\n\n       Console.WriteLine(&quot;6) Remove the last character (&#39;d&#39;) from the value.&quot;)\n       ss.RemoveAt(3)\n       Console.WriteLine(msg, ss.Length)\n\n       Console.WriteLine(&quot;7) Set the second character of the value to &#39;b&#39;.&quot;)\n       ss.SetAt(1, &quot;b&quot;c)\n       Console.WriteLine(msg, ss.Length)\n\n       Console.WriteLine(&quot;8) Delete the value of the SecureString object:&quot;)\n       ss.Clear()\n       Console.WriteLine(msg, ss.Length)\n\n       ss.Dispose()\n    End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       1) Instantiate the SecureString object.\n&#39;       The curent length of the SecureString object: 0\n&#39;\n&#39;       2) Append &#39;a&#39; to the value.\n&#39;       The curent length of the SecureString object: 1\n&#39;\n&#39;       3) Append &#39;X&#39; to the value.\n&#39;       The curent length of the SecureString object: 2\n&#39;\n&#39;       4) Append &#39;c&#39; to the value.\n&#39;       The curent length of the SecureString object: 3\n&#39;\n&#39;       5) Insert &#39;d&#39; at the end of the value.\n&#39;       The curent length of the SecureString object: 4\n&#39;\n&#39;       6) Remove the last character (&#39;d&#39;) from the value.\n&#39;       The curent length of the SecureString object: 3\n&#39;\n&#39;       7) Set the second character of the value to &#39;b&#39;.\n&#39;       The curent length of the SecureString object: 3\n&#39;\n&#39;       8) Delete the value of the SecureString object:\n&#39;       The curent length of the SecureString object: 0\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Security.SecureString.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.SecureString.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.SecureString\">\r\n<meta name=\"APIName\" content=\"System.Security.SecureString..ctor\">\r\n<meta name=\"APIName\" content=\"System.Security.SecureString.AppendChar\">\r\n<meta name=\"APIName\" content=\"System.Security.SecureString.Clear\">\r\n<meta name=\"APIName\" content=\"System.Security.SecureString.Copy\">\r\n<meta name=\"APIName\" content=\"System.Security.SecureString.Dispose\">\r\n<meta name=\"APIName\" content=\"System.Security.SecureString.InsertAt\">\r\n<meta name=\"APIName\" content=\"System.Security.SecureString.IsReadOnly\">\r\n<meta name=\"APIName\" content=\"System.Security.SecureString.Length\">\r\n<meta name=\"APIName\" content=\"System.Security.SecureString.MakeReadOnly\">\r\n<meta name=\"APIName\" content=\"System.Security.SecureString.RemoveAt\">\r\n<meta name=\"APIName\" content=\"System.Security.SecureString.SetAt\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"2416d03f-14af-a2f5-c38a-d61beddf0862\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Security\\SecureString.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents text that should be kept confidential, such as by deleting it from computer memory when no longer needed. This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Security/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.SecureString\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Security.SecureString.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.SecureString.yml","open_to_public_contributors":true,"api_name":["System.Security.SecureString","System.Security.SecureString..ctor","System.Security.SecureString.AppendChar","System.Security.SecureString.Clear","System.Security.SecureString.Copy","System.Security.SecureString.Dispose","System.Security.SecureString.InsertAt","System.Security.SecureString.IsReadOnly","System.Security.SecureString.Length","System.Security.SecureString.MakeReadOnly","System.Security.SecureString.RemoveAt","System.Security.SecureString.SetAt"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.SecureString","System::Security::SecureString","System.Security.SecureString.#ctor","System::Security::SecureString::#ctor","System.Security.SecureString.AppendChar","System::Security::SecureString::AppendChar","System.Security.SecureString.Clear","System::Security::SecureString::Clear","System.Security.SecureString.Copy","System::Security::SecureString::Copy","System.Security.SecureString.Dispose","System::Security::SecureString::Dispose","System.Security.SecureString.InsertAt","System::Security::SecureString::InsertAt","System.Security.SecureString.IsReadOnly","System::Security::SecureString::IsReadOnly","System.Security.SecureString.Length","System::Security::SecureString::Length","System.Security.SecureString.MakeReadOnly","System::Security::SecureString::MakeReadOnly","System.Security.SecureString.RemoveAt","System::Security::SecureString::RemoveAt","System.Security.SecureString.SetAt","System::Security::SecureString::SetAt"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"2416d03f-14af-a2f5-c38a-d61beddf0862","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Security\\SecureString.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Security/SecureString.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"SecureString class | Microsoft Docs","_op_ogTitle":"SecureString class","description":"Represents text that should be kept confidential, such as by deleting it from computer memory when no longer needed. This class cannot be inherited.\n","toc_asset_id":"_splitted/System.Security/toc.json","toc_rel":"_splitted/System.Security/toc.json","source_url":"","ms.assetid":"System.Security.SecureString","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.securestring","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.securestring","fileRelativePath":"System.Security.SecureString.html"},"themesRelativePathToOutputRoot":"_themes/"}